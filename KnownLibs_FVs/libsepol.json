{"globalvars": ["CIL_KEY_NODE", "CIL_KEY_IOMEMCON", "CIL_KEY_AND", "CIL_KEY_HLL_LMX", "cil_log_handler", "CIL_KEY_CONS_T3", "CIL_KEY_CLASSPERMISSION", "CIL_KEY_MACRO", "CIL_KEY_CLASSMAPPING", "CIL_KEY_TRANS", "CIL_KEY_BLOCKABSTRACT", "CIL_KEY_DONTAUDIT", "CIL_KEY_PERM", "CIL_KEY_DEFAULTTYPE", "cil_yyleng", "CIL_KEY_NEVERALLOWX", "cil_yyout", "CIL_KEY_AUDITALLOW", "CIL_KEY_VALIDATETRANS", "CIL_KEY_DONTAUDITX", "CIL_KEY_USERATTRIBUTE", "CIL_KEY_TYPETRANSITION", "CIL_KEY_USERRANGE", "CIL_KEY_HANDLEUNKNOWN_ALLOW", "CIL_KEY_OBJECT_R", "CIL_KEY_CONS_L1", "CIL_KEY_CONS_H2", "CIL_KEY_NAME", "CIL_KEY_PORTCON", "cil_yytext", "CIL_KEY_ROLEATTRIBUTE", "CIL_KEY_ROLETYPE", "CIL_KEY_CONDFALSE", "CIL_KEY_DEVICETREECON", "CIL_KEY_SENSITIVITY", "CIL_KEY_SENSCAT", "CIL_KEY_CHAR", "CIL_KEY_CATALIASACTUAL", "CIL_KEY_STRING", "CIL_KEY_LEVELRANGE", "CIL_KEY_CONS_DOMBY", "CIL_KEY_NOT", "sepol_compat_handle", "CIL_KEY_SENSALIASACTUAL", "CIL_KEY_SYMLINK", "cil_sym_sizes", "CIL_KEY_CONS_L2", "CIL_KEY_PIRQCON", "CIL_KEY_CONS_DOM", "CIL_KEY_BOOLEANIF", "CIL_KEY_COMMON", "CIL_KEY_ALL", "CIL_KEY_CONS_U1", "CIL_KEY_DEFAULTUSER", "CIL_KEY_USERROLE", "CIL_KEY_USERPREFIX", "cil_yy_flex_debug", "CIL_KEY_DIR", "CIL_KEY_CATEGORY", "CIL_KEY_CATALIAS", "CIL_KEY_BLOCK", "CIL_KEY_NEVERALLOW", "CIL_KEY_EQ", "CIL_KEY_DEFAULTROLE", "CIL_KEY_RANGE", "CIL_KEY_STAR", "CIL_KEY_POLICYCAP", "CIL_KEY_ROLEATTRIBUTESET", "CIL_KEY_TYPE", "CIL_KEY_UNORDERED", "CIL_KEY_XATTR", "CIL_KEY_CONS_INCOMP", "CIL_KEY_GENFSCON", "value", "cil_yylineno", "CIL_KEY_TYPEATTRIBUTESET", "CIL_KEY_NETIFCON", "CIL_KEY_ALLOW", "CIL_KEY_DCCP", "CIL_KEY_USERATTRIBUTESET", "CIL_KEY_TYPEALIAS", "CIL_KEY_CONS_R3", "CIL_KEY_ROOT", "CIL_KEY_XOR", "CIL_KEY_OPTIONAL", "CIL_KEY_TYPEMEMBER", "CIL_KEY_BOOL", "CIL_KEY_LOW_HIGH", "CIL_KEY_CLASSPERMISSIONSET", "CIL_KEY_SELF", "CIL_KEY_AUDITALLOWX", "CIL_KEY_TYPECHANGE", "cil_yyin", "CIL_KEY_SRC_HLL", "line", "CIL_KEY_IN", "CIL_KEY_TUNABLEIF", "CIL_KEY_UDP", "CIL_KEY_HANDLEUNKNOWN", "CIL_KEY_SIDORDER", "CIL_KEY_IBENDPORTCON", "CIL_KEY_TYPEBOUNDS", "CIL_KEY_CATSET", "CIL_KEY_HIGH", "CIL_KEY_IBPKEYCON", "CIL_KEY_CLASSORDER", "CIL_KEY_LOW", "CIL_KEY_CONS_R2", "CIL_KEY_SOCKET", "CIL_KEY_ROLE", "CIL_KEY_TUNABLE", "CIL_KEY_BLOCKINHERIT", "CIL_KEY_SELINUXUSERDEFAULT", "CIL_KEY_HANDLEUNKNOWN_REJECT", "CIL_KEY_IOCTL", "CIL_KEY_ROLEBOUNDS", "CIL_KEY_IOPORTCON", "CIL_KEY_IPADDR", "CIL_KEY_MLSVALIDATETRANS", "CIL_KEY_EXPANDTYPEATTRIBUTE", "CIL_KEY_HLL_LMS", "policydb_target_strings", "CIL_KEY_ALLOWX", "CIL_KEY_USERLEVEL", "CIL_KEY_ROLETRANSITION", "CIL_KEY_CALL", "CIL_KEY_LEVEL", "CIL_KEY_NODECON", "CIL_KEY_SRC_INFO", "CIL_KEY_SRC_CIL", "CIL_KEY_FSUSE", "CIL_KEY_ANY", "CIL_KEY_CONDTRUE", "CIL_KEY_NEQ", "CIL_KEY_CONSTRAIN", "CIL_KEY_SENSITIVITYORDER", "CIL_KEY_TYPEATTRIBUTE", "CIL_KEY_HANDLEUNKNOWN_DENY", "CIL_KEY_HLL_LME", "CIL_KEY_USERBOUNDS", "CIL_KEY_CLASS", "CIL_KEY_RANGETRANSITION", "CIL_KEY_PCIDEVICECON", "CIL_KEY_CONS_T2", "CIL_KEY_SENSALIAS", "CIL_KEY_TYPEALIASACTUAL", "CIL_KEY_CONS_T1", "CIL_KEY_CONS_U2", "cil_mem_error_handler", "CIL_KEY_SIDCONTEXT", "CIL_KEY_SOURCE", "CIL_KEY_OR", "CIL_KEY_TASK", "CIL_KEY_MLS", "CIL_KEY_CONTEXT", "CIL_KEY_MAP_CLASS", "CIL_KEY_CATORDER", "CIL_KEY_PIPE", "CIL_KEY_CONS_H1", "CIL_KEY_CONS_R1", "CIL_KEY_TARGET", "CIL_KEY_TCP", "CIL_KEY_DEFAULTRANGE", "CIL_KEY_USER", "out_file", "CIL_KEY_CONS_U3", "CIL_KEY_ROLEALLOW", "CIL_KEY_SID", "CIL_KEY_CLASSCOMMON", "CIL_KEY_GLOB", "CIL_KEY_TYPEPERMISSIVE", "CIL_KEY_FILE", "CIL_KEY_FILECON", "CIL_KEY_PERMISSIONX", "CIL_KEY_MLSCONSTRAIN", "CIL_KEY_SELINUXUSER"], "importedglobals": [], "importedfunctions": ["strtol", "inet_ntop", "malloc", "fclose", "memcmp", "strcmp", "ferror", "exit", "calloc", "getc", "memcpy", "strncasecmp", "pthread_mutex_lock", "fopen", "strcpy", "strtok_r", "free", "strlen", "strncpy", "__vsprintf_chk", "isalpha", "__memcpy_chk", "pthread_mutex_unlock", "atoi", "strcasecmp", "fseek", "isatty", "printf", "fileno", "__register_atfork", "__strcpy_chk", "inet_pton", "__errno", "isspace", "realloc", "ftell", "fread", "getline", "strncmp", "__strcat_chk", "strerror", "isalnum", "__fsetlocking", "fstat", "_exit", "strdup", "strtoull", "fputc", "puts", "vasprintf", "stpcpy", "fputs", "strrchr", "strstr", "__vsnprintf_chk", "vfprintf", "__strlen_chk", "fprintf", "strchr", "fwrite", "clearerr", "__stack_chk_fail", "qsort", "memset", "strndup"], "exportedfunctions": ["__cil_levelrange_to_mls_range", "strs_read_at_index", "range_trans_rule_list_destroy", "cil_sid_init", "__cil_verify_initsids", "cil_resolve_roleallow", "sepol_policydb_to_image", "sepol_port_modify", "sepol_bool_free", "avtab_insert_nonunique", "bounds_check_type", "sepol_node_get_proto", "cond_expr_equal", "policydb_index_bools", "sepol_module_package_get_policy", "cil_destroy_selinuxuser", "sepol_mls_contains", "scope_destroy", "cil_userlevel_init", "cil_copy_ibendportcon", "__cil_verify_role", "user_datum_destroy", "sepol_role_exists", "__cil_copy_node_helper", "cil_resolve_level", "__cil_pre_verify_helper", "sepol_user_get_mlsrange", "cil_stack_push", "cond_node_destroy", "cil_yy_create_buffer", "cil_symtab_datum_init", "hashtab_remove", "__cil_ordered_lists_reset", "cil_copy_iomemcon", "cil_db_destroy", "tokenize", "sepol_expand_module", "ocontext_selinux_free", "cil_copy_mls", "__cil_verify_devicetreecon", "stack_init", "cil_resolve_typeattributeset", "cil_complex_symtab_init", "cil_macro_init", "cond_node_search", "sepol_node_set_addr_bytes", "__cil_binary_create_helper", "sepol_node_query", "cil_type_used", "cil_resolve_selinuxuser", "range_trans_rule_init", "cil_stack_destroy", "cil_tree_get_next_path", "__cil_ordered_list_destroy", "cil_destroy_classcommon", "__cil_common_val_array_insert", "cil_expand_class", "cil_resolve_rangetransition", "sepol_genbools_policydb", "cil_rangetransition_init", "cil_validatetrans_init", "__cil_verify_levelrange", "hashtab_replace", "cil_symtab_array_init", "sepol_module_package_set_file_contexts", "add_i_to_a", "cil_resolve_expandtypeattribute", "sepol_genusers_policydb", "avrule_block_list_destroy", "cil_compile", "cil_fill_list", "cil_copy_tunable", "cil_resolve_typepermissive", "__cil_policydb_create", "sepol_bool_get_name", "sepol_printf", "cil_copy_default", "sepol_node_get_proto_str", "sepol_set_preserve_tunables", "sepol_user_key_create", "cil_ibendportcon_init", "sepol_user_get_name", "cil_alias_init", "cil_defaultrange_init", "cil_destroy_policycap", "cil_symtab_array_destroy", "cil_gen_condblock", "cil_userlevel_userrange_to_policydb", "stack_empty", "cil_src_info_init", "cil_set_log_level", "cil_resolve_classperms_set", "mls_setup_user_range", "cil_destroy_blockabstract", "cil_devicetreecon_init", "cil_destroy_validatetrans", "cil_gen_classcommon", "sepol_port_set_proto", "cil_copy_block", "role_allow_rule_destroy", "cil_destroy_name", "avtab_hash_eval", "cil_copy_genfscon", "cil_set_disable_dontaudit", "cil_resolve_expr", "sepol_extended_perms_to_string", "cil_destroy_sid", "sepol_port_create", "cil_userattributeset_init", "type_set_init", "cil_ibpkeycon_init", "sepol_get_preserve_tunables", "cil_copy_sidorder", "cil_copy_nodecon", "cil_copy_ast", "cil_resolve_userrole", "avtab_search_node", "cil_constrain_init", "cil_gen_type", "cil_tree_print_perm_strs", "cil_destroy_data", "sepol_module_package_get_user_extra", "cil_copy_role", "cil_gen_typeattribute", "type_datum_init", "cil_gen_sensitivityorder", "cil_log", "cil_gen_block", "cil_copy_fill_permissionx", "sepol_bool_clone", "filename_trans_rule_list_destroy", "sepol_user_key_unpack", "cil_selinuxuser_init", "sepol_module_policydb_to_cil", "sepol_policydb_set_handle_unknown", "cil_destroy_bool", "cil_fill_level", "cil_gen_defaultrange", "cil_yyset_in", "__cil_verify_rule", "cond_copy_expr", "cil_netifcon_to_policydb", "cil_filecons_to_string", "sepol_node_key_extract", "type_set_or_eq", "cil_copy_filecon", "cil_destroy_macro", "cil_resolve_name_call_args", "cil_fqn_qualify", "cil_resolve_iomemcon", "cil_gen_perm", "cil_post_ibendportcon_context_compare", "sepol_string_to_av_perm", "cil_destroy_classorder", "sepol_context_set_mls", "cil_destroy_roleallow", "expand_rule", "constraint_expr_destroy", "is_id_enabled", "cil_pcidevicecon_init", "cil_post_genfscon_context_compare", "policydb_destroy", "stack_destroy", "cil_gen_common", "sepol_module_package_get_seusers", "cil_gen_bounds", "cil_destroy_catorder", "type_set_destroy", "cil_gen_pcidevicecon", "__cil_verify_named_levelrange", "range_trans_rule_destroy", "sepol_iface_clone", "cil_destroy_type", "cil_yy_scan_string", "cil_sens_init", "cil_set_cat_values", "cil_levelrange_init", "cil_copy_node", "sepol_port_key_create", "cil_lexer_destroy", "sepol_policydb_set_typevers", "cil_role_bounds_to_policydb", "__cil_verify_permissionx", "sepol_sidtab_remove", "sepol_genbools_array", "ebitmap_xor", "avtab_alloc", "cil_copy_constrain", "cil_typepermissive_init", "cil_destroy_ibpkeycon", "cil_copy_sid", "__cil_verify_nodecon", "cil_gen_call", "__cil_verify_booleanif", "cil_destroy_userrole", "sepol_node_compare", "cil_vlog", "sepol_node_set_addr", "sepol_policydb_free", "cond_normalize_expr", "cil_destroy_blockinherit", "cil_post_devicetreecon_compare", "cil_resolve_senscat", "mls_semantic_cat_destroy", "cond_av_list_search", "sepol_context_get_user", "cil_gen_blockinherit", "expand_module", "hashtab_search", "next_entry", "sepol_sidtab_shutdown", "cil_verify_constraint_leaf_expr_syntax", "__cil_cat_val_array_insert", "cil_sidcontext_init", "cil_copy_catorder", "cil_clear_node", "sepol_iface_key_create", "cil_list_item_destroy", "context_from_string", "cil_typetransition_to_policydb", "strs_len_items", "cil_destroy_default", "__cil_constrain_expr_datum_to_sepol_expr", "sepol_context_to_sid", "cil_destroy_avrule", "ebitmap_union", "cil_yyrestart", "policydb_context_isvalid", "cil_copy_blockabstract", "cil_copy_permissionx", "cil_list_prepend", "__cil_node_to_policydb", "sepol_user_free", "cil_gen_ibendportcon", "cil_avrule_to_policydb", "cil_destroy_roleattribute", "cil_resolve_genfscon", "cil_gen_level", "cil_tree_print_classperms_list", "mls_compute_context_len", "cil_gen_roletransition", "cil_copy_classperms_list", "cil_yypush_buffer_state", "type_datum_destroy", "cil_resolve_userlevel", "cil_gen_portcon", "__cil_constrain_expr_leaf_to_sepol_expr", "cil_destroy_userrange", "context_to_string", "ebitmap_match_any", "cil_permissionx_init", "cil_copy_userprefix", "cil_yyget_text", "cil_gen_map_class", "cil_resolve_classmapping", "cil_complex_symtab_hash", "cil_complex_symtab_search", "__cil_type_val_array_insert", "cil_get_symtab", "cil_print_recursive_call", "__cil_verify_ranges", "cil_stack_init", "cil_copy_typeattribute", "cil_destroy_roletype", "cil_copy_typeattributeset", "cil_resolve_classpermissionset", "cil_gen_bool", "cil_post_netifcon_context_compare", "avrule_block_create", "sepol_av_to_string", "cil_destroy_classpermissionset", "cil_post_fsuse_context_compare", "cil_pcidevicecon_to_policydb", "cil_copy_avrule", "cil_root_destroy", "cil_copy_ibpkeycon", "cil_resolve_roletype", "class_perm_node_init", "create_str", "cil_ibendportcon_to_policydb", "role_set_init", "cil_typeattribute_to_bitmap", "cil_destroy_tunable", "cil_cond_av_list_search", "cil_gen_in", "__cil_insert_type_rule", "sepol_module_package_set_seusers", "cil_fill_perms", "cil_type_init", "cil_gen_ioportcon", "cil_resolve_userprefix", "cil_sensorder_init", "mls_semantic_range_expand", "cil_yypop_buffer_state", "cil_resolve_classperms_list", "cil_destroy_userlevel", "sepol_sidtab_insert", "hashtab_ordered_to_strs", "cil_copy_classorder", "__cil_verify_named_context", "sepol_node_set_proto", "check_assertions", "sepol_sidtab_context_to_sid", "sepol_iface_iterate", "avtab_map", "cil_destroy_expandtypeattribute", "cil_name_init", "__cil_verify_portcon", "cil_destroy_pirqcon", "cil_copy_userlevel", "stack_pop", "cil_ioportcon_to_policydb", "cil_gen_sidorder", "symtab_destroy", "cil_post_filecon_context_compare", "cil_typeattribute_to_policydb", "mls_convert_context", "sepol_node_key_free", "sepol_node_exists", "__cil_verify_genfscon", "cil_post_nodecon_context_compare", "cil_list_append", "cil_destroy_sidorder", "sepol_fs_sid", "sepol_validate_transition", "ebitmap_and", "cil_copy_roletransition", "cil_gen_type_rule", "sepol_log_err", "cil_gen_iomemcon", "cil_userattribute_init", "cil_print_recursive_blockinherit", "sepol_port_set_con", "policydb_index_others", "avtab_read_item", "cil_sort_init", "sort_ocontexts", "avtab_search_node_next", "cil_gen_role", "sepol_module_package_set_user_extra", "cil_typeattribute_init", "cil_genfscon_to_policydb", "cil_copy_fill_context", "cil_copy_handleunknown", "cil_portcon_to_policydb", "cil_yyalloc", "cil_list_append_item", "cil_resolve_sidcontext", "cil_yyset_lineno", "avtab_read", "cil_resolve_blockabstract", "cil_list_destroy", "cil_resolve_filecon", "sepol_msg_set_callback", "sepol_role_list", "cil_copy_fill_level", "cil_list_item_init", "sepol_sidtab_set", "__cil_verify_filecon", "__cil_policydb_val_arrays_create", "cil_destroy_userprefix", "sepol_iface_exists", "ebitmap_cmp", "sepol_sidtab_map_remove_on_error", "__cil_constrain_expr_to_sepol_expr", "cil_mls_init", "sepol_bool_compare2", "sepol_validate_transition_reason_buffer", "cil_copy_classpermissionset", "cil_yyget_leng", "sepol_module_package_read", "cil_userrole_init", "sepol_policy_file_create", "type_set_expand", "cil_yyset_debug", "cil_destroy_levelrange", "cil_post_devicetreecon_context_compare", "sepol_check_context", "cil_roleattributeset_init", "sepol_kernel_policydb_to_conf", "sepol_polcap_getnum", "cil_stack_is_empty", "cil_blockabstract_init", "cil_stack_peek_at", "cil_symtab_datum_destroy", "sepol_ibendport_sid", "cil_tree_print_cats", "sepol_user_compare2", "__cil_verify_levelrange_cats", "sepol_context_get_mls", "sepol_port_key_unpack", "cil_copy_userattributeset", "cil_symtab_destroy", "cond_policydb_destroy", "ebitmap_to_str", "sepol_set_policydb_from_file", "__cil_policydb_init", "strs_write_each", "cil_set_disable_neverallow", "cil_copy_perm", "cil_destroy_ioportcon", "cil_yyfree", "cil_destroy_boolif", "sepol_iface_count", "sepol_module_package_set_netfilter_contexts", "cil_sepol_level_define", "sepol_node_count", "cil_avrulex_to_hashtable", "cil_gen_src_info", "cil_user_init", "avrule_block_destroy", "hashtab_map_remove_on_error", "__cil_context_to_sepol_context", "cil_gen_userrole", "cil_write_policy_conf", "cond_init_bool_indexes", "mls_compute_sid", "cil_gen_roleallow", "cil_classorder_to_policydb", "cil_resolve_name", "cil_policycap_init", "cil_gen_userattributeset", "sepol_bool_create", "cil_gen_expr", "cil_sensalias_to_policydb", "sepol_iface_free", "cil_pirqcon_init", "cil_copy_roletype", "cil_set_mls", "cil_copy_bounds", "cil_find_matching_avrule", "cond_policydb_init", "ebitmap_hamming_distance", "mls_semantic_range_destroy", "cil_copy_condblock", "cil_set_target_platform", "cil_bounds_init", "__cil_ordered_find_match", "__cil_verify_booleanif_helper", "cil_destroy_ast_symtabs", "strs_remove_last", "__cil_build_ast_node_helper", "cil_devicetreecon_to_policydb", "cil_yylex", "cil_copy_typepermissive", "sepol_node_key_create", "cil_roletrans_to_policydb", "cil_gen_aliasactual", "cil_resolve_validatetrans", "cond_index_bool", "sepol_port_sid", "sepol_user_count", "sepol_bool_set_name", "sepol_policy_kern_vers_max", "cil_destroy_defaultrange", "cil_strpool_add", "cil_filecon_init", "strs_to_str", "cil_post_ioportcon_compare", "mls_semantic_level_init", "cil_roleattribute_init", "__cil_avrulex_to_hashtable_helper", "expand_convert_type_set", "cil_destroy_iomemcon", "cil_set_handle_unknown", "cil_classperms_set_init", "cil_gen_node", "cil_gen_classpermissionset", "sepol_link_packages", "sepol_policydb_write", "cond_compute_av", "sepol_node_get_addr_bytes", "sepol_member_sid", "cil_gen_sensitivity", "cil_destroy_devicetreecon", "cil_gen_levelrange", "cil_copy_levelrange", "cil_copy_boolif", "user_datum_init", "sepol_policy_file_get_len", "sepol_node_compare2", "cil_role_init", "sepol_port_iterate", "mls_semantic_level_expand", "cil_classorder_init", "cil_resolve_constrain", "cil_destroy_bounds", "cil_destroy_senscat", "cil_copy_classperms_set", "cil_stack_empty", "sepol_context_from_string", "sepol_handle_create", "sepol_compute_av_reason_buffer", "sepol_transition_sid", "cil_level_to_mls_level", "type_set_or", "cil_post_fc_fill_data", "cil_classmapping_init", "cond_read_list", "__cil_avrulex_ioctl_to_hashtable", "cil_copy_sens", "cil_avrule_init", "cil_lexer_setup", "cil_symtab_datum_remove_node", "cil_post_ibpkeycon_context_compare", "cil_complex_symtab_insert", "__cil_verify_cat_in_cats", "sepol_bool_iterate", "cil_strpool_destroy", "sepol_port_clone", "sepol_user_iterate", "mls_to_string", "cil_yy_scan_bytes", "cil_gen_validatetrans", "cil_tree_print_constrain", "__cil_verify_context", "cil_verify_no_self_reference", "sepol_bool_compare", "cil_copy_senscat", "__cil_verify_netifcon", "cil_is_datum_multiple_decl", "cil_destroy_tunif", "cil_destroy_roleattributeset", "strs_add", "sepol_iface_compare", "sepol_context_get_type", "__cil_resolve_ast_last_child_helper", "cil_gen_pirqcon", "cil_destroy_level", "cil_copy_ioportcon", "__cil_verify_ibpkeycon", "sepol_node_iterate", "sepol_set_expand_consume_base", "cil_destroy_sidcontext", "cil_destroy_permissionx", "cil_destroy_role", "sepol_user_set_mlslevel", "sepol_port_exists", "cil_post_ioportcon_context_compare", "strs_init", "cil_destroy_call", "__cil_permx_bitmap_to_sepol_xperms_list", "cil_stack_pop", "__cil_class_val_array_insert", "cil_resolve_pirqcon", "cil_tunable_init", "context_is_valid", "sepol_sid_to_context", "cil_gen_mls", "cil_list_contains", "cil_gen_roletype", "policydb_init", "sepol_module_package_create", "cil_yy_flush_buffer", "__cil_verify_policycap", "cil_destroy_ibendportcon", "sepol_msg_get_fname", "sepol_ppfile_to_module_package", "role_datum_init", "cil_tree_print_context", "sepol_node_set_con", "sepol_module_package_write", "sepol_port_set_range", "cil_classpermission_init", "cil_copy_alias", "cil_yyset_out", "cil_check_recursive_blockinherit", "sepol_iface_create", "cil_strdup", "sepol_node_sid", "cil_tree_print", "ebitmap_contains", "cil_destroy_block", "sepol_get_user_sids", "cil_resolve_userattributeset", "sepol_context_to_string", "cil_gen_blockabstract", "cil_param_init", "cil_call_init", "cil_copy_ipaddr", "cil_fsuse_to_policydb", "cil_symtab_insert", "cil_userprefixes_to_string", "get_decl_cond_list", "policydb_role_cache", "filename_trans_read", "cil_copy_roleattributeset", "cil_destroy_optional", "cil_gen_constraint_expr", "role_trans_rule_init", "__cil_level_val_array_insert", "role_datum_destroy", "cil_destroy_sensitivityorder", "strs_num_items", "cil_extract_attributees", "cil_iomemcon_init", "cond_read_bool", "sepol_module_package_free", "__cil_resolve_ast_first_child_helper", "cil_copy_devicetreecon", "cil_resolve_cats", "__cil_avrule_expand_helper", "__cil_copy_last_child_helper", "cil_stack_peek", "cil_bool_to_policydb", "cil_gen_perm_nodes", "cil_fill_context", "sepol_policy_file_set_fp", "sepol_netif_sid", "__cil_verify_syntax", "strs_write_each_indented", "cil_set_preserve_tunables", "cil_resolve_fsuse", "put_entry", "cil_set_attrs_expand_size", "cond_node_find", "sepol_user_modify", "cil_classperms_init", "cil_copy_user", "cil_copy_cats", "sepol_port_compare2", "sepol_bool_key_extract", "sepol_bool_set", "sepol_ibpkey_sid", "cil_type_bounds_to_policydb", "sepol_compute_av", "cil_destroy_class", "hashtab_destroy", "sepol_set_delusers", "cil_blockinherit_init", "cil_gen_userprefix", "cil_gen_expandtypeattribute", "cil_gen_userrange", "cil_copy_validatetrans", "cil_post_iomemcon_compare", "cil_constrain_to_policydb", "sepol_context_set_type", "sepol_iface_key_extract", "evaluate_conds", "cil_db_init", "cil_tree_log", "sepol_port_free", "cil_copy_sensitivityorder", "cil_copy_cat", "mls_semantic_level_cpy", "cil_resolve_ast", "symtab_init", "__cil_avrulex_ioctl_to_policydb", "sepol_node_get_mask_bytes", "cil_pirqcon_to_policydb", "cil_destroy_ipaddr", "__cil_role_val_array_insert", "cil_destroy_roletransition", "cil_post_pcidevicecon_context_compare", "sepol_msg_default_handler", "sepol_user_create", "sepol_node_get_mask", "sepol_user_query", "cil_copy_userrole", "__cil_verify_fsuse", "cil_gen_default", "mls_from_string", "role_set_expand", "ebitmap_or", "sepol_iface_set_msgcon", "cil_handleunknown_init", "cil_resolve_name_keep_aliases", "cil_tree_walk", "cil_destroy_user", "cil_symtab_error", "cil_copy_context", "__cil_ordered_lists_merge", "sepol_sidtab_init", "cil_resolve_defaultrange", "sepol_node_get_con", "cil_default_to_policydb", "cil_calloc", "ebitmap_to_strs", "__cil_cond_insert_rule", "bounds_check_users", "cil_resolve_roletransition", "sepol_user_key_free", "mls_sid_to_context", "cil_destroy_catset", "cil_tree_children_destroy", "cil_gen_typepermissive", "__cil_ordered_item_insert", "cil_tree_print_levelrange", "cil_copy_rangetransition", "sepol_bool_set_value", "cil_destroy_alias", "cil_resolve_catorder", "cil_gen_alias", "cil_gen_devicetreecon", "get_symtab_destroy_func", "hashtab_create", "cil_fsuse_init", "sepol_port_query", "cil_android_attributize", "cil_validatetrans_to_policydb", "cil_complex_symtab_destroy", "sepol_node_create", "cil_destroy_cats", "cil_resolve_ibpkeycon", "sepol_fs_use", "cil_destroy_type_rule", "cil_resolve_userrange", "sepol_module_package_to_cil", "cil_level_init", "sepol_set_policydb", "cil_destroy_typeattributeset", "cil_resolve_sidorder", "strs_create_and_add", "cil_gen_avrulex", "cil_set_multiple_decls", "sepol_get_disable_dontaudit", "cil_tree_get_cil_path", "cil_userrole_to_policydb", "sepol_iface_get_ifcon", "cil_gen_tunif", "cil_resolve_aliasactual", "sepol_user_clone", "sepol_port_key_extract", "cond_av_list_destroy", "ebitmap_set_bit", "avrule_decl_create", "cil_copy_blockinherit", "cil_post_iomemcon_context_compare", "cil_catorder_init", "sepol_user_set_mlsrange", "cil_tree_print_classperms", "cil_ibpkeycon_to_policydb", "cil_resolve_alias_to_actual", "cil_type_rule_to_policydb", "cil_ioportcon_init", "sepol_indent", "cil_fill_levelrange", "cil_yyget_out", "sepol_port_get_proto", "cil_post_ibendportcon_compare", "sepol_port_compare", "ebitmap_cardinality", "avtab_search", "cil_copy_aliasactual", "sepol_link_modules", "sepol_node_free", "role_set_destroy", "policydb_read", "cil_policycap_to_policydb", "cil_perm_init", "cil_tree_print_node", "cil_copy_macro", "cil_copy_call", "cat_datum_destroy", "sepol_iface_get_name", "cil_destroy_mls", "sepol_node_set_mask_bytes", "__cil_contexts_to_policydb", "cil_copy_nametypetransition", "cil_resolve_classorder", "cil_userrange_init", "cond_node_create", "sepol_port_key_free", "cil_gen_ibpkeycon", "cil_fill_classperms_list", "cil_list_prepend_item", "stack_push", "cil_classpermissionset_init", "cil_destroy_fsuse", "cil_destroy_aliasactual", "cil_gen_sidcontext", "cil_destroy_userattribute", "__perm_str_to_datum", "sepol_bool_count", "__cil_build_ast_last_child_helper", "sepol_port_set_port", "cil_type_to_policydb", "cil_netifcon_init", "cil_copy_policycap", "cil_gen_rangetransition", "__cil_verify_ordered", "sepol_debug", "sepol_policy_kern_vers_min", "policydb_user_cache", "cil_roletype_to_policydb", "sepol_user_del_role", "cil_destroy_handleunknown", "policydb_index_decls", "cil_gen_typeattributeset", "cil_list_error", "__cil_typeattr_bitmap_init", "cil_tree_print_classperms_set", "policydb_from_image", "__cil_ordered_list_insert", "__cil_verify_pcidevicecon", "__cil_ordered_list_init", "cil_add_file", "cil_copy_catset", "cil_asprintf", "__cil_verify_pirqcon", "cil_yylex_destroy", "__cil_resolve_ast_node", "cil_fill_classperms_set", "cil_gen_handleunknown", "cil_tree_init", "cil_resolve_in", "cil_copy_fill_ipaddr", "cil_copy_list", "cil_roletype_init", "cil_constrain_expand", "cil_gen_catset", "cil_selinuxusers_to_string", "sepol_iface_modify", "cil_role_to_policydb", "role_trans_read", "cil_copy_portcon", "sepol_user_set_roles", "hashtab_insert", "cil_tree_walk_core", "cil_gen_ipaddr", "cil_destroy_category", "ebitmap_read", "sepol_sidtab_search", "__cil_cond_to_policydb_helper", "sepol_module_package_get_user_extra_len", "cil_destroy_nodecon", "sepol_set_disable_dontaudit", "sepol_port_get_low", "symtabs_destroy", "__cil_avrule_to_avtab", "sepol_user_has_role", "cil_list_remove", "sepol_module_package_get_file_contexts_len", "cil_resolve_boolif", "cil_destroy_classperms_set", "cil_gen_fsuse", "ebitmap_get_bit", "cil_gen_user", "cond_destroy_bool", "cil_set_attrs_expand_generated", "strs_free_all", "sepol_policydb_read", "cil_gen_classorder", "cil_copy_pcidevicecon", "__cil_verify_helper", "cil_gen_category", "ebitmap_cpy", "sepol_polcap_getname", "cil_resolve_pcidevicecon", "__cil_verify_type", "__cil_verify_ibendportcon", "sepol_genbools", "cil_catset_init", "cil_tree_print_level", "bounds_check_types", "cil_destroy_filecon", "cil_tree_print_expr", "cil_node_to_string", "sepol_module_package_info", "sepol_port_count", "is_perm_enabled", "cil_defaultrange_to_policydb", "cil_post_ibpkeycon_compare", "cil_post_fsuse_compare", "cil_post_portcon_context_compare", "cil_strpool_init", "cil_tree_subtree_destroy", "sepol_context_clone", "cil_binary_create_allocated_pdb", "cil_copy_fill_levelrange", "cil_tree_node_init", "sepol_bool_query", "cil_rangetransition_to_policydb", "policydb_index_classes", "cil_genfscon_init", "report_assertion_failures", "type_set_cpy", "strs_sort", "__cil_verify_ordered_node_helper", "cil_senscat_init", "__cil_verify_class", "cil_reset_ast", "cil_copy_userattribute", "cil_resolve_bounds", "cil_tree_destroy", "sepol_bool_key_unpack", "policydb_reindex_users", "__cil_is_cat_in_cats", "cil_block_init", "cil_gen_selinuxuser", "cil_yyrealloc", "__cil_verify_levelrange_sensitivity", "mls_context_isvalid", "level_datum_destroy", "cil_resolve_blockinherit_link", "cil_sidorder_to_policydb", "cil_gen_genfscon", "cil_tunif_init", "cil_class_init", "sepol_policydb_set_target_platform", "sepol_policydb_mls_enabled", "cil_resolve_tunif", "sepol_node_key_unpack", "avtab_insert", "sepol_policydb_compat_net", "cil_destroy_condblock", "sepol_port_get_high", "__cil_cats_to_mls_level", "cil_copy_type_rule", "sepol_iface_query", "cil_destroy_rangetransition", "cil_list_init", "cil_set_log_handler", "sepol_policy_file_free", "cil_destroy_pcidevicecon", "sepol_user_compare", "sepol_msg_get_level", "cil_gen_policycap", "__cil_verify_iomemcon", "sepol_bool_key_free", "ebitmap_andnot", "str_read", "avrule_read_list", "sepol_policydb_from_image", "cil_gen_policy", "cil_gen_constrain", "cil_gen_macro", "sepol_context_set_user", "policydb_lookup_compat", "cil_nodecon_to_policydb", "cil_fill_integer", "cil_roleallow_init", "cil_condblock_init", "cil_resolve_in_list", "cil_resolve_default", "cil_destroy_args", "cil_copy_classcommon", "mls_semantic_level_destroy", "sepol_module_package_get_netfilter_contexts", "cil_destroy_classperms", "sepol_user_get_num_roles", "symtab_insert", "expand_cond_av_list", "cil_resolve_classcommon", "cil_post_pirqcon_compare", "hierarchy_check_constraints", "__cil_verify_cats_associated_with_sens", "sepol_handle_destroy", "cil_gen_boolif", "sepol_user_add_role", "ebitmap_destroy", "__cil_ordered_lists_merge_all", "cil_gen_sid", "cil_user_to_policydb", "role_trans_rule_list_destroy", "cil_post_netifcon_compare", "sepol_iface_compare2", "cil_find_matching_avrule_in_ast", "cil_gen_userattribute", "ocontext_xen_free", "sepol_set_sidtab", "cil_default_init", "cil_copy_bool", "mls_context_to_sid", "cil_constrain_to_policydb_helper", "sepol_module_package_get_netfilter_contexts_len", "__avrule_xperm_setrangebits", "cil_copy_type", "cil_resolve_context", "cil_symtab_init", "cil_resolve_levelrange", "cil_yyget_in", "cil_roletransition_init", "mls_semantic_range_cpy", "bounds_destroy_bad", "cil_default_mem_error_handler", "avrule_destroy", "cil_fill_classperms", "cil_android_attrib_mapping", "cil_destroy_src_info", "cil_copy_class", "cil_destroy_userattributeset", "cil_gen_userlevel", "policydb_to_image", "cil_yyget_debug", "sepol_iface_get_msgcon", "cil_destroy_sensitivity", "avtab_init", "cil_destroy_perm", "cil_destroy_classmapping", "cil_post_portcon_compare", "__class_update_perm_values", "cil_resolve_ioportcon", "hashtab_map", "bounds_check_roles", "cil_tree_node_destroy", "cil_binary_create", "cil_copy_pirqcon", "cil_gen_optional", "constraint_expr_init", "cil_copy_defaultrange", "cil_gen_roleattribute", "cil_bool_init", "cil_gen_classmapping", "sepol_policy_file_set_handle", "cil_yy_scan_buffer", "cil_cat_init", "cil_yy_delete_buffer", "cil_malloc", "cil_destroy_genfscon", "role_allow_rule_init", "sepol_string_to_security_class", "cil_gen_class", "cil_sort_destroy", "expand_cond_av_node", "cil_typealias_to_policydb", "cil_context_init", "cil_typeattributeset_init", "cil_destroy_classpermission", "cil_gen_nodecon", "cil_fill_cats", "mls_semantic_cat_init", "sepol_sidtab_hash_eval", "sepol_iface_set_name", "cil_nodecon_init", "cil_post_nodecon_compare", "cil_lexer_next", "sepol_context_free", "sepol_genfs_sid", "cil_destroy_netifcon", "cil_build_policydb", "cil_in_init", "cil_destroy_param", "cil_destroy_typeattribute", "cil_set_mem_error_handler", "__cil_ordered_lists_destroy", "sepol_genusers", "cil_boolif_init", "cil_resolve_roleattributeset", "cil_verify_expr_syntax", "cil_destroy_portcon", "check_assertion", "avtab_destroy", "cil_fill_ipaddr", "sepol_bool_get_value", "cil_gen_roleattributeset", "cond_evaluate_expr", "cil_destroy_constrain", "cil_portcon_init", "cil_write_ast", "__cil_type_rule_to_avtab", "cil_destroy_typepermissive", "cil_cats_init", "policydb_set_target_platform", "__cil_verify_ioportcon", "cil_gen_senscat", "cil_symtab_remove_datum", "cil_copy_src_info", "sepol_context_check", "sepol_context_set_role", "cil_copy_netifcon", "cil_realloc", "cil_sidorder_init", "cil_post_process", "cil_resolve_type_rule", "cil_destroy_typetransition", "sepol_context_create", "sepol_user_get_mlslevel", "sepol_policy_file_set_mem", "cil_root_init", "cil_resolve_avrule", "cil_gen_filecon", "cil_optional_init", "cil_resolve_netifcon", "hierarchy_add_bounds", "policy_file_init", "cil_copy_fsuse", "sepol_msg_get_channel", "role_allow_rule_list_destroy", "cil_default_log_handler", "strs_add_at_index", "cil_classcommon_init", "cil_copy_classmapping", "ebitmap_not", "sepol_policydb_set_vers", "cil_copy_level", "cil_booleanif_to_policydb", "cil_gen_context", "cil_copy_classpermission", "cil_resolve_blockinherit_copy", "sepol_module_package_get_seusers_len", "cil_fill_permissionx", "cil_yyget_lineno", "sepol_sidtab_map", "cil_post_genfscon_compare", "sepol_node_clone", "cil_resolve_catset", "policydb_write", "cil_build_ast", "cil_copy_roleattribute", "__cil_reset_node", "sepol_user_key_extract", "cil_typepermissive_to_policydb", "cil_symtab_map", "cil_copy_roleallow", "cil_gen_classpermission", "level_datum_init", "cil_resolve_nodecon", "avrule_list_destroy", "sepol_node_set_mask", "cil_yy_switch_to_buffer", "cil_list_match_any", "cil_nametypetransition_init", "__cil_constrain_expr_to_sepol_expr_helper", "cat_datum_init", "sepol_policydb_create", "sepol_port_get_proto_str", "sepol_user_set_name", "cil_fill_integer64", "cil_set_policy_version", "cil_user_bounds_to_policydb", "cil_common_to_policydb", "cil_destroy_in", "sepol_bool_exists", "sepol_user_exists", "cil_gen_netifcon", "cil_ipaddr_init", "cil_post_pcidevicecon_compare", "sepol_bool_key_create", "cil_resolve_call1", "role_allow_read", "cil_copy_optional", "cil_roleallow_to_policydb", "cil_copy_sidcontext", "cil_list_insert", "cil_destroy_context", "cil_tree_error", "hashtab_hash_eval", "cond_list_destroy", "expand_module_avrules", "cil_gen_catorder", "cil_copy_userrange", "expand_avtab", "cil_gen_typetransition", "cil_parser", "sepol_node_get_addr", "__cil_perms_to_datum", "cil_post_filecon_compare", "cil_check_recursive_call", "context_to_record", "sepol_kernel_policydb_to_cil", "cil_verify_constraint_expr_syntax", "cil_resolve_call2", "cil_catorder_to_policydb", "cil_sensitivityorder_to_policydb", "__cil_resolve_ast_node_helper", "__cil_insert_avrule", "link_modules", "cil_flavor_to_symtab_index", "cil_resolve_portcon", "sepol_iface_key_unpack", "__cil_typetransition_to_avtab", "__cil_verify_name", "cond_expr_destroy", "role_set_get_role", "cil_symtab_get_datum", "filename_trans_rule_init", "sepol_module_package_get_file_contexts", "cil_gen_avrule", "context_from_record", "cil_copy_tunif", "sepol_node_modify", "cil_gen_permissionx", "cil_resolve_classperms", "sepol_user_get_roles", "cil_copy_expr", "__cil_verify_avrulex", "__cil_bool_val_array_insert", "sepol_change_sid", "avrule_decl_destroy", "sepol_compute_av_reason", "sepol_port_get_con", "sepol_context_get_role", "cil_post_pirqcon_context_compare", "cil_resolve_ibendportcon", "__cil_user_val_array_insert", "policydb_load_isids", "sepol_sidtab_destroy", "cil_type_rule_init", "cil_userprefix_init", "__cil_avrule_expand", "cil_args_init", "cil_resolve_sensitivityorder", "cil_resolve_nametypetransition", "cil_resolve_permissionx", "strs_destroy", "sepol_mls_check", "cil_destroy_classperms_list", "cond_optimize_lists", "cil_copy_expandtypeattribute", "mls_semantic_range_init", "cil_gen_selinuxuserdefault", "cil_gen_tunable", "cil_aliasactual_init", "cil_copy_classperms", "cil_resolve_devicetreecon", "sepol_iface_key_free", "sepol_load_policy", "cil_catalias_to_policydb", "sepol_iface_set_ifcon", "cil_iomemcon_to_policydb", "cil_expandtypeattribute_init", "avrule_init", "role_trans_rule_destroy", "cil_tree_print_perms_list"], "allstrings": ["check_assertions", "libsepol", "Error occurred while checking neverallows", "%lu neverallow failures occurred", "report_assertion_avtab_matches", "Out of memory - unable to check neverallows", "report_assertion_extended_permissions", "neverallowxperm on line %lu of %s (or line %lu of policy.conf) violated by\nallowxperm %s %s:%s %s;", "neverallowxperm on line %lu of %s (or line %lu of policy.conf) violated by\nallow %s %s:%s {%s };", "report_failure", "neverallow on line %lu of %s (or line %lu of policy.conf) violated by allow %s %s:%s {%s };", "neverallow on line %lu violated by allow %s %s:%s {%s };", "neverallow violated by allow %s %s:%s {%s };", "check_assertion_avtab_match", "check_assertion_extended_permissions", "%s:  %d entries and %d/%d buckets used, longest chain length %d\n", "avtab_read_item", "truncated entry", "invalid item count", "truncated source type", "truncated target type", "truncated target class", "null entry", "entry has both access vectors and types", "entry only had %d items, expected %d", "more than one specifier", "policy version %u does not support extended permissions rules and one was specified\n", "avtab_read", "truncated table", "table is empty", "out of memory", "duplicate entry", "failed on entry %d of %u", "sepol_bool_key_create", "out of memory, could not create boolean key", "sepol_bool_key_extract", "could not extract key from boolean %s", "sepol_bool_set_name", "out of memory, could not set boolean name", "sepol_bool_create", "out of memory, could not create boolean record", "sepol_bool_clone", "could not clone boolean record", "sepol_bool_set", "error while re-evaluating conditionals", "could not set boolean %s", "sepol_bool_exists", "out of memory, could not check if user %s exists", "sepol_bool_query", "could not query boolean %s", "sepol_bool_iterate", "could not iterate over booleans", "bool_update", "boolean %s no longer in policy", "illegal value %d for boolean %s", "could not update boolean %s", "bool_to_record", "could not convert boolean %s to record", "security: type rule already exists outside of a conditional.", "security: too many conflicting type rules.", "security: could not insert rule.", "%s:%s:%s", "context_to_string", "out of memory, could not convert context to string", "context_from_record", "user %s is not defined", "role %s is not defined", "type %s is not defined", "MLS is disabled, but MLS context \"%s\" found", "MLS is enabled, but no MLS context found", "invalid security context: \"%s:%s:%s:%s\"", "invalid security context: \"%s:%s:%s\"", "could not create context structure", "context_to_record", "could not create context record", "context_from_string", "Invalid context length", "sepol_context_set_user", "out of memory, could not set context user to %s", "sepol_context_set_role", "out of memory, could not set context role to %s", "sepol_context_set_type", "out of memory, could not set context type to %s", "sepol_context_set_mls", "out of memory, could not set MLS fields to %s", "sepol_context_create", "out of memory, could not create context\n", "sepol_context_clone", "could not clone context record", "<<none>>", "sepol_context_from_string", "malformed context \"%s\"", "could not construct context from string", "sepol_context_to_string", "invalid size, overflow at position: %zu", "%s:%s:%s:%s", "print error", "could not convert context to string", "%s.%s: ", "ebitmap_set_bit", "bitmap overflow, bit 0x%x", "security: ebitmap: map size %d does not match my size %zu (high bit was %d)\n", "security: ebitmap: high bit (%d) is not a multiple of the map size (%zu)\n", "security: ebitmap start bit (%d) is not a multiple of the map size (%zu)\n", "security: ebitmap start bit (%d) is beyond the end of the bitmap (%zu)\n", "security: ebitmap: null map in ebitmap (startbit %d)\n", "security: ebitmap: start bit %d comes after start bit %d\n", "security: ebitmap: hight bit %u has not the expected value %zu\n", "mls_semantic_level_expand", "%s: Impossible situation found, nothing in p_levels.table.\n", "Category range is not valid %s.%s", "Category %s can not be associated with level %s", "Out of memory!", "mls_semantic_range_expand", "MLS range high level does not dominate low level", "expand_module", "Target of expand was not a base policy.", "Error while indexing out symbols", "Error while indexing out classes", "Error during expand", "expand_avtab", "expand_cond_av_list", "expand_avrule_helper", "Unknown specification: %u\n", "find_avtab_node", "hash table overflow", "Memory error", "allocate_xperms", "expand_terule_helper", "Invalid specification: %u\n", "duplicate TE rule for %s %s:%s %s", "conflicting TE rule for (%s, %s:%s):  old was %s, new is %s", "copy_and_expand_avrule_block", "Out of Memory!", "Error while copying neverallow.", "copy_role_allows", "copy_role_trans", "Conflicting role trans rule %s %s : %s { %s vs %s }", "expand_filename_trans", "Conflicting name-based type_transition %s %s:%s \"%s\":  %s vs %s", "expand_range_trans", "expanding range transitions", "exp_rangetr_helper", "Conflicting range trans rule %s %s : %s", "cond_node_copy", "Error while normalizing conditional", "Out of memory", "Error mapping booleans", "cond_node_map_bools", "type_copy_callback", "copying type or attribute %s", "type space overflow", "hashtab overflow", "Out of memory!\n", "attr_convert_callback", "converting attribute %s", "attribute %s vanished!", "common_copy_callback", "copying common %s", "class_copy_callback", "copying class %s", "could not find common datum %s", "class_copy_default_new_object", "Found conflicting default user definitions", "Found conflicting default role definitions", "Found conflicting default type definitions", "Found conflicting default range definitions", "type_bounds_copy_callback", "Type lookup failed for %s", "Inconsistent boundary for %s", "alias_copy_callback", "copying alias %s", "object_r", "role_copy_callback", "copying role %s", "role_bounds_copy_callback", "Role lookup failed for %s", "role_fix_callback", "fixing role attribute %s", "sens_copy_callback", "copying sensitivity level %s", "cats_copy_callback", "copying category attribute %s", "user_copy_callback", "copying user %s", "default level not within user range", "user_bounds_copy_callback", "User lookup failed for %s", "bool_copy_callback", "copying boolean %s", "constraint_copy_callback", "class %s vanished", "constraint_node_clone", "Failed to map type_names->types", "ocontext_copy", "Unknown target", "ocontext_copy_selinux", "Missing context for %s initial sid", "Unknown ocontext", "ocontext_copy_xen", "genfs_copy", "type_attr_map", "expand_avtab_insert", "Type conflict!", "expand_cond_insert", "sepol_genbools", "error while reading %s", "unable to write new binary policy image", "sepol_genbools_array", "unable to write binary policy", "load_booleans", "unknown boolean %s", "%s.local", "process_boolean", "illegal boolean definition %s", "illegal boolean definition %s=%s", "true", "false", "illegal value for boolean %s=%s", "sepol_set_delusers", "Deprecated interface", "%s/local.users", "sepol_genusers_policydb", "unable to load local.users: %s", "unable to reindex users: %s", "user", "load_users", "invalid entry %s (%s:%u)", "roles", "undefined role %s (%s:%u)", "level", "range", "invalid level %s (%s:%u)", "invalid range %s (%s:%u)", "bounds_check_types", "%d errors found during type bounds check", "bounds_check_roles", "%d errors found during role bounds check", "bounds_check_users", "%d errors found during user bounds check", "hierarchy_add_bounds", "%d errors found while adding hierarchies", "bounds_expand_parent_rules", "Insufficient memory", "Failed to expand parent rules\n", "bounds_insert_helper", "Unexpected error (%d)", "bounds_add_bad", "bounds_report", "Child type %s exceeds bounds of parent %s in the following rules:", "    %s %s : %s { %s }", "bounds_check_role_callback", "Role bounds violation, %s exceeds %s", "bounds_check_user_callback", "User bounds violation, %s exceeds %s", "hierarchy_add_user_callback", "%s doesn't exist, %s is an orphan", "hierarchy_add_role_callback", "hierarchy_add_type_callback", "sepol_iface_key_create", "out of memory, could not create interface key", "sepol_iface_key_extract", "could not extract key from interface %s", "sepol_iface_create", "out of memory, could not create interface record", "sepol_iface_set_name", "out of memory, could not set interface name", "sepol_iface_set_ifcon", "out of memory, could not set interface context", "sepol_iface_set_msgcon", "out of memory, could not set message context", "sepol_iface_clone", "could not clone interface record", "sepol_iface_query", "could not query interface %s", "sepol_iface_modify", "error while loading interface %s", "sepol_iface_iterate", "could not iterate over interfaces", "iface_to_record", "could not convert interface %s to record", "iface_from_record", "error creating interface structure", "No policy", "Policy is not a kernel policy", "(mlsconstrain (%s (%s)) %s)", "(constrain (%s (%s)) %s)", "Error gathering constraint rules\n", "domby", "incomp", "Unknown constraint operator: %i", "Unknown constraint attribute: %i", "(%s %s %s)", "Unknown constraint expression type: %i", "Invalid constraint expression", "(%s %s)", "(mlsvalidatetrans %s %s)", "(validatetrans %s %s)", "deny", "reject", "allow", "Unknown value for handle-unknown: %i", "(handleunknown %s)\n", "(class %s (%s))\n", "(class %s ())\n", "(classorder (", "(classcommon %s %s)\n", "(common %s (%s))\n", "Error writing class rules to CIL\n", "Unknown target platform: %i", "(sid %s)\n", "(sidorder (", "Error writing sid rules to CIL\n", "null", "kernel", "security", "unlabeled", "file", "file_labels", "init", "any_socket", "port", "netif", "netmsg", "node", "igmp_packet", "icmp_socket", "tcp_socket", "sysctl_modprobe", "sysctl", "sysctl_fs", "sysctl_kernel", "sysctl_net", "sysctl_net_unix", "sysctl_vm", "sysctl_dev", "kmod", "policy", "scmp_packet", "devnull", "dom0", "domio", "domxen", "ioport", "iomem", "device", "Error writing default rules to CIL\n", "source", "target", "Unknown default role value: %i", "(defaultuser %s %s)\n", "(defaultrole %s %s)\n", "Unknown default type value: %i", "(defaulttype %s %s)\n", "source low", "source high", "source low-high", "target low", "target high", "target low-high", "(defaultrange %s %s)\n", "(mls false)\n", "(mls true)\n", "Error writing mls rules to CIL\n", "(sensitivity s0)", "(sensitivityorder (s0))", "(level %s (s0))", "systemlow", "(sensitivity %s)\n", "(sensitivityorder (", "(sensitivityalias %s)\n", "(sensitivityaliasactual %s %s)\n", "Error writing sensitivity rules to CIL\n", "(category %s)\n", "(categoryorder (", "(categoryalias %s)\n", "(categoryaliasactual %s %s)\n", "Error writing category rules to CIL\n", "(sensitivitycategory %s %s)\n", "Error writing sensitivitycategory rules to CIL\n", "%s %s ", "(range %s %s) ", "Unknown policy capability id: %i", "(policycap %s)", "Error writing polcap rules to CIL\n", "(typeattribute %s)\n", "Error writing typeattribute rules to CIL\n", "(roleattribute %s)\n", "Error writing roleattribute rules to CIL\n", "Error writing boolean declarations to CIL\n", "(boolean %s %s)", "(type %s)\n", "Error writing type declarations to CIL\n", "(typealias %s)\n", "(typealiasactual %s %s)\n", "Error writing type alias rules to CIL\n", "(typebounds %s %s)\n", "Error writing type bounds rules to CIL\n", "(typeattributeset %s (%s))", "Error writing typeattributeset rules to CIL\n", "(typepermissive %s)\n", "Error writing typepermissive rules to CIL\n", "Error writing avtab rules to CIL\n", "auditallow", "dontaudit", "allowx", "auditallowx", "dontauditx", "typetransition", "typemember", "typechange", "Unknown avtab type: %i", "self", "Failed to generate permission string", "(%s %s %s (%s (%s)))", "Failed to generate extended permission string", "(%s %s %s (%s %s (%s)))", "ioctl", "(%s %s %s %s %s)", " (range 0x%hx 0x%hx)", " 0x%hx", "Error writing filename typetransition rules to CIL\n", "(typetransition %s %s %s %s %s)", "Error writing range transition rules to CIL\n", "(rangetransition %s %s %s %s)", "(%s)", "(booleanif %s\n", "(true\n", "(false\n", "Error writing conditional rules to CIL\n", "Unknown conditional operator: %i", "Invalid conditional expression", "(role %s)\n", "(rolebounds %s %s)\n", "(roletype %s %s)\n", "Error writing role declarations to CIL\n", "(roletransition %s %s %s %s)", "Error writing role transition rules to CIL\n", "(roleallow %s %s)", "Error writing role allow rules to CIL\n", "(user %s)\n", "(userrole %s %s)\n", "(userlevel %s ", "(userrange %s ", "Error writing user declarations to CIL\n", "(sidcontext %s %s)", "Error writing sidcontext rules to CIL\n", "(%s %s %s %s)", "xattr", "trans", "task", "Unknown fsuse behavior: %i", "(fsuse %s %s %s)\n", "Error writing fsuse rules to CIL\n", "(genfscon %s %s %s)", "Error writing genfscon rules to CIL\n", "dccp", "Unknown portcon protocol: %i", "(%u %u)", "(portcon %s %s %s)\n", "Error writing portcon rules to CIL\n", "(netifcon %s %s %s)\n", "Error writing netifcon rules to CIL\n", "Nodecon address is invalid: %s", "Nodecon mask is invalid: %s", "(nodecon (%s) (%s) %s)\n", "Error writing nodecon rules to CIL\n", "ibpkeycon subnet_prefix is invalid: %s", "(ibpkeycon %s %s %s)\n", "Error writing ibpkeycon rules to CIL\n", "(ibendportcon %s %s %s)\n", "Error writing ibendportcon rules to CIL\n", "(pirqcon %s %s)\n", "Error writing pirqcon rules to CIL\n", "0x%x", "(0x%x 0x%x)", "(ioportcon %s %s)\n", "Error writing ioportcon rules to CIL\n", "0x%lx", "(0x%lx 0x%lx)", "(iomemcon %s %s)\n", "Error writing iomemcon rules to CIL\n", "(pcidevicecon %s %s)\n", "Error writing pcidevicecon rules to CIL\n", "(devicetreecon %s %s)\n", "Error writing devicetreecon rules to CIL\n", "Failed to write to output", "Error sorting ocontexts\n", "Out of memory\n", "%s %s { %s } %s;", "%s %s %s %s", "mlsconstrain", "constrain", "%s %s %s", "%s (%s)", "mlsvalidatetrans", "validatetrans", "%s %s %s;", "# handle_unknown %s\n", "class %s\n", "sid %s\n", "Error writing sid rules to policy.conf\n", "common %s { %s }\n", "class %s", " inherits %s", " { %s }", "Error writing class rules to policy.conf\n", "Error writing default rules to policy.conf\n", "default_user { %s } %s;\n", "default_role { %s } %s;\n", "default_type { %s } %s;\n", "default_range { %s } %s;\n", "Error writing mls rules to policy.conf\n", "%s %s", "sensitivity %s alias { %s };\n", "sensitivity %s alias %s;\n", "sensitivity %s;\n", "dominance { ", "category %s alias { %s };\n", "category %s alias %s;\n", "category %s;\n", "Error writing category rules to policy.conf\n", "level %s:%s;\n", "level %s;\n", "Error writing level rules to policy.conf\n", "%s%c%s", ",%s%c%s", "policycap %s;", "Error writing polcap rules to policy.conf\n", "attribute %s;\n", "Error writing typeattribute rules to policy.conf\n", "attribute_role %s;\n", "Error writing roleattribute rules to policy.conf\n", "Error writing boolean declarations to policy.conf\n", "bool %s %s;", "type %s;\n", "Error writing type declarations to policy.con\n", "typealias %s %s;\n", "Error writing type alias rules to policy.conf\n", "typebounds %s %s;\n", "Error writing type bounds rules to policy.conf\n", "typeattribute %s %s;", "Error writing typeattributeset rules to policy.conf\n", "permissive %s;\n", "Error writing typepermissive rules to policy.conf\n", "Error writing avtab rules to policy.conf\n", "allowxperm", "auditallowxperm", "dontauditxperm", "type_transition", "type_member", "type_change", "%s %s %s:%s { %s };", "%s %s %s:%s %s;", "Error writing filename typetransition rules to policy.conf\n", "type_transition %s %s:%s %s \"%s\";", "Error writing range transition rules to policy.conf\n", "range_transition %s %s:%s %s;", "%s - %s", "%s:%s", "if (%s) {\n", "} else {\n", "Error writing conditional rules to policy.conf\n", "role %s;\n", "role %s types { %s };\n", "Error writing role declarations to policy.conf\n", "role_transition %s %s:%s %s;", "Error writing role transition rules to policy.conf\n", "allow %s %s;", "Error writing role allow rules to policy.conf\n", "user %s", " roles { %s }", " roles %s", " level %s", " range %s", "Error writing user declarations to policy.conf\n", "sid %s %s", "Error writing sidcontext rules to policy.conf\n", "fs_use_%s %s %s;\n", "Error writing fsuse rules to policy.conf\n", "genfscon %s %s %s", "Error writing genfscon rules to policy.conf\n", "%u-%u", "portcon %s %s %s\n", "Error writing portcon rules to policy.conf\n", "netifcon %s %s %s\n", "Error writing netifcon rules to policy.conf\n", "nodecon %s %s %s\n", "Error writing nodecon rules to policy.conf\n", "ibpkeycon address is invalid: %s", "ibpkeycon %s %s %s\n", "Error writing ibpkeycon rules to policy.conf\n", "ibendportcon %s %s %s\n", "Error writing ibendportcon rules to policy.conf\n", "error1\n", "error2\n", "pirqcon %s %s\n", "Error writing pirqcon rules to policy.conf\n", "0x%lx-0x%lx", "iomemcon %s %s\n", "Error writing iomemcon rules to policy.conf\n", "0x%x-0x%x", "ioportcon %s %s\n", "Error writing ioportcon rules to policy.conf\n", "pcidevicecon %s %s\n", "Error writing pcidevicecon rules to policy.conf\n", "devicetreecon %s %s\n", "Error writing devicetreecon rules to policy.conf\n", "link_modules", "Target of link was not a base policy.", "Tried to link in a policy that was not a module.", "Tried to link in a non-MLS module with an MLS base.", "Tried to link in an MLS module with a non-MLS base.", "Upgrading policy version from %u to %u\n", "Error while indexing others", "Error while indexing classes", "prepare_module", "Error while normalizing conditionals within the module %s.", "prepare_base", "Error while normalizing conditionals within the base module.", "%s: Expected %s to be an attribute, but it was already declared as a type.", "%s: Expected %s to be a type, but it was already declared as an attribute.", "copying type %s", "%s: Modules may not yet declare new classes.", "Memory error\n", "could not insert new class into symtab", "permission_copy_callback", "could not insert permission into class\n", "Module %s depends on permission %s in class %s, not satisfied", "%s: Expected %s to be a role attribute, but it was already declared as a regular role.", "%s: Expected %s to be a regular role, but it was already declared as a role attribute.", "%s: Mismatch between boolean/tunable definition and usage for %s", "%s: Modules may not declare new sensitivities.", "%s: Sensitivity %s not declared by base.", "%s: has an unknown scope: %d\n", "cat_copy_callback", "%s: Modules may not declare new categories.", "%s: Category %s not declared by base.", "%s: Could not find type %s for alias %s.", "%s: Self aliasing of %s.", "%s is an alias of an attribute, not allowed", "fixing role %s", "type_set_or_convert", "type_fix_callback", "fixing attribute %s", "user_fix_callback", "fixing user %s", "role_set_or_convert", "mls_level_convert", "copy_avrule_block", "copy_avrule_list", "copy_role_trans_list", "copy_role_allow_list", "copy_cond_list", "copy_filename_trans_list", "copy_range_trans_list", "copy_scope_index", "scope_copy_callback", "%s: Duplicate declaration in module: %s %s", "common", "class", "role", "type/attribute", "bool", "category", "enable_avrules", "Determining which avrules to enable.", "BASE", "check module %s decl %d\n", "is_decl_requires_met", "Could not find scope information for class %s", "print_missing_requirements", "%s's global requirements were not met: class %s, permission %s", "%s's global requirements were not met: %s %s", "debug_requirements", "%s[%d]'s optional requirements were not met: class %s, permission %s", "%s[%d]'s global requirements were not met: class %s, permission %s", "%s[%d]'s optional requirements were not met: %s %s", "%s[%d]'s global requirements were not met: %s %s", "populate_roleattributes", "Populating role-attribute relationship from enabled declarations' local symtab.", "populate_decl_roleattributes", "expand_role_attributes", "expanding role attribute %s", "mls_to_string", "out of memory, could not convert mls context to string", "mls_from_string", "invalid MLS context %s", "could not construct mls context structure", "sepol_mls_contains", "could not check if mls context %s contains %s", "sepol_mls_check", "out of memory, could not check if mls context %s is valid", "sepol_link_packages", "sepol_module_package_read", "error seeking to offset %zu for module package section %u", "module package section %u has too small length %zu", "module package section %u truncated, lacks magic number", "found multiple file contexts sections in module package (at section %u)", "invalid file contexts section at section %u", "found multiple seuser sections in module package (at section %u)", "invalid seuser section at section %u", "found multiple user_extra sections in module package (at section %u)", "invalid user_extra section at section %u", "found multiple netfilter contexts sections in module package (at section %u)", "invalid netfilter contexts section at section %u", "found multiple module sections in module package (at section %u)", "invalid module in module package (at section %u)", "unknown magic number at section %u, offset: %zx, number: %x ", "missing module in module package", "sepol_module_package_info", "module package section %u has too small length %u", "found seuser sections in module package (at section %u)", "found user_extra sections in module package (at section %u)", "module string length is wrong (at section %u)", "out of memory (at section %u)", "cannot get module string (at section %u)", "cannot get module header (at section %u)", "module has invalid type %d (at section %u)", "cannot get module name len (at section %u)", "cannot get module version len (at section %u)", "sepol_module_package_write", "seuser and user_extra sections only supported in base", "module_package_read_offsets", "module package header truncated", "wrong magic number for module package:  expected %#08x, got %#08x", "too many sections (%u) in module package", "module package offset array truncated", "offsets are not increasing (at %u, offset %zu -> %zu", "offset greater than file size (at %u, offset %zu -> %zu", "Policy pakcage is not a base or module", "Failed to get policydb", "Failed to create policy file", "Failed to create module package", "Failed to read policy package", "base", "(level systemlow (s0))", "(role object_r)", "(role auditadm_r)", "(role secadm_r)", "(typeattribute cil_gen_require)", "(roleattribute cil_gen_require)", "(handleunknown %s)", "(mls %s)", "(sid %s)", "(sidcontext %s ", "(%s %s %s (", "Warning: 'fscon' statement unsupported in CIL. Dropping from output.", "(portcon %s %i ", "(portcon %s (%i %i) ", "(netifcon %s ", "(nodecon (%s) (%s) ", "(fsuse %s %s ", "(ibpkeycon %s %i ", "(ibpkeycon %s (%i %i) ", "(ibendportcon %s %u ", "(pirqcon %i ", "(ioportcon 0x%x ", "(ioportcon (0x%x 0x%x) ", "(iomemcon 0x%lx ", "(iomemcon (0x%lx 0x%lx) ", "(pcidevicecon 0x%lx ", "(genfscon %s %s ", "Warning: 'else' not allowed in global block. Dropping from output.", "(common %s (", "(typealias %s)", "(typealiasactual %s %s)", "(class %s (", "(classcommon %s %s)", "Unknown default user value: %i", "(defaultuser %s %s)", "(defaultrole %s %s)", "(defaulttype %s %s)", "Unknown default range value: %i", "(defaultrange %s %s)", "(%sconstrain (%s (%s)) %s)", "(%svalidatetrans %s %s)", "Unknown constraint operator type: %i", "Unknown expression attribute type: %i", "Failed to generate constraint expression", "Overflow", "Empty list", "(roleattributeset cil_gen_require %s)", "user_r", "staff_r", "sysadm_r", "system_r", "unconfined_r", "auditadm_r", "secadm_r", "(role %s)", "Warning: role 'dominance' statement unsupported in CIL. Dropping from output.", "(roletype %s %s)", "(rolebounds %s %s)", "(roleattribute %s)", "(roleattributeset %s (", "Unknown role type: %i", "_typeattr_", "_roleattr_", "%s%s%i", "Failed to generate attribute name", "(typeattributeset cil_gen_require %s)", "(type %s)", "(roletype object_r %s)", "(typepermissive %s)", "(typebounds %s %s)", "(typeattribute %s)", "(expandtypeattribute (%s) ", "(typeattributeset %s (", "Unknown flavor (%i) of type %s", "(user %s)", "(userrole %s object_r)", "(userrole %s %s)", "(userrange %s (", "systemlow systemlow", "(%s ", "range %s %s", "tunable", "boolean", "(sensitivity %s)", "(sensitivityalias %s)", "(sensitivityaliasactual %s %s)", "(sensitivitycategory %s (", "(category %s)", "(categoryalias %s)", "(categoryaliasactual %s %s)", ";;* lmx %lu %s\n", ";;* lme\n", "neverallowx", "Unknown avrule xperm type: %i", "(%s %s %s (%s %s (", ")))\n", "(range 0x%hx 0x%hx)", "0x%hx", "auditdenty", "neverallow", "Unknown avrule type: %i", "(rangetransition %s %s %s ", "(typetransition %s %s %s \"%s\" %s)", "(true", "(false", "Failed to generate conditional expression", "tunableif", "booleanif", "(%s %s", "type", "(%sattribute %s)", "(%sattributeset %s ", "(all)", "(not ", "(and ", "(not (", "Warning: 'else' blocks in optional statements are unsupported in CIL. Dropping from output.", "(optional %s_optional_%i", "Invalid seuser line: %s", "__default__", "(selinuxuserdefault %s (", "(selinuxuser %s %s (", "Failed to read seusers\n", "Invalid level: %s", "Warning: netfilter_contexts are unsupported in CIL. Dropping from output.", "Invalid user extra line: %s", "prefix", "(userprefix %s %s)", "Failed to read user_extra\n", "Invalid file context line: %s", "char", "block", "socket", "pipe", "symlink", "Invalid mode in file context line: %s", "(filecon \"%s\" %s ", "Failed to read file_contexts_to_cil\n", "Invalid context: %s", "Failed to read pp file", "sepol_node_key_create", "could not create node key for (%s, %s, %s)", "sepol_node_key_extract", "out of memory, could not extract node key", "sepol_node_get_addr", "could not get node address", "sepol_node_get_addr_bytes", "out of memory, could not get address bytes", "sepol_node_set_addr", "could not set node address to %s", "sepol_node_set_addr_bytes", "out of memory, could not set node address", "sepol_node_get_mask", "could not get node netmask", "sepol_node_get_mask_bytes", "out of memory, could not get netmask bytes", "sepol_node_set_mask", "could not set node netmask to %s", "sepol_node_set_mask_bytes", "out of memory, could not set node netmask", "ipv4", "ipv6", "sepol_node_create", "out of memory, could not create node record", "sepol_node_clone", "could not clone node record", "sepol_node_set_con", "out of memory, could not set node context", "node_alloc_addr", "unsupported protocol %u", "could not allocate address of protocol %s", "node_parse_addr", "could not parse IPv4 address %s: %s", "could not parse IPv6 address %s: %s", "unsupported protocol %u, could not parse address", "node_alloc_addr_string", "could not allocate string buffer for address of protocol %s", "node_expand_addr", "could not expand IPv4 address to string: %s", "could not expand IPv6 address to string: %s", "unsupported protocol %u, could not expand address to string", "sepol_node_exists", "could not check if node %s/%s (%s) exists", "sepol_node_query", "could not query node %s/%s (%s)", "sepol_node_modify", "could not load node %s/%s (%s)", "sepol_node_iterate", "could not iterate over nodes", "node_to_record", "could not convert node to record", "node_from_record", "could not create node structure", "network_peer_controls", "open_perms", "extended_socket_class", "always_check_network", "cgroup_seclabel", "nnp_nosuid_transition", "SE Linux", "XenFlask", "policydb_index_decls", "invalid decl ID %u", "duplicated decl ID %u", "policydb_index_others", "security:  %d users, %d roles, %d types, %d bools", "security: %d sens, %d cats", "security:  %d classes, %d rules, %d cond rules", "policydb_load_isids", "out of memory on SID table init", "SID %s was never defined", "unable to load initial SID %s", "filename_trans_read", "Duplicate name-based type_transition %s %s:%s \"%s\":  %s, ignoring", "policydb_read", "policydb magic number %#08x does not match expected magic number %#08x or %#08x", "policydb string length %s ", "too long", "zero", "unable to allocate memory for policydb string of length %zu", "truncated policydb string identifier", "cannot find a valid target for policy string %s", "SE Linux Module", "invalid string identifier %s", "unknown module type: %#08x", "policydb version %d does not match my version range %d-%d", "policydb module version %d does not match my version range %d-%d", "unable to find policy compat info for version %d", "policydb table sizes (%d,%d) do not match mine (%d,%d)", "unexpected items in symbol table with no symbol", "no avrule block in policy", "avrule_read", "module policy version %u does not support ioctl extended permissions rules and one was specified", "Target platform %s does not support ioctl extended permissions rules and one was specified", "class_read", "unknown common %s", "role_read", "role %s has wrong value %d", "mls_read_range_helper", "range overflow", "truncated range", "error reading low categories", "error reading high categories", "mls_read_level", "truncated level", "error reading level categories", "mls_read_semantic_level_helper", "scope_read", "invalid scope with no declaration", "ocontext_read", "ocontext_read_selinux", "Unknown SELinux ocontext", "context_read_and_validate", "context truncated", "error reading MLS range of context", "invalid security context", "ocontext_read_xen", "Unknown Xen ocontext", "genfs_read", "dup genfs fstype %s", "dup genfs entry (%s,%s)", "policydb_from_image", "policy image is invalid", "policydb_to_image", "could not compute policy length", "could not write policy", "new policy image is invalid", "could not create policy image", "packet", "sepol_port_key_create", "out of memory, could not create port key", "sepol_port_key_extract", "could not extract key from port %s %d:%d", "sepol_port_create", "out of memory, could not create port record", "sepol_port_clone", "could not clone port record", "sepol_port_set_con", "out of memory, could not set port context", "sepol_port_exists", "could not check if port range %u - %u (%s) exists", "sepol_port_query", "could not query port range %u - %u (%s)", "sepol_port_modify", "could not load port range %u - %u (%s)", "sepol_port_iterate", "could not iterate over ports", "sepol2ipproto", "port_to_record", "could not convert port range %u - %u (%s) to record", "ipproto2sepol", "invalid protocol %u found in policy", "port_from_record", "low port %d exceeds high port %d", "could not create port structure for range %u:%u (%s)", "sepol_role_list", "out of memory, could not list roles", "sepol_set_policydb_from_file", "can't read binary policy: %s", "sepol_validate_transition", "unrecognized class %d", "unrecognized SID %d", "sepol_validate_transition_reason_buffer", "sepol_compute_av_reason", "sepol_compute_av_reason_buffer", "sepol_string_to_security_class", "unrecognized class %s", "sepol_string_to_av_perm", "could not convert %s to av bit", "sepol_sid_to_context", "sepol_context_to_sid", "could not convert %s to sid", "sepol_load_policy", "the definition of an existing class changed", "constraint_expr_eval_reason", "failed to allocate class buffer", "failed to allocate expr buffer stack", "failed to allocate expr buffer", "Badness at %s:%d", "external/selinux/libsepol/src/services.c", "u%d ", "r%d ", "t%d ", "failed to allocate answer stack", "failed to allocate answer buffer", "%s%s", "%s %s\n", "Validatetrans", "Constraint", "GRANTED", "DENIED", "constrain ", "mlsconstrain ", "validatetrans ", "mlsvalidatetrans ", "{%s } (", "cat_expr_buf", "failed to realloc expr buffer", "(%s %s %s -Fail-) ", "(%s %s %s) ", "(%s%s", "<empty_set> ", " -Fail-) ", "pop called with no stack entries", "push", "unable to allocate stack space", "context_struct_compute_av", "sepol_compute_sid", "validate_class", "class %s disappeared", "the value of class %s changed", "the inherits clause for the access vector definition for class %s changed", " in the access vector definition for class %s\n", " in access vector definition for class %s", "validate_perm", "permission %s disappeared", "the value of permissions %s changed", "convert_context", "invalidating context %s", "sepol_user_key_create", "out of memory, could not create selinux user key", "sepol_user_key_extract", "could not extract key from user %s", "sepol_user_set_name", "out of memory, could not set name", "sepol_user_set_mlslevel", "out of memory, could not set MLS default level", "sepol_user_set_mlsrange", "out of memory, could not set MLS allowed range", "sepol_user_add_role", "out of memory, could not add role %s", "sepol_user_set_roles", "out of memory, could not allocate roles array foruser %s", "sepol_user_get_roles", "out of memory, could not allocate roles array for user %s", "sepol_user_create", "out of memory, could not create selinux user record", "sepol_user_clone", "could not clone selinux user record", "sepol_user_modify", "undefined role %s for user %s", "MLS is enabled, but no MLS default level was defined for user %s", "could not copy MLS level %s", "MLS is enabled, but no MLSrange was defined for user %s", "could not copy MLS range %s", "MLS is disabled, but MLS level/range was found for user %s", "unable to expand role set", "could not load %s into policy", "sepol_user_query", "could not query user %s", "sepol_user_iterate", "could not iterate over users", "user_to_record", "could not copy MLS level", "could not copy MLS range", "ioctl { ", "0x%hx-0x%hx ", "0x%hx ", "policydb_write", "policy version %d cannot support MLS", "compatibility lookup failed for policy version %d", "Warning! Policy version %d cannot support permissive types, but some were defined", "Discarding booleans and conditional rules", "Discarding filename type transition rules", "type_write", "Warning! Module policy version %d cannot support permissive types, but one was defined", "avtab_write_item", "missing node", "data count wrong", "policy version %u does not support ioctl extendedpermissions rules and one was specified", "avrule_write", "role_trans_write", "Discarding role_transition rules for security classes other than \"process\"", "role_trans_rule_write", "ocontext_write_xen", "policy version %d cannot represent IOMEM addresses over 16TB", "range_write_helper", "Discarding range_transition rules for security classes other than \"process\"", "Unable to create version mapping table.\n", "Unable to build source db AST.\n", "Unable to extract attributizable elements from source db.\n", "Unable to create mapping db from source db.\n", "Unable to build target db AST.\n", "Unable to attributize target db.\n", "%s unsupported statement in attributee policy (line %d)\n", "base_typeattr_", "%s_%s", "%s declaration illegal non-platform policy (line %d)\n", "unsupported policy statement (line %d)\n", "AST already resolved. Not yet supported.\n", "AST already resolved.  !!! Not yet supported.\n", "AST already resolved.  ### Not yet supported.\n", "AST already resolved. Not yet supported (line %d).\n", "%s with platform public type not allowed (line %d)\n", "Failed to set dominates bit for role\n", "Failed to insert role bounds for role %s\n", "Failed to set type bit for role\n", "Failed to insert type bounds for type %s\n", "Failed to insert user bounds for user %s\n", "Failed to set role bit for user\n", "Conflicting type rules (scontext=%s tcontext=%s tclass=%s result=%s), existing=%s\n", "Expanded from type rule (scontext=%s tcontext=%s tclass=%s result=%s)\n", "Conflicting name type transition rules\n", "Failed to find datum for perm %s\n", "typetransition with file name not allowed within a booleanif block.\n", "Invalid typetransition statement", "Failed to insert type transition into avtab", "Failed to insert typerule into avtab", "Failed to insert avrule into avtab", "Invalid statement within booleanif", "Failed to create sepol conditional node", "Failed to convert CIL conditional expression to sepol expression", "Failure while walking true conditional block", "Failure while walking false conditional block", "Conflicting role transition rules\n", "Failed to insert constraint into policydb\n", "Failed to insert category set into sepol mls level\n", "Problem with MLS\n", "No sidorder statement in policy\n", "Problem with context for SID %s\n", "Conflicting Range transition rules\n", "ibpkeycon subnet prefix not in valid IPV6 format\n", "User default labeling for class %s already specified\n", "Role default labeling for class %s already specified\n", "Type default labeling for class %s already specified\n", "Range default labeling for class %s already specified\n", "Binary policy creation failed", "Failed to create policy db\n", "db == NULL\n", "policydb == NULL\n", "Problem in policydb_init\n", "Failure to create hashtab for filename_trans\n", "Failure to create hashtab for range_trans\n", "Failure to create hashtab for role_trans\n", "Failure to create hashtab for avrulex\n", "Failure while walking cil database\n", "Failure creating val_to_{struct,name} arrays\n", "Failure creating avrulex rules\n", "Failure while inserting cil contexts into sepol policydb\n", "Failure while initializing typeattribute bitmap\n", "Checking Neverallows\n", "Checking User Bounds\n", "Checking Role Bounds\n", "Checking Type Bounds\n", "Failure creating roles cache", "Failure creating users cache", "Failed to find role %s in sepol hashtab\n", "Failed to find type %s in sepol hashtab\n", "Failed to find user %s in sepol hashtab\n", "Failed to find category %s in sepol hashtab\n", "Failed to find level %s in sepol hashtab\n", "Failed to copy type bits\n", "Failed to set type bit\n", "Failed to find class %s in sepol hashtab\n", "Expected boolean expression\n", "Failed to get first operand of conditional expression\n", "Failed to get second operand of conditional expression\n", "Failed to get initial item in conditional list\n", "Failed to get item in conditional list\n", "Failed to find boolean\n", "Failed to copy role bits\n", "Failed to set role bit\n", "Failed to copy user bits\n", "Failed to set user bit\n", "Expression result was undefined - disabling all rules\n", "%s check failed", "Error occurred while checking %s rules\n", "    ", "      ", "%s(%s ", "(%s (", "unknown", "%s %s (%s)", "Child type %s exceeds bounds of parent %s\n", "Failed to convert sepol avrule to CIL\n", "Error occurred while checking type bounds\n", "    <See previous>\n", "Failed to create CIL AV rule from sepol values\n", "Failed to create CIL class-permissions from sepol values\n", "Re-declaration of %s %s\n", "Previous declaration", "%s %s shadows a macro parameter in macro declaration\n", "Failed to create node\n", "Bad block declaration", "Bad blockinherit declaration", "Bad blockabstract declaration", "Bad in statement", "'unordered' keyword is reserved and not a valid class name.\n", "Too many permissions in class '%s'", "Bad class declaration", "Classorder 'unordered' keyword must be followed by one or more class.\n", "Classorder can only use 'unordered' keyword as the first item in the list.\n", "Bad classorder declaration", "Bad permission\n", "Bad permissions\n", "Bad permission list or expression\n", "Bad class-permissions\n", "Bad class-permissions list syntax\n", "Problem filling class-permissions list\n", "Bad classpermission declaration", "Bad classpermissionset", "Bad map class declaration", "Bad classmapping declaration", "Too many permissions in common '%s'", "Bad common declaration", "Bad classcommon declaration", "Bad sid declaration", "Bad sidcontext declaration", "Sidorder cannot be unordered.\n", "Bad sidorder declaration", "Bad user declaration", "Bad userattribute declaration", "Bad userattributeset declaration", "Bad userlevel declaration", "Bad userrange declaration", "Bad userprefix declaration", "Bad selinuxuser declaration", "Bad selinuxuserdefault declaration", "Bad role declaration", "Bad roletype declaration", "Bad userrole declaration", "Bad roletransition rule", "Bad roleallow rule", "The keyword '%s' is reserved\n", "Bad roleattribute declaration", "Bad roleattributeset declaration", "Bad allow rule", "Unknown permissionx kind, %s. Must be \"ioctl\"\n", "Bad permissionx content", "Bad permissionx statement", "Bad allowx rule", "Bad type rule", "Bad type declaration", "Bad typeattribute declaration", "Value must be either 'true' or 'false'", "Bad tunable (treated as a boolean due to preserve-tunables) declaration", "Bad boolean declaration", "Bad tunable declaration", "Bad expression\n", "Bad expression tree for constraint\n", "Conditional neither true nor false\n", "Bad tunableif (treated as a booleanif due to preserve-tunables) declaration", "Bad booleanif declaration", "Bad tunableif declaration", "Conditional statements must be a direct child of a tunableif or booleanif statement.\n", "Bad %s condition declaration", "Bad %s declaration", "Bad %s association", "Bad typeattributeset statement", "Bad expandtypeattribute statement", "Bad typepermissive declaration", "Bad typetransition declaration", "Bad rangetransition declaration", "Bad sensitivity declaration", "Bad category declaration", "Bad categoryset declaration", "Category order cannot be unordered.\n", "Bad categoryorder declaration", "Sensitivy order cannot be unordered.\n", "Bad sensitivityorder declaration", "Bad sensitivitycategory declaration", "Bad level declaration", "Bad levelrange\n", "Bad levelrange declaration", "Bad constrain declaration", "Bad validatetrans declaration", "Bad context\n", "Bad context declaration", "Invalid file type\n", "Bad filecon declaration", "Improper ibpkey specified\n", "Improper ibpkey range specified\n", "Bad ibpkeycon declaration", "Invalid protocol\n", "Improper port specified\n", "Improper port range specified\n", "Bad portcon declaration", "Bad nodecon declaration", "Bad genfscon declaration", "Bad netifcon declaration", "Improper ibendport port specified\n", "Bad ibendportcon declaration", "Bad pirqcon declaration", "Improper iomem specified\n", "Improper iomem range specified\n", "Bad iomemcon declaration", "Improper ioport specified\n", "Improper ioport range specified\n", "Bad ioportcon declaration", "Bad pcidevicecon declaration", "Bad devicetreecon declaration", "Invalid fsuse type\n", "Bad fsuse declaration", "The kind %s is not allowed as a parameter\n", "Duplicate parameter\n", "Bad macro declaration", "Bad macro call", "Destroying arg with the unexpected flavor=%d\n", "Bad optional", "Bad policycap statement", "Bad ipaddr statement", "Failed to create integer from string\n", "Bad ip address or netmask\n", "Bad level\n", "Bad bounds declaration", "Expected either 'source' or 'target'\n", "Expected 'low', 'high', or 'low-high'\n", "Bad defaultrange declaration", "Expected either '%s', '%s', or '%s'\n", "Bad handleunknown", "Bad mls", "Keyword expected after open parenthesis", "%s is not allowed in macros", "Found %s", "%s cannot be defined within tunableif statement (treated as a booleanif due to preserve-tunables)\n", "%s cannot be defined within booleanif statement\n", "Found tunable", "Tunables cannot be defined within tunableif statement\n", "Found in-statement", "in-statements cannot be defined within in-statements\n", "Error: Unknown keyword %s\n", "Operator (%s) not in an expression\n", "Max depth of %d exceeded for boolean expression\n", "Expected a string at the start of the constraint expression\n", "Max depth of %d exceeded for constraint expression\n", "Invalid left operand (%s)\n", "Parsing %s\n", "Failed to parse %s\n", "Building AST from Parse Tree\n", "Failed to build ast\n", "Destroying Parse Tree\n", "Resolving AST\n", "Failed to resolve ast\n", "Qualifying Names\n", "Failed to qualify names\n", "Compile post process\n", "Post process failed\n", "Building policy binary\n", "Failed to generate binary\n", "Writing policy.conf file\n", "Unknown data flavor: %d\n", "Failed to find flavor: %d\n", "<none>", "string", "<datum>", "<list>", "<list_item>", "<param>", "<args>", "<unknown>", "user %s prefix %s;\n", "\t<<none>>", "\t%s:%s:%s", "Unknown value for handle-unknown: %i\n", "Invalid symtab type\n", "Failed to get symtab from node", "call", "userattribute", "userattributeset", "sensitivity", "categoryset", "levelrange", "ipaddr", "classmap", "classpermission", "name", "handleunknown", "blockinherit", "blockabstract", "classorder", "classmapping", "classpermissionset", "classcommon", "sidcontext", "sidorder", "userlevel", "userrange", "userbounds", "userprefix", "selinuxuser", "selinuxuserdefault", "typeattribute", "typeattributeset", "expandtypeattribute", "typealias", "typealiasactual", "typebounds", "typepermissive", "rangetransition", "userrole", "roletype", "roletransition", "roleallow", "roleattribute", "roleattributeset", "rolebounds", "sensitivityalias", "sensitivityaliasactual", "categoryalias", "categoryaliasactual", "categoryorder", "sensitivityorder", "sensitivitycategory", "context", "filecon", "ibpkeycon", "ibendportcon", "portcon", "nodecon", "genfscon", "netifcon", "pirqcon", "iomemcon", "ioportcon", "pcidevicecon", "devicetreecon", "fsuse", "policycap", "optional", "defaultuser", "defaultrole", "defaulttype", "macro", "defaultrange", "high", "low-high", "<root>", "<node>", "perm", "permissionx", "unordered", "<src_info>", "<src_cil>", "<src_hll>", "%s,%s", "%s,%s,%s", "%s.%s,%s", "%s.%s", "cil_copy_class: class cannot be redefined\n", "classpermission cannot be redefined\n", "%s %u\n", "cil_copy_expandtypeattribute", "cil_copy_alias: alias cannot be redefined\n", "cil_copy_bool: boolean cannot be redefined\n", "cil_copy_tunable: tunable cannot be redefined\n", "cil_copy_permissionx: permissionx cannot be redefined\n", "cil_copy_catset: categoryset cannot be redefined\n", "cil_copy_level: level cannot be redefined\n", "cil_copy_levelrange: levelrange cannot be redefined\n", "cil_copy_context: context cannot be redefined\n", "Unknown flavor %d in expression being copied\n", "cil_copy_macro: macro cannot be redefined\n", "cil_copy_ipaddr: ipaddress cannot be redefined\n", "Incompatible flavor when trying to copy %s", "Note: conflicting declaration", "%s %s shadows a macro parameter", "Note: macro declaration", "cil_tree_walk failed, rc: %d\n", "An error occurred while searching for avrule in AST\n", "Fully qualified name for block %s is too long\n", "Problem qualifying names in block", "Fully qualified name for %s is too long\n", "fatal flex scanner internal error--no action found", "out of dynamic memory in cil_yy_create_buffer()", "out of dynamic memory in cil_yy_scan_buffer()", "out of dynamic memory in cil_yy_scan_bytes()", "bad buffer in cil_yy_scan_bytes()", "Lexer failed to setup buffer\n", "fatal flex scanner internal error--end of buffer missed", "fatal error - scanner input buffer overflow", "input in flex scanner failed", "out of dynamic memory in yy_get_next_buffer()", "out of dynamic memory in cil_yyensure_buffer_stack()", "Attempt to append data to a NULL list", "Attempt to prepend data to a NULL list", "Attempt to append an item to a NULL list", "Attempt to append a NULL item to a list", "Attempt to prepend an item to a NULL list", "Attempt to prepend a NULL item to a list", "Attempt to remove data from a NULL list", "Failed to allocate memory\n", "Close parenthesis without matching open at line %d of %s\n", "Symbol not inside parenthesis at line %d of %s\n", "Open parenthesis without matching close at line %d of %s\n", "High-level language line marker start without close at line %d of %s\n", "Invalid token '%s' at line %d of %s\n", "Unknown token type '%d' at line %d of %s\n", "Line mark end without start\n", "Invalid line mark syntax\n", "Problem parsing line number for line mark\n", "Problem with high-level line mark at line %d of %s\n", "default_user", "default_role", "default_type", "attribute", "attribute_role", "cil_gen_require", "common %s {", "%s {", "default_range {", " %s %s", "sensitivity %s", " alias", "dominance {", "category %s", "level %s:", "mlsconstrain %s %s;\n", "not ", " and ", " or ", " == ", " != ", " dom ", " domby ", " incomp ", " ??? ", "%s %s %s;\n", "%s %s;\n", "bool %s %s;\n", "typealias %s alias", "typeattribute %s %s", ", %s", "neverallowxperm", "%s %s %s : ", "%s %s {", " 0x%x", " 0x%x-0x%x", " 0x%x 0x%x", "%s %s %s : %s;\n", "%s %s %s : %s %s;\n", "type_transition %s %s : %s %s \"%s\";\n", "range_transition %s %s : %s ", " || ", " && ", "role %s types { %s", "roleattribute %s %s", "allow %s %s;\n", "role_transition %s %s : %s %s;\n", " roles", " level ", " range ", "constrain %s %s;\n", "sid %s ", "fs_use_xattr %s ", "fs_use_task %s ", "fs_use_trans %s ", "genfscon %s %s ", "portcon ", "udp ", "tcp ", "dccp ", "%d-%d ", "netifcon %s ", "ibpkeycon %s ", "ibendportcon %s ", "nodecon ", "[INVALID] ", "pirqcon %d ", "iomemcon %lx ", "iomemcon %lx-%lx ", "ioportcon 0x%x-0x%x ", "pcidevicecon 0x%x ", "devicetreecon %s ", "Failed to verify cil database\n", "Failed post db handling\n", "Failure during cil databse count helper\n", "Failure during cil database array helper\n", "Failed to mark attributes used by generated attributes used in neverallow rules\n", "Failed to create attribute bitmaps\n", "Failed during roletype association\n", "Failed during userrole association\n", "Failed to evaluate class mapping permissions expressions\n", "Failed to evaluate category expressions\n", "Problems processing netifcon rules\n", "Problems processing genfscon rules\n", "Problems processing ibpkeycon rules\n", "Problems processing ibendportcon rules\n", "Problems processing portcon rules\n", "Problems processing nodecon rules\n", "Problems processing fsuse rules\n", "Problems processing filecon rules\n", "Problems processing iomemcon rules\n", "Problems processing ioportcon rules\n", "Problems processing pcidevicecon rules\n", "Problems processing devicetreecon rules\n", "Failed to expand type attribute to bitmap\n", "Failed to expand expression list to bitmap\n", "Failed to expand 'all' operator\n", "Failed to expand category range\n", "Range operation only supported for categories permissionx\n", "Failed to get first operand bitmap\n", "Failed to NOT bitmap\n", "Failed to get second operand bitmap\n", "Failed to apply operator to bitmaps\n", "Failed to get operand in list\n", "Failed to OR operands in list\n", "Category sets cannont be used in a category range\n", "Invalid category range\n", "Failed to set cat bit\n", "Failed to set permissionx bit\n", "permissionx value %s not valid number\n", "permissionx value %s must be between 0x0000 and 0xFFFF\n", "Failed to set perm bit\n", "Failed to expand category expression to bitmap\n", "Failed to expand role attribute to bitmap\n", "Failed to expand permissionx expression\n", "Failed to expand user attribute to bitmap\n", "cil_post_db_roletype_helper failed\n", "Failed to set bit in role types bitmap\n", "cil_post_db_userrole_helper failed\n", "Failed to set bit in user roles bitmap\n", "Found conflicting %s rules\n", "  at %s:%d\n", "Policy must include at least one avrule\n", "Policy cannot contain more than one selinuxuserdefault, found: %d\n", "Failed to reset AST\n", "Conflicting use of expandtypeattribute. Expandtypeattribute was set to both true or false for %s. Resolving to false. \n", "Type rule result must be a type [%d]\n", "Attribute type not an attribute\n", "%s is not an alias\n", "%s is a %s, but aliases a %s\n", "%s %s cannot bind more than one value\n", "Alias declared but not used", "Circular alias found: %s ", "Typepermissive must be a type or type alias\n", "typetransition result is not a type or type alias\n", "class cannot be associeated with more than one common\n", "Too many permissions in class '%s' when including common permissions", "Userlevel must be a user\n", "Userrange must be a user: %s\n", "Userprefix must be a user: %s\n", "Selinuxuser must be a user: %s\n", "roletransition must result in a role, but %s is a %s\n", "Attribute role not an attribute\n", "SID %s has already been merged into the ordered list\n", "Class %s has already been merged into the ordered list\n", "Category %s has already been merged into the ordered list\n", "Sensitivity %s has already been merged into the ordered list\n", "Unable to merge ordered list", "Failed to resolve class %s in classorder\n", "Failed to resolve sid %s in sidorder\n", "Failed to resolve category %s in categoryorder\n", "%s is not a category. Only categories are allowed in categoryorder statements\n", "Failed to resolve sensitivty %s in sensitivityorder\n", "Failed to find sensitivity\n", "Context user must be a user: %s\n", "Context role not a role: %s\n", "Type not a type or type alias\n", "Nodecon ip address not in the same family\n", "sid's cannot be associated with more than one context\n", "%s is not a block\n", "block %s", "blockinherit %s", "Recursive blockinherit found:\n", "Failed to copy block contents into blockinherit\n", "Failed to resolve blockabstract to a block, rc: %d\n", "Failed to copy in, rc: %d\n", "Failed to resolve in-statement", "Bounds parent %s is an attribute\n", "Bounds child %s is an attribute\n", "User %s already bound by parent", "Role %s already bound by parent", "Type %s already bound by parent", "Bad bounds statement", "macro %s", "call %s", "Recursive macro call found:\n", "Failed to resolve %s to a macro\n", "Missing arguments", "Failed to create anonymous level, rc: %d\n", "Failed to create anonymous levelrange, rc: %d\n", "Failed to create anonymous ip address, rc; %d\n", "Failed to create anonymous classpermission\n", "Unexpected flavor: %d\n", "Unexpected arguments", "Failed to copy macro, rc: %d\n", "Arguments not created correctly\n", "Attribute user not an attribute\n", "%s statement is not allowed in optionals", "%s statement is not allowed in blocks", "%s statement is not allowed in macros", "%s statement is not allowed in booleanifs (tunableif treated as a booleanif)", "%s statement is not allowed in booleanifs", "Disabling optional '%s'", "Failed to resolve %s statement", "Pass %i of resolution failed\n", "Resetting declarations\n", "Failed to reset declarations\n", "Invalid call to cil_resolve_name\n", "Invalid name %s", "Can only use %s name for name resolution in \"in\" blocks\n", "Failed to resolve permission list\n", "Failed to resolve permission %s for map class\n", "Failed to resolve permission %s\n", "Ignoring '%s' as it has already been declared in classorder.\n", "Failed to create symtab\n", "Failed to insert datum into hashtab\n", " at %s:%d", " from %s:%d", "Problem", "\n\n perms list contained unexpected data type: %d\n", " class: %s", ", perm_strs:", "FLAVOR: %d", "BLOCK: %s\n", "BLOCKINHERIT: %s\n", "BLOCKABSTRACT: %s\n", "IN: %s\n", "USER: %s\n", "TYPE: %s\n", "cil_tree_print_node", "(EXPANDTYPEATTRIBUTE ", "%s)\n", "(TYPEATTRIBUTESET %s ", "TYPEATTRIBUTE: %s\n", "ROLE: %s\n", "USERROLE:", "USERLEVEL:", "USERRANGE:", "USERBOUNDS: user: %s, bounds: %s\n", "ROLETYPE:", "ROLETRANSITION:", " %s\n", "ROLEALLOW:", "(ROLEATTRIBUTESET %s ", "ROLEATTRIBUTE: %s\n", "(USERATTRIBUTESET %s ", "USERATTRIBUTE: %s\n", "ROLEBOUNDS: role: %s, bounds: %s\n", "CLASS: %s ", "inherits: %s ", "CLASSORDER: ()\n", "CLASSORDER: (", "COMMON: %s (", "CLASSCOMMON: class: %s, common: %s\n", "CLASSPERMISSION: %s", "CLASSPERMISSIONSET: %s", "MAP_CLASS: %s", "MAP_PERM: %s", " perms: ()", " kernel class perms: (", "CLASSMAPPING: map class: %s, map perm: %s,", "BOOL: %s, value: %d\n", "TUNABLE: %s, value: %d\n", "(BOOLEANIF ", "(TUNABLEIF ", "true\n", "false\n", "TYPEALIAS: %s\n", "TYPEALIASACTUAL: type: %s, alias: %s\n", "TYPEBOUNDS: type: %s, bounds: %s\n", "TYPEPERMISSIVE: %s\n", "TYPETRANSITION:", "RANGETRANSITION:", "ALLOW:", "AUDITALLOW:", "DONTAUDIT:", "NEVERALLOW:", "TYPEMEMBER:", "TYPECHANGE:", "SENSITIVITY: %s\n", "SENSITIVITYALIAS: %s\n", "SENSITIVITYALIAS: alias: %s, sensitivity: %s\n", "CATEGORY: %s\n", "CATEGORYALIAS: %s\n", "CATEGORYALIAS: alias %s, category: %s\n", "CATSET: %s ", "CATORDER: ()\n", "CATORDER: (", "SENSCAT: sens:", " %s ", " [processed]", "SENSITIVITYORDER: (", "LEVEL %s:", "LEVELRANGE %s:", "CONSTRAIN: (", "MLSCONSTRAIN: (", "(VALIDATETRANS ", "(MLSVALIDATETRANS ", "CONTEXT %s:", "FILECON:", " %s %d", "IBPKEYCON: %s", " (%d %d) ", "PORTCON:", " udp", " tcp", " dccp", " (%d %d)", "NODECON:", "GENFSCON:", "NETIFCON %s", "IBENDPORTCON: %s %u ", "PIRQCON %d", "IOMEMCON ( %ld %ld )", "IOPORTCON ( %d %d )", "PCIDEVICECON %d", "DEVICETREECON %s", "FSUSE: ", "xattr ", "task ", "trans ", "unknown ", "SID: %s\n", "SIDCONTEXT: %s", "SIDORDER: ()\n", "SIDORDER: (", "POLICYCAP: %s\n", "MACRO %s:", " parameters: (", " flavor: %d, string: %s;", "CALL: macro name:", ", args: ( ", "type:", "user:", "role:", "sensitivity:", "category:", "categoryset:", "level:", "class:", "OPTIONAL: %s\n", "IPADDR %s: %s\n", "CIL FLAVOR: %d\n", "Tree is NULL\n", "Unknown operator in expression\n", "Unknown operand in expression\n", "Unknown flavor in expression\n", "Name is NULL\n", "Name length greater than max name length of %d", "First character in %s is not a letter\n", "Invalid character \"%c\" in %s\n", "Invalid name\n", "Invalid syntax\n", "Invalid operator (%s) for set expression\n", "Invalid operator (%s) for boolean or tunable expression\n", "Operator (%s) only valid for catset and permissionx expression\n", "Unexpected value (%s) for expression operator\n", "l1, l2, h1, and h2 cannot be used on the left side with a string or list on the right side\n", "u3, r3, and t3 can only be used with mlsvalidatetrans rules\n", "u2 on the right side must be used with eq or neq as the operator\n", "u2 on the right side must be used with u1 on the left\n", "r2 on the right side must be used with r1 on the left\n", "t2 on the right side must be used with eq or neq as the operator\n", "t2 on the right side must be used with t1 on the left\n", "l2 on the right side must be used with l1 or h1 on the left\n", "h2 on the right side must be used with l1, l2, or h1 on the left\n", "h1 on the right side must be used with l1 on the left\n", "Invalid operator (%s) for constraint expression\n", "Invalid constraint syntax\n", "Self-reference found for %s\n", "Invalid Range syntax\n", "SID %s not in sidorder statement", "Class %s not in classorder statement", "Category %s not in categoryorder statement", "Sensitivity %s not in sensitivityorder statement", "At least one initial sid must be defined in the policy\n", "No context assigned to SID %s declared", "Failed to find category %s in category list\n", "No categories can be used with sensitivity %s\n", "Category %s cannot be used with sensitivity %s\n", "Sensitivity %s does not dominate %s\n", "Low level category set must be a subset of the high level category set\n", "Low level sensitivity and categories are not associated\n", "High level sensitivity and categories are not associated\n", "Invalid named range", "Circular bounds found for role %s\n", "Invalid role", "Circular bounds found for type %s\n", "Invalid type", "Role %s is invalid for user %s\n", "No roles given to the user %s\n", "Type %s is invalid for role %s\n", "No types associated with role %s\n", "Range %s is invalid for user %s\n", "Invalid context\n", "Invalid named context", "Duplicate rule defined", "Invalid rule", "Neverallow found in tunableif block (treated as a booleanif due to preserve-tunables)", "Neverallow found in booleanif block", "Invalid %s statement in tunableif (treated as a booleanif due to preserve-tunables)", "Invalid %s statement in booleanif", "Invalid tunableif (treated as a booleanif due to preserve-tunables)", "Invalid booleanif", "Invalid netifcon", "Invalid ibendportcon", "Invalid genfscon", "Invalid filecon", "Invalid nodecon", "Invalid ibpkeycon", "Invalid portcon", "Invalid pirqcon", "Invalid iomemcon", "Invalid ioportcon", "Invalid pcidevicecon", "Invalid devicetreecon", "Invalid fsuse", "Invalid permissionx kind (%d)", "Invalid permissionx: %s is not a permission of class %s", "Duplicate permissions between %s common and class declarations\n", "Invalid class", "Invalid policycap (%s)", "Policy can not have more than one handleunknown\n", "Policy can not have more than one mls\n", "Invalid user", "User %s does not have a default level\n", "User %s does not have a level range\n", "Circular bounds found for user %s\n", "Map class %s does not have a classmapping for %s", "Found circular class permissions involving the map class %s and permission %s", "Classpermission %s does not have a classpermissionset", "Found circular class permissions involving the set %s", "Failure opening output file for writing AST\n", "CIL_BLOCK", "CIL_BLOCKABSTRACT", "CIL_BLOCKINHERIT", "CIL_IN", "CIL_MAP_PERM", "CIL_CLASSMAPPING", "CIL_MAP_CLASS", "CIL_CLASSPERMISSION", "CIL_CLASSPERMISSIONSET", "CIL_USERATTRIBUTE", "CIL_USERATTRIBUTESET", "CIL_USERBOUNDS", "CIL_USERPREFIX", "CIL_ROLEBOUNDS", "CIL_ROLEATTRIBUTESET", "CIL_ROLEALLOW", "CIL_TYPEBOUNDS", "CIL_ROLETRANSITION", "CIL_RANGETRANSITION", "CIL_TUNABLE", "CIL_BOOL", "CIL_PERMISSIONX", "CIL_CATSET", "CIL_LEVEL", "CIL_LEVELRANGE", "CIL_CONTEXT", "CIL_NETIFCON", "CIL_FILECON", "CIL_NODECON", "CIL_PORTCON", "CIL_PIRQCON", "CIL_IOMEMCON", "CIL_IOPORTCON", "CIL_PCIDEVICECON", "CIL_DEVICETREECON", "CIL_CONSTRAIN", "CIL_VALIDATETRANS", "CIL_MLSVALIDATETRANS", "CIL_CALL", "CIL_MACRO", "CIL_NODE", "CIL_OPTIONAL", "CIL_IPADDR", "CIL_CONDBLOCK", "CIL_BOOLEANIF", "CIL_TUNABLEIF", "CIL_DEFAULTUSER", "CIL_DEFAULTROLE", "CIL_DEFAULTTYPE", "CIL_DEFAULTRANGE", "CIL_SELINUXUSER", "CIL_SELINUXUSERDEFAULT", "Unknown AST flavor: %d.\n", "flavor \"%s\" is not supported, look in file \"%s\" on line %d to add support.\n", "external/selinux/libsepol/cil/src/cil_write_ast.c", "(%s %s)\n", "(%s %s ", "OOM. Unable to copy string.\n", "Unknown operator in expression: %d\n", "(%s %s %s)\n", "OOM. Unable to copy context string.\n", "OOM. Unable to copy range string.\n", "Error unpacking and writing context\n", "OOM. Unable to copy level string.\n", "Error unpacking and writing levelrange\n", "Error unpacking and writing level\n", "OOM. Unable to copy levelrange string.\n", "(%s %s %s %s \"%s\" %s)\n", "Unknown AVRULE type: %d\n", "OOM. Unable to copy xperms string.\n", "(%s %s %s %s)\n", "Unknown permissionx kind: %d\n", "Error writing xperm\n", "OOM. Unable to copy classpermset.\n", "Unrecognized classperms flavor\n.", "Unknown TYPERULE type: %d\n", "(%s %s %s %s %s)\n", "(%s %s (%s))\n", "Unrecognized fsuse type\n", "Unknown handleunknown value: %d.\n", "Unknown mls value: %d.\n", "While testing expression, expression result was undefined - this should never happen.", "Found expr with no bools and only a ! - this should never happen.", "expression result was undefined - disabling all rules.", "security: conditional expressions uses unknown bool.", "security: conditional expressions uses unknown operator.", "security: conflicting type rules when adding type rule for true.", "security: conflicting type rules.", "security: ebitmap: out of memory", "security: ebitmap: truncated map", "Expression result was undefined, skipping allrules"], "stringidentifiers": ["check_assertions", "libsepol", "report_assertion_avtab_matches", "report_assertion_extended_permissions", "report_failure", "check_assertion_avtab_match", "check_assertion_extended_permissions", "avtab_read_item", "avtab_read", "sepol_bool_key_create", "sepol_bool_key_extract", "sepol_bool_set_name", "sepol_bool_create", "sepol_bool_clone", "sepol_bool_set", "sepol_bool_exists", "sepol_bool_query", "sepol_bool_iterate", "bool_update", "bool_to_record", "context_to_string", "context_from_record", "context_to_record", "context_from_string", "sepol_context_set_user", "sepol_context_set_role", "sepol_context_set_type", "sepol_context_set_mls", "sepol_context_create", "sepol_context_clone", "sepol_context_from_string", "sepol_context_to_string", "ebitmap_set_bit", "mls_semantic_level_expand", "mls_semantic_range_expand", "expand_module", "expand_avtab", "expand_cond_av_list", "expand_avrule_helper", "find_avtab_node", "allocate_xperms", "expand_terule_helper", "copy_and_expand_avrule_block", "copy_role_allows", "copy_role_trans", "expand_filename_trans", "expand_range_trans", "exp_rangetr_helper", "cond_node_copy", "cond_node_map_bools", "type_copy_callback", "attr_convert_callback", "common_copy_callback", "class_copy_callback", "class_copy_default_new_object", "type_bounds_copy_callback", "alias_copy_callback", "object_r", "role_copy_callback", "role_bounds_copy_callback", "role_fix_callback", "sens_copy_callback", "cats_copy_callback", "user_copy_callback", "user_bounds_copy_callback", "bool_copy_callback", "constraint_copy_callback", "constraint_node_clone", "ocontext_copy", "ocontext_copy_selinux", "ocontext_copy_xen", "genfs_copy", "type_attr_map", "expand_avtab_insert", "expand_cond_insert", "sepol_genbools", "sepol_genbools_array", "load_booleans", "process_boolean", "true", "false", "sepol_set_delusers", "sepol_genusers_policydb", "user", "load_users", "roles", "level", "range", "bounds_check_types", "bounds_check_roles", "bounds_check_users", "hierarchy_add_bounds", "bounds_expand_parent_rules", "bounds_insert_helper", "bounds_add_bad", "bounds_report", "bounds_check_role_callback", "bounds_check_user_callback", "hierarchy_add_user_callback", "hierarchy_add_role_callback", "hierarchy_add_type_callback", "sepol_iface_key_create", "sepol_iface_key_extract", "sepol_iface_create", "sepol_iface_set_name", "sepol_iface_set_ifcon", "sepol_iface_set_msgcon", "sepol_iface_clone", "sepol_iface_query", "sepol_iface_modify", "sepol_iface_iterate", "iface_to_record", "iface_from_record", "domby", "incomp", "deny", "reject", "allow", "null", "kernel", "security", "unlabeled", "file", "file_labels", "init", "any_socket", "port", "netif", "netmsg", "node", "igmp_packet", "icmp_socket", "tcp_socket", "sysctl_modprobe", "sysctl", "sysctl_fs", "sysctl_kernel", "sysctl_net", "sysctl_net_unix", "sysctl_vm", "sysctl_dev", "kmod", "policy", "scmp_packet", "devnull", "dom0", "domio", "domxen", "ioport", "iomem", "device", "source", "target", "systemlow", "auditallow", "dontaudit", "allowx", "auditallowx", "dontauditx", "typetransition", "typemember", "typechange", "self", "ioctl", "xattr", "trans", "task", "dccp", "mlsconstrain", "constrain", "mlsvalidatetrans", "validatetrans", "allowxperm", "auditallowxperm", "dontauditxperm", "type_transition", "type_member", "type_change", "link_modules", "prepare_module", "prepare_base", "permission_copy_callback", "cat_copy_callback", "type_set_or_convert", "type_fix_callback", "user_fix_callback", "role_set_or_convert", "mls_level_convert", "copy_avrule_block", "copy_avrule_list", "copy_role_trans_list", "copy_role_allow_list", "copy_cond_list", "copy_filename_trans_list", "copy_range_trans_list", "copy_scope_index", "scope_copy_callback", "common", "class", "role", "bool", "category", "enable_avrules", "BASE", "is_decl_requires_met", "print_missing_requirements", "debug_requirements", "populate_roleattributes", "populate_decl_roleattributes", "expand_role_attributes", "mls_to_string", "mls_from_string", "sepol_mls_contains", "sepol_mls_check", "sepol_link_packages", "sepol_module_package_read", "sepol_module_package_info", "sepol_module_package_write", "module_package_read_offsets", "base", "Overflow", "user_r", "staff_r", "sysadm_r", "system_r", "unconfined_r", "auditadm_r", "secadm_r", "_typeattr_", "_roleattr_", "tunable", "boolean", "neverallowx", "auditdenty", "neverallow", "tunableif", "booleanif", "type", "__default__", "prefix", "char", "block", "socket", "pipe", "symlink", "sepol_node_key_create", "sepol_node_key_extract", "sepol_node_get_addr", "sepol_node_get_addr_bytes", "sepol_node_set_addr", "sepol_node_set_addr_bytes", "sepol_node_get_mask", "sepol_node_get_mask_bytes", "sepol_node_set_mask", "sepol_node_set_mask_bytes", "ipv4", "ipv6", "sepol_node_create", "sepol_node_clone", "sepol_node_set_con", "node_alloc_addr", "node_parse_addr", "node_alloc_addr_string", "node_expand_addr", "sepol_node_exists", "sepol_node_query", "sepol_node_modify", "sepol_node_iterate", "node_to_record", "node_from_record", "network_peer_controls", "open_perms", "extended_socket_class", "always_check_network", "cgroup_seclabel", "nnp_nosuid_transition", "XenFlask", "policydb_index_decls", "policydb_index_others", "policydb_load_isids", "filename_trans_read", "policydb_read", "zero", "avrule_read", "class_read", "role_read", "mls_read_range_helper", "mls_read_level", "mls_read_semantic_level_helper", "scope_read", "ocontext_read", "ocontext_read_selinux", "context_read_and_validate", "ocontext_read_xen", "genfs_read", "policydb_from_image", "policydb_to_image", "packet", "sepol_port_key_create", "sepol_port_key_extract", "sepol_port_create", "sepol_port_clone", "sepol_port_set_con", "sepol_port_exists", "sepol_port_query", "sepol_port_modify", "sepol_port_iterate", "sepol2ipproto", "port_to_record", "ipproto2sepol", "port_from_record", "sepol_role_list", "sepol_set_policydb_from_file", "sepol_validate_transition", "sepol_validate_transition_reason_buffer", "sepol_compute_av_reason", "sepol_compute_av_reason_buffer", "sepol_string_to_security_class", "sepol_string_to_av_perm", "sepol_sid_to_context", "sepol_context_to_sid", "sepol_load_policy", "constraint_expr_eval_reason", "Validatetrans", "Constraint", "GRANTED", "DENIED", "cat_expr_buf", "push", "context_struct_compute_av", "sepol_compute_sid", "validate_class", "validate_perm", "convert_context", "sepol_user_key_create", "sepol_user_key_extract", "sepol_user_set_name", "sepol_user_set_mlslevel", "sepol_user_set_mlsrange", "sepol_user_add_role", "sepol_user_set_roles", "sepol_user_get_roles", "sepol_user_create", "sepol_user_clone", "sepol_user_modify", "sepol_user_query", "sepol_user_iterate", "user_to_record", "policydb_write", "type_write", "avtab_write_item", "avrule_write", "role_trans_write", "role_trans_rule_write", "ocontext_write_xen", "range_write_helper", "base_typeattr_", "unknown", "string", "call", "userattribute", "userattributeset", "sensitivity", "categoryset", "levelrange", "ipaddr", "classmap", "classpermission", "name", "handleunknown", "blockinherit", "blockabstract", "classorder", "classmapping", "classpermissionset", "classcommon", "sidcontext", "sidorder", "userlevel", "userrange", "userbounds", "userprefix", "selinuxuser", "selinuxuserdefault", "typeattribute", "typeattributeset", "expandtypeattribute", "typealias", "typealiasactual", "typebounds", "typepermissive", "rangetransition", "userrole", "roletype", "roletransition", "roleallow", "roleattribute", "roleattributeset", "rolebounds", "sensitivityalias", "sensitivityaliasactual", "categoryalias", "categoryaliasactual", "categoryorder", "sensitivityorder", "sensitivitycategory", "context", "filecon", "ibpkeycon", "ibendportcon", "portcon", "nodecon", "genfscon", "netifcon", "pirqcon", "iomemcon", "ioportcon", "pcidevicecon", "devicetreecon", "fsuse", "policycap", "optional", "defaultuser", "defaultrole", "defaulttype", "macro", "defaultrange", "high", "perm", "permissionx", "unordered", "cil_copy_expandtypeattribute", "default_user", "default_role", "default_type", "attribute", "attribute_role", "cil_gen_require", "neverallowxperm", "Problem", "cil_tree_print_node", "CIL_BLOCK", "CIL_BLOCKABSTRACT", "CIL_BLOCKINHERIT", "CIL_IN", "CIL_MAP_PERM", "CIL_CLASSMAPPING", "CIL_MAP_CLASS", "CIL_CLASSPERMISSION", "CIL_CLASSPERMISSIONSET", "CIL_USERATTRIBUTE", "CIL_USERATTRIBUTESET", "CIL_USERBOUNDS", "CIL_USERPREFIX", "CIL_ROLEBOUNDS", "CIL_ROLEATTRIBUTESET", "CIL_ROLEALLOW", "CIL_TYPEBOUNDS", "CIL_ROLETRANSITION", "CIL_RANGETRANSITION", "CIL_TUNABLE", "CIL_BOOL", "CIL_PERMISSIONX", "CIL_CATSET", "CIL_LEVEL", "CIL_LEVELRANGE", "CIL_CONTEXT", "CIL_NETIFCON", "CIL_FILECON", "CIL_NODECON", "CIL_PORTCON", "CIL_PIRQCON", "CIL_IOMEMCON", "CIL_IOPORTCON", "CIL_PCIDEVICECON", "CIL_DEVICETREECON", "CIL_CONSTRAIN", "CIL_VALIDATETRANS", "CIL_MLSVALIDATETRANS", "CIL_CALL", "CIL_MACRO", "CIL_NODE", "CIL_OPTIONAL", "CIL_IPADDR", "CIL_CONDBLOCK", "CIL_BOOLEANIF", "CIL_TUNABLEIF", "CIL_DEFAULTUSER", "CIL_DEFAULTROLE", "CIL_DEFAULTTYPE", "CIL_DEFAULTRANGE", "CIL_SELINUXUSER", "CIL_SELINUXUSERDEFAULT"], "debugstrings": ["policy version %u does not support extended permissions rules and one was specified\n", "Upgrading policy version from %u to %u\n", "cannot get module version len (at section %u)", "policydb version %d does not match my version range %d-%d", "policydb module version %d does not match my version range %d-%d", "unable to find policy compat info for version %d", "module policy version %u does not support ioctl extended permissions rules and one was specified", "policy version %d cannot support MLS", "compatibility lookup failed for policy version %d", "Warning! Policy version %d cannot support permissive types, but some were defined", "Warning! Module policy version %d cannot support permissive types, but one was defined", "policy version %u does not support ioctl extendedpermissions rules and one was specified", "policy version %d cannot represent IOMEM addresses over 16TB", "Unable to create version mapping table.\n"], "localsymbols": [""], "dependencies": ["libc.so", "libm.so", "libdl.so"], "elfname": "libsepol.so"}