{"globalvars": ["CIL_KEY_PIPE", "CIL_KEY_ALL", "CIL_KEY_NEVERALLOWX", "CIL_KEY_OBJECT_R", "CIL_KEY_TUNABLEIF", "CIL_KEY_NODECON", "CIL_KEY_CATEGORY", "CIL_KEY_TYPEATTRIBUTESET", "CIL_KEY_ROLETRANSITION", "CIL_KEY_USERRANGE", "CIL_KEY_CONS_L1", "CIL_KEY_EXPANDTYPEATTRIBUTE", "CIL_KEY_HLL_LMX", "CIL_KEY_SOCKET", "value", "CIL_KEY_PERMISSIONX", "CIL_KEY_TYPETRANSITION", "CIL_KEY_SELINUXUSERDEFAULT", "CIL_KEY_SENSITIVITYORDER", "cil_yytext", "CIL_KEY_NETIFCON", "CIL_KEY_CONS_DOM", "CIL_KEY_CONS_U1", "CIL_KEY_SRC_HLL", "CIL_KEY_CONS_R2", "CIL_KEY_CONS_R1", "CIL_KEY_CONS_H2", "CIL_KEY_RANGETRANSITION", "CIL_KEY_CONS_U3", "CIL_KEY_ANY", "CIL_KEY_HLL_LME", "CIL_KEY_IOPORTCON", "CIL_KEY_SID", "CIL_KEY_CONS_U2", "CIL_KEY_PORTCON", "CIL_KEY_SRC_INFO", "CIL_KEY_CLASS", "cil_log_handler", "CIL_KEY_TYPE", "CIL_KEY_CALL", "CIL_KEY_AND", "CIL_KEY_MLSVALIDATETRANS", "CIL_KEY_CATALIAS", "CIL_KEY_CATORDER", "CIL_KEY_ROLEATTRIBUTE", "CIL_KEY_SOURCE", "CIL_KEY_USER", "CIL_KEY_USERLEVEL", "CIL_KEY_IOCTL", "CIL_KEY_ROOT", "CIL_KEY_PIRQCON", "CIL_KEY_NODE", "CIL_KEY_ROLE", "CIL_KEY_XOR", "CIL_KEY_CONS_T2", "CIL_KEY_NEVERALLOW", "CIL_KEY_LOW_HIGH", "CIL_KEY_STRING", "CIL_KEY_CONSTRAIN", "cil_yy_flex_debug", "cil_yyin", "CIL_KEY_SIDORDER", "CIL_KEY_TUNABLE", "CIL_KEY_HANDLEUNKNOWN_DENY", "CIL_KEY_SYMLINK", "CIL_KEY_CONS_T1", "CIL_KEY_SENSALIASACTUAL", "CIL_KEY_CONS_L2", "CIL_KEY_TYPEPERMISSIVE", "CIL_KEY_GENFSCON", "CIL_KEY_DEFAULTRANGE", "CIL_KEY_MLS", "CIL_KEY_SELINUXUSER", "CIL_KEY_LEVEL", "CIL_KEY_CONS_H1", "out_file", "CIL_KEY_TCP", "CIL_KEY_CONS_DOMBY", "CIL_KEY_CATSET", "line", "CIL_KEY_MLSCONSTRAIN", "CIL_KEY_XATTR", "CIL_KEY_TASK", "CIL_KEY_STAR", "CIL_KEY_HANDLEUNKNOWN", "sepol_compat_handle", "CIL_KEY_TYPEATTRIBUTE", "CIL_KEY_BLOCK", "CIL_KEY_BLOCKINHERIT", "CIL_KEY_HANDLEUNKNOWN_REJECT", "CIL_KEY_SIDCONTEXT", "CIL_KEY_MAP_CLASS", "CIL_KEY_AUDITALLOWX", "CIL_KEY_MACRO", "CIL_KEY_ROLETYPE", "CIL_KEY_AUDITALLOW", "CIL_KEY_VALIDATETRANS", "CIL_KEY_PERM", "CIL_KEY_TARGET", "CIL_KEY_LOW", "CIL_KEY_CATALIASACTUAL", "CIL_KEY_DIR", "CIL_KEY_ROLEBOUNDS", "CIL_KEY_CLASSORDER", "cil_yylineno", "CIL_KEY_LEVELRANGE", "CIL_KEY_FILE", "CIL_KEY_OR", "CIL_KEY_GLOB", "CIL_KEY_FILECON", "CIL_KEY_TYPEALIASACTUAL", "CIL_KEY_CLASSPERMISSION", "CIL_KEY_SENSALIAS", "CIL_KEY_DEVICETREECON", "CIL_KEY_HIGH", "CIL_KEY_CONS_INCOMP", "CIL_KEY_PCIDEVICECON", "CIL_KEY_EQ", "policydb_target_strings", "CIL_KEY_TYPEMEMBER", "CIL_KEY_CLASSPERMISSIONSET", "CIL_KEY_DCCP", "CIL_KEY_HANDLEUNKNOWN_ALLOW", "CIL_KEY_TYPEALIAS", "CIL_KEY_CONS_T3", "CIL_KEY_CHAR", "CIL_KEY_DONTAUDIT", "CIL_KEY_BOOLEANIF", "CIL_KEY_ROLEALLOW", "CIL_KEY_UNORDERED", "CIL_KEY_NEQ", "CIL_KEY_IN", "CIL_KEY_POLICYCAP", "CIL_KEY_SENSITIVITY", "CIL_KEY_DEFAULTUSER", "CIL_KEY_USERATTRIBUTESET", "CIL_KEY_BLOCKABSTRACT", "CIL_KEY_NOT", "CIL_KEY_FSUSE", "cil_yyout", "CIL_KEY_CONDTRUE", "CIL_KEY_HLL_LMS", "CIL_KEY_DONTAUDITX", "CIL_KEY_DEFAULTROLE", "CIL_KEY_ALLOWX", "CIL_KEY_BOOL", "CIL_KEY_CLASSCOMMON", "CIL_KEY_RANGE", "CIL_KEY_TRANS", "CIL_KEY_TYPEBOUNDS", "CIL_KEY_USERBOUNDS", "CIL_KEY_CONTEXT", "cil_mem_error_handler", "CIL_KEY_NAME", "CIL_KEY_UDP", "CIL_KEY_IOMEMCON", "CIL_KEY_IPADDR", "CIL_KEY_SRC_CIL", "CIL_KEY_SELF", "CIL_KEY_TYPECHANGE", "CIL_KEY_CONDFALSE", "cil_yyleng", "CIL_KEY_USERPREFIX", "CIL_KEY_CLASSMAPPING", "CIL_KEY_CONS_R3", "CIL_KEY_USERATTRIBUTE", "CIL_KEY_DEFAULTTYPE", "CIL_KEY_ALLOW", "CIL_KEY_ROLEATTRIBUTESET", "CIL_KEY_SENSCAT", "CIL_KEY_USERROLE", "CIL_KEY_OPTIONAL", "cil_sym_sizes", "CIL_KEY_COMMON"], "importedglobals": ["_io_stderr", "__stack_chk_guard", "_io_stdin", "stderr", "__sF", "stdin", "stdout", "_io_stdout"], "importedfunctions": ["isatty", "strtoull", "atoi", "inet_ntop", "strtol", "__vsnprintf_chk", "strtok_r", "strncasecmp", "clearerr", "strchr", "strrchr", "fread", "__strcpy_chk", "dl_iterate_phdr", "isalpha", "ferror", "dladdr", "__register_atfork", "strcasecmp", "realloc", "memcmp", "inet_pton", "pthread_mutex_lock", "__memcpy_chk", "getline", "strstr", "strcpy", "fflush", "_exit", "puts", "malloc", "fputs", "__vsprintf_chk", "fprintf", "__stack_chk_fail", "vfprintf", "strncmp", "fwrite", "__errno", "pthread_mutex_unlock", "strncpy", "fputc", "__fsetlocking", "qsort", "strdup", "fclose", "strlen", "isspace", "fstat", "exit", "strcmp", "abort", "calloc", "__strlen_chk", "__strcat_chk", "vasprintf", "fopen", "getc", "fseek", "strerror", "isalnum", "ftell", "fileno", "printf", "strndup", "free"], "exportedfunctions": ["cil_destroy_classpermissionset", "symtab_insert", "sepol_user_set_mlsrange", "cil_copy_call", "create_str", "cil_destroy_class", "cil_copy_blockinherit", "sepol_link_packages", "cil_copy_nametypetransition", "cil_resolve_sensitivityorder", "cil_gen_handleunknown", "cil_list_match_any", "sepol_context_get_mls", "policydb_role_cache", "expand_avtab", "__cil_build_ast_last_child_helper", "cil_copy_defaultrange", "cil_resolve_userrole", "cil_destroy_netifcon", "cil_typeattribute_to_bitmap", "ebitmap_not", "cil_fill_classperms", "cil_resolve_classperms", "cil_fill_ipaddr", "cil_add_file", "cil_destroy_classperms_set", "sepol_iface_set_ifcon", "cil_copy_pirqcon", "filename_trans_rule_init", "level_datum_init", "cil_gen_typepermissive", "cil_destroy_portcon", "cil_copy_userprefix", "cil_copy_node", "cil_copy_type", "cil_verify_constraint_expr_syntax", "cil_yyget_lineno", "cil_type_to_policydb", "cil_ioportcon_init", "cond_copy_expr", "sepol_set_preserve_tunables", "sepol_port_set_port", "cil_sensitivityorder_to_policydb", "cil_typeattribute_init", "cil_copy_fill_context", "cil_set_cat_values", "__cil_avrulex_ioctl_to_hashtable", "cil_sens_init", "__cil_ordered_lists_merge_all", "cil_yy_scan_buffer", "cil_list_init", "sepol_sidtab_shutdown", "sepol_iface_set_msgcon", "cil_copy_userlevel", "ebitmap_set_bit", "sepol_node_get_proto_str", "__cil_levelrange_to_mls_range", "cil_symtab_init", "cil_roletransition_init", "cil_catorder_init", "sepol_context_clone", "cil_gen_role", "cil_gen_roletransition", "sepol_node_get_mask_bytes", "__cil_avrule_to_avtab", "cil_avrulex_to_hashtable", "sepol_user_set_name", "cil_gen_permissionx", "sepol_handle_create", "hashtab_replace", "cil_bool_init", "__cil_ordered_list_destroy", "cil_bool_to_policydb", "cil_destroy_type_rule", "put_entry", "__cil_avrule_expand_helper", "str_read", "cil_fill_level", "cil_tunable_init", "cond_init_bool_indexes", "cil_destroy_fsuse", "cil_copy_cats", "cil_copy_ipaddr", "cil_bounds_init", "__cil_verify_booleanif", "cil_resolve_genfscon", "type_datum_init", "cil_classpermission_init", "cil_gen_sidcontext", "__cil_ordered_lists_merge", "cil_destroy_typetransition", "sepol_module_policydb_to_cil", "cil_gen_macro", "cil_userrole_to_policydb", "sepol_node_query", "mls_context_to_sid", "sepol_policydb_create", "cil_gen_user", "cil_copy_user", "cil_list_destroy", "cil_check_recursive_call", "sepol_context_check", "cil_gen_roleattribute", "cil_user_bounds_to_policydb", "cil_resolve_sidcontext", "sepol_context_set_user", "role_trans_rule_list_destroy", "__cil_verify_permissionx", "cil_lexer_setup", "__cil_ordered_lists_destroy", "cil_resolve_permissionx", "cil_gen_constraint_expr", "cil_copy_classmapping", "cil_copy_netifcon", "sepol_user_clone", "cil_sidcontext_init", "cil_tree_error", "cil_resolve_boolif", "policydb_from_image", "cil_copy_type_rule", "sepol_module_package_write", "cil_classpermissionset_init", "cil_strpool_destroy", "sepol_user_key_create", "sepol_bool_exists", "cond_optimize_lists", "__cil_role_val_array_insert", "sepol_module_package_set_file_contexts", "sepol_bool_set_name", "sepol_node_set_proto", "cil_extract_attributees", "cil_yyset_in", "cil_stack_destroy", "sepol_policydb_read", "__perm_str_to_datum", "sepol_node_get_proto", "sepol_port_compare2", "cil_roletype_init", "sepol_port_free", "cil_gen_userattribute", "cil_senscat_init", "cil_tree_print_node", "cil_set_preserve_tunables", "sepol_iface_modify", "cil_destroy_catorder", "cil_yyset_lineno", "policydb_load_isids", "ebitmap_union", "cil_resolve_fsuse", "sepol_iface_key_free", "sepol_iface_exists", "level_datum_destroy", "cil_alias_init", "cil_copy_devicetreecon", "cil_tree_walk", "cil_copy_tunif", "__cil_verify_ioportcon", "sepol_policy_kern_vers_max", "sepol_sidtab_remove", "cil_fill_permissionx", "cil_post_pirqcon_compare", "__cil_verify_named_context", "sepol_sidtab_map", "cil_gen_block", "sepol_policydb_to_image", "cil_yyget_out", "sepol_sidtab_destroy", "cil_tree_print_context", "sepol_msg_get_channel", "hashtab_map", "cil_type_rule_to_policydb", "sepol_sidtab_set", "sepol_node_modify", "__cil_permx_bitmap_to_sepol_xperms_list", "cil_gen_pcidevicecon", "sepol_sidtab_context_to_sid", "__cil_verify_rule", "__cil_policydb_val_arrays_create", "cil_name_init", "cil_destroy_optional", "cil_destroy_block", "cil_copy_block", "cil_gen_perm", "cil_fill_integer64", "cil_portcon_init", "cil_defaultrange_to_policydb", "cil_copy_alias", "__cil_verify_avrulex", "cil_write_ast", "cil_cat_init", "bounds_destroy_bad", "policydb_lookup_compat", "__cil_verify_cats_associated_with_sens", "cil_context_init", "__cil_verify_context", "ebitmap_cardinality", "cil_gen_type_rule", "cil_copy_rangetransition", "cil_gen_filecon", "sepol_kernel_policydb_to_cil", "cil_symtab_datum_remove_node", "cil_gen_classcommon", "cil_destroy_bool", "sepol_policydb_set_vers", "cil_destroy_roletype", "cil_gen_level", "cil_set_mls", "sepol_user_get_name", "sepol_mls_check", "cil_catalias_to_policydb", "mls_semantic_cat_init", "cil_destroy_nodecon", "cil_resolve_classperms_set", "__cil_resolve_ast_last_child_helper", "cil_gen_ioportcon", "avtab_insert_nonunique", "cil_gen_condblock", "cil_nodecon_init", "cil_destroy_tunable", "cil_avrule_init", "cil_root_init", "cond_policydb_destroy", "cil_list_item_init", "cil_build_ast", "cil_copy_expandtypeattribute", "cil_post_filecon_compare", "cil_gen_selinuxuserdefault", "cil_root_destroy", "cil_gen_expr", "hashtab_ordered_to_strs", "sepol_context_get_role", "__cil_user_val_array_insert", "sepol_module_package_get_seusers_len", "sepol_bool_set_value", "cil_gen_catset", "sepol_set_policydb", "sepol_sidtab_insert", "cil_copy_classperms", "cil_gen_netifcon", "sepol_port_get_proto", "ebitmap_get_bit", "cil_list_contains", "cil_list_item_destroy", "cil_copy_ioportcon", "cil_nodecon_to_policydb", "cil_block_init", "sepol_context_create", "sepol_module_package_free", "sepol_bool_set", "cil_list_append", "cil_gen_policycap", "cil_resolve_in_list", "cil_userprefix_init", "context_is_valid", "sepol_port_get_proto_str", "avrule_destroy", "__cil_insert_avrule", "cil_copy_levelrange", "sepol_port_key_extract", "cil_copy_mls", "cil_resolve_classcommon", "cil_resolve_senscat", "role_allow_read", "cil_selinuxuser_init", "__cil_verify_named_levelrange", "mls_semantic_level_destroy", "sepol_policy_file_free", "cil_user_to_policydb", "cil_resolve_roletype", "sepol_fs_sid", "cond_index_bool", "__cil_cond_to_policydb_helper", "cil_tree_print_perm_strs", "cil_gen_tunable", "cil_write_policy_conf", "sepol_user_key_free", "cil_post_ioportcon_compare", "cil_verify_constraint_leaf_expr_syntax", "ebitmap_andnot", "cil_copy_perm", "cil_destroy_sid", "sepol_user_set_mlslevel", "__cil_copy_last_child_helper", "sepol_iface_get_msgcon", "sepol_iface_key_create", "mls_semantic_range_destroy", "tokenize", "cil_gen_selinuxuser", "__cil_verify_portcon", "cil_gen_classmapping", "sepol_node_free", "sepol_port_query", "sepol_module_package_set_netfilter_contexts", "cil_copy_classperms_list", "sepol_user_query", "sepol_load_policy", "sepol_policy_file_create", "sepol_module_package_to_cil", "sepol_port_exists", "sepol_port_get_low", "sepol_context_to_string", "sepol_change_sid", "cil_gen_validatetrans", "sepol_bool_create", "cil_role_init", "cil_copy_constrain", "cil_typepermissive_to_policydb", "cil_stack_init", "cil_resolve_expr", "cil_ipaddr_init", "avtab_search", "cil_selinuxusers_to_string", "sepol_handle_destroy", "cil_db_init", "policydb_index_bools", "avtab_read_item", "cil_expand_class", "__cil_type_val_array_insert", "cil_destroy_perm", "mls_semantic_level_init", "strs_create_and_add", "cil_copy_sens", "cil_log", "cil_gen_portcon", "cil_resolve_typeattributeset", "sepol_expand_module", "cil_resolve_blockinherit_copy", "sepol_node_set_addr", "cil_yyfree", "sepol_node_key_free", "policydb_index_classes", "sepol_node_key_extract", "cil_gen_rangetransition", "role_trans_read", "cil_tree_print_cats", "sepol_port_modify", "cil_destroy_pcidevicecon", "cil_roleattribute_init", "cil_type_rule_init", "cil_destroy_userrange", "cil_destroy_call", "cil_yy_create_buffer", "cil_yyget_text", "__cil_resolve_ast_node_helper", "cil_symtab_datum_destroy", "cil_resolve_devicetreecon", "cil_boolif_init", "sepol_bool_key_create", "cil_destroy_bounds", "sepol_iface_key_unpack", "cond_evaluate_expr", "symtab_init", "avtab_destroy", "cil_gen_node", "cil_gen_classpermission", "cil_gen_sidorder", "avrule_list_destroy", "sepol_policydb_free", "cil_destroy_filecon", "cil_userattributeset_init", "cil_destroy_typepermissive", "__cil_type_rule_to_avtab", "cond_compute_av", "__cil_level_val_array_insert", "cil_resolve_expandtypeattribute", "sepol_user_free", "type_set_or", "cil_gen_sid", "cil_sidorder_init", "cil_resolve_pcidevicecon", "policydb_init", "cil_destroy_classcommon", "cil_classorder_to_policydb", "avtab_search_node_next", "role_set_expand", "cil_destroy_typeattributeset", "cil_resolve_roleallow", "cil_complex_symtab_init", "cil_destroy_userrole", "cil_expandtypeattribute_init", "sepol_node_get_addr_bytes", "cil_symtab_get_datum", "sepol_extended_perms_to_string", "cil_copy_fill_ipaddr", "sepol_policydb_mls_enabled", "cil_gen_alias", "bounds_check_type", "sepol_policydb_set_typevers", "cil_sensorder_init", "cil_destroy_ioportcon", "cil_tree_print_classperms_set", "cil_node_to_string", "cil_resolve_sidorder", "cil_destroy_cats", "report_assertion_failures", "cil_symtab_destroy", "evaluate_conds", "cil_level_to_mls_level", "cil_gen_aliasactual", "cil_gen_ipaddr", "cil_copy_level", "__cil_resolve_ast_first_child_helper", "__cil_verify_levelrange_sensitivity", "cil_defaultrange_init", "sepol_user_key_extract", "cil_level_init", "cil_copy_typeattribute", "cil_gen_sensitivity", "sepol_node_set_mask_bytes", "policydb_read", "cil_destroy_avrule", "class_perm_node_init", "cil_destroy_classperms_list", "sepol_user_get_mlsrange", "sepol_port_set_proto", "cil_resolve_blockinherit_link", "cil_gen_fsuse", "cil_complex_symtab_hash", "sepol_user_compare2", "sepol_set_expand_consume_base", "cil_handleunknown_init", "sepol_iface_key_extract", "cil_strdup", "sepol_context_set_type", "cil_gen_default", "cil_android_attributize", "sepol_node_get_con", "cil_copy_class", "sepol_role_exists", "cil_constrain_to_policydb_helper", "cil_type_used", "cil_destroy_roleattributeset", "cil_db_destroy", "cil_condblock_init", "cil_type_init", "cil_destroy_roletransition", "cil_copy_sensitivityorder", "cil_fsuse_init", "cil_rangetransition_init", "__cil_verify_ordered_node_helper", "ebitmap_to_strs", "sepol_bool_key_free", "cil_destroy_in", "sepol_genusers", "cil_destroy_devicetreecon", "cil_classperms_init", "__cil_verify_initsids", "sepol_node_set_addr_bytes", "cil_gen_constrain", "type_set_init", "hashtab_create", "sepol_msg_get_level", "cil_roletrans_to_policydb", "avrule_read_list", "cil_devicetreecon_to_policydb", "__cil_bool_val_array_insert", "sepol_member_sid", "cil_print_recursive_call", "cil_tree_walk_core", "cil_resolve_default", "symtabs_destroy", "role_set_get_role", "sepol_ppfile_to_module_package", "range_trans_rule_destroy", "sepol_module_package_get_policy", "ebitmap_hamming_distance", "sepol_context_set_role", "sort_ocontexts", "__cil_cat_val_array_insert", "cil_destroy_role", "cil_roletype_to_policydb", "ebitmap_cmp", "cil_destroy_sensitivity", "cil_gen_nodecon", "cil_filecon_init", "cil_symtab_array_init", "cil_call_init", "cil_resolve_portcon", "check_assertion", "sepol_user_del_role", "role_datum_init", "cil_copy_fill_levelrange", "policydb_context_isvalid", "cil_yy_switch_to_buffer", "cil_yyset_debug", "cil_netifcon_to_policydb", "cil_destroy_classperms", "sepol_sidtab_search", "cil_copy_fsuse", "cil_resolve_aliasactual", "stack_push", "cil_destroy_levelrange", "cond_node_find", "sepol_port_set_con", "cil_gen_map_class", "cil_gen_devicetreecon", "cil_post_netifcon_compare", "cil_resolve_level", "__cil_constrain_expr_leaf_to_sepol_expr", "role_trans_rule_destroy", "__cil_policydb_init", "user_datum_init", "cil_set_target_platform", "cil_set_log_handler", "cil_symtab_remove_datum", "cil_resolve_levelrange", "sepol_iface_get_name", "role_set_init", "sepol_role_list", "sepol_user_exists", "cil_copy_cat", "cil_resolve_call1", "policydb_destroy", "hashtab_hash_eval", "cil_userrange_init", "cil_classperms_set_init", "cil_permissionx_init", "policydb_index_decls", "cond_node_create", "sepol_msg_default_handler", "strs_to_str", "sepol_string_to_security_class", "cil_destroy_typeattribute", "scope_destroy", "sepol_port_key_create", "cil_default_init", "cil_pirqcon_to_policydb", "cil_tree_destroy", "__cil_verify_name", "sepol_module_package_create", "cil_destroy_args", "type_datum_destroy", "cil_set_handle_unknown", "strs_len_items", "cil_copy_condblock", "policydb_index_others", "__cil_ordered_item_insert", "mls_setup_user_range", "cond_read_list", "sepol_check_context", "cil_roleallow_to_policydb", "cil_destroy_data", "cil_sepol_level_define", "cil_copy_typepermissive", "cil_symtab_error", "cil_copy_bounds", "__cil_cats_to_mls_level", "cil_userrole_init", "ebitmap_contains", "cil_destroy_param", "sepol_set_delusers", "__cil_avrule_expand", "sepol_validate_transition", "cil_copy_portcon", "cil_resolve_name_call_args", "avtab_alloc", "cil_destroy_handleunknown", "cil_complex_symtab_search", "cil_role_to_policydb", "cil_verify_expr_syntax", "cil_gen_in", "cil_post_fsuse_compare", "cil_cond_av_list_search", "cil_gen_levelrange", "cil_stack_pop", "cil_destroy_blockabstract", "cil_clear_node", "cil_asprintf", "sepol_context_from_string", "cil_yypush_buffer_state", "sepol_bool_get_name", "__cil_verify_devicetreecon", "expand_convert_type_set", "cil_gen_class", "cil_perm_init", "cil_set_policy_version", "cil_android_attrib_mapping", "cil_resolve_constrain", "__cil_cond_insert_rule", "cil_fill_classperms_list", "cil_gen_bool", "sepol_module_package_info", "symtab_destroy", "cil_gen_roleallow", "cil_validatetrans_init", "__cil_verify_nodecon", "cil_list_error", "__cil_verify_pirqcon", "cil_destroy_sidcontext", "cil_copy_userattribute", "cil_binary_create_allocated_pdb", "sepol_genbools", "cil_copy_macro", "bounds_check_types", "cil_copy_fill_level", "__cil_constrain_expr_to_sepol_expr", "cil_destroy_ast_symtabs", "cil_gen_roletype", "cil_copy_catorder", "cil_pcidevicecon_to_policydb", "cil_destroy_level", "cil_tree_get_next_path", "is_id_enabled", "context_to_record", "__cil_common_val_array_insert", "sepol_user_set_roles", "cil_copy_handleunknown", "cil_destroy_iomemcon", "cil_stack_empty", "constraint_expr_init", "__cil_contexts_to_policydb", "cond_expr_destroy", "cil_destroy_userlevel", "cil_destroy_alias", "__cil_context_to_sepol_context", "context_to_string", "cil_copy_userattributeset", "__cil_verify_helper", "cil_destroy_permissionx", "role_trans_rule_init", "cil_booleanif_to_policydb", "cil_classcommon_init", "cil_resolve_userprefix", "stack_init", "cil_destroy_userattribute", "cil_gen_type", "cil_gen_context", "sepol_module_package_set_user_extra", "cil_mls_init", "cil_destroy_constrain", "cil_yylex_destroy", "cil_resolve_catorder", "cil_classmapping_init", "cil_policycap_to_policydb", "cil_tree_get_cil_path", "cil_destroy_name", "cond_read_bool", "sepol_user_iterate", "sepol_module_package_get_netfilter_contexts_len", "cil_gen_userprefix", "cil_resolve_validatetrans", "cil_stack_peek", "cil_destroy_sidorder", "sepol_bool_clone", "cil_resolve_bounds", "sepol_port_set_range", "cil_resolve_selinuxuser", "sepol_get_disable_dontaudit", "__cil_verify_booleanif_helper", "cil_destroy_macro", "__cil_binary_create_helper", "sepol_user_has_role", "cil_tunif_init", "sepol_set_sidtab", "sepol_string_to_av_perm", "cil_copy_bool", "__cil_constrain_expr_datum_to_sepol_expr", "cil_default_log_handler", "sepol_policydb_write", "sepol_module_package_get_user_extra_len", "sepol_sidtab_init", "sepol_user_get_mlslevel", "sepol_get_preserve_tunables", "sepol_bool_count", "cil_copy_aliasactual", "cil_list_remove", "sepol_polcap_getnum", "cil_gen_defaultrange", "cil_netifcon_init", "cil_copy_genfscon", "__cil_avrulex_ioctl_to_policydb", "cil_common_to_policydb", "__cil_verify_netifcon", "sepol_context_get_type", "cil_copy_role", "cil_portcon_to_policydb", "cil_symtab_datum_init", "cil_resolve_nodecon", "cil_resolve_userattributeset", "cil_resolve_context", "cil_copy_expr", "cil_yy_scan_string", "mls_convert_context", "cil_sid_init", "sepol_user_get_roles", "cil_copy_roleattribute", "hashtab_insert", "cil_gen_bounds", "sepol_bool_compare", "filename_trans_read", "__cil_ordered_list_init", "strs_remove_last", "cil_list_prepend", "cil_yy_delete_buffer", "sepol_polcap_getname", "cil_filecons_to_string", "cil_lexer_next", "avtab_hash_eval", "mls_semantic_range_expand", "policydb_reindex_users", "sepol_genbools_policydb", "cil_gen_genfscon", "sepol_node_clone", "hashtab_search", "cil_destroy_roleattribute", "cil_resolve_roleattributeset", "cil_resolve_in", "__cil_policydb_create", "link_modules", "cil_gen_boolif", "__cil_verify_cat_in_cats", "cil_fsuse_to_policydb", "avtab_insert", "sepol_log_err", "sepol_bool_query", "cil_fill_classperms_set", "ebitmap_read", "cil_destroy_genfscon", "cil_flavor_to_symtab_index", "strs_num_items", "cil_fill_perms", "cil_post_process", "cil_typealias_to_policydb", "cil_resolve_pirqcon", "avtab_read", "cil_resolve_nametypetransition", "strs_init", "mls_sid_to_context", "sepol_module_package_get_file_contexts_len", "cil_sensalias_to_policydb", "cil_copy_permissionx", "__cil_verify_iomemcon", "cil_blockinherit_init", "__cil_insert_type_rule", "cil_tree_print_perms_list", "cil_tree_print", "cil_destroy_boolif", "role_set_destroy", "cil_yylex", "__cil_verify_fsuse", "cil_gen_src_info", "sepol_bool_compare2", "sepol_genbools_array", "cil_destroy_condblock", "cil_list_insert", "sepol_netif_sid", "cond_list_destroy", "cil_gen_call", "strs_write_each", "cil_in_init", "bounds_check_users", "sepol_node_set_con", "cil_fill_context", "cil_destroy_defaultrange", "sepol_sidtab_hash_eval", "cil_genfscon_to_policydb", "cil_copy_classpermission", "sepol_policydb_set_target_platform", "sepol_user_create", "avtab_init", "cil_copy_classcommon", "cil_strpool_init", "cil_resolve_netifcon", "cil_destroy_aliasactual", "cil_fill_cats", "sepol_port_iterate", "sepol_iface_create", "sepol_bool_key_unpack", "cil_copy_sidorder", "cil_copy_roleattributeset", "cil_userlevel_init", "cil_vlog", "cil_print_recursive_blockinherit", "mls_compute_context_len", "avrule_init", "cil_nametypetransition_init", "cil_yyget_in", "cil_gen_typeattribute", "cil_set_attrs_expand_size", "cil_resolve_roletransition", "sepol_iface_compare", "sepol_context_free", "ebitmap_and", "cil_args_init", "cil_tree_print_classperms_list", "cil_resolve_cats", "cil_find_matching_avrule_in_ast", "cil_copy_classpermissionset", "sepol_user_get_num_roles", "sepol_port_key_unpack", "range_trans_rule_list_destroy", "sepol_policy_file_set_fp", "sepol_node_key_create", "cil_pirqcon_init", "__cil_copy_node_helper", "__cil_class_val_array_insert", "cil_typepermissive_init", "ocontext_xen_free", "mls_compute_sid", "sepol_bool_get_value", "cil_classorder_init", "cil_complex_symtab_insert", "filename_trans_rule_list_destroy", "sepol_iface_query", "cil_iomemcon_to_policydb", "cil_gen_common", "cil_gen_roleattributeset", "cil_pcidevicecon_init", "cil_ioportcon_to_policydb", "cil_fill_list", "cil_destroy_ipaddr", "sepol_port_sid", "cil_tree_print_classperms", "cil_destroy_classmapping", "cil_post_nodecon_compare", "ebitmap_destroy", "cond_node_destroy", "cil_rangetransition_to_policydb", "cil_yypop_buffer_state", "sepol_iface_count", "sepol_fs_use", "sepol_port_key_free", "cil_gen_sensitivityorder", "cil_destroy_default", "sepol_msg_get_fname", "cond_av_list_search", "__cil_typetransition_to_avtab", "cil_default_to_policydb", "cat_datum_init", "cil_typeattributeset_init", "cil_gen_senscat", "type_set_destroy", "sepol_policydb_from_image", "cil_validatetrans_to_policydb", "stack_destroy", "sepol_port_clone", "cond_destroy_bool", "cil_gen_userrange", "cil_gen_typetransition", "cil_class_init", "cil_yyget_debug", "cil_resolve_classorder", "cil_yyget_leng", "cil_typetransition_to_policydb", "strs_destroy", "__cil_verify_ranges", "check_assertions", "expand_rule", "type_set_cpy", "sepol_user_add_role", "cil_gen_tunif", "cil_resolve_typepermissive", "cil_gen_typeattributeset", "cil_yyalloc", "cil_post_devicetreecon_compare", "bounds_check_roles", "context_from_string", "hashtab_destroy", "__cil_verify_policycap", "sepol_set_policydb_from_file", "sepol_node_sid", "cil_yy_flush_buffer", "cond_policydb_init", "sepol_policy_kern_vers_min", "cil_resolve_blockabstract", "sepol_node_compare2", "__cil_verify_ordered", "cond_av_list_destroy", "cil_copy_list", "cil_resolve_userlevel", "mls_from_string", "cil_catset_init", "cil_tree_log", "sepol_iface_set_name", "cil_roleallow_init", "cil_copy_blockabstract", "cil_copy_typeattributeset", "cil_resolve_userrange", "cil_check_recursive_blockinherit", "sepol_node_key_unpack", "__cil_typeattr_bitmap_init", "mls_context_isvalid", "cil_constrain_init", "policy_file_init", "cil_tree_subtree_destroy", "cil_gen_optional", "cil_tree_node_init", "__cil_perms_to_datum", "sepol_bool_key_extract", "cil_resolve_defaultrange", "cil_verify_no_self_reference", "cil_resolve_alias_to_actual", "avtab_search_node", "cil_post_portcon_compare", "cil_gen_policy", "sepol_iface_clone", "cil_set_disable_dontaudit", "cil_symtab_map", "cil_parser", "ebitmap_or", "cil_gen_classpermissionset", "cil_copy_iomemcon", "cil_resolve_classpermissionset", "cil_copy_policycap", "cil_gen_iomemcon", "sepol_context_get_user", "cil_build_policydb", "sepol_node_set_mask", "cil_copy_optional", "cil_resolve_filecon", "sepol_indent", "get_symtab_destroy_func", "get_decl_cond_list", "cil_malloc", "cil_complex_symtab_destroy", "sepol_port_compare", "cil_symtab_insert", "sepol_policy_file_set_mem", "sepol_compute_av", "cil_tree_children_destroy", "cil_gen_blockabstract", "avrule_block_create", "cat_datum_destroy", "strs_add_at_index", "strs_write_each_indented", "cil_resolve_tunif", "__cil_resolve_ast_node", "sepol_module_package_set_seusers", "__cil_constrain_expr_to_sepol_expr_helper", "cil_list_prepend_item", "cil_tree_init", "__cil_verify_pcidevicecon", "policydb_write", "role_allow_rule_list_destroy", "cil_fqn_qualify", "policydb_user_cache", "cil_gen_perm_nodes", "cil_post_pcidevicecon_compare", "cil_gen_userattributeset", "cil_tree_print_level", "__cil_verify_genfscon", "sepol_module_package_get_netfilter_contexts", "cil_catorder_to_policydb", "sepol_context_to_sid", "mls_semantic_cat_destroy", "mls_semantic_range_init", "sepol_transition_sid", "cil_copy_roleallow", "cil_resolve_name", "__avrule_xperm_setrangebits", "cil_copy_userrange", "cil_resolve_call2", "range_trans_rule_init", "cil_copy_default", "cil_gen_catorder", "cil_tree_print_constrain", "sepol_iface_get_ifcon", "avrule_decl_destroy", "hashtab_remove", "sepol_node_count", "cil_userprefixes_to_string", "cil_set_mem_error_handler", "sepol_printf", "cil_default_mem_error_handler", "sepol_set_disable_dontaudit", "sepol_module_package_get_user_extra", "cil_genfscon_init", "cil_copy_sid", "cil_src_info_init", "cil_post_genfscon_compare", "sepol_node_compare", "cil_gen_mls", "expand_cond_av_list", "stack_empty", "sepol_module_package_get_seusers", "cil_copy_tunable", "cil_copy_senscat", "cil_destroy_catset", "cil_copy_pcidevicecon", "role_allow_rule_destroy", "strs_add", "cil_fill_levelrange", "cil_copy_sidcontext", "__cil_pre_verify_helper", "cil_destroy_sensitivityorder", "cil_sort_destroy", "cil_copy_validatetrans", "cond_node_search", "expand_module", "cil_yyrealloc", "cil_userlevel_userrange_to_policydb", "cil_destroy_policycap", "cil_lexer_destroy", "__cil_ordered_lists_reset", "cil_destroy_validatetrans", "cil_gen_expandtypeattribute", "cil_copy_roletransition", "sepol_genusers_policydb", "__cil_is_cat_in_cats", "sepol_policydb_set_handle_unknown", "strs_read_at_index", "cil_type_bounds_to_policydb", "__cil_avrulex_to_hashtable_helper", "cil_destroy_user", "cil_binary_create", "cil_copy_classperms_set", "ebitmap_xor", "sepol_sid_to_context", "cil_copy_catset", "sepol_node_get_mask", "ebitmap_to_str", "sepol_node_iterate", "is_perm_enabled", "sepol_user_modify", "sepol_node_get_addr", "cil_gen_category", "sepol_get_user_sids", "cil_iomemcon_init", "sepol_port_get_high", "cil_cats_init", "stack_pop", "role_datum_destroy", "cil_copy_src_info", "cil_tree_print_levelrange", "cil_gen_blockinherit", "cil_resolve_catset", "cil_destroy_classpermission", "cil_fill_integer", "cil_destroy_classorder", "sepol_debug", "__cil_node_to_policydb", "cil_yy_scan_bytes", "cil_list_append_item", "cil_tree_print_expr", "cil_user_init", "avrule_block_list_destroy", "mls_semantic_level_cpy", "sepol_compute_av_reason_buffer", "sepol_policydb_compat_net", "cil_gen_classorder", "policydb_to_image", "cil_copy_avrule", "cil_sidorder_to_policydb", "sepol_node_create", "__class_update_perm_values", "cil_stack_push", "avrule_block_destroy", "__cil_ordered_list_insert", "cil_gen_userrole", "cil_copy_boolif", "cil_constrain_expand", "cil_gen_pirqcon", "avrule_decl_create", "cil_typeattribute_to_policydb", "mls_to_string", "sepol_mls_contains", "cil_copy_nodecon", "cil_strpool_add", "role_allow_rule_init", "sepol_kernel_policydb_to_conf", "ocontext_selinux_free", "cil_copy_ast", "strs_sort", "cil_destroy_blockinherit", "cil_destroy_category", "cil_post_fc_fill_data", "ebitmap_match_any", "user_datum_destroy", "sepol_port_count", "cil_get_symtab", "cil_symtab_array_destroy", "cil_levelrange_init", "cil_constrain_to_policydb", "cil_resolve_ioportcon", "mls_semantic_range_cpy", "type_set_or_eq", "cil_copy_userrole", "__cil_build_ast_node_helper", "sepol_user_key_unpack", "mls_semantic_level_expand", "next_entry", "cil_post_iomemcon_compare", "policydb_set_target_platform", "cil_stack_peek_at", "cil_destroy_mls", "cil_tree_node_destroy", "sepol_bool_iterate", "hierarchy_check_constraints", "expand_module_avrules", "cil_destroy_expandtypeattribute", "cil_find_matching_avrule", "cil_resolve_classperms_list", "cil_resolve_ast", "cil_destroy_context", "cil_blockabstract_init", "cil_macro_init", "sepol_module_package_get_file_contexts", "cil_destroy_userprefix", "sepol_port_create", "cil_destroy_pirqcon", "cil_gen_avrule", "cil_aliasactual_init", "type_set_expand", "sepol_genfs_sid", "__cil_verify_type", "hashtab_map_remove_on_error", "sepol_user_compare", "hierarchy_add_bounds", "cil_optional_init", "cil_resolve_iomemcon", "cond_normalize_expr", "cil_sort_init", "__cil_verify_filecon", "sepol_iface_compare2", "sepol_iface_free", "cil_reset_ast", "__cil_verify_class", "context_from_record", "cil_copy_classorder", "cil_yyrestart", "sepol_compute_av_reason", "cil_destroy_userattributeset", "cil_destroy_rangetransition", "cil_destroy_senscat", "cil_copy_fill_permissionx", "cil_resolve_avrule", "cil_set_log_level", "cond_expr_equal", "cil_resolve_classmapping", "cil_stack_is_empty", "cil_destroy_src_info", "sepol_bool_free", "cil_destroy_tunif", "cil_realloc", "__cil_verify_role", "cil_avrule_to_policydb", "sepol_policy_file_get_len", "constraint_expr_destroy", "cil_copy_filecon", "__cil_reset_node", "sepol_node_exists", "sepol_iface_iterate", "sepol_policy_file_set_handle", "sepol_context_set_mls", "sepol_sidtab_map_remove_on_error", "cil_devicetreecon_init", "sepol_av_to_string", "sepol_port_get_con", "sepol_user_count", "sepol_link_modules", "sepol_validate_transition_reason_buffer", "cil_policycap_init", "cil_resolve_rangetransition", "sepol_module_package_read", "__cil_verify_syntax", "avtab_map", "cil_gen_avrulex", "__cil_verify_levelrange_cats", "cil_compile", "cil_destroy_type", "add_i_to_a", "cil_copy_context", "cil_resolve_type_rule", "cil_role_bounds_to_policydb", "cil_destroy_selinuxuser", "cil_set_disable_neverallow", "cil_calloc", "cil_gen_userlevel", "__cil_ordered_find_match", "strs_free_all", "cil_userattribute_init", "__cil_verify_levelrange", "cil_roleattributeset_init", "cil_copy_roletype", "sepol_msg_set_callback", "cil_param_init", "cil_destroy_roleallow", "ebitmap_cpy", "expand_cond_av_node", "cil_set_attrs_expand_generated", "cil_yyset_out"], "allstrings": ["libsepol", "Out of memory - unable to check neverallows", "report_assertion_extended_permissions", "neverallowxperm on line %lu of %s (or line %lu of policy.conf) violated by\nallowxperm %s %s:%s %s;", "neverallowxperm on line %lu of %s (or line %lu of policy.conf) violated by\nallow %s %s:%s {%s };", "neverallow on line %lu of %s (or line %lu of policy.conf) violated by allow %s %s:%s {%s };", "neverallow violated by allow %s %s:%s {%s };", "%s:  %d entries and %d/%d buckets used, longest chain length %d\n", "invalid item count", "entry has both access vectors and types", "entry only had %d items, expected %d", "policy version %u does not support extended permissions rules and one was specified\n", "could not set boolean %s", "out of memory", "could not update boolean %s", "security: could not insert rule.", "user %s is not defined", "role %s is not defined", "MLS is disabled, but MLS context \"%s\" found", "invalid security context: \"%s:%s:%s:%s\"", "could not create context structure", "security: ebitmap: map size %d does not match my size %zu (high bit was %d)\n", "security: ebitmap: high bit (%d) is not a multiple of the map size (%zu)\n", "security: ebitmap start bit (%d) is not a multiple of the map size (%zu)\n", "security: ebitmap start bit (%d) is beyond the end of the bitmap (%zu)\n", "security: ebitmap: null map in ebitmap (startbit %d)\n", "%s: Impossible situation found, nothing in p_levels.table.\n", "Out of memory!", "Error while indexing out symbols", "Error while indexing out classes", "Error during expand", "Invalid specification: %u\n", "Error while copying neverallow.", "expand_filename_trans", "Conflicting name-based type_transition %s %s:%s \"%s\":  %s vs %s", "expand_range_trans", "expanding range transitions", "exp_rangetr_helper", "Conflicting range trans rule %s %s : %s", "hashtab overflow", "could not find common datum %s", "Found conflicting default role definitions", "Found conflicting default type definitions", "Found conflicting default range definitions", "Inconsistent boundary for %s", "object_r", "ocontext_copy", "Unknown target", "ocontext_copy_selinux", "Missing context for %s initial sid", "Unknown ocontext", "Type conflict!", "error while re-evaluating conditionals", "invalid level %s (%s:%u)", "Insufficient memory", "Child type %s exceeds bounds of parent %s in the following rules:", "%s doesn't exist, %s is an orphan", "No policy", "domby", "incomp", "(%s %s %s)", "(%s %s)", "Out of memory", "(mlsvalidatetrans %s %s)", "(validatetrans %s %s)", "allow", "Unknown value for handle-unknown: %i", "(handleunknown %s)\n", "(class %s (%s))\n", "(class %s ())\n", "(classorder (", "(classcommon %s %s)\n", "(common %s (%s))\n", "Error writing class rules to CIL\n", "Unknown target platform: %i", "null", "kernel", "security", "unlabeled", "file", "file_labels", "init", "any_socket", "port", "netif", "netmsg", "node", "igmp_packet", "icmp_socket", "tcp_socket", "sysctl_modprobe", "sysctl", "sysctl_fs", "sysctl_kernel", "sysctl_net", "sysctl_net_unix", "sysctl_vm", "sysctl_dev", "kmod", "policy", "scmp_packet", "devnull", "dom0", "domio", "domxen", "ioport", "iomem", "device", "Error writing default rules to CIL\n", "Unknown default role value: %i", "(defaultuser %s %s)\n", "(defaultrole %s %s)\n", "Unknown default type value: %i", "(defaulttype %s %s)\n", "source low", "source high", "source low-high", "target low", "target high", "target low-high", "(defaultrange %s %s)\n", "(mls false)\n", "(mls true)\n", "Error writing mls rules to CIL\n", "(sensitivity s0)", "(sensitivityorder (s0))", "(level %s (s0))", "systemlow", "(sensitivity %s)\n", "(sensitivityorder (", "(sensitivityalias %s)\n", "(sensitivityaliasactual %s %s)\n", "Error writing sensitivity rules to CIL\n", "(category %s)\n", "(categoryorder (", "(categoryalias %s)\n", "(categoryaliasactual %s %s)\n", "Error writing category rules to CIL\n", "(sensitivitycategory %s %s)\n", "Error writing sensitivitycategory rules to CIL\n", "Unknown policy capability id: %i", "(policycap %s)", "Error writing polcap rules to CIL\n", "(typeattribute %s)\n", "Error writing typeattribute rules to CIL\n", "(roleattribute %s)\n", "Error writing roleattribute rules to CIL\n", "Error writing boolean declarations to CIL\n", "(type %s)\n", "Error writing type declarations to CIL\n", "(typealias %s)\n", "(typealiasactual %s %s)\n", "Error writing type alias rules to CIL\n", "(typebounds %s %s)\n", "Error writing type bounds rules to CIL\n", "(typeattributeset %s (%s))", "Error writing typeattributeset rules to CIL\n", "(typepermissive %s)\n", "Error writing typepermissive rules to CIL\n", "Error writing avtab rules to CIL\n", "Unknown avtab type: %i", "Failed to generate extended permission string", "(%s %s %s (%s %s (%s)))", "ioctl", "(%s %s %s %s %s)", " (range 0x%hx 0x%hx)", " 0x%hx", "Error writing filename typetransition rules to CIL\n", "Error writing range transition rules to CIL\n", "(booleanif %s\n", "(true\n", "(false\n", "Error writing conditional rules to CIL\n", "Unknown conditional operator: %i", "Invalid conditional expression", "(role %s)\n", "(rolebounds %s %s)\n", "(roletype %s %s)\n", "Error writing role declarations to CIL\n", "(roletransition %s %s %s %s)", "Error writing role transition rules to CIL\n", "(roleallow %s %s)", "Error writing role allow rules to CIL\n", "(user %s)\n", "(userrole %s %s)\n", "(userlevel %s ", "(userrange %s ", "Error writing user declarations to CIL\n", "xattr", "trans", "task", "Unknown fsuse behavior: %i", "(fsuse %s %s %s)\n", "Error writing fsuse rules to CIL\n", "(genfscon %s %s %s)", "Error writing genfscon rules to CIL\n", "dccp", "Unknown portcon protocol: %i", "(%u %u)", "(portcon %s %s %s)\n", "Error writing portcon rules to CIL\n", "(netifcon %s %s %s)\n", "Error writing netifcon rules to CIL\n", "Nodecon address is invalid: %s", "Nodecon mask is invalid: %s", "(nodecon (%s) (%s) %s)\n", "Error writing nodecon rules to CIL\n", "(pirqcon %s %s)\n", "Error writing pirqcon rules to CIL\n", "0x%x", "(0x%x 0x%x)", "(ioportcon %s %s)\n", "Error writing ioportcon rules to CIL\n", "0x%llx", "(0x%llx 0x%llx)", "(iomemcon %s %s)\n", "Error writing iomemcon rules to CIL\n", "0x%lx", "(pcidevicecon %s %s)\n", "Error writing pcidevicecon rules to CIL\n", "(devicetreecon %s %s)\n", "Error writing devicetreecon rules to CIL\n", "Failed to write to output", "Unknown constraint expression type: %i", "mlsvalidatetrans", "deny", "reject", "# handle_unknown %s\n", "class %s\n", "common %s { %s }\n", "class %s", " inherits %s", " { %s }", "Error writing class rules to policy.conf\n", "Error writing default rules to policy.conf\n", "source", "target", "default_user { %s } %s;\n", "default_role { %s } %s;\n", "default_type { %s } %s;\n", "default_range { %s } %s;\n", "Error writing mls rules to policy.conf\n", "%s %s", "sensitivity %s alias { %s };\n", "sensitivity %s alias %s;\n", "sensitivity %s;\n", "dominance { ", "category %s alias { %s };\n", "category %s alias %s;\n", "category %s;\n", "Error writing category rules to policy.conf\n", "level %s:%s;\n", "level %s;\n", "Error writing level rules to policy.conf\n", "policycap %s;", "Error writing polcap rules to policy.conf\n", "attribute %s;\n", "Error writing typeattribute rules to policy.conf\n", "attribute_role %s;\n", "Error writing roleattribute rules to policy.conf\n", "Error writing boolean declarations to policy.conf\n", "type %s;\n", "Error writing type declarations to policy.con\n", "typealias %s %s;\n", "Error writing type alias rules to policy.conf\n", "typebounds %s %s;\n", "Error writing type bounds rules to policy.conf\n", "typeattribute %s %s;", "Error writing typeattributeset rules to policy.conf\n", "permissive %s;\n", "Error writing typepermissive rules to policy.conf\n", "Error writing avtab rules to policy.conf\n", "Failed to generate permission string", "Error writing filename typetransition rules to policy.conf\n", "Error writing range transition rules to policy.conf\n", "if (%s) {\n", "} else {\n", "Error writing conditional rules to policy.conf\n", "role %s;\n", "role %s types { %s };\n", "Error writing role declarations to policy.conf\n", "role_transition %s %s:%s %s;", "Error writing role transition rules to policy.conf\n", "allow %s %s;", "Error writing role allow rules to policy.conf\n", "user %s", " roles { %s }", " roles %s", " level %s", " range %s", "Error writing user declarations to policy.conf\n", "fs_use_%s %s %s;\n", "Error writing fsuse rules to policy.conf\n", "%u-%u", "portcon %s %s %s\n", "Error writing portcon rules to policy.conf\n", "netifcon %s %s %s\n", "Error writing netifcon rules to policy.conf\n", "nodecon %s %s %s\n", "Error writing nodecon rules to policy.conf\n", "error1\n", "error2\n", "pirqcon %s %s\n", "Error writing pirqcon rules to policy.conf\n", "0x%llx-0x%llx", "iomemcon %s %s\n", "Error writing iomemcon rules to policy.conf\n", "0x%x-0x%x", "ioportcon %s %s\n", "Error writing ioportcon rules to policy.conf\n", "pcidevicecon %s %s\n", "Error writing pcidevicecon rules to policy.conf\n", "devicetreecon %s %s\n", "Error writing devicetreecon rules to policy.conf\n", "Tried to link in a non-MLS module with an MLS base.", "Tried to link in an MLS module with a non-MLS base.", "Error while indexing classes", "prepare_module", "Error while normalizing conditionals within the module %s.", "prepare_base", "Error while normalizing conditionals within the base module.", "%s: Expected %s to be an attribute, but it was already declared as a type.", "%s: Expected %s to be a type, but it was already declared as an attribute.", "%s: Modules may not yet declare new classes.", "Memory error\n", "Module %s depends on permission %s in class %s, not satisfied", "%s: Expected %s to be a role attribute, but it was already declared as a regular role.", "%s: Expected %s to be a regular role, but it was already declared as a role attribute.", "%s: Mismatch between boolean/tunable definition and usage for %s", "%s: has an unknown scope: %d\n", "%s: Could not find type %s for alias %s.", "copy_avrule_block", "Out of memory\n", "copy_role_trans_list", "copy_role_allow_list", "copy_cond_list", "copy_filename_trans_list", "copy_range_trans_list", "common", "class", "role", "type/attribute", "user", "bool", "level", "category", "enable_avrules", "Determining which avrules to enable.", "check module %s decl %d\n", "print_missing_requirements", "%s's global requirements were not met: class %s, permission %s", "%s's global requirements were not met: %s %s", "debug_requirements", "%s[%d]'s optional requirements were not met: class %s, permission %s", "%s[%d]'s global requirements were not met: class %s, permission %s", "%s[%d]'s optional requirements were not met: %s %s", "%s[%d]'s global requirements were not met: %s %s", "populate_roleattributes", "Populating role-attribute relationship from enabled declarations' local symtab.", "error seeking to offset %zu for module package section %u", "module package section %u has too small length %zu", "module package section %u truncated, lacks magic number", "found multiple file contexts sections in module package (at section %u)", "invalid file contexts section at section %u", "found multiple seuser sections in module package (at section %u)", "invalid seuser section at section %u", "found multiple user_extra sections in module package (at section %u)", "invalid user_extra section at section %u", "found multiple netfilter contexts sections in module package (at section %u)", "found multiple module sections in module package (at section %u)", "unknown magic number at section %u, offset: %zx, number: %x ", "missing module in module package", "module package section %u has too small length %u", "found seuser sections in module package (at section %u)", "found user_extra sections in module package (at section %u)", "out of memory (at section %u)", "cannot get module string (at section %u)", "cannot get module header (at section %u)", "module has invalid type %d (at section %u)", "cannot get module name len (at section %u)", "module package header truncated", "wrong magic number for module package:  expected %#08x, got %#08x", "too many sections (%u) in module package", "offset greater than file size (at %u, offset %zu -> %zu", "Failed to get policydb", "(role auditadm_r)", "(typeattribute cil_gen_require)", "(roleattribute cil_gen_require)", "(handleunknown %s)", "true", "false", "(mls %s)", "(%s %s %s (", "Warning: 'fscon' statement unsupported in CIL. Dropping from output.", "(nodecon (%s) (%s) ", "(genfscon %s %s ", "Warning: 'else' not allowed in global block. Dropping from output.", "Unknown default user value: %i", "Unknown default range value: %i", "(defaultrange %s %s)", "(%sconstrain (%s (%s)) %s)", "Unknown expression attribute type: %i", "Failed to generate name list", "(role %s)", "Warning: role 'dominance' statement unsupported in CIL. Dropping from output.", "(roletype %s %s)", "(rolebounds %s %s)", "Unknown role type: %i", "(typepermissive %s)", "(typebounds %s %s)", "Unknown flavor (%i) of type %s", "systemlow systemlow", "allowx", "auditallowx", "dontauditx", "neverallowx", "Unknown avrule type: %i", "(rangetransition %s %s %s ", "(typetransition %s %s %s \"%s\" %s)", "(true", "(false", "Failed to generate conditional expression", "tunableif", "booleanif", "(%s %s", "Warning: 'else' blocks in optional statements are unsupported in CIL. Dropping from output.", "(optional %s_optional_%i", "Warning: netfilter_contexts are unsupported in CIL. Dropping from output.", "(userprefix %s %s)", "Failed to read user_extra\n", "Invalid file context line: %s", "char", "block", "socket", "pipe", "symlink", "Invalid mode in file context line: %s", "(filecon \"%s\" %s ", "<<none>>", "Failed to read file_contexts_to_cil\n", "Invalid context: %s", "ipv4", "ipv6", "unsupported protocol %u", "unsupported protocol %u, could not expand address to string", "network_peer_controls", "open_perms", "extended_socket_class", "always_check_network", "cgroup_seclabel", "SE Linux", "XenFlask", "security:  %d classes, %d rules, %d cond rules", "Duplicate name-based type_transition %s %s:%s \"%s\":  %s, ignoring", "policydb magic number %#08x does not match expected magic number %#08x or %#08x", "policydb string length %s ", "too long", "zero", "unable to allocate memory for policydb string of length %zu", "truncated policydb string identifier", "unknown module type: %#08x", "policydb version %d does not match my version range %d-%d", "policydb module version %d does not match my version range %d-%d", "unable to find policy compat info for version %d", "policydb table sizes (%d,%d) do not match mine (%d,%d)", "unexpected items in symbol table with no symbol", "no avrule block in policy", "truncated level", "error reading level categories", "invalid scope with no declaration", "ocontext_read", "ocontext_read_selinux", "Unknown SELinux ocontext", "ocontext_read_xen", "genfs_read", "dup genfs fstype %s", "dup genfs entry (%s,%s)", "could not create policy image", "sepol_port_modify", "could not load port range %u - %u (%s)", "sepol2ipproto", "unrecognized class %d", "unrecognized SID %d", "failed to allocate class buffer", "failed to allocate expr buffer", "Badness at %s:%d", "failed to allocate answer stack", "failed to allocate answer buffer", "%s %s %s", "%s (%s)", "%s%s", "%s %s\n", "Validatetrans", "Constraint", "GRANTED", "DENIED", "constrain ", "mlsconstrain ", "validatetrans ", "mlsvalidatetrans ", "class %s disappeared", "the inherits clause for the access vector definition for class %s changed", "MLS is enabled, but no MLS default level was defined for user %s", "could not copy MLS level %s", "MLS is disabled, but MLS level/range was found for user %s", "unable to expand role set", "could not load %s into policy", "compatibility lookup failed for policy version %d", "Warning! Policy version %d cannot support permissive types, but some were defined", "Discarding filename type transition rules", "Warning! Module policy version %d cannot support permissive types, but one was defined", "policy version %u does not support ioctl extendedpermissions rules and one was specified", "Target platform %s does not support ioctl extended permissions rules and one was specified", "module policy does not support extended permissions rules and one was specified", "role_trans_write", "Discarding role_transition rules for security classes other than \"process\"", "ocontext_write_xen", "policy version %d cannot represent IOMEM addresses over 16TB", "Discarding range_transition rules for security classes other than \"process\"", "Unable to create version mapping table.\n", "Unable to build source db AST.\n", "Unable to extract attributizable elements from source db.\n", "base_typeattr_", "%s declaration illegal non-platform policy (line %d)\n", "AST already resolved. Not yet supported.\n", "AST already resolved.  !!! Not yet supported.\n", "AST already resolved.  ### Not yet supported.\n", "%s with platform public type not allowed (line %d)\n", "Conflicting type rules (scontext=%s tcontext=%s tclass=%s result=%s), existing=%s\n", "Expanded from type rule (scontext=%s tcontext=%s tclass=%s result=%s)\n", "typetransition with file name not allowed within a booleanif block.\n", "Failed to insert type transition into avtab", "Invalid statement within booleanif", "Failed to convert CIL conditional expression to sepol expression", "Failed to insert category set into sepol mls level\n", "User default labeling for class %s already specified\n", "db == NULL\n", "policydb == NULL\n", "Failure to create hashtab for filename_trans\n", "Failure to create hashtab for range_trans\n", "Failure to create hashtab for role_trans\n", "Failure to create hashtab for avrulex\n", "Failure while walking cil database\n", "Failure while inserting cil contexts into sepol policydb\n", "Failure while initializing typeattribute bitmap\n", "Checking User Bounds\n", "Checking Role Bounds\n", "Checking Type Bounds\n", "Failure creating roles cache", "Failure creating users cache", "Failed to get first operand of conditional expression\n", "Failed to get second operand of conditional expression\n", "Expression result was undefined - disabling all rules\n", "      ", "Child type %s exceeds bounds of parent %s\n", "Failed to convert sepol avrule to CIL\n", "Error occurred while checking type bounds\n", "    <See previous>\n", "Failed to create CIL AV rule from sepol values\n", "Failed to create CIL class-permissions from sepol values\n", "Classorder 'unordered' keyword must be followed by one or more class.\n", "Classorder can only use 'unordered' keyword as the first item in the list.\n", "The keyword '%s' is reserved\n", "Value must be either 'true' or 'false'", "Bad tunable (treated as a boolean due to preserve-tunables) declaration", "Conditional neither true nor false\n", "Bad tunableif (treated as a booleanif due to preserve-tunables) declaration", "Conditional statements must be a direct child of a tunableif or booleanif statement.\n", "Bad %s declaration", "Failed to create integer from string\n", "Expected either 'source' or 'target'\n", "Keyword expected after open parenthesis", "%s cannot be defined within tunableif statement (treated as a booleanif due to preserve-tunables)\n", "Found tunable", "Tunables cannot be defined within tunableif statement\n", "in-statements cannot be defined within in-statements\n", "Expected a string at the start of the constraint expression\n", "Failed to qualify names\n", "Compile post process\n", "Post process failed\n", "string", "self", "auditallow", "dontaudit", "typetransition", "typechange", "call", "tunable", "range", "type", "userattribute", "userattributeset", "sensitivity", "categoryset", "levelrange", "ipaddr", "classmap", "classpermission", "boolean", "name", "handleunknown", "blockinherit", "blockabstract", "classorder", "classmapping", "classpermissionset", "classcommon", "sidcontext", "sidorder", "userlevel", "userrange", "userbounds", "userprefix", "selinuxuser", "selinuxuserdefault", "typeattribute", "typeattributeset", "expandtypeattribute", "typealias", "typealiasactual", "typebounds", "typepermissive", "rangetransition", "userrole", "roletype", "roletransition", "roleallow", "roleattribute", "roleattributeset", "rolebounds", "neverallow", "typemember", "sensitivityalias", "sensitivityaliasactual", "categoryalias", "categoryaliasactual", "categoryorder", "sensitivityorder", "sensitivitycategory", "constrain", "mlsconstrain", "validatetrans", "context", "filecon", "portcon", "nodecon", "genfscon", "netifcon", "pirqcon", "iomemcon", "ioportcon", "pcidevicecon", "devicetreecon", "fsuse", "policycap", "optional", "defaultuser", "defaultrole", "defaulttype", "macro", "defaultrange", "fatal flex scanner internal error--no action found", "fatal flex scanner internal error--end of buffer missed", "out of dynamic memory in yy_get_next_buffer()", "Attempt to append data to a NULL list", "Close parenthesis without matching open at line %d of %s\n", "Symbol not inside parenthesis at line %d of %s\n", "High-level language line marker start without close at line %d of %s\n", "Unknown token type '%d' at line %d of %s\n", "Line mark end without start\n", "Problem parsing line number for line mark\n", "Problem with high-level line mark at line %d of %s\n", "attribute", "attribute_role", "not ", " and ", " or ", " == ", " != ", " dom ", " domby ", " incomp ", " ??? ", "%s %s;\n", "bool %s %s;\n", "typealias %s alias", "typebounds %s %s\n", "typeattribute %s %s", ", %s", "allowxperm", "auditallowxperm", "dontauditxperm", "neverallowxperm", "%s %s %s : ", " 0x%x", " 0x%x-0x%x", " 0x%x 0x%x", "%s %s %s : %s;\n", "role %s types { %s", "roleattribute %s %s", "allow %s %s;\n", "role_transition %s %s : %s %s;\n", " roles", " level ", " range ", "constrain %s %s;\n", "sid %s ", "fs_use_xattr %s ", "fs_use_task %s ", "fs_use_trans %s ", "genfscon %s %s ", "portcon ", "udp ", "tcp ", "dccp ", "%d-%d ", "netifcon %s ", "nodecon ", "[INVALID] ", "pirqcon %d ", "iomemcon %llx ", "iomemcon %llx-%llx ", "ioportcon 0x%x-0x%x ", "pcidevicecon 0x%x ", "devicetreecon %s ", "Failed post db handling\n", "Failed to create attribute bitmaps\n", "Failed during roletype association\n", "Failed during userrole association\n", "Failed to evaluate class mapping permissions expressions\n", "Failed to evaluate category expressions\n", "Failed to expand 'all' operator\n", "Range operation only supported for categories permissionx\n", "Failed to get first operand bitmap\n", "Failed to NOT bitmap\n", "Failed to get second operand bitmap\n", "Failed to apply operator to bitmaps\n", "Category sets cannont be used in a category range\n", "Failed to set cat bit\n", "Failed to set permissionx bit\n", "Policy must include at least one avrule\n", "Policy cannot contain more than one selinuxuserdefault, found: %d\n", "Conflicting use of expandtypeattribute. Expandtypeattribute may be set to true or false but not both. \n", "Attribute type not an attribute\n", "Too many permissions in class '%s' when including common permissions", "SID %s has already been merged into the ordered list\n", "Class %s has already been merged into the ordered list\n", "%s is not a category. Only categories are allowed in categoryorder statements\n", "Failed to find sensitivity\n", "Bounds parent %s is an attribute\n", "Bad bounds statement", "Missing arguments", "Failed to create anonymous level, rc: %d\n", "Failed to create anonymous levelrange, rc: %d\n", "Unexpected flavor: %d\n", "Unexpected arguments", "Failed to copy macro, rc: %d\n", "%s statement is not allowed in booleanifs (tunableif treated as a booleanif)", "%s statement is not allowed in booleanifs", "Disabling optional '%s'", "Failed to resolve %s statement", "Problem", "FLAVOR: %d", "BLOCK: %s\n", "BLOCKINHERIT: %s\n", "BLOCKABSTRACT: %s\n", "IN: %s\n", "USER: %s\n", "TYPE: %s\n", "%s %u\n", "cil_tree_print_node", "(EXPANDTYPEATTRIBUTE ", "%s)\n", "(TYPEATTRIBUTESET %s ", "TYPEATTRIBUTE: %s\n", "ROLE: %s\n", "USERROLE:", "USERLEVEL:", "USERRANGE:", "USERBOUNDS: user: %s, bounds: %s\n", "ROLETYPE:", "ROLETRANSITION:", " %s\n", "ROLEALLOW:", "(ROLEATTRIBUTESET %s ", "ROLEATTRIBUTE: %s\n", "(USERATTRIBUTESET %s ", "USERATTRIBUTE: %s\n", "ROLEBOUNDS: role: %s, bounds: %s\n", "CLASS: %s ", "inherits: %s ", "CLASSORDER: ()\n", "CLASSORDER: (", "COMMON: %s (", "CLASSCOMMON: class: %s, common: %s\n", "CLASSPERMISSION: %s", "CLASSPERMISSIONSET: %s", "MAP_CLASS: %s", "MAP_PERM: %s", " perms: ()", " kernel class perms: (", "CLASSMAPPING: map class: %s, map perm: %s,", "BOOL: %s, value: %d\n", "TUNABLE: %s, value: %d\n", "(BOOLEANIF ", "(TUNABLEIF ", "true\n", "false\n", "TYPEALIAS: %s\n", "TYPEALIASACTUAL: type: %s, alias: %s\n", "TYPEBOUNDS: type: %s, bounds: %s\n", "TYPEPERMISSIVE: %s\n", "TYPETRANSITION:", "RANGETRANSITION:", "ALLOW:", "AUDITALLOW:", "DONTAUDIT:", "NEVERALLOW:", "TYPEMEMBER:", "TYPECHANGE:", "SENSITIVITY: %s\n", "SENSITIVITYALIAS: %s\n", "SENSITIVITYALIAS: alias: %s, sensitivity: %s\n", "CATEGORY: %s\n", "CATEGORYALIAS: %s\n", "CATEGORYALIAS: alias %s, category: %s\n", "CATSET: %s ", "CATORDER: ()\n", "CATORDER: (", "SENSCAT: sens:", " %s ", " [processed]", "SENSITIVITYORDER: (", "LEVEL %s:", "LEVELRANGE %s:", "CONSTRAIN: (", "MLSCONSTRAIN: (", "(VALIDATETRANS ", "(MLSVALIDATETRANS ", "CONTEXT %s:", "FILECON:", " %s %d", "PORTCON:", " udp", " tcp", " dccp", " (%d %d)", "NODECON:", "GENFSCON:", " %s %s", "NETIFCON %s", "PIRQCON %d", "IOMEMCON ( %lld %lld )", "IOPORTCON ( %d %d )", "PCIDEVICECON %d", "DEVICETREECON %s", "xattr ", "task ", "trans ", "unknown ", "SID: %s\n", "SIDCONTEXT: %s", "SIDORDER: ()\n", "SIDORDER: (", "POLICYCAP: %s\n", " flavor: %d, string: %s;", "CIL FLAVOR: %d\n", "Invalid name\n", "Invalid operator (%s) for set expression\n", "Unexpected value (%s) for expression operator\n", "l1, l2, h1, and h2 cannot be used on the left side with a string or list on the right side\n", "u3, r3, and t3 can only be used with mlsvalidatetrans rules\n", "u2 on the right side must be used with eq or neq as the operator\n", "u2 on the right side must be used with u1 on the left\n", "r2 on the right side must be used with r1 on the left\n", "t2 on the right side must be used with eq or neq as the operator\n", "h2 on the right side must be used with l1, l2, or h1 on the left\n", "h1 on the right side must be used with l1 on the left\n", "SID %s not in sidorder statement", "Low level category set must be a subset of the high level category set\n", "No roles given to the user %s\n", "Invalid context\n", "Neverallow found in tunableif block (treated as a booleanif due to preserve-tunables)", "Invalid %s statement in tunableif (treated as a booleanif due to preserve-tunables)", "Invalid tunableif (treated as a booleanif due to preserve-tunables)", "Invalid user", "User %s does not have a default level\n", "User %s does not have a level range\n", "Circular bounds found for user %s\n", "Found circular class permissions involving the map class %s and permission %s", "CIL_BLOCK", "CIL_BLOCKABSTRACT", "CIL_BLOCKINHERIT", "CIL_MAP_PERM", "CIL_CLASSMAPPING", "CIL_MAP_CLASS", "CIL_CLASSPERMISSION", "CIL_CLASSPERMISSIONSET", "CIL_USERATTRIBUTE", "CIL_USERATTRIBUTESET", "CIL_USERBOUNDS", "CIL_USERPREFIX", "CIL_ROLEBOUNDS", "CIL_ROLEATTRIBUTESET", "CIL_ROLEALLOW", "CIL_TYPEBOUNDS", "CIL_ROLETRANSITION", "CIL_RANGETRANSITION", "CIL_TUNABLE", "CIL_BOOL", "CIL_PERMISSIONX", "CIL_CATSET", "CIL_LEVEL", "CIL_LEVELRANGE", "CIL_CONTEXT", "CIL_NETIFCON", "CIL_FILECON", "CIL_NODECON", "CIL_PORTCON", "CIL_PIRQCON", "CIL_IOMEMCON", "CIL_IOPORTCON", "CIL_PCIDEVICECON", "CIL_DEVICETREECON", "CIL_CONSTRAIN", "CIL_VALIDATETRANS", "CIL_MLSVALIDATETRANS", "CIL_CALL", "CIL_MACRO", "CIL_NODE", "CIL_OPTIONAL", "CIL_IPADDR", "CIL_CONDBLOCK", "CIL_BOOLEANIF", "CIL_TUNABLEIF", "CIL_DEFAULTUSER", "CIL_DEFAULTROLE", "CIL_DEFAULTTYPE", "CIL_DEFAULTRANGE", "CIL_SELINUXUSER", "Unknown AST flavor: %d.\n", "flavor \"%s\" is not supported, look in file \"%s\" on line %d to add support.\n", "(%s %s)\n", "(%s)", "(%s %s %s)\n", "OOM. Unable to copy context string.\n", "OOM. Unable to copy level string.\n", "OOM. Unable to copy levelrange string.\n", "Unknown alias type: %d\n", "(%s %s %s %s \"%s\" %s)\n", "Unknown AVRULE type: %d\n", "OOM. Unable to copy xperms string.\n", "(%s %s %s %s)\n", "Unknown permissionx kind: %d\n", "Error writing xperm\n", "Unknown TYPERULE type: %d\n", "(%s %s %s %s %s)\n", "(%s %s (%s))\n", "Unrecognized fsuse type\n", "libunwind: %s %s:%d - %s\n", "external/libunwind_llvm/src/Unwind-EHABI.cpp", "unsupported register class", "during phase1 personality function said it would stop here, but now in phase2 it did not stop here", "external/libunwind_llvm/src/Registers.hpp", "unsupported arm register", "Unknown ARM float register", "index inlined table detected but pr function requires extra words", "While testing expression, expression result was undefined - this should never happen.", "Found expr with no bools and only a ! - this should never happen.", "security: conflicting type rules when adding type rule for true.", "security: conflicting type rules.", "security: ebitmap: out of memory", "security: ebitmap: truncated map", "object_r"], "stringidentifiers": ["libsepol", "report_assertion_extended_permissions", "expand_filename_trans", "expand_range_trans", "exp_rangetr_helper", "object_r", "ocontext_copy", "ocontext_copy_selinux", "domby", "incomp", "allow", "null", "kernel", "security", "unlabeled", "file", "file_labels", "init", "any_socket", "port", "netif", "netmsg", "node", "igmp_packet", "icmp_socket", "tcp_socket", "sysctl_modprobe", "sysctl", "sysctl_fs", "sysctl_kernel", "sysctl_net", "sysctl_net_unix", "sysctl_vm", "sysctl_dev", "kmod", "policy", "scmp_packet", "devnull", "dom0", "domio", "domxen", "ioport", "iomem", "device", "systemlow", "ioctl", "xattr", "trans", "task", "dccp", "mlsvalidatetrans", "deny", "reject", "source", "target", "prepare_module", "prepare_base", "copy_avrule_block", "copy_role_trans_list", "copy_role_allow_list", "copy_cond_list", "copy_filename_trans_list", "copy_range_trans_list", "common", "class", "role", "user", "bool", "level", "category", "enable_avrules", "print_missing_requirements", "debug_requirements", "populate_roleattributes", "true", "false", "allowx", "auditallowx", "dontauditx", "neverallowx", "tunableif", "booleanif", "char", "block", "socket", "pipe", "symlink", "ipv4", "ipv6", "network_peer_controls", "open_perms", "extended_socket_class", "always_check_network", "cgroup_seclabel", "XenFlask", "zero", "ocontext_read", "ocontext_read_selinux", "ocontext_read_xen", "genfs_read", "sepol_port_modify", "sepol2ipproto", "Validatetrans", "Constraint", "GRANTED", "DENIED", "role_trans_write", "ocontext_write_xen", "base_typeattr_", "string", "self", "auditallow", "dontaudit", "typetransition", "typechange", "call", "tunable", "range", "type", "userattribute", "userattributeset", "sensitivity", "categoryset", "levelrange", "ipaddr", "classmap", "classpermission", "boolean", "name", "handleunknown", "blockinherit", "blockabstract", "classorder", "classmapping", "classpermissionset", "classcommon", "sidcontext", "sidorder", "userlevel", "userrange", "userbounds", "userprefix", "selinuxuser", "selinuxuserdefault", "typeattribute", "typeattributeset", "expandtypeattribute", "typealias", "typealiasactual", "typebounds", "typepermissive", "rangetransition", "userrole", "roletype", "roletransition", "roleallow", "roleattribute", "roleattributeset", "rolebounds", "neverallow", "typemember", "sensitivityalias", "sensitivityaliasactual", "categoryalias", "categoryaliasactual", "categoryorder", "sensitivityorder", "sensitivitycategory", "constrain", "mlsconstrain", "validatetrans", "context", "filecon", "portcon", "nodecon", "genfscon", "netifcon", "pirqcon", "iomemcon", "ioportcon", "pcidevicecon", "devicetreecon", "fsuse", "policycap", "optional", "defaultuser", "defaultrole", "defaulttype", "macro", "defaultrange", "attribute", "attribute_role", "allowxperm", "auditallowxperm", "dontauditxperm", "neverallowxperm", "Problem", "cil_tree_print_node", "CIL_BLOCK", "CIL_BLOCKABSTRACT", "CIL_BLOCKINHERIT", "CIL_MAP_PERM", "CIL_CLASSMAPPING", "CIL_MAP_CLASS", "CIL_CLASSPERMISSION", "CIL_CLASSPERMISSIONSET", "CIL_USERATTRIBUTE", "CIL_USERATTRIBUTESET", "CIL_USERBOUNDS", "CIL_USERPREFIX", "CIL_ROLEBOUNDS", "CIL_ROLEATTRIBUTESET", "CIL_ROLEALLOW", "CIL_TYPEBOUNDS", "CIL_ROLETRANSITION", "CIL_RANGETRANSITION", "CIL_TUNABLE", "CIL_BOOL", "CIL_PERMISSIONX", "CIL_CATSET", "CIL_LEVEL", "CIL_LEVELRANGE", "CIL_CONTEXT", "CIL_NETIFCON", "CIL_FILECON", "CIL_NODECON", "CIL_PORTCON", "CIL_PIRQCON", "CIL_IOMEMCON", "CIL_IOPORTCON", "CIL_PCIDEVICECON", "CIL_DEVICETREECON", "CIL_CONSTRAIN", "CIL_VALIDATETRANS", "CIL_MLSVALIDATETRANS", "CIL_CALL", "CIL_MACRO", "CIL_NODE", "CIL_OPTIONAL", "CIL_IPADDR", "CIL_CONDBLOCK", "CIL_BOOLEANIF", "CIL_TUNABLEIF", "CIL_DEFAULTUSER", "CIL_DEFAULTROLE", "CIL_DEFAULTTYPE", "CIL_DEFAULTRANGE", "CIL_SELINUXUSER", "object_r"], "debugstrings": ["policy version %u does not support extended permissions rules and one was specified\n", "policydb version %d does not match my version range %d-%d", "policydb module version %d does not match my version range %d-%d", "unable to find policy compat info for version %d", "compatibility lookup failed for policy version %d", "Warning! Policy version %d cannot support permissive types, but some were defined", "Warning! Module policy version %d cannot support permissive types, but one was defined", "policy version %u does not support ioctl extendedpermissions rules and one was specified", "policy version %d cannot represent IOMEM addresses over 16TB", "Unable to create version mapping table.\n"], "localsymbols": [""], "dependencies": ["libdl.so", "libc.so", "libm.so", "libc++.so"], "elfname": "libsepol.so"}