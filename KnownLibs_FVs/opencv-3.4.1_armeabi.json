{"globalvars": ["_ZTTN2cv5AKAZEE", "_ZTVN10__cxxabiv119__pointer_type_infoE", "_ZN3tbb8internal8governor6theTLSE", "_ZTSN2cv9AlgorithmE", "_ZTVN2cv16TLSDataContainerE", "_ZTVN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTIN2cv22SimpleBlobDetectorImplE", "_ZTIN10__cxxabiv117__pbase_type_infoE", "_ZTVN2cv5BRISKE", "_ZTISt8bad_cast", "_ZTIN3tbb4taskE", "_ZN3tbb8internal8governor22is_speculation_enabledE", "_ZTSN3tbb8internal6marketE", "_ZTIN2cv5BRISKE", "_ZTSN2cv4KAZEE", "_ZTSN2cv2ml9StatModelE", "_ZTSN2cv11FileStorageE", "_ZN3tbb8internal6market9theMarketE", "_ZTSN2cv17DescriptorMatcherE", "_ZN3tbb8internal8governor13UsePrivateRMLE", "_ZTVN2cv16ParallelLoopBodyE", "_ZTIN2cv12GFTTDetectorE", "_ZTVN2cv21DetectionBasedTrackerE", "_ZTIN3tbb8internal6marketE", "_ZTTN2cv4KAZEE", "_ZTVN10__cxxabiv117__class_type_infoE", "_ZTIN3tbb8internal3rml14private_serverE", "_ZTVN3tbb8internal3rml14private_serverE", "_ZTIN2cv10BOWTrainerE", "_ZTVN2cv22SimpleBlobDetectorImplE", "_ZTVN2cv2ml9StatModelE", "_ZTIN3tbb27invalid_multiple_schedulingE", "_ZTVN3tbb18captured_exceptionE", "_ZTVSt8bad_cast", "_ZTVN2cv12GFTTDetectorE", "_ZTVN10__cxxabiv119__foreign_exceptionE", "_ZN2cv15BriskScaleSpace10basicSize_E", "_ZTSN2cv21BaseCascadeClassifierE", "_ZTSN2cv5AKAZEE", "_ZTIN10__cxxabiv119__pointer_type_infoE", "_ZTIN2cv18SimpleBlobDetectorE", "_ZTSN2cv25BOWImgDescriptorExtractorE", "_ZTVN10__cxxabiv115__forced_unwindE", "_ZTSN2cv16TLSDataContainerE", "_ZTTN2cv3ORBE", "_ZTVN10__cxxabiv121__vmi_class_type_infoE", "_ZTSN2cv18SimpleBlobDetectorE", "_ZTSN10__cxxabiv115__forced_unwindE", "_ZTIN2cv20AgastFeatureDetectorE", "_ZTSN3tbb27invalid_multiple_schedulingE", "_ZTVN2cv2ml9TrainDataE", "_ZTSSt13bad_exception", "_ZTIN2cv9Feature2DE", "_ZTIN2cv21BaseCascadeClassifierE", "_ZTIN10__cxxabiv117__class_type_infoE", "_ZTIN2cv16MinProblemSolver8FunctionE", "_ZTTN2cv4MSERE", "_ZTSN10__cxxabiv116__enum_type_infoE", "_ZTIN2cv4MSERE", "_ZTIN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTVN10__cxxabiv116__enum_type_infoE", "_ZTVN3tbb10user_abortE", "_ZTIN10__cxxabiv120__si_class_type_infoE", "_ZTVN2cv9ExceptionE", "_ZTSSt9exception", "_ZTVN2cv16BOWKMeansTrainerE", "_ZTSN2cv3dnn19experimental_dnn_v45LayerE", "_ZTVN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTSN2cv13HOGDescriptorE", "_ZTVN2cv5MatOpE", "_ZTSSt10bad_typeid", "_ZTIN2cv5MatOpE", "_ZN3tbb8internal8governor19theRMLServerFactoryE", "_ZTIN2cv21DetectionBasedTrackerE", "_ZTVN2cv12VideoCaptureE", "_ZTSN2cv4MSERE", "_ZTIN2cv16ParallelLoopBodyE", "_ZTIN2cv2ml9StatModelE", "_ZN3tbb8internal24the_global_observer_listE", "_ZTVN3tbb8internal17generic_schedulerE", "_ZTIN2cv12VideoCaptureE", "_ZTVN2cv21BaseCascadeClassifierE", "_ZTVN2cv17FlannBasedMatcherE", "_ZTIN2cv25BOWImgDescriptorExtractorE", "_ZN3tbb8internal14__TBB_InitOnce18InitializationDoneE", "_ZTIN2cv3dnn19experimental_dnn_v49LSTMLayerE", "_ZTVN2cv18SimpleBlobDetectorE", "_ZN10__cxxabiv119__terminate_handlerE", "_ZTIN2cv13HOGDescriptorE", "_ZTTN2cv5BRISKE", "_ZTSN10__cxxabiv119__pointer_type_infoE", "_ZTVN2cv9AlgorithmE", "_ZTISt9exception", "_ZTVN3tbb13improper_lockE", "_ZTSN2cv9BFMatcherE", "_ZTSN2cv16BOWKMeansTrainerE", "_ZTIN2cv4KAZEE", "_ZTIN2cv9FormattedE", "_ZTSN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTVSt13bad_exception", "_ZTIN10__cxxabiv115__forced_unwindE", "_ZTSN3tbb13improper_lockE", "_ZTVN10__cxxabiv120__si_class_type_infoE", "_ZTSN2cv9Feature2DE", "_ZTSN10__cxxabiv117__class_type_infoE", "_ZTSN2cv5BRISKE", "_ZTSN2cv12VideoCaptureE", "_ZTVN2cv19FastFeatureDetectorE", "_ZTVN2cv3ORBE", "_ZTVN3tbb27invalid_multiple_schedulingE", "_ZN3tbb8internal14__TBB_InitOnce18InitializationLockE", "_ZTSN10__cxxabiv119__foreign_exceptionE", "_ZTIN10__cxxabiv123__fundamental_type_infoE", "_ZTSN3tbb4taskE", "_ZTIN2cv9BFMatcherE", "_ZTVN2cv5AKAZEE", "_ZTIN3tbb8internal17generic_schedulerE", "_ZTSN2cv19FastFeatureDetectorE", "_ZTSSt9bad_alloc", "_ZTIN2cv16BOWKMeansTrainerE", "VP8GetCPUInfo", "_ZTIN3tbb18captured_exceptionE", "_ZTSN2cv16MinProblemSolver8FunctionE", "_ZTIN2cv3dnn19experimental_dnn_v45LayerE", "_ZTTN2cv18SimpleBlobDetectorE", "_ZTIN2cv17DescriptorMatcherE", "_ZN3tbb8internal14__TBB_InitOnce5countE", "_ZTIN2cv9AlgorithmE", "_ZTTN2cv9Feature2DE", "_ZN2cv15BriskScaleSpace13safetyFactor_E", "_ZTISt13bad_exception", "_ZTTN2cv12GFTTDetectorE", "_ZTVN2cv5flann5IndexE", "_ZTIN2cv9ExceptionE", "_ZTSN3tbb10user_abortE", "_ZTISt9bad_alloc", "_ZTVN3tbb12missing_waitE", "_ZN3tbb8internal8governor22DefaultNumberOfThreadsE", "__popcount_tab", "_ZTIN2cv5flann5IndexE", "_ZTTN2cv22SimpleBlobDetectorImplE", "_ZTIN2cv16TLSDataContainerE", "_ZTVN2cv4KAZEE", "_ZN6CvType5firstE", "_ZSt7nothrow", "_ZTSN2cv2ml9TrainDataE", "_ZTVN2cv13HOGDescriptorE", "_ZTVN2cv3dnn19experimental_dnn_v45LayerE", "_ZTSN2cv9ExceptionE", "_ZTISt10bad_typeid", "_ZTTN2cv20AgastFeatureDetectorE", "_ZTSN3tbb12missing_waitE", "_ZTVN2cv9BFMatcherE", "_ZTSN2cv12MatAllocatorE", "_ZTSN2cv21DetectionBasedTrackerE", "_ZTVN2cv3dnn19experimental_dnn_v49LSTMLayerE", "_ZN3tbb8internal35the_context_state_propagation_epochE", "_ZTVN2cv9FormattedE", "_ZN10__cxxabiv120__unexpected_handlerE", "_ZTVN2cv16MinProblemSolver8FunctionE", "_ZTSN3tbb14bad_last_allocE", "_ZTVN2cv12MatAllocatorE", "_ZTIN3tbb14bad_last_allocE", "_ZN3tbb8internal20AllocateSchedulerPtrE", "_ZN3tbb8internal35the_context_state_propagation_mutexE", "_ZTSN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTIN3tbb13improper_lockE", "_ZTIN10__cxxabiv121__vmi_class_type_infoE", "_ZTVN3tbb14bad_last_allocE", "_ZTSN2cv5MatOpE", "_ZTVSt9bad_alloc", "_ZTIN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTIN2cv5AKAZEE", "_ZTVN2cv9Feature2DE", "_ZTIN2cv17FlannBasedMatcherE", "_ZTSN2cv9FormatterE", "_ZTSN10__cxxabiv123__fundamental_type_infoE", "_ZTVN2cv9FormatterE", "_ZTSN2cv3ORBE", "_ZTSN2cv16ParallelLoopBodyE", "_ZTSN10__cxxabiv120__si_class_type_infoE", "_ZTSN2cv17FlannBasedMatcherE", "_ZTIN10__cxxabiv119__foreign_exceptionE", "_ZTIN3tbb10user_abortE", "_ZTVN2cv17DescriptorMatcherE", "_ZTIN2cv2ml9TrainDataE", "_ZTIN2cv19FastFeatureDetectorE", "_ZTVSt10bad_typeid", "_ZN6CvType4lastE", "_ZTSN2cv22SimpleBlobDetectorImplE", "_ZTSSt8bad_cast", "_ZTSN3tbb18captured_exceptionE", "_ZTTN2cv19FastFeatureDetectorE", "_ZTSN3tbb8internal17generic_schedulerE", "_ZTVSt9exception", "_ZTSN2cv12GFTTDetectorE", "_ZTVN2cv25BOWImgDescriptorExtractorE", "_ZN3tbb8internal8governor17is_rethrow_brokenE", "_ZTVN3tbb8internal6marketE", "_ZTSN2cv20AgastFeatureDetectorE", "_ZTVN2cv4MSERE", "_ZTIN2cv11FileStorageE", "_ZTSN2cv11VideoWriterE", "_ZTSN10__cxxabiv121__vmi_class_type_infoE", "_ZTSN3tbb8internal3rml14private_serverE", "_ZTIN10__cxxabiv116__enum_type_infoE", "_ZTSN2cv3dnn19experimental_dnn_v49LSTMLayerE", "_ZTIN2cv11VideoWriterE", "_ZTIN2cv12MatAllocatorE", "_ZTIN2cv9FormatterE", "_ZTVN2cv10BOWTrainerE", "_ZTVN10__cxxabiv123__fundamental_type_infoE", "_ZTIN3tbb12missing_waitE", "_ZTSN2cv9FormattedE", "_ZTVN2cv11FileStorageE", "_ZTVN2cv11VideoWriterE", "_ZTVN3tbb4taskE", "_ZTVN10__cxxabiv117__pbase_type_infoE", "_ZTSN2cv10BOWTrainerE", "_ZTVN2cv20AgastFeatureDetectorE", "_ZN3tbb8internal6market14theMarketMutexE", "_ZTIN2cv3ORBE", "_ZTSN2cv5flann5IndexE", "_ZTSN10__cxxabiv117__pbase_type_infoE"], "importedglobals": ["__sF", "_tolower_tab_", "_ctype_", "_toupper_tab_"], "importedfunctions": ["pthread_mutexattr_destroy", "fread", "cos", "floorf", "memset", "closedir", "putchar", "pthread_key_delete", "lrand48", "realloc", "fstat", "gzclose", "malloc", "sqrtf", "bsearch", "adler32", "clock_gettime", "hypot", "logf", "inflateInit_", "asin", "ldexp", "ioctl", "longjmp", "unlink", "memalign", "memmove", "setlocale", "atan2", "fseek", "strtok", "pthread_attr_destroy", "memchr", "mmap", "gzrewind", "sinf", "getwc", "pthread_create", "vfprintf", "getcwd", "__android_log_write", "write", "deflateInit_", "sin", "strtod", "towupper", "feof", "pthread_cond_broadcast", "deflate", "free", "cbrt", "towlower", "pthread_key_create", "poll", "fputc", "pthread_mutexattr_init", "lrintf", "acos", "fputs", "wcsftime", "sem_init", "exit", "sinh", "sched_yield", "strftime", "close", "strcpy", "memcpy", "fwrite", "wctype", "strncmp", "inflateSync", "strdup", "frexp", "pthread_mutex_trylock", "wcsxfrm", "wmemcpy", "strxfrm", "modf", "AndroidBitmap_lockPixels", "rmdir", "stat", "deflateParams", "rewind", "wmemset", "readdir", "ceilf", "qsort", "pthread_once", "deflateEnd", "remove", "sscanf", "strtoull", "memmem", "uncompress", "putwc", "open", "ftello", "inflateReset", "wmemmove", "read", "fmod", "pthread_attr_getstack", "pthread_mutex_destroy", "pthread_cond_wait", "memcmp", "pthread_join", "inflate", "fflush", "strerror", "pthread_attr_init", "lrint", "fcntl", "sem_post", "strcat", "pthread_mutex_init", "fgetc", "strtol", "pthread_cond_init", "exp", "atan", "ceil", "floor", "putc", "pthread_getattr_np", "fseeko", "strlen", "sprintf", "compress", "AndroidBitmap_unlockPixels", "getenv", "mkdir", "vsnprintf", "vsprintf", "gzeof", "pow", "cosf", "gzgets", "iswctype", "ftell", "ungetwc", "lseek", "tanhf", "calloc", "printf", "sem_wait", "wcscoll", "deflateInit2_", "wcrtomb", "sem_destroy", "log10", "expf", "setjmp", "gzopen", "pthread_getspecific", "abort", "wmemchr", "snprintf", "log", "strcmp", "mkstemp", "pthread_attr_setstacksize", "AndroidBitmap_getInfo", "pthread_setspecific", "inflateEnd", "raise", "fclose", "tan", "wctob", "writev", "mbrtowc", "strtoul", "fprintf", "munmap", "getc", "wcslen", "strstr", "strncpy", "pthread_mutex_lock", "fgets", "opendir", "strcoll", "strrchr", "__android_log_print", "puts", "pthread_mutexattr_settype", "atoi", "sqrt", "fopen", "btowc", "crc32", "tanh", "pthread_self", "pthread_cond_destroy", "deflateReset", "gzputs", "pthread_mutex_unlock", "strchr", "ungetc", "__errno", "fscanf", "pthread_cond_signal", "strtoll", "powf", "pthread_detach"], "exportedfunctions": ["Java_org_opencv_features2d_BRISK_delete", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_12", "_ZN2cv3ipp9useIPP_NEEv", "cvLUT", "cvStartReadSeq", "Java_org_opencv_core_TickMeter_getCounter_10", "Java_org_opencv_imgproc_Imgproc_dilate_11", "_ZN2cv5utils2fs6existsERKNS_6StringE", "Java_org_opencv_core_Core_rotate_10", "_ZNK2cv11_InputArray13getUMatVectorERSt6vectorINS_4UMatESaIS2_EE", "_ZN2cvplERKNS_7Scalar_IdEERKNS_3MatE", "Java_org_opencv_features2d_AgastFeatureDetector_getType_10", "cvAttrValue", "_ZNK2cv16TLSDataContainer10gatherDataERSt6vectorIPvSaIS2_EE", "_ZN2cv12setUseOpenVXEb", "cvProjectPCA", "Java_org_opencv_objdetect_HOGDescriptor_delete", "_ZN2cv7ellipseERKNS_17_InputOutputArrayERKNS_11RotatedRectERKNS_7Scalar_IdEEii", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_11", "Java_org_opencv_core_Core_pow_10", "_ZN2cv3dnn19experimental_dnn_v43Net7connectEiiii", "Java_org_opencv_core_Core_divide_14", "_ZN2cv13applyColorMapERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN3tbb8internal6market21app_parallelism_limitEv", "Java_org_opencv_photo_TonemapDurand_delete", "Java_org_opencv_calib3d_Calib3d_convertPointsToHomogeneous_10", "Java_org_opencv_imgproc_Imgproc_calcHist_11", "Java_org_opencv_ml_ANN_1MLP_getTermCriteria_10", "Java_org_opencv_core_Core_getThreadNum_10", "Java_org_opencv_features2d_GFTTDetector_create_10", "Java_org_opencv_photo_CalibrateRobertson_delete", "_ZNK2cv3ocl6Device17maxWriteImageArgsEv", "_ZNK2cv3Mat3dotERKNS_11_InputArrayE", "_ZN2cv5flann11IndexParams8setFloatERKNS_6StringEf", "Java_org_opencv_imgproc_Imgproc_Sobel_12", "_ZN3tbb8internal12PrintVersionEv", "_ZNK2cv4cuda10DeviceInfo9clockRateEv", "Java_org_opencv_features2d_FeatureDetector_detect_13", "_ZN2cvmiERKNS_3MatES2_", "cvAbsDiff", "cvUseOptimized", "Java_org_opencv_ml_DTrees_getUseSurrogates_10", "_ZNK2cv3PCA7projectERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZNK2cv4UMat7reshapeEiiPKi", "_ZNK2cv9Feature2D14descriptorTypeEv", "_ZN2cv11writeScalarERNS_11FileStorageEf", "cvPyrDown", "Java_org_opencv_imgproc_Imgproc_Scharr_10", "Java_org_opencv_imgproc_Imgproc_boundingRect_10", "_ZN2cv5flann11IndexParamsC2Ev", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_dS6_", "_ZTv0_n36_NK2cv5BRISK14getDefaultNameEv", "_ZN2cv3hal5morphEiiiPhjS1_jiiiiiiiiiiiS1_jiiiiiPKdib", "_ZN2cv6divideERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cvplERKNS_7MatExprES2_", "cvTransform", "_ZN2cv3ocl13ProgramSourceC2ERKS1_", "_ZN2cvltERKNS_3MatEd", "_ZNK2cv12_OutputArray6assignERKSt6vectorINS_3MatESaIS2_EE", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayENS1_6TargetEb", "cvReleaseKalman", "Java_org_opencv_core_Mat_n_1copyTo__JJJ", "_ZN2cv5MutexD2Ev", "cvSetWindowProperty", "_ZNK2cv4cuda10DeviceInfo8pciBusIDEv", "_ZN2cv9floodFillERKNS_17_InputOutputArrayENS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZN2cv17DescriptorMatcher5clearEv", "Java_org_opencv_ml_StatModel_isTrained_10", "Java_org_opencv_video_Video_findTransformECC_10", "_ZNK2cv3ocl6Device21nativeVectorWidthCharEv", "cvFilter2D", "Java_org_opencv_videoio_VideoWriter_set_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC2ERS0_NS_3PtrINS0_9IDetectorEEERKNS0_10ParametersE", "_ZN2cv12VideoCaptureC2ERKNS_6StringEi", "_ZN2cv8internal15IntrinsicParams4InitERKNS_3VecIdLi2EEES5_RKNS2_IdLi4EEERKd", "Java_org_opencv_core_Core_bitwise_1xor_11", "_ZNK3tbb8internal32allocate_root_with_context_proxy4freeERNS_4taskE", "_ZN10__cxxabiv117__class_type_infoD1Ev", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_11", "_ZN2cv16UMatDataAutoLockD2Ev", "_ZN2cv10accumulateERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_10", "Java_org_opencv_photo_CalibrateCRF_delete", "Java_org_opencv_features2d_Params_get_1filterByConvexity_10", "_ZNK2cv16TLSDataContainer7getDataEv", "Java_org_opencv_features2d_DescriptorExtractor_compute_10", "_ZNK2cv3ocl12PlatformInfo7versionEv", "cvCompareHist", "_ZNK2cv2ml9TrainData17getVarSymbolFlagsEv", "_ZN3tbb4task12change_groupERNS_18task_group_contextE", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_11", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayES4_b", "_ZN2cv3dnn19experimental_dnn_v48NMSBoxesERKSt6vectorINS_5Rect_IiEESaIS4_EERKS2_IfSaIfEEffRS2_IiSaIiEEfi", "_ZN2cv4cuda18setBufferPoolUsageEb", "_ZN2cv3dnn19experimental_dnn_v48LRNLayer6createERKNS1_11LayerParamsE", "_ZNK2cv9softfloatgeERKS0_", "Java_org_opencv_videoio_VideoWriter_VideoWriter_12", "_ZN2cv5AGASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEibi", "Java_org_opencv_features2d_Params_get_1maxThreshold_10", "Java_org_opencv_core_Core_calcCovarMatrix_11", "_ZN2cv2ml6KDTreeC1Ev", "_ZN2cv17FlannBasedMatcher5clearEv", "_ZNSt13bad_exceptionD2Ev", "Java_org_opencv_ml_DTrees_setPriors_10", "_ZN2cv3ocl7ContextD2Ev", "__gnu_Unwind_Save_VFP_D_16_to_31", "Java_org_opencv_dnn_Net_empty_10", "cvAdd", "_ZN2cv3hal5LU32fEPfjiS1_ji", "_ZN2cv13seamlessCloneERKNS_11_InputArrayES2_S2_NS_6Point_IiEERKNS_12_OutputArrayEi", "_ZN3tbb8internal17generic_scheduler12reload_tasksEi", "_ZNK3tbb12missing_wait4whatEv", "_ZN2cv11findNonZeroERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv28connectedComponentsWithStatsERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "Java_org_opencv_calib3d_StereoMatcher_setDisp12MaxDiff_10", "Java_org_opencv_ml_TrainData_getTrainSampleIdx_10", "_ZN2cv3dnn19experimental_dnn_v426ResizeNearestNeighborLayer6createERKNS1_11LayerParamsE", "_ZN2cvdvERKNS_7MatExprEd", "Java_org_opencv_ml_SVMSGD_getShift_10", "_ZN2cv5utils5trace7details6Region7destroyEv", "cvRectangleR", "Java_org_opencv_imgproc_Subdiv2D_rotateEdge_10", "Java_org_opencv_imgproc_Imgproc_getFontScaleFromHeight_10", "_ZN2cv3hal6mul16uEPKtjS2_jPtjiiPv", "_ZN2cv3absERKNS_3MatE", "_ZN2cv9FormatterD2Ev", "_ZN2cv5flann17KMeansIndexParamsC1EiiN7cvflann20flann_centers_init_tEf", "_ZN2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_11", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_11", "_ZN2cv5BRISK6createEiif", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_12", "_ZN2cv3ocl6KernelC2ERKS1_", "_ZNK2cv7MatExpr3mulERKS0_d", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_7ProgramE", "cvGetImage", "_ZN2cv3ogl6Buffer11unmapDeviceEv", "_ZN2cv23getPerspectiveTransformEPKNS_6Point_IfEES3_", "_ZN2cv12VideoCapture7releaseEv", "_ZN2cv4MSER6createEiiiddiddi", "_ZNK2cv4cuda10DeviceInfo17concurrentKernelsEv", "Java_org_opencv_video_SparseOpticalFlow_delete", "_ZN2cv17getOptimalDFTSizeEi", "_ZN2cv5utils2fs8FileLockC2EPKc", "Java_org_opencv_imgproc_Imgproc_ellipse_13", "Java_org_opencv_features2d_MSER_getDelta_10", "_ZN2cv4cuda6GpuMatC1ENS_5Size_IiEEiPvj", "_ZN3tbb8internal26GetBoolEnvironmentVariableEPKc", "Java_org_opencv_imgproc_Imgproc_HoughLines_11", "_ZN2cv3Mat4onesEiii", "_ZNK2cv3ocl12PlatformInfo9getDeviceERNS0_6DeviceEi", "Java_org_opencv_imgproc_Imgproc_remap_10", "_ZN2cv3hal6mul32fEPKfjS2_jPfjiiPv", "_ZN2cv3hal5add8uEPKhjS2_jPhjiiPv", "_ZNK2cv4cuda10DeviceInfo11pciDomainIDEv", "_ZN2cv13detailEnhanceERKNS_11_InputArrayERKNS_12_OutputArrayEff", "Java_org_opencv_ml_ANN_1MLP_getBackpropWeightScale_10", "cvPolarToCart", "Java_org_opencv_calib3d_StereoSGBM_delete", "_ZN2cv4cuda11TargetArchs6hasBinEii", "_ZN2cv3ocl7Image2DC1ERKNS_4UMatEbb", "_ZN2cv5instr8NodeDataC1EPKcS3_iPvbNS0_4TYPEENS0_4IMPLE", "Java_org_opencv_features2d_BOWTrainer_descriptorsCount_10", "Java_org_opencv_objdetect_CascadeClassifier_convert_10", "Java_org_opencv_calib3d_Calib3d_solvePnP_10", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEd", "_ZNK2cv5flann11IndexParams6getIntERKNS_6StringEi", "_ZN10__cxxabiv123__fundamental_type_infoD1Ev", "__gnu_thumb1_case_uhi", "_ZN2cv6theRNGEv", "_ZN2cv8fillPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEiiNS_6Point_IiEE", "_ZN2cv3hal7merge8uEPPKhPhii", "_ZN10__cxxabiv116__enum_type_infoD1Ev", "_ZNK2cv4cuda10DeviceInfo27maxThreadsPerMultiProcessorEv", "__extendsfdf2", "_ZN2cv4cuda9getDeviceEv", "_ZN2cv4UMatC2ERKS0_PKNS_5RangeE", "_ZN3tbb8internal5arena22orphan_offloaded_tasksERNS0_17generic_schedulerE", "_ZN2cv9RodriguesERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayERNS_4cuda6StreamENS1_6TargetEb", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_10", "Java_org_opencv_photo_TonemapReinhard_setColorAdaptation_10", "_ZN2cv3hal5div8uEPKhjS2_jPhjiiPv", "_ZTv0_n20_NK2cv9Feature2D5writeERNS_11FileStorageE", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiifii", "_ZNK2cv13HOGDescriptor4saveERKNS_6StringES3_", "Java_org_opencv_core_TickMeter_getTimeSec_10", "_ZNK2cv10softdoublegeERKS0_", "_ZN2cv11getTextSizeERKNS_6StringEidiPi", "cvCalcOpticalFlowFarneback", "cvInitFont", "Java_org_opencv_features2d_FastFeatureDetector_getThreshold_10", "_ZN2cv3ocl6DeviceC1ERKS1_", "_ZN2cv3hal6exp32fEPKfPfi", "_ZN2cv3dnn19experimental_dnn_v416shrinkCaffeModelERKNS_6StringES4_RKSt6vectorIS2_SaIS2_EE", "_ZN2cv3dnn19experimental_dnn_v418DeconvolutionLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_photo_Photo_edgePreservingFilter_10", "Java_org_opencv_core_TickMeter_start_10", "_ZN2cv3LUTERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv18minEnclosingCircleERKNS_11_InputArrayERNS_6Point_IfEERf", "Java_org_opencv_video_DualTVL1OpticalFlow_setEpsilon_10", "_ZN10__cxxabiv117__class_type_infoD0Ev", "_ZNK2cv8Subdiv2D11getEdgeListERSt6vectorINS_3VecIfLi4EEESaIS3_EE", "_ZN2cv2ml21NormalBayesClassifier6createEv", "Java_org_opencv_video_SparseOpticalFlow_calc_11", "_ZN2cv3ocl23checkOptimalVectorWidthEPKiRKNS_11_InputArrayES5_S5_S5_S5_S5_S5_S5_S5_NS0_17OclVectorStrategyE", "_ZN2cv3dnn19experimental_dnn_v48ELULayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_StereoSGBM_getUniquenessRatio_10", "_ZN2cv5utils7logging11getLogLevelEv", "Java_org_opencv_photo_TonemapMantiuk_getScale_10", "cvCanny", "_ZN2cv21DetectionBasedTrackerD0Ev", "_ZN3tbb18task_group_contextD1Ev", "_ZN2cv3dnn19experimental_dnn_v45Layer13unsetAttachedEv", "Java_org_opencv_core_Mat_n_1step1__J", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMinus_10", "Java_org_opencv_calib3d_Calib3d_composeRT_10", "cvSaveMemStoragePos", "cvCopyHist", "_ZN2cv3dnn19experimental_dnn_v410ScaleLayer6createERKNS1_11LayerParamsE", "_ZN3tbb8internal17generic_scheduler26cleanup_local_context_listEv", "Java_org_opencv_video_DualTVL1OpticalFlow_setTheta_10", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_11", "Java_org_opencv_features2d_GFTTDetector_getQualityLevel_10", "Java_org_opencv_features2d_ORB_getPatchSize_10", "Java_org_opencv_ml_TrainData_getTrainSampleWeights_10", "_ZN2cv17CommandLineParser4Impl12apply_paramsERKNS_6StringES4_", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPS1_i", "cvPolyLine", "_ZN2cv16AVIReadContainer10printErrorERNS_9RiffChunkEj", "_ZN2cv16findCirclesGrid2ERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEENS_28CirclesGridFinderParameters2E", "_ZN3tbb8internal5arenaC2ERNS0_6marketEjj", "_Unwind_GetDataRelBase", "_ZN2cv3hal8recip16sEPKsjS2_jPsjiiPv", "_ZN2cv3ocl5TimerD1Ev", "Java_org_opencv_ml_TrainData_getNVars_10", "_ZN2cv7compareERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "_ZNK2cv5MatOp4diagERKNS_7MatExprEiRS1_", "_ZN3tbb8internal28affinity_partitioner_base_v36resizeEj", "Java_org_opencv_core_Core_subtract_13", "Java_org_opencv_dnn_DictValue_DictValue_10", "Java_org_opencv_video_DualTVL1OpticalFlow_getUseInitialFlow_10", "Java_org_opencv_dnn_Dnn_NMSBoxes_11", "_ZNK2cv16MatConstIterator3posEPi", "_ZNK2cv4UMat11checkVectorEiib", "_ZN2cv17setWindowPropertyERKNS_6StringEid", "_ZN2cv8internal15IntrinsicParamsC2ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidd", "_ZN2cv21decomposeEssentialMatERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_", "_ZN2cv3ogl6BufferC1Eiiijb", "_ZN2cv2ml7ANN_MLP18setAnnealEnergyRNGERKNS_3RNGE", "_ZN2cv3hal4sqrtEPKdPdi", "cvSub", "_ZN2cv5flann17LinearIndexParamsC2Ev", "_ZNK2cv18SimpleBlobDetector14getDefaultNameEv", "_ZN3tbb8internal13observer_list6removeEPNS0_14observer_proxyE", "_ZN2cv17AVIWriteContainer13startWriteAVIEi", "Java_org_opencv_dnn_Net_getLayerId_10", "cvEndWriteStruct", "_ZN2cv3ipp19getIppErrorLocationEv", "_ZN2cv3ocl6Kernel3setEiRKNS_4UMatE", "_ZN2cv4swapERNS_4UMatES1_", "cvPtr2D", "Java_org_opencv_imgcodecs_Imgcodecs_imdecode_10", "Java_org_opencv_calib3d_Calib3d_matMulDeriv_10", "Java_org_opencv_imgproc_Imgproc_getRotationMatrix2D_10", "Java_org_opencv_ml_EM_setTermCriteria_10", "cvStereoRectifyUncalibrated", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_10", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_9SparseMatERKNS_12_OutputArrayEPPKfdb", "Java_org_opencv_ml_RTrees_load_10", "Java_org_opencv_ml_SVM_getClassWeights_10", "_ZNK2cv12_OutputArray5setToERKNS_11_InputArrayES3_", "_ZN2cv9softfloatC1Ei", "_ZN2cv8CholeskyEPfjiS0_ji", "cvMakeSeqHeaderForArray", "_ZN2cv11matchShapesERKNS_11_InputArrayES2_id", "_ZN2cv2ml9StatModel5trainERKNS_3PtrINS0_9TrainDataEEEi", "Java_org_opencv_core_Algorithm_delete", "Java_org_opencv_features2d_DescriptorMatcher_clear_10", "_ZnwjRKSt9nothrow_t", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowThreshold_10", "_ZN2cv4UMatD2Ev", "Java_org_opencv_imgproc_CLAHE_apply_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1signedGradient_10", "Java_org_opencv_imgproc_Imgproc_blur_12", "Java_org_opencv_imgproc_Imgproc_approxPolyDP_10", "_ZN2cv5utils7logging11setLogLevelENS1_8LogLevelE", "_ZNK2cv4cuda10DeviceInfo14totalGlobalMemEv", "cvSetSeqBlockSize", "cvWarpAffine", "_ZN3tbb8internal17is_malloc_used_v3Ev", "Java_org_opencv_features2d_DescriptorExtractor_create_10", "_ZN2cv3hal5DCT2D6createEiiii", "Java_org_opencv_photo_TonemapReinhard_delete", "cvWriteFileNode", "Java_org_opencv_photo_MergeMertens_setContrastWeight_10", "Java_org_opencv_imgproc_Imgproc_cornerSubPix_10", "Java_org_opencv_dnn_Layer_set_1blobs_10", "_ZN2cv5flann17LinearIndexParamsC1Ev", "_ZN2cv12approxPolyDPERKNS_11_InputArrayERKNS_12_OutputArrayEdb", "_ZN2cv16pointPolygonTestERKNS_11_InputArrayENS_6Point_IfEEb", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_11", "Java_org_opencv_imgproc_Subdiv2D_findNearest_10", "Java_org_opencv_imgproc_Imgproc_Sobel_11", "_ZN2cv3hal8filter2DEiiiPhjS1_jiiiiiiS1_jiiiidib", "cvRectangle", "_ZN2cv3dnn19experimental_dnn_v43Net14getLayerInputsENS1_9DictValueE", "_ZNK2cv17CommandLineParser9getByNameERKNS_6StringEbiPv", "_ZN3tbb8internal17generic_scheduler31get_task_and_activate_task_poolEjji", "_ZN2cv3minERKNS_3MatEd", "_ZNK2cv17CommandLineParser4Impl18split_range_stringERKNS_6StringEcc", "_ZN2cv17CascadeClassifier13getOldCascadeEv", "Java_org_opencv_calib3d_StereoSGBM_setP2_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setDist2Threshold_10", "Java_org_opencv_imgproc_Imgproc_createCLAHE_10", "Java_org_opencv_ml_ANN_1MLP_delete", "Java_org_opencv_core_Core_subtract_12", "_ZN2cv13fitEllipseAMSERKNS_11_InputArrayE", "_ZNK2cv12_OutputArray9fixedSizeEv", "cvSetRealND", "_ZN2cvplERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv3dnn19experimental_dnn_v418ChannelsPReLULayer6createERKNS1_11LayerParamsE", "_ZN2cv8Subdiv2D10deleteEdgeEi", "_ZN2cv15bilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiddi", "_ZN2cv3ogl22convertFromGLTexture2DERKNS0_9Texture2DERKNS_12_OutputArrayE", "_ZNK2cv4cuda10DeviceInfo12maxSurface2DEv", "WebPCleanupTransparentArea", "_ZNK2cv3dnn19experimental_dnn_v43Net8getFLOPSERKSt6vectorIS3_IiSaIiEESaIS5_EE", "Java_org_opencv_video_BackgroundSubtractorKNN_getDist2Threshold_10", "_ZN2cv21DetectionBasedTracker13resetTrackingEv", "__gnu_h2f_internal", "_ZN2cv3EMDERKNS_11_InputArrayES2_iS2_PfRKNS_12_OutputArrayE", "_ZN2cv11bitwise_andERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "Java_org_opencv_photo_Photo_createCalibrateDebevec_11", "cvStartFindContours", "Java_org_opencv_photo_Photo_textureFlattening_11", "Java_org_opencv_core_Mat_n_1dims", "Java_org_opencv_core_Core_randu_10", "_ZN2cv4UMat3eyeEiii", "_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj", "_ZN2cv5utils30getConfigurationParameterSizeTEPKcj", "_ZN3tbb8internal17generic_scheduler13create_masterEPNS0_5arenaE", "_ZNK2cv3Mat3invEi", "Java_org_opencv_core_Core_sumElems_10", "_ZN2cv3LDA7projectERKNS_11_InputArrayE", "Java_org_opencv_photo_MergeExposures_delete", "Java_org_opencv_dnn_Net_getMemoryConsumption_11", "cvErode", "cvCreateHist", "WebPEncodeBGRA", "_ZNK2cv4cuda10DeviceInfo16canMapHostMemoryEv", "_ZN3tbb8internal3rml14private_serverD2Ev", "_ZN2cvmlERKNS_7MatExprES2_", "Java_org_opencv_photo_AlignMTB_process_11", "__popcountsi2", "cvReleaseHaarClassifierCascade", "_ZN2cv2ml3SVM6createEv", "_ZNK2cv5MatOp6invertERKNS_7MatExprEiRS1_", "WebPInitDecoderConfigInternal", "Java_org_opencv_objdetect_CascadeClassifier_getOriginalWindowSize_10", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_7Affine3IdEES3_S3_dS6_", "Java_org_opencv_imgproc_Subdiv2D_getVoronoiFacetList_10", "_ZN3tbb8internal8governor17acquire_resourcesEv", "_ZN2cv3hal14addWeighted16sEPKsjS2_jPsjiiPv", "_ZN2cv5flann5IndexD2Ev", "_ZN2cv14createLMSolverERKNS_3PtrINS_8LMSolver8CallbackEEEi", "_ZNK2cv11FileStorage9getFormatEv", "cvSetZero", "_ZNK2cv11_InputArray4stepEi", "_ZNK2cv5flann11IndexParams9getDoubleERKNS_6StringEd", "_ZNK2cv3dnn19experimental_dnn_v45Layer15getMemoryShapesERKSt6vectorIS3_IiSaIiEESaIS5_EEiRS7_SA_", "_ZN2cv3dnn19experimental_dnn_v43Net7forwardERSt6vectorIS3_INS_3MatESaIS4_EESaIS6_EERKS3_INS_6StringESaISA_EE", "_ZN2cv11VideoWriterC2Ev", "Java_org_opencv_imgproc_Subdiv2D_delete", "_ZN2cv3hal8gemm64fcEPKdjS2_jdS2_jdPdjiiii", "_ZN2cv5instr8NodeDataC2EPKcS3_iPvbNS0_4TYPEENS0_4IMPLE", "_ZN3tbb18task_group_context22cancel_group_executionEv", "_ZN2cv16FileNodeIteratorC1ERKS0_", "Java_org_opencv_core_Mat_nGetS", "__gnu_Unwind_Save_VFP", "Java_org_opencv_calib3d_StereoBM_setROI1_10", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_12", "Java_org_opencv_video_Video_createOptFlow_1DualTVL1_10", "cvRandArr", "_ZNK2cv12MatAllocator23getBufferPoolControllerEPKc", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IiSaIiEERS4_IdSaIdEEdiiNS_5Size_IiEESH_b", "_ZN2cv3ocl5Timer5startEv", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EES2_S8_RKS3_INS_6DMatchESaIS9_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESK_RKS3_IcSaIcEEi", "Java_org_opencv_core_Core_insertChannel_10", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_10", "Java_org_opencv_videoio_VideoCapture_VideoCapture_10", "_ZN2cvmlERKNS_7MatExprERKNS_3MatE", "_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE", "_ZN2cv14PCABackProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZNK2cv3ocl6Device16image2DMaxHeightEv", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorISt4pairINS_5Rect_IiEEiESaIS5_EE", "_ZN2cv5utils5trace7details6RegionC1ERKNS3_21LocationStaticStorageE", "_ZNK2cv3ocl7Program9getPrefixEv", "_ZN3tbb10interface58internal9task_base7destroyERNS_4taskE", "Java_org_opencv_features2d_FastFeatureDetector_getDefaultName_10", "_ZN2cvneERKNS_3MatEd", "_ZNSt9exceptionD1Ev", "Java_org_opencv_dnn_Net_getPerfProfile_10", "Java_org_opencv_ml_SVMSGD_setOptimalParameters_11", "Java_org_opencv_imgproc_Imgproc_drawContours_12", "Java_org_opencv_ml_DTrees_delete", "Java_org_opencv_ml_SVMSGD_getMarginType_10", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_11", "cvThreshHist", "__subsf3", "_ZN2cv3dnn19experimental_dnn_v48AbsLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowValue_10", "_ZN2cv3hal15cvtGraytoBGR5x5EPKhjPhjiii", "_ZN2cv16TLSDataContainerC1Ev", "___Unwind_Resume", "_ZN2cv17CommandLineParserC2EiPKPKcRKNS_6StringE", "_ZN2cv8Subdiv2D12clearVoronoiEv", "Java_org_opencv_ml_DTrees_getPriors_10", "_ZNK2cv5MatOp9transposeERKNS_7MatExprERS1_", "_ZN2cv4cuda10BufferPoolC1ERNS0_6StreamE", "_ZNK2cv11_InputArray5depthEi", "_ZN2cv2LUEPfjiS0_ji", "_ZN3tbb8internal9schedulerD0Ev", "Java_org_opencv_core_Core_split_10", "_ZN2cv5randuERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "_ZN10__cxxabiv119__foreign_exceptionD2Ev", "__divdi3", "cvInitSparseMatIterator", "Java_org_opencv_ml_TrainData_getNormCatResponses_10", "Java_org_opencv_calib3d_StereoMatcher_setNumDisparities_10", "_ZN2cv9softfloatC2Ej", "_ZN2cv12GFTTDetector6createEiddiibd", "Java_org_opencv_calib3d_Calib3d_sampsonDistance_10", "_ZN2cv3hal7gemm64fEPKdjS2_jdS2_jdPdjiiii", "Java_org_opencv_imgproc_Imgproc_createHanningWindow_10", "cvSeqPush", "_ZN2cv3hal14warpPerspectveEiPKhjiiPhjiiPKdiiS5_", "_ZN2cv3ocl12PlatformInfoC2EPv", "_ZN2cv3dnn19experimental_dnn_v411ConcatLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Core_invert_11", "Java_org_opencv_calib3d_StereoBM_getPreFilterType_10", "Java_org_opencv_features2d_FeatureDetector_detect_12", "_ZN2cv3hal6div32fEPKfjS2_jPfjiiPv", "_ZN2cv5utils5trace7details6Region4ImplC1ERNS2_23TraceManagerThreadLocalEPS3_RS3_RKNS3_21LocationStaticStorageEx", "_ZNK2cv9Algorithm4saveERKNS_6StringE", "Java_org_opencv_photo_MergeMertens_getExposureWeight_10", "_ZN2cv9composeRTERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_S5_S5_S5_", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_14", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_3MatE", "_ZN2cv3hal8CholeskyEPdjiS1_ji", "_ZNKSt9bad_alloc4whatEv", "_ZN2cv3hal6SVD64fEPdjS1_S1_jS1_jiii", "cvGetOptimalNewCameraMatrix", "_ZN2cv5utils2fs8FileLock11lock_sharedEv", "_Unwind_GetCFA", "Java_org_opencv_imgproc_Imgproc_warpAffine_10", "Java_org_opencv_dnn_Net_getFLOPS_11", "_ZN2cv3RNG8gaussianEd", "Java_org_opencv_features2d_DescriptorMatcher_create_10", "cvPreCornerDetect", "cvSetCaptureProperty", "Java_org_opencv_core_Mat_n_1assignTo__JJI", "_ZN3tbb8internal6market13adjust_demandERNS0_5arenaEi", "Java_org_opencv_ml_RTrees_load_11", "_ZN2cv24calcOpticalFlowFarnebackERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEdiiiidi", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMin_10", "Java_org_opencv_photo_TonemapDrago_delete", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_delete", "Java_org_opencv_calib3d_StereoBM_getSmallerBlockSize_10", "_Z7cvTruncRKN2cv10softdoubleE", "_ZN2cvdvERKNS_3MatES2_", "WebPPictureFree", "_ZNK2cv12_OutputArray6assignERKSt6vectorINS_4UMatESaIS2_EE", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_13", "_ZN2cv3ocl8Platform10getDefaultEv", "Java_org_opencv_imgproc_Imgproc_pyrDown_12", "_ZNK2cv9softfloatneERKS0_", "_ZN2cv3MatC2EiPKiiPvPKj", "_ZN2cv16UMatDataAutoLockC2EPNS_8UMatDataES2_", "_ZN2cv8internal15IntrinsicParamsC1ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "_ZN2cv6fontQtERKNS_6StringEiNS_7Scalar_IdEEiii", "Java_org_opencv_ml_RTrees_getVotes_10", "_ZN2cv5mergeERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv5utils5trace7details6Region17LocationExtraDataC1ERKNS3_21LocationStaticStorageE", "_ZNK2cv10softdoubleeqERKS0_", "_ZNK2cv9BFMatcher5cloneEb", "_ZNK2cv3ocl6Device3ptrEv", "_ZN3tbb18task_group_context16copy_fp_settingsERKS0_", "Java_org_opencv_ml_EM_delete", "Java_org_opencv_objdetect_Objdetect_groupRectangles_11", "Java_org_opencv_videoio_VideoCapture_open_12", "_ZN2cv22SparseMatConstIteratorC1EPKNS_9SparseMatE", "cvResetImageROI", "cvGetTrackbarPos", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_ii", "_ZNK2cv10softdoubleleERKS0_", "_ZN2cv16UMatDataAutoLockC1EPNS_8UMatDataES2_", "Java_org_opencv_video_KalmanFilter_set_1processNoiseCov_10", "cvAbsDiffS", "Java_org_opencv_ml_EM_setCovarianceMatrixType_10", "Java_org_opencv_calib3d_Calib3d_recoverPose_13", "_ZN2cv13HOGDescriptor24getDaimlerPeopleDetectorEv", "_ZN2cv6reduceERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv3dnn19experimental_dnn_v43Net14addLayerToPrevERKNS_6StringES5_RNS1_11LayerParamsE", "Java_org_opencv_photo_AlignMTB_setCut_10", "Java_org_opencv_photo_TonemapReinhard_getLightAdaptation_10", "_ZN3tbb17assertion_failureEPKciS1_S1_", "cvCheckChessboard", "_ZN2cv3ocl5QueueC1ERKNS0_7ContextERKNS0_6DeviceE", "_ZN2cv6repeatERKNS_3MatEii", "cvFitLine", "_ZN2cv3dnn19experimental_dnn_v412SigmoidLayer6createERKNS1_11LayerParamsE", "_ZN2cv6mulAddERKNS_9softfloatES2_S2_", "_ZN2cv32fastNlMeansDenoisingColoredMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiffii", "_ZN2cv12VideoCapture4grabEv", "_ZN2cv27computeRecallPrecisionCurveERKSt6vectorIS0_INS_6DMatchESaIS1_EESaIS3_EERKS0_IS0_IhSaIhEESaIS9_EERS0_INS_6Point_IfEESaISF_EE", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2Ev", "_ZNK2cv3Mat9convertToERKNS_12_OutputArrayEidd", "_ZN2cv4cuda19printCudaDeviceInfoEi", "_ZN2cv4cuda27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffiiRNS0_6StreamE", "_ZN2cv4cuda5EventC2ENS1_11CreateFlagsE", "cvAddText", "_ZN2cv4cuda20unregisterPageLockedERNS_3MatE", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_10", "Java_org_opencv_video_FarnebackOpticalFlow_delete", "Java_org_opencv_photo_TonemapDrago_getBias_10", "Java_org_opencv_calib3d_Calib3d_getValidDisparityROI_10", "_ZN2cv12VideoCaptureC1Ei", "cvSetMouseCallback", "Java_org_opencv_features2d_Feature2D_detect_12", "_ZN2cv3hal10normL2Sqr_EPKfS2_i", "cvOr", "cvGetSeqElem", "_ZN2cv3hal8gemm32fcEPKfjS2_jfS2_jfPfjiiii", "_ZN2cv8CamShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "cvKalmanCorrect", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionEiRKSt6vectorIiSaIiEERjS8_", "_ZN2cv17DescriptorMatcher20DescriptorCollection3setERKSt6vectorINS_3MatESaIS3_EE", "_ZN3tbb8internal6market21update_arena_priorityERNS0_5arenaEi", "Java_org_opencv_imgproc_Imgproc_adaptiveThreshold_10", "_ZN2cv3ocl9KernelArgC2EiPNS_4UMatEiiPKvj", "_ZN2cvmlERKNS_3MatERKNS_7MatExprE", "_ZN2cv11RNG_MT19937cvdEv", "Java_org_opencv_core_Core_addWeighted_10", "Java_org_opencv_core_Core_checkRange_11", "_ZN2cv4cuda6GpuMat7releaseEv", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_11", "_ZN2cv17DescriptorMatcher4readERKNS_8FileNodeE", "_ZN2cv3ocl5TimerC1ERKNS0_5QueueE", "cvDisplayStatusBar", "Java_org_opencv_photo_AlignMTB_process_10", "_ZN2cv6circleERKNS_17_InputOutputArrayENS_6Point_IiEEiRKNS_7Scalar_IdEEiii", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_11", "cvSetAdd", "_ZN2cv11namedWindowERKNS_6StringEi", "_ZN2cvcoERKNS_3MatE", "cvCreateVideoWriter", "Java_org_opencv_imgproc_Imgproc_arcLength_10", "Java_org_opencv_core_Mat_n_1Mat__JIIII", "cvEllipse", "_ZN3tbb8internal17generic_scheduler12reload_tasksERPNS_4taskERPS3_ii", "cvCheckTermCriteria", "_ZN2cv6kmeansERKNS_11_InputArrayEiRKNS_17_InputOutputArrayENS_12TermCriteriaEiiRKNS_12_OutputArrayE", "cvLine", "_ZNK2cv4cuda10DeviceInfo16asyncEngineCountEv", "_ZN2cv11compareHistERKNS_9SparseMatES2_i", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_11", "_ZN2cv3hal11fastAtan64fEPKdS2_Pdib", "Java_org_opencv_dnn_Net_forward_11", "_ZN2cv11RNG_MT19937cvfEv", "Java_org_opencv_ml_KNearest_getIsClassifier_10", "_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv", "cvStartWriteSeq", "Java_org_opencv_core_Core_cubeRoot_10", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_11", "_ZN2cv15isContourConvexERKNS_11_InputArrayE", "_ZN2cv3LDAC1ERKNS_11_InputArrayES3_i", "_ZN2cv11VideoWriterC2ERKNS_6StringEiidNS_5Size_IiEEb", "Java_org_opencv_calib3d_StereoBM_setUniquenessRatio_10", "_ZN3tbb8internal17generic_scheduler11local_spawnEPNS_4taskERS3_", "_ZNK2cv13HOGDescriptor6detectERKNS_3MatERSt6vectorINS_6Point_IiEESaIS6_EERS4_IdSaIdEEdNS_5Size_IiEESE_RKS8_", "Java_org_opencv_core_Core_max_11", "_ZN2cv3ocl8internal26isPerformanceCheckBypassedEv", "cvCalcArrBackProjectPatch", "_ZN2cv3LDA4loadERKNS_6StringE", "_ZN2cv16ParallelLoopBodyD2Ev", "_ZN2cv3dnn19experimental_dnn_v413readTorchBlobERKNS_6StringEb", "Java_org_opencv_calib3d_StereoSGBM_setP1_10", "_ZN2cv8va_intel3ocl23initializeContextFromVAEPvb", "_ZN3tbb8internal15runtime_warningEPKcz", "_ZNK2cv11_InputArray7getUMatEi", "Java_org_opencv_core_Mat_n_1step1__JI", "_ZN2cv3ocl32buildOptionsAddMatrixDescriptionERNS_6StringERKS1_RKNS_11_InputArrayE", "_ZN2cv3ocl5QueueC2Ev", "Java_org_opencv_imgproc_Imgproc_integral_10", "_ZN2cv7fisheye15stereoCalibrateERKNS_11_InputArrayES3_S3_RKNS_17_InputOutputArrayES6_S6_S6_NS_5Size_IiEERKNS_12_OutputArrayESB_iNS_12TermCriteriaE", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockSize_10", "_ZN2cv3ipp14getIppFeaturesEv", "__gnu_h2f_alternative", "Java_org_opencv_ml_TrainData_getLayout_10", "Java_org_opencv_imgproc_LineSegmentDetector_detect_11", "_ZN2cv9LaplacianERKNS_11_InputArrayERKNS_12_OutputArrayEiiddi", "_ZN2cv5phaseERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "cvReleaseHist", "cvGraphVtxDegree", "Java_org_opencv_ml_SVM_getUncompressedSupportVectors_10", "_ZN2cv8Subdiv2D11deletePointEi", "_ZN2cv2ml7ANN_MLP21setAnnealCoolingRatioEd", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_7MatExprE", "_ZNK2cv3ocl6Device16maxReadImageArgsEv", "_ZN2cv12VideoCaptureC2Ei", "_ZN3tbb8internal8governor19init_scheduler_weakEv", "WebPGetEncoderVersion", "Java_org_opencv_ml_TrainData_getTestSamples_10", "_ZN2cv3ocl13ProgramSourceC1EPKc", "_ZN2cv11VideoWriterC1ERKNS_6StringEiidNS_5Size_IiEEb", "Java_org_opencv_ml_RTrees_getActiveVarCount_10", "Java_org_opencv_photo_CalibrateRobertson_getThreshold_10", "_ZNK2cv10softdoubleneERKS0_", "cvStartNextStream", "cvNextNArraySlice", "_ZN2cv3hal3logEPKdPdi", "_ZNK2cv3dnn19experimental_dnn_v43Net13getLayerNamesEv", "_ZN2cv10softdoubleC1Ex", "Java_org_opencv_imgproc_Imgproc_ellipse2Poly_10", "_ZNK2cv12_OutputArray14createSameSizeERKNS_11_InputArrayEi", "_ZN2cv5randnERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "_ZN2cv9solvePolyERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv3ocl9KernelArgC1Ev", "_ZN3tbb10interface78internal15task_arena_base19internal_initializeEv", "Java_org_opencv_features2d_Params_get_1maxConvexity_10", "_ZN2cv3hal6div16uEPKtjS2_jPtjiiPv", "Java_org_opencv_calib3d_Calib3d_findHomography_10", "_ZN2cv10HoughLinesERKNS_11_InputArrayERKNS_12_OutputArrayEddidddd", "_ZN2cv2ml9ParamGrid6createEddd", "_ZN2cv8internal15IntrinsicParamsC2Ev", "Java_org_opencv_features2d_Params_get_1minCircularity_10", "_ZN2cv3dnn19experimental_dnn_v45LayerD2Ev", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_10", "_ZNK2cv20AgastFeatureDetector14getDefaultNameEv", "_ZN2cv15calibrateCameraERKNS_11_InputArrayES2_NS_5Size_IiEERKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_SA_SA_SA_iNS_12TermCriteriaE", "_ZN2cv2ml7ANN_MLP6createEv", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_10", "_ZN3tbb18captured_exception5clearEv", "Java_org_opencv_ml_Boost_create_10", "_ZN2cv4readERKNS_8FileNodeERff", "Java_org_opencv_imgproc_Imgproc_isContourConvex_10", "_ZNK2cv3PCA7projectERKNS_11_InputArrayE", "_ZN2cv12KalmanFilter4initEiiii", "_ZTv0_n24_N2cv9Feature2D4readERKNS_8FileNodeE", "Java_org_opencv_photo_MergeMertens_getContrastWeight_10", "_Z7cvRoundRKN2cv9softfloatE", "_ZN2cv4idctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv21intersectConvexConvexERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "_ZN2cv5instr10resetTraceEv", "cvRedirectError", "_ZNK2cv13HOGDescriptor19detectMultiScaleROIERKNS_3MatERSt6vectorINS_5Rect_IiEESaIS6_EERS4_INS_12DetectionROIESaISA_EEdi", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_setAnnealInitialT_10", "_ZN2cv3MatC2ERKSt6vectorIiSaIiEEiPvPKj", "_ZNK2cv3ocl6Device16maxParameterSizeEv", "cvWrite", "cvSetND", "_ZN2cv21createTonemapReinhardEffff", "cvCreateChildMemStorage", "Java_org_opencv_ml_SVMSGD_create_10", "Java_org_opencv_calib3d_StereoBM_setPreFilterType_10", "Java_org_opencv_video_DualTVL1OpticalFlow_setOuterIterations_10", "Java_org_opencv_video_DualTVL1OpticalFlow_delete", "Java_org_opencv_core_Core_batchDistance_11", "_ZN2cv5utils2fs17getCacheDirectoryEPKcS3_", "__ltsf2", "Java_org_opencv_video_DualTVL1OpticalFlow_getTheta_10", "Java_org_opencv_video_KalmanFilter_get_1processNoiseCov_10", "cvCloneImage", "_ZN2cv3ogl9Texture2DC1ENS_5Size_IiEENS1_6FormatEjb", "Java_org_opencv_imgproc_Imgproc_Laplacian_12", "Java_org_opencv_core_Mat_n_1release", "_ZN2cv3hal6sub32sEPKijS2_jPijiiPv", "_ZN2cv16FileNodeIteratorC2ERKS0_", "Java_org_opencv_imgproc_Imgproc_n_1getTextSize", "cvAlloc", "_ZN2cv3hal8integralEiiiPKhjPhjS3_jS3_jiii", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayEb", "_ZNK3tbb10user_abort4whatEv", "cvMakeHistHeaderForArray", "Java_org_opencv_calib3d_StereoMatcher_getDisp12MaxDiff_10", "_ZN2cv8UMatData4lockEv", "_ZN2cv17DescriptorMatcher15isPossibleMatchERKNS_11_InputArrayEii", "_ZN3tbb8internal3rml11tbb_factory4openEv", "_ZNK2cv3ogl9Texture2D6copyToERKNS_12_OutputArrayEib", "_ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "_ZN2cv17AVIWriteContainer10writeIndexEiNS_10StreamTypeE", "_ZN2cv2ml9TrainData11loadFromCSVERKNS_6StringEiiiS4_cc", "Java_org_opencv_ml_TrainData_create_11", "_ZN2cv3Mat4diagERKS0_", "Java_org_opencv_features2d_AgastFeatureDetector_getNonmaxSuppression_10", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_10", "Java_org_opencv_features2d_KAZE_delete", "_ZN2cv11FileStorageC1ERKNS_6StringEiS3_", "_ZN3tbb10interface78internal15task_arena_base18internal_terminateEv", "cvMatchTemplate", "_ZNK2cv5MatOp17augAssignSubtractERKNS_7MatExprERNS_3MatE", "_ZN2cv3ocl10haveOpenCLEv", "Java_org_opencv_imgproc_Imgproc_fitLine_10", "_ZNK2cv3dnn19experimental_dnn_v43Net14getLayersCountERKNS_6StringE", "Java_org_opencv_ml_DTrees_getCVFolds_10", "Java_org_opencv_video_KalmanFilter_get_1errorCovPre_10", "_ZN2cv4UMatC2ERKS0_RKNS_5Rect_IiEE", "_ZN2cv15getNearestPointERKSt6vectorINS_6Point_IfEESaIS2_EEf", "Java_org_opencv_imgproc_Imgproc_undistortPointsIter_10", "_ZN2cv15NAryMatIteratorC1Ev", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_10", "Java_org_opencv_videoio_VideoCapture_open_11", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_10", "_ZN2cv4readERKNS_8FileNodeERNS_6StringERKS3_", "_Z9cvRound64RKN2cv10softdoubleE", "Java_org_opencv_imgproc_Imgproc_Canny_12", "_ZNK2cv5MatOp4sizeERKNS_7MatExprE", "_ZN2cv3hal21cvtBGRtoThreePlaneYUVEPKhjPhjiiibi", "Java_org_opencv_objdetect_HOGDescriptor_get_1histogramNormType_10", "Java_org_opencv_videoio_VideoWriter_open_10", "_ZN2cv8Subdiv2D6insertENS_6Point_IfEE", "Java_org_opencv_imgproc_Imgproc_resize_10", "_ZN2cv4UMatC1ERKS0_RKNS_5Rect_IiEE", "_ZN2cv19createTonemapDurandEfffff", "_ZN2cv3dnn19experimental_dnn_v45Layer14supportBackendEi", "_ZN2cv3ogl6Arrays18resetTexCoordArrayEv", "_ZN2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "_ZN2cv8imencodeERKNS_6StringERKNS_11_InputArrayERSt6vectorIhSaIhEERKS6_IiSaIiEE", "_ZN2cv9SparseMat5eraseEiiPj", "Java_org_opencv_video_FarnebackOpticalFlow_getFlags_10", "_ZN2cv3hal8split32sEPKiPPiii", "Java_org_opencv_core_Mat_n_1copyTo__JJ", "Java_org_opencv_core_Mat_n_1reshape__JI", "_ZN2cv4UMat5zerosENS_5Size_IiEEi", "WebPConfigLosslessPreset", "_ZN2cv17cornerMinEigenValERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv20calcOpticalFlowPyrLKERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayERKNS_12_OutputArrayES8_NS_5Size_IiEEiNS_12TermCriteriaEid", "_ZN2cv3Mat4onesENS_5Size_IiEEi", "_ZN2cv7directx3ocl36initializeContextFromDirect3DDevice9EP16IDirect3DDevice9", "Java_org_opencv_imgcodecs_Imgcodecs_imread_10", "_ZN2cv4cuda5Event6recordERNS0_6StreamE", "Java_org_opencv_ml_DTrees_setUseSurrogates_10", "cvPutText", "Java_org_opencv_video_BackgroundSubtractorMOG2_setComplexityReductionThreshold_10", "_ZN2cv11FileStorageC2EP13CvFileStorageb", "cvCreateMat", "_ZN2cv22SparsePyrLKOpticalFlow6createENS_5Size_IiEEiNS_12TermCriteriaEid", "_ZTv0_n28_NK2cv9Feature2D5emptyEv", "_ZN2cv3ocl11kernelToStrERKNS_11_InputArrayEiPKc", "_ZN2cv4UMatC1ERKS0_RKNS_5RangeES5_", "_ZN2cv3hal6min64fEPKdjS2_jPdjiiPv", "_ZN2cv5utils5trace7details15getTraceManagerEv", "cvGetSize", "cvCheckArr", "_ZN2cv9softfloatC1Ex", "_ZN2cv14insertImageCOIERKNS_11_InputArrayEPvi", "_ZN2cv7fitLineERKNS_11_InputArrayERKNS_12_OutputArrayEiddd", "_ZNK2cv11_InputArray4sizeEi", "_ZN2cv25createLineSegmentDetectorEiddddddi", "_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj", "_ZN2cv3Mat3eyeEiii", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_11", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_17DescriptorMatcherEEE", "_ZN2cv3hal14addWeighted64fEPKdjS2_jPdjiiPv", "Java_org_opencv_ml_SVM_setGamma_10", "Java_org_opencv_photo_CalibrateDebevec_delete", "_ZNK2cv3ocl6Device15image3DMaxWidthEv", "cvSampleLine", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_12", "_ZN2cv16BOWKMeansTrainerC2EiRKNS_12TermCriteriaEii", "_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE", "_ZN2cv8scaleAddERKNS_11_InputArrayEdS2_RKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_morphologyEx_11", "Java_org_opencv_features2d_GFTTDetector_create_12", "Java_org_opencv_video_FarnebackOpticalFlow_setNumIters_10", "Java_org_opencv_features2d_AKAZE_delete", "_Z7cvTruncRKN2cv9softfloatE", "_ZN2cv3ogl9Texture2DC1EiiNS1_6FormatEjb", "Java_org_opencv_photo_Photo_createTonemap_10", "Java_org_opencv_imgproc_Imgproc_polylines_11", "_ZN2cv11mixChannelsEPKNS_3MatEjPS0_jPKij", "_ZN2cv3ocl5QueueC1ERKS1_", "cvEigenVV", "_ZN2cv21DetectionBasedTracker7processERKNS_3MatE", "_ZN2cv3dnn19experimental_dnn_v45LayerC2Ev", "_ZN2cv17startWindowThreadEv", "_ZN3tbb8internal18throw_exception_v4ENS0_12exception_idE", "_ZN2cv10softdoubleC2Ej", "Java_org_opencv_core_Core_idct_10", "_ZN2cv12KalmanFilterC1Ev", "_ZNK2cv4cuda10DeviceInfo19multiProcessorCountEv", "_ZNK2cv25BOWImgDescriptorExtractor13getVocabularyEv", "_ZN2cv3MatC1ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_videoio_VideoCapture_retrieve_10", "_ZN2cv12LineIteratorC1ERKNS_3MatENS_6Point_IiEES5_ib", "_ZN2cv4UMat6createERKSt6vectorIiSaIiEEiNS_14UMatUsageFlagsE", "_ZN2cv10BriskLayerC1ERKNS_3MatEff", "Java_org_opencv_video_KalmanFilter_get_1measurementNoiseCov_10", "_ZN2cv15setBreakOnErrorEb", "_ZNK2cv3ocl6Device12imageSupportEv", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_11", "_ZN2cv11seqPopFrontEP5CvSeqPv", "_ZN2cveoERKNS_3MatES2_", "_ZN2cv3ogl6Buffer7mapHostENS1_6AccessE", "_ZN3tbb8internal8governor17create_rml_serverERNS0_3rml10tbb_clientE", "Java_org_opencv_ml_DTrees_getMinSampleCount_10", "Java_org_opencv_features2d_ORB_delete", "Java_org_opencv_core_Mat_n_1convertTo__JJI", "_ZNK2cv9softfloateqERKS0_", "_ZN2cv5flann5IndexC2ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZN2cv3hal19cvtBGRtoTwoPlaneYUVEPKhjPhS3_jiiibi", "_ZNK2cv8Subdiv2D7edgeDstEiPNS_6Point_IfEE", "_ZN3tbb8internal17generic_scheduler16winnow_task_poolEi", "_ZNSt13bad_exceptionD0Ev", "_ZNK2cv3ocl6Device25imageBaseAddressAlignmentEv", "Java_org_opencv_features2d_KAZE_getThreshold_10", "_ZN2cv11createCLAHEEdNS_5Size_IiEE", "_ZNK2cv4UMat6handleEi", "_ZTv0_n36_NK2cv3ORB14getDefaultNameEv", "Java_org_opencv_core_Mat_nPutF", "_ZNK2cv3ocl5Queue17getProfilingQueueEv", "_ZN3tbb8internal17generic_scheduler16get_mailbox_taskEi", "Java_org_opencv_ml_DTrees_setTruncatePrunedTree_10", "__fixsfdi", "Java_org_opencv_ml_ParamGrid_set_1logStep_10", "Java_org_opencv_core_Core_LUT_10", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_10", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_10", "cvReadRawDataSlice", "_ZN2cv3ogl6Arrays13setColorArrayERKNS_11_InputArrayE", "_ZN2cv2ml3SVM14getDefaultGridEi", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_11", "_ZN2cv17DescriptorMatcher5trainEv", "Java_org_opencv_features2d_DescriptorMatcher_empty_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setNSamples_10", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayE", "Java_org_opencv_imgproc_Imgproc_boxPoints_10", "_ZN2cv3sinERKNS_10softdoubleE", "_ZN2cv8Subdiv2DC2ENS_5Rect_IiEE", "Java_org_opencv_features2d_DescriptorExtractor_compute_11", "Java_org_opencv_core_Core_kmeans_10", "Java_org_opencv_ml_RTrees_getTermCriteria_10", "Java_org_opencv_imgproc_Imgproc_line_11", "_ZN2cv2ml18LogisticRegression6createEv", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IiSaIiEEdiiNS_5Size_IiEESE_", "cvGetCentralMoment", "_ZN2cv3ogl6Buffer14setAutoReleaseEb", "_ZNK2cv11_InputArray4colsEi", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_12", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi", "Java_org_opencv_ml_EM_load_10", "_ZNK2cv11_InputArray4kindEv", "_ZN2cv7vconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_core_Core_PCACompute_12", "_ZN2cv9minMaxLocERKNS_9SparseMatEPdS3_PiS4_", "_ZN2cv12VideoCapturersERNS_4UMatE", "cvGetCaptureDomain", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_10", "Java_org_opencv_dnn_Layer_finalize_10", "_ZN2cv14setTrackbarPosERKNS_6StringES2_i", "Java_org_opencv_ml_LogisticRegression_create_10", "_ZN10__cxxabiv121__vmi_class_type_infoD2Ev", "_ZN2cv3hal6sub64fEPKdjS2_jPdjiiPv", "Java_org_opencv_core_Mat_n_1delete", "_ZN2cv3ocl9typeToStrEi", "cvSetNumThreads", "Java_org_opencv_calib3d_StereoBM_getTextureThreshold_10", "cvBoundingRect", "_ZN2cv11VideoWriter4openERKNS_6StringEidNS_5Size_IiEEb", "__unordsf2", "Java_org_opencv_core_Core_dct_11", "_ZN2cv21DetectionBasedTrackerD1Ev", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD1Ev", "_ZN3tbb18captured_exceptionD1Ev", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DMipmapEv", "_ZN2cv17CascadeClassifier7convertERKNS_6StringES3_", "_ZN2cv3hal12magnitude32fEPKfS2_Pfi", "_ZN2cv3dnn19experimental_dnn_v410ShiftLayer6createERKNS1_11LayerParamsE", "_ZNK2cv10softdoubledvERKS0_", "Java_org_opencv_ml_KNearest_delete", "_ZN2cv8KeyPoint7overlapERKS0_S2_", "cvRodrigues2", "_ZN2cv4UMat9adjustROIEiiii", "_ZN2cv12findContoursERKNS_17_InputOutputArrayERKNS_12_OutputArrayEiiNS_6Point_IiEE", "_ZN9__gnu_cxx27__verbose_terminate_handlerEv", "cvGetElemType", "Java_org_opencv_features2d_MSER_setDelta_10", "_ZNK2cv17CommandLineParser3hasERKNS_6StringE", "Java_org_opencv_video_KalmanFilter_get_1statePost_10", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayE", "Java_org_opencv_core_Core_polarToCart_11", "Java_org_opencv_dnn_DictValue_isString_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setkNNSamples_10", "_ZNK2cv3ocl6Device20nativeVectorWidthIntEv", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_video_BackgroundSubtractorKNN_getNSamples_10", "_ZN2cv21BaseCascadeClassifierD0Ev", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionEiRKSt6vectorIS3_IiSaIiEESaIS5_EERjSA_", "_ZN2cv9BFMatcher15radiusMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "WebPPictureImportRGB", "_ZN2cv3ocl7ProgramC2ERKNS0_13ProgramSourceERKNS_6StringERS5_", "__gtsf2", "_ZN2cv3ORB6createEifiiiiiii", "Java_org_opencv_video_BackgroundSubtractorMOG2_setDetectShadows_10", "cvLoad", "_ZN2cv15preCornerDetectERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv12drawContoursERKNS_17_InputOutputArrayERKNS_11_InputArrayEiRKNS_7Scalar_IdEEiiS5_iNS_6Point_IiEE", "Java_org_opencv_ml_ANN_1MLP_getRpropDW0_10", "Java_org_opencv_video_KalmanFilter_get_1statePre_10", "_ZN2cv8internal18WriteStructContextC2ERNS_11FileStorageERKNS_6StringEiS6_", "_ZN2cv9SparseMat3ptrEiibPj", "Java_org_opencv_features2d_GFTTDetector_getMinDistance_10", "cvInitUndistortMap", "_ZNK2cv22SimpleBlobDetectorImpl9findBlobsERKNS_11_InputArrayES3_RSt6vectorINS0_6CenterESaIS5_EE", "_ZN3tbb8internal5arena24restore_priority_if_needEv", "Java_org_opencv_ml_SVM_load_10", "_ZN2cv12cornerSubPixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEES7_NS_12TermCriteriaE", "Java_org_opencv_imgproc_Imgproc_grabCut_10", "Java_org_opencv_features2d_AKAZE_setDescriptorChannels_10", "Java_org_opencv_core_Core_trace_10", "cvSetTrackbarPos", "_ZNK2cv17DescriptorMatcher5writeERNS_11FileStorageE", "Java_org_opencv_features2d_BRISK_create_11", "_ZN2cv9boxPointsENS_11RotatedRectERKNS_12_OutputArrayE", "_ZNK2cv3ORB14getDefaultNameEv", "_ZNK2cv3ocl12PlatformInfo4nameEv", "_ZN2cv3MatC1ERKS0_RKSt6vectorINS_5RangeESaIS4_EE", "WebPGetWorkerInterface", "Java_org_opencv_photo_AlignExposures_process_10", "_ZNK2cv2ml9TrainData14getTestSamplesEv", "__subdf3", "_ZN2cv3dnn19experimental_dnn_v45Layer16inputNameToIndexENS_6StringE", "Java_org_opencv_calib3d_Calib3d_Rodrigues_11", "__fixunsdfdi", "_ZN2cv9Formatter3getEi", "_ZN2cv3dnn19experimental_dnn_v45Layer3runERKSt6vectorINS_3MatESaIS4_EERS6_S9_", "WebPEncodeLosslessBGR", "cvCalcEMD2", "_ZN2cv3Mat3eyeENS_5Size_IiEEi", "_ZN2cv17AVIWriteContainer14putStreamBytesEPKhi", "Java_org_opencv_imgproc_Imgproc_undistortPoints_10", "Java_org_opencv_ml_LogisticRegression_setLearningRate_10", "_ZNK2cv18SimpleBlobDetector6Params5writeERNS_11FileStorageE", "_ZNK2cv8Subdiv2D7symEdgeEi", "Java_org_opencv_features2d_FastFeatureDetector_create_11", "_ZNK2cv8FileNode4typeEv", "_ZN2cv3hal6max16sEPKsjS2_jPsjiiPv", "_ZN2cvltEdRKNS_3MatE", "__cmpdf2", "Java_org_opencv_imgproc_Imgproc_warpPerspective_12", "_ZN2cv4cuda6StreamC1ERKNS_3PtrINS0_6GpuMat9AllocatorEEE", "_ZN3tbb8internal6market14create_one_jobEv", "Java_org_opencv_core_Core_idct_11", "_ZN2cv5utils2fs11isDirectoryERKNS_6StringE", "_ZN2cv3Mat13reserveBufferEj", "_ZNK2cv3ogl9Texture2D5texIdEv", "Java_org_opencv_imgproc_Subdiv2D_symEdge_10", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterPtxEii", "Java_org_opencv_video_FarnebackOpticalFlow_setPolySigma_10", "Java_org_opencv_features2d_Feature2D_detect_10", "cvRelease", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EEid", "_ZN2cv4UMatC1ERKS0_PKNS_5RangeE", "_ZN2cv3dnn19experimental_dnn_v49LSTMLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_13", "Java_org_opencv_features2d_Params_set_1maxArea_10", "Java_org_opencv_video_FarnebackOpticalFlow_create_11", "Java_org_opencv_features2d_BFMatcher_delete", "_ZN3tbb8internal8governor22initialize_rml_factoryEv", "_ZNK2cv16BOWKMeansTrainer7clusterEv", "__clzdi2", "Java_org_opencv_imgproc_Imgproc_contourArea_10", "_ZN2cv5AKAZE6createEiiifiii", "cvSetIPLAllocators", "Java_org_opencv_features2d_Params_get_1filterByColor_10", "_ZN2cv5flann5IndexC1Ev", "_ZN2cv24createCalibrateRobertsonEif", "Java_org_opencv_features2d_BFMatcher_BFMatcher_11", "_ZNK2cv14DefaultDeleterI7CvMatNDEclEPS1_", "_ZN2cv3hal9absdiff8uEPKhjS2_jPhjiiPv", "cvInitMatNDHeader", "_ZN3tbb8internal3rml14private_worker14thread_routineEPv", "Java_org_opencv_imgproc_Imgproc_rectangle_11", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayES5_iii", "_ZN2cv3dnn19experimental_dnn_v43Net8getLayerENS1_9DictValueE", "cvCreateStereoBMState", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiRNS0_6StreamE", "_ZN2cv17AVIWriteContainer13endWriteChunkEv", "Java_org_opencv_ml_KNearest_getDefaultK_10", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_10", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_11", "_ZN2cv16MinProblemSolver8Function11getGradientEPKdPd", "_ZN2cv3ocl7Image2DaSERKS1_", "Java_org_opencv_features2d_FastFeatureDetector_setType_10", "cvPointPolygonTest", "Java_org_opencv_core_Core_dft_11", "_ZN2cv3hal7sqrt64fEPKdPdi", "cvCreateImageHeader", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_10", "cvGetWindowImageRect", "_ZN2cv11writeScalarERNS_11FileStorageERKNS_6StringE", "_ZN3tbb8internal17generic_scheduler13create_workerERNS0_6marketEj", "cvCreateMatNDHeader", "_ZN3tbb8internal5arena10free_arenaEv", "_ZNKSt13bad_exception4whatEv", "WebPDecodeBGR", "Java_org_opencv_features2d_AgastFeatureDetector_setThreshold_10", "_ZN2cv9softfloatC2Ey", "_ZN2cv17AVIWriteContainer15jputStreamShortEi", "Java_org_opencv_photo_Photo_createTonemapMantiuk_11", "Java_org_opencv_imgproc_Imgproc_erode_11", "cvRead", "_ZN2cv15getDerivKernelsERKNS_12_OutputArrayES2_iiibi", "_ZN2cv12VideoCaptureD0Ev", "cvGraphAddEdgeByPtr", "_ZN2cv3hal14addWeighted32fEPKfjS2_jPfjiiPv", "_ZN2cv3hal11normHammingEPKhS2_i", "_ZNK2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayES3_RSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "_ZN2cv3hal6cmp32fEPKfjS2_jPhjiiPv", "_ZN3tbb8internal6market25update_arena_top_priorityERNS0_5arenaEi", "Java_org_opencv_core_Core_meanStdDev_10", "Java_org_opencv_core_Core_mixChannels_10", "Java_org_opencv_features2d_GFTTDetector_getDefaultName_10", "Java_org_opencv_ml_TrainData_getTestResponses_10", "_ZNK2cv4cuda10DeviceInfo12regsPerBlockEv", "_ZN2cv11randShuffleERKNS_17_InputOutputArrayEdPNS_3RNGE", "_ZNSt9exceptionD2Ev", "cvMax", "_ZNK2cv3ocl6Device24preferredVectorWidthLongEv", "_ZN2cv28CirclesGridFinderParameters2C1Ev", "Java_org_opencv_photo_Photo_createMergeRobertson_10", "Java_org_opencv_video_Video_meanShift_10", "cvGetOptimalDFTSize", "_ZN2cv11FileStorage5writeERKNS_6StringEd", "_ZN2cv3dnn19experimental_dnn_v43NetC1Ev", "cvMaxS", "_ZN3tbb8internal8governor24does_client_join_workersERKNS0_3rml10tbb_clientE", "_ZN2cv25getOptimalNewCameraMatrixERKNS_11_InputArrayES2_NS_5Size_IiEEdS4_PNS_5Rect_IiEEb", "Java_org_opencv_imgproc_Imgproc_HuMoments_10", "Java_org_opencv_core_Mat_n_1submat_1rr", "Java_org_opencv_video_KalmanFilter_set_1transitionMatrix_10", "_ZN2cv17AVIWriteContainerC1Ev", "Java_org_opencv_dnn_Net_delete", "Java_org_opencv_ml_TrainData_getSubVector_10", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_11", "_ZN2cv17CommandLineParserC1EiPKPKcRKNS_6StringE", "_ZN2cv9minMaxIdxERKNS_11_InputArrayEPdS3_PiS4_S2_", "_ZN3tbb8internal5arena14is_out_of_workEv", "Java_org_opencv_objdetect_HOGDescriptor_get_1cellSize_10", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_getBackgroundRatio_10", "Java_org_opencv_imgproc_Subdiv2D_getEdgeList_10", "_ZN2cv3ipp12setIppStatusEiPKcS2_i", "_ZN2cv9BFMatcherC1Eib", "Java_org_opencv_core_Mat_n_1isSubmatrix", "_ZNK3tbb18task_group_context8priorityEv", "cvCreatePOSITObject", "Java_org_opencv_calib3d_StereoSGBM_create_10", "_ZNK2cv3ocl6Device22nativeVectorWidthFloatEv", "Java_org_opencv_core_Core_sort_10", "Java_org_opencv_ml_ParamGrid_delete", "__lesf2", "Java_org_opencv_core_Core_norm_11", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_10", "_ZN2cv9AlgorithmC1Ev", "_ZN2cv11FileStorage19releaseAndGetStringEv", "Java_org_opencv_core_Core_findNonZero_10", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiRKSt6vectorIfSaIfEEiii", "_ZN2cv3dnn19experimental_dnn_v411RegionLayer6createERKNS1_11LayerParamsE", "_ZNSt9bad_allocD2Ev", "_ZN2cvgtERKNS_3MatES2_", "_ZN2cv9normalizeERKNS_9SparseMatERS0_di", "__mulsf3", "_ZNK2cv4cuda10DeviceInfo19maxTexture2DLayeredEv", "_ZN3tbb4task22internal_set_ref_countEi", "_ZN10__cxxabiv115__forced_unwindD2Ev", "_ZN2cv5flann11IndexParamsC1Ev", "_ZN2cvmiERKNS_3MatERKNS_7MatExprE", "_ZN2cv3dnn19experimental_dnn_v45LayerC1ERKNS1_11LayerParamsE", "_ZN2cv17CommandLineParser4Impl11sort_paramsEv", "Java_org_opencv_features2d_Feature2D_compute_11", "Java_org_opencv_imgproc_Imgproc_compareHist_10", "Java_org_opencv_imgproc_Imgproc_integral3_10", "Java_org_opencv_ml_SVM_setDegree_10", "_ZN2cv19getRotationMatrix2DENS_6Point_IfEEdd", "WebPEncodeLosslessRGBA", "_ZN2cv16FileNodeIteratorppEv", "_ZN2cv5AGASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEib", "_ZN2cv17AVIWriteContainer14finishWriteAVIEv", "Java_org_opencv_imgproc_Imgproc_applyColorMap_11", "_ZN2cv3hal4sqrtEPKfPfi", "_ZN2cv12VideoCaptureD1Ev", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_11", "Java_org_opencv_imgproc_LineSegmentDetector_detect_10", "cvRegisterType", "_ZN2cv26convertPointsToHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_ml_ANN_1MLP_setAnnealItePerStep_10", "cvNormalize", "_ZN2cv15NAryMatIterator4initEPPKNS_3MatEPS1_PPhi", "_ZN2cv4UMatC2ERKS0_RKSt6vectorINS_5RangeESaIS4_EE", "_ZN2cv8stopLoopEv", "_ZN2cv3ocl7Context9setUseSVMEb", "cvInitLineIterator", "_ZNK2cv17DescriptorMatcher20DescriptorCollection4sizeEv", "_ZNK2cv9Algorithm11writeFormatERNS_11FileStorageE", "__gcclibcxx_demangle_callback", "_ZN2cv3hal8recip16uEPKtjS2_jPtjiiPv", "cvUpdateWindow", "_ZN3tbb8internal26task_scheduler_observer_v37observeEb", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayE", "_ZN10__cxxabiv119__foreign_exceptionD0Ev", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_10", "_ZN2cv3ocl7Image2DD2Ev", "Java_org_opencv_core_Core_setIdentity_10", "Java_org_opencv_ml_LogisticRegression_getTermCriteria_10", "Java_org_opencv_video_KalmanFilter_set_1statePre_10", "_ZN2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "Java_org_opencv_core_Mat_nGetF", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowValue_10", "_ZN2cv3ocl13ProgramSourceD1Ev", "Java_org_opencv_dnn_Net_forward_13", "Java_org_opencv_features2d_Features2d_drawKeypoints_11", "Java_org_opencv_calib3d_StereoBM_create_10", "cvReleaseData", "Java_org_opencv_core_Mat_locateROI_10", "_ZN2cv12LineIteratorC2ERKNS_3MatENS_6Point_IiEES5_ib", "Java_org_opencv_features2d_ORB_setPatchSize_10", "_ZN2cv21BaseCascadeClassifierD2Ev", "WebPDecodeARGBInto", "JNI_OnUnload", "_ZN2cvdvERKNS_3MatEd", "_ZNK2cv5MatOp3addERKNS_7MatExprES3_RS1_", "Java_org_opencv_core_Mat_n_1rows", "_ZN2cv8Subdiv2D8QuadEdgeC1Ei", "_ZN2cv28connectedComponentsWithStatsERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_iii", "_ZN2cv16AVIReadContainer5closeEv", "cvProjectPoints2", "_ZN2cv3ocl7Image2DC2Ev", "Java_org_opencv_core_Core_extractChannel_10", "_ZNK2cv3dnn19experimental_dnn_v43Net15getLayersShapesERKSt6vectorIS3_IiSaIiEESaIS5_EERS5_RS3_IS7_SaIS7_EESD_", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_11", "Java_org_opencv_core_Core_eigen_11", "Java_org_opencv_core_Core_getTickCount_10", "cvFree_", "_ZNK2cv3Mat1tEv", "Java_org_opencv_calib3d_StereoMatcher_compute_10", "_ZN2cv3ocl8PlatformC1Ev", "_ZN2cv3ogl6Buffer6createEiiiNS1_6TargetEb", "Java_org_opencv_calib3d_StereoSGBM_getP1_10", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_11", "_ZN2cv8Subdiv2D12initDelaunayENS_5Rect_IiEE", "Java_org_opencv_dnn_Dnn_blobFromImage_11", "Java_org_opencv_calib3d_Calib3d_Rodrigues_10", "_ZNK2cv3ocl6Device18globalMemCacheTypeEv", "_ZN2cv10BOWTrainerD0Ev", "_ZN2cv3hal9absdiff8sEPKajS2_jPajiiPv", "Java_org_opencv_imgproc_Imgproc_ellipse_14", "Java_org_opencv_core_Core_reduce_11", "_ZN2cv3ocl14memopTypeToStrEi", "_ZN2cv3dnn19experimental_dnn_v45Layer8finalizeERKSt6vectorIPNS_3MatESaIS5_EERS3_IS4_SaIS4_EE", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_10", "_ZN2cv3hal11fastAtan32fEPKfS2_Pfib", "Java_org_opencv_ml_TrainData_getSample_10", "Java_org_opencv_imgproc_Imgproc_HoughLinesPointSet_10", "Java_org_opencv_dnn_Dnn_readTorchBlob_11", "cvGetReal3D", "Java_org_opencv_core_Core_getCPUTickCount_10", "Java_org_opencv_ml_StatModel_isClassifier_10", "_ZN2cv11FileStorage4openERKNS_6StringEiS3_", "_ZN2cv3ocl7Image2DC2ERKNS_4UMatEbb", "cvCreateMatND", "_ZN2cv7fisheye14undistortImageERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_RKNS_5Size_IiEE", "Java_org_opencv_imgproc_Imgproc_cvtColor_10", "Java_org_opencv_videoio_VideoCapture_VideoCapture_11", "_ZNK2cv3ocl6Device20isExtensionSupportedERKNS_6StringE", "cvSetRemove", "cvReleaseStereoBMState", "Java_org_opencv_photo_Photo_createMergeDebevec_10", "_ZN2cv15convertScaleAbsERKNS_11_InputArrayERKNS_12_OutputArrayEdd", "Java_org_opencv_core_Core_cartToPolar_10", "Java_org_opencv_core_Core_normalize_10", "Java_org_opencv_photo_Photo_denoise_1TVL1_11", "cvSetReal3D", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKSt6vectorINS_8KeyPointESaIS6_EE", "Java_org_opencv_photo_CalibrateRobertson_setMaxIter_10", "_ZN2cv6rotateERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv8Subdiv2D8QuadEdgeC2Ev", "Java_org_opencv_imgproc_Imgproc_minEnclosingTriangle_10", "_ZN2cv3Mat10push_back_EPKv", "Java_org_opencv_core_Core_divide_15", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "_ZN2cv3dnn19experimental_dnn_v43Net8setInputERKNS_11_InputArrayERKNS_6StringE", "_ZNK2cv12VideoCapture8isOpenedEv", "_ZN2cv11FileStorageC1Ev", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleWindowSize_10", "_ZN2cv3hal6cmp16sEPKsjS2_jPhjiiPv", "_ZNK2cv8KeyPoint4hashEv", "Java_org_opencv_core_Core_add_10", "cvGetHashedKey", "cvSeqPopFront", "Java_org_opencv_features2d_Feature2D_delete", "__muldi3", "_ZNK2cv8Subdiv2D9getVertexEiPi", "_ZN2cv3hal14addWeighted32sEPKijS2_jPijiiPv", "Java_org_opencv_core_Core_min_10", "Java_org_opencv_core_Mat_n_1isContinuous", "_ZN2cv3ocl7ProgramaSERKS1_", "_ZN2cv12HoughCirclesERKNS_11_InputArrayERKNS_12_OutputArrayEiddddii", "_ZNK3tbb10interface78internal15task_arena_base16internal_executeERNS1_13delegate_baseE", "Java_org_opencv_objdetect_HOGDescriptor_save_10", "_ZN2cv19DualTVL1OpticalFlow6createEdddiidiiddib", "cvMul", "_ZN3tbb8internal6market28acknowledge_close_connectionEv", "_ZN2cv11FileStorage8writeObjERKNS_6StringEPKv", "_ZN2cv3ogl6Buffer9mapDeviceEv", "_ZNK2cv16BOWKMeansTrainer7clusterERKNS_3MatE", "_ZN2cv10drawMarkerERNS_3MatENS_6Point_IiEERKNS_7Scalar_IdEEiiii", "Java_org_opencv_calib3d_StereoMatcher_setMinDisparity_10", "_ZN2cv9BFMatcher6createEib", "_ZN2cv8Subdiv2DC1ENS_5Rect_IiEE", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_10", "_ZN2cv11VideoWriter7releaseEv", "Java_org_opencv_photo_MergeDebevec_delete", "_ZNK2cv7HammingclEPKhS2_i", "_ZN2cv12VideoCapture3setEid", "_ZN2cveqERKNS_3MatES2_", "_ZNK2cv4cuda10DeviceInfo16surfaceAlignmentEv", "Java_org_opencv_features2d_Params_get_1filterByInertia_10", "Java_org_opencv_core_Core_batchDistance_12", "Java_org_opencv_ml_RTrees_setCalculateVarImportance_10", "Java_org_opencv_photo_Photo_createCalibrateRobertson_11", "_ZN2cv3minERKNS_3MatES2_", "_ZN2cveqERKNS_3MatEd", "cvCopyMakeBorder", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD0Ev", "_ZN2cv3ocl13ProgramSourceC1ERKNS_6StringE", "_ZN9CvLevMarq5clearEv", "_ZN2cv13stereoRectifyERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEES2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_idS4_PNS_5Rect_IiEESA_", "_ZN3tbb8internal18concurrent_monitor12prepare_waitERNS1_14thread_contextEj", "_ZN2cvmlEdRKNS_7MatExprE", "_ZN2cv3ocl13ProgramSourceC2EPKc", "_ZN2cv10BOWTrainer5clearEv", "cvSetReal2D", "_ZN2cv3ocl6Kernel7runTaskEbRKNS0_5QueueE", "Java_org_opencv_ml_LogisticRegression_getTrainMethod_10", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_getAnnealItePerStep_10", "Java_org_opencv_photo_AlignMTB_computeBitmaps_10", "_ZN2cvorERKNS_7Scalar_IdEERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_minAreaRect_10", "Java_org_opencv_features2d_KAZE_getExtended_10", "cvFindGraphEdge", "WebPSafeMalloc", "_ZNK2cv17FlannBasedMatcher5writeERNS_11FileStorageE", "_ZN2cv7directx22getTypeFromDXGI_FORMATEi", "cvAdaptiveThreshold", "cv2DRotationMatrix", "Java_org_opencv_ml_LogisticRegression_predict_11", "_ZNK2cv11FileStorageixERKNS_6StringE", "_ZNK2cv3ocl6Device16maxWorkGroupSizeEv", "Java_org_opencv_ml_ANN_1MLP_create_10", "Java_org_opencv_features2d_FastFeatureDetector_create_10", "cvConvertScale", "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi", "Java_org_opencv_photo_Photo_colorChange_11", "cvReduce", "Java_org_opencv_core_Core_idft_10", "_ZNK2cv8FileNode4sizeEv", "_ZN3tbb10interface914global_control15internal_createEv", "WebPEncode", "_ZN2cv16FileNodeIteratormIEi", "Java_org_opencv_ml_ParamGrid_get_1maxVal_10", "cvSeqPushFront", "_ZN2cv3hal7recip8sEPKajS2_jPajiiPv", "Java_org_opencv_imgproc_Imgproc_clipLine_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_13", "_ZN2cv4cuda19setBufferPoolConfigEiji", "Java_org_opencv_ml_ParamGrid_create_10", "_ZN2cv12mulSpectrumsERKNS_11_InputArrayES2_RKNS_12_OutputArrayEib", "_ZNK2cv3Mat3mulERKNS_11_InputArrayEd", "_ZNK2cv8FileNodeixEPKc", "_ZN2cv11RNG_MT19937C2Ej", "_ZN2cv3hal21cvtThreePlaneYUVtoBGREPKhjPhjiiibi", "_ZN2cv5utils5trace7details6Region4Impl7releaseEv", "__gnu_Unwind_Restore_VFP_D", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithAlgorithm_10", "Java_org_opencv_core_Core_transform_10", "Java_org_opencv_ml_KNearest_setDefaultK_10", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_11", "cvPtr3D", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_10", "_ZNK2cv8Subdiv2D15getTriangleListERSt6vectorINS_3VecIfLi6EEESaIS3_EE", "Java_org_opencv_ml_TrainData_getMissing_10", "_ZN2cv6repeatERKNS_11_InputArrayEiiRKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_12", "_ZN2cv4swapERNS_3MatES1_", "cvXor", "cvCloneMat", "_ZN2cv20getValidDisparityROIENS_5Rect_IiEES1_iii", "Java_org_opencv_dnn_Layer_get_1preferableTarget_10", "_ZNK2cv12_OutputArray7releaseEv", "Java_org_opencv_features2d_DescriptorExtractor_descriptorSize_10", "Java_org_opencv_photo_MergeDebevec_process_10", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_10", "_ZNK2cv3ocl7Context6useSVMEv", "cvSquareAcc", "_ZNK2cv13HOGDescriptor7computeERKNS_11_InputArrayERSt6vectorIfSaIfEENS_5Size_IiEES9_RKS4_INS_6Point_IiEESaISB_EE", "Java_org_opencv_dnn_Net_setInput_10", "_ZN2cv3PCA4readERKNS_8FileNodeE", "_ZN2cv9fastAtan2Eff", "_ZN3tbb8internal20itt_set_sync_name_v3EPvPKc", "_ZN2cv15KeyPointsFilter22removeDuplicatedSortedERSt6vectorINS_8KeyPointESaIS2_EE", "_ZN3tbb8internal18concurrent_monitor18notify_one_relaxedEv", "_ZN2cv8internal15IntrinsicParamsC1Ev", "_ZN3tbb8internal3rml14private_worker14start_shutdownEv", "_ZN2cv3ogl20convertToGLTexture2DERKNS_11_InputArrayERNS0_9Texture2DE", "_ZN2cvmlEdRKNS_3MatE", "_ZN2cv4UMataSERKNS_7Scalar_IdEE", "_ZN2cv3ocl6DeviceD2Ev", "cvCalcMatMulDeriv", "cvGetFileNodeName", "_ZN2cv3ogl9Texture2DC1Ev", "_ZNK2cv4UMat6getMatEi", "_ZN2cv4sqrtERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_ml_DTrees_load_11", "cvMaxRect", "_ZN2cv22SimpleBlobDetectorImpl6detectERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EES3_", "Java_org_opencv_features2d_ORB_getScoreType_10", "cvSetHistBinRanges", "cvSeqRemoveSlice", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_11", "_ZN3tbb8internal6market7destroyEv", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMax_10", "_ZNK2cv9SparseMat6copyToERS0_", "Java_org_opencv_photo_TonemapReinhard_getIntensity_10", "Java_org_opencv_ml_SVMSGD_getMarginRegularization_10", "_ZNK2cv17CommandLineParser10getByIndexEibiPv", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_11", "_ZN2cvmlERKNS_3MatEd", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_iddRKNS_12_OutputArrayE", "_ZN2cv3hal11normHammingEPKhii", "cvAvgSdv", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMin_10", "Java_org_opencv_dnn_Layer_run_10", "Java_org_opencv_core_Algorithm_clear_10", "Java_org_opencv_features2d_KAZE_create_10", "_ZN2cv3dftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_core_Core_useIPP_1NE_10", "_ZN2cv3ocl7Context10unloadProgERNS0_7ProgramE", "_ZN2cv9getRecallERKSt6vectorINS_6Point_IfEESaIS2_EEf", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_10", "Java_org_opencv_ml_DTrees_setUse1SERule_10", "_ZNK2cv8FileNode7readObjEv", "_ZN2cv3maxERKNS_3MatES2_RS0_", "_ZN2cv4cuda7HostMem6createEiii", "cvCreateSparseMat", "cvCreatePyramid", "Java_org_opencv_features2d_MSER_setMinArea_10", "_ZNK2cv5AKAZE14getDefaultNameEv", "Java_org_opencv_videoio_VideoWriter_VideoWriter_14", "Java_org_opencv_video_KalmanFilter_delete", "Java_org_opencv_core_Mat_n_1reshape__JII", "_ZNK2cv2ml9StatModel11getVarCountEv", "_ZN3tbb8internal9schedulerD1Ev", "_ZN3rml8internal14thread_monitor13detach_threadEl", "_ZN2cv4UMat8copySizeERKS0_", "Java_org_opencv_imgproc_CLAHE_getTilesGridSize_10", "cvScaleAdd", "_ZN2cv3hal6add32sEPKijS2_jPijiiPv", "_ZN2cv7momentsERKNS_11_InputArrayEb", "_ZN2cv3dnn19experimental_dnn_v414blobFromImagesERKNS_11_InputArrayERKNS_12_OutputArrayEdNS_5Size_IiEERKNS_7Scalar_IdEEbb", "cvContourArea", "Java_org_opencv_features2d_DescriptorMatcher_write_10", "Java_org_opencv_calib3d_StereoBM_getROI1_10", "Java_org_opencv_imgproc_Subdiv2D_insert_10", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayEb", "_ZN3tbb8internal6market12detach_arenaERNS0_5arenaE", "_ZN2cv3ocl13attachContextERKNS_6StringEPvS4_S4_", "Java_org_opencv_features2d_Feature2D_descriptorType_10", "Java_org_opencv_ml_TrainData_create_10", "cvCreateTrackbar2", "_ZNSt8bad_castD0Ev", "_ZNK2cv5MatOp4typeERKNS_7MatExprE", "_ZN2cv18getMouseWheelDeltaEi", "Java_org_opencv_video_KalmanFilter_set_1errorCovPost_10", "Java_org_opencv_imgproc_Imgproc_blur_10", "WebPGetInfo", "Java_org_opencv_ml_SVM_trainAuto_11", "cvSubRS", "_ZN2cv6seqPopEP5CvSeqPv", "_ZNK3tbb8internal34allocate_additional_child_of_proxy4freeERNS_4taskE", "cvWriteRawData", "cvSetIdentity", "_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE", "_ZN2cv15BriskScaleSpaceD2Ev", "_Unwind_VRS_Set", "Java_org_opencv_ml_EM_getMeans_10", "cvGetHuMoments", "_ZNK2cv5MatOp6divideERKNS_7MatExprES3_RS1_d", "_ZN2cv11FileStorage5writeERKNS_6StringES3_", "_ZN2cv3hal6min16sEPKsjS2_jPsjiiPv", "_ZN2cv4cuda11TargetArchs17hasEqualOrLessPtxEii", "cvReleaseStructuringElement", "_ZN2cv17borderInterpolateEiii", "Java_org_opencv_features2d_KAZE_setThreshold_10", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_11", "_ZN2cv9SparseMatC1ERKNS_3MatE", "_ZN3tbb8internal6market13arena_in_needEPNS0_5arenaE", "_ZN2cv13projectPointsERKNS_11_InputArrayES2_S2_S2_S2_RKNS_12_OutputArrayES5_d", "_ZNK2cv4cuda10DeviceInfo17maxTextureCubemapEv", "_ZNK2cv3ocl6Device10extensionsEv", "__gnu_Unwind_Resume", "_ZN2cv3dnn19experimental_dnn_v43Net7forwardERKNS_12_OutputArrayERKSt6vectorINS_6StringESaIS7_EE", "Java_org_opencv_video_DualTVL1OpticalFlow_setMedianFiltering_10", "_ZN2cv9undistortERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_", "Java_org_opencv_video_BackgroundSubtractor_delete", "Java_org_opencv_core_Mat_n_1Mat__DDIDDDD", "Java_org_opencv_dnn_Net_deleteLayer_10", "Java_org_opencv_calib3d_Calib3d_calibrationMatrixValues_10", "Java_org_opencv_photo_AlignExposures_delete", "cvGetTextSize", "_ZN2cv10softdoubleC2Ex", "cvGetPerspectiveTransform", "_ZN2cv3maxERKNS_3MatEd", "_ZN2cv3dnn19experimental_dnn_v43Net18setHalideSchedulerERKNS_6StringE", "_ZN2cv3ocl15getPlatfomsInfoERSt6vectorINS0_12PlatformInfoESaIS2_EE", "__cmpsf2", "cvSetReal1D", "Java_org_opencv_videoio_VideoCapture_open_10", "_ZNK2cv4cuda10DeviceInfo14memoryBusWidthEv", "cvDestroyWindow", "_ZNK2cv9Feature2D5emptyEv", "Java_org_opencv_imgproc_Imgproc_getAffineTransform_10", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_getAnnealFinalT_10", "_ZN2cv5utils2fs17createDirectoriesERKNS_6StringE", "_ZN2cv4cuda6Stream9waitEventERKNS0_5EventE", "_ZN2cv11bitwise_notERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "Java_org_opencv_calib3d_StereoSGBM_getPreFilterCap_10", "_ZNK2cv3ocl13ProgramSource6sourceEv", "cvGetThreadNum", "Java_org_opencv_imgproc_Imgproc_initWideAngleProjMap_10", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_10", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DLinearEv", "__gedf2", "Java_org_opencv_ml_SVM_delete", "cvSaveWindowParameters", "_ZN2cv17FlannBasedMatcher17convertToDMatchesERKNS_17DescriptorMatcher20DescriptorCollectionERKNS_3MatES7_RSt6vectorIS8_INS_6DMatchESaIS9_EESaISB_EE", "__gnu_Unwind_Restore_WMMXD", "Java_org_opencv_features2d_DescriptorMatcher_match_11", "cvNot", "cvMoments", "Java_org_opencv_ml_TrainData_getTrainResponses_10", "Java_org_opencv_dnn_DictValue_isInt_10", "_ZNK2cv11_InputArray9getGpuMatEv", "_ZN2cv4readERKNS_8FileNodeERNS_8KeyPointERKS3_", "_ZN2cv15calcCovarMatrixERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_17_InputOutputArrayEii", "_ZN2cv17agast_cornerScoreILi2EEEiPKhPKii", "Java_org_opencv_features2d_BFMatcher_create_10", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEid", "_ZTv0_n24_N2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayERKSt6vectorIiSaIiEE", "Java_org_opencv_ml_TrainData_getClassLabels_10", "cvGetRawData", "_ZN2cv3hal6SVD32fEPfjS1_S1_jS1_jiii", "WebPDecodeARGB", "_ZN2cv3ocl6Kernel4Impl3runEiPjS3_bPxRKNS0_5QueueE", "_ZN2cv20minEnclosingTriangleERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_videoio_VideoCapture_delete", "cvDotProduct", "_ZN2cv3ocl17convertFromBufferEPvjiiiRNS_4UMatE", "Java_org_opencv_features2d_BRISK_create_13", "_ZN2cv5flann16SavedIndexParamsC2ERKNS_6StringE", "_ZN3tbb19task_scheduler_init9terminateEv", "_ZNSt8bad_castD2Ev", "_ZN2cv4cuda7HostMem7releaseEv", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_idRKNS_12_OutputArrayEid", "__muldf3", "__gnu_Unwind_Restore_VFP", "Java_org_opencv_core_Core_divide_16", "Java_org_opencv_imgproc_Imgproc_distanceTransform_10", "Java_org_opencv_photo_TonemapReinhard_getColorAdaptation_10", "Java_org_opencv_calib3d_Calib3d_projectPoints_10", "_ZNK2cv17CommandLineParser5checkEv", "Java_org_opencv_imgproc_Imgproc_watershed_10", "Java_org_opencv_video_DualTVL1OpticalFlow_setInnerIterations_10", "_ZNK2cv4UMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cvleERKNS_3MatES2_", "_ZN2cv11cartToPolarERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "_ZN2cv7MatExprC1ERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_10", "Java_org_opencv_imgproc_Imgproc_HoughCircles_10", "Java_org_opencv_photo_TonemapDurand_getSaturation_10", "_ZNK2cv7MatExpr4diagEi", "_ZN2cv9Feature2D4readERKNS_8FileNodeE", "_ZNK2cv3Mat5crossERKNS_11_InputArrayE", "_ZN2cv5instr8NodeDataaSERKS1_", "_ZN2cv8Subdiv2DC1Ev", "__gnu_Unwind_Restore_WMMXC", "Java_org_opencv_ml_ANN_1MLP_setAnnealFinalT_10", "_ZN2cv14fillConvexPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEii", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEi", "cvSeqElemIdx", "_ZN2cv21findChessboardCornersERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEi", "Java_org_opencv_features2d_AgastFeatureDetector_setNonmaxSuppression_10", "Java_org_opencv_ml_NormalBayesClassifier_create_10", "_ZNK2cv12_OutputArray6createEiiiibi", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_10", "Java_org_opencv_features2d_AKAZE_getDescriptorType_10", "_ZN2cv2ml9ParamGridC2Ev", "_ZN2cv16fitEllipseDirectERKNS_11_InputArrayE", "__nedf2", "cvGetDimSize", "_ZN2cv3dnn19experimental_dnn_v49TanHLayer6createERKNS1_11LayerParamsE", "_ZN2cv3Mat5zerosEiii", "_ZNK2cv17AVIWriteContainer14isOpenedStreamEv", "Java_org_opencv_imgproc_Imgproc_Scharr_11", "Java_org_opencv_imgproc_Imgproc_matchTemplate_10", "_ZN2cv9SparseMat5eraseEPKiPj", "_ZN2cv23buildOpticalFlowPyramidERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEibiib", "_ZN2cv25BOWImgDescriptorExtractor13setVocabularyERKNS_3MatE", "Java_org_opencv_features2d_FeatureDetector_detect_10", "_ZN2cv3hal6div64fEPKdjS2_jPdjiiPv", "_ZN2cv4cuda6GpuMatC2ENS_5Size_IiEEiPvj", "_ZN2cv8Subdiv2D8newPointENS_6Point_IfEEbi", "WebPDecodeYUV", "Java_org_opencv_imgproc_Imgproc_moments_11", "cvAddS", "cvClearSeq", "_ZNK2cv12_OutputArray6createENS_5Size_IiEEiibi", "_ZN2cv4cuda10BufferPool9getBufferEiii", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEi", "_ZN2cv3dnn19experimental_dnn_v416readNetFromCaffeEPKcjS3_j", "Java_org_opencv_video_FarnebackOpticalFlow_getPolySigma_10", "_ZN2cv3expERKNS_10softdoubleE", "_ZN3tbb8internal19cpu_has_speculationEv", "Java_org_opencv_dnn_Dnn_blobFromImage_10", "Java_org_opencv_features2d_Features2d_drawMatches2_10", "_ZN2cv3addERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "Java_org_opencv_photo_MergeMertens_process_10", "_ZN2cv7imwriteERKNS_6StringERKNS_11_InputArrayERKSt6vectorIiSaIiEE", "_ZN2cvmlERKNS_7MatExprEd", "_ZN3tbb8internal27initialize_handler_pointersEv", "cvGet3D", "Java_org_opencv_core_Core_bitwise_1or_11", "Java_org_opencv_imgproc_Imgproc_fitEllipseAMS_10", "Java_org_opencv_photo_AlignMTB_getCut_10", "_ZN2cv3hal8merge32sEPPKiPiii", "cvGet1D", "Java_org_opencv_imgproc_CLAHE_setTilesGridSize_10", "Java_org_opencv_ml_ANN_1MLP_setBackpropWeightScale_10", "Java_org_opencv_features2d_AKAZE_setNOctaves_10", "_ZN2cv12updateWindowERKNS_6StringE", "Java_org_opencv_photo_TonemapDurand_setSaturation_10", "Java_org_opencv_core_Mat_n_1colRange", "_ZN2cv20createMergeRobertsonEv", "_ZN2cv17DescriptorMatcher3addERKNS_11_InputArrayE", "cvPOSIT", "_ZN2cv13HOGDescriptor4loadERKNS_6StringES3_", "_ZN9CvLevMarq9updateAltERPK5CvMatRPS0_S5_RPd", "_ZN2cv5MutexaSERKS0_", "_ZN3tbb8internal8NFS_FreeEPv", "Java_org_opencv_ml_SVM_getDecisionFunction_10", "_ZN2cv16FileNodeIteratorC2EPK13CvFileStoragePK10CvFileNodej", "cvCreateGraph", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowValue_10", "_ZNK2cv3ocl6Device22errorCorrectionSupportEv", "_ZN3tbb18task_group_context13register_withEPNS_8internal17generic_schedulerE", "_ZN2cv9ExceptionC1EiRKNS_6StringES3_S3_i", "Java_org_opencv_ml_ANN_1MLP_getLayerSizes_10", "Java_org_opencv_core_Core_SVBackSubst_10", "Java_org_opencv_imgproc_Imgproc_Canny_13", "_ZN3tbb8internal17generic_scheduler14cleanup_workerEPvb", "Java_org_opencv_features2d_AgastFeatureDetector_create_11", "Java_org_opencv_photo_TonemapReinhard_setIntensity_10", "_ZN2cv21DetectionBasedTracker14detectInRegionERKNS_3MatERKNS_5Rect_IiEERSt6vectorIS5_SaIS5_EE", "_ZNK2cv3ocl6Device19imagePitchAlignmentEv", "_ZNK2cv2ml6KDTree8getPointEiPi", "Java_org_opencv_ml_ANN_1MLP_getTrainMethod_10", "cvGetWindowProperty", "_ZNK2cv4UMat7reshapeEii", "_ZN2cv3dnn19experimental_dnn_v43Net8getParamENS1_9DictValueEi", "cvTreeToNodeSeq", "_ZNK2cv3Mat7reshapeEii", "_ZN2cv16FileNodeIteratormmEi", "_ZN2cv9FormatterD1Ev", "_ZN2cv13HOGDescriptor4readERNS_8FileNodeE", "_ZN2cv11VideoWriterD0Ev", "_ZN2cv8solvePnPERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bi", "Java_org_opencv_core_Core_borderInterpolate_10", "_ZN2cv3ocl6Kernel3setEiRKNS0_9KernelArgE", "_ZN2cv4idftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_photo_CalibrateDebevec_setLambda_10", "_ZN2cv4readERKNS_8FileNodeERNS_3MatERKS3_", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_10", "_ZN2cv4cuda11getInputMatERKNS_11_InputArrayERNS0_6StreamE", "_ZN2cv5flann17KMeansIndexParamsC2EiiN7cvflann20flann_centers_init_tEf", "cvEllipse2Poly", "_ZN2cv16setOpenGlContextERKNS_6StringE", "_ZTv0_n36_NK2cv4KAZE14getDefaultNameEv", "WebPMemoryWrite", "_ZN2cv11RNG_MT19937C2Ev", "_ZN2cv8Subdiv2D7newEdgeEv", "Java_org_opencv_core_Mat_n_1total", "VP8CheckSignature", "Java_org_opencv_ml_LogisticRegression_setIterations_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_11", "Java_org_opencv_objdetect_HOGDescriptor_get_1gammaCorrection_10", "_ZN2cv5instr8NodeDataC2ERS1_", "_ZN2cv11FileStorageD1Ev", "_ZN2cv28convertPointsFromHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN3tbb16spin_rw_mutex_v323internal_acquire_readerEv", "cvCloneMatND", "cvRemoveNodeFromTree", "_ZN2cv5MutexC2ERKS0_", "_ZN2cv3ogl6BufferC2Eiiijb", "_ZN2cv12resizeWindowERKNS_6StringEii", "_ZN2cv3ocl13ProgramSourceC2ERKNS_6StringE", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_10", "_ZN2cvdvERKNS_3MatERKNS_7MatExprE", "cvGetSpatialMoment", "cvGetValidDisparityROI", "_Z25cvHaarDetectObjectsForROCPKvP23CvHaarClassifierCascadeP12CvMemStorageRSt6vectorIiSaIiEERS5_IdSaIdEEdii6CvSizeSC_b", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_12", "Java_org_opencv_features2d_Params_set_1maxThreshold_10", "Java_org_opencv_features2d_FastFeatureDetector_setNonmaxSuppression_10", "_ZNK2cv3Mat7reshapeEiRKSt6vectorIiSaIiEE", "_ZN2cv3dnn19experimental_dnn_v414BatchNormLayer6createERKNS1_11LayerParamsE", "_ZN3tbb8internal8governor14init_schedulerEijb", "Java_org_opencv_core_Core_exp_10", "Java_org_opencv_dnn_Dnn_NMSBoxes_10", "cvGetRootFileNode", "_ZN2cvorERKNS_3MatES2_", "Java_org_opencv_video_KalmanFilter_get_1measurementMatrix_10", "Java_org_opencv_core_Core_addWeighted_11", "Java_org_opencv_objdetect_HOGDescriptor_getWinSigma_10", "_ZN2cv6String8allocateEj", "cvGetMinMaxHistValue", "Java_org_opencv_objdetect_HOGDescriptor_get_1nlevels_10", "Java_org_opencv_ml_Boost_setWeightTrimRate_10", "cvHaarDetectObjects", "cvCreateButton", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_11", "_ZN3tbb8internal21PrintExtraVersionInfoEPKcS2_z", "__ltdf2", "_ZNK2cv11RotatedRect12boundingRectEv", "_ZN2cvplERKNS_3MatERKNS_7MatExprE", "Java_org_opencv_ml_SVM_getNu_10", "Java_org_opencv_objdetect_HOGDescriptor_detect_10", "_ZN2cv3dnn19experimental_dnn_v45LayerC1Ev", "Java_org_opencv_video_BackgroundSubtractorKNN_getDetectShadows_10", "Java_org_opencv_imgproc_Imgproc_polylines_12", "cvInvert", "_ZN2cv17CommandLineParserC2ERKS0_", "Java_org_opencv_imgproc_Imgproc_cornerHarris_10", "Java_org_opencv_features2d_ORB_getFirstLevel_10", "_ZN2cv2ml6SVMSGD6createEv", "_ZN2cv16AVIReadContainer10parseIndexEjRSt5dequeISt4pairIyjESaIS3_EE", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD0Ev", "Java_org_opencv_ml_RTrees_getVarImportance_10", "_ZN3tbb8internal13observer_list25do_notify_entry_observersERPNS0_14observer_proxyEb", "WebPCopyPixels", "Java_org_opencv_photo_CalibrateDebevec_setRandom_10", "_ZNK2cv8Subdiv2D9isRightOfENS_6Point_IfEEi", "_ZN2cv17AVIWriteContainer10jputStreamEj", "Java_org_opencv_imgproc_Imgproc_filter2D_12", "_ZN2cv3ocl13ProgramSourceC2Ev", "Java_org_opencv_features2d_AgastFeatureDetector_setType_10", "_ZN3tbb19task_scheduler_init10initializeEij", "Java_org_opencv_video_KalmanFilter_set_1measurementMatrix_10", "_ZNK2cv10softdoubleltERKS0_", "WebPDecodeBGRA", "_ZN2cv3ocl6KernelC2EPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "cvDiv", "cvInitNArrayIterator", "_ZN2cv3hal10warpAffineEiPKhjiiPhjiiPKdiiS5_", "Java_org_opencv_video_DenseOpticalFlow_collectGarbage_10", "_ZTv0_n12_N2cv9Feature2DD1Ev", "Java_org_opencv_features2d_Features2d_drawMatches2_11", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_10", "Java_org_opencv_calib3d_Calib3d_projectPoints_12", "cvFindGraphEdgeByPtr", "Java_org_opencv_core_Core_dft_10", "_ZN3tbb8internal24DoOneTimeInitializationsEv", "_ZN2cv3hal8split16uEPKtPPtii", "_ZNK2cv9Feature2D14descriptorSizeEv", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionERKSt6vectorIiSaIiEERjS8_", "Java_org_opencv_objdetect_HOGDescriptor_get_1nbins_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_11", "_ZN2cv9ExceptionD0Ev", "_ZN3tbb8internal17generic_scheduler15init_stack_infoEv", "cvTrace", "_ZN2cv17FlannBasedMatcher5trainEv", "Java_org_opencv_objdetect_BaseCascadeClassifier_delete", "_ZN2cv3PCAC2Ev", "_ZN10__cxxabiv119__pointer_type_infoD1Ev", "Java_org_opencv_imgproc_Imgproc_rectangle_10", "_ZN2cv3dnn19experimental_dnn_v49LSTMLayer16inputNameToIndexENS_6StringE", "Java_org_opencv_imgproc_CLAHE_setClipLimit_10", "_ZN2cv9seqRemoveEP5CvSeqi", "_ZN2cvleEdRKNS_3MatE", "_ZN2cv3hal14cvtBGR5x5toBGREPKhjPhjiiibi", "_ZN2cv18createTonemapDragoEfff", "Java_org_opencv_features2d_DescriptorMatcher_clone_11", "_ZN3tbb8internal6market13global_marketEbjj", "__gtdf2", "_ZN2cv15getNumberOfCPUsEv", "_ZN2cv16TLSDataContainer7cleanupEv", "_ZNK2cv13HOGDescriptor9detectROIERKNS_3MatERKSt6vectorINS_6Point_IiEESaIS6_EERS8_RS4_IdSaIdEEdNS_5Size_IiEESG_", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_compute_10", "Java_org_opencv_features2d_AKAZE_getDiffusivity_10", "_ZN2cv8cvtColorERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvFillConvexPoly", "_ZN2cv5MutexD1Ev", "_ZN2cv8internal15IntrinsicParamsplERKNS_3MatE", "Java_org_opencv_calib3d_Calib3d_validateDisparity_11", "_ZN2cv17DescriptorMatcherD2Ev", "_ZN2cv3ocl6DeviceD1Ev", "Java_org_opencv_ml_ANN_1MLP_getAnnealItePerStep_10", "_ZN2cv5flann5IndexD0Ev", "cvPtrND", "_ZN3tbb8internal17generic_scheduler7enqueueERNS_4taskEPv", "Java_org_opencv_imgproc_Imgproc_connectedComponents_10", "Java_org_opencv_ml_Boost_load_10", "_ZN2cv3ocl8PlatformC2Ev", "_ZNK2cv4cuda10DeviceInfo24maxTextureCubemapLayeredEv", "_ZN2cv5flann5IndexD1Ev", "_ZN2cv3ogl6Arrays16resetNormalArrayEv", "_ZdlPvRKSt9nothrow_t", "__gnu_unwind_frame", "_ZN2cveoERKNS_3MatERKNS_7Scalar_IdEE", "Java_org_opencv_ml_EM_trainEM_11", "_ZNK2cv4UMat3mulERKNS_11_InputArrayEd", "_ZN2cv9SparseMat10removeNodeEjjj", "Java_org_opencv_calib3d_StereoBM_setROI2_10", "_ZN3tbb8internal33itt_store_pointer_with_release_v3EPvS1_", "_Z7cvRoundRKN2cv10softdoubleE", "_ZNSt9exceptionD0Ev", "_ZNK2cv3SVD9backSubstERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5RangeES4_", "_ZN2cv20checkHardwareSupportEi", "_Znwj", "__adddf3", "Java_org_opencv_photo_TonemapDurand_getSigmaColor_10", "_ZN2cv17setErrorVerbosityEb", "_ZN2cv16TLSDataContainerD0Ev", "_ZN2cv3ocl7ContextC2Ev", "_ZN2cv20edgePreservingFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiff", "_ZNK2cv3dnn19experimental_dnn_v45Layer20applyHalideSchedulerERNS_3PtrINS1_11BackendNodeEEERKSt6vectorIPNS_3MatESaIS9_EERKS7_IS8_SaIS8_EEi", "_ZN2cv5splitERKNS_3MatEPS0_", "Java_org_opencv_calib3d_StereoMatcher_delete", "_ZN2cv5utils5trace7details6Region4Impl11leaveRegionERNS2_23TraceManagerThreadLocalE", "_ZN2cv9rectangleERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_ZNK2cv2ml9StatModel5emptyEv", "_ZN2cv20loadWindowParametersERKNS_6StringE", "_ZN2cv11cornerScoreILi12EEEiPKhPKii", "__dynamic_cast", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleWindowSize_10", "cvGEMM", "_ZN2cv21pyrMeanShiftFilteringERKNS_11_InputArrayERKNS_12_OutputArrayEddiNS_12TermCriteriaE", "Java_org_opencv_core_Core_PCACompute_10", "_ZN2cv5utils2fs8FileLockD1Ev", "_ZN2cv17accumulateProductERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayES2_", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMin_10", "Java_org_opencv_photo_MergeExposures_process_10", "_ZN2cv3ocl7ProgramC2ERKS1_", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_12", "_ZN2cv20FarnebackOpticalFlow6createEidbiiidi", "_ZN2cv3Mat4onesEiPKii", "Java_org_opencv_dnn_Dnn_imagesFromBlob_10", "_ZNK2cv3dnn19experimental_dnn_v43Net14getLayerShapesERKSt6vectorIS3_IiSaIiEESaIS5_EEiRS7_SA_", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getMaxLevel_10", "_ZN3tbb8internal25deallocate_via_handler_v3EPv", "_ZN2cv3ocl7ProgramD2Ev", "Java_org_opencv_features2d_AKAZE_create_11", "_ZNK2cv3ocl6Device10vendorNameEv", "__fixunssfsi", "_ZN2cv2ml9TrainDataD1Ev", "Java_org_opencv_imgproc_Imgproc_threshold_10", "Java_org_opencv_video_DualTVL1OpticalFlow_getTau_10", "Java_org_opencv_videoio_VideoWriter_fourcc_10", "_ZNK2cv3ocl6Kernel12localMemSizeEv", "_ZNK2cv3ocl13ProgramSource4hashEv", "_ZN2cv9Feature2D4readERKNS_6StringE", "Java_org_opencv_features2d_DescriptorMatcher_match_13", "_ZNK2cv3ocl6Kernel20compileWorkGroupSizeEPj", "cvFindChessboardCorners", "_ZN2cv3hal7split8uEPKhPPhii", "_ZN2cv16AVIReadContainer9readFrameESt15_Deque_iteratorISt4pairIyjERS3_PS3_E", "_ZN2cv18reprojectImageTo3DERKNS_11_InputArrayERKNS_12_OutputArrayES2_bi", "_ZTv0_n36_NK2cv19FastFeatureDetector14getDefaultNameEv", "_ZN2cv9AlgorithmD0Ev", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEi", "_ZN2cv5utils5trace7details12TraceManagerC2Ev", "_ZN2cv3ocl5TimerD2Ev", "_ZN2cv3minERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv16findTransformECCERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEiNS_12TermCriteriaES2_", "Java_org_opencv_ml_SVM_setCoef0_10", "_ZN2cv8imdecodeERKNS_11_InputArrayEiPNS_3MatE", "Java_org_opencv_core_Algorithm_empty_10", "__restore_core_regs", "Java_org_opencv_features2d_MSER_create_10", "_ZN3tbb19task_scheduler_init18internal_terminateEb", "cvCartToPolar", "Java_org_opencv_features2d_KAZE_getUpright_10", "Java_org_opencv_calib3d_StereoMatcher_getMinDisparity_10", "_ZN2cv3hal11sepFilter2DEiiiPhjS1_jiiiiiiS1_iS1_iiidi", "Java_org_opencv_imgproc_Imgproc_spatialGradient_10", "Java_org_opencv_video_FarnebackOpticalFlow_setPolyN_10", "_ZN2cv4UMat4onesENS_5Size_IiEEi", "WebPPictureSharpARGBToYUVA", "cvLogPolar", "cvSetImagesForHaarClassifierCascade", "_ZN2cv23initUndistortRectifyMapERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEEiRKNS_12_OutputArrayES7_", "_ZN2cv8cubeRootEf", "_ZNK2cv3ocl7Context6deviceEj", "_ZN2cv8clearSeqEP5CvSeq", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThresholdGen_10", "_ZN2cv21DetectionBasedTracker10ParametersC1Ev", "Java_org_opencv_imgproc_Subdiv2D_findNearest_11", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IiSaIiEEid", "_ZN2cv2ml7ANN_MLP17setAnnealInitialTEd", "_ZN2cv4cuda6StreamC1Ev", "_ZN2cv3Mat5zerosEiPKii", "_ZN2cv3ocl6KernelC1EPKcRKNS0_7ProgramE", "_ZN2cv3dnn19experimental_dnn_v420DetectionOutputLayer6createERKNS1_11LayerParamsE", "_ZN2cv7directx3ocl38initializeContextFromDirect3DDevice9ExEP18IDirect3DDevice9Ex", "Java_org_opencv_features2d_Feature2D_detectAndCompute_10", "Java_org_opencv_objdetect_HOGDescriptor_compute_10", "_ZN2cv3dnn19experimental_dnn_v45Layer13setParamsFromERKNS1_11LayerParamsE", "Java_org_opencv_core_Mat_nPutBwOffset", "_ZN2cv16FileNodeIteratorC1Ev", "Java_org_opencv_dnn_Net_getParam_11", "_ZN3tbb8internal18concurrent_monitor17abort_all_relaxedEv", "WebPDecodeBGRAInto", "cvColorToScalar", "__clzsi2", "_ZNK2cv3ocl6Device18imageMaxBufferSizeEv", "cvInitUndistortRectifyMap", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStatsWithAlgorithm_10", "Java_org_opencv_videoio_VideoCapture_get_10", "Java_org_opencv_features2d_AKAZE_setThreshold_10", "_ZN2cv5utils2fs4joinERKNS_6StringES4_", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC1ERS0_NS_3PtrINS0_9IDetectorEEERKNS0_10ParametersE", "Java_org_opencv_calib3d_Calib3d_recoverPose_11", "_ZN2cv3ocl6Kernel3setEiPKvj", "WebPPictureARGBToYUVA", "cvExp", "Java_org_opencv_imgproc_Imgproc_drawContours_11", "_ZN2cv9SparseMat3ptrEiiibPj", "Java_org_opencv_video_FarnebackOpticalFlow_getPyrScale_10", "_ZN2cv9ExceptionD2Ev", "Java_org_opencv_core_Mat_n_1adjustROI", "_ZN2cv15KeyPointsFilter15runByPixelsMaskERSt6vectorINS_8KeyPointESaIS2_EERKNS_3MatE", "Java_org_opencv_video_BackgroundSubtractorMOG2_setBackgroundRatio_10", "_ZN2cv3ogl6BufferC1ENS_5Size_IiEEijb", "_ZN2cv3dnn19experimental_dnn_v410PowerLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getTermCriteria_10", "_ZN2cv3hal6cmp16uEPKtjS2_jPhjiiPv", "_ZNK2cv3ocl6Device13driverVersionEv", "_ZN2cv3hal7invSqrtEPKdPdi", "Java_org_opencv_ml_StatModel_delete", "Java_org_opencv_imgproc_Imgproc_convexityDefects_10", "_ZN2cv4cuda18getNppErrorMessageEi", "_ZN2cv3ocl13ProgramSourceaSERKS1_", "_ZNK2cv11_InputArray11isSubmatrixEi", "Java_org_opencv_video_KalmanFilter_set_1gain_10", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_dNS_6Point_IdEERKNS_17_InputOutputArrayE", "_ZNK2cv5MatOp3addERKNS_7MatExprERKNS_7Scalar_IdEERS1_", "_ZN3tbb8internal3rml14private_server25adjust_job_count_estimateEi", "Java_org_opencv_ml_SVMSGD_setTermCriteria_10", "_ZN2cv3hal6mul32sEPKijS2_jPijiiPv", "Java_org_opencv_features2d_FeatureDetector_empty_10", "cvRange", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_ii", "Java_org_opencv_imgproc_Imgproc_EMD_10", "_ZN2cv3hal10absdiff32sEPKijS2_jPijiiPv", "Java_org_opencv_photo_Photo_createTonemapReinhard_10", "__gnu_Unwind_Backtrace", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_11", "_ZN2cv10PCAProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "Java_org_opencv_videoio_VideoCapture_grab_10", "_ZN2cv2ml3SVM17getDefaultGridPtrEi", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork3runEv", "Java_org_opencv_photo_CalibrateRobertson_getRadiance_10", "_ZNK2cv12MatAllocator3mapEPNS_8UMatDataEi", "_ZNK2cv2ml7ANN_MLP15getAnnealFinalTEv", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_11", "_ZN2cv3Mat9push_backERKS0_", "Java_org_opencv_dnn_Net_setParam_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_11", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_10", "_ZN2cv12VideoCapture4openERKNS_6StringEi", "_ZN3tbb16spin_rw_mutex_v316internal_upgradeEv", "Java_org_opencv_core_Core_SVDecomp_11", "Java_org_opencv_photo_CalibrateCRF_process_10", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_12", "cvThreshold", "_ZN2cv3dnn19experimental_dnn_v43Net7forwardERKNS_6StringE", "Java_org_opencv_core_TickMeter_getTimeTicks_10", "_ZN2cv16UMatDataAutoLockC2EPNS_8UMatDataE", "Java_org_opencv_features2d_ORB_setNLevels_10", "_ZTv0_n36_NK2cv12GFTTDetector14getDefaultNameEv", "_ZN2cv10moveWindowERKNS_6StringEii", "_ZN2cv5utils11getThreadIDEv", "_ZN2cv3ocl7Program4readERKNS_6StringES4_", "_ZN2cv12pencilSketchERKNS_11_InputArrayERKNS_12_OutputArrayES5_fff", "_ZN2cv5flann16SavedIndexParamsC1ERKNS_6StringE", "__gnu_thumb1_case_uqi", "Java_org_opencv_core_Core_mulTransposed_10", "_ZN2cv8UMatDataC1EPKNS_12MatAllocatorE", "_ZN2cv11RotatedRectC2ERKNS_6Point_IfEES4_S4_", "_ZN2cv3ogl9Texture2DC2ENS_5Size_IiEENS1_6FormatEjb", "Java_org_opencv_photo_Photo_colorChange_10", "Java_org_opencv_core_Core_setRNGSeed_10", "Java_org_opencv_photo_MergeMertens_setExposureWeight_10", "_ZNK2cv3Mat4diagEi", "_ZN10__cxxabiv119__pointer_type_infoD2Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMax_10", "_ZN2cv2ml12randMVNormalERKNS_11_InputArrayES3_iRKNS_12_OutputArrayE", "_ZN2cveoERKNS_7Scalar_IdEERKNS_3MatE", "cvClone", "_ZN2cv7solveLPERKNS_3MatES2_RS0_", "Java_org_opencv_features2d_DescriptorMatcher_add_10", "_ZN2cv2ml9ParamGridC1Eddd", "cvGetReal1D", "cvCreateSet", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayE", "_ZN3tbb21set_assertion_handlerEPFvPKciS1_S1_E", "Java_org_opencv_dnn_DictValue_getRealValue_10", "_ZN2cv3ogl6renderERKNS0_6ArraysERKNS_11_InputArrayEiNS_7Scalar_IdEE", "_ZNK2cv11_InputArray4rowsEi", "Java_org_opencv_video_KalmanFilter_correct_10", "_ZN2cv16estimateAffine2DERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidjdj", "Java_org_opencv_calib3d_Calib3d_calibrate_11", "_ZN3tbb16spin_rw_mutex_v327internal_try_acquire_readerEv", "Java_org_opencv_features2d_BRISK_create_10", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_", "Java_org_opencv_features2d_BOWTrainer_cluster_11", "_ZNK2cv3ogl6Buffer4bindENS1_6TargetE", "cvDilate", "_ZN2cv2ml6DTrees4NodeC1Ev", "_ZN3tbb8internal18fix_broken_rethrowEv", "_ZNK2cv4cuda10DeviceInfo12majorVersionEv", "_ZN2cv3ogl6BufferC1Ev", "_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE", "_ZN2cv17FlannBasedMatcherC2ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "_ZN2cvneERKNS_3MatES2_", "Java_org_opencv_features2d_AKAZE_getDefaultName_10", "__gnu_thumb1_case_si", "_ZN2cv4cuda10BufferPoolC2ERNS0_6StreamE", "cvCircle", "Java_org_opencv_features2d_GFTTDetector_setMaxFeatures_10", "_ZN2cv3dnn19experimental_dnn_v412PermuteLayer6createERKNS1_11LayerParamsE", "_Unwind_VRS_Pop", "_ZN2cv16FileNodeIteratorC1EPK13CvFileStoragePK10CvFileNodej", "_ZN2cv4readERKNS_8FileNodeERdd", "_ZN2cv3ocl6KernelD2Ev", "Java_org_opencv_imgproc_Imgproc_matchShapes_10", "_ZN2cv25groupRectangles_meanshiftERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IdSaIdEES8_dNS_5Size_IiEE", "_ZN2cv11VideoWriterC1ERKNS_6StringEidNS_5Size_IiEEb", "Java_org_opencv_core_Core_setErrorVerbosity_10", "cvSeqInsert", "_ZN2cvngERKNS_7MatExprE", "_ZNK2cv3ocl7Image2D3ptrEv", "Java_org_opencv_core_Core_max_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_10", "_ZN2cv21DetectionBasedTrackerC1ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "_ZNK2cv3ocl7Context8ndevicesEv", "_ZN2cv15spatialGradientERKNS_11_InputArrayERKNS_12_OutputArrayES5_ii", "Java_org_opencv_core_Core_getHardwareFeatureName_10", "Java_org_opencv_calib3d_Calib3d_undistortPoints_10", "cvMerge", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowThreshold_10", "_ZN3tbb8internal6market16update_allotmentERNS0_14intrusive_listINS0_5arenaEEEii", "Java_org_opencv_video_DenseOpticalFlow_delete", "_ZN2cv3dnn19experimental_dnn_v412LayerFactory15unregisterLayerERKNS_6StringE", "cvReleaseCapture", "_ZNK3tbb18captured_exception4whatEv", "cvLog", "_ZN2cv17AVIWriteContainerD1Ev", "_ZTv0_n12_N2cv9Feature2DD0Ev", "_ZN2cv16UMatDataAutoLockC1EPNS_8UMatDataE", "_ZNK2cv9softfloatdvERKS0_", "Java_org_opencv_imgproc_Imgproc_medianBlur_10", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_11", "Java_org_opencv_objdetect_HOGDescriptor_detect_11", "Java_org_opencv_dnn_DictValue_getIntValue_10", "_ZNK2cv11RotatedRect14boundingRect2fEv", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_id", "cvReleasePyramid", "cvKalmanPredict", "_ZN2cv9SparseMat5clearEv", "_ZN2cv8Subdiv2D6spliceEii", "_ZN2cv3ocl7ContextaSERKS1_", "_ZNK2cv5MatOp12augAssignAddERKNS_7MatExprERNS_3MatE", "cvCreateCameraCapture", "_ZN9CvLevMarq4stepEv", "_ZN2cv9selectROIERKNS_11_InputArrayEbb", "_ZN2cv3ocl13ProgramSource10fromBinaryERKNS_6StringES4_PKhjS4_", "cvFlushSeqWriter", "_ZN2cv16AVIReadContainer10printErrorERNS_8RiffListEj", "_ZN2cv4cuda11setGlDeviceEi", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_setAnnealCoolingRatio_10", "_ZNK2cv4cuda10DeviceInfo9tccDriverEv", "_ZN2cv7pyrDownERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZNK2cv3ocl7Program5writeERNS_6StringE", "_Z7cvFloorRKN2cv10softdoubleE", "cvGetFileNodeByName", "_ZN2cv2ml18LogisticRegression4loadERKNS_6StringES4_", "_ZN2cv18getWindowImageRectERKNS_6StringE", "WebPPictureImportRGBX", "_ZN2cv3dnn19experimental_dnn_v43Net14getPerfProfileERSt6vectorIdSaIdEE", "Java_org_opencv_photo_TonemapDurand_setSigmaSpace_10", "Java_org_opencv_ml_KNearest_getEmax_10", "_ZSt9terminatev", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_11", "Java_org_opencv_ml_SVM_setC_10", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_11", "Java_org_opencv_photo_TonemapMantiuk_setScale_10", "cvSetTrackbarMax", "Java_org_opencv_features2d_KAZE_getDiffusivity_10", "Java_org_opencv_ml_SVMSGD_setMarginType_10", "Java_org_opencv_imgproc_Imgproc_equalizeHist_10", "_ZN2cv3hal9magnitudeEPKfS2_Pfi", "cvCvtColor", "_ZN2cv3ocl6KernelC1Ev", "_ZN2cv17CommandLineParser4Impl12apply_paramsEiNS_6StringE", "_ZN2cv11colorChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEfff", "Java_org_opencv_ml_SVM_getGamma_10", "Java_org_opencv_ml_StatModel_predict_11", "Java_org_opencv_calib3d_Calib3d_distortPoints_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_delete", "_ZN2cv5flann5Index9knnSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_iRKNS0_12SearchParamsE", "_ZN2cv3ocl7ContextC1Ei", "_ZNK2cv17DescriptorMatcher5emptyEv", "_ZN2cv25BOWImgDescriptorExtractorD1Ev", "Java_org_opencv_imgproc_Imgproc_fillPoly_10", "_ZNK2cv5MatOp6divideEdRKNS_7MatExprERS1_", "_ZN2cv12VideoCaptureC1ERKNS_6StringEi", "_ZN2cv8solveP3PERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_i", "cvFindFundamentalMat", "cvGrabFrame", "Java_org_opencv_ml_EM_getTermCriteria_10", "_ZN2cv3PCAclERKNS_11_InputArrayES3_id", "Java_org_opencv_core_Core_solve_10", "Java_org_opencv_imgproc_Imgproc_accumulate_10", "Java_org_opencv_video_DualTVL1OpticalFlow_getEpsilon_10", "cvSVD", "_ZNK2cv4cuda10DeviceInfo13maxThreadsDimEv", "Java_org_opencv_calib3d_Calib3d_recoverPose_15", "_ZNK3tbb8internal27allocate_continuation_proxy4freeERNS_4taskE", "_ZNSt10bad_typeidD1Ev", "Java_org_opencv_ml_TrainData_getValues_10", "cvDFT", "Java_org_opencv_features2d_ORB_create_10", "_ZN2cv5MatOpC2Ev", "_ZN2cv15BriskScaleSpaceC2Ei", "Java_org_opencv_video_BackgroundSubtractorKNN_getkNNSamples_10", "Java_org_opencv_calib3d_Calib3d_computeCorrespondEpilines_10", "Java_org_opencv_dnn_Net_getFLOPS_13", "_ZN2cv7putTextERKNS_17_InputOutputArrayERKNS_6StringENS_6Point_IiEEidNS_7Scalar_IdEEiib", "_ZN2cv3MatC2ERKS0_RKNS_5RangeES5_", "_ZN2cv7MomentsC2Edddddddddd", "_ZN2cv4readERKNS_8FileNodeERii", "Java_org_opencv_dnn_Layer_get_1blobs_10", "_ZNK2cv4cuda10DeviceInfo17unifiedAddressingEv", "_ZN3tbb16spin_rw_mutex_v318internal_downgradeEv", "Java_org_opencv_features2d_ORB_getScaleFactor_10", "cvFindNextContour", "Java_org_opencv_ml_SVMSGD_setOptimalParameters_10", "_ZN2cv3LDA19subspaceReconstructERKNS_11_InputArrayES3_S3_", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_10", "_ZN2cv3dnn19experimental_dnn_v410SplitLayer6createERKNS1_11LayerParamsE", "_ZN2cv8calcHistERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayES7_RKS3_IfSaIfEEb", "Java_org_opencv_ml_Boost_setWeakCount_10", "Java_org_opencv_imgproc_Imgproc_contourArea_11", "Java_org_opencv_ml_TrainData_getNSamples_10", "_ZN2cv3ocl6KernelaSERKS1_", "Java_org_opencv_core_Core_magnitude_10", "_ZN2cv15findCirclesGridERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEENS_27CirclesGridFinderParametersE", "_ZN2cv17rectify3CollinearERKNS_11_InputArrayES2_S2_S2_S2_S2_S2_S2_NS_5Size_IiEES2_S2_S2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_S7_S7_dS4_PNS_5Rect_IiEESA_i", "Java_org_opencv_core_Mat_n_1zeros__III", "_ZN2cv3hal3expEPKfPfi", "_Unwind_DeleteException", "Java_org_opencv_ml_ANN_1MLP_load_10", "_ZN2cv7inpaintERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayE", "WebPSetWorkerInterface", "Java_org_opencv_ml_KNearest_create_10", "_ZN3tbb8internal31Scheduler_OneTimeInitializationEb", "_ZN3tbb8internal18concurrent_monitor11cancel_waitERNS1_14thread_contextE", "Java_org_opencv_ml_TrainData_shuffleTrainTest_10", "Java_org_opencv_imgproc_CLAHE_delete", "cvCornerHarris", "Java_org_opencv_photo_Photo_createMergeMertens_11", "_ZN2cv2ml9ParamGridC2Eddd", "_ZN2cv5flann11IndexParams9setStringERKNS_6StringES4_", "_ZN2cv3dnn19experimental_dnn_v413ProposalLayer6createERKNS1_11LayerParamsE", "cvNamedWindow", "WebPPictureARGBToYUVADithered", "_ZN2cv9SparseMat3Hdr5clearEv", "_ZNK2cv3ocl6Device15linkerAvailableEv", "Java_org_opencv_core_Mat_n_1setTo__JJJ", "cvWatershed", "_ZN2cv5errorERKNS_9ExceptionE", "Java_org_opencv_core_Core_convertScaleAbs_10", "Java_org_opencv_core_Mat_n_1dataAddr", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IiSaIiEERS0_IdSaIdEEid", "_ZN3tbb16spin_rw_mutex_v323internal_release_writerEv", "_ZNK2cv2ml6KDTree11findNearestERKNS_11_InputArrayEiiRKNS_12_OutputArrayES7_S7_S7_", "Java_org_opencv_calib3d_Calib3d_stereoRectify_13", "_ZN2cv8Subdiv2D6VertexC2Ev", "cvFindContours", "Java_org_opencv_calib3d_Calib3d_solveP3P_10", "restore_core_regs", "Java_org_opencv_features2d_Features2d_drawMatches_11", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DLinearEv", "Java_org_opencv_ml_SVMSGD_getStepDecreasingPower_10", "cvPerspectiveTransform", "_ZN2cv4sqrtERKNS_10softdoubleE", "cvReadRawData", "Java_org_opencv_video_FarnebackOpticalFlow_create_10", "___Unwind_Resume_or_Rethrow", "_ZN2cv16FileNodeIterator7readRawERKNS_6StringEPhj", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERNS0_6StreamE", "Java_org_opencv_calib3d_Calib3d_findHomography_11", "Java_org_opencv_features2d_GFTTDetector_setBlockSize_10", "_ZNK2cv3dnn19experimental_dnn_v43Net15getLayersShapesERKSt6vectorIiSaIiEERS5_RS3_IS3_IS5_SaIS5_EESaISA_EESD_", "Java_org_opencv_photo_Photo_createTonemapDrago_10", "Java_org_opencv_core_Mat_n_1ones__III", "_ZN2cv3hal8CholeskyEPfjiS1_ji", "_ZN2cv12VideoCaptureD2Ev", "Java_org_opencv_video_FarnebackOpticalFlow_setNumLevels_10", "Java_org_opencv_features2d_FeatureDetector_delete", "_ZN2cv3ocl12PlatformInfoC1ERKS1_", "_ZN2cv17DescriptorMatcher11isMaskedOutERKNS_11_InputArrayEi", "_ZN2cv7fisheye13distortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_d", "_ZN2cv3dnn19experimental_dnn_v421readNetFromTensorflowERKNS_6StringES4_", "Java_org_opencv_ml_TrainData_getTestNormCatResponses_10", "Java_org_opencv_features2d_KAZE_create_11", "_ZN2cv11SVBackSubstERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZN2cv10softdoubleC2Ey", "Java_org_opencv_features2d_Features2d_drawMatches_10", "Java_org_opencv_ml_LogisticRegression_load_10", "_ZN2cv3hal12cvtBGRtoGrayEPKhjPhjiiiib", "Java_org_opencv_photo_Tonemap_getGamma_10", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setMaxLevel_10", "Java_org_opencv_core_Mat_n_1checkVector__JII", "Java_org_opencv_videoio_VideoCapture_release_10", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEiS4_PPKfbb", "Java_org_opencv_core_Mat_nPutI", "cvEndWriteSeq", "_ZN2cv3hal11cvtYUVtoBGREPKhjPhjiiiibb", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_11", "_ZNK2cv14DefaultDeleterI23CvHaarClassifierCascadeEclEPS1_", "_ZN2cv3powERKNS_9softfloatES2_", "_ZN2cv4cuda13nonLocalMeansERKNS_11_InputArrayERKNS_12_OutputArrayEfiiiRNS0_6StreamE", "_ZN2cv12KalmanFilter7correctERKNS_3MatE", "_ZN2cv4cuda28getCudaDriverApiErrorMessageEi", "_ZN2cv3LDA15subspaceProjectERKNS_11_InputArrayES3_S3_", "Java_org_opencv_features2d_Params_set_1thresholdStep_10", "Java_org_opencv_core_Core_getTickFrequency_10", "Java_org_opencv_imgproc_LineSegmentDetector_delete", "Java_org_opencv_imgproc_Imgproc_ellipse_10", "_ZNK2cv2ml3SVM29getUncompressedSupportVectorsEv", "_ZN2cv3dnn19experimental_dnn_v45Layer8finalizeERKSt6vectorINS_3MatESaIS4_EERS6_", "_ZN2cv17DescriptorMatcher6createERKNS_6StringE", "cvKMeans2", "_ZN2cv5solveERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "Java_org_opencv_ml_RTrees_delete", "Java_org_opencv_ml_TrainData_getNames_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1derivAperture_10", "cvFastArctan", "Java_org_opencv_video_DualTVL1OpticalFlow_getOuterIterations_10", "Java_org_opencv_imgcodecs_Imgcodecs_imread_11", "_ZN10__cxxabiv120__si_class_type_infoD1Ev", "_ZN2cv13createTonemapEf", "WebPMemoryWriterInit", "Java_org_opencv_calib3d_StereoBM_getROI2_10", "_ZN3tbb8internal33throw_bad_last_alloc_exception_v4Ev", "Java_org_opencv_features2d_ORB_getFastThreshold_10", "Java_org_opencv_imgproc_Imgproc_moments_10", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_10", "_ZNK2cv9softfloatplERKS0_", "_ZN2cv3ogl6Buffer6unbindENS1_6TargetE", "Java_org_opencv_features2d_BOWKMeansTrainer_cluster_10", "Java_org_opencv_core_Core_normalize_12", "_ZN2cv3hal7normL1_EPKhS2_i", "_ZN2cv3hal8Filter2D6createEPhjiiiiiiiidiibb", "cvFloodFill", "_ZN2cv17CascadeClassifier4loadERKNS_6StringE", "Java_org_opencv_calib3d_Calib3d_decomposeHomographyMat_10", "_ZN2cv3hal8recip32fEPKfjS2_jPfjiiPv", "_ZN2cv4readERKNS_8FileNodeERSt6vectorINS_8KeyPointESaIS4_EE", "cvDistTransform", "_ZN2cv3dnn19experimental_dnn_v49ReLULayer6createERKNS1_11LayerParamsE", "Java_org_opencv_ml_Boost_delete", "_ZN3tbb18captured_exception7destroyEv", "_ZN2cv9FormattedD1Ev", "Java_org_opencv_core_Core_randn_10", "_ZN2cv5utils5trace7details6Region17LocationExtraData4initERKNS3_21LocationStaticStorageE", "_ZN2cv3dnn19experimental_dnn_v45Layer8finalizeERKSt6vectorINS_3MatESaIS4_EE", "Java_org_opencv_imgproc_Subdiv2D_getEdge_10", "_ZN2cv4UMat3eyeENS_5Size_IiEEi", "_ZN2cv3hal7normL1_EPKfS2_i", "Java_org_opencv_core_Core_setIdentity_11", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DGatherEv", "_ZN2cv27CirclesGridFinderParametersC2Ev", "_ZN3tbb8internal6market13arena_in_needERNS0_14intrusive_listINS0_5arenaEEERPS3_", "_ZN2cv5BRISK6createERKSt6vectorIfSaIfEERKS1_IiSaIiEEffS9_", "Java_org_opencv_photo_TonemapDurand_setContrast_10", "_ZN2cv7absdiffERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN10__cxxabiv117__pbase_type_infoD1Ev", "Java_org_opencv_features2d_Params_get_1thresholdStep_10", "_ZN2cv3hal10invSqrt32fEPKfPfi", "__gnu_f2h_alternative", "_ZN2cv3hal6sub32fEPKfjS2_jPfjiiPv", "_ZN2cv11sepFilter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_S2_NS_6Point_IiEEdi", "_ZN2cv16BOWKMeansTrainerD0Ev", "___Unwind_RaiseException", "_ZTv0_n20_NK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "Java_org_opencv_core_Core_add_13", "Java_org_opencv_features2d_ORB_setWTA_1K_10", "_ZN2cv5utils5trace7details6Region17LocationExtraDataC2ERKNS3_21LocationStaticStorageE", "_ZN2cv4cuda10syncOutputERKNS0_6GpuMatERKNS_12_OutputArrayERNS0_6StreamE", "_ZNK2cv3ocl6Device4typeEv", "cvShowImage", "Java_org_opencv_features2d_DescriptorMatcher_read_10", "_ZN2cv29createBackgroundSubtractorKNNEidb", "_ZNK2cv3dnn19experimental_dnn_v43Net13getLayerTypesERSt6vectorINS_6StringESaIS4_EE", "_ZN2cv5utils5trace7details12TraceManager11isActivatedEv", "Java_org_opencv_features2d_Feature2D_detectAndCompute_11", "Java_org_opencv_core_Mat_n_1convertTo__JJID", "cvGetErrStatus", "_ZN2cv10warpAffineERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "_ZN3tbb8internal6market22remove_arena_from_listERNS0_5arenaE", "_ZN2cv3ocl7ContextC1ERKS1_", "Java_org_opencv_imgproc_Imgproc_morphologyEx_10", "Java_org_opencv_objdetect_HOGDescriptor_getDefaultPeopleDetector_10", "_ZN2cv3Mat19setDefaultAllocatorEPNS_12MatAllocatorE", "Java_org_opencv_core_Mat_n_1mul__JJD", "_ZNK2cv10BOWTrainer14getDescriptorsEv", "cvCreateMatHeader", "Java_org_opencv_objdetect_CascadeClassifier_delete", "_ZN2cv4UMatC2ERKS0_RKNS_5RangeES5_", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_10", "_ZN2cv4cbrtERKNS_9softfloatE", "Java_org_opencv_core_Core_gemm_10", "cvFirstType", "_ZN2cv16MatConstIterator4seekEib", "_ZN2cv5instr8getTraceEv", "_ZN3tbb4task4selfEv", "_ZN2cv7MomentsC1Edddddddddd", "_ZN2cv3ogl6BufferC2ENS_5Size_IiEEijb", "Java_org_opencv_photo_TonemapMantiuk_delete", "Java_org_opencv_features2d_Feature2D_write_10", "_ZN2cv11RNG_MT199374nextEv", "_ZN2cv5flann14LshIndexParamsC1Eiii", "_ZN2cv16findEssentialMatERKNS_11_InputArrayES2_dNS_6Point_IdEEiddRKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_filter2D_11", "_ZN10__cxxabiv119__pointer_type_infoD0Ev", "_ZN2cv5flann5IndexC1ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZN2cv4cuda6StreamC2ERKNS_3PtrINS0_6GpuMat9AllocatorEEE", "_ZN2cv3ogl9Texture2DC2ERKNS_11_InputArrayEb", "_ZN2cv9Feature2DD2Ev", "cvSet3D", "Java_org_opencv_imgproc_Imgproc_drawMarker_10", "_ZN2cv22SparseMatConstIteratorppEv", "cvStdErrReport", "_ZNK2cv11_InputArray5totalEi", "_ZN2cv3hal5Morph6createEiiiiiiPhjiiiiiPKdibb", "VP8LGetInfo", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5Rect_IiEE", "_ZN2cv23getPerspectiveTransformERKNS_11_InputArrayES2_", "cvWaitKey", "_ZNK2cv8Subdiv2D6Vertex9isvirtualEv", "_ZN2cv8internal18WriteStructContextC1ERNS_11FileStorageERKNS_6StringEiS6_", "_ZN2cv3dnn19experimental_dnn_v410SliceLayer6createERKNS1_11LayerParamsE", "_ZN2cv14getTrackbarPosERKNS_6StringES2_", "Java_org_opencv_core_Mat_n_1assignTo__JJ", "_ZN2cv8StereoBM6createEii", "_ZNK2cv8Subdiv2D10rotateEdgeEii", "_ZN2cv9Feature2DD0Ev", "_ZN2cv14DownhillSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEERKNS_11_InputArrayENS_12TermCriteriaE", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "_ZN2cv7fisheye42estimateNewCameraMatrixForUndistortRectifyERKNS_11_InputArrayES3_RKNS_5Size_IiEES3_RKNS_12_OutputArrayEdS7_d", "_ZNK2cv11_InputArray6sizendEPii", "_ZN3tbb8internal3rml14private_serverD1Ev", "__gnu_Unwind_Restore_VFP_D_16_to_31", "cvFitEllipse2", "_ZN2cv4flipERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_descriptorType_10", "Java_org_opencv_ml_SVMSGD_setSvmsgdType_10", "_ZN2cv14correctMatchesERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_", "WebPPictureYUVAToARGB", "Java_org_opencv_imgproc_Imgproc_logPolar_10", "Java_org_opencv_imgproc_Imgproc_convertMaps_10", "_ZNK2cv3ocl12PlatformInfo6vendorEv", "Java_org_opencv_features2d_GFTTDetector_setHarrisDetector_10", "_ZN2cv9useOpenVXEv", "_ZN2cv5flann5IndexC2Ev", "_ZN2cv3dnn19experimental_dnn_v410ReLU6Layer6createERKNS1_11LayerParamsE", "Java_org_opencv_features2d_GFTTDetector_setQualityLevel_10", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_11", "Java_org_opencv_features2d_Feature2D_read_10", "_ZN3tbb8internal17generic_scheduler25local_spawn_root_and_waitEPNS_4taskERS3_", "Java_org_opencv_objdetect_CascadeClassifier_load_10", "WebPPictureImportRGBA", "Java_org_opencv_core_Mat_n_1inv__J", "WebPGetFeaturesInternal", "_ZN2cv12morphologyExERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_HoughCircles_11", "_ZN3tbb8internal17generic_scheduler12attach_arenaEPNS0_5arenaEjb", "_ZN2cv3ogl6renderERKNS0_9Texture2DENS_5Rect_IdEES5_", "Java_org_opencv_photo_MergeDebevec_process_11", "_ZN2cv17CascadeClassifierC2ERKNS_6StringE", "_ZN9CvLevMarq6updateERPK5CvMatRPS0_S5_", "Java_org_opencv_video_BackgroundSubtractorMOG2_setNMixtures_10", "_ZN2cv8Subdiv2D6insertERKSt6vectorINS_6Point_IfEESaIS3_EE", "_ZNK3tbb8internal34allocate_additional_child_of_proxy8allocateEj", "Java_org_opencv_features2d_MSER_create_11", "_ZN2cvdvEdRKNS_7MatExprE", "_ZN3tbb8internal6marketC1Ejjj", "JNI_OnLoad", "_ZN2cv3ocl12PlatformInfoC1Ev", "_ZN2cv3ogl9Texture2DC2Ev", "cvWriteComment", "_ZN2cv3expERKNS_9softfloatE", "Java_org_opencv_video_KalmanFilter_predict_11", "Java_org_opencv_calib3d_StereoBM_setTextureThreshold_10", "_ZN2cv15scalarToRawDataERKNS_7Scalar_IdEEPvii", "_ZNK3tbb8internal20allocate_child_proxy8allocateEj", "Java_org_opencv_ml_SVM_getDegree_10", "_ZN2cv3ocl6finishEv", "_ZN2cv5flann11IndexParams9setDoubleERKNS_6StringEd", "Java_org_opencv_core_Mat_n_1Mat__DDI", "cvFindHomography", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_10", "_Unwind_ForcedUnwind", "_ZNK2cv4cuda6GpuMat7reshapeEii", "_ZN2cv3hal10absdiff64fEPKdjS2_jPdjiiPv", "Java_org_opencv_features2d_Params_set_1filterByConvexity_10", "Java_org_opencv_photo_Tonemap_process_10", "cvSetImageROI", "_ZN2cv13destroyWindowERKNS_6StringE", "_ZTv0_n36_NK2cv5AKAZE14getDefaultNameEv", "_ZN3tbb8internal13handle_perrorEiPKc", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_13", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_11", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC1EiN7cvflann20flann_centers_init_tEii", "_ZN2cv11cornerScoreILi8EEEiPKhPKii", "_ZN2cvgeERKNS_3MatEd", "_ZN2cv3dnn19experimental_dnn_v412SoftmaxLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_ml_RTrees_setActiveVarCount_10", "_ZNK2cv17DescriptorMatcher5matchERKNS_11_InputArrayES3_RSt6vectorINS_6DMatchESaIS5_EES3_", "_ZN2cv3hal5mul8sEPKajS2_jPajiiPv", "_ZNK2cv17CommandLineParser4Impl12split_stringERKNS_6StringEcb", "Java_org_opencv_photo_TonemapDrago_setSaturation_10", "Java_org_opencv_video_KalmanFilter_KalmanFilter_11", "Java_org_opencv_features2d_GFTTDetector_setMinDistance_10", "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv22SparseMatConstIteratorC2EPKNS_9SparseMatE", "_ZN2cv2ml9ParamGridC1Ev", "Java_org_opencv_ml_DTrees_setRegressionAccuracy_10", "_ZN2cv3hal9fastAtan2EPKfS2_Pfib", "_ZN2cv3ocl7Program9getPrefixERKNS_6StringE", "Java_org_opencv_imgproc_Imgproc_fitEllipseDirect_10", "_ZN2cv9FormattedD2Ev", "Java_org_opencv_core_Mat_n_1setTo__JDDDD", "cvNorm", "cvStartAppendToSeq", "_ZN2cv9rectangleERNS_3MatENS_5Rect_IiEERKNS_7Scalar_IdEEiii", "_Unwind_GetRegionStart", "_ZN2cv5utils2fs8FileLock13unlock_sharedEv", "Java_org_opencv_photo_Photo_createTonemap_11", "Java_org_opencv_ml_LogisticRegression_delete", "Java_org_opencv_photo_AlignMTB_getExcludeRange_10", "_ZN2cv3hal6min16uEPKtjS2_jPtjiiPv", "_ZN2cv3hal11normHammingEPKhi", "_ZN2cv3ocl7haveSVMEv", "_ZN2cv3ocl7ContextD1Ev", "Java_org_opencv_dnn_Layer_finalize_11", "Java_org_opencv_features2d_DescriptorExtractor_write_10", "Java_org_opencv_features2d_FeatureDetector_read_10", "_ZN2cv16FileNodeIteratorC2Ev", "_ZN2cv3sumERKNS_11_InputArrayE", "_ZN2cv14extractChannelERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_videoio_VideoCapture_isOpened_10", "_ZN2cv14seqRemoveSliceEP5CvSeq7CvSlice", "_ZN2cv5flann12SearchParamsC2Eifb", "_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv", "_ZN3tbb8internal6market17try_destroy_arenaEPNS0_5arenaEj", "Java_org_opencv_features2d_Params_get_1minArea_10", "_ZN2cv7directx25convertFromD3D11Texture2DEP15ID3D11Texture2DRKNS_12_OutputArrayE", "_ZN2cv13HOGDescriptor12readALTModelENS_6StringE", "Java_org_opencv_imgproc_Imgproc_erode_12", "_ZN2cv3dnn19experimental_dnn_v45LayerD0Ev", "Java_org_opencv_core_Core_mulTransposed_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowThreshold_10", "Java_org_opencv_features2d_DescriptorExtractor_empty_10", "Java_org_opencv_ml_SVM_getKernelType_10", "Java_org_opencv_core_Mat_n_1col", "_ZNK2cv12_OutputArray10getUMatRefEi", "_ZN2cv3ocl7Image2D17isFormatSupportedEiib", "_ZNK2cv3Mat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv17agast_cornerScoreILi3EEEiPKhPKii", "Java_org_opencv_core_Core_repeat_10", "Java_org_opencv_videoio_VideoWriter_delete", "Java_org_opencv_dnn_Net_forward_14", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayES6_S6_i", "WebPPictureImportBGR", "_ZN2cv3ocl12PlatformInfoaSERKS1_", "cvSVBkSb", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleRange_10", "_ZN2cv3dctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_core_Core_subtract_10", "cvNormalizeHist", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_10", "_ZN3tbb8internal8governor17release_resourcesEv", "Java_org_opencv_ml_DTrees_setMinSampleCount_10", "Java_org_opencv_ml_SVM_trainAuto_10", "_ZN3tbb18task_group_context4initEv", "Java_org_opencv_imgproc_Imgproc_accumulate_11", "_ZNK2cv5MatOp8subtractERKNS_7Scalar_IdEERKNS_7MatExprERS5_", "_ZNK2cv3LDA4saveERNS_11FileStorageE", "_ZN2cv3LDAC2Ei", "Java_org_opencv_features2d_KAZE_getDefaultName_10", "Java_org_opencv_imgproc_Imgproc_pyrUp_11", "_ZN2cv3LDAD1Ev", "Java_org_opencv_calib3d_StereoBM_getPreFilterSize_10", "_ZNK2cv3dnn19experimental_dnn_v43Net8getFLOPSEiRKSt6vectorIS3_IiSaIiEESaIS5_EE", "_ZNK2cv5MatOp15augAssignDivideERKNS_7MatExprERNS_3MatE", "_ZN2cv3hal8split64sEPKxPPxii", "Java_org_opencv_android_Utils_nMatToBitmap", "Java_org_opencv_photo_CalibrateDebevec_setSamples_10", "Java_org_opencv_ml_TrainData_getCatCount_10", "_ZN2cv5MatOpD1Ev", "_ZN2cv14ConjGradSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEENS_12TermCriteriaE", "cvCmpS", "_ZN9_IplImageC1ERKN2cv3MatE", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv3dnn19experimental_dnn_v48RNNLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Core_getNumThreads_10", "_ZN2cv2ml2EM4loadERKNS_6StringES4_", "_ZN2cv4UMatD1Ev", "cvErrorStr", "_ZN2cv9ExceptionC2EiRKNS_6StringES3_S3_i", "_ZNK2cv16MinProblemSolver8Function14getGradientEpsEv", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1ERKS1_", "_ZNK2cv4UMat4diagEi", "_ZN2cv11writeScalarERNS_11FileStorageEi", "_ZNK2cv9SparseMat6copyToERNS_3MatE", "_ZN3tbb8internal5arena12enqueue_taskERNS_4taskEiRNS0_10FastRandomE", "Java_org_opencv_photo_Photo_illuminationChange_11", "_ZN2cv10checkRangeERKNS_11_InputArrayEbPNS_6Point_IiEEdd", "_ZN2cv11VideoWriterD1Ev", "Java_org_opencv_objdetect_HOGDescriptor_load_11", "_ZN2cv3SVDclERKNS_11_InputArrayEi", "_ZN2cv3dnn19experimental_dnn_v412EltwiseLayer6createERKNS1_11LayerParamsE", "cvRawDataToScalar", "_ZN2cv4cuda6GpuMat16defaultAllocatorEv", "cvCalcArrHist", "_ZN2cv17AVIWriteContainerD2Ev", "cvDet", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_10", "_ZNSt10bad_typeidD0Ev", "_ZNK2cv19FastFeatureDetector14getDefaultNameEv", "_ZN2cv7addTextERKNS_3MatERKNS_6StringENS_6Point_IiEERKNS_6QtFontE", "Java_org_opencv_features2d_DescriptorMatcher_clone_10", "_ZNK2cv11RotatedRect6pointsEPNS_6Point_IfEE", "_ZN2cv3maxERKNS_3MatES2_", "Java_org_opencv_imgproc_Imgproc_Scharr_12", "cvCmp", "Java_org_opencv_dnn_Net_setPreferableBackend_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_10", "_ZN2cv3ocl13ProgramSource8fromSPIRERKNS_6StringES4_PKhjS4_", "_ZNK2cv3ocl5Timer10durationNSEv", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_10", "_ZN2cv3hal5add8sEPKajS2_jPajiiPv", "cvSubstituteContour", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork23workcycleObjectDetectorEv", "_ZN2cv11demosaicingERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_dRKNS_17_InputOutputArrayES5_", "Java_org_opencv_ml_EM_predict_11", "cvReleaseVideoWriter", "_ZN2cv16setMouseCallbackERKNS_6StringEPFviiiiPvES3_", "Java_org_opencv_ml_EM_trainE_11", "Java_org_opencv_ml_SVMSGD_setStepDecreasingPower_10", "Java_org_opencv_ml_RTrees_create_10", "Java_org_opencv_video_DualTVL1OpticalFlow_setLambda_10", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_11", "_ZN2cv3LDAC2ERKNS_11_InputArrayES3_i", "_ZN2cv11arrowedLineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiiid", "Java_org_opencv_core_TickMeter_stop_10", "_ZNK2cv9Feature2D5writeERNS_11FileStorageE", "WebPPictureSmartARGBToYUVA", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_11", "_ZN2cv9ExceptionD1Ev", "Java_org_opencv_features2d_KAZE_getNOctaveLayers_10", "_ZN2cv3ocl12PlatformInfoD2Ev", "_ZNK2cv17FlannBasedMatcher15isMaskSupportedEv", "_ZN2cv23calibrationMatrixValuesERKNS_11_InputArrayENS_5Size_IiEEddRdS5_S5_RNS_6Point_IdEES5_", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_11", "Java_org_opencv_core_Core_subtract_11", "Java_org_opencv_ml_TrainData_getResponses_10", "_ZN2cv3hal6sub16sEPKsjS2_jPsjiiPv", "_ZN2cv9HuMomentsERKNS_7MomentsEPd", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_11", "Java_org_opencv_core_Core_getIppVersion_10", "_ZNK2cv4cuda10DeviceInfo17maxSurfaceCubemapEv", "_ZN2cv5flann11IndexParams7setBoolERKNS_6StringEb", "_ZN2cv3dnn19experimental_dnn_v414imagesFromBlobERKNS_3MatERKNS_12_OutputArrayE", "_ZNK2cv4cuda10DeviceInfo18maxThreadsPerBlockEv", "cvDecodeImageM", "_ZNK2cv5MatOp17augAssignMultiplyERKNS_7MatExprERNS_3MatE", "_ZNK2cv9softfloatleERKS0_", "_ZN2cv3ocl8PlatformaSERKS1_", "_ZN2cv3hal8recip64fEPKdjS2_jPdjiiPv", "cvStereoCalibrate", "cvGetNumThreads", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_10", "_ZN2cv3hal5cmp8sEPKajS2_jPhjiiPv", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_11", "_ZNK2cv3ocl6Device15maxConstantArgsEv", "_ZN2cv6ScharrERKNS_11_InputArrayERKNS_12_OutputArrayEiiiddi", "Java_org_opencv_imgproc_Imgproc_spatialGradient_12", "Java_org_opencv_photo_Photo_textureFlattening_10", "Java_org_opencv_photo_AlignMTB_shiftMat_10", "_ZNK2cv3ocl6Device25preferredVectorWidthFloatEv", "_ZNK2cv3ocl8internal12ProgramEntrycvRNS0_13ProgramSourceEEv", "_ZN2cv3Mat19getDefaultAllocatorEv", "_ZN2cv3ogl9Texture2DC1ERKNS_11_InputArrayEb", "_ZNK2cv17CascadeClassifier18isOldFormatCascadeEv", "Java_org_opencv_ml_SVM_getCoef0_10", "cvGetRealND", "_ZNK2cv3ocl7Program6sourceEv", "_ZN2cv3dnn19experimental_dnn_v412PaddingLayer6createERKNS1_11LayerParamsE", "_ZN2cv3maxERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv3ocl6Kernel3setEiRKNS0_7Image2DE", "Java_org_opencv_core_Core_randShuffle_10", "_ZN2cv16displayStatusBarERKNS_6StringES2_i", "cvClearMemStorage", "Java_org_opencv_features2d_DescriptorMatcher_getTrainDescriptors_10", "cvValidateDisparity", "_ZNK3tbb8internal32allocate_root_with_context_proxy8allocateEj", "Java_org_opencv_ml_SVMSGD_delete", "_ZN2cv3hal6max64fEPKdjS2_jPdjiiPv", "_ZNK2cv4cuda10DeviceInfo11pciDeviceIDEv", "_ZN2cv3ocl9KernelArgC1EiPNS_4UMatEiiPKvj", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayERNS_4cuda6StreamE", "cvSetSeqReaderPos", "_ZNK3tbb4task26is_owned_by_current_threadEv", "_ZN2cv3hal6min32fEPKfjS2_jPfjiiPv", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEPKc", "_ZN2cv4PSNRERKNS_11_InputArrayES2_", "_ZN2cv3MatC2ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_calib3d_Calib3d_estimateNewCameraMatrixForUndistortRectify_11", "Java_org_opencv_ml_EM_trainM_11", "Java_org_opencv_ml_SVMSGD_getTermCriteria_10", "Java_org_opencv_imgproc_Imgproc_polylines_10", "Java_org_opencv_core_Core_kmeans_11", "_ZN2cvgeERKNS_3MatES2_", "_ZNK2cv3ocl6Device12halfFPConfigEv", "cvSaveImage", "Java_org_opencv_core_Mat_n_1push_1back", "Java_org_opencv_imgproc_Imgproc_Canny_11", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_10", "_ZN2cvmiERKNS_7MatExprERKNS_3MatE", "cvArcLength", "_ZN2cv3dnn19experimental_dnn_v414MaxUnpoolLayer6createERKNS1_11LayerParamsE", "_ZNK2cv8Subdiv2D8nextEdgeEi", "Java_org_opencv_core_Mat_n_1type", "_ZNK2cv14DefaultDeleterI11CvSparseMatEclEPS1_", "_ZN3tbb8internal6market12create_arenaEiij", "_ZN2cv5flann5Index12radiusSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_diRKNS0_12SearchParamsE", "_ZNK2cv12_OutputArray12getGpuMatRefEv", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD1Ev", "_ZN2cv21DetectionBasedTracker9addObjectERKNS_5Rect_IiEE", "Java_org_opencv_imgproc_Subdiv2D_insert_11", "_ZN2cv8Subdiv2D13setEdgePointsEiii", "_ZN2cv14seqInsertSliceEP5CvSeqiPKv", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEi", "_ZN2cv5utils5trace7details6Region4Impl14registerRegionERNS2_23TraceManagerThreadLocalE", "_ZN2cv20initWideAngleProjMapERKNS_11_InputArrayES2_NS_5Size_IiEEiiRKNS_12_OutputArrayES7_id", "_ZN2cv11HoughLinesPERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "_ZN2cv17CascadeClassifier16setMaskGeneratorERKNS_3PtrINS_21BaseCascadeClassifier13MaskGeneratorEEE", "Java_org_opencv_core_Core_sqrt_10", "Java_org_opencv_features2d_AKAZE_create_10", "_ZN2cv16AVIReadContainer10initStreamERKNS_6StringE", "_ZN2cv15BriskScaleSpace16constructPyramidERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_boxFilter_12", "_ZN2cv4cuda6Stream4NullEv", "cvCalcPCA", "_ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1Ev", "_ZN2cv11FileStorageD2Ev", "Java_org_opencv_ml_SVM_getDefaultGridPtr_10", "Java_org_opencv_features2d_ORB_setScaleFactor_10", "_ZN2cv5flann11IndexParams12setAlgorithmEi", "cvGraphRemoveVtxByPtr", "WebPDecode", "_ZNK2cv7MatExpr1tEv", "cvCreateFileCaptureWithPreference", "cvGetAffineTransform", "Java_org_opencv_core_Core_checkRange_10", "Java_org_opencv_ml_RTrees_setTermCriteria_10", "_ZN2cv17CommandLineParseraSERKS0_", "_ZN2cv11bitwise_xorERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZN2cv12getThreadNumEv", "_ZN3tbb8internal8governor19terminate_schedulerEPNS0_17generic_schedulerEPKNS_19task_scheduler_initEb", "Java_org_opencv_imgproc_Imgproc_ellipse_12", "cvCornerMinEigenVal", "_ZNK2cv4cuda10DeviceInfo11computeModeEv", "_ZN2cv16FileNodeIteratorpLEi", "Java_org_opencv_core_Core_countNonZero_10", "_ZN2cv3hal5sub8uEPKhjS2_jPhjiiPv", "_ZN2cv3ocl12PlatformInfoC2ERKS1_", "Java_org_opencv_ml_TrainData_setTrainTestSplit_10", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERSt6vectorIS4_INS_8KeyPointESaIS5_EESaIS7_EERKNS_12_OutputArrayE", "Java_org_opencv_ml_SVM_setNu_10", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_10", "_ZN2cv3ocl5TimerC2ERKNS0_5QueueE", "_ZN3tbb8internal12NFS_AllocateEjjPv", "_ZN10__cxxabiv115__forced_unwindD0Ev", "Java_org_opencv_imgproc_Imgproc_drawMarker_11", "WebPDecodeBGRInto", "_ZN2cv14copyMakeBorderERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv16AVIReadContainer8skipJunkERNS_8RiffListE", "_ZNK2cv4cuda10DeviceInfo19maxSurface1DLayeredEv", "Java_org_opencv_dnn_Layer_get_1name_10", "_ZN2cv15KeyPointsFilter16removeDuplicatedERSt6vectorINS_8KeyPointESaIS2_EE", "_ZNK2cv3ocl6Kernel29preferedWorkGroupSizeMultipleEv", "Java_org_opencv_core_Core_merge_10", "Java_org_opencv_ml_KNearest_setAlgorithmType_10", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_11", "Java_org_opencv_calib3d_StereoBM_getPreFilterCap_10", "cvConvexityDefects", "_ZN2cv2ml7ANN_MLP19setAnnealItePerStepEi", "_ZN2cv3LDA11reconstructERKNS_11_InputArrayE", "Java_org_opencv_features2d_Params_get_1minInertiaRatio_10", "_ZN3tbb4task13note_affinityEt", "_ZN2cv3dnn19experimental_dnn_v413PriorBoxLayer6createERKNS1_11LayerParamsE", "_ZNK2cv5flann5Index4saveERKNS_6StringE", "_ZN2cv11matMulDerivERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_", "_ZN2cv5MutexC2Ev", "Java_org_opencv_photo_TonemapDrago_setBias_10", "_ZNK2cv3ocl6Device24profilingTimerResolutionEv", "Java_org_opencv_calib3d_Calib3d_decomposeEssentialMat_10", "cvCrossProduct", "__truncdfsf2", "Java_org_opencv_ml_LogisticRegression_setTrainMethod_10", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEi", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_11", "_ZN3tbb18task_group_contextD2Ev", "_ZN2cv6formatEPKcz", "cvGetReal2D", "_ZNK2cv12GFTTDetector14getDefaultNameEv", "Java_org_opencv_video_BackgroundSubtractor_apply_11", "_ZN2cv11writeScalarERNS_11FileStorageEd", "Java_org_opencv_photo_CalibrateDebevec_getLambda_10", "_ZN7cvflann19flann_distance_typeEv", "_ZN2cv4cuda11TargetArchs6hasPtxEii", "_ZNK2cv3ocl6Device11maxSamplersEv", "_ZN2cv3ocl7ProgramC2Ev", "cvReleasePOSITObject", "Java_org_opencv_core_Mat_n_1dot", "Java_org_opencv_core_Mat_n_1depth", "_ZNK2cv12MatAllocator5unmapEPNS_8UMatDataE", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_10", "WebPMemoryWriterClear", "Java_org_opencv_features2d_ORB_getMaxFeatures_10", "_ZN2cv22cornerEigenValsAndVecsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_ml_StatModel_train_11", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setTermCriteria_10", "Java_org_opencv_core_Mat_n_1Mat__JII", "Java_org_opencv_core_Mat_n_1zeros__DDI", "_ZN2cv5MatOpC1Ev", "_ZNK2cv7MatExpr5crossERKNS_3MatE", "_ZN2cv10bitwise_orERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "cvCalcOpticalFlowPyrLK", "WebPValidateConfig", "_ZNK2cv17DescriptorMatcher19getTrainDescriptorsEv", "Java_org_opencv_ml_StatModel_train_12", "Java_org_opencv_photo_CalibrateRobertson_setThreshold_10", "_ZNK2cv3dnn19experimental_dnn_v43Net14getLayerShapesERKSt6vectorIiSaIiEEiRS3_IS5_SaIS5_EESA_", "Java_org_opencv_imgproc_Subdiv2D_getLeadingEdgeList_10", "Java_org_opencv_features2d_BRISK_getDefaultName_10", "_ZNK2cv11_InputArray8channelsEi", "_ZN2cv12VideoCapturersERNS_3MatE", "_ZN2cv17validateDisparityERKNS_17_InputOutputArrayERKNS_11_InputArrayEiii", "Java_org_opencv_dnn_Net_getLayerNames_10", "_ZN2cv3Mat9adjustROIEiiii", "Java_org_opencv_ml_ParamGrid_get_1logStep_10", "_ZN2cv12buildPyramidERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv6imreadERKNS_6StringEi", "_ZN2cv3hal6max32sEPKijS2_jPijiiPv", "_ZN3tbb16spin_rw_mutex_v323internal_acquire_writerEv", "Java_org_opencv_imgproc_Imgproc_warpPerspective_10", "_ZNK2cv4cuda10DeviceInfo19maxTexture1DLayeredEv", "cvRemap", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_11", "Java_org_opencv_imgproc_Imgproc_pyrDown_10", "_ZN2cv3hal5max8sEPKajS2_jPajiiPv", "_ZN2cv5instr18useInstrumentationEv", "_ZN2cv4cuda5EventC1ENS1_11CreateFlagsE", "_ZN2cv14setWindowTitleERKNS_6StringES2_", "cvStopLoop", "Java_org_opencv_video_FarnebackOpticalFlow_setWinSize_10", "_ZNK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "WebPEncodeBGR", "_ZNK2cv12_OutputArray15getGpuMatVecRefEv", "__gnu_f2h_ieee", "_ZNK2cv9Exception4whatEv", "Java_org_opencv_features2d_DescriptorExtractor_read_10", "_ZN2cv4normERKNS_11_InputArrayES2_iS2_", "cvRANSACUpdateNumIters", "Java_org_opencv_ml_TrainData_getDefaultSubstValues_10", "Java_org_opencv_core_Mat_n_1empty", "_ZN3tbb8internal6market7releaseEbb", "_ZN2cv11FileStorageC2Ev", "_ZN2cv3hal14cvtBGRtoBGR5x5EPKhjPhjiiibi", "Java_org_opencv_dnn_Net_getFLOPS_12", "Java_org_opencv_core_Mat_nGetB", "_ZN2cv22createCalibrateDebevecEifb", "_ZNK2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayES3_RSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "cvMatchShapes", "Java_org_opencv_core_Core_log_10", "_ZN2cv5instr21setUseInstrumentationEb", "Java_org_opencv_features2d_ORB_create_11", "_ZNK2cv7MatExpr3dotERKNS_3MatE", "_ZN2cv13insertChannelERKNS_11_InputArrayERKNS_17_InputOutputArrayEi", "_ZN9CvLevMarqD2Ev", "_ZNK2cv10softdoublemlERKS0_", "_ZNK2cv4cuda10DeviceInfo13totalConstMemEv", "Java_org_opencv_ml_TrainData_getTrainSamples_10", "_ZN2cv8Subdiv2D11findNearestENS_6Point_IfEEPS2_", "_ZN2cv9SparseMatC2ERKNS_3MatE", "cvReleaseGraphScanner", "Java_org_opencv_ml_NormalBayesClassifier_delete", "Java_org_opencv_ml_ANN_1MLP_getRpropDWPlus_10", "cvClearHist", "Java_org_opencv_core_Mat_n_1eye__DDI", "Java_org_opencv_core_Core_solve_11", "_ZNK2cv4cuda10DeviceInfo24maxSurfaceCubemapLayeredEv", "_ZN2cvngERKNS_3MatE", "cvClearND", "_ZN2cv3ogl6BufferC2ERKNS_11_InputArrayENS1_6TargetEb", "_ZN2cv3ocl12PlatformInfoC2Ev", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_10", "Java_org_opencv_calib3d_Calib3d_validateDisparity_10", "Java_org_opencv_ml_LogisticRegression_setTermCriteria_10", "_ZN2cv9Feature2DD1Ev", "_ZNK2cv11_InputArray12getOGlBufferEv", "_ZN2cv8internal17ComputeHomographyENS_3MatES1_", "_ZN2cv12KalmanFilterC2Eiiii", "_ZNK2cv10softdoublemiERKS0_", "_ZN2cv3dnn19experimental_dnn_v416readNetFromTorchERKNS_6StringEb", "Java_org_opencv_ml_TrainData_getTestSampleIdx_10", "_ZN3tbb8internal17generic_scheduler14free_schedulerEv", "_ZN3tbb8internal17generic_schedulerC1ERNS0_6marketE", "cvCompleteSymm", "_ZN2cv4cuda9setDeviceEi", "Java_org_opencv_features2d_BOWTrainer_clear_10", "_ZNK2cv12_OutputArray15getOGlBufferRefEv", "__eqdf2", "_ZN2cv5utils5trace7details12TraceManagerC1Ev", "_ZNK2cv3Mat7reshapeEiiPKi", "__gnu_Unwind_Resume_or_Rethrow", "_ZN2cv3Mat10deallocateEv", "Java_org_opencv_ml_ANN_1MLP_setTermCriteria_10", "Java_org_opencv_objdetect_HOGDescriptor_checkDetectorSize_10", "Java_org_opencv_videoio_VideoWriter_VideoWriter_11", "_ZN2cv3dnn19experimental_dnn_v410BlankLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_features2d_Params_set_1minArea_10", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_10", "Java_org_opencv_core_Mat_n_1row", "cvGetWindowName", "Java_org_opencv_ml_TrainData_getNTrainSamples_10", "_ZNK2cv3ocl7Program3ptrEv", "_ZN2cv5utils2fs15createDirectoryERKNS_6StringE", "Java_org_opencv_core_Core_setNumThreads_10", "Java_org_opencv_core_Core_phase_11", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_10", "_ZN2cv3ogl3ocl23initializeContextFromGLEv", "cvCreateSeqBlock", "_ZN2cv13HOGDescriptor24getDefaultPeopleDetectorEv", "_ZNK2cv3ocl6Device12localMemTypeEv", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionERKSt6vectorIiSaIiEERS5_RS3_IjSaIjEESB_", "_ZN2cv3ocl10haveAmdFftEv", "_ZNK2cv17CommandLineParser11printErrorsEv", "Java_org_opencv_imgproc_Imgproc_erode_10", "cvPointSeqFromMat", "_ZN2cv13redirectErrorEPFiiPKcS1_S1_iPvES2_PS2_", "Java_org_opencv_imgproc_Imgproc_arrowedLine_10", "Java_org_opencv_ml_KNearest_setIsClassifier_10", "_ZNK2cv12_OutputArray6assignERKNS_4UMatE", "_ZN2cv5flann14LshIndexParamsC2Eiii", "_ZN2cv19createHanningWindowERKNS_12_OutputArrayENS_5Size_IiEEi", "_ZN2cv12ellipse2PolyENS_6Point_IiEENS_5Size_IiEEiiiiRSt6vectorIS1_SaIS1_EE", "__gnu_uldivmod_helper", "Java_org_opencv_photo_AlignMTB_setMaxBits_10", "_ZN2cv3hal7gemm32fEPKfjS2_jfS2_jfPfjiiii", "_ZN2cv2ml6SVMSGD4loadERKNS_6StringES4_", "_ZN2cv7hconcatEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DMipmapEv", "cvAcc", "_ZN2cv18SimpleBlobDetector6ParamsC2Ev", "Java_org_opencv_ml_SVM_getP_10", "_ZN2cv2ml7ANN_MLP15setAnnealFinalTEd", "cvReleaseSparseMat", "cvCheckHardwareSupport", "Java_org_opencv_ml_ANN_1MLP_getWeights_10", "Java_org_opencv_imgproc_Imgproc_undistort_10", "cvCreateKalman", "Java_org_opencv_imgproc_Imgproc_dilate_12", "_ZN2cvmlERKNS_3MatES2_", "_ZN2cv3hal5xor8uEPKhjS2_jPhjiiPv", "Java_org_opencv_imgproc_Imgproc_dilate_10", "_ZN2cv8internal18WriteStructContextD1Ev", "_ZN2cv15calcCovarMatrixEPKNS_3MatEiRS0_S3_ii", "_ZNK2cv8Subdiv2D6Vertex6isfreeEv", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_11", "Java_org_opencv_core_Core_compare_11", "Java_org_opencv_ml_TrainData_getSampleWeights_10", "_ZN2cv11FileStorageD0Ev", "_ZN2cv9boxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "_ZNK2cv12_OutputArray9fixedTypeEv", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_11", "Java_org_opencv_features2d_AKAZE_getThreshold_10", "_ZN2cv2ml6DTrees5SplitC2Ev", "Java_org_opencv_calib3d_Calib3d_stereoRectify_11", "Java_org_opencv_features2d_Params_set_1minDistBetweenBlobs_10", "Java_org_opencv_dnn_Net_setInputsNames_10", "Java_org_opencv_photo_Photo_createCalibrateDebevec_10", "_ZN2cv11RNG_MT19937C1Ej", "_ZNK2cv3ocl6Device22nativeVectorWidthShortEv", "Java_org_opencv_core_Mat_n_1clone", "_ZN3tbb18captured_exceptionD0Ev", "_ZNK2cv5MatOp11elementWiseERKNS_7MatExprE", "Java_org_opencv_features2d_GFTTDetector_create_11", "_ZNK2cv4cuda10DeviceInfo12minorVersionEv", "cvSeqPop", "Java_org_opencv_imgproc_Imgproc_convertMaps_11", "cvLoadHaarClassifierCascade", "cvHaveImageWriter", "Java_org_opencv_core_Core_subtract_14", "__gnu_thumb1_case_shi", "_ZN2cv15calcBackProjectERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayERKS3_IfSaIfEEd", "Java_org_opencv_video_DualTVL1OpticalFlow_getScalesNumber_10", "Java_org_opencv_features2d_Feature2D_detect_13", "Java_org_opencv_features2d_Params_set_1minRepeatability_10", "WebPDecodeRGBInto", "Java_org_opencv_core_Mat_n_1create__JIII", "cvSetData", "_ZN2cv12VideoCaptureC2ERKNS_6StringE", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEx", "_ZN2cv11RNG_MT19937clEv", "cvSliceLength", "_ZN2cv2ml6RTrees4loadERKNS_6StringES4_", "Java_org_opencv_video_DualTVL1OpticalFlow_getInnerIterations_10", "Java_org_opencv_features2d_GFTTDetector_getHarrisDetector_10", "_ZN2cv17DescriptorMatcherD1Ev", "_ZN10__cxxabiv116__enum_type_infoD0Ev", "Java_org_opencv_core_Mat_nPutD", "cvGetImageCOI", "_ZN2cv16AVIReadContainer9parseStrlEcNS_6CodecsE", "_ZN2cv5utils2fs8FileLock4lockEv", "_ZSt15set_new_handlerPFvvE", "Java_org_opencv_imgproc_Imgproc_getPerspectiveTransform_10", "Java_org_opencv_core_Core_inRange_10", "_Unwind_GetLanguageSpecificData", "_ZN2cv11FileStorage20getDefaultObjectNameERKNS_6StringE", "_ZNK2cv3ocl6Device18globalMemCacheSizeEv", "_ZNK2cv4cuda10DeviceInfo12maxTexture2DEv", "_ZN2cv2ml6DTrees6createEv", "Java_org_opencv_core_Core_calcCovarMatrix_10", "Java_org_opencv_core_Core_completeSymm_10", "_ZN2cv3hal14addWeighted16uEPKtjS2_jPtjiiPv", "cvConvertPointsHomogeneous", "_ZN2cv22SimpleBlobDetectorImplC2ERKNS_18SimpleBlobDetector6ParamsE", "_ZN2cv15KeyPointsFilter17runByKeypointSizeERSt6vectorINS_8KeyPointESaIS2_EEff", "_ZN2cv3LDAC1Ei", "Java_org_opencv_core_Core_completeSymm_11", "Java_org_opencv_features2d_Feature2D_defaultNorm_10", "_ZNK2cv4UMat9convertToERKNS_12_OutputArrayEidd", "Java_org_opencv_core_Core_convertFp16_10", "Java_org_opencv_dnn_Layer_get_1type_10", "_ZN2cv7MatExprC2ERKNS_3MatE", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_12", "_ZNK2cv5MatOp8subtractERKNS_7MatExprES3_RS1_", "_ZN2cv3hal6max32fEPKfjS2_jPfjiiPv", "_ZN2cv21DetectionBasedTrackerC2ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "Java_org_opencv_video_DualTVL1OpticalFlow_getLambda_10", "_ZN2cv14solvePnPRansacERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bifdS5_i", "_ZN3tbb8internal6market7cleanupERN3rml3jobE", "Java_org_opencv_photo_MergeMertens_process_11", "_ZN2cv26createGeneralizedHoughGuilEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_11", "_ZNK2cv12MatAllocator4copyEPNS_8UMatDataES2_iPKjS4_S4_S4_S4_b", "_ZNK2cv17CascadeClassifier5emptyEv", "_ZN3tbb8internal17generic_scheduler5spawnERNS_4taskERPS2_", "_ZN2cv3dnn19experimental_dnn_v412LayerFactory13registerLayerERKNS_6StringEPFNS_3PtrINS1_5LayerEEERNS1_11LayerParamsEE", "_ZN2cv3ocl14vecopTypeToStrEi", "Java_org_opencv_imgproc_Imgproc_connectedComponents_11", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_10", "_ZNK2cv9Feature2D14getDefaultNameEv", "_ZN3tbb4task28internal_decrement_ref_countEv", "_ZN10__cxxabiv119__foreign_exceptionD1Ev", "__gnu_h2f_ieee", "Java_org_opencv_core_Core_multiply_14", "cvSave", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterBinEii", "_ZN2cv3hal15cvtBGR5x5toGrayEPKhjPhjiii", "_ZN2cv18SimpleBlobDetector6createERKNS0_6ParamsE", "_ZNK3tbb8internal27allocate_continuation_proxy8allocateEj", "cvCalcArrBackProject", "_ZN2cv3ocl6KernelC2EPKcRKNS0_7ProgramE", "_ZN2cv4normERKNS_11_InputArrayEiS2_", "Java_org_opencv_features2d_DescriptorMatcher_match_10", "_ZN2cv3ocl8PlatformC1ERKS1_", "_ZN2cv16AVIReadContainer21parseAviWithFrameListERSt5dequeISt4pairIyjESaIS3_EENS_6CodecsE", "Java_org_opencv_ml_StatModel_getVarCount_10", "Java_org_opencv_dnn_Net_getParam_10", "cvFindStereoCorrespondenceBM", "Java_org_opencv_core_Mat_n_1Mat__IIIDDDD", "Java_org_opencv_ml_KNearest_findNearest_11", "Java_org_opencv_features2d_AKAZE_getDescriptorSize_10", "_ZN2cv10BriskLayerC1ERKS0_i", "_ZN3tbb8internal19allocate_root_proxy8allocateEj", "_ZNKSt8bad_cast4whatEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarInit_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_11", "Java_org_opencv_video_FarnebackOpticalFlow_getNumIters_10", "_ZN2cv15NAryMatIteratorppEi", "__ledf2", "_ZN2cv11RNG_MT199374seedEj", "Java_org_opencv_ml_EM_getCovs_10", "_ZN2cv14setTrackbarMinERKNS_6StringES2_i", "_ZN2cv3ocl6DeviceC2EPv", "Java_org_opencv_core_Core_absdiff_10", "_ZN2cv5utils2fs8FileLock6unlockEv", "_ZNK2cv3ocl6Device16memBaseAddrAlignEv", "_ZNK2cv3dnn19experimental_dnn_v43Net8getFLOPSERKSt6vectorIiSaIiEE", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMax_10", "Java_org_opencv_dnn_Net_setPreferableTarget_10", "_ZNK2cv5MatOp12augAssignAndERKNS_7MatExprERNS_3MatE", "_ZNK2cv2ml7ANN_MLP17getAnnealInitialTEv", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_11", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_setAnnealFinalT_10", "_ZN2cv7fisheye15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_", "_ZN2cv3hal5cmp8uEPKhjS2_jPhjiiPv", "cvRunningAvg", "Java_org_opencv_core_Core_scaleAdd_10", "_ZN2cv16cvtColorTwoPlaneERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "cvGraphRemoveVtx", "Java_org_opencv_core_Core_PCAProject_10", "_ZN2cv5BRISK6createEiiRKSt6vectorIfSaIfEERKS1_IiSaIiEEffS9_", "_ZN2cv3Mat5zerosENS_5Size_IiEEi", "_Z6cvCeilRKN2cv9softfloatE", "_ZN2cv3hal4or8uEPKhjS2_jPhjiiPv", "_ZN2cv9HuMomentsERKNS_7MomentsERKNS_12_OutputArrayE", "Java_org_opencv_photo_MergeMertens_delete", "Java_org_opencv_core_Core_convertScaleAbs_11", "_ZN2cv21DetectionBasedTracker15InnerParametersC1Ev", "_ZN2cv17FlannBasedMatcher3addERKNS_11_InputArrayE", "_ZN2cv10BriskLayer14getAgastPointsEiRSt6vectorINS_8KeyPointESaIS2_EE", "__gnu_ldivmod_helper", "Java_org_opencv_video_DenseOpticalFlow_calc_10", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_11", "Java_org_opencv_imgproc_Imgproc_floodFill_11", "Java_org_opencv_features2d_ORB_setFastThreshold_10", "Java_org_opencv_features2d_MSER_getPass2Only_10", "Java_org_opencv_core_Mat_n_1diag__J", "cvError", "Java_org_opencv_features2d_ORB_getEdgeThreshold_10", "_ZN2cv3ogl6Buffer7releaseEv", "cvSeqRemove", "_ZN2cv2ml6DTrees4loadERKNS_6StringES4_", "Java_org_opencv_dnn_DictValue_DictValue_12", "_ZNK3tbb13improper_lock4whatEv", "cvGetDiag", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEd", "Java_org_opencv_dnn_Dnn_blobFromImages_11", "_ZN2cv18getAffineTransformERKNS_11_InputArrayES2_", "Java_org_opencv_imgproc_Imgproc_remap_11", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayES4_b", "_ZN2cv4cuda5Event17waitForCompletionEv", "Java_org_opencv_ml_TrainData_getTrainNormCatResponses_10", "_ZNK2cv9softfloatgtERKS0_", "_ZN2cv3hal5min8uEPKhjS2_jPhjiiPv", "Java_org_opencv_core_Core_multiply_15", "Java_org_opencv_calib3d_StereoMatcher_getNumDisparities_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSize_10", "Java_org_opencv_ml_SVM_setTermCriteria_10", "_ZN2cv5flann5Index7releaseEv", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EEdiiNS_5Size_IiEESB_", "Java_org_opencv_photo_TonemapDurand_getContrast_10", "WebPPictureHasTransparency", "_ZN2cv15sampsonDistanceERKNS_11_InputArrayES2_S2_", "_ZN2cv3ocl7Image2D14canCreateAliasERKNS_4UMatE", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_iibd", "_ZN2cv13batchDistanceERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS5_iiS2_ib", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKNS_3MatE", "_ZN2cv3dnn19experimental_dnn_v414blobFromImagesERKNS_11_InputArrayEdNS_5Size_IiEERKNS_7Scalar_IdEEbb", "_ZN2cv17FlannBasedMatcherC1ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "Java_org_opencv_android_Utils_nBitmapToMat", "Java_org_opencv_imgproc_CLAHE_collectGarbage_10", "Java_org_opencv_ml_TrainData_getResponseType_10", "_ZN2cv17CascadeClassifierC1ERKNS_6StringE", "_ZNK2cv5MatOp3absERKNS_7MatExprERS1_", "_ZN2cv5utils2fs4globERKNS_6StringES4_RSt6vectorIS2_SaIS2_EEbb", "cvTriangulatePoints", "WebPEncodeLosslessRGB", "Java_org_opencv_core_Mat_nPutB", "Java_org_opencv_core_Core_batchDistance_10", "cvChangeSeqBlock", "__divsi3", "_ZN2cv3hal10absdiff16uEPKtjS2_jPtjiiPv", "Java_org_opencv_imgproc_Imgproc_pyrDown_11", "_ZN2cv3ogl13unmapGLBufferERNS_4UMatE", "Java_org_opencv_calib3d_Calib3d_recoverPose_16", "_ZNK2cv5MatOp11augAssignOrERKNS_7MatExprERNS_3MatE", "cvStartReadRawData", "_ZN2cv11FileStorageC2ERKNS_6StringEiS3_", "Java_org_opencv_imgproc_Imgproc_createCLAHE_11", "Java_org_opencv_calib3d_Calib3d_findHomography_12", "Java_org_opencv_features2d_Params_get_1maxCircularity_10", "_ZN2cv3ipp12setUseIPP_NEEb", "_ZN2cv3ocl6Device3setEPv", "Java_org_opencv_calib3d_Calib3d_triangulatePoints_10", "_ZN2cv14createAlignMTBEiib", "_ZN2cv3hal5DFT2D6createEiiiiiii", "Java_org_opencv_core_Core_absdiff_11", "Java_org_opencv_ml_EM_load_11", "Java_org_opencv_photo_Photo_createTonemapMantiuk_10", "Java_org_opencv_calib3d_Calib3d_distortPoints_11", "_ZN2cv3hal2LUEPfjiS1_ji", "_ZN2cv3dnn19experimental_dnn_v45Layer13initInfEngineERKSt6vectorINS_3PtrINS1_14BackendWrapperEEESaIS6_EE", "Java_org_opencv_core_TickMeter_reset_10", "Java_org_opencv_imgproc_Imgproc_getFontScaleFromHeight_11", "Java_org_opencv_dnn_Net_enableFusion_10", "_ZNK2cv8Subdiv2D7edgeOrgEiPNS_6Point_IfEE", "Java_org_opencv_imgproc_Imgproc_grabCut_11", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEiRNS0_12ObjectStatusE", "_ZN2cv12VideoCapture4readERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Subdiv2D_getTriangleList_10", "Java_org_opencv_objdetect_HOGDescriptor_setSVMDetector_10", "Java_org_opencv_calib3d_StereoSGBM_setPreFilterCap_10", "_ZN2cv3hal23cvtRGBAtoMultipliedRGBAEPKhjPhjii", "cvReleaseMat", "_ZN2cv7fisheye13stereoRectifyERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEES3_S3_RKNS_12_OutputArrayESA_SA_SA_SA_iS7_dd", "Java_org_opencv_video_SparsePyrLKOpticalFlow_delete", "WebPDecodeYUVInto", "_ZN3tbb8internal14observer_proxy9is_globalEv", "_ZN2cv5MutexC1ERKS0_", "_ZN2cv3hal8merge64sEPPKxPxii", "_ZN2cv13getRectSubPixERKNS_11_InputArrayENS_5Size_IiEENS_6Point_IfEERKNS_12_OutputArrayEi", "Java_org_opencv_features2d_Params_set_1minThreshold_10", "Java_org_opencv_features2d_MSER_setMaxArea_10", "Java_org_opencv_video_FarnebackOpticalFlow_getFastPyramids_10", "_ZNK2cv9softfloatmlERKS0_", "_ZN10__cxxabiv117__pbase_type_infoD0Ev", "cvDecomposeProjectionMatrix", "_ZN2cv3ocl5Queue6finishEv", "_ZN2cv3ipp13getIppVersionEv", "_ZN2cv5Mutex4lockEv", "Java_org_opencv_video_Video_findTransformECC_12", "Java_org_opencv_features2d_Params_get_1minDistBetweenBlobs_10", "Java_org_opencv_imgproc_Imgproc_morphologyEx_12", "Java_org_opencv_video_BackgroundSubtractorMOG2_getDetectShadows_10", "_ZN2cv8filter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEdi", "_ZN2cv11RQDecomp3x3ERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_", "Java_org_opencv_video_FarnebackOpticalFlow_getNumLevels_10", "_ZN2cv3MataSERKNS_7Scalar_IdEE", "_ZN2cv10softdoubleC1Ei", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEii", "Java_org_opencv_videoio_VideoWriter_open_11", "cvQueryFrame", "_ZN2cv3hal5sub8sEPKajS2_jPajiiPv", "Java_org_opencv_features2d_Feature2D_empty_10", "_ZN2cv15NAryMatIteratorC2Ev", "_ZNK2cv3ocl6Device21intelSubgroupsSupportEv", "_ZN2cv17getWindowPropertyERKNS_6StringEi", "Java_org_opencv_video_BackgroundSubtractorMOG2_getNMixtures_10", "cvCornerEigenValsAndVecs", "_ZN2cv16BOWKMeansTrainerD2Ev", "_ZN2cv11FileStorageC1EP13CvFileStorageb", "_ZN2cv16ParallelLoopBodyD1Ev", "_ZN7cvflann17set_distance_typeENS_16flann_distance_tEi", "_ZN2cvlsERNS_11FileStorageERKNS_6StringE", "_ZN2cv10BOWTrainerC2Ev", "_ZN2cv15KeyPointsFilter16runByImageBorderERSt6vectorINS_8KeyPointESaIS2_EENS_5Size_IiEEi", "_ZNK2cv4cuda10DeviceInfo12maxTexture3DEv", "_ZN2cv3dnn19experimental_dnn_v45Layer10initHalideERKSt6vectorINS_3PtrINS1_14BackendWrapperEEESaIS6_EE", "Java_org_opencv_core_Core_Mahalanobis_10", "_ZN2cv20perspectiveTransformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv3hal6resizeEiPKhjiiPhjiiddi", "_ZN2cv3logERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv10BOWTrainerC1Ev", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_10", "Java_org_opencv_photo_TonemapDurand_setSigmaColor_10", "_ZN2cvanERKNS_3MatES2_", "_ZN2cv12GaussianBlurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv21DetectionBasedTracker10ParametersC2Ev", "_ZN2cv15KeyPointsFilter10retainBestERSt6vectorINS_8KeyPointESaIS2_EEi", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_11", "_ZN2cv6String10deallocateEv", "_ZN3tbb8internal14observer_proxy15get_v6_observerEv", "_ZN3tbb18task_group_context19capture_fp_settingsEv", "_ZN2cv3hal5not8uEPKhjS2_jPhjiiPv", "_ZNK2cv13HOGDescriptor15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS3_EERS1_IdSaIdEEid", "_ZN2cv17CommandLineParserD1Ev", "_ZNK2cv4cuda10DeviceInfo11queryMemoryERjS2_", "_ZN2cv16AVIReadContainerC1Ev", "_ZNK2cv8Subdiv2D7getEdgeEii", "_ZN3tbb19task_scheduler_init27internal_blocking_terminateEb", "_ZN2cv7directx23convertToD3D11Texture2DERKNS_11_InputArrayEP15ID3D11Texture2D", "_ZN2cv9normalizeERKNS_11_InputArrayERKNS_17_InputOutputArrayEddiiS2_", "Java_org_opencv_video_BackgroundSubtractorMOG2_getComplexityReductionThreshold_10", "_ZN2cv3ocl5QueueD1Ev", "_ZN2cv8UMatDataD1Ev", "_ZN2cv3dnn19experimental_dnn_v43Net7forwardERKNS_12_OutputArrayERKNS_6StringE", "Java_org_opencv_video_DualTVL1OpticalFlow_create_10", "_ZN2cvleERKNS_3MatEd", "_ZN2cv9AlgorithmD2Ev", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_12", "_ZN2cv11FileStorage7releaseEv", "_ZNK2cv3ocl6Device15maxComputeUnitsEv", "_ZN2cv4UMat4onesEiii", "Java_org_opencv_dnn_Net_getLayer_10", "_ZN2cv3Mat15getStdAllocatorEv", "Java_org_opencv_videoio_VideoWriter_open_13", "_ZN2cv3Mat6createEiPKii", "Java_org_opencv_ml_NormalBayesClassifier_load_10", "Java_org_opencv_ml_SVM_setClassWeights_10", "Java_org_opencv_video_SparseOpticalFlow_calc_10", "Java_org_opencv_dnn_DictValue_getStringValue_11", "_ZN2cv7directx3ocl32initializeContextFromD3D10DeviceEP12ID3D10Device", "Java_org_opencv_imgproc_Imgproc_cvtColorTwoPlane_10", "cvCountNonZero", "_ZN2cv8clipLineENS_5Size_IxEERNS_6Point_IxEES4_", "_ZN2cv3dnn19experimental_dnn_v43Net19setPreferableTargetEi", "Java_org_opencv_features2d_BOWTrainer_add_10", "_ZN3tbb16spin_rw_mutex_v327internal_try_acquire_writerEv", "_ZN10__cxxabiv117__pbase_type_infoD2Ev", "_ZN2cv24currentParallelFrameworkEv", "_ZN2cv20saveWindowParametersERKNS_6StringE", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_11", "_ZN2cv8subtractERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "Java_org_opencv_core_Mat_n_1checkVector__JIIZ", "_ZNK2cv3ocl6Device15image3DMaxDepthEv", "Java_org_opencv_core_TickMeter_delete", "_ZN2cv5pyrUpERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv15NAryMatIteratorppEv", "_ZN2cv5flann5Index4loadERKNS_11_InputArrayERKNS_6StringE", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERSt6vectorIS4_INS_8KeyPointESaIS5_EESaIS7_EES3_", "_ZN2cv3ocl13ProgramSourceC2ERKNS_6StringES4_S4_S4_", "Java_org_opencv_imgproc_Imgproc_warpAffine_12", "_ZN2cvplERKNS_3MatES2_", "_ZN2cv28CirclesGridFinderParameters2C2Ev", "_ZN3tbb10interface78internal15task_arena_base24internal_max_concurrencyEPKNS0_10task_arenaE", "Java_org_opencv_calib3d_Calib3d_undistortImage_11", "Java_org_opencv_ml_SVM_getC_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_apply_11", "cvCheckContourConvexity", "_ZNK2cv9softfloatltERKS0_", "Java_org_opencv_calib3d_Calib3d_recoverPose_12", "_ZNK2cv4cuda10DeviceInfo11maxGridSizeEv", "_ZN2cv11compareHistERKNS_11_InputArrayES2_i", "cvMinEnclosingCircle", "cvInitMatHeader", "_ZNK2cv3ocl6Device25preferredVectorWidthShortEv", "Java_org_opencv_video_FarnebackOpticalFlow_getWinSize_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1svmDetector_10", "Java_org_opencv_features2d_Feature2D_descriptorSize_10", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_10", "_ZN2cv5utils5trace7details12TraceManagerD1Ev", "_ZN2cvorERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv3ocl8PlatformC2ERKS1_", "_ZN2cv17CascadeClassifierC2Ev", "cvSetOpenGlDrawCallback", "_ZN2cv3logERKNS_10softdoubleE", "cvStartWindowThread", "_ZN2cv16BOWKMeansTrainerC1EiRKNS_12TermCriteriaEii", "_ZN2cv17AVIWriteContainer13putStreamByteEi", "_ZN9CvLevMarqC2Eii14CvTermCriteriab", "_ZN9_IplImageC2ERKN2cv3MatE", "_ZN2cv7noArrayEv", "_ZN2cv4UMat5zerosEiii", "_ZN2cv5utils2fs8FileLockC1EPKc", "_ZN2cv3hal7invSqrtEPKfPfi", "_ZN2cv30createLMeDSPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEidi", "WebPGetDecoderVersion", "_ZN2cv3hal6mul16sEPKsjS2_jPsjiiPv", "Java_org_opencv_ml_Boost_setBoostType_10", "_ZN2cv3dnn19experimental_dnn_v45LayerC2ERKNS1_11LayerParamsE", "_ZN2cv3hal9magnitudeEPKdS2_Pdi", "Java_org_opencv_ml_SVM_getTermCriteria_10", "_ZN2cv3ocl7Context6createEv", "_ZN2cv3hal11SepFilter2D6createEiiiPhiS2_iiidi", "_ZN2cv17AVIWriteContainer12jflushStreamEji", "cvCalibrateCamera2", "cvConvertImage", "Java_org_opencv_ml_TrainData_getVarSymbolFlags_10", "Java_org_opencv_video_Video_findTransformECC_11", "_ZNK2cv4cuda10DeviceInfo24kernelExecTimeoutEnabledEv", "_ZN2cv4cuda25getCudaEnabledDeviceCountEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_10", "_ZN2cv7sortIdxERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv11FileStorage5writeERKNS_6StringERKNS_11_InputArrayE", "cvConvertScaleAbs", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork4stopEv", "_ZN2cv10haveOpenVXEv", "_ZN2cv19connectedComponentsERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_core_Mat_n_1channels", "_ZN2cv12KalmanFilter7predictERKNS_3MatE", "Java_org_opencv_features2d_DescriptorMatcher_create_11", "_ZN2cv3ocl6Kernel12runProfilingEiPjS2_RKNS0_5QueueE", "_ZN3tbb8internal18concurrent_monitorD2Ev", "Java_org_opencv_ml_LogisticRegression_getIterations_10", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_10", "Java_org_opencv_ml_SVM_getSupportVectors_10", "Java_org_opencv_ml_ANN_1MLP_getBackpropMomentumScale_10", "Java_org_opencv_photo_CalibrateRobertson_getMaxIter_10", "_ZN2cv3ocl6KernelC1ERKS1_", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_11", "_ZN10__cxxabiv121__vmi_class_type_infoD1Ev", "_ZNK2cv17DescriptorMatcher10checkMasksERKNS_11_InputArrayEi", "__gnu_Unwind_Save_WMMXD", "cvErrorFromIppStatus", "_ZN3tbb8internal8governor16assume_schedulerEPNS0_17generic_schedulerE", "_ZNK2cv13HOGDescriptor5writeERNS_11FileStorageERKNS_6StringE", "cvReleaseFileStorage", "_ZN2cv3hal3logEPKfPfi", "_ZN3tbb8internal8governor6is_setEPNS0_17generic_schedulerE", "_ZN3tbb8internal13observer_list6insertEPNS0_14observer_proxyE", "Java_org_opencv_core_Mat_n_1cols", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD2Ev", "_ZN3tbb8internal14__TBB_InitOnce7add_refEv", "_ZN3tbb8internal6market28mandatory_concurrency_enableEPNS0_5arenaE", "Java_org_opencv_core_Core_copyMakeBorder_10", "_ZN2cv3dnn19experimental_dnn_v43Net14setInputsNamesERKSt6vectorINS_6StringESaIS4_EE", "_ZNK2cv5BRISK14getDefaultNameEv", "Java_org_opencv_video_KalmanFilter_get_1gain_10", "Java_org_opencv_photo_MergeRobertson_process_10", "_ZN2cv5instr8getFlagsEv", "Java_org_opencv_video_DualTVL1OpticalFlow_setScalesNumber_10", "_ZN3tbb8internal3rml11tbb_factory5closeEv", "Java_org_opencv_core_Core_useIPP_10", "_ZN2cvgtEdRKNS_3MatE", "_ZN2cv28rotatedRectangleIntersectionERKNS_11RotatedRectES2_RKNS_12_OutputArrayE", "_ZNK2cv13HOGDescriptor17getDescriptorSizeEv", "__gnu_unwind_execute", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEPPKfdb", "Java_org_opencv_dnn_Dnn_readNetFromTorch_10", "_ZN2cv9softfloatC2Ei", "_ZN2cv3hal6sub16uEPKtjS2_jPtjiiPv", "_ZN2cv3ocl7Context7getProgERKNS0_13ProgramSourceERKNS_6StringERS5_", "cvMultiplyAcc", "Java_org_opencv_dnn_Net_getMemoryConsumption_12", "Java_org_opencv_imgproc_Imgproc_invertAffineTransform_10", "cvCreateMemStorage", "_ZNK2cv3ocl6Device18deviceVersionMajorEv", "_ZN3tbb8internal6market22insert_arena_into_listERNS0_5arenaE", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayE", "Java_org_opencv_ml_TrainData_delete", "cvRandShuffle", "Java_org_opencv_imgproc_Imgproc_Laplacian_10", "cvGetImageROI", "_ZNK2cv13HOGDescriptor17checkDetectorSizeEv", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_10", "Java_org_opencv_photo_MergeMertens_setSaturationWeight_10", "Java_org_opencv_video_DualTVL1OpticalFlow_setScaleStep_10", "_ZNK2cv3ocl6Device17maxClockFrequencyEv", "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKPi", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_10", "cvSobel", "cvCreateSeq", "_ZN2cv4meanERKNS_11_InputArrayES2_", "_ZNK2cv4UMat3dotERKNS_11_InputArrayE", "_ZN2cv3hal6add64fEPKdjS2_jPdjiiPv", "Java_org_opencv_core_Core_reduce_10", "_ZN2cv7inRangeERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZN2cv6imshowERKNS_6StringERKNS_3ogl9Texture2DE", "_ZN2cv12VideoCapture4openEii", "_ZN2cv3ocl6DeviceC2ERKS1_", "Java_org_opencv_photo_MergeMertens_getSaturationWeight_10", "_ZNK2cv3ocl6Device26preferredVectorWidthDoubleEv", "Java_org_opencv_calib3d_StereoBM_setPreFilterCap_10", "_ZN2cv6invertERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv9FormatterD0Ev", "_ZN2cv17DescriptorMatcher6createEi", "cvGetMat", "_ZN2cv18createMergeDebevecEv", "Java_org_opencv_core_Core_dct_10", "_ZN2cv8KeyPoint7convertERKSt6vectorINS_6Point_IfEESaIS3_EERS1_IS0_SaIS0_EEffii", "Java_org_opencv_android_Utils_nBitmapToMat2", "_ZN2cv9Feature2D16detectAndComputeERKNS_11_InputArrayES3_RSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayEb", "cvCalcCovarMatrix", "cvLaplace", "_ZN2cv7fisheye9calibrateERKNS_11_InputArrayES3_RKNS_5Size_IiEERKNS_17_InputOutputArrayESA_RKNS_12_OutputArrayESD_iNS_12TermCriteriaE", "WebPDecodeRGBAInto", "Java_org_opencv_video_KalmanFilter_predict_10", "_ZN2cv3hal13addWeighted8uEPKhjS2_jPhjiiPv", "_ZN2cv3ipp9setUseIPPEb", "_ZN2cv17AVIWriteContainer11getAVIIndexEiNS_10StreamTypeE", "_ZN2cv3ogl6BufferC2Ev", "Java_org_opencv_dnn_Net_getLayerTypes_10", "_ZN2cvgtERKNS_3MatEd", "_ZN2cv9SparseMat7newNodeEPKij", "_ZN2cv5flann5Index5buildERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZN2cvdvERKNS_7MatExprES2_", "_ZN2cv3ocl7Image2DD1Ev", "_Z6cvCeilRKN2cv10softdoubleE", "cvClipLine", "_ZN3tbb8internal17generic_schedulerC2ERNS0_6marketE", "Java_org_opencv_calib3d_StereoBM_setSmallerBlockSize_10", "_ZN2cv4cuda18registerPageLockedERNS_3MatE", "_ZN2cv4UMat6createEiPKiiNS_14UMatUsageFlagsE", "_ZNK2cv3ocl6Device21nativeVectorWidthLongEv", "_ZN3tbb8internal18call_itt_notify_v5EiPv", "Java_org_opencv_photo_AlignMTB_getMaxBits_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_10", "_ZN2cv10StereoSGBM6createEiiiiiiiiiii", "cvCbrt", "_ZNK2cv3ogl9Texture2D4bindEv", "_ZN2cv3MatC2ERKS0_PKNS_5RangeE", "_ZN2cv3ocl7Context6createEi", "_ZN2cv16FileNodeIteratorppEi", "_ZNK2cv3dnn19experimental_dnn_v43Net5emptyEv", "TBB_runtime_interface_version", "WebPEncodeRGB", "cvSeqPartition", "cvRepeat", "_ZN2cv18SimpleBlobDetector6Params4readERKNS_8FileNodeE", "_ZN2cv15stereoCalibrateERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayES5_S5_S5_NS_5Size_IiEES5_S5_RKNS_12_OutputArrayESA_SA_iNS_12TermCriteriaE", "Java_org_opencv_features2d_Params_get_1filterByCircularity_10", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_10", "_ZN2cv3ogl6Arrays16setTexCoordArrayERKNS_11_InputArrayE", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_13", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_14", "_ZN2cv4readERKNS_8FileNodeERNS_9SparseMatERKS3_", "_ZN2cvdvEdRKNS_3MatE", "_ZN2cv17agast_cornerScoreILi1EEEiPKhPKii", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_setVocabulary_10", "_ZN2cv3ocl18getOpenCLAllocatorEv", "_ZNK2cv3ocl6Device11addressBitsEv", "cvSort", "Java_org_opencv_core_Core_bitwise_1and_10", "_ZN2cv3ogl6Arrays14setNormalArrayERKNS_11_InputArrayE", "cvGetRectSubPix", "cvGetWindowHandle", "_ZN2cv6resizeERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN3tbb8internal6market33mandatory_concurrency_enable_implEPNS0_5arenaEPb", "WebPFree", "_ZN2cv5flann11IndexParams6setIntERKNS_6StringEi", "Java_org_opencv_core_TickMeter_getTimeMilli_10", "_ZN2cv25stereoRectifyUncalibratedERKNS_11_InputArrayES2_S2_NS_5Size_IiEERKNS_12_OutputArrayES7_d", "cvWriteRawDataBase64", "_ZN2cv3dnn19experimental_dnn_v43NetD1Ev", "_ZN2cv13mulTransposedERKNS_11_InputArrayERKNS_12_OutputArrayEbS2_di", "_ZN2cv2ml2EM6createEv", "Java_org_opencv_ml_TrainData_setTrainTestSplit_11", "Java_org_opencv_core_Mat_n_1cross", "_ZN2cv3ogl6Buffer11unmapDeviceERNS_4cuda6StreamE", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_putText_12", "Java_org_opencv_imgproc_Imgproc_findContours_10", "_ZN2cv3hal12cvtGraytoBGREPKhjPhjiiii", "_ZN2cv19connectedComponentsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_arrowedLine_11", "Java_org_opencv_imgproc_Imgproc_integral2_11", "_ZN2cv14phaseCorrelateERKNS_11_InputArrayES2_S2_Pd", "_ZNK2cv4UMat3invEi", "cvDCT", "_ZN2cv3dnn19experimental_dnn_v43Net7connectENS_6StringES3_", "_ZN3tbb8internal5arena7processERNS0_17generic_schedulerE", "_ZN3tbb8internal6market22set_active_num_workersEj", "Java_org_opencv_ml_ANN_1MLP_getAnnealCoolingRatio_10", "_ZN2cv3ocl25predictOptimalVectorWidthERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_NS0_17OclVectorStrategyE", "_ZNK2cv3Mat11checkVectorEiib", "_ZN2cv8KeyPoint7convertERKSt6vectorIS0_SaIS0_EERS1_INS_6Point_IfEESaIS7_EERKS1_IiSaIiEE", "_ZN2cv12denoise_TVL1ERKSt6vectorINS_3MatESaIS1_EERS1_di", "___Unwind_Backtrace", "_ZN2cv3hal13addWeighted8sEPKajS2_jPajiiPv", "Java_org_opencv_core_Mat_n_1submat", "_ZN2cv3ocl6DeviceaSERKS1_", "Java_org_opencv_imgproc_Imgproc_EMD_11", "Java_org_opencv_videoio_VideoWriter_VideoWriter_13", "_ZN2cv12useOptimizedEv", "_ZN2cv5Mutex6unlockEv", "Java_org_opencv_imgproc_Imgproc_initUndistortRectifyMap_10", "_ZNK2cv5flann5Index12getAlgorithmEv", "Java_org_opencv_core_Core_multiply_13", "WebPConfigInitInternal", "Java_org_opencv_ml_TrainData_getCatOfs_10", "_ZN3tbb8internal18dynamic_unlink_allEv", "_ZN2cv3minERKNS_3MatES2_RS0_", "Java_org_opencv_core_Core_invert_10", "_ZN2cvdvERKNS_7MatExprERKNS_3MatE", "_ZN3tbb8internal17generic_scheduler18nested_arena_entryEPNS0_5arenaEj", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_10", "Java_org_opencv_imgproc_Imgproc_ellipse_15", "_ZN2cv4cuda6StreamC2Ev", "cvMeanShift", "_ZNK3tbb10interface78internal15task_arena_base13internal_waitEv", "_ZN2cv4normERKNS_9SparseMatEi", "_ZN3tbb8internal3rml19make_private_serverERNS1_10tbb_clientE", "Java_org_opencv_ml_StatModel_calcError_10", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiddRNS0_6StreamE", "_ZN2cv10wrapperEMDERKNS_11_InputArrayES2_iS2_NS_3PtrIfEERKNS_12_OutputArrayE", "__fixdfsi", "cvReleaseMemStorage", "Java_org_opencv_core_Core_add_12", "_ZN2cv7hconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "cvStartLoop", "_ZN3tbb4task22spawn_and_wait_for_allERNS_9task_listE", "_ZN2cv10softdoubleC1Ej", "_ZN2cv22SimpleBlobDetectorImplC1ERKNS_18SimpleBlobDetector6ParamsE", "_ZNK2cv4cuda7HostMem18createGpuMatHeaderEv", "Java_org_opencv_imgproc_Imgproc_filter2D_10", "_ZN2cv5errorEiRKNS_6StringEPKcS4_i", "_ZN2cv21DetectionBasedTracker15InnerParametersC2Ev", "Java_org_opencv_core_Mat_n_1ones__DDI", "_ZNK2cv14DefaultDeleterI5CvMatEclEPS1_", "Java_org_opencv_ml_TrainData_getTestSampleWeights_10", "cvGetTickFrequency", "_ZN2cv3ocl7Program6createERKNS0_13ProgramSourceERKNS_6StringERS5_", "_ZN2cv3ogl6Arrays14setVertexArrayERKNS_11_InputArrayE", "cvGraphAddEdge", "cvNulDevReport", "_ZN2cv3ocl5QueueC1Ev", "Java_org_opencv_dnn_Dnn_blobFromImages_10", "Java_org_opencv_features2d_AKAZE_setNOctaveLayers_10", "Java_org_opencv_photo_Photo_stylization_11", "_ZN2cv5flann20AutotunedIndexParamsC2Effff", "Java_org_opencv_features2d_BOWTrainer_cluster_10", "_ZN3tbb8internal8governor18print_version_infoEv", "_ZN3tbb8internal5arena18has_enqueued_tasksEv", "cvPrevTreeNode", "_ZN2cv11imreadmultiERKNS_6StringERSt6vectorINS_3MatESaIS4_EEi", "__udivsi3", "_ZN3tbb18captured_exceptionD2Ev", "_ZN3tbb8internal17generic_scheduler10steal_taskERNS0_10arena_slotEi", "cvSum", "_ZN2cv3LDA7computeERKNS_11_InputArrayES3_", "_ZN2cv3dnn19experimental_dnn_v413blobFromImageERKNS_11_InputArrayEdRKNS_5Size_IiEERKNS_7Scalar_IdEEbb", "Java_org_opencv_objdetect_HOGDescriptor_get_1L2HysThreshold_10", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5RangeES4_", "Java_org_opencv_core_Core_PCACompute_11", "Java_org_opencv_core_Core_eigenNonSymmetric_10", "Java_org_opencv_imgproc_Subdiv2D_initDelaunay_10", "_ZN2cv17CascadeClassifierD2Ev", "_ZN2cvanERKNS_7Scalar_IdEERKNS_3MatE", "_ZN2cv10BOWTrainerD2Ev", "Java_org_opencv_photo_Photo_createTonemapDrago_11", "_ZN3tbb16spin_rw_mutex_v323internal_release_readerEv", "cvHoughLines2", "_ZN2cv10BriskLayerC2ERKS0_i", "_ZN2cv14createTrackbarERKNS_6StringES2_PiiPFviPvES4_", "Java_org_opencv_core_Core_divide_10", "cvWarpPerspective", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionERKSt6vectorIS3_IiSaIiEESaIS5_EERjSA_", "Java_org_opencv_video_FarnebackOpticalFlow_setPyrScale_10", "_ZN2cv3hal6min32sEPKijS2_jPijiiPv", "cvSetImageCOI", "_ZNK2cv4cuda6GpuMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZNK2cv12_OutputArray6neededEv", "_ZN2cv8internal21EstimateUncertaintiesERKNS_11_InputArrayES3_RKNS0_15IntrinsicParamsES3_S3_RS4_RNS_3VecIdLi2EEEdiRd", "Java_org_opencv_video_DualTVL1OpticalFlow_getWarpingsNumber_10", "Java_org_opencv_features2d_Params_set_1filterByCircularity_10", "Java_org_opencv_core_Core_fastAtan2_10", "cvNextTreeNode", "cvSeqPopMulti", "_ZN2cv9SparseMat6createEiPKii", "cvCloneSparseMat", "_ZN3tbb8internal13observer_list10remove_refEPNS0_14observer_proxyE", "_ZN3tbb8internal23allocate_via_handler_v3Ej", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD2Ev", "_ZN2cv3hal5max8uEPKhjS2_jPhjiiPv", "Java_org_opencv_core_Algorithm_save_10", "_Z17cvCreateSparseMatRKN2cv9SparseMatE", "Java_org_opencv_core_Core_patchNaNs_10", "_ZN2cv3hal6add16sEPKsjS2_jPsjiiPv", "_ZN2cv5instr8NodeDataC1ERS1_", "cvInsertNodeIntoTree", "Java_org_opencv_core_Core_mulSpectrums_11", "_ZN2cv9Exception13formatMessageEv", "_ZN3tbb19task_scheduler_init10initializeEi", "Java_org_opencv_imgproc_Imgproc_linearPolar_10", "Java_org_opencv_core_Core_divide_17", "Java_org_opencv_ml_SVM_setKernel_10", "Java_org_opencv_photo_TonemapReinhard_setLightAdaptation_10", "Java_org_opencv_videoio_VideoCapture_VideoCapture_12", "Java_org_opencv_ml_DTrees_create_10", "_ZNK2cv3ocl7Program9getBinaryERSt6vectorIcSaIcEE", "_ZN2cv4sortERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_Z7cvFloorRKN2cv9softfloatE", "_ZN2cv3Mat6resizeEj", "_ZNK2cv7MatExprclERKNS_5RangeES3_", "_ZN2cv8Subdiv2DC2Ev", "_ZN3tbb8internal17generic_scheduler24free_nonlocal_small_taskERNS_4taskE", "Java_org_opencv_features2d_Params_set_1minConvexity_10", "cvMulSpectrums", "Java_org_opencv_features2d_FlannBasedMatcher_delete", "_ZNK3tbb18captured_exception4nameEv", "_ZN3tbb8internal3rml14private_worker3runEv", "Java_org_opencv_features2d_Feature2D_detect_11", "Java_org_opencv_ml_SVMSGD_setInitialStepSize_10", "Java_org_opencv_features2d_Params_get_1maxInertiaRatio_10", "Java_org_opencv_features2d_Params_get_1filterByArea_10", "Java_org_opencv_photo_TonemapMantiuk_setSaturation_10", "_ZN2cv3ocl5QueueaSERKS1_", "_ZN2cv11blendLinearERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZN2cv18SimpleBlobDetector6ParamsC1Ev", "cvMahalanobis", "Java_org_opencv_features2d_MSER_getMaxArea_10", "Java_org_opencv_ml_NormalBayesClassifier_load_11", "Java_org_opencv_objdetect_CascadeClassifier_empty_10", "Java_org_opencv_ml_DTrees_getMaxDepth_10", "_ZN6CvTypeD2Ev", "Java_org_opencv_core_Core_sortIdx_10", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "cvApproxPoly", "Java_org_opencv_imgproc_Imgproc_demosaicing_10", "Java_org_opencv_features2d_GFTTDetector_getMaxFeatures_10", "Java_org_opencv_dnn_Net_getFLOPS_10", "Java_org_opencv_features2d_Params_set_1maxInertiaRatio_10", "_ZN2cv3ogl9Texture2D14setAutoReleaseEb", "cvCalcBayesianProb", "Java_org_opencv_imgproc_Imgproc_putText_11", "Java_org_opencv_video_BackgroundSubtractorKNN_getHistory_10", "Java_org_opencv_photo_Photo_detailEnhance_11", "cvSet", "_ZNK2cv3dnn19experimental_dnn_v45Layer13getScaleShiftERNS_3MatES4_", "Java_org_opencv_imgproc_Imgproc_circle_11", "_ZN2cv5utils5trace7details6Region4ImplC2ERNS2_23TraceManagerThreadLocalEPS3_RS3_RKNS3_21LocationStaticStorageEx", "_ZN2cv12resizeWindowERKNS_6StringERKNS_5Size_IiEE", "Java_org_opencv_features2d_ORB_getDefaultName_10", "Java_org_opencv_core_Core_copyMakeBorder_11", "Java_org_opencv_core_Core_bitwise_1not_10", "Java_org_opencv_features2d_FeatureDetector_detect_11", "_ZN2cv5mergeEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_ibd", "Java_org_opencv_photo_CalibrateDebevec_getSamples_10", "Java_org_opencv_features2d_Params_get_1maxArea_10", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_getAnnealInitialT_10", "Java_org_opencv_photo_Photo_createTonemapReinhard_11", "Java_org_opencv_calib3d_StereoBM_create_11", "Java_org_opencv_imgproc_Imgproc_circle_12", "_ZN2cv11setIdentityERKNS_17_InputOutputArrayERKNS_7Scalar_IdEE", "_ZNK2cv3ocl6Device15maxMemAllocSizeEv", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEf", "Java_org_opencv_features2d_FastFeatureDetector_setThreshold_10", "cvClearSet", "_ZN2cv5utils2fs8FileLockD2Ev", "Java_org_opencv_core_Core_perspectiveTransform_10", "_ZN3tbb8internal19PrintRMLVersionInfoEPvPKc", "_ZN2cv3hal19cvtTwoPlaneYUVtoBGREPKhS2_jPhjiiibi", "Java_org_opencv_features2d_BRISK_create_12", "Java_org_opencv_video_BackgroundSubtractorKNN_setDetectShadows_10", "_ZN2cveqEdRKNS_3MatE", "_ZN2cv12createButtonERKNS_6StringEPFviPvES3_ib", "_ZTv0_n36_NK2cv4MSER14getDefaultNameEv", "cvClearGraph", "Java_org_opencv_ml_EM_getCovarianceMatrixType_10", "_ZN2cv3PCAC1Ev", "cvConvertMaps", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_11", "_ZN2cv15getCPUTickCountEv", "_ZN2cv3hal3expEPKdPdi", "_ZNK2cv4cuda10DeviceInfo4nameEv", "_ZNK2cv10BOWTrainer16descriptorsCountEv", "Java_org_opencv_videoio_VideoWriter_get_10", "Java_org_opencv_features2d_Params_set_1filterByColor_10", "Java_org_opencv_ml_SVMSGD_getWeights_10", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayEb", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_13", "_ZNK2cv11_InputArray15getGpuMatVectorERSt6vectorINS_4cuda6GpuMatESaIS3_EE", "_ZNK2cv3ocl6Device14doubleFPConfigEv", "_ZN2cv11VideoWriter5writeERKNS_3MatE", "_ZN2cv17DescriptorMatcher5matchERKNS_11_InputArrayERSt6vectorINS_6DMatchESaIS5_EES3_", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_10", "_ZN3tbb8internal13observer_list24do_notify_exit_observersEPNS0_14observer_proxyEb", "cvDisplayOverlay", "Java_org_opencv_core_Core_polarToCart_10", "_ZN2cv3dnn19experimental_dnn_v45Layer7tryFuseERNS_3PtrIS2_EE", "_ZN2cv4UMat4onesEiPKii", "_ZN2cv17getGaussianKernelEidi", "Java_org_opencv_video_FarnebackOpticalFlow_setFastPyramids_10", "_ZNK2cv8FileNodeixEi", "_ZN2cv4cuda20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfiiRNS0_6StreamE", "_ZNK2cv4cuda6StreamcvMS1_KFvvEEv", "cvEncodeImage", "_ZN2cv11FileStorage8writeRawERKNS_6StringEPKhj", "Java_org_opencv_core_Core_compare_10", "Java_org_opencv_core_Core_meanStdDev_11", "Java_org_opencv_features2d_GFTTDetector_getBlockSize_10", "Java_org_opencv_core_Mat_nDump", "Java_org_opencv_core_Mat_n_1eye__III", "_ZN2cv9polylinesERNS_3MatEPKPKNS_6Point_IiEEPKiibRKNS_7Scalar_IdEEiii", "Java_org_opencv_core_TickMeter_TickMeter_10", "_ZN2cv17CascadeClassifierD1Ev", "_ZTv0_n36_NK2cv18SimpleBlobDetector14getDefaultNameEv", "_ZNK2cv11FileStorage8isOpenedEv", "Java_org_opencv_calib3d_Calib3d_estimateNewCameraMatrixForUndistortRectify_10", "_ZN2cv5splitERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_features2d_DescriptorMatcher_train_10", "_ZN9CvLevMarqC2Ev", "Java_org_opencv_core_Mat_nGetD", "_ZN3tbb8internal3rml11tbb_factory11make_serverERPNS1_10tbb_serverERNS1_10tbb_clientE", "__fixunssfdi", "_ZN2cv4UMat4diagERKS0_", "Java_org_opencv_core_Core_getNumberOfCPUs_10", "Java_org_opencv_features2d_KAZE_setExtended_10", "_ZN2cv4cuda18ensureSizeIsEnoughEiiiRKNS_12_OutputArrayE", "_ZN2cv16UMatDataAutoLockD1Ev", "__gnu_Unwind_RaiseException", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_10", "_ZN2cv5utils5trace7details6RegionC2ERKNS3_21LocationStaticStorageE", "_ZNK2cv4cuda10DeviceInfo12maxTexture1DEv", "_ZN2cv3MatC1ERKS0_PKNS_5RangeE", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_10", "Java_org_opencv_core_Core_bitwise_1xor_10", "_ZNK2cv3ocl6Device17hostUnifiedMemoryEv", "Java_org_opencv_core_Core_setUseIPP_1NE_10", "Java_org_opencv_core_Mat_n_1Mat__III", "_ZN2cv8va_intel18convertToVASurfaceEPvRKNS_11_InputArrayEjNS_5Size_IiEE", "cvSetTrackbarMin", "_ZNK3tbb18task_group_context28is_group_execution_cancelledEv", "Java_org_opencv_photo_Photo_createMergeMertens_10", "Java_org_opencv_features2d_Params_Params_10", "Java_org_opencv_imgproc_LineSegmentDetector_drawSegments_10", "Java_org_opencv_video_Video_calcOpticalFlowFarneback_10", "_ZN2cv3expERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv5CannyERKNS_11_InputArrayERKNS_12_OutputArrayEddib", "__lshrdi3", "Java_org_opencv_ml_ParamGrid_get_1minVal_10", "Java_org_opencv_ml_TrainData_getCatMap_10", "Java_org_opencv_photo_Photo_seamlessClone_10", "_ZN10__cxxabiv115__forced_unwindD1Ev", "Java_org_opencv_photo_Photo_detailEnhance_10", "_ZN2cv6mulAddERKNS_10softdoubleES2_S2_", "Java_org_opencv_videoio_VideoCapture_set_10", "_ZNK2cv14DefaultDeleterI9_IplImageEclEPS1_", "Java_org_opencv_dnn_Dnn_readNetFromTorch_11", "Java_org_opencv_imgproc_Imgproc_getDefaultNewCameraMatrix_11", "_ZN3tbb8internal3rml14private_worker14release_handleElb", "Java_org_opencv_photo_Photo_decolor_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork13resetTrackingEv", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getWinSize_10", "_ZN2cv3ocl6KernelC1EPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "Java_org_opencv_video_Video_estimateRigidTransform_10", "_ZN2cv3hal5mul8uEPKhjS2_jPhjiiPv", "cvGet2D", "cvDrawChessboardCorners", "__gnu_Unwind_Save_VFP_D", "_ZNK2cv11_InputArray4dimsEi", "_ZN2cv3hal19cvtTwoPlaneYUVtoBGREPKhjPhjiiibi", "_ZN2cv7fisheye23initUndistortRectifyMapERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEEiRKNS_12_OutputArrayESA_", "Java_org_opencv_videoio_VideoCapture_open_13", "_ZN3tbb8internal19allocate_root_proxy4freeERNS_4taskE", "Java_org_opencv_features2d_Feature2D_compute_10", "_ZNK2cv17AVIWriteContainer12getStreamPosEv", "__udivdi3", "_ZN2cv3ogl11mapGLBufferERKNS0_6BufferEi", "Java_org_opencv_calib3d_Calib3d_convertPointsFromHomogeneous_10", "_ZN2cv9startLoopEPFiiPPcEiS1_", "_ZN3tbb8internal6market29mandatory_concurrency_disableEPNS0_5arenaE", "_ZN2cv18accumulateWeightedERKNS_11_InputArrayERKNS_17_InputOutputArrayEdS2_", "cvConvexHull2", "Java_org_opencv_dnn_Net_forward_10", "_ZN2cv7waitKeyEi", "_ZN3tbb10interface78internal20isolate_within_arenaERNS1_13delegate_baseEi", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_10", "_ZNK2cv11_InputArray7getMat_Ei", "cvMulTransposed", "Java_org_opencv_photo_Photo_denoise_1TVL1_10", "Java_org_opencv_objdetect_Objdetect_groupRectangles_10", "_ZdaPv", "cvGetFileNode", "_ZNK2cv2ml9TrainData8getNamesERSt6vectorINS_6StringESaIS3_EE", "_ZN2cv2ml6DTrees5SplitC1Ev", "_ZN2cv8UMatData6unlockEv", "Java_org_opencv_features2d_DescriptorExtractor_descriptorType_10", "_ZN2cv3Mat6createERKSt6vectorIiSaIiEEi", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_11", "Java_org_opencv_features2d_DescriptorMatcher_delete", "_ZN2cv3hal11cvtBGRtoXYZEPKhjPhjiiiib", "Java_org_opencv_video_KalmanFilter_KalmanFilter_10", "_ZNK2cv9Algorithm14getDefaultNameEv", "_ZN2cv3ocl5Timer4stopEv", "Java_org_opencv_imgproc_Imgproc_pyrUp_12", "_ZN2cv3logERKNS_9softfloatE", "_ZNK2cv3ocl6Device15image2DMaxWidthEv", "cvCopy", "_ZN2cv3ogl9Texture2D6createEiiNS1_6FormatEb", "_ZNK2cv5flann11IndexParams6getAllERSt6vectorINS_6StringESaIS3_EERS2_IiSaIiEES6_RS2_IdSaIdEE", "_ZN2cv9softfloatC2Ex", "_ZNK2cv3dnn19experimental_dnn_v43Net23getUnconnectedOutLayersEv", "_ZTv0_n36_NK2cv9Feature2D14getDefaultNameEv", "WebPPictureAlloc", "__gesf2", "Java_org_opencv_dnn_DictValue_getRealValue_11", "Java_org_opencv_imgproc_Imgproc_calcHist_10", "_ZN3tbb8internal12dynamic_linkEPKcPKNS0_23dynamic_link_descriptorEjPPvi", "Java_org_opencv_imgproc_Imgproc_pointPolygonTest_10", "Java_org_opencv_ml_RTrees_getCalculateVarImportance_10", "cvInitIntrinsicParams2D", "_ZNK2cv17CascadeClassifier14getFeatureTypeEv", "Java_org_opencv_imgproc_Imgproc_demosaicing_11", "Java_org_opencv_ml_TrainData_getSamples_10", "Java_org_opencv_imgproc_Imgproc_putText_10", "Java_org_opencv_calib3d_StereoSGBM_setMode_10", "Java_org_opencv_photo_Photo_stylization_10", "Java_org_opencv_video_DualTVL1OpticalFlow_setTau_10", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setMinEigThreshold_10", "Java_org_opencv_calib3d_Calib3d_composeRT_11", "_ZNK2cv10softdoublermERKS0_", "_ZN2cv12equalizeHistERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_features2d_MSER_getDefaultName_10", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_11", "_ZN2cv18initCameraMatrix2DERKNS_11_InputArrayES2_NS_5Size_IiEEd", "_ZN2cv5eigenERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZN3rml8internal14thread_monitor4joinEl", "Java_org_opencv_core_Core_divide_11", "_ZN2cv5utils2fs10remove_allERKNS_6StringE", "_ZNK2cv12_OutputArray9getMatRefEi", "Java_org_opencv_core_Core_divide_13", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayERKS0_", "_ZNK2cv3LDA4saveERKNS_6StringE", "_ZN2cv3ogl6Buffer9mapDeviceERNS_4cuda6StreamE", "_ZN2cv4cuda14deviceSupportsENS0_10FeatureSetE", "_ZN2cv7directx3ocl32initializeContextFromD3D11DeviceEP12ID3D11Device", "_ZN2cv8clipLineENS_5Size_IiEERNS_6Point_IiEES4_", "_ZN2cv10BOWTrainerD1Ev", "_ZN2cv17AVIWriteContainer13initContainerERKNS_6StringEdNS_5Size_IiEEb", "_ZN3tbb8internal17generic_scheduler14cleanup_masterEb", "_ZN2cv14getGaborKernelENS_5Size_IiEEdddddi", "_ZN2cv6imshowERKNS_6StringERKNS_11_InputArrayE", "_ZN2cv7decolorERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZN2cvplERKNS_7Scalar_IdEERKNS_7MatExprE", "_ZN2cv3ogl6Arrays15resetColorArrayEv", "_ZNK2cv17DescriptorMatcher20DescriptorCollection11getLocalIdxEiRiS2_", "_ZN2cv25BOWImgDescriptorExtractorD0Ev", "_ZSt18uncaught_exceptionv", "_ZN2cv3ocl7Image2DC1ERKS1_", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2ERKS1_", "_ZN2cv4cuda12getOutputMatERKNS_12_OutputArrayEiiiRNS0_6StreamE", "_ZN3tbb18captured_exception8allocateEPKcS2_", "Java_org_opencv_core_Mat_n_1mul__JJ", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_11", "_ZN2cv9polylinesERKNS_17_InputOutputArrayERKNS_11_InputArrayEbRKNS_7Scalar_IdEEiii", "cvFindType", "cvCreateImage", "_ZN2cv5flann20AutotunedIndexParamsC1Effff", "_ZNK2cv3ocl8Platform3ptrEv", "_ZN2cv27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffii", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_12", "_ZN2cv7seqPushEP5CvSeqPKv", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_12", "_ZNK2cv3ocl6Kernel3ptrEv", "_ZN2cv16AVIReadContainer8skipJunkERNS_9RiffChunkE", "Java_org_opencv_core_Mat_n_1elemSize1", "_ZN2cv16findEssentialMatERKNS_11_InputArrayES2_S2_iddRKNS_12_OutputArrayE", "_ZNK2cv3ocl6Device18deviceVersionMinorEv", "Java_org_opencv_ml_SVMSGD_getInitialStepSize_10", "_ZNK2cv10softdoublecvNS_9softfloatEEv", "_ZN2cv3ocl7Image2DC1Ev", "_ZN2cv13getNumThreadsEv", "Java_org_opencv_features2d_GFTTDetector_delete", "Java_org_opencv_imgproc_Imgproc_cvtColor_11", "Java_org_opencv_dnn_DictValue_delete", "Java_org_opencv_photo_Photo_pencilSketch_11", "_ZNK2cv8FileNode4nameEv", "Java_org_opencv_imgproc_Imgproc_pyrUp_10", "cvCamShift", "cvReleaseImage", "_ZNK2cv2ml7ANN_MLP21getAnnealCoolingRatioEv", "cvXorS", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_RKNS_17_InputOutputArrayE", "_ZNK2cv8Subdiv2D8QuadEdge6isfreeEv", "_ZN3tbb8internal5arena25occupy_free_slot_in_rangeERNS0_17generic_schedulerEjj", "_ZN2cv22getHardwareFeatureNameEi", "cvDrawContours", "_ZN3tbb10interface78internal15task_arena_base21internal_current_slotEv", "WebPPictureImportBGRA", "_ZN10__cxxabiv111__terminateEPFvvE", "_ZNK2cv17CommandLineParser12printMessageEv", "_ZN2cv3minERKNS_4UMatES2_RS0_", "Java_org_opencv_calib3d_StereoMatcher_setBlockSize_10", "Java_org_opencv_features2d_FeatureDetector_write_10", "cvFillPoly", "_Unwind_RaiseException", "cvGetCols", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMin_10", "_ZNK2cv7MatExpr3rowEi", "_ZNK2cv14DefaultDeleterI12CvMemStorageEclEPS1_", "_ZN2cv16convexityDefectsERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv9softfloatC1Ey", "_ZN2cv3hal11cvtHSVtoBGREPKhjPhjiiiibbb", "_ZN2cv13matchTemplateERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS2_", "_ZN3tbb8internal5arena14allocate_arenaERNS0_6marketEjj", "_ZN2cvneEdRKNS_3MatE", "_ZNK2cv4cuda10DeviceInfo21texturePitchAlignmentEv", "_ZNK2cv4cuda10DeviceInfo19maxSurface2DLayeredEv", "_ZN2cv3hal10absdiff16sEPKsjS2_jPsjiiPv", "_ZN2cv5flann11IndexParamsD1Ev", "_ZN2cv15BriskScaleSpace12getKeypointsEiRSt6vectorINS_8KeyPointESaIS2_EE", "_ZN2cv5MatOpD2Ev", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_10", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5Rect_IiEE", "_ZN2cv3hal6div32sEPKijS2_jPijiiPv", "_ZN2cv8imdecodeERKNS_11_InputArrayEi", "_ZN2cv19getBuildInformationEv", "Java_org_opencv_calib3d_StereoMatcher_getBlockSize_10", "cvAndS", "_ZN2cv9selectROIERKNS_6StringERKNS_11_InputArrayEbb", "Java_org_opencv_ml_EM_getWeights_10", "_ZN2cv3ocl13ProgramSourceC1ERKS1_", "_ZN2cv3hal5QR64fEPdjiiiS1_jS1_", "_ZNK2cv4cuda6Stream15queryIfCompleteEv", "cvAvg", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_10", "_ZN2cv11RNG_MT19937cviEv", "_ZN2cv2LUEPdjiS0_ji", "Java_org_opencv_imgproc_Imgproc_fitEllipse_10", "_ZN3tbb8internal8governor12tls_value_ofEPNS0_17generic_schedulerE", "cvSetErrMode", "_ZNSt9bad_allocD0Ev", "cvCloneGraph", "cvCalibrationMatrixValues", "VP8LCheckSignature", "_ZNK2cv4cuda10DeviceInfo8warpSizeEv", "_ZN2cv5utils5trace7details12TraceManagerD2Ev", "cvApproxChains", "_ZNK2cv9SparseMat9convertToERS0_id", "Java_org_opencv_photo_Photo_createTonemapDurand_10", "cvResize", "_ZN2cv10solveCubicERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN9CvLevMarqC1Eii14CvTermCriteriab", "_ZN2cvgeEdRKNS_3MatE", "_ZN2cv15warpPerspectiveERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_dnn_Dnn_shrinkCaffeModel_11", "Java_org_opencv_features2d_Params_set_1filterByArea_10", "cvSet2D", "cvAnd", "cvEstimateRigidTransform", "_ZNK2cv2ml7ANN_MLP19getAnnealItePerStepEv", "cvGetQuadrangleSubPix", "Java_org_opencv_features2d_BOWKMeansTrainer_delete", "Java_org_opencv_imgproc_Imgproc_getDefaultNewCameraMatrix_10", "_ZN2cv3hal5DFT1D6createEiiiiPb", "Java_org_opencv_features2d_AgastFeatureDetector_getThreshold_10", "Java_org_opencv_dnn_Dnn_shrinkCaffeModel_10", "Java_org_opencv_photo_Photo_createAlignMTB_11", "_ZN2cv3ocl5QueueC2ERKNS0_7ContextERKNS0_6DeviceE", "_ZN2cv7hconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvStereoRectify", "Java_org_opencv_features2d_KAZE_getNOctaves_10", "_ZNK2cv11_InputArray12getMatVectorERSt6vectorINS_3MatESaIS2_EE", "Java_org_opencv_imgproc_Imgproc_integral2_10", "cvIntegral", "_ZN2cv3hal11normHammingEPKhS2_ii", "_ZN2cv15extractImageCOIEPKvRKNS_12_OutputArrayEi", "_ZNK2cv9Algorithm5writeERKNS_3PtrINS_11FileStorageEEERKNS_6StringE", "_ZN3tbb8internal6market16update_allotmentEi", "_ZSt13set_terminatePFvvE", "Java_org_opencv_core_Mat_n_1rowRange", "_ZNK2cv4cuda10DeviceInfo12maxSurface1DEv", "cvEndFindContours", "_ZN2cv3dnn19experimental_dnn_v45Layer16forward_fallbackERKNS_11_InputArrayERKNS_12_OutputArrayES8_", "_ZN2cv15stereoCalibrateERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayES5_S5_S5_NS_5Size_IiEERKNS_12_OutputArrayESA_SA_SA_iNS_12TermCriteriaE", "Java_org_opencv_core_Core_norm_14", "WebPEncodeRGBA", "cvScalarToRawData", "Java_org_opencv_core_Core_multiply_12", "_ZN2cv9patchNaNsERKNS_17_InputOutputArrayEd", "_ZNK2cv4UMat8ndoffsetEPj", "Java_org_opencv_imgproc_Subdiv2D_nextEdge_10", "_ZN3tbb19task_scheduler_init19default_num_threadsEv", "_ZN2cv9FormattedD0Ev", "Java_org_opencv_ml_EM_predict2_10", "_ZN2cv3dnn19experimental_dnn_v43Net8addLayerERKNS_6StringES5_RNS1_11LayerParamsE", "_ZN2cv3ocl6Kernel3runEiPjS2_bRKNS0_5QueueE", "_ZN2cv10fitEllipseERKNS_11_InputArrayE", "Java_org_opencv_dnn_Net_getMemoryConsumption_10", "_ZN2cv3ocl16convertFromImageEPvRNS_4UMatE", "Java_org_opencv_features2d_Feature2D_getDefaultName_10", "_ZN2cv17eigenNonSymmetricERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "Java_org_opencv_core_Core_mulSpectrums_10", "_ZN2cv13setNumThreadsEi", "Java_org_opencv_imgproc_Imgproc_integral_11", "Java_org_opencv_core_Core_normalize_11", "_ZN2cv3MatC1ERKSt6vectorIiSaIiEEiPvPKj", "_ZN2cv9magnitudeERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNK2cv7MatExpr4sizeEv", "Java_org_opencv_imgproc_Imgproc_spatialGradient_11", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprES3_RS1_d", "WebPPictureImportBGRX", "Java_org_opencv_features2d_Params_delete", "_ZN2cv3hal19cvtOnePlaneYUVtoBGREPKhjPhjiiibii", "_ZN2cv8fastFreeEPv", "Java_org_opencv_core_Core_n_1minMaxLocManual", "Java_org_opencv_calib3d_StereoSGBM_create_11", "_ZN2cv17DescriptorMatcherD0Ev", "cvStartReadChainPoints", "_ZNK2cv9softfloatrmERKS0_", "Java_org_opencv_core_Core_bitwise_1not_11", "Java_org_opencv_core_Core_subtract_15", "Java_org_opencv_calib3d_Calib3d_recoverPose_10", "_ZN2cv3dnn19experimental_dnn_v43Net8setParamENS1_9DictValueEiRKNS_3MatE", "Java_org_opencv_core_Core_phase_10", "cvLinearPolar", "Java_org_opencv_features2d_AKAZE_setDescriptorType_10", "_ZNK2cv12VideoCapture3getEi", "_ZN3tbb8internal34initialize_cache_aligned_allocatorEv", "Java_org_opencv_features2d_KAZE_setNOctaves_10", "_ZN2cv9minMaxLocERKNS_11_InputArrayEPdS3_PNS_6Point_IiEES6_S2_", "Java_org_opencv_calib3d_Calib3d_drawChessboardCorners_10", "_ZN3tbb18captured_exception3setEPKcS2_", "__eqsf2", "_ZN2cv10getSeqElemEPK5CvSeqi", "_ZN2cv12VideoCaptureC1Ev", "_ZNK2cv11_InputArray12isContinuousEi", "cvSet1D", "Java_org_opencv_video_DualTVL1OpticalFlow_setWarpingsNumber_10", "_ZN7CvMatNDC2ERKN2cv3MatE", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_11", "Java_org_opencv_features2d_KAZE_setDiffusivity_10", "_ZN2cv10softdoubleC1Ey", "_ZN2cv9BFMatcherC2Eib", "_ZN2cv3dnn19experimental_dnn_v412PoolingLayer6createERKNS1_11LayerParamsE", "_ZNK2cv12_OutputArray6assignERKNS_3MatE", "WebPDecodeRGBA", "Java_org_opencv_features2d_GFTTDetector_getK_10", "Java_org_opencv_ml_SVMSGD_getSvmsgdType_10", "cvUndistort2", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERKNS_12_OutputArrayEPSt6vectorIS7_IiSaIiEESaIS9_EE", "_ZN2cv8Subdiv2D19getVoronoiFacetListERKSt6vectorIiSaIiEERS1_IS1_INS_6Point_IfEESaIS7_EESaIS9_EERS9_", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprEdRS1_", "_ZN3tbb8internal28gcc_rethrow_exception_brokenEv", "_ZN2cv3dnn19experimental_dnn_v43Net11deleteLayerENS1_9DictValueE", "_ZN2cv3ocl5QueueC2ERKS1_", "_ZNK2cv9Feature2D5writeERKNS_6StringE", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_descriptorSize_10", "_ZN2cv3ocl7ProgramC1Ev", "_ZNK2cv11VideoWriter8isOpenedEv", "_ZN2cv3ogl6Buffer9unmapHostEv", "cvSeqSearch", "_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_", "_ZN2cv14displayOverlayERKNS_6StringES2_i", "_ZN2cv16AVIReadContainer9parseRiffERSt5dequeISt4pairIyjESaIS3_EE", "_ZN2cv3MatC2ERKS0_RKSt6vectorINS_5RangeESaIS4_EE", "cvCreateData", "cvBackProjectPCA", "_ZN2cv3dnn19experimental_dnn_v43NetC2Ev", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_delete", "Java_org_opencv_video_BackgroundSubtractorKNN_setHistory_10", "_ZNK2cv8Subdiv2D11checkSubdivEv", "_ZNK2cv3ogl6Buffer5bufIdEv", "_ZNK2cv4cuda10DeviceInfo10integratedEv", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_11", "Java_org_opencv_photo_MergeRobertson_delete", "Java_org_opencv_imgproc_Imgproc_drawContours_10", "cvAddWeighted", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERKNS_11_InputArrayERNS0_6StreamE", "_ZN2cv3hal5min8sEPKajS2_jPajiiPv", "_ZNSt10bad_typeidD2Ev", "Java_org_opencv_video_DualTVL1OpticalFlow_create_11", "_ZN2cv11polarToCartERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "cvGetErrInfo", "Java_org_opencv_calib3d_StereoBM_delete", "_ZNK2cv4cuda10DeviceInfo17sharedMemPerBlockEv", "_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj", "_ZNKSt10bad_typeid4whatEv", "_ZN2cv3hal11cvtXYZtoBGREPKhjPhjiiiib", "__nesf2", "_ZN2cvmiERKNS_7MatExprES2_", "cvMinS", "Java_org_opencv_photo_TonemapDurand_getSigmaSpace_10", "_ZN3tbb8internal8governor7sign_onEPNS0_17generic_schedulerE", "Java_org_opencv_photo_AlignMTB_delete", "_ZNK2cv9SparseMat9convertToERNS_3MatEidd", "Java_org_opencv_calib3d_StereoSGBM_getMode_10", "_ZN2cv9SparseMat3ptrEPKibPj", "_ZN2cv9BFMatcher12knnMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "WebPFreeDecBuffer", "Java_org_opencv_objdetect_HOGDescriptor_load_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMax_10", "_ZN2cv18createMergeMertensEfff", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_17DescriptorMatcherEEE", "cvSetOpenGlContext", "_ZNK2cv4cuda10DeviceInfo16textureAlignmentEv", "__divdf3", "_ZN2cv3ipp12getIppStatusEv", "_ZN2cv12findContoursERKNS_17_InputOutputArrayERKNS_12_OutputArrayES5_iiNS_6Point_IiEE", "_ZN2cv5utils5trace7details6Region4ImplD1Ev", "_ZNK2cv3ocl6Device16printfBufferSizeEv", "_ZN2cv3PCAclERKNS_11_InputArrayES3_ii", "_ZN2cv18HoughLinesPointSetERKNS_11_InputArrayERKNS_12_OutputArrayEiidddddd", "_ZN2cv2ml9TrainDataD0Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_setHistory_10", "_ZN2cv7ellipseERKNS_17_InputOutputArrayENS_6Point_IiEENS_5Size_IiEEdddRKNS_7Scalar_IdEEiii", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_11", "Java_org_opencv_features2d_Params_get_1minThreshold_10", "Java_org_opencv_photo_Photo_createTonemapDurand_11", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfii", "_ZN3tbb8internal14__TBB_InitOnce10remove_refEv", "_ZN2cv11VideoWriterC1Ev", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_11", "_ZNK2cv2ml6KDTree14findOrthoRangeERKNS_11_InputArrayES4_RKNS_12_OutputArrayES7_S7_", "cvCreateFileCapture", "cvCreateGraphScanner", "cvRunHaarClassifierCascade", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorTypeEv", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayEPKij", "Java_org_opencv_core_Core_mean_11", "_ZN2cv4blurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IiEEi", "_ZN2cv4sqrtERKNS_9softfloatE", "_ZN2cv12completeSymmERKNS_17_InputOutputArrayEb", "Java_org_opencv_features2d_KAZE_setUpright_10", "_ZNK2cv3ocl6Device8vendorIDEv", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getFlags_10", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleRange_10", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_11", "_ZNK2cv17CommandLineParser20getPathToApplicationEv", "Java_org_opencv_core_Mat_n_1diag__JI", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZNK2cv3PCA5writeERNS_11FileStorageE", "_ZN2cv3hal11cvtBGRtoYUVEPKhjPhjiiiibb", "Java_org_opencv_ml_SVMSGD_load_10", "_ZN2cv3dnn19experimental_dnn_v43NetD2Ev", "_ZN3tbb18task_group_context5resetEv", "_ZN2cv2ml30createConcentricSpheresTestSetEiiiRKNS_12_OutputArrayES3_", "Java_org_opencv_features2d_Params_set_1minCircularity_10", "__divsf3", "_ZN2cv5utils2fs13glob_relativeERKNS_6StringES4_RSt6vectorIS2_SaIS2_EEbb", "_ZN2cv3hal5div8sEPKajS2_jPajiiPv", "_ZN2cv21DetectionBasedTracker13setParametersERKNS0_10ParametersE", "Java_org_opencv_imgproc_Imgproc_line_12", "Java_org_opencv_core_Core_setUseIPP_10", "_ZN2cv7addTextERKNS_3MatERKNS_6StringENS_6Point_IiEES5_iNS_7Scalar_IdEEiii", "_ZN2cv5flann17KDTreeIndexParamsC1Ei", "_ZN10__cxxabiv123__fundamental_type_infoD0Ev", "cvSeqSort", "Java_org_opencv_ml_ANN_1MLP_setRpropDW0_10", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_NS_12TermCriteriaE", "_ZN2cv11stylizationERKNS_11_InputArrayERKNS_12_OutputArrayEff", "_ZN2cv11contourAreaERKNS_11_InputArrayEb", "_ZN2cv31createRANSACPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEiddi", "Java_org_opencv_features2d_ORB_setEdgeThreshold_10", "_ZN2cv5flann12SearchParamsC1Eifb", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_11", "Java_org_opencv_calib3d_Calib3d_rectify3Collinear_10", "_ZN9CvLevMarqD1Ev", "_ZN3tbb8internal17generic_scheduler17nested_arena_exitEv", "_ZN2cv4globENS_6StringERSt6vectorIS0_SaIS0_EEb", "Java_org_opencv_videoio_VideoWriter_open_12", "_ZNK2cv12_OutputArray13getHostMemRefEv", "_ZN2cv2ml6KDTreeC2Ev", "cvSolveCubic", "cvRestoreMemStoragePos", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKNS_9SparseMatE", "_ZN2cv3ocl6DeviceC2Ev", "_ZN2cv4cuda6Stream17waitForCompletionEv", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN3tbb8internal3rml14private_serverC2ERNS1_10tbb_clientE", "_ZN2cv3ocl6Device10getDefaultEv", "_ZNK2cv3ocl6Device13globalMemSizeEv", "cvWriteInt", "_ZN2cv3dnn19experimental_dnn_v412LayerFactory19createLayerInstanceERKNS_6StringERNS1_11LayerParamsE", "_ZNK2cv14DefaultDeleterI13CvFileStorageEclEPS1_", "_ZN2cv4cuda6GpuMatC1EiiiPvj", "cvHaveImageReader", "cvFindExtrinsicCameraParams2", "_ZN3tbb8internal6market20lower_arena_priorityERNS0_5arenaEij", "Java_org_opencv_features2d_ORB_getNLevels_10", "_ZN2cv9softfloatC1Ej", "_ZN2cv16getTickFrequencyEv", "_ZN2cv3hal2LUEPdjiS1_ji", "_ZN2cv11MahalanobisERKNS_11_InputArrayES2_S2_", "cvCalcProbDensity", "Java_org_opencv_calib3d_Calib3d_calibrate_12", "Java_org_opencv_features2d_Params_set_1maxCircularity_10", "cvSolve", "Java_org_opencv_ml_ANN_1MLP_getAnnealInitialT_10", "Java_org_opencv_calib3d_StereoBM_setPreFilterSize_10", "_ZNK2cv4cuda5Event15queryIfCompleteEv", "_ZN2cv5instr8NodeDataD1Ev", "_ZNK2cv3ocl6Device17imageMaxArraySizeEv", "_ZN2cv3LDA4loadERKNS_11FileStorageE", "Java_org_opencv_photo_AlignMTB_setExcludeRange_10", "cvEqualizeHist", "_ZN2cv11VideoWriter6fourccEcccc", "Java_org_opencv_core_Mat_n_1Mat__", "_ZNKSt9exception4whatEv", "_ZN2cv8fillPolyERNS_3MatEPPKNS_6Point_IiEEPKiiRKNS_7Scalar_IdEEiiS3_", "Java_org_opencv_core_Mat_n_1create__JDDI", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayERKSt6vectorIfSaIfEEiii", "_ZNK2cv11_InputArray5emptyEv", "_ZN2cv3ocl12PlatformInfoD1Ev", "Java_org_opencv_videoio_VideoWriter_release_10", "_ZN2cv3ocl12PlatformInfoC1EPv", "Java_org_opencv_imgproc_Imgproc_integral3_11", "_ZNK2cv3ocl6Device12endianLittleEv", "_ZN2cv3dnn19experimental_dnn_v45Layer13setActivationERKNS_3PtrINS1_15ActivationLayerEEE", "Java_org_opencv_ml_KNearest_findNearest_10", "_ZN2cv10BOWTrainer3addERKNS_3MatE", "_ZTv0_n36_NK2cv20AgastFeatureDetector14getDefaultNameEv", "_ZN2cv7grabCutERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Rect_IiEES5_S5_ii", "_ZN3tbb8internal5arenaC1ERNS0_6marketEjj", "Java_org_opencv_features2d_ORB_getWTA_1K_10", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setWinSize_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_12", "Java_org_opencv_photo_Photo_inpaint_10", "_ZN2cv3hal11Cholesky32fEPfjiS1_ji", "_ZN2cv3ogl6Arrays7releaseEv", "_ZN2cv8Subdiv2D11calcVoronoiEv", "_ZN2cvmiERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv3hal7recip8uEPKhjS2_jPhjiiPv", "_ZN2cv3Mat5setToERKNS_11_InputArrayES3_", "Java_org_opencv_core_Mat_n_1elemSize", "_ZN2cv3ocl7ProgramC1ERKS1_", "_ZN2cv10softdoubleC2Ei", "_ZN2cv3Mat8copySizeERKS0_", "Java_org_opencv_ml_LogisticRegression_load_11", "Java_org_opencv_video_DualTVL1OpticalFlow_setGamma_10", "_ZN10__cxxabiv120__si_class_type_infoD0Ev", "_ZN2cv3dnn19experimental_dnn_v418readNetFromDarknetERKNS_6StringES4_", "_ZN2cv3ocl5Queue10getDefaultEv", "_ZN2cv9floodFillERKNS_17_InputOutputArrayES2_NS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZNK2cv3ocl12PlatformInfo12deviceNumberEv", "__gnu_Unwind_Save_WMMXC", "Java_org_opencv_features2d_DescriptorExtractor_delete", "_ZN2cv3hal6div16sEPKsjS2_jPsjiiPv", "_ZN2cv15BriskScaleSpaceC1Ei", "_ZNK2cv3ocl6Device17compilerAvailableEv", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorINS0_9ExtObjectESaIS2_EE", "_Znaj", "_ZN2cv3Mat6resizeEjRKNS_7Scalar_IdEE", "WebPSafeCalloc", "_ZN2cv11FileStorage12writeCommentERKNS_6StringEb", "_ZN3tbb8internal13observer_list5clearEv", "_ZN2cv3hal11cvtBGRtoHSVEPKhjPhjiiiibbb", "_ZN2cv7MomentsC2Ev", "_ZNK2cv11_InputArray8sameSizeERKS0_", "WebPSafeFree", "Java_org_opencv_features2d_ORB_setScoreType_10", "_ZN2cv9AlgorithmC2Ev", "_ZN2cv6divideEdRKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv16estimateAffine3DERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_dd", "Java_org_opencv_ml_SVM_setP_10", "_ZNK2cv11_InputArray4typeEi", "_ZN2cv8UMatDataC2EPKNS_12MatAllocatorE", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayEPS4_IS4_IiSaIiEESaISD_EEPNS_3MatE", "_ZN2cv2ml21NormalBayesClassifier4loadERKNS_6StringES4_", "_ZN3tbb8internal3rml14private_server9wake_someEi", "Java_org_opencv_core_Core_multiply_11", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_getVocabulary_10", "Java_org_opencv_core_Algorithm_getDefaultName_10", "cvGetRows", "Java_org_opencv_features2d_DescriptorMatcher_isMaskSupported_10", "_ZN2cv9AlgorithmD1Ev", "_ZN2cv17CascadeClassifier16getMaskGeneratorEv", "_ZN2cv11RNG_MT199377uniformEii", "cvGraphRemoveEdgeByPtr", "Java_org_opencv_features2d_BOWTrainer_delete", "Java_org_opencv_core_Core_norm_12", "Java_org_opencv_video_FarnebackOpticalFlow_setFlags_10", "_ZN2cv9watershedERKNS_11_InputArrayERKNS_17_InputOutputArrayE", "_ZNK2cv3ocl6Device15maxWorkItemDimsEv", "_ZN2cv3ocl8PlatformD1Ev", "_ZN3tbb8internal6market7processERN3rml3jobE", "_ZN2cv4cuda6GpuMat19setDefaultAllocatorEPNS1_9AllocatorE", "Java_org_opencv_videoio_VideoCapture_retrieve_11", "Java_org_opencv_android_Utils_nMatToBitmap2", "_ZNK2cv7MatExpr3invEi", "_ZN2cv3dnn19experimental_dnn_v421readNetFromTensorflowEPKcjS3_j", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_10", "_ZNK2cv5MatOp6matmulERKNS_7MatExprES3_RS1_", "_ZN2cv3absERKNS_7MatExprE", "Java_org_opencv_video_BackgroundSubtractorMOG2_getHistory_10", "_ZN2cv15BriskScaleSpaceD1Ev", "_ZN2cv3dnn19experimental_dnn_v49CropLayer6createERKNS1_11LayerParamsE", "_ZNK2cv5MatOp12augAssignXorERKNS_7MatExprERNS_3MatE", "_ZN2cv3ocl7ProgramC1ERKNS0_13ProgramSourceERKNS_6StringERS5_", "_ZN2cv32createFaceDetectionMaskGeneratorEv", "cvGraphAddVtx", "cvStartWriteStruct", "_ZN2cv3ocl20getOpenCLErrorStringEi", "_ZN2cv22decomposeHomographyMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_S5_", "_ZN2cv30createBackgroundSubtractorMOG2Eidb", "Java_org_opencv_calib3d_Calib3d_calibrate_10", "_ZN2cv3Mat8pop_backEj", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_11", "Java_org_opencv_calib3d_Calib3d_projectPoints_11", "cvInpaint", "Java_org_opencv_calib3d_StereoSGBM_getP2_10", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_12", "_ZNK2cv3ocl6Device13OpenCLVersionEv", "_ZN2cv5Mutex7trylockEv", "_ZN2cv10cvarrToMatEPKvbbiPNS_10AutoBufferIdLj136EEE", "cvSeqInvert", "_ZNK2cv21DetectionBasedTracker13getParametersEv", "_ZN2cv16AVIReadContainerC2Ev", "Java_org_opencv_ml_DTrees_getRegressionAccuracy_10", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_12", "_ZNK2cv8Subdiv2D18getLeadingEdgeListERSt6vectorIiSaIiEE", "_ZN2cv14filterSpecklesERKNS_17_InputOutputArrayEdidS2_", "Java_org_opencv_video_DualTVL1OpticalFlow_getScaleStep_10", "Java_org_opencv_objdetect_HOGDescriptor_compute_11", "_ZN2cv4cuda6Stream19enqueueHostCallbackEPFviPvES2_", "Java_org_opencv_ml_ANN_1MLP_setAnnealInitialT_10", "cvPyrMeanShiftFiltering", "Java_org_opencv_ml_StatModel_train_10", "cvFindCornerSubPix", "_ZN2cv8SVDecompERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_i", "_ZN2cv7directx20getTypeFromD3DFORMATEi", "_ZN2cv21BaseCascadeClassifierD1Ev", "_ZNSt9bad_allocD1Ev", "_ZN2cv3dnn19experimental_dnn_v49BNLLLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_Calib3d_solvePnP_11", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_13", "_ZN2cv3dnn19experimental_dnn_v45Layer17outputNameToIndexENS_6StringE", "Java_org_opencv_core_Core_add_11", "__powidf2", "_Unwind_Resume", "Java_org_opencv_core_Core_getBuildInformation_10", "_ZN2cv3dnn19experimental_dnn_v416readNetFromCaffeERKNS_6StringES4_", "cvReleaseImageHeader", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSigma_10", "_ZN2cv16TLSDataContainerD1Ev", "Java_org_opencv_features2d_Params_set_1maxConvexity_10", "_ZN2cv7directx25convertToDirect3DSurface9ERKNS_11_InputArrayEP17IDirect3DSurface9Pv", "Java_org_opencv_core_Core_eigen_10", "_ZNK2cv11FileStorageixEPKc", "_ZN2cv21DetectionBasedTrackerD2Ev", "_ZNK2cv4cuda7HostMem7reshapeEii", "_ZN3tbb8internal18concurrent_monitor18notify_all_relaxedEv", "Java_org_opencv_ml_Boost_getWeightTrimRate_10", "_ZN9CvLevMarqC1Ev", "_ZN2cv5traceERKNS_11_InputArrayE", "Java_org_opencv_photo_TonemapMantiuk_getSaturation_10", "Java_org_opencv_imgproc_Imgproc_floodFill_10", "_ZN2cv10medianBlurERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_ml_StatModel_empty_10", "_ZN6CvTypeD1Ev", "Java_org_opencv_features2d_BRISK_create_14", "Java_org_opencv_features2d_FlannBasedMatcher_create_10", "_ZN2cv11RotatedRectC1ERKNS_6Point_IfEES4_S4_", "cvReshape", "_ZNK3tbb8internal20allocate_child_proxy4freeERNS_4taskE", "Java_org_opencv_features2d_AKAZE_getDescriptorChannels_10", "_ZN2cv10setRNGSeedEi", "Java_org_opencv_ml_EM_trainEM_10", "Java_org_opencv_features2d_AgastFeatureDetector_delete", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_13", "_ZN3tbb16spin_rw_mutex_v318internal_constructEv", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IdSaIdEEdNS_5Size_IiEESE_ddb", "_ZNK2cv3ocl6Device14singleFPConfigEv", "_ZNK2cv3ocl6Device24preferredVectorWidthCharEv", "Java_org_opencv_video_BackgroundSubtractor_apply_10", "_ZN2cv17DescriptorMatcher20DescriptorCollection5clearEv", "Java_org_opencv_ml_DTrees_setMaxDepth_10", "Java_org_opencv_imgproc_Imgproc_Sobel_10", "_ZNK2cv9softfloatmiERKS0_", "Java_org_opencv_calib3d_Calib3d_correctMatches_10", "Java_org_opencv_imgproc_Imgproc_resize_11", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_11", "_ZN2cv3hal6log32fEPKfPfi", "Java_org_opencv_features2d_AKAZE_getNOctaves_10", "_ZN2cv5SobelERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiddi", "_ZN2cv17FlannBasedMatcher12knnMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "_ZN2cv2ml8KNearest6createEv", "_ZN2cv12ellipse2PolyENS_6Point_IdEENS_5Size_IdEEiiiiRSt6vectorIS1_SaIS1_EE", "_ZN2cv3hal8merge16uEPPKtPtii", "Java_org_opencv_objdetect_CascadeClassifier_isOldFormatCascade_10", "cvWriteFrame", "_ZN3tbb8internal14dynamic_unlinkEPv", "Java_org_opencv_ml_DTrees_getMaxCategories_10", "_ZNK2cv12_OutputArray6createEiPKiiibi", "Java_org_opencv_imgproc_Imgproc_matchTemplate_11", "cvSolvePoly", "_ZNK2cv2ml6RTrees8getVotesERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv16MatConstIterator4seekEPKib", "_ZNK2cv4cuda10DeviceInfo12isCompatibleEv", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEd", "_ZN2cv5remapERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_iiRKNS_7Scalar_IdEE", "_ZN2cv4cuda5Event11elapsedTimeERKS1_S3_", "_ZN2cv4UMat15getStdAllocatorEv", "_ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "_ZNK2cv10softdoubleplERKS0_", "_ZNK2cv3ocl6Device16image3DMaxHeightEv", "cvInRange", "Java_org_opencv_core_Core_add_15", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowThreshold_10", "_ZN2cv3hal11cvtLabtoBGREPKhjPhjiiiibbb", "Java_org_opencv_core_Core_divide_12", "_ZN2cv5flann20CompositeIndexParamsC1EiiiN7cvflann20flann_centers_init_tEf", "_ZN3tbb8internal8governor14auto_terminateEPv", "_ZN3tbb8internal3rml14private_serverC1ERNS1_10tbb_clientE", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setFlags_10", "Java_org_opencv_dnn_Net_getUnconnectedOutLayers_10", "_ZNK2cv13HOGDescriptor6copyToERS0_", "_ZN2cv11VideoWriter4openERKNS_6StringEiidNS_5Size_IiEEb", "___Unwind_ForcedUnwind", "Java_org_opencv_core_Mat_nGet", "Java_org_opencv_features2d_MSER_detectRegions_10", "_ZN2cv22estimateRigidTransformERKNS_11_InputArrayES2_b", "cvMixChannels", "_ZN2cv18illuminationChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEff", "_ZNK2cv13HOGDescriptor6detectERKNS_3MatERSt6vectorINS_6Point_IiEESaIS6_EEdNS_5Size_IiEESB_RKS8_", "Java_org_opencv_video_KalmanFilter_set_1errorCovPre_10", "Java_org_opencv_imgproc_Imgproc_findContours_11", "_ZN2cv5utils5trace7details6Region4ImplD2Ev", "_ZN2cv3LDA3ldaERKNS_11_InputArrayES3_", "_ZN2cv21getStructuringElementEiNS_5Size_IiEENS_6Point_IiEE", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_10", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringES4_", "_ZN2cv9SparseMat3HdrC1EiPKii", "_ZNK2cv13HOGDescriptor11getWinSigmaEv", "Java_org_opencv_core_Core_mean_10", "Java_org_opencv_ml_Boost_getBoostType_10", "Java_org_opencv_dnn_DictValue_getStringValue_10", "Java_org_opencv_video_Video_CamShift_10", "Java_org_opencv_dnn_Net_forward_12", "_ZN2cv3ocl14convertTypeStrEiiiPc", "cvTranspose", "Java_org_opencv_ml_ParamGrid_create_11", "Java_org_opencv_ml_KNearest_setEmax_10", "Java_org_opencv_imgproc_Imgproc_cornerHarris_11", "_ZN2cv8multiplyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cv6dilateERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv18getAffineTransformEPKNS_6Point_IfEES3_", "_ZN2cv3hal6cmp64fEPKdjS2_jPhjiiPv", "Java_org_opencv_photo_TonemapDrago_getSaturation_10", "_ZN2cv4cuda6GpuMat6createEiii", "_ZN2cv17CascadeClassifier4readERKNS_8FileNodeE", "_ZN2cv16TLSDataContainerD2Ev", "Java_org_opencv_core_Core_determinant_10", "Java_org_opencv_dnn_Net_getLayersCount_10", "_ZN3tbb8internal18concurrent_monitorD1Ev", "cvReadChainPoint", "_ZN2cv3maxEdRKNS_3MatE", "_ZN3tbb8internal3rml14private_serverD0Ev", "_ZN2cv10convexHullERKNS_11_InputArrayERKNS_12_OutputArrayEbb", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThreshold_10", "_ZNK2cv3ocl5Queue3ptrEv", "_Unwind_Complete", "Java_org_opencv_features2d_GFTTDetector_create_13", "Java_org_opencv_features2d_BRISK_create_15", "Java_org_opencv_ml_EM_predict_10", "Java_org_opencv_imgproc_Imgproc_boxFilter_11", "_ZN2cv3ocl7Context4Impl7getProgERKNS0_13ProgramSourceERKNS_6StringERS6_", "_ZN2cv11linearPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "_ZN2cv7vconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv8internal18WriteStructContextD2Ev", "_ZN2cv5erodeERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_12", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_11", "_ZN3tbb8internal15NFS_GetLineSizeEv", "_ZN2cv3hal10invSqrt64fEPKdPdi", "_ZNK3tbb10interface78internal15task_arena_base16internal_enqueueERNS_4taskEi", "_ZN2cv3powERKNS_10softdoubleES2_", "_ZN2cv4cuda11TargetArchs9builtWithENS0_10FeatureSetE", "cvMin", "_ZN2cv17agast_cornerScoreILi0EEEiPKhPKii", "_ZNK3tbb14bad_last_alloc4whatEv", "Java_org_opencv_ml_TrainData_getNAllVars_10", "Java_org_opencv_features2d_Params_get_1minRepeatability_10", "_ZN2cv25BOWImgDescriptorExtractorD2Ev", "_ZN2cv21setOpenGlDrawCallbackERKNS_6StringEPFvPvES3_", "cvComputeCorrespondEpilines", "_ZN2cv9SparseMat5eraseEiiiPj", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC2EiN7cvflann20flann_centers_init_tEii", "_ZN10__cxxabiv116__enum_type_infoD2Ev", "Java_org_opencv_core_Core_hconcat_10", "_ZNK2cv4cuda10DeviceInfo8memPitchEv", "_ZN2cvplERKNS_7MatExprERKNS_3MatE", "_ZN2cv3ogl6renderERKNS0_6ArraysEiNS_7Scalar_IdEE", "_ZN2cv12VideoCapture4openEi", "_ZN2cv21drawChessboardCornersERKNS_17_InputOutputArrayENS_5Size_IiEERKNS_11_InputArrayEb", "Java_org_opencv_photo_AlignMTB_calculateShift_10", "_ZN2cv3RNG4fillERKNS_17_InputOutputArrayEiRKNS_11_InputArrayES6_b", "_ZN2cv14fillConvexPolyERNS_3MatEPKNS_6Point_IiEEiRKNS_7Scalar_IdEEii", "Java_org_opencv_core_Mat_n_1checkVector__JI", "Java_org_opencv_core_Core_bitwise_1or_10", "_ZN2cvmiERKNS_7MatExprERKNS_7Scalar_IdEE", "_ZN2cv3ocl11haveAmdBlasEv", "_ZN2cv9transformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv3dnn19experimental_dnn_v412ReshapeLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_dnn_Net_Net_10", "Java_org_opencv_features2d_FeatureDetector_create_10", "_ZN2cv5MutexC1Ev", "_ZNK2cv3ocl6Device21maxConstantBufferSizeEv", "_ZN2cv3hal11cvtBGRtoLabEPKhjPhjiiiibbb", "_ZNK2cv12MatAllocator6uploadEPNS_8UMatDataEPKviPKjS6_S6_S6_", "Java_org_opencv_imgproc_CLAHE_getClipLimit_10", "_ZN2cv12getTickCountEv", "cvSplit", "_ZN2cv17CascadeClassifierC1Ev", "cvLoadImage", "Java_org_opencv_features2d_FastFeatureDetector_getNonmaxSuppression_10", "_ZN2cv16TLSDataContainer7releaseEv", "_ZN2cv16ParallelLoopBodyD0Ev", "_ZN2cv11VideoWriterC2ERKNS_6StringEidNS_5Size_IiEEb", "cvRQDecomp3x3", "Java_org_opencv_ml_TrainData_getVarType_10", "Java_org_opencv_ml_SVM_getType_10", "Java_org_opencv_calib3d_Calib3d_undistortImage_10", "_ZNK2cv3ocl6Device9availableEv", "WebPEncodeLosslessBGRA", "_ZN3tbb8internal19itt_load_pointer_v3EPKv", "cvMemStorageAllocString", "Java_org_opencv_features2d_AKAZE_getNOctaveLayers_10", "_ZN2cv2ml9StatModel5trainERKNS_11_InputArrayEiS4_", "_Unwind_GetTextRelBase", "_ZNK2cv12_OutputArray5clearEv", "Java_org_opencv_ml_TrainData_getNTestSamples_10", "cvReprojectImageTo3D", "_ZN2cv11RNG_MT19937C1Ev", "_ZN2cv3ocl6KernelC2Ev", "Java_org_opencv_core_Core_add_14", "_ZNK2cv13HOGDescriptor15computeGradientERKNS_3MatERS1_S4_NS_5Size_IiEES6_", "Java_org_opencv_ml_LogisticRegression_getMiniBatchSize_10", "_ZN2cv8Subdiv2D12connectEdgesEii", "_ZN2cv2ml9TrainDataD2Ev", "Java_org_opencv_imgproc_Imgproc_minEnclosingCircle_10", "cvLoadImageM", "Java_org_opencv_ml_Boost_getWeakCount_10", "_ZN2cv7directx23convertToD3D10Texture2DERKNS_11_InputArrayEP15ID3D10Texture2D", "Java_org_opencv_photo_MergeRobertson_process_11", "_ZN2cv3dnn19experimental_dnn_v48MVNLayer6createERKNS1_11LayerParamsE", "_ZN2cv3hal11cvtBGRtoBGREPKhjPhjiiiiib", "Java_org_opencv_core_Mat_n_1convertTo__JJIDD", "Java_org_opencv_photo_Photo_illuminationChange_10", "Java_org_opencv_core_Core_randShuffle_11", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_10", "Java_org_opencv_imgproc_Imgproc_rotatedRectangleIntersection_10", "Java_org_opencv_ml_ANN_1MLP_setAnnealCoolingRatio_10", "Java_org_opencv_video_BackgroundSubtractorKNN_delete", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayE", "cvInRangeS", "Java_org_opencv_ml_SVM_setType_10", "_ZNK2cv7MatExprclERKNS_5Rect_IiEE", "_ZN2cv3ocl8PlatformD2Ev", "_ZN2cv3ogl9Texture2D8copyFromERKNS_11_InputArrayEb", "cvMemStorageAlloc", "_ZN2cv23evaluateFeatureDetectorERKNS_3MatES2_S2_PSt6vectorINS_8KeyPointESaIS4_EES7_RfRiRKNS_3PtrINS_9Feature2DEEE", "_ZNK2cv11FileStorage4rootEi", "_ZN2cv3powERKNS_11_InputArrayEdRKNS_12_OutputArrayE", "_ZN2cv3ocl9useOpenCLEv", "_ZN2cv3dnn19experimental_dnn_v410ReorgLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Core_cartToPolar_11", "cvPyrUp", "_ZN2cv3MatC1EiPKiiPvPKj", "_ZN2cv8Subdiv2D6locateENS_6Point_IfEERiS3_", "_ZN2cv17textureFlatteningERKNS_11_InputArrayES2_RKNS_12_OutputArrayEffi", "_ZN2cv8tempfileEPKc", "_ZN2cv20AgastFeatureDetector6createEibi", "Java_org_opencv_ml_ANN_1MLP_setLayerSizes_10", "Java_org_opencv_core_Core_bitwise_1and_11", "cvSeqInsertSlice", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_11", "_ZNK2cv3dnn19experimental_dnn_v43Net20getMemoryConsumptionERKSt6vectorIS3_IiSaIiEESaIS5_EERS5_RS3_IjSaIjEESD_", "_ZN2cv20createTonemapMantiukEfff", "Java_org_opencv_imgproc_Imgproc_convexHull_11", "_ZN3tbb18task_group_context12set_priorityENS_10priority_tE", "cvSeqSlice", "Java_org_opencv_features2d_AKAZE_setDiffusivity_10", "_ZN2cv5flann17KDTreeIndexParamsC2Ei", "Java_org_opencv_core_Core_solvePoly_10", "_ZN2cv3dnn19experimental_dnn_v45LayerD1Ev", "_ZN2cv3ogl6Arrays16resetVertexArrayEv", "_ZN2cv9ExceptionC2Ev", "_ZNK2cv16MatConstIterator4lposEv", "cvTypeOf", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_10", "_ZN7CvMatNDC1ERKN2cv3MatE", "cvMinMaxLoc", "Java_org_opencv_calib3d_StereoSGBM_setUniquenessRatio_10", "cvGraphVtxDegreeByPtr", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_10", "_ZN2cv22createMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EES3_", "_ZN2cv17AVIWriteContainer15startWriteChunkEi", "_ZN2cv9waitKeyExEi", "Java_org_opencv_ml_ParamGrid_set_1minVal_10", "_ZN2cv3hal10absdiff32fEPKfjS2_jPfjiiPv", "_ZN2cv5utils7logging8internal15writeLogMessageENS1_8LogLevelEPKc", "_ZN2cv2ml5Boost6createEv", "Java_org_opencv_video_KalmanFilter_get_1controlMatrix_10", "_ZN2cv3ocl5QueueD2Ev", "_ZN2cv7directx27convertFromDirect3DSurface9EP17IDirect3DSurface9RKNS_12_OutputArrayEPv", "_ZN2cv8Subdiv2D8QuadEdgeC2Ei", "_ZN3tbb18captured_exception4moveEv", "_ZN2cv11cornerScoreILi16EEEiPKhPKii", "Java_org_opencv_core_Core_multiply_10", "Java_org_opencv_imgproc_Subdiv2D_locate_10", "Java_org_opencv_photo_Photo_createAlignMTB_10", "_ZN2cv15findCirclesGridERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEE", "_ZN2cv17AVIWriteContainerC2Ev", "_ZN3tbb8internal8governor8sign_offEPNS0_17generic_schedulerE", "_ZN10__cxxabiv117__class_type_infoD2Ev", "Java_org_opencv_features2d_Params_get_1minConvexity_10", "cvFlip", "_ZN3tbb8internal18concurrent_monitor14thread_context4initEv", "_ZNK2cv7MatExpr4typeEv", "_ZNK2cv7MatExpr3mulERKNS_3MatEd", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getMinEigThreshold_10", "_ZNK2cv9softfloatcvNS_10softdoubleEEv", "cvGraphRemoveEdge", "_ZN2cv2ml9TrainData12getSubVectorERKNS_3MatES4_", "Java_org_opencv_ml_ANN_1MLP_getAnnealFinalT_10", "cvGoodFeaturesToTrack", "Java_org_opencv_features2d_BOWTrainer_getDescriptors_10", "Java_org_opencv_core_Mat_n_1setTo__JJ", "Java_org_opencv_imgproc_Imgproc_fillPoly_11", "_ZN2cv16TLSDataContainerC2Ev", "cvCvtSeqToArray", "_ZN2cv3hal6max16uEPKtjS2_jPtjiiPv", "_ZN2cv3dnn19experimental_dnn_v417InnerProductLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_12", "Java_org_opencv_ml_Boost_load_11", "_ZN2cv25getDefaultNewCameraMatrixERKNS_11_InputArrayENS_5Size_IiEEb", "Java_org_opencv_ml_LogisticRegression_get_1learnt_1thetas_10", "Java_org_opencv_videoio_VideoWriter_VideoWriter_10", "_ZNK2cv17FlannBasedMatcher5cloneEb", "_ZN2cv3ogl9Texture2DC2EiiNS1_6FormatEjb", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKSt6vectorINS_6DMatchESaIS6_EE", "cvGetND", "_ZN2cv13drawKeypointsERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEEi", "Java_org_opencv_imgproc_Imgproc_distanceTransform_11", "_ZN3tbb8internal36get_initial_auto_partitioner_divisorEv", "_ZN2cv3ocl7ContextC2ERKS1_", "_ZN2cv8Subdiv2D9swapEdgesEi", "_ZN2cv3ocl12setUseOpenCLEb", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayES4_b", "_ZN2cv3ocl5Queue6createERKNS0_7ContextERKNS0_6DeviceE", "_ZNK2cv8FileNode7isNamedEv", "_ZN2cv3ocl6DeviceC1EPv", "WebPCopyPlane", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThresholdGen_10", "_ZN2cv3ocl7ContextC1Ev", "_ZN2cv9arcLengthERKNS_11_InputArrayEb", "_ZN2cv3Mat7reserveEj", "_ZNK2cv4cuda10DeviceInfo12maxSurface3DEv", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_11", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPPhi", "_ZN2cv4cuda6GpuMat9adjustROIEiiii", "_ZN2cv4cuda11resetDeviceEv", "_ZNK3tbb8internal3rml11tbb_factory21call_with_server_infoEPFvPvPKcES3_", "Java_org_opencv_video_DualTVL1OpticalFlow_setUseInitialFlow_10", "_ZN2cv15setUseOptimizedEb", "Java_org_opencv_ml_KNearest_getAlgorithmType_10", "Java_org_opencv_core_Mat_n_1setTo__JDDDDJ", "_ZNK2cv8FileNodeixERKNS_6StringE", "Java_org_opencv_ml_EM_getClustersNumber_10", "Java_org_opencv_core_Mat_n_1Mat__IIILjava_nio_ByteBuffer_2", "_ZN2cv3dnn19experimental_dnn_v43Net12enableFusionEb", "Java_org_opencv_imgproc_Imgproc_rectangle_12", "Java_org_opencv_photo_Tonemap_setGamma_10", "_ZN2cv23estimateAffinePartial2DERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidjdj", "Java_org_opencv_core_Core_getOptimalDFTSize_10", "_ZN2cv16AVIReadContainer13parseHdrlListENS_6CodecsE", "_ZN2cv22getFontScaleFromHeightEiii", "Java_org_opencv_core_Core_normalize_13", "Java_org_opencv_videoio_VideoWriter_write_10", "_ZN2cv3ocl28predictOptimalVectorWidthMaxERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_15", "_ZN2cv3dnn19experimental_dnn_v412FlattenLayer6createERKNS1_11LayerParamsE", "_ZN2cv11RNG_MT199377uniformEff", "_ZN2cv8clipLineENS_5Rect_IiEERNS_6Point_IiEES4_", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EEidPS0_IiSaIiEEPS0_IdSaIdEE", "_ZN2cv2ml9TrainData6createERKNS_11_InputArrayEiS4_S4_S4_S4_S4_", "__fixunsdfsi", "_ZN2cv3ocl13ProgramSourceD2Ev", "Java_org_opencv_objdetect_HOGDescriptor_getDaimlerPeopleDetector_10", "_ZNK2cv3ocl6Kernel13workGroupSizeEv", "_ZN2cv17FlannBasedMatcher6createEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThreshold_10", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayERNS0_6StreamE", "_ZN2cv14setTrackbarMaxERKNS_6StringES2_i", "_ZSt14set_unexpectedPFvvE", "_ZN2cvltERKNS_3MatES2_", "cvWriteReal", "_ZN2cv17CommandLineParser5aboutERKNS_6StringE", "cvDestroyAllWindows", "_ZNK2cv3dnn19experimental_dnn_v43Net8getFLOPSEiRKSt6vectorIiSaIiEE", "Java_org_opencv_ml_SVMSGD_load_11", "_ZN2cv3ocl8internal10isCLBufferERNS_4UMatE", "Java_org_opencv_ml_LogisticRegression_predict_10", "_ZN2cv12countNonZeroERKNS_11_InputArrayE", "_ZNK2cv4cuda10DeviceInfo10ECCEnabledEv", "_ZN2cvplERKNS_7MatExprERKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_calcBackProject_10", "Java_org_opencv_calib3d_Calib3d_stereoRectify_10", "Java_org_opencv_core_Core_transpose_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork30communicateWithDetectingThreadERKNS_3MatERSt6vectorINS_5Rect_IiEESaIS7_EE", "_ZN2cv3dnn19experimental_dnn_v45Layer9tryAttachERKNS_3PtrINS1_11BackendNodeEEE", "_ZN2cv17FlannBasedMatcher15radiusMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "WebPDecodeRGB", "_ZN2cv11convertMapsERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_ib", "Java_org_opencv_core_Core_min_11", "Java_org_opencv_photo_Photo_pencilSketch_10", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_features2d_ORB_setMaxFeatures_10", "_ZN2cv13HOGDescriptor14setSVMDetectorERKNS_11_InputArrayE", "_ZN2cv12VideoCapture8retrieveERKNS_12_OutputArrayEi", "Java_org_opencv_features2d_MSER_setPass2Only_10", "_ZN2cv3hal12magnitude64fEPKdS2_Pdi", "_ZNK2cv5flann11IndexParams9getStringERKNS_6StringES4_", "_ZNK2cv3ocl6Device12localMemSizeEv", "_ZNK2cv4MSER14getDefaultNameEv", "_ZN3tbb8internal14observer_proxyC2ERNS0_26task_scheduler_observer_v3E", "__gnu_end_cleanup", "_ZN2cv9transposeERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_10", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_11", "cvOpenFileStorage", "Java_org_opencv_core_Core_flip_10", "cvSetErrStatus", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_ii", "cvGuiBoxReport", "_ZN2cv4cuda16createContinuousEiiiRKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_applyColorMap_10", "Java_org_opencv_ml_EM_trainM_10", "__divdc3", "_ZN2cv3hal6mul64fEPKdjS2_jPdjiiPv", "cvRetrieveFrame", "_ZN2cv16BOWKMeansTrainerD1Ev", "_ZN2cv3ocl9KernelArgC2Ev", "_ZN2cv19FastFeatureDetector6createEibi", "_ZN2cv15calibrateCameraERKNS_11_InputArrayES2_NS_5Size_IiEERKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_iNS_12TermCriteriaE", "Java_org_opencv_video_BackgroundSubtractorMOG2_apply_10", "_ZN2cv8Subdiv2D6VertexC2ENS_6Point_IfEEbi", "_ZN2cv3dnn19experimental_dnn_v416ConvolutionLayer6createERKNS1_11LayerParamsE", "_ZN2cv3maxERKNS_4UMatES2_RS0_", "cvSeqPushMulti", "Java_org_opencv_video_DualTVL1OpticalFlow_getMedianFiltering_10", "_ZN2cv3ocl13ProgramSourceC1Ev", "cvPtr1D", "_ZN2cv2ml3SVM9trainAutoERKNS_11_InputArrayEiS4_iNS_3PtrINS0_9ParamGridEEES7_S7_S7_S7_S7_b", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockStride_10", "_ZNK2cv2ml6KDTree4dimsEv", "_ZN2cv3dnn19experimental_dnn_v49LSTMLayer17outputNameToIndexENS_6StringE", "cvCorrectMatches", "Java_org_opencv_dnn_DictValue_getIntValue_11", "Java_org_opencv_features2d_MSER_delete", "_ZN2cv8va_intel20convertFromVASurfaceEPvjNS_5Size_IiEERKNS_12_OutputArrayE", "Java_org_opencv_ml_DTrees_getUse1SERule_10", "Java_org_opencv_videoio_VideoCapture_read_10", "_ZN2cv3hal6add16uEPKtjS2_jPtjiiPv", "_ZN2cv11RNG_MT19937cvjEv", "_ZNK2cv5flann5Index11getDistanceEv", "_ZN2cv21invertAffineTransformERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv16accumulateSquareERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "_ZNK2cv2ml9StatModel9calcErrorERKNS_3PtrINS0_9TrainDataEEEbRKNS_12_OutputArrayE", "_ZN2cv12KalmanFilterC2Ev", "_ZN3tbb8internal9schedulerD2Ev", "Java_org_opencv_imgproc_Imgproc_warpAffine_11", "_ZN2cv2ml6RTrees6createEv", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_10", "_ZN2cv3ogl6BufferC1ERKNS_11_InputArrayENS1_6TargetEb", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_10", "_ZNK2cv3ocl7Context3ptrEv", "_ZNSt13bad_exceptionD1Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarInit_10", "Java_org_opencv_features2d_DescriptorMatcher_match_12", "Java_org_opencv_dnn_Layer_delete", "_ZN2cv12seqPushFrontEP5CvSeqPKv", "cvHoughCircles", "cvDecodeImage", "Java_org_opencv_core_Core_SVDecomp_10", "Java_org_opencv_video_FarnebackOpticalFlow_getPolyN_10", "Java_org_opencv_features2d_AgastFeatureDetector_getDefaultName_10", "_ZN2cv3MatC1ERKS0_RKNS_5RangeES5_", "_ZNK2cv7MatExpr3colEi", "cvCreateStructuringElementEx", "_ZNK2cv16MatConstIterator3posEv", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_10", "_ZN2cv2ml5Boost4loadERKNS_6StringES4_", "_ZNK11CvSparseMat15copyToSparseMatERN2cv9SparseMatE", "cvGetSeqReaderPos", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_10", "_ZN3tbb8internal17generic_scheduler13allocate_taskEjPNS_4taskEPNS_18task_group_contextE", "_ZN2cv3SVD9backSubstERKNS_11_InputArrayES3_S3_S3_RKNS_12_OutputArrayE", "cvGetNormalizedCentralMoment", "_ZN3tbb8internal14observer_proxyC1ERNS0_26task_scheduler_observer_v3E", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_10", "_ZN2cv3minEdRKNS_3MatE", "Java_org_opencv_core_Core_PSNR_10", "Java_org_opencv_features2d_AgastFeatureDetector_create_10", "_ZN2cv8Subdiv2D6VertexC1Ev", "_ZN2cv5utils5trace7details6Region4Impl11enterRegionERNS2_23TraceManagerThreadLocalE", "Java_org_opencv_ml_ANN_1MLP_setBackpropMomentumScale_10", "_ZN2cv3hal5and8uEPKhjS2_jPhjiiPv", "_ZN2cv2ml7ANN_MLP4loadERKNS_6StringE", "Java_org_opencv_features2d_GFTTDetector_setK_10", "cvGetSubRect", "Java_org_opencv_ml_DTrees_load_10", "cvReshapeMatND", "Java_org_opencv_core_Core_solvePoly_11", "cvBoxPoints", "_ZNK3tbb27invalid_multiple_scheduling4whatEv", "_ZN2cv3ocl6DeviceC1Ev", "_ZN2cv12GFTTDetector6createEiddibd", "_ZNK2cv3ocl6Device16OpenCL_C_VersionEv", "_ZN3tbb10interface78internal15task_arena_base15internal_attachEv", "Java_org_opencv_features2d_Params_set_1filterByInertia_10", "_ZN2cv17FlannBasedMatcher4readERKNS_8FileNodeE", "_ZN2cv4UMat10deallocateEv", "Java_org_opencv_imgproc_Imgproc_circle_10", "Java_org_opencv_ml_EM_create_10", "_ZN2cv4UMat5setToERKNS_11_InputArrayES3_", "_ZN2cv4readERKNS_8FileNodeERSsRKSs", "_ZN2cv3ocl7ProgramD1Ev", "_ZN2cv8Subdiv2D8QuadEdgeC1Ev", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorINS_5Rect_IiEESaIS3_EE", "_ZN2cv3ocl9KernelArg8ConstantERKNS_3MatE", "_ZNK2cv12MatAllocator8downloadEPNS_8UMatDataEPviPKjS5_S5_S5_", "Java_org_opencv_video_BackgroundSubtractor_getBackgroundImage_10", "_ZNK2cv2ml6KDTree9getPointsERKNS_11_InputArrayERKNS_12_OutputArrayES7_", "cvGetCaptureProperty", "_ZN3tbb8internal32itt_load_pointer_with_acquire_v3EPKv", "_ZN10__cxxabiv123__fundamental_type_infoD2Ev", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERNS0_6StreamE", "_ZN2cv5flann20CompositeIndexParamsC2EiiiN7cvflann20flann_centers_init_tEf", "_ZN2cv9SparseMat3ptrEibPj", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_10", "_ZN2cv4KAZE6createEbbfiii", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_11", "__addsf3", "_ZN2cv3hal5QR32fEPfjiiiS1_jS1_", "_ZNK2cv3ocl6Device22globalMemCacheLineSizeEv", "_ZN2cv8internal15NormalizePixelsERKNS_3MatERKNS0_15IntrinsicParamsE", "Java_org_opencv_core_Core_norm_10", "cvWriteString", "cvNextGraphItem", "_ZN2cv11determinantERKNS_11_InputArrayE", "Java_org_opencv_features2d_MSER_getMinArea_10", "cvMoveWindow", "_ZN3tbb10interface914global_control16internal_destroyEv", "__ashldi3", "cvPow", "__fixsfsi", "_ZN2cv21find4QuadCornerSubpixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEE", "_ZN2cv7MomentsC1Ev", "Java_org_opencv_features2d_FlannBasedMatcher_FlannBasedMatcher_10", "cvResizeWindow", "_ZN2cv17adaptiveThresholdERKNS_11_InputArrayERKNS_12_OutputArrayEdiiid", "Java_org_opencv_ml_SVMSGD_setMarginRegularization_10", "Java_org_opencv_video_KalmanFilter_set_1measurementNoiseCov_10", "Java_org_opencv_ml_EM_trainE_10", "Java_org_opencv_ml_DTrees_setCVFolds_10", "cvInitSystem", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_10", "Java_org_opencv_photo_Tonemap_delete", "Java_org_opencv_features2d_Params_set_1minInertiaRatio_10", "cvGetErrMode", "_ZN2cv8UMatDataD2Ev", "_ZNK2cv4cuda10DeviceInfo11l2CacheSizeEv", "Java_org_opencv_dnn_Net_connect_10", "_ZN10__cxxabiv112__unexpectedEPFvvE", "cvMorphologyEx", "Java_org_opencv_features2d_Features2d_drawKeypoints_10", "_ZN2cv3ogl9Texture2D7releaseEv", "Java_org_opencv_ml_LogisticRegression_setRegularization_10", "_ZN2cv3hal5LU64fEPdjiS1_ji", "_ZN2cv3hal11Cholesky64fEPdjiS1_ji", "Java_org_opencv_imgproc_Imgproc_convexHull_10", "_ZN2cv3hal6cmp32sEPKijS2_jPhjiiPv", "_ZN3tbb18task_group_context26register_pending_exceptionEv", "_ZN2cv10BriskLayerC2ERKNS_3MatEff", "Java_org_opencv_video_DualTVL1OpticalFlow_getGamma_10", "_ZN2cv29createGeneralizedHoughBallardEv", "_ZN2cv12boundingRectERKNS_11_InputArrayE", "_ZN2cv12KalmanFilterC1Eiiii", "__unorddf2", "Java_org_opencv_imgproc_Imgproc_blur_11", "cvGetTickCount", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_11", "_ZN2cv5utils31getConfigurationParameterStringEPKcS2_", "Java_org_opencv_imgproc_Imgproc_initWideAngleProjMap_11", "_ZN2cv5instr8setFlagsENS0_5FLAGSE", "Java_org_opencv_features2d_FastFeatureDetector_getType_10", "_ZN2cv5MatOpD0Ev", "_ZN2cv3ocl7Image2DC2ERKS1_", "_ZN2cv8logPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "Java_org_opencv_core_Mat_n_1size", "_ZN2cv9meanShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "_ZN10__cxxabiv120__si_class_type_infoD2Ev", "_ZN2cv25computeCorrespondEpilinesERKNS_11_InputArrayEiS2_RKNS_12_OutputArrayE", "_ZN3tbb8internal17generic_scheduler16wait_until_emptyEv", "_ZN3tbb8internal6marketC2Ejjj", "WebPPictureInitInternal", "_ZNK2cv9Feature2D11defaultNormEv", "Java_org_opencv_core_TickMeter_getTimeMicro_10", "Java_org_opencv_ml_LogisticRegression_getRegularization_10", "Java_org_opencv_core_Core_idft_11", "Java_org_opencv_ml_TrainData_getTrainSamples_11", "Java_org_opencv_objdetect_CascadeClassifier_getFeatureType_10", "_ZN2cv17CommandLineParserD2Ev", "_ZNK2cv4cuda10DeviceInfo15memoryClockRateEv", "_ZN2cv3ocl6KernelD1Ev", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayERNS0_6StreamE", "Java_org_opencv_ml_StatModel_predict_10", "Java_org_opencv_imgproc_Imgproc_ellipse_11", "Java_org_opencv_video_KalmanFilter_set_1statePost_10", "_ZNK2cv3ocl6Device23preferredVectorWidthIntEv", "_ZN2cv3ocl13ProgramSourceC1ERKNS_6StringES4_S4_S4_", "_ZN2cv3ocl8internal14isOpenCLForcedEv", "cvOrS", "_ZN9CvLevMarq4initEii14CvTermCriteriab", "_ZNK2cv3ocl6Device21executionCapabilitiesEv", "_ZN2cv4cuda7HostMem12getAllocatorENS1_9AllocTypeE", "Java_org_opencv_ml_EM_setClustersNumber_10", "Java_org_opencv_dnn_Dnn_readTorchBlob_10", "WebPInitDecBufferInternal", "_ZNK2cv5MatOp3roiERKNS_7MatExprERKNS_5RangeES6_RS1_", "Java_org_opencv_features2d_ORB_setFirstLevel_10", "_ZN2cv11RNG_MT199377uniformEdd", "Java_org_opencv_video_KalmanFilter_set_1controlMatrix_10", "_ZNK2cv17CascadeClassifier21getOriginalWindowSizeEv", "_ZNSt8bad_castD1Ev", "Java_org_opencv_core_Mat_nPutS", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_11", "Java_org_opencv_imgproc_Imgproc_undistortPoints_11", "Java_org_opencv_calib3d_Calib3d_recoverPose_14", "_ZN2cvanERKNS_3MatERKNS_7Scalar_IdEE", "_ZN3tbb8internal17generic_scheduler19spawn_root_and_waitERNS_4taskERPS2_", "Java_org_opencv_calib3d_Calib3d_projectPoints_13", "cvInitTreeNodeIterator", "__gnu_thumb1_case_sqi", "Java_org_opencv_ml_DTrees_getTruncatePrunedTree_10", "_ZN2cv12VideoCapture4openERKNS_6StringE", "_ZN2cv16FileNodeIteratormmEv", "_ZN2cv3dnn19experimental_dnn_v43Net20setPreferableBackendEi", "_Unwind_VRS_Get", "_ZN2cv5flann11IndexParamsD2Ev", "_ZN2cv12sqrBoxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "_ZN2cv9thresholdERKNS_11_InputArrayERKNS_12_OutputArrayEddi", "_ZN2cv27CirclesGridFinderParametersC1Ev", "cvSmooth", "_ZN2cv5utils29getConfigurationParameterBoolEPKcb", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_id", "_ZN2cv10fastMallocEj", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_15", "_ZNK2cv3Mat7getUMatEiNS_14UMatUsageFlagsE", "_ZN2cv11convertFp16ERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EEdNS_5Size_IiEESB_ddb", "_ZNK2cv3ocl6Kernel5emptyEv", "cvCreateTrackbar", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EES2_S8_RKS3_IS3_INS_6DMatchESaIS9_EESaISB_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESM_RKS3_IS3_IcSaIcEESaISO_EEi", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_setAnnealItePerStep_10", "cvUnregisterType", "Java_org_opencv_core_Mat_nGetI", "Java_org_opencv_imgproc_Imgproc_Canny_10", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_11", "_ZNK2cv11VideoWriter3getEi", "_ZN2cv17destroyAllWindowsEv", "_ZN3tbb8internal8governor13one_time_initEv", "cvUndistortPoints", "Java_org_opencv_features2d_BFMatcher_create_11", "_ZN2cv3hal7sqrt32fEPKfPfi", "_ZN2cv4cuda6GpuMatC2EiiiPvj", "Java_org_opencv_imgproc_Imgproc_Laplacian_11", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_11", "Java_org_opencv_ml_SVM_create_10", "_ZN2cv3cosERKNS_10softdoubleE", "_ZN2cv17AVIWriteContainer17writeStreamHeaderENS_6CodecsE", "WebPBlendAlpha", "Java_org_opencv_videoio_VideoWriter_isOpened_10", "_ZN2cv3hal6add32fEPKfjS2_jPfjiiPv", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_10", "_ZNK2cv3ocl6Device4nameEv", "_ZN2cv3hal6exp64fEPKdPdi", "_ZN2cv13applyColorMapERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv12VideoCaptureC2Ev", "_ZN2cv10selectROIsERKNS_6StringERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS8_EEbb", "WebPGetColorPalette", "_ZN2cv4UMat5zerosEiPKii", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_11", "Java_org_opencv_features2d_AKAZE_setDescriptorSize_10", "_ZNK2cv4UMat1tEv", "Java_org_opencv_video_KalmanFilter_get_1transitionMatrix_10", "_ZN2cv3LDAD2Ev", "_ZNK2cv14DefaultDeleterI9CvCaptureEclEPS1_", "_ZN2cv5instr8NodeDataD2Ev", "Java_org_opencv_core_Core_PCABackProject_10", "_ZN2cv3ocl7ContextC2Ei", "_ZN2cv7vconcatEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZN2cv9ExceptionC1Ev", "_ZN2cv12cornerHarrisERKNS_11_InputArrayERKNS_12_OutputArrayEiidi", "_ZN2cv12VideoCaptureC1ERKNS_6StringE", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_11", "Java_org_opencv_core_Core_patchNaNs_11", "Java_org_opencv_features2d_KAZE_setNOctaveLayers_10", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_10", "Java_org_opencv_calib3d_Calib3d_stereoRectify_12", "Java_org_opencv_core_Mat_n_1t", "_ZN2cv3dnn19experimental_dnn_v43Net10getLayerIdERKNS_6StringE", "_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_", "_ZN2cv17CommandLineParserC1ERKS0_", "Java_org_opencv_dnn_DictValue_DictValue_11", "_ZN2cv8internal15IntrinsicParamsaSERKNS_3MatE", "_ZN2cv3hal23cvtMultipliedRGBAtoRGBAEPKhjPhjii", "VP8GetInfo", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorSizeEv", "cvGetDims", "_ZN2cv2ml3SVM4loadERKNS_6StringE", "__powisf2", "_ZN2cv11addWeightedERKNS_11_InputArrayEdS2_ddRKNS_12_OutputArrayEi", "_ZNK2cv3ogl6Buffer5cloneENS1_6TargetEb", "_ZN2cv17triangulatePointsERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZN2cv13parallel_for_ERKNS_5RangeERKNS_16ParallelLoopBodyEd", "Java_org_opencv_calib3d_StereoBM_getUniquenessRatio_10", "cvMinAreaRect2", "_ZN2cv22createOptFlow_DualTVL1Ev", "_ZN2cv3dnn19experimental_dnn_v413blobFromImageERKNS_11_InputArrayERKNS_12_OutputArrayEdRKNS_5Size_IiEERKNS_7Scalar_IdEEbb", "_ZN2cv11VideoWriterD2Ev", "Java_org_opencv_imgproc_Imgproc_line_10", "_ZNK2cv4KAZE14getDefaultNameEv", "Java_org_opencv_ml_DTrees_setMaxCategories_10", "Java_org_opencv_calib3d_Calib3d_undistortPoints_11", "_ZNK2cv14DefaultDeleterI13CvVideoWriterEclEPS1_", "Java_org_opencv_calib3d_Calib3d_initUndistortRectifyMap_10", "_ZN2cv11VideoWriterlsERKNS_3MatE", "Java_org_opencv_ml_LogisticRegression_getLearningRate_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowValue_10", "Java_org_opencv_imgproc_Imgproc_warpPerspective_11", "_ZN2cv25decomposeProjectionMatrixERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_", "Java_org_opencv_imgproc_Imgproc_undistort_11", "_ZN2cv4UMatC1ERKS0_RKSt6vectorINS_5RangeESaIS4_EE", "Java_org_opencv_objdetect_HOGDescriptor_getDescriptorSize_10", "_ZN2cv10meanStdDevERKNS_11_InputArrayERKNS_12_OutputArrayES5_S2_", "Java_org_opencv_core_Core_solveCubic_10", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_10", "Java_org_opencv_imgproc_Imgproc_boxFilter_10", "Java_org_opencv_imgproc_Subdiv2D_getVertex_11", "Java_org_opencv_core_Core_vconcat_10", "_ZN2cv21DetectionBasedTracker20updateTrackedObjectsERKSt6vectorINS_5Rect_IiEESaIS3_EE", "_ZN2cv4gemmERKNS_11_InputArrayES2_dS2_dRKNS_12_OutputArrayEi", "Java_org_opencv_imgproc_Subdiv2D_getVertex_10", "_ZNK2cv11_InputArray6offsetEi", "Java_org_opencv_core_Core_norm_15", "Java_org_opencv_core_Core_norm_13", "Java_org_opencv_ml_ANN_1MLP_setRpropDWPlus_10", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMinus_10", "_ZN2cv11RNG_MT19937clEj", "_ZN2cv5utils2fs6getcwdEv", "_ZNK2cv3ocl6Device7versionEv", "_ZN2cv9SparseMat3HdrC2EiPKii", "_ZN2cv11VideoWriter3setEid", "cvInitImageHeader", "_ZN2cv24convertPointsHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv9SparseMat13resizeHashTabEj", "_ZN2cv3hal8recip32sEPKijS2_jPijiiPv", "_ZN2cv5CannyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEddb", "Java_org_opencv_ml_LogisticRegression_setMiniBatchSize_10", "_ZNK2cv3ocl6Device22imageFromBufferSupportEv", "Java_org_opencv_ml_ParamGrid_set_1maxVal_10", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i", "_ZNK2cv3ogl6Arrays4bindEv", "_ZN2cv4FASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEibi", "Java_org_opencv_ml_ANN_1MLP_1ANNEAL_getAnnealCoolingRatio_10", "Java_org_opencv_dnn_Net_setHalideScheduler_10", "_ZN2cv16AVIReadContainer10initStreamENS_3PtrINS_16VideoInputStreamEEE", "Java_org_opencv_photo_Photo_edgePreservingFilter_11", "_ZN2cv4FASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEib", "cvComposeRT", "_ZSt10unexpectedv", "Java_org_opencv_core_Core_gemm_11", "_ZNK2cv3ocl6Device24preferredVectorWidthHalfEv", "_ZN2cv3ipp6useIPPEv", "_Unwind_Backtrace", "Java_org_opencv_videoio_VideoCapture_VideoCapture_13", "_ZNK2cv3ocl6Device21nativeVectorWidthHalfEv", "Java_org_opencv_dnn_Net_setInput_11", "_ZN2cv8Subdiv2D6VertexC1ENS_6Point_IfEEbi", "_ZN2cv21DetectionBasedTracker4stopEv", "Java_org_opencv_photo_CalibrateDebevec_getRandom_10", "_ZN2cv7directx25convertFromD3D10Texture2DEP15ID3D10Texture2DRKNS_12_OutputArrayE", "_ZN2cv4cuda24printShortCudaDeviceInfoEi", "_ZNK2cv3ocl6Device16maxWorkItemSizesEPj", "_ZNK2cv3ocl6Device23nativeVectorWidthDoubleEv", "Java_org_opencv_imgproc_Imgproc_HoughLines_10", "_ZN2cv2ml6DTrees4NodeC2Ev", "_ZN2cv4readERKNS_8FileNodeERSt6vectorINS_6DMatchESaIS4_EE", "_ZN2cv3ogl6Arrays14setAutoReleaseEb", "Java_org_opencv_core_Core_mulTransposed_12", "_ZN3tbb10interface914global_control12active_valueEi", "__fixdfdi", "Java_org_opencv_objdetect_HOGDescriptor_save_11", "_ZN2cv21DetectionBasedTracker3runEv", "_ZN3tbb18task_group_context7bind_toEPNS_8internal17generic_schedulerE", "Java_org_opencv_photo_Photo_createCalibrateRobertson_10", "_ZN2cv4lineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_Unwind_Resume_or_Rethrow", "Java_org_opencv_dnn_DictValue_isReal_10", "Java_org_opencv_video_KalmanFilter_KalmanFilter_12", "_ZN2cv3ocl7Context10getDefaultEb", "_ZN2cv3hal6log64fEPKdPdi", "Java_org_opencv_features2d_FastFeatureDetector_delete", "Java_org_opencv_ml_TrainData_getVarIdx_10", "Java_org_opencv_features2d_BOWKMeansTrainer_cluster_11", "_ZN2cv4readERKNS_8FileNodeERNS_6DMatchERKS3_", "_ZN2cv8CholeskyEPdjiS0_ji", "_ZNK2cv10softdoublegtERKS0_", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERNS_9SparseMatEiS4_PPKfbb", "Java_org_opencv_video_KalmanFilter_get_1errorCovPost_10", "_ZNK2cv17DescriptorMatcher20DescriptorCollection14getDescriptorsEv", "_ZN2cv11minAreaRectERKNS_11_InputArrayE", "Java_org_opencv_core_Mat_n_1inv__JI", "Java_org_opencv_features2d_BFMatcher_BFMatcher_10", "_ZdlPv"], "allstrings": ["N2cv6detail8PtrOwnerE", "N2cv6detail12PtrOwnerImplINS_5flann17KDTreeIndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann12SearchParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_19javaFeatureDetectorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_23javaDescriptorExtractorENS_14DefaultDeleterIS2_EEEE", "core::meanStdDev_10()", "features2d::getMinDistance_10()", "core::subtract_15()", "ml::setAnnealFinalT_10()", "imgproc::initUndistortRectifyMap_10()", "video::set_1errorCovPost_10()", "features2d::getDefaultName_10()", "calib3d::stereoRectify_11()", "ml::setDefaultK_10()", "ml::setTrainMethod_10()", "ml::setInitialStepSize_10()", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "photo::getContrast_10()", "features2d::setHarrisDetector_10()", "video::getVarMax_10()", "imgproc::connectedComponentsWithStats_11()", "imgproc::boxFilter_11()", "video::setNumIters_10()", "imgproc::compareHist_10()", "core::vconcat_10()", "video::getHistory_10()", "video::create_10()", "imgproc::applyColorMap_10()", "ml::load_10()", "features2d::setType_10()", "features2d::setFirstLevel_10()", "features2d::empty_10()", "videoio::grab_10()", "calib3d::sampsonDistance_10()", "features2d::setNOctaves_10()", "objdetect::checkDetectorSize_10()", "ml::getTestSampleIdx_10()", "photo::setThreshold_10()", "features2d::getDescriptorChannels_10()", "calib3d::setSpeckleWindowSize_10()", "ml::getMiniBatchSize_10()", "imgproc::setTilesGridSize_10()", "video::predict_11()", "core::divide_11()", "imgproc::demosaicing_11()", "ml::getTermCriteria_10()", "calib3d::estimateAffinePartial2D_10()", "core::split_10()", "video::setHistory_10()", "ml::setC_10()", "ml::setCVFolds_10()", "ml::train_12()", "features2d::getThreshold_10()", "video::create_10()", "features2d::drawKeypoints_11()", "photo::createCalibrateRobertson_10()", "objdetect::getOriginalWindowSize_10()", "calib3d::findCirclesGrid_11()", "dnn::getUnconnectedOutLayers_10()", "calib3d::recoverPose_13()", "ml::getTermCriteria_10()", "calib3d::reprojectImageTo3D_12()", "ml::load_10()", "ml::isTrained_10()", "ml::setAnnealCoolingRatio_10()", "ml::getWeights_10()", "core::bitwise_1and_10()", "features2d::getVocabulary_10()", "video::calc_11()", "core::multiply_13()", "objdetect::detect_11()", "features2d::knnMatch_13()", "features2d::add_10()", "video::KalmanFilter_10()", "photo::setRandom_10()", "dnn::readTorchBlob_10()", "photo::process_11()", "ml::findNearest_11()", "calib3d::getSpeckleRange_10()", "ml::setEmax_10()", "videoio::VideoWriter_12()", "imgproc::dilate_11()", "photo::denoise_1TVL1_11()", "ml::predictProb_10()", "dnn::Net_10()", "imgproc::pyrUp_11()", "features2d::BOWKMeansTrainer_10()", "calib3d::getPreFilterCap_10()", "ml::getRegressionAccuracy_10()", "features2d::create_11()", "photo::setLambda_10()", "photo::createAlignMTB_11()", "ml::getValues_10()", "core::PCABackProject_10()", "ml::setTermCriteria_10()", "dnn::DictValue_11()", "ml::trainEM_11()", "video::getOuterIterations_10()", "ml::getNu_10()", "calib3d::calibrateCameraExtended_12()", "objdetect::CascadeClassifier_10()", "video::setUseInitialFlow_10()", "photo::createTonemap_10()", "photo::illuminationChange_10()", "video::setFastPyramids_10()", "imgproc::distanceTransformWithLabels_10()", "core::eigen_11()", "photo::setSaturation_10()", "video::setWinSize_10()", "calib3d::setSpeckleRange_10()", "objdetect::empty_10()", "video::getTermCriteria_10()", "video::setVarInit_10()", "features2d::descriptorType_10()", "video::apply_10()", "videoio::retrieve_10()", "imgproc::contourArea_10()", "core::normalize_11()", "ml::predict2_10()", "video::getFlags_10()", "ml::setTrainTestSplit_10()", "imgproc::circle_12()", "ml::getUseSurrogates_10()", "ml::load_10()", "objdetect::load_11()", "photo::fastNlMeansDenoisingMulti_10()", "core::polarToCart_10()", "features2d::create_10()", "dnn::setPreferableBackend_10()", "imgproc::cornerHarris_11()", "objdetect::detectMultiScale2_11()", "features2d::setDelta_10()", "objdetect::getWinSigma_10()", "video::getWarpingsNumber_10()", "video::setVarThresholdGen_10()", "video::findTransformECC_12()", "calib3d::filterSpeckles_11()", "features2d::getScoreType_10()", "videoio::isOpened_10()", "video::calcOpticalFlowPyrLK_10()", "ml::getClustersNumber_10()", "video::getShadowThreshold_10()", "ml::getLearningRate_10()", "ml::getWeightTrimRate_10()", "objdetect::compute_10()", "dnn::blobFromImages_11()", "video::CamShift_10()", "videoio::set_10()", "ml::setTermCriteria_10()", "dnn::empty_10()", "videoio::open_10()", "imgproc::createHanningWindow_10()", "videoio::get_10()", "video::getScaleStep_10()", "photo::process_10()", "features2d::create_10()", "photo::setExposureWeight_10()", "features2d::getMaxArea_10()", "ml::setOptimalParameters_10()", "video::calcOpticalFlowPyrLK_11()", "core::subtract_12()", "ml::getMarginRegularization_10()", "imgproc::Sobel_10()", "video::setMinEigThreshold_10()", "dnn::getLayer_10()", "calib3d::Rodrigues_11()", "imgproc::fillPoly_10()", "photo::getRadiance_10()", "features2d::knnMatch_11()", "calib3d::setMode_10()", "imgproc::pointPolygonTest_10()", "imgcodecs::imwrite_10()", "calib3d::stereoRectifyUncalibrated_11()", "dnn::readNetFromTorch_10()", "features2d::descriptorSize_10()", "features2d::detectAndCompute_11()", "core::getCPUTickCount_10()", "ml::trainAuto_10()", "imgproc::matchTemplate_11()", "videoio::open_12()", "ml::setIsClassifier_10()", "photo::getContrastWeight_10()", "video::setWarpingsNumber_10()", "features2d::getBlockSize_10()", "video::calcOpticalFlowFarneback_10()", "objdetect::get_1blockSize_10()", "core::completeSymm_10()", "dnn::connect_10()", "calib3d::findCirclesGrid_10()", "core::divide_17()", "features2d::setScoreType_10()", "imgproc::edgeDst_11()", "videoio::VideoCapture_13()", "video::setNSamples_10()", "imgproc::EMD_11()", "video::get_1measurementNoiseCov_10()", "videoio::isOpened_10()", "imgproc::morphologyEx_11()", "ml::getTermCriteria_10()", "features2d::create_13()", "video::set_1transitionMatrix_10()", "core::sumElems_10()", "features2d::create_13()", "features2d::setThreshold_10()", "features2d::cluster_10()", "dnn::run_10()", "imgproc::goodFeaturesToTrack_11()", "imgproc::GaussianBlur_10()", "photo::setContrast_10()", "dnn::deleteLayer_10()", "features2d::BFMatcher_11()", "imgproc::connectedComponentsWithAlgorithm_10()", "ml::setCoef0_10()", "features2d::cluster_11()", "imgproc::demosaicing_10()", "features2d::getQualityLevel_10()", "calib3d::setSmallerBlockSize_10()", "imgproc::drawSegments_10()", "objdetect::save_11()", "imgproc::edgeOrg_11()", "core::transform_10()", "calib3d::undistortPoints_10()", "video::getWinSize_10()", "imgproc::HoughLinesP_11()", "core::multiply_10()", "features2d::descriptorSize_10()", "video::getVarMin_10()", "ml::getMissing_10()", "ml::setGamma_10()", "videoio::open_10()", "features2d::create_10()", "imgproc::getRectSubPix_11()", "photo::fastNlMeansDenoising_11()", "ml::getRpropDW0_10()", "calib3d::findEssentialMat_12()", "dnn::getParam_11()", "photo::colorChange_11()", "imgcodecs::imreadmulti_10()", "ml::getIsClassifier_10()", "ml::getVarCount_10()", "imgproc::cornerSubPix_10()", "calib3d::stereoCalibrateExtended_11()", "features2d::setMaxFeatures_10()", "core::norm_15()", "video::setkNNSamples_10()", "imgproc::invertAffineTransform_10()", "imgproc::arrowedLine_11()", "video::createOptFlow_1DualTVL1_10()", "dnn::setPreferableTarget_10()", "videoio::VideoCapture_10()", "ml::getClassLabels_10()", "imgproc::getDefaultNewCameraMatrix_10()", "features2d::getTrainDescriptors_10()", "features2d::getNLevels_10()", "imgproc::Canny_13()", "calib3d::setUniquenessRatio_10()", "core::getBuildInformation_10()", "ml::setType_10()", "core::SVDecomp_11()", "imgproc::Laplacian_11()", "video::getShadowValue_10()", "features2d::getNOctaves_10()", "features2d::getDefaultName_10()", "imgproc::ellipse_14()", "video::setScalesNumber_10()", "photo::getLightAdaptation_10()", "imgproc::getGaborKernel_11()", "imgproc::spatialGradient_11()", "features2d::create_10()", "dnn::setInput_11()", "ml::setDegree_10()", "photo::pencilSketch_10()", "ml::getVarIdx_10()", "imgproc::blur_12()", "calib3d::initUndistortRectifyMap_10()", "calib3d::findEssentialMat_11()", "features2d::getMaxFeatures_10()", "imgproc::sepFilter2D_10()", "core::rotate_10()", "ml::getUse1SERule_10()", "ml::getUncompressedSupportVectors_10()", "core::setNumThreads_10()", "core::log_10()", "photo::calculateShift_10()", "core::merge_10()", "ml::setTrainMethod_11()", "photo::createMergeDebevec_10()", "objdetect::getFeatureType_10()", "video::apply_10()", "imgproc::boxFilter_12()", "features2d::setMinDistance_10()", "video::setShadowThreshold_10()", "features2d::match_12()", "ml::setRpropDWPlus_10()", "video::create_11()", "imgproc::Subdiv2D_10()", "imgproc::integral2_11()", "ml::trainE_11()", "photo::setCut_10()", "imgproc::undistortPointsIter_10()", "features2d::getThreshold_10()", "org/opencv/core/CvException", "java/lang/Exception", "Unknown exception in JNI code {core::minMaxLoc()}", "Unknown exception in JNI code {core::getTextSize()}", "/build/master_pack-android/opencv/modules/dnn/include/opencv2/dnn/dnn.inl.hpp", "Specified feature detector type is not supported.", "/build/master_pack-android/opencv/modules/features2d/misc/java/src/cpp/features2d_manual.hpp", "Specified descriptor extractor type is not supported.", "unknown exception", "std::exception", "org.opencv.core", "%s caught %s", "cv::Exception", "org.opencv.imgproc", "org.opencv.ml", "org.opencv.objdetect", "org.opencv.photo", "org.opencv.video", "org.opencv.dnn", "isString()", "(idx == -1 && ps->size() == 1) || (idx >= 0 && idx < (int)ps->size())", "(idx == -1 && size() == 1) || (idx >= 0 && idx < size())", "isReal() || isInt()", "fracpart == 0.0", "isInt() || isReal()", "org.opencv.imgcodecs", "org.opencv.videoio", "org.opencv.features2d", "org.opencv.calib3d", "total() == 0 || data != __null", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/mat.inl.hpp", "vector::reserve", "AndroidBitmap_getInfo(env, bitmap, &info) >= 0", "/build/master_pack-android/opencv/modules/java/generator/src/cpp/utils.cpp", "info.format == ANDROID_BITMAP_FORMAT_RGBA_8888 || info.format == ANDROID_BITMAP_FORMAT_RGB_565", "AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0", "pixels", "org.opencv.android.Utils", "nBitmapToMat caught cv::Exception: %s", "nBitmapToMat caught unknown exception (...)", "Unknown exception in JNI code {nBitmapToMat}", "src.dims == 2 && info.height == (uint32_t)src.rows && info.width == (uint32_t)src.cols", "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || src.type() == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3)) || src.type() == (((0) & ((1 << 3) - 1)) + (((4)-1) << 3))", "nMatToBitmap caught cv::Exception: %s", "nMatToBitmap caught unknown exception (...)", "Unknown exception in JNI code {nMatToBitmap}", "Step must be a multiple of esz1", "org.opencv.core.Mat", "java/util/ArrayList", "<init>", "(I)V", "(Ljava/lang/Object;)Z", "clear", "size", "((I)Ljava/lang/Object;", "org/opencv/dnn/Layer", "(J)V", "nativeObj", "org/opencv/core/MatOfInt", "The library is compiled without CUDA support", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/private.cuda.hpp", "(lutcn == cn || lutcn == 1) && _lut.total() == 256 && _lut.isContinuous() && (depth == 0 || depth == 1)", "/build/master_pack-android/opencv/modules/core/src/lut.cpp", "func != 0", "c.factors[0] == c.factors[c.nf-1]", "/build/master_pack-android/opencv/modules/core/src/dxt.cpp", "type == srcB.type() && srcA.size() == srcB.size()", "type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "srcA.size == dst.size && srcA.type() == dst.type()", "src.size == dst.size && src.type() == dst.type()", "vector::_M_fill_insert", "Odd-size DCT's are not implemented", "This mode (using nonzero_rows with a single-column matrix) breaks the function's logic, so it is prohibited.\nFor fast convolution/correlation use 2-column matrix or single-row matrix instead", "!((flags & DFT_COMPLEX_INPUT) && src.channels() != 2)", "src.size == dst.size", "dst.data == dst0.data", "You should explicitly call mapDevice/unmapDevice methods for ogl::Buffer object", "/build/master_pack-android/opencv/modules/core/src/matrix_wrap.cpp", "getGpuMat is available only for cuda::GpuMat and cuda::HostMem", "k == OPENGL_BUFFER", "i < 0", "i < (int)vv.size()", "i < sz.height", "Unknown/unsupported array type", "(flags & FIXED_TYPE) != 0", "0 <= i && i < sz.height", "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", "You should explicitly call download method for cuda::GpuMat object", "0 <= i && i < (int)vv.size()", "0 <= i && i < (int)v.size()", "(size_t)i < vv.size()", "i > 0 && i < sz.height", "k == MAT", "k == STD_VECTOR_MAT || k == STD_ARRAY_MAT", "i < (int)v.size()", "k == UMAT", "k == STD_VECTOR_UMAT", "k == CUDA_GPU_MAT", "k == STD_VECTOR_CUDA_GPU_MAT", "k == CUDA_HOST_MEM", "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", "this_v.size() == v.size()", "((mtype) & ((1 << 3)*512 - 1)) == m.type()", "m.dims == d", "m.size[j] == sizes[j]", "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == 1 && ((1 << type0) & fixedDepthMask) != 0)", "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == ((((type0) & ((512 - 1) << 3)) >> 3) + 1) && ((1 << type0) & fixedDepthMask) != 0)", "Vectors with element size %d are not supported. Please, modify OutputArray::create()\n", "create() called for the missing output array", "len == len0", "!fixedType() && !fixedSize()", "d == 2 && sz.area() == sizes[0]*sizes[1]", "!fixedSize() || len == vv.size()", "!fixedSize() || len == ((std::vector<uchar>*)v)->size() / esz", "!fixedSize() || len == len0", "v[j].empty()", "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", "!fixedType() || ((Mat*)obj)->type() == mtype", "!fixedSize() || ((UMat*)obj)->size.operator()() == _sz", "!fixedType() || ((UMat*)obj)->type() == mtype", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == _sz", "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz", "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype", "!fixedSize() || ((cuda::HostMem*)obj)->size() == _sz", "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype", "!fixedSize()", "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)", "Failed to allocate %llu bytes", "/build/master_pack-android/opencv/modules/core/src/alloc.cpp", "bool", "unsigned", "unsigned long long", "float", "double", "string", "unknown", "unknown/unsupported parameter type", "/build/master_pack-android/opencv/modules/core/src/command_line_parser.cpp", "can not convert: [%s] to [%s]", "<none>", "Missing parameter: '", "undeclared key '%s' requested", "Parameter '", "undeclared position %d requested", "Parameter #%d: ", "Missing parameter #%d\n", "\nERRORS:\n%s\n", "Usage: %s [params] ", " (value:%s)", "\n\t\t%s\n", "error in split_range_string(", "Field KEYS could not be empty\n", "true", "Invalid matrix initializer type", "/build/master_pack-android/opencv/modules/core/src/matrix_expressions.cpp", "Unknown operation", "((((_type) & ((512 - 1) << 3)) >> 3) + 1) == e.a.channels()", "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0", "/build/master_pack-android/opencv/modules/core/src/channels.cpp", "j < nsrcs && src[j].depth() == depth", "i1 >= 0 && j < ndsts && dst[j].depth() == depth", "0 <= coi && coi < cn", "_src.sameSize(_dst) && sdepth == ddepth", "0 <= coi && coi < dcn && scn == 1", "nsrc > 0 && ndst > 0", "fromTo.size()%2 == 0 && nsrc > 0 && ndst > 0", "termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0", "/build/master_pack-android/opencv/modules/core/src/downhill_simplex.cpp", "coord_sum.cols == n && coord_sum.rows == 1", "_Function->getDims() == ndim", "(x.cols == 1 && x.rows == ndim) || (x.cols == ndim && x.rows == 1)", "x.type() == 5 || x.type() == 6", "!cvIsNaN(res) && !cvIsInf(res)", "ihi != inhi", "!_Function.empty()", "std::min(_step.cols, _step.rows) == 1 && std::max(_step.cols, _step.rows) >= 2 && _step.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "data0.dims <= 2 && type == 5 && K > 0", "/build/master_pack-android/opencv/modules/core/src/kmeans.cpp", "N >= K", "(best_labels.cols == 1 || best_labels.rows == 1) && best_labels.cols*best_labels.rows == N && best_labels.type() == 4 && best_labels.isContinuous()", "(unsigned)_labels.at<int>(i) < (unsigned)K", "counters[k] != 0", "OPENCV_KMEANS_PARALLEL_GRANULARITY", "(termcrit.type==(TermCriteria::MAX_ITER+TermCriteria::EPS) && termcrit.epsilon>0 && termcrit.maxCount>0) || ((termcrit.type==TermCriteria::MAX_ITER) && termcrit.maxCount>0)", "/build/master_pack-android/opencv/modules/core/src/conjugate_gradient.cpp", "_Function.empty()==false", "((x_mat.rows) > (x_mat.cols) ? (x_mat.cols) : (x_mat.rows))==1", "x_mat.type()==(((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "cn <= 4 && func != 0", "/build/master_pack-android/opencv/modules/core/src/sum.cpp", "could not open directory: %s", "/build/master_pack-android/opencv/modules/core/src/glob.cpp", "scn == 1", "/build/master_pack-android/opencv/modules/core/src/arithm.cpp", "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'", "psrc1->sameSize(*psrc2) && type1 == type2", "(mtype == 0 || mtype == 1) && _mask.sameSize(*psrc1)", "src1.size == dst.size && src1.type() == dst.type()", "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'", "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified", "type2 == 6 && (sz2.height == 1 || sz2.height == 4)", "(mtype == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || mtype == (((1) & ((1 << 3) - 1)) + (((1)-1) << 3))) && _mask.sameSize(*psrc1)", "src1.size == dst.size && src1.channels() == dst.channels()", "src2.size == dst.size && src2.channels() == dst.channels()", "The lower boundary is neither an array of the same size and same type as src, nor a scalar", "The upper boundary is neither an array of the same size and same type as src, nor a scalar", "lbScalar == ubScalar", "lb.type() == ub.type()", "src1.size == dst.size && dst.type() == 0", "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT", "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'", "/build/master_pack-android/opencv/modules/core/src/split.cpp", "!_mv.fixedType() || _mv.empty() || _mv.type() == m.depth()", "src[i].dims <= 2 && src[i].rows == src[0].rows && src[i].type() == src[0].type()", "/build/master_pack-android/opencv/modules/core/src/matrix_operations.cpp", "src[i].dims <= 2 && src[i].cols == src[0].cols && src[i].type() == src[0].type()", "_m.dims() <= 2", "m.dims <= 2", "_src.dims() <= 2 && esz <= 32", "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", "dst.cols == dst.rows", "m.dims <= 2 && m.rows == m.cols", "dims <= 2 && m.dims <= 2 && size() == m.size() && tp == m.type() && ((rows == 3 && cols == 1) || (cols*channels() == 3 && rows == 1))", "_src.dims() <= 2", "cn == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", "op == 0 || op == 2 || op == 3 || op == 1", "Unsupported combination of input and output array formats", "src.dims <= 2 && src.channels() == 1", "src.data != dst.data", "/build/master_pack-android/opencv/modules/core/src/directx.cpp", "OpenCV was build without DirectX support", "mv && n > 0", "/build/master_pack-android/opencv/modules/core/src/merge.cpp", "mv[i].size == mv[0].size && mv[i].depth() == depth", "0 < cn && cn <= 512", "NULL double pointer to file storage", "/build/master_pack-android/opencv/modules/core/src/persistence_c.cpp", "Invalid pointer to file storage", "Null key element", "map_node != __null", "The node is neither a map nor an empty collection", "Duplicated key", "Null element name", "The file storage is opened for reading", "binary", "must set 'struct_flags |= CV_NODE_SEQ' if using Base64.", "function 'cvStartWriteStruct' calls cannot be nested if using Base64.", "At the end of the output Base64, `cvEndWriteStruct` is needed.", "Negative number of elements", "Null data pointer", "Unsupported type", "Null pointer to source file node or reader", "The file node should be a numerical scalar or a sequence", "Null pointer to reader or destination array", "The readed sequence is a scalar, thus len must be 1", "The sequence element is not a numerical scalar", "The sequence slice does not fit an integer number of records", "Null pointers to source file node or destination array", "Invalid type info", "Some of required function pointers (is_instance, release, read or write) are NULL", "Type name should start with a letter or _", "Type name should contain only letters, digits, - and _", "NULL double pointer", "Unknown object type", "release function pointer is NULL", "NULL structure pointer", "clone function pointer is NULL", "The node does not represent a user object (unknown type?)", "Null pointer to the written object", "Unknown object", "The object does not have write function", "NULL or empty buffer", "NULL or empty filename", "basic_string::substr", "base64", "CV_STORAGE_APPEND and CV_STORAGE_MEMORY are not currently compatible", "Appending data to compressed file is not implemented", ".xml", ".xml.gz", ".json", ".json.gz", "UTF-16", "utf-16", "Utf-16", "UTF-16 XML encoding is not supported! Use 8-bit encoding\n", "strlen(encoding) < 1000", "<?xml version=\"1.0\" encoding=\"%s\"?>\n", "<?xml version=\"1.0\"?>\n", "<opencv_storage>\n", "Could not find </opencv_storage> in the end of file.\n", "fs->file", " <!-- resumed -->", "%YAML:1.0\n---\n", "...\n---\n", "Could not find '}' in the end of file.\n", "%YAML", "<?xml", "Input file is empty", "Unsupported file storage format", "</opencv_storage>", "NULL object pointer", "Could not open the file storage. Check the path and permissions", "node != __null", "Could not find the/an object in file storage", "NULL memory storage is passed - the loaded dynamic structure can not be stored", "Comments are not allowed here", "/build/master_pack-android/opencv/modules/core/src/persistence_xml.cpp", "Invalid character in the stream", "Too long string or a last string w/o newline", "Unexpected end of line", "Unrecognized Base64 header", "data size not matches elememt size", "Invalid `dt` in Base64 header", "Invalid Base64 data.", "Map element should have a name", "Sequence element should not have name (use <_></_>)", "Directive tags are not allowed here", "Empty tags are not supported", "type_id", "elem", "Mismatched closing tag", "There should be space between literals", "Invalid numeric value (inconsistent explicit type specification?)", "Literal \" is not allowed within a string. Use &quot;", "Closing \" is expected", "Literal ' or > are not allowed. Use &apos; or &gt;", "Invalid numeric value in the string", "Invalid character in the symbol entity name", "apos", "quot", "Too long string literal", "The actual type is different from the specified type", "Preliminary end of the stream", "Tag should start with '<'", "Unknown tag type", "attrname", "Closing tag should not contain any attributes", "Attribute name should be followed by '='", "Attribute value should be put into single or double quotes", "Invalid closing tag for <?xml ...", "There should be space between attributes", "Name should start with a letter or underscore", "An attempt to add element without a key to a map, or add element with key to sequence", "A single _ is a reserved tag name", "Closing tag should not include any attributes", "Key should start with a letter or _", "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", "Valid XML should start with '<?xml ...?>'", "opencv_storage", "<opencv_storage> tag is missing", "</opencv_storage> tag is missing", "Some collection type: CV_NODE_SEQ or CV_NODE_MAP must be specified", "An extra closing tag", "\n<!-- next stream -->\n", "Currently only Base64 data is allowed.", "elements with keys can not be written to sequence", "Null string pointer", "The written string is too long", "#x%02x", "Null comment", "Double hyphen '--' is not allowed in the comments", "<!-- %s -->", "<!--", "type == src2.type() && src1.cols == src2.cols && (type == 5 || type == 0)", "/build/master_pack-android/opencv/modules/core/src/batch_distance.cpp", "_nidx.needed() == (K > 0)", "(type == 0 && dtype == 4) || dtype == 5", "K == 1 && update == 0 && mask.empty()", "The combination of type=%d, dtype=%d and normType=%d is not supported", "buffer.size() < HEADER_SIZE", "/build/master_pack-android/opencv/modules/core/src/persistence_base64.cpp", "len != 0", "dst_cur + len < dst_end", "flush()", "\"$base64$", "Invalid 'dt'.", "'dt' does not match.", "cnt > 0U", "!\"type not support\"", "iss.eof()", "!dt.empty()", "len > 0", "Base64 should not be used at present.", "!\"type is not support\"", "binary_to_funcs.size()", "len >= 0", "OPENCV_LOG_LEVEL", "INFO", "DISABLED", "disabled", "FATAL", "fatal", "ERROR", "error", "WARNING", "warning", "WARNINGS", "warnings", "WARN", "warn", "info", "DEBUG", "debug", "VERBOSE", "verbose", "ERROR: Unexpected logging level value: ", "[FATAL:", "[ERROR:", "[ WARN:", "[ INFO:", "[DEBUG:", "_arr.dims <= 2", "/build/master_pack-android/opencv/modules/core/src/rand.cpp", "dst.elemSize() <= 32", "_param1.channels() == 1 && (_param1.rows == 1 || _param1.cols == 1) && (_param1.rows + _param1.cols - 1 == cn || _param1.rows + _param1.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == 6 && cn <= 4))", "_param2.channels() == 1 && (((_param2.rows == 1 || _param2.cols == 1) && (_param2.rows + _param2.cols - 1 == cn || _param2.rows + _param2.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == 6 && cn <= 4))) || (_param2.rows == cn && _param2.cols == cn && disttype == NORMAL))", "scaleFunc != 0", "Unknown distribution type", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == 0)", "/build/master_pack-android/opencv/modules/core/src/norm.cpp", "mask.empty() || mask.type() == 0", "_src1.sameSize(_src2) && _src1.type() == _src2.type()", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src1.type() == 0)", "_src1.depth() == 0 && _src2.depth() == 0", "0 <= _dims && _dims <= 32", "/build/master_pack-android/opencv/modules/core/src/umatrix.cpp", "s >= 0", "The total matrix size does not fit to \"size_t\" type", "mapcount == 0", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/utility.hpp", "usage_count == 0", "usage_count == 1", "0 <= d && d <= 32 && _sizes", "u != 0", "step[dims-1] == (size_t)(((((flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((flags) & ((1 << 3) - 1))*2) & 3))", "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", "data == datastart", "allocated", "Exception: %s\n", "ranges", "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", "m.dims >= 2", "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", "(int)ranges.size() == d", "dims <= 2", "dims <= 2 && step[0] > 0", "The matrix is not continuous, thus its number of rows can not be changed", "Bad new number of rows", "The total number of matrix elements is not divisible by the new number of rows", "The total width is not divisible by the new number of channels", "_cn >= 0 && _newndims > 0 && _newndims <= 32 && _newsz", "_cn <= 512", "_newsz[i] >= 0", "Copy dimension (which has zero size) is not present in source matrix", "Requested and source matrices have different count of elements", "Reshaping of n-dimensional non-continuous matrices is not supported yet", "u->data != 0 && \"Error mapping of UMat to host memory.\"", "u->refcount == 0", "!u->deviceCopyObsolete() || u->copyOnMap()", "channels() == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", "dst.u", "d.cols == 1 || d.rows == 1", "m.sameSize(*this) && m.type() == type()", "_arrays && (_ptrs || _planes)", "/build/master_pack-android/opencv/modules/core/src/matrix_iterator.cpp", "narrays <= 1000", "arrays[i] != 0", "A.step[d-1] == A.elemSize()", "A.size == arrays[i0]->size", "m != 0 && _idx", "Not supported escape character", "/build/master_pack-android/opencv/modules/core/src/persistence_json.cpp", "Abort at parse time", "Unexpected End-Of-File", "$base64$", "'\"' - right-quote of string is missing", "basic_string::at", "Byte size not match elememt size", "'\\uXXXX' currently not supported", "Invalid escape character", "null", "Value 'null' is not supported by this parser", "false", "Unrecognized value", "ptr is NULL", "'{' - left-brace of map is missing", "Key must end with '\"'", "Missing ':' between key and value", "Key is empty", "\"type_id\" should be of type string", "Unexpected character", "'}' - right-brace of map is missing", "'[' - left-brace of seq is missing", "']' - right-brace of seq is missing", "left-brace of top level is missing", "At present, output Base64 data only.", "The key is an empty", "The key is too long", "Key must start with a letter or _", "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", "EndWriteStruct w/o matching StartWriteStruct", "/build/master_pack-android/opencv/modules/core/src/stat.dispatch.cpp", "/build/master_pack-android/opencv/modules/core/src/convert.cpp", "Unsupported input depth", "!fs.empty()", "/build/master_pack-android/opencv/modules/core/src/persistence_cpp.cpp", "len % elemSize == 0", "Invalid filename", "unnamed", "elem_size > 0", "Unknown array type", "((m) != __null && (((const CvSparseMat*)(m))->type & 0xFFFF0000) == 0x42440000)", "vector::_M_insert_aux", "Extra closing '%c'", "The closing '%c' does not match the opening '%c'", "Invalid fs.state", "Incorrect element name %s", "No element name has been given", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/persistence.hpp", "cv::sortColumnsByIndices only works on integer indices!", "/build/master_pack-android/opencv/modules/core/src/lda.cpp", "Wrong shapes for given matrices. Was size(src) = (%d,%d), size(W) = (%d,%d).", "Wrong mean shape for the given data matrix. Expected %d, but was %d.", "Wrong mean shape for the given eigenvector matrix. Expected %d, but was %d.", "src.rows == src.cols", "type == 5 || type == 6", "eigenvalues64f.size() == n", "(size_t)eigenvectors64f.rows == n", "(size_t)eigenvectors64f.cols == n", "pSrc != __null", "num_components", "eigenvalues", "eigenvectors", "At least two classes are needed to perform a LDA. Reason: Only one class was given!", "The number of samples must equal the number of labels. Given %d labels, %d samples. ", "Warning: Less observations than feature dimension given!", "Computation will probably fail.", "Wrong shape of input matrix! Expected a matrix with one row or column.", "Wrong number of elements in matrix #%d! Expected %d was %d.", "InputArray Datatype %d is not supported.", "The data is expected as InputArray::STD_VECTOR_MAT (a std::vector<Mat>) or _InputArray::STD_VECTOR_VECTOR (a std::vector< std::vector<...> >).", "File can't be opened for writing!", "File can't be opened for reading!", "total <= step[i]", "/build/master_pack-android/opencv/modules/core/src/matrix.cpp", "u->urefcount == 0", "sz[i] <= (size_t)0x7fffffff", "nelems <= (size_t)size.p[0]", "(int)nelems >= 0", "Pushed vector type is not the same as matrix type", "Pushed vector length is not equal to matrix row length", "empty()", "/build/master_pack-android/opencv/modules/core/src/convert_scale.cpp", "Unknown/unsupported norm type", "abs(vecs[0].dot(vecs[1])) / (norm(vecs[0]) * norm(vecs[1])) <= 1.1920928955078125e-7F", "/build/master_pack-android/opencv/modules/core/src/types.cpp", "keypointIndexes has element < 0. TODO: process this case", "\nGeneral configuration for OpenCV 3.4.1 =====================================\n  Version control:               3.4.1\n\n  Platform:\n    Timestamp:                   2018-02-23T12:13:31Z\n    Host:                        Linux 4.13.0-32-generic x86_64\n    Target:                      Linux 1 armv5te\n    CMake:                       2.8.12.2\n    CMake generator:             Ninja\n    CMake build tool:            /usr/bin/ninja\n    Configuration:               Release\n\n  CPU/HW features:\n    Baseline:\n      requested:                 DETECT\n      disabled:                  VFPV3 NEON\n\n  C/C++:\n    Built as dynamic libs?:      NO\n    C++ Compiler:                /usr/bin/ccache /opt/android/android-ndk-r10e/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++ (ver 4.8)\n    C++ flags (Release):         -fexceptions -frtti -fpic -Wno-psabi --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-arm -funwind-tables -finline-limit=64 -fsigned-char -no-canonical-prefixes -march=armv5te -mtune=xscale -msoft-float -fdata-sections -ffunction-sections -Wa,--noexecstack  -DANDROID -D__ANDROID_API__=9   -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -fomit-frame-pointer  -mfp16-format=ieee -fvisibility=hidden -fvisibility-inlines-hidden -mthumb -fomit-frame-pointer -fno-strict-aliasing -O3 -DNDEBUG  -DNDEBUG\n    C++ flags (Debug):           -fexceptions -frtti -fpic -Wno-psabi --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-arm -funwind-tables -finline-limit=64 -fsigned-char -no-canonical-prefixes -march=armv5te -mtune=xscale -msoft-float -fdata-sections -ffunction-sections -Wa,--noexecstack  -DANDROID -D__ANDROID_API__=9   -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -fomit-frame-pointer  -mfp16-format=ieee -fvisibility=hidden -fvisibility-inlines-hidden -marm -fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG  -DDEBUG -D_DEBUG\n    C Compiler:                  /usr/bin/ccache /opt/android/android-ndk-r10e/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc\n    C flags (Release):           -fexceptions -fpic -Wno-psabi --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-arm -funwind-tables -finline-limit=64 -fsigned-char -no-canonical-prefixes -march=armv5te -mtune=xscale -msoft-float -fdata-sections -ffunction-sections -Wa,--noexecstack  -DANDROID -D__ANDROID_API__=9   -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -fomit-frame-pointer  -mfp16-format=ieee -fvisibility=hidden -mthumb -fomit-frame-pointer -fno-strict-aliasing -O3 -DNDEBUG  -DNDEBUG\n    C flags (Debug):             -fexceptions -fpic -Wno-psabi --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-arm -funwind-tables -finline-limit=64 -fsigned-char -no-canonical-prefixes -march=armv5te -mtune=xscale -msoft-float -fdata-sections -ffunction-sections -Wa,--noexecstack  -DANDROID -D__ANDROID_API__=9   -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -fomit-frame-pointer  -mfp16-format=ieee -fvisibility=hidden -marm -fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG  -DDEBUG -D_DEBUG\n    Linker flags (Release):      -Wl,--no-undefined -Wl,--gc-sections -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now    \n    Linker flags (Debug):        -Wl,--no-undefined -Wl,--gc-sections -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now    \n    ccache:                      YES\n    Precompiled headers:         NO\n    Extra dependencies:          z dl m log\n    3rdparty dependencies:       libjpeg libwebp libpng libtiff libjasper IlmImf libprotobuf libcpufeatures tegra_hal tbb\n\n  OpenCV modules:\n    To be built:                 calib3d core dnn features2d flann highgui imgcodecs imgproc java java_bindings_generator ml objdetect photo python_bindings_generator shape stitching superres video videoio videostab\n    Disabled:                    js world\n    Disabled by dependency:      -\n    Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev python2 python3 ts viz\n    Applications:                android_examples\n    Documentation:               NO\n    Non-free algorithms:         NO\n\n  Android: \n    Android ABI:                 armeabi\n    STL type:                    gnustl_static\n    Native API level:            android-9\n    SDK target:                  android-11\n    Android NDK:                 /opt/android/android-ndk-r10e (toolchain: arm-linux-androideabi-4.8)\n    android tool:                /opt/android/android-sdk-java7/tools/android (Android SDK Tools, revision 25.2.2.)\n\n  GUI: \n\n  Media I/O: \n    ZLib:                        z (ver 1.2.3)\n    JPEG:                        build (ver 90)\n    WEBP:                        build (ver encoder: 0x020e)\n    PNG:                         build (ver 1.6.34)\n    TIFF:                        build (ver 42 - 4.0.9)\n    JPEG 2000:                   build (ver 1.900.1)\n    OpenEXR:                     build (ver 1.7.1)\n\n  Video I/O:\n\n  Parallel framework:            TBB (ver 2018.0 interface 10001)\n\n  Trace:                         YES (built-in)\n\n  Other third-party libraries:\n    Custom HAL:                  YES (carotene (ver 0.0.1))\n    Protobuf:                    build (3.5.1)\n\n  Python (for build):            /usr/bin/python2.7\n\n  Java:                          export all functions\n    ant:                         /usr/bin/ant (ver 1.9.3)\n    Java wrappers:               YES\n    Java tests:                  NO\n\n  Install to:                    /build/master_pack-android/build/o4a/install\n-----------------------------------------------------------------\n\n", "OPENCV_TEMP_PATH", "__opencv_temp.XXXXXX", "/data/local/tmp/__opencv_temp.XXXXXX", "status", "No Error", "Backtrace", "Unspecified error", "Internal error", "Insufficient memory", "Bad argument", "Iterations do not converge", "Autotrace call", "Incorrect size of input array", "Null pointer", "Division by zero occurred", "Image step is wrong", "Inplace operation is not supported", "Requested object was not found", "Input image depth is not supported by function", "Formats of input arguments do not match", "Sizes of input arguments do not match", "One of arguments' values is out of range", "Unsupported format or combination of formats", "Input COI is not supported", "Bad number of channels", "Bad flag (parameter or structure field)", "Bad parameter of type CvPoint", "Bad type of mask argument", "Parsing error", "The function/feature is not implemented", "Memory block has been corrupted", "Assertion failed", "No CUDA support", "Gpu API call", "No OpenGL support", "OpenGL API call", "Unknown %s code %d", "unknown function", "OpenCV(%s) Error: %s (%s) in %s, file %s, line %d", "3.4.1", "cv::error()", "len >= 0 && \"Check format string for errors\"", "/build/master_pack-android/opencv/modules/core/src/system.cpp", "OpenCV(%s) %s:%d: error: (%d) %s in function %s\n", "OpenCV(%s) %s:%d: error: (%d) %s\n", "key_ == -1", "Unknown feature", "OPENCV_DUMP_CONFIG", "\nOpenCV build configuration is:\n%s\n", "SSE2", "SSE3", "SSSE3", "SSE4.1", "SSE4.2", "POPCNT", "FP16", "AVX2", "FMA3", "AVX512F", "AVX512BW", "AVX512CD", "AVX512DQ", "AVX512ER", "AVX512IFMA", "AVX512PF", "AVX512VBMI", "AVX512VL", "NEON", "AVX512-SKX", "OpenCV", "calling android_getCpuFeatures() ...", "calling android_getCpuFeatures() ... Done (%llx)", "OPENCV_CPU_DISABLE", "feature.size() > 0", "OPENCV: Trying to disable unavailable CPU feature on the current platform: '%s'.\n", "OPENCV: Trying to disable unknown CPU feature: '%s'.\n", "OPENCV: Trying to disable baseline CPU feature: '%s'. This has very limited effect, because code optimizations for this feature are executed unconditionally in the most cases.\n", "pthread_key_create(&tlsKey, __null) == 0", "pthread_key_delete(tlsKey) == 0", "pthread_setspecific(tlsKey, pData) == 0", "True", "TRUE", "False", "FALSE", "Invalid value for %s parameter: %s", "tlsSlotsSize == tlsSlots.size()", "tlsSlotsSize > slotIdx", "key_ != -1 && \"Can't fetch data from terminated TLS container.\"", ": Can't create thread mutex: res = ", ": Can't create thread condition variable: res = ", ": Can't spawn new thread: res = ", "\t\t\t\tBUG! Job: ", "!is_completed", "/build/master_pack-android/opencv/modules/core/src/parallel_impl.cpp", "Failed to initialize ThreadPool (pthreads)", "j.current_task >= j.range.size()", "job->is_completed", "OPENCV_THREAD_POOL_ACTIVE_WAIT_PAUSE_LIMIT", "OPENCV_THREAD_POOL_ACTIVE_WAIT_WORKER", "OPENCV_THREAD_POOL_ACTIVE_WAIT_MAIN", "OPENCV_THREAD_POOL_ACTIVE_WAIT_THREADS_LIMIT", "/build/master_pack-android/opencv/modules/core/src/matrix_sparse.cpp", "hdr && hdr->dims == 2", "hdr && hdr->dims == 3", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2", "it.ptr", "Only 32f and 64f are supported", "hdr && hdr->dims == 1", "_sizes && 0 < d && d <= 32", "_sizes[i] > 0", "hdr != 0", "/build/master_pack-android/opencv/modules/core/src/mean.cpp", "mask.empty() || mask.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "dst.type() == 6 && dst.isContinuous() && (dst.cols == 1 || dst.rows == 1) && dcn >= cn", "src1.size() == src2.size() && type == src2.type() && (depth == 5 || depth == 6)", "/build/master_pack-android/opencv/modules/core/src/mathfuncs.cpp", "X.size == Y.size && type == Y.type() && (depth == 5 || depth == 6)", "(depth == 5 || depth == 6) && (src1.empty() || src1.type() == type)", "Mag.empty() || Angle.size == Mag.size", "depth == 5 || depth == 6", "pt == __null", "the value at (%d, %d)=%s is out of range [%f, %f)", "_a.depth() == 5", "Mag.size() == X.size() && Mag.type() == X.type()", "Angle.size() == X.size() && Angle.type() == X.type()", "Mag.size() == Angle.size() && Mag.type() == Angle.type()", "X.size() == Angle.size() && X.type() == Angle.type()", "Y.size() == Angle.size() && Y.type() == Angle.type()", "src.type() == dst.type() && src.size == dst.size", "ctype == 5 || ctype == 6", "(coeffs.size() == Size(n0, 1) || coeffs.size() == Size(n0+1, 1) || coeffs.size() == Size(1, n0) || coeffs.size() == Size(1, n0+1))", "_roots.data == _roots0.data", "((ctype) & ((1 << 3) - 1)) >= 5 && ((((ctype) & ((512 - 1) << 3)) >> 3) + 1) <= 2", "coeffs0.rows == 1 || coeffs0.cols == 1", "_r.data == _r0.data", "Can't remove directory: ", "Can't remove file: ", "handle != -1", "/build/master_pack-android/opencv/modules/core/src/utils/filesystem.cpp", "pImpl->lock()", "pImpl->unlock()", "pImpl->lock_shared()", "pImpl->unlock_shared()", "Specified non-existed directory, creating OpenCV sub-directory for caching purposes: ", "Can't create OpenCV cache sub-directory: ", "cache_path.empty() || utils::fs::isDirectory(cache_path)", "/build/master_pack-android/opencv/modules/core/src/ocl.cpp", "DIG(", "entry.capacity_ != 0", "entry.clBuffer_ != __null", "HOST_ALLOC", "getBufferPoolController(): unknown BufferPool ID\n", "reservedEntries_.empty()", "!enabled", "_flags == LOCAL || _flags == CONSTANT || _m != __null", "m.isContinuous()", "codeStr_.empty()", "!codeStr_.empty()", "%08llx", "p->kind_ == Impl::PROGRAM_SOURCE_CODE", "p->sourceAddr_ == __null", "Removed method: ProgramSource::hash()", "size > 0", "OpenCV build without OpenCL support", "Removed API", "_findAndRemoveEntryFromAllocatedList(entry, buffer)", "_sat", "noconvert", "convert_%s", "convert_%s%s_rte", "convert_%s_sat", "CL_SUCCESS", "CL_DEVICE_NOT_FOUND", "CL_DEVICE_NOT_AVAILABLE", "CL_COMPILER_NOT_AVAILABLE", "CL_MEM_OBJECT_ALLOCATION_FAILURE", "CL_OUT_OF_RESOURCES", "CL_OUT_OF_HOST_MEMORY", "CL_PROFILING_INFO_NOT_AVAILABLE", "CL_MEM_COPY_OVERLAP", "CL_IMAGE_FORMAT_MISMATCH", "CL_IMAGE_FORMAT_NOT_SUPPORTED", "CL_BUILD_PROGRAM_FAILURE", "CL_MAP_FAILURE", "CL_MISALIGNED_SUB_BUFFER_OFFSET", "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST", "CL_COMPILE_PROGRAM_FAILURE", "CL_LINKER_NOT_AVAILABLE", "CL_LINK_PROGRAM_FAILURE", "CL_DEVICE_PARTITION_FAILED", "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", "CL_INVALID_VALUE", "CL_INVALID_DEVICE_TYPE", "CL_INVALID_PLATFORM", "CL_INVALID_DEVICE", "CL_INVALID_CONTEXT", "CL_INVALID_QUEUE_PROPERTIES", "CL_INVALID_COMMAND_QUEUE", "CL_INVALID_HOST_PTR", "CL_INVALID_MEM_OBJECT", "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR", "CL_INVALID_IMAGE_SIZE", "CL_INVALID_SAMPLER", "CL_INVALID_BINARY", "CL_INVALID_BUILD_OPTIONS", "CL_INVALID_PROGRAM", "CL_INVALID_PROGRAM_EXECUTABLE", "CL_INVALID_KERNEL_NAME", "CL_INVALID_KERNEL_DEFINITION", "CL_INVALID_KERNEL", "CL_INVALID_ARG_INDEX", "CL_INVALID_ARG_VALUE", "CL_INVALID_ARG_SIZE", "CL_INVALID_KERNEL_ARGS", "CL_INVALID_WORK_DIMENSION", "CL_INVALID_WORK_GROUP_SIZE", "CL_INVALID_WORK_ITEM_SIZE", "CL_INVALID_GLOBAL_OFFSET", "CL_INVALID_EVENT_WAIT_LIST", "CL_INVALID_EVENT", "CL_INVALID_OPERATION", "CL_INVALID_GL_OBJECT", "CL_INVALID_BUFFER_SIZE", "CL_INVALID_MIP_LEVEL", "CL_INVALID_GLOBAL_WORK_SIZE", "CL_INVALID_PROPERTY", "CL_INVALID_IMAGE_DESCRIPTOR", "CL_INVALID_COMPILER_OPTIONS", "CL_INVALID_LINKER_OPTIONS", "CL_INVALID_DEVICE_PARTITION_COUNT", "CL_INVALID_PIPE_SIZE", "CL_INVALID_DEVICE_QUEUE", "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR", "CL_PLATFORM_NOT_FOUND_KHR", "CL_INVALID_D3D10_DEVICE_KHR", "CL_INVALID_D3D10_RESOURCE_KHR", "CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR", "CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR", "clBLAS: Functionality is not implemented", "clBLAS: Library is not initialized yet", "clBLAS: Matrix A is not a valid memory object", "clBLAS: Matrix B is not a valid memory object", "clBLAS: Matrix C is not a valid memory object", "clBLAS: Vector X is not a valid memory object", "clBLAS: Vector Y is not a valid memory object", "clBLAS: An input dimension (M:N:K) is invalid", "clBLAS: Leading dimension A must not be less than the size of the first dimension", "clBLAS: Leading dimension B must not be less than the size of the second dimension", "clBLAS: Leading dimension C must not be less than the size of the third dimension", "clBLAS: The increment for a vector X must not be 0", "clBLAS: The increment for a vector Y must not be 0", "clBLAS: The memory object for Matrix A is too small", "clBLAS: The memory object for Matrix B is too small", "clBLAS: The memory object for Matrix C is too small", "clBLAS: The memory object for Vector X is too small", "clBLAS: The memory object for Vector Y is too small", "Unknown OpenCL error", "COEFF", " -D %s=%s", "-D %s_T=%s -D %s_T1=%s -D %s_CN=%d -D %s_TSIZE=%d -D %s_T1SIZE=%d -D %s_DEPTH=%d", "OPENCV_OPENCL_FORCE", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "cl_khr_image2d_from_buffer", "nu < MAX_ARRS && m.u && m.u->urefcount > 0", "vectorWidths", "src1.isMat() || src1.isUMat()", "src2.isMat() || src2.isUMat()", "src3.isMat() || src3.isUMat()", "src4.isMat() || src4.isUMat()", "src5.isMat() || src5.isUMat()", "src6.isMat() || src6.isUMat()", "src7.isMat() || src7.isUMat()", "src8.isMat() || src8.isUMat()", "src9.isMat() || src9.isUMat()", "OpenCL ", "cl_intel_subgroups", "Advanced Micro Devices, Inc.", "Intel(R) Corporation", "Intel", "Iris", "NVIDIA Corporation", "p && d < (int)p->devices.size()", "OPENCV_OPENCL_DEVICE", "ERROR: Invalid configuration string for OpenCL device", "ERROR: Can't find OpenCL platform by name: ", "dgpu", "igpu", "accelerator", "ERROR: Unsupported device type for OpenCL device (GPU, CPU, ACCELERATOR): ", "ERROR: Requested OpenCL device not found, check configuration: ", "    Platform: ", "    Device types: ", "    Device name: ", "handle == __null", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "0x10F0 == mem_type", "(int)step >= cols * (((((type) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((type) & ((1 << 3) - 1))*2) & 3))", "total >= rows * step", "no OpenCL platform available!", "No matched platforms available!", "%dx%dx%d", "NULL", "clEnqueueNDRangeKernel('%s', dims=%d, globalsize=%dx%dx%d, localsize=%s) sync=%s", "_globalsize != __null", "val > 0", "total > 0", "p && p->handle && !p->isInProgress", "q.ptr()", "u->origdata", "u->mapcount == 0", "u->origdata == data", "u->originalUMatData->data == data", "u->origdata == __null", "u->refcount == 0 && \"UMat deallocation error: some derived Mat is still alive\"", "u->handle != 0", "u && u->handle", "u->refcount == 1", "u->mapcount++ == 0", "u->data != __null", "u->mapcount-- == 1", "dims <= 3", "u->refcount == 0 || u->tempUMat()", "dst->refcount == 0", "0x10F1 == mem_type", "Not supported image_channel_data_type", "Not supported image_channel_order", "u->origdata != 0", "OpenCL runtime not found!", "ocl::Device::getDefault().imageSupport()", "cn <= 4", "Image format is not supported", "!alias", "devData != __null", "!src.empty()", "Incorrect UMat, handle is null", "!alias || canCreateAlias(src)", "data == 0", "uchar", "short", "uchar3", "int2", "int4", "char", "char3", "ushort", "ushort3", "int8", "short3", "int3", "int16", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "uchar2", "uchar4", "uchar8", "uchar16", "char2", "char4", "char8", "char16", "ushort2", "ushort4", "ushort8", "ushort16", "short2", "short4", "short8", "short16", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "/build/master_pack-android/opencv/modules/core/src/matrix_decomp.cpp", "(Func.rows==1 && (Constr.cols-Func.cols==1))|| (Func.cols==1 && (Constr.cols-Func.rows==1))", "/build/master_pack-android/opencv/modules/core/src/lpsolver.cpp", "Func.type()==(((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || Func.type()==(((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "Constr.type()==(((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || Constr.type()==(((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/core/src/copy.cpp", "dst.u != __null", "dims >= 0 && dims < 32", "sz <= sizeof(scalar)", "mask.depth() == 0 && (mcn == 1 || mcn == cn)", "size() == mask.size()", "checkScalar(value, type(), _value.kind(), _InputArray::MAT )", "mask.empty() || (mask.depth() == 0 && (mcn == 1 || mcn == cn) && size == mask.size)", "_src.getObj() != _dst.getObj()", "ny > 0 && nx > 0", "Unknown/unsupported border type", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "maskarr == 0", "src.depth() == dst.depth() && src.size == dst.size", "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", "src.channels() == dst.channels()", "src.type() == dst.type() && src.size() == dst.size()", "src.type() == dst.type() && dst.rows % src.rows == 0 && dst.cols % src.cols == 0", "/build/master_pack-android/opencv/modules/core/src/cuda_host_mem.cpp", "!flag && \"OpenVX support isn't enabled at compile time\"", "/build/master_pack-android/opencv/modules/core/src/ovx.cpp", "Trace: Total events: ", "Trace: Total skipped events: ", "<unknown>", "#description: OpenCV trace file", "#version: 1.0", ".txt", "l,%lld,\"%s\",%d,\"%s\",0x%llX\n", "%s-%03d.txt", "#thread file: %s\n", "b,%d,%lld,%lld,%lld", ",parentThread=%d,parent=%lld", "e,%d,%lld,%lld,%lld,%lld", ",skip=%d", "ctx.dummy_stack_top.region == __null", "/build/master_pack-android/opencv/modules/core/src/trace.cpp", "ctx.stack.empty()", "region->pImpl", "OpenCV parent region exceeds children count. Bailout", "Parent region exceeds children count. Bailout", "Region location is disabled. Bailout", "OPENCV_TRACE", "OPENCV_TRACE_DEPTH_OPENCV", "OPENCV_TRACE_MAX_CHILDREN_OPENCV", "OPENCV_TRACE_MAX_CHILDREN", "OPENCV_TRACE_LOCATION", "OpenCVTrace", "Either all the pointers should be null or they all should be non-null", "/build/master_pack-android/opencv/modules/core/src/array.cpp", "Non-positive width or height", "Non-positive cols or rows", "NULL matrix header pointer", "NULL <sizes> pointer", "non-positive or too large number of dimensions", "one of dimesion sizes is non-positive", "The array is too big", "invalid array data type", "bad number of dimensions", "Invalid sparse array header", "Invalid sparse matrix header", "NULL iterator pointer", "One of indices is out of range", "Data is already allocated", "Too big buffer is allocated", "Overflow for imageSize", "unrecognized or unsupported array type", "Bad CvMat header", "Bad CvMatND header", "src->dims <= 32", "_dst.data == data0", "For multidimensional array only CV_AUTOSTEP is allowed here", "bad dimension index", "Array should be CvMat or IplImage", "The number of channels must be 1, 2, 3 or 4", "index is out of range", "COI must be non-null in case of planar images", "((CvSparseMat*)arr)->dims == 2", "Only continuous nD arrays are supported here", "NULL pointer to indices", "cvGetReal* support only single-channel arrays", "cvSetReal* support only single-channel arrays", "NULL array pointer is passed", "The matrix has NULL data pointer", "The image has NULL data pointer", "Images with planar data layout should be used with COI selected", "The image is interleaved and has over CV_CN_MAX channels", "Pixel order should be used with coi == 0", "Input array has NULL data pointer", "Unrecognized or unsupported array type", "Incorrect number of arrays", "Some of required array pointers is NULL", "Iterator pointer is NULL", "Iterator with mask is not supported", "COI set is not allowed here", "Number of dimensions is the same for all arrays", "Data type is not the same for all arrays", "Number of channels is not the same for all arrays", "Depth is not the same for all arrays", "Dimension sizes are the same for all arrays", "NULL pointer to array or destination header", "None of array parameters is changed: dummy call?", "Non-positive or too large number of dimensions", "New dimension sizes are not specified", "The output header should be CvMat or CvMatND", "The matrix is not continuous so the number of rows can not be changed", "The total matrix width is not divisible by the new number of columns", "The output header should be CvMatND", "The input array must be CvMatND", "The last dimension full size is not divisible by new number of channels", "Simultaneous change of shape and number of channels is not supported. Do it by 2 separate calls", "Non-continuous nD arrays are not supported", "One of new dimension sizes is non-positive", "Number of elements in the original and reshaped array is different", "COI is not supported by this operation", "COI is not supported", "null pointer to header", "Bad input roi", "Unsupported format", "Bad input origin", "Bad input align", "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", "Null pointer to image", "Bad image header", "Unknown type of term criteria", "Iterations flag is set and maximum number of iterations is <= 0", "Accuracy flag is set and epsilon is < 0", "Neither accuracy nor maximum iterations number flags are set in criteria type", "GRAY", "BGRA", "/build/master_pack-android/opencv/modules/core/src/matrix_c.cpp", "COI is not supported by the function", "img->dataOrder == 0", "img->dataOrder == 0 || img->roi->coi != 0", "total > 0 && (((((seq->flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((seq->flags) & ((1 << 3) - 1))*2) & 3)) == esz", "(((arr) != __null && ((const IplImage*)(arr))->nSize == sizeof(IplImage)) && ((IplImage*)arr)->imageData != __null)", "0 <= coi && coi < mat.channels()", "ch.size == mat.size && ch.depth() == mat.depth() && 0 <= coi && coi < mat.channels()", "src.rows == dst.cols && src.cols == dst.rows && src.type() == dst.type()", "srcA.size() == dst.size() && srcA.type() == dst.type()", "The reduced dimensionality index is out of range", "The output array size is incorrect", "Input and output arrays must have the same number of channels", "The function only supports 32sC1 and 32fC1 datatypes", "src.size() == idx.size() && idx.type() == 4 && src.data != idx.data", "idx0.data == idx.data", "src.size() == dst.size() && src.type() == dst.type()", "dst0.data == dst.data", "!centers.empty()", "centers.rows == cluster_count", "centers.cols == data.cols", "centers.depth() == data.depth()", "labels.isContinuous() && labels.type() == 4 && (labels.cols == 1 || labels.rows == 1) && labels.cols + labels.rows - 1 == data.rows", "/sys/devices/system/cpu/possible", "%d-%d", "OPENCV_FOR_THREADS_NUM", "range.end", "range.start", "parallel_for_body", "/build/master_pack-android/opencv/modules/core/src/parallel.cpp", "nstripes", "parallel_for", "0 < coi && coi <= 4", "/build/master_pack-android/opencv/modules/core/src/stat_c.cpp", "Key may not start with '-'", "/build/master_pack-android/opencv/modules/core/src/persistence_yml.cpp", "Missing ':'", "An empty key", "Tabs are prohibited in YAML!", "Invalid character", "Incorrect indentation", "<tag:yaml.org,2002:", "Empty type name", "The wrong closing bracket", "Missing , between the elements", "Complex keys are not supported", "Multi-line text literals are not supported", "Block sequence elements must be preceded with '-'", "%YAML:1.", "%YAML 1.", "Unsupported YAML version (it must be 1.x)", "The YAML streams must start with '---', except the first one", "Invalid or unsupported syntax", "Only collections as YAML streams are supported by this parser", "!!binary |", "!!%s %c", "!!%s", "...\n", "---\n", "x%02x", "data.channels() == 1", "/build/master_pack-android/opencv/modules/core/src/pca.cpp", "_mean.size() == mean_sz", "fs.isOpened()", "name", "vectors", "values", "mean", "!fn.empty()", "(String)fn[\"name\"] == \"PCA\"", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && mean.cols == data.cols) || (mean.cols == 1 && mean.rows == data.rows))", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && eigenvectors.rows == data.cols) || (mean.cols == 1 && eigenvectors.rows == data.rows))", "retainedVariance > 0 && retainedVariance <= 1", "The library is compiled without OpenGL support", "/build/master_pack-android/opencv/modules/core/src/gl_core_3_1.cpp", "/build/master_pack-android/opencv/modules/core/src/opengl.cpp", "cn == 2 || cn == 3 || cn == 4", "depth == 3 || depth == 4 || depth == 5 || depth == 6", "cn == 3 || cn == 4", "cn == 3", "depth == 1 || depth == 3 || depth == 4 || depth == 5 || depth == 6", "cn >= 1 && cn <= 4", "OpenCV was build without OpenGL support", "!mat.empty()", "/build/master_pack-android/opencv/modules/core/src/lapack.cpp", "mat.rows == mat.cols && (type == 5 || type == 6)", "rows == mat->cols", "p == evects0.ptr()", "p == evals0.ptr()", "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", "type == _src2.type() && (type == 5 || type == 6)", "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", "The function can not solve under-determined linear systems", "A.type() == x.type() && A.cols == x.rows && x.cols == b.cols", "w.type() == type && (w.size() == cv::Size(nm,1) || w.size() == cv::Size(1, nm) || w.size() == cv::Size(nm, nm) || w.size() == cv::Size(n, m))", "u.type() == type", "v.type() == type", "u.size() == svd.u.size()", "v.size() == svd.vt.size()", "m == n", "method == DECOMP_LU || method == DECOMP_CHOLESKY", "src.type() == dst.type() && src.rows == dst.cols && src.cols == dst.rows", "src.size == dst.size && dst.type() == (((0) & ((1 << 3) - 1)) + ((((src.channels()))-1) << 3))", "/build/master_pack-android/opencv/modules/core/src/convert_c.cpp", "src.size == dst.size && src.channels() == dst.channels()", "dst.size() == src.size() && dst.type() == (((lut.depth()) & ((1 << 3) - 1)) + (((src.channels())-1) << 3))", "dst.size() == src.size() && src.channels() == dst.channels()", "nz > 0", "svec[j].size == dst.size && svec[j].depth() == dst.depth() && svec[j].channels() == 1 && i < dst.channels()", "dvec[j].size() == src.size()", "dvec[j].depth() == src.depth()", "dvec[j].channels() == 1", "i < src.channels()", "\n(:, :, %d) = \n", "(:, :, %d) = \n", "/build/master_pack-android/opencv/modules/core/src/out.cpp", "%%.%dg", "], dtype='%s')", "array([", "uint8", "uint16", "int32", "float32", "float64", "uint64", "OpenCV was build without VA support (libva)", "/build/master_pack-android/opencv/modules/core/src/va_intel.cpp", "0 <= rowRange_.start && rowRange_.start <= rowRange_.end && rowRange_.end <= m.rows", "/build/master_pack-android/opencv/modules/core/src/cuda_gpu_mat.cpp", "0 <= colRange_.start && colRange_.start <= colRange_.end && colRange_.end <= m.cols", "(cn == 1 && (_mask.empty() || _mask.type() == 0)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", "/build/master_pack-android/opencv/modules/core/src/minmax.cpp", "_img.dims() <= 2", "The storage is not opened", "/build/master_pack-android/opencv/modules/core/src/persistence.cpp", "Too small map header_size", "%s(%d): %s", "</opencv_storage>\n", "-.Inf", ".Inf", "%.16e", ".Nan", "%.8e", "Bad format of floating-point constant", "Unexpected error, unable to determine the Base64 state.", "Unexpected error, unable to switch to this state.", "fs->is_write_struct_delayed == false", "depth >=0 && depth < 9", "%d%c", "Invalid data type specification", "Too long data type specification", "Too complex format for the matrix", "Unknown type of file node", "/build/master_pack-android/opencv/modules/core/src/datastructs.cpp", "NULL storage pointer", "Too large memory block is requested", "requested size is negative or too big", "Storage block size is too small to fit the sequence elements", "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", "The sequence has NULL storage pointer", "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", "Invalid index", "NULL sequence pointer", "number of removed elements is negative", "Invalid sequence header", "Bad sequence slice", "start slice index is out of range", "Invalid destination sequence header", "Source is not a sequence nor matrix", "The source array must be 1d coninuous vector", "Source and destination sequence element sizes are different.", "Bad input sequence", "Null compare function", "Null element pointer", "set != __null", "graph pointer is NULL", "vertex pointers coinside (or set to NULL)", "edge != 0", "The vertex does not belong to the graph", "The vertex is not found", "Null graph pointer", "graph->storage != 0", "Null double pointer to graph scanner", "Null graph scanner", "Invalid graph pointer", "frame node could not be deleted", "type == _src2.type()", "/build/master_pack-android/opencv/modules/core/src/matmul.cpp", "src1.size == src2.size", "mat.type() == type()", "mat.size == size", "src1.size == dst.size", "src1.type() == dst.type()", "(evals0.cols == 1 || evals0.rows == 1)", "ecount0 <= ecount", "evects0.cols == evects.cols", "evects0.rows == ecount0", "mean0.data == mean.data", "dst.cols <= evects.rows", "dst.rows == data.rows", "dst.rows <= evects.rows", "dst.cols == data.cols", "data.cols <= evects.rows", "data.rows <= evects.rows", "type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "type == B.type()", "(type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "a_size.width == len", "a_size.height == len", "C.type() == type", "(((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", "src.channels() == 1", "delta.channels() == 1", "(delta.rows == src.rows || delta.rows == 1)", "(delta.cols == src.cols || delta.cols == 1)", "src.size() > 0", "(*each).size() == size", "(*each).type() == type", "_mean.size() == size", "((flags & 8) != 0) ^ ((flags & 16) != 0)", "nsamples > 0", "mean.size() == size", "data", "data[i].size() == size", "data[i].type() == type", "vecarr != 0", "count >= 1", "(D.rows == ((flags & 1) == 0 ? A.rows : A.cols))", "(D.cols == ((flags & 2) == 0 ? B.cols : B.rows))", "D.type() == A.type()", "scn == m.cols || scn + 1 == m.cols", "dst.depth() == src.depth()", "dst.channels() == m.rows", "scn + 1 == m.cols", "dst.type() == src.type()", "dst.channels() == m.rows-1", "type == v2.type()", "type == icovar.type()", "sz == v2.size()", "len == icovar.rows && len == icovar.cols", "cn == 1", "/build/master_pack-android/opencv/modules/core/src/count_non_zero.cpp", "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "idx.isContinuous()", "my_object", "format", "/build/master_pack-android/opencv/modules/core/src/algorithm.cpp", "/build/master_pack-android/opencv/modules/core/src/mathfuncs_core.dispatch.cpp", "/build/master_pack-android/opencv/modules/core/src/mathfuncs_core.simd.hpp", "opencv-nd-matrix", "sizes", "opencv-matrix", "rows", "cols", "opencv-sparse-matrix", "/build/master_pack-android/opencv/modules/core/src/persistence_types.cpp", "header_dt", "The size of header calculated from \"header_dt\" is greater than header_size", "rect", "width", "height", "color", "origin", "header_user_data", "The size of element calculated from \"dt\" and the elem_size do not match", "Size of sequence element (elem_size) is inconsistent with seq->flags", "oriented", "vertices", "edges", "opencv-graph", "flags", "vertex_count", "vertex_dt", "edge_count", "edge_dt", "2if%s", "opencv-sequence", "level", " hole", " curve", " untyped", "count", "recursive", "opencv-sequence-tree", "sequences", "top-left", "bottom-left", "planar", "interleaved", "Images with planar data layout are not supported", "opencv-image", "layout", "Some of essential matrix attributes are absent", "The matrix data is not found in file storage", "The matrix size does not match to the number of stored elements", "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence", "All the sequence tree nodes should contain \"level\" field", "Could not determine the matrix dimensionality", "sizes[i]", "Some of essential image attributes are absent", "Only interleaved images can be read", "The image data is not found in file storage", "Could not determine sparse matrix dimensionality", "Sparse matrix data is corrupted", "Some of essential graph attributes are absent", "The sequence flags are invalid", "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", "Graph edges should start with 2 integers and a float", "%df%s", "No edges data", "No vertices data", "Some of stored vertex indices are out of range", "Duplicated edge has occurred", "Some of essential sequence attributes are absent", "curve", "closed", "hole", "untyped", "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur", "The number of stored elements does not match to \"count\"", "[empty_any]", "[WARNING] The cvflann::set_distance_type function is deperecated, use cv::flann::GenericIndex<Distance> instead.", "[ERROR] cvflann::set_distance_type only provides backwards compatibility for the L1 and L2 distances. For other distance types you must use cv::flann::GenericIndex<Distance>", "Failed to allocate memory.\n", "Unknown/unsupported distance type", "/build/master_pack-android/opencv/modules/flann/src/miniflann.cpp", "maxResults > 0", "LSH index does not support radiusSearch operation", "query.type() == type && indices.type() == 4 && dists.type() == dtype", "query.isContinuous() && indices.isContinuous() && dists.isContinuous()", "/build/master_pack-android/opencv/modules/flann/include/opencv2/flann/general.h", "Cannot read from file", "Building kmeans tree...\n", "Building kdtree tree...\n", "Invalid index file, cannot read", "FLANN_INDEX", "Invalid index file, wrong signature", "Invalid key_size (=%d). Valid values for your system are %d <= key_size < %d.", "/build/master_pack-android/opencv/modules/flann/include/opencv2/flann/lsh_table.h", "(size_t)knn <= index_->size()", "Can not open file %s for writing FLANN index\n", "algorithm", "trees", "branching", "iterations", "centers_init", "cb_index", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "key_size", "multi_probe_level", "filename", "checks", "sorted", "Missing parameter '", "' in the parameters given", "I can only search one feature at a time for range search\n", "leaf_max_size", "reorder", "Unknown algorithm for choosing initial centers.", "Unknown index type", "Datatype of saved index is different than of the one to be created.", "The index saved belongs to a different dataset", "type=%d\n", "Only continuous arrays are supported", "DataType<ElementType>::type == data.type() && data.isContinuous()", "Reading FLANN index error: unsupported feature type %d for the index type %d\n", "Reading FLANN index error: unsupported distance type %d\n", "Reading FLANN index error: the saved data size (%d, %d) or type (%d) is different from the passed one (%d, %d), %d\n", "LSH is not implemented for that type", "matches.cols=%d, nn=%d\n", "Ground truth is not computed for as many neighbors as requested", "%8d %10.4g %10.5g %10.5g %10.5g\n", "  Nodes  Precision(%)   Time(s)   Time/vec(ms)  Mean dist\n", "---------------------------------------------------------\n", "Got as close as I can\n", "Start linear estimation\n", "No need for linear estimation\n", "Computing ground truth\n", "Estimating number of checks\n", "KMeans algorithm, estimating cluster border factor\n", "Optimum cb_index: %g\n", "Required number of checks: %d \n", "KDTree using params: trees=%d\n", "KDTree buildTime=%g, searchTime=%g\n", "It doesn't make any sense to use more than one tree for exact search", "Branching factor must be at least 2", "KMeansTree using params: max_iterations=%d, branching=%d\n", "KMeansTree buildTime=%g, searchTime=%g, build_weight=%g\n", "KD-TREE, Step 1: Exploring parameter space\n", "KMEANS, Step 1: Exploring parameter space\n", "Entering autotuning, dataset size: %d, sampleSize: %d, testSampleSize: %d, target precision: %g\n", "Choosing linear, dataset too small\n", "Computing ground truth... \n", "Autotuning parameters...\n", "----------------------------------------------------\n", "Autotuned parameters:\n", "Search parameters:\n", "intersection.size() <= 8", "/build/master_pack-android/opencv/modules/imgproc/src/intersection.cpp", "total >= 0 && (depth == 5 || depth == 4)", "/build/master_pack-android/opencv/modules/imgproc/src/convhull.cpp", "Input sequence is not a sequence of points", "Floating-point coordinates are not supported here", "Convex hull must represented as a sequence of indices or sequence of pointers", "Convex hull is neither sequence nor matrix", "The matrix should be 1-dimensional and continuous array of int's", "Convex hull is larger than the point sequence", "hull_next != __null && hull_cur != __null", "npoints >= 0", "hpoints > 0", "0 <= hcurr && hcurr < npoints", "0 <= hnext && hnext < npoints", "Input sequence must be polygon (closed 2d curve)", "_points.getObj() != _hull.getObj()", "points.isContinuous()", "Unsupported sequence type", "Destination is not CvMemStorage* nor CvMat*", "/build/master_pack-android/opencv/modules/imgproc/src/precomp.hpp", "The hull matrix should be continuous and have a single row or a single column", "The hull matrix size might be not enough to fit the hull", "The hull matrix must have the same type as input or 32sC1 (integers)", "Point sequence can not be empty if the output is matrix", "m1 != __null && m2 != __null", "/build/master_pack-android/opencv/modules/imgproc/src/undistort.cpp", "m1f != __null && m2f != __null", "m1 != __null", "(((_src) != __null && (((const CvMat*)(_src))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_src))->cols > 0 && ((const CvMat*)(_src))->rows > 0) && ((const CvMat*)(_src))->data.ptr != __null) && (((_dst) != __null && (((const CvMat*)(_dst))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_dst))->cols > 0 && ((const CvMat*)(_dst))->rows > 0) && ((const CvMat*)(_dst))->data.ptr != __null) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (((_src->type) & ((1 << 3)*512 - 1)) == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || ((_src->type) & ((1 << 3)*512 - 1)) == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))) && (((_dst->type) & ((1 << 3)*512 - 1)) == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || ((_dst->type) & ((1 << 3)*512 - 1)) == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "(((_cameraMatrix) != __null && (((const CvMat*)(_cameraMatrix))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_cameraMatrix))->cols > 0 && ((const CvMat*)(_cameraMatrix))->rows > 0) && ((const CvMat*)(_cameraMatrix))->data.ptr != __null) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "(((_distCoeffs) != __null && (((const CvMat*)(_distCoeffs))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_distCoeffs))->cols > 0 && ((const CvMat*)(_distCoeffs))->rows > 0) && ((const CvMat*)(_distCoeffs))->data.ptr != __null) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8 || _distCoeffs->rows*_distCoeffs->cols == 12 || _distCoeffs->rows*_distCoeffs->cols == 14)", "(((matR) != __null && (((const CvMat*)(matR))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matR))->cols > 0 && ((const CvMat*)(matR))->rows > 0) && ((const CvMat*)(matR))->data.ptr != __null) && matR->rows == 3 && matR->cols == 3", "(((matP) != __null && (((const CvMat*)(matP))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matP))->cols > 0 && ((const CvMat*)(matP))->rows > 0) && ((const CvMat*)(matP))->data.ptr != __null) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "src.isContinuous() && (src.depth() == 5 || src.depth() == 6) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8 || ndcoeffs == 12 || ndcoeffs == 14)", "cameraMatrix0.size() == Size(3,3)", "Unknown projection type", "m1type == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3)) || m1type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || m1type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3))", "A.size() == Size(3,3) && A.size() == R.size()", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1) || distCoeffs.size() == Size(1, 12) || distCoeffs.size() == Size(12, 1) || distCoeffs.size() == Size(1, 14) || distCoeffs.size() == Size(14, 1)", "dst.data != src.data", "mapx0.data == mapx.data && mapy0.data == mapy.data", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && softfloat(coeffs[i*3]) + softfloat(coeffs[i*3+1]) + softfloat(coeffs[i*3+2]) < softfloat(1.5f)", "/build/master_pack-android/opencv/modules/imgproc/src/color.cpp", "whitePt[1] == softdouble::one()", "hrange == 180 || hrange == 256", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << xyz_shift)", "c[0] >= 0 && c[1] >= 0 && c[2] >= 0 && c[0] + c[1] + c[2] < softfloat((int)LAB_CBRT_TAB_SIZE)", "Unknown/unsupported color conversion code", "ysz.width == uvs.width * 2", "ysz.width % 2 == 0 && depth == 0", "ysz.height == uvs.height * 2", "depth == 0 || depth == 2 || depth == 5", "scn == 3 || scn == 4", "(scn == 3 || scn == 4) && depth == 0", "(dcn == 3 || dcn == 4) && scn == 2 && depth == 0", "scn == 2 && depth == 0", "scn == 1 && (dcn == 3 || dcn == 4)", "scn == 1 && depth == 0", "scn == 3 && (dcn == 3 || dcn == 4)", "(scn == 3 || scn == 4) && (depth == 0 || depth == 5)", "scn == 3 && (dcn == 3 || dcn == 4) && (depth == 0 || depth == 5)", "dcn == 3 || dcn == 4", "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0", "dcn == 1", "sz.width % 2 == 0 && sz.height % 2 == 0", "scn == 4 && dcn == 4 && depth == 0", "src.depth() == dst.depth()", "MWRMNV RMVV PSTS", "MWOMOV OMSMUNUPSQ OQSQURUUSVOV", "MXVNTMRMPNOPOSPURVTVVU", "MWOMOV OMRMTNUPUSTURVOV", "MWOMOV OMUM OQSQ OVUV", "MVOMOV OMUM OQSQ", "MXVNTMRMPNOPOSPURVTVVUVR SRVR", "MWOMOV UMUV OQUQ", "PTRMRV", "NUSMSTRVPVOTOS", "MWOMOV UMOS QQUV", "MVOMOV OVUV", "LXNMNV NMRV VMRV VMVV", "MWOMOV OMUV UMUV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWOMOV OMSMUNUQSROR", "MXRMPNOPOSPURVSVUUVSVPUNSMRM STVW", "MWOMOV OMSMUNUQSROR RRUV", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MWRMRV NMVM", "MXOMOSPURVSVUUVSVM", "MWNMRV VMRV", "LXNMPV RMPV RMTV VMTV", "MWOMUV UMOV", "MWNMRQRV VMRQ", "MWUMOV OMUM OVUV", "MVOMOV OMUM", "MWRMNV RMVV NVVV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM QQTR TQQR", "MWRMNV RMVV", "MWOMUM PQTR TQPR OVUV", "MWOMOV UMUV OMUM", "MWOMRQOV OMUM OVUV", "MWNONNOMPMQNRPRV VOVNUMTMSNRP", "LXRMRV PONPNSPTTTVSVPTOPO", "LXRMRV NOOPOSQTSTUSUPVO", "MXOVQVOROPPNRMSMUNVPVRTVVV", "MWSMMV SMUV OSTS", "MWQMNV QMTMVNVPSQPQ SQURUTTURVNV", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "MXQMNV QMUMVOVQUTTURVNV", "MVQMNV QMVM PQSQ NVSV", "MVQMNV QMVM PQSQ", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "MXQMNV WMTV PQUQ", "PUTMQV", "OVUMSSRUQVPVOUOT", "MVQMNV VMOS RQTV", "NVRMOV OVTV", "LYPMMV PMQV XMQV XMUV", "MXQMNV QMTV WMTV", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "MWQMNV QMUMVNVPUQSRPR", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM QVPUPTQSRSSTTVUWVW", "MWQMNV QMUMVNVPUQSRPR QRRUSVTVUU", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "MVSMPV PMVM", "LXPMNSNUOVRVTUUSWM", "MWOMQV WMQV", "KXNMNV SMNV SMSV XMSV", "NWQMTV WMNV", "NWQMSQQV WMSQ", "MWQMWMNVTV", "LXNMRV VMRV NMVM", "MWNLVX", "LXRONU ROVU", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "NWQPTPUQUV URQSPTPUQVSVUU", "MWOMOV OSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVSVUU", "MWUMUV USTQRPPQOSPURVTUUS", "MWOSUSTQRPPQOSPURVTV", "NVUNTMSMRNRV PPTP", "MWUPUVTXRYPY USTQRPPQOSPURVTUUS", "MWOMOV OSPQRPTQUSUV", "PTRLQMRNSMRL RPRV", "PUSLRMSNTMSL SPSXRYQYPX", "NWPMPV UPPT RSUV", "KYMPMV MSNQOPPPQQRSRV RSSQTPUPVQWSWV", "MWOPOV OSPQRPTQUSUV", "MWRPPQOSPURVTUUSTQRP", "MWOPOY OSPURVTUUSTQRPPQOS", "MWUPUY USTQRPPQOSPURVTUUS", "NVPPPV PSQQSPTP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "NVRMRUSVTVUU PPTP", "MWUPUV OPOSPURVTUUS", "NVOPRV UPRV", "LXNPPV RPPV RPTV VPTV", "MWOPUV UPOV", "MWOPRV UPRVQXPYOY", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MXNQOPQPRQRSQW VPURSTQWPY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "NWUQSPQPPQPRQS SSQSPTPUQVSVUU", "NWTMSNSOTP UPSPQQPSPUQVSWSXRYQY", "LXNQOPPPQQQSPV QSRQTPUPVQVSUVTY", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "OVRPQSQURVSVTU", "MWQPOV UPTPRQPS PSQUSVTV", "MWOMPMQNRPUV RPOV", "LYPPMY UPTSSUQVPVOUOS TSTUUVVVWU", "MWNPOPOV UPTSRUOV", "NWTMSNSOTP UPSPQQQRRSTS SSQTPUPVQWSXSYRZQZ", "MXOQQPVP QPQRPV TPTRUV", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "MXOQQPVP SPRV", "KXMQNPOPPQPUQVSVTUUSVP", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "MWOPPPQQSXTYUY UPTRPWOY", "KYTMRY MQNPOPPQPUQVTVUUVSWP", "LXOPNRNTOVQVRTRR UPVRVTUVSVRT", "LWTSSQQPOQNSOUQVSUTS UPTSTUUVVV", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "LWTSSQQPOQNSOUQVSUTS VMTSTUUVVV", "MWOSTSURUQSPRPPQOSPURVTV", "OVVMUMTNSPQVPXOYNY QPUP", "MXUSTQRPPQOSPURVTUUS VPTVSXRYPYOX", "MVQMNV OSPQQPSPTQTRSTSUTVUV", "PUSMSNTNTMSM QPRPSQSRRTRUSVTV", "OUSMSNTNTMSM QPRPSQSRRVQXPYOYNX", "NVRMOV UPTPRQPS PSQUSVTV", "OTSMQSQURVSV", "JYKPLPMQMSLV MSNQOPQPRQRSQV RSSQTPVPWQWRVTVUWVXV", "MWNPOPPQPSOV PSQQRPTPUQURTTTUUVVV", "MXNPOPPQPSNY PSQUSVUUVSUQSPQQPS", "MXUSTQRPPQOSPURVTUUS VPSY", "MVOPPPQQQSPV UQTPSPRQQS", "NVTQSPQPPQPRQSRSSTSURVPVOU", "NUSMQSQURVSV PPTP", "MWNPOPPQPROTOUPVRVSUTS UPTSTUUVVV", "MWNPOPPQPROTOUPVRVTUURUP", "KYLPMPNQNRMTMUNVPVQURSSP RSRUSVUVVUWRWP", "MWOQPPQPRQRUSVTVUU VQUPTPSQQUPVOVNU", "MWNPOPPQPROTOUPVRVSUTS UPSVRXQYOYNX", "NVUPOV PQQPSPTQ PUQVSVTU", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPRPPQOSPURVSVUU OSSS", "MWRMQNPPOSOVPWRWSVTTUQUNTMRM PRTR", "MWTMQY RPPQOSPURVSVUUVSUQSPRP", "MWUQSPQPOQOSPTRUSVSWRXQX", "KYTPTSUTVTWSWQVOUNSMQMONNOMQMSNUOVQWSWUV TQSPQPPQPSQTSTTS", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "LYPMQNQOPPOPNONNOMPMSNUNWMNV USTTTUUVVVWUWTVSUS", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWONQMSMUNUPSQ RQSQURUUSVQVOU", "MWSMSV SMNSVS", "MWPMOQQPRPTQUSTURVQVOU PMTM", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUMQV OMUM", "MWQMONOPQQSQUPUNSMQM QQOROUQVSVUUURSQ", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PURPRQSQSPRP RURVSVSURU", "PURPRQSQSPRP SVRVRUSUSWRY", "PURMRR SMSR RURVSVSURU", "NWPNRMSMUNUPRQRRSRSQUP RURVSVSURU", "PTRMRQ", "NVPMPQ TMTQ", "NVQMPNPPQQSQTPTNSMQM", "MWRKRX UNSMQMONOPQQTRUSUUSVQVOU", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "LXRNRV NRVR", "LXNPVP NTVT", "MWOOUU UOOU", "MWRORU OPUT UPOT", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "LXSOVRSU NRVR", "MXQLQY TLTY OQVQ OTVT", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LXNNOQOSNV VNUQUSVV NNQOSOVN NVQUSUVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "H\\NRMQLRMSNR VRWQXRWSVR", "H\\MPLQLRMSNSOROQNPMP MQMRNRNQMQ WPVQVRWSXSYRYQXPWP WQWRXRXQWQ", "I[KRYR", "H\\RUJPRTZPRU", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IYJWLVNVPWTZV[X[ZZ[W IYJVLUNUPVTYVZXZZY[W", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IW[W I[[[", "CaGO]OXI L[GU]U", "D`F^^^^FFFF^", "KYQVOUNSNQOOQNSNUOVQVSUUSVQV SVVS QVVQ OUUO NSSN NQQN", "H\\IR[R", "H\\IR[R IQ[Q", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZQ[O\\N^Na TTUUVWUYTZ N`O_P_S`V`W_ P_SaVaW_W^", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYPFSCSP RDRP OPVP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOEOFNFNEODQCTCVDWFVHTIQJOKNMNP TCUDVFUHTI NOONPNSOVOWN PNSPVPWNWM MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYNCNG VERLPP WCTIQP NEPCRCUE NEPDRDUEVE MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR SVSa TTTa TTM]X] QaVa", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR SVSa TTTa TTM]X] QaVa", "F^YXWZU[R[PZMXKWIWHXHZI[K[MZOWPURQTKWGYFZF[G\\H[IZH[G[FZFYFWGVHTLRPPVNZMZ OPUP", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ NJNW OJOW LJSJVKWMWNVPSQOQ SJUKVMVNUPSQ LWQW SQTRUVVWWWXV SQURVVWW", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ UKVJVNUKSJPJNKMLLOLRMUNVPWSWUVVT PJNLMOMRNUPW", "E_IM[M IR[R IW[W K[YI", "CaaOdNfLgKfKdLaN^P\\SZWX", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX ^I^G]F\\FZGXIVLTNROPO ROSQSXTZU[V[XZYY[V", "I\\MRORSQVOXMYKYHXFVFUGTISNRSQVPXNZL[J[IZIXJWLWNXQZT[V[YZ[X", "@aEMCLBJBICGEFFFHGIIIKHPGTE[ GTJLLHMGOFPFRGSISKRPQTO[ QTTLVHWGYFZF\\G]I]K\\PZWZZ[[\\[^Z_YaaF_G\\JYNVTS[", "F^NLLLKKKILGNFPFRGSISLQUQXRZT[V[XZYXYVXUVU ]I]G\\FZFXGVITLPUNXLZJ[H[GZGX", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLXMZN[P[RZTXVUWSYM [FYMVWT]RbPfNgMfMdNaP^S[VY[V", "H]ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWTTWPZN[K[JZJXKWNWPXQYR[R^QaPcNfLgKfKdLaN^Q[TYZV", "I[JFR[ ZFR[ JFZF", "G]IL[b", "E_RJIZ RJ[Z", "I[J[Z[", "I[J[Z[ZZJZJ[", "I\\XMX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "H[LFL[ LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\XFX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I[LSXSXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX", "MYWFUFSGRJR[ OMVM", "I\\XMX]W`VaTbQbOa XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\MFM[ MQPNRMUMWNXQX[", "NVQFRGSFREQF RMR[", "MWRFSGTFSERF SMS^RaPbNb", "IZMFM[ WMMW QSX[", "CaGMG[ GQJNLMOMQNRQR[ RQUNWMZM\\N]Q][", "I\\MMM[ MQPNRMUMWNXQX[", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM", "H[LMLb LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I\\XMXb XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "KXOMO[ OSPPRNTMWM", "J[XPWNTMQMNNMPNRPSUTWUXWXXWZT[Q[NZMX", "MYRFRWSZU[W[ OMVM", "I\\MMMWNZP[S[UZXW XMX[", "JZLMR[ XMR[", "G]JMN[ RMN[ RMV[ ZMV[", "J[MMX[ XMM[", "JZLMR[ XMR[P_NaLbKb", "J[XMM[ MMXM M[X[", "H]QMONMPLRKUKXLZN[P[RZUWWTYPZM QMSMTNUPWXXZY[Z[", "I\\UFSGQIOMNPMTLZKb UFWFYHYKXMWNUORO ROTPVRWTWWVYUZS[Q[OZNYMV", "I\\JPLNNMOMQNROSRSVR[ ZMYPXRR[P_Ob", "I[TMQMONMPLSLVMYNZP[R[TZVXWUWRVOTMRKQIQGRFTFVGXI", "JZWOVNTMQMONOPPRSS SSOTMVMXNZP[S[UZWX", "JYTFRGQHQIRJUKXK XKTMQONRMUMWNYP[S]T_TaSbQbP`", "H\\IQJOLMNMONOPNTL[ NTPPRNTMVMXOXRWWTb", "G\\HQIOKMMMNNNPMUMXNZO[Q[SZUWVUWRXMXJWGUFSFRHRJSMUPWRZT", "LWRMPTOXOZP[R[TYUW", "I[OMK[ YNXMWMUNQROSNS NSPTQUSZT[U[VZ", "JZKFMFOGPHX[ RML[", "H]OMIb NQMVMYO[Q[SZUXWT YMWTVXVZW[Y[[Y\\W", "I[LMOMNSMXL[ YMXPWRUURXOZL[", "JZTFRGQHQIRJUKXK UKRLPMOOOQQSTTVT TTPUNVMXMZO\\S^T_TaRbPb", "J[RMPNNPMSMVNYOZQ[S[UZWXXUXRWOVNTMRM", "G]PML[ UMVSWXX[ IPKNNM[M", "I[MSMVNYOZQ[S[UZWXXUXRWOVNTMRMPNNPMSIb", "I][MQMONMPLSLVMYNZP[R[TZVXWUWRVOUNSM", "H\\SMP[ JPLNOMZM", "H\\IQJOLMNMONOPMVMYO[Q[TZVXXTYPYM", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb", "I[KMMMOOU`WbYb ZMYOWRM]K`Jb", "F]VFNb GQHOJMLMMNMPLULXMZO[Q[TZVXXUZP[M", "F]NMLNJQITIWJZK[M[OZQW RSQWRZS[U[WZYWZTZQYNXM", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXVRUWUZV[W[YZZY\\V", "M[MVOSRNSLTITGSFQGPIOMNTNZO[P[RZTXUUURVVWWYW[V", "MXTTTSSRQROSNTMVMXNZP[S[VYXV", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXZF VRUWUZV[W[YZZY\\V", "NXOYQXRWSUSSRRQROSNUNXOZQ[S[UZVYXV", "OWOVSQUNVLWIWGVFTGSIQQNZKaJdJfKgMfNcOZP[R[TZUYWV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZTY VRTYPdOfMgLfLdMaP^S\\U[XY[V", "M\\MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "PWSMSNTNTMSM PVRRPXPZQ[R[TZUYWV", "PWSMSNTNTMSM PVRRLdKfIgHfHdIaL^O\\Q[TYWV", "M[MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUTVQV QVSWTZU[V[XZYY[V", "OWOVQSTNULVIVGUFSGRIQMPTPZQ[R[TZUYWV", "E^EVGSIRJSJTIXH[ IXJVLSNRPRQSQTPXO[ PXQVSSURWRXSXUWXWZX[Y[[Z\\Y^V", "J\\JVLSNROSOTNXM[ NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "LZRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXWXYWZV", "KZKVMSNQMUGg MUNSPRRRTSUUUWTYSZQ[ MZO[R[UZWYZV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZ VRUUSZPaOdOfPgRfScS\\U[XY[V", "MZMVOSPQPSSSTTTVSYSZT[U[WZXYZV", "NYNVPSQQQSSVTXTZR[ NZP[T[VZWYYV", "OXOVQSSO VFPXPZQ[S[UZVYXV PNWN", "L[LVNRLXLZM[O[QZSXUU VRTXTZU[V[XZYY[V", "L[LVNRMWMZN[O[RZTXUUUR URVVWWYW[V", "I^LRJTIWIYJ[L[NZPX RRPXPZQ[S[UZWXXUXR XRYVZW\\W^V", "JZJVLSNRPRQSQZR[U[XYZV WSVRTRSSOZN[L[KZ", "L[LVNRLXLZM[O[QZSXUU VRPdOfMgLfLdMaP^S\\U[XY[V", "LZLVNSPRRRTTTVSXQZN[P\\Q^QaPdOfMgLfLdMaP^S\\WYZV", "J\\K[NZQXSVUSWOXKXIWGUFSGRHQJPOPTQXRZT[V[XZYY", "I[WUWRVOUNSMQMONMPLSLVMYNZP[R[TZVXWUXPXKWHVGTFRFPGNI", "JZWNUMRMPNNPMSMVNYOZQ[T[VZ MTUT", "J[TFRGPJOLNOMTMXNZO[Q[SZUWVUWRXMXIWGVFTF NPWP", "H\\VFNb QMNNLPKSKVLXNZQ[S[VZXXYUYRXPVNSMQM", "I[XOWNTMQMNNMOLQLSMUOWSZT\\T^S_Q_", "DaWNVLTKQKOLNMMOMRNTOUQVTVVUWS WKWSXUYV[V\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYY", "F^ZIJRZ[", "F^JIZRJ[", "KYOBOb OBVB ObVb", "KYUBUb NBUB NbUb", "KYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb", "KYPBSETHTJSMQOQPURQTQUSWTZT\\S_Pbb", "KYVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`Nb", "NVRBRb", "E_IR[R", "E_RIR[ IR[R", "E_IO[O IU[U", "G]KKYY YKKY", "JZRLRX MOWU WOMU", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "E_UMXP[RXTUW IR[R", "G]OFOb UFUb`Oa", ">f>RfR", "D`D``D", "RRR>Rf", "D`DD``", "D`DR`R", "F^FY^K", "KYK^YF", "KYKFY^", "F^FK^Y", "KYKRYR", "MWMWWM", "MWMMWW", "D`DOGQKSPTTTYS]Q`O", "PUUDSGQKPPPTQYS]U`", "OTODQGSKTPTTSYQ]O`", "D`DUGSKQPPTPYQ]S`U", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "JZJ]L]O\\Q[TXUVVSVOULTJSIQIPJOLNONSOVPXS[U\\X]Z]", "I]]Z]X\\U[SXPVOSNONLOJPIQISJTLUOVSVVUXT[Q\\O]L]J", "JZZGXGUHSIPLONNQNUOXPZQ[S[TZUXVUVQUNTLQIOHLGJG", "G[GJGLHOIQLTNUQVUVXUZT[S[QZPXOUNQNNOLPISHUGXGZ", "E[EPFRHTJUMVQVUUXSZP[NZLWLSMQNNPLSKVKYL\\M^", "EYETHVKWPWSVVTXQYNYLXKVKSLPNNQMTMYN\\P_", "OUQOOQOSQUSUUSUQSOQO QPPQPSQTSTTSTQSPQP RQQRRSSRRQ", "D`DRJR ORUR ZR`R", "D`DUDO`O`U", "JZRDJR RDZR", "D`DR`R JYZY P`T`", "D`DR`R DRRb `RRb", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "LXLLLXXXXLLL", "KYRJKVYVRJ", "LXRHLRR\\XRRH", "JZRIPOJOOSMYRUWYUSZOTORI", "KYRKRY KRYR", "MWMMWW WMMW", "MWRLRX MOWU WOMU", "NVQNOONQNSOUQVSVUUVSVQUOSNQN OQOS PPPT QOQU RORU SOSU TPTT UQUS", "NVNNNVVVVNNN OOOU POPU QOQU RORU SOSU TOTU UOUU", "MWRLMUWURL ROOT ROUT RRQT RRST", "LULRUWUMLR ORTU ORTO RRTS RRTQ", "MWRXWOMORX RUUP RUOP RRSP RRQP", "OXXROMOWXR URPO URPU RRPQ RRPS", "LXRLNWXPLPVWRL RRRL RRLP RRNW RRVW RRXP", "MWRLRX OOUO MUOWQXSXUWWU", "LXRLRX LQMOWOXQ PWTW", "KYMNWX WNMX OLLOKQ ULXOYQ", "I[NII[ VI[[ MM[[ WMI[ NIVI MMWM", "I[RGRV MJWP WJMP IVL\\ [VX\\ IV[V L\\X\\", "G[MJSV KPSL G\\[\\[RG\\", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "KYYPXNVLSKQKNLLNKQKSLVNXQYSYVXXVYT YPWNUMSMQNPOOQOSPUQVSWUWWVYT", "KYRJKVYVRJ RZYNKNRZ", "G]PIPGQFSFTGTI GZHXJVKTLPLKMJOIUIWJXKXPYTZV\\X]Z GZ]Z QZP[Q\\S\\T[SZ", "JZRMRS RSQ\\ RSS\\ Q\\S\\ RMQJPHNG QJNG RMSJTHVG SJVG RMNKLKJM PLLLJM RMVKXKZM TLXLZM RMPNOOOR RMPOOR RMTNUOUR RMTOUR", "JZRIRK RNRP RSRU RYQ\\ RYS\\ Q\\S\\ RGQIPJ RGSITJ PJRITJ RKPNNOMN RKTNVOWN NOPORNTOVO RPPSNTLTKRKSLT RPTSVTXTYRYSXT NTPTRSTTVT RUPXOYMZLZKYJWJYLZ RUTXUYWZXZYYZWZYXZ MZOZRYUZWZ", "JZRYQ\\ RYS\\ Q\\S\\ RYUZXZZXZUYTWTYRZOYMWLUMVJUHSGQGOHNJOMMLKMJOKRMTKTJUJXLZOZRY", "JZRYQ\\ RYS\\ Q\\S\\ RYVXVVXUXRZQZLYIXHVHTGPGNHLHKIJLJQLRLUNVNXRY", "I[IPKR LKNP RGRO XKVP [PYR", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "G]PGMHJJHMGPGTHWJZM\\P]T]W\\ZZ\\W]T]P\\MZJWHTGPG", "AcPALBJCGEEGCJBLAPATBXCZE]G_JaLbPcTcXbZa]__]aZbXcTcPbLaJ_G]EZCXBTAPA", "<hP<K=G?DAAD?G=K<P<T=Y?]A`DcGeKgPhThYg]e`cc`e]gYhThPgKeGcD`A]?Y=T<P<", "){O)I*E+@-;073370;-@+E*I)O)U*[+_-d0i3m7q;t@wEyIzO{U{[z_ydwitmqqmtiwdy_z[{U{OzIyEw@t;q7m3i0d-_+[*U)O)", ">fRAPCMDJDGCEA>H@JAMAZB]D_G`M`PaRc RATCWDZD]C_AfHdJcMcZb]`_]`W`TaRc", "AcRAPCMDJDGCEABGAKAPBTDXG\\L`Rc RATCWDZD]C_AbGcKcPbT`X]\\X`Rc BHbH", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[ LbXF", "KYRKMX RNVX RKWX OTTT KXPX TXYX", "JZNKNX OKOX LKSKVLWNVPSQ SKULVNUPSQ OQSQVRWTWUVWSXLX SQURVTVUUWSX", "KYVLWKWOVLTKQKOLNMMPMSNVOWQXTXVWWU QKOMNPNSOVQX", "JZNKNX OKOX LKSKVLWMXPXSWVVWSXLX SKULVMWPWSVVUWSX", "JYNKNX OKOX SOSS LKVKVOUK OQSQ LXVXVTUX", "JXNKNX OKOX SOSS LKVKVOUK OQSQ LXQX", "K[VLWKWOVLTKQKOLNMMPMSNVOWQXTXVW QKOMNPNSOVQX TXUWVU VSVX WSWX TSYS", "J[NKNX OKOX VKVX WKWX LKQK TKYK OQVQ LXQX TXYX", "NWRKRX SKSX PKUK PXUX", "LXSKSURWQX TKTUSWQXPXNWMUNTOUNV QKVK", "JZNKNX OKOX WKOS QQVX RQWX LKQK TKYK LXQX TXYX", "KXOKOX PKPX MKRK MXWXWTVX", "I\\MKMX NNRX NKRU WKRX WKWX XKXX KKNK WKZK KXOX UXZX", "JZNKNX OMVX OKVV VKVX LKOK TKXK LXPX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK PWPUQTSTTUUZV[W[XZ TUUXVZW[", "JZNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX SRTSUWVXWXXW SRUSVWWX", "KZVMWKWOVMULSKQKOLNMNOOPQQTRVSWT NNOOQPTQVRWSWVVWTXRXPWOVNTNXOV", "KZRKRX SKSX NKMOMKXKXOWK PXUX", "J[NKNUOWQXTXVWWUWK OKOUPWQX LKQK UKYK", "KYMKRX NKRU WKRX KKPK TKYK", "I[LKOX MKOT RKOX RKUX SKUT XKUX JKOK VKZK", "KZNKVX OKWX WKNX LKQK TKYK LXQX TXYX", "LYNKRRRX OKSR WKSRSX LKQK TKYK PXUX", "LYVKNX WKOX OKNONKWK NXWXWTVX", "KXOKOX PKPX MKWKWOVK MXRX", "KYRKLX RMWX RKXX MWVW LXXX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK QOQT TOTT QQTQ QRTR", "KYRKMX RNVX RKWX KXPX TXYX", "JZMJLM XJWM PPOS UPTS MVLY XVWY MKWK MLWL PQTQ PRTR MWWW MXWX", "J[NKNX OKOX VKVX WKWX LKYK LXQX TXYX", "K[MKRQ NKSQMX MKWKXOVK NWWW MXWXXTVX", "KZMONLOKPKQLRORX XOWLVKUKTLSOSX MONMOLPLQMRO XOWMVLULTMSO PXUX", "KZRKRX SKSX QNNOMQMRNTQUTUWTXRXQWOTNQN QNOONQNROTQU TUVTWRWQVOTN PKUK PXUX", "J[RKRX SKSX LPMONOOSQU TUVSWOXOYP MONROTQUTUVTWRXO PKUK PXUX", "KZMVNXQXMRMONMOLQKTKVLWMXOXRTXWXXV OUNRNOOMQK TKVMWOWRVU NWPW UWWW", "KYTKKX SMTX TKUX NTTT IXNX RXWX", "JYPKLX QKMX NKUKWLWNVPSQ UKVLVNUPSQ OQRQTRUSUUTWQXJX RQTSTUSWQX", "KXVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUU RKPMOONRNVPX", "JYPKLX QKMX NKTKVLWNWQVTUVTWQXJX TKULVNVQUTTVSWQX", "JYPKLX QKMX SORS NKXKWNWK OQRQ JXTXUUSX", "JXPKLX QKMX SORS NKXKWNWK OQRQ JXOX", "KYVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUVVS RKPMOONRNVPX RXTVUS SSXS", "J[PKLX QKMX XKTX YKUX NKSK VK[K OQVQ JXOX RXWX", "NWTKPX UKQX RKWK NXSX", "LXUKRUQWPX VKSURWPXOXMWLUMTNUMV SKXK", "JZPKLX QKMX YKOR RPTX SPUX NKSK VK[K JXOX RXWX", "KXQKMX RKNX OKTK KXUXVUTX", "I\\OKKX OMPX PKQV YKPX YKUX ZKVX MKPK YK\\K IXMX SXXX", "JZPKLX PKTX QKTU XKTX NKQK VKZK JXNX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK", "JYPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR JXOX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK OWOVPUQURVRZS[T[UZ RVSZT[", "JZPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR SRTWUXVXWW SRTSUWVX JXOX", "KZWLXLYKXNWLUKRKPLOMOOPPUSVT ONPOURVSVVUWSXPXNWMULXMWNW", "KZTKPX UKQX PKNNOKZKYNYK NXSX", "J[PKMUMWOXSXUWVUYK QKNUNWOX NKSK WK[K", "KYOKPX PKQV YKPX MKRK VK[K", "I[NKMX OKNV TKMX TKSX UKTV ZKSX LKQK XK\\K", "KZPKTX QKUX YKLX NKSK VK[K JXOX RXWX", "LYPKRQPX QKSQ YKSQQX NKSK VK[K NXSX", "LYXKLX YKMX QKONPKYK LXUXVUTX", "KZMHX\\", "JZRMLW RMXW", "LZQOPPPQOQOPQOTOVQVWWXXX TOUQUWWX URRSPTOUOWPXSXTWUU RSPUPWQX", "JYNKNX OKOX ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LKOK", "LXVQUQURVRVQUPSOQOOPNRNUOWQXSXUWVV QOPPOROUPWQX", "L[VKVX WKWX VRUPSOQOOPNRNUOWQXSXUWVU QOPPOROUPWQX TKWK VXYX", "LXOSVSVRUPSOQOOPNRNUOWQXSXUWVV USUQSO QOPPOROUPWQX", "LWTKULUMVMVLTKRKPMPX RKQMQX NOSO NXSX", "LYQOOQOSQUSUUSUQSOQO QOPQPSQU SUTSTQSO TPUOVO PTOUOXPYTYVZ OWPXTXVYV[T\\P\\N[NYPX", "J[NKNX OKOX ORPPROTOVPWRWX TOUPVRVX LKOK LXQX TXYX", "NWRKRLSLSKRK RORX SOSX POSO PXUX", "NWSKSLTLTKSK SOSZR\\ TOTZR\\P\\O[OZPZP[O[ QOTO", "JZNKNX OKOX WOOU RSVX SSWX LKOK TOYO LXQX TXYX", "NWRKRX SKSX PKSK PXUX", "F_JOJX KOKX KRLPNOPORPSRSX POQPRRRX SRTPVOXOZP[R[X XOYPZRZX HOKO HXMX PXUX XX]X", "J[NONX OOOX ORPPROTOVPWRWX TOUPVRVX LOOO LXQX TXYX", "LYQOOPNRNUOWQXTXVWWUWRVPTOQO QOPPOROUPWQX TXUWVUVRUPTO", "JYNON\\ OOO\\ ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LOOO L\\Q\\", "KYUOU\\ VOV\\ URTPROPONPMRMUNWPXRXTWUU POOPNRNUOWPX S\\X\\", "KXOOOX POPX PRQPSOUOVPVQUQUPVP MOPO MXRX", "LYTOUPUQVQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWOVPVPWQX", "LWPKPVRXTXUWUV QKQVRX NOTO", "J[NONUOWQXSXUWVU OOOUPWQX VOVX WOWX LOOO TOWO VXYX", "KYNORX OORV VORX LOQO TOXO", "I[LOOX MOOU ROOX ROUX SOUU XOUX JOOO VOZO", "KYNOUX OOVX VONX LOQO TOXO LXPX SXXX", "KYNORX OORV VORXP[N\\M\\L[LZMZM[L[ LOQO TOXO", "LXUONX VOOX OONQNOVO NXVXVVUX", "K[QOOPNQMSMUNWPXQXSWUUWRXO QOOQNSNUOWPX QOSOUPWWXX SOTPVWXXYX", "KXRKPMOOMUK\\ QLPNNTL\\ RKTKVLVNUPRQ TKULUNTPRQ RQTRUTUVTWRXQXOWNT RQSRTTTVRX", "KYLQNOPORPSSSXR\\ LQNPPPRQSS WOVRSXQ\\", "KYSOQOOPNQMSMUNWPXRXTWUVVTVRUPRNQLQKRJTJUKVM QOOQNSNVPX RXTVUTUQSO QLRKTKVM", "LXVPTOQOOPOQPRRS QOPPPQRS RSOTNUNWPXSXUW RSPTOUOWPX", "LWRKQLQMSNVNVMSNPOOPNRNTOVPWRXSYS[R\\P\\O[ SNQOPPOROTPVRX", "IYJRKPLONOOPOQMX MONPNQLX OQPPROTOVPVRS\\ TOUPURR\\", "IYJSKQLPNPOQOVPX MPNQNUOWPXQXSWTVUTVQVNULTKRKQLQNRPURWS QXSVTTUQUNTK", "NWROPVPWQXSXUWVU SOQVQWRX", "KYOOLX POMX UOVPWPVOTORQOR ORPSRWTXVWWU ORQSSWTX", "LXLKNKPLWX NKOLVX RPMX RPNX", "KZOOK\\ POL\\ NUNWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "JYNOMX OONUMX VRVOWOVRTUQWNXMX LOOO", "MXRKQLQMSNVN TNQOPPPRRSUS TNROQPQRRS SSPTOUOWQXSYTZT[S\\Q\\ SSQTPUPWQX", "KXQOOPNQMSMUNWPXRXTWUVVTVRUPSOQO QOOQNSNVPX RXTVUTUQSO", "IZPPMX PPNX TPSX TPTX KQMOXO KQMPXP", "JXSOQOOPNQMSJ\\ QOOQNSK\\ SOUPVRVTUVTWRXPXNWMU SOUQUTTVRX", "K[YOQOOPNQMSMUNWPXRXTWUVVTVRUPYP QOOQNSNVPX RXTVUTUQSO", "KZSPQX SPRX MQOOXO MQOPXP", "JXKRLPMOOOPPPROUOWPX NOOPORNUNWPXQXSWUUVRVOUOVP", "KZOPNQMSMUNWPXRXUWWUXRXPWOUOTPSRRUO\\ MUNVPWRWUVWTXR XQWPUPSR RUQXP\\", "KXMONOPPS[T\\ NOOPR[T\\U\\ VOTRNYL\\", "I[TKQ\\ UKP\\ JRKPLONOOPOVPWSWUVWT MONPNTOWPXSXUWWTXRYO", "JZNPPPPONPMQLSLUMWNXPXQWRUSR LUNWPWRU RRRWSXUXWVXTXRWPVOVPWP RUSWUWWV", "KZVOTVTWUXWXXWYU WOUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "JXOKMR PKNRNVPX NROPQOSOUPVRVTUVTWRXPXNWMUMR SOUQUTTVRX MKPK", "KXUPUQVQUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "KZWKTVTWUXWXXWYU XKUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX UKXK", "KWNURTTSURUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "MXWKXLXKVKTLSNPYO[N\\ VKULTNQYP[N\\L\\L[M\\ POVO", "KYVOTVSYR[ WOUVTYR[P\\M\\L[M[N\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "KZPKLX QKMX OQPPROTOVPVRUUUWVX TOUPURTUTWUXWXXWYU NKQK", "MWSKSLTLTKSK NROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "MWTKTLULUKTK ORPPQOSOTPTRRYQ[O\\M\\M[N\\ ROSPSRQYP[O\\", "KXPKLX QKMX VPUQVQVPUOTORQPROR ORPSQWRXTXUWVU ORQSRWSX NKQK", "NVSKPVPWQXSXTWUU TKQVQWRX QKTK", "F^GRHPIOKOLPLQJX JOKPKQIX LQMPOOQOSPSQQX QORPRQPX SQTPVOXOZPZRYUYWZX XOYPYRXUXWYX[X\\W]U", "J[KRLPMOOOPPPQNX NOOPOQMX PQQPSOUOWPWRVUVWWX UOVPVRUUUWVXXXYWZU", "JYKRLPMOOOPPPQM\\ NOOPOQL\\ PQROTOVPWRWTVVUWSXQXOVOT TOVQVTUVSX J\\O\\", "KYVOR\\ WOS\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX P\\U\\", "LXMRNPOOQORPRQPX POQPQQOX RQSPUOVOWPWQVQWP", "LYVPVQWQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWNVOVOW", "NWSKPVPWQXSXTWUU TKQVQWRX POUO", "IZJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "H\\IRJPKOMONPNRMUMWNX LOMPMRLULWNXOXQWRV TORVRWTX UOSVSWTXUXWWYUZRZOYOZP", "JZMRNPPOROSPSR QORPRRQUPWNXMXLWLVMVLW XPWQXQXPWOVOTPSRRURWSX QUQWRXTXVWWU", "IYJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVSYR[ WOUVTYR[P\\M\\L[M[N\\", "KYWOWPVQNVMWMX NQOOROUQ OPRPUQVQ NVOVRWUW OVRXUXVV", "H[RKSLSMTMTLRKOKMLLNLX OKNLMNMX XKYLYMZMZLXKVKTMTX VKUMUX JOWO JXOX RXWX", "J[UKVLWLWKQKOLNNNX QKPLONOX VOVX WOWX LOWO LXQX TXYX", "J[WKQKOLNNNX QKPLONOX UKVLVX WKWX LOVO LXQX TXYX", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX YKZL[L[KUKSLRNRX UKTLSNSX ZOZX [O[X HO[O HXMX PXUX XX]X", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX [KUKSLRNRX UKTLSNSX YKZLZX [K[X HOZO HXMX PXUX XX]X", "NWRORX SOSX POSO PXUX", "LXVPTOROPPOQNSNUOWQXSXUW ROPQOSOVQX OSSS", "LYSKQLPMOONRNUOWPXRXTWUVVTWQWNVLUKSK SKQMPOOSOVPX RXTVUTVPVMUK OQVQ", "KZTKQ\\ UKP\\ QONPMRMUNWQXTXWWXUXRWPTOQO QOOPNRNUOWQX TXVWWUWRVPTO", "LXUPVRVQUPSOQOOPNRNTOVRX QOOQOTPVRXSYS[R\\P\\", "I[VKWLXLVKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ ZK[L[KYKWLVNSYR[Q\\ YKXLWNTYS[Q\\O\\O[P\\ LOYO", "IZVKWLXLXKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ VOTVTWUXWXXWYU WOUVUWVX LOWO", "IZVKWL XKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ WKTVTWUXWXXWYU XKUVUWVX LOVO", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L\\L\\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ ZOXVXWYX[X\\W]U [OYVYWZX IO[O", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L \\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ [KXVXWYX[X\\W]U \\KYVYWZX IOZO", "MWNROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "LYQKOLNONTOWQXTXVWWTWOVLTKQK QKPLOOOTPWQX TXUWVTVOULTK", "LYPNSKSX RLRX OXVX", "LYOMONNNNMOLQKTKVLWNVPTQQROSNUNX TKULVNUPTQ NWOVPVSWVWWV PVSXVXWVWU", "LYOMONNNNMOLQKTKVLWNVPTQ TKULVNUPTQ RQTQVRWTWUVWTXQXOWNVNUOUOV TQURVTVUUWTX", "LYSMSX TKTX TKMTXT QXVX", "LYOKNQ OKVK OLSLVK NQOPQOTOVPWRWUVWTXQXOWNVNUOUOV TOUPVRVUUWTX", "LYVMVNWNWMVLTKRKPLOMNPNUOWQXTXVWWUWSVQTPQPNR RKPMOPOUPWQX TXUWVUVSUQTP", "LYNKNO VMRTPX WKTQQX NMPKRKUM NMPLRLUMVM", "LYQKOLNNOPQQTQVPWNVLTKQK QKPLONPPQQ TQUPVNULTK QQORNTNUOWQXTXVWWUWTVRTQ QQPROTOUPWQX TXUWVUVTURTQ", "LYOVOUNUNVOWQXSXUWVVWSWNVLTKQKOLNNNPORQSTSWQ SXUVVSVNULTK QKPLONOPPRQS", "NVRVQWRXSWRV", "NVSWRXQWRVSWSYQ[", "NVROQPRQSPRO RVQWRXSWRV", "NVROQPRQSPRO SWRXQWRVSWSYQ[", "NVRKQLRSSLRK RLRO RVQWRXSWRV", "LYNNONOONONNOLQKTKVLWNWOVQSRRSRTST TKVMVPUQSR RWRXSXSWRW", "OVRKRP SKRP", "LXOKOP PKOP UKUP VKUP", "MWQKPLPNQOSOTNTLSKQK", "MWRJRP OKUO UKOO", "KZXHM\\", "MWUHSJQMPPPTQWSZU\\ SJRLQPQTRXSZ", "MWOHQJSMTPTTSWQZO\\ QJRLSPSTRXQZ", "MWPHP\\ QHQ\\ PHUH P\\U\\", "MWSHS\\ THT\\ OHTH O\\T\\", "LWSHRIQKQMRORPPRRTRUQWQYR[S\\ RIQM QKRO RUQY QWR[", "MXQHRISKSMRORPTRRTRUSWSYR[Q\\ RISM SKRO RUSY SWR[", "MWTHPRT\\", "MWPHTRP\\", "OURHR\\", "MWPHP\\ THT\\", "I[LRXR", "I[RLRX LRXR", "JZRMRX MRWR MXWX", "JZRMRX MMWM MRWR", "JZMMWW WMMW", "NVRQQRRSSRRQ", "I[RLQMRNSMRL LRXR RVQWRXSWRV", "I[LPXP LTXT", "I[WLMX LPXP LTXT", "I[LNXN LRXR LVXV", "JZWLMRWX", "JZMLWRMX", "JZWKMOWS MTWT MXWX", "JZMKWOMS MTWT MXWX", "H[YUWUUTTSRPQOONNNLOKQKRLTNUOUQTRSTPUOWNYN", "JZLTLRMPOPUSWSXR LRMQOQUTWTXRXP", "JZMSRPWS MSRQWS", "NVSKPO SKTLPO", "NVQKTO QKPLTO", "LXNKOMQNSNUMVK NKONQOSOUNVK", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "JZWMQMONNOMQMSNUOVQWWW MRUR", "I[TOUPXRUTTU UPWRUT LRWR", "MWRMRX OPPORLTOUP PORMTO", "I[POOPLROTPU OPMROT MRXR", "MWRLRW OTPURXTUUT PURWTU", "KYVSUPSOQOOPNQMSMUNWPXRXTWUVVTWQWNVLTKQKPLQLRK QOOQNSNVPX RXTVUTVQVNULTK", "JZLKRX MKRV XKRX LKXK NLWL", "G[IOLORW KORX [FRX", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[ QNOONQNSOUQVSVUUVSVQUOSNQN", "H\\ZRYTWUVUTTSSQPPONNMNKOJQJRKTMUNUPTQSSPTOVNWNYOZQZR", "JZXKLX OKPLPNOOMOLNLLMKOKSLVLXK UTTUTWUXWXXWXUWTUT", "J[YPXPXQYQYPXOWOVPUTTVSWQXOXMWLVLTMSORRPSNSLRKPKOLONPQUWWXXXYW OXMVMTOR ONPPVWWX", "J[UPSOQOPQPRQTSTUS UOUSVTXTYRYQXNVLSKRKOLMNLQLRMUOWRXSXVW", "KZQHQ\\ THT\\ WLVLVMWMWLUKPKNLNNOPVSWT NNOOVRWTWVVWTXQXOWNVNUOUOVNV", "KYPKP[ TKT[ MQWQ MUWU", "LXTLSLSMTMTLSKQKPLPNQPTRUS PNQOTQUSUUSW QPOROTPVSXTY OTPUSWTYT[S\\Q\\P[PZQZQ[P[", "LXRKQLRMSLRK RMRQ RQQSRVSSRQ RVR\\ POONNOOPPOTOUNVOUPTO", "LXRMSLRKQLRMRQQRSURV RQSRQURVRZQ[R\\S[RZ POONNOOPPOTOUNVOUPTO PXOWNXOYPXTXUWVXUYTX", "LYVKVX NKVK QQVQ NXVX", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RQQRRSSRRQ", "LYQKPLPMQN TKULUMTN RNPOOQORPTRUSUUTVRVQUOSNRN RURY SUSY OWVW", "LYRKPLONOOPQRRSRUQVOVNULSKRK RRRX SRSX OUVU", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RKRY KRYR", "JYRRPQOQMRLTLUMWOXPXRWSUSTRR WMRR RMWMWR RMVNWR", "JZLLMKOKQLRNRPQRPSNT OKPLQNQQPS VKUX WKTX NTXT", "JYNKNU OKNR NROPQOSOUPVQVTTVTXUYVYWX SOUQUTTV LKOK", "LYONRKRQ VNSKSQ RQPROTOUPWRXSXUWVUVTURSQ RTRUSUSTRT", "JZRKRY MKMPNRPSTSVRWPWK LMMKNM QMRKSM VMWKXM OVUV", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXVXVUUX", "LYWKTKQLONNQNSOVQXTYWY WKTLRNQQQSRVTXWY", "JZRRPQOQMRLTLUMWOXPXRWSUSTRR SLQQ WMRR XQSS", "KYPMTW TMPW MPWT WPMT", "J[OUMULVLXMYOYPXPVNTMRMONMOLQKTKVLWMXOXRWTUVUXVYXYYXYVXUVU NMPLULWM", "J[OOMOLNLLMKOKPLPNNPMRMUNWOXQYTYVXWWXUXRWPUNULVKXKYLYNXOVO NWPXUXWW", "F^KHK\\ LHL\\ XHX\\ YHY\\ HH\\H H\\O\\ U\\\\\\", "H]KHRQJ\\ JHQQ JHYHZMXH K[X[ J\\Y\\ZWX\\", "KYVBTDRGPKOPOTPYR]T`Vb TDRHQKPPPTQYR\\T`", "KYNBPDRGTKUPUTTYR]P`Nb PDRHSKTPTTSYR\\P`", "KYOBOb PBPb OBVB ObVb", "KYTBTb UBUb NBUB NbUb", "JYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb RDQGQKRN RVQYQ]R`", "KZPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb RDSGSKRN RVSYS]R`", "KYU@RCPFOIOLPOSVTYT\\S_Ra RCQEPHPKQNTUUXU[T^RaOd", "KYO@RCTFUIULTOQVPYP\\Q_Ra RCSETHTKSNPUOXO[P^RaUd", "AXCRGRR` GSRa FSRb X:Rb", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia", "H\\RFK[ RFY[ RIX[ MUVU I[O[ U[[[", "G]LFL[ MFM[ IFUFXGYHZJZLYNXOUP UFWGXHYJYLXNWOUP MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "G\\XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXXYV QFOGMILKKNKSLVMXOZQ[", "G]LFL[ MFM[ IFSFVGXIYKZNZSYVXXVZS[I[ SFUGWIXKYNYSXVWXUZS[", "G\\LFL[ MFM[ SLST IFYFYLXF MPSP I[Y[YUX[", "G[LFL[ MFM[ SLST IFYFYLXF MPSP I[P[", "G^XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXX QFOGMILKKNKSLVMXOZQ[ XSX[ YSY[ US\\S", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F LPXP H[O[ U[\\[", "MXRFR[ SFS[ OFVF O[V[", "KZUFUWTZR[P[NZMXMVNUOVNW TFTWSZR[ QFXF", "F\\KFK[ LFL[ YFLS QOY[ POX[ HFOF UF[F H[O[ U[[[", "I[NFN[ OFO[ KFRF K[Z[ZUY[", "F_KFK[ LFRX KFR[ YFR[ YFY[ ZFZ[ HFLF YF]F H[N[ V[][", "G^LFL[ MFYY MHY[ YFY[ IFMF VF\\F I[O[", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF", "G]LFL[ MFM[ IFUFXGYHZJZMYOXPUQMQ UFWGXHYJYMXOWPUQ I[P[", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF NYNXOVQURUTVUXV_W`Y``NFH[ NFO[ OFPY \\FO[ \\FV[ ]FW[ KFOF \\F`F E[K[ S[Z[", "F_OFI[ OFVX OIV[ \\FV[ LFOF YF_F F[L[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF", "F]OFI[ PFJ[ LFXF[G\\I\\K[NYPUQMQ XFZG[I[KZNXPUQ F[M[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF LYLXMVOUPURVSXS_T`V`W^W] SXT^U_V_W^", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVPMP WFYGZIZKYNXOVP RPTQURVZW[Y[ZYZX URWYXZYZZY F[M[", "G^ZH[H\\F[L[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "H]UFO[ VFP[ OFLLNF]F\\L\\F L[S[", "F_NFKQJUJXKZN[R[UZWXXU\\F OFLQKUKXLZN[ KFRF YF_F", "H\\NFO[ OFPY \\FO[ LFRF XF^F", "E_MFK[ NFLY UFK[ UFS[ VFTY ]FS[ JFQF ZF`F", "G]NFU[ OFV[ \\FH[ LFRF XF^F F[L[ R[X[", "H]NFRPO[ OFSPP[ ]FSP LFRF YF_F L[S[", "G][FH[ \\FI[ OFLLNF\\F H[V[XUU[", "H\\KILKXWYYY[ LLXX KIKKLMXYY[ PPLTKVKXLZK[ KVMZ LTLVMXMZK[ SSXN VIVLWNYNYLWKVI VIWLYN", "H\\QIK[ SIY[ RIX[ MUVU I[O[ U[[[ QBOCNENGOIQJSJUIVGVEUCSBQB", "G]IB[baUbObLaK_K^L\\O[", "G]LFL[ MFM[ MPONRMTMWNXPX[ TMVNWPW[ IFMF I[P[ T[[[", "MXRFQGRHSGRF RMR[ SMS[ OMSM O[V[", "MXSFRGSHTGSF TMT_SaQbObNaN`O_P`Oa SMS_RaQb PMTM", "G\\LFL[ MFM[ WMMW RSX[ QSW[ IFMF TMZM I[P[ T[Z[", "MXRFR[ SFS[ OFSF O[V[", "BcGMG[ HMH[ HPJNMMOMRNSPS[ OMQNRPR[ SPUNXMZM]N^P^[ ZM\\N]P][ DMHM D[K[ O[V[ Z[a[", "G]LML[ MMM[ MPONRMTMWNXPX[ TMVNWPW[ IMMM I[P[ T[[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "G\\LMLb MMMb MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IMMM IbPb", "H\\WMWb XMXb WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ Tb[b", "IZNMN[ OMO[ OSPPRNTMWMXNXOWPVOWN KMOM K[R[", "J[WOXMXQWOVNTMPMNNMOMQNRPSUUWVXW MPNQPRUTWUXVXYWZU[Q[OZNYMWM[NY", "KZPFPWQZS[U[WZXX QFQWRZS[ MMUM", "G]LMLXMZP[R[UZWX MMMXNZP[ WMW[ XMX[ IMMM TMXM W[[[", "I[LMR[ MMRY XMR[ JMPM TMZM", "F^JMN[ KMNX RMN[ RMV[ SMVX ZMV[ GMNM WM]M", "H\\LMW[ MMX[ XML[ JMPM TMZM J[P[ T[Z[", "H[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "I[WML[ XMM[ MMLQLMXM L[X[XWW[", "G^QMNNLPKRJUJXKZN[P[RZUWWTYPZM QMONMPLRKUKXLZN[ QMSMUNVPXXYZZ[ SMTNUPWXXZZ[[[", "G\\TFQGOIMMLPKTJZIb TFRGPINMMPLTKZJb TFVFXGYHYKXMWNTOPO VFXHXKWMVNTO POTPVRWTWWVYUZR[P[NZMYLV POSPURVTVWUYTZR[", "H\\IPKNMMOMQNROSRSVRZOb JOLNPNRO ZMYPXRSYP^Nb YMXPWRSY", "I\\VNTMRMONMQLTLWMYNZP[R[UZWWXTXQWOSJRHRFSEUEWFYH RMPNNQMTMXNZ R[TZVWWTWPVNTKSISGTFVFYH", "I[XPVNTMPMNNNPPRSS PMONOPQRSS SSNTLVLXMZP[S[UZWX SSOTMVMXNZP[", "I[TFRGQHQIRJUKZKZJWKSMPOMRLULWMYP[S]T_TaSbQbPa ULQONRMUMWNYP[", "G]HQIOKMNMONOPNTL[ MMNNNPMTK[ NTPPRNTMVMXNYOYRXWUb VMXOXRWWTb", "F]GQHOJMMMNNNPMUMXNZO[ LMMNMPLULXMZO[Q[SZUXWUXRYMYIXGVFTFRHRJSMUPWRZT SZUWVUWRXMXIWGVF", "LXRMPTOXOZP[S[UYVW SMQTPXPZQ[", "H\\NMJ[ OMK[ XMYNZNYMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW", "H\\KFMFOGPHQJWXXZY[ MFOHPJVXWZY[Z[ RMJ[ RMK[", "F]MMGb NMHb MPLVLYN[P[RZTXVU XMUXUZV[Y[[Y\\W YMVXVZW[", "H\\NML[ OMNSMXL[ YMXQVU ZMYPXRVUTWQYOZL[ KMOM", "IZTFRGQHQIRJUKXK UKQLOMNONQPSSTVT UKRLPMOOOQQSST STOUMVLXLZN\\S^T_TaRbPb STPUNVMXMZO\\S^", "I[RMONMQLTLWMYNZP[R[UZWWXTXQWOVNTMRM RMPNNQMTMXNZ R[TZVWWTWPVN", "G]PNL[ PNM[ VNV[ VNW[ IPKNNM[M IPKONN[N", "H[LVMYNZP[R[UZWWXTXQWOVNTMRMONMQLTHb R[TZVWWTWPVN RMPNNQMTIb", "H][MQMNNLQKTKWLYMZO[Q[TZVWWTWQVOUNSM QMONMQLTLXMZ Q[SZUWVTVPUN UN[N", "H\\SNP[ SNQ[ JPLNOMZM JPLOONZN", "H\\IQJOLMOMPNPPNVNYP[ NMONOPMVMYNZP[Q[TZVXXUYRYOXMWNXOYR XUYO", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb JWLYNZQZTYWWYU ZOXNVNTPRSPYNb", "I[KMMMONPPU_VaWb MMNNOPT_UaWbYb ZMYOWRM]K`Jb", "F]UFOb VFNba XFVHUJTNRWQ[P^O`NaLbJbIaI`J_K`Ja OMYM", "H\\YMU[T^RaObLbJaI`I_J^K_J` XMT[S^QaOb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "H]PFJ[ QFK[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W MFQF", "LYUFTGUHVGUF MQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "LYVFUGVHWGVF NQOOQMTMUNUQR[Q^P`OaMbKbJaJ`K_L`Ka SMTNTQQ[P^O`Mb", "H\\PFJ[ QFK[ XNWOXPYOYNXMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW MFQF", "MYUFQTPXPZQ[T[VYWW VFRTQXQZR[ RFVF", "AbBQCOEMHMINIPHTF[ GMHNHPGTE[ HTJPLNNMPMRNSOSQP[ PMRORQO[ RTTPVNXMZM\\N]O]Q[W[Z\\[ ZM\\O\\QZWZZ[[^[`YaW", "F]GQHOJMMMNNNPMTK[ LMMNMPLTJ[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W", "G\\HQIOKMNMONOPNTJb MMNNNPMTIb NTOQQNSMUMWNXOYQYTXWVZS[Q[OZNWNT WNXPXTWWUZS[ FbMb", "H\\XMRb YMSb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ ObVb", "IZJQKOMMPMQNQPPTN[ OMPNPPOTM[ PTRPTNVMXMYNYOXPWOXN", "J[XOXPYPYOXNUMRMONNONQORVVWW NPOQVUWVWYVZS[P[MZLYLXMXMY", "KYTFPTOXOZP[S[UYVW UFQTPXPZQ[ NMWM", "F]GQHOJMMMNNNQLWLYN[ LMMNMQKWKYLZN[P[RZTXVT XMVTUXUZV[Y[[Y\\W YMWTVXVZW[", "H\\IQJOLMOMPNPQNWNYP[ NMONOQMWMYNZP[Q[TZVXXUYQYMXMYO", "C`DQEOGMJMKNKQIWIYK[ IMJNJQHWHYIZK[M[OZQXRV TMRVRYSZU[W[YZ[X\\V]R]M\\M]O UMSVSYU[", "H\\KQMNOMRMSOSR QMRORRQVPXNZL[K[JZJYKXLYKZ QVQYR[U[WZYW YNXOYPZOZNYMXMVNTPSRRVRYS[", "G\\HQIOKMNMONOQMWMYO[ MMNNNQLWLYMZO[Q[SZUXWT ZMV[U^SaPbMbKaJ`J_K^L_K` YMU[T^RaPb", "H\\YMXOVQNWLYK[ LQMOOMRMVO MOONRNVOXO LYNYRZUZWY NYR[U[WYXW", "G^VGUHVIWHWGUFRFOGMILLL[ RFPGNIMLM[ \\G[H\\I]H]G\\FZFXGWIW[ ZFYGXIX[ IM[M I[P[ T[[[", "G]WGVHWIXHWGUFRFOGMILLL[ RFPGNIMLM[ WMW[ XMX[ IMXM I[P[ T[[[", "G]VGUHVIWHWGUF XFRFOGMILLL[ RFPGNIMLM[ WHW[ XFX[ IMWM I[P[ T[[[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ ]G\\H]I^H]G[FXFUGSIRLR[ XFVGTISLS[ ]M][ ^M^[ DM^M D[K[ O[V[ Z[a[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ \\G[H\\I]H]G[F ^FXFUGSIRLR[ XFVGTISLS[ ]H][ ^F^[ DM]M D[K[ O[V[ Z[a[", "MXRMR[ SMS[ OMSM O[V[", "IZWNUMRMONMPLSLVMYNZQ[T[VZ RMPNNPMSMVNYOZQ[ MTUT", "I\\TFQGOJNLMOLTLXMZO[Q[TZVWWUXRYMYIXGVFTF TFRGPJOLNOMTMXNZO[ Q[SZUWVUWRXMXIWGVF NPWP", "G]UFOb VFNb QMMNKPJSJVKXMZP[S[WZYXZUZRYPWNTMQM QMNNLPKSKVLXNZP[ S[VZXXYUYRXPVNTM", "I[TMVNXPXOWNTMQMNNMOLQLSMUOWSZ QMONNOMQMSNUSZT\\T^S_Q_", "G]LMKNJPJRKUOYP[ JRKTOXP[P]O`MbLbKaJ_J\\KXMTOQRNTMVMYNZPZTYXWZU[T[SZSXTWUXTY VMXNYPYTXXWZ", "E_YGXHYIZHYGWFTFQGOINKMNLRJ[I_Ha TFRGPIOKNNLWK[J^I`HaFbDbCaC`D_E`Da _G^H_I`H`G_F]F[GZHYJXMU[T_Sa ]F[HZJYNWWV[U^T`SaQbObNaN`O_P`Oa IM^M", "F^[GZH[I\\H[GXFUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea YMWTVXVZW[Z[\\Y]W ZMXTWXWZX[ JMZM", "F^YGXHYIZHZGXF \\FUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea [FWTVXVZW[Z[\\Y]W \\FXTWXWZX[ JMYM", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a `G_H`IaH`G]FZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja ^M\\T[X[Z\\[_[aYbW _M]T\\X\\Z][ DM_M", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a ^G]H^I_H_G]F aFZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja `F\\T[X[Z\\[_[aYbW ab", "KYOBVROb", "KYOBOb UBUbbDMIMRY HNR[ b:R[", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "F_\\S[UYVWVUUTTQPPONNLNJOIQISJULVNVPUQTTPUOWNYN[O\\Q\\S", "F^[FI[ NFPHPJOLMMKMIKIIJGLFNFPGSHVHYG[F WTUUTWTYV[X[ZZ[X[VYTWT", "F_[NZO[P\\O\\N[MZMYNXPVUTXRZP[M[JZIXIUJSPORMSKSIRGPFNGMIMKNNPQUXWZZ[[[\\Z\\Y M[KZJXJUKSMQ MKNMVXXZZ[", "E`WNVLTKQKOLNMMPMSNUPVSVUUVS QKOMNPNSOUPV WKVSVUXVZV\\T]Q]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYZX XKWSWUXV", "H\\PBP_ TBT_ XIWJXKYJYIWGTFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[P[MZKXKWLVMWLX", "JZUITJUKVJVIUGSFQFOGNINKOMQOVR OMTPVRWTWVVXTZ PNNPMRMTNVPXU[ NVSYU[V]V_UaSbQbOaN_N^O]P^O_", "JZRFQHRJSHRF RFRb RQQTRbSTRQ LMNNPMNLLM LMXM TMVNXMVLTM", "JZRFQHRJSHRF RFRT RPQRSVRXQVSRRP RTRb R^Q`RbS`R^ LMNNPMNLLM LMXM TMVNXMVLTM L[N\\P[NZL[ L[X[ T[V\\X[VZT[", "I\\XFX[ KFXF PPXP K[X[", "E`QFNGKIILHOHRIUKXNZQ[T[WZZX\\U]R]O\\LZIWGTFQF ROQPQQRRSRTQTPSORO RPRQSQSPRP", "J[PFNGOIQJ PFOGOI UFWGVITJ UFVGVI QJOKNLMNMQNSOTQUTUVTWSXQXNWLVKTJQJ RUR[ SUS[ NXWX", "I\\RFOGMILLLMMPORRSSSVRXPYMYLXIVGSFRF RSR[ SSS[ NWWW", "D`PFMGJIHLGOGSHVJYM[P\\T\\W[ZY\\V]S]O\\LZIWGTFPF RFR\\ GQ]Q", "G`fHfIeIdHcGcFdFfGhIiKiNhPfQdR`RUQ;Q4R/S-U,V,X-Y/Y3X6W8U;P?JCHEFHEJDNDREVGYJ[N\\R\\V[XZZW[T[PZMYKWITHPHMIKKJNJRKUMW GdGeHeHdGd U;Q?LCIFGIFKENERFVGXJ[ R\\U[WZYWZTZPYMXKVITH", "EfNSOUQVSVUUVSVQUOSNQNOONPMSMVNYP[S\\V\\Y[[Y\\W]T]P\\MZJXIUHRHOIMJKLIOHSHXI]KaMcPeTfYf]e`cba KLJNIRIXJ\\L`NbQdUeYe]d_cba POTO OPUP NQVQ NRVR NSVS OTUT PUTU aLaNcNcLaL bLbN aMcM aVaXcXcVaV bVbX aWcW", "D`H@Hd M@Md W@Wd \\@\\d MMWK MNWL MOWM MWWU MXWV MYWW", "H\\PMMNLOKQKSLUMVPWTWWVXUYSYQXOWNTMPM MNLPLSMUNVPW WVXTXQWOVNTM", "JZQCVMRTRU ULQS TITKPRRUUY W\\UYSXQXOYN[N]O_Ra W\\UZSYOYO]P_Ra SXPZN]", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLSY", "IjNQOOQNSNUOVQVSUUSVQVOUNTMQMNNKPISHWH[I^K`NaRaW`[_]]`ZcVfQiMk WHZI]K_N`R`W_[^]\\`YcTgQi POTO OPUP NQVQ NRVR NSVS OTUT PUTU eLeNgNgLeL fLfN eMgM eVeXgXgVeV fVfX eWgW", "D`H>Hf I>If M>Mf QBSBSDQDQAR?T>W>Y?[A\\D\\I[LYNWOUOSNRLQNOQNROSQVRXSVUUWUYV[X\\[\\`[cYeWfTfReQcQ`S`SbQb RBRD QCSC Y?ZA[D[IZLYN RLRNPQNRPSRVRX YVZX[[[`ZcYe R`Rb QaSa", "AcHBHb IBIb [B[b \\B\\b DB`B DbMb Wb`b", "BaGBQPFb FBPP EBPQ EB\\B^I[B Ga\\a Fb\\b^[[b", "I[X+U1R8P=OANFMNMVN^OcPgRlUsXy U1S6Q<P@OFNNNVO^PdQhSnUs", "I[L+O1R8T=UAVFWNWVV^UcTgRlOsLy O1Q6S<T@UFVNVVU^TdShQnOs", "I[M+MRMy N+NRNy M+X+ MyXy", "I[V+VRVy W+WRWy L+W+ LyWy", "H[V+R1P5O:O>PBTJTLSNROMRRUSVTXTZPbOfOjPoRsVy T.R2Q5P:P>QCRF R^QaPfPjQoRrTv", "I\\N+R1T5U:U>TBPJPLQNROWRRUQVPXPZTbUfUjToRsNy P.R2S5T:T>SCRF R^SaTfTjSoRrPv", "I[V.S1Q4O8N=NCOIPMSXT\\UbUgTlSoQs S1Q5P8O=OBPHQLTWU[VaVgUlSpQsNv", "I[N.Q1S4U8V=VCUITMQXP\\ObOgPlQoSs Q1S5T8U=UBTHSLPWO[NaNgOlQpSsVv", "7Z:RARRo @RQo ?RRr Z\"VJRr", "Ca].\\.[/[0\\1]1^0^.],[+Y+W,U.T0S3R:QJQjPsOv \\/\\0]0]/\\/ R:Rj U.T1S:SZRjQqPtOvMxKyIyGxFvFtGsHsItIuHvGv GtGuHuHtGt`RFNOKUIXGZE[C[BZBXCWDXCY RFPMOQNVNZP[ RFQJPOOVOZP[ [FWORXP[ [FYMXQWVWZY[Z[\\Z^X [FZJYOXVXZY[", "G^RFQJOPMULWJZH[F[EZEXFWGXFY RFRKSVT[ RFSKTVT[ `G_H`IaHaG```SaQaO`N_L_ XMX\\W_UaSbPbNaL_ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "H\\LFL[M[ LFMFM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMR[S[ RMSMS[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMRbSb RMSMSb", "H[LFL[M[ LFMFM[ XMWMMW XMMX PTV[X[ QSX[", "CbGMG[H[ GMHMH[ HQKNMMPMRNSQS[ HQKOMNONQORQR[S[ SQVNXM[M]N^Q^[ SQVOXNZN\\O]Q][^[", "H\\LML[M[ LMMMM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM QNOONPMSMUNXOYQZTZVYWXXUXSWPVOTNQN", "H\\LMLbMb LMMMMb MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "H\\WMWbXb WMXMXb WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "KYOMO[P[ OMPMP[ PSQPSNUMXM PSQQSOUNXNXM", "J[XPWNTMQMNNMPNRPSUUWV VUWWWXVZ WYTZQZNY OZNXMX XPWPVN WOTNQNNO ONNPOR NQPRUTWUXWXXWZT[Q[NZMX", "MXRFR[S[ RFSFS[ OMVMVN OMONVN", "H\\LMLWMZO[R[TZWW LMMMMWNYPZRZTYWW WMW[X[ WMXMX[", "JZLMR[ LMMMRY XMWMRY XMR[", "F^IMN[ IMJMNX RMNX RPN[ RPV[ RMVX [MZMVX [MV[", "I[LMW[X[ LMMMX[ XMWML[ XMM[L[", "JZLMR[ LMMMRY XMWMRYNb XMR[ObNb", "I[VNL[ XMNZ LMXM LMLNVN NZXZX[ L[X[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRTXTZV[XZYY[V WRUXUZV[", "LZLVNSPO SFMXMZO[P[RZTXUUURVVWWXWZV TFNXNZO[", "LXTSSTTTTSSRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ ZFTXTZV[XZYY[V [FUXUZV[", "LXOYQXRWSUSSRRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "OXRRUOWLXIXGWFUGTIKdKfLgNfOcPZQ[S[UZVYXV TISNRRO[M`Kd", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "L[LVNSPO SFL[ TFM[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "NVSLRMSNTMSL QROXOZQ[SZTYVV RRPXPZQ[", "NVSLRMSNTMSL QRKd RRO[M`KdJfHgGfGdHaJ_M]Q[TYVV", "LZLVNSPO SFL[ TFM[ URUSVSURTRRTOU OURVSZT[ OUQVRZT[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[", "E^EVGSIRKSKUI[ IRJSJUH[ KUMSORPRRSRUP[ PRQSQUO[ RUTSVRWRYSYUXXXZY[ WRXSXUWXWZY[[Z\\Y^V", "I[IVKSMROSOUM[ MRNSNUL[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "KYRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXVXXWYV PRNTMVMYO[", "L[LVNSPO QLHg RLIg OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "K[UUTSRRPRNSMTLVLXMZO[Q[SZ PRNTMVMYO[ VRPdPfQgSfTcT[V[YY[V WRT[R`Pd", "LZLVNSPRRSRUP[ PRQSQUO[ RUTSVRWRVU VRVUWWXWZV", "NZNVPSQQQSTUUWUYTZR[ QSSUTWTYR[ NZP[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[ PNVN", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRTXTZV[XZYY[V WRUXUZV[", "KZNRMTLWLZN[O[RZTXUUUR ORNTMWMZN[ URVVWWXWZV", "H]LRJTIWIZK[L[NZPX MRKTJWJZK[ RRPXPZR[S[UZWXXUXR SRQXQZR[ XRYVZW[W]V", "JZJVLSNRPRQSQUPXOZM[L[KZKYLYKZ WSVTWTWSVRURSSRUQXQZR[U[XYZV QSRU SSQU PXQZ QXOZ", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "LYLVNSPRRRTSTVSXPZN[ RRSSSVRXPZ N[P\\Q^QaPdNfLgKfKdLaO^R\\VYYV N[O\\P^PaOdNfbJb [B\\BJb", "KYUBSDQGOKNPNTOYQ]S`UbVb UBVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`NbOb NBOBQDSGUKVPVTUYS]Q`Ob", "JZRFQGSQRR RFRR RFSGQQRR MINIVOWO MIWO MIMJWNWO WIVINOMO WIMO WIWJMNMO", "F_JQ[Q[R JQJR[R", "F_RIRZSZ RISISZ JQ[Q[R JQJR[R", "F_JM[M[N JMJN[N JU[U[V JUJV[V", "NWSFRGRM SGRM SFTGRM", "I[NFMGMM NGMM NFOGMM WFVGVM WGVM WFXGVM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF QFNIOMSNVKUGQF SFOGNKQNUMVISF", "F^ZIJRZ[ ZIZJLRZZZ[", "F^JIZRJ[ JIJJXRJZJ[", "G^OFObPb OFPFPb UFUbVb UFVFVb JP[P[Q JPJQ[Q JW[W[X JWJX[X", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[I[ [F\\FI[ YTWTUUTWTYV[X[ZZ[X[VYT NFJGIKMMPJNF LFIIKMOLPHLF YTUUTYX[[XYT WTTWV[ZZ[VWT", "E`b", "KZZBVESHQKOONTNXO]P`Qb VESIQMPPOUOZP_Qb", "JYSBTDUGVLVPUUSYQ\\N_Jb SBTEUJUOTTSWQ[N_", "J[TFTR OIYO YIOO", "NWUFSM VFSM", "I[PFNM QFNM YFWM ZFWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "H]SFLb YFRb LQZQ KWYW", "E_^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FF[ XTVTTUSWSYU[W[YZZXZVXT", "G]LFL[ MFM[ IFYFYLXF MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "F^NFNLMTLXKZJ[ XFX[ YFY[ KF\\F G[\\[ G[Gb H[Gb [[\\b \\[\\b", "CbRFR[ SFS[ OFVF GGHHGIFHFGGFHFIGJIKMLONPWPYOZM[I\\G]F^F_G_H^I]H^G NPLQKSJXIZH[ NPMQLSKXJZI[G[FZEX WPYQZS[X\\Z][ WPXQYSZX[Z\\[^[_Z`X O[V[", "H\\LIKFKLLINGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[O[MZLYKWKVLUMVLW WQXTXWWYVZT[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[ N@N?M?M@NBPCTCVBW@", "F^KFK[ LFL[ HFOF LPSPUOVMWIXGYFZF[G[HZIYHZG SPUQVSWXXZY[ SPTQUSVXWZX[Z[[Z\\X H[O[", "E^MFMLLTKXJZI[H[GZGYHXIYHZ XFX[ YFY[ JF\\F U[\\[", "H]KFRV LFSV ZFSVQYPZN[M[LZLYMXNYMZ IFOF VF\\F", "F_RFR[ SFS[ OFVF PILJJLIOIRJULWPXUXYW[U\\R\\O[LYJUIPI PIMJKLJOJRKUMWPX UXXWZU[R[OZLXJUI O[V[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F H[\\[ [[\\b \\[\\b", "F]KFKQLSOTRTUSWQ LFLQMSOT WFW[ XFX[ HFOF TF[F T[[[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[ `[ab a[ab", "F`PFP[ QFQ[ IFHLHFTF QPXP[Q\\R]T]W\\Y[ZX[M[ XPZQ[R\\T\\W[YZZX[", "CaHFH[ IFI[ EFLF IPPPSQTRUTUWTYSZP[E[ PPRQSRTTTWSYRZP[ [F[[ \\F\\[ XF_F X[_[", "H]MFM[ NFN[ JFQF NPUPXQYRZTZWYYXZU[J[ UPWQXRYTYWXYWZU[", "H]LIKFKLLINGQFSFVGXIYKZNZSYVXXVZS[P[MZLYKWKVLUMVLW SFUGWIXKYNYSXVWXUZS[ PPYP", "CbHFH[ IFI[ EFLF E[L[ VFSGQIPKOOORPVQXSZV[X[[Z]X^V_R_O^K]I[GXFVF VFTGRIQKPOPRQVRXTZV[ X[ZZ\\X]V^R^O]K\\IZGXF IPOP", "G]WFW[ XFX[ [FOFLGKHJJJLKNLOOPWP OFMGLHKJKLLNMOOP RPPQORLYKZJZIY PQOSMZL[J[IYIX T[[[", "H\\XFWGQINKLNKQKULXNZQ[S[VZXXYUYSXPVNSMQMNNLPKS XFWHUIQJNLLN QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "H\\MMM[ NMN[ JMUMXNYPYQXSUT UMWNXPXQWSUT NTUTXUYWYXXZU[J[ UTWUXWXXWZU[", "HZMMM[ NMN[ JMXMXRWM J[Q[", "F]NMNQMWLZK[ WMW[ XMX[ KM[M I[H`H[[[[`Z[", "E`aLbKbJaK`La JMPM TMZM", "H]RFRb SFSb OFSF RPQNPMNMLNKQKWLZN[P[QZRX NMMNLQLWMZN[ WMXNYQYWXZW[ SPTNUMWMYNZQZWYZW[U[TZSX ObVb", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[[[[`Z[", "G]LMLTMVPWRWUVWT MMMTNVPW WMW[ XMX[ IMPM TM[M T[[[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[``_[", "H]QMQ[ RMR[ LMKRKMUM RTVTYUZWZXYZV[N[ VTXUYWYXXZV[", "E_JMJ[ KMK[ GMNM KTOTRUSWSXRZO[G[ OTQURWRXQZO[ YMY[ ZMZ[ VM]M V[][", "J[OMO[ PMP[ LMSM PTTTWUXWXXWZT[L[ TTVUWWWXVZT[", "I\\MOLMLQMONNPMSMVNXPYSYUXXVZS[P[NZLXLWMVNWMX SMUNWPXSXUWXUZS[ RTXT", "Da`Y`Z^Z\\ V\\W^X_Y_ UXW]X^Y^Z]", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUPNP XHYJYLXN UFWGXIXMWOUP RPTQUSWYX[Z[[Y[W WWXYYZZZ TQURXXYYZY[X I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "H\\XIYFYLXIVGSFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[Q[NZLXKUK[LX", "H\\JFJL QFQ[ RGRZ SFS[ ZFZL JFZF N[V[ KFJL LFJI MFJH OFJG UFZG WFZH XFZI YFZL QZO[ QYP[ SYT[ SZU[", "F^KFKULXNZQ[S[VZXXYUYG LGLVMX MFMVNYOZQ[ HFPF VF\\F IFKG JFKH NFMH OFMG WFYG [FYG", "H\\KFR[ LFRXR[ MFSX YGR[ IFPF UF[F JFLH NFMH OFMG WFYG ZFYG", "F^JFN[ KFNVN[ LFOV RFOVN[ RFV[ SFVVV[ TFWV ZGWVV[ GFOF RFTF WF]F HFKG IFKH MFLH NFLG XFZG \\FZG", "H\\KFW[ LFX[ MFY[ XGLZ IFPF UF[F I[O[ T[[[ JFMH NFMH OFMG VFXG ZFXG LZJ[ LZN[ WZU[ WYV[ WYZ[", "G]JFQQQ[ KFRQRZ LFSQS[ YGSQ HFOF VF\\F N[V[ IFKG NFLG WFYG [FYG QZO[ QYP[ SYT[ SZU[", "H\\YFKFKL WFK[ XFL[ YFM[ K[Y[YU LFKL MFKI NFKH PFKG T[YZ V[YY W[YX X[YU", "I[NFN[ OGOZ PFP[ KFZFZL K[S[ LFNG MFNH QFPH RFPG UFZG WFZH XFZI YFZL NYM[ NZL[ PYQ[ PZR[", "H\\RFJ[ QIX[ RIY[ RFZ[ KYXY KZXZ J[Z[", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF OMOT UMUT OPUP OQUQ ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS", "H\\RFKZ QIW[ RIX[ RFY[ I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "G]JEJL ZEZL OMOT UMUT JUJ\\ ZUZ\\ JGZG JHZH JIZI OPUP OQUQ JXZX JYZY JZZZ JFMH ZFWH KIJK LIJJ XIZJ YIZK ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS JVKX JWLX ZWXX ZVYX MYJ[ WYZ[", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HF\\F H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "G]IFPPQQ JFQP KFRPI[ IFYFZLYIWF VFYH TFYG KYYY JZYZ I[Y[ZUYXWY", "H\\JMKILGMFOFPGQIRM LHMGOGPH JMKJMHOHPIQMQ[ RMR[ ZMYJWHUHTISMS[ XHWGUGTH ZMYIXGWFUFTGSIRM N[V[ QYP[ QZO[ SZU[ SYT[", "G]QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ OKLLKMJOJRKTLUOVUVXUYTZRZOYMXLUKOK LMKOKRLT XTYRYOXM OKMLLOLRMUOV UVWUXRXOWLUK", "F^QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ HMIMJNKQLSMTPUTUWTXSYQZN[M\\M LRKNJLILKN HMIKJKKLLPMSNTPU YN[LZLYNXR TUVTWSXPYLZK[K\\M", "G]NYKYJWK[O[MVKRJOJLKIMGPFTFWGYIZLZOYRWVU[Y[ZWYYVY LSKOKLLI XIYLYOXS O[MULPLKMHNGPF TFVGWHXKXPWUU[ KZNZ VZYZ", "H\\UFIZ SJT[ THUZ UFUHVYV[ LUTU F[L[ Q[X[ IZG[ IZK[ TZR[ TYS[ VYW[", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVP YGZIZKYNXO WFXGYIYKXNVP NPVPXQYSYUXXVZR[F[ WQXSXUWXUZ VPWRWUVXTZR[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV QHOJNLMOLSLWMY TFRGPJOLNOMSMXNZP[", "F]OFI[ PFJ[ QFK[ LFUFXGYHZKZOYSWWUYSZO[F[ WGXHYKYOXSVWTY UFWHXKXOWSUWRZO[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "F]OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[U[WV MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[ P[UZ R[UY UYWV", "F\\OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[N[ MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT QHOJNLMOLSLWMY VXWWXT TFRGPJOLNOMSMXNZP[ R[TZVWWT TT\\T UTWU VTWW ZTXV [TXU", "E_NFH[ OFI[ PFJ[ ZFT[ [FU[ \\FV[ KFSF WF_F LPXP E[M[ Q[Y[ LFOG MFNH QFOH RFOG XF[G YFZH ]F[H ^F[G IZF[ IYG[ JYK[ IZL[ UZR[ UYS[ VYW[ UZX[", "KYTFN[ UFO[ VFP[ QFYF K[S[ RFUG SFTH WFUH XFUG OZL[ OYM[ PYQ[ OZR[", "I\\WFRWQYO[ XFTSSVRX YFUSSXQZO[M[KZJXJVKULUMVMWLXKX KVKWLWLVKV TF\\F UFXG VFWH ZFXH [FXG", "F]OFI[ PFJ[ QFK[ \\GMR QOU[ ROV[ SNWZ LFTF YF_F F[N[ R[Y[ MFPG NFOH RFPH SFPG ZF\\G ^F\\G JZG[ JYH[ KYL[ JZM[ UZS[ UYT[ VYX[", "H\\QFK[ RFL[ SFM[ NFVF H[W[YU OFRG PFQH TFRH UFRG LZI[ LYJ[ MYN[ LZO[ R[WZ T[XX V[YU", "D`MFGZ MGNYN[ NFOY OFPX [FPXN[ [FU[ \\FV[ ]FW[ JFOF [F``V``aUbObLaK_K^L\\O[ ObMaL_L^M\\O[", "G^LFL[ MGMZ IFNFN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JFLG KFLH LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "LXQFQHSHSFQF RFRH QGSG QMQ[ RNRZ NMSMS[ N[V[ OMQN PMQO QZO[ QYP[ SYT[ SZU[", "KXRFRHTHTFRF SFSH RGTG RMR^QaPb SNS]R` OMTMT]S`RaPbMbLaL_N_NaMaM` PMRN QMRO", "G]LFL[ MGMZ IFNFN[ WNNW RSY[ RTX[ QTW[ TM[M I[Q[ T[[[ JFLG KFLH UMWN ZMWN LZJ[ LYK[ NYO[ NZP[ WYU[ VYZ[", "LXQFQ[ RGRZ NFSFS[ N[V[ OFQG PFQH QZO[ QYP[ SYT[ SZU[", "AcFMF[ GNGZ CMHMH[ HQIOJNLMOMQNROSRS[ QORRRZ OMPNQQQ[ SQTOUNWMZM\\N]O^R^[ \\O]R]Z ZM[N\\Q\\[ C[K[ N[V[ Y[a[ DMFN EMFO FZD[ FYE[ HYI[ HZJ[ QZO[ QYP[ SYT[ SZU[ \\ZZ[ \\Y[[ ^Y_[ ^Z`[", "G^LML[ MNMZ IMNMN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JMLN KMLO LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM MPLRLVMX WXXVXRWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNSM", "G\\LMLb MNMa IMNMNb NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ IbQb JMLN KMLO LaJb L`Kb N`Ob NaPb", "H\\VNVb WOWa UNWNXMXb VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ Sb[b VaTb V`Ub X`Yb XaZbaLbJbIaI_K_KaJaJ` JMQM TMZM KMNO PMNN VMXN YMXN", "I[VML[ WMM[ XMN[ XMLMLQ L[X[XW MMLQ NMLP OMLO QMLN S[XZ U[XY V[XX W[XW", "G^[MZQYTWXUZR[P[MZKXJUJSKPMNPMRMUNVOWQYXZZ[[\\[ ZMYQXTWVUYTZR[ LXKVKRLP P[NZMYLVLRMONNPM RMTNUOVQXXYZ[[", "G\\QFNGMHLJKNKb NHMJLNLa QFOGNIMNMb QFSFVGWHXJXLWNVOSP PPTPWQXRYTYWXYWZT[Q[OZNYMW VHWJWLVN WRXTXWWY SFUGVIVMUOSP TPVQWSWXVZT[ KbMb", "F\\HRINKMMMONPOQRRYSb IOKNMNOOPP HRIPKOMOOPPQQTRYRa XMWPVRTUSWR[Qb YMWQ ZMYOWRTVSXR[ XMZM QbSb", "H\\SMQMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMPLNKMJMHNGPFSFWH MPLSLUMX WXXUXSWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNOKNJNIOHQGTGWH", "I[SMUNVOWOVNSMQMMNLOLQMRQS SSQSMTKVKXMZP[S[VZXXWXVZ NNMOMQNR MULVLXMY QMONNONQORQS QSNTMVMXNZP[", "I[QHRGRFQFPGPIQJTKXKYKYJXJUKSLPNNPMRLULWMYNZP[S\\U]V_VaUbSbRaR`S`Sa POOPNRMUMWNYOZ UKRMQNOQNTNWOYQ[S\\", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ UMVNWQWb WOXRXa NQOOPNRMUMWNXOYRYb L[N[ WbYb", "F]IMJNKPKTLWMYNZQ[S[VZWYXWYRYOXJVGTFRFPGOIOKPMSOVP[Q JMKNLPLTMWNY VYWWXRXOWJVHTG GPHNIMKMLNMPMTNXOZQ[ S[UZVXWSWNVJUHSGQGOI", "KZNMONPPPXQZS[U[WZXX OMPNQPQXRZ LPMNNMPMQNRPRXSZT[", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ SOUNWNXOXPZPZNXMVMTNQQOTNW XNYOYP PSQSWYYYZX TWWZYZ RTUZV[X[YZZX L[N[", "H\\JGKFMFOGQIXXYZZ[ OHPIWXXY MFNGOIVXXZZ[[[ RMJZJ[K[RM", "G]KMKb LNLa MMMb VMVXWZX[Z[[Z\\X WNWXXZY[ XMXXYZZ[ MXNZP[R[TZUYVW KMMM VMXM KbMb", "G]JMKNLPMTN[ KMLNMPNTOZ HPINJMLMMNNPOTPZ VVWTXQXMYMZNYQXSVVTXQZN[ XRYOYM", "JZPGSFRFPGOHOIPJSKVLWKVJSKPLNMMOMQNRPSSTVUWTVSSTOUMVLXLZM[O\\S]U^V_VaTbRbOaPaRb OMNONQOR NVMXMZN[ VKSKQLPMOOOQQSST VTSTPUOVNXNZP\\S]", "G]IQJOKNMM[M KOMNZN IQJPLO[O OONZM[LZMWOO UOVZW[XZWWUO [M[O OOMZ UOWZ", "G\\QMNNLPKTKb MPLTLa QMONNOMSMb MWNYOZQ[S[VZXXYUYSXPVNSMQM WXXVXRWP S[UZVYWVWRVOUNSM KbMb", "G]PMMNKPJSJUKXMZP[R[UZWXXUXSWPUNRM LPKRKVLX VXWVWRVP PMNNMOLRLVMYNZP[ R[TZUYVVVRUOTNRM RMZO[N[MPM RMZN", "H\\JQKOLNNMZM LONNYN JQKPMOZO ROQZR[SZRO ZMZO RORZ", "G\\JMKNLPLUMXOZQ[S[UZWXXVYRYNXMWMXPXSWWUZ KMLNMPMUNX WMXNXO HPINJMLMMNNPNVOYQ[", "G]RQQNPMNMLNKOJRJUKXMZP[T[WZYXZUZRYOXNVMTMSNRQ LOKRKULX XXYUYRXO NMMNLQLVMYNZP[ T[VZWYXVXQWNVM RQQb RQRa RQSb QbSb", "H\\LMMNNPT_VaXbZb[a NOOPU_V` INJMLMNNPPV_WaXb VSXPYMZMYOVSN\\K`JbKbL_N\\", "F]HNINJPJUKXMZP[T[VZXXYVZRZNYMXMYPYSXWVZ JNKPKULX XMYNYO GPHNIMJMKNLPLVMYNZP[ QFSb RGRa SFQb QFSF QbSb`Kb TJSMRRP[O^ XFVHUJTMSRQZP]O_MaKbIbHaH_J_JaIaI` NMYM", "H]XMT[S^QaOb YMU[S_ XMZMV[T_RaObLbJaI`I^K^K`J`J_ VTVQUNSMQMNNLQKTKVLYMZO[Q[SZTYUWVT NOMQLTLWMY QMOONQMTMWNZO[", "G]OFI[K[ PFJ[ LFQFK[ MTOPQNSMUMWNXPXSVX WNWRVVVZ WPUUUXVZW[Y[[Y\\W MFPG NFOH", "KXTFTHVHVFTF UFUH TGVG LQMOOMQMRNSPSSQX RNRRQVQZ RPPUPXQZR[T[VYWW", "KXUFUHWHWFUF VFVH UGWG MQNOPMRMSNTPTSRZQ]P_NaLbJbIaI_K_KaJaJ` SNSSQZP]O_ SPRTP[O^N`Lb", "G]OFI[K[ PFJ[ LFQFK[ YOYNXNXPZPZNYMWMUNQROS MSOSQTRUTYUZWZ QUSYTZ OSPTRZS[U[WZYW MFPG NFOH", "LXTFQQPUPXQZR[T[VYWW UFRQQUQZ QFVFRTQX RFUG SFTH", "@cAQBODMFMGNHPHSF[ GNGSE[ GPFTD[F[ HSJPLNNMPMRNSPSSQ[ RNRSP[ RPQTO[Q[ SSUPWNYM[M]N^P^S\\X ]N]R\\V\\Z ]P[U[X\\Z][_[aYbW", "F^GQHOJMLMMNNPNSL[ MNMSK[ MPLTJ[L[ NSPPRNTMVMXNYPYSWX XNXRWVWZ XPVUVXWZX[Z[\\Y]W", "H\\QMNNLQKTKVLYMZP[S[VZXWYTYRXOWNTMQM NOMQLTLWMY VYWWXTXQWO QMOONQMTMWNZP[ S[UYVWWTWQVNTM", "G]HQIOKMMMNNOPOSNWKb NNNSMWJb NPMTIb OTPQQORNTMVMXNYOZRZTYWWZT[R[PZOWOT XOYQYTXWWY VMWNXQXTWWVYT[ FbNb JaGb J`Hb K`Lb JaMb", "G\\WMQb XMRb WMYMSb UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ NbVb RaOb R`Pb S`Tb RaUb", "I[JQKOMMOMPNQPQTO[ PNPTN[ PPOTM[O[ YOYNXNXPZPZNYMWMUNSPQT", "J[XPXOWOWQYQYOXNUMRMONNONQOSQTTUVVWX ONNQ ORQSTTVU WVVZ NOOQQRTSVTWVWXVZS[P[MZLYLWNWNYMYMX", "KYTFQQPUPXQZR[T[VYWW UFRQQUQZ TFVFRTQX NMXM", "F^GQHOJMLMMNNPNSLX MNMRLVLZ MPKUKXLZN[P[RZTXVU XMVUVXWZX[Z[\\Y]W YMWUWZ XMZMXTWX", "H\\IQJOLMNMONPPPSNX ONORNVNZ OPMUMXNZP[R[TZVXXUYQYMXMXNYP", "CaDQEOGMIMJNKPKSIX JNJRIVIZ JPHUHXIZK[M[OZQXRU TMRURXSZU[W[YZ[X]U^Q^M]M]N^P UMSUSZ TMVMTTSX", "G]JQLNNMPMRNSPSR PMQNQRPVOXMZK[I[HZHXJXJZIZIY RORRQVQY ZOZNYNYP[P[NZMXMVNTPSRRVRZS[ PVPXQZS[U[WZYW", "G]HQIOKMMMNNOPOSMX NNNRMVMZ NPLULXMZO[Q[SZUXWT YMU[T^RaPb ZMV[T_ YM[MW[U_SaPbMbKaJ`J^L^L`K`K_", "H\\YMXOVQNWLYK[ XOOOMPLR VORNONNO VORMOMMOLR LYUYWXXV NYRZUZVY NYR[U[WYXV", "H\\WQVOUNSMQMNNLPKSKULXNZQ[S[VZWYXWYSYNXJWHVGSFQFNGMHNHOGQF MPLRLVMX VYWWXSXNWJVH QMONNOMRMVNYOZQ[ S[UZVXWTWMVIUGSF", "I[UMWNXOYOXNUMRMONMPLSLUMXOZR[U[XZYYXYWZU[ NPMSMUNX RMPNOONRNVOYPZR[ NTTUUTTSNT NTTT", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF LPXQ LQXP", "G]PMMNKPJSJUKXMZP[T[WZYXZUZSYPWNTMPM LPKSKULX XXYUYSXP PMNNMOLRLVMYNZP[T[VZWYXVXRWOVNTM QFSb RGRa SFQb QFSF QbSb`Ub QHPKOOOUPYQ\\ SDRFQIPOPUQ[R^S`", "KYOBQDSGUKVPVTUYS]Q`Ob SHTKUOUUTYS\\ QDRFSITOTUS[R^Q`", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[ [FI[ [FJ[ YTWTUUTWTYV[X[ZZ[X[VYT OGLFIIJLMMPJOG NFJGIK KMOLPH ZUWTTWUZX[[XZU YTUUTY V[ZZ[V H[J[", "E`bFb _B`BFb", "JZZBXCUERHPKNOMSMXN\\O_Qb SHQKOONTN\\ ZBWDTGRJQLPOOSN\\ NTO]P`Qb", "JZSBUEVHWLWQVUTYR\\O_LaJb VHVPUUSYQ\\ SBTDUGVP VHUQTUSXRZP]M`Jb", "J[TFSGUQTR TFTR TFUGSQTR OIPIXOYO OIYO OIOJYNYO YIXIPOOO YIOO YIYJONOO", "MWUFTGRM UGRM UFVGRM", "H\\PFOGMM PGMM PFQGMM ZFYGWM ZGWM ZF[GWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF SFPIQMUNXKWGSF UFQGPKSNWMXIUF", "G^SFKbLb SFTFLb YFQbRb YFZFRb KP\\P\\Q KPKQ\\Q IWZWZX IWIXZX", "E^^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FE[ ^FF[ ^FG[ XTVTTUSWSYU[W[YZZXZVXT PGMFJIKLNMQJPG OFKGJK LMPLQH YUVTSWTZW[ZXYU XTTUSY U[YZZV E[G[", "E`UQUNTLRKPKNLMMLPLSMUOVQVSUTTUQ OLNMMPMSNU RKPLOMNPNSOUPV VKUQUSVUXVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WKVQVSWU VKXKWQWSXUZV", "borderType != BORDER_CONSTANT", "/build/master_pack-android/opencv/modules/imgproc/src/pyramids.cpp", "borderType == BORDER_DEFAULT", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "The number of extra layers must be non negative", "The buffer is too small to fit the pyramid", "ssize.width > 0 && ssize.height > 0 && std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "!_src.empty()", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/imgproc/src/hough.cpp", "vector::_M_range_insert", "img.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "max_theta must be greater than min_theta", "linesMax > 0", "NULL destination", "rho, theta and threshold must be positive", "The destination matrix should be continuous and have a single row or a single column", "The destination matrix data type is inappropriate, see the manual", "Unrecognized method id", "_point.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || _point.type() == (((4) & ((1 << 3) - 1)) + (((2)-1) << 3))", "lines_max must be greater than 0", "threshold must be greater than 0", "max must be greater than min", "step must be greater than 0", "vector::_M_range_check", "kernelSize == -1 || kernelSize == 3 || kernelSize == 5 || kernelSize == 7", "!_image.empty() && _image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) && (_image.isMat() || _image.isUMat())", "_circles.isMat() || _circles.isVector()", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "Unrecognized method id. Actually only CV_HOUGH_GRADIENT is supported.", "ktype == 5 || ktype == 6", "/build/master_pack-android/opencv/modules/imgproc/src/deriv.cpp", "dx >= 0 && dy >= 0 && dx+dy == 1", "The kernel size must be odd and not larger than 31", "dx >= 0 && dy >= 0 && dx+dy > 0", "ksize > order", "src.size() == dst.size() && src.channels() == dst.channels()", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "/build/master_pack-android/opencv/modules/imgproc/src/featureselect.cpp", "_mask.empty() || (_mask.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) && _mask.sameSize(_image))", "_corners && _corner_count", "count >= 0", "/build/master_pack-android/opencv/modules/imgproc/src/cornersubpix.cpp", "win.width > 0 && win.height > 0", "src.cols >= win.width*2 + 5 && src.rows >= win.height*2 + 5", "opencv-hist", "type", "is_uniform", "have_ranges", "bins", "thresh", "/build/master_pack-android/opencv/modules/imgproc/src/histogram.cpp", "Invalid histogram header", "Expected CvMatND", "Unknown Histogram type", "'thresh' node is missing", "Either ranges, either uniform ranges should be provided", "mutex: pthread_mutex_lock failed", "H1.type() == H2.type() && H1.depth() == 5", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "Unknown comparison method", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == 5", "H1.size(i) == H2.size(i)", "it.ptr != __null", "Invalid histogram header[s]", "One of histograms is sparse and other is not", "The histograms have different numbers of dimensions", "The histograms have different sizes", "NULL ranges pointer", "One of <ranges> elements is NULL", "Bin ranges should go in ascenting order", "Number of dimensions is out of range", "Null <sizes> pointer", "Invalid histogram type", "Null histogram header pointer", "Only uniform bin ranges can be used here (to avoid memory allocation)", "Destination double pointer is NULL", "NULL histogram array pointer", "Too small number of histograms", "The function supports dense histograms only", "scale must be positive", "Invalid histogram pointer[s]", "All histograms must have 32fC1 type", "_src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "channels != 0 || nimages == dims", "images[j].channels() == 1", "c >= 0", "depth == 0", "ranges[i] && ranges[i][0] < ranges[i][1]", "ranges[i][k] < ranges[i][k+1]", "j < nimages", "images[j].size() == imsize && images[j].depth() == depth", "mask.size() == imsize && mask.channels() == 1", "dims > 0 && !hist.empty()", "H0.isContinuous()", "nimages > 0", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == 0)", "csz == 0 || csz == dims || (csz == 1 && _1d)", "dims > 0", "Bad histogram pointer", "Null double array pointer", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "dims > 0 && histSize", "mutex: pthread_mutex_init failed", "nimages > 0 && dims > 0", "rsz == dims*2 || (rsz == 0 && images.depth(0) == 0)", "csz == 0 || csz == dims", "Bad normalization factor (set it to 1.0 if unsure)", "The patch width and height must be positive", "Invalid number of dimensions", "Resultant image must have 32fC1 type", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "npoints2 >= 0 || npoints3 >= 0", "/build/master_pack-android/opencv/modules/imgproc/src/linefit.cpp", "Unknown distance type", "Unknown distance", "line != 0", "/build/master_pack-android/opencv/modules/imgproc/src/sumpixels.cpp", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "/build/master_pack-android/opencv/modules/imgproc/src/phasecorr.cpp", "winSize.width > 1 && winSize.height > 1", "src1.type() == src2.type()", "src1.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || src1.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "src1.type() == window.type()", "src1.size == window.size", "dst.data != srcA.data", "dst.data != srcB.data", "arr != 0 && contour_header != 0 && block != 0", "/build/master_pack-android/opencv/modules/imgproc/src/utils.cpp", "Input array is not a valid matrix", "The matrix can not be converted to point sequence because of inappropriate element type", "The matrix converted to point sequence must be 1-dimensional and continuous", "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", "/build/master_pack-android/opencv/modules/imgproc/src/lsd.cpp", "_scale > 0 && _sigma_scale > 0 && _quant >= 0 && _ang_th > 0 && _ang_th < 180 && _density_th >= 0 && _density_th < 1 && _n_bins > 0", "sz.area()", "_image.channels() == 3", "img.isContinuous() && I1.isContinuous() && I2.isContinuous()", "!(double_equal(Ixx, 0) && double_equal(Iyy, 0) && double_equal(Ixy, 0))", "sum > 0", "leftmost != __null", "rightmost != __null", "tailp != __null", "!image.empty() && image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "Subdivision is empty", "/build/master_pack-android/opencv/modules/imgproc/src/subdivision2d.cpp", "edge > 0", "edgeOrg(e) == edgeOrg(o_next)", "edgeOrg(e) == edgeOrg(o_prev)", "edgeDst(e) == edgeDst(d_next)", "edgeDst(e) == edgeDst(d_prev)", "edgeDst(o_next) == edgeOrg(d_prev)", "edgeDst(o_prev) == edgeOrg(d_next)", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "Subdiv2D::locate returned invalid location = %d", "edgeDst(edge, &t) > 0", "edgeOrg( edge, &t ) > 0", "imgLabels.rows == img.rows", "/build/master_pack-android/opencv/modules/imgproc/src/connectedcomponents.cpp", "imgLabels.cols == img.cols", "connectivity == 8 || connectivity == 4", "img.rows == imgLabels.rows", "img.cols == imgLabels.cols", "connectivity == 8", "ccltype == CCL_GRANA || ccltype == CCL_WU || ccltype == CCL_DEFAULT", "iDepth == 0 || iDepth == 1", "unsupported label/image type", "L.channels() == 1 && I.channels() == 1", "the type of labels must be 16u or 32s", "((((chain)->flags & (((1 << 2) - 1)<<12) ) == (1 << 12) && (chain)->elem_size == 1) && (((chain)->flags & (1 << (2 + 12))) != 0))", "/build/master_pack-android/opencv/modules/imgproc/src/approx.cpp", "header_size >= (int)sizeof(CvContour)", "npoints >= 0 && (depth == 4 || depth == 5)", "NULL storage pointer ", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "Input curves are not polygonal. Use cvApproxChains first", "Input curves have unknown type", "New header size must be non-less than sizeof(CvContour)", "Unknown approximation method", "Accuracy must be non-negative", "((src_seq)->flags & ((1 << 12) - 1)) == (((4) & ((1 << 3) - 1)) + (((2)-1) << 3)) || ((src_seq)->flags & ((1 << 12) - 1)) == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3))", "Invalid approximation method", "_src.depth() == 0", "/build/master_pack-android/opencv/modules/imgproc/src/canny.cpp", "(_dst.getObj() != _src.getObj() || _src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))) && \"Inplace parameters are not supported\"", "Aperture size should be odd between 3 and 7", "src.size == dst.size && src.depth() == 0 && dst.type() == 0", "_dx.dims() == 2", "_dx.type() == (((3) & ((1 << 3) - 1)) + (((1)-1) << 3)) || _dx.type() == (((3) & ((1 << 3) - 1)) + (((3)-1) << 3))", "_dy.type() == _dx.type()", "_dx.sameSize(_dy)", "deque::_M_new_elements_at_front", "deque::_M_new_elements_at_back", "finalPass", "global_hysteresis", "hysteresis", "magnitude", "gradient", "levels_ > 0", "/build/master_pack-android/opencv/modules/imgproc/src/generalized_hough.cpp", "edges.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "dx.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && dx.size == edges.size", "dy.type() == dx.type() && dy.size == edges.size", "cannyLowThresh_ > 0 && cannyLowThresh_ < cannyHighThresh_", "templEdges_.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "templDx_.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && templDx_.size() == templEdges_.size()", "templDy_.type() == templDx_.type() && templDy_.size() == templEdges_.size()", "!hasVotes || voteOutBuf_.size() == posOutBuf_.size()", "templFeatures_.size() == static_cast<size_t>(levels_ + 1)", "imageFeatures_.size() == templFeatures_.size()", "dp_ > 0.0", "posThresh_ > 0", "imageEdges_.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "imageDx_.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && imageDx_.size() == imageSize_", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageSize_", "levels_ > 0 && r_table_.size() == static_cast<size_t>(levels_ + 1)", "votesThreshold_ > 0", "minScale_ > 0.0 && minScale_ < maxScale_", "scaleStep_ > 0.0", "scaleThresh_ > 0", "minAngle_ >= 0.0 && minAngle_ < maxAngle_ && maxAngle_ <= 360.0", "angleStep_ > 0.0 && angleStep_ < 360.0", "angleThresh_ > 0", "!hasVotes || voteOutBuf_.size() == oldSize", "imageDx_.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && imageDx_.size() == imageEdges_.size()", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageEdges_.size()", "/build/master_pack-android/opencv/modules/imgproc/src/smooth.cpp", "cn > 0 && cn <= 4", "k < 16", "b < 16", "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((srcType) & ((512 - 1) << 3)) >> 3) + 1)", "Unsupported combination of source format (=%d), and buffer format (=%d)", "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((dstType) & ((512 - 1) << 3)) >> 3) + 1)", "Unsupported combination of sum format (=%d), and destination format (=%d)", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "(ksize % 2 == 1) && (_src0.dims() <= 2 )", "src.depth() == 0 && (cn == 1 || cn == 3 || cn == 4)", "(src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || src.type() == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3))) && src.data != dst.data", "(src.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || src.type() == (((5) & ((1 << 3) - 1)) + (((3)-1) << 3))) && src.data != dst.data", "Bilateral filtering is only implemented for 8u and 32f images", "sumCount == ksize-1", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "The destination image does not have the proper type", "/build/master_pack-android/opencv/modules/imgproc/src/matchcontours.cpp", "src.type() == srcType && dst.type() == dstType", "/build/master_pack-android/opencv/modules/imgproc/src/filter.cpp", "wholeSize.width > 0 && wholeSize.height > 0", "src && dst && count > 0", "srcY >= startY", "dstY <= roi.height", "_kernel.channels() == 1", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "constVal != __null", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "this->ksize == 3", "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && ddepth >= std::max(sdepth, 4) && kernel.type() == ddepth", "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && sdepth >= std::max(ddepth, 4) && kernel.type() == sdepth", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "columnBorderType != BORDER_WRAP", "bufType == srcType", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "rowFilter && columnFilter", "cn == ((((_dstType) & ((512 - 1) << 3)) >> 3) + 1)", "kernelX.type() == kernelY.type() && (kernelX.cols == 1 || kernelX.rows == 1) && (kernelY.cols == 1 || kernelY.rows == 1)", "ktype == 0 || ktype == 4 || ktype == 5 || ktype == 6", "_kernel.type() == DataType<KT>::type", "cn == ((((dstType) & ((512 - 1) << 3)) >> 3) + 1) && ddepth >= sdepth", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "/build/master_pack-android/opencv/modules/imgproc/src/filterengine.hpp", "Unsupported combination of source format (=%d), and destination format (=%d)", "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "/build/master_pack-android/opencv/modules/imgproc/src/templmatch.cpp", "depth == tdepth || tdepth == 5", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "ccn == 1 || delta == 0", "the input arrays are too big", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "(depth == 0 || depth == 5) && type == _templ.type() && _img.dims() <= 2", "_img.size().height <= _templ.size().height && _img.size().width <= _templ.size().width", "sqsum.data != __null", "sum.data != __null", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == 5", "Number of channels in input image must be 1 or 3", "/build/master_pack-android/opencv/modules/imgproc/src/floodfill.cpp", "Connectivity must be 4, 0(=4) or 8", "lo_diff and up_diff must be non-negative", "Seed point is outside of image", "mask.rows == size.height+2 && mask.cols == size.width+2", "mask.type() == 0", "unused method in UserColormap init(%d).", "/build/master_pack-android/opencv/modules/imgproc/src/colormap.cpp", "cv::argsort only sorts 1D matrices.", "cv::sortRowsByIndices only works on integer indices!", "cv::LUT only supports tables of size 256.", "cv::ColorMap only supports source images of type CV_8UC1 or CV_8UC3", "cv::LUT only supports tables CV_8UC1 or CV_8UC3.", "(x.type() == Y.type()) && (Y.type() == xi.type())", "(x.cols == 1) && (x.rows == Y.rows) && (x.cols == Y.cols)", "Unknown colormap id; use one of COLORMAP_*", "mask must have CV_8UC1 type", "/build/master_pack-android/opencv/modules/imgproc/src/grabcut.cpp", "mask must have as many rows and cols as img", "mask element value must be equal GC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "mask is empty", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "dtrm > std::numeric_limits<double>::epsilon()", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "minWeight > 0", "/build/master_pack-android/opencv/modules/imgproc/src/gcgraph.hpp", "w>=0 && revw>=0", "i != j", "i>=0 && i<(int)vtcs.size()", "j>=0 && j<(int)vtcs.size()", "image is empty", "image must have CV_8UC3 type", "!bgdSamples.empty() && !fgdSamples.empty()", "/build/master_pack-android/opencv/modules/imgproc/src/samplers.cpp", "cn == 1 || cn == 3", "Unsupported combination of input and output formats", "npoints >= 0 && (depth == 5 || depth == 4)", "/build/master_pack-android/opencv/modules/imgproc/src/shapedescr.cpp", "(*buf1 != __null || *buf2 != __null) && *buf3 != __null", "img.depth() <= 1 && img.channels() == 1", "count >= 0 && (depth == 5 || depth == 4)", "n >= 0 && (depth == 5 || depth == 4)", "There should be at least 5 points to fit the ellipse", "Only curves with integer coordinates are supported in case of contour slice", "contour != __null && ((((contour)->flags & ((1 << 12) - 1)) == (((4) & ((1 << 3) - 1)) + (((2)-1) << 3)) || ((contour)->flags & ((1 << 12) - 1)) == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3))))", "The image/matrix format is not supported by the function", "The arrays must have equal number of columns (which is number of dimensions but 1)", "/build/master_pack-android/opencv/modules/imgproc/src/emd.cpp", "The array must have equal types", "The signatures must be 32fC1", "The flow matrix size does not match to the signatures' sizes", "The flow matrix must be 32fC1", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "The lower boundary can not be calculated if the cost matrix is used", "The cost matrix size does not match to the signatures' sizes", "The cost matrix must be 32fC1", "In case of user-defined distance Distance function is undefined", "Number of dimensions can be 0 only if a user-defined metric is used", "Bad or unsupported metric type", "signature1 must not contain negative weights", "signature2 must not contain negative weights", "signature1 must contain at least one non-zero value", "signature2 must contain at least one non-zero value", "u != 0 && v != 0", "leave_x != __null", "cur_x", "/build/master_pack-android/opencv/modules/imgproc/src/thresh.cpp", "automatic_thresh != (CV_THRESH_OTSU | CV_THRESH_TRIANGLE)", "blockSize % 2 == 1 && blockSize > 1", "Unknown/unsupported adaptive threshold method", "Unknown/unsupported threshold type", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == 0)", "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || src.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/imgproc/src/corner.cpp", "type == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "src.size() == dst.size() && dst.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == 5", "/build/master_pack-android/opencv/modules/imgproc/src/contours.cpp", "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", "step >= 0", "size.height >= 1", "NULL double CvSeq pointer", "Contour header size must be >= sizeof(CvContour)", "Input array must be 8uC1 or 8sC1", "scanner->img_step >= 0", "par_info != 0", "ptr != __null", "i3 != __null", "i4 != __null", "Nonzero offset is not supported in CV_LINK_RUNS yet", "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == 4)", "!_seq || _seq->elem_size == sizeof(_Tp)", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/core_c.h", "ci.isContinuous()", "ksize <= MAX_ESIZE", "/build/master_pack-android/opencv/modules/imgproc/src/resize.cpp", "(dst_width * dst_height > 0) || (inv_scale_x > 0 && inv_scale_y > 0)", "dsize.area() > 0", "func != 0 && cn <= 4", "Unknown interpolation method", "ssize.width > 0 && ssize.height > 0", "dsize.area() > 0 || (inv_scale_x > 0 && inv_scale_y > 0)", "src.type() == dst.type()", "cn == 4", "NULL vertex array pointer", "/build/master_pack-android/opencv/modules/imgproc/src/geometry.cpp", "total >= 0 && (depth == 4 || depth == 5)", "p1.depth() == 4 || p1.depth() == 5", "p2.depth() == 4 || p2.depth() == 5", "n >= 0 && m >= 0", "temp.ptr<Point2f>() == dst", "orientation != 0", "/build/master_pack-android/opencv/modules/imgproc/src/rotcalipers.cpp", "areEqualPoints(p, q) == false", "/build/master_pack-android/opencv/modules/imgproc/src/min_enclosing_triangle.cpp", "(pointsMat.checkVector(2) > 0) && ((pointsMat.depth() == 5) || (pointsMat.depth() == 4))", "The position of the vertex C on side B could not be determined, because the considered lines do not intersect.", "The position of side B could not be determined, because gamma(b) could not be computed.", "/build/master_pack-android/opencv/modules/imgproc/src/gabor.cpp", "depth == 0 || depth == 5", "/build/master_pack-android/opencv/modules/imgproc/src/blend.cpp", "size == _src2.size() && size == _weights1.size() && size == _weights2.size()", "type == _src2.type() && _weights1.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && _weights2.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "op == MORPH_ERODE || op == MORPH_DILATE", "/build/master_pack-android/opencv/modules/imgproc/src/morph.cpp", "Unsupported data type (=%d)", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "_kernel.type() == 0", "depth == 0 || depth == 2 || depth == 3 || depth == 5 || depth == 6", "unknown morphological operation", "The number of pyramid levels is too large or negative", "/build/master_pack-android/opencv/modules/imgproc/src/segmentation.cpp", "Only 8-bit, 3-channel images are supported", "The input and output images must have the same type", "The input and output images must have the same size", "src.type() == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3)) && dst.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "src.size() == dst.size()", "depth == 0 || depth == 2", "/build/master_pack-android/opencv/modules/imgproc/src/demosaicing.cpp", "scn == 1 && dcn == 1", "Bayer->Gray demosaicing only supports 8u and 16u types", "Bayer->RGB demosaicing only supports 8u and 16u types", "scn == 1 && dcn == 3", "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", "Unknown / unsupported color conversion code", "/build/master_pack-android/opencv/modules/imgproc/src/spatialgradient.cpp", "borderType == BORDER_DEFAULT || borderType == BORDER_REPLICATE", "ksize == 3", "Unknown font type", "/build/master_pack-android/opencv/modules/imgproc/src/drawing.cpp", "0 <= shift && shift <= XY_SHIFT", "points.checkVector(2, 4) >= 0", "pt1 && pt2", "iterator != 0", "font != 0 && hscale > 0 && vscale > 0 && thickness >= 0", "text != 0 && _font != 0", "0 < thickness && thickness <= MAX_THICKNESS", "radius >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "axes.width >= 0 && axes.height >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "box.size.width >= 0 && box.size.height >= 0 && thickness <= MAX_THICKNESS", "0 <= shift && shift <= XY_SHIFT && thickness >= 0", "thickness <= MAX_THICKNESS", "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "p.checkVector(2, 4) >= 0", "reader.ptr != __null", "elem_type == (((4) & ((1 << 3) - 1)) + (((2)-1) << 3))", "0 <= contourIdx && contourIdx < (int)last", "npoints > 0", "hierarchy.total() == ncontours && hierarchy.type() == (((4) & ((1 << 3) - 1)) + (((4)-1) << 3))", "pts && npts && ncontours >= 0 && 0 <= shift && shift <= XY_SHIFT", "_src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || _src.type() == (((2) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/imgproc/src/clahe.cpp", "Unknown/unsupported interpolation type", "/build/master_pack-android/opencv/modules/imgproc/src/imgwarp.cpp", "ssize.area() > 0", "_map1.size().area() > 0", "_map2.empty() || (_map2.size() == _map1.size())", "dst.cols < 0x7fff && dst.rows < 0x7fff && src.cols < 0x7fff && src.rows < 0x7fff", "nnfunc != 0", "_src.channels() <= 4", "ifunc != 0", "((map1.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || map1.type() == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3))) && map2.empty()) || (map1.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && map2.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)))", "(m1type == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3)) && (nninterpolate || m2type == (((2) & ((1 << 3) - 1)) + (((1)-1) << 3)) || m2type == (((3) & ((1 << 3) - 1)) + (((1)-1) << 3)))) || (m2type == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3)) && (nninterpolate || m1type == (((2) & ((1 << 3) - 1)) + (((1)-1) << 3)) || m1type == (((3) & ((1 << 3) - 1)) + (((1)-1) << 3)))) || (m1type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) && m2type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))) || (m1type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) && m2->empty())", "dstm1type == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3)) || dstm1type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || dstm1type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3))", "Unsupported combination of input/output matrices", "_src.channels() <= 4 || (interpolation != INTER_LANCZOS4 && interpolation != INTER_CUBIC)", "src.cols > 0 && src.rows > 0", "(M0.type() == 5 || M0.type() == 6) && M0.rows == 2 && M0.cols == 3", "_src.total() > 0", "(M0.type() == 5 || M0.type() == 6) && M0.rows == 3 && M0.cols == 3", "matM.rows == 2 && matM.cols == 3", "src.checkVector(2, 5) == 4 && dst.checkVector(2, 5) == 4", "src.checkVector(2, 5) == 3 && dst.checkVector(2, 5) == 3", "src.type() == dst.type() && dst.size() == mapx.size()", "M.size() == M0.size()", "M should be >0", "_src.sameSize(_dst) && dcn == scn", "/build/master_pack-android/opencv/modules/imgproc/src/accum.cpp", "_mask.empty() || (_src.sameSize(_mask) && _mask.type() == 0)", "_src1.sameSize(_src2) && stype == _src2.type()", "_src1.sameSize(_dst) && dcn == scn", "_mask.empty() || (_src1.sameSize(_mask) && _mask.type() == 0)", "/build/master_pack-android/opencv/modules/imgproc/src/moments.cpp", "Invalid image type (must be single-channel)", "contour.depth() == 4 || contour.depth() == 5", "hu.isContinuous()", "moments != 0", "/build/master_pack-android/opencv/modules/imgproc/src/distransform.cpp", "labelType == DIST_LABEL_PIXEL || labelType == DIST_LABEL_CCOMP", "Mask size should be 3 or 5 or 0 (precise)", "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) && dst.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "distType == CV_DIST_C || distType == CV_DIST_L1 || distType == CV_DIST_L2", "Unknown metric type", "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) && dst.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "is_classifier", "default_k", "samples", "responses", "0 < k", "/build/master_pack-android/opencv/modules/ml/src/knearest.cpp", "test_samples.type() == 5 && test_samples.cols == samples.cols", "new_samples.type() == 5", "new_samples.cols == samples.cols && new_responses.cols == responses.cols", "opencv_ml_knn", "opencv_ml_knn_kd", "opencv_ml_em", "covMatType == COV_MAT_SPHERICAL || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_GENERIC", "/build/master_pack-android/opencv/modules/ml/src/em.cpp", "nclusters >= 1", "samples.channels() == 1", "nclusters > 0", "nclusters <= nsamples", "startStep == START_AUTO_STEP || startStep == START_E_STEP || startStep == START_M_STEP", "covMatType == COV_MAT_GENERIC || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_SPHERICAL", "means", "probs", "!samples.empty()", "!probs || (!probs->empty() && probs->rows == nsamples && probs->cols == nclusters && (probs->type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || probs->type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))))", "!weights || (!weights->empty() && (weights->cols == 1 || weights->rows == 1) && static_cast<int>(weights->total()) == nclusters && (weights->type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || weights->type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))))", "!means || (!means->empty() && means->rows == nclusters && means->cols == dim && means->channels() == 1)", "!covs || (!covs->empty() && static_cast<int>(covs->size()) == nclusters)", "!m.empty() && m.size() == covSize && (m.channels() == 1)", "!covsEigenValues.empty()", "(stype == 5 || stype == 6) && (ptype == 5 || ptype == 6)", "!means.empty()", "sample.size() == Size(means.cols, 1)", "isTrained()", "!sample.empty()", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "unknown_%d", "epsilon", "training_params", "weights", "covs", "covMatType >= 0", "!covs.empty()", "!covs[clusterIndex].empty()", "meansFlt.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "!clusterSamples.empty()", "invCovsEigenValues.empty()", "weights.empty()", "/build/master_pack-android/opencv/modules/core/include/opencv2/core.hpp", "opencv_ml_lr", "file can't open. Check file path", "/build/master_pack-android/opencv/modules/ml/src/lr.cpp", "Logistic Regression Classifier", "classifier", "alpha", "norm", "train_method", "mini_batch_size", "learnt_thetas", "n_labels", "o_labels", "check training parameters. Invalid training classifier", "_gradient.rows == _theta.rows && _gradient.cols == _theta.cols", "check training parameters (learning rate) for the classifier", "number of iterations cannot be zero or a negative number", "check training parameters for the classifier", "!lmap.empty()", "val != lmap.end()", "traits::Type<_Tp>::value == type() && cols == 1", "classifier should be trained first", "thetas.rows > 0", "data must be of floating type", "data_t.cols == thetas.cols", "temp_pred.cols==1", "empty FileNode object", "!_labels_i.empty() && !_data_i.empty()", "labels should be a column matrix", "data and labels must be a floating point matrix", "number of rows in data and labels should be equal", "data should have atleast 2 classes", "opencv_ml_svm", "Lower bound of the grid must be less then the upper one", "/build/master_pack-android/opencv/modules/ml/src/svm.cpp", "Lower bound of the grid must be positive", "Grid step must greater then 1", "0 <= i && i < (int)decision_func.size()", "INTERNAL ERROR: Unknown SVM type, the SVM structure is probably corrupted", "samples.cols == var_count && samples.type() == 5", "nsamples == 1", "Unknown kernel type", "SVM::getDefaultGrid", "Invalid type of parameter (use one of SVM::C, SVM::GAMMA et al.)", "C_SVC", "NU_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "Uknown_%d", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "Unknown_%d", "svmType", "kernel", "degree", "gamma", "coef0", "term_criteria", "SVM model data is invalid, check sv_count, var_* and class_count tags", "var_count", "class_count", "class_labels", "class_weights", "sv_total", "support_vectors", "uncompressed_sv_total", "uncompressed_support_vectors", "decision_functions", "sv_count", "index", "sv_count == sv_total", "the class is not SVMImpl", "Unknown/unsupported kernel type", "gamma parameter of the kernel must be positive", "The kernel parameter <coef0> must be positive or zero", "The kernel parameter <degree> must be positive", "Custom kernel is not set", "Unknown/unsupported SVM type", "The parameter C must be positive", "The parameter nu must be between 0 and 1", "The parameter p must be positive", "svm_type", "SVM kernel tag is not found", "Missing or invalid SVM type", "Invalid SVM kernel type (or custom kernel)", "(int)sv_node.size() == sv_total", "(int)uncompressed_sv_node.size() == uncompressed_sv_total", "(int)df_node.size() == df_count", "optimize_linear", "Array of class labels is missing or invalid", "select_working_set_func != 0", "calc_rho_func != 0", "get_row_func != 0", "(int)_yf.size() == sample_count", "_samples.type() == 5", "sv_count != 0", "svmType == C_SVC || svmType == NU_SVC", "While cross-validation one or more of the classes have been fell out of the sample. Try to reduce <Params::k_fold>", "sv_tab[df_index[i]] > 0", "params.class_weights must be 1d floating-point vector containing as many elements as the number of classes", "_responses.isContinuous() && _responses.checkVector(1, 4) == nsamples", "in the case of classification problem the responses must be categorical; either specify varType when creating TrainData, or pass integer responses", "k_fold >= 2", "samples.type() == 5", "opencv_ml_dtree", "opencv_ml_rtrees", "max_categories should be >= 2", "/build/master_pack-android/opencv/modules/ml/src/precomp.hpp", "params.regression_accuracy should be >= 0", "max_depth should be >= 0", "params.CVFolds should be =0 (the tree is not pruned) or n>0 (tree is pruned using n-fold cross-validation)", "tree pruning using cross-validation is not implemented.Set CVFolds to 1", "RTrees have not been trained", "/build/master_pack-android/opencv/modules/ml/src/rtrees.cpp", "oob_error", "var_importance", "ntrees", "Cross validation for RTrees is not implemented", "!roots.empty()", "the class is not RTreesImpl", "ntrees == (int)trees_node.size()", "nodes", "nactive_vars", "0. <= ratio && ratio <= 1.", "/build/master_pack-android/opencv/modules/ml/src/data.cpp", "0 <= vi && vi < n", "a < ntest", "b < ntest", "m > 0", "cmap[idx] == val", "0 <= vi && vi < getNAllVars()", "n >= 0", "0 <= j && j < nsamples", "0 <= j && j < nvars", "buf != 0 && 0 <= sidx && sidx < getNSamples()", "0 <= count && count < nsamples", "type == 4 || type == 5 || type == 6", "0 <= k && k < m", "impl != 0", "type spec is not correct; it should have format \"cat\", \"ord\" or \"ord[n1,n2-n3,n4-n5,...]cat[m1-m2,m3,m4-m5,...]\", where n's and m's are 0-based variable indices", "0 <= b1 && b1 < nvars", "0 <= b1 && b1 <= b2 && b2 < nvars", "type of some variables is not specified", "label > 0 && label <= (int)n", "(float)idata[i] == fdata[i*istep]", "(data.cols == 1 || data.rows == 1) && (data.type() == 4 || data.type() == 5)", "_layout == ROW_SAMPLE || _layout == COL_SAMPLE", "(sampleIdx.checkVector(1, 4, true) > 0 && checkRange(sampleIdx, true, 0, 0, nsamples)) || sampleIdx.checkVector(1, 0, true) == nsamples", "sampleWeights.checkVector(1, 5, true) == nsamples", "(varIdx.checkVector(1, 4, true) > 0 && checkRange(varIdx, true, 0, 0, ninputvars)) || varIdx.checkVector(1, 0, true) == ninputvars", "(layout == ROW_SAMPLE && responses.rows == nsamples) || (layout == COL_SAMPLE && responses.cols == nsamples)", "varType.checkVector(1, 0, true) == nvars && checkRange(varType, true, 0, VAR_ORDERED, VAR_CATEGORICAL+1)", "varType.at<uchar>(ninputvars + i) == VAR_ORDERED", "samples.type() == 5 || samples.type() == 4", "responses.type() == 5 || responses.type() == 4", "missing.size() == samples.size() && missing.type() == 0", "invalid CSV format; no data found", "ridx1 > ridx0", "nvars == (int)rowvals.size()", "(!varTypesSet && vtypes[i] == rowtypes[i]) || (varTypesSet && (vtypes[i] == rowtypes[i] || rowtypes[i] == VAR_ORDERED))", "vsymbolflags[i] == sflag || rowtypes[i] == VAR_MISSED", "If responses are vector values, not scalars, they must be marked as ordered responses", "0 <= vi && vi < nallvars && vi > prevIdx", "/build/master_pack-android/opencv/modules/ml/src/tree.cpp", "!fnodes.empty()", "depth", "value", "norm_class_idx", "splits", "not_in", "quality", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "var_all", "ord_var_count", "cat_var_count", "global_var_idx", "var_idx", "var_type", "cat_ofs", "cat_map", "missing_subst", "0 <= vi && vi <= (int)varType.size()", "(int)_sleft.size() < n && (int)_sright.size() < n", "sample.type() == 5", "one of input categorical variable is not an integer", "cmap != __null", "c >= 0 && ival == cmap[c]", "compVarIdx[best_split.varIdx] >= 0 && best_vi >= 0", "w->wnodes[w_pidx].right == w_nidx", "w_nidx >= 0", "surrogate splits are not implemented yet", "w->wnodes[nidx].left > 0 && w->wnodes[nidx].right > 0", "class_weights.checkVector(1, 6) == nclasses", "(int)w->sample_weights.size() == nsamples", "0 <= ci && ci < nclasses", "(remaining % cn) == 0", "cat_count", "idxmat.isContinuous() && idxmat.type() == 4 && (idxmat.cols == 1 || idxmat.rows == 1)", "/build/master_pack-android/opencv/modules/ml/src/kdtree.cpp", "labelsmat.isContinuous()", "(unsigned)k < (unsigned)points.rows", "(unsigned)ptidx < (unsigned)points.rows", "vecmat.isContinuous() && vecmat.type() == 5 && vecmat.total() == (size_t)points.cols", "K > 0 && (normType == NORM_L2 || normType == NORM_L1)", "lowerBound.size == upperBound.size && lowerBound.isContinuous() && upperBound.isContinuous() && lowerBound.type() == upperBound.type() && lowerBound.type() == 5 && lowerBound.total() == (size_t)ptdims", "_points.type() == 5 && !_points.empty()", "nlabels == n", "vals[ofs[k]] <= pivot", "vals[ofs[k]] >= pivot", "std::abs(more - less) <= 1", "opencv_ml_svmsgd", "SVMSGD model data is invalid", "/build/master_pack-android/opencv/modules/ml/src/svmsgd.cpp", "samples.cols == weights_.cols && samples.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "nSamples == 1", "average.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "trainResponses.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "isClassifier()", "trainResponses.rows == trainSamples.rows", "params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS", "(params.marginType == SOFT_MARGIN || params.marginType == HARD_MARGIN) && (extendedWeights.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)))", "ASGD", "svmsgdType", "SOFT_MARGIN", "HARD_MARGIN", "marginType", "marginRegularization", "initialStepSize", "stepDecreasingPower", "SVMSGD model data is invalid, it hasn't been trained", "shift", "Missing or invalid SVMSGD type", "Missing or invalid margin type", "fn[\"marginRegularization\"].isReal()", "fn[\"initialStepSize\"].isReal()", "fn[\"stepDecreasingPower\"].isReal()", "!tcnode.empty()", "(params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS)", "opencv_ml_ann_mlp", "0 <= layerIdx && layerIdx < (int)weights.size()", "/build/master_pack-android/opencv/modules/ml/src/ann_mlp.cpp", "Unknown activation function", "the class is not ANN_MLP_ANNEAL", "sums.isContinuous()", "Some of new output training vector components run exceed the original range too much", "The network has not been created. Use method create or the appropriate constructor", "The numbers of input and output samples do not match", "input training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of 0-th (input) layer", "output training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of last (output) layer", "LEAKYRELU", "RELU", "GAUSSIAN", "IDENTITY", "SIGMOID_SYM", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "ANNEAL", "initialT", "finalT", "coolingRatio", "itePerStep", "Unknown training method", "activation_function_id", "activation_function", "layer_sizes", "input_scale", "output_scale", "inv_output_scale", "activ_func >= 0", "Unknown training method (should be BACKPROP or RPROP)", "finalTemperature > 0", "/build/master_pack-android/opencv/modules/ml/include/opencv2/ml/ml.inl.hpp", "initialTemperature > finalTemperature", "iterationsPerStep > 0", "coolingRatio < 1.0f", "The network has not been trained or loaded", "n == 1", "(type == 5 || type == 6) && inputs.cols == layer_sizes[0]", "weights[i].size() == Size(n2, n1+1)", "there should be at least one input and one output and every hidden layer must have more than 1 neuron", "opencv_ml_boost", "/build/master_pack-android/opencv/modules/ml/src/boost.cpp", "std::abs(w->ord_responses[si]) == 1", "Unknown boosting type", "GentleAdaboost", "Unknown", "LogitBoost", "DiscreteAdaboost", "RealAdaboost", "boosting_type", "weight_trimming_rate", "num_samples parameter must be positive", "/build/master_pack-android/opencv/modules/ml/src/testset.cpp", "num_features parameter must be positive", "num_classes parameter must be positive", "opencv_ml_nbayes", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "The input samples must be 32f matrix with the number of columns = nallvars", "/build/master_pack-android/opencv/modules/ml/src/nbayes.cpp", "When the number of input samples is >1, the output vector of results must be passed", "The new training data is inconsistent with the original training data; varIdx and the class labels should be the same", "The field \"var_count\" of NBayes classifier is missing or non-positive", "No or invalid \"cls_labels\" in NBayes classifier", "/build/master_pack-android/opencv/modules/ml/src/inner_functions.cpp", "mean.rows == 1 || mean.cols == 1", "cov.rows == dim && cov.cols == dim", "A.type() == 5", "blockSize.width % cellSize.width == 0 && blockSize.height % cellSize.height == 0", "/build/master_pack-android/opencv/modules/objdetect/src/hog.cpp", "(winSize.width - blockSize.width) % blockStride.width == 0 && (winSize.height - blockSize.height) % blockStride.height == 0", "{opencv-object-detector-hog", "winSize", "blockSize", "blockStride", "cellSize", "nbins", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "SVMDetector", "checkDetectorSize()", "pt.x % cacheStride.width == 0 && pt.y % cacheStride.height == 0", "nodes[root][PARENT] < 0", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/operations.hpp", "img.type() == 0 || img.type() == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3))", "(unsigned)hidx < (unsigned)nbins", "rectList.size() == weights.size()", "file not exist", "version?", "V6.01", "version does not match", "l >= 0 && l < 0xFFFF", "totwords + 1 > 0 && totwords < 0xFFFF", "pt0.x % cacheStride.width == 0 && pt0.y % cacheStride.height == 0", "opencv-object-detector-hog", "_detector", "/build/master_pack-android/opencv/modules/objdetect/src/detection_based_tracker.cpp", "stateThread==STATE_THREAD_WORKING_SLEEPING", "OBJECT_DETECTOR", "\n %s: ERROR: OpenCV Exception caught: \n'%s'\n\n", "\n %s: ERROR: Exception caught: \n'%s'\n\n", "\n %s: ERROR: UNKNOWN Exception caught\n\n", "DetectionBasedTracker: workcycleObjectDetectorFunction: ERROR concerning pointer, received as the function parameter", "(params.maxTrackLifetime >= 0) && trackingDetector", "numpositions > 0", "numpos > 0", "imageGray.type()==(((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "n > 0", "0 <= scaleIdx && scaleIdx < (int)scaleData->size()", "/build/master_pack-android/opencv/modules/objdetect/src/cascadedetect.cpp", "/build/master_pack-android/opencv/modules/objdetect/src/cascadedetect.hpp", "sqsum.u == u && sqsum.size() == s.szi && sqsum.type()==4", "rects", "tilted", "!empty()", "!cascade.data.stumps.empty()", "stageType", "BOOST", "featureType", "HAAR", "HOG cascade is not supported in 3.0", "origWinSize.height > 0 && origWinSize.width > 0", "featureParams", "maxCatCount", "stages", "weakClassifiers", "leafValues", "internalNodes", "stageThreshold", "features", "a->size() == n", "b->size() == n", "scaleFactor > 1 && _image.depth() == 0", "scaleFactor > 1 && image.depth() == 0", "stage_threshold", "feature", "threshold", "left_val", "left_node", "right_val", "right_node", "cascade", "{:opencv-cascade-classifier", "stageParams", "maxWeakCount", "stageNum", "opencv-haar-classifier", "stage %d", "parent", "next", "tree %d", "node %d", "Number of stages should be positive", "/build/master_pack-android/opencv/modules/objdetect/src/haar.cpp", "Invalid classifier pointer", "hid_cascade has been already created", "Negative number of cascade stages", "header of the stage classifier #%d is invalid (has null pointers or non-positive classfier count)", "rectangle #%d of the classifier #%d of the stage classifier #%d is not inside the reference (original) cascade window", "Invalid cascade pointer", "Hidden cascade has not been created.\nUse cvSetImagesForHaarClassifierCascade", "Invalid stages node", "size node is not a valid sequence.", "Invalid size node: width must be positive integer", "Invalid size node: height must be positive integer", "Invalid stage %d", "Trees node is not a valid sequence. (stage %d)", "Tree node is not a valid sequence. (stage %d, tree %d)", "Tree node %d is not a valid map. (stage %d, tree %d)", "Feature node is not a valid map. (stage %d, tree %d, node %d)", "Rects node is not a valid sequence. (stage %d, tree %d, node %d)", "Rect %d is not a valid sequence. (stage %d, tree %d, node %d)", "x coordinate must be non-negative integer. (stage %d, tree %d, node %d, rect %d)", "y coordinate must be non-negative integer. (stage %d, tree %d, node %d, rect %d)", "width must be positive integer and (x + width) must not exceed window width. (stage %d, tree %d, node %d, rect %d)", "height must be positive integer and (y + height) must not exceed window height. (stage %d, tree %d, node %d, rect %d)", "weight must be real number. (stage %d, tree %d, node %d, rect %d)", "tilted must be 0 or 1. (stage %d, tree %d, node %d)", "threshold must be real number. (stage %d, tree %d, node %d)", "left node must be valid node number. (stage %d, tree %d, node %d)", "left node or left value must be specified. (stage %d, tree %d, node %d)", "left value must be real number. (stage %d, tree %d, node %d)", "Tree structure is broken: too many values. (stage %d, tree %d, node %d)", "right node must be valid node number. (stage %d, tree %d, node %d)", "right node or right value must be specified. (stage %d, tree %d, node %d)", "right value must be real number. (stage %d, tree %d, node %d)", "Tree structure is broken: too few values. (stage %d, tree %d)", "stage threshold must be real number. (stage %d)", "parent must be integer number. (stage %d)", "next must be integer number. (stage %d)", "Scale must be positive", "All integral images must have the same size", "Only (32s, 64f, 32s) combination of (sum,sqsum,tilted_sum) formats is allowed", "Sum and tilted_sum must have the same stride (step, widthStep)", "Null path is passed", "%s%s%d/AdaBoostCARTHaarClassifier.txt", "Invalid path", "Could not allocate memory for input_cascade", "%s/%d/AdaBoostCARTHaarClassifier.txt", "elements_read == (size_t)(size)", "%d%n", "count > 0 && count < 1000", "classifier->count > 0 && classifier->count< 1000", "rects >= 2 && rects <= 3", "%d%d%d%d%d%f%n", "%99s%n", "%f%d%d%n", "%f%n", "%d%d%n", "parent >= 0 && parent < i", "Invalid classifier cascade", "Null storage pointer", "Only 8-bit images are supported", "scale factor must be > 1", "minxd >= 0 && minyd >= 0 && maxxd <= dest.rows && maxyd <= dest.cols", "/build/master_pack-android/opencv/modules/photo/src/seamless_cloning.cpp", "Input images vector should not be empty!", "/build/master_pack-android/opencv/modules/photo/src/denoising.cpp", "All windows sizes should be odd!", "imgToDenoiseIndex and temporalWindowSize should be chosen corresponding srcImgs size!", "Input images should have the same size and type!", "src.channels() == pixelInfo<T>::channels", "/build/master_pack-android/opencv/modules/photo/src/fast_nlmeans_denoising_invoker.hpp", "template_window_size_ <= 46340", "srcImgs.size() > 0", "/build/master_pack-android/opencv/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp", "srcImgs[0].channels() == pixelInfo<T>::channels", "hn == 1 || hn == cn", "Unsupported number of channels! Only 1, 2, 3, and 4 are supported", "Unsupported depth! Only CV_8U is supported for NORM_L2", "Unsupported depth! Only CV_8U and CV_16U are supported for NORM_L1", "Unsupported norm type! Only NORM_L2 and NORM_L1 are supported", "Type of input image should be CV_8UC3 or CV_8UC4!", "Unsupported image format! Only CV_8U, CV_8UC2, CV_8UC3 and CV_8UC4 are supported", "Type of input images should be CV_8UC3!", "!I.empty() && (I.channels()==3)", "/build/master_pack-android/opencv/modules/photo/src/contrast_preserve.cpp", "All the input and output images must have the same size", "/build/master_pack-android/opencv/modules/photo/src/inpaint.cpp", "8-bit, 16-bit unsigned or 32-bit float 1-channel and 8-bit 3-channel input/output images are supported", "The mask must be 8-bit 1-channel image", "Unsupportedformat of the input image", "Unsupported format of the input image", "The flags argument must be one of CV_INPAINT_TELEA or CV_INPAINT_NS", "contrast_weight", "saturation_weight", "exposure_weight", "n.isString() && String(n) == name", "/build/master_pack-android/opencv/modules/photo/src/merge.cpp", "MergeDebevec", "MergeMertens", "MergeRobertson", "images.size() == times.total()", "images[0].depth() == 0", "response.rows == LDR_SIZE && response.cols == 1 && response.channels() == channels", "log_response.rows == LDR_SIZE && log_response.cols == 1 && log_response.channels() == channels", "channels == 1 || channels == 3", "/build/master_pack-android/opencv/modules/photo/src/tonemap.cpp", "contrast", "sigma_color", "sigma_space", "saturation", "bias", "scale", "intensity", "light_adapt", "color_adapt", "Tonemap", "TonemapDrago", "TonemapDurand", "TonemapReinhard", "TonemapMantiuk", "max_bits", "exclude_range", "/build/master_pack-android/opencv/modules/photo/src/align.cpp", "AlignMTB", "img0.channels() == 1 && img0.type() == img1.type()", "/build/master_pack-android/opencv/modules/photo/src/seamless_cloning_impl.cpp", "observations.size()>0 && niters>0 && lambda>0", "/build/master_pack-android/opencv/modules/photo/src/denoise_tvl1.cpp", "observations[i].rows==rows && observations[i].cols==cols", "/build/master_pack-android/opencv/modules/photo/src/npr.cpp", "/build/master_pack-android/opencv/modules/photo/src/calibrate.cpp", "max_iter", "lambda", "random", "CalibrateDebevec", "CalibrateRobertson", "channels >= 1 && channels <= 3", "times.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "0 < x_points && x_points <= cols", "0 < y_points && y_points <= rows", "!images.empty()", "/build/master_pack-android/opencv/modules/photo/src/hdr_common.cpp", "images[i].type() == type", "images[i].cols == width && images[i].rows == height", "prev0.size() == next0.size() && prev0.channels() == next0.channels() && prev0.channels() == 1 && pyrScale_ < 1", "/build/master_pack-android/opencv/modules/video/src/optflowgf.cpp", "src.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/video/src/camshift.cpp", "Input window has non-positive sizes", "/build/master_pack-android/opencv/modules/video/src/lkpyramid.cpp", "status != __null", "img.depth() == 0 && winSize.width > 2 && winSize.height > 2", "maxLevel >= 0 && winSize.width > 2 && winSize.height > 2", "(npoints = prevPtsMat.checkVector(2, 5, true)) >= 0", "nextPtsMat.checkVector(2, 5, true) == npoints", "statusMat.isContinuous()", "errMat.isContinuous()", "levels1 >= 0", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height", "levels2 >= 0", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height", "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()", "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()", "Both input images must have the same data type", "cn == 1 || cn == 3 || cn == 4", "Both input images must have either 8uC1 or 8uC3 type", "M.isContinuous()", "Both input images must have the same size", "(String)fn[\"name\"] == name_", "/build/master_pack-android/opencv/modules/video/src/bgfg_KNN.cpp", "history", "nsamples", "nKNN", "dist2Threshold", "detectShadows", "shadowValue", "shadowThreshold", "BackgroundSubtractor.KNN", "learningRate >= 0", "map_matrix.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/video/src/ecc.cpp", "update.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "motionType == MOTION_TRANSLATION || motionType == MOTION_EUCLIDEAN || motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY", "map_matrix.rows == 3 && update.rows == 8", "map_matrix.rows == 2 && update.rows == 6", "map_matrix.rows == 2 && update.rows == 3", "map_matrix.rows == 2 && update.rows == 2", "update.cols == 1", "map_matrix.isContinuous()", "update.isContinuous()", "src1.rows == src2.rows", "(src1.cols % src2.cols) == 0", "src1.rows == dst.rows", "dst.cols == (6*src1.cols)", "dst.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "src1.size() == src2.size()", "src1.size() == src3.size()", "src1.size() == src4.size()", "dst.cols == (src1.cols*3)", "src5.isContinuous()", "src1.size()==src2.size()", "src1.size()==src3.size()", "src1.size()==src4.size()", "dst.cols == (src1.cols*8)", "!dst.empty()", "Images must have 8uC1 or 32fC1 type", "warpMatrix must be single-channel floating-point matrix", "map.cols == 3", "map.rows == 2 || map.rows ==3", "motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY || motionType == MOTION_EUCLIDEAN || motionType == MOTION_TRANSLATION", "map.rows ==3", "criteria.type & TermCriteria::COUNT || criteria.type & TermCriteria::EPS", "dst.cols == (src1.cols*2)", "NaN encountered.", "The algorithm stopped before its convergence. The correlation is going to be minimized. Images may be uncorrelated or non-overlapped", "/build/master_pack-android/opencv/modules/video/src/bgfg_gaussmix2.cpp", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "BackgroundSubtractor.MOG2", "nmixtures <= 255", "frameType == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || frameType == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3)) || frameType == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || frameType == (((5) & ((1 << 3) - 1)) + (((3)-1) << 3))", "state and measurement vectors must have positive number of dimensions", "/build/master_pack-android/opencv/modules/video/src/compat_video.cpp", "featuresA && featuresB", "flow.size() == prev.size() && flow.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3))", "DP > 0 && MP > 0", "/build/master_pack-android/opencv/modules/video/src/kalman.cpp", "I0.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || I0.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/modules/video/src/tvl1flow.cpp", "I0.size() == I1.size()", "I0.type() == I1.type()", "!useInitialFlow || (_flow.size() == I0.size() && _flow.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "nscales > 0", "tensorflow.TensorShapeProto.Dim.name", "tensor_shape.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/tensor_shape.pb.cc", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/graph.pb.cc", "graph.proto", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map_field.h", "Protocol Buffer map usage error:\n", "MapKey::type MapKey is not initialized. ", "Call set methods to initialize MapKey.", "MapKey::GetStringValue", " type does not match\n", "  Expected : ", "  Actual   : ", "tensorflow.NodeDef.name", "tensorflow.NodeDef.op", "tensorflow.NodeDef.input", "tensorflow.NodeDef.device", "tensorflow.NodeDef.AttrEntry.key", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map_field_inl.h", "CHECK failed: this->MapFieldBase::repeated_field_ != NULL: ", "versions.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/versions.pb.cc", "tensor.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/tensor.pb.cc", "tensorflow.AttrValue.placeholder", "attr_value.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/attr_value.pb.cc", "tensorflow.NameAttrList.name", "tensorflow.NameAttrList.AttrEntry.key", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/function.pb.cc", "tensorflow.GradientDef.function_name", "tensorflow.GradientDef.gradient_func", "function.proto", "tensorflow.FunctionDef.Node.ret", "tensorflow.FunctionDef.Node.op", "tensorflow.FunctionDef.Node.arg", "tensorflow.FunctionDef.Node.dep", "tensorflow.FunctionDef.Node.AttrEntry.key", "types.proto", "tensorflow.OpDef.ArgDef.name", "tensorflow.OpDef.ArgDef.description", "tensorflow.OpDef.ArgDef.type_attr", "tensorflow.OpDef.ArgDef.number_attr", "tensorflow.OpDef.ArgDef.type_list_attr", "tensorflow.OpDef.AttrDef.name", "tensorflow.OpDef.AttrDef.type", "tensorflow.OpDef.AttrDef.description", "tensorflow.OpDeprecation.explanation", "tensorflow.OpDef.name", "tensorflow.OpDef.summary", "tensorflow.OpDef.description", "op_def.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/op_def.pb.cc", "opencv-caffe.proto", "/build/master_pack-android/opencv/modules/dnn/misc/caffe/opencv-caffe.pb.cc", "constant", "warp", "Slice", "Split", "Concat", "Reshape", "Flatten", "ResizeNearestNeighbor", "Convolution", "Deconvolution", "Pooling", "ROIPooling", "PSROIPooling", "InnerProduct", "Softmax", "ReLU", "ReLU6", "ChannelsPReLU", "PReLU", "Sigmoid", "TanH", "BNLL", "AbsVal", "Power", "BatchNorm", "MaxUnpool", "Dropout", "Identity", "Silence", "Crop", "Eltwise", "Permute", "PriorBox", "PriorBoxClustered", "Reorg", "Region", "DetectionOutput", "NormalizeBBox", "Normalize", "Shift", "Padding", "Proposal", "Scale", "LSTM", "/build/master_pack-android/opencv/modules/dnn/src/init.cpp", "Convolution-name", "kernel_size", "stride", "bias_term", "num_output", "Identity-name", "identity_%d", "Reorg-name", "reorg_stride", "reorg_%d", "Permute-name", "order", "premute_%d", "pool", "pad_mode", "SAME", "Pooling-name", "pool_%d", "conv_%d", "BatchNorm-name", "has_weight", "has_bias", "bn_%d", "negative_slope", "ReLU-name", "relu_%d", "Concat-name", "axis", "concat_%d", "Region-name", "coords", "classes", "anchors", "classfix", "softmax_tree", "softmax", "detection_out", "ifile.is_open()", "/build/master_pack-android/opencv/modules/dnn/src/darknet/darknet_io.cpp", "Transpose the weights (except for convolutional) is not implemented", "convolutional", "filters", "activation", "linear", "batch_normalize", "kernel_size > 0 && filters > 0", "current_channels > 0", "weightsBlob.isContinuous()", "leaky", "Failed to parse NetParameter file: ", "[net]", "layer_type_size < line.size()", "separator_index < line.size()", "channels", "net->width > 0 && net->height > 0 && net->channels > 0", "Unsupported activation: ", "flipped", "Transpose the convolutional weights is not implemented", "maxpool", "route", "layers", "!bottom_layers.empty()", "reorg", "region", "tree", "!anchors_values.empty()", "classes > 0 && num_of_anchors > 0 && (num_of_anchors * 2) == anchors_vec.size()", "Unknown layer type: ", "Can't find output blob \"", "/build/master_pack-android/opencv/modules/dnn/src/darknet/darknet_importer.cpp", "Duplicate blobs produced by multiple sources", "bboxes.size() == scores.size()", "/build/master_pack-android/opencv/modules/dnn/src/nms.cpp", "score_threshold >= 0", "nms_threshold >= 0", "eta > 0", "/build/master_pack-android/opencv/modules/dnn/src/nms.inl.hpp", "Halide pipeline of ", " layers is not defined.", "/build/master_pack-android/opencv/modules/dnn/src/dnn.cpp", "Inference Engine pipeline of ", "start <= (int)shape.size() && end <= (int)shape.size() && start <= end", "/build/master_pack-android/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp", "Unknown target identifier", "haveHalide()", "haveInfEngine()", "Unknown backend identifier", "!base.empty()", "wrappers.size() == umats.size()", "!umatWrapper.empty()", "it != layers.end()", "Layer with requested id=%d not found", "preferableBackend == DNN_BACKEND_INFERENCE_ENGINE", "Constructor of backend wrapper must be implemented", "image0.dims == 2", "image.depth() == 5", "image.dims == 2 && (nch == 3 || nch == 4)", "nch == 1", "image.dims == 2 && (nch == 1)", "image.size() == image0.size()", "refIt != refCounter.end()", "mapIt != reuseMap.end()", "refIt->second > 0", "Requested layer \"", "\" not found", "layerDesc.isInt() || layerDesc.isString()", "numParam < (int)layerBlobs.size()", "Can't create layer \"", "\" of type \"", "Requested layer \"%s\" was not initialized", "Layer \"", "\" already was registered", "_input", "__NetInputLayer__", "Added layer name \"", "\" must not contain dot symbol", "\" already into net", "outLayerId < inLayerId", "Input #%d of layer \"%s\" already was connected", "outPin.valid() && inpPin.valid()", "Requested blob not found", "Layer \"%s\" produce only %d outputs, the #%d was requested", "!ld.outputBlobsWrappers.empty() && !ld.outputBlobsWrappers[pin.oid].empty()", "inputs.size() == requiredOutputs", "layer != impl->layers.end()", "Requested blob \"", "blob_.depth() == 5", "blob_.dims == 4", "m.dims > 2", "reuseMap.find(user) == reuseMap.end()", "reuseMap.find(host) != reuseMap.end()", "memHosts.find(lp) == memHosts.end()", "preferableTarget == DNN_TARGET_OPENCL", "from.valid()", "ld.requiredOutputs.size() <= outShapes.size()", "ld.inputBlobs[0]->total() == total(shapes[index])", "layerShapesIt != layersShapes.end()", "preferableBackend == DNN_BACKEND_HALIDE", "!ldBot.backendNodes[preferableBackend].empty()", "preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL", "eltwiseData->consumers.size() == 1", "ld.outputBlobs.size() == 1", "ld.outputBlobsWrappers.size() == 1", "curr_output.data == output_slice.data", "firstConvLayerData->outputBlobsWrappers.size() == 1 && ld.inputBlobsWrappers.size() == 1", "output_slice.isContinuous() && output_slice.size == curr_output.size", "!layers[0].outputBlobs.empty()", "layers[0].outputBlobs[i].total()", "preferableBackend != DNN_BACKEND_HALIDE", "!ld.outputBlobsWrappers[i].empty()", "inputs.size()", "inShapes.size() == outShapes.size()", "inShapes.size() == ids.size()", "OPENCV_DNN_DISABLE_MEMORY_OPTIMIZATIONS", "scheduler", "targetId", "backendId", "!field.empty()", "/build/master_pack-android/opencv/modules/dnn/src/tensorflow/tf_importer.cpp", "!content.empty()", "Tensor's data type is not supported", "Required argument \"", "\" not found into dictionary", "map::at", "Input layer not found: ", "Unknown shape of input tensor", "size == (int)dstBlob.total()", "dst_i < total", "src_i < total", "dims == 4", "tensor.dtype() == tensorflow::DT_FLOAT || tensor.dtype() == tensorflow::DT_HALF", "tensor.dtype() == tensorflow::DT_INT32", "dims == 1", "values.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map.h", "CHECK failed: it != end(): ", "key not found: ", "Const input blob for weights not found", "More than one input is Const op", "Const kernel input not found", "Unsupported kernel input", "nodeIdx < netTxt.node_size()", "netTxt.node(nodeIdx).name() == kernel_inp.name", "Dequantize", "layer.input_size() == 3", "const_layers.find(layer.input(i)) != const_layers.end()", "mode", "MIN_FIRST", "hasLayerAttr(layer, \"mode\") && getLayerAttr(layer, \"mode\").s() == \"MIN_FIRST\"", "tensor->dtype() == tensorflow::DT_QUINT8", "qMin.total() == 1", "qMin.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "qMax.total() == 1", "qMax.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "rangeScale >= 0", "const_layers.insert(std::make_pair(name, tensorId)).second", "Const", "const_layers.insert(std::make_pair(name, li)).second", "ksize", "kernel_h", "kernel_w", "Unsupported ksize", "strides", "stride_h", "stride_w", "Unsupported strides", "padding", "Conv2D", "SpaceToBatchND", "DepthwiseConv2dNative", "dilation", "pad_h", "pad_w", "next_layers.size() == 1", "BiasAdd", "BatchToSpaceND", "data_format", "NHWC", "NCHW", "Unknown data_format value: ", "MatMul", "layer.input_size() == 2", "/nchw", "layer_id.find(permName) == layer_id.end()", "Transpose", "perm.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "Only NHWC <-> NCHW permutations are allowed.", "beta", "depth_radius", "local_size", "norm_by_size", "ConcatV2", "AvgPool", "ave_pool_padded_area", "Placeholder", "!begins.empty()", "!sizes.empty()", "begins.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "sizes.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "begin", "scaleMat.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "Maximum", "prod", "paddings.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "paddings", "FusedBatchNorm", "Expected gamma, beta, mean and std", "is_training", "/MVN", "layer_id.find(mvnName) == layer_id.end()", "Conv2DBackpropInput", "Expected output shape, weights and input nodes", "adj_w", "adj_h", "VALID", "BlockLSTM", "Unexpected number of input nodes", "forget_bias", "cell_clip", "use_cell_clip", "use_peephole", "outSize.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "outSize.total() == 2", "align_corners", "L2Normalize", "layer.input_size() == 1", "across_spatial", "channel_shared", "min_size", "max_size", "flip", "clip", "offset", "step", "variance", "aspect_ratio", "scales", "num_classes", "share_location", "background_label_id", "nms_threshold", "top_k", "code_type", "keep_top_k", "confidence_threshold", "loc_pred_transposed", "Tanh", "Relu", "Relu6", "dtype", "transpose_a", "transpose_b", " ... ", " more", "Tensor type is not supported", "Unknown layer type %s in op %s", "dilation.size() == 2 && dilation.get<int>(0) == dilation.get<int>(1)", "!haveConst || layer.input_size() == 2", "MaxPool", "operation", "/build/master_pack-android/opencv/modules/dnn/src/tensorflow/tf_io.cpp", "CHECK", "ReadProtoFromBinaryFile(param_file, param)", "Failed to parse GraphDef file: ", "FAILED: ", "ReadProtoFromBinaryBuffer(data, len, param)", "Failed to parse GraphDef buffer", "ReadProtoFromTextFile(param_file, param)", "ReadProtoFromTextBuffer(data, len, param)", "inputs_arr.total() == outputs_arr.total()", "/build/master_pack-android/opencv/modules/dnn/src/layers/lrn_layer.cpp", "inputs.size() > 0", "inputs.size() == outputs.size()", "inputs[i]->dims == 4", "Unimplemented mode of LRN layer", "norm_region", "ACROSS_CHANNELS", "WITHIN_CHANNEL", "Unknown region type \"", "LRN layer supports only positive odd values for local_size", "inputs[0]->total() == outputs[i].total()", "/build/master_pack-android/opencv/modules/dnn/src/layers/split_layer.cpp", "inputs.size() == 1", "top_count", "outputsCount >= 0", "inputs.size() == 1 && outputs.size() == 1", "/build/master_pack-android/opencv/modules/dnn/src/layers/normalize_bbox_layer.cpp", "inputs[0]->total() == outputs[0].total()", "scale.total() == channels", "pnorm > 0", "/build/master_pack-android/opencv/modules/dnn/src/layers/shift_layer.cpp", "blobs.size() > 0", "blobs.size() == 1", "/build/master_pack-android/opencv/modules/dnn/src/layers/convolution_layer.cpp", "inputs[i]->type() == input.type()", "blobs.size() >= 1 && blobs.size() <= 2", "blobs[0].dims == 4 && blobs[0].size[3] == kernel.width && blobs[0].size[2] == kernel.height", "input.dims == 4 && (input.type() == 5 || input.type() == 6)", "inputs[i]->dims == 4 && inputs[i]->size[1] == input.size[1]", "inputs[i]->size[2] == input.size[2] && inputs[i]->size[3] == input.size[3]", "biasvec.size() == outCn + 2", "!weightsMat.empty()", "w.empty() || outCn == w.total()", "b.empty() || outCn == b.total()", "group", "numOutput % ngroups == 0", "adjustPad.width < stride.width && adjustPad.height < stride.height", "!blobs.empty()", "input.dims == 4 && output.dims == 4", "input.size[0] == output.size[0]", "weights.rows == output.size[1]", "weights.cols == (input.size[1]/ngroups)*kernel.width*kernel.height", "input.type() == output.type()", "input.type() == weights.type()", "input.type() == 5", "input.isContinuous()", "output.isContinuous()", "biasvec.size() == (size_t)output.size[1]+2", "inputs.size() == (size_t)1", "inputs[0]->size[1] % blobs[0].size[1] == 0", "outputs.size() == 1", "inputs[0]->data != outputs[0].data", "outputs[0].size[1] % ngroups == 0", "m.isContinuous() && m.type() == 5 && (int)m.total() == outCn", "blobs.size() != 0", "ngroups > 0 && inpCn % ngroups == 0 && outCn % ngroups == 0", "!hasBias() || blobs[1].total() == (size_t)blobs[0].size[0]", "inputs.size() != 0", "Unsupported padding mode ", "outCn % blobs[0].size[1] == 0", "inpCn % ngroups == 0 && outCn % ngroups == 0", "blobs[0].size[0] == inpCn", "!hasBias() || blobs[1].total() == (size_t)numOutput", "2 == inputs.size()", "/build/master_pack-android/opencv/modules/dnn/src/layers/crop_layer.cpp", "number of offset values specified must be equal to the number of dimensions following axis.", "invalid crop parameters or blob sizes", "inputs.size() == 2", "Unsupported padding mode", "/build/master_pack-android/opencv/modules/dnn/src/layers/layers_common.cpp", "kernel_size (or kernel_h and kernel_w) not specified", "kernelH > 0 && kernelW > 0", "padH >= 0 && padW >= 0 && strideH > 0 && strideW > 0", "dilationH > 0 && dilationW > 0", "global_pooling", "In global_pooling mode, kernel_size (or kernel_h and kernel_w) cannot be specified", "In global_pooling mode, pad_h and pad_w must be = 0, and stride_h and stride_w must be = 1", "reflect", "/build/master_pack-android/opencv/modules/dnn/src/layers/padding_layer.cpp", "inputs[0]->dims == 4", "outputs[0].dims == 4", "padTop < inpHeight", "padBottom < inpHeight", "padLeft < inpWidth", "padRight < inpWidth", "Unknown padding type: ", "Only spatial reflection padding is supported.", "input_dims", "params.has(\"paddings\")", "(paddingsParam.size() & 1) == 0", "paddings[i].first >= 0", "paddings[i].second >= 0", "inpShape.size() >= paddings.size()", "inputDims == -1 || inpShape.size() == inputDims || inpShape.size() > paddings.size()", "reorgStride > 0", "/build/master_pack-android/opencv/modules/dnn/src/layers/reorg_layer.cpp", "total(outputs[0]) == total(inputs[0])", "outputs[0][0] > 0 && outputs[0][1] > 0 && outputs[0][2] > 0 && outputs[0][3] > 0", "out.size[0] == inp.size[order[0]] && out.size[1] == inp.size[order[1]] && out.size[2] == inp.size[order[2]] && out.size[3] == inp.size[order[3]]", "/build/master_pack-android/opencv/modules/dnn/src/layers/permute_layer.cpp", "outputs[k].total() == inputs[k]->total()", "inp.dims == numAxes && inp.size == inputs[0]->size", "out.dims == numAxes && out.size == outputs[0].size", "inp.isContinuous() && out.isContinuous()", "inp.type() == 5 && out.type() == 5", "Too many (> 4) orders of dimensions in Permute layer", "Orders of dimensions in Permute layer parametermust be in [0...3] interval", "Permute layer parameter contains duplicated orders.", "(int)_numAxes == inp0.dims", "(int)_numAxes == inputs[0].size()", "inputs[i].size() == 4", "inputs[i][2] == shapeBefore[2] && inputs[i][3] == shapeBefore[3]", "total(inputs[i]) == total(shapeAfter)", "/build/master_pack-android/opencv/modules/dnn/src/layers/max_unpooling_layer.cpp", "input.total() == indices.total()", "input.size[0] == 1", "input.size[1] == outBlob.size[1]", "i_n=", "i_c=", "i_wh=", "index=", "maxval=", "outPlaneTotal=", "input.size=", "indices.size=", "outBlob=", "0 <= index && index < outPlaneTotal", "pool_k_w", "pool_k_h", "pool_pad_w", "pool_pad_h", "pool_stride_w", "pool_stride_h", "total(inputs[0]) == total(inputs[1])", "blobs.size() >= 2", "/build/master_pack-android/opencv/modules/dnn/src/layers/batch_norm_layer.cpp", "inpBlob.dims == 2 || inpBlob.dims == 4", "blobs.size() >= 3", "scale_bias", "blobs[1].total() == n && blobs[0].isContinuous() && blobs[1].isContinuous() && blobs[0].type() == 5 && blobs[1].type() == 5", "blobs[2].type() == 5", "(size_t)weightsBlobIndex < blobs.size()", "w.isContinuous() && w.type() == 5 && w.total() == (size_t)n", "(size_t)biasBlobIndex < blobs.size()", "b.isContinuous() && b.type() == 5 && b.total() == (size_t)n", "!allocated", "/build/master_pack-android/opencv/modules/dnn/src/layers/recurrent_layers.cpp", "!allocated || total(outTailShape) == total(outTailShape_)", "inp0.dims >= 2", "inp0.total(2) == numX", "inp0.type() == dtype", "input.size() >= 1 && input.size() <= 2", "Function supports only floating point types", "Wh.dims == 2 && Wx.dims == 2", "Wh.rows == Wx.rows", "Wh.rows == 4*Wh.cols", "Wh.rows == (int)bias.total()", "Wh.type() == Wx.type() && Wx.type() == bias.type()", "blobs.size() == 6", "blobs[i].rows == Wh.cols && blobs[i].cols == Wh.cols", "blobs[i].type() == bias.type()", "use_timestamp_dim", "produce_cell_output", "input.size() == 1", "total(outTailShape) == numOut", "!usePeephole && blobs.size() == 3 || usePeephole && blobs.size() == 6", "inp0.dims >= 2 && (int)inp0.total(2) == numInp", "inp0.dims >= 2 && (int)inp0.total(1) == numInp", "inputs.size() >= 1 && inputs.size() <= 2", "total(outTailShape_) == _numOut", "inp0.size() >= 2 && total(inp0, 2) == _numInp", "inp0.size() >= 2 && total(inp0, 1) == _numInp", "W_hh.dims == 2 && W_xh.dims == 2", "W_ho.size[0] == (int)b_o.total()", "W_ho.size[1] == W_hh.size[1]", "W_hh.size[0] == W_xh.size[0] && W_hh.size[0] == W_hh.size[1] && (int)b_h.total() == W_xh.size[0]", "0 <= startDim && startDim <= endDim", "srcMat.dims == 2 && srcMat.cols == weights.cols && dstMat.rows == srcMat.rows && dstMat.cols == weights.rows && srcMat.type() == weights.type() && weights.type() == dstMat.type() && srcMat.type() == 5 && (biasMat.empty() || (biasMat.type() == srcMat.type() && biasMat.isContinuous() && (int)biasMat.total() == dstMat.cols))", "/build/master_pack-android/opencv/modules/dnn/src/layers/fully_connected_layer.cpp", "1 <= blobs.size() && blobs.size() <= 2", "blobs[0].dims >= 2 && (size_t)(innerSize * numOutput) == blobs[0].total()", "!bias || (blobs.size() == 2 && (size_t)numOutput == blobs[1].total())", "blobs[0].dims == 2", "!bias || (size_t)numOutput == blobs[1].total()", "/build/master_pack-android/opencv/modules/dnn/src/layers/prior_box_layer.cpp", " layer parameter does not contain ", " parameter.", "varianceParameterRetrieved", "varianceSize == 4", "variance > 0", "normalized_bbox", "_maxSize > _minSize", "widths.size() == heights.size()", "_aspectRatios.empty()", "!params.has(\"min_size\")", "!params.has(\"max_size\")", "!_aspectRatios.empty()", "_minSize > 0", "_boxWidths.size() == _boxHeights.size()", "step_h", "step_w", "!params.has(\"step\")", "_stepY > 0.", "_stepX > 0.", "step > 0", "offset_h", "offset_w", "!params.has(\"offset\")", "params.has(\"offset_h\")", "params.has(\"offset_w\")", "_offsetsX.size() == _offsetsY.size()", "!inputs.empty()", "outputs.size() == sliceRanges.size()", "/build/master_pack-android/opencv/modules/dnn/src/layers/slice_layer.cpp", "sliceRanges[i].size() <= inpShape[-1]", "clamped.start < clamped.end", "clamped.end <= axisSize", "slice_point", "!params.has(\"begin\") && !params.has(\"size\") && !params.has(\"end\")", "params.has(\"size\") ^ params.has(\"end\")", "begins.size() == sizesOrEnds.size()", "start >= 0", "size == -1 || size > 0", "end < 0 || end > start", "sliceRanges[i].size() <= inpShape.size()", "0 <= axis && axis < inpShape.size()", "requiredOutputs > 0 && inpShape[axis] % requiredOutputs == 0", "/build/master_pack-android/opencv/modules/dnn/src/layers/eltwise_layer.cpp", "1 < dst.dims && dst.dims <= 4", "dst.type() == 5", "dst.isContinuous()", "srcs[i]->size == dst.size && srcs[i]->type() == dst.type() && srcs[i]->isContinuous()", "dst.total() == dst.size[0] * p.channels * p.planeSize", "coeffs.size() == (size_t)nsrcs", "coeffs.empty() || coeffs.size() == (size_t)nsrcs", "Unknown operaticon type \"", "coeff", "inputs.size() >= 2", "coeffs.size() == 0 || coeffs.size() == inputs.size()", "op == SUM || coeffs.size() == 0", "inputs[0] == inputs[i]", "m.dims == 4", "/build/master_pack-android/opencv/modules/dnn/src/layers/proposal_layer.cpp", "m.size[0] == 1", "(channels & 1) == 0", "feat_stride", "base_size", "pre_nms_topn", "post_nms_topn", "nms_thresh", "ratio", "CENTER_SIZE", "variance_encoded_in_target", "bboxDeltas->dims == 4", "inputs.size() == 3", "layerOutputs.size() == 1", "layerInternals.empty()", "scores.size() == 4", "(scores[1] & 1) == 0", "internals.size() == 3", "imInfo.total() >= 2", "numDets <= keepTopAfterNMS", "num_axes", "numAxes >= -1", "/build/master_pack-android/opencv/modules/dnn/src/layers/reshape_layer.cpp", "total(srcShape, srcRange.start, srcRange.end) == maskTotal", "0 <= srcRange.start && srcRange.start <= srcRange.end && srcRange.end <= srcShapeSize", "Copy dim[%d] (which has zero size) is out of the source shape bounds", "Duplicate of inferred dim (which is denoted by -1)", "maskShape[i] >= -1", "Can't infer a dim denoted by -1", "srcTotal == dstTotal", "/build/master_pack-android/opencv/modules/dnn/src/layers/region_layer.cpp", "nmsThreshold >= 0.", "coords == 4", "classes >= 1", "anchors >= 1", "useSoftmaxTree || useSoftmax", "inputs.size() >= 1", "Yolo9000 is not implemented", "inputs[0][3] == (1 + coords + classes)*anchors", "src.type() == 5", "/build/master_pack-android/opencv/modules/dnn/src/layers/softmax_layer.cpp", "src.isContinuous() && dst.isContinuous()", "log_softmax", "/build/master_pack-android/opencv/modules/dnn/src/layers/detection_output_layer.cpp", "Could not find confidence predictions for label %d", "Could not find location predictions for label %d", "center_size", "CORNER", "_nmsThreshold > 0.", "prior_bboxes.size() == prior_variances.size()", "prior_bboxes.size() == bboxes.size()", "prior_width > 0", "prior_height > 0", "Unknown type.", "num_bboxes == 0 || prior_variances[0].size() == 4", "/build/master_pack-android/opencv/modules/dnn/src/layers/../nms.inl.hpp", "idx < scores.size()", "inputs.size() >= 3", "inputs[0][0] == inputs[1][0]", "(numPriors * _numLocClasses * 4) == inputs[0][1]", "int(numPriors * _numClasses) == inputs[1][1]", "numLocClasses == 1", "all_loc_preds.size() == num", "_bboxesNormalized || inputs.size() >= 4", "inputs[3]->dims == 4", "count == numKept", "scale_train", "dropout_ratio", "scale > 0", "/build/master_pack-android/opencv/modules/dnn/src/layers/blank_layer.cpp", "normalize_variance", "across_channels", "/build/master_pack-android/opencv/modules/dnn/src/layers/mvn_layer.cpp", "/build/master_pack-android/opencv/modules/dnn/src/layers/scale_layer.cpp", "!blobs.empty() || inputs.size() == 2", "total(inpShape, axis, endAxis) == numWeights", "!hasBias || numWeights == bias.total()", "inpBlob.type() == 5 && outBlob.type() == 5", "inputs.size() == 2 && blobs.empty() || blobs.size() == 1 + hasBias", "params.has(\"width\")", "/build/master_pack-android/opencv/modules/dnn/src/layers/resize_nearest_neighbor_layer.cpp", "params.has(\"height\")", "Nearest neighborhood resize with align_corners=true is not implemented", "inputs[0].size() == 4", "src.size == dst.size && src.type() == dst.type() && src.isContinuous() && dst.isContinuous() && src.type() == 5", "/build/master_pack-android/opencv/modules/dnn/src/layers/elementwise_layers.cpp", "scale.isContinuous() && scale.type() == 5", "0 <= cn0 && cn0 < cn1 && cn1 <= (int)scale.total()", "min_value", "max_value", "minValue <= maxValue", "power", "params.blobs.size() == 1", "inp.isContinuous() && inp.type() == 5 && inp.dims == 4 && inp.size[0] == output.size[0] && inp.size[2] == output.size[2] && inp.size[3] == output.size[3]", "/build/master_pack-android/opencv/modules/dnn/src/layers/concat_layer.cpp", "nchannels == output.size[1]", "output.isContinuous() && output.type() == 5", "curShape.size() == outputs[0].size()", "Inconsistent shape for ConcatLayer", "end_axis", "/build/master_pack-android/opencv/modules/dnn/src/layers/flatten_layer.cpp", "startAxis >= 0", "endAxis >= startAxis && endAxis < (int)numAxes", "outputShapeVec.size() <= 4", "inputs[i] == inputs[0]", "/build/master_pack-android/opencv/modules/dnn/src/layers/pooling_layer.cpp", "roisData[0] < src->size[0]", "stochastic", "Unknown pooling type \"", "pooled_w", "pooled_h", "output_dim", "group_size", "Cannot determine pooling type", "ceil_mode", "spatial_scale", "src.isContinuous()", "src.dims == 4", "dst.dims == 4", "((poolingType == ROI || poolingType == PSROI) && dst.size[0] ==rois.size[0] || src.size[0] == dst.size[0])", "poolingType == PSROI || src.size[1] == dst.size[1]", "(mask.empty() || (mask.type() == src.type() && mask.size == dst.size))", "outputs.size() == 2", "Not implemented", "(out.height - 1) * stride.height < in.height + pad.height", "(out.width - 1) * stride.width < in.width + pad.width", "psRoiOutChannels * pooledSize.width * pooledSize.height == inputs[0][1]", "/build/master_pack-android/opencv/modules/dnn/src/op_inf_engine.cpp", "dfself->handle != __null", "/build/master_pack-android/opencv/modules/dnn/src/torch/THDiskFile.cpp", "unable to obtain disk file offset (maybe a long overflow occurred)", "unable to seek at end of file", "unable to seek at position %d", "dfself->file.isReadable", "read error: read %d blocks instead of %d", "%d\n\r", "can not allocate buffer", "(strlen(format) >= 2 ? (format[0] == '*') && (format[1] == 'a' || format[1] == 'l') : 0)", "read error: failed to allocate buffer", "read error: read 0 blocks instead of 1", "size == 0 || size == 4 || size == 8", "error: cannot disable buffer", "isReadable && !isWritable", "cannot open <%s> in mode %c%c", "cannot allocate memory for self", "THDiskFile_mode(mode, &isReadable, &isWritable)", "Double", "Float", "Cuda", "Byte", "Char", "Short", "Long", "Unknown type \"", "\" of torch class \"", "/build/master_pack-android/opencv/modules/dnn/src/torch/torch_importer.cpp", "file && THFile_isOpened(file)", "typeidx == TYPE_TORCH || (typeidx == TYPE_NIL && ndims == 0)", "Storage", "torch.", "typeStorage >= 0 && typeTensor == typeStorage", "Storage has insufficent number of elemements for requested Tensor", "padH", "padW", "Sequential", "Inception", "dimension", "torchMerge", "DepthConcat", "Parallel", "inputDimension", "outputDimension", "torchSplit", "torchReshape", "ConcatTable", "JoinTable", "CAddTable", "torchCAddTable", "SpatialMaxUnpooling", "indices_blob_id", "torchMaxUnpooling", "poolingLayer.first != -1", "Unexpected torch container: ", "module->params.has(\"indices_blob_id\")", "torch_index", "SpatialConvolutionMM", "weight", "tensorParams.count(\"weight\")", "nOutputPlane", "layerParams.blobs[0].dims == 2", "SpatialMaxPooling", "SpatialAveragePooling", "indices", "count_include_pad", "scalarParams.has(\"ceil_mode\")", "View", "scalarParams.has(\"size\")", "batchMode", "SpatialBatchNormalization", "InstanceNormalization", "BatchNormalization", "scalarParams.has(\"eps\")", "running_mean", "nOutput", "scalarParams.has(\"nOutput\")", "running_var", "running_std", "tensorParams[\"weight\"].second.total() == outputChannels", "tensorParams[\"weight\"].second.total() == 1", "SpatialDropout", "scalarParams.has(\"p\")", "TotalVariation", "scalarParams.has(\"pad\") && scalarParams.has(\"dim\")", "Padding with offset is not implemented", "nInputDim", "SpatialDilatedConvolution", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"dilationW\")&& scalarParams.has(\"dilationH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "dilation_w", "dilationW", "dilation_h", "dilationH", "SpatialFullConvolution", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"adjW\")&& scalarParams.has(\"adjH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "adjW", "adjH", "tensorParams.count(\"indices\")", "SoftMax", "LogSoftMax", "SpatialCrossMapLRN", "scalarParams.has(\"alpha\")", "scalarParams.has(\"beta\")", "scalarParams.has(\"k\")", "Square", "Sqrt", "constant_scalar", "scalarParams.has(\"constant_scalar\")", "SpatialZeroPadding", "SpatialReflectionPadding", "pad_l", "scalarParams.has(\"pad_l\")", "pad_r", "scalarParams.has(\"pad_r\")", "pad_t", "scalarParams.has(\"pad_t\")", "pad_b", "scalarParams.has(\"pad_b\")", "SpatialZeroPadding in cropping mode is not implemented", "Unknown nn class \"", "Unsupported Torch class \"", "SpatialConvolution", "SpatialLPPooling", "Linear", "MulConstant", "ShaveImage", "Tensor", "Unsupported Lua type", "luaType == TYPE_TABLE && readedIndexes.count(index) == 0", "importer.tensors.size() == 1", "rootModule == __null", "cunn.", "cudnn.", "fbcunn.", "blob->data_size() != 0", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_shrinker.cpp", "_param", "\" in prototxt", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_importer.cpp", "pbBlob.data_size() == (int)dstBlob.total()", "pbBlob.raw_data_type() == caffe::FLOAT16", "raw_data.size() / 2 == (int)dstBlob.total()", "Input", "accuracy", "bnll", "concat", "conv", "dropout", "euclidean_loss", "flatten", "hdf5_data", "hdf5_output", "im2col", "images", "infogain_loss", "innerproduct", "multinomial_logistic_loss", "relu", "sigmoid", "softmax_loss", "split", "tanh", "window_data", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_io.cpp", "Unknown layer name: ", "Accuracy", "ArgMax", "ContrastiveLoss", "Data", "DummyData", "EuclideanLoss", "HDF5Data", "HDF5Output", "HingeLoss", "Im2col", "ImageData", "InfogainLoss", "MemoryData", "MultinomialLogisticLoss", "SigmoidCrossEntropyLoss", "SoftmaxWithLoss", "WindowData", "Threshold", "Unknown V1LayerParameter layer type: ", "Unknown parameter num_output for layer type ", "Unknown parameter biasterm for layer type ", "Unknown parameter weight_filler for layer type ", "Unknown parameter bias_filler for layer type ", "Unknown parameter pad for layer type ", "Unknown parameter kernelsize for layer type ", "Unknown parameter group for layer type ", "Unknown parameter stride for layer type ", "Unknown pool method ", "Unknown parameter pool for layer type ", "Unknown parameter dropout_ratio for layer type ", "Unknown parameter local_size for layer type ", "Unknown parameter alpha for layer type ", "Unknown parameter beta for layer type ", "Unknown parameter k for layer type ", "Unknown parameter source for layer type ", "Unknown parameter batchsize for layer type ", "Unknown parameter rand_skip for layer type ", "Unknown parameter shuffle for layer type ", "Unknown parameter new_height for layer type ", "Unknown parameter new_width for layer type ", "Unknown parameter concat_dim for layer type ", "Unknown parameter det_fg_threshold for layer type ", "Unknown parameter det_bg_threshold for layer type ", "Unknown parameter det_fg_fraction for layer type ", "Unknown parameter det_context_pad for layer type ", "Unknown parameter det_crop_mode for layer type ", "Unknown parameter hdf5_output_param for layer type ", "Unknown blob_share_mode: ", "Input NetParameter has V0 layer -- ignoring.", "Input NetParameter to be upgraded already specifies 'layer' ", "fields; these will be ignored for the upgrade.", "Upgrade of input layer ", " failed.", "Unknown blob input ", " to layer ", "(layer_param.type() == \"conv\") || (layer_param.type() == \"pool\")", "Padding layer input to non-convolutional / non-pooling layer type ", "layer_connection.bottom_size()=1", "Conv Layer takes a single blob as input.", "source_layer.bottom_size()=1", "Padding Layer takes a single blob as input.", "source_layer.top_size()=1", "Padding Layer produces a single blob as output.", "Attempting to upgrade input file specified using deprecated ", "V0LayerParameter: ", "Warning: had one or more problems upgrading ", "V0NetParameter to NetParameter (see above); continuing anyway.", "Successfully upgraded file specified using deprecated ", "V0LayerParameter", "Note that future Caffe releases will not support ", "V0NetParameter; use ./build/tools/upgrade_net_proto_text for ", "prototxt and ./build/tools/upgrade_net_proto_binary for model ", "weights upgrade this and any other net protos to the new format.", "transformation parameters: ", "data transformation parameters.", "Note that future Caffe releases will only support ", "transform_param messages for transformation fields.", "V1LayerParameter: ", "V1LayerParameter (see above); continuing anyway.", "V1LayerParameter", "Attempting to upgrade batch norm layers using deprecated ", "params: ", "Successfully upgraded batch norm layers using deprecated ", "params.", "Failed to parse NetParameter buffer", "memory buffer", "fs.is_open()", "Can't open \"", "size.width > 0", "/build/master_pack-android/opencv/modules/imgcodecs/src/loadsave.cpp", "size.width <= (1<<20)", "size.height > 0", "size.height <= (1<<20)", "pixels <= (1<<30)", "failed to write image data to temporary file", "unable to remove temporary file:", "imdecode_('", "'): can't read header: ", "'): can't read header: unknown exception", "'): can't read data: ", "'): can't read data: unknown exception", "!buf.empty() && buf.isContinuous()", "imread_('", "_buf && ((_buf->type) & (1 << 14))", "channels == 1 || channels == 3 || channels == 4", "could not find encoder for the specified extension", "encoder->isFormatSupported(0)", "code", "f != 0", "i < (50)*2", "could not find a writer for the specified extension", "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", "params.size() <= (50)*2", "imreadmulti_('", "Inner function failed.", "/build/master_pack-android/opencv/modules/imgcodecs/src/utils.cpp", "Source image must have 1, 3 or 4 channels", "Destination image must be 8u", "Destination image must have 1 or 3 channels", "swap_rb", "Unsupported combination of input/output formats", "WebP files (*.webp)", "OpenEXR Image files (*.exr)", "depth == 5", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_exr.cpp", "channels == 3 || channels == 1", "IMWRITE_EXR_TYPE is invalid or not supported", "Portable arbitrary format (*.pam)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_pam.cpp", "WIDTH %d\n", "HEIGHT %d\n", "DEPTH %d\n", "MAXVAL %d\n", "TUPLTYPE %s\n", "ENDHDR\n", "Invalid header", "JPEG-2000 files (*.jp2)", "0 == (((image)->tlx_)) && \"not supported\"", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_jpeg2000.cpp", "0 == (((image)->tly_)) && \"not supported\"", "depth == 0 || depth == depth_i", "sgnd == 0 && \"not supported\"", "xstart == 0 && \"not supported\"", "ystart == 0 && \"not supported\"", "xstep == 1 && \"not supported\"", "ystep == 1 && \"not supported\"", "xend == m_width", "yend == m_height", "depth == 8 || depth == 16", "cntcmpts == 1 || cntcmpts == 3", "JPEG 2000 LOADER ERROR: cannot convert colorspace", "JPEG 2000 LOADER ERROR: unable to create colorspace", "JPEG2000 LOADER ERROR: failed to read component", "JPEG2000 LOADER ERROR: colorspace conversion failed", "result == true", "Windows bitmap (*.bmp;*.dib)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_bmp.cpp", "clrused >= 0 && clrused <= 256", "(size_t)sz < _src.size()", "Invalid/unsupported mode", "Radiance HDR (*.hdr;*.pic)", "#?RGBE", "#?RADIANCE", "input_img.channels() == 3 || input_img.channels() == 1", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_hdr.cpp", "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", "JPEG files (*.jpeg;*.jpg;*.jpe)", "Raw image encoder error: ", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_base.cpp", "Sun raster files (*.sr;*.ras)", "m_offset == 32 + m_maplength", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_sunras.cpp", "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_pxm.cpp", "val <= 0x7fffffff && \"PXM: ReadNumber(): result is too large\"", "P%c\n%s%d %d\n", "# Generated by OpenCV 3.4.1\n", "header_sz > 0", "sz > 0", "channels == 1", "depth == 8", "% 4d", "% 6d", "Portable bitmap(.pgm) expects gray image", "Portable bitmap(.ppm) expects BGR image", "For portable bitmap(.pbm) type must be CV_8UC1", "PXM::readHeader(): unknown C++ exception", "Portable image format - auto (*.pnm)", "Portable image format - monochrome (*.pbm)", "Portable image format - gray (*.pgm)", "Portable image format - color (*.ppm)", "m_maxval < 256", "((m_type) & ((1 << 3) - 1)) == 0", "m_bpp is not supported", "PXM::readData(): unknown exception", "TIFF Files (*.tiff;*.tif)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_tiff.cpp", "decoder", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_png.cpp", "PNG input buffer is incomplete", "Portable Network Graphics files (*.png)", "1.6.34", "encoder && encoder->m_buf", "isOpened()", "/build/master_pack-android/opencv/modules/imgcodecs/src/bitstrm.cpp", "pos >= m_block_pos", "pos >= 0", "Unexpected end of input stream", "isOpened() && pos >= 0", "buf.isContinuous()", "bytes >= 0", "m_current >= old", "current < m_end", "data && m_current && count >= 0", "RGBE read error", "/build/master_pack-android/opencv/modules/imgcodecs/src/rgbe.cpp", "RGBE write error", "RGBE bad file format: ", "RGBE error: \n", "RGBE", "GAMMA=%g\n", "EXPOSURE=%g\n", "FORMAT=32-bit_rle_rgbe\n\n", "-Y %d +X %d\n", "#?%s\n", "FORMAT=32-bit_rle_rgbe\n", "GAMMA=%g", "missing blank line after FORMAT specifier", "missing FORMAT specifier", "-Y %d +X %d", "missing image size specifier", "EXPOSURE=%g", "wrong scanline width", "unable to allocate buffer space", "bad scanline data", "OPENCV_VIDEOCAPTURE_DEBUG", "VIDEOIO(%s): trying ...\n", "cvCreateFileCapture_Images (filename)", "VIDEOIO(%s): result=%p ...\n", "VIDEOIO(%s): raised OpenCV exception:\n\n%s\n", "VIDEOIO(%s): raised C++ exception:\n\n%s\n", "VIDEOIO(%s): raised unknown C++ exception!\n\n", "cvCreateVideoWriter_Images(filename)", "result || fps != 0", "/build/master_pack-android/opencv/modules/videoio/src/cap.cpp", "name != __null", "/build/master_pack-android/opencv/modules/videoio/src/cap_images.cpp", ".avi", ".AVI", ".Avi", "fps >= 1", "/build/master_pack-android/opencv/modules/videoio/src/cap_mjpeg_encoder.cpp", "data && width > 0 && height > 0", "too big maximum Huffman code size", "imgWidth == frameWidth && imgHeight == frameHeight", "imgWidth == frameWidth && imgHeight == frameHeight && channels == 3", "imgWidth == frameWidth && imgHeight == frameHeight*3", "Invalid combination of specified video colorspace and the input image colorspace", "wsz == wsz0", "/build/master_pack-android/opencv/modules/videoio/src/container_avi.cpp", "%c%c%c%c", "More than one video stream found within AVI/AVIX list. Stream %c%cdc would be ignored\n", "Unexpected end of file while searching for %s list\n", "Unexpected element. Expected: %s. Got: %s.\n", "Unexpected list type. Expected: %s. Got: %s.\n", "Unexpected end of file while searching for %s chunk\n", "number_of_streams < 0xFF", "m_f && data && m_current && count >= 0", "delta < m_current - m_start", "pos < (1u<<31)", "fourcc != 0", "Frame offset points outside movi section.\n", "Failed to parse avi: index was not found\n", "chunk.m_size <= 0xFFFF", "/build/master_pack-android/opencv/modules/highgui/src/window.cpp", "The library is compiled without QT support", "The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Carbon support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "size.width>0 && size.height>0", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvSetTrackbarMin", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "OPENCV_LEGACY_WAITKEY", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "Select a ROI and then press SPACE or ENTER button!", "Cancel the selection process by pressing c button!", "ROI selector", "Finish the selection process by pressing ESC button!", "Feature2D", "/build/master_pack-android/opencv/modules/features2d/src/feature2d.cpp", "masks.size() == nimages", "keypoints.size() == nimages", "_descriptors.kind() == _InputArray::STD_VECTOR_MAT", "indexParams", "ip.type() == FileNode::SEQ", "/build/master_pack-android/opencv/modules/features2d/src/matchers.cpp", "ip[i].type() == FileNode::MAP", "searchParams", "sp.type() == FileNode::SEQ", "sp[i].type() == FileNode::MAP", "globalDescIdx < size()", "imgIdx < (int)startIdxs.size()", "globalIdx < (int)size()", "(globalDescIdx>=0) && (globalDescIdx < size())", "masks.size() == imageCount", "masks[i].rows == queryDescriptorsCount && masks[i].cols == rows && masks[i].type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", "knn > 0", "maxDistance > std::numeric_limits<float>::epsilon()", "_indexParams", "_searchParams", "FlannBased", "BruteForce", "BruteForce-SL2", "BruteForce-L1", "BruteForce-Hamming", "BruteForce-HammingLUT", "BruteForce-Hamming(2)", "Unknown matcher name", "Specified descriptor matcher type is not supported.", "typename", "deep clone functionality is not implemented, because Flann::Index has not copy constructor or clone method ", "knnMatches[i].size() <= 1", "imageCount > 0", "dim > 0", "descriptors[i].cols == dim && descriptors[i].type() == type", "trainDescCollection.size() == 0", "_queryDescriptors.type() == trainDescType", "(int64)imgCount*IMGIDX_ONE < 0x7fffffff", "trainDescCollection[iIdx].rows < IMGIDX_ONE", "_descriptors.isUMat() || _descriptors.isUMatVector() || _descriptors.isMat() || _descriptors.isMatVector()", ".BRISK", "/build/master_pack-android/opencv/modules/features2d/src/brisk.cpp", "layer + 1 < layers_", "layer > 0", "srcimg.cols / 2 == dstimg.cols", "srcimg.rows / 2 == dstimg.rows", "(srcimg.cols / 3) * 2 == dstimg.cols", "(srcimg.rows / 3) * 2 == dstimg.rows", "radiusList.size() != 0 && radiusList.size() == numberList.size()", "noShortPairs_ < indSize", "iter->i < points_ && iter->j < points_", ".KAZE", "extended", "upright", "octaves", "sublevels", "diffusivity", "! img1_32.empty()", "/build/master_pack-android/opencv/modules/features2d/src/kaze.cpp", "(!desc.rows || desc.cols == descriptorSize())", "(!desc.rows || (desc.type() == descriptorType()))", "pixel && offsets", "/build/master_pack-android/opencv/modules/features2d/src/agast_score.cpp", "!descriptors.empty()", "/build/master_pack-android/opencv/modules/features2d/src/bagofwords.cpp", "descriptors[0].cols == _descriptors.cols", "descriptors[0].type() == _descriptors.type()", "!_descriptors.empty()", "!vocabulary.empty()", "queryIdx == (int)i", "!img.empty()", "/build/master_pack-android/opencv/modules/features2d/src/draw.cpp", "Incorrect type of input image.\n", "!outImage.empty()", "outImg has size less than need to draw img1 and img2 together", "i1 >= 0 && i1 < static_cast<int>(keypoints1.size())", "i2 >= 0 && i2 < static_cast<int>(keypoints2.size())", "matchesMask must have the same size as matches1to2", ".AgastFeatureDetector", "/build/master_pack-android/opencv/modules/features2d/src/agast.cpp", "minSize >= 0", "/build/master_pack-android/opencv/modules/features2d/src/keypoint.cpp", "maxSize >= 0", "minSize <= maxSize", ".GFTTDetector", "/build/master_pack-android/opencv/modules/features2d/src/gftt.cpp", ".ORB", "Wrong wta_k. It can be only 2, 3 or 4.", "/build/master_pack-android/opencv/modules/features2d/src/orb.cpp", "firstLevel_ >= 0", "firstLevel >= 0", "img.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) && blockSize*blockSize <= 2048", "patchSize >= 2", "level >= 0", "0 <= level", "wta_k == 2 || wta_k == 3 || wta_k == 4", "/build/master_pack-android/opencv/modules/features2d/src/fast_score.cpp", ".FastFeatureDetector", "/build/master_pack-android/opencv/modules/features2d/src/fast.cpp", "miny < maxy", "/build/master_pack-android/opencv/modules/features2d/src/evaluation.cpp", "dr > 1.1920928955078125e-7F", "!H.empty() && H.cols == 3 && H.rows == 3", "fdetector must not be empty when keypoints1 or keypoints2 is empty", "matches1to2.size() == correctMatches1to2Mask.size()", ".AKAZE", "descriptor", "descriptor_channels", "descriptor_size", "! image.empty()", "/build/master_pack-android/opencv/modules/features2d/src/akaze.cpp", "(descriptors.empty() || descriptors.cols() == descriptorSize())", "(descriptors.empty() || (descriptors.type() == descriptorType()))", ".MSER", "ptrofs != 0", "/build/master_pack-android/opencv/modules/features2d/src/mser.cpp", "Input image is too small. Expected at least 3x3", "src.type() == (((0) & ((1 << 3) - 1)) + (((3)-1) << 3)) || src.type() == (((0) & ((1 << 3) - 1)) + (((4)-1) << 3))", ".SimpleBlobDetector", "thresholdStep", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "Blob detector only supports 8-bit images!", "/build/master_pack-android/opencv/modules/features2d/src/blobdetector.cpp", "src.cols / 2 == dst.cols", "/build/master_pack-android/opencv/modules/features2d/src/kaze/nldiffusion_functions.cpp", "src.rows / 2 == dst.rows", "evolution_.size() > 0", "/build/master_pack-android/opencv/modules/features2d/src/kaze/KAZEFeatures.cpp", "0 <= kpts[i].class_id && kpts[i].class_id < static_cast<int>(evolution_.size())", "k < 109", "/build/master_pack-android/opencv/modules/features2d/src/kaze/AKAZEFeatures.cpp", "x0 - 6 * scale >= 0 && x0 + 6 * scale < Lx.cols", "y0 - 6 * scale >= 0 && y0 + 6 * scale < Lx.rows", "cum[nkeys] == n", "evolution.size() > 0", "nbins > 2", "!Lx_.empty()", "Diffusivity is not supported", "desc_size == dsize", "dcount == desc_size", "options.descriptor_channels <= max_channels", "(pattern_size & 1) == 0", "dcount1 <= desc_size*8", "divUp(dcount1, 8) == desc_size", "size == Lx.size()", "size == Ly.size()", "options_->descriptor_channels <= max_channels", "dpos == 486", "divUp(dpos, 8) == desc_size", "channels <= max_channels", "coords[0] >= 0 && coords[0] < 3", "divUp(descriptorBits_.rows, 8) == desc_size", "nbits <= ssz && \"Descriptor size can't be bigger than full descriptor (486 = 162*3 - 3 channels)\"", "img.channels() == 1 && img.depth() == 0", "/build/master_pack-android/opencv/modules/calib3d/src/checkchessboard.cpp", "ncorners >= 0", "/build/master_pack-android/opencv/modules/calib3d/src/quadsubpix.cpp", "min_idx >= 0", "(icvCreatePOSITObject( points, numPoints, &pObject )) >= 0", "/build/master_pack-android/opencv/modules/calib3d/src/posit.cpp", "(icvPOSIT( pObject, imagePoints,(float) focalLength, criteria, rotation, translation )) >= 0", "( (npoints >= 4) || (npoints == 3 && flags == SOLVEPNP_ITERATIVE && useExtrinsicGuess) ) && npoints == std::max(ipoints.checkVector(2, 5), ipoints.checkVector(2, 6))", "/build/master_pack-android/opencv/modules/calib3d/src/solvepnp.cpp", "(rtype == 5 || rtype == 6) && (ttype == 5 || ttype == 6)", "(rsize == Size(1, 3) || rsize == Size(3, 1)) && (tsize == Size(1, 3) || tsize == Size(3, 1))", "npoints == 4", "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_EPNP or SOLVEPNP_DLS", "npoints == 3 && npoints == std::max(ipoints.checkVector(2, 5), ipoints.checkVector(2, 6))", "flags == SOLVEPNP_P3P || flags == SOLVEPNP_AP3P", "npoints >= 4 && npoints == std::max(ipoints.checkVector(2, 5), ipoints.checkVector(2, 6))", "opoints.isContinuous()", "opoints.depth() == 5 || opoints.depth() == 6", "(opoints.rows == 1 && opoints.channels() == 3) || opoints.cols*opoints.channels() == 3", "ipoints.isContinuous()", "ipoints.depth() == 5 || ipoints.depth() == 6", "(ipoints.rows == 1 && ipoints.channels() == 2) || ipoints.cols*ipoints.channels() == 2", "n.isString() && String(n) == name_", "/build/master_pack-android/opencv/modules/calib3d/src/stereobm.cpp", "minDisparity", "numDisparities", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "All the images must have the same size", "Both input images must have CV_8UC1", "Disparity image must have CV_16SC1 or CV_32FC1 format", "preFilterType must be = CV_STEREO_BM_NORMALIZED_RESPONSE", "preFilterSize must be odd and be within 5..255", "preFilterCap must be within 1..63", "SADWindowSize must be odd, be within 5..255 and be not larger than image width or height", "numDisparities must be positive and divisble by 16", "texture threshold must be non-negative", "uniqueness ratio must be non-negative", "_disp.type() == 3 || _disp.type() == 4", "StereoMatcher.BM", "count > 0", "/build/master_pack-android/opencv/modules/calib3d/src/ptsetreg.cpp", "count <= msi->rows", "J.isContinuous() && J.cols == 6", "J.isContinuous() && J.cols == 4", "the number of model points should be positive", "err.isContinuous() && err.type() == 5 && mask.isContinuous() && mask.type() == 0", "count >= modelPoints && count == count2", "(esz1 % sizeof(int)) == 0 && (esz2 % sizeof(int)) == 0", "confidence > 0 && confidence < 1", "count >= 0 && count2 == count", "(bestMask.cols == 1 || bestMask.rows == 1) && (int)bestMask.total() == count", "model.rows % nmodels == 0", "count >= 0 && to.checkVector(3) == count", "count >= 0 && to.checkVector(2) == count", "Unknown or unsupported robust estimation method", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == count", "errf.isContinuous() && errf.type() == 5 && (int)errf.total() == count", "(param0.cols == 1 || param0.rows == 1) && (ptype == 5 || ptype == 6)", "/build/master_pack-android/opencv/modules/calib3d/src/levmarq.cpp", "************************************************************************************", "\titr\tnfJ\t\tSUM(r^2)\t\tx\t\tdx\t\tl\t\tlc", "A.type() == 6 && A.rows == lx", "%c%10d %10d %15.4e %16.4e %17.4e %16.4e %17.4e\n", "FM0.cols == 3 && FM0.rows % 3 == 0 && FM.cols == 3 && FM.rows % 3 == 0 && FM.channels() == 1", "/build/master_pack-android/opencv/modules/calib3d/src/compat_ptsetreg.cpp", "lines.rows == lines0.cols && lines.cols == lines0.rows", "lines.size() == lines0.size()", "dst.rows == dst0.cols && dst.cols == dst0.rows", "dst.size() == dst0.size()", "!err", "out_corners && out_quads", "/build/master_pack-android/opencv/modules/calib3d/src/calibinit.cpp", "onePoint != __null", "Number of channels must be 1, 3 or 4", "Only 8-bit, 16-bit or floating-point 32-bit images are supported", "nelems >= 0", "isAsymmetricGrid ^ isSymmetricGrid", "Unknown pattern type", "Only 8-bit grayscale or color images are supported", "Both width and height of the pattern should have bigger than 2", "Null pointer to corners", "J.isContinuous() && J.cols == 8", "/build/master_pack-android/opencv/modules/calib3d/src/fundam.cpp", "npoints >= 0 && (depth == 4 || depth == 5 || depth == 6)", "The input should be a 2D or 3D point set", "depth == 5 || depth == 4 || depth == 6", "F.size() == Size(3,3)", "lines.isContinuous()", "The input arrays should be 2D or 3D point sets", "src.checkVector(2) == dst.checkVector(2)", "Unknown estimation method", "m1.checkVector(2) == m2.checkVector(2)", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == npoints", "_dst.fixedType()", "_pt1.type() == 6 && _pt2.type() == 6 && _F.type() == 6", "_w.data == (uchar*)&w.val[0] && _u.data == (uchar*)&u.val[0] && _vt.data == (uchar*)&vt.val[0]", "(_m1.cols == 1 || _m1.rows == 1) && _m1.size() == _m2.size()", "/build/master_pack-android/opencv/modules/calib3d/src/p3p.cpp", "/build/master_pack-android/opencv/modules/calib3d/src/stereosgbm.cpp", "D % 16 == 0", "numberOfDisparities > 0 && disp.type() == 3 && (costType == 3 || costType == 4) && disp.size() == cost.size()", "type == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((3) & ((1 << 3) - 1)) + (((1)-1) << 3))", "left.size() == right.size() && left.type() == right.type() && left.depth() == 0", "StereoMatcher.SGBM", "Input parameters must be matrices", "/build/master_pack-android/opencv/modules/calib3d/src/triangulate.cpp", "The fundamental matrix must be a 3x3 matrix", "The fundamental matrix must be a single-channel matrix", "The point-matrices must have one row, and an equal number of columns", "The first set of points must contain two channels; one for x and one for y", "The second set of points must contain two channels; one for x and one for y", "(((new_points1) != __null && (((const CvMat*)(new_points1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(new_points1))->cols > 0 && ((const CvMat*)(new_points1))->rows > 0) && ((const CvMat*)(new_points1))->data.ptr != __null)", "The first output matrix must have the same dimensions as the input matrices", "The first output matrix must have two channels; one for x and one for y", "(((new_points2) != __null && (((const CvMat*)(new_points2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(new_points2))->cols > 0 && ((const CvMat*)(new_points2))->rows > 0) && ((const CvMat*)(new_points2))->data.ptr != __null)", "The second output matrix must have the same dimensions as the input matrices", "The second output matrix must have two channels; one for x and one for y", "Some of parameters is a NULL pointer", "Number of points must be more than zero", "Number of points must be the same", "Number of proj points coordinates must be == 2", "Number of world points coordinates must be == 4", "Size of projection matrices must be 3x4", "/build/master_pack-android/opencv/modules/calib3d/src/fisheye.cpp", "a.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "A.getMat().cols == B.getMat().rows", "A.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) && B.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "row.type() == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3))", "!row.empty() && row.rows == 1", "m.depth() == 6 && m.getMat().rows == 1", "data && dims <= 2 && rows == m && cols == n && channels() == 1", "undistorted.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || undistorted.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "K.size() == Size(3,3) && (K.type() == 5 || K.type() == 6) && D.total() == 4", "data && dims <= 2 && (rows == 1 || cols == 1) && rows + cols - 1 == n && channels() == 1", "distorted.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || distorted.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "P.empty() || P.size() == Size(3, 3) || P.size() == Size(4, 3)", "R.empty() || R.size() == Size(3, 3) || R.total() * R.channels() == 3", "D.total() == 4 && K.size() == Size(3, 3) && (K.depth() == 5 || K.depth() == 6)", "K.size() == Size(3, 3) && (K.depth() == 5 || K.depth() == 6)", "D.empty() || ((D.total() == 4) && (D.depth() == 5 || D.depth() == 6))", "(_R.size() == Size(3, 3) || _R.total() * _R.channels() == 3) && (_R.depth() == 5 || _R.depth() == 6)", "_tvec.total() * _tvec.channels() == 3 && (_tvec.depth() == 5 || _tvec.depth() == 6)", "!imagePoints.empty() && imagePoints.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "!_objectPoints.empty() && _objectPoints.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "!_imagePoints.empty() && _imagePoints.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "m1type == (((3) & ((1 << 3) - 1)) + (((2)-1) << 3)) || m1type == 5 || m1type <=0", "(K.depth() == 5 || K.depth() == 6) && (D.depth() == 5 || D.depth() == 6)", "(P.empty() || P.depth() == 5 || P.depth() == 6) && (R.empty() || R.depth() == 5 || R.depth() == 6)", "K.size() == Size(3, 3) && (D.empty() || D.total() == 4)", "_tvec.getMat().isContinuous() && _rvec.getMat().isContinuous()", "objectPoints.type() == (((5) & ((1 << 3) - 1)) + (((3)-1) << 3)) || objectPoints.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "_rvec.total() * _rvec.channels() == 3 && (_rvec.depth() == 5 || _rvec.depth() == 6)", "_K.size() == Size(3,3) && (_K.type() == 5 || _K.type() == 6) && _D.type() == _K.type() && _D.total() == 4", "!objectPoints.empty() && objectPoints.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "CALIB_CHECK_COND - Ill-conditioned matrix for input array %d", "!objectPoints.empty() && (objectPoints.type() == (((5) & ((1 << 3) - 1)) + (((3)-1) << 3)) || objectPoints.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3)))", "!imagePoints.empty() && (imagePoints.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || imagePoints.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "omc.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3)) || Tc.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "svd.w.at<double>(0) / svd.w.at<double>(svd.w.rows - 1) < thresh_cond", "!omc.empty() && omc.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "!Tc.empty() && Tc.type() == (((6) & ((1 << 3) - 1)) + (((3)-1) << 3))", "!objectPoints.empty() && !imagePoints.empty() && objectPoints.total() == imagePoints.total()", "imagePoints.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || imagePoints.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "D.empty() || (D.total() == 4)", "rvecs.empty() || (rvecs.channels() == 3)", "tvecs.empty() || (tvecs.channels() == 3)", "(!K.empty() && !D.empty()) || !(flags & CALIB_USE_INTRINSIC_GUESS)", "K.empty() || (K.size() == Size(3,3))", "abs_max < threshold", "!objectPoints.empty() && !imagePoints1.empty() && !imagePoints2.empty()", "objectPoints.total() == imagePoints1.total() || imagePoints1.total() == imagePoints2.total()", "imagePoints1.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || imagePoints1.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "imagePoints2.type() == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || imagePoints2.type() == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", "D1.empty() || (D1.total() == 4)", "D2.empty() || (D1.total() == 4)", "(!K1.empty() && !K2.empty() && !D1.empty() && !D2.empty()) || !(flags & CALIB_FIX_INTRINSIC)", "K1.empty() || (K1.size() == Size(3,3))", "K2.empty() || (K1.size() == Size(3,3))", "/build/master_pack-android/opencv/modules/calib3d/src/ap3p.cpp", "it != vertices.end()", "/build/master_pack-android/opencv/modules/calib3d/src/circlesgrid.cpp", "it1->first != *it2", "points.size() == seeds.size()", "basisGraphs[0].getVerticesCount() == basisGraphs[1].getVerticesCount()", "dm.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "_patternSize.height >= 0 && _patternSize.width >= 0", "!corners.empty()", "samples is empty", "filteredSamples is empty", "sortedIndices.type() == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "sortedIndices.cols == 1", "line.size() == seeds.size()", "below.size() == above.size()", "belowSeeds.size() == aboveSeeds.size()", "below.size() == belowSeeds.size()", "!doesVertexExist( id )", "doesVertexExist( id1 )", "doesVertexExist( id2 )", "Centers are not new", "maxLoc.x >= 0 && maxLoc.y >= 0", "h >= 2 && w >= 2", "largeSegments.size() == cornersCount", "largeHoles != 0 && smallHoles != 0", "centers.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "Basis size is not 2", "degenerate basis", "Number of basis graphs is not 2", "objectPoints should contain vector of vectors of points of type Point3f", "/build/master_pack-android/opencv/modules/calib3d/src/calibration.cpp", "imagePoints1 should contain vector of vectors of points of type Point2f", "ni == ni1", "ni == ni2", "nimages > 0 && nimages == (int)imagePoints1.total() && (!imgPtMat2 || nimages == (int)imagePoints2.total())", "(((A) != __null && (((const CvMat*)(A))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(A))->cols > 0 && ((const CvMat*)(A))->rows > 0) && ((const CvMat*)(A))->data.ptr != __null) && (((B) != __null && (((const CvMat*)(B))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(B))->cols > 0 && ((const CvMat*)(B))->rows > 0) && ((const CvMat*)(B))->data.ptr != __null)", "((((A)->type ^ (B)->type) & ((1 << 3)*512 - 1)) == 0) && (((A->type) & ((1 << 3)*512 - 1)) == 5 || ((A->type) & ((1 << 3)*512 - 1)) == 6)", "A->cols == B->rows", "((((A)->type ^ (dABdA)->type) & ((1 << 3)*512 - 1)) == 0) && dABdA->rows == A->rows*B->cols && dABdA->cols == A->rows*A->cols", "((((A)->type ^ (dABdB)->type) & ((1 << 3)*512 - 1)) == 0) && dABdB->rows == A->rows*B->cols && dABdB->cols == B->rows*B->cols", "(int)distCoeffs0.total() <= outputSize", "stype == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3)) || stype == (((3) & ((1 << 3) - 1)) + (((1)-1) << 3)) || stype == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3)) || stype == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "dtype == (((3) & ((1 << 3) - 1)) + (((3)-1) << 3)) || dtype == (((4) & ((1 << 3) - 1)) + (((3)-1) << 3)) || dtype == (((5) & ((1 << 3) - 1)) + (((3)-1) << 3))", "cols >= 0", "Q.size() == Size(4,4)", "disp.size() == _3dimg.size()", "(((matrixM) != __null && (((const CvMat*)(matrixM))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matrixM))->cols > 0 && ((const CvMat*)(matrixM))->rows > 0) && ((const CvMat*)(matrixM))->data.ptr != __null) && (((matrixR) != __null && (((const CvMat*)(matrixR))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matrixR))->cols > 0 && ((const CvMat*)(matrixR))->rows > 0) && ((const CvMat*)(matrixR))->data.ptr != __null) && (((matrixQ) != __null && (((const CvMat*)(matrixQ))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matrixQ))->cols > 0 && ((const CvMat*)(matrixQ))->rows > 0) && ((const CvMat*)(matrixQ))->data.ptr != __null) && matrixM->cols == 3 && matrixM->rows == 3 && ((matrixM)->rows == (matrixR)->rows && (matrixM)->cols == (matrixR)->cols) && ((matrixM)->rows == (matrixQ)->rows && (matrixM)->cols == (matrixQ)->cols)", "Some of parameters is a NULL pointer!", "Input parameters must be a matrices!", "Size of projection matrix must be 3x4!", "Size of calibration and rotation matrices must be 3x3!", "Size of position vector must be 4x1!", "cvDet(&tmpMatrixM) != 0.0", "Size of cameraMatrix must be 3x3!", "Input argument is not a valid matrix", "The first output argument is not a valid matrix", "The matrices must have 32f or 64f data type", "All the matrices must have the same data type", "Jacobian is not a valid matrix", "Jacobian must have 32fC1 or 64fC1 datatype", "Jacobian must be 3x9 or 9x3", "Input matrix must be 1x3, 3x1 or 3x3", "Output matrix must be 3x3, single-channel floating point matrix", "Output matrix must be 1x3 or 3x1", "(((_rvec1) != __null && (((const CvMat*)(_rvec1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_rvec1))->cols > 0 && ((const CvMat*)(_rvec1))->rows > 0) && ((const CvMat*)(_rvec1))->data.ptr != __null) && (((_rvec2) != __null && (((const CvMat*)(_rvec2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_rvec2))->cols > 0 && ((const CvMat*)(_rvec2))->rows > 0) && ((const CvMat*)(_rvec2))->data.ptr != __null)", "((_rvec1->type) & ((1 << 3)*512 - 1)) == 5 || ((_rvec1->type) & ((1 << 3)*512 - 1)) == 6", "_rvec1->rows == 3 && _rvec1->cols == 1 && ((_rvec1)->rows == (_rvec2)->rows && (_rvec1)->cols == (_rvec2)->cols)", "(((_tvec1) != __null && (((const CvMat*)(_tvec1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_tvec1))->cols > 0 && ((const CvMat*)(_tvec1))->rows > 0) && ((const CvMat*)(_tvec1))->data.ptr != __null) && (((_tvec2) != __null && (((const CvMat*)(_tvec2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_tvec2))->cols > 0 && ((const CvMat*)(_tvec2))->rows > 0) && ((const CvMat*)(_tvec2))->data.ptr != __null)", "((_tvec1)->rows == (_tvec2)->rows && (_tvec1)->cols == (_tvec2)->cols) && ((_tvec1)->rows == (_rvec1)->rows && (_tvec1)->cols == (_rvec1)->cols)", "Both object points and image points must be 2D", "object points and image points must be a single-row matrices", "(((_points1) != __null && (((const CvMat*)(_points1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_points1))->cols > 0 && ((const CvMat*)(_points1))->rows > 0) && ((const CvMat*)(_points1))->data.ptr != __null) && (((_points2) != __null && (((const CvMat*)(_points2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_points2))->cols > 0 && ((const CvMat*)(_points2))->rows > 0) && ((const CvMat*)(_points2))->data.ptr != __null) && ((_points1)->rows == (_points2)->rows && (_points1)->cols == (_points2)->cols)", "One of required arguments is not a valid matrix", "Homogeneous coordinates are not supported", "Rotation must be represented by 1x3 or 3x1 floating-point rotation vector, or 3x3 rotation matrix", "Translation vector must be 1x3 or 3x1 floating-point vector", "Instrinsic parameters must be 3x3 floating-point matrix", "Distortion coefficients must be 1x4, 4x1, 1x5, 5x1, 1x8, 8x1, 1x12, 12x1, 1x14 or 14x1 floating-point vector", "dp/drot must be 2Nx3 floating-point matrix", "dp/dT must be 2Nx3 floating-point matrix", "dp/df must be 2Nx2 floating-point matrix", "dp/dc must be 2Nx2 floating-point matrix", "distCoeffs is NULL while dpdk is not", "dp/df must be 2Nx14, 2Nx12, 2Nx8, 2Nx5, 2Nx4 or 2Nx2 floating-point matrix", "(((objectPoints) != __null && (((const CvMat*)(objectPoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(objectPoints))->cols > 0 && ((const CvMat*)(objectPoints))->rows > 0) && ((const CvMat*)(objectPoints))->data.ptr != __null) && (((imagePoints) != __null && (((const CvMat*)(imagePoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(imagePoints))->cols > 0 && ((const CvMat*)(imagePoints))->rows > 0) && ((const CvMat*)(imagePoints))->data.ptr != __null) && (((A) != __null && (((const CvMat*)(A))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(A))->cols > 0 && ((const CvMat*)(A))->rows > 0) && ((const CvMat*)(A))->data.ptr != __null) && (((rvec) != __null && (((const CvMat*)(rvec))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(rvec))->cols > 0 && ((const CvMat*)(rvec))->rows > 0) && ((const CvMat*)(rvec))->data.ptr != __null) && (((tvec) != __null && (((const CvMat*)(tvec))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(tvec))->cols > 0 && ((const CvMat*)(tvec))->rows > 0) && ((const CvMat*)(tvec))->data.ptr != __null)", "(((rvec->type) & ((1 << 3) - 1)) == 6 || ((rvec->type) & ((1 << 3) - 1)) == 5) && (rvec->rows == 1 || rvec->cols == 1) && rvec->rows*rvec->cols*((((rvec->type) & ((512 - 1) << 3)) >> 3) + 1) == 3", "(((tvec->type) & ((1 << 3) - 1)) == 6 || ((tvec->type) & ((1 << 3) - 1)) == 5) && (tvec->rows == 1 || tvec->cols == 1) && tvec->rows*tvec->cols*((((tvec->type) & ((512 - 1) << 3)) >> 3) + 1) == 3", "(count >= 4) || (count == 3 && useExtrinsicGuess)", "npoints >= 0 && (depth == 5 || depth == 6)", "One of required vector arguments is not a valid matrix", "image width and height must be positive", "the array of point counters must be 1-dimensional integer vector", "The tilted sensor model must have 14 parameters in the distortion matrix", "Thin prism model must have 12 parameters in the distortion matrix", "the output array of translation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of views", "the output array of standard deviations vectors must be 1-channel 1x(n*6 + NINTRINSIC) or (n*6 + NINTRINSIC)x1 array, where n is the number of views, NINTRINSIC = 18", "Intrinsic parameters must be 3x3 floating-point matrix", "The number of points in the view #%d is < 4", "Non-zero skew is not supported by the function", "The specified aspect ratio (= cameraMatrix[0][0] / cameraMatrix[1][1]) is incorrect", "the output array of rotation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 or nx9 array, where n is the number of views", "Focal length (fx and fy) must be positive", "Principal point must be within the image", "The intrinsic matrix must have [fx 0 cx; 0 fy cy; 0 0 1] shape", "For non-planar calibration rigs the initial intrinsic matrix must be specified", "(((_imagePoints1) != __null && (((const CvMat*)(_imagePoints1))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_imagePoints1))->cols > 0 && ((const CvMat*)(_imagePoints1))->rows > 0) && ((const CvMat*)(_imagePoints1))->data.ptr != __null) && (((_imagePoints2) != __null && (((const CvMat*)(_imagePoints2))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_imagePoints2))->cols > 0 && ((const CvMat*)(_imagePoints2))->rows > 0) && ((const CvMat*)(_imagePoints2))->data.ptr != __null) && (((_objectPoints) != __null && (((const CvMat*)(_objectPoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_objectPoints))->cols > 0 && ((const CvMat*)(_objectPoints))->rows > 0) && ((const CvMat*)(_objectPoints))->data.ptr != __null) && (((_npoints) != __null && (((const CvMat*)(_npoints))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(_npoints))->cols > 0 && ((const CvMat*)(_npoints))->rows > 0) && ((const CvMat*)(_npoints))->data.ptr != __null) && (((matR) != __null && (((const CvMat*)(matR))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matR))->cols > 0 && ((const CvMat*)(matR))->rows > 0) && ((const CvMat*)(matR))->data.ptr != __null) && (((matT) != __null && (((const CvMat*)(matT))->type & 0xFFFF0000) == 0x42420000 && ((const CvMat*)(matT))->cols > 0 && ((const CvMat*)(matT))->rows > 0) && ((const CvMat*)(matT))->data.ptr != __null)", "((((_imagePoints1)->type ^ (_imagePoints2)->type) & ((1 << 3)*512 - 1)) == 0) && ((((_imagePoints1)->type ^ (_objectPoints)->type) & ((1 << 3) - 1)) == 0)", "(_npoints->cols == 1 || _npoints->rows == 1) && ((_npoints->type) & ((1 << 3)*512 - 1)) == (((4) & ((1 << 3) - 1)) + (((1)-1) << 3))", "(((_imagePoints1->type) & ((1 << 3) - 1)) == 5 || ((_imagePoints1->type) & ((1 << 3) - 1)) == 6) && ((_imagePoints1->rows == pointsTotal && _imagePoints1->cols*cn == 2) || (_imagePoints1->rows == 1 && _imagePoints1->cols == pointsTotal && cn == 2))", "ni1 > 0 && ni1 == ni3", "H.cols == 3 && H.rows == 3", "/build/master_pack-android/opencv/modules/calib3d/src/homography_decomp.cpp", "K.cols == 3 && K.rows == 3", "/build/master_pack-android/opencv/modules/calib3d/src/compat_stereo.cpp", "state != 0", "npoints >= 0 && points2.checkVector(2) == npoints && points1.type() == points2.type()", "/build/master_pack-android/opencv/modules/calib3d/src/five-point.cpp", "cameraMatrix.rows == 3 && cameraMatrix.cols == 3 && cameraMatrix.channels() == 1", "E.cols == 3 && E.rows == 3", "mask.size() == mask1.size()", "_R.needed() && _t.needed()", "TBB failed to initialize task scheduler TLS\n", "failed to destroy task scheduler TLS: %s", "rml::tbb_factory::make_server failed with status %x, falling back on private rml", "private", "shared", "3rdparty/tbb/tbb-2018_U1/src/tbb/governor.cpp", "!my_scheduler", "task_scheduler_init already initialized", "number_of_threads==automatic || number_of_threads > 0", "number_of_threads for task_scheduler_init must be automatic or positive", "!thread_stack_size", "deferred initialization ignores stack size setting", "task_scheduler_init::terminate without corresponding task_scheduler_init::initialize()", "The number of workers is currently limited to %u. The request for %u workers is ignored. Further requests for more workers will be silently ignored until the limit changes.\n", "Thread stack size has been already set to %u. The request for larger stack (%u) cannot be satisfied.\n", "RML might limit the number of workers to %u while %u is requested.\n", "Exact exception propagation is requested by application but the linked library is built without support for it", "Unidentified exception", "bad allocation in previous or concurrent attempt", "attempted recursive lock on critical section or non-recursive mutex", "User-initiated abort has terminated this operation", "The same task_handle object cannot be executed more than once", "wait() was not called on the structured_task_group", "Assertion %s failed on line %d of file %s\n", "Detailed description: %s\n", "TBB Warning: %s\n", "%s: %s", "Step must be positive", "Index out of requested size range", "Index out of allocated segment slots", "Index is not allocated", "Resource deadlock would occur", "Operation not permitted", "Wait on condition variable failed", "Invalid hash load factor", "[backward compatibility] Invalid number of buckets", "swap() is invalid on non-equal allocators", "reservation size exceeds permitted max size", "invalid key", "Illegal tagged_msg cast", "Blocking terminate failed", "TBB: %s\t%s\n", "TBB_VERSION", "Tools support", "3rdparty/tbb/tbb-2018_U1/src/tbb/tbb_main.cpp", "my_param < global_control::parameter_max", "param < global_control::parameter_max", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "__TBB_call_with_my_server_info", "libirml.so.1", "scalable_malloc", "malloc", "libtbbmalloc.so", "ALLOCATOR", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "thread_monitor %s in %s\n", "pthread_join", "pthread_detach", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "pthread_attr_destroy", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/arena.cc", "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kHeaderSize): ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_util.cc", "Not implemented field number ", " with type ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", "A protocol message was rejected because it was too big (more than ", " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.", "CHECK failed: (buffer_size) >= (0): ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", "CHECK failed: (last_returned_size_) > (0): ", "BackUp() can only be called after a successful Next().", "CHECK failed: (count) <= (last_returned_size_): ", "CHECK failed: (count) >= (0): ", "CHECK failed: target_ != NULL: ", "CHECK failed: (buffer_used_) == (buffer_size_): ", " BackUp() can only be called after Next().", "CHECK failed: (count) <= (buffer_used_): ", " Can't back up over more bytes than were returned by the last call to Next().", "CHECK failed: backup_bytes_ == 0 && buffer_.get() != NULL: ", " Parameter to BackUp() can't be negative.", "CHECK failed: (count) <= (target_->size()): ", "Cannot allocate buffer larger than kint32max for ", "StringOutputStream.", "CHECK failed: (backup_bytes_) == (0): ", "(cannot determine missing fields for lite message)", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/message_lite.cc", "CHECK failed: !coded_out.HadError(): ", "Can't ", "parse", " message of type \"", "\" because it is missing required fields: ", "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ", " was modified concurrently during serialization.", "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ", "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ", "This shouldn't be called if all the sizes are equal.", "Exceeded maximum protobuf size of 2GB: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/repeated_field.cc", "CHECK failed: (new_size) <= ((std::numeric_limits<size_t>::max() - kRepHeaderSize) / sizeof(old_rep->elements[0])): ", "Requested size is too large to fit into size_t.", "[libprotobuf ", "libprotobuf-native", "terminating.\n", "%d.%d.%d", "%lld", "%llu", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/common.cc", "pthread_mutex_unlock: ", "This program requires version ", " of the Protocol Buffer runtime library, but the installed version is ", ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "This program was compiled against version ", " of the Protocol Buffer runtime library, which is not compatible with the installed version (", ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "pthread_mutex_lock: ", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/wire_format_lite.cc", "CHECK failed: (value.size()) <= (kint32max): ", "parsing", "serializing", " '%s'", "String field", " contains invalid ", "UTF-8 data when ", " a protocol ", "buffer. Use the 'bytes' type if you intend to send raw ", "bytes. ", "proto2", "proto3", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.cc", "can't reach here.", "CHECK failed: generated_database_->Add(encoded_file_descriptor, size): ", "Invalid proto descriptor for file \"", "File recursively imports itself: ", " -> ", "Reserved numbers must be positive integers.", "Reserved range end number must be greater than start number.", "The first enum value must be zero in proto3.", "Files with optimize_for = LITE_RUNTIME cannot define services unless you set both options cc_generic_services and java_generic_sevices to false.", "uninterpreted_option", "CHECK failed: field != NULL: ", "Invalid wire type for CPPTYPE_INT32: ", "Invalid wire type for CPPTYPE_INT64: ", "Invalid wire type for CPPTYPE_UINT32: ", "Invalid wire type for CPPTYPE_UINT64: ", "CHECK failed: !name_: ", "CHECK failed: !once_: ", "CHECK failed: !file_: ", "$0// $1\n", "Cannot copy json_name to a proto of a different size.", "Entry", "Key in map fields cannot be enum types.", "Key in map fields cannot be float/double, bytes or message types.", "Enum value in map must define 0 as the first value.", "\" is not defined.", "\" seems to be defined in \"", "\", which is not imported by \"", "\".  To use it here, please add the necessary import.", "\" is resolved to \"", "\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \".", "\") to start from the outermost scope.", "Missing name.", "\" is not a valid identifier.", "Import \"", "\" was listed twice.", "Illegal jstype for int64, uint64, sint64, fixed64 or sfixed64 field: ", "jstype is only allowed on int64, uint64, sint64, fixed64 or sfixed64 fields.", "Option \"", "\" was already set.", "Invalid wire type for CPPTYPE_MESSAGE: ", "\" has not been loaded.", "\" was not found or had errors.", "CHECK failed: has_default_value(): ", "No default value", "Messages can't have default values!", "Can't get here: failed to get default value as string", "[lazy = true] can only be specified for submessage fields.", "MessageSets cannot have fields, only extensions.", "map_entry should not be set explicitly. Use map<KeyType, ValueType> instead.", "[packed = true] can only be specified for repeated primitive fields.", "Extensions of MessageSets must be optional messages.", "Extensions to non-lite types can only be declared in non-lite files.  Note that you cannot extend a non-lite type to contain a lite type, but the reverse is allowed.", "google.protobuf.", "proto", "google.protobuf.MessageOptions", "google.protobuf.FileOptions", "google.protobuf.FieldOptions", "google.protobuf.EnumOptions", "google.protobuf.EnumValueOptions", "google.protobuf.ServiceOptions", "google.protobuf.MethodOptions", "google.protobuf.StreamOptions", "Import ", " but not used.", "Required fields are not allowed in proto3.", "Explicit default values are not allowed in proto3.", "Enum type \"", "\" is not a proto3 enum, but is used in \"", "\" which is a proto3 message type.", "Groups are not supported in proto3 syntax.", "Extensions in proto3 are only allowed for defining options.", "CHECK failed: !descriptor_: ", "CHECK failed: file && file->pool_: ", "CHECK failed: file->pool_->lazily_build_dependencies_: ", "CHECK failed: !file->finished_building_: ", "UNKNOWN_ENUM_VALUE_%s_%d", ".placeholder.proto", "PLACEHOLDER_VALUE", ".PLACEHOLDER_VALUE", " conflicts with an existing nested message type.", " conflicts with an existing field.", " conflicts with an existing enum type.", " conflicts with an existing oneof type.", "Expanded map entry type ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/logging.h", "'out_location' must not be NULL", "Extension numbers must be positive integers.", "Extension range end number must be greater than start number.", ".dummy", "), this value label conflicts with ", ". This will make the proto fail to compile for some languages, such as C#.", "When enum name is stripped and label is PascalCased (", "\" uses the same enum value as \"", "\". If this is intended, set 'option allow_alias = true;' to the enum definition.", "Extension numbers cannot be greater than $0.", "\" not previously defined in symbols_by_name_, but was defined in symbols_by_parent_; this shouldn't be possible.", "\" is already defined.", "\" is already defined in \"", "\" is already defined in file \"", "Message extensions cannot have required fields.", "-inf", "Boolean default must be true or false.", "Messages can't have default values.", "Field numbers must be positive integers.", "Field numbers cannot be greater than $0.", "Field numbers $0 through $1 are reserved for the protocol buffer library implementation.", "FieldDescriptorProto.extendee not set for extension field.", "FieldDescriptorProto.oneof_index should not be set for extensions.", "FieldDescriptorProto.extendee set for non-extension field.", "FieldDescriptorProto.oneof_index $0 is out of range for type \"$1\".", "Repeated fields can't have default values.", "Couldn't parse default value \"", "the global scope", "Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, not children of it.  Therefore, \"", "\" must be unique within ", ", not just within \"", "Enums must contain at least one value.", "Enum value \"$0\" is reserved multiple times.", "Enum value \"$0\" uses reserved number $1.", "Enum value \"$0\" is reserved.", "Reserved range $0 to $1 overlaps with already-defined range $2 to $3.", "Field name \"$0\" is reserved multiple times.", "Extension range $0 to $1 includes field \"$2\" ($3).", "Field \"$0\" uses reserved number $1.", "Field name \"$0\" is reserved.", "Extension range $0 to $1 overlaps with reserved range $2 to $3.", "Extension range $0 to $1 overlaps with already-defined range $2 to $3.", "\" is already defined (as something other than a package) in file \"", "Extension ranges are not allowed in proto3.", "MessageSet is not supported in proto3.", "\" conflicts with field \"", "\". This is not ", "allowed in proto3.", "The JSON camel-case name of field \"", "Files that do not use optimize_for = LITE_RUNTIME cannot import files which do use this option.  This file is not lite, but it imports \"", "\" which is.", "CHECK failed: builder_: ", "Found invalid proto option data for: ", "$0option $1;\n", "stream ", "$0rpc $1($4.$2) returns ($5.$3)", " {\n$0$1}\n", "$0$1 = $2", " [$0]", "$0enum $1 {\n", "$0  reserved ", "$0, ", "$0 to $1, ", "$0}\n", "\"$0\", ", "$0message $1", "$0  extensions $1 to $2;\n", "$0  }\n", "$0  extend .$1 {\n", "map<$0, $1>", "$0$1$2 $3 = $4", " [default = $0", "json_name = \"", " { ... };\n", "extend .$0 {\n", "\" is a message. To set the entire message, use syntax like \"", " = { <proto text format> }\". To set fields within it, use syntax like \"", ".foo = value\".", "CHECK failed: dynamic.get() != NULL: ", "Could not create an instance of ", "Error while parsing option value for \"", "CHECK failed: (option_field->type()) == (FieldDescriptor::TYPE_GROUP): ", "Value out of range for int32 option \"", "Value must be integer for int32 option \"", "Value out of range for int64 option \"", "Value must be integer for int64 option \"", "Value out of range for uint32 option \"", "Value must be non-negative integer for uint32 option \"", "Value must be non-negative integer for uint64 option \"", "Value must be number for float option \"", "Value must be number for double option \"", "Value must be identifier for boolean option \"", "Value must be \"true\" or \"false\" for boolean option \"", "Value must be identifier for enum-valued option \"", "\" has no value named \"", "\" for option \"", "\". This appears to be a value from a sibling type.", "Value must be quoted string for string option \"", "Option must have a name.", "Option must not use reserved name \"uninterpreted_option\".", "CHECK failed: options_descriptor: ", "\" is resolved to \"(", ")\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \"(.", "\" unknown.", "Option field \"", "\" is not a field or extension of message \"", "\" is an atomic type, not a message.", "\" is a repeated message. Repeated message options must be initialized using an aggregate value.", "CHECK failed: !out.HadError(): ", "Unexpected failure while serializing option submessage ", "Missing field: FileDescriptorProto.name.", "Unrecognized syntax: ", "A file with this name is already in the pool.", "CHECK failed: uninterpreted_options_field != NULL: ", "No field named \"uninterpreted_option\" in the Options proto.", "CHECK failed: original_uninterpreted_options_field != NULL: ", "CHECK failed: options->AppendPartialToString(&buf): ", "Protocol message could not be serialized.", "CHECK failed: options->ParsePartialFromString(buf): ", "Protocol message serialized itself in invalid fashion.", "Options could not be fully parsed using the proto descriptors compiled into this binary. Missing required fields: ", "Invalid public dependency index.", "Invalid weak dependency index.", "CHECK failed: fallback_database_ == NULL: ", "Cannot call BuildFile on a DescriptorPool that uses a DescriptorDatabase.  You must instead find a way to get your file into the underlying database.", "CHECK failed: mutex_ == NULL: ", "CHECK failed: finished_building_ == true: ", "CHECK failed: file_->finished_building_: ", "service $0 {\n", "CHECK failed: file()->finished_building_ == true: ", "CHECK failed: enum_type_->value_count(): ", "basic_string::erase", "\" is not a message type.", "Fields of oneofs must themselves have label LABEL_OPTIONAL.", "google.protobuf.Empty", "\" is not a type.", "\" is not an enum type.", "Default value for an enum field must be an identifier.", "Field with primitive type has type_name.", "Extension number $0 has already been used in \"$1\" by extension \"$2\".", "Field number $0 has already been used in \"$1\" by field \"$2\".", "Extension number $0 has already been used in \"$1\" by extension \"$2\" defined in $3.", "\"$0\" does not declare $1 as an extension number.", "Field with message or enum type missing type_name.", "Fields in the same oneof must be defined consecutively. \"$0\" cannot be defined before the completion of the \"$1\" oneof definition.", "Oneof must have at least one field.", "$0oneof $1 {", " ... }\n", "syntax = \"$0\";\n\n", "import public \"$0\";\n", "import weak \"$0\";\n", "import \"$0\";\n", "package $0;\n\n", "FileOptions", "MessageOptions", "FieldOptions", "EnumOptions", "EnumValueOptions", "ServiceOptions", "MethodOptions", "OneofOptions", "optional", "required", "repeated", "int64", "uint32", "enum", "message", "fixed64", "fixed32", "bytes", "sfixed32", "sfixed64", "sint32", "sint64", "google/protobuf/descriptor.proto", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.pb.cc", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/descriptor_database.cc", "Symbol name \"", "\" conflicts with the existing symbol \"", "Invalid symbol name: ", "Extension conflicts with extension already in database: extend ", "File already exists in database: ", "Invalid file descriptor data passed to EncodedDescriptorDatabase::Add().", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/dynamic_message.cc", "Can't get here.", "CHECK failed: is_prototype(): ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/extension_set_heavy.cc", "CHECK failed: output->message_prototype != NULL: ", "Extension factory's GetPrototype() returned NULL for extension: ", "Non-primitive types can't be packed.", "Invalid message set extension.", "CHECK failed: prototype != NULL: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_reflection.cc", "Protocol Buffer reflection usage error:\n  Method      : google::protobuf::Reflection::", "\n  Message type: ", "\n  Field       : ", "\n  Problem     : ", "\n  Problem     : Enum value did not match field type:\n    Expected  : ", "\n    Actual    : ", "Field does not match message type.", "\n  Problem     : Field is not the right type for this message:\n    Expected  : ", "\n    Field type: ", "CHECK failed: field->is_repeated(): ", "CHECK failed: field->cpp_type() == cpp_type || (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM && cpp_type == FieldDescriptor::CPPTYPE_INT32): ", "The type parameter T in RepeatedFieldRef<T> API doesn't match ", "the actual field type (for enums T should be the generated enum ", "type or int32).", "CHECK failed: (message_type) == (field->message_type()): ", "SetRepeatedEnum", "\"GetMapData\"", "Field is not a map field.", "\"DeleteMapValue\"", "SetRepeatedInt32", "Field is singular; the method requires a repeated field.", "SetRepeatedFloat", "SetRepeatedUInt32", "SetRepeatedBool", "SetRepeatedInt64", "SetRepeatedDouble", "SetRepeatedUInt64", "\"InsertOrLookupMapValue\"", "\"MutableRawRepeatedField\"", "MutableRawRepeatedField", "CHECK failed: (field->options().ctype()) == (ctype): ", "subtype mismatch", "CHECK failed: (field->message_type()) == (desc): ", "wrong submessage type", "\"GetRawRepeatedField\"", "GetRawRepeatedField", "Swap", "MutableRepeatedMessage", "AddMessage", "RemoveLast", "SetRepeatedString", "AddString", "SetRepeatedEnumValue accepts only valid integer values: ", "value ", " unexpected for field ", "GetRepeatedUInt32", "GetRepeatedBool", "GetRepeatedFloat", "GetRepeatedStringReference", "GetRepeatedUInt64", "GetRepeatedInt64", "GetRepeatedDouble", "GetMessage", "Field is repeated; the method requires a singular field.", "SetAllocatedMessage", "ReleaseMessage", "MutableMessage", "SetString", "GetRepeatedInt32", "GetRepeatedEnumValue", "GetRepeatedString", "\"LookupMapValue\"", "\"MapSize\"", "\"MapBegin\"", "\"MapEnd\"", "FieldSize", "GetRepeatedMessage", "SetInt32", "SetEnum", "SetEnumValue", "SetEnumValue accepts only valid integer values: value ", "SetInt64", "SetUInt32", "SetUInt64", "SetFloat", "SetDouble", "SetBool", "GetBool", "GetInt32", "GetEnumValue", "GetInt64", "GetUInt32", "GetUInt64", "GetFloat", "GetDouble", "Unimplemented type: ", "AddUInt32", "AddUInt64", "AddInt32", "AddEnum", "AddEnumValue accepts only valid integer values: value ", "AddInt64", "AddFloat", "AddDouble", "Reached impossible case in HasBit().", "HasField", "ClearField", "GetString", "GetStringReference", "CHECK failed: file != NULL: ", "AddBool", "ReleaseLast", "CHECK failed: (message1->GetReflection()) == (this): ", "First argument to Swap() (of type \"", "\") is not compatible with this reflection object (which is for type \"", "\").  Note that the exact same class is required; not just the same descriptor.", "CHECK failed: (message2->GetReflection()) == (this): ", "Second argument to Swap() (of type \"", "First argument to SwapFields() (of type \"", "Second argument to SwapFields() (of type \"", "AddAllocatedMessage", "INVALID_CPPTYPE", "CPPTYPE_INT32", "CPPTYPE_INT64", "CPPTYPE_UINT32", "CPPTYPE_UINT64", "CPPTYPE_DOUBLE", "CPPTYPE_FLOAT", "CPPTYPE_BOOL", "CPPTYPE_ENUM", "CPPTYPE_STRING", "CPPTYPE_MESSAGE", "%.1f", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/strtod.cc", "CHECK failed: (temp[0]) == ('1'): ", "CHECK failed: (temp[size-1]) == ('5'): ", "CHECK failed: (size) <= (6): ", "Unexpected end of string.", "String literals cannot cross line boundaries.", "Expected four hex digits for \\u escape sequence.", "Expected eight hex digits up to 10ffff for \\U escape sequence", "Expected hex digits for escape sequence.", "Invalid escape sequence in string literal.", "Numbers starting with leading zero must be in octal.", "\"e\" must be followed by exponent.", "Already saw decimal point or exponent; can't have another one.", "Hex and octal numbers must be integers.", "\"0x\" must be followed by hex digits.", "Need space between number and identifier.", "End-of-file inside block comment.", "  Comment started here.", "\"/*\" inside block comment.  Block comments cannot be nested.", "Need space between identifier and decimal point.", "Interpreting non ascii codepoint %d.", "Invalid control characters encountered in text.", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/tokenizer.cc", " Tokenizer::ParseFloat() passed text that could not have been tokenized as a float: ", " Tokenizer::ParseStringAppend() passed text that could not have been tokenized as a string: ", "\\U%08x", "Proto file starts with 0xEF but not UTF-8 BOM. Only UTF-8 is accepted for proto file.", "Unsupported", "MapKey::GetInt64Value", "MapKey::GetUInt64Value", "MapKey::GetInt32Value", "MapKey::GetUInt32Value", "MapKey::GetBoolValue", "Unsupported: type mismatch", "MapValueRef::type MapValueRef is not initialized.", "MapValueRef::GetInt64Value", "MapValueRef::GetUInt64Value", "MapValueRef::GetInt32Value", "MapValueRef::GetUInt32Value", "MapValueRef::GetBoolValue", "MapValueRef::GetEnumValue", "MapValueRef::GetStringValue", "MapValueRef::GetFloatValue", "MapValueRef::GetDoubleValue", "MapValueRef::GetMessageValue", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map_field.cc", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/message.cc", "Not implemented.", "Message class \"", "\" implements neither SetCachedSize() nor ByteSize().  Must implement one or the other.", "CHECK failed: (from.GetDescriptor()) == (descriptor): ", ": Tried to merge from a message with a different type.  to: ", ", from: ", ": Tried to copy from a message with a different type. to: ", "Should not reach here.", "File appears to be in generated pool but wasn't registered: ", "Type appears to be in generated pool but wasn't ", "registered: ", "Unimplemented Map Reflection API.", "CHECK failed: IsInitialized(): ", "Message of type \"", "\" is missing required fields: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/reflection_internal.h", "CHECK failed: this == other_mutator: ", "File is already registered: ", "Type is already registered: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/reflection_ops.cc", "CHECK failed: (&from) != (to): ", "CHECK failed: (to->GetDescriptor()) == (descriptor): ", "Tried to merge messages of different types ", "(merge ", " to ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/substitute.cc", "strings::Substitute format string invalid: asked for \"$", "\", but only ", " args were given.  Full format string was: \"", "Invalid strings::Substitute() format string: \"", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/text_format.cc", "Warning parsing text-format ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/dynamic_message.h", "Invalid key for map field.", "Field: ", "Index must be in range of repeated field values. ", "Index must be -1 for singular fields.", "Error parsing text-format ", ": 0x", " Outdent() without matching Indent().", "Expected identifier, got: ", "Expected string, got: ", "\", found \"", "Expected \"", "Expected integer, got: ", "Integer out of range (", "Expect a decimal number, got: ", "infinity", "Expected double, got: ", "Invalid float number: ", "TextFormat::Parser for Any supports only type.googleapis.com and type.googleprod.com, but found \"", "\". Value: \"", "Unknown enumeration value of \"", "\" for field \"", "Reached an unintended state: CPPTYPE_MESSAGE", "Invalid value for boolean field \"", "Expected integer or identifier, got: ", "CHECK failed: trees: ", "Could not find type \"", "\" stored in google.protobuf.Any.", "Value of type \"", "\" stored in google.protobuf.Any has missing required fields", "Extension \"", "\" is not defined or is not an extension of \"", "Message type \"", "\" has no field named \"", "CHECK failed: allow_unknown_field_ || reserved_field: ", "\" is specified multiple times.", "Field \"", "\" is specified along with field \"", "\", another member of oneof \"", "text format contains deprecated field \"", "Non-repeated Any specified multiple times.", "Non-repeated field \"", "Message missing required fields: ", "Proto type ", " not found", ": failed to parse contents", "...<truncated>...", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/wire_format.cc", "Cannot get here", "CHECK failed: (output->ByteCount()) == (expected_endpoint): ", ": Protocol message serialized to a size different from what was originally expected.  Perhaps it was modified by another thread during serialization?", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/extension_set.cc", "Don't lookup extension types if they aren't present (2). ", "Don't lookup extension types if they aren't present (1). ", "Index out-of-bounds (field is empty).", "CHECK failed: iter != extensions_.end(): ", "Extension not found.", "CHECK failed: iter == extensions_.end(): ", "\", field number ", "Multiple extension registrations for type \"", "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ", "CHECK failed: (type) == (WireFormatLite::TYPE_ENUM): ", "CHECK failed: (type) != (WireFormatLite::TYPE_ENUM): ", "CHECK failed: (type) != (WireFormatLite::TYPE_MESSAGE): ", "CHECK failed: (type) != (WireFormatLite::TYPE_GROUP): ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/strutil.cc", "CHECK failed: result != NULL: ", "CHECK failed: dest: ", "\\x%02x", "\\%03o", "CHECK failed: i >= 0: ", "FastHexToBuffer() wants non-negative integers, not ", "0123456789abcdef", "%.*g", "CHECK failed: value != NULL: ", "NULL output boolean given.", "CHECK failed: s != NULL: ", "This can't happen; base64 decoder state = ", "Logic problem? szsrc = ", "Bogus message code %d", "ALIGN_TYPE is wrong, please fix", "MAX_ALLOC_CHUNK is wrong, please fix", "Bogus buffer control mode", "Invalid component ID %d in SOS", "Invalid crop request", "DCT coefficient out of range", "DCT scaled block size %dx%d not supported", "Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c", "Bogus Huffman table definition", "Bogus input colorspace", "Bogus JPEG colorspace", "Bogus marker length", "Wrong JPEG library version: library is %d, caller expects %d", "Sampling factors too large for interleaved scan", "Invalid memory pool code %d", "Unsupported JPEG data precision %d", "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d", "Invalid progressive parameters at scan script entry %d", "Bogus sampling factors", "Invalid scan script at entry %d", "Improper call to JPEG library in state %d", "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u", "Bogus virtual array access", "Buffer passed to JPEG library is too small", "Suspension not allowed here", "CCIR601 sampling not implemented yet", "Too many color components: %d, max %d", "Unsupported color conversion request", "Bogus DAC index %d", "Bogus DAC value 0x%x", "Bogus DHT index %d", "Bogus DQT index %d", "Empty JPEG image (DNL not supported)", "Read from EMS failed", "Write to EMS failed", "Didn't expect more than one scan", "Input file read error", "Output file write error --- out of disk space?", "Fractional sampling not implemented yet", "Huffman code size table overflow", "Missing Huffman code table entry", "Maximum supported image dimension is %u pixels", "Empty input file", "Premature end of input file", "Cannot transcode due to multiple use of quantization table %d", "Scan script does not transmit all data", "Invalid color quantization mode change", "Not implemented yet", "Requested feature was omitted at compile time", "Arithmetic table 0x%02x was not defined", "Backing store not supported", "Huffman table 0x%02x was not defined", "JPEG datastream contains no image", "Quantization table 0x%02x was not defined", "Not a JPEG file: starts with 0x%02x 0x%02x", "Insufficient memory (case %d)", "Cannot quantize more than %d color components", "Cannot quantize to fewer than %d colors", "Cannot quantize to more than %d colors", "Invalid JPEG file structure: %s before SOF", "Invalid JPEG file structure: two SOF markers", "Invalid JPEG file structure: missing SOS marker", "Unsupported JPEG process: SOF type 0x%02x", "Invalid JPEG file structure: two SOI markers", "Failed to create temporary file %s", "Read failed on temporary file", "Seek failed on temporary file", "Write failed on temporary file --- out of disk space?", "Application transferred too few scanlines", "Unsupported marker type 0x%02x", "Virtual array controller messed up", "Image too wide for this implementation", "Read from XMS failed", "Write to XMS failed", "Copyright (C) 2016, Thomas G. Lane, Guido Vollbeding", "9b  17-Jan-2016", "Caution: quantization tables are too coarse for baseline JPEG", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "Unknown APP0 marker (not JFIF), length %u", "Unknown APP14 marker (not Adobe), length %u", "Define Arithmetic Table 0x%02x: 0x%02x", "Define Huffman Table 0x%02x", "Define Quantization Table %d  precision %d", "Define Restart Interval %u", "Freed EMS handle %u", "Obtained EMS handle %u", "End Of Image", "        %3d %3d %3d %3d %3d %3d %3d %3d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", "Warning: thumbnail image size does not match data length %u", "JFIF extension marker: type 0x%02x, length %u", "    with %d x %d thumbnail image", "Miscellaneous marker 0x%02x, length %u", "Unexpected marker 0x%02x", "        %4u %4u %4u %4u %4u %4u %4u %4u", "Quantizing to %d = %d*%d*%d colors", "Quantizing to %d colors", "Selected %d colors for quantization", "At marker 0x%02x, recovery action %d", "RST%d", "Smoothing not supported with nonstandard sampling ratios", "Start Of Frame 0x%02x: width=%u, height=%u, components=%d", "    Component %d: %dhx%dv q=%d", "Start of Image", "Start Of Scan: %d components", "    Component %d: dc=%d ac=%d", "  Ss=%d, Se=%d, Ah=%d, Al=%d", "Closed temporary file %s", "Opened temporary file %s", "JFIF extension marker: JPEG-compressed thumbnail image, length %u", "JFIF extension marker: palette thumbnail image, length %u", "JFIF extension marker: RGB thumbnail image, length %u", "Unrecognized component IDs %d %d %d, assuming YCbCr", "Freed XMS handle %u", "Obtained XMS handle %u", "Unknown Adobe color transform code %d", "Corrupt JPEG data: bad arithmetic code", "Inconsistent progression sequence for component %d coefficient %d", "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x", "Corrupt JPEG data: premature end of data segment", "Corrupt JPEG data: bad Huffman code", "Warning: unknown JFIF revision number %d.%02d", "Premature end of JPEG file", "Corrupt JPEG data: found marker 0x%02x instead of RST%d", "Invalid SOS parameters for sequential JPEG", "Application transferred too many scanlines", "JPEGMEM", "%ld%c", "RIFF", "WEBP", "VP8 ", "VP8L", "ALPH", "VP8X", "no object", "null VP8Io passed to VP8GetHeaders()", "Truncated header.", "Incorrect keyframe parameters.", "Frame not displayable.", "cannot parse picture header", "Bad code word", "bad partition length", "cannot parse segment header", "cannot parse filter header", "cannot parse partitions", "Not a key frame.", "NULL VP8Io parameter in VP8Decode().", "Premature end-of-partition0 encountered.", "Premature end-of-file encountered.", "Output aborted.", "Could not decode alpha data.", "Frame setup failed", "thread initialization failed.", "no memory during frame initialization.", "/proc/cpuinfo", "/sys/devices/system/cpu/present", "CPU architecture", "(v6l)", "Features", "vfpv3", "vfpv3d16", "vfpv4", "neon", "idiva", "idivt", "idiv", "iwmmxt", "Hardware", "Goldfish", "Processor", "/proc/self/auxv", "CPU implementer", "CPU variant", "CPU part", "CPU revision", "read beyond end of data", "invalid memory read", "Missing IHDR before IDAT", "Missing PLTE before IDAT", "Too many IDATs found", "Invalid attempt to read row data", "bad adaptive filter value", "sequential row overflow", "internal sequential row size calculation error", "lost rgb to gray", "unexpected compose", "lost/gained channels", "unexpected 8-bit transformation", "unknown interlace type", "unexpected bit depth", "color-map index out of range", "unexpected encoding (internal error)", "bad encoding (internal error)", "png_read_update_info/png_start_read_image: duplicate call", "bad color-map processing (internal error)", "png_read_image: unsupported transformation", "png_image_read: alpha channel lost", "unexpected alpha swap transformation", "png_read_image: invalid transformations", "background color must be supplied to remove alpha/transparency", "gray[8] color-map: too few entries", "gray[16] color-map: too few entries", "gray+alpha color-map: too few entries", "gray-alpha color-map: too few entries", "ga-alpha color-map: too few entries", "rgb[ga] color-map: too few entries", "rgb[gray] color-map: too few entries", "rgb+alpha color-map: too few entries", "rgb-alpha color-map: too few entries", "rgb color-map: too few entries", "palette color-map: too few entries", "invalid PNG color type", "bad data option (internal error)", "color map overflow (BAD internal error)", "bad background index (internal error)", "png_start_read_image/png_read_update_info: duplicate call", "Interlace handling should be turned on when using png_read_image", "Read palette index exceeding num_palette", ".Too many IDATs found", "..Too many IDATs found", "png_image_read: out of memory", "Image is too high to process with png_read_png()", "png_image_read: opaque pointer not NULL", "png_image_begin_read_from_stdio: invalid argument", "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_file: invalid argument", "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_memory: invalid argument", "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION", "png_image_finish_read[color-map]: no color-map", "png_image_finish_read: image too large", "png_image_finish_read: invalid argument", "png_image_finish_read: row_stride too large", "png_image_finish_read: damaged PNG_IMAGE_VERSION", "Out of memory", "internal error: array alloc", "internal error: array realloc", "Out of Memory", " using zstream", "1.2.3", "zstream unclaimed", "extra compressed data", "CRC error", "PNG unsigned integer out of range", "Not a PNG file", "PNG file corrupted by ASCII conversion", "invalid chunk type", "chunk data is too large", "out of place", "invalid", "missing IHDR", "duplicate", "ignored in grayscale PNG", "tRNS must be after", "hIST must be after", "bKGD must be after", "invalid values", "too many profiles", "out of memory", "bad keyword", "bad compression method", "too short", "No space in chunk cache for sPLT", "malformed sPLT chunk", "sPLT chunk has bad length", "sPLT chunk too long", "sPLT chunk requires too much memory", "invalid with alpha channel", "invalid index", "incorrect byte-order specifier", "invalid parameter count", "unrecognized equation type", "invalid data", "invalid unit", "bad width format", "non-positive width", "bad height format", "non-positive height", "no space in chunk cache", "insufficient memory to read chunk", "Insufficient memory to process text chunk", "Read failure in png_handle_zTXt", "insufficient memory", "unknown compression type", "truncated", "bad compression info", "unknown chunk exceeds memory limits", "error in user chunk", "Saving unknown chunk:", "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks", "unhandled critical chunk", "internal row logic error", "internal row size calculation error", "internal row width error", "invalid user transform pixel depth", "Not enough image data", "Extra compressed data", "Too much image data", "Row has too many bytes to allocate in memory", "Read Error", "Call to NULL read function", "Can't set both read_data_fn and write_data_fn in the same structure", "Write Error", "Call to NULL write function", "Potential overflow in png_zalloc()", "profile '", "Too many bytes for PNG signature", "Application built with libpng-", " but running with ", "Unknown freer parameter in png_data_freer", " +0000", "Ignoring invalid time value", "\nlibpng version 1.6.34 - September 29, 2017\nCopyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\nCopyright (c) 1996-1997 Andreas Dilger\nCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n", " libpng version 1.6.34 - September 29, 2017\n\n", "unexpected zlib return code", "unexpected end of LZ stream", "missing LZ dictionary", "zlib IO error", "bad parameters to zlib", "damaged LZ stream", "unsupported zlib version", "unexpected zlib return", "gamma value out of range", "gamma value does not match sRGB", "gamma value does not match libpng estimate", "sRGB", "invalid sRGB rendering intent", "inconsistent rendering intents", "duplicate sRGB information ignored", "cHRM chunk does not match sRGB", "exceeds application limits", "length does not match profile", "invalid length", "tag count too large", "invalid rendering intent", "intent outside defined range", "invalid signature", "PCS illuminant is not D50", "RGB color space not permitted on grayscale PNG", "Gray color space not permitted on RGB PNG", "invalid ICC profile color space", "invalid embedded Abstract ICC profile", "unexpected DeviceLink ICC profile class", "unexpected NamedColor ICC profile class", "unrecognized ICC profile class", "unexpected ICC PCS encoding", "ICC profile tag outside profile", "ICC profile tag start not a multiple of 4", "known incorrect sRGB profile", "out-of-date sRGB profile with no signature", "Not recognizing known sRGB profile that has been edited", "internal error handling cHRM coefficients", "internal error handling cHRM->XYZ", "Image width is zero in IHDR", "Invalid image width in IHDR", "Image width is too large for this architecture", "Image width exceeds user limit in IHDR", "Image height is zero in IHDR", "Invalid image height in IHDR", "Image height exceeds user limit in IHDR", "Invalid bit depth in IHDR", "Invalid color type in IHDR", "Invalid color type/bit depth combination in IHDR", "Unknown interlace method in IHDR", "Unknown compression method in IHDR", "MNG features are not allowed in a PNG datastream", "Unknown filter method in IHDR", "Invalid filter method in IHDR", "Invalid IHDR data", "ASCII conversion buffer too small", "fixed point overflow ignored", "inconsistent chromaticities", "invalid end points", "internal error checking chromaticities", "invalid chromaticities", "gamma table being rebuilt", "cHRM White X", "cHRM White Y", "cHRM Red X", "cHRM Red Y", "cHRM Green X", "cHRM Green Y", "cHRM Blue X", "cHRM Blue Y", "cHRM Red Z", "cHRM Green Z", "cHRM Blue Z", "png_set_eXIf does not work; use png_set_eXIf_1", "Insufficient memory for eXIf chunk data", "png_set_gAMA", "Invalid palette size, hIST allocation skipped", "Insufficient memory for hIST chunk data", "Invalid pCAL equation type", "Invalid format for pCAL parameter", "Invalid pCAL parameter count", "Insufficient memory for pCAL purpose", "Insufficient memory for pCAL units", "Insufficient memory for pCAL params", "Insufficient memory for pCAL parameter", "Invalid sCAL unit", "Invalid sCAL width", "Invalid sCAL height", "Memory allocation failed while processing sCAL", "Invalid sCAL width ignored", "Invalid sCAL height ignored", "Invalid palette length", "Invalid palette", "Invalid iCCP compression method", "Insufficient memory to process iCCP chunk", "Insufficient memory to process iCCP profile", "too many text chunks", "text compression mode is out of range", "text chunk: out of memory", "Insufficient memory to store text", "tRNS chunk has out-of-range samples for bit_depth", "too many sPLT chunks", "png_set_sPLT: invalid sPLT", "sPLT out of memory", "too many unknown chunks", "png_set_unknown_chunks now expects a valid location", "invalid location in png_set_unknown_chunks", "unknown chunk: out of memory", "invalid unknown chunk location", "png_set_keep_unknown_chunks: invalid keep", "png_set_keep_unknown_chunks: no chunk list", "png_set_keep_unknown_chunks: too many chunks", "invalid compression buffer size", "Compression buffer size cannot be changed because it is in use", "Compression buffer size cannot be reduced below 6", "keyword truncated", "keyword \"@1\": bad character '0x@2'", "Can't discard critical data on CRC error", "invalid after png_start_read_image or png_read_update_info", "Application must supply a known background gamma", "png_set_background", "output gamma out of expected range", "invalid alpha mode", "conflicting calls to set alpha mode and background", "gamma value", "invalid file gamma in png_set_gamma", "invalid screen gamma in png_set_gamma", "invalid before the PNG header has been read", "invalid error action to rgb_to_gray", "ignoring out of range rgb_to_gray coefficients", "rgb to gray red coefficient", "rgb to gray green coefficient", "libpng does not support gamma+background+rgb_to_gray", "invalid background gamma type", "Palette is NULL in indexed image", "NULL row buffer", "Uninitialized row", "png_do_rgb_to_gray found nongray pixel", "png_do_encode_alpha: unexpected call", "png_do_quantize returned rowbytes=0", "libpng warning: %s", "undefined", "libpng error: %s", "fixed point overflow in ", "Libpng jmp_buf still allocated", "Application jmp_buf size changed", "bad longjmp: ", "in use by IDAT", "deflateEnd failed (ignored)", "length exceeds PNG maximum", "compressed data too long", "Invalid bit depth for grayscale image", "Invalid bit depth for RGB image", "Invalid bit depth for paletted image", "Invalid bit depth for grayscale+alpha image", "Invalid bit depth for RGBA image", "Invalid image color type specified", "Invalid compression type specified", "Invalid filter type specified", "Invalid interlace type specified", "Invalid number of colors in palette", "Ignoring request to write a PLTE chunk in grayscale PNG", "Z_OK on Z_FINISH with output space", "Invalid sRGB rendering intent specified", "No profile for iCCP chunk", "ICC profile too short", "ICC profile length invalid (not a multiple of 4)", "iCCP: invalid keyword", "error writing ancillary chunked compressed data", "sPLT: invalid keyword", "Invalid sBIT depth specified", "Invalid number of transparent colors specified", "Ignoring attempt to write tRNS chunk out-of-range for bit_depth", "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8", "Can't write tRNS with an alpha channel", "Invalid background palette index", "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8", "Ignoring attempt to write bKGD chunk out-of-range for bit_depth", "Invalid number of histogram entries specified", "tEXt: invalid keyword", "tEXt: text too long", "zTXt: invalid compression type", "zTXt: invalid keyword", "iTXt: invalid keyword", "iTXt: invalid compression", "iTXt: uncompressed text too long", "Unrecognized unit type for oFFs chunk", "Unrecognized equation type for pCAL chunk", "pCAL: invalid keyword", "Can't write sCAL (buffer too small)", "Unrecognized unit type for pHYs chunk", "Invalid time specified for tIME chunk", "png_image_write_to_memory: PNG too big", "Writing zero-length unknown chunk", "profile matches sRGB but writing iCCP instead", "Valid palette required for paletted images", "No IDATs written into file", "Wrote palette index exceeding num_palette", "png_write_info was never called before png_write_row", "internal write transform logic error", "png_write_image: internal call error", "png_image_write_: out of memory", "Unknown row filter for method 0", "png_set_filter: UP/AVG/PAETH cannot be added after start", "Unknown custom filter method", "memory image too large", "supplied row stride too small", "image row stride too large", "no color-map for color-mapped image", "png_write_image: unsupported transformation", "Only compression windows <= 32k supported by PNG", "Only compression windows >= 256 supported by PNG", "Only compression method 8 is supported by PNG", "no rows for png_write_image to write", "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported", "png_image_write_to_memory: invalid argument", "png_image_write_to_memory: incorrect PNG_IMAGE_VERSION", "png_image_write_to_stdio: invalid argument", "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION", "png_image_write_to_file: invalid argument", "png_image_write_to_file: incorrect PNG_IMAGE_VERSION", "Tag ", "pseudo-", "_TIFFVGetField", "Truncating NumberOfInks from %u to %u", "%s: Invalid %stag \"%s\" (not supported by codec)", "DotRange", "SamplesPerPixel tag value is changing, but SMinSampleValue tag was read with a different value. Cancelling it", "SamplesPerPixel tag value is changing, but SMaxSampleValue tag was read with a different value. Cancelling it", "Nonstandard tile width %d, convert file", "Nonstandard tile length %d, convert file", "%s: Sorry, cannot nest SubIFDs", "TIFFSetField", "%s: Invalid InkNames value; expecting %d names, found %d", "%s: Failed to allocate space for list of custom values", "%s: Bad field type %d for \"%s\"", "%s: Null count for \"%s\" (type %d, writecount %d, passcount %d)", "custom tag binary object", "%s: Bad value %u for \"%s\" tag", "%s: Bad value %f for \"%s\" tag", "%s: Unknown %stag %u", "%s: Cannot modify tag \"%s\" while writing", "Directory count exceeded 65535 limit, giving up on counting.", "Error fetching directory count", "Error fetching directory link", "Sanity check on directory count failed", "%s: Error fetching directory count", "%s: Error fetching directory link", "Can not unlink directory in read-only file", "Directory %d does not exist", "Error writing directory link", "Failed to allocate fields array", "_TIFFSetupFields", "Setting up field info failed", "%s: \n", "field[%2d] %5lu, %2d, %2d, %d, %2d, %5s, %5s, %s\n", "TIFFFieldWithTag", "Internal error, unknown tag 0x%x", "TIFFFieldWithName", "Internal error, unknown tag %s", "Tag %d", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "ApertureValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CFAPattern", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "Sharpness", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "SubfileType", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "Model", "StripOffsets", "Orientation", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "MinSampleValue", "MaxSampleValue", "XResolution", "YResolution", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "ResolutionUnit", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "ColorMap", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "CFARepeatPatternDim", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "ICC Profile", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "PerSample", "Indexed", "GlobalParametersIFD", "ProfileType", "FaxProfile", "CodingMethods", "VersionYear", "ModeNumber", "Decode", "ImageBaseColor", "T82Options", "StripRowCounts", "ImageLayer", "%s: Seek error accessing TIFF directory", "%s: Can not read TIFF directory count", "Sanity check on directory count failed, this is probably not a valid IFD offset", "to read TIFF directory", "%.100s: Can not read TIFF directory", "Can not read TIFF directory count", "Sanity check on directory count failed, zero tag directories not supported", "Can not read TIFF directory", "for \"StripByteCounts\" array", "Cannot determine size of unknown tag type %d", "Incorrect count for \"%s\"", "Incompatible type for \"%s\"", "IO error during reading of \"%s\"", "Incorrect value for \"%s\"", "Cannot handle different values per sample for \"%s\"", "Sanity check on size of \"%s\" value failed", "Out of memory reading of \"%s\"", "Incorrect count for \"%s\"; tag ignored", "Incompatible type for \"%s\"; tag ignored", "IO error during reading of \"%s\"; tag ignored", "Incorrect value for \"%s\"; tag ignored", "Cannot handle different values per sample for \"%s\"; tag ignored", "Sanity check on size of \"%s\" value failed; tag ignored", "Out of memory reading of \"%s\"; tag ignored", "ReadDirEntryArray", "Failed to allocate memory for %s (%ld elements of %ld bytes each)", "TIFFReadDirEntryArray", "unknown tagname", "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT", "for strip array", "TIFFFetchNormalTag", "No definition found for tag %d", "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations", "ASCII value for tag \"%s\" does not end in null byte", "incorrect count for field \"%s\", expected 2, got %d", "incorrect count for field \"%s\", expected %d, got %d", "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null", "tiles", "strips", "TIFFCheckDirOffset", "Cannot handle more than 65535 TIFF directories", "for IFD list", "Failed to read directory at offset %llu", "Invalid TIFF directory; tags are not sorted in ascending order", "Unknown field with tag %d (0x%x) encountered", "Registering anonymous field with tag %d (0x%x) failed", "Planarconfig tag value assumed incorrect, assuming data is contig instead of chunky", "TIFF directory is missing required \"%s\" field", "Cannot handle zero number of %s", "tif->tif_dir.td_stripoffset is already allocated. Likely duplicated StripOffsets/TileOffsets tag", "tif->tif_dir.td_stripbytecount is already allocated. Likely duplicated StripByteCounts/TileByteCounts tag", "Ignoring %s since BitsPerSample tag not found", "Ignoring %s because BitsPerSample=%d>24", "Photometric tag is missing, assuming data is YCbCr", "Photometric tag value assumed incorrect, assuming data is YCbCr instead of RGB", "BitsPerSample tag is missing, assuming 8 bits per sample", "SamplesPerPixel tag is missing, assuming correct SamplesPerPixel value is 3", "SamplesPerPixel tag is missing, applying correct SamplesPerPixel value of 3", "Colormap", "TIFF directory is missing required \"StripByteCounts\" field, calculating from imagelength", "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength", "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength", "for chopped \"StripByteCounts\" array", "for chopped \"StripOffsets\" array", "Cannot handle zero scanline size", "Cannot handle zero tile size", "Cannot handle zero strip size", "Failed to read custom directory at offset %llu", "Wrong data type %d for \"%s\"; tag ignored", "incorrect count for field \"%s\" (%llu, expecting %u); tag ignored", "incorrect count for field \"%s\" (%llu, expecting %u); tag trimmed", "Maximum TIFF file size exceeded", "IO error writing tag data", "Error writing SubIFD directory link", "Error writing TIFF header", "Sanity check on tag count failed, likely corrupt TIFF", "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file.", "Illegal value for SubIFD tag", "Negative value is illegal", "Not-a-number value is illegal", "Error post-encoding before directory write", "Error flushing data before directory write", "TIFFWriteDirectoryTagCheckedLong8Array", "LONG8 not allowed for ClassicTIFF", "TIFFWriteDirectoryTagCheckedSlong8Array", "SLONG8 not allowed for ClassicTIFF", "Cannot find SubIFD tag", "IO error writing directory", "Error updating TIFF header", "Memory mapped files not currently supported for this operation.", "Attempt to reset field on directory not already on disk.", "%s: Can not read TIFF directory entry.", "%s: Could not find tag %d.", "Value exceeds 32bit range of output type.", "%s: Can not write TIFF directory entry.", "for field buffer.", "No space for photometric conversion table", "No space for B&W mapping table", "Invalid vertical YCbCr subsampling", "No space for tile buffer", "Integer overflow in %s", "gtStripSeparate", "gtTileSeparate", "No space for YCbCr->RGB conversion state", "Invalid values for YCbCrCoefficients tag", "Invalid values for ReferenceBlackWhite tag", "No space for Palette mapping table", "Assuming 8-bit colormap", "Sorry, requested compression method is not configured", "Sorry, can not handle images with %d-bit samples", "Sorry, can not handle images with IEEE floating-point samples", "Missing needed %s tag", "Sorry, can not handle contiguous data with %s=%d, and %s=%d and Bits/Sample=%d", "Samples/pixel", "Sorry, can not handle RGB image with %s=%d", "Color channels", "Sorry, can not handle separated image with %s=%d", "Sorry, LogL data must have %s=%d", "Sorry, LogLuv data must have %s=%d or %d", "Sorry, can not handle LogLuv images with %s=%d", "Planarconfiguration", "Sorry, can not handle image with %s=%d, %s=%d", "colorchannels", "Sorry, can not handle image with %s=%d, %s=%d and %s=%d", "Bits/sample", "Sorry, can not handle image with %s=%d", "Missing required \"Colormap\" tag", "Out of memory for colormap copy", "Invalid value for WhitePoint tag.", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "Sorry, can not handle image", "No \"get\" routine setup", "No \"put\" routine setupl; probably can not handle image format", "Can't use TIFFReadRGBAStrip() with tiled file.", "Row passed to TIFFReadRGBAStrip() must be first in a strip.", "Can't use TIFFReadRGBATile() with stripped file.", "Row/col passed to TIFFReadRGBATile() must be topleft corner of a tile.", "\"%s\": Bad mode", "%s: Out of memory (TIFF structure)", "One of the client procedures is NULL pointer.", "Cannot read TIFF header", "Not a TIFF or MDI file, bad magic number %d (0x%x)", "Not a TIFF file, bad version number %d (0x%x)", "Not a TIFF file, bad BigTIFF offsetsize %d (0x%x)", "Not a TIFF file, bad BigTIFF unused %d (0x%x)", "Invalid buffer size", "No space for data buffer at scanline %lu", "Read error at scanline %lu; got %llu bytes, expected %llu", "Read error at row %lu, col %lu, tile %lu; got %llu bytes, expected %llu", "Seek error at scanline %lu, strip %lu", "Read error at scanline %lu, strip %lu; got %llu bytes, expected %llu", "Seek error at row %lu, col %lu, tile %lu", "Read error at row %lu, col %lu; got %llu bytes, expected %llu", "File not open for reading", "Can not read scanlines from a tiled image", "%lu: Strip out of range, max %lu", "Compression scheme does not support access to raw uncompressed data", "%llu: Invalid strip byte count, strip %lu", "Integer overflow", "Invalid strip byte count %llu, strip %lu", "Too large strip byte count %llu, strip %lu. Limiting to %llu", "Read error on strip %lu; got %llu bytes, expected %llu", "Data buffer too small to hold strip %lu", "No space for strip buffer", "%lu: Row out of range, max %lu", "%lu: Sample out of range, max %lu", "Data buffer too small to hold part of strip %lu", "Can not read tiles from a stripped image", "%lu: Tile out of range, max %lu", "%llu: Invalid tile byte count, tile %lu", "Too large tile byte count %llu, tile %lu. Limiting to %llu", "Data buffer too small to hold tile %lu", "Zero tiles", "TIFFNumberOfStrips", "Invalid td_samplesperpixel value", "Invalid YCbCr subsampling (%dx%d)", "Computed scanline size is zero", "Invalid YCbCr subsampling", "Integer arithmetic overflow", "%lu: Col out of range, max %lu", "%lu: Depth out of range, max %lu", "TIFFNumberOfTiles", "Tile length is zero", "Tile width is zero", "TIFFTileRowSize", "Samples per pixel is zero", "Computed tile row size is zero", "Seek error at scanline %lu", "Write error at scanline %lu", "No space to expand strip arrays", "tile", "strip", "Must set \"ImageWidth\" before writing data", "Must set \"PlanarConfiguration\" before writing data", "No space for %s arrays", "File not open for writing", "Can not write tiles to a stripped image", "Tile %lu out of range, max %lu", "Can not write scanlines to a tiled image", "Can not grow image by strips when using separate planes", "Zero strips per image", "No space for output buffer", "Can not change \"ImageLength\" when using separate planes", "%s: ", "Warning, ", "%s: Cannot open", "Cannot get \"Predictor\" tag as plugin is not configured", "No space for \"TransferFunction\" tag", "Compression algorithm does not support random access", "%s %s encoding is not implemented", "scanline", "Compression scheme %u %s encoding is not implemented", "%s %s decoding is not implemented", "Compression scheme %u %s decoding is not implemented", "TIFFRegisterCODEC", "No space to register compression scheme %s", "TIFFUnRegisterCODEC", "Cannot remove compression scheme %s; not registered", "JPEGLib", "TIFFReadScanline", "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB.", "fractional scanline discarded", "JPEGDecodeRaw", "application buffer not large enough for all data.", "application buffer not large enough for all data, possible subsampling issue", "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER", "  JPEG Tables: (%lu bytes)\n", "TIFFjpeg_progress_monitor", "Scan number %d exceeds maximum scans (%d). This limit can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER environment variable.", "fractional scanline not read", "JPEGEncode", "Failed to allocate memory", "Invalig horizontal/vertical sampling value", "BitsPerSample %d not allowed for JPEG", "PhotometricInterpretation %d not allowed for JPEG", "JPEG tile height must be multiple of %d", "JPEG tile width must be multiple of %d", "RowsPerStrip must be multiple of %d for JPEG", "TIFFjpeg_tables_dest", "No space for JPEGTables", "JPEGSetupDecode", "Bogus JPEGTables field", "Improper JPEG strip/tile size, expected %dx%d, got %dx%d", "JPEG strip size exceeds expected dimensions, expected %dx%d, got %dx%d", "JPEG strip/tile size exceeds expected dimensions, expected %dx%d, got %dx%d", "Improper JPEG component count", "Improper JPEG data precision", "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC", "Reading this strip would require libjpeg to allocate at least %u bytes. This is disabled since above the %u threshold. You may override this restriction by defining the LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC environment variable, or recompile libtiff by defining the TIFF_LIBJPEG_LARGEST_MEM_ALLOC macro to a value greater than %u", "Improper JPEG sampling factors %d,%d\nApparently should be %d,%d.", "Improper JPEG sampling factors", "Strip/tile too large for JPEG", "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped", "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed", "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]", "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped", "TIFFInitJPEG", "Merging JPEG codec-specific tags failed", "No space for JPEG state block", "Failed to allocate memory for JPEG tables", "JPEGTables", "%s compression support is not configured", "None", "PackBits", "ThunderScan", "NeXT", "JPEG", "Old-style JPEG", "CCITT RLE", "CCITT RLE/W", "CCITT Group 3", "CCITT Group 4", "ISO JBIG", "Deflate", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "Not enough data for scanline %lu, expected a request for at most %lld bytes, got a request for %lld bytes", "Bits/sample must be 1 for Group 3/4 encoding/decoding", "Row pixels integer overflow (rowpixels %u)", "for Group 3/4 run arrays", "No space for Group 3/4 reference line", "  Group 4 Options:", "%suncompressed data", "  Group 3 Options:", "%s2-d encoding", "%sEOL padding", " (%lu = 0x%lx)\n", "  Fax Data:", " clean", " receiver regenerated", " uncorrected errors", " (%u = 0x%x)\n", "  Bad Fax Lines: %lu\n", "  Consecutive Bad Fax Lines: %lu\n", "Premature EOL", "Line length mismatch", "Fractional scanlines cannot be read", "Bad code word at line %u of %s %u (x %u)", "Uncompressed data (not supported) at line %u of %s %u (x %u)", "Premature EOF at line %u of %s %u (x %u)", "%s at line %u of %s %u (got %u, expected %u)", "Fractional scanlines cannot be written", "InitCCITTFax3", "Merging common CCITT Fax codec-specific tags failed", "No space for state block", "TIFFInitCCITTFax3", "Merging CCITT Fax 3 codec-specific tags failed", "TIFFInitCCITTFax4", "Merging CCITT Fax 4 codec-specific tags failed", "Group4Options", "Group3Options", "FaxMode", "FaxFillFunc", "BadFaxLines", "CleanFaxData", "ConsecutiveBadFaxLines", "Translation buffer too short", "Not enough data at row %lu (short %llu pixels)", "Unknown data format %d for LogLuv compression", "Unknown encoding %d for LogLuv compression", "SGILog compression cannot handle non-contiguous data", "No support for converting user data format to LogLuv", "No space for SGILog translation buffer", "Y, L", "XYZ, Luv", "Sorry, can not handle LogL image with %s=%d", "No support for converting user data format to LogL", "Inappropriate photometric interpretation %d for SGILog compression; %s", "must be either LogLUV or LogL", "SGILog compression supported only for %s, or raw data", "Merging SGILog codec-specific tags failed", "%s: No space for LogLuv state block", "SGILogDataFmt", "SGILogEncode", "LZWDecode: Strip %d not terminated with EOI code", "LZWDecode: Corrupted LZW table at scanline %d", "Corrupted LZW table at scanline %d", "Wrong length of decoded string: data probably corrupted at scanline %d", "Bogus encoding, loop in the code table; scanline %d", "Not enough data at scanline %d (short %llu bytes)", "Old-style LZW codes, convert file", "No space for LZW state block", "No space for LZW code table", "No space for LZW hash table", "Unsupported BitsPerSample = %d", "Invalid data for scanline %ld", "Not enough data for scanline %ld", "Discarding %lu bytes to avoid buffer overrun", "Terminating PackBitsDecode due to lack of data.", "Not enough data for scanline %lu", "horDiff32", "(cc%(4*stride))!=0", "horDiff8", "(cc%(2*stride))!=0", "(cc%stride)!=0", "PredictorDecodeTile", "occ0%rowsize != 0", "horAcc32", "cc%(4*stride))!=0", "horAcc16", "cc%(2*stride))!=0", "horAcc8", "fpDiff", "(cc%(bps*stride))!=0", "fpAcc", "cc%(bps*stride))!=0", "Out of memory allocating %d byte temp buffer.", "PredictorEncodeTile", "(cc0%rowsize)!=0", "Horizontal differencing \"Predictor\" not supported with %d-bit samples", "Floating point \"Predictor\" not supported with %d data format", "Floating point \"Predictor\" not supported with %d-bit samples", "\"Predictor\" value %d not supported", "  Predictor: ", "none ", "horizontal differencing ", "floating point predictor ", "%d (0x%x)\n", "TIFFPredictorInit", "Merging Predictor codec-specific tags failed", "Predictor", "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample.", "Not enough", "Too much", "%s data at scanline %lu (%llu != %llu)", "Encoder error: %s", "ZLib error: %s", "Decoding error at scanline %lu, %s", "Not enough data at scanline %lu (short %llu bytes)", "ZLib cannot deal with buffers this size", "Merging Deflate codec-specific tags failed", "No space for ZIP state block", "%s/tmp.XXXXXXXXXX", "/tmp/", "%08x:", " %02x", "string = \"%s\"\n", "ascii = \"%s\"\n", "uclangcode = %d; uclen = %d\n", "sccode = %d\n", "maclen = %d\n", "(%f, %f, %f)\n", "number of entires = %d\n", "gamma = %f\n", "entry[%d] = %f\n", "numinchans=%d, numoutchans=%d, clutlen=%d\n", "e[%d][%d]=%f ", "numintabents=%d, numouttabents=%d\n", "cannot get header\n", "cannot get tab table\n", "numattrs=%d\n", "attrno=%d; attrname=\"%s\"(0x%08x); attrtype=\"%s\"(0x%08x)\n", "refcnt = %d; type = 0x%08x %s\n", "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", "error: cannot get box\n", "error: expecting signature box\n", "incorrect magic number\n", "expecting file type box\n", "box type %s\n", "error: no code stream found\n", "error: cannot decode code stream\n", "error: missing IHDR box\n", "warning: number of components mismatch\n", "error: no components\n", "warning: component data type mismatch\n", "error: unsupported compression type\n", "warning: superfluous BPCC box\n", "error: no COLR box\n", "ICC Profile CS %08x\n", "warning: missing PCLR box or superfluous CMAP box\n", "warning: missing CMAP box or superfluous PCLR box\n", "error: invalid component number in CMAP box\n", "error: invalid CMAP LUT index\n", "error: no memory\n", "invalid component number in RGN marker segment\n", "warning: ignoring unknown marker segment\n", "jpc_dec_decodecblks failed\n", "warning: possibly corrupt code stream\n", "write component failed\n", "invalid component number in COC marker segment\n", "invalid component number in QCC marker segment\n", "RESOLUTION LEVEL %d\n", "xs =%d, ys = %d, xe = %d, ye = %d, w = %d, h = %d\n", "BAND %d\n", "CODE BLOCK GROUP %d\n", "CODE BLOCK %d\n", "jpc_dec_decodepkts failed\n", "warning: ignoring trailing garbage (%lu bytes)\n", "read error\n", "warning: not enough tile data (%lu bytes)\n", "warning: ignoring invalid option %s\n", "cannot get marker segment\n", "unexpected marker segment type\n", "invalid tile number in SOT marker segment\n", "maxlyrs", "maxpkts", "channo=%d; type=%d; assoc=%d\n", "numchans = %d\n", "cmptno=%d; map=%d; pcol=%d\n", "numents=%d; numchans=%d\n", "LUT[%d][%d]=%d\n", "method=%d; pri=%d; approx=%d\n", "csid=%d\n", "warning: cannot handle large 64-bit box length\n", "cannot copy box data\n", "cannot parse box data\n", "JP2 box: ", "type=%c%s%c (0x%08x); length=%d\n", "FTYP", "JP2H", "IHDR", "BPCC", "COLR", "PCLR", "CMAP", "CDEF", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "%02x ", "hoff[%d] = %d; voff[%d] = %d\n", "seqno = %d;\n", "po[%d] = %d; ", "cs[%d] = %d; ce[%d] = %d; ", "rs[%d] = %d; re[%d] = %d; ", "le[%d] = %d\n", "compno = %d; qntsty = %d; numguard = %d; numstepsizes = %d\n", "expn[%d] = 0x%04x; mant[%d] = 0x%04x;\n", "qntsty = %d; numguard = %d; numstepsizes = %d\n", "compno = %d; roisty = %d; roishift = %d\n", "compno = %d; csty = 0x%02x; numdlvls = %d;\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x; qmfbid = %d;\n", "csty = 0x%02x;\n", "numdlvls = %d; qmfbid = %d; mctrans = %d\n", "prg = %d; numlyrs = %d;\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x;\n", "prcwidth[%d] = %d, prcheight[%d] = %d\n", "caps = 0x%02x;\n", "width = %d; height = %d; xoff = %d; yoff = %d;\n", "tilewidth = %d; tileheight = %d; tilexoff = %d; tileyoff = %d;\n", "prec[%d] = %d; sgnd[%d] = %d; hsamp[%d] = %d; vsamp[%d] = %d\n", "tileno = %d; len = %d; partno = %d; numparts = %d\n", "regid = %d;\n", "data = ", "ind=%d; len = %d;\n", "data =\n", "type = 0x%04x (%s);", " len = %d;", "warning: trailing garbage in marker segment (%ld bytes)\n", "warning: stopping decode prematurely as requested\n", "packet offset=%08ld prg=%d cmptno=%02d rlvlno=%02d prcno=%03d lyrno=%02d\n", "missing SOP marker segment\n", "alignment failed\n", "hdrlen=%lu bodylen=%lu \n", "cannot get (EPH) marker segment\n", "missing EPH marker segment\n", "packet body offset=%06ld\n", "%04x:", "warning: corrupt code stream\n", "warning: bad segmentation symbol\n", "coding pass failed passtype=%d segtype=%d\n", "warning: bad termination pattern detected\n", "cannot write SOC marker\n", "cannot write SIZ marker\n", "Creator: JasPer Version %s", "cannot write COM marker\n", "cannot write COD marker\n", "start=%d end=%d type=%d term=%d lyrno=%d firstchar=%02x size=%ld pos=%ld\n", "lyrno = %02d\n", "lyrno=%02d cmptno=%02d rlvlno=%02d bandno=%02d prcno=%02d cblkno=%03d passno=%03d\n", "min rdslope = %f max rdslope = %f\n", "maxlen=%08ld actuallen=%08ld thresh=%f\n", "warning: empty layer generated\n", "success %d goodthresh %f\n", "  tcmpt %5d %5d %5d %5d\n", "    rlvl %5d %5d %5d %5d\n", "      band %5d %5d %5d %5d\n", "        prc %5d %5d %5d %5d (%5d %5d)\n", "         cblk %5d %5d %5d %5d\n", "unsupported image type\n", "ignoring invalid mode %s\n", "ignoring invalid progression order %s\n", "warning: invalid intermediate layer rates specifier ignored (%s)\n", "warning: overriding imgareatlx value\n", "warning: overriding imgareatly value\n", "warning: color space apparently not RGB\n", "invalid tile width %lu\n", "invalid tile height %lu\n", "invalid tile grid offset (%lu, %lu)\n", "cannot use real mode for lossless coding\n", "invalid precinct width\n", "invalid precinct height\n", "invalid code block width %d\n", "invalid code block height %d\n", "code block size too large\n", "too many layers\n", "must be at least one resolution level\n", "invalid number of guard bits\n", "warning: specified rate is unreasonably large (%lu > %lu)\n", "intermediate layer rates must increase monotonically\n", "warning: intermediate layer rates must be less than overall rate\n", "error: too few guard bits (need at least %d)\n", "cannot open tmp file\n", "cannot write SOT marker\n", "cannot write SOD marker\n", "cannot write EOI marker\n", "invalid JP encoder options\n", "dotile failed\n", "real", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "imgareatlx", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "rate", "ilyrrates", "_jp2overhead", "%s\n_jp2overhead=%lu\n", "1.900.1", "unrecognized exception", "Cannot determine current file position (%T).", "No frame buffer specified as pixel data source.", "Tried to write more scan lines than specified by the data window.", "Failed to write pixel data to image file \"", "Cannot copy pixels from image file \"", "\" to image file \"", "\". The input file is tiled, but the output file is not. Try using TiledOutputFile::copyPixels instead.", "\". The files have different data windows.", "Quick pixel copy from image file \"", "\" failed. The files have different line orders.", "\" failed. The files use different compression methods.", "\" failed.  The files have different channel lists.", "\" failed. \"", "\" already contains pixel data.", "Cannot update preview image pixels. File \"", "\" does not contain a preview image.", "preview", "Unexpected attribute type.", "Cannot update preview image pixels for file \"", "Cannot overwrite scan line ", ". The scan line has not yet been stored in file \"", "Cannot open image file \"", "Pixel type of \"", "\" channel of output file \"", "\" is not compatible with the frame buffer's pixel type.", "X and/or y subsampling factors of \"", "\" are not compatible with the frame buffer's subsampling factors.", "File output failed.", "Unexpected end of file.", "Early end of file: read ", " out of ", " requested bytes.", "(string)", "Cannot register image file attribute type \"", "\". The type has already been registered.", "Cannot create image file attribute of unknown type \"", "chromaticities", "whiteLuminance", "adoptedNeutral", "renderingTransform", "lookModTransform", "xDensity", "owner", "comments", "capDate", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "wrapmodes", "framesPerSecond", "multiView", "worldToCamera", "worldToNDC", "Cannot find image attribute \"", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "lineOrder", "compression", "Invalid display window in image header.", "Invalid data window in image header.", "The width of the data window exceeds the maximum width of ", "pixels.", "Invalid pixel aspect ratio in image header.", "Invalid screen window width in image header.", "Tiled image has no tile description attribute.", "Invalid tile size in image header.", "The width of the tiles exceeds the maximum width of ", "Invalid level mode in image header.", "Invalid level rounding mode in image header.", "Invalid line order in image header.", "Unknown compression type in image header.", "\" image channel is invalid.", "The x subsampling factor for the \"", "\" channel is not 1.", "The y subsampling factor for the \"", "\" channel is invalid.", "The minimum x coordinate of the image's data window is not a multiple of the x subsampling factor of the \"", "\" channel.", "The minimum y coordinate of the image's data window is not a multiple of the y subsampling factor of the \"", "Number of pixels per row in the image's data window is not a multiple of the x subsampling factor of the \"", "Number of pixels per column in the image's data window is not a multiple of the y subsampling factor of the \"", "Image attribute name cannot be an empty string.", "Cannot assign a value of type \"", "\" to image attribute \"", "File is not an image file.", "Cannot read version ", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", "Invalid ", "attribute name", ": it is more than ", " characters long.", "attribute type name", "Unexpected type for image attribute \"", "timecode", "Integer multiplication overflow.", "stringvector", "Tried to read scan line outside the image file's data window.", "Cannot read image file \"", "Tried to read a raw scanline from a tiled image.", "Error reading pixel data from image file \"", "Tried to read a raw tile from a scanline-based image.", "Error reading tile data from image file \"", "Cannot get a TiledInputFile pointer from an InputFile that is not tiled.", "Unknown pixel data type.", "Data decoding (rle) failed.", "Cannot find image channel \"", "Image channel name cannot be an empty string.", "No frame buffer specified as pixel data destination.", "Scan line ", " is missing.", "Unexpected data block y coordinate.", "Unexpected data block length.", "\" channel of input file \"", "Attempt to perform a memory-mapped read on a file that is not memory mapped.", "Cannot find frame buffer slice \"", "Frame buffer slice name cannot be an empty string.", "keycode", "chlist", "channel name", "tiledesc", "box2i", "box2f", "Data compression (zlib) failed.", "Data decompression (zlib) failed.", "Integer addition overflow.", "\" to an attribute of type \"", "Cannot copy the value of an image file attribute of type \"", "Unknown pixel type.", "Error decompressing data (input data are shorter than expected).", "Error decompressing data (input data are longer than expected).", "rational", "Error in header for PIZ-compressed data (invalid bitmap size).", "m33f", "m33d", "m44f", "m44d", "basic_string::_S_construct null not valid", "Cannot initialize mutex (%T).", "Cannot lock mutex (%T).", "Cannot unlock mutex (%T).", "Cannot initialize semaphore (%T).", "Post operation on semaphore failed (%T).", "Cannot read semaphore value (%T).", "Attempt to set the number of threads in a thread pool to a negative value.", "Error in Huffman-encoded data (decoded data are shorter than expected).", "Error in Huffman-encoded data (unexpected end of code table data).", "Error in Huffman-encoded data (code table is longer than expected).", "Error in Huffman-encoded data (invalid code table entry).", "Error in Huffman-encoded data (decoded data are longer than expected).", "Error in Huffman-encoded data (invalid code).", "Error in Huffman-encoded data (invalid code table size).", "Error in header for Huffman-encoded data (invalid number of bits).", "Invalid key code film manufacturer code (must be between 0 and 99).", "Invalid key code film type (must be between 0 and 99).", "Invalid key code prefix (must be between 0 and 999999).", "Invalid key code count (must be between 0 and 9999).", "Invalid key code perforation offset (must be between 0 and 119).", "Invalid key code number of perforations per frame (must be between 1 and 15).", "Invalid key code number of perforations per count (must be between 20 and 120).", "Tile (", ") is not a valid tile.", ") is missing.", "Unexpected tile x coordinate.", "Unexpected tile y coordinate.", "Unexpected tile x level number coordinate.", "Unexpected tile y level number coordinate.", "Unexpected tile block length.", "Tried to read a tile outside the image file's data window.", "Error calling numLevels() on image file \"", "\" (numLevels() is not defined for files with RIPMAP level mode).", "Error calling levelWidth() on image file \"", "Error calling levelHeight() on image file \"", "Error calling numXTiles() on image file \"", "\" (Argument is not in valid range).", "Error calling numYTiles() on image file \"", "Error calling dataWindowForLevel() on image file \"", "Error calling dataWindowForTile() on image file \"", "Arguments not in valid range.", "Expected a tiled file but the file is not tiled.", "Argument not in valid range.", "Unknown LevelMode format.", "Cannot create new thread (%T).", "internal error: attempted to use an unavailable function", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "__gnu_cxx::__concurrence_broadcast_error", "__gnu_cxx::__concurrence_wait_error", "std::bad_exception", "pure virtual method called\n", "deleted virtual method called\n", "std::bad_alloc", "basic_ios::clear", "POSIX", "%.*Lf", "%m/%d/%y", "%H:%M", "%H:%M:%S", "locale::facet::_S_create_c_locale name not valid", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_filebuf::underflow codecvt::max_length() is not valid", "basic_filebuf::underflow incomplete character in file", "basic_filebuf::underflow invalid byte sequence in file", "basic_filebuf::underflow error reading the file", "basic_filebuf::xsgetn error reading the file", "basic_filebuf::_M_convert_to_external conversion error", "std::bad_typeid", "std::bad_cast", "-+xX0123456789abcdef0123456789ABCDEF", "-+xX0123456789abcdefABCDEF", "-0123456789", "AKST", "space", "print", "cntrl", "upper", "lower", "digit", "punct", "xdigit", "alnum", "graph", "system", "terminate called recursively\n", "terminate called after throwing an instance of '", "terminate called without an active exception\n", "  what():  ", "_GLOBAL_", "(anonymous namespace)", "string literal", "auto", "[abi:", "{default arg#", "JArray", "vtable for ", "VTT for ", "construction vtable for ", "-in-", "typeinfo for ", "typeinfo name for ", "typeinfo fn for ", "non-virtual thunk to ", "virtual thunk to ", "covariant return thunk to ", "java Class for ", "guard variable for ", "TLS init function for ", "TLS wrapper function for ", "reference temporary #", " for ", "hidden alias for ", "transaction clone for ", "non-transaction clone for ", "_Sat ", "_Accum", "_Fract", "operator", "operator ", "new ", "java resource ", "decltype (", "this", "{parm#", "global constructors keyed to ", "global destructors keyed to ", "{lambda(", "{unnamed type#", " [clone ", " restrict", " volatile", " const", "complex ", "imaginary ", " __vector(", "std::allocator", "allocator", "std::basic_string", "basic_string", "std::string", "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", "std::istream", "std::basic_istream<char, std::char_traits<char> >", "basic_istream", "std::ostream", "std::basic_ostream<char, std::char_traits<char> >", "basic_ostream", "std::iostream", "std::basic_iostream<char, std::char_traits<char> >", "basic_iostream", "alignof ", "const_cast", "delete[] ", "dynamic_cast", "delete ", "operator\"\" ", "new[]", "reinterpret_cast", "static_cast", "sizeof ", "throw", "throw ", "signed char", "boolean", "byte", "long double", "__float128", "unsigned char", "unsigned int", "long", "unsigned long", "__int128", "unsigned __int128", "unsigned short", "void", "wchar_t", "long long", "decimal32", "decimal64", "decimal128", "half", "char16_t", "char32_t", "decltype(nullptr)", "calib3d::stereoCalibrate_10()", "imgproc::minAreaRect_10()", "photo::getGamma_10()", "calib3d::getPreFilterSize_10()", "core::phase_10()", "photo::getCut_10()", "ml::create_10()", "calib3d::calibrateCameraExtended_10()", "objdetect::get_1svmDetector_10()", "objdetect::getDefaultPeopleDetector_10()", "ml::getCatOfs_10()", "features2d::clone_10()", "ml::getTrainSampleWeights_10()", "dnn::getIntValue_10()", "photo::getSigmaSpace_10()", "imgproc::Sobel_11()", "features2d::empty_10()", "ml::setTermCriteria_10()", "imgproc::cvtColor_11()", "calib3d::calibrate_11()", "ml::load_11()", "imgproc::findContours_10()", "features2d::descriptorType_10()", "imgproc::sqrBoxFilter_12()", "video::getNMixtures_10()", "imgproc::minEnclosingTriangle_10()", "photo::createCalibrateRobertson_11()", "core::solveCubic_10()", "imgproc::integral_11()", "core::phase_11()", "dnn::forward_13()", "imgproc::HoughLinesPointSet_10()", "calib3d::findHomography_12()", "calib3d::stereoCalibrate_12()", "ml::load_11()", "photo::process_11()", "dnn::readNetFromTorch_11()", "calib3d::decomposeHomographyMat_10()", "calib3d::computeCorrespondEpilines_10()", "core::divide_14()", "video::correct_10()", "calib3d::distortPoints_11()", "core::multiply_14()", "calib3d::getTextureThreshold_10()", "video::get_1processNoiseCov_10()", "features2d::detect_12()", "core::getTimeMilli_10()", "features2d::getPass2Only_10()", "imgproc::fillPoly_11()", "core::solve_10()", "photo::stylization_11()", "objdetect::computeGradient_11()", "dnn::getLayerTypes_10()", "dnn::setInputsNames_10()", "imgproc::accumulateWeighted_10()", "ml::predictProb_11()", "imgproc::getRotationMatrix2D_10()", "photo::setSamples_10()", "static cv::Ptr<cv::javaDescriptorExtractor> cv::javaDescriptorExtractor::create(int)", "core::dft_10()", "photo::stylization_10()", "photo::createTonemapMantiuk_10()", "imgproc::HoughLines_10()", "calib3d::solvePnPRansac_11()", "core::idct_10()", "ml::load_10()", "video::getInnerIterations_10()", "imgproc::pyrDown_12()", "core::randShuffle_11()", "ml::setCalculateVarImportance_10()", "features2d::getExtended_10()", "video::getVarInit_10()", "core::convertScaleAbs_10()", "core::setUseIPP_10()", "ml::setRpropDWMin_10()", "objdetect::CascadeClassifier_11()", "calib3d::estimateAffinePartial2D_11()", "video::getTau_10()", "core::borderInterpolate_10()", "core::perspectiveTransform_10()", "video::setGamma_10()", "photo::getRandom_10()", "calib3d::recoverPose_14()", "imgproc::filter2D_11()", "ml::getEmax_10()", "ml::create_10()", "imgproc::getGaussianKernel_11()", "ml::predict_11()", "features2d::descriptorSize_10()", "calib3d::findEssentialMat_10()", "photo::getSaturation_10()", "core::normalize_12()", "photo::edgePreservingFilter_11()", "imgproc::spatialGradient_10()", "features2d::getType_10()", "imgproc::putText_10()", "imgproc::putText_12()", "imgproc::findContours_11()", "features2d::setScaleFactor_10()", "core::PCACompute_10()", "ml::create_10()", "features2d::create_11()", "imgproc::moments_10()", "video::setVarMax_10()", "calib3d::stereoCalibrate_11()", "imgproc::convexHull_10()", "videoio::fourcc_10()", "videoio::release_10()", "imgproc::Canny_10()", "calib3d::decomposeProjectionMatrix_11()", "photo::createTonemapDrago_11()", "video::getShadowThreshold_10()", "photo::setScale_10()", "features2d::setBlockSize_10()", "core::getIppVersion_10()", "core::bitwise_1not_10()", "objdetect::compute_11()", "features2d::drawMatchesKnn_11()", "ml::getTrainSampleIdx_10()", "imgproc::compareSegments_11()", "ml::getWeights_10()", "ml::setSvmsgdType_10()", "imgproc::warpPerspective_10()", "photo::createCalibrateDebevec_10()", "features2d::setThreshold_10()", "calib3d::getUniquenessRatio_10()", "features2d::getDefaultName_10()", "imgproc::Laplacian_12()", "video::setNumLevels_10()", "features2d::create_11()", "ml::create_10()", "core::trace_10()", "features2d::create_11()", "imgproc::getVertex_11()", "video::getFlags_10()", "imgproc::detect_11()", "core::compare_10()", "ml::getAnnealFinalT_10()", "video::set_1controlMatrix_10()", "features2d::getDefaultName_10()", "calib3d::setMinDisparity_10()", "video::setTau_10()", "core::bitwise_1xor_11()", "features2d::cluster_11()", "core::idft_11()", "dnn::getStringValue_10()", "ml::setTrainTestSplitRatio_10()", "features2d::radiusMatch_13()", "video::getBackgroundRatio_10()", "imgproc::initDelaunay_10()", "videoio::release_10()", "dnn::readNetFromCaffe_10()", "ml::getDecisionFunction_10()", "dnn::getFLOPS_10()", "core::getNumberOfCPUs_10()", "ml::create_10()", "ml::getActiveVarCount_10()", "features2d::compute_11()", "photo::fastNlMeansDenoisingColoredMulti_11()", "features2d::setK_10()", "ml::getCovarianceMatrixType_10()", "photo::setContrastWeight_10()", "video::setWinSize_10()", "features2d::empty_10()", "ml::getCatCount_10()", "calib3d::findHomography_10()", "features2d::create_10()", "imgproc::HuMoments_10()", "core::copyMakeBorder_11()", "imgproc::apply_10()", "videoio::write_10()", "core::PCACompute_11()", "photo::getSaturation_10()", "features2d::radiusMatch_11()", "core::patchNaNs_11()", "core::add_15()", "ml::getMaxDepth_10()", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "imgproc::insert_11()", "imgproc::drawContours_12()", "photo::process_10()", "imgcodecs::imdecode_10()", "calib3d::estimateAffine2D_11()", "core::empty_10()", "imgproc::GaussianBlur_11()", "features2d::setThreshold_10()", "features2d::compute_10()", "dnn::forward_10()", "features2d::detect_10()", "ml::setMiniBatchSize_10()", "photo::process_10()", "calib3d::stereoRectify_13()", "photo::process_10()", "features2d::detect_11()", "imgproc::rotateEdge_10()", "ml::getAnnealCoolingRatio_10()", "video::calc_10()", "features2d::write_10()", "photo::denoise_1TVL1_10()", "core::multiply_11()", "video::findTransformECC_10()", "core::setUseIPP_1NE_10()", "calib3d::setPreFilterType_10()", "videoio::open_11()", "video::buildOpticalFlowPyramid_10()", "dnn::blobFromImages_10()", "photo::createAlignMTB_10()", "dnn::DictValue_12()", "ml::getClassWeights_10()", "imgproc::ellipse_11()", "ml::trainM_11()", "calib3d::getUniquenessRatio_10()", "calib3d::stereoCalibrate_14()", "ml::setBoostType_10()", "objdetect::getDescriptorSize_10()", "imgproc::threshold_10()", "ml::getMeans_10()", "ml::load_10()", "video::set_1processNoiseCov_10()", "videoio::open_13()", "core::mulTransposed_11()", "dnn::getIntValue_11()", "photo::fastNlMeansDenoisingColoredMulti_10()", "video::setMaxLevel_10()", "calib3d::findFundamentalMat_11()", "calib3d::create_11()", "imgproc::getDefaultNewCameraMatrix_11()", "video::setTermCriteria_10()", "ml::setActivationFunction_10()", "ml::get_1learnt_1thetas_10()", "features2d::getDefaultName_10()", "ml::isClassifier_10()", "features2d::setPatchSize_10()", "video::getFastPyramids_10()", "ml::setClassWeights_10()", "imgproc::ellipse_15()", "features2d::detect_13()", "imgproc::cornerMinEigenVal_11()", "video::setInnerIterations_10()", "dnn::blobFromImage_11()", "video::getUseInitialFlow_10()", "photo::pencilSketch_11()", "core::mixChannels_10()", "objdetect::detectMultiScale_11()", "ml::getSamples_10()", "core::dct_10()", "core::getTimeSec_10()", "imgproc::sepFilter2D_11()", "photo::fastNlMeansDenoising_10()", "features2d::setWTA_1K_10()", "video::getNSamples_10()", "features2d::create_15()", "photo::process_10()", "video::setNMixtures_10()", "features2d::create_10()", "video::get_1transitionMatrix_10()", "imgproc::accumulateProduct_10()", "video::get_1errorCovPre_10()", "imgproc::pyrMeanShiftFiltering_10()", "core::addWeighted_10()", "core::norm_13()", "ml::setRpropDW0_10()", "imgproc::boundingRect_10()", "video::buildOpticalFlowPyramid_11()", "calib3d::matMulDeriv_10()", "core::dft_11()", "features2d::setNLevels_10()", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "calib3d::getROI1_10()", "core::PSNR_10()", "features2d::getPatchSize_10()", "ml::setUseSurrogates_10()", "calib3d::rectify3Collinear_10()", "photo::setLightAdaptation_10()", "features2d::setPass2Only_10()", "video::createBackgroundSubtractorKNN_10()", "ml::getTermCriteria_10()", "calib3d::getOptimalNewCameraMatrix_10()", "core::transpose_10()", "calib3d::findChessboardCorners_10()", "video::setTheta_10()", "dnn::get_1blobs_10()", "videoio::VideoCapture_11()", "dnn::setHalideScheduler_10()", "ml::setAlgorithmType_10()", "features2d::radiusMatch_12()", "imgproc::grabCut_10()", "core::subtract_10()", "features2d::create_10()", "ml::getTestNormCatResponses_10()", "features2d::clear_10()", "video::getComplexityReductionThreshold_10()", "imgproc::drawMarker_10()", "ml::calcError_10()", "imgproc::intersectConvexConvex_10()", "core::mulSpectrums_10()", "ml::create_10()", "video::set_1measurementMatrix_10()", "features2d::BFMatcher_10()", "video::setPolyN_10()", "ml::getCatMap_10()", "calib3d::getValidDisparityROI_10()", "video::getDist2Threshold_10()", "imgproc::line_10()", "features2d::setMaxArea_10()", "imgproc::resize_10()", "photo::getScale_10()", "core::TickMeter_10()", "calib3d::setPreFilterCap_10()", "imgproc::Scharr_12()", "imgcodecs::imencode_10()", "ml::getVarType_10()", "core::cubeRoot_10()", "imgproc::rectangle_12()", "core::divide_15()", "imgproc::equalizeHist_10()", "video::calcOpticalFlowPyrLK_12()", "calib3d::distortPoints_10()", "imgproc::connectedComponentsWithStatsWithAlgorithm_10()", "imgproc::createLineSegmentDetector_10()", "imgproc::accumulateWeighted_11()", "objdetect::get_1cellSize_10()", "features2d::getDefaultName_10()", "ml::getShift_10()", "features2d::getType_10()", "video::getMedianFiltering_10()", "ml::getTrainResponses_10()", "features2d::clone_11()", "photo::createTonemapMantiuk_11()", "core::idct_11()", "calib3d::create_10()", "videoio::open_13()", "imgproc::ellipse2Poly_10()", "video::setComplexityReductionThreshold_10()", "video::set_1statePre_10()", "calib3d::setROI2_10()", "imgproc::symEdge_10()", "imgproc::getClipLimit_10()", "core::convertScaleAbs_11()", "video::getDetectShadows_10()", "photo::createTonemapReinhard_11()", "ml::predict_11()", "core::getNumThreads_10()", "photo::shiftMat_10()", "objdetect::setSVMDetector_10()", "calib3d::projectPoints_11()", "features2d::getDescriptors_10()", "ml::getSample_10()", "core::getDefaultName_10()", "core::mulTransposed_12()", "photo::createTonemapDurand_10()", "features2d::radiusMatch_10()", "ml::getCoef0_10()", "imgproc::filter2D_12()", "objdetect::getDaimlerPeopleDetector_10()", "features2d::detect_11()", "ml::predict_10()", "video::getEpsilon_10()", "core::add_11()", "core::normalize_13()", "imgproc::clipLine_10()", "imgproc::convertMaps_10()", "features2d::getNOctaveLayers_10()", "dnn::get_1type_10()", "ml::load_10()", "core::checkRange_11()", "video::collectGarbage_10()", "ml::load_11()", "photo::process_11()", "ml::getDefaultSubstValues_10()", "imgproc::findNearest_10()", "imgproc::getFontScaleFromHeight_10()", "videoio::VideoWriter_13()", "imgproc::moments_11()", "core::sortIdx_10()", "ml::getNAllVars_10()", "features2d::getHarrisDetector_10()", "imgproc::convexHull_11()", "calib3d::setUniquenessRatio_10()", "ml::setAnnealInitialT_10()", "dnn::readNetFromTensorflow_10()", "calib3d::recoverPose_15()", "core::cartToPolar_11()", "ml::getNormCatResponses_10()", "ml::getTrainMethod_10()", "core::save_10()", "core::bitwise_1not_11()", "ml::create_10()", "imgproc::ellipse_12()", "dnn::getLayerId_10()", "core::gemm_11()", "dnn::forward_14()", "videoio::VideoCapture_12()", "imgproc::warpPerspective_11()", "photo::createCalibrateDebevec_11()", "ml::getNVars_10()", "video::set_1errorCovPre_10()", "imgproc::blur_10()", "imgproc::medianBlur_10()", "features2d::detectRegions_10()", "core::SVBackSubst_10()", "video::meanShift_10()", "imgproc::fillConvexPoly_11()", "imgcodecs::imread_10()", "imgproc::phaseCorrelate_11()", "imgcodecs::imread_11()", "core::getHardwareFeatureName_10()", "core::compare_11()", "core::randu_10()", "features2d::create_12()", "video::setDist2Threshold_10()", "core::exp_10()", "photo::getColorAdaptation_10()", "ml::trainEM_10()", "objdetect::HOGDescriptor_12()", "core::bitwise_1and_11()", "imgproc::boxFilter_10()", "ml::setTrainTestSplitRatio_11()", "calib3d::reprojectImageTo3D_10()", "ml::getTrainSamples_11()", "dnn::readNetFromCaffe_11()", "core::batchDistance_12()", "objdetect::detectMultiScale3_10()", "objdetect::get_1winSize_10()", "calib3d::triangulatePoints_10()", "dnn::NMSBoxes_11()", "dnn::getMemoryConsumption_11()", "imgproc::connectedComponents_10()", "calib3d::setP2_10()", "ml::getRpropDWMin_10()", "imgproc::undistortPoints_11()", "features2d::defaultNorm_10()", "core::meanStdDev_11()", "photo::textureFlattening_10()", "features2d::compute_10()", "features2d::BOWKMeansTrainer_11()", "video::KalmanFilter_11()", "photo::fastNlMeansDenoising_12()", "core::PCACompute_12()", "core::absdiff_10()", "photo::fastNlMeansDenoisingMulti_13()", "calib3d::composeRT_10()", "calib3d::stereoCalibrateExtended_12()", "imgproc::preCornerDetect_10()", "ml::getTermCriteria_10()", "imgproc::sqrBoxFilter_10()", "video::getPolySigma_10()", "features2d::getWTA_1K_10()", "imgproc::pyrUp_12()", "core::reduce_10()", "calib3d::findEssentialMat_13()", "imgproc::applyColorMap_11()", "ml::load_11()", "imgproc::connectedComponentsWithStats_10()", "dnn::forward_11()", "video::setEpsilon_10()", "imgproc::getStructuringElement_10()", "features2d::drawMatches2_10()", "features2d::getFastThreshold_10()", "ml::setLayerSizes_10()", "ml::getP_10()", "photo::seamlessClone_10()", "ml::getSampleWeights_10()", "core::multiply_12()", "objdetect::detect_10()", "photo::decolor_10()", "imgproc::getEdge_10()", "video::calc_10()", "core::divide_12()", "core::insertChannel_10()", "ml::setTrainMethod_10()", "calib3d::estimateNewCameraMatrixForUndistortRectify_10()", "features2d::create_11()", "ml::setMaxDepth_10()", "calib3d::findEssentialMat_14()", "ml::getDegree_10()", "objdetect::get_1blockStride_10()", "imgproc::polylines_11()", "dnn::readTorchBlob_11()", "ml::getCVFolds_10()", "ml::getSvmsgdType_10()", "features2d::match_11()", "features2d::descriptorsCount_10()", "dnn::getFLOPS_13()", "calib3d::projectPoints_10()", "ml::setAnnealFinalT_10()", "imgproc::pyrDown_10()", "ml::load_11()", "ml::getTermCriteria_10()", "imgproc::minEnclosingCircle_10()", "ml::getStepDecreasingPower_10()", "core::pow_10()", "ml::setActivationFunction_11()", "features2d::create_14()", "core::inRange_10()", "features2d::getK_10()", "photo::setSaturation_10()", "features2d::getEdgeThreshold_10()", "videoio::retrieve_11()", "core::bitwise_1xor_10()", "imgproc::polylines_10()", "video::setMedianFiltering_10()", "imgproc::getGaborKernel_10()", "dnn::getLayersCount_10()", "imgproc::cornerEigenValsAndVecs_11()", "calib3d::getSpeckleWindowSize_10()", "imgproc::cornerMinEigenVal_12()", "video::setScaleStep_10()", "imgproc::dilate_12()", "ml::setIterations_10()", "calib3d::estimateNewCameraMatrixForUndistortRectify_11()", "features2d::create_10()", "features2d::create_10()", "features2d::write_10()", "features2d::getNOctaveLayers_10()", "core::normalize_10()", "calib3d::undistortPoints_11()", "ml::setAnnealInitialT_10()", "objdetect::detectMultiScale_10()", "imgproc::boxPoints_10()", "core::norm_10()", "photo::computeBitmaps_10()", "calib3d::setBlockSize_10()", "ml::setTermCriteria_10()", "objdetect::load_10()", "ml::setAnnealItePerStep_10()", "calib3d::calibrateCamera_11()", "imgproc::warpAffine_10()", "core::countNonZero_10()", "imgproc::cornerHarris_10()", "objdetect::detectMultiScale2_10()", "features2d::create_11()", "core::addWeighted_11()", "calib3d::findFundamentalMat_10()", "video::setHistory_10()", "photo::createTonemap_11()", "videoio::read_10()", "imgproc::distanceTransformWithLabels_11()", "calib3d::setP1_10()", "features2d::getThreshold_10()", "video::setOuterIterations_10()", "ml::load_10()", "photo::setSaturationWeight_10()", "calib3d::decomposeEssentialMat_10()", "features2d::getScaleFactor_10()", "features2d::setDiffusivity_10()", "dnn::imagesFromBlob_10()", "video::apply_11()", "ml::getNames_10()", "features2d::detect_13()", "imgproc::contourArea_11()", "imgproc::circle_10()", "video::createBackgroundSubtractorKNN_11()", "calib3d::findChessboardCorners_11()", "video::getVarThreshold_10()", "imgproc::fitEllipse_10()", "calib3d::getOptimalNewCameraMatrix_11()", "core::getTickFrequency_10()", "ml::setTrainTestSplit_11()", "imgproc::Laplacian_10()", "core::magnitude_10()", "video::set_1measurementNoiseCov_10()", "core::polarToCart_11()", "imgproc::grabCut_11()", "dnn::get_1name_10()", "ml::setMaxCategories_10()", "objdetect::detectMultiScale_10()", "calib3d::setPreFilterSize_10()", "objdetect::groupRectangles_10()", "imgproc::findNearest_11()", "imgproc::intersectConvexConvex_11()", "calib3d::correctMatches_10()", "imgproc::setClipLimit_10()", "ml::create_11()", "imgproc::erode_10()", "imgproc::distanceTransform_10()", "video::getMaxLevel_10()", "features2d::setNOctaves_10()", "imgproc::matchTemplate_10()", "video::setDetectShadows_10()", "imgproc::line_11()", "ml::getNSamples_10()", "photo::setSaturation_10()", "ml::setRpropDWMax_10()", "features2d::getNOctaves_10()", "ml::create_10()", "imgproc::HoughCircles_11()", "ml::getSupportVectors_10()", "ml::setNu_10()", "ml::setKernel_10()", "photo::setColorAdaptation_10()", "core::calcCovarMatrix_10()", "core::divide_16()", "dnn::getLayerNames_10()", "calib3d::undistortImage_10()", "ml::setOptimalParameters_11()", "imgproc::integral3_10()", "core::subtract_13()", "imgproc::createLineSegmentDetector_11()", "core::batchDistance_10()", "ml::shuffleTrainTest_10()", "video::setDetectShadows_10()", "core::add_13()", "features2d::knnMatch_12()", "features2d::create_12()", "imgproc::undistort_10()", "imgproc::undistortPoints_10()", "features2d::setQualityLevel_10()", "video::set_1gain_10()", "core::invert_10()", "photo::setSigmaColor_10()", "ml::trainAuto_11()", "video::setPyrScale_10()", "video::create_11()", "photo::getSamples_10()", "features2d::getDefaultName_10()", "video::get_1statePost_10()", "features2d::setDescriptorType_10()", "video::getVarThresholdGen_10()", "imgproc::getEdgeList_10()", "core::completeSymm_11()", "core::Mahalanobis_10()", "ml::setBackpropMomentumScale_10()", "imgproc::HoughLinesP_10()", "dnn::finalize_11()", "imgproc::pyrMeanShiftFiltering_11()", "calib3d::calibrateCamera_12()", "dnn::readNetFromTensorflow_11()", "imgproc::morphologyEx_12()", "photo::process_11()", "imgproc::accumulate_10()", "ml::predict_11()", "dnn::setInput_10()", "photo::colorChange_10()", "imgproc::drawContours_11()", "calib3d::stereoCalibrateExtended_10()", "features2d::create_11()", "photo::fastNlMeansDenoisingColored_10()", "ml::getCalculateVarImportance_10()", "ml::load_11()", "core::extractChannel_10()", "imgproc::goodFeaturesToTrack_12()", "core::getTimeMicro_10()", "core::copyMakeBorder_10()", "features2d::detectAndCompute_10()", "imgproc::createCLAHE_10()", "static cv::Ptr<cv::javaFeatureDetector> cv::javaFeatureDetector::create(int)", "calib3d::estimateAffine3D_11()", "imgcodecs::imwrite_11()", "core::setIdentity_10()", "imgproc::getAffineTransform_10()", "video::create_11()", "photo::setGamma_10()", "core::SVDecomp_10()", "video::setShadowValue_10()", "features2d::train_10()", "ml::create_11()", "core::start_10()", "ml::create_10()", "core::fastAtan2_10()", "imgproc::warpPerspective_12()", "video::getMinEigThreshold_10()", "features2d::empty_10()", "core::convertFp16_10()", "core::useIPP_1NE_10()", "features2d::create_10()", "core::min_10()", "core::mean_10()", "features2d::getDefaultName_10()", "imgproc::getGaussianKernel_10()", "ml::getNTestSamples_10()", "features2d::setDescriptorChannels_10()", "imgproc::getStructuringElement_11()", "calib3d::drawChessboardCorners_10()", "ml::getGamma_10()", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = cv::String]", "features2d::setDescriptorSize_10()", "video::setPolySigma_10()", "core::findNonZero_10()", "ml::getMarginType_10()", "features2d::getMinArea_10()", "calib3d::getSmallerBlockSize_10()", "features2d::write_10()", "objdetect::HOGDescriptor_13()", "calib3d::setTextureThreshold_10()", "photo::fastNlMeansDenoisingMulti_12()", "features2d::setType_10()", "ml::create_10()", "calib3d::solveP3P_10()", "imgproc::arcLength_10()", "imgproc::fitEllipseDirect_10()", "calib3d::setPreFilterCap_10()", "imgproc::integral2_10()", "video::setVarMin_10()", "ml::trainE_10()", "photo::setMaxIter_10()", "calib3d::RQDecomp3x3_10()", "objdetect::detectMultiScale3_11()", "calib3d::compute_10()", "video::get_1statePre_10()", "core::solvePoly_10()", "calib3d::getMode_10()", "features2d::setNonmaxSuppression_10()", "imgproc::connectedComponents_11()", "ml::getCovs_10()", "core::setRNGSeed_10()", "calib3d::filterSpeckles_10()", "core::sqrt_10()", "video::setLambda_10()", "ml::setMinSampleCount_10()", "features2d::FlannBasedMatcher_10()", "ml::getRegularization_10()", "ml::setStepDecreasingPower_10()", "imgproc::cvtColor_10()", "imgproc::getTilesGridSize_10()", "dnn::getMemoryConsumption_12()", "ml::load_10()", "dnn::NMSBoxes_10()", "video::apply_11()", "features2d::add_10()", "imgproc::sqrBoxFilter_11()", "dnn::getRealValue_10()", "calib3d::getBlockSize_10()", "core::useIPP_10()", "video::create_10()", "imgproc::Subdiv2D_11()", "imgproc::integral_10()", "dnn::forward_12()", "calib3d::stereoCalibrate_13()", "core::reduce_11()", "photo::getExposureWeight_10()", "core::idft_10()", "imgproc::phaseCorrelate_10()", "features2d::getThreshold_10()", "imgproc::Scharr_10()", "videoio::open_11()", "calib3d::stereoRectifyUncalibrated_10()", "features2d::getDefaultName_10()", "imgproc::floodFill_10()", "imgproc::rectangle_10()", "core::divide_13()", "features2d::Params_10()", "ml::setTruncatePrunedTree_10()", "objdetect::computeGradient_10()", "features2d::detect_10()", "features2d::create_11()", "imgproc::remap_10()", "imgproc::getDerivKernels_10()", "core::add_10()", "imgproc::bilateralFilter_10()", "dnn::shrinkCaffeModel_11()", "ml::getType_10()", "ml::getVarImportance_10()", "photo::getBias_10()", "core::PCAProject_10()", "ml::getAnnealInitialT_10()", "imgproc::pyrDown_11()", "core::randShuffle_10()", "imgcodecs::imreadmulti_11()", "dnn::readNetFromDarknet_10()", "imgproc::matchShapes_10()", "imgproc::accumulateSquare_10()", "calib3d::getPreFilterType_10()", "core::getThreadNum_10()", "videoio::VideoWriter_10()", "dnn::enableFusion_10()", "core::multiply_15()", "core::repeat_10()", "video::KalmanFilter_12()", "ml::setMarginRegularization_10()", "videoio::get_10()", "core::mulTransposed_10()", "core::solve_11()", "ml::getBackpropWeightScale_10()", "imgproc::filter2D_10()", "objdetect::isOldFormatCascade_10()", "ml::getTestSamples_10()", "ml::predict_10()", "video::setBackgroundRatio_10()", "imgproc::adaptiveThreshold_10()", "ml::getBoostType_10()", "ml::create_10()", "calib3d::solvePnP_11()", "photo::edgePreservingFilter_10()", "imgproc::getTriangleList_10()", "features2d::setMaxFeatures_10()", "objdetect::detectMultiScale_11()", "imgproc::accumulateProduct_11()", "calib3d::findFundamentalMat_12()", "core::norm_11()", "features2d::read_10()", "imgcodecs::imencode_11()", "features2d::read_10()", "imgproc::calcHist_10()", "imgproc::initWideAngleProjMap_10()", "calib3d::solvePnP_10()", "calib3d::recoverPose_10()", "ml::getSubVector_10()", "video::getBackgroundImage_10()", "photo::getExcludeRange_10()", "ml::getAlgorithmType_10()", "video::getGamma_10()", "video::get_1gain_10()", "imgproc::fitLine_10()", "photo::createTonemapDrago_10()", "video::setFlags_10()", "imgproc::collectGarbage_10()", "video::setShadowThreshold_10()", "calib3d::recoverPose_16()", "imgproc::getFontScaleFromHeight_11()", "ml::setWeakCount_10()", "imgproc::compareSegments_10()", "imgproc::logPolar_10()", "imgproc::circle_11()", "core::bitwise_1or_10()", "calib3d::getROI2_10()", "imgproc::erode_12()", "dnn::shrinkCaffeModel_10()", "features2d::setNOctaveLayers_10()", "imgproc::putText_11()", "features2d::isMaskSupported_10()", "ml::getLayerSizes_10()", "photo::process_10()", "video::getkNNSamples_10()", "features2d::getUpright_10()", "imgproc::getVertex_10()", "features2d::setVocabulary_10()", "core::getOptimalDFTSize_10()", "features2d::create_11()", "core::max_10()", "photo::setExcludeRange_10()", "features2d::match_10()", "calib3d::convertPointsFromHomogeneous_10()", "objdetect::convert_10()", "imgproc::Canny_11()", "calib3d::stereoRectify_10()", "ml::setActiveVarCount_10()", "objdetect::HOGDescriptor_10()", "ml::getRpropDWPlus_10()", "photo::createMergeMertens_10()", "core::clear_10()", "ml::setLearningRate_10()", "imgproc::erode_11()", "imgproc::distanceTransform_11()", "imgproc::HoughLines_11()", "calib3d::solvePnPRansac_10()", "calib3d::initCameraMatrix2D_11()", "video::getPolyN_10()", "imgproc::line_12()", "calib3d::getMinDisparity_10()", "calib3d::getP1_10()", "calib3d::projectPoints_13()", "calib3d::calibrateCamera_10()", "calib3d::validateDisparity_10()", "ml::setTermCriteria_10()", "ml::getTrainMethod_10()", "calib3d::calibrateCameraExtended_11()", "core::LUT_10()", "core::calcCovarMatrix_11()", "features2d::drawMatches_10()", "calib3d::undistortImage_11()", "photo::getSaturation_10()", "imgproc::integral3_11()", "core::subtract_14()", "features2d::drawMatches_11()", "imgproc::Sobel_12()", "ml::empty_10()", "core::batchDistance_11()", "photo::createMergeRobertson_10()", "core::getTickCount_10()", "core::patchNaNs_10()", "core::add_14()", "photo::getMaxIter_10()", "imgproc::undistort_11()", "photo::getIntensity_10()", "calib3d::reprojectImageTo3D_11()", "ml::getIterations_10()", "core::invert_11()", "photo::inpaint_10()", "imgproc::pyrUp_10()", "calib3d::getDisp12MaxDiff_10()", "features2d::setUpright_10()", "core::hconcat_10()", "dnn::getPerfProfile_10()", "imgproc::isContourConvex_10()", "imgproc::linearPolar_10()", "dnn::getFLOPS_11()", "dnn::getRealValue_11()", "video::getScalesNumber_10()", "ml::setClustersNumber_10()", "ml::setAnnealCoolingRatio_10()", "imgproc::HoughCircles_10()", "ml::setWeightTrimRate_10()", "core::sort_10()", "dnn::finalize_10()", "core::absdiff_11()", "imgproc::cornerEigenValsAndVecs_10()", "calib3d::estimateAffine2D_10()", "video::predict_10()", "core::divide_10()", "calib3d::setROI1_10()", "ml::setTermCriteria_10()", "ml::getAnnealInitialT_10()", "dnn::set_1blobs_10()", "imgproc::accumulate_11()", "features2d::setDiffusivity_10()", "ml::trainM_10()", "features2d::getDelta_10()", "ml::train_11()", "imgproc::approxPolyDP_10()", "video::setVarThreshold_10()", "core::flip_10()", "calib3d::Rodrigues_10()", "features2d::drawKeypoints_10()", "imgproc::goodFeaturesToTrack_13()", "imgproc::GaussianBlur_12()", "core::mulSpectrums_11()", "imgproc::createCLAHE_11()", "features2d::setNonmaxSuppression_10()", "ml::getTestResponses_10()", "features2d::getFirstLevel_10()", "ml::getC_10()", "ml::getAnnealFinalT_10()", "video::setShadowValue_10()", "dnn::getFLOPS_12()", "features2d::cluster_10()", "core::setIdentity_11()", "photo::fastNlMeansDenoisingMulti_11()", "imgproc::calcBackProject_10()", "imgproc::warpAffine_11()", "ml::setP_10()", "features2d::drawMatchesKnn_10()", "photo::setBias_10()", "calib3d::findEssentialMat_15()", "ml::findNearest_10()", "imgproc::cornerMinEigenVal_10()", "photo::getThreshold_10()", "calib3d::initCameraMatrix2D_10()", "imgproc::dilate_10()", "dnn::blobFromImage_10()", "core::setErrorVerbosity_10()", "imgproc::rotatedRectangleIntersection_10()", "ml::getRpropDWMinus_10()", "photo::process_10()", "ml::setRegressionAccuracy_10()", "ml::load_11()", "core::mean_11()", "ml::getRpropDWMax_10()", "photo::process_10()", "features2d::setFastThreshold_10()", "calib3d::calibrate_12()", "dnn::DictValue_10()", "features2d::setEdgeThreshold_10()", "core::kmeans_11()", "features2d::create_11()", "core::add_12()", "imgproc::watershed_10()", "ml::getVarSymbolFlags_10()", "imgproc::calcHist_11()", "features2d::getNonmaxSuppression_10()", "features2d::detect_12()", "core::eigen_10()", "ml::getTrainSamples_10()", "ml::getResponses_10()", "features2d::setNOctaveLayers_10()", "calib3d::projectPoints_12()", "ml::getInitialStepSize_10()", "features2d::create_10()", "ml::create_10()", "calib3d::findHomography_11()", "photo::getSigmaColor_10()", "core::solvePoly_11()", "core::dct_11()", "features2d::compute_10()", "imgproc::sepFilter2D_12()", "imgproc::detect_10()", "imgproc::ellipse_10()", "ml::getWeights_10()", "features2d::match_13()", "features2d::setExtended_10()", "calib3d::decomposeProjectionMatrix_10()", "core::stop_10()", "calib3d::create_10()", "imgproc::nextEdge_10()", "features2d::descriptorType_10()", "video::findTransformECC_11()", "calib3d::calibrate_10()", "calib3d::composeRT_11()", "features2d::getDescriptorType_10()", "calib3d::calibrationMatrixValues_10()", "photo::getSaturationWeight_10()", "video::getTheta_10()", "video::set_1statePost_10()", "ml::setBackpropWeightScale_10()", "video::createBackgroundSubtractorMOG2_10()", "photo::detailEnhance_11()", "features2d::getNonmaxSuppression_10()", "imgproc::warpAffine_12()", "ml::getTrainNormCatResponses_10()", "photo::setMaxBits_10()", "video::getWinSize_10()", "ml::getAnnealItePerStep_10()", "imgproc::Scharr_11()", "photo::getMaxBits_10()", "ml::getLayout_10()", "calib3d::RQDecomp3x3_11()", "imgproc::floodFill_11()", "imgproc::rectangle_11()", "ml::setRpropDWMinus_10()", "video::getLambda_10()", "ml::getTruncatePrunedTree_10()", "videoio::VideoWriter_11()", "core::subtract_11()", "calib3d::convertPointsToHomogeneous_10()", "imgproc::remap_11()", "core::scaleAdd_10()", "features2d::drawMatches2_11()", "imgproc::getDerivKernels_11()", "imgproc::drawMarker_11()", "calib3d::setDisp12MaxDiff_10()", "imgproc::bilateralFilter_11()", "calib3d::stereoRectify_12()", "ml::setPriors_10()", "ml::train_10()", "core::kmeans_10()", "ml::getBackpropMomentumScale_10()", "calib3d::recoverPose_12()", "imgproc::locate_10()", "video::get_1errorCovPost_10()", "photo::fastNlMeansDenoising_13()", "imgproc::polylines_12()", "objdetect::load_10()", "imgproc::drawContours_10()", "features2d::knnMatch_10()", "dnn::readNetFromDarknet_11()", "ml::getDefaultK_10()", "imgproc::resize_11()", "imgproc::accumulateSquare_11()", "photo::createTonemapReinhard_10()", "ml::predict_10()", "ml::setUse1SERule_10()", "video::getNumIters_10()", "ml::setAnnealItePerStep_10()", "calib3d::getPreFilterCap_10()", "objdetect::groupRectangles_11()", "imgproc::edgeDst_10()", "photo::fastNlMeansDenoisingColored_11()", "imgproc::EMD_10()", "calib3d::getP2_10()", "calib3d::getNumDisparities_10()", "imgproc::morphologyEx_10()", "core::min_11()", "features2d::compute_11()", "ml::getAnnealCoolingRatio_10()", "ml::getTestSampleWeights_10()", "dnn::setParam_10()", "videoio::VideoWriter_14()", "dnn::getStringValue_11()", "ml::getWeakCount_10()", "features2d::getDescriptorSize_10()", "imgproc::getLeadingEdgeList_10()", "photo::getLambda_10()", "core::checkRange_10()", "imgproc::goodFeaturesToTrack_10()", "calib3d::create_11()", "ml::load_10()", "core::randn_10()", "ml::getAnnealItePerStep_10()", "features2d::setThreshold_10()", "imgproc::initWideAngleProjMap_11()", "features2d::create_10()", "calib3d::recoverPose_11()", "ml::setRegularization_10()", "ml::setCovarianceMatrixType_10()", "ml::getPriors_10()", "objdetect::save_10()", "imgproc::edgeOrg_10()", "features2d::read_10()", "imgproc::fitEllipseAMS_10()", "core::cartToPolar_10()", "photo::setSigmaSpace_10()", "ml::getKernelType_10()", "core::eigenNonSymmetric_10()", "core::norm_14()", "photo::createTonemapDurand_11()", "calib3d::estimateAffine3D_10()", "features2d::read_10()", "imgproc::getRectSubPix_10()", "ml::getNTrainSamples_10()", "core::gemm_10()", "dnn::getParam_10()", "videoio::open_12()", "core::bitwise_1or_11()", "calib3d::stereoCalibrate_15()", "ml::getMinSampleCount_10()", "imgproc::convertMaps_11()", "imgproc::spatialGradient_12()", "features2d::getDiffusivity_10()", "core::norm_12()", "video::getDetectShadows_10()", "imgproc::cvtColorTwoPlane_10()", "calib3d::setNumDisparities_10()", "ml::getVotes_10()", "imgproc::fillConvexPoly_10()", "ml::getResponseType_10()", "imgproc::arrowedLine_10()", "photo::setIntensity_10()", "photo::textureFlattening_11()", "imgproc::getVoronoiFacetList_10()", "core::max_11()", "imgproc::preCornerDetect_11()", "video::estimateRigidTransform_10()", "ml::getDefaultGridPtr_10()", "imgproc::convexityDefects_10()", "video::createBackgroundSubtractorMOG2_11()", "imgproc::Canny_12()", "imgproc::insert_10()", "objdetect::HOGDescriptor_11()", "core::determinant_10()", "photo::createMergeMertens_11()", "photo::detailEnhance_10()", "features2d::getMaxFeatures_10()", "features2d::clear_10()", "photo::illuminationChange_11()", "imgproc::ellipse_13()", "features2d::write_10()", "features2d::getDiffusivity_10()", "ml::getMaxCategories_10()", "video::setFlags_10()", "video::getNumLevels_10()", "ml::setMarginType_10()", "imgproc::getPerspectiveTransform_10()", "video::getShadowValue_10()", "video::get_1measurementMatrix_10()", "calib3d::validateDisparity_11()", "features2d::create_10()", "imgproc::blur_11()", "features2d::setMinArea_10()", "video::getPyrScale_10()", "dnn::getMemoryConsumption_10()", "videoio::set_10()", "video::get_1controlMatrix_10()", "video::getHistory_10()", "cv::Mat::Mat(int, int, int, void*, size_t)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void Java_org_opencv_android_Utils_nMatToBitmap2(JNIEnv*, jclass, jlong, jobject, jboolean)", "void Java_org_opencv_android_Utils_nBitmapToMat2(JNIEnv*, jclass, jobject, jlong, jboolean)", "Mat::n_1clone()", "Mat::nGetF()", "Mat::n_1size()", "Mat::n_1convertTo__JJIDD()", "Mat::n_1submat()", "Mat::nPutD()", "Mat::n_1push_1back()", "Mat::n_1zeros__III()", "Mat::n_1copyTo__JJJ()", "Mat::nGetD()", "Mat::n_1reshape__JII()", "Mat::n_1adjustROI()", "Mat::n_1ones__DDI()", "Mat::n_1inv__J()", "Mat::n_1submat_1rr()", "Mat::n_1setTo__JDDDD()", "Mat::n_1diag__J()", "Mat::n_1Mat__IIILByteBuffer()", "Mat::nPutI()", "Mat::n_1reshape__JI()", "Mat::n_1checkVector__JI()", "Mat::n_1t()", "Mat::n_1eye__III()", "Mat::n_1Mat__III()", "cv::Mat::Mat(int, int, int, void*, size_t)", "Mat::n_1create__JDDI()", "Mat::n_1colRange()", "Mat::n_1rowRange()", "Mat::n_1copyTo__JJ()", "Mat::n_1cross()", "Mat::nDump()", "Mat::n_1Mat__DDIDDDD()", "Mat::nPutB()", "core::locateROI_10()", "Mat::nGet()", "Mat::n_1assignTo__JJI()", "Mat::n_1Mat__JIIII()", "Mat::n_1Mat__IIIDDDD()", "Mat::n_1checkVector__JII()", "Mat::n_1zeros__DDI()", "Mat::n_1setTo__JJJ()", "Mat::nPutF()", "Mat::n_1setTo__JDDDDJ()", "Mat::n_1convertTo__JJID()", "Mat::n_1diag__JI()", "Mat::n_1mul__JJ()", "Mat::n_1row()", "Mat::n_1mul__JJD()", "Mat::n_1assignTo__JJ()", "Mat::nPutS()", "Mat::n_1release()", "Mat::n_1col()", "Mat::n_1Mat__DDI()", "Mat::n_1checkVector__JIIZ()", "Mat::n_1inv__JI()", "Mat::nGetS()", "Mat::n_1setTo__JJ()", "Mat::n_1convertTo__JJI()", "Mat::n_1create__JIII()", "Mat::n_1ones__III()", "Mat::n_1dot()", "Mat::n_1eye__DDI()", "Mat::n_1Mat__JII()", "Mat::nGetB()", "Mat::nGetI()", "void throw_no_cuda()", "N2cv15LUTParallelBodyE", "N2cv6detail12PtrOwnerImplINS_16ParallelLoopBodyENS_14DefaultDeleterIS2_EEEE", "void cv::LUT(cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv3hal5DFT1DE", "N2cv3hal5DFT2DE", "N2cv3hal5DCT2DE", "N2cv10OcvDftImplE", "N2cv15OcvDftBasicImplE", "N2cv10OcvDctImplE", "N2cv6detail12PtrOwnerImplINS_15OcvDftBasicImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10OcvDftImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10OcvDctImplENS_14DefaultDeleterIS2_EEEE", "void cv::DFT(const cv::OcvDftOptions&, const cv::Complex<_Tp>*, cv::Complex<_Tp>*) [with T = float]", "0Y\r@:i\r", "PF SdF", " [@W:[", "void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)", "static cv::Ptr<cv::hal::DFT2D> cv::hal::DFT2D::create(int, int, int, int, int, int, int)", "void cv::idft(cv::InputArray, cv::OutputArray, int, int)", "virtual void cv::OcvDctImpl::apply(const uchar*, size_t, uchar*, size_t)", "void cvDFT(const CvArr*, CvArr*, int, int)", "?void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "void cv::dct(cv::InputArray, cv::OutputArray, int)", "void cvDCT(const CvArr*, CvArr*, int)", "void cv::idct(cv::InputArray, cv::OutputArray, int)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::_OutputArray::assign(const std::vector<cv::UMat>&) const", "void cv::_InputArray::getUMatVector(std::vector<cv::UMat>&) const", "void cv::_InputArray::copyTo(const cv::_OutputArray&) const", "void cv::_InputArray::copyTo(const cv::_OutputArray&, const cv::_InputArray&) const", "bool cv::_InputArray::empty() const", "cv::UMat cv::_InputArray::getUMat(int) const", "int cv::_InputArray::dims(int) const", "void cv::_OutputArray::create(cv::Size, int, int, bool, int) const", "cv::Mat cv::_InputArray::getMat_(int) const", "size_t cv::_InputArray::step(int) const", "std::vector<cv::cuda::GpuMat>& cv::_OutputArray::getGpuMatVecRef() const", "int cv::_InputArray::sizend(int*, int) const", "bool cv::_InputArray::isSubmatrix(int) const", "size_t cv::_InputArray::total(int) const", "void cv::_OutputArray::setTo(const cv::_InputArray&, const cv::_InputArray&) const", "cv::cuda::HostMem& cv::_OutputArray::getHostMemRef() const", "cv::Size cv::_InputArray::size(int) const", "void cv::_OutputArray::assign(const cv::Mat&) const", "void cv::_OutputArray::release() const", "void cv::_OutputArray::assign(const std::vector<cv::Mat>&) const", "void cv::_OutputArray::create(int, const int*, int, int, bool, int) const", "void cv::_OutputArray::create(int, int, int, int, bool, int) const", "cv::cuda::GpuMat cv::_InputArray::getGpuMat() const", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "cv::ogl::Buffer cv::_InputArray::getOGlBuffer() const", "bool cv::_InputArray::isContinuous(int) const", "size_t cv::_InputArray::offset(int) const", "cv::ogl::Buffer& cv::_OutputArray::getOGlBufferRef() const", "cv::Mat& cv::_OutputArray::getMatRef(int) const", "int cv::_InputArray::type(int) const", "void cv::_OutputArray::clear() const", "void cv::_OutputArray::assign(const cv::UMat&) const", "cv::UMat& cv::_OutputArray::getUMatRef(int) const", "cv::cuda::GpuMat& cv::_OutputArray::getGpuMatRef() const", "void cv::_InputArray::getMatVector(std::vector<cv::Mat>&) const", "void* cv::OutOfMemoryError(size_t)", "void cv::CommandLineParser::getByName(const cv::String&, bool, int, void*) const", "bool cv::CommandLineParser::has(const cv::String&) const", "void cv::from_str(const cv::String&, int, void*)", "void cv::CommandLineParser::getByIndex(int, bool, int, void*) const", "virtual void cv::MatOp::multiply(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&, double) const", "virtual void cv::MatOp::subtract(const Scalar&, const cv::MatExpr&, cv::MatExpr&) const", "int cv::MatExpr::type() const", "N2cv12MatOp_InvertE", "static cv::MatExpr cv::Mat::eye(cv::Size, int)", "virtual void cv::MatOp_T::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::zeros(int, int, int)", "N2cv9MatOp_CmpE", "virtual void cv::MatOp_GEMM::transpose(const cv::MatExpr&, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::eye(int, int, int)", "virtual void cv::MatOp_GEMM::subtract(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::ones(cv::Size, int)", "static cv::MatExpr cv::Mat::zeros(int, const int*, int)", "virtual void cv::MatOp_GEMM::add(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp::add(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp::subtract(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&) const", "N2cv11MatOp_AddExE", "cv::MatExpr cv::abs(const cv::MatExpr&)", "virtual void cv::MatOp_Initializer::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "virtual void cv::MatOp_AddEx::divide(double, const cv::MatExpr&, cv::MatExpr&) const", "N2cv11MatOp_SolveE", "virtual void cv::MatOp_Bin::assign(const cv::MatExpr&, cv::Mat&, int) const", "N2cv7MatOp_TE", "N2cv5MatOpE", "cv::MatExpr cv::min(const cv::Mat&, double)", "virtual void cv::MatOp_AddEx::add(const cv::MatExpr&, const Scalar&, cv::MatExpr&) const", "N2cv17MatOp_InitializerE", "virtual void cv::MatOp_GEMM::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "virtual void cv::MatOp_AddEx::subtract(const Scalar&, const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp_Identity::assign(const cv::MatExpr&, cv::Mat&, int) const", "virtual void cv::MatOp_AddEx::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::zeros(cv::Size, int)", "virtual void cv::MatOp::abs(const cv::MatExpr&, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::ones(int, const int*, int)", "virtual int cv::MatOp::type(const cv::MatExpr&) const", "N2cv10MatOp_GEMME", "virtual void cv::MatOp_T::transpose(const cv::MatExpr&, cv::MatExpr&) const", "static cv::MatExpr cv::Mat::ones(int, int, int)", "cv::MatExpr cv::abs(const cv::Mat&)", "virtual void cv::MatOp::add(const cv::MatExpr&, const Scalar&, cv::MatExpr&) const", "virtual void cv::MatOp_Initializer::assign(const cv::MatExpr&, cv::Mat&, int) const", "cv::MatExpr cv::max(const cv::Mat&, double)", "virtual void cv::MatOp_AddEx::transpose(const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp_Bin::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "virtual void cv::MatOp_AddEx::abs(const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp_Bin::divide(double, const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp::transpose(const cv::MatExpr&, cv::MatExpr&) const", "virtual void cv::MatOp::divide(double, const cv::MatExpr&, cv::MatExpr&) const", "N2cv14MatOp_IdentityE", "cv::MatExpr cv::min(const cv::Mat&, const cv::Mat&)", "N2cv9MatOp_BinE", "cv::MatExpr cv::max(double, const cv::Mat&)", "cv::MatExpr cv::Mat::inv(int) const", "cv::MatExpr cv::min(double, const cv::Mat&)", "cv::MatExpr cv::max(const cv::Mat&, const cv::Mat&)", "virtual void cv::MatOp::divide(const cv::MatExpr&, const cv::MatExpr&, cv::MatExpr&, double) const", "cv::MatExpr cv::Mat::t() const", "virtual void cv::MatOp::multiply(const cv::MatExpr&, double, cv::MatExpr&) const", "cv::MatExpr cv::Mat::mul(cv::InputArray, double) const", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const std::vector<int>&)", "void cv::insertChannel(cv::InputArray, cv::InputOutputArray, int)", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const int*, size_t)", "void cv::mixChannels(const cv::Mat*, size_t, cv::Mat*, size_t, const int*, size_t)", "void cv::extractChannel(cv::InputArray, cv::OutputArray, int)", "N2cv16MinProblemSolverE", "N2cv14DownhillSolverE", "N2cv18DownhillSolverImplE", "N2cv6detail12PtrOwnerImplINS_18DownhillSolverImplENS_14DefaultDeleterIS2_EEEE", "void cv::DownhillSolverImpl::createInitialSimplex(const cv::Mat&, cv::Mat&, cv::Mat&)", "double cv::DownhillSolverImpl::innerDownhillSimplex(cv::Mat&, double, double, int&, int)", "void cv::DownhillSolverImpl::updateCoordSum(const cv::Mat&, cv::Mat&)", "double cv::DownhillSolverImpl::calc_f(const double*)", "virtual double cv::DownhillSolverImpl::minimize(cv::InputOutputArray)", "virtual void cv::DownhillSolverImpl::setTermCriteria(const cv::TermCriteria&)", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerILb1EEE", "N2cv22KMeansDistanceComputerILb0EEE", "void cv::KMeansDistanceComputer<onlyDistance>::operator()(const cv::Range&) const [with bool onlyDistance = true]", "void cv::KMeansDistanceComputer<onlyDistance>::operator()(const cv::Range&) const [with bool onlyDistance = false]", "virtual void cv::KMeansPPDistanceComputer::operator()(const cv::Range&) const", "void cv::generateCentersPP(const cv::Mat&, cv::Mat&, int, cv::RNG&, int)", "double cv::kmeans(cv::InputArray, int, cv::InputOutputArray, cv::TermCriteria, int, int, cv::OutputArray)", "N2cv14ConjGradSolverE", "N2cv6detail12PtrOwnerImplINS_18ConjGradSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv18ConjGradSolverImplE", "virtual void cv::ConjGradSolverImpl::setTermCriteria(const cv::TermCriteria&)", "virtual double cv::ConjGradSolverImpl::minimize(cv::InputOutputArray)", "N2cv16MinProblemSolver8FunctionE", "cv::Scalar cv::sum(cv::InputArray)", "bool cv::utils::fs::isDirectory(const cv::String&)", "void glob_rec(const cv::String&, const cv::String&, std::vector<cv::String>&, bool, bool, const cv::String&)", "void cv::glob(cv::String, std::vector<cv::String>&, bool)", "void cv::bitwise_xor(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvNot(const CvArr*, CvArr*)", "void cv::binary_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, void (* const*)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, int, int, void*), bool, int)", "void cv::bitwise_or(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvMinS(const void*, double, void*)", "void cv::max(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::bitwise_not(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvOr(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cv::absdiff(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::divide(double, cv::InputArray, cv::OutputArray, int)", "void cvCmp(const void*, const void*, void*, int)", "void cv::min(const cv::UMat&, const cv::UMat&, cv::UMat&)", "void cvDiv(const CvArr*, const CvArr*, CvArr*, double)", "void cv::addWeighted(cv::InputArray, double, cv::InputArray, double, double, cv::OutputArray, int)", "void cvAbsDiffS(const CvArr*, CvArr*, CvScalar)", "void cv::arithm_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int, void (**)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, int, int, void*), bool, void*, int)", "void cv::convertAndUnrollScalar(const cv::Mat&, int, uchar*, size_t)", "void cv::subtract(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "void cvSub(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cv::add(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "void cvMaxS(const void*, double, void*)", "void cvAdd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvAnd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cv::bitwise_and(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvAndS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cv::divide(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "void cv::max(const cv::UMat&, const cv::UMat&, cv::UMat&)", "void cv::inRange(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void cvInRangeS(const void*, CvScalar, CvScalar, void*)", "void cvAddS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cv::max(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void cv::min(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void cvMin(const void*, const void*, void*)", "void cvCmpS(const void*, double, void*, int)", "void cvAddWeighted(const CvArr*, double, const CvArr*, double, double, CvArr*)", "void cvSubRS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvMul(const CvArr*, const CvArr*, CvArr*, double)", "void cvMax(const void*, const void*, void*)", "void cvOrS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cv::multiply(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "void cv::min(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::compare(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "void cvXor(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvAbsDiff(const CvArr*, const CvArr*, CvArr*)", "void cvInRange(const void*, const void*, const void*, void*)", "void cvXorS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "25TegraRowOp_split2_InvokerIKxxE", "25TegraRowOp_split3_InvokerIKxxE", "25TegraRowOp_split4_InvokerIKxxE", "void cv::split(const cv::Mat&, cv::Mat*)", "void cv::split(cv::InputArray, cv::OutputArrayOfArrays)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short int]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short unsigned int]", "cv::Mat cv::Mat::cross(cv::InputArray) const", "void cv::vconcat(cv::InputArray, cv::OutputArray)", "void cv::hconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::hconcat(cv::InputArray, cv::OutputArray)", "void cv::setIdentity(cv::InputOutputArray, const Scalar&)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = int]", "void cv::sortIdx(cv::InputArray, cv::OutputArray, int)", "cv::Scalar cv::trace(cv::InputArray)", "void cv::completeSymm(cv::InputOutputArray, bool)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = signed char]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = float]", "void cv::reduce(cv::InputArray, cv::OutputArray, int, int, int)", "void cv::vconcat(const cv::Mat*, size_t, cv::OutputArray)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = double]", "void cv::transpose(cv::InputArray, cv::OutputArray)", "void cv::sort(cv::InputArray, cv::OutputArray, int)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = unsigned char]", "void cv::hconcat(const cv::Mat*, size_t, cv::OutputArray)", "void cv::vconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromD3D10Device(ID3D10Device*)", "int cv::directx::getTypeFromDXGI_FORMAT(int)", "void cv::directx::convertFromD3D10Texture2D(ID3D10Texture2D*, cv::OutputArray)", "void cv::directx::convertFromDirect3DSurface9(IDirect3DSurface9*, cv::OutputArray, void*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromD3D11Device(ID3D11Device*)", "void cv::directx::convertFromD3D11Texture2D(ID3D11Texture2D*, cv::OutputArray)", "int cv::directx::getTypeFromD3DFORMAT(int)", "void cv::directx::convertToD3D11Texture2D(cv::InputArray, ID3D11Texture2D*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromDirect3DDevice9Ex(IDirect3DDevice9Ex*)", "void cv::directx::convertToDirect3DSurface9(cv::InputArray, IDirect3DSurface9*, void*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromDirect3DDevice9(IDirect3DDevice9*)", "void cv::directx::convertToD3D10Texture2D(cv::InputArray, ID3D10Texture2D*)", "27TegraRowOp_combine2_InvokerIKxxE", "27TegraRowOp_combine3_InvokerIKxxE", "27TegraRowOp_combine4_InvokerIKxxE", "void cv::merge(const cv::Mat*, size_t, cv::OutputArray)", "void cv::merge(cv::InputArrayOfArrays, cv::OutputArray)", "void cvWriteInt(CvFileStorage*, const char*, int)", "void cvWriteString(CvFileStorage*, const char*, const char*, int)", "void cvRelease(void**)", "CvFileNode* cvGetFileNode(CvFileStorage*, CvFileNode*, const CvStringHashNode*, int)", "void cvWriteRawData(CvFileStorage*, const void*, int, const char*)", "void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)", "void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)", "void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)", "void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)", "void* cvLoad(const char*, CvMemStorage*, const char*, const char**)", "CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int, const char*)", "void cvWriteReal(CvFileStorage*, const char*, double)", "CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)", "void cvReleaseFileStorage(CvFileStorage**)", "void cvStartNextStream(CvFileStorage*)", "void* cvClone(const void*)", "void* cvRead(CvFileStorage*, CvFileNode*, CvAttrList*)", "void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)", "void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)", "void cvSave(const char*, const void*, const char*, const char*, CvAttrList)", "void cvRegisterType(const CvTypeInfo*)", "void cvWriteComment(CvFileStorage*, const char*, int)", "void cvEndWriteStruct(CvFileStorage*)", "CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)", "char* icvXMLParseTag(CvFileStorage*, char*, CvStringHashNode**, CvAttrList**, int*)", "void icvXMLWriteComment(CvFileStorage*, const char*, int)", "char* icvXMLSkipSpaces(CvFileStorage*, char*, int)", "void icvXMLWriteScalar(CvFileStorage*, const char*, const char*, int)", "char* icvXMLParseValue(CvFileStorage*, char*, CvFileNode*, int)", "void icvXMLWriteTag(CvFileStorage*, const char*, int, CvAttrList)", "void icvXMLParse(CvFileStorage*)", "char* icvXMLParseBase64(CvFileStorage*, char*, CvFileNode*)", "void icvXMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "void icvXMLWriteString(CvFileStorage*, const char*, const char*, int)", "void icvXMLGetMultilineStringContent(CvFileStorage*, char*, char*&, char*&)", "void icvXMLEndWriteStruct(CvFileStorage*)", "N2cv16BatchDistInvokerE", "void cv::batchDistance(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::OutputArray, int, int, cv::InputArray, int, bool)", "base64::Base64Writer::Base64Writer(CvFileStorage*)", "std::string base64::make_base64_header(const char*)", "void base64::BinaryToCvSeqConvertor::make_funcs(const char*)", "void base64::Base64Writer::check_dt(const char*)", "bool base64::Base64ContextParser::flush()", "?456789:;<=", "base64::BinaryToCvSeqConvertor::BinaryToCvSeqConvertor(const void*, int, const char*)", "base64::RawDataToBinaryConvertor::RawDataToBinaryConvertor(const void*, int, const string&)", "base64::Base64ContextEmitter::Base64ContextEmitter(CvFileStorage*)", "void cvWriteRawDataBase64(CvFileStorage*, const void*, int, const char*)", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "base64::Base64ContextParser& base64::Base64ContextParser::read(const uchar*, const uchar*)", "void base64::RawDataToBinaryConvertor::make_to_binary_funcs(const string&)", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = short unsigned int]", "void cv::randn(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 8>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 4>]", "void cv::randShuffle(cv::InputOutputArray, double, cv::RNG*)", "void cv::randu(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<short unsigned int, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = unsigned char]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 6>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 2>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<unsigned char, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = int]", "double cv::PSNR(cv::InputArray, cv::InputArray)", "double cv::norm(cv::InputArray, int, cv::InputArray)", "double cv::UMat::dot(cv::InputArray) const", "cv::UMat& cv::UMat::setTo(cv::InputArray, cv::InputArray)", "cv::UMat::UMat(const cv::UMat&, const std::vector<cv::Range>&)", "cv::UMat::UMat(const cv::UMat&, const cv::Range*)", "void cv::UMatDataAutoLocker::lock(cv::UMatData*&)", "void cv::UMat::locateROI(cv::Size&, cv::Point&) const", "static cv::UMat cv::UMat::diag(const cv::UMat&)", "void cv::UMat::convertTo(cv::OutputArray, int, double, double) const", "void cv::UMatDataAutoLocker::release(cv::UMatData*, cv::UMatData*)", "cv::Mat cv::UMat::getMat(int) const", "void cv::UMat::create(int, const int*, int, cv::UMatUsageFlags)", "cv::UMat::UMat(const cv::UMat&, const cv::Range&, const cv::Range&)", "cv::UMat cv::UMat::reshape(int, int) const", "cv::UMat::UMat(const cv::UMat&, const Rect&)", "cv::UMat cv::UMat::diag(int) const", "void cv::UMat::copyTo(cv::OutputArray) const", "void cv::setSize(cv::UMat&, int, const int*, const size_t*, bool)", "void cv::UMat::copyTo(cv::OutputArray, cv::InputArray) const", "void cv::UMatDataAutoLocker::lock(cv::UMatData*&, cv::UMatData*&)", "cv::UMatData::~UMatData()", "cv::UMat cv::UMat::reshape(int, int, const int*) const", "T& cv::TLSData<T>::getRef() const [with T = cv::UMatDataAutoLocker]", "cv::UMat cv::Mat::getUMat(int, cv::UMatUsageFlags) const", "cv::UMat& cv::UMat::adjustROI(int, int, int, int)", "void* cv::UMat::handle(int) const", "void cv::MatConstIterator::pos(int*) const", "void cv::NAryMatIterator::init(const cv::Mat**, cv::Mat*, uchar**, int)", "void icvJSONWrite(CvFileStorage*, const char*, const char*)", "char* icvJSONParseKey(CvFileStorage*, char*, CvFileNode*, CvFileNode**)", "char* icvJSONParseSeq(CvFileStorage*, char*, CvFileNode*)", "char* icvJSONSkipSpaces(CvFileStorage*, char*)", "void icvJSONStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "void icvJSONWriteComment(CvFileStorage*, const char*, int)", "void icvJSONParse(CvFileStorage*)", "char* icvJSONParseMap(CvFileStorage*, char*, CvFileNode*)", "void icvJSONWriteString(CvFileStorage*, const char*, const char*, int)", "void icvJSONEndWriteStruct(CvFileStorage*)", "char* icvJSONParseValue(CvFileStorage*, char*, CvFileNode*)", "int cv::hal::normHamming(const uchar*, int)", "int cv::hal::normHamming(const uchar*, const uchar*, int)", "void cv::Mat::convertTo(cv::OutputArray, int, double, double) const", "void cv::convertFp16(cv::InputArray, cv::OutputArray)", "N2cv6detail12PtrOwnerImplI11CvSparseMatNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvFileStorageNS_14DefaultDeleterIS2_EEEE", "int cv::FileStorage::getFormat() const", "virtual bool cv::FileStorage::open(const cv::String&, int, const cv::String&)", "void cv::read(const cv::FileNode&, cv::SparseMat&, const cv::SparseMat&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "N2cv11FileStorageE", "void cv::read(const cv::FileNode&, cv::Mat&, const cv::Mat&)", "cv::FileNodeIterator& cv::FileNodeIterator::readRaw(const cv::String&, uchar*, size_t)", "void cv::FileStorage::writeRaw(const cv::String&, const uchar*, size_t)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const cv::String&)", "static cv::String cv::FileStorage::getDefaultObjectName(const cv::String&)", "void cv::LDA::compute(cv::InputArrayOfArrays, cv::InputArray)", "void cv::LDA::save(const cv::String&) const", "void cv::sortMatrixColumnsByIndices(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::EigenvalueDecomposition::compute(cv::InputArray, bool)", "void cv::eigenNonSymmetric(cv::InputArray, cv::OutputArray, cv::OutputArray)", "static cv::Mat cv::LDA::subspaceReconstruct(cv::InputArray, cv::InputArray, cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "void cv::LDA::lda(cv::InputArrayOfArrays, cv::InputArray)", "cv::Mat cv::asRowMatrix(cv::InputArrayOfArrays, int, double, double)", "static cv::Mat cv::LDA::subspaceProject(cv::InputArray, cv::InputArray, cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::LDA::load(const cv::String&)", "cv::Mat cv::argsort(cv::InputArray, bool)", "N2cv20BufferPoolControllerE", "N2cv25DummyBufferPoolControllerE", "N2cv15StdMatAllocatorE", "virtual void cv::MatAllocator::upload(cv::UMatData*, const void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "void cv::Mat::resize(size_t)", "cv::Mat::Mat(const cv::Mat&, const std::vector<cv::Range>&)", "virtual void cv::MatAllocator::download(cv::UMatData*, void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "void cv::setSize(cv::Mat&, int, const int*, const size_t*, bool)", "virtual void cv::MatAllocator::copy(cv::UMatData*, cv::UMatData*, int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, bool) const", "cv::Mat::Mat(const cv::Mat&, const cv::Range*)", "cv::Mat cv::Mat::reshape(int, int, const int*) const", "cv::Mat cv::Mat::diag(int) const", "cv::Mat cv::Mat::reshape(int, const std::vector<int>&) const", "void cv::Mat::reserve(size_t)", "void cv::Mat::push_back(const cv::Mat&)", "void cv::Mat::locateROI(cv::Size&, cv::Point&) const", "cv::Mat& cv::Mat::adjustROI(int, int, int, int)", "cv::Mat cv::Mat::reshape(int, int) const", "virtual cv::UMatData* cv::StdMatAllocator::allocate(int, const int*, int, void*, size_t*, int, cv::UMatUsageFlags) const", "N2cv12MatAllocatorE", "cv::Mat::Mat(const cv::Mat&, const cv::Range&, const cv::Range&)", "cv::Mat::Mat(const cv::Mat&, const Rect&)", "virtual void cv::StdMatAllocator::deallocate(cv::UMatData*) const", "void cv::Mat::create(int, const int*, int)", "static cv::Mat cv::Mat::diag(const cv::Mat&)", "void cv::Mat::pop_back(size_t)", "void cv::convertScaleAbs(cv::InputArray, cv::OutputArray, double, double)", "void cv::normalize(cv::InputArray, cv::InputOutputArray, double, double, int, int, cv::InputArray)", "static void cv::KeyPoint::convert(const std::vector<cv::Point_<float> >&, std::vector<cv::KeyPoint>&, float, float, int, int)", "cv::RotatedRect::RotatedRect(const Point2f&, const Point2f&, const Point2f&)", "static void cv::KeyPoint::convert(const std::vector<cv::KeyPoint>&, std::vector<cv::Point_<float> >&, const std::vector<int>&)", "N2cv7TLSDataINS_5instr11NodeDataTlsEEE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "void cv::TlsStorage::gather(size_t, std::vector<void*>&)", "void cv::TlsAbstraction::SetData(void*)", "void cv::TlsStorage::releaseSlot(size_t, std::vector<void*>&, bool)", "size_t cv::utils::getConfigurationParameterSizeT(const char*, size_t)", "N2cv9ExceptionE", "void* cv::TLSDataContainer::getData() const", "virtual cv::TLSDataContainer::~TLSDataContainer()", "void cv::TlsStorage::setData(size_t, void*)", "void cv::HWFeatures::readSettings(const int*, int)", "size_t cv::TlsStorage::reserveSlot()", "cv::String cv::format(const char*, ...)", "*N2cv7TLSDataINS_12_GLOBAL__N_18ThreadIDEEE", "cv::TlsAbstraction::~TlsAbstraction()", "N2cv16TLSDataContainerE", "void* cv::TlsStorage::getData(size_t) const", "bool cv::utils::getConfigurationParameterBool(const char*, bool)", "cv::TlsAbstraction::TlsAbstraction()", "void (* cv::getConvertElem(int, int))(const void*, void*, int)", "void cv::SparseMat::copyTo(cv::Mat&) const", "void cv::SparseMat::convertTo(cv::Mat&, int, double, double) const", "uchar* cv::SparseMat::ptr(int, int, bool, size_t*)", "void cv::SparseMat::create(int, const int*, int)", "uchar* cv::SparseMat::ptr(int, int, int, bool, size_t*)", "void cv::minMaxLoc(const cv::SparseMat&, double*, double*, int*, int*)", "void cv::normalize(const cv::SparseMat&, cv::SparseMat&, double, int)", "uchar* cv::SparseMat::ptr(const int*, bool, size_t*)", "void cv::SparseMat::erase(const int*, size_t*)", "void cv::SparseMat::erase(int, int, int, size_t*)", "void cv::SparseMat::convertTo(cv::SparseMat&, int, double) const", "uchar* cv::SparseMat::ptr(int, bool, size_t*)", "void (* cv::getConvertScaleElem(int, int))(const void*, void*, int, double, double)", "double cv::norm(const cv::SparseMat&, int)", "void cv::SparseMat::erase(int, int, size_t*)", "void cv::meanStdDev(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::InputArray)", "cv::Scalar cv::mean(cv::InputArray, cv::InputArray)", "void throw_no_cuda()", "void cv::cartToPolar(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "float cv::cubeRoot(float)", "void cv::magnitude(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::log(cv::InputArray, cv::OutputArray)", "void cvPow(const CvArr*, CvArr*, double)", "void cvSolvePoly(const CvMat*, CvMat*, int, int)", "void cvExp(const CvArr*, CvArr*)", "void cv::polarToCart(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "void cv::exp(cv::InputArray, cv::OutputArray)", "int cv::solveCubic(cv::InputArray, cv::OutputArray)", "int cvSolveCubic(const CvMat*, CvMat*)", "void cv::phase(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "double cv::solvePoly(cv::InputArray, cv::OutputArray, int)", "void cvPolarToCart(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "void cvCartToPolar(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "bool cv::checkRange(cv::InputArray, bool, cv::Point*, double, double)", "void cv::pow(cv::InputArray, double, cv::OutputArray)", "void cv::sqrt(cv::InputArray, cv::OutputArray)", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "void cv::patchNaNs(cv::InputOutputArray, double)", "cv::utils::fs::FileLock::Impl::Impl(const char*)", "bool cv::utils::fs::createDirectory(const cv::String&)", "void cv::utils::fs::FileLock::lock()", "cv::String cv::utils::fs::getCacheDirectory(const char*, const char*)", "void cv::utils::fs::FileLock::unlock_shared()", "void cv::utils::fs::FileLock::lock_shared()", "cv::String cv::utils::fs::getcwd()", "void cv::utils::fs::FileLock::unlock()", "bool cv::utils::fs::exists(const cv::String&)", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl15OpenCLAllocatorE", "virtual void cv::ocl::OpenCLAllocator::unmap(cv::UMatData*) const", "void cv::ocl::Kernel::Impl::addUMat(const cv::UMat&, bool)", "const cv::ocl::ProgramSource& cv::ocl::Program::source() const", "uint64 cv::ocl::Timer::durationNS() const", "bool cv::ocl::Program::read(const cv::String&, const cv::String&)", "static cv::ocl::KernelArg cv::ocl::KernelArg::Constant(const cv::Mat&)", "void cv::ocl::OpenCLBufferPoolBaseImpl<Derived, BufferEntry, T>::release(T) [with Derived = cv::ocl::OpenCLBufferPoolImpl; BufferEntry = cv::ocl::CLBufferEntry; T = _cl_mem*]", "static cv::ocl::ProgramSource cv::ocl::ProgramSource::fromSPIR(const cv::String&, const cv::String&, const unsigned char*, size_t, const cv::String&)", "void cv::ocl::Context::setUseSVM(bool)", "virtual bool cv::ocl::OpenCLAllocator::allocate(cv::UMatData*, int, cv::UMatUsageFlags) const", "virtual void cv::ocl::OpenCLAllocator::map(cv::UMatData*, int) const", "virtual cv::UMatData* cv::ocl::OpenCLAllocator::allocate(int, const int*, int, void*, size_t*, int, cv::UMatUsageFlags) const", "bool cv::ocl::Kernel::run(int, size_t*, size_t*, bool, const cv::ocl::Queue&)", "void cv::ocl::attachContext(const cv::String&, void*, void*, void*)", "virtual void cv::ocl::OpenCLAllocator::copy(cv::UMatData*, cv::UMatData*, int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, bool) const", "static bool cv::ocl::Image2D::Impl::isFormatSupported(cl_image_format)", "cv::String cv::ocl::Program::getPrefix() const", "bool cv::ocl::haveOpenCL()", "int64 cv::ocl::Kernel::runProfiling(int, size_t*, size_t*, const cv::ocl::Queue&)", "void cv::ocl::OpenCLAllocator::deallocate_(cv::UMatData*) const", "void cv::ocl::OpenCLBufferPoolImpl::_allocateBufferEntry(cv::ocl::OpenCLBufferPoolImpl::BufferEntry&, size_t)", "void cv::ocl::Timer::start()", "bool cv::ocl::OpenCLAllocator::checkContinuous(int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, size_t&, size_t*, size_t&, size_t*, size_t*, size_t&, size_t*, size_t*) const", "void cv::ocl::Program::getBinary(std::vector<char>&) const", "virtual void cv::ocl::OpenCLAllocator::download(cv::UMatData*, void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "cv::ocl::ProgramSource::hash_t cv::ocl::ProgramSource::hash() const", "void cv::ocl::setUseOpenCL(bool)", "void* cv::ocl::Program::ptr() const", "void cv::ocl::convertFromImage(void*, cv::UMat&)", "void cv::ocl::convertFromBuffer(void*, size_t, int, int, int, cv::UMat&)", "bool cv::ocl::Program::write(cv::String&) const", "void cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(const BufferEntry&)", "static cv::ocl::ProgramSource cv::ocl::ProgramSource::fromBinary(const cv::String&, const cv::String&, const unsigned char*, size_t, const cv::String&)", "const cv::String& cv::ocl::ProgramSource::source() const", "void cv::ocl::Timer::stop()", "void cv::ocl::PlatformInfo::getDevice(cv::ocl::Device&, int) const", "cv::ocl::KernelArg::KernelArg(int, cv::UMat*, int, int, const void*, size_t)", "virtual cv::BufferPoolController* cv::ocl::OpenCLAllocator::getBufferPoolController(const char*) const", "void cv::ocl::ProgramSource::Impl::updateHash(const char*)", "virtual void cv::ocl::OpenCLAllocator::deallocate(cv::UMatData*) const", "static cv::String cv::ocl::Program::getPrefix(const cv::String&)", "const cv::ocl::Queue& cv::ocl::Queue::getProfilingQueue() const", "bool cv::ocl::Program::create(const cv::ocl::ProgramSource&, const cv::String&, cv::String&)", "virtual void cv::ocl::OpenCLAllocator::upload(cv::UMatData*, const void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "void cv::ocl::Image2D::Impl::init(const cv::UMat&, bool, bool)", "cv::ocl::OpenCLBufferPoolBaseImpl<Derived, BufferEntry, T>::~OpenCLBufferPoolBaseImpl() [with Derived = cv::ocl::OpenCLBufferPoolImpl; BufferEntry = cv::ocl::CLBufferEntry; T = _cl_mem*]", "cv::ocl::Program cv::ocl::Context::Impl::getProg(const cv::ocl::ProgramSource&, const cv::String&, cv::String&)", "cv::String cv::ocl::kernelToStr(cv::InputArray, int, const char*)", "void cv::ocl::Context::Impl::setDefault()", "int cv::ocl::checkOptimalVectorWidth(const int*, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::ocl::OclVectorStrategy)", "int cv::hal::QR64f(double*, size_t, int, int, int, double*, size_t, double*)", "int cv::hal::LU32f(float*, size_t, int, float*, size_t, int)", "int cv::hal::LU64f(double*, size_t, int, double*, size_t, int)", "int cv::hal::QR32f(float*, size_t, int, int, int, float*, size_t, float*)", "bool cv::hal::Cholesky32f(float*, size_t, int, float*, size_t, int)", "bool cv::hal::Cholesky64f(double*, size_t, int, double*, size_t, int)", "int cv::solveLP(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void cv::repeat(cv::InputArray, int, int, cv::OutputArray)", "void cvCopy(const void*, void*, const void*)", "int cv::borderInterpolate(int, int, int)", "void cv::rotate(cv::InputArray, cv::OutputArray, int)", "void cvRepeat(const CvArr*, CvArr*)", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const Scalar&)", "void cvFlip(const CvArr*, CvArr*, int)", "void cv::flip(cv::InputArray, cv::OutputArray, int)", "void cv::Mat::copyTo(cv::OutputArray, cv::InputArray) const", "void cv::Mat::copyTo(cv::OutputArray) const", "cv::Mat& cv::Mat::setTo(cv::InputArray, cv::InputArray)", "cv::Mat& cv::Mat::operator=(const Scalar&)", "cv::cuda::HostMem cv::cuda::HostMem::reshape(int, int) const", "void throw_no_cuda()", "void cv::setUseOpenVX(bool)", "N2cv5utils5trace7details12TraceStorageE", "N2cv7TLSDataINS_5utils5trace7details23TraceManagerThreadLocalEEE", "N2cv5utils5trace7details17AsyncTraceStorageE", "N2cv5utils5trace7details16SyncTraceStorageE", "N2cv6detail12PtrOwnerImplINS_5utils5trace7details17AsyncTraceStorageENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_5utils5trace7details16SyncTraceStorageENS_14DefaultDeleterIS5_EEEE", "void cv::utils::trace::details::parallelForSetRootRegion(const cv::utils::trace::details::Region&, const cv::utils::trace::details::TraceManagerThreadLocal&)", "                                                               ", "void cv::utils::trace::details::traceArg(const cv::utils::trace::details::TraceArg&, int64)", "void cv::utils::trace::details::traceArg(const cv::utils::trace::details::TraceArg&, double)", "void cv::utils::trace::details::traceArg(const cv::utils::trace::details::TraceArg&, int)", "T& cv::TLSData<T>::getRef() const [with T = cv::utils::trace::details::TraceManagerThreadLocal]", "void cv::utils::trace::details::traceArg(const cv::utils::trace::details::TraceArg&, const char*)", "void cvSetData(CvArr*, void*, int)", "CvMat* cvCreateMatHeader(int, int, int)", "uchar* cvPtr3D(const CvArr*, int, int, int, int*)", "CvSparseNode* cvInitSparseMatIterator(const CvSparseMat*, CvSparseMatIterator*)", "CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)", "int cvGetElemType(const CvArr*)", "void cvRawDataToScalar(const void*, int, CvScalar*)", "double cvGetRealND(const CvArr*, const int*)", "void cvReleaseSparseMat(CvSparseMat**)", "void cvReleaseMat(CvMat**)", "IplImage* cvInitImageHeader(IplImage*, CvSize, int, int, int, int)", "CvMatND* cvCloneMatND(const CvMatND*)", "void cvSetReal2D(CvArr*, int, int, double)", "int cvGetDims(const CvArr*, int*)", "uchar* cvPtr1D(const CvArr*, int, int*)", "IplImage* cvGetImage(const CvArr*, IplImage*)", "int cvGetDimSize(const CvArr*, int)", "void cvSetImageCOI(IplImage*, int)", "CvMatND* cvCreateMatNDHeader(int, const int*, int)", "double cvGetReal3D(const CvArr*, int, int, int)", "CvSparseMat* cvCreateSparseMat(int, const int*, int)", "void cvSetRealND(CvArr*, const int*, double)", "CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)", "void cvScalarToRawData(const CvScalar*, void*, int, int)", "void icvDeleteNode(CvSparseMat*, const int*, unsigned int*)", "CvMat* cvInitMatHeader(CvMat*, int, int, int, void*, int)", "CvSize cvGetSize(const CvArr*)", "void cvSetImageROI(IplImage*, CvRect)", "void cvReleaseImageHeader(IplImage**)", "void cvSetIPLAllocators(Cv_iplCreateImageHeader, Cv_iplAllocateImageData, Cv_iplDeallocate, Cv_iplCreateROI, Cv_iplCloneImage)", "void cvReleaseData(CvArr*)", "double cvGetReal1D(const CvArr*, int)", "CvMat* cvGetSubRect(const CvArr*, CvMat*, CvRect)", "void cvSet1D(CvArr*, int, CvScalar)", "void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)", "void cvSetReal3D(CvArr*, int, int, int, double)", "int cvGetImageCOI(const IplImage*)", "uchar* cvPtr2D(const CvArr*, int, int, int*)", "CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)", "CvMat* cvGetCols(const CvArr*, CvMat*, int, int)", "CvMatND* cvGetMatND(const CvArr*, CvMatND*, int*)", "int cvInitNArrayIterator(int, CvArr**, const CvArr*, CvMatND*, CvNArrayIterator*, int)", "CvSparseMat* cvCloneSparseMat(const CvSparseMat*)", "CvMat* cvGetDiag(const CvArr*, CvMat*, int)", "void cvSetReal1D(CvArr*, int, double)", "CvScalar cvGet1D(const CvArr*, int)", "IplImage* cvCloneImage(const IplImage*)", "void cv::scalarToRawData(const Scalar&, void*, int, int)", "uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned int*)", "void cvResetImageROI(IplImage*)", "uchar* icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned int*)", "void cvCreateData(CvArr*)", "CvMat* cvCloneMat(const CvMat*)", "CvScalar cvGet2D(const CvArr*, int, int)", "CvTermCriteria cvCheckTermCriteria(CvTermCriteria, double, int)", "CvMat* cvReshape(const CvArr*, CvMat*, int, int)", "double cvGetReal2D(const CvArr*, int, int)", "CvRect cvGetImageROI(const IplImage*)", "CvMat* cvGetRows(const CvArr*, CvMat*, int, int, int)", "void cvReleaseImage(IplImage**)", "void cvSet2D(CvArr*, int, int, CvScalar)", "void cvCrossProduct(const CvArr*, const CvArr*, CvArr*)", "void cv::insertImageCOI(cv::InputArray, CvArr*, int)", "cv::Mat cv::iplImageToMat(const IplImage*, bool)", "_IplImage::_IplImage(const cv::Mat&)", "CvArr* cvRange(CvArr*, double, double)", "cv::Mat cv::cvarrToMat(const CvArr*, bool, bool, int, cv::AutoBuffer<double>*)", "void cvTranspose(const CvArr*, CvArr*)", "void cvSort(const CvArr*, CvArr*, CvArr*, int)", "void cvReduce(const CvArr*, CvArr*, int, int)", "int cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria, int, CvRNG*, int, CvArr*, double*)", "void cv::extractImageCOI(const CvArr*, cv::OutputArray, int)", "N3tbb8internal9no_assignE", "N3tbb10interface78internal13delegate_baseE", "N3tbb10interface98internal9flag_taskE", "*N3tbb10interface78internal18delegated_functionIN12_GLOBAL__N_113ProxyLoopBodyEvEE", "*N12_GLOBAL__N_123ParallelLoopBodyWrapperE", "N2cv16ParallelLoopBodyE", "*N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN12_GLOBAL__N_113ProxyLoopBodyEKNS_16auto_partitionerEEE", "*N12_GLOBAL__N_113ProxyLoopBodyE", "void cvAvgSdv(const CvArr*, CvScalar*, CvScalar*, const void*)", "CvScalar cvAvg(const void*, const void*)", "CvScalar cvSum(const CvArr*)", "char* icvYMLParseValue(CvFileStorage*, char*, CvFileNode*, int, int)", "void icvYMLWriteComment(CvFileStorage*, const char*, int)", "char* icvYMLParseKey(CvFileStorage*, char*, CvFileNode*, CvFileNode**)", "char* icvYMLSkipSpaces(CvFileStorage*, char*, int, int)", "void icvYMLWrite(CvFileStorage*, const char*, const char*)", "char* icvYMLParseBase64(CvFileStorage*, char*, int, CvFileNode*)", "void icvYMLWriteString(CvFileStorage*, const char*, const char*, int)", "void icvYMLEndWriteStruct(CvFileStorage*)", "void icvYMLParse(CvFileStorage*)", "void icvYMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "void icvYMLGetMultilineStringContent(CvFileStorage*, char*, int, char*&, char*&)", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, int)", "void cv::PCABackProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::PCA::project(cv::InputArray, cv::OutputArray) const", "void cv::PCA::backProject(cv::InputArray, cv::OutputArray) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "void cv::PCAProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::PCA::write(cv::FileStorage&) const", "void cv::PCA::read(const cv::FileNode&)", "cv::PCA& cv::PCA::operator()(cv::InputArray, cv::InputArray, int, int)", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, double)", "cv::PCA& cv::PCA::operator()(cv::InputArray, cv::InputArray, int, double)", "void* IntGetProcAddress(const char*)", "void cv::ogl::convertFromGLTexture2D(const cv::ogl::Texture2D&, cv::OutputArray)", "void cv::ogl::Arrays::setVertexArray(cv::InputArray)", "void cv::ogl::Arrays::setColorArray(cv::InputArray)", "cv::ocl::Context& cv::ogl::ocl::initializeContextFromGL()", "cv::UMat cv::ogl::mapGLBuffer(const cv::ogl::Buffer&, int)", "void cv::ogl::convertToGLTexture2D(cv::InputArray, cv::ogl::Texture2D&)", "void {anonymous}::throw_no_ogl()", "void cv::ogl::unmapGLBuffer(cv::UMat&)", "void cv::ogl::Arrays::setTexCoordArray(cv::InputArray)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cvSVBkSb(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*, int)", "int cvSolve(const CvArr*, const CvArr*, CvArr*, int)", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, int)", "void cv::SVDecomp(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "void cv::_SVDcompute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "int cv::LU(float*, size_t, int, float*, size_t, int)", "int cv::LU(double*, size_t, int, double*, size_t, int)", "void cvEigenVV(CvArr*, CvArr*, CvArr*, double, int, int)", "bool cv::solve(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "double cv::determinant(cv::InputArray)", "void cvSVD(CvArr*, CvArr*, CvArr*, CvArr*, int)", "double cvDet(const CvArr*)", "bool cv::Cholesky(float*, size_t, int, float*, size_t, int)", "void cv::SVBackSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "bool cv::Cholesky(double*, size_t, int, double*, size_t, int)", "static void cv::SVD::backSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "double cv::invert(cv::InputArray, cv::OutputArray, int)", "bool cv::eigen(cv::InputArray, cv::OutputArray, cv::OutputArray)", "double cvInvert(const CvArr*, CvArr*, int)", "void cvLUT(const void*, void*, const void*)", "void cvMerge(const void*, const void*, const void*, const void*, void*)", "void cvConvertScale(const void*, void*, double, double)", "void cvConvertScaleAbs(const void*, void*, double, double)", "void cvNormalize(const CvArr*, CvArr*, double, double, int, const CvArr*)", "void cvSplit(const void*, void*, void*, void*, void*)", "N2cv13FormattedImplE", "N2cv13FormatterBaseE", "N2cv16DefaultFormatterE", "N2cv15MatlabFormatterE", "N2cv15PythonFormatterE", "N2cv14NumpyFormatterE", "N2cv12CSVFormatterE", "N2cv10CFormatterE", "N2cv6detail12PtrOwnerImplINS_13FormattedImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16DefaultFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15MatlabFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12CSVFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15PythonFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_14NumpyFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10CFormatterENS_14DefaultDeleterIS2_EEEE", "[],[]", "cv::FormattedImpl::FormattedImpl(cv::String, cv::String, cv::Mat, char*, bool, bool, int)", "N2cv9FormattedE", "N2cv9FormatterE", "cv::ocl::Context& cv::va_intel::ocl::initializeContextFromVA(VADisplay, bool)", "void cv::va_intel::convertToVASurface(VADisplay, cv::InputArray, VASurfaceID, cv::Size)", "void cv::va_intel::convertFromVASurface(VADisplay, VASurfaceID, cv::Size, cv::OutputArray)", "void throw_no_cuda()", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat&, cv::Range, cv::Range)", "cv::cuda::GpuMat cv::cuda::GpuMat::reshape(int, int) const", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat&, cv::Rect)", "void cv::minMaxLoc(cv::InputArray, double*, double*, cv::Point*, cv::Point*, cv::InputArray)", "void cv::minMaxIdx(cv::InputArray, double*, double*, int*, int*, cv::InputArray)", "CvGenericHash* cvCreateMap(int, int, int, CvMemStorage*, int)", "void make_write_struct_delayed(CvFileStorage*, const char*, int, const char*)", "void icvProcessSpecialDouble(CvFileStorage*, char*, double*, char**)", "int icvSymbolToType(char)", "ucwsifdr", "void icvClose(CvFileStorage*, cv::String*)", "char icvTypeSymbol(int)", "int icvDecodeFormat(const char*, int*, int)", "void icvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*)", "int icvDecodeSimpleFormat(const char*)", "void icvFSCreateCollection(CvFileStorage*, int, CvFileNode*)", "void switch_to_Base64_state(CvFileStorage*, base64::fs::State)", "char* icvGets(CvFileStorage*, char*, int)", "void icvPuts(CvFileStorage*, const char*)", "void cvStartReadSeq(const CvSeq*, CvSeqReader*, int)", "schar* cvSeqInsert(CvSeq*, int, const void*)", "void* cvMemStorageAlloc(CvMemStorage*, size_t)", "void cvRestoreMemStoragePos(CvMemStorage*, CvMemStoragePos*)", "CvGraph* cvCreateGraph(int, int, int, int, CvMemStorage*)", "void cvFlushSeqWriter(CvSeqWriter*)", "CvGraphEdge* cvFindGraphEdge(const CvGraph*, int, int)", "void cvReleaseMemStorage(CvMemStorage**)", "int cvGraphVtxDegree(const CvGraph*, int)", "void icvSeqElemsClearFlags(CvSeq*, int, int)", "void cvChangeSeqBlock(void*, int)", "void cvCreateSeqBlock(CvSeqWriter*)", "void cvStartAppendToSeq(CvSeq*, CvSeqWriter*)", "void cvSeqPopFront(CvSeq*, void*)", "void cvGraphRemoveEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*)", "CvGraph* cvCloneGraph(const CvGraph*, CvMemStorage*)", "CvSeq* cvMakeSeqHeaderForArray(int, int, int, void*, int, CvSeq*, CvSeqBlock*)", "void cvRemoveNodeFromTree(void*, void*)", "void cvInitTreeNodeIterator(CvTreeNodeIterator*, const void*, int)", "CvSeq* cvCreateSeq(int, size_t, size_t, CvMemStorage*)", "int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)", "void cvClearSeq(CvSeq*)", "void cvGraphRemoveEdge(CvGraph*, int, int)", "void cvSeqPopMulti(CvSeq*, void*, int, int)", "schar* cvSeqSearch(CvSeq*, const void*, CvCmpFunc, int, int*, void*)", "void cvSetSeqReaderPos(CvSeqReader*, int, int)", "int cvGraphRemoveVtxByPtr(CvGraph*, CvGraphVtx*)", "void cvInsertNodeIntoTree(void*, void*, void*)", "schar* cvSeqPush(CvSeq*, const void*)", "CvSet* cvCreateSet(int, int, int, CvMemStorage*)", "void icvGoNextMemBlock(CvMemStorage*)", "void cvReleaseGraphScanner(CvGraphScanner**)", "void icvInitMemStorage(CvMemStorage*, int)", "void cvSetRemove(CvSet*, int)", "void* cvCvtSeqToArray(const CvSeq*, void*, CvSlice)", "schar* cvSeqPushFront(CvSeq*, const void*)", "void* cvNextTreeNode(CvTreeNodeIterator*)", "void cvSeqRemove(CvSeq*, int)", "CvMemStorage* cvCreateChildMemStorage(CvMemStorage*)", "int cvGraphRemoveVtx(CvGraph*, int)", "CvSeq* cvSeqSlice(const CvSeq*, CvSlice, CvMemStorage*, int)", "int cvGraphVtxDegreeByPtr(const CvGraph*, const CvGraphVtx*)", "CvGraphScanner* cvCreateGraphScanner(CvGraph*, CvGraphVtx*, int)", "void cvClearGraph(CvGraph*)", "void cvSeqPop(CvSeq*, void*)", "void cvSetSeqBlockSize(CvSeq*, int)", "void cvSeqSort(CvSeq*, CvCmpFunc, void*)", "void icvGrowSeq(CvSeq*, int)", "int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)", "void* cvPrevTreeNode(CvTreeNodeIterator*)", "int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)", "CvSeq* cvEndWriteSeq(CvSeqWriter*)", "void cvSaveMemStoragePos(const CvMemStorage*, CvMemStoragePos*)", "CvSeq* cvTreeToNodeSeq(const void*, int, CvMemStorage*)", "void cvSeqInsertSlice(CvSeq*, int, const CvArr*)", "int cvNextGraphItem(CvGraphScanner*)", "CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph*, const CvGraphVtx*, const CvGraphVtx*)", "int cvGetSeqReaderPos(CvSeqReader*)", "void cvClearMemStorage(CvMemStorage*)", "int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)", "int cvSeqPartition(const CvSeq*, CvMemStorage*, CvSeq**, CvCmpFunc, void*)", "void cvSeqPushMulti(CvSeq*, const void*, int, int)", "schar* icvSeqFindNextElem(CvSeq*, int, int, int, int*)", "int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)", "void cvStartWriteSeq(int, int, int, CvMemStorage*, CvSeqWriter*)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::gemm(cv::InputArray, cv::InputArray, double, cv::InputArray, double, cv::OutputArray, int)", "void cvPerspectiveTransform(const CvArr*, CvArr*, const CvMat*)", "void cvCalcPCA(const CvArr*, CvArr*, CvArr*, CvArr*, int)", "void cv::calcCovarMatrix(const cv::Mat*, int, cv::Mat&, cv::Mat&, int, int)", "double cv::Mahalanobis(cv::InputArray, cv::InputArray, cv::InputArray)", "void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "void cv::gemmImpl(cv::Mat, cv::Mat, double, cv::Mat, double, cv::Mat, int)", "void cv::perspectiveTransform(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvCalcCovarMatrix(const CvArr**, int, CvArr*, CvArr*, int)", "void cv::transform(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cvProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "void cvScaleAdd(const CvArr*, CvScalar, const CvArr*, CvArr*)", "void cv::calcCovarMatrix(cv::InputArray, cv::OutputArray, cv::InputOutputArray, int, int)", "double cv::Mat::dot(cv::InputArray) const", "void cv::mulTransposed(cv::InputArray, cv::OutputArray, bool, cv::InputArray, double, int)", "void cvTransform(const CvArr*, CvArr*, const CvMat*, const CvMat*)", "void cvGEMM(const CvArr*, const CvArr*, double, const CvArr*, double, CvArr*, int)", "void cv::scaleAdd(cv::InputArray, double, cv::InputArray, cv::OutputArray)", "int cv::countNonZero(cv::InputArray)", "void cv::findNonZero(cv::InputArray, cv::OutputArray)", "virtual cv::Algorithm::~Algorithm()", "virtual cv::String cv::Algorithm::getDefaultName() const", "cv::Algorithm::Algorithm()", "void cv::Algorithm::write(const cv::Ptr<cv::FileStorage>&, const cv::String&) const", "N2cv9AlgorithmE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::Algorithm::writeFormat(cv::FileStorage&) const", "virtual void cv::Algorithm::save(const cv::String&) const", "24TegraRowOp_phase_InvokerIKffE", "28TegraRowOp_magnitude_InvokerIKffE", "void cv::hal::cpu_baseline::fastAtan64f(const double*, const double*, double*, int, bool)", "void cv::hal::cpu_baseline::magnitude32f(const float*, const float*, float*, int)", "void cv::hal::cpu_baseline::fastAtan32f(const float*, const float*, float*, int, bool)", "void cv::hal::cpu_baseline::invSqrt32f(const float*, float*, int)", "void cv::hal::exp32f(const float*, float*, int)", "void cv::hal::fastAtan32f(const float*, const float*, float*, int, bool)", "void cv::hal::magnitude64f(const double*, const double*, double*, int)", "void cv::hal::sqrt64f(const double*, double*, int)", "void cv::hal::cpu_baseline::invSqrt64f(const double*, double*, int)", "void cv::hal::cpu_baseline::log64f(const double*, double*, int)", "void cv::hal::cpu_baseline::log32f(const float*, float*, int)", "void cv::hal::log32f(const float*, float*, int)", "void cv::hal::invSqrt32f(const float*, float*, int)", "void cv::hal::cpu_baseline::exp64f(const double*, double*, int)", "void cv::hal::exp64f(const double*, double*, int)", "void cv::hal::fastAtan64f(const double*, const double*, double*, int, bool)", "void cv::hal::magnitude32f(const float*, const float*, float*, int)", "void cv::hal::fastAtan2(const float*, const float*, float*, int, bool)", "void cv::hal::log64f(const double*, double*, int)", "void cv::hal::invSqrt64f(const double*, double*, int)", "void cv::hal::cpu_baseline::exp32f(const float*, float*, int)", "void* icvReadMat(CvFileStorage*, CvFileNode*)", "void* icvReadSparseMat(CvFileStorage*, CvFileNode*)", "char* icvGetFormat(const CvSeq*, const char*, CvAttrList*, int, char*)", "void icvReleaseSeq(void**)", "void* icvReadSeq(CvFileStorage*, CvFileNode*)", "void* icvReadSeqTree(CvFileStorage*, CvFileNode*)", "void icvReleaseGraph(void**)", "void icvWriteHeaderData(CvFileStorage*, const CvSeq*, CvAttrList*, int)", "void* icvReadGraph(CvFileStorage*, CvFileNode*)", "void icvWriteImage(CvFileStorage*, const char*, const void*, CvAttrList)", "void* icvReadMatND(CvFileStorage*, CvFileNode*)", "void* icvReadImage(CvFileStorage*, CvFileNode*)", "N2cv6StringE", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl14big_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl9empty_anyE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl16small_any_policyIjEE", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann12KNNResultSetIfEE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann7NNIndexINS_10HammingLUTEEE", "N7cvflann5IndexINS_10HammingLUTEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann9ResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann9ResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_10HammingLUTEEE", "N7cvflann27HierarchicalClusteringIndexINS_10HammingLUTEEE", "N7cvflann8LshIndexINS_10HammingLUTEEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "virtual void cv::flann::Index::release()", "virtual int cv::flann::Index::radiusSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, double, int, const cv::flann::SearchParams&)", "virtual void cv::flann::Index::build(cv::InputArray, const cv::flann::IndexParams&, cvflann::flann_distance_t)", "void cv::flann::buildIndex_(void*&, const cv::Mat&, const cv::flann::IndexParams&, const Distance&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >; FILE = __sFILE]", "void cv::flann::buildIndex_(void*&, const cv::Mat&, const cv::flann::IndexParams&, const Distance&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>]", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "virtual void cv::flann::Index::knnSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, int, const cv::flann::SearchParams&)", "void cvflann::lsh::LshTable<ElementType>::initialize(size_t) [with ElementType = unsigned char; size_t = unsigned int]", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>; FILE = __sFILE]", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >; FILE = __sFILE]", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>]", "virtual void cv::flann::Index::save(const cv::String&) const", "N2cv5flann5IndexE", "void cv::flann::buildIndex_(void*&, const cv::Mat&, const cv::flann::IndexParams&, const Distance&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "int cv::rotatedRectangleIntersection(const cv::RotatedRect&, const cv::RotatedRect&, cv::OutputArray)", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "bool cv::isContourConvex(cv::InputArray)", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "int cvCheckContourConvexity(const CvArr*)", "CvSeq* cvConvexityDefects(const CvArr*, const CvArr*, CvMemStorage*)", "CvSeq* cvConvexHull2(const CvArr*, void*, int, int)", "bool isStorageOrMat(void*)", "31initUndistortRectifyMapComputer", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "virtual void initUndistortRectifyMapComputer::operator()(const cv::Range&) const", "void cv::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::TermCriteria)", "cv::Point2f cv::mapPointSpherical(const Point2f&, float, cv::Vec4d*, int)", "float cv::initWideAngleProjMap(cv::InputArray, cv::InputArray, cv::Size, int, int, cv::OutputArray, cv::OutputArray, int, double)", "void cv::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, int, cv::OutputArray, cv::OutputArray)", "void cvUndistortPointsInternal(const CvMat*, CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*, cv::TermCriteria)", "void cvInitUndistortMap(const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvUndistort2(const CvArr*, CvArr*, const CvMat*, const CvMat*, const CvMat*)", "void cvInitUndistortRectifyMap(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvArr*, CvArr*)", "29TegraCvtColor_rgb2bgr_Invoker", "30TegraCvtColor_rgb2bgrx_Invoker", "30TegraCvtColor_rgb2rgbx_Invoker", "30TegraCvtColor_rgbx2bgr_Invoker", "30TegraCvtColor_rgbx2rgb_Invoker", "31TegraCvtColor_rgbx2bgrx_Invoker", "32TegraCvtColor_rgb2bgr565_Invoker", "32TegraCvtColor_rgb2rgb565_Invoker", "33TegraCvtColor_rgbx2bgr565_Invoker", "33TegraCvtColor_rgbx2rgb565_Invoker", "30TegraCvtColor_rgb2gray_Invoker", "30TegraCvtColor_bgr2gray_Invoker", "31TegraCvtColor_rgbx2gray_Invoker", "31TegraCvtColor_bgrx2gray_Invoker", "30TegraCvtColor_gray2rgb_Invoker", "31TegraCvtColor_gray2rgbx_Invoker", "31TegraCvtColor_rgb2ycrcb_Invoker", "31TegraCvtColor_bgr2ycrcb_Invoker", "32TegraCvtColor_rgbx2ycrcb_Invoker", "32TegraCvtColor_bgrx2ycrcb_Invoker", "29TegraCvtColor_rgb2hsv_Invoker", "29TegraCvtColor_bgr2hsv_Invoker", "30TegraCvtColor_rgbx2hsv_Invoker", "30TegraCvtColor_bgrx2hsv_Invoker", "30TegraCvtColor_rgb2hsvf_Invoker", "30TegraCvtColor_bgr2hsvf_Invoker", "31TegraCvtColor_rgbx2hsvf_Invoker", "31TegraCvtColor_bgrx2hsvf_Invoker", "N2cv22RGB888toYUV420pInvokerE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGBA2mRGBA<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2YCrCb_i<unsigned char>]", "void cv::hal::cvtXYZtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool)", "void cv::hal::cvtGraytoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2XYZ_i<short unsigned int>]", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "void cv::hal::cvtBGR5x5toBGR(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::YCrCb2RGB_i<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2XYZ_i<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2HSV_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2YCrCb_i<short unsigned int>]", "cv::RGB2Lab_f::RGB2Lab_f(int, int, const float*, const float*, bool)", "void cv::hal::cvtBGRtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int, int, bool)", "void cv::hal::cvtBGRtoTwoPlaneYUV(const uchar*, size_t, uchar*, uchar*, size_t, int, int, int, bool, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Gray<float>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::HLS2RGB_b]", "void cv::hal::cvtLabtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool, bool)", "void cv::hal::cvtGraytoBGR5x5(const uchar*, size_t, uchar*, size_t, int, int, int)", "void cvCvtColor(const CvArr*, CvArr*, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Lab2RGB_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Lab2RGB_f]", "void cv::hal::cvtMultipliedRGBAtoRGBA(const uchar*, size_t, uchar*, size_t, int, int)", "void cv::hal::cvtBGRtoGray(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2HSV_f]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::HSV2RGB_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::HSV2RGB_f]", "void cv::hal::cvtBGRtoXYZ(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB5x52RGB]", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar*, const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "cv::RGB2Luvfloat::RGB2Luvfloat(int, int, const float*, const float*, bool)", "void cv::hal::cvtBGR5x5toGray(const uchar*, size_t, uchar*, size_t, int, int, int)", "void cv::hal::cvtBGRtoYUV(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool)", "void cv::hal::cvtBGRtoLab(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool, bool)", "cv::RGB2HSV_b::RGB2HSV_b(int, int, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2RGB<float>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::mRGBA2RGBA<unsigned char>]", "cv::RGB2Lab_b::RGB2Lab_b(int, int, const float*, const float*, bool)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Luv2RGB_b]", "void cv::hal::cvtBGRtoBGR5x5(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::XYZ2RGB_f<float>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Luv_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Luv_f]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Luv2RGB_f]", "void cv::cvtColorTwoPlane(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Gray<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::HLS2RGB_f]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Gray2RGB<short unsigned int>]", "void cv::hal::cvtBGRtoHSV(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool, bool)", "void cv::hal::cvtYUVtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool)", "void cv::hal::cvtRGBAtoMultipliedRGBA(const uchar*, size_t, uchar*, size_t, int, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Gray2RGB<float>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2RGB<short unsigned int>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Gray2RGB5x5]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::XYZ2RGB_i<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2XYZ_f<float>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2YCrCb_f<float>]", "void cv::hal::cvtOnePlaneYUVtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2HLS_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2HLS_f]", "void cv::hal::cvtHSVtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, int, bool, bool, bool)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Lab_b]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Lab_f]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::YCrCb2RGB_i<short unsigned int>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2RGB5x5]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::Gray2RGB<unsigned char>]", "void cv::hal::cvtBGRtoThreePlaneYUV(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "void cv::hal::cvtThreePlaneYUVtoBGR(const uchar*, size_t, uchar*, size_t, int, int, int, bool, int)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::XYZ2RGB_i<short unsigned int>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2RGB<unsigned char>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB2Gray<short unsigned int>]", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::RGB5x52Gray]", "cv::Luv2RGBfloat::Luv2RGBfloat(int, int, const float*, const float*, bool)", "void cv::CvtColorLoop_Invoker<Cvt>::operator()(const cv::Range&) const [with Cvt = cv::YCrCb2RGB_f<float>]", "void cvReleasePyramid(CvMat***, int)", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 8>; VecOp = cv::PyrDownNoVec<int, short int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 8>; VecOp = cv::PyrDownNoVec<int, short unsigned int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 8>; VecOp = cv::PyrDownNoVec<double, double>]", "CvMat** cvCreatePyramid(const CvArr*, int, double, const CvSize*, CvArr*, int, int)", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const Size&, int)", "void cvPyrUp(const void*, void*, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 6>; VecOp = cv::PyrUpNoVec<int, short int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::PyrDownNoVec<int, unsigned char>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 6>; VecOp = cv::PyrUpNoVec<double, double>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 6>; VecOp = cv::PyrUpNoVec<int, unsigned char>]", "void cvPyrDown(const void*, void*, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 6>; VecOp = cv::PyrUpNoVec<float, float>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 6>; VecOp = cv::PyrUpNoVec<int, short unsigned int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::PyrDownNoVec<float, float>]", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const Size&, int)", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "N2cv24HoughCirclesAccumInvokerE", "N2cv30HoughCirclesFindCentersInvokerE", "N2cv32HoughCircleEstimateRadiusInvokerINS_11NZPointListEEE", "N2cv32HoughCircleEstimateRadiusInvokerINS_10NZPointSetEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "CvSeq* cvHoughCircles(CvArr*, void*, int, double, double, double, double, int, int)", "void cv::HoughLinesPointSet(cv::InputArray, cv::OutputArray, int, int, double, double, double, double, double, double)", "void cv::HoughLinesP(cv::InputArray, cv::OutputArray, double, double, int, double, double)", "void cv::HoughCircles(cv::InputArray, cv::OutputArray, int, double, double, double, double, int, int, int, double)", "void cv::HoughLinesSDiv(const cv::Mat&, float, float, int, int, int, std::vector<cv::Vec<float, 2> >&, int, double, double)", "void cv::HoughLinesProbabilistic(cv::Mat&, float, float, int, int, int, std::vector<cv::Vec<int, 4> >&, int)", "CvSeq* cvHoughLines2(CvArr*, void*, int, double, double, int, double, double, double, double)", "void cv::HoughCirclesGradient(cv::InputArray, cv::OutputArray, float, float, int, int, int, int, int, int, bool)", "void cv::HoughLines(cv::InputArray, cv::OutputArray, double, double, int, double, double, double, double)", "void cv::HoughLinesStandard(const cv::Mat&, float, float, int, std::vector<cv::Vec<float, 2> >&, int, double, double)", "bool isStorageOrMat(void*)", "@cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::Scharr(cv::InputArray, cv::OutputArray, int, int, int, double, double, int)", "void cv::Sobel(cv::InputArray, cv::OutputArray, int, int, int, int, double, double, int)", "void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "void cvLaplace(const void*, void*, int)", "void cv::Laplacian(cv::InputArray, cv::OutputArray, int, int, double, double, int)", "void cv::getSobelKernels(cv::OutputArray, cv::OutputArray, int, int, int, bool, int)", "void cvSobel(const void*, void*, int, int, int)", "void cvGoodFeaturesToTrack(const void*, void*, void*, CvPoint2D32f*, int*, double, double, const void*, int, int, double)", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, int, bool, double)", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "28EqualizeHistCalcHist_Invoker", "23EqualizeHistLut_Invoker", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist2D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist3D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist1D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerIfEEKNS_16auto_partitionerEEE", "void cv::calcSparseHist_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, cv::SparseMat&, int, const float**, const double*, bool) [with T = short unsigned int; cv::Size = cv::Size_<int>]", "void cv::calcBackProj_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, const cv::Mat&, int, const float**, const double*, float, bool) [with T = float; BT = float; cv::Size = cv::Size_<int>]", "void cvReleaseHist(CvHistogram**)", "void cvClearHist(CvHistogram*)", "void cv::calcHistLookupTables_8u(const cv::Mat&, const cv::SparseMat&, int, const float**, const double*, bool, bool, std::vector<unsigned int>&)", "void cvCalcArrBackProjectPatch(CvArr**, CvArr*, CvSize, CvHistogram*, int, double)", "void cv::calcBackProj_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, const cv::Mat&, int, const float**, const double*, float, bool) [with T = short unsigned int; BT = short unsigned int; cv::Size = cv::Size_<int>]", "void cvCalcBayesianProb(CvHistogram**, int, CvHistogram**)", "void cvCalcArrBackProject(CvArr**, CvArr*, const CvHistogram*)", "void cv::calcSparseBackProj_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, const cv::SparseMat&, int, const float**, const double*, float, bool) [with T = short unsigned int; BT = short unsigned int; cv::Size = cv::Size_<int>]", "CvHistogram* cvMakeHistHeaderForArray(int, int*, CvHistogram*, float*, float**, int)", "void cv::calcBackProject(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, const float**, double, bool)", "CvHistogram* cvCreateHist(int, int*, CvHistType, float**, int)", "void cvNormalizeHist(CvHistogram*, double)", "void cv::calcHist(const cv::Mat*, int, const int*, const cv::Mat&, cv::SparseMat&, int, const int*, const float**, bool, bool, bool)", "void cvCalcArrHist(CvArr**, CvHistogram*, int, const CvArr*)", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "void cv::calcBackProject(const cv::Mat*, int, const int*, const cv::SparseMat&, cv::OutputArray, const float**, double, bool)", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<float>&, double)", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::SparseMat&, int, const int*, const float**, bool, bool)", "void cvCalcProbDensity(const CvHistogram*, const CvHistogram*, CvHistogram*, double)", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<int>&, const std::vector<float>&, bool)", "void* icvReadHist(CvFileStorage*, CvFileNode*)", "void cvThreshHist(CvHistogram*, double)", "void cvCopyHist(const CvHistogram*, CvHistogram**)", "void cv::calcSparseHist_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, cv::SparseMat&, int, const float**, const double*, bool) [with T = float; cv::Size = cv::Size_<int>]", "void cv::calcHist_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, cv::Mat&, int, const float**, const double*, bool) [with T = short unsigned int; cv::Size = cv::Size_<int>]", "void cvGetMinMaxHistValue(const CvHistogram*, float*, float*, int*, int*)", "void cv::calcSparseBackProj_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, const cv::SparseMat&, int, const float**, const double*, float, bool) [with T = float; BT = float; cv::Size = cv::Size_<int>]", "double cv::compareHist(const cv::SparseMat&, const cv::SparseMat&, int)", "void cvSetHistBinRanges(CvHistogram*, float**, int)", "void cv::calcHist_(std::vector<unsigned char*>&, const std::vector<int>&, cv::Size, cv::Mat&, int, const float**, const double*, bool) [with T = float; cv::Size = cv::Size_<int>]", "double cvCompareHist(const CvHistogram*, const CvHistogram*, int)", "void cv::histPrepareImages(const cv::Mat*, int, const int*, const cv::Mat&, int, const int*, const float**, bool, std::vector<unsigned char*>&, std::vector<int>&, cv::Size&, std::vector<double, std::allocator<double> >&)", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, int, const int*, const float**, bool, bool)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::fitLine3D(cv::Point3f*, int, int, float, float, float, float*)", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "void cv::fitLine2D(const Point2f*, int, int, float, float, float, float*)", "void cvFitLine(const CvArr*, int, double, double, double, float*)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int)", "void cvIntegral(const CvArr*, CvArr*, CvArr*, CvArr*)", "void cv::hal::integral(int, int, int, const uchar*, size_t, uchar*, size_t, uchar*, size_t, uchar*, size_t, int, int, int)", "void cv::integral(cv::InputArray, cv::OutputArray, int)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "void cv::magSpectrums(cv::InputArray, cv::OutputArray)", "cv::Point2d cv::phaseCorrelate(cv::InputArray, cv::InputArray, cv::InputArray, double*)", "void cv::divSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "cv::Point2d cv::weightedCentroid(cv::InputArray, cv::Point, cv::Size, double*)", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "void cvCopyMakeBorder(const CvArr*, CvArr*, CvPoint, int, CvScalar)", "CvSeq* cvPointSeqFromMat(int, const CvArr*, CvContour*, CvSeqBlock*)", "N2cv19LineSegmentDetectorE", "N2cv6detail12PtrOwnerImplINS_23LineSegmentDetectorImplENS_14DefaultDeleterIS2_EEEE", "virtual int cv::LineSegmentDetectorImpl::compareSegments(const Size&, cv::InputArray, cv::InputArray, cv::InputOutputArray)", "double cv::LineSegmentDetectorImpl::get_theta(const std::vector<cv::LineSegmentDetectorImpl::RegionPoint>&, const double&, const double&, const double&, const double&) const", "virtual void cv::LineSegmentDetectorImpl::drawSegments(cv::InputOutputArray, cv::InputArray)", "N2cv23LineSegmentDetectorImplE", "cv::LineSegmentDetectorImpl::LineSegmentDetectorImpl(int, double, double, double, double, double, double, int)", "void cv::LineSegmentDetectorImpl::region2rect(const std::vector<cv::LineSegmentDetectorImpl::RegionPoint>&, double, double, double, cv::LineSegmentDetectorImpl::rect&) const", "virtual void cv::LineSegmentDetectorImpl::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "double cv::LineSegmentDetectorImpl::rect_nfa(const cv::LineSegmentDetectorImpl::rect&) const", "int cv::Subdiv2D::insert(cv::Point2f)", "void cv::Subdiv2D::initDelaunay(cv::Rect)", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f*)", "int cv::Subdiv2D::locate(cv::Point2f, int&, int&)", "void cv::Subdiv2D::insert(const std::vector<cv::Point_<float> >&)", "void cv::Subdiv2D::checkSubdiv() const", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE10SecondScanE", "LabelT cv::connectedcomponents::LabelingGrana<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "int cv::connectedComponents_sub1(const cv::Mat&, cv::Mat&, int, int, StatsOp&) [with StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingWu<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingWuParallel<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "LabelT cv::connectedcomponents::LabelingWu<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "int cv::connectedComponents_sub1(const cv::Mat&, cv::Mat&, int, int, StatsOp&) [with StatsOp = cv::connectedcomponents::CCStatsOp]", "int cv::connectedComponents(cv::InputArray, cv::OutputArray, int, int, int)", "LabelT cv::connectedcomponents::LabelingWu<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingGrana<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingWuParallel<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingGrana<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingGrana<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "LabelT cv::connectedcomponents::LabelingWu<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "LabelT cv::connectedcomponents::LabelingGranaParallel<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "int cv::connectedComponentsWithStats(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int, int)", "LabelT cv::connectedcomponents::LabelingGranaParallel<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "CvSeq* icvApproximateChainTC89(CvChain*, int, CvMemStorage*, int)", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "CvSeq* cvApproxPoly(const void*, int, CvMemStorage*, int, double, int)", "CvSeq* cvApproxChains(CvSeq*, CvMemStorage*, int, double, int, int)", "N2cv13parallelCannyE", "N2cv9finalPassE", "virtual void cv::parallelCanny::operator()(const cv::Range&) const", "void cvCanny(const CvArr*, CvArr*, double, double, int)", "void cv::Canny(cv::InputArray, cv::InputArray, cv::OutputArray, double, double, bool)", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "N2cv16GeneralizedHoughE", "N2cv23GeneralizedHoughBallardE", "N2cv20GeneralizedHoughGuilE", "*N12_GLOBAL__N_120GeneralizedHoughBaseE", "void {anonymous}::GeneralizedHoughBase::filterMinDist()", "void {anonymous}::GeneralizedHoughGuilImpl::calcOrientation()", "virtual void {anonymous}::GeneralizedHoughBallardImpl::processTempl()", "void {anonymous}::GeneralizedHoughBallardImpl::findPosInHist()", "void {anonymous}::GeneralizedHoughGuilImpl::calcPosition(double, int, double, int)", "void {anonymous}::GeneralizedHoughBase::convertTo(cv::OutputArray, cv::OutputArray)", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124GeneralizedHoughGuilImplENS_14DefaultDeleterIS3_EEEE", "void {anonymous}::GeneralizedHoughGuilImpl::calcScale(double)", "void {anonymous}::GeneralizedHoughGuilImpl::getContourPoints(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<{anonymous}::GeneralizedHoughGuilImpl::ContourPoint>&)", "void {anonymous}::GeneralizedHoughBase::calcEdges(cv::InputArray, cv::Mat&, cv::Mat&, cv::Mat&)", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_127GeneralizedHoughBallardImplENS_14DefaultDeleterIS3_EEEE", "*N12_GLOBAL__N_124GeneralizedHoughGuilImplE", "void {anonymous}::GeneralizedHoughBallardImpl::calcHist()", "void {anonymous}::GeneralizedHoughBase::setTemplateImpl(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point)", "void {anonymous}::GeneralizedHoughBase::detectImpl(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "void {anonymous}::GeneralizedHoughGuilImpl::buildFeatureList(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<std::vector<{anonymous}::GeneralizedHoughGuilImpl::Feature> >&, cv::Point2d)", "*N12_GLOBAL__N_127GeneralizedHoughBallardImplE", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIthEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhtEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv9SqrRowSumIhiEE", "N2cv9SqrRowSumIhdEE", "N2cv9SqrRowSumItdEE", "N2cv9SqrRowSumIsdEE", "N2cv9SqrRowSumIfdEE", "N2cv9SqrRowSumIddEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIihEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIthEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdhEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIitEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIisEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdsEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIifEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdfEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIidEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_12FilterEngineENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIddEENS_14DefaultDeleterIS3_EEEE", "void cvSmooth(const void*, void*, int, int, int, double, double)", "virtual void cv::BilateralFilter_32f_Invoker::operator()(const cv::Range&) const", "void cv::medianBlur_8u_O1(const cv::Mat&, cv::Mat&, int)", "void cv::bilateralFilter_32f(const cv::Mat&, cv::Mat&, int, double, double, int)", "*N2cv18fixedSmoothInvokerIhN12_GLOBAL__N_113ufixedpoint16EEE", "cv::Ptr<cv::BaseRowFilter> cv::getSqrRowSumFilter(int, int, int, int)", "void cv::bilateralFilter_8u(const cv::Mat&, cv::Mat&, int, double, double, int)", "virtual void cv::ColumnSum<int, short unsigned int>::operator()(const uchar**, uchar*, int, int, int)", "void cv::createGaussianKernels(T&, T&, int, cv::Size&, double, double) [with T = std::vector<{anonymous}::ufixedpoint16>; cv::Size = cv::Size_<int>]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = double; uchar = unsigned char]", "virtual void cv::ColumnSum<int, short int>::operator()(const uchar**, uchar*, int, int, int)", "=void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = float; uchar = unsigned char]", "cv::Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "void cv::blur(cv::InputArray, cv::OutputArray, cv::Size, cv::Point, int)", "void cv::medianBlur_8u_Om(const cv::Mat&, cv::Mat&, int)", "void cv::GaussianBlur(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "void cv::boxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = unsigned char; uchar = unsigned char]", "cv::Mat cv::getGaussianKernel(int, double, int)", "void cv::createGaussianKernels(T&, T&, int, cv::Size&, double, double) [with T = cv::Mat; cv::Size = cv::Size_<int>]", "void cv::sqrBoxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = double; uchar = unsigned char]", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "virtual void cv::ColumnSum<short unsigned int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short unsigned int; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short int; uchar = unsigned char]", "cv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "void cv::medianBlur(cv::InputArray, cv::OutputArray, int)", "virtual void cv::ColumnSum<int, float>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, int>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "N2cv9RowFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIhiNS_8RowNoVecEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_8RowNoVecEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_8RowNoVecEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhiNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIffNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIfdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIddNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "void cv::filter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, double, int)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = double; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "void cvFilter2D(const CvArr*, CvArr*, const CvMat*, CvPoint)", "void cv::preprocess2DKernel(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<unsigned char>&)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowNoVec]", "void cv::sepFilter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::InputArray, cv::Point, double, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = double; DT = double; VecOp = cv::RowNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = double; VecOp = cv::RowNoVec]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "N2cv16BaseColumnFilterE", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "N2cv13BaseRowFilterE", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "void cv::FilterEngine::init(const cv::Ptr<cv::BaseFilter>&, const cv::Ptr<cv::BaseRowFilter>&, const cv::Ptr<cv::BaseColumnFilter>&, int, int, int, int, int, const Scalar&)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = double; VecOp = cv::RowNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = float; VecOp = cv::RowNoVec]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = double; VecOp = cv::RowNoVec]", "cv::Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = float; VecOp = cv::RowNoVec]", "virtual int cv::FilterEngine::proceed(const uchar*, int, int, uchar*, int)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "int cv::getKernelType(cv::InputArray, cv::Point)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "virtual int cv::FilterEngine::start(const Size&, const Size&, const Point&)", "cv::Ptr<cv::FilterEngine> cv::createSeparableLinearFilter(int, int, cv::InputArray, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "N2cv10BaseFilterE", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = double; VecOp = cv::RowNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "virtual void cv::FilterEngine::apply(const cv::Mat&, cv::Mat&, const Size&, const Point&)", "cv::Ptr<cv::FilterEngine> cv::createLinearFilter(int, int, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "N2cv12FilterEngineE", "void cv::crossCorr(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Size, int, cv::Point, double, int)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cvMatchTemplate(const CvArr*, const CvArr*, CvArr*, int)", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "void cv::matchTemplateMask(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "void cv::common_matchTemplate(cv::Mat&, cv::Mat&, cv::Mat&, int, int)", "int cv::floodFill(cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect*, cv::Scalar, cv::Scalar, int)", "int cv::floodFill(cv::InputOutputArray, cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect*, cv::Scalar, cv::Scalar, int)", "N2cv8colormap8ColorMapE", "N2cv8colormap6AutumnE", "N2cv8colormap4BoneE", "N2cv8colormap3JetE", "N2cv8colormap6WinterE", "N2cv8colormap7RainbowE", "N2cv8colormap5OceanE", "N2cv8colormap6SummerE", "N2cv8colormap6SpringE", "N2cv8colormap4CoolE", "N2cv8colormap3HSVE", "N2cv8colormap4PinkE", "N2cv8colormap3HotE", "N2cv8colormap6ParulaE", "N2cv8colormap12UserColorMapE", "void cv::sortMatrixRowsByIndices(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::applyColorMap(cv::InputArray, cv::OutputArray, int)", "cv::Mat cv::argsort(cv::InputArray, bool)", "virtual void cv::colormap::UserColorMap::init(int)", "void cv::applyColorMap(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::colormap::ColorMap::operator()(cv::InputArray, cv::OutputArray) const", "cv::Mat cv::interp1(cv::InputArray, cv::InputArray, cv::InputArray)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void initGMMs(const cv::Mat&, const cv::Mat&, GMM&, GMM&)", "void checkMask(const cv::Mat&, const cv::Mat&)", "void GMM::calcInverseCovAndDeterm(int)", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = double]", "double GMM::operator()(int, cv::Vec3d) const", "GMM::GMM(cv::Mat&)", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = double]", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = double]", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "TWeight GCGraph<TWeight>::maxFlow() [with TWeight = double]", "void cvGetQuadrangleSubPix(const void*, void*, const CvMat*)", "void cvGetRectSubPix(const void*, void*, CvPoint2D32f)", "int cvSampleLine(const void*, CvPoint, CvPoint, void*, int)", "void cv::getRectSubPix(cv::InputArray, cv::Size, cv::Point2f, cv::OutputArray, int)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f&, float&)", "cv::RotatedRect cv::fitEllipseDirect(cv::InputArray)", "cv::Rect cv::maskBoundingRect(const cv::Mat&)", "double cvContourArea(const void*, CvSlice, int)", "CvRect cvBoundingRect(CvArr*, int)", "cv::RotatedRect cv::fitEllipseAMS(cv::InputArray)", "double cvArcLength(const void*, CvSlice, int)", "double icvContourSecArea(CvSeq*, CvSlice)", "cv::Rect cv::boundingRect(cv::InputArray)", "void icvMemCopy(double**, double**, double**, int*)", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "double cv::contourArea(cv::InputArray, bool)", "double cv::arcLength(cv::InputArray, bool)", "cv::Rect cv::pointSetBoundingRect(const cv::Mat&)", "int icvFindBasicVariables(float**, char**, CvNode1D*, CvNode1D*, int, int)", "bool icvNewSolution(CvEMDState*)", "float cvCalcEMD2(const CvArr*, const CvArr*, int, CvDistanceFunction, const CvArr*, CvArr*, float*, void*)", "float cv::EMD(cv::InputArray, cv::InputArray, int, cv::InputArray, float*, cv::OutputArray)", "int icvInitEMD(const float*, int, const float*, int, int, CvDistanceFunction, void*, const float*, int, CvEMDState*, float*, cv::AutoBuffer<char>&)", "N2cv15ThresholdRunnerE", "void cv::threshGeneric(cv::Size, const T*, size_t, T*, size_t, T, T, int) [with T = float; cv::Size = cv::Size_<int>; size_t = unsigned int]", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "void cv::threshGeneric(cv::Size, const T*, size_t, T*, size_t, T, T, int) [with T = short int; cv::Size = cv::Size_<int>; size_t = unsigned int]", "void cv::threshGeneric(cv::Size, const T*, size_t, T*, size_t, T, T, int) [with T = short unsigned int; cv::Size = cv::Size_<int>; size_t = unsigned int]", "void cv::threshGeneric(cv::Size, const T*, size_t, T*, size_t, T, T, int) [with T = double; cv::Size = cv::Size_<int>; size_t = unsigned int]", "double cvThreshold(const void*, void*, double, double, int)", "void cvAdaptiveThreshold(const void*, void*, double, int, int, int, double)", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "void cvCornerHarris(const CvArr*, CvArr*, int, int, double)", "void cv::cornerMinEigenVal(cv::InputArray, cv::OutputArray, int, int, int)", "void cv::cornerEigenValsVecs(const cv::Mat&, cv::Mat&, int, int, int, double, int)", "void cvCornerEigenValsAndVecs(const void*, void*, int, int)", "void cvPreCornerDetect(const void*, void*, int)", "void cv::cornerEigenValsAndVecs(cv::InputArray, cv::OutputArray, int, int, int)", "void cvCornerMinEigenVal(const CvArr*, CvArr*, int, int)", "void cv::cornerHarris(cv::InputArray, cv::OutputArray, int, int, double, int)", "N2cv6detail12PtrOwnerImplI12CvMemStorageNS_14DefaultDeleterIS2_EEEE", "CvSeq* cvFindNextContour(CvContourScanner)", "int icvTraceContour_32s(int*, int, int*, int)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvSeq*; CvSeq = CvSeq]", "CvSeq* cvEndFindContours(_CvContourScanner**)", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, int, int, cv::Point)", "void icvFetchContourEx_32s(int*, int, CvPoint, CvSeq*, int, CvRect*)", "int icvTraceContour(schar*, int, schar*, int)", "void cvSubstituteContour(CvContourScanner, CvSeq*)", "int icvFindContoursInInterval(const CvArr*, CvMemStorage*, CvSeq**, int)", "_CvContourScanner* cvStartFindContours_Impl(void*, CvMemStorage*, int, int, int, CvPoint, int)", "void icvFetchContour(schar*, int, CvPoint, CvSeq*, int)", "void icvFetchContourEx(schar*, int, CvPoint, CvSeq*, int, int, CvRect*)", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "CvPoint cvReadChainPoint(CvChainPtReader*)", "void cvStartReadChainPoints(CvChain*, CvChainPtReader*)", "int cvFindContours_Impl(void*, CvMemStorage*, CvSeq**, int, int, int, CvPoint, int)", "N2cv15resizeNNInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_19ResizeAreaFastNoVecIhhEEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_19ResizeAreaFastNoVecIttEEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_19ResizeAreaFastNoVecIssEEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<double, double, float>; VResize = cv::VResizeLanczos4<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::hal::resize(int, const uchar*, size_t, int, int, uchar*, size_t, int, int, double, double, int)", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = short int; SIMDVecOp = cv::ResizeAreaFastNoVec<short int, short int>]", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = unsigned char; SIMDVecOp = cv::ResizeAreaFastNoVec<unsigned char, unsigned char>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short unsigned int, float, float>; VResize = cv::VResizeLanczos4<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "*N12_GLOBAL__N_122resize_bitExactInvokerIaNS_12fixedpoint32ELi2EEE", "void cvResize(const CvArr*, CvArr*, int)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<float, float, float>; VResize = cv::VResizeLanczos4<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short int, float, float>; VResize = cv::VResizeLanczos4<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "*N12_GLOBAL__N_122resize_bitExactInvokerIsNS_12fixedpoint32ELi2EEE", "*N12_GLOBAL__N_122resize_bitExactInvokerItNS_13ufixedpoint32ELi2EEE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<double, double, float>; VResize = cv::VResizeCubic<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = short unsigned int; SIMDVecOp = cv::ResizeAreaFastNoVec<short unsigned int, short unsigned int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "*N12_GLOBAL__N_122resize_bitExactInvokerIhNS_13ufixedpoint16ELi2EEE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<unsigned char, int, short int>; VResize = cv::VResizeLanczos4<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<double, double, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "*N12_GLOBAL__N_122resize_bitExactInvokerIiNS_12fixedpoint64ELi2EEE", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "void cvBoxPoints(CvBox2D, CvPoint2D32f*)", "void cv::rotatingCalipers(const Point2f*, int, int, float*)", "void cv::boxPoints(cv::RotatedRect, cv::OutputArray)", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "void minEnclosingTriangle::createConvexHull(cv::InputArray, std::vector<cv::Point_<float> >&)", "void minEnclosingTriangle::updateSideB(const std::vector<cv::Point_<float> >&, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int&, cv::Point2f&, cv::Point2f&)", "cv::Point2f minEnclosingTriangle::findVertexCOnSideB(const std::vector<cv::Point_<float> >&, unsigned int, unsigned int, unsigned int, const Point2f&, const Point2f&, const Point2f&, const Point2f&)", "void minEnclosingTriangle::lineEquationDeterminedByPoints(const Point2f&, const Point2f&, double&, double&, double&)", "cv::Mat cv::getGaborKernel(cv::Size, double, double, double, double, double, int)", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "void cv::blendLinear(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "void cvMorphologyEx(const void*, void*, void*, IplConvKernel*, int, int)", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cvReleaseStructuringElement(IplConvKernel**)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Mat cv::getStructuringElement(int, cv::Size, cv::Point)", "void cvDilate(const CvArr*, CvArr*, IplConvKernel*, int)", "cv::Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cv::dilate(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "IplConvKernel* cvCreateStructuringElementEx(int, int, int, int, int, int*)", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Ptr<cv::FilterEngine> cv::createMorphologyFilter(int, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cv::erode(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "void cvErode(const CvArr*, CvArr*, IplConvKernel*, int)", "void cv::watershed(cv::InputArray, cv::InputOutputArray)", "void cv::pyrMeanShiftFiltering(cv::InputArray, cv::OutputArray, double, double, int, cv::TermCriteria)", "N2cv17Bayer2RGB_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv18Bayer2Gray_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "void cv::spatialGradient(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "void cv::circle(cv::InputOutputArray, cv::Point, int, const Scalar&, int, int, int)", "void cv::fillPoly(cv::Mat&, const Point**, const int*, int, const Scalar&, int, int, cv::Point)", "int cvClipLine(CvSize, CvPoint*, CvPoint*)", "int cvInitLineIterator(const CvArr*, CvPoint, CvPoint, CvLineIterator*, int, int)", "void cv::PolyLine(cv::Mat&, const Point2l*, int, bool, const void*, int, int, int)", "cv::LineIterator::LineIterator(const cv::Mat&, cv::Point, cv::Point, int, bool)", "void cv::ellipse2Poly(cv::Point2d, cv::Size2d, int, int, int, int, std::vector<cv::Point_<double> >&)", "void cv::rectangle(cv::Mat&, cv::Rect, const Scalar&, int, int, int)", "void cv::fillConvexPoly(cv::InputOutputArray, cv::InputArray, const Scalar&, int, int)", "void cv::line(cv::InputOutputArray, cv::Point, cv::Point, const Scalar&, int, int, int)", "void cv::polylines(cv::Mat&, const Point* const*, const int*, int, bool, const Scalar&, int, int, int)", "void cv::putText(cv::InputOutputArray, const cv::String&, cv::Point, int, double, cv::Scalar, int, int, bool)", "void cv::fillPoly(cv::InputOutputArray, cv::InputArrayOfArrays, const Scalar&, int, int, cv::Point)", "bool cv::clipLine(cv::Rect, cv::Point&, cv::Point&)", "void cv::polylines(cv::InputOutputArray, cv::InputArrayOfArrays, bool, const Scalar&, int, int, int)", "bool cv::clipLine(cv::Size2l, cv::Point2l&, cv::Point2l&)", "void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)", "void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)", "void cvInitFont(CvFont*, int, double, double, double, int, int)", "void cv::ellipse(cv::InputOutputArray, cv::Point, cv::Size, double, double, double, const Scalar&, int, int, int)", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const Scalar&, int, int, cv::InputArray, int, cv::Point)", "void cv::arrowedLine(cv::InputOutputArray, cv::Point, cv::Point, const Scalar&, int, int, int, double)", "void cv::fillConvexPoly(cv::Mat&, const Point*, int, const Scalar&, int, int)", "void cv::ellipse(cv::InputOutputArray, const cv::RotatedRect&, const Scalar&, int, int)", "void cvDrawContours(void*, CvSeq*, CvScalar, CvScalar, int, int, int, CvPoint)", "N2cv5CLAHEE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEENS_14DefaultDeleterIS4_EEEE", "*N12_GLOBAL__N_110CLAHE_ImplE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_110CLAHE_ImplENS_14DefaultDeleterIS3_EEEE", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEENS_14DefaultDeleterIS4_EEEE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEE", "virtual void {anonymous}::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEE", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "N2cv6detail12PtrOwnerImplI5CvMatNS_14DefaultDeleterIS2_EEEE", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const Scalar&)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapNoVec; AT = short int; cv::Scalar = cv::Scalar_<double>]", "CvMat* cvGetPerspectiveTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "cv::Mat cv::getPerspectiveTransform(cv::InputArray, cv::InputArray)", "cv::Mat cv::getPerspectiveTransform(const Point2f*, const Point2f*)", "void cvWarpAffine(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cvLinearPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, float>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::Mat::Mat(int, int, int, void*, size_t)", "const void* cv::initInterTab2D(int, bool)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<double, double>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::Mat cv::getRotationMatrix2D(cv::Point2f, double, double)", "cv::Mat cv::getAffineTransform(cv::InputArray, cv::InputArray)", "void cv::linearPolar(cv::InputArray, cv::OutputArray, cv::Point2f, double, int)", "CvMat* cvGetAffineTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "CvMat* cv2DRotationMatrix(CvPoint2D32f, double, double, CvMat*)", "void cv::initInterTab1D(int, float*, int)", "void cv::invertAffineTransform(cv::InputArray, cv::OutputArray)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "void cvLogPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "void cvRemap(const CvArr*, CvArr*, const CvArr*, const CvArr*, int, CvScalar)", "void cv::logPolar(cv::InputArray, cv::OutputArray, cv::Point2f, double, int)", "void cvWarpPerspective(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::HuMoments(const cv::Moments&, cv::OutputArray)", "cv::Moments cv::contourMoments(const cv::Mat&)", "cv::Moments cv::moments(cv::InputArray, bool)", "double cvGetSpatialMoment(CvMoments*, int, int)", "void cvMoments(const CvArr*, CvMoments*, int)", "double cvGetCentralMoment(CvMoments*, int, int)", "void cv::HuMoments(const cv::Moments&, double*)", "void cvGetHuMoments(CvMoments*, CvHuMoments*)", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "void cv::trueDistTrans(const cv::Mat&, cv::Mat&)", "void cv::getDistanceTransformMask(int, float*)", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, int, int, int)", "void cv::distanceTransform_L1_8U(cv::InputArray, cv::OutputArray)", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int, int)", "void cv::distanceATS_L1_8u(const cv::Mat&, cv::Mat&)", "N2cv2ml8KNearestE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "N2cv2ml14BruteForceImplE", "N2cv2ml10KDTreeImplE", "N2cv2ml12KNearestImplE", "N2cv6detail12PtrOwnerImplINS_2ml14BruteForceImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10KDTreeImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml12KNearestImplENS_14DefaultDeleterIS3_EEEE", "bool cv::ml::Impl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "virtual float cv::ml::KDTreeImpl::findNearest(cv::InputArray, int, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual float cv::ml::BruteForceImpl::findNearest(cv::InputArray, int, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "N2cv2ml2EME", "N2cv2ml6EMImplE", "N2cv6detail12PtrOwnerImplINS_2ml6EMImplENS_14DefaultDeleterIS3_EEEE", "virtual cv::Vec2d cv::ml::EMImpl::predict2(cv::InputArray, cv::OutputArray) const", "virtual void cv::ml::EMImpl::setCovarianceMatrixType(int)", "static void cv::ml::EMImpl::checkTrainData(int, const cv::Mat&, int, int, const cv::Mat*, const cv::Mat*, const std::vector<cv::Mat>*, const cv::Mat*)", "void cv::ml::EMImpl::computeLogWeightDivDet()", "void cv::ml::EMImpl::clusterTrainSamples()", "void cv::ml::EMImpl::read_params(const cv::FileNode&)", "cv::Vec2d cv::ml::EMImpl::computeProbabilities(const cv::Mat&, cv::Mat*, int) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::ml::EMImpl::decomposeCovs()", "virtual void cv::ml::EMImpl::setClustersNumber(int)", "bool cv::ml::EMImpl::doTrain(int, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv2ml18LogisticRegressionE", "N2cv2ml43LogisticRegressionImpl_ComputeDradient_ImplE", "N2cv6detail12PtrOwnerImplINS_2ml22LogisticRegressionImplENS_14DefaultDeleterIS3_EEEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "virtual bool cv::ml::LogisticRegressionImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::Mat cv::ml::LogisticRegressionImpl::batch_gradient_descent(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "void cv::Mat::push_back(const _Tp&) [with _Tp = int]", "cv::Mat cv::ml::LogisticRegressionImpl::remap_labels(const cv::Mat&, const std::map<int, int>&) const", "virtual void cv::ml::LogisticRegressionImpl::write(cv::FileStorage&) const", "N2cv2ml22LogisticRegressionImplE", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::LogisticRegression]", "double cv::ml::LogisticRegressionImpl::compute_cost(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "cv::Mat cv::ml::LogisticRegressionImpl::calc_sigmoid(const cv::Mat&) const", "virtual void cv::ml::LogisticRegressionImpl::read(const cv::FileNode&)", "cv::Mat cv::ml::LogisticRegressionImpl::mini_batch_gradient_descent(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "void cv::ml::LogisticRegressionImpl::compute_gradient(const cv::Mat&, const cv::Mat&, const cv::Mat&, double, cv::Mat&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual float cv::ml::LogisticRegressionImpl::predict(cv::InputArray, cv::OutputArray, int) const", "N2cv2ml3SVM6KernelE", "N2cv2ml3SVME", "N2cv2ml13SVMKernelImplE", "N2cv2ml7SVMImpl13TrainAutoBodyE", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImplE", "N2cv6detail12PtrOwnerImplINS_2ml9ParamGridENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml13SVMKernelImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml7SVMImplENS_14DefaultDeleterIS3_EEEE", "bool cv::ml::SVM::trainAuto(cv::InputArray, int, cv::InputArray, int, cv::Ptr<cv::ml::ParamGrid>, cv::Ptr<cv::ml::ParamGrid>, cv::Ptr<cv::ml::ParamGrid>, cv::Ptr<cv::ml::ParamGrid>, cv::Ptr<cv::ml::ParamGrid>, cv::Ptr<cv::ml::ParamGrid>, bool)", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::ml::SVMImpl::read(const cv::FileNode&)", "virtual float cv::ml::SVMImpl::predict(cv::InputArray, cv::OutputArray, int) const", "void cv::ml::SVMImpl::checkParams()", "static bool cv::ml::SVMImpl::Solver::solve_nu_svr(const cv::Mat&, const std::vector<float>&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, std::vector<double, std::allocator<double> >&, cv::ml::SVMImpl::Solver::SolutionInfo&, cv::TermCriteria)", "virtual void cv::ml::SVMImpl::PredictBody::operator()(const cv::Range&) const", "virtual double cv::ml::SVMImpl::getDecisionFunction(int, cv::OutputArray, cv::OutputArray) const", "virtual bool cv::ml::SVMImpl::trainAuto(const cv::Ptr<cv::ml::TrainData>&, int, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, bool)", "virtual bool cv::ml::SVMImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "static bool cv::ml::SVMImpl::Solver::solve_eps_svr(const cv::Mat&, const std::vector<float>&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, std::vector<double, std::allocator<double> >&, cv::ml::SVMImpl::Solver::SolutionInfo&, cv::TermCriteria)", "cv::ml::SVMImpl::Solver::Solver(const cv::Mat&, const std::vector<signed char>&, std::vector<double, std::allocator<double> >&, const std::vector<double, std::allocator<double> >&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, cv::ml::SVMImpl::Solver::GetRow, cv::ml::SVMImpl::Solver::SelectWorkingSet, cv::ml::SVMImpl::Solver::CalcRho, cv::TermCriteria)", "void cv::ml::sortSamplesByClasses(const cv::Mat&, const cv::Mat&, std::vector<int>&, std::vector<int>&)", "void cv::ml::SVMImpl::read_params(const cv::FileNode&)", "void cv::ml::checkParamGrid(const cv::ml::ParamGrid&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::ml::SVMKernelImpl::calc(int, int, const float*, const float*, cv::ml::Qfloat*)", "cv::Mat cv::ml::SVM::getUncompressedSupportVectors() const", "virtual void cv::ml::SVMImpl::write(cv::FileStorage&) const", "bool cv::ml::SVMImpl::do_train(const cv::Mat&, const cv::Mat&)", "N2cv2ml6DTreesE", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "N2cv2ml10RTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10RTreesImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::ml::RTreesImpl::getVotes_(cv::InputArray, cv::OutputArray, int) const", "virtual void cv::ml::DTreesImplForRTrees::write(cv::FileStorage&) const", "virtual bool cv::ml::DTreesImplForRTrees::train(const cv::Ptr<cv::ml::TrainData>&, int)", "static cv::Ptr<cv::ml::RTrees> cv::ml::RTrees::create()", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "virtual void cv::ml::DTreesImplForRTrees::clear()", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "static cv::Ptr<cv::ml::RTrees> cv::ml::RTrees::load(const cv::String&, const cv::String&)", "cv::ml::DTreesImplForRTrees::DTreesImplForRTrees()", "void cv::ml::TreeParams::setMaxCategories(int)", "virtual void cv::ml::DTreesImplForRTrees::read(const cv::FileNode&)", "virtual const std::vector<int>& cv::ml::DTreesImplForRTrees::getActiveVars()", "virtual void cv::ml::DTreesImplForRTrees::readParams(const cv::FileNode&)", "void cv::ml::TreeParams::setMaxDepth(int)", "virtual void cv::ml::RTreesImpl::write(cv::FileStorage&) const", "virtual void cv::ml::DTreesImplForRTrees::endTraining()", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::ml::DTreesImplForRTrees::getVotes(cv::InputArray, cv::OutputArray, int) const", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::RTrees]", "virtual void cv::ml::RTreesImpl::read(const cv::FileNode&)", "void cv::ml::RTrees::getVotes(cv::InputArray, cv::OutputArray, int) const", "virtual void cv::ml::DTreesImplForRTrees::startTraining(const cv::Ptr<cv::ml::TrainData>&, int)", "virtual float cv::ml::RTreesImpl::predict(cv::InputArray, cv::OutputArray, int) const", "virtual void cv::ml::DTreesImplForRTrees::writeTrainingParams(cv::FileStorage&) const", "virtual bool cv::ml::RTreesImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::ml::RTreeParams::RTreeParams()", "void cv::ml::TreeParams::setCVFolds(int)", "N2cv2ml13TrainDataImplE", "N2cv6detail12PtrOwnerImplINS_2ml13TrainDataImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::ml::TrainDataImpl::getSample(cv::InputArray, int, float*) const", "virtual void cv::ml::TrainDataImpl::setTrainTestSplit(int, bool)", "N2cv2ml9TrainDataE", "void cv::ml::TrainDataImpl::setVarTypes(const cv::String&, int, std::vector<unsigned char>&) const", "void cv::ml::TrainData::getNames(std::vector<cv::String>&) const", "virtual void cv::ml::TrainDataImpl::setTrainTestSplitRatio(double, bool)", "static cv::Mat cv::ml::TrainData::getSubVector(const cv::Mat&, const cv::Mat&)", "void cv::ml::TrainDataImpl::setData(cv::InputArray, int, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "static cv::Ptr<cv::ml::TrainData> cv::ml::TrainData::loadFromCSV(const cv::String&, int, int, int, const cv::String&, char, char)", "bool cv::ml::TrainDataImpl::loadCSV(const cv::String&, int, int, int, const cv::String&, char, char)", "virtual void cv::ml::TrainDataImpl::shuffleTrainTest()", "cv::Mat cv::ml::TrainData::getVarSymbolFlags() const", "virtual int cv::ml::TrainDataImpl::getCatCount(int) const", "static cv::Ptr<cv::ml::TrainData> cv::ml::TrainData::create(cv::InputArray, int, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "virtual void cv::ml::TrainDataImpl::getValues(int, cv::InputArray, float*) const", "virtual void cv::ml::TrainDataImpl::getNormCatValues(int, cv::InputArray, int*) const", "void cv::ml::TrainDataImpl::preprocessCategorical(const cv::Mat&, cv::Mat*, std::vector<int>&, std::vector<int>*, std::vector<int>&)", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImpl8WorkDataENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImplENS_14DefaultDeleterIS3_EEEE", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::DTrees]", "virtual int cv::ml::DTreesImpl::calcDir(int, const std::vector<int>&, std::vector<int>&, std::vector<int>&)", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "virtual void cv::ml::DTreesImpl::read(const cv::FileNode&)", "void cv::internal::VecReaderProxy<_Tp, 1>::operator()(std::vector<_Tp>&, size_t) const [with _Tp = cv::Vec<int, 2>; size_t = unsigned int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "virtual float cv::ml::DTreesImpl::predictTrees(const cv::Range&, const cv::Mat&, int) const", "virtual int cv::ml::DTreesImpl::readSplit(const cv::FileNode&)", "void cv::ml::TreeParams::setMaxCategories(int)", "virtual int cv::ml::DTreesImpl::addNodeAndTrySplit(int, const std::vector<int>&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "N2cv2ml10DTreesImplE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "virtual void cv::ml::DTreesImpl::initCompVarIdx()", "void cv::ml::TreeParams::setMaxDepth(int)", "virtual int cv::ml::DTreesImpl::addTree(const std::vector<int>&)", "virtual cv::ml::DTreesImpl::WSplit cv::ml::DTreesImpl::findSplitCatClass(int, const std::vector<int>&, double, int*)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<cv::Vec<int, 2> >]", "virtual int cv::ml::DTreesImpl::findBestSplit(const std::vector<int>&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<unsigned char>]", "virtual float cv::ml::DTreesImpl::predict(cv::InputArray, cv::OutputArray, int) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<int>]", "void cv::ml::TreeParams::setCVFolds(int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = bool]", "virtual void cv::ml::DTreesImpl::startTraining(const cv::Ptr<cv::ml::TrainData>&, int)", "float cv::ml::medianPartition(size_t*, int, int, const float*)", "void cv::ml::KDTree::getPoints(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "int cv::ml::KDTree::findNearest(cv::InputArray, int, int, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "void cv::ml::KDTree::findOrthoRange(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "void cv::ml::KDTree::build(cv::InputArray, cv::InputArray, bool)", "const float* cv::ml::KDTree::getPoint(int, int*) const", "N2cv2ml6SVMSGDE", "N2cv6detail12PtrOwnerImplINS_2ml10SVMSGDImplENS_14DefaultDeleterIS3_EEEE", "virtual bool cv::ml::SVMSGDImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "virtual void cv::ml::SVMSGDImpl::setOptimalParameters(int, int)", "N2cv2ml10SVMSGDImplE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "virtual void cv::ml::SVMSGDImpl::write(cv::FileStorage&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::SVMSGD]", "static void cv::ml::SVMSGDImpl::normalizeSamples(cv::Mat&, cv::Mat&, float&)", "void cv::ml::SVMSGDImpl::readParams(const cv::FileNode&)", "virtual float cv::ml::SVMSGDImpl::predict(cv::InputArray, cv::OutputArray, int) const", "float cv::ml::SVMSGDImpl::calcShift(cv::InputArray, cv::InputArray) const", "N2cv2ml7ANN_MLPE", "N2cv2ml14ANN_MLP_ANNEALE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "N2cv2ml11ANN_MLPImplE", "N2cv6detail12PtrOwnerImplINS_2ml11ANN_MLPImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::ml::ANN_MLPImpl::setLayerSizes(cv::InputArray)", "virtual cv::Mat cv::ml::ANN_MLPImpl::getWeights(int) const", "void cv::ml::ANN_MLPImpl::read_params(const cv::FileNode&)", "double cv::ml::ANN_MLP::getAnnealCoolingRatio() const", "void cv::ml::ANN_MLPImpl::prepare_to_train(const cv::Mat&, const cv::Mat&, cv::Mat&, int)", "virtual float cv::ml::ANN_MLPImpl::predict(cv::InputArray, cv::OutputArray, int) const", "void cv::ml::ANN_MLP::setAnnealCoolingRatio(double)", "static cv::Ptr<cv::ml::ANN_MLP> cv::ml::ANN_MLP::load(const cv::String&)", "double cv::ml::ANN_MLP::getAnnealFinalT() const", "virtual void cv::ml::ANN_MLPImpl::setActivationFunction(int, double, double)", "void cv::ml::ANN_MLP::setAnnealItePerStep(int)", "void cv::ml::ANN_MLPImpl::calc_activ_func(cv::Mat&, const cv::Mat&) const", "double cv::ml::ANN_MLP::getAnnealInitialT() const", "int cv::ml::simulatedAnnealingSolver(SimulatedAnnealingSolverSystem&, double, double, double, size_t, double*, cv::RNG&) [with SimulatedAnnealingSolverSystem = cv::ml::SimulatedAnnealingANN_MLP; size_t = unsigned int]", "void cv::ml::ANN_MLP::setAnnealFinalT(double)", "void cv::ml::ANN_MLP::setAnnealInitialT(double)", "int cv::ml::ANN_MLPImpl::train_rprop(const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::TermCriteria)", "int cv::ml::ANN_MLP::getAnnealItePerStep() const", "void cv::ml::ANN_MLPImpl::calc_output_scale(const cv::Mat&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "void cv::ml::ANN_MLPImpl::write_params(cv::FileStorage&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<int>]", "void cv::ml::ANN_MLP::setAnnealEnergyRNG(const cv::RNG&)", "N2cv2ml5BoostE", "N2cv2ml18DTreesImplForBoostE", "N2cv2ml9BoostImplE", "N2cv6detail12PtrOwnerImplINS_2ml9BoostImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::ml::DTreesImplForBoost::write(cv::FileStorage&) const", "void cv::ml::TreeParams::setCVFolds(int)", "void cv::ml::DTreesImplForBoost::updateWeightsAndTrim(int, std::vector<int>&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::ml::DTreesImplForBoost::read(const cv::FileNode&)", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::Boost]", "void cv::ml::TreeParams::setMaxDepth(int)", "void cv::ml::TreeParams::setMaxCategories(int)", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "void cv::ml::createConcentricSpheresTestSet(int, int, int, cv::OutputArray, cv::OutputArray)", "N2cv2ml21NormalBayesClassifierE", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv6detail12PtrOwnerImplINS_2ml25NormalBayesClassifierImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual float cv::ml::NormalBayesClassifierImpl::predictProb(cv::InputArray, cv::OutputArray, cv::OutputArray, int) const", "static cv::Ptr<T> cv::Algorithm::load(const cv::String&, const cv::String&) [with _Tp = cv::ml::NormalBayesClassifier]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual bool cv::ml::NormalBayesClassifierImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "virtual void cv::ml::NormalBayesClassifierImpl::read(const cv::FileNode&)", "N2cv2ml17ParallelCalcErrorE", "cv::ml::ParamGrid::ParamGrid(double, double, double)", "virtual void cv::ml::ParallelCalcError::operator()(const cv::Range&) const", "virtual bool cv::ml::StatModel::train(const cv::Ptr<cv::ml::TrainData>&, int)", "virtual bool cv::ml::StatModel::train(cv::InputArray, int, cv::InputArray)", "N2cv2ml9StatModelE", "void cv::ml::randMVNormal(cv::InputArray, cv::InputArray, int, cv::OutputArray)", "void cv::ml::Cholesky(const cv::Mat&, cv::Mat&)", "virtual float cv::ml::StatModel::calcError(const cv::Ptr<cv::ml::TrainData>&, bool, cv::OutputArray) const", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "const float* cv::HOGCache::getBlock(cv::Point, float*)", "size_t cv::HOGDescriptor::getDescriptorSize() const", "virtual void cv::HOGConfInvoker::operator()(const cv::Range&) const", "virtual void cv::HOGDescriptor::setSVMDetector(cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = bool]", "N2cv8HOGCacheE", "virtual void cv::HOGDescriptor::compute(cv::InputArray, std::vector<float>&, cv::Size, cv::Size, const std::vector<cv::Point_<int> >&) const", "void cv::HOGDescriptor::groupRectangles(std::vector<cv::Rect_<int> >&, std::vector<double, std::allocator<double> >&, int, double) const", "virtual void cv::HOGDescriptor::detectMultiScaleROI(const cv::Mat&, std::vector<cv::Rect_<int> >&, std::vector<cv::DetectionROI>&, double, int) const", "cv::Mat::Mat(int, int, int, void*, size_t)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "virtual bool cv::HOGDescriptor::read(cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Size_<int>]", "N2cv13HOGDescriptorE", "virtual void cv::HOGDescriptor::detectROI(const cv::Mat&, const std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<double, std::allocator<double> >&, double, cv::Size, cv::Size) const", "virtual void cv::HOGDescriptor::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, double, cv::Size, cv::Size, double, double, bool) const", "virtual void cv::HOGDescriptor::detect(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<double, std::allocator<double> >&, double, cv::Size, cv::Size, const std::vector<cv::Point_<int> >&) const", "int cv::partition(const std::vector<_Tp>&, std::vector<int>&, _EqPredicate) [with _Tp = cv::Rect_<int>; _EqPredicate = cv::SimilarRects]", "virtual void cv::HOGDescriptor::computeGradient(const cv::Mat&, cv::Mat&, cv::Mat&, cv::Size, cv::Size) const", "readALTModel", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::HOGDescriptor::detect(const cv::Mat&, std::vector<cv::Point_<int> >&, double, cv::Size, cv::Size, const std::vector<cv::Point_<int> >&) const", "N2cv6detail12PtrOwnerImplINS_21DetectionBasedTracker21SeparateDetectionWorkENS_14DefaultDeleterIS3_EEEE", "N2cv21DetectionBasedTrackerE", "cv::DetectionBasedTracker::SeparateDetectionWork::SeparateDetectionWork(cv::DetectionBasedTracker&, cv::Ptr<cv::DetectionBasedTracker::IDetector>, const cv::DetectionBasedTracker::Parameters&)", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "void* cv::workcycleObjectDetectorFunction(void*)", "cv::DetectionBasedTracker::DetectionBasedTracker(cv::Ptr<cv::DetectionBasedTracker::IDetector>, cv::Ptr<cv::DetectionBasedTracker::IDetector>, const cv::DetectionBasedTracker::Parameters&)", "virtual void cv::DetectionBasedTracker::process(const cv::Mat&)", "void cv::DetectionBasedTracker::updateTrackedObjects(const std::vector<cv::Rect_<int> >&)", "void cv::DetectionBasedTracker::SeparateDetectionWork::workcycleObjectDetector()", "N2cv24CascadeClassifierInvokerE", "N2cv6detail12PtrOwnerImplINS_13HaarEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12LBPEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_16FeatureEvaluator9ScaleDataESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplI23CvHaarClassifierCascadeNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_21CascadeClassifierImplENS_14DefaultDeleterIS2_EEEE", "int cv::predictCategorical(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::LBPEvaluator]", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, cv::Size, cv::Size, bool)", "void cv::CascadeClassifier::setMaskGenerator(const cv::Ptr<cv::BaseCascadeClassifier::MaskGenerator>&)", "void* cv::CascadeClassifier::getOldCascade()", "int cv::predictCategoricalStump(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::LBPEvaluator]", "void cv::groupRectangles(std::vector<cv::Rect_<int> >&, int, double)", "virtual bool cv::HaarEvaluator::read(const cv::FileNode&, cv::Size)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, double, int, int, cv::Size, cv::Size)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvAvgComp; CvSeq = CvSeq]", "void cv::groupRectangles(std::vector<cv::Rect_<int> >&, std::vector<int>&, int, double)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::groupRectangles_meanshift(std::vector<cv::Rect_<int> >&, std::vector<double, std::allocator<double> >&, std::vector<double, std::allocator<double> >&, double, cv::Size)", "void cv::clipObjects(cv::Size, std::vector<cv::Rect_<int> >&, std::vector<int>*, std::vector<double, std::allocator<double> >*)", "N2cv21BaseCascadeClassifierE", "void cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, cv::Size, cv::Size, bool)", "N2cv21CascadeClassifierImplE", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, double, int, int, cv::Size, cv::Size)", "bool cv::CascadeClassifierImpl::Data::read(const cv::FileNode&)", "N2cv12LBPEvaluatorE", "int cv::CascadeClassifier::getFeatureType() const", "virtual void cv::CascadeClassifierInvoker::operator()(const cv::Range&) const", "int cv::predictOrdered(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::HaarEvaluator]", "void cv::groupRectangles(std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, int, double)", "void cv::groupRectangles(std::vector<cv::Rect_<int> >&, int, double, std::vector<int>*, std::vector<double, std::allocator<double> >*)", "virtual bool cv::LBPEvaluator::setWindow(cv::Point, int)", "bool cv::CascadeClassifier::isOldFormatCascade() const", "N2cv13HaarEvaluatorE", "int cv::predictOrderedStump(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::HaarEvaluator]", "virtual void cv::HaarEvaluator::computeOptFeatures()", "N2cv16FeatureEvaluatorE", "virtual void cv::HaarEvaluator::computeChannels(int, cv::InputArray)", "const cv::FeatureEvaluator::ScaleData& cv::FeatureEvaluator::getScaleData(int) const", "cv::Size cv::CascadeClassifier::getOriginalWindowSize() const", "virtual bool cv::FeatureEvaluator::setImage(cv::InputArray, const std::vector<float>&)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, double, int, int, cv::Size, cv::Size)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, cv::Size, cv::Size, bool)", "cv::Ptr<cv::BaseCascadeClassifier::MaskGenerator> cv::CascadeClassifier::getMaskGenerator()", "int cv::CascadeClassifierImpl::runAt(cv::Ptr<cv::FeatureEvaluator>&, cv::Point, int, double&)", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, double, int, int, cv::Size, cv::Size)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv36HaarDetectObjects_ScaleImage_InvokerE", "N2cv38HaarDetectObjects_ScaleCascade_InvokerE", "virtual void cv::HaarDetectObjects_ScaleImage_Invoker::operator()(const cv::Range&) const", "void* icvReadHaarClassifier(CvFileStorage*, CvFileNode*)", "CvHaarClassifierCascade* icvCreateHaarClassifierCascade(int)", "int cvRunHaarClassifierCascade(const CvHaarClassifierCascade*, CvPoint, int)", "CvHaarClassifierCascade* cvLoadHaarClassifierCascade(const char*, CvSize)", "int cvRunHaarClassifierCascadeSum(const CvHaarClassifierCascade*, CvPoint, double&, int)", "void cvSetImagesForHaarClassifierCascade(CvHaarClassifierCascade*, const CvArr*, const CvArr*, const CvArr*, double)", "CvHaarClassifierCascade* icvLoadCascadeCART(const char**, int, CvSize)", "CvSeq* cvHaarDetectObjectsForROC(const CvArr*, CvHaarClassifierCascade*, CvMemStorage*, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, CvSize, CvSize, bool)", "virtual void cv::HaarDetectObjects_ScaleCascade_Invoker::operator()(const cv::Range&) const", "CvHidHaarClassifierCascade* icvCreateHidHaarClassifierCascade(CvHaarClassifierCascade*)", "void cv::textureFlattening(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, int)", "void cv::seamlessClone(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point, cv::OutputArray, int)", "void cv::colorChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, float)", "void cv::illuminationChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float)", "27FastNlMeansDenoisingInvokerIhij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerIhij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerItxy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhxy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 2>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, const std::vector<float>&, int, int, int)", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistSquared]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 2>]", "void fastNlMeansDenoisingMultiCheckPreconditions(const std::vector<cv::Mat>&, int, int, int, int)", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, const std::vector<float>&, int, int, int)", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "void cv::fastNlMeansDenoisingColored(cv::InputArray, cv::OutputArray, float, float, int, int)", "void cv::fastNlMeansDenoisingColoredMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, float, int, int)", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistAbs]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, float, int, int)", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, int, int)", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 3>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistAbs]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistSquared]", "void cv::decolor(cv::InputArray, cv::OutputArray, cv::OutputArray)", "N2cv6detail12PtrOwnerImplI14_IplConvKernelNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI20CvPriorityQueueFloatNS_14DefaultDeleterIS2_EEEE", "void cvInpaint(const CvArr*, const CvArr*, CvArr*, double, int)", "void cv::inpaint(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "N2cv14MergeExposuresE", "N2cv12MergeDebevecE", "N2cv12MergeMertensE", "N2cv14MergeRobertsonE", "N2cv16MergeDebevecImplE", "N2cv16MergeMertensImplE", "N2cv18MergeRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_16MergeDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16MergeMertensImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18MergeRobertsonImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArray)", "virtual void cv::MergeMertensImpl::read(const cv::FileNode&)", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::InputArray, cv::InputArray)", "N2cv7TonemapE", "N2cv12TonemapDragoE", "N2cv13TonemapDurandE", "N2cv15TonemapReinhardE", "N2cv14TonemapMantiukE", "N2cv11TonemapImplE", "N2cv16TonemapDragoImplE", "N2cv17TonemapDurandImplE", "N2cv19TonemapReinhardImplE", "N2cv18TonemapMantiukImplE", "N2cv6detail12PtrOwnerImplINS_11TonemapImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16TonemapDragoImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17TonemapDurandImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19TonemapReinhardImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18TonemapMantiukImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::TonemapDurandImpl::read(const cv::FileNode&)", "virtual void cv::TonemapDragoImpl::read(const cv::FileNode&)", "virtual void cv::TonemapImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapReinhardImpl::read(const cv::FileNode&)", "virtual void cv::TonemapReinhardImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapMantiukImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::TonemapDragoImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapMantiukImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapImpl::read(const cv::FileNode&)", "virtual void cv::TonemapDurandImpl::process(cv::InputArray, cv::OutputArray)", "N2cv14AlignExposuresE", "N2cv8AlignMTBE", "N2cv12AlignMTBImplE", "N2cv6detail12PtrOwnerImplINS_12AlignMTBImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::AlignMTBImpl::read(const cv::FileNode&)", "virtual void cv::AlignMTBImpl::computeBitmaps(cv::InputArray, cv::OutputArray, cv::OutputArray)", "virtual cv::Point cv::AlignMTBImpl::calculateShift(cv::InputArray, cv::InputArray)", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<cv::Mat>&, cv::InputArray, cv::InputArray)", "virtual void cv::AlignMTBImpl::shiftMat(cv::InputArray, cv::OutputArray, cv::Point)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<cv::Mat>&)", "void cv::Cloning::illuminationChange(cv::Mat&, cv::Mat&, cv::Mat&, cv::Mat&, float, float)", "void cv::denoise_TVL1(const std::vector<cv::Mat>&, cv::Mat&, double, int)", "void throw_no_cuda()", "void cv::detailEnhance(cv::InputArray, cv::OutputArray, float, float)", "void cv::pencilSketch(cv::InputArray, cv::OutputArray, cv::OutputArray, float, float, float)", "void cv::stylization(cv::InputArray, cv::OutputArray, float, float)", "void cv::edgePreservingFilter(cv::InputArray, cv::OutputArray, int, float, float)", "N2cv12CalibrateCRFE", "N2cv16CalibrateDebevecE", "N2cv18CalibrateRobertsonE", "N2cv20CalibrateDebevecImplE", "N2cv22CalibrateRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_20CalibrateDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22CalibrateRobertsonImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::CalibrateRobertsonImpl::read(const cv::FileNode&)", "virtual void cv::CalibrateDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::CalibrateRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "virtual void cv::CalibrateDebevecImpl::read(const cv::FileNode&)", "void cv::checkImageDimensions(const std::vector<cv::Mat>&)", "N2cv16DenseOpticalFlowE", "N2cv20FarnebackOpticalFlowE", "*N2cv12_GLOBAL__N_124FarnebackOpticalFlowImplE", "void cv::FarnebackPolyExp(const cv::Mat&, cv::Mat&, int, double)", "*N2cv6detail12PtrOwnerImplINS_12_GLOBAL__N_124FarnebackOpticalFlowImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::{anonymous}::FarnebackOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputOutputArray)", "void cv::calcOpticalFlowFarneback(cv::InputArray, cv::InputArray, cv::InputOutputArray, double, int, int, int, int, double, int)", "int cv::meanShift(cv::InputArray, cv::Rect&, cv::TermCriteria)", "N2cv17SparseOpticalFlowE", "N2cv22SparsePyrLKOpticalFlowE", "cv::Mat::Mat(int, int, int, void*, size_t)", "*N2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplE", "N2cv6detail16LKTrackerInvokerE", "void {anonymous}::calcSharrDeriv(const cv::Mat&, cv::Mat&)", "virtual void cv::detail::LKTrackerInvoker::operator()(const cv::Range&) const", "*N2cv6detail12PtrOwnerImplINS_12_GLOBAL__N_126SparsePyrLKOpticalFlowImplENS_14DefaultDeleterIS3_EEEE", "int cv::buildOpticalFlowPyramid(cv::InputArray, cv::OutputArrayOfArrays, cv::Size, int, bool, int, int, bool)", "virtual void cv::{anonymous}::SparsePyrLKOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray)", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "void cv::getRTMatrix(const Point2f*, const Point2f*, int, cv::Mat&, bool)", "cv::Mat cv::estimateRigidTransform(cv::InputArray, cv::InputArray, bool)", "N2cv20BackgroundSubtractorE", "N2cv23BackgroundSubtractorKNNE", "N2cv10KNNInvokerE", "N2cv6detail12PtrOwnerImplINS_27BackgroundSubtractorKNNImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::BackgroundSubtractorKNNImpl::getBackgroundImage(cv::OutputArray) const", "virtual void cv::BackgroundSubtractorKNNImpl::apply(cv::InputArray, cv::OutputArray, double)", "virtual void cv::BackgroundSubtractorKNNImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv27BackgroundSubtractorKNNImplE", "void project_onto_jacobian_ECC(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_translation_ECC(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void update_warping_matrix_ECC(cv::Mat&, const cv::Mat&, int)", "void image_jacobian_euclidean_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_affine_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "double cv::findTransformECC(cv::InputArray, cv::InputArray, cv::InputOutputArray, int, cv::TermCriteria, cv::InputArray)", "void image_jacobian_homo_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "N2cv24BackgroundSubtractorMOG2E", "N2cv11MOG2InvokerE", "N2cv6detail12PtrOwnerImplINS_28BackgroundSubtractorMOG2ImplENS_14DefaultDeleterIS2_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::BackgroundSubtractorMOG2Impl::read(const cv::FileNode&)", "virtual void cv::BackgroundSubtractorMOG2Impl::apply(cv::InputArray, cv::OutputArray, double)", "void cv::BackgroundSubtractorMOG2Impl::initialize(cv::Size, int)", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [with T = unsigned char; int CN = 1; cv::OutputArray = const cv::_OutputArray&]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [with T = float; int CN = 1; cv::OutputArray = const cv::_OutputArray&]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "N2cv28BackgroundSubtractorMOG2ImplE", "virtual void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage(cv::OutputArray) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [with T = unsigned char; int CN = 3; cv::OutputArray = const cv::_OutputArray&]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [with T = float; int CN = 3; cv::OutputArray = const cv::_OutputArray&]", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cvCalcOpticalFlowFarneback(const CvArr*, const CvArr*, CvArr*, double, int, int, int, int, double, int)", "CvKalman* cvCreateKalman(int, int, int)", "const CvMat* cvKalmanPredict(CvKalman*, const CvMat*)", "void cvReleaseKalman(CvKalman**)", "const CvMat* cvKalmanCorrect(CvKalman*, const CvMat*)", "void cvCalcOpticalFlowPyrLK(const void*, const void*, void*, void*, const CvPoint2D32f*, CvPoint2D32f*, int, CvSize, int, char*, float*, CvTermCriteria, int)", "void cv::KalmanFilter::init(int, int, int, int)", "const cv::Mat& cv::KalmanFilter::correct(const cv::Mat&)", "const cv::Mat& cv::KalmanFilter::predict(const cv::Mat&)", "N2cv19DualTVL1OpticalFlowE", "*N12_GLOBAL__N_120OpticalFlowDual_TVL1E", "*N12_GLOBAL__N_115CalcGradRhoBodyE", "*N12_GLOBAL__N_113EstimateVBodyE", "*N12_GLOBAL__N_114DivergenceBodyE", "*N12_GLOBAL__N_116BuildFlowMapBodyE", "*N12_GLOBAL__N_125EstimateDualVariablesBodyE", "*N12_GLOBAL__N_120CenteredGradientBodyE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_120OpticalFlowDual_TVL1ENS_14DefaultDeleterIS3_EEEE", "virtual void {anonymous}::OpticalFlowDual_TVL1::calc(cv::InputArray, cv::InputArray, cv::InputOutputArray)", "*N12_GLOBAL__N_119ForwardGradientBodyE", "N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE", "N10tensorflow20TensorShapeProto_DimE", "N10tensorflow16TensorShapeProtoE", "N6google8protobuf8internal20RepeatedPtrFieldBaseE", "N6google8protobuf4hashISsEE", "N6google8protobuf16RepeatedPtrFieldINS0_7MessageEEE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseISsN10tensorflow9AttrValueEEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow26NodeDef_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow26NodeDef_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N6google8protobuf3MapISsN10tensorflow9AttrValueEE8InnerMapE", "N10tensorflow7NodeDefE", "N10tensorflow8GraphDefE", "N10tensorflow26NodeDef_AttrEntry_DoNotUseE", "N10tensorflow10VersionDefE", "N10tensorflow11TensorProtoE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow31NameAttrList_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow31NameAttrList_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N10tensorflow12NameAttrListE", "N10tensorflow9AttrValueE", "N10tensorflow19AttrValue_ListValueE", "N10tensorflow31NameAttrList_AttrEntry_DoNotUseE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N10tensorflow18FunctionDefLibraryE", "N10tensorflow11FunctionDefE", "N10tensorflow16FunctionDef_NodeE", "N10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseE", "N10tensorflow11GradientDefE", "N10tensorflow6OpListE", "N10tensorflow12OpDef_ArgDefE", "N10tensorflow13OpDeprecationE", "N10tensorflow5OpDefE", "N10tensorflow13OpDef_AttrDefE", "N12opencv_caffe14NormalizedBBoxE", "N12opencv_caffe16SoftmaxParameterE", "N12opencv_caffe20ConvolutionParameterE", "N12opencv_caffe9BlobProtoE", "N12opencv_caffe15BlobProtoVectorE", "N12opencv_caffe15ConcatParameterE", "N12opencv_caffe12ELUParameterE", "N12opencv_caffe18ImageDataParameterE", "N12opencv_caffe13BiasParameterE", "N12opencv_caffe13CropParameterE", "N12opencv_caffe18DummyDataParameterE", "N12opencv_caffe14LayerParameterE", "N12opencv_caffe5DatumE", "N12opencv_caffe13LossParameterE", "N12opencv_caffe19WindowDataParameterE", "N12opencv_caffe19SaveOutputParameterE", "N12opencv_caffe19MemoryDataParameterE", "N12opencv_caffe18ReductionParameterE", "N12opencv_caffe21InfogainLossParameterE", "N12opencv_caffe14PReLUParameterE", "N12opencv_caffe12LogParameterE", "N12opencv_caffe16FlattenParameterE", "N12opencv_caffe17ProposalParameterE", "N12opencv_caffe18ParameterParameterE", "N12opencv_caffe15PythonParameterE", "N12opencv_caffe16PoolingParameterE", "N12opencv_caffe15SolverParameterE", "N12opencv_caffe24ContrastiveLossParameterE", "N12opencv_caffe19HDF5OutputParameterE", "N12opencv_caffe13TanHParameterE", "N12opencv_caffe13DataParameterE", "N12opencv_caffe17AccuracyParameterE", "N12opencv_caffe9ParamSpecE", "N12opencv_caffe14InputParameterE", "N12opencv_caffe16V0LayerParameterE", "N12opencv_caffe12MVNParameterE", "N12opencv_caffe14ScaleParameterE", "N12opencv_caffe21InnerProductParameterE", "N12opencv_caffe24DetectionOutputParameterE", "N12opencv_caffe13TileParameterE", "N12opencv_caffe15ArgMaxParameterE", "N12opencv_caffe14SliceParameterE", "N12opencv_caffe8NetStateE", "N12opencv_caffe22NormalizeBBoxParameterE", "N12opencv_caffe18BatchNormParameterE", "N12opencv_caffe18RecurrentParameterE", "N12opencv_caffe12ExpParameterE", "N12opencv_caffe14PowerParameterE", "N12opencv_caffe12LRNParameterE", "N12opencv_caffe18ThresholdParameterE", "N12opencv_caffe17HDF5DataParameterE", "N12opencv_caffe21PSROIPoolingParameterE", "N12opencv_caffe23TransformationParameterE", "N12opencv_caffe16PermuteParameterE", "N12opencv_caffe16DropoutParameterE", "N12opencv_caffe12NetParameterE", "N12opencv_caffe9BlobShapeE", "N12opencv_caffe13ReLUParameterE", "N12opencv_caffe15FillerParameterE", "N12opencv_caffe17PriorBoxParameterE", "N12opencv_caffe30NonMaximumSuppressionParameterE", "N12opencv_caffe14EmbedParameterE", "N12opencv_caffe16SigmoidParameterE", "N12opencv_caffe19ROIPoolingParameterE", "N12opencv_caffe16EltwiseParameterE", "N12opencv_caffe18HingeLossParameterE", "N12opencv_caffe12SPPParameterE", "N12opencv_caffe12NetStateRuleE", "N12opencv_caffe16ReshapeParameterE", "N12opencv_caffe16V1LayerParameterE", "N12opencv_caffe11SolverStateE", "void cv::dnn::experimental_dnn_v4::initializeLayerFactory()", "void cv::dnn::ReadNetParamsFromBinaryFileOrDie(const char*, cv::dnn::darknet::NetParameter*)", "bool cv::dnn::darknet::ReadDarknetFromCfgFile(const char*, cv::dnn::darknet::NetParameter*)", "bool cv::dnn::darknet::ReadDarknetFromWeightsFile(const char*, cv::dnn::darknet::NetParameter*)", "void cv::dnn::ReadNetParamsFromCfgFileOrDie(const char*, cv::dnn::darknet::NetParameter*)", "cv::dnn::experimental_dnn_v4::{anonymous}::DarknetImporter::DarknetImporter(const char*, const char*)", "void cv::dnn::experimental_dnn_v4::{anonymous}::DarknetImporter::addInput(const string&, int, int, cv::dnn::experimental_dnn_v4::Net&, std::string)", "void cv::dnn::experimental_dnn_v4::{anonymous}::DarknetImporter::addOutput(const cv::dnn::darknet::LayerParameter&, int, int)", "void cv::dnn::experimental_dnn_v4::{anonymous}::DarknetImporter::populateNet(cv::dnn::experimental_dnn_v4::Net)", "void cv::dnn::NMSFast_(const std::vector<_Tp>&, const std::vector<float>&, float, float, float, int, std::vector<int>&, float (*)(const BoxType&, const BoxType&)) [with BoxType = cv::Rect_<int>]", "void cv::dnn::experimental_dnn_v4::NMSBoxes(const std::vector<cv::Rect_<int> >&, const std::vector<float>&, float, float, std::vector<int>&, float, int)", "N2cv3dnn19experimental_dnn_v420BaseConvolutionLayerE", "N2cv3dnn19experimental_dnn_v416ConvolutionLayerE", "N2cv3dnn19experimental_dnn_v412PoolingLayerE", "N2cv3dnn19experimental_dnn_v411ConcatLayerE", "N2cv3dnn19experimental_dnn_v415ActivationLayerE", "N2cv3dnn19experimental_dnn_v412EltwiseLayerE", "N2cv3dnn19experimental_dnn_v420OpenCLBackendWrapperE", "N2cv3dnn19experimental_dnn_v49DataLayerE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v420OpenCLBackendWrapperENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v49DataLayerENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v43Net4ImplENS_14DefaultDeleterIS5_EEEE", "void cv::dnn::experimental_dnn_v4::Net::connect(cv::String, cv::String)", "void cv::dnn::experimental_dnn_v4::Net::connect(int, int, int, int)", "void cv::dnn::experimental_dnn_v4::BlobManager::allocateBlobsForLayer(cv::dnn::experimental_dnn_v4::LayerData&, const cv::dnn::experimental_dnn_v4::{anonymous}::LayerShapes&, std::vector<cv::dnn::experimental_dnn_v4::LayerPin>&, bool)", "void cv::dnn::experimental_dnn_v4::Net::Impl::clear()", "static cv::Ptr<cv::dnn::experimental_dnn_v4::Layer> cv::dnn::experimental_dnn_v4::LayerFactory::createLayerInstance(const cv::String&, cv::dnn::experimental_dnn_v4::LayerParams&)", "cv::dnn::experimental_dnn_v4::OpenCLBackendWrapper::OpenCLBackendWrapper(const cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper>&, cv::Mat&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::initHalideBackend()", "int64 cv::dnn::experimental_dnn_v4::Net::getFLOPS(int, const std::vector<std::vector<int> >&) const", "static void cv::dnn::experimental_dnn_v4::OpenCLBackendWrapper::update(const std::vector<cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> >&, const std::vector<cv::UMat>&)", "cv::dnn::experimental_dnn_v4::LayerData& cv::dnn::experimental_dnn_v4::Net::Impl::getLayerData(int)", "static std::vector<cv::UMat> cv::dnn::experimental_dnn_v4::OpenCLBackendWrapper::getUMatVector(const std::vector<cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> >&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::allocateLayer(int, const LayersShapesMap&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::computeNetOutputLayers()", "void cv::dnn::experimental_dnn_v4::Net::getMemoryConsumption(const std::vector<std::vector<int> >&, std::vector<int>&, std::vector<unsigned int>&, std::vector<unsigned int>&) const", "std::vector<cv::Mat> cv::dnn::experimental_dnn_v4::Layer::finalize(const std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::Net::addLayer(const cv::String&, const cv::String&, cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual bool cv::dnn::experimental_dnn_v4::DataLayer::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "void cv::dnn::experimental_dnn_v4::Net::Impl::fuseLayers(const std::vector<cv::dnn::experimental_dnn_v4::LayerPin>&)", "virtual bool cv::dnn::experimental_dnn_v4::Layer::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "void cv::dnn::experimental_dnn_v4::blobFromImage(cv::InputArray, cv::OutputArray, double, const Size&, const Scalar&, bool, bool)", "cv::Mat cv::dnn::experimental_dnn_v4::blobFromImage(cv::InputArray, double, const Size&, const Scalar&, bool, bool)", "void cv::dnn::experimental_dnn_v4::Net::forward(cv::OutputArrayOfArrays, const cv::String&)", "int cv::dnn::experimental_dnn_v4::Net::addLayerToPrev(const cv::String&, const cv::String&, cv::dnn::experimental_dnn_v4::LayerParams&)", "void cv::dnn::experimental_dnn_v4::Layer::finalize(const std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::Mat cv::dnn::experimental_dnn_v4::getPlane(const cv::Mat&, int, int)", "std::vector<cv::Ptr<cv::dnn::experimental_dnn_v4::Layer> > cv::dnn::experimental_dnn_v4::Net::getLayerInputs(cv::dnn::experimental_dnn_v4::Net::LayerId)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = cv::String]", "static void cv::dnn::experimental_dnn_v4::LayerFactory::unregisterLayer(const cv::String&)", "void cv::dnn::experimental_dnn_v4::BlobManager::reuse(const cv::dnn::experimental_dnn_v4::LayerPin&, const cv::dnn::experimental_dnn_v4::LayerPin&)", "void cv::dnn::experimental_dnn_v4::BlobManager::releaseReference(const cv::dnn::experimental_dnn_v4::LayerPin&)", "cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> cv::dnn::experimental_dnn_v4::Net::Impl::wrap(cv::Mat&)", "void cv::dnn::experimental_dnn_v4::Net::forward(std::vector<std::vector<cv::Mat> >&, const std::vector<cv::String>&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::initBackend()", "N2cv3dnn19experimental_dnn_v414BackendWrapperE", "void cv::dnn::experimental_dnn_v4::Net::Impl::forwardToLayer(cv::dnn::experimental_dnn_v4::LayerData&, bool)", "N2cv3dnn19experimental_dnn_v45LayerE", "virtual cv::Ptr<cv::dnn::experimental_dnn_v4::BackendNode> cv::dnn::experimental_dnn_v4::Layer::initInfEngine(const std::vector<cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> >&)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::dnn::experimental_dnn_v4::blobFromImages(cv::InputArrayOfArrays, cv::OutputArray, double, cv::Size, const Scalar&, bool, bool)", "void cv::dnn::experimental_dnn_v4::BlobManager::addHost(const cv::dnn::experimental_dnn_v4::LayerPin&, const cv::Mat&)", "static void cv::dnn::experimental_dnn_v4::Net::Impl::addLayerInput(cv::dnn::experimental_dnn_v4::LayerData&, int, cv::dnn::experimental_dnn_v4::LayerPin)", "cv::Ptr<cv::dnn::experimental_dnn_v4::Layer> cv::dnn::experimental_dnn_v4::LayerData::getLayerInstance()", "cv::Mat cv::dnn::experimental_dnn_v4::Net::getParam(cv::dnn::experimental_dnn_v4::Net::LayerId, int)", "cv::dnn::experimental_dnn_v4::LayerData& cv::dnn::experimental_dnn_v4::Net::Impl::getLayerData(const cv::dnn::experimental_dnn_v4::DictValue&)", "virtual cv::Ptr<cv::dnn::experimental_dnn_v4::BackendNode> cv::dnn::experimental_dnn_v4::Layer::initHalide(const std::vector<cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> >&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::forwardLayer(cv::dnn::experimental_dnn_v4::LayerData&)", "int64 cv::dnn::experimental_dnn_v4::Net::getFLOPS(const std::vector<std::vector<int> >&) const", "void cv::dnn::experimental_dnn_v4::imagesFromBlob(const cv::Mat&, cv::OutputArrayOfArrays)", "cv::dnn::experimental_dnn_v4::LayerData& cv::dnn::experimental_dnn_v4::Net::Impl::getLayerData(const cv::String&)", "cv::Mat cv::dnn::experimental_dnn_v4::Net::Impl::getBlob(const cv::dnn::experimental_dnn_v4::LayerPin&)", "void cv::dnn::experimental_dnn_v4::BlobManager::reset()", "cv::Ptr<cv::dnn::experimental_dnn_v4::BackendWrapper> cv::dnn::experimental_dnn_v4::wrapMat(int, int, cv::Mat&)", "void cv::dnn::experimental_dnn_v4::Net::getMemoryConsumption(int, const std::vector<std::vector<int> >&, size_t&, size_t&) const", "void cv::dnn::experimental_dnn_v4::Net::forward(cv::OutputArrayOfArrays, const std::vector<cv::String>&)", "cv::Mat cv::dnn::experimental_dnn_v4::blobFromImages(cv::InputArrayOfArrays, double, cv::Size, const Scalar&, bool, bool)", "void cv::dnn::experimental_dnn_v4::Net::setParam(cv::dnn::experimental_dnn_v4::Net::LayerId, int, const cv::Mat&)", "void cv::dnn::experimental_dnn_v4::Net::setPreferableBackend(int)", "void cv::dnn::experimental_dnn_v4::Net::setHalideScheduler(const cv::String&)", "int cv::dnn::experimental_dnn_v4::BlobManager::numReferences(const cv::dnn::experimental_dnn_v4::LayerPin&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::allocateLayers(const std::vector<cv::dnn::experimental_dnn_v4::LayerPin>&)", "void cv::dnn::experimental_dnn_v4::Net::setInputsNames(const std::vector<cv::String>&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::initInfEngineBackend()", "void cv::dnn::experimental_dnn_v4::Layer::forward_fallback(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "cv::Mat cv::dnn::experimental_dnn_v4::Net::forward(const cv::String&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "void cv::dnn::experimental_dnn_v4::Net::setInput(cv::InputArray, const cv::String&)", "void cv::dnn::experimental_dnn_v4::Net::Impl::connect(int, int, int, int)", "static void cv::dnn::experimental_dnn_v4::LayerFactory::registerLayer(const cv::String&, cv::dnn::experimental_dnn_v4::LayerFactory::Constuctor)", "void cv::dnn::experimental_dnn_v4::Net::setPreferableTarget(int)", "void cv::dnn::experimental_dnn_v4::Net::Impl::setUpNet(const std::vector<cv::dnn::experimental_dnn_v4::LayerPin>&)", "void cv::dnn::experimental_dnn_v4::Net::getMemoryConsumption(const std::vector<std::vector<int> >&, size_t&, size_t&) const", "void cv::dnn::experimental_dnn_v4::Net::deleteLayer(cv::dnn::experimental_dnn_v4::Net::LayerId)", "void cv::dnn::experimental_dnn_v4::Layer::run(const std::vector<cv::Mat>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::dnn::experimental_dnn_v4::LayerData::LayerData(int, const cv::String&, const cv::String&, cv::dnn::experimental_dnn_v4::LayerParams&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::TFImporter::populateNet(cv::dnn::experimental_dnn_v4::Net)", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "const cv::dnn::experimental_dnn_v4::DictValue& cv::dnn::experimental_dnn_v4::Dict::get(const cv::String&) const", "void cv::dnn::experimental_dnn_v4::{anonymous}::blobShapeFromTensor(const tensorflow::TensorProto&, cv::dnn::experimental_dnn_v4::MatShape&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::setStrides(cv::dnn::experimental_dnn_v4::LayerParams&, const tensorflow::NodeDef&)", "cv::dnn::experimental_dnn_v4::DictValue cv::dnn::experimental_dnn_v4::{anonymous}::parseDims(const tensorflow::TensorProto&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::addConstNodes(tensorflow::GraphDef&, std::map<cv::String, int>&, std::set<cv::String>&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::parseTensor(const tensorflow::TensorProto&, cv::Mat&) [with T = double]", "void cv::dnn::experimental_dnn_v4::{anonymous}::TFImporter::connect(const std::map<cv::String, int>&, cv::dnn::experimental_dnn_v4::Net&, const cv::dnn::experimental_dnn_v4::{anonymous}::Pin&, int, int)", "void cv::dnn::experimental_dnn_v4::{anonymous}::TFImporter::kernelFromTensor(const tensorflow::TensorProto&, cv::Mat&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::printTensor(const tensorflow::TensorProto&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::blobFromTensor(const tensorflow::TensorProto&, cv::Mat&)", "const tensorflow::TensorProto& cv::dnn::experimental_dnn_v4::{anonymous}::TFImporter::getConstBlob(const tensorflow::NodeDef&, std::map<cv::String, int>, int, int*)", "cv::Mat cv::dnn::experimental_dnn_v4::{anonymous}::getTensorContent(const tensorflow::TensorProto&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::parseTensor(const tensorflow::TensorProto&, cv::Mat&) [with T = int]", "void cv::dnn::experimental_dnn_v4::{anonymous}::setKSize(cv::dnn::experimental_dnn_v4::LayerParams&, const tensorflow::NodeDef&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::parseTensor(const tensorflow::TensorProto&, cv::Mat&) [with T = float]", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = cv::String]", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "void cv::dnn::ReadTFNetParamsFromBinaryFileOrDie(const char*, tensorflow::GraphDef*)", "void cv::dnn::ReadTFNetParamsFromBinaryBufferOrDie(const char*, size_t, tensorflow::GraphDef*)", "void cv::dnn::ReadTFNetParamsFromTextBufferOrDie(const char*, size_t, tensorflow::GraphDef*)", "void cv::dnn::ReadTFNetParamsFromTextFileOrDie(const char*, tensorflow::GraphDef*)", "N2cv3dnn19experimental_dnn_v48LRNLayerE", "N2cv3dnn12LRNLayerImpl10ChannelLRNE", "N2cv3dnn12LRNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn12LRNLayerImplENS_14DefaultDeleterIS3_EEEE", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "virtual void cv::dnn::LRNLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual int64 cv::dnn::LRNLayerImpl::getFLOPS(const std::vector<std::vector<int> >&, const std::vector<std::vector<int> >&) const", "virtual void cv::dnn::LRNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = cv::String]", "cv::dnn::LRNLayerImpl::LRNLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "cv::Mat cv::dnn::experimental_dnn_v4::getPlane(const cv::Mat&, int, int)", "N2cv3dnn19experimental_dnn_v410SplitLayerE", "N2cv3dnn14SplitLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14SplitLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::SplitLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::SplitLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::dnn::SplitLayerImpl::SplitLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual bool cv::dnn::SplitLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "N2cv3dnn19experimental_dnn_v418NormalizeBBoxLayerE", "N2cv3dnn22NormalizeBBoxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn22NormalizeBBoxLayerImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::dnn::NormalizeBBoxLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual void cv::dnn::NormalizeBBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "cv::dnn::NormalizeBBoxLayerImpl::NormalizeBBoxLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual bool cv::dnn::NormalizeBBoxLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "N2cv3dnn19experimental_dnn_v410ShiftLayerE", "N2cv3dnn14ShiftLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ShiftLayerImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "virtual void cv::dnn::ShiftLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::ShiftLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::dnn::ShiftLayerImpl::ShiftLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "N2cv3dnn19experimental_dnn_v49ReLULayerE", "N2cv3dnn19experimental_dnn_v418ChannelsPReLULayerE", "N2cv3dnn24BaseConvolutionLayerImplE", "N2cv3dnn20ConvolutionLayerImpl12ParallelConvE", "N2cv3dnn20ConvolutionLayerImplE", "N2cv3dnn22DeConvolutionLayerImpl13MatMulInvokerE", "N2cv3dnn22DeConvolutionLayerImpl13Col2ImInvokerE", "N2cv3dnn22DeConvolutionLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn20ConvolutionLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn22DeConvolutionLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::BaseConvolutionLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::DeConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "static void cv::dnn::ConvolutionLayerImpl::ParallelConv::run(const cv::Mat&, cv::Mat&, const cv::Mat&, const std::vector<float>&, const std::vector<float>&, cv::Size, cv::Size, cv::Size, cv::Size, const cv::dnn::experimental_dnn_v4::ActivationLayer*, int, int)", "virtual int64 cv::dnn::ConvolutionLayerImpl::getFLOPS(const std::vector<std::vector<int> >&, const std::vector<std::vector<int> >&) const", "cv::dnn::BaseConvolutionLayerImpl::BaseConvolutionLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::ConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::ConvolutionLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual bool cv::dnn::ConvolutionLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual bool cv::dnn::DeConvolutionLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "void cv::dnn::ConvolutionLayerImpl::fuseWeights(const cv::Mat&, const cv::Mat&)", "virtual void cv::dnn::ConvolutionLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "virtual int64 cv::dnn::DeConvolutionLayerImpl::getFLOPS(const std::vector<std::vector<int> >&, const std::vector<std::vector<int> >&) const", "virtual void cv::dnn::DeConvolutionLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "N2cv3dnn19experimental_dnn_v49CropLayerE", "N2cv3dnn13CropLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn13CropLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::CropLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::CropLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "virtual void cv::dnn::CropLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual bool cv::dnn::CropLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "void cv::dnn::getConvPoolOutParams(const Size&, const Size&, const Size&, const cv::String&, const Size&, cv::Size&)", "void cv::dnn::util::getStrideAndPadding(const cv::dnn::experimental_dnn_v4::LayerParams&, int&, int&, int&, int&, cv::String&)", "void cv::dnn::util::getKernelSize(const cv::dnn::experimental_dnn_v4::LayerParams&, int&, int&)", "void cv::dnn::getConvolutionKernelParams(const cv::dnn::experimental_dnn_v4::LayerParams&, int&, int&, int&, int&, int&, int&, int&, int&, cv::String&)", "void cv::dnn::getPoolingKernelParams(const cv::dnn::experimental_dnn_v4::LayerParams&, int&, int&, bool&, int&, int&, int&, int&, cv::String&)", "N2cv3dnn19experimental_dnn_v412PaddingLayerE", "N2cv3dnn16PaddingLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PaddingLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::PaddingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::PaddingLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual bool cv::dnn::PaddingLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "cv::dnn::PaddingLayerImpl::PaddingLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "cv::Mat cv::dnn::experimental_dnn_v4::getPlane(const cv::Mat&, int, int)", "N2cv3dnn19experimental_dnn_v410ReorgLayerE", "N2cv3dnn14ReorgLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ReorgLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::ReorgLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::dnn::ReorgLayerImpl::ReorgLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual bool cv::dnn::ReorgLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::ReorgLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn19experimental_dnn_v412PermuteLayerE", "N2cv3dnn16PermuteLayerImpl14PermuteInvokerE", "N2cv3dnn16PermuteLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PermuteLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::PermuteLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::PermuteLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "cv::dnn::PermuteLayerImpl::PermuteLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::PermuteLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "void cv::dnn::PermuteLayerImpl::checkCurrentOrder(int)", "virtual bool cv::dnn::PermuteLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "static void cv::dnn::PermuteLayerImpl::PermuteInvoker::run(const cv::Mat&, cv::Mat&, const std::vector<unsigned int>&, int)", "N2cv3dnn19experimental_dnn_v414MaxUnpoolLayerE", "N2cv3dnn18MaxUnpoolLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn18MaxUnpoolLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual bool cv::dnn::MaxUnpoolLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::MaxUnpoolLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::MaxUnpoolLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "cv::Mat cv::dnn::experimental_dnn_v4::getPlane(const cv::Mat&, int, int)", "N2cv3dnn19experimental_dnn_v414BatchNormLayerE", "N2cv3dnn18BatchNormLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn18BatchNormLayerImplENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "cv::dnn::BatchNormLayerImpl::BatchNormLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::BatchNormLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::BatchNormLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "N2cv3dnn19experimental_dnn_v48RNNLayerE", "N2cv3dnn13LSTMLayerImplE", "N2cv3dnn12RNNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn13LSTMLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn12RNNLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual bool cv::dnn::RNNLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual bool cv::dnn::LSTMLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::LSTMLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::LSTMLayerImpl::setWeights(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "virtual void cv::dnn::LSTMLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::LSTMLayerImpl::setUseTimstampsDim(bool)", "void cv::dnn::tanh(const cv::Mat&, cv::Mat&)", "cv::dnn::LSTMLayerImpl::LSTMLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::LSTMLayerImpl::setOutShape(const MatShape&)", "virtual void cv::dnn::RNNLayerImpl::setWeights(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::LSTMLayerImpl::setProduceCellOutput(bool)", "virtual void cv::dnn::LSTMLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::RNNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::RNNLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::RNNLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "N2cv3dnn19experimental_dnn_v49LSTMLayerE", "N2cv3dnn19experimental_dnn_v417InnerProductLayerE", "N2cv3dnn23FullyConnectedLayerImpl14FullyConnectedE", "N2cv3dnn23FullyConnectedLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn23FullyConnectedLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual bool cv::dnn::FullyConnectedLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::FullyConnectedLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::FullyConnectedLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "size_t cv::Mat::total(int, int) const", "static void cv::dnn::FullyConnectedLayerImpl::FullyConnected::run(const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&, const cv::dnn::experimental_dnn_v4::ActivationLayer*, int)", "cv::dnn::FullyConnectedLayerImpl::FullyConnectedLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "N2cv3dnn19experimental_dnn_v413PriorBoxLayerE", "N2cv3dnn17PriorBoxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn17PriorBoxLayerImplENS_14DefaultDeleterIS3_EEEE", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "T cv::dnn::PriorBoxLayerImpl::getParameter(const cv::dnn::experimental_dnn_v4::LayerParams&, const string&, const size_t&, bool, const T&) [with T = float; std::string = std::basic_string<char>; size_t = unsigned int]", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "void cv::dnn::PriorBoxLayerImpl::getVariance(const cv::dnn::experimental_dnn_v4::LayerParams&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual void cv::dnn::PriorBoxLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::PriorBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual bool cv::dnn::PriorBoxLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "cv::dnn::PriorBoxLayerImpl::PriorBoxLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "N2cv3dnn19experimental_dnn_v410SliceLayerE", "N2cv3dnn14SliceLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14SliceLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::SliceLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::SliceLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual bool cv::dnn::SliceLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "cv::Range cv::dnn::experimental_dnn_v4::clamp(const cv::Range&, int)", "cv::dnn::SliceLayerImpl::SliceLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::SliceLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "N2cv3dnn16EltwiseLayerImpl14EltwiseInvokerE", "N2cv3dnn16EltwiseLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16EltwiseLayerImplENS_14DefaultDeleterIS3_EEEE", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "virtual void cv::dnn::EltwiseLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual bool cv::dnn::EltwiseLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual int64 cv::dnn::EltwiseLayerImpl::getFLOPS(const std::vector<std::vector<int> >&, const std::vector<std::vector<int> >&) const", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::EltwiseLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::dnn::EltwiseLayerImpl::EltwiseLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "static void cv::dnn::EltwiseLayerImpl::EltwiseInvoker::run(const cv::Mat**, int, cv::Mat&, const std::vector<float>&, cv::dnn::EltwiseLayerImpl::EltwiseOp, const cv::dnn::experimental_dnn_v4::ActivationLayer*, int)", "N2cv3dnn19experimental_dnn_v413ProposalLayerE", "N2cv3dnn17ProposalLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn17ProposalLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::ProposalLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "static cv::Mat cv::dnn::ProposalLayerImpl::getObjectScores(const cv::Mat&)", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "cv::Mat cv::dnn::experimental_dnn_v4::slice(const cv::Mat&, const cv::dnn::experimental_dnn_v4::_Range&, const cv::dnn::experimental_dnn_v4::_Range&)", "virtual bool cv::dnn::ProposalLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::ProposalLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::ProposalLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn19experimental_dnn_v412ReshapeLayerE", "N2cv3dnn16ReshapeLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16ReshapeLayerImplENS_14DefaultDeleterIS3_EEEE", "cv::dnn::ReshapeLayerImpl::ReshapeLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::ReshapeLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::ReshapeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "void cv::dnn::computeShapeByReshapeMask(const MatShape&, const MatShape&, cv::Range, cv::dnn::experimental_dnn_v4::MatShape&)", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "N2cv3dnn19experimental_dnn_v411RegionLayerE", "N2cv3dnn15RegionLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn15RegionLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::RegionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "cv::dnn::RegionLayerImpl::RegionLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::RegionLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual bool cv::dnn::RegionLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "void cv::dnn::NMSFast_(const std::vector<_Tp>&, const std::vector<float>&, float, float, float, int, std::vector<int>&, float (*)(const BoxType&, const BoxType&)) [with BoxType = cv::Rect_<float>]", "N2cv3dnn19experimental_dnn_v412SoftmaxLayerE", "N2cv3dnn16SoftMaxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16SoftMaxLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::SoftMaxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::SoftMaxLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "size_t cv::Mat::total(int, int) const", "N2cv3dnn19experimental_dnn_v420DetectionOutputLayerE", "N2cv3dnn24DetectionOutputLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn24DetectionOutputLayerImplENS_14DefaultDeleterIS3_EEEE", "static void cv::dnn::DetectionOutputLayerImpl::GetLocPredictions(const float*, int, int, int, bool, bool, std::vector<std::map<int, std::vector<cv::dnn::util::NormalizedBBox> > >&)", "size_t cv::dnn::DetectionOutputLayerImpl::outputDetections_(int, float*, const LabelBBox&, cv::Mat&, const std::map<int, std::vector<int> >&)", "static void cv::dnn::DetectionOutputLayerImpl::DecodeBBoxes(const std::vector<cv::dnn::util::NormalizedBBox>&, const std::vector<std::vector<float> >&, const cv::String&, bool, bool, const cv::dnn::util::NormalizedBBox&, bool, const std::vector<cv::dnn::util::NormalizedBBox>&, std::vector<cv::dnn::util::NormalizedBBox>&)", "cv::dnn::DetectionOutputLayerImpl::DetectionOutputLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "T cv::dnn::DetectionOutputLayerImpl::getParameter(const cv::dnn::experimental_dnn_v4::LayerParams&, const string&, const size_t&, bool, const T&) [with T = bool; std::string = std::basic_string<char>; size_t = unsigned int]", "void cv::dnn::NMSFast_(const std::vector<_Tp>&, const std::vector<float>&, float, float, float, int, std::vector<int>&, float (*)(const BoxType&, const BoxType&)) [with BoxType = cv::dnn::util::NormalizedBBox]", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = cv::String]", "virtual bool cv::dnn::DetectionOutputLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "static void cv::dnn::DetectionOutputLayerImpl::DecodeBBox(const cv::dnn::util::NormalizedBBox&, const std::vector<float>&, const cv::String&, bool, const cv::dnn::util::NormalizedBBox&, bool, const cv::dnn::util::NormalizedBBox&, cv::dnn::util::NormalizedBBox&) [with bool variance_encoded_in_target = true]", "T cv::dnn::DetectionOutputLayerImpl::getParameter(const cv::dnn::experimental_dnn_v4::LayerParams&, const string&, const size_t&, bool, const T&) [with T = unsigned int; std::string = std::basic_string<char>; size_t = unsigned int]", "T cv::dnn::DetectionOutputLayerImpl::getParameter(const cv::dnn::experimental_dnn_v4::LayerParams&, const string&, const size_t&, bool, const T&) [with T = float; std::string = std::basic_string<char>; size_t = unsigned int]", "virtual void cv::dnn::DetectionOutputLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "static void cv::dnn::DetectionOutputLayerImpl::DecodeBBoxesAll(const std::vector<std::map<int, std::vector<cv::dnn::util::NormalizedBBox> > >&, const std::vector<cv::dnn::util::NormalizedBBox>&, const std::vector<std::vector<float> >&, int, bool, int, int, const cv::String&, bool, bool, const cv::dnn::util::NormalizedBBox&, bool, std::vector<std::map<int, std::vector<cv::dnn::util::NormalizedBBox> > >&)", "virtual void cv::dnn::DetectionOutputLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "T cv::dnn::DetectionOutputLayerImpl::getParameter(const cv::dnn::experimental_dnn_v4::LayerParams&, const string&, const size_t&, bool, const T&) [with T = int; std::string = std::basic_string<char>; size_t = unsigned int]", "static void cv::dnn::DetectionOutputLayerImpl::DecodeBBox(const cv::dnn::util::NormalizedBBox&, const std::vector<float>&, const cv::String&, bool, const cv::dnn::util::NormalizedBBox&, bool, const cv::dnn::util::NormalizedBBox&, cv::dnn::util::NormalizedBBox&) [with bool variance_encoded_in_target = false]", "size_t cv::dnn::DetectionOutputLayerImpl::processDetections_(const LabelBBox&, cv::Mat&, std::vector<std::map<int, std::vector<int> > >&)", "N2cv3dnn19experimental_dnn_v410BlankLayerE", "N2cv3dnn14BlankLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14BlankLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::BlankLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "static cv::Ptr<cv::dnn::experimental_dnn_v4::Layer> cv::dnn::experimental_dnn_v4::BlankLayer::create(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::BlankLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn19experimental_dnn_v48MVNLayerE", "N2cv3dnn12MVNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn12MVNLayerImplENS_14DefaultDeleterIS3_EEEE", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "virtual void cv::dnn::MVNLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::MVNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn19experimental_dnn_v410ScaleLayerE", "N2cv3dnn14ScaleLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ScaleLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual bool cv::dnn::ScaleLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "cv::Mat::Mat(int, int, int, void*, size_t)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::ScaleLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::ScaleLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn19experimental_dnn_v426ResizeNearestNeighborLayerE", "N2cv3dnn30ResizeNearestNeighborLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn30ResizeNearestNeighborLayerImplENS_14DefaultDeleterIS3_EEEE", "cv::dnn::ResizeNearestNeighborLayerImpl::ResizeNearestNeighborLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual bool cv::dnn::ResizeNearestNeighborLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::ResizeNearestNeighborLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "virtual void cv::dnn::ResizeNearestNeighborLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "cv::Mat cv::dnn::experimental_dnn_v4::getPlane(const cv::Mat&, int, int)", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEE5PBodyE", "N2cv3dnn19experimental_dnn_v410ReLU6LayerE", "N2cv3dnn19experimental_dnn_v48ELULayerE", "N2cv3dnn19experimental_dnn_v49TanHLayerE", "N2cv3dnn19experimental_dnn_v412SigmoidLayerE", "N2cv3dnn19experimental_dnn_v49BNLLLayerE", "N2cv3dnn19experimental_dnn_v48AbsLayerE", "N2cv3dnn19experimental_dnn_v410PowerLayerE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11ReLUFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11TanHFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_10ELUFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_13AbsValFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11BNLLFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_12PowerFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEENS_14DefaultDeleterIS5_EEEE", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::BNLLFunctor]", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::SigmoidFunctor]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::ReLUFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::ReLU6Functor]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::SigmoidFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "static cv::Ptr<cv::dnn::experimental_dnn_v4::Layer> cv::dnn::experimental_dnn_v4::ChannelsPReLULayer::create(const cv::dnn::experimental_dnn_v4::LayerParams&)", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::ELUFunctor]", "cv::dnn::ReLU6Functor::ReLU6Functor(float, float)", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::BNLLFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::ReLU6Functor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::AbsValFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::PowerFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::TanHFunctor]", "void cv::dnn::ChannelsPReLUFunctor::apply(const float*, float*, int, size_t, int, int) const", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::AbsValFunctor]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::ELUFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::PowerFunctor]", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::ReLUFunctor]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::TanHFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [with Func = cv::dnn::ChannelsPReLUFunctor; cv::InputArrayOfArrays = const cv::_InputArray&; cv::OutputArrayOfArrays = const cv::_OutputArray&]", "void cv::dnn::ElementWiseLayer<Func>::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&) [with Func = cv::dnn::ChannelsPReLUFunctor]", "N2cv3dnn15ConcatLayerImpl20ChannelConcatInvokerE", "N2cv3dnn15ConcatLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn15ConcatLayerImplENS_14DefaultDeleterIS3_EEEE", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "static void cv::dnn::ConcatLayerImpl::ChannelConcatInvoker::run(std::vector<cv::Mat*>&, cv::Mat&, int)", "virtual bool cv::dnn::ConcatLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::ConcatLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::dnn::ConcatLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "N2cv3dnn19experimental_dnn_v412FlattenLayerE", "N2cv3dnn16FlattenLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16FlattenLayerImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::dnn::FlattenLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual bool cv::dnn::FlattenLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::FlattenLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn16PoolingLayerImpl14PoolingInvokerE", "N2cv3dnn16PoolingLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PoolingLayerImplENS_14DefaultDeleterIS3_EEEE", "static void cv::dnn::PoolingLayerImpl::PoolingInvoker::run(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, cv::Size, cv::Size, cv::Size, bool, int, float, bool, int)", "cv::dnn::PoolingLayerImpl::PoolingLayerImpl(const cv::dnn::experimental_dnn_v4::LayerParams&)", "virtual void cv::dnn::PoolingLayerImpl::finalize(const std::vector<cv::Mat*>&, std::vector<cv::Mat>&)", "virtual void cv::dnn::PoolingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "int cv::dnn::experimental_dnn_v4::total(const MatShape&, int, int)", "virtual void cv::dnn::PoolingLayerImpl::forward(std::vector<cv::Mat*>&, std::vector<cv::Mat>&, std::vector<cv::Mat>&)", "virtual bool cv::dnn::PoolingLayerImpl::getMemoryShapes(const std::vector<std::vector<int> >&, int, std::vector<std::vector<int> >&, std::vector<std::vector<int> >&) const", "virtual void cv::dnn::PoolingLayerImpl::PoolingInvoker::operator()(const cv::Range&) const", "void cv::dnn::forwardInfEngine(cv::Ptr<cv::dnn::experimental_dnn_v4::BackendNode>&)", "long int TH::THDiskFile_readShort(TH::THFile*, short int*, long int)", "void TH::THDiskFile_seekEnd(TH::THFile*)", "long int TH::THDiskFile_readInt(TH::THFile*, int*, long int)", "void TH::THDiskFile_close(TH::THFile*)", "long int TH::THDiskFile_readString(TH::THFile*, const char*, char**)", "long int TH::THDiskFile_readLong(TH::THFile*, int64*, long int)", "long int TH::THDiskFile_readFloat(TH::THFile*, float*, long int)", "long int TH::THDiskFile_readChar(TH::THFile*, char*, long int)", "long int TH::THDiskFile_readByte(TH::THFile*, unsigned char*, long int)", "long int TH::THDiskFile_readDouble(TH::THFile*, double*, long int)", "long int TH::THDiskFile_position(TH::THFile*)", "TH::THFile* TH::THDiskFile_new(const string&, const char*, int)", "void TH::THDiskFile_seek(TH::THFile*, long int)", "N2cv6detail12PtrOwnerImplIN2TH8THFile__EPFvPS3_EEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v413TorchImporter6ModuleENS_14DefaultDeleterIS5_EEEE", "void cv::dnn::experimental_dnn_v4::TorchImporter::populateNet(cv::dnn::experimental_dnn_v4::Net)", "const cv::dnn::experimental_dnn_v4::DictValue& cv::dnn::experimental_dnn_v4::Dict::get(const cv::String&) const", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = double]", "int cv::dnn::experimental_dnn_v4::TorchImporter::fill(cv::dnn::experimental_dnn_v4::TorchImporter::Module*, std::vector<std::pair<int, cv::dnn::experimental_dnn_v4::TorchImporter::Module*> >&, int, int)", "cv::Mat cv::dnn::experimental_dnn_v4::readTorchBlob(const cv::String&, bool)", "void cv::dnn::experimental_dnn_v4::TorchImporter::readTorchObject(int)", "void cv::dnn::experimental_dnn_v4::TorchImporter::readObject()", "int cv::dnn::experimental_dnn_v4::DictValue::size() const", "cv::dnn::experimental_dnn_v4::Net cv::dnn::experimental_dnn_v4::readNetFromTorch(const cv::String&, bool)", "void cv::dnn::experimental_dnn_v4::TorchImporter::readTorchTable(cv::dnn::experimental_dnn_v4::Dict&, cv::dnn::experimental_dnn_v4::TorchImporter::TensorsMap&)", "T cv::dnn::experimental_dnn_v4::DictValue::get(int) const [with T = long long int]", "void cv::dnn::experimental_dnn_v4::TorchImporter::readTorchTensor(int, int)", "void cv::dnn::experimental_dnn_v4::TorchImporter::readTorchStorage(int, int)", "cv::dnn::experimental_dnn_v4::TorchImporter::TorchImporter(cv::String, bool)", "static int cv::dnn::experimental_dnn_v4::TorchImporter::parseTorchType(const cv::String&, const char*, const char*)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::dnn::experimental_dnn_v4::shrinkCaffeModel(const cv::String&, const cv::String&, const std::vector<cv::String>&)", "N6google8protobuf8internal16FunctionClosure1IPKNS0_15FieldDescriptorEEE", "cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::CaffeImporter(const char*, const char*)", "void cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::populateNet(cv::dnn::experimental_dnn_v4::Net)", "void cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::addOutput(const opencv_caffe::LayerParameter&, int, int)", "cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::CaffeImporter(const char*, size_t, const char*, size_t)", "void cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::addParam(const google::protobuf::Message&, const google::protobuf::FieldDescriptor*, cv::dnn::experimental_dnn_v4::LayerParams&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::addInput(const string&, int, int, cv::dnn::experimental_dnn_v4::Net&)", "void cv::dnn::experimental_dnn_v4::{anonymous}::CaffeImporter::blobFromProto(const opencv_caffe::BlobProto&, cv::Mat&)", "N6google8protobuf2io19ZeroCopyInputStreamE", "void cv::dnn::ReadNetParamsFromTextBufferOrDie(const char*, size_t, opencv_caffe::NetParameter*)", "bool cv::dnn::ReadProtoFromTextFile(const char*, google::protobuf::Message*)", "void cv::dnn::UpgradeV0PaddingLayers(const opencv_caffe::NetParameter&, opencv_caffe::NetParameter*)", "bool cv::dnn::UpgradeV0LayerParameter(const opencv_caffe::V1LayerParameter&, opencv_caffe::V1LayerParameter*)", "bool cv::dnn::UpgradeV1LayerParameter(const opencv_caffe::V1LayerParameter&, opencv_caffe::LayerParameter*)", "void cv::dnn::ReadNetParamsFromBinaryFileOrDie(const char*, opencv_caffe::NetParameter*)", "opencv_caffe::V1LayerParameter_LayerType cv::dnn::UpgradeV0LayerType(const string&)", "bool cv::dnn::UpgradeNetAsNeeded(const string&, opencv_caffe::NetParameter*)", "const char* cv::dnn::UpgradeV1LayerType(opencv_caffe::V1LayerParameter_LayerType)", "void cv::dnn::ReadNetParamsFromTextFileOrDie(const char*, opencv_caffe::NetParameter*)", "bool cv::dnn::ReadProtoFromBinaryFile(const char*, google::protobuf::Message*)", "void cv::dnn::ReadNetParamsFromBinaryBufferOrDie(const char*, size_t, opencv_caffe::NetParameter*)", "bool cv::dnn::UpgradeV1Net(const opencv_caffe::NetParameter&, opencv_caffe::NetParameter*)", "N2cv6detail12PtrOwnerImplINS_10PxMEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PAMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PAMEncoderENS_14DefaultDeleterIS2_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "bool cv::imwrite(const cv::String&, cv::InputArray, const std::vector<int>&)", "CvMat* cvDecodeImageM(const CvMat*, int)", "int cvSaveImage(const char*, const CvArr*, const int*)", "void* cv::imdecode_(const cv::Mat&, int, int, cv::Mat*)", "bool cv::imencode(const cv::String&, cv::InputArray, std::vector<unsigned char>&, const std::vector<int>&)", "cv::Mat cv::imdecode(cv::InputArray, int)", "cv::Mat cv::imread(const cv::String&, int)", "bool cv::imwrite_(const cv::String&, const std::vector<cv::Mat>&, const std::vector<int>&, bool)", "CvMat* cvEncodeImage(const char*, const CvArr*, const int*)", "cv::Mat cv::imdecode(cv::InputArray, int, cv::Mat*)", "bool cv::imreadmulti(const cv::String&, std::vector<cv::Mat>&, int)", "cv::Size cv::validateInputImageSize(const Size&)", "IplImage* cvDecodeImage(const CvMat*, int)", "*N2cv12_GLOBAL__N_116ByteStreamBufferE", "void cvConvertImage(const CvArr*, CvArr*, int)", "N2cv11WebPEncoderE", "N2cv11WebPDecoderE", "virtual bool cv::ExrEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10ExrEncoderE", "N2cv10ExrDecoderE", "N2cv24RBS_BAD_HEADER_ExceptionE", "void basic_conversion(void*, const channel_layout*, int, int, void*, int, int)", "ENDHDR", "HEIGHT", "WIDTH", "DEPTH", "MAXVAL", "TUPLTYPE", "N2cv10PAMEncoderE", "virtual bool cv::PAMDecoder::readHeader()", "virtual bool cv::PAMEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10PAMDecoderE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderEPFvPS2_EEE", "N2cv13Jpeg2KDecoderE", "virtual bool cv::Jpeg2KDecoder::readHeader()", "N2cv13Jpeg2KEncoderE", "virtual bool cv::BmpDecoder::readData(cv::Mat&)", "N2cv10BmpDecoderE", "virtual bool cv::BmpDecoder::readHeader()", "N2cv10BmpEncoderE", "virtual bool cv::HdrEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10HdrEncoderE", "N2cv10HdrDecoderE", "N2cv11JpegEncoderE", "N2cv11JpegDecoderE", "N2cv16BaseImageEncoderE", "N2cv16BaseImageDecoderE", "virtual void cv::BaseImageEncoder::throwOnEror() const", "virtual bool cv::SunRasterDecoder::readData(cv::Mat&)", "N2cv16SunRasterDecoderE", "virtual bool cv::SunRasterDecoder::readHeader()", "N2cv16SunRasterEncoderE", "virtual bool cv::PxMDecoder::readHeader()", "cv::PxMEncoder::PxMEncoder(cv::PxMMode)", "virtual bool cv::PxMEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10PxMEncoderE", "N2cv10PxMDecoderE", "virtual bool cv::PxMDecoder::readData(cv::Mat&)", "int cv::ReadNumber(cv::RLByteStream&, int)", "N2cv11TiffEncoderE", "N2cv11TiffDecoderE", "virtual bool cv::TiffEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10PngEncoderE", "N2cv10PngDecoderE", "static void cv::PngEncoder::writeDataToBuf(void*, uchar*, size_t)", "static void cv::PngDecoder::readDataFromBuf(void*, uchar*, size_t)", "N2cv23RBS_THROW_EOS_ExceptionE", "N2cv11WBaseStreamE", "N2cv11RBaseStreamE", "void cv::RBaseStream::skip(int)", "void cv::RBaseStream::setPos(int)", "void cv::WLByteStream::putBytes(const void*, int)", "int cv::RBaseStream::getPos()", "int cv::RLByteStream::getByte()", "virtual void cv::WBaseStream::writeBlock()", "N2cv12RMByteStreamE", "N2cv12WMByteStreamE", "virtual bool cv::RBaseStream::open(const cv::Mat&)", "N2cv12WLByteStreamE", "N2cv12RLByteStreamE", "virtual void cv::RBaseStream::readBlock()", "int cv::RLByteStream::getBytes(void*, int)", "int rgbe_error(int, const char*)", "*N12_GLOBAL__N_116ExifParsingErrorE", "N2cv6detail12PtrOwnerImplI9CvCaptureNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvVideoWriterNS_14DefaultDeleterIS2_EEEE", "bool cv::VideoWriter::open(const cv::String&, int, int, double, cv::Size, bool)", "N2cv11VideoWriterE", "virtual bool cv::VideoCapture::open(const cv::String&, int)", "virtual bool cv::VideoCapture::grab()", "cv::VideoCapture::VideoCapture(int)", "cv::VideoCapture::VideoCapture(const cv::String&)", "N2cv12VideoCaptureE", "bool cv::VideoCapture::open(int, int)", "virtual bool cv::VideoCapture::retrieve(cv::OutputArray, int)", "virtual cv::VideoCapture::~VideoCapture()", "CvVideoWriter* cvCreateVideoWriterWithPreference(const char*, int, int, double, CvSize, int)", "virtual bool cv::VideoCapture::read(cv::OutputArray)", "cv::VideoCapture::VideoCapture(const cv::String&, int)", "virtual bool cv::VideoCapture::open(const cv::String&)", "virtual cv::VideoCapture& cv::VideoCapture::operator>>(cv::UMat&)", "virtual void cv::VideoCapture::release()", "virtual void cv::VideoWriter::write(const cv::Mat&)", "virtual cv::VideoWriter& cv::VideoWriter::operator<<(const cv::Mat&)", "virtual bool cv::VideoCapture::open(int)", "9CvCapture", "13CvVideoWriter", "char* icvExtractPattern(const char*, unsigned int*)", "20CvVideoWriter_Images", "16CvCapture_Images", "N2cv12IVideoWriterE", "N2cv5mjpeg16MotionJpegWriterE", "N2cv5mjpeg12MjpegEncoderE", "N2cv6detail12PtrOwnerImplINS_5mjpeg16MotionJpegWriterENS_14DefaultDeleterIS3_EEEE", "bool cv::createEncodeHuffmanTable(const int*, unsigned int*, int)", "bool cv::mjpeg::MotionJpegWriter::open(const cv::String&, double, cv::Size, bool)", "void cv::mjpeg::MotionJpegWriter::writeFrameData(const uchar*, int, int, int)", "N2cv13IVideoCaptureE", "N2cv6detail12PtrOwnerImplINS_17MotionJpegCaptureENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16AVIReadContainerENS_14DefaultDeleterIS2_EEEE", "N2cv17MotionJpegCaptureE", "N2cv6detail12PtrOwnerImplINS_16VideoInputStreamENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_9BitStreamENS_14DefaultDeleterIS2_EEEE", "void cv::BitStream::writeBlock()", "std::vector<char> cv::AVIReadContainer::readFrame(cv::frame_iterator)", "void cv::BitStream::putBytes(const uchar*, int)", "void cv::BitStream::patchInt(int, size_t)", "void cv::AVIWriteContainer::startWriteChunk(int)", "bool cv::AVIReadContainer::parseHdrlList(cv::Codecs)", "void cv::imshow(const cv::String&, const cv::ogl::Texture2D&)", "void cv::setTrackbarMin(const cv::String&, const cv::String&, int)", "int cv::getMouseWheelDelta(int)", "int cv::waitKey(int)", "void cv::moveWindow(const cv::String&, int, int)", "void cv::displayStatusBar(const cv::String&, const cv::String&, int)", "int cv::waitKeyEx(int)", "int cv::startLoop(int (*)(int, char**), int, char**)", "void cvSetOpenGlContext(const char*)", "void cv::setOpenGlContext(const cv::String&)", "int cv::getTrackbarPos(const cv::String&, const cv::String&)", "void cvSetOpenGlDrawCallback(const char*, CvOpenGlDrawCallback, void*)", "void cv::namedWindow(const cv::String&, int)", "int cv::createTrackbar(const cv::String&, const cv::String&, int*, int, cv::TrackbarCallback, void*)", "void cv::destroyWindow(const cv::String&)", "void cv::destroyAllWindows()", "void cv::saveWindowParameters(const cv::String&)", "void cv::setMouseCallback(const cv::String&, cv::MouseCallback, void*)", "void cv::updateWindow(const cv::String&)", "void cv::addText(const cv::Mat&, const cv::String&, cv::Point, const cv::String&, int, cv::Scalar, int, int, int)", "double cv::getWindowProperty(const cv::String&, int)", "void cv::setTrackbarPos(const cv::String&, const cv::String&, int)", "void cv::setWindowTitle(const cv::String&, const cv::String&)", "void cvUpdateWindow(const char*)", "void cv::addText(const cv::Mat&, const cv::String&, cv::Point, const cv::QtFont&)", "void cv::setWindowProperty(const cv::String&, int, double)", "void cv::imshow(const cv::String&, cv::InputArray)", "int cv::createButton(const cv::String&, cv::ButtonCallback, void*, int, bool)", "void cv::loadWindowParameters(const cv::String&)", "void cv::setTrackbarMax(const cv::String&, const cv::String&, int)", "void cv::resizeWindow(const cv::String&, const Size&)", "void cv::displayOverlay(const cv::String&, const cv::String&, int)", "void cv::setOpenGlDrawCallback(const cv::String&, cv::OpenGlDrawCallback, void*)", "cv::Rect cv::getWindowImageRect(const cv::String&)", "cv::QtFont cv::fontQt(const cv::String&, int, cv::Scalar, int, int, int)", "int cv::startWindowThread()", "void cv::resizeWindow(const cv::String&, int, int)", "void cv::stopLoop()", "virtual void cv::Feature2D::detect(cv::InputArrayOfArrays, std::vector<std::vector<cv::KeyPoint> >&, cv::InputArrayOfArrays)", "N2cv9Feature2DE", "virtual void cv::Feature2D::compute(cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray)", "virtual void cv::Feature2D::compute(cv::InputArrayOfArrays, std::vector<std::vector<cv::KeyPoint> >&, cv::OutputArrayOfArrays)", "virtual void cv::Feature2D::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "virtual void cv::Feature2D::detect(cv::InputArray, std::vector<cv::KeyPoint>&, cv::InputArray)", "N2cv6detail12PtrOwnerImplINS_9BFMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17FlannBasedMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann5IndexENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann11IndexParamsENS_14DefaultDeleterIS3_EEEE", "const cv::Mat cv::DescriptorMatcher::DescriptorCollection::getDescriptor(int) const", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArrayOfArrays, bool)", "void cv::convertMatches(const std::vector<std::vector<cv::DMatch> >&, std::vector<cv::DMatch>&)", "virtual cv::Ptr<cv::DescriptorMatcher> cv::FlannBasedMatcher::clone(bool) const", "static cv::Ptr<cv::DescriptorMatcher> cv::DescriptorMatcher::create(int)", "cv::FlannBasedMatcher::FlannBasedMatcher(const cv::Ptr<cv::flann::IndexParams>&, const cv::Ptr<cv::flann::SearchParams>&)", "void cv::DescriptorMatcher::checkMasks(cv::InputArrayOfArrays, int) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = unsigned char]", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArray, bool) const", "virtual void cv::FlannBasedMatcher::train()", "void cv::DescriptorMatcher::DescriptorCollection::set(const std::vector<cv::Mat>&)", "virtual void cv::FlannBasedMatcher::read(const cv::FileNode&)", "N2cv17DescriptorMatcherE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "static cv::Ptr<cv::DescriptorMatcher> cv::DescriptorMatcher::create(const cv::String&)", "void cv::DescriptorMatcher::match(cv::InputArray, std::vector<cv::DMatch>&, cv::InputArrayOfArrays)", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArrayOfArrays, bool)", "void cv::DescriptorMatcher::DescriptorCollection::getLocalIdx(int, int&, int&) const", "virtual void cv::FlannBasedMatcher::knnMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArrayOfArrays, bool)", "virtual void cv::FlannBasedMatcher::add(cv::InputArrayOfArrays)", "N2cv17FlannBasedMatcherE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = short unsigned int]", "virtual void cv::BFMatcher::radiusMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArrayOfArrays, bool)", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArray, bool) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = char]", "const cv::Mat cv::DescriptorMatcher::DescriptorCollection::getDescriptor(int, int) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::BFMatcher::knnMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArrayOfArrays, bool)", "N2cv17DescriptorMatcher20DescriptorCollectionE", "void cv::DescriptorMatcher::match(cv::InputArray, cv::InputArray, std::vector<cv::DMatch>&, cv::InputArray) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = short int]", "N2cv9BFMatcherE", "virtual void cv::FlannBasedMatcher::radiusMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArrayOfArrays, bool)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::DescriptorMatcher::add(cv::InputArrayOfArrays)", "N2cv6detail12PtrOwnerImplINS_10BRISK_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv10BRISK_ImplE", "void cv::BRISK_Impl::generateKernel(const std::vector<float>&, const std::vector<int>&, float, float, const std::vector<int>&)", "N2cv5BRISKE", "@Astatic void cv::BriskLayer::halfsample(const cv::Mat&, cv::Mat&)", "static void cv::BriskLayer::twothirdsample(const cv::Mat&, cv::Mat&)", "float cv::BriskScaleSpace::getScoreMaxAbove(int, int, int, int, bool&, float&, float&) const", "void cv::BRISK_Impl::computeDescriptorsAndOrOrientation(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool, bool, bool) const", "N2cv9KAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_9KAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv4KAZEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::KAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::makeAgastOffsets(int*, int, int)", "void cv::BOWTrainer::add(const cv::Mat&)", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, std::vector<std::vector<int> >*, cv::Mat*)", "N2cv16BOWKMeansTrainerE", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, cv::OutputArray, std::vector<std::vector<int> >*)", "virtual cv::Mat cv::BOWKMeansTrainer::cluster(const cv::Mat&) const", "N2cv10BOWTrainerE", "N2cv25BOWImgDescriptorExtractorE", "virtual cv::Mat cv::BOWKMeansTrainer::cluster() const", "void cv::drawMatches(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, const std::vector<std::vector<cv::DMatch> >&, cv::InputOutputArray, const Scalar&, const Scalar&, const std::vector<std::vector<char> >&, int)", "void cv::drawKeypoints(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputOutputArray, const Scalar&, int)", "void cv::_prepareImgAndDrawKeypoints(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputOutputArray, cv::Mat&, cv::Mat&, const Scalar&, int)", "void cv::drawMatches(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, const std::vector<cv::DMatch>&, cv::InputOutputArray, const Scalar&, const Scalar&, const std::vector<char>&, int)", "void cv::_drawKeypoint(cv::InputOutputArray, const cv::KeyPoint&, const Scalar&, int)", "N2cv25AgastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_25AgastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::AgastFeatureDetector_Impl::detect(cv::InputArray, std::vector<cv::KeyPoint>&, cv::InputArray)", "void cv::AGAST(cv::InputArray, std::vector<cv::KeyPoint>&, int, bool, int)", "N2cv20AgastFeatureDetectorE", "void cv::AGAST(cv::InputArray, std::vector<cv::KeyPoint>&, int, bool)", "static void cv::KeyPointsFilter::runByKeypointSize(std::vector<cv::KeyPoint>&, float, float)", "static void cv::KeyPointsFilter::runByPixelsMask(std::vector<cv::KeyPoint>&, const cv::Mat&)", "N2cv17GFTTDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_17GFTTDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv12GFTTDetectorE", "virtual void cv::GFTTDetector_Impl::detect(cv::InputArray, std::vector<cv::KeyPoint>&, cv::InputArray)", "N2cv6detail12PtrOwnerImplINS_8ORB_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv3ORBE", "N2cv8ORB_ImplE", "static cv::Ptr<cv::ORB> cv::ORB::create(int, float, int, int, int, int, int, int, int)", "virtual void cv::ORB_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "virtual void cv::ORB_Impl::setFirstLevel(int)", "void cv::HarrisResponses(const cv::Mat&, const std::vector<cv::Rect_<int> >&, std::vector<cv::KeyPoint>&, int, float)", "void cv::computeOrbDescriptors(const cv::Mat&, const std::vector<cv::Rect_<int> >&, const std::vector<float>&, std::vector<cv::KeyPoint>&, cv::Mat&, const std::vector<cv::Point_<int> >&, int, int)", "void cv::makeOffsets(int*, int, int)", "N2cv24FastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_24FastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::FAST(cv::InputArray, std::vector<cv::KeyPoint>&, int, bool)", "virtual void cv::FastFeatureDetector_Impl::detect(cv::InputArray, std::vector<cv::KeyPoint>&, cv::InputArray)", "N2cv19FastFeatureDetectorE", "void cv::FAST(cv::InputArray, std::vector<cv::KeyPoint>&, int, bool, int)", "N3tbb10interface98internal13finish_reduceI20IntersectAreaCounterEE", "N3tbb10interface98internal12start_reduceINS_13blocked_rangeIiEE20IntersectAreaCounterKNS_16auto_partitionerEEE", "static void EllipticKeyPoint::convert(const std::vector<cv::KeyPoint>&, std::vector<EllipticKeyPoint>&)", "int cv::getNearestPoint(const std::vector<cv::Point_<float> >&, float)", "static void EllipticKeyPoint::calcProjection(const std::vector<EllipticKeyPoint>&, const cv::Mat_<double>&, std::vector<EllipticKeyPoint>&)", "float cv::getRecall(const std::vector<cv::Point_<float> >&, float)", "void cv::computeRecallPrecisionCurve(const std::vector<std::vector<cv::DMatch> >&, const std::vector<std::vector<unsigned char> >&, std::vector<cv::Point_<float> >&)", "void cv::evaluateFeatureDetector(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<cv::KeyPoint>*, std::vector<cv::KeyPoint>*, float&, int&, const cv::Ptr<cv::Feature2D>&)", "void IntersectAreaCounter::operator()(const BlockedRange&)", "N2cv10AKAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_10AKAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv5AKAZEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::AKAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "N2cv6detail12PtrOwnerImplINS_9MSER_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv4MSERE", "N2cv9MSER_ImplE", "void cv::MSER_Impl::pass(const cv::Mat&, std::vector<std::vector<cv::Point_<int> > >&, std::vector<cv::Rect_<int> >&, cv::Size, const int*, int)", "virtual void cv::MSER_Impl::detectRegions(cv::InputArray, std::vector<std::vector<cv::Point_<int> > >&, std::vector<cv::Rect_<int> >&)", "N2cv6detail12PtrOwnerImplINS_22SimpleBlobDetectorImplENS_14DefaultDeleterIS2_EEEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::SimpleBlobDetectorImpl::detect(cv::InputArray, std::vector<cv::KeyPoint>&, cv::InputArray)", "N2cv18SimpleBlobDetectorE", "virtual void cv::SimpleBlobDetectorImpl::findBlobs(cv::InputArray, cv::InputArray, std::vector<cv::SimpleBlobDetectorImpl::Center>&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv22SimpleBlobDetectorImplE", "N2cv23Nld_Step_Scalar_InvokerE", "void cv::compute_derivative_kernels(cv::OutputArray, cv::OutputArray, int, int, int)", "float cv::compute_k_percentile(const cv::Mat&, float, float, int, int, int)", "void cv::nld_step_scalar(cv::Mat&, const cv::Mat&, cv::Mat&, float)", "void cv::pm_g2(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "void cv::KAZEFeatures::Feature_Description(std::vector<cv::KeyPoint>&, cv::Mat&)", "int cv::KAZEFeatures::Create_Nonlinear_Scale_Space(const cv::Mat&)", "N2cv28NonLinearScalarDiffusionStepE", "N2cv26DeterminantHessianResponseINS_3MatEEE", "N2cv22FindKeypointsSameScaleE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "N2cv26ComputeKeypointOrientationE", "void cv::AKAZEFeatures::Allocate_Memory_Evolution()", "void cv::compute_determinant(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, float)", "void cv::MSURF_Descriptor_64_Invoker::Get_MSURF_Descriptor_64(const cv::KeyPoint&, float*, int) const", "void cv::MLDB_Descriptor_Subset_Invoker::Get_MLDB_Descriptor_Subset(const cv::KeyPoint&, unsigned char*, int) const", "void cv::AKAZEFeatures::Feature_Detection(std::vector<cv::KeyPoint>&)", "void cv::AKAZEFeatures::Compute_Descriptors(std::vector<cv::KeyPoint>&, cv::OutputArray)", "void cv::quantized_counting_sort(const float*, int, float, int, int*, int*)", "void cv::Upright_MLDB_Full_Descriptor_Invoker::Get_Upright_MLDB_Full_Descriptor(const cv::KeyPoint&, unsigned char*, int) const", "void cv::Upright_MLDB_Descriptor_Subset_Invoker::Get_Upright_MLDB_Descriptor_Subset(const cv::KeyPoint&, unsigned char*, int) const", "void cv::AKAZEFeatures::Find_Scale_Space_Extrema(std::vector<cv::Mat>&)", "float cv::compute_kcontrast(cv::InputArray, cv::InputArray, float, int)", "void cv::generateDescriptorSubsample(cv::Mat&, cv::Mat&, int, int, int)", "cv::Sample_Derivative_Response_Radius6(const cv::Mat&, const cv::Mat&, int, int, int, float*, float*)::gtable::gtable()", "void cv::MSURF_Upright_Descriptor_64_Invoker::Get_MSURF_Upright_Descriptor_64(const cv::KeyPoint&, float*, int) const", "void cv::MLDB_Full_Descriptor_Invoker::MLDB_Fill_Values(float*, int, int, float, float, float, float, float) const", "void cv::create_nonlinear_scale_space(cv::InputArray, const cv::AKAZEOptions&, const std::vector<std::vector<float> >&, std::vector<cv::Evolution<T> >&) [with MatType = cv::Mat; cv::InputArray = const cv::_InputArray&]", "void cv::MLDB_Full_Descriptor_Invoker::Get_MLDB_Full_Descriptor(const cv::KeyPoint&, unsigned char*, int) const", "void cv::non_linear_diffusion_step(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "void cv::compute_diffusivity(cv::InputArray, cv::InputArray, cv::OutputArray, float, int)", "void cv::AKAZEFeatures::Do_Subpixel_Refinement(std::vector<cv::Mat>&, std::vector<cv::KeyPoint>&)", "void cv::Sample_Derivative_Response_Radius6(const cv::Mat&, const cv::Mat&, int, int, int, float*, float*)", "void cv::nld_step_scalar_one_lane(const cv::Mat&, const cv::Mat&, cv::Mat&, float, int, int)", "void cv::Compute_Determinant_Hessian_Response(cv::Pyramid&)", "int checkChessboardBinary(const cv::Mat&, const Size&)", "int checkChessboard(const cv::Mat&, const Size&)", "bool cv::find4QuadCornerSubpix(cv::InputArray, cv::InputOutputArray, cv::Size)", "void cv::findCorner(const std::vector<cv::Point_<float> >&, cv::Point2f, cv::Point2f&)", "CvPOSITObject* cvCreatePOSITObject(CvPoint3D32f*, int)", "void cvPOSIT(CvPOSITObject*, CvPoint2D32f*, double, CvTermCriteria, float*, float*)", "N2cv19PointSetRegistrator8CallbackE", "N2cv17PnPRansacCallbackE", "N2cv6detail12PtrOwnerImplINS_17PnPRansacCallbackENS_14DefaultDeleterIS2_EEEE", "int cv::solveP3P(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int)", "bool cv::solvePnP(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int)", "bool cv::solvePnPRansac(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int, float, double, cv::OutputArray, int)", "N2cv13StereoMatcherE", "N2cv8StereoBME", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "N2cv12StereoBMImplE", "N2cv6detail12PtrOwnerImplINS_12StereoBMImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::StereoBMImpl::read(const cv::FileNode&)", "virtual void cv::StereoBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::FindStereoCorrespInvoker::FindStereoCorrespInvoker(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::StereoBMParams*, int, size_t, bool, cv::Rect, cv::Mat&, cv::Mat&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv8LMSolver8CallbackE", "N2cv19PointSetRegistratorE", "N2cv25RANSACPointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "N2cv25Affine3DEstimatorCallbackE", "N2cv25Affine2DEstimatorCallbackE", "N2cv32AffinePartial2DEstimatorCallbackE", "N2cv22Affine2DRefineCallbackE", "N2cv29AffinePartial2DRefineCallbackE", "N2cv6detail12PtrOwnerImplINS_25RANSACPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24LMeDSPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine3DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine2DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22Affine2DRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_32AffinePartial2DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29AffinePartial2DRefineCallbackENS_14DefaultDeleterIS2_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "cv::Mat cv::estimateAffine2D(cv::InputArray, cv::InputArray, cv::OutputArray, int, double, size_t, double, size_t)", "virtual bool cv::AffinePartial2DRefineCallback::compute(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "bool cv::RANSACPointSetRegistrator::getSubset(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, cv::RNG&, int) const", "virtual void cv::Affine2DEstimatorCallback::computeError(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray) const", "virtual void cv::Affine3DEstimatorCallback::computeError(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray) const", "virtual bool cv::LMeDSPointSetRegistrator::run(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "virtual bool cv::RANSACPointSetRegistrator::run(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "cv::Mat cv::estimateAffinePartial2D(cv::InputArray, cv::InputArray, cv::OutputArray, int, double, size_t, double, size_t)", "virtual bool cv::Affine3DEstimatorCallback::checkSubset(cv::InputArray, cv::InputArray, int) const", "int cv::RANSACPointSetRegistrator::findInliers(const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, double) const", "int cv::RANSACUpdateNumIters(double, double, int, int)", "virtual bool cv::Affine2DRefineCallback::compute(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "int cv::estimateAffine3D(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, double)", "N2cv8LMSolverE", "N2cv12LMSolverImplE", "N2cv6detail12PtrOwnerImplINS_12LMSolverImplENS_14DefaultDeleterIS2_EEEE", "virtual int cv::LMSolverImpl::run(cv::InputOutputArray) const", "int cvFindFundamentalMat(const CvMat*, const CvMat*, CvMat*, int, double, double, CvMat*)", "bool CvLevMarq::updateAlt(const CvMat*&, CvMat*&, CvMat*&, double*&)", "void cvComputeCorrespondEpilines(const CvMat*, int, const CvMat*, CvMat*)", "void cvConvertPointsHomogeneous(const CvMat*, CvMat*)", "void cv::drawChessboardCorners(cv::InputOutputArray, cv::Size, cv::InputArray, bool)", "int icvGenerateQuads(CvCBQuad**, CvCBCorner**, CvMemStorage*, const cv::Mat&, int, int*)", "bool cv::findCirclesGrid2(cv::InputArray, cv::Size, cv::OutputArray, int, const cv::Ptr<cv::Feature2D>&, cv::CirclesGridFinderParameters2)", "bool cv::findChessboardCorners(cv::InputArray, cv::Size, cv::OutputArray, int)", "int cvFindChessboardCorners(const void*, CvSize, CvPoint2D32f*, int*, int)", "bool icvBinarizationHistogramBased(cv::Mat&)", "void cvDrawChessboardCorners(CvArr*, CvSize, CvPoint2D32f*, int, int)", "N2cv27HomographyEstimatorCallbackE", "N2cv24HomographyRefineCallbackE", "N2cv19FMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_27HomographyEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24HomographyRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19FMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::computeCorrespondEpilines(cv::InputArray, int, cv::InputArray, cv::OutputArray)", "static void cv::SVD::compute(const cv::Matx<_Tp, m, n>&, cv::Matx<_Tp, nm, 1>&, cv::Matx<_Tp, m, l>&, cv::Matx<_Tp, m, n>&) [with _Tp = double; int m = 3; int n = 3; int nm = 3]", "double cv::sampsonDistance(cv::InputArray, cv::InputArray, cv::InputArray)", "int cv::run8Point(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void cv::convertPointsToHomogeneous(cv::InputArray, cv::OutputArray)", "void cv::convertPointsFromHomogeneous(cv::InputArray, cv::OutputArray)", "virtual bool cv::HomographyRefineCallback::compute(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "cv::Mat cv::findHomography(cv::InputArray, cv::InputArray, int, double, cv::OutputArray, int, double)", "cv::Mat cv::findFundamentalMat(cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "void cv::convertPointsHomogeneous(cv::InputArray, cv::OutputArray)", "bool p3p::solve(cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&)", "N2cv10StereoSGBME", "N2cv16CalcVerticalSumsE", "N2cv18CalcHorizontalSumsE", "N2cv14StereoSGBMImplE", "N2cv6detail12PtrOwnerImplINS_14StereoSGBMImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::StereoSGBMImpl::read(const cv::FileNode&)", "N2cv16SGBM3WayMainLoopE", "void cv::validateDisparity(cv::InputOutputArray, cv::InputArray, int, int, int)", "void cv::computeDisparitySGBM_HH4(const cv::Mat&, const cv::Mat&, cv::Mat&, const cv::StereoSGBMParams&, cv::Mat&)", "void cv::computeDisparitySGBM(const cv::Mat&, const cv::Mat&, cv::Mat&, const cv::StereoSGBMParams&, cv::Mat&)", "void cv::filterSpeckles(cv::InputOutputArray, double, int, double, cv::InputOutputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::StereoSGBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::SGBM3WayMainLoop::SGBM3WayMainLoop(cv::Mat*, const cv::Mat&, const cv::Mat&, cv::Mat*, const cv::StereoSGBMParams&, cv::PixType*, int, int)", "void cvTriangulatePoints(CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "void cvCorrectMatches(CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "void cv::triangulatePoints(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "static void cv::SVD::compute(const cv::Matx<_Tp, m, n>&, cv::Matx<_Tp, nm, 1>&, cv::Matx<_Tp, m, l>&, cv::Matx<_Tp, m, n>&) [with _Tp = double; int m = 4; int n = 4; int nm = 4]", "void cv::correctMatches(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::fisheye::stereoRectify(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const Size&, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, const Size&, double, double)", "void cv::fisheye::undistortImage(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, const Size&)", "void cv::internal::InitExtrinsics(const cv::Mat&, const cv::Mat&, const cv::internal::IntrinsicParams&, cv::Mat&, cv::Mat&)", "void cv::internal::ComputeJacobians(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, cv::InputArray, cv::InputArray, const int&, const double&, cv::Mat&, cv::Mat&)", "cv::Vec3d cv::internal::median3d(cv::InputArray)", "void cv::{anonymous}::subMatrix(const cv::Mat&, cv::Mat&, const std::vector<unsigned char>&, const std::vector<unsigned char>&)", "void cv::internal::EstimateUncertainties(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, cv::InputArray, cv::InputArray, cv::internal::IntrinsicParams&, cv::Vec2d&, double, int, double&)", "cv::Mat::Mat(int, int, int, void*, size_t)", "cv::internal::IntrinsicParams& cv::internal::IntrinsicParams::operator=(const cv::Mat&)", "cv::Mat::operator cv::Vec<_Tp, m>() const [with _Tp = double; int n = 3]", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = float; int m = 3; int n = 3]", "void cv::fisheye::estimateNewCameraMatrixForUndistortRectify(cv::InputArray, cv::InputArray, const Size&, cv::InputArray, cv::OutputArray, double, const Size&, double)", "void cv::internal::ComputeExtrinsicRefine(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::internal::IntrinsicParams&, double)", "cv::Mat cv::internal::ComputeHomography(cv::Mat, cv::Mat)", "void cv::internal::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, const cv::internal::IntrinsicParams&, cv::OutputArray)", "cv::internal::IntrinsicParams cv::internal::IntrinsicParams::operator+(const cv::Mat&)", "void cv::internal::dAB(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::fisheye::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const Size&, int, cv::OutputArray, cv::OutputArray)", "void cv::internal::CalibrateExtrinsics(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, int, double, cv::InputOutputArray, cv::InputOutputArray)", "double cv::fisheye::calibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const Size&, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "double cv::fisheye::stereoCalibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "void cv::fisheye::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, const Affine3d&, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "void cv::fisheye::distortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, double)", "cv::Mat cv::internal::NormalizePixels(const cv::Mat&, const cv::internal::IntrinsicParams&)", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = double; int m = 3; int n = 3]", "double cv::internal::median(const cv::Mat&)", "bool cv::ap3p::solve(cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&)", "int cv::ap3p::solve(std::vector<cv::Mat>&, std::vector<cv::Mat>&, const cv::Mat&, const cv::Mat&)", "cv::Mat::Mat(int, int, int, void*, size_t)", "bool CirclesGridFinder::findHoles()", "size_t CirclesGridFinder::findLongestPath(std::vector<Graph>&, Path&)", "void CirclesGridClusterFinder::findOutsideCorners(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "void Graph::floydWarshall(cv::Mat&, int) const", "static void CirclesGridFinder::insertWinner(float, float, float, bool, const std::vector<unsigned int>&, const std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&)", "static cv::Mat CirclesGridFinder::rectifyGrid(cv::Size, const std::vector<cv::Point_<float> >&, const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "CirclesGridFinder::CirclesGridFinder(cv::Size, const std::vector<cv::Point_<float> >&, const cv::CirclesGridFinderParameters&)", "size_t Graph::getDegree(size_t) const", "void CirclesGridFinder::getCornerSegments(const std::vector<std::vector<unsigned int> >&, std::vector<std::vector<CirclesGridFinder::Segment> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&) const", "void Graph::addEdge(size_t, size_t)", "void CirclesGridFinder::filterOutliersByDensity(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "void computePredecessorMatrix(const cv::Mat&, int, cv::Mat&)", "bool Graph::areVerticesAdjacent(size_t, size_t) const", "const Neighbors& Graph::getNeighbors(size_t) const", "void CirclesGridClusterFinder::findCorners(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "void CirclesGridFinder::findCandidateHoles(std::vector<unsigned int>&, std::vector<unsigned int>&, bool, cv::Point2f, std::vector<unsigned int>&, std::vector<unsigned int>&)", "void CirclesGridFinder::findBasis(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&, std::vector<Graph>&)", "void Graph::removeEdge(size_t, size_t)", "bool CirclesGridFinder::isDetectionCorrect()", "size_t CirclesGridFinder::getFirstCorner(std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&) const", "void CirclesGridFinder::findCandidateLine(std::vector<unsigned int>&, size_t, bool, cv::Point2f, std::vector<unsigned int>&)", "void Graph::addVertex(size_t)", "float CirclesGridFinder::computeGraphConfidence(const std::vector<Graph>&, bool, const std::vector<unsigned int>&, const std::vector<unsigned int>&)", "void CirclesGridFinder::getAsymmetricHoles(std::vector<cv::Point_<float> >&) const", "void cv::reprojectImageTo3D(cv::InputArray, cv::OutputArray, cv::InputArray, bool, int)", "void cv::decomposeProjectionMatrix(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "cv::Mat cv::prepareDistCoeffs(cv::Mat&, int, int)", "cv::Vec3d cv::RQDecomp3x3(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "void cv::matMulDeriv(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::collectCalibrationData(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Mat&, cv::Mat&, cv::Mat*, cv::Mat&)", "void cvDecomposeProjectionMatrix(const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvPoint3D64f*)", "void cvRQDecomp3x3(const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvPoint3D64f*)", "void cvProjectPoints2(const CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, double)", "void cv::projectPoints(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double)", "cv::Mat::Mat(int, int, int, void*, size_t)", "bool cv::stereoRectifyUncalibrated(cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, cv::OutputArray, cv::OutputArray, double)", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "cv::Mat cv::initCameraMatrix2D(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, double)", "void cvFindExtrinsicCameraParams2(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, int)", "int cvStereoRectifyUncalibrated(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, CvMat*, double)", "cv::Mat cv::getOptimalNewCameraMatrix(cv::InputArray, cv::InputArray, cv::Size, double, cv::Size, cv::Rect*, bool)", "int cvRodrigues2(const CvMat*, CvMat*, CvMat*)", "void cvReprojectImageTo3D(const CvArr*, CvArr*, const CvMat*, int)", "void cvInitIntrinsicParams2D(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, double)", "void cv::calibrationMatrixValues(cv::InputArray, cv::Size, double, double, double&, double&, double&, cv::Point2d&, double&)", "double cvCalibrateCamera2Internal(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, int, CvTermCriteria)", "void cv::adjust3rdMatrix(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "double cvStereoCalibrateImpl(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvSize, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, int, CvTermCriteria)", "void cvCalibrationMatrixValues(const CvMat*, CvSize, double, double, double*, double*, double*, CvPoint2D64f*, double*)", "void cvComposeRT(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "void cvCalcMatMulDeriv(const CvMat*, const CvMat*, CvMat*, CvMat*)", "void cv::Rodrigues(cv::InputArray, cv::OutputArray, cv::OutputArray)", "N2cv6detail12PtrOwnerImplINS_23HomographyDecomposition21HomographyDecompInriaENS_14DefaultDeleterIS3_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "N2cv23HomographyDecomposition16HomographyDecompE", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = double; int m = 3; int n = 1]", "int cv::decomposeHomographyMat(cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "void cvFindStereoCorrespondenceBM(const CvArr*, const CvArr*, CvArr*, CvStereoBMState*)", "void cvReleaseStereoBMState(CvStereoBMState**)", "N2cv8RHO_HESTE", "N2cv6detail12PtrOwnerImplINS_13RHO_HEST_REFCENS_14DefaultDeleterIS2_EEEE", "N2cv13RHO_HEST_REFCE", "N2cv19EMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_19EMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "cv::Mat::Mat(int, int, int, void*, size_t)", "int cv::recoverPose(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, cv::InputOutputArray, cv::OutputArray)", "void cv::decomposeEssentialMat(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, double, cv::Point2d, int, double, double, cv::OutputArray)", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "N3tbb8internal7no_copyE", "N3rml16versioned_objectE", "N3rml6clientE", "N3tbb8internal3rml10tbb_clientE", "N3tbb8internal6marketE", "N3tbb10interface58internal9task_baseE", "N3tbb4taskE", "N3tbb10empty_taskE", "N3tbb10interface78internal14delegated_taskE", "N3tbb10interface78internal18delegated_functionINS_4flow11interface105graph13spawn_functorEvEE", "N3tbb8internal13function_taskINS_4flow11interface105graph13spawn_functorEEE", "N3tbb10interface78internal9wait_taskE", "N3tbb8internal15scheduler_stateE", "N3tbb8internal19intrusive_list_nodeE", "N3rml3jobE", "N3tbb8internal9schedulerE", "N3tbb13tbb_exceptionE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb8internal17generic_schedulerE", "N3tbb13improper_lockE", "N3tbb12missing_waitE", "TBB: VERSION\t\t2018.0\nTBB: INTERFACE VERSION\t10001\nTBB: BUILD_DATE\t\tFeb 23 201812:13:32\nTBB: BUILD_PACKAGE\tOpenCV 3.4.1\nTBB: BUILD_HOST \tLinux 4.13.0-32-generic x86_64\nTBB: BUILD_TARGET\tLinux 1 armv5te\nTBB: BUILD_COMPILER\t/usr/bin/ccache (ver 4.8)\nTBB: BUILD_COMMAND\tuse cv::getBuildInformation() for details\nTBB: TBB_USE_DEBUG\t0\nTBB: TBB_USE_ASSERT\t0\n", "N3tbb27invalid_multiple_schedulingE", "N3tbb10user_abortE", "N3tbb14bad_last_allocE", "N3tbb8internal15control_storageE", "N3tbb8internal11padded_baseINS0_15control_storageELj128ELj16EEE", "N3tbb8internal6paddedINS0_15control_storageELj128EEE", "N3tbb8internal27allowed_parallelism_controlE", "N3tbb8internal18stack_size_controlE", "N3rml6serverE", "N3tbb8internal3rml10tbb_serverE", "N3tbb8internal3rml14private_serverE", "N6google8protobuf2io25CopyingInputStreamAdaptorE", "N6google8protobuf2io18CopyingInputStreamE", "N6google8protobuf2io16ArrayInputStreamE", "N6google8protobuf2io17ArrayOutputStreamE", "N6google8protobuf2io18StringOutputStreamE", "N6google8protobuf11MessageLiteE", "N6google8protobuf7ClosureE", "N6google8protobuf14FatalExceptionE", "N6google8protobuf8internal16FunctionClosure0E", "N6google8protobuf8internal12FieldSkipperE", "N6google8protobuf17DescriptorBuilder17OptionInterpreter21AggregateOptionFinderE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_20FileDescriptorTablesEEE", "N6google8protobuf8internal16FunctionClosure1IPSt4pairIPKNS0_20FileDescriptorTablesEPKNS0_14SourceCodeInfoEEEE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_14FileDescriptorEEE", "N6google8protobuf8internal16FunctionClosure1IPNS1_14LazyDescriptorEEE", "*N6google8protobuf12_GLOBAL__N_123AggregateErrorCollectorE", "N6google8protobuf23SourceCodeInfo_LocationE", "N6google8protobuf14ServiceOptionsE", "N6google8protobuf12FieldOptionsE", "N6google8protobuf17FileDescriptorSetE", "N6google8protobuf28UninterpretedOption_NamePartE", "N6google8protobuf37EnumDescriptorProto_EnumReservedRangeE", "N6google8protobuf19EnumDescriptorProtoE", "N6google8protobuf14MessageOptionsE", "N6google8protobuf21ExtensionRangeOptionsE", "N6google8protobuf13MethodOptionsE", "N6google8protobuf19FileDescriptorProtoE", "N6google8protobuf24EnumValueDescriptorProtoE", "N6google8protobuf15DescriptorProtoE", "N6google8protobuf19UninterpretedOptionE", "N6google8protobuf29DescriptorProto_ReservedRangeE", "N6google8protobuf30DescriptorProto_ExtensionRangeE", "N6google8protobuf14SourceCodeInfoE", "N6google8protobuf28GeneratedCodeInfo_AnnotationE", "N6google8protobuf11FileOptionsE", "N6google8protobuf20OneofDescriptorProtoE", "N6google8protobuf16EnumValueOptionsE", "N6google8protobuf11EnumOptionsE", "N6google8protobuf21MethodDescriptorProtoE", "N6google8protobuf17GeneratedCodeInfoE", "N6google8protobuf20FieldDescriptorProtoE", "N6google8protobuf12OneofOptionsE", "N6google8protobuf25EncodedDescriptorDatabaseE", "N6google8protobuf18DescriptorDatabaseE", "N6google8protobuf21DynamicMessageFactoryE", "N6google8protobuf14DynamicMessageE", "N6google8protobuf16RepeatedPtrFieldINS0_11MessageLiteEEE", "N6google8protobuf8internal29DescriptorPoolExtensionFinderE", "N6google8protobuf8internal26GeneratedMessageReflectionE", "N6google8protobuf2io14ErrorCollectorE", "N6google8protobuf2io18IstreamInputStreamE", "N6google8protobuf2io18IstreamInputStream25CopyingIstreamInputStreamE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINS0_6MapKeyENS0_11MapValueRefEEE", "N6google8protobuf8internal15DynamicMapFieldE", "N6google8protobuf8internal12MapFieldBaseE", "N6google8protobuf8internal33RandomAccessRepeatedFieldAccessorE", "N6google8protobuf8internal16MapFieldAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperISsEE", "N6google8protobuf8internal30RepeatedPtrFieldStringAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINS0_7MessageEEE", "N6google8protobuf8internal31RepeatedPtrFieldMessageAccessorE", "N6google8protobuf8internal20RepeatedFieldWrapperIiEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIiEE", "N6google8protobuf8internal20RepeatedFieldWrapperIjEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIjEE", "N6google8protobuf8internal20RepeatedFieldWrapperIxEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIxEE", "N6google8protobuf8internal20RepeatedFieldWrapperIyEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIyEE", "N6google8protobuf8internal20RepeatedFieldWrapperIfEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIfEE", "N6google8protobuf8internal20RepeatedFieldWrapperIdEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIdEE", "N6google8protobuf8internal20RepeatedFieldWrapperIbEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIbEE", "N6google8protobuf7MessageE", "N6google8protobuf10ReflectionE", "*N6google8protobuf12_GLOBAL__N_123GeneratedMessageFactoryE", "N6google8protobuf14MessageFactoryE", "N6google8protobuf8internal21RepeatedFieldAccessorE", "N6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorE", "N6google8protobuf10TextFormat7Printer13TextGeneratorE", "N6google8protobuf10TextFormat17BaseTextGeneratorE", "N6google8protobuf10TextFormat21FastFieldValuePrinterE", "N6google8protobuf10TextFormat6FinderE", "N6google8protobuf8internal27UnknownFieldSetFieldSkipperE", "N6google8protobuf13RepeatedFieldIiEE", "N6google8protobuf13RepeatedFieldIxEE", "N6google8protobuf13RepeatedFieldIjEE", "N6google8protobuf13RepeatedFieldIyEE", "N6google8protobuf13RepeatedFieldIfEE", "N6google8protobuf13RepeatedFieldIdEE", "N6google8protobuf13RepeatedFieldIbEE", "N6google8protobuf16RepeatedPtrFieldISsEE", "N6google8protobuf8internal15ExtensionFinderE", "N6google8protobuf8internal24GeneratedExtensionFinderE", "N6google8protobuf2io20ZeroCopyOutputStreamE", "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899google.protobuf.Any", "type.googleprod.com/", "type.googleapis.com/", "WEBPVP8L", "0123456789ABCDEF0123456789ABCDEF", "for fields array", "_TIFFMergeFields", "TIFFReadDirectoryCheckOrder", "EstimateStripByteCounts", "TIFFFetchDirectory", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFReadDirectory", "MissingRequired", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagCheckedRational", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFRewriteDirectory", "TIFFWriteDirectoryTagData", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectorySec", "TIFFLinkDirectory", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFResetField", "BuildMapUaToAa", "initYCbCrConversion", "initCIELabConversion", "PhotometricInterpretation", "TIFFClientOpen", "TIFFFillTile", "TIFFFillStripPartial", "TIFFReadEncodedTile", "TIFFReadBufferSetup", "_TIFFReadEncodedTileAndAllocBuffer", "TIFFStartTile", "TIFFReadEncodedStrip", "TIFFReadEncodedStrip", "TIFFFillStrip", "TIFFStripSize", "TIFFScanlineSize64", "TIFFComputeStrip", "TIFFScanlineSize", "TIFFVStripSize64", "TIFFVStripSize", "TIFFTileRowSize", "TIFFVTileSize64", "TIFFTileSize", "TIFFWriteScanline", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "TIFFWriteEncodedStrip", "TIFFOpen", "JPEGPreEncode", "JPEGPreDecode", "JPEGFixupTagsSubsamplingSec", "JPEGFixupTagsSubsampling", "JPEGSetupEncode", "DumpModeDecode", "InitCCITTFax3", "Fax4Decode", "Fax3SetupState", "Fax3Decode1D", "Fax3Encode", "Fax3Decode2D", "Fax4Encode", "LogL16Encode", "LogLuvSetupDecode", "LogLuvDecode32", "LogL16InitState", "LogLuvSetupEncode", "LogL16Decode", "LogLuvEncode32", "TIFFInitSGILog", "LogLuvEncode24", "LogLuvInitState", "LogLuvVSetField", "LZWDecodeCompat", "LZWPreDecode", "LZWDecode", "LZWSetupEncode", "LZWSetupDecode", "TIFFInitLZW", "NeXTPreDecode", "NeXTDecode", "PackBitsDecode", "PredictorSetup", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecode", "ZIPSetupDecode", "ZIPPreDecode", "ZIPDecode", "ZIPSetupEncode", "TIFFInitZIP", "ZIPEncode", "ZIPPostEncode", "ZIPPreEncode", "ZIPVSetField", "N3Iex6ArgExcE", "N3Iex5IoExcE", "N3Iex7TypeExcE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf10OutputFileE", "N3Imf10OutputFile4DataE", "*N3Imf12_GLOBAL__N_114LineBufferTaskE", "N3Iex8InputExcE", "N3Iex8ErrnoExcE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Imf11StdIFStreamE", "N3Imf9AttributeE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeISsEE", "N3Imf14TypedAttributeISt6vectorISsSaISsEEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Iex7MathExcE", "N3Iex11OverflowExcE", "N3Imf10CompressorE", "N3Imf9InputFileE", "N3Imf9InputFile4DataE", "N3Imf13RleCompressorE", "*N3Imf12_GLOBAL__N_114LineBufferTaskE", "N3Imf17ScanLineInputFile4DataE", "N3Imf17ScanLineInputFileE", "N3Imf7OStreamE", "N3Imf7IStreamE", "N3Imf13ZipCompressorE", "N3Imf15OpaqueAttributeE", "N3Imf15Pxr24CompressorE", "N3Imf13PizCompressorE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "N3Iex7BaseExcE", "N9IlmThread5MutexE", "N9IlmThread9SemaphoreE", "N9IlmThread4TaskE", "*N9IlmThread12_GLOBAL__N_112WorkerThreadE", "N9IlmThread10ThreadPoolE", "N3Imf13B44CompressorE", "N3Imf14TiledInputFileE", "*N3Imf12_GLOBAL__N_114TileBufferTaskE", "N3Imf14TiledInputFile4DataE", "N9IlmThread6ThreadE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "N9__gnu_cxx29__concurrence_broadcast_errorE", "N9__gnu_cxx24__concurrence_wait_errorE", "St9type_info", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "PKDs", "PKDi", "PKDf", "PKDd", "PKDe", "PKDn", "N10__cxxabiv123__fundamental_type_infoE", "N10__cxxabiv115__forced_unwindE", "N10__cxxabiv119__foreign_exceptionE", "St9exception", "St13bad_exception", "St9bad_alloc", "St9basic_iosIcSt11char_traitsIcEE", "St13runtime_error", "St16invalid_argument", "St12out_of_range", "St11logic_error", "St11range_error", "St12length_error", "St15basic_streambufIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St8ios_base", "St9time_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St16__numpunct_cacheIcE", "St11__timepunctIcE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb1EE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8messagesIcE", "St8numpunctIcE", "St10moneypunctIcLb0EE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7collateIcE", "St10moneypunctIcLb1EE", "St18__moneypunct_cacheIcLb0EE", "St17__timepunct_cacheIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St7codecvtIcc9mbstate_tE", "St13basic_istreamIwSt11char_traitsIwEE", "St19basic_ostringstreamIcSt11char_traitsIcESaIcEE", "St19basic_istringstreamIcSt11char_traitsIcESaIcEE", "St18basic_stringstreamIcSt11char_traitsIcESaIcEE", "St15basic_stringbufIcSt11char_traitsIcESaIcEE", "St5ctypeIcE", "St5ctypeIwE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "NSt6locale5facetE", "St10moneypunctIwLb0EE", "St10moneypunctIwLb1EE", "St18__moneypunct_cacheIwLb0EE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7collateIwE", "St17__timepunct_cacheIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb1EE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St8messagesIwE", "St16__numpunct_cacheIwE", "St21__ctype_abstract_baseIwE", "St11__timepunctIwE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St8numpunctIwE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St14basic_ifstreamIcSt11char_traitsIcEE", "St13basic_filebufIcSt11char_traitsIcEE", "St14basic_ofstreamIcSt11char_traitsIcEE", "St10bad_typeid", "N10__cxxabiv117__pbase_type_infoE", "St8bad_cast", "*N12_GLOBAL__N_121system_error_categoryE", "*N12_GLOBAL__N_122generic_error_categoryE", "St14error_category"], "stringidentifiers": ["N2cv6detail8PtrOwnerE", "N2cv6detail12PtrOwnerImplINS_5flann17KDTreeIndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann12SearchParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_19javaFeatureDetectorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_23javaDescriptorExtractorENS_14DefaultDeleterIS2_EEEE", "std::exception", "cv::Exception", "vector::reserve", "pixels", "clear", "size", "nativeObj", "vector::_M_fill_insert", "bool", "unsigned", "float", "double", "string", "unknown", "true", "OPENCV_KMEANS_PARALLEL_GRANULARITY", "binary", "basic_string::substr", "base64", "type_id", "elem", "apos", "quot", "attrname", "opencv_storage", "OPENCV_LOG_LEVEL", "INFO", "DISABLED", "disabled", "FATAL", "fatal", "ERROR", "error", "WARNING", "warning", "WARNINGS", "warnings", "WARN", "warn", "info", "DEBUG", "debug", "VERBOSE", "verbose", "allocated", "ranges", "basic_string::at", "null", "false", "unnamed", "vector::_M_insert_aux", "num_components", "eigenvalues", "eigenvectors", "OPENCV_TEMP_PATH", "status", "Backtrace", "OPENCV_DUMP_CONFIG", "SSE2", "SSE3", "SSSE3", "POPCNT", "FP16", "AVX2", "FMA3", "AVX512F", "AVX512BW", "AVX512CD", "AVX512DQ", "AVX512ER", "AVX512IFMA", "AVX512PF", "AVX512VBMI", "AVX512VL", "NEON", "OpenCV", "OPENCV_CPU_DISABLE", "True", "TRUE", "False", "FALSE", "OPENCV_THREAD_POOL_ACTIVE_WAIT_PAUSE_LIMIT", "OPENCV_THREAD_POOL_ACTIVE_WAIT_WORKER", "OPENCV_THREAD_POOL_ACTIVE_WAIT_MAIN", "OPENCV_THREAD_POOL_ACTIVE_WAIT_THREADS_LIMIT", "HOST_ALLOC", "_sat", "noconvert", "CL_SUCCESS", "CL_DEVICE_NOT_FOUND", "CL_DEVICE_NOT_AVAILABLE", "CL_COMPILER_NOT_AVAILABLE", "CL_MEM_OBJECT_ALLOCATION_FAILURE", "CL_OUT_OF_RESOURCES", "CL_OUT_OF_HOST_MEMORY", "CL_PROFILING_INFO_NOT_AVAILABLE", "CL_MEM_COPY_OVERLAP", "CL_IMAGE_FORMAT_MISMATCH", "CL_IMAGE_FORMAT_NOT_SUPPORTED", "CL_BUILD_PROGRAM_FAILURE", "CL_MAP_FAILURE", "CL_MISALIGNED_SUB_BUFFER_OFFSET", "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST", "CL_COMPILE_PROGRAM_FAILURE", "CL_LINKER_NOT_AVAILABLE", "CL_LINK_PROGRAM_FAILURE", "CL_DEVICE_PARTITION_FAILED", "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", "CL_INVALID_VALUE", "CL_INVALID_DEVICE_TYPE", "CL_INVALID_PLATFORM", "CL_INVALID_DEVICE", "CL_INVALID_CONTEXT", "CL_INVALID_QUEUE_PROPERTIES", "CL_INVALID_COMMAND_QUEUE", "CL_INVALID_HOST_PTR", "CL_INVALID_MEM_OBJECT", "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR", "CL_INVALID_IMAGE_SIZE", "CL_INVALID_SAMPLER", "CL_INVALID_BINARY", "CL_INVALID_BUILD_OPTIONS", "CL_INVALID_PROGRAM", "CL_INVALID_PROGRAM_EXECUTABLE", "CL_INVALID_KERNEL_NAME", "CL_INVALID_KERNEL_DEFINITION", "CL_INVALID_KERNEL", "CL_INVALID_ARG_INDEX", "CL_INVALID_ARG_VALUE", "CL_INVALID_ARG_SIZE", "CL_INVALID_KERNEL_ARGS", "CL_INVALID_WORK_DIMENSION", "CL_INVALID_WORK_GROUP_SIZE", "CL_INVALID_WORK_ITEM_SIZE", "CL_INVALID_GLOBAL_OFFSET", "CL_INVALID_EVENT_WAIT_LIST", "CL_INVALID_EVENT", "CL_INVALID_OPERATION", "CL_INVALID_GL_OBJECT", "CL_INVALID_BUFFER_SIZE", "CL_INVALID_MIP_LEVEL", "CL_INVALID_GLOBAL_WORK_SIZE", "CL_INVALID_PROPERTY", "CL_INVALID_IMAGE_DESCRIPTOR", "CL_INVALID_COMPILER_OPTIONS", "CL_INVALID_LINKER_OPTIONS", "CL_INVALID_DEVICE_PARTITION_COUNT", "CL_INVALID_PIPE_SIZE", "CL_INVALID_DEVICE_QUEUE", "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR", "CL_PLATFORM_NOT_FOUND_KHR", "CL_INVALID_D3D10_DEVICE_KHR", "CL_INVALID_D3D10_RESOURCE_KHR", "CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR", "CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR", "COEFF", "OPENCV_OPENCL_FORCE", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "cl_khr_image2d_from_buffer", "vectorWidths", "cl_intel_subgroups", "Intel", "Iris", "OPENCV_OPENCL_DEVICE", "dgpu", "igpu", "accelerator", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "NULL", "uchar", "short", "uchar3", "int2", "int4", "char", "char3", "ushort", "ushort3", "int8", "short3", "int3", "int16", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "uchar2", "uchar4", "uchar8", "uchar16", "char2", "char4", "char8", "char16", "ushort2", "ushort4", "ushort8", "ushort16", "short2", "short4", "short8", "short16", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "OPENCV_TRACE", "OPENCV_TRACE_DEPTH_OPENCV", "OPENCV_TRACE_MAX_CHILDREN_OPENCV", "OPENCV_TRACE_MAX_CHILDREN", "OPENCV_TRACE_LOCATION", "OpenCVTrace", "GRAY", "BGRA", "OPENCV_FOR_THREADS_NUM", "parallel_for_body", "nstripes", "parallel_for", "name", "vectors", "values", "mean", "uint8", "uint16", "int32", "float32", "float64", "uint64", "data", "my_object", "format", "sizes", "rows", "cols", "header_dt", "rect", "width", "height", "color", "origin", "header_user_data", "oriented", "vertices", "edges", "flags", "vertex_count", "vertex_dt", "edge_count", "edge_dt", "level", "count", "recursive", "sequences", "planar", "interleaved", "layout", "curve", "closed", "hole", "untyped", "FLANN_INDEX", "algorithm", "trees", "branching", "iterations", "centers_init", "cb_index", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "key_size", "multi_probe_level", "filename", "checks", "sorted", "leaf_max_size", "reorder", "MXVNTMRMPNOPOSPURVTVVU", "PTRMRV", "NUSMSTRVPVOTOS", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MXOMOSPURVSVUUVSVM", "MXOVQVOROPPNRMSMUNVPVRTVVV", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "PUTMQV", "OVUMSSRUQVPVOUOT", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "LXPMNSNUOVRVTUUSWM", "MWQMWMNVTV", "MWNLVX", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "MWUQSPRPPQOSPURVSVUU", "MWOSUSTQRPPQOSPURVTV", "MWRPPQOSPURVTUUSTQRP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "OVRPQSQURVSVTU", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "KXMQNPOPPQPUQVSVTUUSVP", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "MWOSTSURUQSPRPPQOSPURVTV", "OTSMQSQURVSV", "NVTQSPQPPQPRQSRSSTSURVPVOU", "MWNPOPPQPROTOUPVRVTUURUP", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPQPOQOSPTRUSVSWRXQX", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PTRMRQ", "NVQMPNPPQQSQTPTNSMQM", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "NVRFRM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "NVRBRb", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "MWWRWQVOUNSMQMONNOMQMR", "MWMRMSNUOVQWSWUVVUWSWR", "LXLPNRQSSSVRXP", "RURUTTURTPRO", "RVRRUPVNVLUKTK", "NRRROPNNNLOKPK", "KYKRYR", "MWMWWM", "MWMMWW", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "LXLLLXXXXLLL", "KYRJKVYVRJ", "JZRIPOJOOSMYRUWYUSZOTORI", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "NVRVQWRXSWRV", "MWQKPLPNQOSOTNTLSKQK", "NVRQQRRSSRRQ", "JZWLMRWX", "JZMLWRMX", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "KYUBNRUb", "KYOBVROb", "MWRHSGRFQGQIRKSL", "MWQFRGSISKRLQKRJ", "MXVFTHSJSKTLUKTJ", "MXUHTGUFVGVHUJSL", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "vector::_M_range_insert", "vector::_M_range_check", "type", "is_uniform", "have_ranges", "bins", "thresh", "deque::_M_new_elements_at_front", "deque::_M_new_elements_at_back", "finalPass", "global_hysteresis", "hysteresis", "magnitude", "gradient", "cur_x", "is_classifier", "default_k", "samples", "responses", "opencv_ml_knn", "opencv_ml_knn_kd", "opencv_ml_em", "means", "probs", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "epsilon", "training_params", "weights", "covs", "opencv_ml_lr", "classifier", "alpha", "norm", "train_method", "mini_batch_size", "learnt_thetas", "n_labels", "o_labels", "opencv_ml_svm", "SVM::getDefaultGrid", "C_SVC", "NU_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "svmType", "kernel", "degree", "gamma", "coef0", "term_criteria", "var_count", "class_count", "class_labels", "class_weights", "sv_total", "support_vectors", "uncompressed_sv_total", "uncompressed_support_vectors", "decision_functions", "sv_count", "index", "svm_type", "optimize_linear", "opencv_ml_dtree", "opencv_ml_rtrees", "oob_error", "var_importance", "ntrees", "nodes", "nactive_vars", "depth", "value", "norm_class_idx", "splits", "not_in", "quality", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "var_all", "ord_var_count", "cat_var_count", "global_var_idx", "var_idx", "var_type", "cat_ofs", "cat_map", "missing_subst", "cat_count", "opencv_ml_svmsgd", "ASGD", "svmsgdType", "SOFT_MARGIN", "HARD_MARGIN", "marginType", "marginRegularization", "initialStepSize", "stepDecreasingPower", "shift", "opencv_ml_ann_mlp", "LEAKYRELU", "RELU", "GAUSSIAN", "IDENTITY", "SIGMOID_SYM", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "ANNEAL", "initialT", "finalT", "coolingRatio", "itePerStep", "activation_function_id", "activation_function", "layer_sizes", "input_scale", "output_scale", "inv_output_scale", "opencv_ml_boost", "GentleAdaboost", "Unknown", "LogitBoost", "DiscreteAdaboost", "RealAdaboost", "boosting_type", "weight_trimming_rate", "opencv_ml_nbayes", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "winSize", "blockSize", "blockStride", "cellSize", "nbins", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "SVMDetector", "_detector", "OBJECT_DETECTOR", "rects", "tilted", "stageType", "BOOST", "featureType", "HAAR", "featureParams", "maxCatCount", "stages", "weakClassifiers", "leafValues", "internalNodes", "stageThreshold", "features", "stage_threshold", "feature", "threshold", "left_val", "left_node", "right_val", "right_node", "cascade", "stageParams", "maxWeakCount", "stageNum", "parent", "next", "contrast_weight", "saturation_weight", "exposure_weight", "MergeDebevec", "MergeMertens", "MergeRobertson", "contrast", "sigma_color", "sigma_space", "saturation", "bias", "scale", "intensity", "light_adapt", "color_adapt", "Tonemap", "TonemapDrago", "TonemapDurand", "TonemapReinhard", "TonemapMantiuk", "max_bits", "exclude_range", "AlignMTB", "max_iter", "lambda", "random", "CalibrateDebevec", "CalibrateRobertson", "history", "nsamples", "nKNN", "dist2Threshold", "detectShadows", "shadowValue", "shadowThreshold", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "MapKey::GetStringValue", "constant", "warp", "Slice", "Split", "Concat", "Reshape", "Flatten", "ResizeNearestNeighbor", "Convolution", "Deconvolution", "Pooling", "ROIPooling", "PSROIPooling", "InnerProduct", "Softmax", "ReLU", "ReLU6", "ChannelsPReLU", "PReLU", "Sigmoid", "TanH", "BNLL", "AbsVal", "Power", "BatchNorm", "MaxUnpool", "Dropout", "Identity", "Silence", "Crop", "Eltwise", "Permute", "PriorBox", "PriorBoxClustered", "Reorg", "Region", "DetectionOutput", "NormalizeBBox", "Normalize", "Shift", "Padding", "Proposal", "Scale", "LSTM", "kernel_size", "stride", "bias_term", "num_output", "reorg_stride", "order", "pool", "pad_mode", "SAME", "has_weight", "has_bias", "negative_slope", "axis", "coords", "classes", "anchors", "classfix", "softmax_tree", "softmax", "detection_out", "convolutional", "filters", "activation", "linear", "batch_normalize", "leaky", "channels", "flipped", "maxpool", "route", "layers", "reorg", "region", "tree", "_input", "__NetInputLayer__", "OPENCV_DNN_DISABLE_MEMORY_OPTIMIZATIONS", "scheduler", "targetId", "backendId", "map::at", "Dequantize", "mode", "MIN_FIRST", "Const", "ksize", "kernel_h", "kernel_w", "strides", "stride_h", "stride_w", "padding", "Conv2D", "SpaceToBatchND", "DepthwiseConv2dNative", "dilation", "pad_h", "pad_w", "BiasAdd", "BatchToSpaceND", "data_format", "NHWC", "NCHW", "MatMul", "Transpose", "beta", "depth_radius", "local_size", "norm_by_size", "ConcatV2", "AvgPool", "ave_pool_padded_area", "Placeholder", "begin", "Maximum", "prod", "paddings", "FusedBatchNorm", "is_training", "Conv2DBackpropInput", "adj_w", "adj_h", "VALID", "BlockLSTM", "forget_bias", "cell_clip", "use_cell_clip", "use_peephole", "align_corners", "L2Normalize", "across_spatial", "channel_shared", "min_size", "max_size", "flip", "clip", "offset", "step", "variance", "aspect_ratio", "scales", "num_classes", "share_location", "background_label_id", "nms_threshold", "top_k", "code_type", "keep_top_k", "confidence_threshold", "loc_pred_transposed", "Tanh", "Relu", "Relu6", "dtype", "transpose_a", "transpose_b", "MaxPool", "operation", "CHECK", "norm_region", "ACROSS_CHANNELS", "WITHIN_CHANNEL", "top_count", "group", "global_pooling", "reflect", "input_dims", "pool_k_w", "pool_k_h", "pool_pad_w", "pool_pad_h", "pool_stride_w", "pool_stride_h", "scale_bias", "use_timestamp_dim", "produce_cell_output", "varianceParameterRetrieved", "normalized_bbox", "step_h", "step_w", "offset_h", "offset_w", "slice_point", "coeff", "feat_stride", "base_size", "pre_nms_topn", "post_nms_topn", "nms_thresh", "ratio", "CENTER_SIZE", "variance_encoded_in_target", "num_axes", "log_softmax", "center_size", "CORNER", "scale_train", "dropout_ratio", "normalize_variance", "across_channels", "min_value", "max_value", "power", "end_axis", "stochastic", "pooled_w", "pooled_h", "output_dim", "group_size", "ceil_mode", "spatial_scale", "Double", "Float", "Cuda", "Byte", "Char", "Short", "Long", "Storage", "padH", "padW", "Sequential", "Inception", "dimension", "torchMerge", "DepthConcat", "Parallel", "inputDimension", "outputDimension", "torchSplit", "torchReshape", "ConcatTable", "JoinTable", "CAddTable", "torchCAddTable", "SpatialMaxUnpooling", "indices_blob_id", "torchMaxUnpooling", "torch_index", "SpatialConvolutionMM", "weight", "nOutputPlane", "SpatialMaxPooling", "SpatialAveragePooling", "indices", "count_include_pad", "View", "batchMode", "SpatialBatchNormalization", "InstanceNormalization", "BatchNormalization", "running_mean", "nOutput", "running_var", "running_std", "SpatialDropout", "TotalVariation", "nInputDim", "SpatialDilatedConvolution", "dilation_w", "dilationW", "dilation_h", "dilationH", "SpatialFullConvolution", "adjW", "adjH", "SoftMax", "LogSoftMax", "SpatialCrossMapLRN", "Square", "Sqrt", "constant_scalar", "SpatialZeroPadding", "SpatialReflectionPadding", "pad_l", "pad_r", "pad_t", "pad_b", "SpatialConvolution", "SpatialLPPooling", "Linear", "MulConstant", "ShaveImage", "Tensor", "_param", "Input", "accuracy", "bnll", "concat", "conv", "dropout", "euclidean_loss", "flatten", "hdf5_data", "hdf5_output", "im2col", "images", "infogain_loss", "innerproduct", "multinomial_logistic_loss", "relu", "sigmoid", "softmax_loss", "split", "tanh", "window_data", "Accuracy", "ArgMax", "ContrastiveLoss", "Data", "DummyData", "EuclideanLoss", "HDF5Data", "HDF5Output", "HingeLoss", "Im2col", "ImageData", "InfogainLoss", "MemoryData", "MultinomialLogisticLoss", "SigmoidCrossEntropyLoss", "SoftmaxWithLoss", "WindowData", "Threshold", "V0LayerParameter", "V1LayerParameter", "code", "swap_rb", "decoder", "RGBE", "OPENCV_VIDEOCAPTURE_DEBUG", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvSetTrackbarMin", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "OPENCV_LEGACY_WAITKEY", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "Feature2D", "indexParams", "searchParams", "_indexParams", "_searchParams", "FlannBased", "BruteForce", "typename", "extended", "upright", "octaves", "sublevels", "diffusivity", "descriptor", "descriptor_channels", "descriptor_size", "thresholdStep", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "minDisparity", "numDisparities", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "private", "shared", "TBB_VERSION", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "__TBB_call_with_my_server_info", "scalable_malloc", "malloc", "ALLOCATOR", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "pthread_join", "pthread_detach", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "pthread_attr_destroy", "parse", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS", "parsing", "serializing", "proto2", "proto3", "uninterpreted_option", "Entry", "proto", "PLACEHOLDER_VALUE", "basic_string::erase", "FileOptions", "MessageOptions", "FieldOptions", "EnumOptions", "EnumValueOptions", "ServiceOptions", "MethodOptions", "OneofOptions", "optional", "required", "repeated", "int64", "uint32", "enum", "message", "fixed64", "fixed32", "bytes", "sfixed32", "sfixed64", "sint32", "sint64", "SetRepeatedEnum", "SetRepeatedInt32", "SetRepeatedFloat", "SetRepeatedUInt32", "SetRepeatedBool", "SetRepeatedInt64", "SetRepeatedDouble", "SetRepeatedUInt64", "MutableRawRepeatedField", "GetRawRepeatedField", "Swap", "MutableRepeatedMessage", "AddMessage", "RemoveLast", "SetRepeatedString", "AddString", "GetRepeatedUInt32", "GetRepeatedBool", "GetRepeatedFloat", "GetRepeatedStringReference", "GetRepeatedUInt64", "GetRepeatedInt64", "GetRepeatedDouble", "GetMessage", "SetAllocatedMessage", "ReleaseMessage", "MutableMessage", "SetString", "GetRepeatedInt32", "GetRepeatedEnumValue", "GetRepeatedString", "FieldSize", "GetRepeatedMessage", "SetInt32", "SetEnum", "SetEnumValue", "SetInt64", "SetUInt32", "SetUInt64", "SetFloat", "SetDouble", "SetBool", "GetBool", "GetInt32", "GetEnumValue", "GetInt64", "GetUInt32", "GetUInt64", "GetFloat", "GetDouble", "AddUInt32", "AddUInt64", "AddInt32", "AddEnum", "AddInt64", "AddFloat", "AddDouble", "HasField", "ClearField", "GetString", "GetStringReference", "AddBool", "ReleaseLast", "AddAllocatedMessage", "INVALID_CPPTYPE", "CPPTYPE_INT32", "CPPTYPE_INT64", "CPPTYPE_UINT32", "CPPTYPE_UINT64", "CPPTYPE_DOUBLE", "CPPTYPE_FLOAT", "CPPTYPE_BOOL", "CPPTYPE_ENUM", "CPPTYPE_STRING", "CPPTYPE_MESSAGE", "Unsupported", "MapKey::GetInt64Value", "MapKey::GetUInt64Value", "MapKey::GetInt32Value", "MapKey::GetUInt32Value", "MapKey::GetBoolValue", "MapValueRef::GetInt64Value", "MapValueRef::GetUInt64Value", "MapValueRef::GetInt32Value", "MapValueRef::GetUInt32Value", "MapValueRef::GetBoolValue", "MapValueRef::GetEnumValue", "MapValueRef::GetStringValue", "MapValueRef::GetFloatValue", "MapValueRef::GetDoubleValue", "MapValueRef::GetMessageValue", "infinity", "JPEGMEM", "RIFF", "WEBP", "VP8L", "ALPH", "VP8X", "Features", "vfpv3", "vfpv3d16", "vfpv4", "neon", "idiva", "idivt", "idiv", "iwmmxt", "Hardware", "Goldfish", "Processor", "invalid", "duplicate", "truncated", "sRGB", "png_set_gAMA", "png_set_background", "undefined", "_TIFFVGetField", "DotRange", "TIFFSetField", "_TIFFSetupFields", "TIFFFieldWithTag", "TIFFFieldWithName", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "ApertureValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CFAPattern", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "Sharpness", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "SubfileType", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "Model", "StripOffsets", "Orientation", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "MinSampleValue", "MaxSampleValue", "XResolution", "YResolution", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "ResolutionUnit", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "ColorMap", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "CFARepeatPatternDim", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "PerSample", "Indexed", "GlobalParametersIFD", "ProfileType", "FaxProfile", "CodingMethods", "VersionYear", "ModeNumber", "Decode", "ImageBaseColor", "T82Options", "StripRowCounts", "ImageLayer", "ReadDirEntryArray", "TIFFReadDirEntryArray", "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT", "TIFFFetchNormalTag", "tiles", "strips", "TIFFCheckDirOffset", "Colormap", "TIFFWriteDirectoryTagCheckedLong8Array", "TIFFWriteDirectoryTagCheckedSlong8Array", "gtStripSeparate", "gtTileSeparate", "Planarconfiguration", "colorchannels", "TIFFNumberOfStrips", "TIFFNumberOfTiles", "TIFFTileRowSize", "tile", "strip", "scanline", "TIFFRegisterCODEC", "TIFFUnRegisterCODEC", "JPEGLib", "TIFFReadScanline", "JPEGDecodeRaw", "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER", "TIFFjpeg_progress_monitor", "JPEGEncode", "TIFFjpeg_tables_dest", "JPEGSetupDecode", "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC", "TIFFInitJPEG", "JPEGTables", "None", "PackBits", "ThunderScan", "NeXT", "JPEG", "Deflate", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "InitCCITTFax3", "TIFFInitCCITTFax3", "TIFFInitCCITTFax4", "Group4Options", "Group3Options", "FaxMode", "FaxFillFunc", "BadFaxLines", "CleanFaxData", "ConsecutiveBadFaxLines", "SGILogDataFmt", "SGILogEncode", "horDiff32", "horDiff8", "PredictorDecodeTile", "horAcc32", "horAcc16", "horAcc8", "fpDiff", "fpAcc", "PredictorEncodeTile", "TIFFPredictorInit", "Predictor", "maxlyrs", "maxpkts", "FTYP", "JP2H", "IHDR", "BPCC", "COLR", "PCLR", "CMAP", "CDEF", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "real", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "imgareatlx", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "rate", "ilyrrates", "_jp2overhead", "preview", "chromaticities", "whiteLuminance", "adoptedNeutral", "renderingTransform", "lookModTransform", "xDensity", "owner", "comments", "capDate", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "wrapmodes", "framesPerSecond", "multiView", "worldToCamera", "worldToNDC", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "lineOrder", "compression", "timecode", "stringvector", "keycode", "chlist", "tiledesc", "box2i", "box2f", "rational", "m33f", "m33d", "m44f", "m44d", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "__gnu_cxx::__concurrence_broadcast_error", "__gnu_cxx::__concurrence_wait_error", "std::bad_exception", "std::bad_alloc", "basic_ios::clear", "POSIX", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "std::bad_typeid", "std::bad_cast", "AKST", "space", "print", "cntrl", "upper", "lower", "digit", "punct", "xdigit", "alnum", "graph", "system", "_GLOBAL_", "auto", "JArray", "_Accum", "_Fract", "operator", "this", "std::allocator", "allocator", "std::basic_string", "basic_string", "std::string", "std::istream", "basic_istream", "std::ostream", "basic_ostream", "std::iostream", "basic_iostream", "const_cast", "dynamic_cast", "reinterpret_cast", "static_cast", "throw", "boolean", "byte", "__float128", "long", "__int128", "void", "wchar_t", "decimal32", "decimal64", "decimal128", "half", "char16_t", "char32_t", "N2cv15LUTParallelBodyE", "N2cv6detail12PtrOwnerImplINS_16ParallelLoopBodyENS_14DefaultDeleterIS2_EEEE", "N2cv3hal5DFT1DE", "N2cv3hal5DFT2DE", "N2cv3hal5DCT2DE", "N2cv10OcvDftImplE", "N2cv15OcvDftBasicImplE", "N2cv10OcvDctImplE", "N2cv6detail12PtrOwnerImplINS_15OcvDftBasicImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10OcvDftImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10OcvDctImplENS_14DefaultDeleterIS2_EEEE", "N2cv12MatOp_InvertE", "N2cv9MatOp_CmpE", "N2cv11MatOp_AddExE", "N2cv11MatOp_SolveE", "N2cv7MatOp_TE", "N2cv5MatOpE", "N2cv17MatOp_InitializerE", "N2cv10MatOp_GEMME", "N2cv14MatOp_IdentityE", "N2cv9MatOp_BinE", "N2cv16MinProblemSolverE", "N2cv14DownhillSolverE", "N2cv18DownhillSolverImplE", "N2cv6detail12PtrOwnerImplINS_18DownhillSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerILb1EEE", "N2cv22KMeansDistanceComputerILb0EEE", "N2cv14ConjGradSolverE", "N2cv6detail12PtrOwnerImplINS_18ConjGradSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv18ConjGradSolverImplE", "N2cv16MinProblemSolver8FunctionE", "N2cv16BatchDistInvokerE", "N2cv6detail12PtrOwnerImplI11CvSparseMatNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvFileStorageNS_14DefaultDeleterIS2_EEEE", "N2cv11FileStorageE", "N2cv20BufferPoolControllerE", "N2cv25DummyBufferPoolControllerE", "N2cv15StdMatAllocatorE", "N2cv12MatAllocatorE", "N2cv7TLSDataINS_5instr11NodeDataTlsEEE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "N2cv9ExceptionE", "N2cv16TLSDataContainerE", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl15OpenCLAllocatorE", "N2cv5utils5trace7details12TraceStorageE", "N2cv7TLSDataINS_5utils5trace7details23TraceManagerThreadLocalEEE", "N2cv5utils5trace7details17AsyncTraceStorageE", "N2cv5utils5trace7details16SyncTraceStorageE", "N2cv6detail12PtrOwnerImplINS_5utils5trace7details17AsyncTraceStorageENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_5utils5trace7details16SyncTraceStorageENS_14DefaultDeleterIS5_EEEE", "N3tbb8internal9no_assignE", "N3tbb10interface78internal13delegate_baseE", "N3tbb10interface98internal9flag_taskE", "N2cv16ParallelLoopBodyE", "N2cv13FormattedImplE", "N2cv13FormatterBaseE", "N2cv16DefaultFormatterE", "N2cv15MatlabFormatterE", "N2cv15PythonFormatterE", "N2cv14NumpyFormatterE", "N2cv12CSVFormatterE", "N2cv10CFormatterE", "N2cv6detail12PtrOwnerImplINS_13FormattedImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16DefaultFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15MatlabFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12CSVFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15PythonFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_14NumpyFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10CFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv9FormattedE", "N2cv9FormatterE", "ucwsifdr", "N2cv9AlgorithmE", "N2cv6StringE", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl14big_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl9empty_anyE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl16small_any_policyIjEE", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann12KNNResultSetIfEE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann7NNIndexINS_10HammingLUTEEE", "N7cvflann5IndexINS_10HammingLUTEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann9ResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann9ResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_10HammingLUTEEE", "N7cvflann27HierarchicalClusteringIndexINS_10HammingLUTEEE", "N7cvflann8LshIndexINS_10HammingLUTEEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "N2cv5flann5IndexE", "N2cv22RGB888toYUV420pInvokerE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "N2cv24HoughCirclesAccumInvokerE", "N2cv30HoughCirclesFindCentersInvokerE", "N2cv32HoughCircleEstimateRadiusInvokerINS_11NZPointListEEE", "N2cv32HoughCircleEstimateRadiusInvokerINS_10NZPointSetEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist2D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist3D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist1D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerIfEEKNS_16auto_partitionerEEE", "N2cv19LineSegmentDetectorE", "N2cv6detail12PtrOwnerImplINS_23LineSegmentDetectorImplENS_14DefaultDeleterIS2_EEEE", "N2cv23LineSegmentDetectorImplE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE10SecondScanE", "N2cv13parallelCannyE", "N2cv9finalPassE", "N2cv16GeneralizedHoughE", "N2cv23GeneralizedHoughBallardE", "N2cv20GeneralizedHoughGuilE", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIthEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhtEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv9SqrRowSumIhiEE", "N2cv9SqrRowSumIhdEE", "N2cv9SqrRowSumItdEE", "N2cv9SqrRowSumIsdEE", "N2cv9SqrRowSumIfdEE", "N2cv9SqrRowSumIddEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIihEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIthEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdhEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIitEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIisEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdsEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIifEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdfEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIidEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_12FilterEngineENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv9RowFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIhiNS_8RowNoVecEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_8RowNoVecEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_8RowNoVecEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhiNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIffNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIfdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIddNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv16BaseColumnFilterE", "N2cv13BaseRowFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv8colormap8ColorMapE", "N2cv8colormap6AutumnE", "N2cv8colormap4BoneE", "N2cv8colormap3JetE", "N2cv8colormap6WinterE", "N2cv8colormap7RainbowE", "N2cv8colormap5OceanE", "N2cv8colormap6SummerE", "N2cv8colormap6SpringE", "N2cv8colormap4CoolE", "N2cv8colormap3HSVE", "N2cv8colormap4PinkE", "N2cv8colormap3HotE", "N2cv8colormap6ParulaE", "N2cv8colormap12UserColorMapE", "N2cv15ThresholdRunnerE", "N2cv6detail12PtrOwnerImplI12CvMemStorageNS_14DefaultDeleterIS2_EEEE", "N2cv15resizeNNInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_19ResizeAreaFastNoVecIhhEEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_19ResizeAreaFastNoVecIttEEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_19ResizeAreaFastNoVecIssEEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv17Bayer2RGB_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv18Bayer2Gray_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_26SIMDBayerStubInterpolator_IhEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv5CLAHEE", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "N2cv6detail12PtrOwnerImplI5CvMatNS_14DefaultDeleterIS2_EEEE", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "N2cv2ml8KNearestE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "N2cv2ml14BruteForceImplE", "N2cv2ml10KDTreeImplE", "N2cv2ml12KNearestImplE", "N2cv6detail12PtrOwnerImplINS_2ml14BruteForceImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10KDTreeImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml12KNearestImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml2EME", "N2cv2ml6EMImplE", "N2cv6detail12PtrOwnerImplINS_2ml6EMImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml18LogisticRegressionE", "N2cv2ml43LogisticRegressionImpl_ComputeDradient_ImplE", "N2cv6detail12PtrOwnerImplINS_2ml22LogisticRegressionImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml22LogisticRegressionImplE", "N2cv2ml3SVM6KernelE", "N2cv2ml3SVME", "N2cv2ml13SVMKernelImplE", "N2cv2ml7SVMImpl13TrainAutoBodyE", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImplE", "N2cv6detail12PtrOwnerImplINS_2ml9ParamGridENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml13SVMKernelImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml7SVMImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml6DTreesE", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "N2cv2ml10RTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10RTreesImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml13TrainDataImplE", "N2cv6detail12PtrOwnerImplINS_2ml13TrainDataImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml9TrainDataE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImpl8WorkDataENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml10DTreesImplE", "N2cv2ml6SVMSGDE", "N2cv6detail12PtrOwnerImplINS_2ml10SVMSGDImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml10SVMSGDImplE", "N2cv2ml7ANN_MLPE", "N2cv2ml14ANN_MLP_ANNEALE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "N2cv2ml11ANN_MLPImplE", "N2cv6detail12PtrOwnerImplINS_2ml11ANN_MLPImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml5BoostE", "N2cv2ml18DTreesImplForBoostE", "N2cv2ml9BoostImplE", "N2cv6detail12PtrOwnerImplINS_2ml9BoostImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml21NormalBayesClassifierE", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv6detail12PtrOwnerImplINS_2ml25NormalBayesClassifierImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml17ParallelCalcErrorE", "N2cv2ml9StatModelE", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "N2cv8HOGCacheE", "N2cv13HOGDescriptorE", "readALTModel", "N2cv6detail12PtrOwnerImplINS_21DetectionBasedTracker21SeparateDetectionWorkENS_14DefaultDeleterIS3_EEEE", "N2cv21DetectionBasedTrackerE", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "N2cv24CascadeClassifierInvokerE", "N2cv6detail12PtrOwnerImplINS_13HaarEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12LBPEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_16FeatureEvaluator9ScaleDataESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplI23CvHaarClassifierCascadeNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_21CascadeClassifierImplENS_14DefaultDeleterIS2_EEEE", "N2cv21BaseCascadeClassifierE", "N2cv21CascadeClassifierImplE", "N2cv12LBPEvaluatorE", "N2cv13HaarEvaluatorE", "N2cv16FeatureEvaluatorE", "N2cv36HaarDetectObjects_ScaleImage_InvokerE", "N2cv38HaarDetectObjects_ScaleCascade_InvokerE", "N2cv6detail12PtrOwnerImplI14_IplConvKernelNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI20CvPriorityQueueFloatNS_14DefaultDeleterIS2_EEEE", "N2cv14MergeExposuresE", "N2cv12MergeDebevecE", "N2cv12MergeMertensE", "N2cv14MergeRobertsonE", "N2cv16MergeDebevecImplE", "N2cv16MergeMertensImplE", "N2cv18MergeRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_16MergeDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16MergeMertensImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18MergeRobertsonImplENS_14DefaultDeleterIS2_EEEE", "N2cv7TonemapE", "N2cv12TonemapDragoE", "N2cv13TonemapDurandE", "N2cv15TonemapReinhardE", "N2cv14TonemapMantiukE", "N2cv11TonemapImplE", "N2cv16TonemapDragoImplE", "N2cv17TonemapDurandImplE", "N2cv19TonemapReinhardImplE", "N2cv18TonemapMantiukImplE", "N2cv6detail12PtrOwnerImplINS_11TonemapImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16TonemapDragoImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17TonemapDurandImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19TonemapReinhardImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18TonemapMantiukImplENS_14DefaultDeleterIS2_EEEE", "N2cv14AlignExposuresE", "N2cv8AlignMTBE", "N2cv12AlignMTBImplE", "N2cv6detail12PtrOwnerImplINS_12AlignMTBImplENS_14DefaultDeleterIS2_EEEE", "N2cv12CalibrateCRFE", "N2cv16CalibrateDebevecE", "N2cv18CalibrateRobertsonE", "N2cv20CalibrateDebevecImplE", "N2cv22CalibrateRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_20CalibrateDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22CalibrateRobertsonImplENS_14DefaultDeleterIS2_EEEE", "N2cv16DenseOpticalFlowE", "N2cv20FarnebackOpticalFlowE", "N2cv17SparseOpticalFlowE", "N2cv22SparsePyrLKOpticalFlowE", "N2cv6detail16LKTrackerInvokerE", "N2cv20BackgroundSubtractorE", "N2cv23BackgroundSubtractorKNNE", "N2cv10KNNInvokerE", "N2cv6detail12PtrOwnerImplINS_27BackgroundSubtractorKNNImplENS_14DefaultDeleterIS2_EEEE", "N2cv27BackgroundSubtractorKNNImplE", "N2cv24BackgroundSubtractorMOG2E", "N2cv11MOG2InvokerE", "N2cv6detail12PtrOwnerImplINS_28BackgroundSubtractorMOG2ImplENS_14DefaultDeleterIS2_EEEE", "N2cv28BackgroundSubtractorMOG2ImplE", "N2cv19DualTVL1OpticalFlowE", "N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE", "N10tensorflow20TensorShapeProto_DimE", "N10tensorflow16TensorShapeProtoE", "N6google8protobuf8internal20RepeatedPtrFieldBaseE", "N6google8protobuf4hashISsEE", "N6google8protobuf16RepeatedPtrFieldINS0_7MessageEEE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseISsN10tensorflow9AttrValueEEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow26NodeDef_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow26NodeDef_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N6google8protobuf3MapISsN10tensorflow9AttrValueEE8InnerMapE", "N10tensorflow7NodeDefE", "N10tensorflow8GraphDefE", "N10tensorflow26NodeDef_AttrEntry_DoNotUseE", "N10tensorflow10VersionDefE", "N10tensorflow11TensorProtoE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow31NameAttrList_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow31NameAttrList_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N10tensorflow12NameAttrListE", "N10tensorflow9AttrValueE", "N10tensorflow19AttrValue_ListValueE", "N10tensorflow31NameAttrList_AttrEntry_DoNotUseE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EEE", "N6google8protobuf8internal8MapEntryIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS7_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageESsNS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELS8_11ELi0EE15MapEntryWrapperE", "N10tensorflow18FunctionDefLibraryE", "N10tensorflow11FunctionDefE", "N10tensorflow16FunctionDef_NodeE", "N10tensorflow35FunctionDef_Node_AttrEntry_DoNotUseE", "N10tensorflow11GradientDefE", "N10tensorflow6OpListE", "N10tensorflow12OpDef_ArgDefE", "N10tensorflow13OpDeprecationE", "N10tensorflow5OpDefE", "N10tensorflow13OpDef_AttrDefE", "N12opencv_caffe14NormalizedBBoxE", "N12opencv_caffe16SoftmaxParameterE", "N12opencv_caffe20ConvolutionParameterE", "N12opencv_caffe9BlobProtoE", "N12opencv_caffe15BlobProtoVectorE", "N12opencv_caffe15ConcatParameterE", "N12opencv_caffe12ELUParameterE", "N12opencv_caffe18ImageDataParameterE", "N12opencv_caffe13BiasParameterE", "N12opencv_caffe13CropParameterE", "N12opencv_caffe18DummyDataParameterE", "N12opencv_caffe14LayerParameterE", "N12opencv_caffe5DatumE", "N12opencv_caffe13LossParameterE", "N12opencv_caffe19WindowDataParameterE", "N12opencv_caffe19SaveOutputParameterE", "N12opencv_caffe19MemoryDataParameterE", "N12opencv_caffe18ReductionParameterE", "N12opencv_caffe21InfogainLossParameterE", "N12opencv_caffe14PReLUParameterE", "N12opencv_caffe12LogParameterE", "N12opencv_caffe16FlattenParameterE", "N12opencv_caffe17ProposalParameterE", "N12opencv_caffe18ParameterParameterE", "N12opencv_caffe15PythonParameterE", "N12opencv_caffe16PoolingParameterE", "N12opencv_caffe15SolverParameterE", "N12opencv_caffe24ContrastiveLossParameterE", "N12opencv_caffe19HDF5OutputParameterE", "N12opencv_caffe13TanHParameterE", "N12opencv_caffe13DataParameterE", "N12opencv_caffe17AccuracyParameterE", "N12opencv_caffe9ParamSpecE", "N12opencv_caffe14InputParameterE", "N12opencv_caffe16V0LayerParameterE", "N12opencv_caffe12MVNParameterE", "N12opencv_caffe14ScaleParameterE", "N12opencv_caffe21InnerProductParameterE", "N12opencv_caffe24DetectionOutputParameterE", "N12opencv_caffe13TileParameterE", "N12opencv_caffe15ArgMaxParameterE", "N12opencv_caffe14SliceParameterE", "N12opencv_caffe8NetStateE", "N12opencv_caffe22NormalizeBBoxParameterE", "N12opencv_caffe18BatchNormParameterE", "N12opencv_caffe18RecurrentParameterE", "N12opencv_caffe12ExpParameterE", "N12opencv_caffe14PowerParameterE", "N12opencv_caffe12LRNParameterE", "N12opencv_caffe18ThresholdParameterE", "N12opencv_caffe17HDF5DataParameterE", "N12opencv_caffe21PSROIPoolingParameterE", "N12opencv_caffe23TransformationParameterE", "N12opencv_caffe16PermuteParameterE", "N12opencv_caffe16DropoutParameterE", "N12opencv_caffe12NetParameterE", "N12opencv_caffe9BlobShapeE", "N12opencv_caffe13ReLUParameterE", "N12opencv_caffe15FillerParameterE", "N12opencv_caffe17PriorBoxParameterE", "N12opencv_caffe30NonMaximumSuppressionParameterE", "N12opencv_caffe14EmbedParameterE", "N12opencv_caffe16SigmoidParameterE", "N12opencv_caffe19ROIPoolingParameterE", "N12opencv_caffe16EltwiseParameterE", "N12opencv_caffe18HingeLossParameterE", "N12opencv_caffe12SPPParameterE", "N12opencv_caffe12NetStateRuleE", "N12opencv_caffe16ReshapeParameterE", "N12opencv_caffe16V1LayerParameterE", "N12opencv_caffe11SolverStateE", "N2cv3dnn19experimental_dnn_v420BaseConvolutionLayerE", "N2cv3dnn19experimental_dnn_v416ConvolutionLayerE", "N2cv3dnn19experimental_dnn_v412PoolingLayerE", "N2cv3dnn19experimental_dnn_v411ConcatLayerE", "N2cv3dnn19experimental_dnn_v415ActivationLayerE", "N2cv3dnn19experimental_dnn_v412EltwiseLayerE", "N2cv3dnn19experimental_dnn_v420OpenCLBackendWrapperE", "N2cv3dnn19experimental_dnn_v49DataLayerE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v420OpenCLBackendWrapperENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v49DataLayerENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v43Net4ImplENS_14DefaultDeleterIS5_EEEE", "N2cv3dnn19experimental_dnn_v414BackendWrapperE", "N2cv3dnn19experimental_dnn_v45LayerE", "N2cv3dnn19experimental_dnn_v48LRNLayerE", "N2cv3dnn12LRNLayerImpl10ChannelLRNE", "N2cv3dnn12LRNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn12LRNLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410SplitLayerE", "N2cv3dnn14SplitLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14SplitLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v418NormalizeBBoxLayerE", "N2cv3dnn22NormalizeBBoxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn22NormalizeBBoxLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410ShiftLayerE", "N2cv3dnn14ShiftLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ShiftLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v49ReLULayerE", "N2cv3dnn19experimental_dnn_v418ChannelsPReLULayerE", "N2cv3dnn24BaseConvolutionLayerImplE", "N2cv3dnn20ConvolutionLayerImpl12ParallelConvE", "N2cv3dnn20ConvolutionLayerImplE", "N2cv3dnn22DeConvolutionLayerImpl13MatMulInvokerE", "N2cv3dnn22DeConvolutionLayerImpl13Col2ImInvokerE", "N2cv3dnn22DeConvolutionLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn20ConvolutionLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn22DeConvolutionLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v49CropLayerE", "N2cv3dnn13CropLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn13CropLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v412PaddingLayerE", "N2cv3dnn16PaddingLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PaddingLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410ReorgLayerE", "N2cv3dnn14ReorgLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ReorgLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v412PermuteLayerE", "N2cv3dnn16PermuteLayerImpl14PermuteInvokerE", "N2cv3dnn16PermuteLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PermuteLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v414MaxUnpoolLayerE", "N2cv3dnn18MaxUnpoolLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn18MaxUnpoolLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v414BatchNormLayerE", "N2cv3dnn18BatchNormLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn18BatchNormLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v48RNNLayerE", "N2cv3dnn13LSTMLayerImplE", "N2cv3dnn12RNNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn13LSTMLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn12RNNLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v49LSTMLayerE", "N2cv3dnn19experimental_dnn_v417InnerProductLayerE", "N2cv3dnn23FullyConnectedLayerImpl14FullyConnectedE", "N2cv3dnn23FullyConnectedLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn23FullyConnectedLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v413PriorBoxLayerE", "N2cv3dnn17PriorBoxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn17PriorBoxLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410SliceLayerE", "N2cv3dnn14SliceLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14SliceLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn16EltwiseLayerImpl14EltwiseInvokerE", "N2cv3dnn16EltwiseLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16EltwiseLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v413ProposalLayerE", "N2cv3dnn17ProposalLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn17ProposalLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v412ReshapeLayerE", "N2cv3dnn16ReshapeLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16ReshapeLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v411RegionLayerE", "N2cv3dnn15RegionLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn15RegionLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v412SoftmaxLayerE", "N2cv3dnn16SoftMaxLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16SoftMaxLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v420DetectionOutputLayerE", "N2cv3dnn24DetectionOutputLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn24DetectionOutputLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410BlankLayerE", "N2cv3dnn14BlankLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14BlankLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v48MVNLayerE", "N2cv3dnn12MVNLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn12MVNLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v410ScaleLayerE", "N2cv3dnn14ScaleLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn14ScaleLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v426ResizeNearestNeighborLayerE", "N2cv3dnn30ResizeNearestNeighborLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn30ResizeNearestNeighborLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEE5PBodyE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEE5PBodyE", "N2cv3dnn19experimental_dnn_v410ReLU6LayerE", "N2cv3dnn19experimental_dnn_v48ELULayerE", "N2cv3dnn19experimental_dnn_v49TanHLayerE", "N2cv3dnn19experimental_dnn_v412SigmoidLayerE", "N2cv3dnn19experimental_dnn_v49BNLLLayerE", "N2cv3dnn19experimental_dnn_v48AbsLayerE", "N2cv3dnn19experimental_dnn_v410PowerLayerE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11ReLUFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11TanHFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_10ELUFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_13AbsValFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_11BNLLFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_12PowerFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv6detail12PtrOwnerImplINS_3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEENS_14DefaultDeleterIS5_EEEE", "N2cv3dnn15ConcatLayerImpl20ChannelConcatInvokerE", "N2cv3dnn15ConcatLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn15ConcatLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn19experimental_dnn_v412FlattenLayerE", "N2cv3dnn16FlattenLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16FlattenLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv3dnn16PoolingLayerImpl14PoolingInvokerE", "N2cv3dnn16PoolingLayerImplE", "N2cv6detail12PtrOwnerImplINS_3dnn16PoolingLayerImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplIN2TH8THFile__EPFvPS3_EEE", "N2cv6detail12PtrOwnerImplINS_3dnn19experimental_dnn_v413TorchImporter6ModuleENS_14DefaultDeleterIS5_EEEE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_15FieldDescriptorEEE", "N6google8protobuf2io19ZeroCopyInputStreamE", "N2cv6detail12PtrOwnerImplINS_10PxMEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PAMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PAMEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv11WebPEncoderE", "N2cv11WebPDecoderE", "N2cv10ExrEncoderE", "N2cv10ExrDecoderE", "N2cv24RBS_BAD_HEADER_ExceptionE", "ENDHDR", "HEIGHT", "WIDTH", "DEPTH", "MAXVAL", "TUPLTYPE", "N2cv10PAMEncoderE", "N2cv10PAMDecoderE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderEPFvPS2_EEE", "N2cv13Jpeg2KDecoderE", "N2cv13Jpeg2KEncoderE", "N2cv10BmpDecoderE", "N2cv10BmpEncoderE", "N2cv10HdrEncoderE", "N2cv10HdrDecoderE", "N2cv11JpegEncoderE", "N2cv11JpegDecoderE", "N2cv16BaseImageEncoderE", "N2cv16BaseImageDecoderE", "N2cv16SunRasterDecoderE", "N2cv16SunRasterEncoderE", "N2cv10PxMEncoderE", "N2cv10PxMDecoderE", "N2cv11TiffEncoderE", "N2cv11TiffDecoderE", "N2cv10PngEncoderE", "N2cv10PngDecoderE", "N2cv23RBS_THROW_EOS_ExceptionE", "N2cv11WBaseStreamE", "N2cv11RBaseStreamE", "N2cv12RMByteStreamE", "N2cv12WMByteStreamE", "N2cv12WLByteStreamE", "N2cv12RLByteStreamE", "N2cv6detail12PtrOwnerImplI9CvCaptureNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvVideoWriterNS_14DefaultDeleterIS2_EEEE", "N2cv11VideoWriterE", "N2cv12VideoCaptureE", "N2cv12IVideoWriterE", "N2cv5mjpeg16MotionJpegWriterE", "N2cv5mjpeg12MjpegEncoderE", "N2cv6detail12PtrOwnerImplINS_5mjpeg16MotionJpegWriterENS_14DefaultDeleterIS3_EEEE", "N2cv13IVideoCaptureE", "N2cv6detail12PtrOwnerImplINS_17MotionJpegCaptureENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16AVIReadContainerENS_14DefaultDeleterIS2_EEEE", "N2cv17MotionJpegCaptureE", "N2cv6detail12PtrOwnerImplINS_16VideoInputStreamENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_9BitStreamENS_14DefaultDeleterIS2_EEEE", "N2cv9Feature2DE", "N2cv6detail12PtrOwnerImplINS_9BFMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17FlannBasedMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann5IndexENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann11IndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv17DescriptorMatcherE", "N2cv17FlannBasedMatcherE", "N2cv17DescriptorMatcher20DescriptorCollectionE", "N2cv9BFMatcherE", "N2cv6detail12PtrOwnerImplINS_10BRISK_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv10BRISK_ImplE", "N2cv5BRISKE", "N2cv9KAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_9KAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv4KAZEE", "N2cv16BOWKMeansTrainerE", "N2cv10BOWTrainerE", "N2cv25BOWImgDescriptorExtractorE", "N2cv25AgastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_25AgastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv20AgastFeatureDetectorE", "N2cv17GFTTDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_17GFTTDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv12GFTTDetectorE", "N2cv6detail12PtrOwnerImplINS_8ORB_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv3ORBE", "N2cv8ORB_ImplE", "N2cv24FastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_24FastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv19FastFeatureDetectorE", "N3tbb10interface98internal13finish_reduceI20IntersectAreaCounterEE", "N3tbb10interface98internal12start_reduceINS_13blocked_rangeIiEE20IntersectAreaCounterKNS_16auto_partitionerEEE", "N2cv10AKAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_10AKAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv5AKAZEE", "N2cv6detail12PtrOwnerImplINS_9MSER_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv4MSERE", "N2cv9MSER_ImplE", "N2cv6detail12PtrOwnerImplINS_22SimpleBlobDetectorImplENS_14DefaultDeleterIS2_EEEE", "N2cv18SimpleBlobDetectorE", "N2cv22SimpleBlobDetectorImplE", "N2cv23Nld_Step_Scalar_InvokerE", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "N2cv28NonLinearScalarDiffusionStepE", "N2cv26DeterminantHessianResponseINS_3MatEEE", "N2cv22FindKeypointsSameScaleE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "N2cv26ComputeKeypointOrientationE", "N2cv19PointSetRegistrator8CallbackE", "N2cv17PnPRansacCallbackE", "N2cv6detail12PtrOwnerImplINS_17PnPRansacCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv13StereoMatcherE", "N2cv8StereoBME", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "N2cv12StereoBMImplE", "N2cv6detail12PtrOwnerImplINS_12StereoBMImplENS_14DefaultDeleterIS2_EEEE", "N2cv8LMSolver8CallbackE", "N2cv19PointSetRegistratorE", "N2cv25RANSACPointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "N2cv25Affine3DEstimatorCallbackE", "N2cv25Affine2DEstimatorCallbackE", "N2cv32AffinePartial2DEstimatorCallbackE", "N2cv22Affine2DRefineCallbackE", "N2cv29AffinePartial2DRefineCallbackE", "N2cv6detail12PtrOwnerImplINS_25RANSACPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24LMeDSPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine3DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine2DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22Affine2DRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_32AffinePartial2DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29AffinePartial2DRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv8LMSolverE", "N2cv12LMSolverImplE", "N2cv6detail12PtrOwnerImplINS_12LMSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv27HomographyEstimatorCallbackE", "N2cv24HomographyRefineCallbackE", "N2cv19FMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_27HomographyEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24HomographyRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19FMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv10StereoSGBME", "N2cv16CalcVerticalSumsE", "N2cv18CalcHorizontalSumsE", "N2cv14StereoSGBMImplE", "N2cv6detail12PtrOwnerImplINS_14StereoSGBMImplENS_14DefaultDeleterIS2_EEEE", "N2cv16SGBM3WayMainLoopE", "N2cv6detail12PtrOwnerImplINS_23HomographyDecomposition21HomographyDecompInriaENS_14DefaultDeleterIS3_EEEE", "N2cv23HomographyDecomposition16HomographyDecompE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "N2cv8RHO_HESTE", "N2cv6detail12PtrOwnerImplINS_13RHO_HEST_REFCENS_14DefaultDeleterIS2_EEEE", "N2cv13RHO_HEST_REFCE", "N2cv19EMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_19EMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N3tbb8internal7no_copyE", "N3rml16versioned_objectE", "N3rml6clientE", "N3tbb8internal3rml10tbb_clientE", "N3tbb8internal6marketE", "N3tbb10interface58internal9task_baseE", "N3tbb4taskE", "N3tbb10empty_taskE", "N3tbb10interface78internal14delegated_taskE", "N3tbb10interface78internal18delegated_functionINS_4flow11interface105graph13spawn_functorEvEE", "N3tbb8internal13function_taskINS_4flow11interface105graph13spawn_functorEEE", "N3tbb10interface78internal9wait_taskE", "N3tbb8internal15scheduler_stateE", "N3tbb8internal19intrusive_list_nodeE", "N3rml3jobE", "N3tbb8internal9schedulerE", "N3tbb13tbb_exceptionE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb8internal17generic_schedulerE", "N3tbb13improper_lockE", "N3tbb12missing_waitE", "N3tbb27invalid_multiple_schedulingE", "N3tbb10user_abortE", "N3tbb14bad_last_allocE", "N3tbb8internal15control_storageE", "N3tbb8internal11padded_baseINS0_15control_storageELj128ELj16EEE", "N3tbb8internal6paddedINS0_15control_storageELj128EEE", "N3tbb8internal27allowed_parallelism_controlE", "N3tbb8internal18stack_size_controlE", "N3rml6serverE", "N3tbb8internal3rml10tbb_serverE", "N3tbb8internal3rml14private_serverE", "N6google8protobuf2io25CopyingInputStreamAdaptorE", "N6google8protobuf2io18CopyingInputStreamE", "N6google8protobuf2io16ArrayInputStreamE", "N6google8protobuf2io17ArrayOutputStreamE", "N6google8protobuf2io18StringOutputStreamE", "N6google8protobuf11MessageLiteE", "N6google8protobuf7ClosureE", "N6google8protobuf14FatalExceptionE", "N6google8protobuf8internal16FunctionClosure0E", "N6google8protobuf8internal12FieldSkipperE", "N6google8protobuf17DescriptorBuilder17OptionInterpreter21AggregateOptionFinderE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_20FileDescriptorTablesEEE", "N6google8protobuf8internal16FunctionClosure1IPSt4pairIPKNS0_20FileDescriptorTablesEPKNS0_14SourceCodeInfoEEEE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_14FileDescriptorEEE", "N6google8protobuf8internal16FunctionClosure1IPNS1_14LazyDescriptorEEE", "N6google8protobuf23SourceCodeInfo_LocationE", "N6google8protobuf14ServiceOptionsE", "N6google8protobuf12FieldOptionsE", "N6google8protobuf17FileDescriptorSetE", "N6google8protobuf28UninterpretedOption_NamePartE", "N6google8protobuf37EnumDescriptorProto_EnumReservedRangeE", "N6google8protobuf19EnumDescriptorProtoE", "N6google8protobuf14MessageOptionsE", "N6google8protobuf21ExtensionRangeOptionsE", "N6google8protobuf13MethodOptionsE", "N6google8protobuf19FileDescriptorProtoE", "N6google8protobuf24EnumValueDescriptorProtoE", "N6google8protobuf15DescriptorProtoE", "N6google8protobuf19UninterpretedOptionE", "N6google8protobuf29DescriptorProto_ReservedRangeE", "N6google8protobuf30DescriptorProto_ExtensionRangeE", "N6google8protobuf14SourceCodeInfoE", "N6google8protobuf28GeneratedCodeInfo_AnnotationE", "N6google8protobuf11FileOptionsE", "N6google8protobuf20OneofDescriptorProtoE", "N6google8protobuf16EnumValueOptionsE", "N6google8protobuf11EnumOptionsE", "N6google8protobuf21MethodDescriptorProtoE", "N6google8protobuf17GeneratedCodeInfoE", "N6google8protobuf20FieldDescriptorProtoE", "N6google8protobuf12OneofOptionsE", "N6google8protobuf25EncodedDescriptorDatabaseE", "N6google8protobuf18DescriptorDatabaseE", "N6google8protobuf21DynamicMessageFactoryE", "N6google8protobuf14DynamicMessageE", "N6google8protobuf16RepeatedPtrFieldINS0_11MessageLiteEEE", "N6google8protobuf8internal29DescriptorPoolExtensionFinderE", "N6google8protobuf8internal26GeneratedMessageReflectionE", "N6google8protobuf2io14ErrorCollectorE", "N6google8protobuf2io18IstreamInputStreamE", "N6google8protobuf2io18IstreamInputStream25CopyingIstreamInputStreamE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINS0_6MapKeyENS0_11MapValueRefEEE", "N6google8protobuf8internal15DynamicMapFieldE", "N6google8protobuf8internal12MapFieldBaseE", "N6google8protobuf8internal33RandomAccessRepeatedFieldAccessorE", "N6google8protobuf8internal16MapFieldAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperISsEE", "N6google8protobuf8internal30RepeatedPtrFieldStringAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINS0_7MessageEEE", "N6google8protobuf8internal31RepeatedPtrFieldMessageAccessorE", "N6google8protobuf8internal20RepeatedFieldWrapperIiEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIiEE", "N6google8protobuf8internal20RepeatedFieldWrapperIjEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIjEE", "N6google8protobuf8internal20RepeatedFieldWrapperIxEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIxEE", "N6google8protobuf8internal20RepeatedFieldWrapperIyEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIyEE", "N6google8protobuf8internal20RepeatedFieldWrapperIfEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIfEE", "N6google8protobuf8internal20RepeatedFieldWrapperIdEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIdEE", "N6google8protobuf8internal20RepeatedFieldWrapperIbEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIbEE", "N6google8protobuf7MessageE", "N6google8protobuf10ReflectionE", "N6google8protobuf14MessageFactoryE", "N6google8protobuf8internal21RepeatedFieldAccessorE", "N6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorE", "N6google8protobuf10TextFormat7Printer13TextGeneratorE", "N6google8protobuf10TextFormat17BaseTextGeneratorE", "N6google8protobuf10TextFormat21FastFieldValuePrinterE", "N6google8protobuf10TextFormat6FinderE", "N6google8protobuf8internal27UnknownFieldSetFieldSkipperE", "N6google8protobuf13RepeatedFieldIiEE", "N6google8protobuf13RepeatedFieldIxEE", "N6google8protobuf13RepeatedFieldIjEE", "N6google8protobuf13RepeatedFieldIyEE", "N6google8protobuf13RepeatedFieldIfEE", "N6google8protobuf13RepeatedFieldIdEE", "N6google8protobuf13RepeatedFieldIbEE", "N6google8protobuf16RepeatedPtrFieldISsEE", "N6google8protobuf8internal15ExtensionFinderE", "N6google8protobuf8internal24GeneratedExtensionFinderE", "N6google8protobuf2io20ZeroCopyOutputStreamE", "WEBPVP8L", "_TIFFMergeFields", "TIFFReadDirectoryCheckOrder", "EstimateStripByteCounts", "TIFFFetchDirectory", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFReadDirectory", "MissingRequired", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagCheckedRational", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFRewriteDirectory", "TIFFWriteDirectoryTagData", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectorySec", "TIFFLinkDirectory", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFResetField", "BuildMapUaToAa", "initYCbCrConversion", "initCIELabConversion", "PhotometricInterpretation", "TIFFClientOpen", "TIFFFillTile", "TIFFFillStripPartial", "TIFFReadEncodedTile", "TIFFReadBufferSetup", "_TIFFReadEncodedTileAndAllocBuffer", "TIFFStartTile", "TIFFReadEncodedStrip", "TIFFReadEncodedStrip", "TIFFFillStrip", "TIFFStripSize", "TIFFScanlineSize64", "TIFFComputeStrip", "TIFFScanlineSize", "TIFFVStripSize64", "TIFFVStripSize", "TIFFTileRowSize", "TIFFVTileSize64", "TIFFTileSize", "TIFFWriteScanline", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "TIFFWriteEncodedStrip", "TIFFOpen", "JPEGPreEncode", "JPEGPreDecode", "JPEGFixupTagsSubsamplingSec", "JPEGFixupTagsSubsampling", "JPEGSetupEncode", "DumpModeDecode", "InitCCITTFax3", "Fax4Decode", "Fax3SetupState", "Fax3Decode1D", "Fax3Encode", "Fax3Decode2D", "Fax4Encode", "LogL16Encode", "LogLuvSetupDecode", "LogLuvDecode32", "LogL16InitState", "LogLuvSetupEncode", "LogL16Decode", "LogLuvEncode32", "TIFFInitSGILog", "LogLuvEncode24", "LogLuvInitState", "LogLuvVSetField", "LZWDecodeCompat", "LZWPreDecode", "LZWDecode", "LZWSetupEncode", "LZWSetupDecode", "TIFFInitLZW", "NeXTPreDecode", "NeXTDecode", "PackBitsDecode", "PredictorSetup", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecode", "ZIPSetupDecode", "ZIPPreDecode", "ZIPDecode", "ZIPSetupEncode", "TIFFInitZIP", "ZIPEncode", "ZIPPostEncode", "ZIPPreEncode", "ZIPVSetField", "N3Iex6ArgExcE", "N3Iex5IoExcE", "N3Iex7TypeExcE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf10OutputFileE", "N3Imf10OutputFile4DataE", "N3Iex8InputExcE", "N3Iex8ErrnoExcE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Imf11StdIFStreamE", "N3Imf9AttributeE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeISsEE", "N3Imf14TypedAttributeISt6vectorISsSaISsEEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Iex7MathExcE", "N3Iex11OverflowExcE", "N3Imf10CompressorE", "N3Imf9InputFileE", "N3Imf9InputFile4DataE", "N3Imf13RleCompressorE", "N3Imf17ScanLineInputFile4DataE", "N3Imf17ScanLineInputFileE", "N3Imf7OStreamE", "N3Imf7IStreamE", "N3Imf13ZipCompressorE", "N3Imf15OpaqueAttributeE", "N3Imf15Pxr24CompressorE", "N3Imf13PizCompressorE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "N3Iex7BaseExcE", "N9IlmThread5MutexE", "N9IlmThread9SemaphoreE", "N9IlmThread4TaskE", "N9IlmThread10ThreadPoolE", "N3Imf13B44CompressorE", "N3Imf14TiledInputFileE", "N3Imf14TiledInputFile4DataE", "N9IlmThread6ThreadE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "N9__gnu_cxx29__concurrence_broadcast_errorE", "N9__gnu_cxx24__concurrence_wait_errorE", "St9type_info", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "PKDs", "PKDi", "PKDf", "PKDd", "PKDe", "PKDn", "N10__cxxabiv123__fundamental_type_infoE", "N10__cxxabiv115__forced_unwindE", "N10__cxxabiv119__foreign_exceptionE", "St9exception", "St13bad_exception", "St9bad_alloc", "St9basic_iosIcSt11char_traitsIcEE", "St13runtime_error", "St16invalid_argument", "St12out_of_range", "St11logic_error", "St11range_error", "St12length_error", "St15basic_streambufIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St8ios_base", "St9time_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St16__numpunct_cacheIcE", "St11__timepunctIcE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb1EE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8messagesIcE", "St8numpunctIcE", "St10moneypunctIcLb0EE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7collateIcE", "St10moneypunctIcLb1EE", "St18__moneypunct_cacheIcLb0EE", "St17__timepunct_cacheIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St7codecvtIcc9mbstate_tE", "St13basic_istreamIwSt11char_traitsIwEE", "St19basic_ostringstreamIcSt11char_traitsIcESaIcEE", "St19basic_istringstreamIcSt11char_traitsIcESaIcEE", "St18basic_stringstreamIcSt11char_traitsIcESaIcEE", "St15basic_stringbufIcSt11char_traitsIcESaIcEE", "St5ctypeIcE", "St5ctypeIwE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "NSt6locale5facetE", "St10moneypunctIwLb0EE", "St10moneypunctIwLb1EE", "St18__moneypunct_cacheIwLb0EE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7collateIwE", "St17__timepunct_cacheIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb1EE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St8messagesIwE", "St16__numpunct_cacheIwE", "St21__ctype_abstract_baseIwE", "St11__timepunctIwE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St8numpunctIwE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St14basic_ifstreamIcSt11char_traitsIcEE", "St13basic_filebufIcSt11char_traitsIcEE", "St14basic_ofstreamIcSt11char_traitsIcEE", "St10bad_typeid", "N10__cxxabiv117__pbase_type_infoE", "St8bad_cast", "St14error_category"], "debugstrings": ["<?xml version=\"1.0\" encoding=\"%s\"?>\n", "<?xml version=\"1.0\"?>\n", "#version: 1.0", "Unsupported YAML version (it must be 1.x)", "Unknown/unsupported color conversion code", "Unknown / unsupported color conversion code", "version?", "version does not match", "versions.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/versions.pb.cc", "JPEG2000 LOADER ERROR: colorspace conversion failed", "TBB_VERSION", "This program requires version ", " of the Protocol Buffer runtime library, but the installed version is ", "This program was compiled against version ", " of the Protocol Buffer runtime library, which is not compatible with the installed version (", "Wrong JPEG library version: library is %d, caller expects %d", "Unsupported color conversion request", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION", "png_image_finish_read: damaged PNG_IMAGE_VERSION", "PNG file corrupted by ASCII conversion", " libpng version 1.6.34 - September 29, 2017\n\n", "unsupported zlib version", "ASCII conversion buffer too small", "png_image_write_to_memory: incorrect PNG_IMAGE_VERSION", "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION", "png_image_write_to_file: incorrect PNG_IMAGE_VERSION", "OptoelectricConversionFactor", "ExifVersion", "FlashpixVersion", "DNGVersion", "DNGBackwardVersion", "VersionYear", "No space for photometric conversion table", "No space for YCbCr->RGB conversion state", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "Not a TIFF file, bad version number %d (0x%x)", "Creator: JasPer Version %s", "Cannot read version ", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", "basic_filebuf::_M_convert_to_external conversion error", "core::getIppVersion_10()", "N10tensorflow10VersionDefE", "void basic_conversion(void*, const channel_layout*, int, int, void*, int, int)", "N3rml16versioned_objectE", "initYCbCrConversion", "initCIELabConversion", "GCC: (GNU) 4.8"], "localsymbols": [""], "dependencies": ["libc.so", "libjnigraphics.so", "libm.so", "libdl.so", "libz.so", "liblog.so"], "elfname": "libopencv_java3.so"}