{"globalvars": [], "importedglobals": ["__sF"], "importedfunctions": ["strrchr", "vfprintf", "madvise", "__stack_chk_fail", "sigprocmask", "strncmp", "getsockopt", "dlclose", "fread", "utimes", "freeaddrinfo", "remove", "fsync", "fputc", "sigdelset", "pthread_mutex_unlock", "pthread_rwlock_destroy", "getsockname", "isxdigit", "getenv", "listen", "strtod", "getcwd", "tolower", "pthread_mutex_init", "mmap", "readlink", "fcntl", "strerror", "strcpy", "pthread_mutex_destroy", "mkdir", "write", "pthread_key_delete", "memcpy", "gethostbyname", "getaddrinfo", "lseek64", "__errno", "accept", "unlink", "pthread_once", "sysconf", "ioctl", "bind", "sigaction", "pthread_mutexattr_init", "fopen", "pthread_equal", "getuid", "rmdir", "strtol", "open", "mremap", "strncpy", "strspn", "memcmp", "dl_iterate_phdr", "isupper", "memchr", "close", "localtime", "strlen", "mprotect", "signal", "pthread_getspecific", "strchr", "strdup", "connect", "memmove", "read", "munlock", "atoi", "dlopen", "pthread_key_create", "time", "ftell", "stat", "access", "fstat", "dlsym", "tcsetattr", "mlock", "fflush", "malloc", "siglongjmp", "poll", "fchown", "strtoul", "log", "munmap", "memset", "realloc", "sscanf", "isspace", "__assert2", "sprintf", "strcspn", "ftruncate", "setsockopt", "getpid", "socket", "strcat", "fclose", "ferror", "strncasecmp", "strcasecmp", "fwrite", "sigfillset", "gmtime_r", "fseek", "pthread_mutexattr_settype", "gai_strerror", "fchmod", "puts", "fprintf", "tcgetattr", "fputs", "pthread_self", "pthread_setspecific", "pthread_mutexattr_destroy", "lstat", "snprintf", "getnameinfo", "feof", "pthread_mutex_lock", "strcmp", "dlerror", "strtoll", "sigsetjmp", "gettimeofday", "free", "pthread_rwlock_unlock", "fgets", "isalnum", "usleep", "memalign", "pthread_mutex_trylock", "geteuid", "qsort", "fileno", "pthread_rwlock_rdlock", "pthread_rwlock_wrlock", "abort", "pthread_rwlock_init"], "exportedfunctions": ["JNI_OnLoad"], "allstrings": ["SQLite format 3", "\f\f\f\f\f\f\f\f\f\f", "-journal", "-wal", "BINARY", "tU6p", "xPq>.T", "^(;r", "onoffalseyestruextrafull", "aceinouyyacdeeghijklnorstuuwyzouaiougkojgnaeiorusthaeoy", "PRAGMA cipher command is deprecated, please remove from usage.", "cipher_fips_status", "cipher_store_pass", "cipher_profile", "cipher_add_random", "cipher_migrate", "cipher_provider", "cipher_provider_version", "cipher_version", "cipher", "rekey_cipher", "cipher_default_kdf_iter", "kdf_iter", "fast_kdf_iter", "rekey_kdf_iter", "cipher_page_size", "cipher_default_page_size", "cipher_default_use_hmac", "cipher_use_hmac", "cipher_hmac_pgno", "native", "cipher_hmac_salt_mask", "%02x", "main", "SELECT 'CREATE TABLE %s.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND rootpage>0", "SELECT 'CREATE INDEX %s.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %%' ", "SELECT 'CREATE UNIQUE INDEX %s.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %%'", "SELECT 'INSERT INTO %s.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND rootpage>0", "SELECT 'DELETE FROM %s.' || quote(name) || ';' FROM %s.sqlite_master WHERE name='sqlite_sequence' ", "SELECT 'INSERT INTO %s.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';' FROM %s.sqlite_master WHERE name=='sqlite_sequence';", "INSERT INTO %s.sqlite_master   SELECT type, name, tbl_name, rootpage, sql    FROM main.sqlite_master   WHERE type='view' OR type='trigger'      OR (type='table' AND rootpage=0)", "aes-256-cbc", "%s-migrated", "PRAGMA cipher_use_hmac = OFF;", "PRAGMA kdf_iter = 4000;", "ATTACH DATABASE '%s-migrated' as migrate KEY '%q';", "%s%s", "PRAGMA migrate.user_version = %d;", "SELECT sqlcipher_export('migrate');", "BEGIN;", "stdout", "stderr", "unix", "unix-none", "unix-dotfile", "unix-excl", "source and destination must be distinct", "string or blob too big", "cannot open virtual table: %s", "cannot open table without rowid: %s", "cannot open view: %s", "no such column: \"%s\"", "foreign key", "indexed", "cannot open %s column for writing", "create", "trigger", "temp", "temporary", "explain", "2017-08-24 16:21:36 8d3a7ea6c5690d6b7c3767558f4f01b511c55463e3f9e64506801fe9b74dce34", "unknown database: %s", "INTEGER", "no such table column: %s.%s", "SQLITE_", "database is deadlocked", "3.4.2", "%02x ", "PRAGMA user_version;", "Elapsed time:%.3f ms - %s\n", "openssl", "OpenSSL 1.1.0g  2 Nov 2017", "thstndrd", "0123456789ABCDEF0123456789abcdef", "NULL", "(NULL)", "cannot fstat db file %s", "file unlinked while open: %s", "multiple links to file: %s", "file renamed while open: %s", "open", "close", "access", "getcwd", "stat", "fstat", "ftruncate", "fcntl", "read", "pread", "pread64", "write", "pwrite", "pwrite64", "fchmod", "fallocate", "unlink", "openDirectory", "mkdir", "rmdir", "fchown", "geteuid", "mmap", "munmap", "mremap", "getpagesize", "readlink", "lstat", "attempt to open \"%s\" as file descriptor %d", "/dev/null", "os_unix.c:%d: (%d) %s(%s) - %s", "cannot open file", "%s at line %d of [%.10s]", "full_fsync", "%s/etilqs_%llx%c", "/var/tmp", "/usr/tmp", "/tmp", "SQLITE_TMPDIR", "TMPDIR", "%s-shm", "readonly_shm", "modeof", "psow", "%s.lock", "fsync", "/dev/urandom", "database corruption", "recovered %d pages from %s", "recovered %d frames from WAL file %s", "cannot limit WAL size: %s", "unknown database %s", "unable to open a temporary database file for storing temporary tables", ":memory:", "nolock", "immutable", "destination database is in use", "API called with finalized prepared statement", "FOREIGN KEY constraint failed", "%s-mjXXXXXX9XXz", "MJ delete: %s", "MJ collide: %s", "-mj%06X9%02X", "%lld", "%!.15g", "922337203685477580", "API called with NULL prepared statement", "%.2x", "Savepoint", "AutoCommit", "Transaction", "SorterNext", "PrevIfOpen", "NextIfOpen", "Prev", "Next", "Checkpoint", "JournalMode", "Vacuum", "VFilter", "VUpdate", "Goto", "Gosub", "InitCoroutine", "Yield", "MustBeInt", "Jump", "Once", "IfNot", "IfNullRow", "SeekLT", "SeekLE", "SeekGE", "SeekGT", "NoConflict", "NotFound", "Found", "SeekRowid", "NotExists", "Last", "IfSmaller", "SorterSort", "Sort", "Rewind", "IdxLE", "IdxGT", "IdxLT", "IdxGE", "RowSetRead", "RowSetTest", "Program", "FkIfZero", "IfPos", "IfNotZero", "DecrJumpZero", "IncrVacuum", "VNext", "Init", "Return", "EndCoroutine", "HaltIfNull", "Halt", "Integer", "Int64", "String", "Null", "SoftNull", "Blob", "Variable", "Move", "Copy", "SCopy", "IntCopy", "ResultRow", "CollSeq", "AddImm", "RealAffinity", "Cast", "Permutation", "IsNull", "NotNull", "ElseNotEq", "BitAnd", "BitOr", "ShiftLeft", "ShiftRight", "Subtract", "Multiply", "Divide", "Remainder", "Concat", "Compare", "BitNot", "Column", "String8", "Affinity", "MakeRecord", "Count", "ReadCookie", "SetCookie", "ReopenIdx", "OpenRead", "OpenWrite", "OpenDup", "OpenAutoindex", "OpenEphemeral", "SorterOpen", "SequenceTest", "OpenPseudo", "Close", "ColumnsUsed", "Sequence", "NewRowid", "Insert", "InsertInt", "Delete", "ResetCount", "SorterCompare", "SorterData", "RowData", "Rowid", "NullRow", "SorterInsert", "IdxInsert", "IdxDelete", "DeferredSeek", "IdxRowid", "Destroy", "Clear", "Real", "ResetSorter", "CreateIndex", "CreateTable", "SqlExec", "ParseSchema", "LoadAnalysis", "DropTable", "DropIndex", "DropTrigger", "IntegrityCk", "RowSetAdd", "Param", "FkCounter", "MemMax", "OffsetLimit", "AggStep0", "AggStep", "AggFinal", "Expire", "TableLock", "VBegin", "VCreate", "VDestroy", "VOpen", "VColumn", "VRename", "Pagecount", "MaxPgcnt", "PureFunc0", "Function0", "PureFunc", "Function", "CursorHint", "Noop", "Explain", "k(%d", ",%s%s", "(%.20s)", "%s(%d)", "%.16g", "(blob)", "vtab:%p", "program", "NOT NULL", "UNIQUE", "CHECK", "FOREIGN KEY", "%s constraint failed", "%z: %s", "abort at %d in [%s]: %s", "cannot open savepoint - SQL statements in progress", "no such savepoint: %s", "cannot release savepoint - SQL statements in progress", "cannot commit transaction - SQL statements in progress", "cannot start a transaction within a transaction", "cannot rollback - no transaction is active", "cannot commit - no transaction is active", "database schema has changed", "sqlite_master", "SELECT name, rootpage, sql FROM '%q'.%s WHERE %s ORDER BY rowid", "too many levels of trigger recursion", "cannot change %s wal mode from within a transaction", "into", "out of", "database table is locked: %s", "-- %s", "statement aborts at %d: [%s] %s", "out of memory", "create ", "invalid rootpage", "malformed database schema (%s)", "%z - %s", "sqlite_stat1", "SELECT tbl,idx,stat FROM %Q.sqlite_stat1", "unordered*", "sz=[0-9]*", "noskipscan*", "sqlite_stat4", "SELECT idx,count(*) FROM %Q.sqlite_stat4 GROUP BY idx", "SELECT idx,neq,nlt,ndlt,sample FROM %Q.sqlite_stat4", "sqlite_stat3", "SELECT idx,count(*) FROM %Q.sqlite_stat3 GROUP BY idx", "SELECT idx,neq,nlt,ndlt,sqlite_record(sample) FROM %Q.sqlite_stat3", "Main freelist: ", "Page %d is never used", "Pointer map page %d is referenced", "%d of %d pages missing from overflow list starting at %d", "failed to get page %d", "freelist leaf count too big on page %d", "free-page count in header is too small", "invalid page number %d", "2nd reference to page %d", "Failed to read ptrmap key=%d", "Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)", "Page %d: ", "unable to get the page. error code=%d", "btreeInitPage() returns error code %d", "On tree page %d cell %d: ", "On page %d at right child: ", "Offset %d out of range %d..%d", "Extends off end of page", "Rowid %lld out of order", "Child page depth differs", "Multiple uses for byte %u of page %d", "Fragmentation of %d bytes reported as %d on page %d", "delete", "persist", "truncate", "memory", "cannot VACUUM from within a transaction", "cannot VACUUM - SQL statements in progress", "ATTACH''AS vacuum_db", "BEGIN", "SELECT sql FROM \"%w\".sqlite_master WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0", "SELECT sql FROM \"%w\".sqlite_master WHERE type='index' AND length(sql)>10", "SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM\"%w\".'||quote(name)FROM vacuum_db.sqlite_master WHERE type='table'AND coalesce(rootpage,1)>0", "INSERT INTO vacuum_db.sqlite_master SELECT*FROM \"%w\".sqlite_master WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)", "no such module: %s", "vtable constructor called recursively: %s", "vtable constructor failed: %s", "vtable constructor did not declare schema: %s", "bind on a busy prepared statement: [%s]", "'%.*q'", "zeroblob(%d)", "cannot open value of type %s", "null", "real", "integer", "no such rowid: %lld", "no such view", "no such table", "pragma_", "%s: %s.%s", "%s: %s", "activate_extensions", "application_id", "auto_vacuum", "automatic_index", "busy_timeout", "cache_size", "cache_spill", "case_sensitive_like", "cell_size_check", "checkpoint_fullfsync", "collation_list", "compile_options", "count_changes", "data_version", "database_list", "default_cache_size", "defer_foreign_keys", "empty_result_callbacks", "encoding", "foreign_key_check", "foreign_key_list", "foreign_keys", "freelist_count", "full_column_names", "fullfsync", "hexkey", "hexrekey", "ignore_check_constraints", "incremental_vacuum", "index_info", "index_list", "index_xinfo", "integrity_check", "journal_mode", "journal_size_limit", "legacy_file_format", "locking_mode", "max_page_count", "mmap_size", "optimize", "page_count", "page_size", "query_only", "quick_check", "read_uncommitted", "recursive_triggers", "rekey", "reverse_unordered_selects", "schema_version", "secure_delete", "short_column_names", "shrink_memory", "soft_heap_limit", "synchronous", "table_info", "temp_store", "temp_store_directory", "threads", "user_version", "wal_autocheckpoint", "wal_checkpoint", "writable_schema", "CREATE TABLE x", "%c\"%s\"", "(\"%s\"", ",arg HIDDEN", ",schema HIDDEN", "name", "type", "notnull", "dflt_value", "wdth", "hght", "flgs", "seqno", "desc", "coll", "unique", "origin", "partial", "file", "builtin", "table", "from", "on_update", "on_delete", "match", "rowid", "parent", "fkid", "busy", "checkpointed", "timeout", "database", "status", "PRAGMA ", "unopened", "API call with %s database connection pointer", "not authorized", "sqlite3_extension_init", "%s.%s", "unable to open shared library [%s]", "_init", "no entry point [%s] in shared library [%s]", "error during initialization: %s", "database schema is locked: %s", "statement too long", "addr", "opcode", "comment", "selectid", "order", "detail", "sqlite3_get_table() called with two or more incompatible queries", "unrecognized token: \"%.*s\"", "parser stack overflow", "unknown table option: %.*s", "set list", "near \"%T\": syntax error", "too many arguments on function %T", "qualified table names are not allowed on INSERT, UPDATE, and DELETE statements within triggers", "the INDEXED BY clause is not allowed on UPDATE or DELETE statements within triggers", "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements within triggers", "no such collation sequence: %s", "misuse of aggregate: %s()", "unknown function: %s()", "%d columns assigned %d values", "row value misused", "RAISE() may only be used within a trigger-program", "hex literal too big: %s%s", "sub-select returns %d columns - expected %d", "EXECUTE %s%s SUBQUERY %d", "CORRELATED ", "LIST", "SCALAR", "USING INDEX %s FOR IN-OPERATOR", "authorizer malfunction", "ROLLBACK", "COMMIT", "RELEASE", "sqlite_temp_master", "temporary table name must be unqualified", "table %T already exists", "there is already an index named %s", "sqlite_sequence", "corrupt database", "unknown database %T", "sqlite_", "object name reserved for internal use: %s", "AUTOINCREMENT not allowed on WITHOUT ROWID tables", "PRIMARY KEY missing on table %s", "TABLE", "view", "VIEW", "CREATE %s %.*s", "UPDATE %Q.%s SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q WHERE rowid=#%d", "CREATE TABLE %Q.sqlite_sequence(name,seq)", "tbl_name='%q' AND type!='trigger'", "the \".\" operator", "second argument to likelihood() must be a constant between 0.0 and 1.0", "not authorized to use function: %s", "non-deterministic functions", "misuse of aggregate function %.*s()", "no such function: %.*s", "wrong number of arguments to function %.*s()", "subqueries", "parameters", "partial index WHERE clauses", "index expressions", "CHECK constraints", "%s prohibited in %s", "misuse of aliased aggregate %s", "no such column", "ambiguous column name", "%s: %s.%s.%s", "ROWID", "access to %s.%s.%s is prohibited", "access to %s.%s is prohibited", "a GROUP BY clause is required before HAVING", "ORDER", "GROUP", "aggregate functions are not allowed in the GROUP BY clause", "sqlite_sq_%p", "too many references to \"%s\": max 65535", "%s.%s.%s", "no such table: %s", "no tables specified", "too many columns in result set", "multiple references to recursive table: %s", "circular reference: %s", "table %s has %d values for %d columns", "multiple recursive references: %s", "recursive reference in a subquery: %s", "column%d", "%.*z:%u", "'%s' is not a function", "view %s is circularly defined", "no such index: %s", "a NATURAL join may not have an ON or USING clause", "cannot have both ON and USING clauses in the same join", "cannot join using column %s - column not present in both tables", "%r %s BY term out of range - should be between 1 and %d", "too many terms in %s BY clause", "all VALUES must have the same number of terms", "SELECTs to the left and right of %s do not have the same number of result columns", "UNION ALL", "INTERSECT", "EXCEPT", "UNION", "too many terms in ORDER BY clause", "%r ORDER BY term does not match any column in the result set", "Expression tree is too large (maximum depth %d)", ",\n  ", "CREATE TABLE ", " TEXT", " NUM", " INT", " REAL", "too many columns on %s", "duplicate column name: %s", "default value of column [%s] is not constant", "table \"%s\" has more than one primary key", "AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY", "index", "cannot create a TEMP index on non-TEMP table \"%s\"", "altertab_", "table %s may not be indexed", "views may not be indexed", "virtual tables may not be indexed", "there is already a table named %s", "index %s already exists", "sqlite_autoindex_%s_%d", "expressions prohibited in PRIMARY KEY and UNIQUE constraints", "conflicting ON CONFLICT clauses specified", "CREATE%s INDEX %.*s", " UNIQUE", "INSERT INTO %Q.%s VALUES('index',%Q,%Q,#%d,%Q);", "name='%q' AND type='index'", "%s %T cannot reference objects in database %s", "%s cannot use variables", "index '%q'", "foreign key on %s should reference only one column of table %T", "number of columns in foreign key does not match the number of columns in the referenced table", "unknown column \"%s\" in foreign key definition", "sqlite_stat", "table %s may not be dropped", "use DROP TABLE to delete table %s", "use DROP VIEW to delete view %s", "sqlite_stat%d", "DELETE FROM %Q.%s WHERE %s=%Q", "DELETE FROM %Q.sqlite_sequence WHERE name=%Q", "DELETE FROM %Q.%s WHERE tbl_name=%Q and type!='trigger'", "DELETE FROM %Q.%s WHERE name=%Q AND type='trigger'", "UPDATE %Q.%s SET rootpage=%d WHERE #%d AND rootpage=#%d", "parameters are not allowed in views", "expected %d columns for '%s' but got %d", "DISTINCT", "GROUP BY", "RIGHT PART OF ORDER BY", "ORDER BY", "ORDER BY clause should come after %s not before", "LIMIT clause should come after %s not before", "recursive aggregate queries not supported", "COMPOUND SUBQUERIES %d AND %d %s(%s)", "USING TEMP B-TREE ", "at most %d tables in a join", "too many arguments on %s() - max %d", "ON clause references tables to its right", "NOCASE", "glob", "like", "regexp", "%s.xBestIndex malfunction", "no query solution", "automatic index on %s(%s)", "auto-index", "SEARCH", "SCAN", " SUBQUERY %d", " TABLE %s", " AS %s", "PRIMARY KEY", "AUTOMATIC PARTIAL COVERING INDEX", "AUTOMATIC COVERING INDEX", "COVERING INDEX %s", "INDEX %s", " USING ", ">? AND rowid<", " USING INTEGER PRIMARY KEY (rowid%s?)", " VIRTUAL TABLE INDEX %d:%s", " AND ", "%s=?", "ANY(%s)", "<expr>", "USE TEMP B-TREE FOR %s", "DISTINCT aggregates must have exactly one argument", "SCAN TABLE %s%s%s", " USING COVERING INDEX ", "too many terms in compound SELECT", "a JOIN clause is required before %s", "USING", "unknown or unsupported join type: %T %T%s%T", "RIGHT and FULL OUTER JOINs are not currently supported", "rows deleted", "table %s may not be modified", "cannot modify %s because it is a view", "-- TRIGGER %s", "foreign key mismatch - \"%w\" referencing \"%w\"", "too many columns in %s", "no such column: %s", "rows updated", "%s.rowid", "table %S has no column named %s", "table %S has %d columns but %d values were supplied", "%d values for %d columns", "rows inserted", "variable number must be between ?1 and ?%d", "too many SQL variables", "syntax error after column name \"%.*s\"", "no such index: %S", "index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped", "DELETE FROM %Q.%s WHERE name=%Q AND type='index'", "fast", "normal", "exclusive", "not a writable directory", "Safety level may not be changed inside a transaction", "issisi", "iisX", "isiX", "isisi", "iissssss", "NONE", "*** in database %s ***\n", "NULL value in %s.%s", "CHECK constraint failed in %s", "row ", " missing from index ", "non-unique entry in index ", "wrong # of entries in index ", "UTF8", "UTF-8", "UTF-16le", "UTF-16be", "UTF16le", "UTF16be", "UTF-16", "UTF16", "unsupported encoding: %s", "full", "restart", "ANALYZE \"%w\".\"%w\"", "none", "incremental", "temporary storage cannot be changed from within a transaction", "SET NULL", "SET DEFAULT", "CASCADE", "RESTRICT", "NO ACTION", "LIKE or GLOB pattern too complex", "ESCAPE expression must be a single character", "INSERT INTO %Q.%s VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')", "type='trigger' AND name='%q'", "temporary trigger may not have qualified name", "cannot create triggers on virtual tables", "trigger %T already exists", "cannot create trigger on system table", "cannot create %s trigger on view: %S", "BEFORE", "AFTER", "cannot create INSTEAD OF trigger on table: %S", "no such trigger: %S", "sqlite_attach", "too many attached databases - max %d", "cannot ATTACH database within transaction", "database %s is already in use", "database is already attached", "attached databases must use the same text encoding as main database", "Invalid key value", "unable to open database: %s", "file:", "localhost", "invalid uri authority: %.*s", "cache", "shared", "private", "mode", "no such %s mode: %s", "%s mode not allowed: %s", "no such vfs: %s", "sqlite_detach", "no such database: %s", "cannot detach database %s", "cannot DETACH database within transaction", "database %s is locked", "unable to identify the object to be reindexed", "tbl,idx,stat", "tbl,idx,neq,nlt,ndlt,sample", "CREATE TABLE %Q.%s(%s)", "sqlite_%", "stat_init", "stat_push", "stat_get", "%llu", " %llu", "%llu ", "there is already another table or index with this name: %s", "view %s may not be altered", "UPDATE \"%w\".%s SET sql = sqlite_rename_parent(sql, %Q, %Q) WHERE %s;", "UPDATE %Q.%s SET sql = CASE WHEN type = 'trigger' THEN sqlite_rename_trigger(sql, %Q)ELSE sqlite_rename_table(sql, %Q) END, tbl_name = %Q, name = CASE WHEN type='table' THEN %Q WHEN name LIKE 'sqlite_autoindex%%' AND type='index' THEN 'sqlite_autoindex_' || %Q || substr(name,%d+18) ELSE name END WHERE tbl_name=%Q COLLATE nocase AND (type='table' OR type='index' OR type='trigger');", "UPDATE \"%w\".sqlite_sequence set name = %Q WHERE name = %Q", "UPDATE sqlite_temp_master SET sql = sqlite_rename_trigger(sql, %Q), tbl_name = %Q WHERE %s;", "table %s may not be altered", "name=%Q", "%s OR name=%Q", "type='trigger' AND (%s)", "tbl_name=%Q", "Cannot add a PRIMARY KEY column", "Cannot add a UNIQUE column", "Cannot add a REFERENCES column with non-NULL default value", "Cannot add a NOT NULL column with default value NULL", "Cannot add a column with non-constant default", "UPDATE \"%w\".%s SET sql = substr(sql,1,%d) || ', ' || %Q || substr(sql,%d) WHERE type = 'table' AND name = %Q", "virtual tables may not be altered", "Cannot add a column to a view", "sqlite_altertab_%s", "CREATE VIRTUAL TABLE %T", "UPDATE %Q.%s SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q WHERE rowid=#%d", "name='%q' AND type='table'", "duplicate WITH table name: %s", "soundex", "load_extension", "sqlite_compileoption_used", "sqlite_compileoption_get", "unlikely", "likelihood", "likely", "ltrim", "rtrim", "trim", "typeof", "length", "instr", "printf", "unicode", "char", "round", "upper", "lower", "ifnull", "random", "randomblob", "nullif", "sqlite_version", "sqlite_source_id", "sqlite_log", "quote", "last_insert_rowid", "changes", "total_changes", "replace", "zeroblob", "substr", "total", "count", "group_concat", "coalesce", "?000", "text", "blob", "integer overflow", "%.*f", "%!.20e", "sqlite_rename_table", "sqlite_rename_trigger", "sqlite_rename_parent", "%.*s\"%w\"%s", "%s%.*s\"%w\"", "sqlite_record", "julianday", "date", "time", "datetime", "strftime", "current_time", "current_timestamp", "current_date", "40f-21a-21d", "20c:20e", "20b:20e", "non-deterministic function in index expression or CHECK constraint", "localtime", "unixepoch", "weekday ", "start of ", "month", "year", "local time unavailable", "second", "minute", "hour", "%04d-%02d-%02d", "%02d:%02d:%02d", "%04d-%02d-%02d %02d:%02d:%02d", "%02d", "%06.3f", "%03d", "%04d", "failed to allocate %u bytes of memory", "failed memory resize %u to %u bytes", "unable to close due to unfinalized statements or unfinished backups", "not an error", "SQL logic error", "access permission denied", "query aborted", "database is locked", "database table is locked", "attempt to write a readonly database", "interrupted", "disk I/O error", "database disk image is malformed", "unknown operation", "database or disk is full", "unable to open database file", "locking protocol", "constraint failed", "datatype mismatch", "bad parameter or other API misuse", "authorization denied", "column index out of range", "file is not a database", "unknown error", "abort due to ROLLBACK", "unable to delete/modify user-function due to active statements", "unable to use function %s in the requested context", "invalid", "RTRIM", "MATCH", "sqlcipher_export", "fts5", "fts5_source_id", "rank", "reserved fts5 table name: %s", "parse error in \"%s\"", "content", "docsize", "%Q.'%q_%s'", "prefix", "malformed prefix=... directive", "too many prefix indexes (max %d)", "prefix length out of range (max 999)", "tokenize", "multiple tokenize=... directives", "parse error in tokenize directive", "multiple content=... directives", "%Q.%Q", "content_rowid", "multiple content_rowid=... directives", "columnsize", "malformed columnsize=... directive", "columns", "malformed detail=... directive", "unrecognized option: \"%.*s\"", "no such tokenizer: %s", "error in tokenizer constructor", "reserved fts5 column name: %s", "unindexed", "unrecognized column option: %s", "T.%Q", ", T.%Q", ", T.c%d", "%s_data", "data", "id INTEGER PRIMARY KEY, block BLOB", "segid, term, pgno, PRIMARY KEY(segid, term)", "CREATE TABLE %Q.'%q_%q'(%s)%s", " WITHOUT ROWID", "fts5: error creating shadow table %q_%s: %s", "REPLACE INTO '%q'.'%q_data'(id, block) VALUES(?,?)", "id INTEGER PRIMARY KEY", ", c%d", "id INTEGER PRIMARY KEY, sz BLOB", "config", "k PRIMARY KEY, v", "version", "SELECT %s FROM %s T WHERE T.%Q >= ? AND T.%Q <= ? ORDER BY T.%Q ASC", "SELECT %s FROM %s T WHERE T.%Q <= ? AND T.%Q >= ? ORDER BY T.%Q DESC", "SELECT %s FROM %s T WHERE T.%Q=?", "INSERT INTO %Q.'%q_content' VALUES(%s)", "REPLACE INTO %Q.'%q_content' VALUES(%s)", "DELETE FROM %Q.'%q_content' WHERE id=?", "REPLACE INTO %Q.'%q_docsize' VALUES(?,?)", "DELETE FROM %Q.'%q_docsize' WHERE id=?", "SELECT sz FROM %Q.'%q_docsize' WHERE id=?", "REPLACE INTO %Q.'%q_config' VALUES(?,?)", "SELECT %s FROM %s AS T", "block", "CREATE TABLE x(", "%z%s%Q", "%z, %Q HIDDEN, %s HIDDEN)", "PRAGMA %Q.data_version", "SELECT k, v FROM %Q.'%q_config'", "invalid fts5 file format (found %d, expected %d) - run 'rebuild'", "pgsz", "hashsize", "automerge", "usermerge", "crisismerge", "DROP TABLE IF EXISTS %Q.'%q_data';DROP TABLE IF EXISTS %Q.'%q_idx';DROP TABLE IF EXISTS %Q.'%q_config';", "DROP TABLE IF EXISTS %Q.'%q_docsize';", "DROP TABLE IF EXISTS %Q.'%q_content';", "%s: table does not support scanning", "SELECT pgno FROM '%q'.'%q_idx' WHERE segid=? AND term<=? ORDER BY term DESC LIMIT 1", "parse error in rank function: %s", "bm25", "reads", "unknown special query: %.*s", "unterminated string", "fts5: syntax error near \"%.1s\"", "fts5: parser stack overflow", "fts5: %s queries are not supported (detail!=full)", "phrase", "NEAR", "fts5: syntax error near \"%.*s\"", "expected integer, got \"%.*s\"", "fts5: column queries are not supported (detail=none)", "SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s", "DESC", "SELECT %s", "no such function: %s", "cannot %s contentless fts5 table: %s", "UPDATE", "DELETE from", "delete-all", "'delete-all' may only be used with a contentless or external content fts5 table", "rebuild", "'rebuild' may not be used with a contentless fts5 table", "merge", "integrity-check", "DELETE FROM %Q.'%q_data';DELETE FROM %Q.'%q_idx';", "DELETE FROM %Q.'%q_docsize';", "INSERT INTO '%q'.'%q_idx'(segid,term,pgno) VALUES(?,?,?)", "DELETE FROM '%q'.'%q_idx' WHERE segid=?", "DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?", "SELECT count(*) FROM %Q.'%q_%s'", "SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d", "no such cursor: %lld", "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';", "fts5_decode", "fts5_decode_none", "fts5_rowid", " %d(%lld)", " term=%.*s", "corrupt", "{averages} ", "{structure}", "{%ssegid=%d h=%d pgno=%d}", "dlidx ", "%s%d", " {lvl=%d nMerge=%d nSeg=%d", " {id=%d leaves=%d..%d}", " %lld%s", " id=%lld", " nPos=%d%s", "should be: fts5_rowid(subject, ....)", "segment", "should be: fts5_rowid('segment', segid, pgno))", "first arg to fts5_rowid() must be 'segment'", "fts5_expr", "fts5_expr_tcl", "fts5_isalnum", "fts5_fold", "nearset", "wrong number of arguments to function %s", "-col %d ", "-col {%d", "-near %d ", " [%z]", "%s : ", "NEAR(", ", %d)", " NOT ", " OR ", "%s%s%z%s", "wrong number of arguments to function fts5_isalnum", "wrong number of arguments to function fts5_fold", "snippet", "highlight", "wrong number of arguments to function snippet()", "%z%.*s", "wrong number of arguments to function highlight()", "unicode61", "ascii", "porter", "remove_diacritics", "tokenchars", "separators", "ational", "tional", "enci", "ence", "anci", "ance", "izer", "logi", "alli", "entli", "ousli", "ization", "ation", "ator", "alism", "iveness", "fulness", "ousness", "aliti", "iviti", "biliti", "ical", "ness", "icate", "iciti", "ative", "alize", "able", "ible", "ement", "ment", "fts5vocab", "CREATE TABlE vocab(term, col, doc, cnt)", "CREATE TABlE vocab(term, doc, cnt)", "wrong number of vtable arguments", "fts5vocab: unknown table type: %Q", "SELECT t.%Q FROM %Q.%Q AS t WHERE t.%Q MATCH '*id'", "no such fts5 table: %s.%s", "fts5_api_ptr", "fts5: 2017-08-24 16:21:36 8d3a7ea6c5690d6b7c3767558f4f01b511c55463e3f9e64506801fe9b74dce34", "automatic extension loading failed: %s", "simple", "fts3_tokenizer", "offsets", "matchinfo", "fts3", "fts4", "remove_diacritics=1", "remove_diacritics=0", "tokenchars=", "separators=", "fts4aux", "CREATE TABLE x(term, col, documents, occurrences, languageid HIDDEN)", "invalid arguments to fts4aux constructor", "DELETE FROM %Q.'%q_content' WHERE rowid = ?", "SELECT NOT EXISTS(SELECT docid FROM %Q.'%q_content' WHERE rowid!=?)", "DELETE FROM %Q.'%q_content'", "DELETE FROM %Q.'%q_segments'", "DELETE FROM %Q.'%q_segdir'", "DELETE FROM %Q.'%q_docsize'", "DELETE FROM %Q.'%q_stat'", "SELECT %s WHERE rowid=?", "SELECT (SELECT max(idx) FROM %Q.'%q_segdir' WHERE level = ?) + 1", "REPLACE INTO %Q.'%q_segments'(blockid, block) VALUES(?, ?)", "SELECT coalesce((SELECT max(blockid) FROM %Q.'%q_segments') + 1, 1)", "REPLACE INTO %Q.'%q_segdir' VALUES(?,?,?,?,?,?)", "SELECT idx, start_block, leaves_end_block, end_block, root FROM %Q.'%q_segdir' WHERE level = ? ORDER BY idx ASC", "SELECT idx, start_block, leaves_end_block, end_block, root FROM %Q.'%q_segdir' WHERE level BETWEEN ? AND ?ORDER BY level DESC, idx ASC", "SELECT count(*) FROM %Q.'%q_segdir' WHERE level = ?", "SELECT max(level) FROM %Q.'%q_segdir' WHERE level BETWEEN ? AND ?", "DELETE FROM %Q.'%q_segdir' WHERE level = ?", "DELETE FROM %Q.'%q_segments' WHERE blockid BETWEEN ? AND ?", "DELETE FROM %Q.'%q_docsize' WHERE docid = ?", "SELECT size FROM %Q.'%q_docsize' WHERE docid=?", "SELECT value FROM %Q.'%q_stat' WHERE id=?", "REPLACE INTO %Q.'%q_stat' VALUES(?,?)", "DELETE FROM %Q.'%q_segdir' WHERE level BETWEEN ? AND ?", "SELECT ? UNION SELECT level / (1024 * ?) FROM %Q.'%q_segdir'", "SELECT level, count(*) AS cnt FROM %Q.'%q_segdir'   GROUP BY level HAVING cnt>=?  ORDER BY (level %% 1024) ASC LIMIT 1", "SELECT 2 * total(1 + leaves_end_block - start_block)   FROM %Q.'%q_segdir' WHERE level = ? AND idx < ?", "DELETE FROM %Q.'%q_segdir' WHERE level = ? AND idx = ?", "UPDATE %Q.'%q_segdir' SET idx = ? WHERE level=? AND idx=?", "SELECT idx, start_block, leaves_end_block, end_block, root FROM %Q.'%q_segdir' WHERE level = ? AND idx = ?", "UPDATE %Q.'%q_segdir' SET start_block = ?, root = ?WHERE level = ? AND idx = ?", "SELECT 1 FROM %Q.'%q_segments' WHERE blockid=? AND block IS NULL", "SELECT idx FROM %Q.'%q_segdir' WHERE level=? ORDER BY 1 ASC", "SELECT max( level %% 1024 ) FROM %Q.'%q_segdir'", "SELECT level, idx, end_block FROM %Q.'%q_segdir' WHERE level BETWEEN ? AND ? ORDER BY level DESC, idx ASC", "UPDATE OR FAIL %Q.'%q_segdir' SET level=-1,idx=? WHERE level=? AND idx=?", "UPDATE OR FAIL %Q.'%q_segdir' SET level=? WHERE level=-1", "%s_segments", "argument type mismatch", "fts3tokenize disabled", "unknown tokenizer: %s", "compress", "uncompress", "languageid", "notindexed", "unrecognized matchinfo: %s", "unrecognized order: %s", "unrecognized parameter: %s", "error parsing prefix parameter: %s", "missing %s parameter in fts4 constructor", "unknown tokenizer", "SELECT * FROM %Q.%Q", "docid", ",%s(x.'c%d%q')", ", x.%Q", "langid", ", x.'%q'", " FROM '%q'.'%q%s' AS x", "_content", ",%s(?)", "docid INTEGER PRIMARY KEY", "%z, 'c%d%q'", "%z, langid", "CREATE TABLE %Q.'%q_content'(%s)", "CREATE TABLE %Q.'%q_segments'(blockid INTEGER PRIMARY KEY, block BLOB);", "CREATE TABLE %Q.'%q_segdir'(level INTEGER,idx INTEGER,start_block INTEGER,leaves_end_block INTEGER,end_block INTEGER,root BLOB,PRIMARY KEY(level, idx));", "CREATE TABLE %Q.'%q_docsize'(docid INTEGER PRIMARY KEY, size BLOB);", "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);", "PRAGMA %Q.page_size", "__langid", "%Q, ", "%z%Q, ", "CREATE TABLE x(%s %Q HIDDEN, docid HIDDEN, %Q HIDDEN)", "DROP TABLE IF EXISTS %Q.'%q_content'", "DROP TABLE IF EXISTS %Q.'%q_segments'", "DROP TABLE IF EXISTS %Q.'%q_segdir'", "DROP TABLE IF EXISTS %Q.'%q_docsize'", "DROP TABLE IF EXISTS %Q.'%q_stat'", "SELECT %s WHERE rowid BETWEEN %lld AND %lld ORDER BY rowid %s", "SELECT %s ORDER BY rowid %s", "FTS expression tree is too large (maximum depth %d)", "malformed MATCH expression: [%s]", "SELECT %s WHERE rowid = ?", "fts3cursor", "merge=", "automerge=", "%lld %lld", "%s_stat", "</b>", "<b>...</b>", "illegal first argument to %s", "%d %d %d %d ", "Index optimized", "Index already optimal", "SAVEPOINT fts3", "RELEASE fts3", "ROLLBACK TO fts3", "unrecognized matchinfo request: %c", "ALTER TABLE %Q.'%q_content'  RENAME TO '%q_content';", "ALTER TABLE %Q.'%q_docsize'  RENAME TO '%q_docsize';", "ALTER TABLE %Q.'%q_stat'  RENAME TO '%q_stat';", "ALTER TABLE %Q.'%q_segments' RENAME TO '%q_segments';", "ALTER TABLE %Q.'%q_segdir'   RENAME TO '%q_segdir';", "fts3tokenize", "CREATE TABLE x(input, token, start, end, position)", "rtreenode", "rtreedepth", "rtree", "rtree_i32", "%s {%s}", "{%s}", "Invalid argument to rtreedepth()", "Wrong number of columns for an rtree table", "Too few columns for an rtree table", "Too many columns for an rtree table", "CREATE TABLE x(%s", "%s, %s", "%s);", "SELECT length(data) FROM '%q'.'%q_node' WHERE nodeno = 1", "undersize RTree blobs in \"%q_node\"", "INSERT OR REPLACE INTO '%q'.'%q_node' VALUES(:1, :2)", "DELETE FROM '%q'.'%q_node' WHERE nodeno = :1", "SELECT nodeno FROM '%q'.'%q_rowid' WHERE rowid = :1", "INSERT OR REPLACE INTO '%q'.'%q_rowid' VALUES(:1, :2)", "DELETE FROM '%q'.'%q_rowid' WHERE rowid = :1", "SELECT parentnode FROM '%q'.'%q_parent' WHERE nodeno = :1", "INSERT OR REPLACE INTO '%q'.'%q_parent' VALUES(:1, :2)", "DELETE FROM '%q'.'%q_parent' WHERE nodeno = :1", "CREATE TABLE \"%w\".\"%w_node\"(nodeno INTEGER PRIMARY KEY, data BLOB);CREATE TABLE \"%w\".\"%w_rowid\"(rowid INTEGER PRIMARY KEY, nodeno INTEGER);CREATE TABLE \"%w\".\"%w_parent\"(nodeno INTEGER PRIMARY KEY, parentnode INTEGER);INSERT INTO '%q'.'%q_node' VALUES(1, zeroblob(%d))", "SELECT stat FROM %Q.sqlite_stat1 WHERE tbl = '%q_rowid'", "DROP TABLE '%q'.'%q_node';DROP TABLE '%q'.'%q_rowid';DROP TABLE '%q'.'%q_parent';", "%s_node", "RtreeMatchArg", "UNIQUE constraint failed: %s.%s", "rtree constraint failed: %s.(%s<=%s)", "ALTER TABLE %Q.'%q_node'   RENAME TO \"%w_node\";ALTER TABLE %Q.'%q_parent' RENAME TO \"%w_parent\";ALTER TABLE %Q.'%q_rowid'  RENAME TO \"%w_rowid\";", "dbstat", "CREATE TABLE xx(   name       TEXT,             /* Name of table or index */  path       TEXT,             /* Path to page from root */  pageno     INTEGER,          /* Page number */  pagetype   TEXT,             /* 'internal', 'leaf' or 'overflow' */  ncell      INTEGER,          /* Cells on page (0 for overflow) */  payload    INTEGER,          /* Bytes of payload on this page */  unused     INTEGER,          /* Bytes of unused space on this page */  mx_payload INTEGER,          /* Largest payload size of all cells */  pgoffset   INTEGER,          /* Offset of page in file */  pgsize     INTEGER,          /* Size of the page */  schema     TEXT HIDDEN       /* Database schema being analyzed */);", "no such schema: %s", "SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type  UNION ALL  SELECT name, rootpage, type  FROM \"%w\".%s WHERE rootpage!=0  ORDER BY name", "overflow", "%s%.3x+%.6x", "%s%.3x/", "internal", "leaf", "corrupted", "json", "json_array", "json_array_length", "json_extract", "json_insert", "json_object", "json_patch", "json_quote", "json_remove", "json_replace", "json_set", "json_type", "json_valid", "json_group_array", "json_group_object", "json_each", "json_tree", "malformed JSON", "true", "false", "JSON path error near '%q'", "JSON cannot hold BLOB values", "0123456789abcdef", "insert", "json_%s() needs an odd number of arguments", "json_object() requires an even number of arguments", "json_object() labels must be TEXT", "array", "object", "CREATE TABLE x(key,value,type,atom,id,parent,fullkey,path,json HIDDEN,root HIDDEN)", "[%d]", ".%.*s", "unable to delete/modify collation sequence due to active statements", "misuse", "CREATE TABLE x(type text,name text,tbl_name text,rootpage integer,sql text)", "unsupported file format", "SELECT name, rootpage, sql FROM \"%w\".%s ORDER BY rowid", "_ROWID_", "COMPILER=clang-5.0.300080", "DEFAULT_JOURNAL_SIZE_LIMIT=1048576", "ENABLE_COLUMN_METADATA", "ENABLE_DBSTAT_VTAB", "ENABLE_FTS3_PARENTHESIS", "ENABLE_FTS4", "ENABLE_FTS5", "ENABLE_JSON1", "ENABLE_LOAD_EXTENSION", "ENABLE_MEMORY_MANAGEMENT", "ENABLE_RTREE", "ENABLE_STAT4", "ENABLE_UNLOCK_NOTIFY", "HAS_CODEC", "MAX_VARIABLE_NUMBER=99999", "SOUNDEX", "TEMP_STORE=3", "THREADSAFE=1", ", while compiling: ", "net/sqlcipher/database/SQLiteCompiledSql", "nHandle", "nStatement", "native_compile", "(Ljava/lang/String;)V", "native_finalize", "Could not open database", "Could not open the database in read/write mode.", "Could not set busy timeout", "net/sqlcipher/database/SQLiteDatabase", "mNativeHandle", "error code %d", "net/sqlcipher/database/SQLiteDiskIOException", "net/sqlcipher/database/SQLiteDatabaseCorruptException", "net/sqlcipher/database/SQLiteConstraintException", "net/sqlcipher/database/SQLiteAbortException", "net/sqlcipher/database/SQLiteDoneException", "net/sqlcipher/database/SQLiteFullException", "net/sqlcipher/database/SQLiteMisuseException", "net/sqlcipher/database/SQLiteException", "dbopen", "(Ljava/lang/String;I)V", "dbclose", "enableSqlTracing", "enableSqlProfiling", "native_execSQL", "lastInsertRow", "lastChangeCount", "native_getDbLookaside", "releaseMemory", "native_rawExecSQL", "native_status", "(IZ)I", "key_mutf8", "([C)V", "([B)V", "sqlite3_close() failed", "java/lang/IllegalArgumentException", "You must supply an SQL string", "Queries cannot be performed using execSQL(), use query() instead.", "net/sqlcipher/database/SQLiteProgram", "native_bind_null", "(I)V", "native_bind_long", "(IJ)V", "native_bind_double", "(ID)V", "native_bind_string", "(ILjava/lang/String;)V", "native_bind_blob", "(I[B)V", "native_clear_bindings", "handle %p", "statement %p", "net/sqlcipher/database/SQLiteQuery", "native_fill_window", "(Lnet/sqlcipher/CursorWindow;IIIII)I", "native_column_count", "native_column_name", "(I)Ljava/lang/String;", "java/lang/IllegalStateException", "Attempting to access a deactivated, closed, or empty cursor", "Bad CursorWindow", "numColumns mismatch", "net/sqlcipher/RowAllocationException", "Failed to allocate row in reset within native_fill_window", "Unknown column type when filling window", "net/sqlcipher/database/SQLiteStatement", "native_execute", "native_1x1_long", "native_1x1_string", "()Ljava/lang/String;", "net/sqlcipher/CursorWindow", "nWindow", "android/database/CharArrayBuffer", "sizeCopied", "native_init", "(ZJJJ)V", "native_clear", "close_native", "getLong_native", "(II)J", "getBlob_native", "(II)[B", "isBlob_native", "(II)Z", "getString_native", "(II)Ljava/lang/String;", "copyStringToBuffer_native", "(IIILandroid/database/CharArrayBuffer;)[C", "getDouble_native", "(II)D", "isNull_native", "getNumRows_native", "setNumColumns_native", "(I)Z", "allocRow_native", "putBlob_native", "([BII)Z", "putString_native", "(Ljava/lang/String;II)Z", "putLong_native", "(JII)Z", "putDouble_native", "(DII)Z", "freeLastRow_native", "putNull_native", "isString_native", "isFloat_native", "isInteger_native", "getType_native", "(II)I", "Couldn't init cursor window", "clear() called after close()", "Unable to convert BLOB to long", "get field slot from row %d col %d failed", "net/sqlcipher/InvalidRowColumnException", "UNKNOWN type %d", "net/sqlcipher/UnknownTypeException", "INTEGER data in getBlob_native ", "FLOAT data in getBlob_native ", "Unable to convert BLOB to string", "Unable to get field slot", "buf should not be null", "UNKNOWN type in copyStringToBuffer_native()", "Unable to convert BLOB to double", "out of memory\n", "vector", "std::bad_alloc", "bad_array_new_length", "basic_string", "Pure virtual function called!", "Deleted virtual function called!", "Not enough memory to allocate exception!", "Exception destructor has thrown!", "Attempting to rethrow an exception that doesn't exist!", "Can't handle non-C++ exception!", "Internal error during exception handling!", "Can't allocate C++ runtime pthread_key_t", "Can't allocate thread-specific C++ runtime info block.", "/usr/local/google/buildbot/src/android/ndk-r15-release/out/build/tmp/build-170089/build-stlport/ndk/sources/cxx-stl/gabi++/src/dynamic_cast.cc", "const void *(anonymous namespace)::walk_object(const void *, const abi::__class_type_info *, const void *, const abi::__class_type_info *)", "void (anonymous namespace)::base_to_derived_cast(const void *, const abi::__class_type_info *, (anonymous namespace)::cast_context *)", "std::exception", "std::bad_exception", "PANIC:GAbi++:%s\n", "liblog.so", "__android_log_print", "GAbi++", "std::bad_cast", "std::bad_typeid", "/usr/local/google/buildbot/src/android/ndk-r15-release/out/build/tmp/build-170089/build-stlport/ndk/sources/cxx-stl/gabi++/src/vmi_class_type_info.cc", "virtual bool __cxxabiv1::__vmi_class_type_info::walk_to(const __cxxabiv1::__class_type_info *, void *&, __cxxabiv1::__UpcastInfo &) const", "info.base_type != NULL && cur_base_info.base_type != NULL", "*info.base_type == *cur_base_info.base_type", "info.adjustedPtr && cur_base_info.adjustedPtr", "crypto/evp/evp_enc.c", "assertion failed: bl <= (int)sizeof(ctx->buf)", "assertion failed: b <= sizeof ctx->buf", "assertion failed: b <= sizeof ctx->final", "assertion failed: ctx->cipher->block_size == 1 || ctx->cipher->block_size == 8 || ctx->cipher->block_size == 16", "assertion failed: EVP_CIPHER_CTX_iv_length(ctx) <= (int)sizeof(ctx->iv)", "assertion failed: l <= sizeof(c->iv)", "crypto/evp/evp_lib.c", "assertion failed: j <= sizeof(c->iv)", "crypto/evp/p5_crpt2.c", "assertion failed: keylen <= sizeof key", "assertion failed: j <= (int)sizeof(ctx->key)", "crypto/hmac/hmac.c", "crypto/init.c", "crypto/objects/o_names.c", "crypto/objects/obj_dat.c", ".%lu", "UNDEF", "undefined", "rsadsi", "RSA Data Security, Inc.", "pkcs", "RSA Data Security, Inc. PKCS", "rsaEncryption", "RSA-MD2", "md2WithRSAEncryption", "RSA-MD5", "md5WithRSAEncryption", "PBE-MD2-DES", "pbeWithMD2AndDES-CBC", "PBE-MD5-DES", "pbeWithMD5AndDES-CBC", "X500", "directory services (X.500)", "X509", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs7", "pkcs7-data", "pkcs7-signedData", "pkcs7-envelopedData", "pkcs7-signedAndEnvelopedData", "pkcs7-digestData", "pkcs7-encryptedData", "pkcs3", "dhKeyAgreement", "DES-ECB", "des-ecb", "DES-CFB", "des-cfb", "DES-CBC", "des-cbc", "DES-EDE", "des-ede", "DES-EDE3", "des-ede3", "IDEA-CBC", "idea-cbc", "IDEA-CFB", "idea-cfb", "IDEA-ECB", "idea-ecb", "RC2-CBC", "rc2-cbc", "RC2-ECB", "rc2-ecb", "RC2-CFB", "rc2-cfb", "RC2-OFB", "rc2-ofb", "RSA-SHA", "shaWithRSAEncryption", "DES-EDE-CBC", "des-ede-cbc", "DES-EDE3-CBC", "des-ede3-cbc", "DES-OFB", "des-ofb", "IDEA-OFB", "idea-ofb", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "Netscape Communications Corp.", "nsCertExt", "Netscape Certificate Extension", "nsDataType", "Netscape Data Type", "DES-EDE-CFB", "des-ede-cfb", "DES-EDE3-CFB", "des-ede3-cfb", "DES-EDE-OFB", "des-ede-ofb", "DES-EDE3-OFB", "des-ede3-ofb", "SHA1", "sha1", "RSA-SHA1", "sha1WithRSAEncryption", "DSA-SHA", "dsaWithSHA", "DSA-old", "dsaEncryption-old", "PBE-SHA1-RC2-64", "pbeWithSHA1AndRC2-CBC", "PBKDF2", "DSA-SHA1-old", "dsaWithSHA1-old", "nsCertType", "Netscape Cert Type", "nsBaseUrl", "Netscape Base Url", "nsRevocationUrl", "Netscape Revocation Url", "nsCaRevocationUrl", "Netscape CA Revocation Url", "nsRenewalUrl", "Netscape Renewal Url", "nsCaPolicyUrl", "Netscape CA Policy Url", "nsSslServerName", "Netscape SSL Server Name", "nsComment", "Netscape Comment", "nsCertSequence", "Netscape Certificate Sequence", "DESX-CBC", "desx-cbc", "id-ce", "subjectKeyIdentifier", "X509v3 Subject Key Identifier", "keyUsage", "X509v3 Key Usage", "privateKeyUsagePeriod", "X509v3 Private Key Usage Period", "subjectAltName", "X509v3 Subject Alternative Name", "issuerAltName", "X509v3 Issuer Alternative Name", "basicConstraints", "X509v3 Basic Constraints", "crlNumber", "X509v3 CRL Number", "certificatePolicies", "X509v3 Certificate Policies", "authorityKeyIdentifier", "X509v3 Authority Key Identifier", "BF-CBC", "bf-cbc", "BF-ECB", "bf-ecb", "BF-CFB", "bf-cfb", "BF-OFB", "bf-ofb", "MDC2", "mdc2", "RSA-MDC2", "mdc2WithRSA", "RC4-40", "rc4-40", "RC2-40-CBC", "rc2-40-cbc", "givenName", "surname", "initials", "uniqueIdentifier", "crlDistributionPoints", "X509v3 CRL Distribution Points", "RSA-NP-MD5", "md5WithRSA", "serialNumber", "title", "description", "CAST5-CBC", "cast5-cbc", "CAST5-ECB", "cast5-ecb", "CAST5-CFB", "cast5-cfb", "CAST5-OFB", "cast5-ofb", "pbeWithMD5AndCast5CBC", "DSA-SHA1", "dsaWithSHA1", "MD5-SHA1", "md5-sha1", "RSA-SHA1-2", "sha1WithRSA", "dsaEncryption", "RIPEMD160", "ripemd160", "RSA-RIPEMD160", "ripemd160WithRSA", "RC5-CBC", "rc5-cbc", "RC5-ECB", "rc5-ecb", "RC5-CFB", "rc5-cfb", "RC5-OFB", "rc5-ofb", "ZLIB", "zlib compression", "extendedKeyUsage", "X509v3 Extended Key Usage", "PKIX", "id-kp", "serverAuth", "TLS Web Server Authentication", "clientAuth", "TLS Web Client Authentication", "codeSigning", "Code Signing", "emailProtection", "E-mail Protection", "timeStamping", "Time Stamping", "msCodeInd", "Microsoft Individual Code Signing", "msCodeCom", "Microsoft Commercial Code Signing", "msCTLSign", "Microsoft Trust List Signing", "msSGC", "Microsoft Server Gated Crypto", "msEFS", "Microsoft Encrypted File System", "nsSGC", "Netscape Server Gated Crypto", "deltaCRL", "X509v3 Delta CRL Indicator", "CRLReason", "X509v3 CRL Reason Code", "invalidityDate", "Invalidity Date", "SXNetID", "Strong Extranet ID", "PBE-SHA1-RC4-128", "pbeWithSHA1And128BitRC4", "PBE-SHA1-RC4-40", "pbeWithSHA1And40BitRC4", "PBE-SHA1-3DES", "pbeWithSHA1And3-KeyTripleDES-CBC", "PBE-SHA1-2DES", "pbeWithSHA1And2-KeyTripleDES-CBC", "PBE-SHA1-RC2-128", "pbeWithSHA1And128BitRC2-CBC", "PBE-SHA1-RC2-40", "pbeWithSHA1And40BitRC2-CBC", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "id-qt-cps", "Policy Qualifier CPS", "id-qt-unotice", "Policy Qualifier User Notice", "RC2-64-CBC", "rc2-64-cbc", "SMIME-CAPS", "S/MIME Capabilities", "PBE-MD2-RC2-64", "pbeWithMD2AndRC2-CBC", "PBE-MD5-RC2-64", "pbeWithMD5AndRC2-CBC", "PBE-SHA1-DES", "pbeWithSHA1AndDES-CBC", "msExtReq", "Microsoft Extension Request", "extReq", "Extension Request", "name", "dnQualifier", "id-pe", "id-ad", "authorityInfoAccess", "Authority Information Access", "OCSP", "caIssuers", "CA Issuers", "OCSPSigning", "OCSP Signing", "member-body", "ISO Member Body", "ISO-US", "ISO US Member Body", "X9-57", "X9.57", "X9cm", "X9.57 CM ?", "pkcs1", "pkcs5", "SMIME", "S/MIME", "id-smime-mod", "id-smime-ct", "id-smime-aa", "id-smime-alg", "id-smime-cd", "id-smime-spq", "id-smime-cti", "id-smime-mod-cms", "id-smime-mod-ess", "id-smime-mod-oid", "id-smime-mod-msg-v3", "id-smime-mod-ets-eSignature-88", "id-smime-mod-ets-eSignature-97", "id-smime-mod-ets-eSigPolicy-88", "id-smime-mod-ets-eSigPolicy-97", "id-smime-ct-receipt", "id-smime-ct-authData", "id-smime-ct-publishCert", "id-smime-ct-TSTInfo", "id-smime-ct-TDTInfo", "id-smime-ct-contentInfo", "id-smime-ct-DVCSRequestData", "id-smime-ct-DVCSResponseData", "id-smime-aa-receiptRequest", "id-smime-aa-securityLabel", "id-smime-aa-mlExpandHistory", "id-smime-aa-contentHint", "id-smime-aa-msgSigDigest", "id-smime-aa-encapContentType", "id-smime-aa-contentIdentifier", "id-smime-aa-macValue", "id-smime-aa-equivalentLabels", "id-smime-aa-contentReference", "id-smime-aa-encrypKeyPref", "id-smime-aa-signingCertificate", "id-smime-aa-smimeEncryptCerts", "id-smime-aa-timeStampToken", "id-smime-aa-ets-sigPolicyId", "id-smime-aa-ets-commitmentType", "id-smime-aa-ets-signerLocation", "id-smime-aa-ets-signerAttr", "id-smime-aa-ets-otherSigCert", "id-smime-aa-ets-contentTimestamp", "id-smime-aa-ets-CertificateRefs", "id-smime-aa-ets-RevocationRefs", "id-smime-aa-ets-certValues", "id-smime-aa-ets-revocationValues", "id-smime-aa-ets-escTimeStamp", "id-smime-aa-ets-certCRLTimestamp", "id-smime-aa-ets-archiveTimeStamp", "id-smime-aa-signatureType", "id-smime-aa-dvcs-dvc", "id-smime-alg-ESDHwith3DES", "id-smime-alg-ESDHwithRC2", "id-smime-alg-3DESwrap", "id-smime-alg-RC2wrap", "id-smime-alg-ESDH", "id-smime-alg-CMS3DESwrap", "id-smime-alg-CMSRC2wrap", "id-smime-cd-ldap", "id-smime-spq-ets-sqt-uri", "id-smime-spq-ets-sqt-unotice", "id-smime-cti-ets-proofOfOrigin", "id-smime-cti-ets-proofOfReceipt", "id-smime-cti-ets-proofOfDelivery", "id-smime-cti-ets-proofOfSender", "id-smime-cti-ets-proofOfApproval", "id-smime-cti-ets-proofOfCreation", "id-pkix-mod", "id-qt", "id-it", "id-pkip", "id-alg", "id-cmc", "id-on", "id-pda", "id-aca", "id-qcs", "id-cct", "id-pkix1-explicit-88", "id-pkix1-implicit-88", "id-pkix1-explicit-93", "id-pkix1-implicit-93", "id-mod-crmf", "id-mod-cmc", "id-mod-kea-profile-88", "id-mod-kea-profile-93", "id-mod-cmp", "id-mod-qualified-cert-88", "id-mod-qualified-cert-93", "id-mod-attribute-cert", "id-mod-timestamp-protocol", "id-mod-ocsp", "id-mod-dvcs", "id-mod-cmp2000", "biometricInfo", "Biometric Info", "qcStatements", "ac-auditEntity", "ac-targeting", "aaControls", "sbgp-ipAddrBlock", "sbgp-autonomousSysNum", "sbgp-routerIdentifier", "textNotice", "ipsecEndSystem", "IPSec End System", "ipsecTunnel", "IPSec Tunnel", "ipsecUser", "IPSec User", "DVCS", "dvcs", "id-it-caProtEncCert", "id-it-signKeyPairTypes", "id-it-encKeyPairTypes", "id-it-preferredSymmAlg", "id-it-caKeyUpdateInfo", "id-it-currentCRL", "id-it-unsupportedOIDs", "id-it-subscriptionRequest", "id-it-subscriptionResponse", "id-it-keyPairParamReq", "id-it-keyPairParamRep", "id-it-revPassphrase", "id-it-implicitConfirm", "id-it-confirmWaitTime", "id-it-origPKIMessage", "id-regCtrl", "id-regInfo", "id-regCtrl-regToken", "id-regCtrl-authenticator", "id-regCtrl-pkiPublicationInfo", "id-regCtrl-pkiArchiveOptions", "id-regCtrl-oldCertID", "id-regCtrl-protocolEncrKey", "id-regInfo-utf8Pairs", "id-regInfo-certReq", "id-alg-des40", "id-alg-noSignature", "id-alg-dh-sig-hmac-sha1", "id-alg-dh-pop", "id-cmc-statusInfo", "id-cmc-identification", "id-cmc-identityProof", "id-cmc-dataReturn", "id-cmc-transactionId", "id-cmc-senderNonce", "id-cmc-recipientNonce", "id-cmc-addExtensions", "id-cmc-encryptedPOP", "id-cmc-decryptedPOP", "id-cmc-lraPOPWitness", "id-cmc-getCert", "id-cmc-getCRL", "id-cmc-revokeRequest", "id-cmc-regInfo", "id-cmc-responseInfo", "id-cmc-queryPending", "id-cmc-popLinkRandom", "id-cmc-popLinkWitness", "id-cmc-confirmCertAcceptance", "id-on-personalData", "id-pda-dateOfBirth", "id-pda-placeOfBirth", "id-pda-gender", "id-pda-countryOfCitizenship", "id-pda-countryOfResidence", "id-aca-authenticationInfo", "id-aca-accessIdentity", "id-aca-chargingIdentity", "id-aca-group", "id-aca-role", "id-qcs-pkixQCSyntax-v1", "id-cct-crs", "id-cct-PKIData", "id-cct-PKIResponse", "ad_timestamping", "AD Time Stamping", "AD_DVCS", "ad dvcs", "basicOCSPResponse", "Basic OCSP Response", "Nonce", "OCSP Nonce", "CrlID", "OCSP CRL ID", "acceptableResponses", "Acceptable OCSP Responses", "noCheck", "OCSP No Check", "archiveCutoff", "OCSP Archive Cutoff", "serviceLocator", "OCSP Service Locator", "extendedStatus", "Extended OCSP Status", "valid", "path", "trustRoot", "Trust Root", "algorithm", "rsaSignature", "X500algorithms", "directory services - algorithms", "IANA", "iana", "directory", "Directory", "mgmt", "Management", "experimental", "Experimental", "private", "Private", "security", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "domain", "Domain", "NULL", "selected-attribute-types", "Selected Attribute Types", "clearance", "RSA-MD4", "md4WithRSAEncryption", "ac-proxying", "subjectInfoAccess", "Subject Information Access", "id-aca-encAttrs", "role", "policyConstraints", "X509v3 Policy Constraints", "targetInformation", "X509v3 AC Targeting", "noRevAvail", "X509v3 No Revocation Available", "ansi-X9-62", "ANSI X9.62", "prime-field", "characteristic-two-field", "id-ecPublicKey", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "ecdsa-with-SHA1", "CSPName", "Microsoft CSP Name", "AES-128-ECB", "aes-128-ecb", "AES-128-CBC", "aes-128-cbc", "AES-128-OFB", "aes-128-ofb", "AES-128-CFB", "aes-128-cfb", "AES-192-ECB", "aes-192-ecb", "AES-192-CBC", "aes-192-cbc", "AES-192-OFB", "aes-192-ofb", "AES-192-CFB", "aes-192-cfb", "AES-256-ECB", "aes-256-ecb", "AES-256-CBC", "aes-256-cbc", "AES-256-OFB", "aes-256-ofb", "AES-256-CFB", "aes-256-cfb", "holdInstructionCode", "Hold Instruction Code", "holdInstructionNone", "Hold Instruction None", "holdInstructionCallIssuer", "Hold Instruction Call Issuer", "holdInstructionReject", "Hold Instruction Reject", "data", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "mail", "rfc822Mailbox", "info", "favouriteDrink", "roomNumber", "photo", "userClass", "host", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "audio", "documentPublisher", "x500UniqueIdentifier", "mime-mhs", "MIME MHS", "mime-mhs-headings", "mime-mhs-bodies", "id-hex-partial-message", "id-hex-multipart-message", "generationQualifier", "pseudonym", "id-set", "Secure Electronic Transactions", "set-ctype", "content types", "set-msgExt", "message extensions", "set-attr", "set-policy", "set-certExt", "certificate extensions", "set-brand", "setct-PANData", "setct-PANToken", "setct-PANOnly", "setct-OIData", "setct-PI", "setct-PIData", "setct-PIDataUnsigned", "setct-HODInput", "setct-AuthResBaggage", "setct-AuthRevReqBaggage", "setct-AuthRevResBaggage", "setct-CapTokenSeq", "setct-PInitResData", "setct-PI-TBS", "setct-PResData", "setct-AuthReqTBS", "setct-AuthResTBS", "setct-AuthResTBSX", "setct-AuthTokenTBS", "setct-CapTokenData", "setct-CapTokenTBS", "setct-AcqCardCodeMsg", "setct-AuthRevReqTBS", "setct-AuthRevResData", "setct-AuthRevResTBS", "setct-CapReqTBS", "setct-CapReqTBSX", "setct-CapResData", "setct-CapRevReqTBS", "setct-CapRevReqTBSX", "setct-CapRevResData", "setct-CredReqTBS", "setct-CredReqTBSX", "setct-CredResData", "setct-CredRevReqTBS", "setct-CredRevReqTBSX", "setct-CredRevResData", "setct-PCertReqData", "setct-PCertResTBS", "setct-BatchAdminReqData", "setct-BatchAdminResData", "setct-CardCInitResTBS", "setct-MeAqCInitResTBS", "setct-RegFormResTBS", "setct-CertReqData", "setct-CertReqTBS", "setct-CertResData", "setct-CertInqReqTBS", "setct-ErrorTBS", "setct-PIDualSignedTBE", "setct-PIUnsignedTBE", "setct-AuthReqTBE", "setct-AuthResTBE", "setct-AuthResTBEX", "setct-AuthTokenTBE", "setct-CapTokenTBE", "setct-CapTokenTBEX", "setct-AcqCardCodeMsgTBE", "setct-AuthRevReqTBE", "setct-AuthRevResTBE", "setct-AuthRevResTBEB", "setct-CapReqTBE", "setct-CapReqTBEX", "setct-CapResTBE", "setct-CapRevReqTBE", "setct-CapRevReqTBEX", "setct-CapRevResTBE", "setct-CredReqTBE", "setct-CredReqTBEX", "setct-CredResTBE", "setct-CredRevReqTBE", "setct-CredRevReqTBEX", "setct-CredRevResTBE", "setct-BatchAdminReqTBE", "setct-BatchAdminResTBE", "setct-RegFormReqTBE", "setct-CertReqTBE", "setct-CertReqTBEX", "setct-CertResTBE", "setct-CRLNotificationTBS", "setct-CRLNotificationResTBS", "setct-BCIDistributionTBS", "setext-genCrypt", "generic cryptogram", "setext-miAuth", "merchant initiated auth", "setext-pinSecure", "setext-pinAny", "setext-track2", "setext-cv", "additional verification", "set-policy-root", "setCext-hashedRoot", "setCext-certType", "setCext-merchData", "setCext-cCertRequired", "setCext-tunneling", "setCext-setExt", "setCext-setQualf", "setCext-PGWYcapabilities", "setCext-TokenIdentifier", "setCext-Track2Data", "setCext-TokenType", "setCext-IssuerCapabilities", "setAttr-Cert", "setAttr-PGWYcap", "payment gateway capabilities", "setAttr-TokenType", "setAttr-IssCap", "issuer capabilities", "set-rootKeyThumb", "set-addPolicy", "setAttr-Token-EMV", "setAttr-Token-B0Prime", "setAttr-IssCap-CVM", "setAttr-IssCap-T2", "setAttr-IssCap-Sig", "setAttr-GenCryptgrm", "generate cryptogram", "setAttr-T2Enc", "encrypted track 2", "setAttr-T2cleartxt", "cleartext track 2", "setAttr-TokICCsig", "ICC or token signature", "setAttr-SecDevSig", "secure device signature", "set-brand-IATA-ATA", "set-brand-Diners", "set-brand-AmericanExpress", "set-brand-JCB", "set-brand-Visa", "set-brand-MasterCard", "set-brand-Novus", "DES-CDMF", "des-cdmf", "rsaOAEPEncryptionSET", "ITU-T", "itu-t", "JOINT-ISO-ITU-T", "joint-iso-itu-t", "international-organizations", "International Organizations", "msSmartcardLogin", "Microsoft Smartcardlogin", "msUPN", "Microsoft Universal Principal Name", "AES-128-CFB1", "aes-128-cfb1", "AES-192-CFB1", "aes-192-cfb1", "AES-256-CFB1", "aes-256-cfb1", "AES-128-CFB8", "aes-128-cfb8", "AES-192-CFB8", "aes-192-cfb8", "AES-256-CFB8", "aes-256-cfb8", "DES-CFB1", "des-cfb1", "DES-CFB8", "des-cfb8", "DES-EDE3-CFB1", "des-ede3-cfb1", "DES-EDE3-CFB8", "des-ede3-cfb8", "street", "streetAddress", "postalCode", "id-ppl", "proxyCertInfo", "Proxy Certificate Information", "id-ppl-anyLanguage", "Any language", "id-ppl-inheritAll", "Inherit all", "nameConstraints", "X509v3 Name Constraints", "id-ppl-independent", "Independent", "RSA-SHA256", "sha256WithRSAEncryption", "RSA-SHA384", "sha384WithRSAEncryption", "RSA-SHA512", "sha512WithRSAEncryption", "RSA-SHA224", "sha224WithRSAEncryption", "SHA256", "sha256", "SHA384", "sha384", "SHA512", "sha512", "SHA224", "sha224", "identified-organization", "certicom-arc", "wap-wsg", "id-characteristic-two-basis", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "wap-wsg-idm-ecid-wtls1", "wap-wsg-idm-ecid-wtls3", "wap-wsg-idm-ecid-wtls4", "wap-wsg-idm-ecid-wtls5", "wap-wsg-idm-ecid-wtls6", "wap-wsg-idm-ecid-wtls7", "wap-wsg-idm-ecid-wtls8", "wap-wsg-idm-ecid-wtls9", "wap-wsg-idm-ecid-wtls10", "wap-wsg-idm-ecid-wtls11", "wap-wsg-idm-ecid-wtls12", "anyPolicy", "X509v3 Any Policy", "policyMappings", "X509v3 Policy Mappings", "inhibitAnyPolicy", "X509v3 Inhibit Any Policy", "Oakley-EC2N-3", "ipsec3", "Oakley-EC2N-4", "ipsec4", "CAMELLIA-128-CBC", "camellia-128-cbc", "CAMELLIA-192-CBC", "camellia-192-cbc", "CAMELLIA-256-CBC", "camellia-256-cbc", "CAMELLIA-128-ECB", "camellia-128-ecb", "CAMELLIA-192-ECB", "camellia-192-ecb", "CAMELLIA-256-ECB", "camellia-256-ecb", "CAMELLIA-128-CFB", "camellia-128-cfb", "CAMELLIA-192-CFB", "camellia-192-cfb", "CAMELLIA-256-CFB", "camellia-256-cfb", "CAMELLIA-128-CFB1", "camellia-128-cfb1", "CAMELLIA-192-CFB1", "camellia-192-cfb1", "CAMELLIA-256-CFB1", "camellia-256-cfb1", "CAMELLIA-128-CFB8", "camellia-128-cfb8", "CAMELLIA-192-CFB8", "camellia-192-cfb8", "CAMELLIA-256-CFB8", "camellia-256-cfb8", "CAMELLIA-128-OFB", "camellia-128-ofb", "CAMELLIA-192-OFB", "camellia-192-ofb", "CAMELLIA-256-OFB", "camellia-256-ofb", "subjectDirectoryAttributes", "X509v3 Subject Directory Attributes", "issuingDistributionPoint", "X509v3 Issuing Distribution Point", "certificateIssuer", "X509v3 Certificate Issuer", "KISA", "kisa", "SEED-ECB", "seed-ecb", "SEED-CBC", "seed-cbc", "SEED-OFB", "seed-ofb", "SEED-CFB", "seed-cfb", "HMAC-MD5", "hmac-md5", "HMAC-SHA1", "hmac-sha1", "id-PasswordBasedMAC", "password based MAC", "id-DHBasedMac", "Diffie-Hellman based MAC", "id-it-suppLangTags", "caRepository", "CA Repository", "id-smime-ct-compressedData", "id-ct-asciiTextWithCRLF", "id-aes128-wrap", "id-aes192-wrap", "id-aes256-wrap", "ecdsa-with-Recommended", "ecdsa-with-Specified", "ecdsa-with-SHA224", "ecdsa-with-SHA256", "ecdsa-with-SHA384", "ecdsa-with-SHA512", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "id-GostR3411-94-with-GostR3410-2001", "GOST R 34.11-94 with GOST R 34.10-2001", "id-GostR3411-94-with-GostR3410-94", "GOST R 34.11-94 with GOST R 34.10-94", "md_gost94", "GOST R 34.11-94", "id-HMACGostR3411-94", "HMAC GOST 34.11-94", "gost2001", "GOST R 34.10-2001", "gost94", "GOST R 34.10-94", "gost89", "GOST 28147-89", "gost89-cnt", "gost-mac", "GOST 28147-89 MAC", "prf-gostr3411-94", "GOST R 34.11-94 PRF", "id-GostR3410-2001DH", "GOST R 34.10-2001 DH", "id-GostR3410-94DH", "GOST R 34.10-94 DH", "id-Gost28147-89-CryptoPro-KeyMeshing", "id-Gost28147-89-None-KeyMeshing", "id-GostR3411-94-TestParamSet", "id-GostR3411-94-CryptoProParamSet", "id-Gost28147-89-TestParamSet", "id-Gost28147-89-CryptoPro-A-ParamSet", "id-Gost28147-89-CryptoPro-B-ParamSet", "id-Gost28147-89-CryptoPro-C-ParamSet", "id-Gost28147-89-CryptoPro-D-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet", "id-Gost28147-89-CryptoPro-RIC-1-ParamSet", "id-GostR3410-94-TestParamSet", "id-GostR3410-94-CryptoPro-A-ParamSet", "id-GostR3410-94-CryptoPro-B-ParamSet", "id-GostR3410-94-CryptoPro-C-ParamSet", "id-GostR3410-94-CryptoPro-D-ParamSet", "id-GostR3410-94-CryptoPro-XchA-ParamSet", "id-GostR3410-94-CryptoPro-XchB-ParamSet", "id-GostR3410-94-CryptoPro-XchC-ParamSet", "id-GostR3410-2001-TestParamSet", "id-GostR3410-2001-CryptoPro-A-ParamSet", "id-GostR3410-2001-CryptoPro-B-ParamSet", "id-GostR3410-2001-CryptoPro-C-ParamSet", "id-GostR3410-2001-CryptoPro-XchA-ParamSet", "id-GostR3410-2001-CryptoPro-XchB-ParamSet", "id-GostR3410-94-a", "id-GostR3410-94-aBis", "id-GostR3410-94-b", "id-GostR3410-94-bBis", "id-Gost28147-89-cc", "GOST 28147-89 Cryptocom ParamSet", "gost94cc", "GOST 34.10-94 Cryptocom", "gost2001cc", "GOST 34.10-2001 Cryptocom", "id-GostR3411-94-with-GostR3410-94-cc", "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom", "id-GostR3411-94-with-GostR3410-2001-cc", "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom", "id-GostR3410-2001-ParamSet-cc", "GOST R 3410-2001 Parameter Set Cryptocom", "HMAC", "hmac", "LocalKeySet", "Microsoft Local Key set", "freshestCRL", "X509v3 Freshest CRL", "id-on-permanentIdentifier", "Permanent Identifier", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "id-alg-PWRI-KEK", "CMAC", "cmac", "id-aes128-GCM", "aes-128-gcm", "id-aes128-CCM", "aes-128-ccm", "id-aes128-wrap-pad", "id-aes192-GCM", "aes-192-gcm", "id-aes192-CCM", "aes-192-ccm", "id-aes192-wrap-pad", "id-aes256-GCM", "aes-256-gcm", "id-aes256-CCM", "aes-256-ccm", "id-aes256-wrap-pad", "AES-128-CTR", "aes-128-ctr", "AES-192-CTR", "aes-192-ctr", "AES-256-CTR", "aes-256-ctr", "id-camellia128-wrap", "id-camellia192-wrap", "id-camellia256-wrap", "anyExtendedKeyUsage", "Any Extended Key Usage", "MGF1", "mgf1", "RSASSA-PSS", "rsassaPss", "AES-128-XTS", "aes-128-xts", "AES-256-XTS", "aes-256-xts", "RC4-HMAC-MD5", "rc4-hmac-md5", "AES-128-CBC-HMAC-SHA1", "aes-128-cbc-hmac-sha1", "AES-192-CBC-HMAC-SHA1", "aes-192-cbc-hmac-sha1", "AES-256-CBC-HMAC-SHA1", "aes-256-cbc-hmac-sha1", "RSAES-OAEP", "rsaesOaep", "dhpublicnumber", "X9.42 DH", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "dhSinglePass-stdDH-sha1kdf-scheme", "dhSinglePass-stdDH-sha224kdf-scheme", "dhSinglePass-stdDH-sha256kdf-scheme", "dhSinglePass-stdDH-sha384kdf-scheme", "dhSinglePass-stdDH-sha512kdf-scheme", "dhSinglePass-cofactorDH-sha1kdf-scheme", "dhSinglePass-cofactorDH-sha224kdf-scheme", "dhSinglePass-cofactorDH-sha256kdf-scheme", "dhSinglePass-cofactorDH-sha384kdf-scheme", "dhSinglePass-cofactorDH-sha512kdf-scheme", "dh-std-kdf", "dh-cofactor-kdf", "AES-128-CBC-HMAC-SHA256", "aes-128-cbc-hmac-sha256", "AES-192-CBC-HMAC-SHA256", "aes-192-cbc-hmac-sha256", "AES-256-CBC-HMAC-SHA256", "aes-256-cbc-hmac-sha256", "ct_precert_scts", "CT Precertificate SCTs", "ct_precert_poison", "CT Precertificate Poison", "ct_precert_signer", "CT Precertificate Signer", "ct_cert_scts", "CT Certificate SCTs", "jurisdictionL", "jurisdictionLocalityName", "jurisdictionST", "jurisdictionStateOrProvinceName", "jurisdictionC", "jurisdictionCountryName", "AES-128-OCB", "aes-128-ocb", "AES-192-OCB", "aes-192-ocb", "AES-256-OCB", "aes-256-ocb", "CAMELLIA-128-GCM", "camellia-128-gcm", "CAMELLIA-128-CCM", "camellia-128-ccm", "CAMELLIA-128-CTR", "camellia-128-ctr", "CAMELLIA-128-CMAC", "camellia-128-cmac", "CAMELLIA-192-GCM", "camellia-192-gcm", "CAMELLIA-192-CCM", "camellia-192-ccm", "CAMELLIA-192-CTR", "camellia-192-ctr", "CAMELLIA-192-CMAC", "camellia-192-cmac", "CAMELLIA-256-GCM", "camellia-256-gcm", "CAMELLIA-256-CCM", "camellia-256-ccm", "CAMELLIA-256-CTR", "camellia-256-ctr", "CAMELLIA-256-CMAC", "camellia-256-cmac", "id-scrypt", "id-tc26", "gost89-cnt-12", "gost-mac-12", "id-tc26-algorithms", "id-tc26-sign", "gost2012_256", "GOST R 34.10-2012 with 256 bit modulus", "gost2012_512", "GOST R 34.10-2012 with 512 bit modulus", "id-tc26-digest", "md_gost12_256", "GOST R 34.11-2012 with 256 bit hash", "md_gost12_512", "GOST R 34.11-2012 with 512 bit hash", "id-tc26-signwithdigest", "id-tc26-signwithdigest-gost3410-2012-256", "GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)", "id-tc26-signwithdigest-gost3410-2012-512", "GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)", "id-tc26-mac", "id-tc26-hmac-gost-3411-2012-256", "HMAC GOST 34.11-2012 256 bit", "id-tc26-hmac-gost-3411-2012-512", "HMAC GOST 34.11-2012 512 bit", "id-tc26-cipher", "id-tc26-agreement", "id-tc26-agreement-gost-3410-2012-256", "id-tc26-agreement-gost-3410-2012-512", "id-tc26-constants", "id-tc26-sign-constants", "id-tc26-gost-3410-2012-512-constants", "id-tc26-gost-3410-2012-512-paramSetTest", "GOST R 34.10-2012 (512 bit) testing parameter set", "id-tc26-gost-3410-2012-512-paramSetA", "GOST R 34.10-2012 (512 bit) ParamSet A", "id-tc26-gost-3410-2012-512-paramSetB", "GOST R 34.10-2012 (512 bit) ParamSet B", "id-tc26-digest-constants", "id-tc26-cipher-constants", "id-tc26-gost-28147-constants", "id-tc26-gost-28147-param-Z", "GOST 28147-89 TC26 parameter set", "OGRN", "SNILS", "subjectSignTool", "Signing Tool of Subject", "issuerSignTool", "Signing Tool of Issuer", "gost89-cbc", "gost89-ecb", "gost89-ctr", "grasshopper-ecb", "grasshopper-ctr", "grasshopper-ofb", "grasshopper-cbc", "grasshopper-cfb", "grasshopper-mac", "ChaCha20-Poly1305", "chacha20-poly1305", "ChaCha20", "chacha20", "tlsfeature", "TLS Feature", "TLS1-PRF", "tls1-prf", "ipsecIKE", "ipsec Internet Key Exchange", "capwapAC", "Ctrl/provision WAP Access", "capwapWTP", "Ctrl/Provision WAP Termination", "secureShellClient", "SSH Client", "secureShellServer", "SSH Server", "sendRouter", "Send Router", "sendProxiedRouter", "Send Proxied Router", "sendOwner", "Send Owner", "sendProxiedOwner", "Send Proxied Owner", "id-pkinit", "pkInitClientAuth", "PKINIT Client Auth", "pkInitKDC", "Signing KDC Response", "X25519", "X448", "HKDF", "hkdf", "KxRSA", "kx-rsa", "KxECDHE", "kx-ecdhe", "KxDHE", "kx-dhe", "KxECDHE-PSK", "kx-ecdhe-psk", "KxDHE-PSK", "kx-dhe-psk", "KxRSA_PSK", "kx-rsa-psk", "KxPSK", "kx-psk", "KxSRP", "kx-srp", "KxGOST", "kx-gost", "AuthRSA", "auth-rsa", "AuthECDSA", "auth-ecdsa", "AuthPSK", "auth-psk", "AuthDSS", "auth-dss", "AuthGOST01", "auth-gost01", "AuthGOST12", "auth-gost12", "AuthSRP", "auth-srp", "AuthNULL", "auth-null", "BLAKE2b512", "blake2b512", "BLAKE2s256", "blake2s256", "id-smime-ct-contentCollection", "id-smime-ct-authEnvelopedData", "id-ct-xml", "crypto/objects/obj_lib.c", "crypto/objects/obj_xref.c", "crypto/stack/stack.c", "crypto/threads_pthread.c", "OPENSSL_armcap", "crypto/asn1/a_int.c", "crypto/asn1/a_object.c", "<INVALID>", "crypto/asn1/asn1_lib.c", "crypto/asn1/asn_pack.c", "crypto/asn1/evp_asn1.c", "asn1_int_oct", "crypto/asn1/p5_pbev2.c", "PBKDF2PARAM", "salt", "iter", "keylength", "PBE2PARAM", "keyfunc", "encryption", "crypto/asn1/tasn_dec.c", "Field=", ", Type=", "Type=", "crypto/asn1/tasn_enc.c", "crypto/asn1/tasn_fre.c", "crypto/asn1/tasn_new.c", "ASN1_SET_ANY", "ASN1_SEQUENCE_ANY", "ASN1_OCTET_STRING_NDEF", "ASN1_FBOOLEAN", "ASN1_TBOOLEAN", "ASN1_BOOLEAN", "DIRECTORYSTRING", "DISPLAYTEXT", "ASN1_PRINTABLE", "ASN1_SEQUENCE", "ASN1_ANY", "ASN1_OBJECT", "ASN1_NULL", "ASN1_BMPSTRING", "ASN1_UNIVERSALSTRING", "ASN1_VISIBLESTRING", "ASN1_GENERALIZEDTIME", "ASN1_UTCTIME", "ASN1_GENERALSTRING", "ASN1_IA5STRING", "ASN1_T61STRING", "ASN1_PRINTABLESTRING", "ASN1_UTF8STRING", "ASN1_BIT_STRING", "ASN1_ENUMERATED", "ASN1_INTEGER", "ASN1_OCTET_STRING", "crypto/asn1/tasn_utl.c", "X509_ALGORS", "algorithms", "X509_ALGOR", "parameter", "%ld\n", "crypto/asn1/x_long.c", "ZLONG", "LONG", "crypto/async/async.c", "%04x - ", "%02x%c", "%s%04x - <SPACES/NULS>\n", "%02X:", "%02X", "assertion failed: *sbuffer != NULL || buffer != NULL", "crypto/bio/b_print.c", "assertion failed: *currlen <= *maxlen", "assertion failed: *sbuffer != NULL", "0123456789", "0123456789abcdef", "0123456789ABCDEF", "<NULL>", "crypto/bio/bio_lib.c", "crypto/bio/bio_meth.c", "crypto/bn/bn_lib.c", "crypto/bn/bn_mont.c", "crypto/bn/bn_print.c", "%019lu", "bn(%d,%d)", "crypto/bn/bn_shift.c", "crypto/buffer/buffer.c", "(undef)", "openssl_conf", "OPENSSL_init", "OPENSSL_finish", "crypto/conf/conf_mod.c", "module=", ", path=", "%-8d", ", value=", ", retcode=", "OPENSSL_CONF", "openssl.cnf", "%s:%d: OpenSSL internal error: %s\n", "crypto/dso/dso_lib.c", "crypto/engine/eng_dyn.c", "v_check", "bind_engine", "dynamic", "Dynamic engine loading support", "SO_PATH", "Specifies the path to the new ENGINE shared library", "NO_VCHECK", "Specifies to continue even if version checking fails (boolean)", "Specifies an ENGINE id name for loading", "LIST_ADD", "Whether to add a loaded ENGINE to the internal list (0=no,1=yes,2=mandatory)", "DIR_LOAD", "Specifies whether to load from 'DIR_ADD' directories (0=no,1=yes,2=mandatory)", "DIR_ADD", "Adds a directory from which ENGINEs can be loaded", "LOAD", "Load up the ENGINE specified by other settings", "RAND", "CIPHERS", "DIGESTS", "PKEY", "PKEY_CRYPTO", "PKEY_ASN1", "crypto/engine/eng_fat.c", "str=", "crypto/engine/eng_init.c", "crypto/engine/eng_lib.c", "crypto/engine/eng_list.c", "/usr/local/lib/engines-1.1", "OPENSSL_ENGINES", "(TEST_ENG_OPENSSL_PKEY)Loading Private key %s\n", "(TEST_ENG_OPENSSL_RC4) test_init_key() called\n", "openssl", "Software engine support", "crypto/engine/eng_pkey.c", "crypto/engine/tb_asnmth.c", "crypto/engine/tb_cipher.c", "crypto/engine/tb_digest.c", "crypto/engine/tb_pkmeth.c", "unknown", "lib(%lu)", "func(%lu)", "reason(%lu)", "error:%08lX:%s:%s:%s", "crypto/err/err.c", "system lib", "BN lib", "RSA lib", "DH lib", "EVP lib", "BUF lib", "OBJ lib", "PEM lib", "DSA lib", "X509 lib", "ASN1 lib", "EC lib", "BIO lib", "PKCS7 lib", "X509V3 lib", "ENGINE lib", "ECDSA lib", "nested asn1 error", "missing asn1 eos", "fatal", "malloc failure", "called a function you should not call", "passed a null parameter", "internal error", "called a function that was disabled at compile-time", "init fail", "fopen", "connect", "getservbyname", "socket", "ioctlsocket", "bind", "listen", "accept", "opendir", "fread", "getaddrinfo", "getnameinfo", "setsockopt", "getsockopt", "getsockname", "gethostbyname", "fflush", "unknown library", "system library", "bignum routines", "rsa routines", "Diffie-Hellman routines", "digital envelope routines", "memory buffer routines", "object identifier routines", "PEM routines", "dsa routines", "x509 certificate routines", "asn1 encoding routines", "configuration file routines", "common libcrypto routines", "elliptic curve routines", "ECDSA routines", "ECDH routines", "SSL routines", "BIO routines", "PKCS7 routines", "X509 V3 routines", "PKCS12 routines", "random number generator", "DSO support routines", "time stamp routines", "engine routines", "OCSP routines", "UI routines", "FIPS routines", "CMS routines", "HMAC routines", "CT routines", "ASYNC routines", "KDF routines", "DESX", "desx", "DES3", "des3", "DES-EDE-ECB", "des-ede-ecb", "DES-EDE3-ECB", "des-ede3-ecb", "des3-wrap", "IDEA", "idea", "SEED", "seed", "rc2-128", "rc2-64", "rc2-40", "blowfish", "CAST", "cast", "CAST-cbc", "cast-cbc", "aes128-wrap", "AES128", "aes128", "aes192-wrap", "AES192", "aes192", "aes256-wrap", "AES256", "aes256", "CAMELLIA128", "camellia128", "CAMELLIA192", "camellia192", "CAMELLIA256", "camellia256", "ssl3-md5", "ssl3-sha1", "ripemd", "rmd160", "crypto/evp/cmeth_lib.c", "crypto/evp/digest.c", "assertion failed: ctx->digest->md_size <= EVP_MAX_MD_SIZE", "crypto/evp/e_aes.c", "crypto/evp/e_camellia.c", "crypto/evp/e_chacha20_poly1305.c", "crypto/evp/e_des3.c", "assertion failed: l <= sizeof(iv)", "crypto/evp/e_rc2.c", "aes key setup failed", "bad decrypt", "buffer too small", "camellia key setup failed", "cipher parameter error", "command not supported", "copy error", "ctrl not implemented", "ctrl operation not implemented", "data not multiple of block length", "decode error", "different key types", "different parameters", "error loading section", "error setting fips mode", "expecting an hmac key", "expecting an rsa key", "expecting a dh key", "expecting a dsa key", "expecting a ec key", "fips mode not supported", "illegal scrypt parameters", "initialization error", "input not initialized", "invalid digest", "invalid fips mode", "invalid key", "invalid key length", "invalid operation", "keygen failure", "memory limit exceeded", "message digest is null", "method not supported", "missing parameters", "no cipher set", "no default digest", "no digest set", "no key set", "no operation set", "operation not supported for this keytype", "operaton not initialized", "partially overlapping buffers", "pkey asn1 method already registered", "private key decode error", "private key encode error", "public key not rsa", "unknown cipher", "unknown digest", "unknown option", "unknown pbe algorithm", "unsupported algorithm", "unsupported cipher", "unsupported keylength", "unsupported key derivation function", "unsupported key size", "unsupported number of rounds", "unsupported prf", "unsupported private key algorithm", "unsupported salt type", "wrap mode not allowed", "wrong final block length", "aesni_init_key", "aes_init_key", "aes_ocb_cipher", "aes_t4_init_key", "aes_wrap_cipher", "alg_module_init", "camellia_init_key", "chacha20_poly1305_ctrl", "cmll_t4_init_key", "des_ede3_wrap_cipher", "do_sigver_init", "EVP_CipherInit_ex", "EVP_CIPHER_CTX_copy", "EVP_CIPHER_CTX_ctrl", "EVP_CIPHER_CTX_set_key_length", "EVP_DecryptFinal_ex", "EVP_DecryptUpdate", "EVP_DigestInit_ex", "EVP_EncryptFinal_ex", "EVP_EncryptUpdate", "EVP_MD_CTX_copy_ex", "EVP_MD_size", "EVP_OpenInit", "EVP_PBE_alg_add", "EVP_PBE_alg_add_type", "EVP_PBE_CipherInit", "EVP_PBE_scrypt", "EVP_PKCS82PKEY", "EVP_PKEY2PKCS8", "EVP_PKEY_asn1_add0", "EVP_PKEY_copy_parameters", "EVP_PKEY_CTX_ctrl", "EVP_PKEY_CTX_ctrl_str", "EVP_PKEY_CTX_dup", "EVP_PKEY_decrypt", "EVP_PKEY_decrypt_init", "EVP_PKEY_decrypt_old", "EVP_PKEY_derive", "EVP_PKEY_derive_init", "EVP_PKEY_derive_set_peer", "EVP_PKEY_encrypt", "EVP_PKEY_encrypt_init", "EVP_PKEY_encrypt_old", "EVP_PKEY_get0_DH", "EVP_PKEY_get0_DSA", "EVP_PKEY_get0_EC_KEY", "EVP_PKEY_get0_hmac", "EVP_PKEY_get0_RSA", "EVP_PKEY_keygen", "EVP_PKEY_keygen_init", "EVP_PKEY_new", "EVP_PKEY_paramgen", "EVP_PKEY_paramgen_init", "EVP_PKEY_set1_engine", "EVP_PKEY_sign", "EVP_PKEY_sign_init", "EVP_PKEY_verify", "EVP_PKEY_verify_init", "EVP_PKEY_verify_recover", "EVP_PKEY_verify_recover_init", "EVP_SignFinal", "EVP_VerifyFinal", "int_ctx_new", "PKCS5_PBE_keyivgen", "PKCS5_v2_PBE_keyivgen", "PKCS5_v2_PBKDF2_keyivgen", "PKCS5_v2_scrypt_keyivgen", "pkey_set_type", "rc2_magic_to_meth", "rc5_ctrl", "crypto/evp/evp_pbe.c", "TYPE=", "crypto/evp/p5_crpt.c", "assertion failed: EVP_CIPHER_key_length(cipher) <= (int)sizeof(md_tmp)", "assertion failed: EVP_CIPHER_iv_length(cipher) <= 16", "crypto/evp/pmeth_lib.c", "digest", "crypto/ex_data.c", "crypto/hmac/hm_pmeth.c", "hexkey", "idea(int)", "crypto/kdf/hkdf.c", "hexsalt", "hexinfo", "missing parameter", "value missing", "pkey_tls1_prf_ctrl_str", "pkey_tls1_prf_derive", "crypto/kdf/tls1_prf.c", "assertion failed: chunk >= 0", "secret", "hexsecret", "hexseed", "crypto/lhash/lhash.c", "assertion failed: list >= 0 && list < sh.freelist_size", "crypto/mem_sec.c", "assertion failed: ((ptr - sh.arena) & ((sh.arena_size >> list) - 1)) == 0", "assertion failed: bit > 0 && bit < sh.bittable_size", "assertion failed: !TESTBIT(table, bit)", "assertion failed: WITHIN_FREELIST(list)", "assertion failed: WITHIN_ARENA(ptr)", "assertion failed: temp->next == NULL || WITHIN_ARENA(temp->next)", "assertion failed: (char **)temp->next->p_next == list", "assertion failed: TESTBIT(table, bit)", "assertion failed: WITHIN_FREELIST(temp2->p_next) || WITHIN_ARENA(temp2->p_next)", "assertion failed: (bit & 1) == 0", "assertion failed: sh_testbit(ptr, list, sh.bittable)", "assertion failed: ptr == sh_find_my_buddy(buddy, list)", "assertion failed: ptr != NULL", "assertion failed: !sh_testbit(ptr, list, sh.bitmalloc)", "assertion failed: sh.freelist[list] == ptr", "assertion failed: size > 0", "assertion failed: (size & (size - 1)) == 0", "assertion failed: minsize > 0", "assertion failed: (minsize & (minsize - 1)) == 0", "assertion failed: sh.freelist != NULL", "assertion failed: sh.bittable != NULL", "assertion failed: sh.bitmalloc != NULL", "assertion failed: !sh_testbit(temp, slist, sh.bitmalloc)", "assertion failed: temp != sh.freelist[slist]", "assertion failed: sh.freelist[slist] == temp", "assertion failed: temp-(sh.arena_size >> slist) == sh_find_my_buddy(temp, slist)", "assertion failed: sh_testbit(chunk, list, sh.bittable)", "assertion failed: WITHIN_ARENA(chunk)", "crypto/modes/gcm128.c", "crypto/modes/ocb128.c", "crypto/o_str.c", "oid exists", "unknown nid", "OBJ_add_object", "OBJ_create", "OBJ_dup", "OBJ_NAME_new_index", "OBJ_nid2ln", "OBJ_nid2obj", "OBJ_nid2sn", "certificate verify error", "digest err", "error in nextupdate field", "error in thisupdate field", "error parsing url", "missing ocspsigning usage", "nextupdate before thisupdate", "not basic response", "no certificates in chain", "no response data", "no revoked time", "no signer key", "private key does not match certificate", "request not signed", "response contains no revocation data", "root ca not trusted", "server response error", "server response parse error", "signature failure", "signer certificate not found", "status expired", "status not yet valid", "status too old", "unknown message digest", "unsupported requestorname type", "d2i_ocsp_nonce", "OCSP_basic_add1_status", "OCSP_basic_sign", "OCSP_basic_verify", "OCSP_cert_id_new", "ocsp_check_delegated", "ocsp_check_ids", "ocsp_check_issuer", "OCSP_check_validity", "ocsp_match_issuerid", "OCSP_parse_url", "OCSP_request_sign", "OCSP_request_verify", "OCSP_response_get1_basic", "parse_http_line1", "bad base64 decode", "bad end line", "bad iv chars", "bad magic number", "bad password read", "bad version number", "bio write failure", "cipher is null", "error converting private key", "expecting private key blob", "expecting public key blob", "header too long", "inconsistent header", "keyblob header parse error", "keyblob too short", "missing dek iv", "not dek info", "not encrypted", "not proc type", "no start line", "problems getting password", "pvk data too short", "pvk too short", "read key", "short header", "unexpected dek iv", "unsupported encryption", "unsupported key components", "b2i_dss", "b2i_PVK_bio", "b2i_rsa", "check_bitlen_dsa", "check_bitlen_rsa", "d2i_PKCS8PrivateKey_bio", "d2i_PKCS8PrivateKey_fp", "do_b2i", "do_b2i_bio", "do_blob_header", "do_pk8pkey", "do_pk8pkey_fp", "do_PVK_body", "do_PVK_header", "i2b_PVK", "i2b_PVK_bio", "load_iv", "PEM_ASN1_read", "PEM_ASN1_read_bio", "PEM_ASN1_write", "PEM_ASN1_write_bio", "PEM_def_callback", "PEM_do_header", "PEM_get_EVP_CIPHER_INFO", "PEM_read", "PEM_read_bio", "PEM_read_bio_DHparams", "PEM_read_bio_Parameters", "PEM_read_bio_PrivateKey", "PEM_read_DHparams", "PEM_read_PrivateKey", "PEM_SignFinal", "PEM_write", "PEM_write_bio", "PEM_write_PrivateKey", "PEM_X509_INFO_read", "PEM_X509_INFO_read_bio", "PEM_X509_INFO_write_bio", "ANY PRIVATE KEY", "PRIVATE KEY", "ENCRYPTED PRIVATE KEY", "crypto/pem/pem_pkey.c", "%s PRIVATE KEY", "PARAMETERS", "%s PARAMETERS", "DH PARAMETERS", "X9.42 DH PARAMETERS", "crypto/pkcs12/p12_crpt.c", "crypto/pkcs12/p12_key.c", "crypto/pkcs12/p12_utl.c", "cant pack structure", "content type not data", "encode error", "encrypt error", "error setting encrypted data type", "invalid null argument", "invalid null pkcs12 pointer", "iv gen error", "key gen error", "mac absent", "mac generation error", "mac setup error", "mac string set error", "mac verify failure", "parse error", "pkcs12 algor cipherinit error", "pkcs12 cipherfinal error", "pkcs12 pbe crypt error", "unknown digest algorithm", "unsupported pkcs12 mode", "PKCS12_create", "PKCS12_gen_mac", "PKCS12_init", "PKCS12_item_decrypt_d2i", "PKCS12_item_i2d_encrypt", "PKCS12_item_pack_safebag", "PKCS12_key_gen_asc", "PKCS12_key_gen_uni", "PKCS12_key_gen_utf8", "PKCS12_newpass", "PKCS12_pack_p7data", "PKCS12_pack_p7encdata", "PKCS12_parse", "PKCS12_pbe_crypt", "PKCS12_PBE_keyivgen", "PKCS12_SAFEBAG_create0_p8inf", "PKCS12_SAFEBAG_create0_pkcs8", "PKCS12_SAFEBAG_create_pkcs8_encrypt", "PKCS12_setup_mac", "PKCS12_set_mac", "PKCS12_unpack_authsafes", "PKCS12_unpack_p7data", "PKCS12_verify_mac", "PKCS8_encrypt", "PKCS8_set0_pbe", "cipher has no object identifier", "cipher not initialized", "content and data present", "ctrl error", "decrypt error", "digest failure", "encryption ctrl failure", "encryption not supported for this key type", "error adding recipient", "error setting cipher", "invalid null pointer", "invalid signed data type", "no content", "no matching digest type found", "no recipient matches certificate", "no signatures on data", "no signers", "operation not supported on this type", "pkcs7 add signature error", "pkcs7 add signer error", "pkcs7 datasign", "signing ctrl failure", "signing not supported for this key type", "smime text error", "unable to find certificate", "unable to find mem bio", "unable to find message digest", "unknown digest type", "unknown operation", "unsupported cipher type", "unsupported content type", "wrong content type", "wrong pkcs7 type", "do_pkcs7_signed_attrib", "PKCS7_add0_attrib_signing_time", "PKCS7_add_attrib_smimecap", "PKCS7_add_certificate", "PKCS7_add_crl", "PKCS7_add_recipient_info", "PKCS7_add_signature", "PKCS7_add_signer", "PKCS7_bio_add_digest", "pkcs7_copy_existing_digest", "PKCS7_ctrl", "PKCS7_dataDecode", "PKCS7_dataFinal", "PKCS7_dataInit", "PKCS7_dataVerify", "PKCS7_decrypt", "pkcs7_decrypt_rinfo", "pkcs7_encode_rinfo", "PKCS7_encrypt", "PKCS7_final", "PKCS7_find_digest", "PKCS7_get0_signers", "PKCS7_RECIP_INFO_set", "PKCS7_set_cipher", "PKCS7_set_content", "PKCS7_set_digest", "PKCS7_set_type", "PKCS7_sign", "PKCS7_signatureVerify", "PKCS7_SIGNER_INFO_set", "PKCS7_SIGNER_INFO_sign", "PKCS7_sign_add_signer", "PKCS7_simple_smimecap", "PKCS7_verify", "....................", "crypto/rand/md_rand.c", "You need to read the OpenSSL FAQ, https://www.openssl.org/docs/faq.html", "PRNG not seeded", "RAND_bytes", "/dev/urandom", "/dev/random", "/dev/srandom", "rc4(char)", "algorithm mismatch", "bad e value", "bad fixed header decrypt", "bad pad byte count", "bad signature", "block type is not 01", "block type is not 02", "data greater than mod len", "data too large", "data too large for key size", "data too large for modulus", "data too small", "data too small for key size", "digest does not match", "digest too big for rsa key", "dmp1 not congruent to d", "dmq1 not congruent to d", "d e not congruent to 1", "first octet invalid", "illegal or unsupported padding mode", "invalid digest length", "invalid header", "invalid label", "invalid message length", "invalid mgf1 md", "invalid oaep parameters", "invalid padding", "invalid padding mode", "invalid pss parameters", "invalid pss saltlen", "invalid salt length", "invalid trailer", "invalid x931 digest", "iqmp not inverse of q", "key size too small", "last octet invalid", "modulus too large", "no public exponent", "null before block missing", "n does not equal p q", "oaep decoding error", "padding check failed", "pkcs decoding error", "p not prime", "q not prime", "rsa operations not supported", "salt length check failed", "salt length recovery failed", "sslv3 rollback attack", "the asn1 object identifier is not known for this md", "unknown algorithm type", "unknown mask digest", "unknown padding type", "unsupported encryption type", "unsupported label source", "unsupported mask algorithm", "unsupported mask parameter", "unsupported signature type", "wrong signature length", "check_padding_md", "encode_pkcs1", "int_rsa_verify", "old_rsa_priv_decode", "pkey_rsa_ctrl", "pkey_rsa_ctrl_str", "pkey_rsa_sign", "pkey_rsa_verify", "pkey_rsa_verifyrecover", "rsa_algor_to_md", "rsa_builtin_keygen", "RSA_check_key", "RSA_check_key_ex", "rsa_cms_decrypt", "rsa_item_verify", "RSA_meth_dup", "RSA_meth_new", "RSA_meth_set1_name", "rsa_mgf1_to_md", "RSA_new_method", "RSA_NULL", "RSA_null_private_decrypt", "RSA_null_private_encrypt", "RSA_null_public_decrypt", "RSA_null_public_encrypt", "rsa_ossl_private_decrypt", "rsa_ossl_private_encrypt", "rsa_ossl_public_decrypt", "rsa_ossl_public_encrypt", "RSA_padding_add_none", "RSA_padding_add_PKCS1_OAEP", "RSA_padding_add_PKCS1_OAEP_mgf1", "RSA_padding_add_PKCS1_PSS", "RSA_padding_add_PKCS1_PSS_mgf1", "RSA_padding_add_PKCS1_type_1", "RSA_padding_add_PKCS1_type_2", "RSA_padding_add_SSLv23", "RSA_padding_add_X931", "RSA_padding_check_none", "RSA_padding_check_PKCS1_OAEP", "RSA_padding_check_PKCS1_OAEP_mgf1", "RSA_padding_check_PKCS1_type_1", "RSA_padding_check_PKCS1_type_2", "RSA_padding_check_SSLv23", "RSA_padding_check_X931", "RSA_print", "RSA_print_fp", "rsa_priv_encode", "rsa_pss_to_ctx", "rsa_pub_decode", "RSA_setup_blinding", "RSA_sign", "RSA_sign_ASN1_OCTET_STRING", "RSA_verify", "RSA_verify_ASN1_OCTET_STRING", "RSA_verify_PKCS1_PSS_mgf1", "crypto/rsa/rsa_ossl.c", "OpenSSL PKCS#1 RSA", "crypto/rsa/rsa_pk1.c", "crypto/rsa/rsa_pmeth.c", "rsa_padding_mode", "sslv23", "none", "oeap", "oaep", "x931", "rsa_pss_saltlen", "rsa_keygen_bits", "rsa_keygen_pubexp", "rsa_mgf1_md", "rsa_oaep_md", "rsa_oaep_label", "crypto/rsa/rsa_pss.c", "crypto/rsa/rsa_saos.c", "crypto/rsa/rsa_sign.c", "crypto/rsa/rsa_ssl.c", "crypto/rsa/rsa_x931.c", "bad pkcs7 type", "bad type", "cannot load certificate", "cannot load private key", "could not set engine", "could not set time", "detached content", "ess add signing cert error", "ess signing certificate error", "invalid signer certificate purpose", "message imprint mismatch", "nonce mismatch", "nonce not returned", "no time stamp token", "pkcs7 add signed attr error", "pkcs7 to ts tst info failed", "policy mismatch", "response setup error", "there must be one signer", "time syscall error", "token not present", "token present", "tsa name mismatch", "tsa untrusted", "tst info setup error", "ts datasign", "unacceptable policy", "unsupported md algorithm", "unsupported version", "var bad value", "cannot find config variable", "def_serial_cb", "def_time_cb", "ESS_add_signing_cert", "ess_CERT_ID_new_init", "ess_SIGNING_CERT_new_init", "int_ts_RESP_verify_token", "PKCS7_to_TS_TST_INFO", "TS_ACCURACY_set_micros", "TS_ACCURACY_set_millis", "TS_ACCURACY_set_seconds", "ts_check_imprints", "ts_check_nonces", "ts_check_policy", "ts_check_signing_certs", "ts_check_status_info", "ts_compute_imprint", "ts_CONF_invalid", "TS_CONF_load_cert", "TS_CONF_load_certs", "TS_CONF_load_key", "ts_CONF_lookup_fail", "TS_CONF_set_default_engine", "ts_get_status_text", "TS_MSG_IMPRINT_set_algo", "TS_REQ_set_msg_imprint", "TS_REQ_set_nonce", "TS_REQ_set_policy_id", "TS_RESP_create_response", "ts_RESP_create_tst_info", "TS_RESP_CTX_add_failure_info", "TS_RESP_CTX_add_md", "TS_RESP_CTX_add_policy", "TS_RESP_CTX_new", "TS_RESP_CTX_set_accuracy", "TS_RESP_CTX_set_certs", "TS_RESP_CTX_set_def_policy", "TS_RESP_CTX_set_signer_cert", "TS_RESP_CTX_set_status_info", "ts_RESP_get_policy", "TS_RESP_set_genTime_with_precision", "TS_RESP_set_status_info", "TS_RESP_set_tst_info", "ts_RESP_sign", "TS_RESP_verify_signature", "TS_TST_INFO_set_accuracy", "TS_TST_INFO_set_msg_imprint", "TS_TST_INFO_set_nonce", "TS_TST_INFO_set_policy_id", "TS_TST_INFO_set_serial", "TS_TST_INFO_set_time", "TS_TST_INFO_set_tsa", "TS_VERIFY", "ts_verify_cert", "TS_VERIFY_CTX_new", "common ok and cancel characters", "index too large", "index too small", "no result buffer", "processing error", "result too large", "result too small", "sys$assign error", "sys$dassgn error", "sys$qiow error", "unknown control command", "unknown ttyget errno value", "close_console", "echo_console", "general_allocate_boolean", "general_allocate_prompt", "noecho_console", "open_console", "UI_create_method", "UI_ctrl", "UI_dup_error_string", "UI_dup_info_string", "UI_dup_input_boolean", "UI_dup_input_string", "UI_dup_verify_string", "UI_get0_result", "UI_new_method", "UI_process", "UI_set_result", "/usr/local/ssl/private", "/usr/local/ssl", "/usr/local/ssl/certs", "/usr/local/ssl/cert.pem", "SSL_CERT_DIR", "SSL_CERT_FILE", "akid mismatch", "bad selector", "bad x509 filetype", "base64 decode error", "cant check dh key", "cert already in hash table", "crl already delta", "crl verify failure", "idp mismatch", "invalid directory", "invalid field name", "invalid trust", "issuer mismatch", "key type mismatch", "key values mismatch", "loading cert dir", "loading defaults", "name too long", "newer crl not newer", "no cert set for us to verify", "no crl number", "public key decode error", "public key encode error", "should retry", "unable to find parameters in chain", "unable to get certs public key", "unknown key type", "unknown purpose id", "unknown trust id", "wrong lookup type", "wrong type", "add_cert_dir", "build_chain", "by_file_ctrl", "check_name_constraints", "check_policy", "dane_i2d", "dir_ctrl", "get_cert_by_subject", "NETSCAPE_SPKI_b64_decode", "NETSCAPE_SPKI_b64_encode", "X509at_add1_attr", "X509v3_add_ext", "X509_ATTRIBUTE_create_by_NID", "X509_ATTRIBUTE_create_by_OBJ", "X509_ATTRIBUTE_create_by_txt", "X509_ATTRIBUTE_get0_data", "X509_ATTRIBUTE_set1_data", "X509_check_private_key", "X509_CRL_diff", "X509_CRL_print_fp", "X509_EXTENSION_create_by_NID", "X509_EXTENSION_create_by_OBJ", "X509_get_pubkey_parameters", "X509_load_cert_crl_file", "X509_load_cert_file", "X509_load_crl_file", "X509_NAME_add_entry", "X509_NAME_ENTRY_create_by_NID", "X509_NAME_ENTRY_create_by_txt", "X509_NAME_ENTRY_set_object", "X509_NAME_oneline", "X509_NAME_print", "X509_OBJECT_new", "X509_print_ex_fp", "x509_pubkey_decode", "X509_PUBKEY_get0", "X509_PUBKEY_set", "X509_REQ_check_private_key", "X509_REQ_print_ex", "X509_REQ_print_fp", "X509_REQ_to_X509", "X509_STORE_add_cert", "X509_STORE_add_crl", "X509_STORE_CTX_get1_issuer", "X509_STORE_CTX_init", "X509_STORE_CTX_new", "X509_STORE_CTX_purpose_inherit", "X509_to_X509_REQ", "X509_TRUST_add", "X509_TRUST_set", "X509_verify_cert", "bad ip address", "bad object", "bn dec2bn error", "bn to asn1 integer error", "dirname error", "distpoint already set", "duplicate zone id", "error converting zone", "error creating extension", "error in extension", "expected a section name", "extension exists", "extension name error", "extension not found", "extension setting not supported", "extension value error", "illegal empty extension", "incorrect policy syntax tag", "invalid asnumber", "invalid asrange", "invalid boolean string", "invalid extension string", "invalid inheritance", "invalid ipaddress", "invalid multiple rdns", "invalid name", "invalid null name", "invalid null value", "invalid number", "invalid numbers", "invalid object identifier", "invalid option", "invalid policy identifier", "invalid proxy policy setting", "invalid purpose", "invalid safi", "invalid section", "invalid syntax", "issuer decode error", "missing value", "need organization and numbers", "no config database", "no issuer certificate", "no issuer details", "no policy identifier", "no proxy cert policy language defined", "no public key", "no subject details", "operation not defined", "othername error", "policy language already defined", "policy path length", "policy path length already defined", "policy when proxy language requires no policy", "section not found", "unable to get issuer details", "unable to get issuer keyid", "unknown bit string argument", "unknown extension", "unknown extension name", "unsupported option", "unsupported type", "user too long", "a2i_GENERAL_NAME", "addr_validate_path_internal", "ASIdentifierChoice_canonize", "ASIdentifierChoice_is_canonical", "copy_email", "copy_issuer", "do_dirname", "do_ext_i2d", "do_ext_nconf", "gnames_from_sectname", "i2s_ASN1_ENUMERATED", "i2s_ASN1_IA5STRING", "i2s_ASN1_INTEGER", "i2v_AUTHORITY_INFO_ACCESS", "notice_section", "nref_nos", "policy_section", "process_pci_value", "r2i_certpol", "r2i_pci", "s2i_ASN1_IA5STRING", "s2i_ASN1_INTEGER", "s2i_ASN1_OCTET_STRING", "s2i_skey_id", "set_dist_point_name", "SXNET_add_id_asc", "SXNET_add_id_INTEGER", "SXNET_add_id_ulong", "SXNET_get_id_asc", "SXNET_get_id_ulong", "v2i_ASIdentifiers", "v2i_ASN1_BIT_STRING", "v2i_AUTHORITY_INFO_ACCESS", "v2i_AUTHORITY_KEYID", "v2i_BASIC_CONSTRAINTS", "v2i_crld", "v2i_EXTENDED_KEY_USAGE", "v2i_GENERAL_NAMES", "v2i_GENERAL_NAME_ex", "v2i_idp", "v2i_IPAddrBlocks", "v2i_issuer_alt", "v2i_NAME_CONSTRAINTS", "v2i_POLICY_CONSTRAINTS", "v2i_POLICY_MAPPINGS", "v2i_subject_alt", "v2i_TLS_FEATURE", "v3_generic_extension", "X509V3_add1_i2d", "X509V3_add_value", "X509V3_EXT_add", "X509V3_EXT_add_alias", "X509V3_EXT_i2d", "X509V3_EXT_nconf", "X509V3_get_section", "X509V3_get_string", "X509V3_get_value_bool", "X509V3_parse_list", "X509_PURPOSE_add", "X509_PURPOSE_set", "crypto/asn1/a_bitstr.c", "crypto/asn1/a_d2i_fp.c", "crypto/asn1/a_dup.c", "crypto/asn1/a_i2d_fp.c", "crypto/asn1/ameth_lib.c", "adding object", "asn1 parse error", "asn1 sig parse error", "aux error", "bad object header", "bmpstring is wrong length", "bn lib", "boolean is wrong length", "context not initialised", "data is wrong", "depth exceeded", "digest and key type not supported", "error getting time", "error setting cipher params", "expecting an integer", "expecting an object", "explicit length mismatch", "explicit tag not constructed", "field missing", "first num too large", "illegal bitstring format", "illegal boolean", "illegal characters", "illegal format", "illegal hex", "illegal implicit tag", "illegal integer", "illegal negative value", "illegal nested tagging", "illegal null", "illegal null value", "illegal object", "illegal optional any", "illegal options on item template", "illegal padding", "illegal tagged any", "illegal time value", "illegal zero content", "integer not ascii format", "integer too large for long", "invalid bit string bits left", "invalid bmpstring length", "invalid digit", "invalid mime type", "invalid modifier", "invalid object encoding", "invalid scrypt parameters", "invalid separator", "invalid string table value", "invalid universalstring length", "invalid utf8string", "invalid value", "list error", "mime no content type", "mime parse error", "mime sig parse error", "missing eoc", "missing second number", "mstring not universal", "mstring wrong tag", "nested asn1 string", "non hex characters", "not ascii format", "not enough data", "no content type", "no matching choice type", "no multipart body failure", "no multipart boundary", "no sig content type", "null is wrong length", "object not ascii format", "odd number of chars", "second number too large", "sequence length mismatch", "sequence not constructed", "sequence or set needs config", "short line", "sig invalid mime type", "streaming not supported", "string too long", "string too short", "time not ascii format", "too large", "too long", "too small", "type not constructed", "type not primitive", "unexpected eoc", "universalstring is wrong length", "unknown format", "unknown message digest algorithm", "unknown object type", "unknown public key type", "unknown signature algorithm", "unknown tag", "unsupported any defined by type", "unsupported public key type", "wrong integer type", "wrong public key type", "wrong tag", "a2d_ASN1_OBJECT", "a2i_ASN1_INTEGER", "a2i_ASN1_STRING", "append_exp", "ASN1_BIT_STRING_set_bit", "asn1_cb", "asn1_check_tlen", "asn1_collect", "asn1_d2i_ex_primitive", "ASN1_d2i_fp", "asn1_d2i_read_bio", "ASN1_digest", "asn1_do_adb", "asn1_do_lock", "ASN1_dup", "asn1_ex_c2i", "asn1_find_end", "ASN1_GENERALIZEDTIME_adj", "ASN1_generate_v3", "asn1_get_int64", "ASN1_get_object", "asn1_get_uint64", "ASN1_i2d_bio", "ASN1_i2d_fp", "ASN1_item_d2i_fp", "ASN1_item_dup", "asn1_item_embed_d2i", "asn1_item_embed_new", "ASN1_item_i2d_bio", "ASN1_item_i2d_fp", "ASN1_item_pack", "ASN1_item_sign", "ASN1_item_sign_ctx", "ASN1_item_unpack", "ASN1_item_verify", "ASN1_mbstring_ncopy", "ASN1_OBJECT_new", "asn1_output_data", "ASN1_PCTX_new", "ASN1_SCTX_new", "ASN1_sign", "asn1_str2type", "asn1_string_get_int64", "asn1_string_get_uint64", "ASN1_STRING_set", "ASN1_STRING_TABLE_add", "asn1_string_to_bn", "ASN1_STRING_type_new", "asn1_template_ex_d2i", "asn1_template_new", "asn1_template_noexp_d2i", "ASN1_TIME_adj", "ASN1_TYPE_get_int_octetstring", "ASN1_TYPE_get_octetstring", "ASN1_UTCTIME_adj", "ASN1_verify", "b64_read_asn1", "B64_write_ASN1", "BIO_new_NDEF", "bitstr_cb", "bn_to_asn1_string", "c2i_ASN1_BIT_STRING", "c2i_ASN1_INTEGER", "c2i_ASN1_OBJECT", "c2i_ibuf", "c2i_uint64_int", "collect_data", "d2i_ASN1_OBJECT", "d2i_ASN1_UINTEGER", "d2i_AutoPrivateKey", "d2i_PrivateKey", "d2i_PublicKey", "do_tcreate", "i2d_ASN1_bio_stream", "i2d_DSA_PUBKEY", "i2d_EC_PUBKEY", "i2d_PrivateKey", "i2d_PublicKey", "i2d_RSA_PUBKEY", "long_c2i", "oid_module_init", "parse_tagging", "PKCS5_pbe2_set_iv", "PKCS5_pbe2_set_scrypt", "PKCS5_pbe_set", "PKCS5_pbe_set0_algor", "PKCS5_pbkdf2_set", "pkcs5_scrypt_set", "SMIME_read_ASN1", "SMIME_text", "stbl_module_init", "uint32_c2i", "uint64_c2i", "X509_CRL_add0_revoked", "X509_INFO_new", "x509_name_encode", "x509_name_ex_d2i", "x509_name_ex_new", "X509_PKEY_new", "crypto/asn1/d2i_pr.c", "crypto/asn1/i2d_pr.c", "crypto/asn1/p5_pbe.c", "PBEPARAM", "crypto/asn1/p5_scrypt.c", "SCRYPT_PARAMS", "costParameter", "blockSize", "parallelizationParameter", "keyLength", "PKCS8_PRIV_KEY_INFO", "version", "pkeyalg", "pkey", "attributes", "X509_SIG", "algor", "failed to set pool", "failed to swap context", "init failed", "invalid pool size", "async_ctx_new", "ASYNC_init_thread", "async_job_new", "ASYNC_pause_job", "async_start_func", "ASYNC_start_job", "blowfish(ptr)", "crypto/bio/b_addr.c", "assertion failed: bai != NULL", "crypto/bio/b_sock.c", "assertion failed: l == 4", "host=", "crypto/bio/b_sock2.c", "accept error", "addrinfo addr is not af inet", "ambiguous host or service", "bad fopen mode", "broken pipe", "connect error", "gethostbyname addr is not af inet", "getsockname error", "getsockname truncated address", "getting socktype", "invalid argument", "invalid socket", "in use", "listen v6 only", "lookup returned nothing", "malformed host or service", "nbio connect error", "no accept addr or service specified", "no hostname or service specified", "no port defined", "no such file", "null parameter", "unable to bind socket", "unable to create socket", "unable to keepalive", "unable to listen socket", "unable to nodelay", "unable to reuseaddr", "unavailable ip family", "uninitialized", "unknown info type", "unsupported ip family", "unsupported method", "unsupported protocol family", "write to read only BIO", "WSAStartup", "acpt_state", "addr_strings", "BIO_accept", "BIO_accept_ex", "BIO_ADDR_new", "BIO_callback_ctrl", "BIO_connect", "BIO_ctrl", "BIO_gets", "BIO_get_host_ip", "BIO_get_new_index", "BIO_get_port", "BIO_listen", "BIO_lookup", "bio_make_pair", "BIO_new", "BIO_new_file", "BIO_new_mem_buf", "BIO_nread", "BIO_nread0", "BIO_nwrite", "BIO_nwrite0", "BIO_parse_hostserv", "BIO_puts", "BIO_read", "BIO_socket", "BIO_socket_nbio", "BIO_sock_info", "BIO_sock_init", "BIO_write", "buffer_ctrl", "conn_ctrl", "conn_state", "dgram_sctp_read", "dgram_sctp_write", "file_ctrl", "file_read", "linebuffer_ctrl", "mem_write", "SSL_new", "crypto/bio/bss_file.c", "fopen('", "fflush()", "FILE pointer", "crypto/bn/bn_add.c", "crypto/bn/bn_blind.c", "crypto/bn/bn_ctx.c", "crypto/bn/bn_div.c", "arg2 lt arg3", "bad reciprocal", "bignum too long", "bits too small", "called with even modulus", "div by zero", "encoding error", "expand on static bignum data", "input not reduced", "invalid length", "invalid range", "invalid shift", "not a square", "not initialized", "no inverse", "no solution", "private key too large", "p is not prime", "too many iterations", "too many temporary variables", "bnrand", "BN_BLINDING_convert_ex", "BN_BLINDING_create_param", "BN_BLINDING_invert_ex", "BN_BLINDING_new", "BN_BLINDING_update", "BN_bn2dec", "BN_bn2hex", "bn_compute_wNAF", "BN_CTX_get", "BN_CTX_new", "BN_CTX_start", "BN_div", "BN_div_recp", "BN_exp", "bn_expand_internal", "BN_GENCB_new", "BN_generate_dsa_nonce", "BN_generate_prime_ex", "BN_GF2m_mod", "BN_GF2m_mod_exp", "BN_GF2m_mod_mul", "BN_GF2m_mod_solve_quad", "BN_GF2m_mod_solve_quad_arr", "BN_GF2m_mod_sqr", "BN_GF2m_mod_sqrt", "BN_lshift", "BN_mod_exp2_mont", "BN_mod_exp_mont", "BN_mod_exp_mont_consttime", "BN_mod_exp_mont_word", "BN_mod_exp_recp", "BN_mod_exp_simple", "BN_mod_inverse", "BN_mod_inverse_no_branch", "BN_mod_lshift_quick", "BN_mod_sqrt", "BN_mpi2bn", "BN_new", "BN_rand", "BN_rand_range", "BN_rshift", "bn_set_words", "BN_usub", "crypto/bn/bn_exp.c", "crypto/bn/bn_gcd.c", "crypto/bn/bn_intern.c", "crypto/bn/bn_mod.c", "crypto/bn/bn_rand.c", "crypto/bn/bn_recp.c", "BUF_MEM_grow", "BUF_MEM_grow_clean", "BUF_MEM_new", "OpenSSL CMAC method", "cipher", "crypto/cmac/cmac.c", "add signer error", "certificate already present", "certificate has no keyid", "cipher initialisation error", "cipher parameter initialisation error", "cms datafinal error", "cms lib", "contentidentifier mismatch", "content not found", "content type mismatch", "content type not compressed data", "content type not enveloped data", "content type not signed data", "content verify error", "ctrl failure", "error getting public key", "error reading messagedigest attribute", "error setting key", "error setting recipientinfo", "invalid encrypted key length", "invalid key encryption parameter", "md bio init error", "messagedigest attribute wrong length", "messagedigest wrong length", "msgsigdigest error", "msgsigdigest verification failure", "msgsigdigest wrong length", "need one signer", "not a signed receipt", "not encrypted data", "not kek", "not key agreement", "not key transport", "not pwri", "not supported for this key type", "no cipher", "no key", "no key or cert", "no matching digest", "no matching recipient", "no matching signature", "no msgsigdigest", "no password", "no private key", "no receipt request", "receipt decode error", "recipient error", "signfinal error", "store init error", "type not compressed data", "type not data", "type not digested data", "type not encrypted data", "type not enveloped data", "unable to finalize context", "unknown digest algorihm", "unknown id", "unsupported compression algorithm", "unsupported kek algorithm", "unsupported key encryption algorithm", "unsupported recipient type", "unsupported recpientinfo type", "unwrap error", "unwrap failure", "verification failure", "wrap error", "check_content", "CMS_add0_cert", "CMS_add0_recipient_key", "CMS_add0_recipient_password", "CMS_add1_ReceiptRequest", "CMS_add1_recipient_cert", "CMS_add1_signer", "cms_add1_signingTime", "CMS_compress", "cms_CompressedData_create", "cms_CompressedData_init_bio", "cms_copy_content", "cms_copy_messageDigest", "CMS_data", "CMS_dataFinal", "CMS_dataInit", "CMS_decrypt", "CMS_decrypt_set1_key", "CMS_decrypt_set1_password", "CMS_decrypt_set1_pkey", "cms_DigestAlgorithm_find_ctx", "cms_DigestAlgorithm_init_bio", "cms_DigestedData_do_final", "CMS_digest_verify", "cms_encode_Receipt", "CMS_encrypt", "cms_EncryptedContent_init_bio", "CMS_EncryptedData_decrypt", "CMS_EncryptedData_encrypt", "CMS_EncryptedData_set1_key", "CMS_EnvelopedData_create", "cms_EnvelopedData_init_bio", "cms_enveloped_data_init", "cms_env_asn1_ctrl", "CMS_final", "cms_get0_certificate_choices", "CMS_get0_content", "cms_get0_econtent_type", "cms_get0_enveloped", "cms_get0_revocation_choices", "cms_get0_signed", "cms_msgSigDigest_add1", "CMS_ReceiptRequest_create0", "cms_Receipt_verify", "CMS_RecipientInfo_decrypt", "CMS_RecipientInfo_encrypt", "cms_RecipientInfo_kari_encrypt", "CMS_RecipientInfo_kari_get0_alg", "CMS_RecipientInfo_kari_get0_orig_id", "CMS_RecipientInfo_kari_get0_reks", "CMS_RecipientInfo_kari_orig_id_cmp", "cms_RecipientInfo_kekri_decrypt", "cms_RecipientInfo_kekri_encrypt", "CMS_RecipientInfo_kekri_get0_id", "CMS_RecipientInfo_kekri_id_cmp", "CMS_RecipientInfo_ktri_cert_cmp", "cms_RecipientInfo_ktri_decrypt", "cms_RecipientInfo_ktri_encrypt", "CMS_RecipientInfo_ktri_get0_algs", "CMS_RecipientInfo_ktri_get0_signer_id", "cms_RecipientInfo_pwri_crypt", "CMS_RecipientInfo_set0_key", "CMS_RecipientInfo_set0_password", "CMS_RecipientInfo_set0_pkey", "cms_sd_asn1_ctrl", "cms_set1_ias", "cms_set1_keyid", "cms_set1_SignerIdentifier", "CMS_set_detached", "CMS_sign", "cms_signed_data_init", "cms_SignerInfo_content_sign", "CMS_SignerInfo_sign", "CMS_SignerInfo_verify", "cms_signerinfo_verify_cert", "CMS_SignerInfo_verify_content", "CMS_sign_receipt", "CMS_stream", "CMS_uncompress", "CMS_verify", "zlib deflate error", "zlib inflate error", "zlib not supported", "bio_zlib_flush", "bio_zlib_new", "bio_zlib_read", "bio_zlib_write", "error loading dso", "list cannot be null", "missing close square bracket", "missing equal sign", "missing init function", "module initialization error", "no close brace", "no conf", "no conf or environment variable", "no section", "no value", "unable to create new section", "unknown module name", "variable expansion too long", "variable has no value", "CONF_dump_fp", "CONF_load", "CONF_load_fp", "CONF_parse_list", "def_load", "def_load_bio", "module_init", "module_load_dso", "module_run", "NCONF_dump_bio", "NCONF_dump_fp", "NCONF_get_number_e", "NCONF_get_section", "NCONF_get_string", "NCONF_load", "NCONF_load_bio", "NCONF_load_fp", "NCONF_new", "str_copy", "crypto/conf/conf_lib.c", "group=", " name=", "illegal hex digit", "odd number of digits", "CRYPTO_dup_ex_data", "CRYPTO_free_ex_data", "CRYPTO_get_ex_new_index", "CRYPTO_memdup", "CRYPTO_new_ex_data", "CRYPTO_set_ex_data", "FIPS_mode_set", "get_and_lock", "OPENSSL_buf2hexstr", "OPENSSL_hexstr2buf", "OPENSSL_init_crypto", "invalid log id length", "log conf invalid", "log conf invalid key", "log conf missing description", "log conf missing key", "log key invalid", "sct future timestamp", "sct invalid", "sct invalid signature", "sct list invalid", "sct log id mismatch", "sct not set", "sct unsupported version", "unrecognized signature nid", "unsupported entry type", "CTLOG_new", "CTLOG_new_from_base64", "ctlog_new_from_conf", "ctlog_store_load_ctx_new", "CTLOG_STORE_load_file", "ctlog_store_load_log", "CTLOG_STORE_new", "ct_base64_decode", "CT_POLICY_EVAL_CTX_new", "ct_v1_log_id_from_pkey", "i2o_SCT", "i2o_SCT_LIST", "i2o_SCT_signature", "o2i_SCT", "o2i_SCT_LIST", "o2i_SCT_signature", "SCT_CTX_new", "SCT_CTX_verify", "SCT_new", "SCT_new_from_base64", "SCT_set0_log_id", "SCT_set1_extensions", "SCT_set1_log_id", "SCT_set1_signature", "SCT_set_log_entry_type", "SCT_set_signature_nid", "SCT_set_version", "des(%s)", "%s: (%d bit)\n", "DH Private-Key", "private-key:", "public-key:", "prime:", "generator:", "subgroup order:", "subgroup factor:", "seed:", "%02x%s", "counter:", "recommended-private-length: %d bits\n", "crypto/dh/dh_ameth.c", "DH Parameters", "DH Public-Key", "OpenSSL X9.42 DH method", "OpenSSL PKCS#3 DH method", "crypto/dh/dh_asn1.c", "int_dhx942_dh", "vparams", "int_dhvparams", "counter", "length", "bad generator", "bn decode error", "bn error", "invalid public key", "kdf parameter error", "keys not set", "no parameters set", "no private value", "parameter encoding error", "peer key error", "shared info error", "compute_key", "DHparams_print_fp", "dh_builtin_genparams", "dh_cms_decrypt", "dh_cms_set_peerkey", "dh_cms_set_shared_info", "DH_meth_dup", "DH_meth_new", "DH_meth_set1_name", "DH_new_method", "dh_param_decode", "dh_priv_decode", "dh_priv_encode", "dh_pub_decode", "dh_pub_encode", "do_dh_print", "generate_key", "pkey_dh_derive", "pkey_dh_keygen", "crypto/dh/dh_key.c", "OpenSSL DH Method", "crypto/dh/dh_lib.c", "crypto/dh/dh_pmeth.c", "dh_paramgen_prime_len", "dh_rfc5114", "dh_paramgen_generator", "dh_paramgen_subprime_len", "dh_paramgen_type", "r:   ", "s:   ", "priv:", "Private-Key", "pub: ", "P:   ", "Q:   ", "G:   ", "crypto/dsa/dsa_ameth.c", "OpenSSL DSA method", "crypto/dsa/dsa_asn1.c", "pub_key", "priv_key", "DSA_SIG", "bad q value", "invalid digest type", "invalid parameters", "seed_len is less than the length of q", "DSAparams_print", "DSAparams_print_fp", "dsa_builtin_paramgen", "dsa_builtin_paramgen2", "DSA_do_sign", "DSA_do_verify", "DSA_meth_dup", "DSA_meth_new", "DSA_meth_set1_name", "DSA_new_method", "dsa_param_decode", "DSA_print_fp", "dsa_priv_decode", "dsa_priv_encode", "dsa_pub_decode", "dsa_pub_encode", "DSA_sign", "DSA_sign_setup", "DSA_SIG_new", "old_dsa_priv_decode", "pkey_dsa_ctrl", "pkey_dsa_keygen", "crypto/dsa/dsa_gen.c", "crypto/dsa/dsa_lib.c", "crypto/dsa/dsa_ossl.c", "dsa_paramgen_bits", "dsa_paramgen_q_bits", "dsa_paramgen_md", "crypto/dsa/dsa_pmeth.c", "crypto/dso/dso_dlfcn.c", "lib%s.so", "%s.so", "symname(", "filename(", "OpenSSL 'dlfcn' shared library method", "control command failed", "dso already loaded", "empty file structure", "failure", "filename too big", "cleanup method function failed", "incorrect file syntax", "could not load the shared library", "name translation failed", "no filename", "a null shared library handle was used", "set filename failed", "the meth_data stack is corrupt", "could not bind to the requested symbol name", "could not unload the shared library", "functionality not supported", "dlfcn_bind_func", "dlfcn_load", "dlfcn_merger", "dlfcn_name_converter", "dlfcn_unload", "dl_bind_func", "dl_load", "dl_merger", "dl_name_converter", "dl_unload", "DSO_bind_func", "DSO_convert_filename", "DSO_ctrl", "DSO_free", "DSO_get_filename", "DSO_global_lookup", "DSO_load", "DSO_merge", "DSO_new_method", "DSO_pathbyaddr", "DSO_set_filename", "DSO_up_ref", "vms_bind_sym", "vms_load", "vms_merger", "vms_unload", "win32_bind_func", "win32_globallookup", "win32_joiner", "win32_load", "win32_merger", "win32_name_converter", "win32_pathbyaddr", "win32_splitter", "win32_unload", "crypto/ec/ec_ameth.c", "ECDSA-Parameters", "Public-Key", "%*spub:\n", "%*spriv:\n", "OpenSSL EC algorithm", "crypto/ec/ec_asn1.c", "ECDSA_SIG", "EC_PRIVATEKEY", "privateKey", "parameters", "publicKey", "ECPKPARAMETERS", "value.named_curve", "value.parameters", "value.implicitlyCA", "ECPARAMETERS", "fieldID", "curve", "base", "order", "cofactor", "X9_62_CURVE", "X9_62_FIELDID", "fieldType", "p.prime", "p.char_two", "p.other", "X9_62_CHARACTERISTIC_TWO", "type", "p.onBasis", "p.tpBasis", "p.ppBasis", "X9_62_PENTANOMIAL", "crypto/ec/ec_curve.c", "B-163", "B-233", "B-283", "B-409", "B-571", "K-163", "K-233", "K-283", "K-409", "K-571", "P-192", "P-224", "P-256", "P-384", "P-521", "SECG/WTLS curve over a 112 bit prime field", "SECG curve over a 112 bit prime field", "SECG curve over a 128 bit prime field", "SECG curve over a 160 bit prime field", "SECG/WTLS curve over a 160 bit prime field", "SECG curve over a 192 bit prime field", "SECG curve over a 224 bit prime field", "NIST/SECG curve over a 224 bit prime field", "SECG curve over a 256 bit prime field", "NIST/SECG curve over a 384 bit prime field", "NIST/SECG curve over a 521 bit prime field", "NIST/X9.62/SECG curve over a 192 bit prime field", "X9.62 curve over a 192 bit prime field", "X9.62 curve over a 239 bit prime field", "X9.62/SECG curve over a 256 bit prime field", "SECG curve over a 113 bit binary field", "SECG/WTLS curve over a 131 bit binary field", "SECG curve over a 131 bit binary field", "NIST/SECG/WTLS curve over a 163 bit binary field", "SECG curve over a 163 bit binary field", "NIST/SECG curve over a 163 bit binary field", "SECG curve over a 193 bit binary field", "NIST/SECG/WTLS curve over a 233 bit binary field", "SECG curve over a 239 bit binary field", "NIST/SECG curve over a 283 bit binary field", "NIST/SECG curve over a 409 bit binary field", "NIST/SECG curve over a 571 bit binary field", "X9.62 curve over a 163 bit binary field", "X9.62 curve over a 176 bit binary field", "X9.62 curve over a 191 bit binary field", "X9.62 curve over a 208 bit binary field", "X9.62 curve over a 239 bit binary field", "X9.62 curve over a 272 bit binary field", "X9.62 curve over a 304 bit binary field", "X9.62 curve over a 359 bit binary field", "X9.62 curve over a 368 bit binary field", "X9.62 curve over a 431 bit binary field", "WTLS curve over a 113 bit binary field", "WTLS curve over a 112 bit prime field", "WTLS curve over a 160 bit prime field", "WTLS curve over a 224 bit prime field", "\n\tIPSec/IKE/Oakley curve #3 over a 155 bit binary field.\n\tNot suitable for ECDSA.\n\tQuestionable extension field!", "\n\tIPSec/IKE/Oakley curve #4 over a 185 bit binary field.\n\tNot suitable for ECDSA.\n\tQuestionable extension field!", "RFC 5639 curve over a 160 bit prime field", "RFC 5639 curve over a 192 bit prime field", "RFC 5639 curve over a 224 bit prime field", "RFC 5639 curve over a 256 bit prime field", "RFC 5639 curve over a 320 bit prime field", "RFC 5639 curve over a 384 bit prime field", "RFC 5639 curve over a 512 bit prime field", "asn1 error", "bignum out of range", "coordinates out of range", "curve does not support ecdh", "curve does not support signing", "d2i ecpkparameters failure", "discriminant is zero", "ec group new by name failure", "field too large", "gf2m not supported", "group2pkparameters failure", "i2d ecpkparameters failure", "incompatible objects", "invalid compressed point", "invalid compression bit", "invalid curve", "invalid encoding", "invalid field", "invalid form", "invalid group order", "invalid output length", "invalid peer key", "invalid pentanomial basis", "invalid private key", "invalid trinomial basis", "missing private key", "need new setup values", "not a NIST prime", "not implemented", "operation not supported", "passed null parameter", "pkparameters2group failure", "point arithmetic failure", "point at infinity", "point is not on curve", "random number generation failed", "slot full", "undefined generator", "undefined order", "unknown group", "unknown order", "unsupported field", "wrong curve parameters", "wrong order", "BN_to_felem", "d2i_ECParameters", "d2i_ECPKParameters", "d2i_ECPrivateKey", "do_EC_KEY_print", "ecdh_cms_decrypt", "ecdh_cms_set_shared_info", "ECDH_compute_key", "ecdh_simple_compute_key", "ECDSA_do_sign_ex", "ECDSA_do_verify", "ECDSA_sign_ex", "ECDSA_sign_setup", "ECDSA_SIG_new", "ECDSA_verify", "eckey_param2type", "eckey_param_decode", "eckey_priv_decode", "eckey_priv_encode", "eckey_pub_decode", "eckey_pub_encode", "eckey_type2param", "ECParameters_print", "ECParameters_print_fp", "ECPKParameters_print", "ECPKParameters_print_fp", "ecp_nistz256_get_affine", "ecp_nistz256_mult_precompute", "ecp_nistz256_points_mul", "ecp_nistz256_pre_comp_new", "ecp_nistz256_windowed_mul", "ecx_key_op", "ecx_priv_encode", "ecx_pub_encode", "ec_asn1_group2curve", "ec_asn1_group2fieldid", "ec_GF2m_montgomery_point_multiply", "ec_GF2m_simple_group_check_discriminant", "ec_GF2m_simple_group_set_curve", "ec_GF2m_simple_oct2point", "ec_GF2m_simple_point2oct", "ec_GF2m_simple_point_get_affine_coordinates", "ec_GF2m_simple_point_set_affine_coordinates", "ec_GF2m_simple_set_compressed_coordinates", "ec_GFp_mont_field_decode", "ec_GFp_mont_field_encode", "ec_GFp_mont_field_mul", "ec_GFp_mont_field_set_to_one", "ec_GFp_mont_field_sqr", "ec_GFp_mont_group_set_curve", "ec_GFp_nistp224_group_set_curve", "ec_GFp_nistp224_points_mul", "ec_GFp_nistp224_point_get_affine_coordinates", "ec_GFp_nistp256_group_set_curve", "ec_GFp_nistp256_points_mul", "ec_GFp_nistp256_point_get_affine_coordinates", "ec_GFp_nistp521_group_set_curve", "ec_GFp_nistp521_points_mul", "ec_GFp_nistp521_point_get_affine_coordinates", "ec_GFp_nist_field_mul", "ec_GFp_nist_field_sqr", "ec_GFp_nist_group_set_curve", "ec_GFp_simple_group_check_discriminant", "ec_GFp_simple_group_set_curve", "ec_GFp_simple_make_affine", "ec_GFp_simple_oct2point", "ec_GFp_simple_point2oct", "ec_GFp_simple_points_make_affine", "ec_GFp_simple_point_get_affine_coordinates", "ec_GFp_simple_point_set_affine_coordinates", "ec_GFp_simple_set_compressed_coordinates", "EC_GROUP_check", "EC_GROUP_check_discriminant", "EC_GROUP_copy", "EC_GROUP_get_curve_GF2m", "EC_GROUP_get_curve_GFp", "EC_GROUP_get_degree", "EC_GROUP_get_ecparameters", "EC_GROUP_get_ecpkparameters", "EC_GROUP_get_pentanomial_basis", "EC_GROUP_get_trinomial_basis", "EC_GROUP_new", "EC_GROUP_new_by_curve_name", "ec_group_new_from_data", "EC_GROUP_new_from_ecparameters", "EC_GROUP_new_from_ecpkparameters", "EC_GROUP_set_curve_GF2m", "EC_GROUP_set_curve_GFp", "EC_GROUP_set_generator", "EC_KEY_check_key", "EC_KEY_copy", "EC_KEY_generate_key", "EC_KEY_new", "EC_KEY_new_method", "EC_KEY_oct2priv", "EC_KEY_print", "EC_KEY_print_fp", "EC_KEY_priv2oct", "EC_KEY_set_public_key_affine_coordinates", "ec_key_simple_check_key", "ec_key_simple_oct2priv", "ec_key_simple_priv2oct", "EC_POINTs_make_affine", "EC_POINT_add", "EC_POINT_cmp", "EC_POINT_copy", "EC_POINT_dbl", "EC_POINT_get_affine_coordinates_GF2m", "EC_POINT_get_affine_coordinates_GFp", "EC_POINT_get_Jprojective_coordinates_GFp", "EC_POINT_invert", "EC_POINT_is_at_infinity", "EC_POINT_is_on_curve", "EC_POINT_make_affine", "EC_POINT_new", "EC_POINT_oct2point", "EC_POINT_point2oct", "EC_POINT_set_affine_coordinates_GF2m", "EC_POINT_set_affine_coordinates_GFp", "EC_POINT_set_compressed_coordinates_GF2m", "EC_POINT_set_compressed_coordinates_GFp", "EC_POINT_set_Jprojective_coordinates_GFp", "EC_POINT_set_to_infinity", "ec_pre_comp_new", "ec_wNAF_mul", "ec_wNAF_precompute_mult", "i2d_ECParameters", "i2d_ECPKParameters", "i2d_ECPrivateKey", "i2o_ECPublicKey", "nistp224_pre_comp_new", "nistp256_pre_comp_new", "nistp521_pre_comp_new", "o2i_ECPublicKey", "old_ec_priv_decode", "ossl_ecdh_compute_key", "ossl_ecdsa_sign_sig", "ossl_ecdsa_verify_sig", "pkey_ecx_derive", "pkey_ec_ctrl", "pkey_ec_ctrl_str", "pkey_ec_derive", "pkey_ec_keygen", "pkey_ec_paramgen", "pkey_ec_sign", "crypto/ec/ec_key.c", "assertion failed: eckey->group->meth->keygen != NULL", "crypto/ec/ec_kmeth.c", "OpenSSL EC_KEY method", "crypto/ec/ec_lib.c", "assertion failed: group->meth->group_order_bits != NULL", "crypto/ec/ec_mult.c", "crypto/ec/ec_oct.c", "ec_paramgen_curve", "crypto/ec/ec_pmeth.c", "ec_param_enc", "explicit", "named_curve", "ecdh_kdf_md", "ecdh_cofactor_mode", "crypto/ec/ecdh_ossl.c", "crypto/ec/ecdsa_ossl.c", "crypto/ec/ecdsa_sign.c", "crypto/ec/ecdsa_vrf.c", "crypto/ec/eck_prn.c", "ASN1 OID: %s", "NIST CURVE: %s\n", "Field Type: %s\n", "Basis Type: %s\n", "Polynomial:", "A:   ", "Prime:", "B:   ", "Generator (compressed):", "Order: ", "Generator (uncompressed):", "Generator (hybrid):", "Cofactor: ", "Seed:", "crypto/ec/ecp_mont.c", "crypto/ec/ecp_nistz256.c", "crypto/ec/ecp_oct.c", "crypto/ec/ecp_smpl.c", "crypto/ec/ecx_meth.c", "%*s<INVALID PRIVATE KEY>\n", "%*sX25519 Private-Key:\n", "%*s<INVALID PUBLIC KEY>\n", "%*sX25519 Public-Key:\n", "OpenSSL X25519 algorithm", "crypto/engine/eng_cnf.c", "engine_id", "soft_load", "dynamic_path", "EMPTY", "init", "default_algorithms", "section=", ", name=", "engines", "crypto/engine/eng_ctrl.c", "already loaded", "argument is not a number", "cmd not executable", "command takes input", "command takes no input", "conflicting engine id", "ctrl command not implemented", "DSO failure", "dso not found", "engines section error", "engine configuration error", "engine is not in the list", "engine section error", "failed loading private key", "failed loading public key", "finish failed", "'id' or 'name' missing", "internal list error", "invalid cmd name", "invalid cmd number", "invalid init value", "invalid string", "not initialised", "not loaded", "no control function", "no index", "no load function", "no reference", "no such engine", "unimplemented cipher", "unimplemented digest", "unimplemented public key method", "version incompatibility", "dynamic_ctrl", "dynamic_get_data_ctx", "dynamic_load", "dynamic_set_data_ctx", "ENGINE_add", "ENGINE_by_id", "ENGINE_cmd_is_executable", "ENGINE_ctrl", "ENGINE_ctrl_cmd", "ENGINE_ctrl_cmd_string", "ENGINE_finish", "ENGINE_get_cipher", "ENGINE_get_digest", "ENGINE_get_first", "ENGINE_get_last", "ENGINE_get_next", "ENGINE_get_pkey_asn1_meth", "ENGINE_get_pkey_meth", "ENGINE_get_prev", "ENGINE_init", "engine_list_add", "engine_list_remove", "ENGINE_load_private_key", "ENGINE_load_public_key", "ENGINE_load_ssl_client_cert", "ENGINE_new", "ENGINE_pkey_asn1_find_str", "ENGINE_remove", "ENGINE_set_default_string", "ENGINE_set_id", "ENGINE_set_name", "engine_table_register", "engine_unlocked_finish", "ENGINE_up_ref", "int_ctrl_helper", "int_engine_configure", "int_engine_module_init", "crypto/engine/eng_table.c", "crypto/evp/evp_cnf.c", "fips_mode", "name=", "alg_section", "crypto/evp/evp_pkey.c", "crypto/evp/m_sigver.c", "crypto/evp/p_lib.c", "%s algorithm \"%s\" unsupported\n", "Public Key", "Private Key", "Parameters", "crypto/evp/pmeth_fn.c", "crypto/evp/pmeth_gn.c", "crypto/evp/scrypt.c", "crypto/hmac/hm_ameth.c", "OpenSSL HMAC method", "Enter PEM pass phrase:", "crypto/pem/pem_lib.c", "phrase is too short, needs to be at least %d chars\n", "ENCRYPTED", "MIC-CLEAR", "MIC-ONLY", "BAD-TYPE", "Proc-Type: 4,", "DEK-Info: ", " \t\r\n", "-----BEGIN ", "-----\n", "-----END ", "assertion failed: EVP_CIPHER_iv_length(enc) <= (int)sizeof(iv)", "assertion failed: strlen(objstr) + 23 + 2 * EVP_CIPHER_iv_length(enc) + 13 <= sizeof buf", "Expecting: ", "X509 CERTIFICATE", "CERTIFICATE", "NEW CERTIFICATE REQUEST", "CERTIFICATE REQUEST", "TRUSTED CERTIFICATE", "PKCS7", "PKCS #7 SIGNED DATA", "crypto/pem/pem_oth.c", "crypto/pem/pem_pk8.c", "PKCS12_AUTHSAFES", "PKCS12_SAFEBAGS", "PKCS12_SAFEBAG", "attrib", "value.keybag", "value.shkeybag", "value.safes", "value.bag", "value.other", "PKCS12_BAGS", "value.x509cert", "value.x509crl", "value.sdsicert", "PKCS12_MAC_DATA", "dinfo", "PKCS12", "authsafes", "crypto/pkcs12/p12_decr.c", "crypto/pkcs12/p12_p8e.c", "PKCS7_ATTR_VERIFY", "PKCS7_ATTRIBUTES", "PKCS7_ATTR_SIGN", "PKCS7_DIGEST", "contents", "PKCS7_ENCRYPT", "enc_data", "PKCS7_SIGN_ENVELOPE", "recipientinfo", "md_algs", "cert", "signer_info", "PKCS7_ENC_CONTENT", "content_type", "PKCS7_RECIP_INFO", "issuer_and_serial", "key_enc_algor", "enc_key", "PKCS7_ENVELOPE", "PKCS7_ISSUER_AND_SERIAL", "issuer", "serial", "PKCS7_SIGNER_INFO", "digest_alg", "auth_attr", "digest_enc_alg", "enc_digest", "unauth_attr", "PKCS7_SIGNED", "d.data", "d.sign", "d.enveloped", "d.signed_and_enveloped", "d.digest", "d.encrypted", "d.other", "crypto/pkcs7/pk7_doit.c", "crypto/pkcs7/pk7_lib.c", "publicExponent:", "modulus:", "Exponent:", "Modulus:", "Private-Key: (%d bit)\n", "Public-Key: (%d bit)\n", "privateExponent:", "prime1:", "prime2:", "exponent1:", "exponent2:", "coefficient:", "crypto/rsa/rsa_ameth.c", "Hash Algorithm: ", "sha1 (default)", "Mask Algorithm: ", " with ", "INVALID", "mgf1 with sha1 (default)", "Salt Length: 0x", "14 (default)", "Trailer Field: 0x", "BC (default)", " (INVALID PSS PARAMETERS)\n", "OpenSSL RSA method", "RSA_OAEP_PARAMS", "hashFunc", "maskGenFunc", "pSourceFunc", "RSA_PSS_PARAMS", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "dmp1", "dmq1", "iqmp", "crypto/rsa/rsa_crpt.c", "crypto/rsa/rsa_gen.c", "crypto/rsa/rsa_lib.c", "crypto/rsa/rsa_none.c", "crypto/rsa/rsa_oaep.c", "        Subject OCSP hash: ", "crypto/x509/t_x509.c", "\n        Public key OCSP hash: ", "    Signature Algorithm: ", "%*sTrusted Uses:\n%*s", "%*sNo Trusted Uses.\n", "%*sRejected Uses:\n%*s", "%*sNo Rejected Uses.\n", "%*sAlias: %s\n", "%*sKey Id: ", "%s%02X", " (Negative)", "Certificate:\n", "    Data:\n", "%8sVersion: %ld (0x%lx)\n", "%8sVersion: Unknown (%ld)\n", "        Serial Number:", " %s%lu (%s0x%lx)\n", "\n%12s%s", "        Issuer:%c", "        Validity\n", "            Not Before: ", "\n            Not After : ", "        Subject:%c", "        Subject Public Key Info:\n", "%12sPublic Key Algorithm: ", "%12sUnable to load Public Key\n", "%8sIssuer Unique ID: ", "%8sSubject Unique ID: ", "X509v3 extensions", "crypto/x509/x509_att.c", "crypto/x509/x509_cmp.c", "crypto/x509/x509_obj.c", "NO X509_NAME", "crypto/x509/x509_vfy.c", "assertion failed: num == 1 && ctx->num_untrusted == num", "assertion failed: num > i && i > 0 && ss == 0", "assertion failed: ctx->num_untrusted <= num", "assertion failed: num == ctx->num_untrusted", "default", "crypto/x509/x509_vpm.c", "smime_sign", "ssl_client", "ssl_server", "crypto/x509/x509name.c", "X509_ATTRIBUTE", "object", "crypto/x509/x_crl.c", "X509_CRL", "sig_alg", "signature", "X509_CRL_INFO", "lastUpdate", "nextUpdate", "revoked", "extensions", "X509_REVOKED", "revocationDate", "X509_EXTENSIONS", "Extension", "X509_EXTENSION", "critical", "value", "crypto/x509/x_name.c", "X509_NAME", "X509_NAME_INTERNAL", "Name", "X509_NAME_ENTRIES", "RDNS", "X509_NAME_ENTRY", "crypto/x509/x_pubkey.c", "X509_PUBKEY", "public_key", "X509_REQ", "req_info", "X509_REQ_INFO", "subject", "pubkey", "crypto/x509/x_x509.c", "cert_info", "X509_CINF", "validity", "issuerUID", "subjectUID", "X509_CERT_AUX", "trust", "reject", "alias", "keyid", "other", "crypto/x509v3/pcy_cache.c", "crypto/x509v3/pcy_data.c", "crypto/x509v3/pcy_tree.c", "assertion failed: memcmp(min, max, length) <= 0", "crypto/x509v3/v3_addr.c", "[%d]", "%d.%d.%d.%d", "%x%s", "%s%02x", "assertion failed: aor->u.addressRange == NULL", "assertion failed: f->addressFamily->data != NULL", "%*sIPv4", "%*sIPv6", "%*sUnknown AFI %u", " (Unicast)", " (Multicast)", " (Unicast/Multicast)", " (MPLS)", " (Tunnel)", " (VPLS)", " (BGP MDT)", " (MPLS-labeled VPN)", " (Unknown SAFI %u)", ": inherit\n", "/%d\n", "assertion failed: X509v3_addr_is_canonical(addr)", "IPv4", "IPv6", "IPv4-SAFI", "IPv6-SAFI", "section:", ",name:", ",value:", "inherit", "assertion failed: chain != NULL && sk_X509_num(chain) > 0", "assertion failed: ctx == NULL || ctx->verify_cb != NULL", "assertion failed: x != NULL", "IPAddrBlocks", "IPAddressFamily", "addressFamily", "ipAddressChoice", "IPAddressChoice", "u.inherit", "u.addressesOrRanges", "IPAddressOrRange", "u.addressPrefix", "u.addressRange", "IPAddressRange", "AUTHORITY_KEYID", "assertion failed: (a->type == ASIdOrRange_id && a->u.id != NULL) || (a->type == ASIdOrRange_range && a->u.range != NULL && a->u.range->min != NULL && a->u.range->max != NULL)", "crypto/x509v3/v3_asid.c", "assertion failed: (b->type == ASIdOrRange_id && b->u.id != NULL) || (b->type == ASIdOrRange_range && b->u.range != NULL && b->u.range->min != NULL && b->u.range->max != NULL)", "assertion failed: aor != NULL && min != NULL && max != NULL", "%*s%s:\n", "Autonomous System Numbers", "%*s%s\n", "%*s%s-", "%*sinherit\n", "Routing Domain Identifiers", "assertion failed: ASN1_INTEGER_cmp(a_min, b_min) <= 0", "assertion failed: ASIdentifierChoice_is_canonical(choice)", "assertion failed: (*choice)->u.inherit == NULL", "assertion failed: (*choice)->u.asIdsOrRanges == NULL", "ASIdentifiers", "asnum", "ASIdentifierChoice", "u.asIdsOrRanges", "ASIdOrRange", "u.id", "u.range", "ASRange", "%*sCPS: %s\n", "%*sUser Notice:\n", "%*sOrganization: %s\n", "%*sNumber%s: ", "(null)", "crypto/x509v3/v3_cpols.c", "%*sExplicit Text: %s\n", "%*sUnknown Qualifier: ", "%*sPolicy: ", "ia5org", "policyIdentifier", "userNotice", "explicitText", "organization", "noticeNumbers", "Critical", "Non Critical", "%*sNo Qualifiers\n", "NOTICEREF", "noticenos", "USERNOTICE", "noticeref", "exptext", "POLICYQUALINFO", "pqualid", "d.cpsuri", "d.usernotice", "POLICYINFO", "policyid", "qualifiers", "CERTIFICATEPOLICIES", "%*sFull Name:\n", "%*sRelative Name:\n%*s", "<EMPTY>\n", "%*sCRL Issuer:\n", "%*s%s:\n%*s", "Reasons", "%*sOnly User Certificates\n", "%*sOnly CA Certificates\n", "%*sIndirect CRL\n", "%*sOnly Attribute Certificates\n", "%*s<EMPTY>\n", "Only Some Reasons", "fullname", "crypto/x509v3/v3_crld.c", "relativename", "CRLissuer", "reasons", "onlyCA", "onlyAA", "indirectCRL", "onlysomereasons", "onlyuser", "ISSUING_DIST_POINT", "distpoint", "onlyattr", "CRL_DIST_POINTS", "CRLDistributionPoints", "DIST_POINT", "DIST_POINT_NAME", "name.fullname", "name.relativename", "Unused", "unused", "Key Compromise", "keyCompromise", "CA Compromise", "CACompromise", "Affiliation Changed", "affiliationChanged", "Superseded", "superseded", "Cessation Of Operation", "cessationOfOperation", "Certificate Hold", "certificateHold", "Privilege Withdrawn", "privilegeWithdrawn", "AA Compromise", "AACompromise", "GENERAL_NAMES", "GeneralNames", "GENERAL_NAME", "d.otherName", "d.rfc822Name", "d.dNSName", "d.x400Address", "d.directoryName", "d.ediPartyName", "d.uniformResourceIdentifier", "d.iPAddress", "d.registeredID", "EDIPARTYNAME", "nameAssigner", "partyName", "OTHERNAME", "type_id", "%d.%d.%d.%d/%d.%d.%d.%d", "IP Address:<invalid>", "Permitted", "Excluded", "permitted", "excluded", "crypto/x509v3/v3_ncons.c", "NAME_CONSTRAINTS", "permittedSubtrees", "excludedSubtrees", "GENERAL_SUBTREE", "minimum", "maximum", "Require Explicit Policy", "Inhibit Policy Mapping", "crypto/x509v3/v3_pcons.c", "requireExplicitPolicy", "inhibitPolicyMapping", "POLICY_CONSTRAINTS", "crypto/x509v3/v3_pmaps.c", "POLICY_MAPPINGS", "POLICY_MAPPING", "issuerDomainPolicy", "subjectDomainPolicy", "%s:%s", "%*s<Not Supported>", "%*s<Parse Error>", "%*s%s", "crypto/x509v3/v3_prn.c", ": %s\n", "crypto/x509v3/v3_purp.c", "SSL client", "sslclient", "SSL server", "sslserver", "Netscape SSL server", "nssslserver", "S/MIME signing", "smimesign", "S/MIME encryption", "smimeencrypt", "CRL signing", "crlsign", "Any Purpose", "OCSP helper", "ocsphelper", "Time Stamp signing", "timestampsign", "crypto/x509v3/v3_utl.c", "xn--", "TRUE", "FALSE", "true", "false", "crypto/asn1/a_digest.c", "crypto/asn1/a_gentm.c", "%04d%02d%02d%02d%02d%02dZ", " GMT", "%s %2d %02d:%02d:%02d%.*s %d%s", "Bad time value", "crypto/asn1/a_sign.c", "crypto/asn1/a_strex.c", "\\%02X", "\\W%08lX", "\\U%04lX", "crypto/asn1/a_strnid.c", "MASK:", "nombstr", "pkix", "utf8only", "crypto/asn1/a_time.c", "ASN1_TIME", "crypto/asn1/a_utctm.c", "%02d%02d%02d%02d%02d%02dZ", "%s %2d %02d:%02d:%02d %d%s", "crypto/asn1/a_verify.c", "(unknown)", "cons: ", "prim: ", "BAD RECURSION DEPTH\n", "Error in encoding\n", "%5ld:", "d=%-2d hl=%ld l=%4ld ", "d=%-2d hl=%ld l=inf  ", "priv [ %d ] ", "cont [ %d ]", "appl [ %d ]", "<ASN1 %d>", "length is greater than %ld\n", ":BAD OBJECT", ":BAD BOOLEAN", "[HEX DUMP]:", ":BAD INTEGER", ":BAD ENUMERATED", "BOOLEAN", "INTEGER", "BIT STRING", "OCTET STRING", "OBJECT", "OBJECT DESCRIPTOR", "EXTERNAL", "REAL", "ENUMERATED", "<ASN1 11>", "UTF8STRING", "<ASN1 13>", "<ASN1 14>", "<ASN1 15>", "SEQUENCE", "NUMERICSTRING", "PRINTABLESTRING", "T61STRING", "VIDEOTEXSTRING", "IA5STRING", "UTCTIME", "GENERALIZEDTIME", "GRAPHICSTRING", "VISIBLESTRING", "GENERALSTRING", "UNIVERSALSTRING", "<ASN1 29>", "BMPSTRING", "crypto/asn1/asn_moid.c", "oid_section", "crypto/asn1/asn_mstbl.c", "mask", "flags", "nomask", "field=", "stbl_section", "crypto/asn1/f_int.c", "%s 0\n", "%s %s%lu (%s0x%lx)\n", "crypto/asn1/t_pkey.c", "%s%s\n", " (%s)", "BOOL ABSENT", "%*s%s OF %s {\n", "<ABSENT>\n", "NULL\n", "crypto/asn1/tasn_prn.c", "%s (%s)", " (%ld unused bits)\n", "ERROR: selector [%d] invalid\n", "%*s}\n", "Unprocessed type %d\n", ":EXTERNAL TYPE %s\n", "CBIGNUM", "BIGNUM", "NETSCAPE_SPKI", "spkac", "sig_algor", "NETSCAPE_SPKAC", "challenge", "X509_VAL", "notBefore", "notAfter", "crypto/bio/bss_mem.c", "secure memory buffer", "memory buffer", "crypto/bn/bn_exp2.c", "assertion failed: bits > prime_multiplier_bits", "crypto/bn/bn_prime.c", "crypto/bn/bn_sqrt.c", "crypto/cms/cms_asn1.c", "CMS_SharedInfo", "keyInfo", "entityUInfo", "suppPubInfo", "CMS_Receipt", "signedContentIdentifier", "originatorSignatureValue", "CMS_ReceiptRequest", "receiptsFrom", "receiptsTo", "CMS_ReceiptsFrom", "d.allOrFirstTier", "d.receiptList", "CMS_Attributes_Verify", "CMS_ATTRIBUTES", "CMS_Attributes_Sign", "CMS_ContentInfo", "d.signedData", "d.envelopedData", "d.digestedData", "d.encryptedData", "d.authenticatedData", "d.compressedData", "CMS_CompressedData", "compressionAlgorithm", "encapContentInfo", "CMS_AuthenticatedData", "originatorInfo", "recipientInfos", "macAlgorithm", "digestAlgorithm", "authAttrs", "unauthAttrs", "CMS_EncryptedData", "encryptedContentInfo", "unprotectedAttrs", "CMS_DigestedData", "CMS_EnvelopedData", "CMS_RecipientInfo", "d.ktri", "d.kari", "d.kekri", "d.pwri", "d.ori", "CMS_OtherRecipientInfo", "oriType", "oriValue", "CMS_PasswordRecipientInfo", "keyDerivationAlgorithm", "keyEncryptionAlgorithm", "encryptedKey", "CMS_KEKRecipientInfo", "kekid", "CMS_KEKIdentifier", "keyIdentifier", "date", "CMS_KeyAgreeRecipientInfo", "originator", "recipientEncryptedKeys", "CMS_OriginatorIdentifierOrKey", "d.issuerAndSerialNumber", "d.subjectKeyIdentifier", "d.originatorKey", "CMS_OriginatorPublicKey", "CMS_RecipientEncryptedKey", "CMS_KeyAgreeRecipientIdentifier", "d.rKeyId", "CMS_RecipientKeyIdentifier", "CMS_OtherKeyAttribute", "keyAttrId", "keyAttr", "CMS_KeyTransRecipientInfo", "CMS_EncryptedContentInfo", "contentEncryptionAlgorithm", "encryptedContent", "CMS_OriginatorInfo", "certificates", "crls", "CMS_SignedData", "digestAlgorithms", "signerInfos", "CMS_RevocationInfoChoice", "d.crl", "CMS_OtherRevocationInfoFormat", "otherRevInfoFormat", "otherRevInfo", "CMS_SignerInfo", "signedAttrs", "signatureAlgorithm", "unsignedAttrs", "CMS_EncapsulatedContentInfo", "eContentType", "eContent", "CMS_SignerIdentifier", "CMS_CertificateChoices", "d.certificate", "d.extendedCertificate", "d.v1AttrCert", "d.v2AttrCert", "CMS_OtherCertificateFormat", "otherCertFormat", "otherCert", "CMS_IssuerAndSerialNumber", "crypto/cms/cms_env.c", "crypto/cms/cms_io.c", "crypto/cms/cms_kari.c", "crypto/cms/cms_lib.c", "crypto/cms/cms_pwri.c", "crypto/cms/cms_sd.c", "crypto/conf/conf_api.c", "assertion failed: vv == NULL", "crypto/conf/conf_def.c", "[%s] %s=%s\n", "[[%s]]\n", "line ", "WIN32", "OpenSSL default", "crypto/dh/dh_gen.c", "crypto/dh/dh_kdf.c", "crypto/ec/ec2_oct.c", "crypto/ec/ec2_smpl.c", "crypto/ec/ec_print.c", "%lu:%s:%s:%d:%s\n", "crypto/evp/bio_enc.c", "message digest", "crypto/evp/encode.c", "assertion failed: ctx->length <= (int)sizeof(ctx->enc_data)", "assertion failed: nkey <= EVP_MAX_KEY_LENGTH", "crypto/evp/evp_key.c", "assertion failed: niv <= EVP_MAX_IV_LENGTH", "crypto/evp/p_sign.c", "crypto/evp/p_verify.c", "crypto/ocsp/ocsp_ht.c", "POST", "Code=", ",Reason=", "crypto/pkcs7/pk7_attr.c", "crypto/ui/ui_lib.c", "Enter ", " for ", "processing", "reading strings", "flushing", "writing strings", "opening session", "closing session", "while ", "You must type in ", " to ", " characters", "Verifying - %s", "Verify failure\n", "/dev/tty", "crypto/ui/ui_openssl.c", "errno=", "OpenSSL default user interface", "crypto/x509/x509_lu.c", "crypto/x509/x509_req.c", "crypto/x509/x509_trs.c", "compatible", "SSL Client", "SSL Server", "S/MIME email", "Object Signer", "OCSP responder", "OCSP request", "TSA server", "crypto/x509/x509_v3.c", "crypto/x509v3/pcy_node.c", "othername", "<unsupported>", "X400Name", "EdiPartyName", "email", "DirName", "IP Address", "<invalid>", "Registered ID", "othername:<unsupported>", "X400Name:<unsupported>", "EdiPartyName:<unsupported>", "email:%s", "DNS:%s", "URI:%s", "DirName:", "IP Address:%d.%d.%d.%d", "Registered ID:", "crypto/x509v3/v3_alt.c", "value=", "dirName", "otherName", "copy", "move", "pathlen", "crypto/x509v3/v3_bcons.c", "BASIC_CONSTRAINTS", "crypto/x509v3/v3_conf.c", ",section=", "critical,", "DER:", "ASN1:", "crypto/x509v3/v3_info.c", "AUTHORITY_INFO_ACCESS", "ACCESS_DESCRIPTION", "method", "location", "crypto/x509v3/v3_lib.c", "language", "crypto/x509v3/v3_pci.c", "policy", "hex:", "file:", "text:", "%*sPath Length Constraint: ", "infinite", "%*sPolicy Language: ", "%*sPolicy Text: %s\n", "PROXY_CERT_INFO_EXTENSION", "pcPathLengthConstraint", "proxyPolicy", "PROXY_POLICY", "policyLanguage", "Not Before: ", "Not After: ", "PKEY_USAGE_PERIOD", "crypto/x509v3/v3_skey.c", "hash", "%*sVersion: %ld (0x%lX)", "\n%*sZone: %s, User: ", "crypto/x509v3/v3_sxnet.c", "SXNET", "SXNETID", "zone", "user", "crypto/x509v3/v3_tlsf.c", "status_request", "status_request_v2", "TLS_FEATURE", "'()+,-./:=?", "crypto/asn1/a_mbstr.c", "minsize=", "maxsize=", "crypto/asn1/asn1_gen.c", "Char=", "string=", "tag=", "ASCII", "UTF8", "BITLIST", "BOOL", "ENUM", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIV", "UTF8String", "VISIBLE", "PRINTABLE", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORM", "FORMAT", "crypto/asn1/asn_mime.c", "content-type", "multipart/signed", "boundary", "application/x-pkcs7-signature", "application/pkcs7-signature", "type: ", "application/x-pkcs7-mime", "application/pkcs7-mime", "Content-Type: text/plain\r\n\r\n", "-----BEGIN %s-----\n", "-----END %s-----\n", "application/x-pkcs7-", "application/pkcs7-", "smime.p7m", "certs-only", "signed-receipt", "compressed-data", "smime.p7z", "signed-data", "enveloped-data", "MIME-Version: 1.0%s", "Content-Type: multipart/signed;", " protocol=\"%ssignature\";", " micalg=\"", "sha-256", "sha-384", "sha-512", "gostr3411-94", "\"; boundary=\"----%s\"%s%s", "This is an S/MIME signed message%s%s", "------%s%s", "%s------%s%s", "Content-Type: %ssignature;", " name=\"smime.p7s\"%s", "Content-Transfer-Encoding: base64%s", "Content-Disposition: attachment;", " filename=\"smime.p7s\"%s%s", "%s------%s--%s%s", " name=\"%s\"%s", "Content-Transfer-Encoding: base64%s%s", " filename=\"%s\"%s", "Content-Type: %smime;", " smime-type=%s;", "text/plain", "crypto/asn1/bio_ndef.c", "crypto/bio/bf_buff.c", "buffer", "crypto/bn/bn_gf2m.c", "crypto/cms/cms_dd.c", "crypto/cms/cms_enc.c", "crypto/ct/ct_x509v3.c", "crypto/ec/ec2_mult.c", "crypto/evp/bio_b64.c", "assertion failed: ctx->buf_len >= ctx->buf_off", "assertion failed: ctx->buf_off + i < (int)sizeof(ctx->buf)", "assertion failed: ctx->buf_off < (int)sizeof(ctx->buf)", "assertion failed: ctx->buf_len <= (int)sizeof(ctx->buf)", "assertion failed: i <= n", "assertion failed: ctx->buf_off <= (int)sizeof(ctx->buf)", "assertion failed: ctx->tmp_len <= 3", "base64 encoding", "OCSP_SERVICELOC", "locator", "OCSP_CRLID", "crlUrl", "crlNum", "crlTime", "OCSP_BASICRESP", "tbsResponseData", "certs", "OCSP_RESPDATA", "responderId", "producedAt", "responses", "responseExtensions", "OCSP_SINGLERESP", "certId", "certStatus", "thisUpdate", "singleExtensions", "OCSP_CERTSTATUS", "value.good", "value.revoked", "value.unknown", "OCSP_REVOKEDINFO", "revocationTime", "revocationReason", "OCSP_RESPID", "value.byName", "value.byKey", "OCSP_RESPONSE", "responseStatus", "responseBytes", "OCSP_RESPBYTES", "responseType", "response", "OCSP_REQUEST", "tbsRequest", "optionalSignature", "OCSP_REQINFO", "requestorName", "requestList", "requestExtensions", "OCSP_ONEREQ", "reqCert", "singleRequestExtensions", "OCSP_CERTID", "issuerNameHash", "issuerKeyHash", "OCSP_SIGNATURE", "%*scrlUrl: ", "%*scrlNum: ", "%*scrlTime: ", "crypto/ocsp/v3_ocsp.c", "%*sIssuer: ", "\n%*s", "always", "crypto/x509v3/v3_akey.c", "crypto/x509v3/v3_bitst.c", "Digital Signature", "digitalSignature", "Non Repudiation", "nonRepudiation", "Key Encipherment", "keyEncipherment", "Data Encipherment", "dataEncipherment", "Key Agreement", "keyAgreement", "Certificate Sign", "keyCertSign", "CRL Sign", "cRLSign", "Encipher Only", "encipherOnly", "Decipher Only", "decipherOnly", "client", "server", "Object Signing", "objsign", "reserved", "SSL CA", "sslCA", "S/MIME CA", "emailCA", "Object Signing CA", "objCA", "crypto/x509v3/v3_enum.c", "Unspecified", "unspecified", "Remove From CRL", "removeFromCRL", "crypto/x509v3/v3_extku.c", "EXTENDED_KEY_USAGE", "crypto/x509v3/v3_ia5.c", "crypto/asn1/bio_asn1.c", "assertion failed: ctx->buflen <= ctx->bufsize", "asn1", "crypto/asn1/f_string.c", "crypto/ct/ct_oct.c", "not set", "unknown version", "unknown log", "unverified", "invalid", "unknown status", "%*sSigned Certificate Timestamp:", "\n%*sVersion   : ", "unknown\n%*s", "v1 (0x0)", "\n%*sLog       : %s", "\n%*sLog ID    : ", "\n%*sTimestamp : ", "%.14s.%03dZ", "\n%*sExtensions: ", "\n%*sSignature : ", "%02X%02X", "\n%*s            ", "crypto/ct/ct_sct.c", "crypto/ct/ct_sct_ctx.c", "crypto/ct/ct_vfy.c", "crypto/ct/ct_log.c", "enabled_logs", "/usr/local/ssl/ct_log_list.cnf", "CTLOG_FILE", "crypto/ct/ct_b64.c", "uil]`cfor", "\\II\t\t\t\tgg", "0123456789ABCDEF", "x]vXtRO", "0123456789ABCDEF", "v\\tVrQN", "$Ge^U", "x]vXtRO", "x]vXtRO", "w]uWsRO", "y_wYuTQ", "ggen", "0123456789ABCDEF", "Proc-Type:", "ENCRYPTED", "DEK-Info:", "0123456789ABCDEF", "0123456789.", "0123456789.:abcdefABCDEF", "0123456789ABCDEF", "%-18s", "                    ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "%s %s HTTP/1.0\r\n", "St9bad_alloc", "St20bad_array_new_length", "N10__cxxabiv120__si_class_type_infoE", "St11logic_error", "St17__Named_exception", "St13runtime_error", "St12domain_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St11range_error", "St14overflow_error", "St15underflow_error", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv116__shim_type_infoE", "St13bad_exception", "N10__cxxabiv119__pointer_type_infoE", "St9type_info", "St8bad_cast", "St10bad_typeid", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv120__function_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDn", "PKDh", "PKDs", "PKDi", "N10__cxxabiv117__pbase_type_infoE"], "stringidentifiers": ["BINARY", "tU6p", "onoffalseyestruextrafull", "aceinouyyacdeeghijklnorstuuwyzouaiougkojgnaeiorusthaeoy", "cipher_fips_status", "cipher_store_pass", "cipher_profile", "cipher_add_random", "cipher_migrate", "cipher_provider", "cipher_provider_version", "cipher_version", "cipher", "rekey_cipher", "cipher_default_kdf_iter", "kdf_iter", "fast_kdf_iter", "rekey_kdf_iter", "cipher_page_size", "cipher_default_page_size", "cipher_default_use_hmac", "cipher_use_hmac", "cipher_hmac_pgno", "native", "cipher_hmac_salt_mask", "main", "stdout", "stderr", "unix", "indexed", "create", "trigger", "temp", "temporary", "explain", "INTEGER", "SQLITE_", "openssl", "thstndrd", "NULL", "open", "close", "access", "getcwd", "stat", "fstat", "ftruncate", "fcntl", "read", "pread", "pread64", "write", "pwrite", "pwrite64", "fchmod", "fallocate", "unlink", "openDirectory", "mkdir", "rmdir", "fchown", "geteuid", "mmap", "munmap", "mremap", "getpagesize", "readlink", "lstat", "full_fsync", "SQLITE_TMPDIR", "TMPDIR", "readonly_shm", "modeof", "psow", "fsync", "nolock", "immutable", "Savepoint", "AutoCommit", "Transaction", "SorterNext", "PrevIfOpen", "NextIfOpen", "Prev", "Next", "Checkpoint", "JournalMode", "Vacuum", "VFilter", "VUpdate", "Goto", "Gosub", "InitCoroutine", "Yield", "MustBeInt", "Jump", "Once", "IfNot", "IfNullRow", "SeekLT", "SeekLE", "SeekGE", "SeekGT", "NoConflict", "NotFound", "Found", "SeekRowid", "NotExists", "Last", "IfSmaller", "SorterSort", "Sort", "Rewind", "IdxLE", "IdxGT", "IdxLT", "IdxGE", "RowSetRead", "RowSetTest", "Program", "FkIfZero", "IfPos", "IfNotZero", "DecrJumpZero", "IncrVacuum", "VNext", "Init", "Return", "EndCoroutine", "HaltIfNull", "Halt", "Integer", "Int64", "String", "Null", "SoftNull", "Blob", "Variable", "Move", "Copy", "SCopy", "IntCopy", "ResultRow", "CollSeq", "AddImm", "RealAffinity", "Cast", "Permutation", "IsNull", "NotNull", "ElseNotEq", "BitAnd", "BitOr", "ShiftLeft", "ShiftRight", "Subtract", "Multiply", "Divide", "Remainder", "Concat", "Compare", "BitNot", "Column", "String8", "Affinity", "MakeRecord", "Count", "ReadCookie", "SetCookie", "ReopenIdx", "OpenRead", "OpenWrite", "OpenDup", "OpenAutoindex", "OpenEphemeral", "SorterOpen", "SequenceTest", "OpenPseudo", "Close", "ColumnsUsed", "Sequence", "NewRowid", "Insert", "InsertInt", "Delete", "ResetCount", "SorterCompare", "SorterData", "RowData", "Rowid", "NullRow", "SorterInsert", "IdxInsert", "IdxDelete", "DeferredSeek", "IdxRowid", "Destroy", "Clear", "Real", "ResetSorter", "CreateIndex", "CreateTable", "SqlExec", "ParseSchema", "LoadAnalysis", "DropTable", "DropIndex", "DropTrigger", "IntegrityCk", "RowSetAdd", "Param", "FkCounter", "MemMax", "OffsetLimit", "AggStep0", "AggStep", "AggFinal", "Expire", "TableLock", "VBegin", "VCreate", "VDestroy", "VOpen", "VColumn", "VRename", "Pagecount", "MaxPgcnt", "PureFunc0", "Function0", "PureFunc", "Function", "CursorHint", "Noop", "Explain", "program", "UNIQUE", "CHECK", "sqlite_master", "into", "sqlite_stat1", "sqlite_stat4", "sqlite_stat3", "delete", "persist", "truncate", "memory", "BEGIN", "null", "real", "integer", "pragma_", "activate_extensions", "application_id", "auto_vacuum", "automatic_index", "busy_timeout", "cache_size", "cache_spill", "case_sensitive_like", "cell_size_check", "checkpoint_fullfsync", "collation_list", "compile_options", "count_changes", "data_version", "database_list", "default_cache_size", "defer_foreign_keys", "empty_result_callbacks", "encoding", "foreign_key_check", "foreign_key_list", "foreign_keys", "freelist_count", "full_column_names", "fullfsync", "hexkey", "hexrekey", "ignore_check_constraints", "incremental_vacuum", "index_info", "index_list", "index_xinfo", "integrity_check", "journal_mode", "journal_size_limit", "legacy_file_format", "locking_mode", "max_page_count", "mmap_size", "optimize", "page_count", "page_size", "query_only", "quick_check", "read_uncommitted", "recursive_triggers", "rekey", "reverse_unordered_selects", "schema_version", "secure_delete", "short_column_names", "shrink_memory", "soft_heap_limit", "synchronous", "table_info", "temp_store", "temp_store_directory", "threads", "user_version", "wal_autocheckpoint", "wal_checkpoint", "writable_schema", "name", "type", "notnull", "dflt_value", "wdth", "hght", "flgs", "seqno", "desc", "coll", "unique", "origin", "partial", "file", "builtin", "table", "from", "on_update", "on_delete", "match", "rowid", "parent", "fkid", "busy", "checkpointed", "timeout", "database", "status", "unopened", "sqlite3_extension_init", "_init", "addr", "opcode", "comment", "selectid", "order", "detail", "LIST", "SCALAR", "ROLLBACK", "COMMIT", "RELEASE", "sqlite_temp_master", "sqlite_sequence", "sqlite_", "TABLE", "view", "VIEW", "subqueries", "parameters", "ROWID", "ORDER", "GROUP", "INTERSECT", "EXCEPT", "UNION", "index", "altertab_", "sqlite_stat", "DISTINCT", "NOCASE", "glob", "like", "regexp", "SEARCH", "SCAN", "USING", "fast", "normal", "exclusive", "issisi", "iisX", "isiX", "isisi", "iissssss", "NONE", "UTF8", "UTF16le", "UTF16be", "UTF16", "full", "restart", "none", "incremental", "CASCADE", "RESTRICT", "BEFORE", "AFTER", "sqlite_attach", "localhost", "cache", "shared", "private", "mode", "sqlite_detach", "stat_init", "stat_push", "stat_get", "soundex", "load_extension", "sqlite_compileoption_used", "sqlite_compileoption_get", "unlikely", "likelihood", "likely", "ltrim", "rtrim", "trim", "typeof", "length", "instr", "printf", "unicode", "char", "round", "upper", "lower", "ifnull", "random", "randomblob", "nullif", "sqlite_version", "sqlite_source_id", "sqlite_log", "quote", "last_insert_rowid", "changes", "total_changes", "replace", "zeroblob", "substr", "total", "count", "group_concat", "coalesce", "text", "blob", "sqlite_rename_table", "sqlite_rename_trigger", "sqlite_rename_parent", "sqlite_record", "julianday", "date", "time", "datetime", "strftime", "current_time", "current_timestamp", "current_date", "localtime", "unixepoch", "month", "year", "second", "minute", "hour", "interrupted", "invalid", "RTRIM", "MATCH", "sqlcipher_export", "fts5", "fts5_source_id", "rank", "content", "docsize", "prefix", "tokenize", "content_rowid", "columnsize", "columns", "unindexed", "data", "config", "version", "block", "pgsz", "hashsize", "automerge", "usermerge", "crisismerge", "bm25", "reads", "phrase", "NEAR", "DESC", "UPDATE", "rebuild", "merge", "fts5_decode", "fts5_decode_none", "fts5_rowid", "corrupt", "segment", "fts5_expr", "fts5_expr_tcl", "fts5_isalnum", "fts5_fold", "nearset", "snippet", "highlight", "unicode61", "ascii", "porter", "remove_diacritics", "tokenchars", "separators", "ational", "tional", "enci", "ence", "anci", "ance", "izer", "logi", "alli", "entli", "ousli", "ization", "ation", "ator", "alism", "iveness", "fulness", "ousness", "aliti", "iviti", "biliti", "ical", "ness", "icate", "iciti", "ative", "alize", "able", "ible", "ement", "ment", "fts5vocab", "fts5_api_ptr", "simple", "fts3_tokenizer", "offsets", "matchinfo", "fts3", "fts4", "fts4aux", "compress", "uncompress", "languageid", "notindexed", "docid", "langid", "_content", "__langid", "fts3cursor", "fts3tokenize", "rtreenode", "rtreedepth", "rtree", "rtree_i32", "RtreeMatchArg", "dbstat", "overflow", "internal", "leaf", "corrupted", "json", "json_array", "json_array_length", "json_extract", "json_insert", "json_object", "json_patch", "json_quote", "json_remove", "json_replace", "json_set", "json_type", "json_valid", "json_group_array", "json_group_object", "json_each", "json_tree", "true", "false", "insert", "array", "object", "misuse", "_ROWID_", "ENABLE_COLUMN_METADATA", "ENABLE_DBSTAT_VTAB", "ENABLE_FTS3_PARENTHESIS", "ENABLE_FTS4", "ENABLE_FTS5", "ENABLE_JSON1", "ENABLE_LOAD_EXTENSION", "ENABLE_MEMORY_MANAGEMENT", "ENABLE_RTREE", "ENABLE_STAT4", "ENABLE_UNLOCK_NOTIFY", "HAS_CODEC", "SOUNDEX", "nHandle", "nStatement", "native_compile", "native_finalize", "mNativeHandle", "dbopen", "dbclose", "enableSqlTracing", "enableSqlProfiling", "native_execSQL", "lastInsertRow", "lastChangeCount", "native_getDbLookaside", "releaseMemory", "native_rawExecSQL", "native_status", "key_mutf8", "native_bind_null", "native_bind_long", "native_bind_double", "native_bind_string", "native_bind_blob", "native_clear_bindings", "native_fill_window", "native_column_count", "native_column_name", "native_execute", "native_1x1_long", "native_1x1_string", "nWindow", "sizeCopied", "native_init", "native_clear", "close_native", "getLong_native", "getBlob_native", "isBlob_native", "getString_native", "copyStringToBuffer_native", "getDouble_native", "isNull_native", "getNumRows_native", "setNumColumns_native", "allocRow_native", "putBlob_native", "putString_native", "putLong_native", "putDouble_native", "freeLastRow_native", "putNull_native", "isString_native", "isFloat_native", "isInteger_native", "getType_native", "vector", "std::bad_alloc", "bad_array_new_length", "basic_string", "std::exception", "std::bad_exception", "__android_log_print", "std::bad_cast", "std::bad_typeid", "UNDEF", "undefined", "rsadsi", "pkcs", "rsaEncryption", "md2WithRSAEncryption", "md5WithRSAEncryption", "X500", "X509", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs7", "pkcs3", "dhKeyAgreement", "shaWithRSAEncryption", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "nsCertExt", "nsDataType", "SHA1", "sha1", "sha1WithRSAEncryption", "dsaWithSHA", "PBKDF2", "nsCertType", "nsBaseUrl", "nsRevocationUrl", "nsCaRevocationUrl", "nsRenewalUrl", "nsCaPolicyUrl", "nsSslServerName", "nsComment", "nsCertSequence", "subjectKeyIdentifier", "keyUsage", "privateKeyUsagePeriod", "subjectAltName", "issuerAltName", "basicConstraints", "crlNumber", "certificatePolicies", "authorityKeyIdentifier", "MDC2", "mdc2", "mdc2WithRSA", "givenName", "surname", "initials", "uniqueIdentifier", "crlDistributionPoints", "md5WithRSA", "serialNumber", "title", "description", "pbeWithMD5AndCast5CBC", "dsaWithSHA1", "sha1WithRSA", "dsaEncryption", "RIPEMD160", "ripemd160", "ripemd160WithRSA", "ZLIB", "extendedKeyUsage", "PKIX", "serverAuth", "clientAuth", "codeSigning", "emailProtection", "timeStamping", "msCodeInd", "msCodeCom", "msCTLSign", "msSGC", "msEFS", "nsSGC", "deltaCRL", "CRLReason", "invalidityDate", "SXNetID", "pbeWithSHA1And128BitRC4", "pbeWithSHA1And40BitRC4", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "msExtReq", "extReq", "name", "dnQualifier", "authorityInfoAccess", "OCSP", "caIssuers", "OCSPSigning", "X9cm", "pkcs1", "pkcs5", "SMIME", "biometricInfo", "qcStatements", "aaControls", "textNotice", "ipsecEndSystem", "ipsecTunnel", "ipsecUser", "DVCS", "dvcs", "ad_timestamping", "AD_DVCS", "basicOCSPResponse", "Nonce", "CrlID", "acceptableResponses", "noCheck", "archiveCutoff", "serviceLocator", "extendedStatus", "valid", "path", "trustRoot", "algorithm", "rsaSignature", "X500algorithms", "IANA", "iana", "directory", "Directory", "mgmt", "Management", "experimental", "Experimental", "private", "Private", "security", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "domain", "Domain", "NULL", "clearance", "md4WithRSAEncryption", "subjectInfoAccess", "role", "policyConstraints", "targetInformation", "noRevAvail", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "CSPName", "holdInstructionCode", "holdInstructionNone", "holdInstructionCallIssuer", "holdInstructionReject", "data", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "mail", "rfc822Mailbox", "info", "favouriteDrink", "roomNumber", "photo", "userClass", "host", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "audio", "documentPublisher", "x500UniqueIdentifier", "generationQualifier", "pseudonym", "rsaOAEPEncryptionSET", "msSmartcardLogin", "msUPN", "street", "streetAddress", "postalCode", "proxyCertInfo", "nameConstraints", "Independent", "sha256WithRSAEncryption", "sha384WithRSAEncryption", "sha512WithRSAEncryption", "sha224WithRSAEncryption", "SHA256", "sha256", "SHA384", "sha384", "SHA512", "sha512", "SHA224", "sha224", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "anyPolicy", "policyMappings", "inhibitAnyPolicy", "ipsec3", "ipsec4", "subjectDirectoryAttributes", "issuingDistributionPoint", "certificateIssuer", "KISA", "kisa", "caRepository", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "md_gost94", "gost2001", "gost94", "gost89", "gost94cc", "gost2001cc", "HMAC", "hmac", "LocalKeySet", "freshestCRL", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "CMAC", "cmac", "anyExtendedKeyUsage", "MGF1", "mgf1", "rsassaPss", "rsaesOaep", "dhpublicnumber", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "ct_precert_scts", "ct_precert_poison", "ct_precert_signer", "ct_cert_scts", "jurisdictionL", "jurisdictionLocalityName", "jurisdictionST", "jurisdictionStateOrProvinceName", "jurisdictionC", "jurisdictionCountryName", "gost2012_256", "gost2012_512", "md_gost12_256", "md_gost12_512", "OGRN", "SNILS", "subjectSignTool", "issuerSignTool", "ChaCha20", "chacha20", "tlsfeature", "ipsecIKE", "capwapAC", "capwapWTP", "secureShellClient", "secureShellServer", "sendRouter", "sendProxiedRouter", "sendOwner", "sendProxiedOwner", "pkInitClientAuth", "pkInitKDC", "X25519", "X448", "HKDF", "hkdf", "KxRSA", "KxECDHE", "KxDHE", "KxRSA_PSK", "KxPSK", "KxSRP", "KxGOST", "AuthRSA", "AuthECDSA", "AuthPSK", "AuthDSS", "AuthGOST01", "AuthGOST12", "AuthSRP", "AuthNULL", "BLAKE2b512", "blake2b512", "BLAKE2s256", "blake2s256", "OPENSSL_armcap", "asn1_int_oct", "PBKDF2PARAM", "salt", "iter", "keylength", "PBE2PARAM", "keyfunc", "encryption", "ASN1_SET_ANY", "ASN1_SEQUENCE_ANY", "ASN1_OCTET_STRING_NDEF", "ASN1_FBOOLEAN", "ASN1_TBOOLEAN", "ASN1_BOOLEAN", "DIRECTORYSTRING", "DISPLAYTEXT", "ASN1_PRINTABLE", "ASN1_SEQUENCE", "ASN1_ANY", "ASN1_OBJECT", "ASN1_NULL", "ASN1_BMPSTRING", "ASN1_UNIVERSALSTRING", "ASN1_VISIBLESTRING", "ASN1_GENERALIZEDTIME", "ASN1_UTCTIME", "ASN1_GENERALSTRING", "ASN1_IA5STRING", "ASN1_T61STRING", "ASN1_PRINTABLESTRING", "ASN1_UTF8STRING", "ASN1_BIT_STRING", "ASN1_ENUMERATED", "ASN1_INTEGER", "ASN1_OCTET_STRING", "X509_ALGORS", "algorithms", "X509_ALGOR", "parameter", "ZLONG", "LONG", "openssl_conf", "OPENSSL_init", "OPENSSL_finish", "OPENSSL_CONF", "v_check", "bind_engine", "dynamic", "SO_PATH", "NO_VCHECK", "LIST_ADD", "DIR_LOAD", "DIR_ADD", "LOAD", "RAND", "CIPHERS", "DIGESTS", "PKEY", "PKEY_CRYPTO", "PKEY_ASN1", "OPENSSL_ENGINES", "openssl", "unknown", "fatal", "fopen", "connect", "getservbyname", "socket", "ioctlsocket", "bind", "listen", "accept", "opendir", "fread", "getaddrinfo", "getnameinfo", "setsockopt", "getsockopt", "getsockname", "gethostbyname", "fflush", "DESX", "desx", "DES3", "des3", "IDEA", "idea", "SEED", "seed", "blowfish", "CAST", "cast", "AES128", "aes128", "AES192", "aes192", "AES256", "aes256", "CAMELLIA128", "camellia128", "CAMELLIA192", "camellia192", "CAMELLIA256", "camellia256", "ripemd", "rmd160", "aesni_init_key", "aes_init_key", "aes_ocb_cipher", "aes_t4_init_key", "aes_wrap_cipher", "alg_module_init", "camellia_init_key", "chacha20_poly1305_ctrl", "cmll_t4_init_key", "des_ede3_wrap_cipher", "do_sigver_init", "EVP_CipherInit_ex", "EVP_CIPHER_CTX_copy", "EVP_CIPHER_CTX_ctrl", "EVP_CIPHER_CTX_set_key_length", "EVP_DecryptFinal_ex", "EVP_DecryptUpdate", "EVP_DigestInit_ex", "EVP_EncryptFinal_ex", "EVP_EncryptUpdate", "EVP_MD_CTX_copy_ex", "EVP_MD_size", "EVP_OpenInit", "EVP_PBE_alg_add", "EVP_PBE_alg_add_type", "EVP_PBE_CipherInit", "EVP_PBE_scrypt", "EVP_PKCS82PKEY", "EVP_PKEY2PKCS8", "EVP_PKEY_asn1_add0", "EVP_PKEY_copy_parameters", "EVP_PKEY_CTX_ctrl", "EVP_PKEY_CTX_ctrl_str", "EVP_PKEY_CTX_dup", "EVP_PKEY_decrypt", "EVP_PKEY_decrypt_init", "EVP_PKEY_decrypt_old", "EVP_PKEY_derive", "EVP_PKEY_derive_init", "EVP_PKEY_derive_set_peer", "EVP_PKEY_encrypt", "EVP_PKEY_encrypt_init", "EVP_PKEY_encrypt_old", "EVP_PKEY_get0_DH", "EVP_PKEY_get0_DSA", "EVP_PKEY_get0_EC_KEY", "EVP_PKEY_get0_hmac", "EVP_PKEY_get0_RSA", "EVP_PKEY_keygen", "EVP_PKEY_keygen_init", "EVP_PKEY_new", "EVP_PKEY_paramgen", "EVP_PKEY_paramgen_init", "EVP_PKEY_set1_engine", "EVP_PKEY_sign", "EVP_PKEY_sign_init", "EVP_PKEY_verify", "EVP_PKEY_verify_init", "EVP_PKEY_verify_recover", "EVP_PKEY_verify_recover_init", "EVP_SignFinal", "EVP_VerifyFinal", "int_ctx_new", "PKCS5_PBE_keyivgen", "PKCS5_v2_PBE_keyivgen", "PKCS5_v2_PBKDF2_keyivgen", "PKCS5_v2_scrypt_keyivgen", "pkey_set_type", "rc2_magic_to_meth", "rc5_ctrl", "digest", "hexkey", "hexsalt", "hexinfo", "pkey_tls1_prf_ctrl_str", "pkey_tls1_prf_derive", "secret", "hexsecret", "hexseed", "OBJ_add_object", "OBJ_create", "OBJ_dup", "OBJ_NAME_new_index", "OBJ_nid2ln", "OBJ_nid2obj", "OBJ_nid2sn", "d2i_ocsp_nonce", "OCSP_basic_add1_status", "OCSP_basic_sign", "OCSP_basic_verify", "OCSP_cert_id_new", "ocsp_check_delegated", "ocsp_check_ids", "ocsp_check_issuer", "OCSP_check_validity", "ocsp_match_issuerid", "OCSP_parse_url", "OCSP_request_sign", "OCSP_request_verify", "OCSP_response_get1_basic", "parse_http_line1", "b2i_dss", "b2i_PVK_bio", "b2i_rsa", "check_bitlen_dsa", "check_bitlen_rsa", "d2i_PKCS8PrivateKey_bio", "d2i_PKCS8PrivateKey_fp", "do_b2i", "do_b2i_bio", "do_blob_header", "do_pk8pkey", "do_pk8pkey_fp", "do_PVK_body", "do_PVK_header", "i2b_PVK", "i2b_PVK_bio", "load_iv", "PEM_ASN1_read", "PEM_ASN1_read_bio", "PEM_ASN1_write", "PEM_ASN1_write_bio", "PEM_def_callback", "PEM_do_header", "PEM_get_EVP_CIPHER_INFO", "PEM_read", "PEM_read_bio", "PEM_read_bio_DHparams", "PEM_read_bio_Parameters", "PEM_read_bio_PrivateKey", "PEM_read_DHparams", "PEM_read_PrivateKey", "PEM_SignFinal", "PEM_write", "PEM_write_bio", "PEM_write_PrivateKey", "PEM_X509_INFO_read", "PEM_X509_INFO_read_bio", "PEM_X509_INFO_write_bio", "PARAMETERS", "PKCS12_create", "PKCS12_gen_mac", "PKCS12_init", "PKCS12_item_decrypt_d2i", "PKCS12_item_i2d_encrypt", "PKCS12_item_pack_safebag", "PKCS12_key_gen_asc", "PKCS12_key_gen_uni", "PKCS12_key_gen_utf8", "PKCS12_newpass", "PKCS12_pack_p7data", "PKCS12_pack_p7encdata", "PKCS12_parse", "PKCS12_pbe_crypt", "PKCS12_PBE_keyivgen", "PKCS12_SAFEBAG_create0_p8inf", "PKCS12_SAFEBAG_create0_pkcs8", "PKCS12_SAFEBAG_create_pkcs8_encrypt", "PKCS12_setup_mac", "PKCS12_set_mac", "PKCS12_unpack_authsafes", "PKCS12_unpack_p7data", "PKCS12_verify_mac", "PKCS8_encrypt", "PKCS8_set0_pbe", "do_pkcs7_signed_attrib", "PKCS7_add0_attrib_signing_time", "PKCS7_add_attrib_smimecap", "PKCS7_add_certificate", "PKCS7_add_crl", "PKCS7_add_recipient_info", "PKCS7_add_signature", "PKCS7_add_signer", "PKCS7_bio_add_digest", "pkcs7_copy_existing_digest", "PKCS7_ctrl", "PKCS7_dataDecode", "PKCS7_dataFinal", "PKCS7_dataInit", "PKCS7_dataVerify", "PKCS7_decrypt", "pkcs7_decrypt_rinfo", "pkcs7_encode_rinfo", "PKCS7_encrypt", "PKCS7_final", "PKCS7_find_digest", "PKCS7_get0_signers", "PKCS7_RECIP_INFO_set", "PKCS7_set_cipher", "PKCS7_set_content", "PKCS7_set_digest", "PKCS7_set_type", "PKCS7_sign", "PKCS7_signatureVerify", "PKCS7_SIGNER_INFO_set", "PKCS7_SIGNER_INFO_sign", "PKCS7_sign_add_signer", "PKCS7_simple_smimecap", "PKCS7_verify", "RAND_bytes", "check_padding_md", "encode_pkcs1", "int_rsa_verify", "old_rsa_priv_decode", "pkey_rsa_ctrl", "pkey_rsa_ctrl_str", "pkey_rsa_sign", "pkey_rsa_verify", "pkey_rsa_verifyrecover", "rsa_algor_to_md", "rsa_builtin_keygen", "RSA_check_key", "RSA_check_key_ex", "rsa_cms_decrypt", "rsa_item_verify", "RSA_meth_dup", "RSA_meth_new", "RSA_meth_set1_name", "rsa_mgf1_to_md", "RSA_new_method", "RSA_NULL", "RSA_null_private_decrypt", "RSA_null_private_encrypt", "RSA_null_public_decrypt", "RSA_null_public_encrypt", "rsa_ossl_private_decrypt", "rsa_ossl_private_encrypt", "rsa_ossl_public_decrypt", "rsa_ossl_public_encrypt", "RSA_padding_add_none", "RSA_padding_add_PKCS1_OAEP", "RSA_padding_add_PKCS1_OAEP_mgf1", "RSA_padding_add_PKCS1_PSS", "RSA_padding_add_PKCS1_PSS_mgf1", "RSA_padding_add_PKCS1_type_1", "RSA_padding_add_PKCS1_type_2", "RSA_padding_add_SSLv23", "RSA_padding_add_X931", "RSA_padding_check_none", "RSA_padding_check_PKCS1_OAEP", "RSA_padding_check_PKCS1_OAEP_mgf1", "RSA_padding_check_PKCS1_type_1", "RSA_padding_check_PKCS1_type_2", "RSA_padding_check_SSLv23", "RSA_padding_check_X931", "RSA_print", "RSA_print_fp", "rsa_priv_encode", "rsa_pss_to_ctx", "rsa_pub_decode", "RSA_setup_blinding", "RSA_sign", "RSA_sign_ASN1_OCTET_STRING", "RSA_verify", "RSA_verify_ASN1_OCTET_STRING", "RSA_verify_PKCS1_PSS_mgf1", "rsa_padding_mode", "sslv23", "none", "oeap", "oaep", "x931", "rsa_pss_saltlen", "rsa_keygen_bits", "rsa_keygen_pubexp", "rsa_mgf1_md", "rsa_oaep_md", "rsa_oaep_label", "def_serial_cb", "def_time_cb", "ESS_add_signing_cert", "ess_CERT_ID_new_init", "ess_SIGNING_CERT_new_init", "int_ts_RESP_verify_token", "PKCS7_to_TS_TST_INFO", "TS_ACCURACY_set_micros", "TS_ACCURACY_set_millis", "TS_ACCURACY_set_seconds", "ts_check_imprints", "ts_check_nonces", "ts_check_policy", "ts_check_signing_certs", "ts_check_status_info", "ts_compute_imprint", "ts_CONF_invalid", "TS_CONF_load_cert", "TS_CONF_load_certs", "TS_CONF_load_key", "ts_CONF_lookup_fail", "TS_CONF_set_default_engine", "ts_get_status_text", "TS_MSG_IMPRINT_set_algo", "TS_REQ_set_msg_imprint", "TS_REQ_set_nonce", "TS_REQ_set_policy_id", "TS_RESP_create_response", "ts_RESP_create_tst_info", "TS_RESP_CTX_add_failure_info", "TS_RESP_CTX_add_md", "TS_RESP_CTX_add_policy", "TS_RESP_CTX_new", "TS_RESP_CTX_set_accuracy", "TS_RESP_CTX_set_certs", "TS_RESP_CTX_set_def_policy", "TS_RESP_CTX_set_signer_cert", "TS_RESP_CTX_set_status_info", "ts_RESP_get_policy", "TS_RESP_set_genTime_with_precision", "TS_RESP_set_status_info", "TS_RESP_set_tst_info", "ts_RESP_sign", "TS_RESP_verify_signature", "TS_TST_INFO_set_accuracy", "TS_TST_INFO_set_msg_imprint", "TS_TST_INFO_set_nonce", "TS_TST_INFO_set_policy_id", "TS_TST_INFO_set_serial", "TS_TST_INFO_set_time", "TS_TST_INFO_set_tsa", "TS_VERIFY", "ts_verify_cert", "TS_VERIFY_CTX_new", "close_console", "echo_console", "general_allocate_boolean", "general_allocate_prompt", "noecho_console", "open_console", "UI_create_method", "UI_ctrl", "UI_dup_error_string", "UI_dup_info_string", "UI_dup_input_boolean", "UI_dup_input_string", "UI_dup_verify_string", "UI_get0_result", "UI_new_method", "UI_process", "UI_set_result", "SSL_CERT_DIR", "SSL_CERT_FILE", "add_cert_dir", "build_chain", "by_file_ctrl", "check_name_constraints", "check_policy", "dane_i2d", "dir_ctrl", "get_cert_by_subject", "NETSCAPE_SPKI_b64_decode", "NETSCAPE_SPKI_b64_encode", "X509at_add1_attr", "X509v3_add_ext", "X509_ATTRIBUTE_create_by_NID", "X509_ATTRIBUTE_create_by_OBJ", "X509_ATTRIBUTE_create_by_txt", "X509_ATTRIBUTE_get0_data", "X509_ATTRIBUTE_set1_data", "X509_check_private_key", "X509_CRL_diff", "X509_CRL_print_fp", "X509_EXTENSION_create_by_NID", "X509_EXTENSION_create_by_OBJ", "X509_get_pubkey_parameters", "X509_load_cert_crl_file", "X509_load_cert_file", "X509_load_crl_file", "X509_NAME_add_entry", "X509_NAME_ENTRY_create_by_NID", "X509_NAME_ENTRY_create_by_txt", "X509_NAME_ENTRY_set_object", "X509_NAME_oneline", "X509_NAME_print", "X509_OBJECT_new", "X509_print_ex_fp", "x509_pubkey_decode", "X509_PUBKEY_get0", "X509_PUBKEY_set", "X509_REQ_check_private_key", "X509_REQ_print_ex", "X509_REQ_print_fp", "X509_REQ_to_X509", "X509_STORE_add_cert", "X509_STORE_add_crl", "X509_STORE_CTX_get1_issuer", "X509_STORE_CTX_init", "X509_STORE_CTX_new", "X509_STORE_CTX_purpose_inherit", "X509_to_X509_REQ", "X509_TRUST_add", "X509_TRUST_set", "X509_verify_cert", "a2i_GENERAL_NAME", "addr_validate_path_internal", "ASIdentifierChoice_canonize", "ASIdentifierChoice_is_canonical", "copy_email", "copy_issuer", "do_dirname", "do_ext_i2d", "do_ext_nconf", "gnames_from_sectname", "i2s_ASN1_ENUMERATED", "i2s_ASN1_IA5STRING", "i2s_ASN1_INTEGER", "i2v_AUTHORITY_INFO_ACCESS", "notice_section", "nref_nos", "policy_section", "process_pci_value", "r2i_certpol", "r2i_pci", "s2i_ASN1_IA5STRING", "s2i_ASN1_INTEGER", "s2i_ASN1_OCTET_STRING", "s2i_skey_id", "set_dist_point_name", "SXNET_add_id_asc", "SXNET_add_id_INTEGER", "SXNET_add_id_ulong", "SXNET_get_id_asc", "SXNET_get_id_ulong", "v2i_ASIdentifiers", "v2i_ASN1_BIT_STRING", "v2i_AUTHORITY_INFO_ACCESS", "v2i_AUTHORITY_KEYID", "v2i_BASIC_CONSTRAINTS", "v2i_crld", "v2i_EXTENDED_KEY_USAGE", "v2i_GENERAL_NAMES", "v2i_GENERAL_NAME_ex", "v2i_idp", "v2i_IPAddrBlocks", "v2i_issuer_alt", "v2i_NAME_CONSTRAINTS", "v2i_POLICY_CONSTRAINTS", "v2i_POLICY_MAPPINGS", "v2i_subject_alt", "v2i_TLS_FEATURE", "v3_generic_extension", "X509V3_add1_i2d", "X509V3_add_value", "X509V3_EXT_add", "X509V3_EXT_add_alias", "X509V3_EXT_i2d", "X509V3_EXT_nconf", "X509V3_get_section", "X509V3_get_string", "X509V3_get_value_bool", "X509V3_parse_list", "X509_PURPOSE_add", "X509_PURPOSE_set", "a2d_ASN1_OBJECT", "a2i_ASN1_INTEGER", "a2i_ASN1_STRING", "append_exp", "ASN1_BIT_STRING_set_bit", "asn1_cb", "asn1_check_tlen", "asn1_collect", "asn1_d2i_ex_primitive", "ASN1_d2i_fp", "asn1_d2i_read_bio", "ASN1_digest", "asn1_do_adb", "asn1_do_lock", "ASN1_dup", "asn1_ex_c2i", "asn1_find_end", "ASN1_GENERALIZEDTIME_adj", "ASN1_generate_v3", "asn1_get_int64", "ASN1_get_object", "asn1_get_uint64", "ASN1_i2d_bio", "ASN1_i2d_fp", "ASN1_item_d2i_fp", "ASN1_item_dup", "asn1_item_embed_d2i", "asn1_item_embed_new", "ASN1_item_i2d_bio", "ASN1_item_i2d_fp", "ASN1_item_pack", "ASN1_item_sign", "ASN1_item_sign_ctx", "ASN1_item_unpack", "ASN1_item_verify", "ASN1_mbstring_ncopy", "ASN1_OBJECT_new", "asn1_output_data", "ASN1_PCTX_new", "ASN1_SCTX_new", "ASN1_sign", "asn1_str2type", "asn1_string_get_int64", "asn1_string_get_uint64", "ASN1_STRING_set", "ASN1_STRING_TABLE_add", "asn1_string_to_bn", "ASN1_STRING_type_new", "asn1_template_ex_d2i", "asn1_template_new", "asn1_template_noexp_d2i", "ASN1_TIME_adj", "ASN1_TYPE_get_int_octetstring", "ASN1_TYPE_get_octetstring", "ASN1_UTCTIME_adj", "ASN1_verify", "b64_read_asn1", "B64_write_ASN1", "BIO_new_NDEF", "bitstr_cb", "bn_to_asn1_string", "c2i_ASN1_BIT_STRING", "c2i_ASN1_INTEGER", "c2i_ASN1_OBJECT", "c2i_ibuf", "c2i_uint64_int", "collect_data", "d2i_ASN1_OBJECT", "d2i_ASN1_UINTEGER", "d2i_AutoPrivateKey", "d2i_PrivateKey", "d2i_PublicKey", "do_tcreate", "i2d_ASN1_bio_stream", "i2d_DSA_PUBKEY", "i2d_EC_PUBKEY", "i2d_PrivateKey", "i2d_PublicKey", "i2d_RSA_PUBKEY", "long_c2i", "oid_module_init", "parse_tagging", "PKCS5_pbe2_set_iv", "PKCS5_pbe2_set_scrypt", "PKCS5_pbe_set", "PKCS5_pbe_set0_algor", "PKCS5_pbkdf2_set", "pkcs5_scrypt_set", "SMIME_read_ASN1", "SMIME_text", "stbl_module_init", "uint32_c2i", "uint64_c2i", "X509_CRL_add0_revoked", "X509_INFO_new", "x509_name_encode", "x509_name_ex_d2i", "x509_name_ex_new", "X509_PKEY_new", "PBEPARAM", "SCRYPT_PARAMS", "costParameter", "blockSize", "parallelizationParameter", "keyLength", "PKCS8_PRIV_KEY_INFO", "version", "pkeyalg", "pkey", "attributes", "X509_SIG", "algor", "async_ctx_new", "ASYNC_init_thread", "async_job_new", "ASYNC_pause_job", "async_start_func", "ASYNC_start_job", "uninitialized", "WSAStartup", "acpt_state", "addr_strings", "BIO_accept", "BIO_accept_ex", "BIO_ADDR_new", "BIO_callback_ctrl", "BIO_connect", "BIO_ctrl", "BIO_gets", "BIO_get_host_ip", "BIO_get_new_index", "BIO_get_port", "BIO_listen", "BIO_lookup", "bio_make_pair", "BIO_new", "BIO_new_file", "BIO_new_mem_buf", "BIO_nread", "BIO_nread0", "BIO_nwrite", "BIO_nwrite0", "BIO_parse_hostserv", "BIO_puts", "BIO_read", "BIO_socket", "BIO_socket_nbio", "BIO_sock_info", "BIO_sock_init", "BIO_write", "buffer_ctrl", "conn_ctrl", "conn_state", "dgram_sctp_read", "dgram_sctp_write", "file_ctrl", "file_read", "linebuffer_ctrl", "mem_write", "SSL_new", "bnrand", "BN_BLINDING_convert_ex", "BN_BLINDING_create_param", "BN_BLINDING_invert_ex", "BN_BLINDING_new", "BN_BLINDING_update", "BN_bn2dec", "BN_bn2hex", "bn_compute_wNAF", "BN_CTX_get", "BN_CTX_new", "BN_CTX_start", "BN_div", "BN_div_recp", "BN_exp", "bn_expand_internal", "BN_GENCB_new", "BN_generate_dsa_nonce", "BN_generate_prime_ex", "BN_GF2m_mod", "BN_GF2m_mod_exp", "BN_GF2m_mod_mul", "BN_GF2m_mod_solve_quad", "BN_GF2m_mod_solve_quad_arr", "BN_GF2m_mod_sqr", "BN_GF2m_mod_sqrt", "BN_lshift", "BN_mod_exp2_mont", "BN_mod_exp_mont", "BN_mod_exp_mont_consttime", "BN_mod_exp_mont_word", "BN_mod_exp_recp", "BN_mod_exp_simple", "BN_mod_inverse", "BN_mod_inverse_no_branch", "BN_mod_lshift_quick", "BN_mod_sqrt", "BN_mpi2bn", "BN_new", "BN_rand", "BN_rand_range", "BN_rshift", "bn_set_words", "BN_usub", "BUF_MEM_grow", "BUF_MEM_grow_clean", "BUF_MEM_new", "cipher", "check_content", "CMS_add0_cert", "CMS_add0_recipient_key", "CMS_add0_recipient_password", "CMS_add1_ReceiptRequest", "CMS_add1_recipient_cert", "CMS_add1_signer", "cms_add1_signingTime", "CMS_compress", "cms_CompressedData_create", "cms_CompressedData_init_bio", "cms_copy_content", "cms_copy_messageDigest", "CMS_data", "CMS_dataFinal", "CMS_dataInit", "CMS_decrypt", "CMS_decrypt_set1_key", "CMS_decrypt_set1_password", "CMS_decrypt_set1_pkey", "cms_DigestAlgorithm_find_ctx", "cms_DigestAlgorithm_init_bio", "cms_DigestedData_do_final", "CMS_digest_verify", "cms_encode_Receipt", "CMS_encrypt", "cms_EncryptedContent_init_bio", "CMS_EncryptedData_decrypt", "CMS_EncryptedData_encrypt", "CMS_EncryptedData_set1_key", "CMS_EnvelopedData_create", "cms_EnvelopedData_init_bio", "cms_enveloped_data_init", "cms_env_asn1_ctrl", "CMS_final", "cms_get0_certificate_choices", "CMS_get0_content", "cms_get0_econtent_type", "cms_get0_enveloped", "cms_get0_revocation_choices", "cms_get0_signed", "cms_msgSigDigest_add1", "CMS_ReceiptRequest_create0", "cms_Receipt_verify", "CMS_RecipientInfo_decrypt", "CMS_RecipientInfo_encrypt", "cms_RecipientInfo_kari_encrypt", "CMS_RecipientInfo_kari_get0_alg", "CMS_RecipientInfo_kari_get0_orig_id", "CMS_RecipientInfo_kari_get0_reks", "CMS_RecipientInfo_kari_orig_id_cmp", "cms_RecipientInfo_kekri_decrypt", "cms_RecipientInfo_kekri_encrypt", "CMS_RecipientInfo_kekri_get0_id", "CMS_RecipientInfo_kekri_id_cmp", "CMS_RecipientInfo_ktri_cert_cmp", "cms_RecipientInfo_ktri_decrypt", "cms_RecipientInfo_ktri_encrypt", "CMS_RecipientInfo_ktri_get0_algs", "CMS_RecipientInfo_ktri_get0_signer_id", "cms_RecipientInfo_pwri_crypt", "CMS_RecipientInfo_set0_key", "CMS_RecipientInfo_set0_password", "CMS_RecipientInfo_set0_pkey", "cms_sd_asn1_ctrl", "cms_set1_ias", "cms_set1_keyid", "cms_set1_SignerIdentifier", "CMS_set_detached", "CMS_sign", "cms_signed_data_init", "cms_SignerInfo_content_sign", "CMS_SignerInfo_sign", "CMS_SignerInfo_verify", "cms_signerinfo_verify_cert", "CMS_SignerInfo_verify_content", "CMS_sign_receipt", "CMS_stream", "CMS_uncompress", "CMS_verify", "bio_zlib_flush", "bio_zlib_new", "bio_zlib_read", "bio_zlib_write", "CONF_dump_fp", "CONF_load", "CONF_load_fp", "CONF_parse_list", "def_load", "def_load_bio", "module_init", "module_load_dso", "module_run", "NCONF_dump_bio", "NCONF_dump_fp", "NCONF_get_number_e", "NCONF_get_section", "NCONF_get_string", "NCONF_load", "NCONF_load_bio", "NCONF_load_fp", "NCONF_new", "str_copy", "CRYPTO_dup_ex_data", "CRYPTO_free_ex_data", "CRYPTO_get_ex_new_index", "CRYPTO_memdup", "CRYPTO_new_ex_data", "CRYPTO_set_ex_data", "FIPS_mode_set", "get_and_lock", "OPENSSL_buf2hexstr", "OPENSSL_hexstr2buf", "OPENSSL_init_crypto", "CTLOG_new", "CTLOG_new_from_base64", "ctlog_new_from_conf", "ctlog_store_load_ctx_new", "CTLOG_STORE_load_file", "ctlog_store_load_log", "CTLOG_STORE_new", "ct_base64_decode", "CT_POLICY_EVAL_CTX_new", "ct_v1_log_id_from_pkey", "i2o_SCT", "i2o_SCT_LIST", "i2o_SCT_signature", "o2i_SCT", "o2i_SCT_LIST", "o2i_SCT_signature", "SCT_CTX_new", "SCT_CTX_verify", "SCT_new", "SCT_new_from_base64", "SCT_set0_log_id", "SCT_set1_extensions", "SCT_set1_log_id", "SCT_set1_signature", "SCT_set_log_entry_type", "SCT_set_signature_nid", "SCT_set_version", "int_dhx942_dh", "vparams", "int_dhvparams", "counter", "length", "compute_key", "DHparams_print_fp", "dh_builtin_genparams", "dh_cms_decrypt", "dh_cms_set_peerkey", "dh_cms_set_shared_info", "DH_meth_dup", "DH_meth_new", "DH_meth_set1_name", "DH_new_method", "dh_param_decode", "dh_priv_decode", "dh_priv_encode", "dh_pub_decode", "dh_pub_encode", "do_dh_print", "generate_key", "pkey_dh_derive", "pkey_dh_keygen", "dh_paramgen_prime_len", "dh_rfc5114", "dh_paramgen_generator", "dh_paramgen_subprime_len", "dh_paramgen_type", "pub_key", "priv_key", "DSA_SIG", "DSAparams_print", "DSAparams_print_fp", "dsa_builtin_paramgen", "dsa_builtin_paramgen2", "DSA_do_sign", "DSA_do_verify", "DSA_meth_dup", "DSA_meth_new", "DSA_meth_set1_name", "DSA_new_method", "dsa_param_decode", "DSA_print_fp", "dsa_priv_decode", "dsa_priv_encode", "dsa_pub_decode", "dsa_pub_encode", "DSA_sign", "DSA_sign_setup", "DSA_SIG_new", "old_dsa_priv_decode", "pkey_dsa_ctrl", "pkey_dsa_keygen", "dsa_paramgen_bits", "dsa_paramgen_q_bits", "dsa_paramgen_md", "failure", "dlfcn_bind_func", "dlfcn_load", "dlfcn_merger", "dlfcn_name_converter", "dlfcn_unload", "dl_bind_func", "dl_load", "dl_merger", "dl_name_converter", "dl_unload", "DSO_bind_func", "DSO_convert_filename", "DSO_ctrl", "DSO_free", "DSO_get_filename", "DSO_global_lookup", "DSO_load", "DSO_merge", "DSO_new_method", "DSO_pathbyaddr", "DSO_set_filename", "DSO_up_ref", "vms_bind_sym", "vms_load", "vms_merger", "vms_unload", "win32_bind_func", "win32_globallookup", "win32_joiner", "win32_load", "win32_merger", "win32_name_converter", "win32_pathbyaddr", "win32_splitter", "win32_unload", "ECDSA_SIG", "EC_PRIVATEKEY", "privateKey", "parameters", "publicKey", "ECPKPARAMETERS", "ECPARAMETERS", "fieldID", "curve", "base", "order", "cofactor", "X9_62_CURVE", "X9_62_FIELDID", "fieldType", "X9_62_CHARACTERISTIC_TWO", "type", "X9_62_PENTANOMIAL", "BN_to_felem", "d2i_ECParameters", "d2i_ECPKParameters", "d2i_ECPrivateKey", "do_EC_KEY_print", "ecdh_cms_decrypt", "ecdh_cms_set_shared_info", "ECDH_compute_key", "ecdh_simple_compute_key", "ECDSA_do_sign_ex", "ECDSA_do_verify", "ECDSA_sign_ex", "ECDSA_sign_setup", "ECDSA_SIG_new", "ECDSA_verify", "eckey_param2type", "eckey_param_decode", "eckey_priv_decode", "eckey_priv_encode", "eckey_pub_decode", "eckey_pub_encode", "eckey_type2param", "ECParameters_print", "ECParameters_print_fp", "ECPKParameters_print", "ECPKParameters_print_fp", "ecp_nistz256_get_affine", "ecp_nistz256_mult_precompute", "ecp_nistz256_points_mul", "ecp_nistz256_pre_comp_new", "ecp_nistz256_windowed_mul", "ecx_key_op", "ecx_priv_encode", "ecx_pub_encode", "ec_asn1_group2curve", "ec_asn1_group2fieldid", "ec_GF2m_montgomery_point_multiply", "ec_GF2m_simple_group_check_discriminant", "ec_GF2m_simple_group_set_curve", "ec_GF2m_simple_oct2point", "ec_GF2m_simple_point2oct", "ec_GF2m_simple_point_get_affine_coordinates", "ec_GF2m_simple_point_set_affine_coordinates", "ec_GF2m_simple_set_compressed_coordinates", "ec_GFp_mont_field_decode", "ec_GFp_mont_field_encode", "ec_GFp_mont_field_mul", "ec_GFp_mont_field_set_to_one", "ec_GFp_mont_field_sqr", "ec_GFp_mont_group_set_curve", "ec_GFp_nistp224_group_set_curve", "ec_GFp_nistp224_points_mul", "ec_GFp_nistp224_point_get_affine_coordinates", "ec_GFp_nistp256_group_set_curve", "ec_GFp_nistp256_points_mul", "ec_GFp_nistp256_point_get_affine_coordinates", "ec_GFp_nistp521_group_set_curve", "ec_GFp_nistp521_points_mul", "ec_GFp_nistp521_point_get_affine_coordinates", "ec_GFp_nist_field_mul", "ec_GFp_nist_field_sqr", "ec_GFp_nist_group_set_curve", "ec_GFp_simple_group_check_discriminant", "ec_GFp_simple_group_set_curve", "ec_GFp_simple_make_affine", "ec_GFp_simple_oct2point", "ec_GFp_simple_point2oct", "ec_GFp_simple_points_make_affine", "ec_GFp_simple_point_get_affine_coordinates", "ec_GFp_simple_point_set_affine_coordinates", "ec_GFp_simple_set_compressed_coordinates", "EC_GROUP_check", "EC_GROUP_check_discriminant", "EC_GROUP_copy", "EC_GROUP_get_curve_GF2m", "EC_GROUP_get_curve_GFp", "EC_GROUP_get_degree", "EC_GROUP_get_ecparameters", "EC_GROUP_get_ecpkparameters", "EC_GROUP_get_pentanomial_basis", "EC_GROUP_get_trinomial_basis", "EC_GROUP_new", "EC_GROUP_new_by_curve_name", "ec_group_new_from_data", "EC_GROUP_new_from_ecparameters", "EC_GROUP_new_from_ecpkparameters", "EC_GROUP_set_curve_GF2m", "EC_GROUP_set_curve_GFp", "EC_GROUP_set_generator", "EC_KEY_check_key", "EC_KEY_copy", "EC_KEY_generate_key", "EC_KEY_new", "EC_KEY_new_method", "EC_KEY_oct2priv", "EC_KEY_print", "EC_KEY_print_fp", "EC_KEY_priv2oct", "EC_KEY_set_public_key_affine_coordinates", "ec_key_simple_check_key", "ec_key_simple_oct2priv", "ec_key_simple_priv2oct", "EC_POINTs_make_affine", "EC_POINT_add", "EC_POINT_cmp", "EC_POINT_copy", "EC_POINT_dbl", "EC_POINT_get_affine_coordinates_GF2m", "EC_POINT_get_affine_coordinates_GFp", "EC_POINT_get_Jprojective_coordinates_GFp", "EC_POINT_invert", "EC_POINT_is_at_infinity", "EC_POINT_is_on_curve", "EC_POINT_make_affine", "EC_POINT_new", "EC_POINT_oct2point", "EC_POINT_point2oct", "EC_POINT_set_affine_coordinates_GF2m", "EC_POINT_set_affine_coordinates_GFp", "EC_POINT_set_compressed_coordinates_GF2m", "EC_POINT_set_compressed_coordinates_GFp", "EC_POINT_set_Jprojective_coordinates_GFp", "EC_POINT_set_to_infinity", "ec_pre_comp_new", "ec_wNAF_mul", "ec_wNAF_precompute_mult", "i2d_ECParameters", "i2d_ECPKParameters", "i2d_ECPrivateKey", "i2o_ECPublicKey", "nistp224_pre_comp_new", "nistp256_pre_comp_new", "nistp521_pre_comp_new", "o2i_ECPublicKey", "old_ec_priv_decode", "ossl_ecdh_compute_key", "ossl_ecdsa_sign_sig", "ossl_ecdsa_verify_sig", "pkey_ecx_derive", "pkey_ec_ctrl", "pkey_ec_ctrl_str", "pkey_ec_derive", "pkey_ec_keygen", "pkey_ec_paramgen", "pkey_ec_sign", "ec_paramgen_curve", "ec_param_enc", "explicit", "named_curve", "ecdh_kdf_md", "ecdh_cofactor_mode", "engine_id", "soft_load", "dynamic_path", "EMPTY", "init", "default_algorithms", "engines", "dynamic_ctrl", "dynamic_get_data_ctx", "dynamic_load", "dynamic_set_data_ctx", "ENGINE_add", "ENGINE_by_id", "ENGINE_cmd_is_executable", "ENGINE_ctrl", "ENGINE_ctrl_cmd", "ENGINE_ctrl_cmd_string", "ENGINE_finish", "ENGINE_get_cipher", "ENGINE_get_digest", "ENGINE_get_first", "ENGINE_get_last", "ENGINE_get_next", "ENGINE_get_pkey_asn1_meth", "ENGINE_get_pkey_meth", "ENGINE_get_prev", "ENGINE_init", "engine_list_add", "engine_list_remove", "ENGINE_load_private_key", "ENGINE_load_public_key", "ENGINE_load_ssl_client_cert", "ENGINE_new", "ENGINE_pkey_asn1_find_str", "ENGINE_remove", "ENGINE_set_default_string", "ENGINE_set_id", "ENGINE_set_name", "engine_table_register", "engine_unlocked_finish", "ENGINE_up_ref", "int_ctrl_helper", "int_engine_configure", "int_engine_module_init", "fips_mode", "alg_section", "Parameters", "ENCRYPTED", "CERTIFICATE", "PKCS7", "PKCS12_AUTHSAFES", "PKCS12_SAFEBAGS", "PKCS12_SAFEBAG", "attrib", "PKCS12_BAGS", "PKCS12_MAC_DATA", "dinfo", "PKCS12", "authsafes", "PKCS7_ATTR_VERIFY", "PKCS7_ATTRIBUTES", "PKCS7_ATTR_SIGN", "PKCS7_DIGEST", "contents", "PKCS7_ENCRYPT", "enc_data", "PKCS7_SIGN_ENVELOPE", "recipientinfo", "md_algs", "cert", "signer_info", "PKCS7_ENC_CONTENT", "content_type", "PKCS7_RECIP_INFO", "issuer_and_serial", "key_enc_algor", "enc_key", "PKCS7_ENVELOPE", "PKCS7_ISSUER_AND_SERIAL", "issuer", "serial", "PKCS7_SIGNER_INFO", "digest_alg", "auth_attr", "digest_enc_alg", "enc_digest", "unauth_attr", "PKCS7_SIGNED", "INVALID", "RSA_OAEP_PARAMS", "hashFunc", "maskGenFunc", "pSourceFunc", "RSA_PSS_PARAMS", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "dmp1", "dmq1", "iqmp", "default", "smime_sign", "ssl_client", "ssl_server", "X509_ATTRIBUTE", "object", "X509_CRL", "sig_alg", "signature", "X509_CRL_INFO", "lastUpdate", "nextUpdate", "revoked", "extensions", "X509_REVOKED", "revocationDate", "X509_EXTENSIONS", "Extension", "X509_EXTENSION", "critical", "value", "X509_NAME", "X509_NAME_INTERNAL", "Name", "X509_NAME_ENTRIES", "RDNS", "X509_NAME_ENTRY", "X509_PUBKEY", "public_key", "X509_REQ", "req_info", "X509_REQ_INFO", "subject", "pubkey", "cert_info", "X509_CINF", "validity", "issuerUID", "subjectUID", "X509_CERT_AUX", "trust", "reject", "alias", "keyid", "other", "IPv4", "IPv6", "inherit", "IPAddrBlocks", "IPAddressFamily", "addressFamily", "ipAddressChoice", "IPAddressChoice", "IPAddressOrRange", "IPAddressRange", "AUTHORITY_KEYID", "ASIdentifiers", "asnum", "ASIdentifierChoice", "ASIdOrRange", "ASRange", "ia5org", "policyIdentifier", "userNotice", "explicitText", "organization", "noticeNumbers", "Critical", "NOTICEREF", "noticenos", "USERNOTICE", "noticeref", "exptext", "POLICYQUALINFO", "pqualid", "POLICYINFO", "policyid", "qualifiers", "CERTIFICATEPOLICIES", "Reasons", "fullname", "relativename", "CRLissuer", "reasons", "onlyCA", "onlyAA", "indirectCRL", "onlysomereasons", "onlyuser", "ISSUING_DIST_POINT", "distpoint", "onlyattr", "CRL_DIST_POINTS", "CRLDistributionPoints", "DIST_POINT", "DIST_POINT_NAME", "Unused", "unused", "keyCompromise", "CACompromise", "affiliationChanged", "Superseded", "superseded", "cessationOfOperation", "certificateHold", "privilegeWithdrawn", "AACompromise", "GENERAL_NAMES", "GeneralNames", "GENERAL_NAME", "EDIPARTYNAME", "nameAssigner", "partyName", "OTHERNAME", "type_id", "Permitted", "Excluded", "permitted", "excluded", "NAME_CONSTRAINTS", "permittedSubtrees", "excludedSubtrees", "GENERAL_SUBTREE", "minimum", "maximum", "requireExplicitPolicy", "inhibitPolicyMapping", "POLICY_CONSTRAINTS", "POLICY_MAPPINGS", "POLICY_MAPPING", "issuerDomainPolicy", "subjectDomainPolicy", "sslclient", "sslserver", "nssslserver", "smimesign", "smimeencrypt", "crlsign", "ocsphelper", "timestampsign", "TRUE", "FALSE", "true", "false", "nombstr", "pkix", "utf8only", "ASN1_TIME", "BOOLEAN", "INTEGER", "OBJECT", "EXTERNAL", "REAL", "ENUMERATED", "UTF8STRING", "SEQUENCE", "NUMERICSTRING", "PRINTABLESTRING", "T61STRING", "VIDEOTEXSTRING", "IA5STRING", "UTCTIME", "GENERALIZEDTIME", "GRAPHICSTRING", "VISIBLESTRING", "GENERALSTRING", "UNIVERSALSTRING", "BMPSTRING", "oid_section", "mask", "flags", "nomask", "stbl_section", "CBIGNUM", "BIGNUM", "NETSCAPE_SPKI", "spkac", "sig_algor", "NETSCAPE_SPKAC", "challenge", "X509_VAL", "notBefore", "notAfter", "CMS_SharedInfo", "keyInfo", "entityUInfo", "suppPubInfo", "CMS_Receipt", "signedContentIdentifier", "originatorSignatureValue", "CMS_ReceiptRequest", "receiptsFrom", "receiptsTo", "CMS_ReceiptsFrom", "CMS_Attributes_Verify", "CMS_ATTRIBUTES", "CMS_Attributes_Sign", "CMS_ContentInfo", "CMS_CompressedData", "compressionAlgorithm", "encapContentInfo", "CMS_AuthenticatedData", "originatorInfo", "recipientInfos", "macAlgorithm", "digestAlgorithm", "authAttrs", "unauthAttrs", "CMS_EncryptedData", "encryptedContentInfo", "unprotectedAttrs", "CMS_DigestedData", "CMS_EnvelopedData", "CMS_RecipientInfo", "CMS_OtherRecipientInfo", "oriType", "oriValue", "CMS_PasswordRecipientInfo", "keyDerivationAlgorithm", "keyEncryptionAlgorithm", "encryptedKey", "CMS_KEKRecipientInfo", "kekid", "CMS_KEKIdentifier", "keyIdentifier", "date", "CMS_KeyAgreeRecipientInfo", "originator", "recipientEncryptedKeys", "CMS_OriginatorIdentifierOrKey", "CMS_OriginatorPublicKey", "CMS_RecipientEncryptedKey", "CMS_KeyAgreeRecipientIdentifier", "CMS_RecipientKeyIdentifier", "CMS_OtherKeyAttribute", "keyAttrId", "keyAttr", "CMS_KeyTransRecipientInfo", "CMS_EncryptedContentInfo", "contentEncryptionAlgorithm", "encryptedContent", "CMS_OriginatorInfo", "certificates", "crls", "CMS_SignedData", "digestAlgorithms", "signerInfos", "CMS_RevocationInfoChoice", "CMS_OtherRevocationInfoFormat", "otherRevInfoFormat", "otherRevInfo", "CMS_SignerInfo", "signedAttrs", "signatureAlgorithm", "unsignedAttrs", "CMS_EncapsulatedContentInfo", "eContentType", "eContent", "CMS_SignerIdentifier", "CMS_CertificateChoices", "CMS_OtherCertificateFormat", "otherCertFormat", "otherCert", "CMS_IssuerAndSerialNumber", "WIN32", "POST", "processing", "flushing", "compatible", "othername", "X400Name", "EdiPartyName", "email", "DirName", "dirName", "otherName", "copy", "move", "pathlen", "BASIC_CONSTRAINTS", "AUTHORITY_INFO_ACCESS", "ACCESS_DESCRIPTION", "method", "location", "language", "policy", "infinite", "PROXY_CERT_INFO_EXTENSION", "pcPathLengthConstraint", "proxyPolicy", "PROXY_POLICY", "policyLanguage", "PKEY_USAGE_PERIOD", "hash", "SXNET", "SXNETID", "zone", "user", "status_request", "status_request_v2", "TLS_FEATURE", "ASCII", "UTF8", "BITLIST", "BOOL", "ENUM", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIV", "UTF8String", "VISIBLE", "PRINTABLE", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORM", "FORMAT", "boundary", "buffer", "OCSP_SERVICELOC", "locator", "OCSP_CRLID", "crlUrl", "crlNum", "crlTime", "OCSP_BASICRESP", "tbsResponseData", "certs", "OCSP_RESPDATA", "responderId", "producedAt", "responses", "responseExtensions", "OCSP_SINGLERESP", "certId", "certStatus", "thisUpdate", "singleExtensions", "OCSP_CERTSTATUS", "OCSP_REVOKEDINFO", "revocationTime", "revocationReason", "OCSP_RESPID", "OCSP_RESPONSE", "responseStatus", "responseBytes", "OCSP_RESPBYTES", "responseType", "response", "OCSP_REQUEST", "tbsRequest", "optionalSignature", "OCSP_REQINFO", "requestorName", "requestList", "requestExtensions", "OCSP_ONEREQ", "reqCert", "singleRequestExtensions", "OCSP_CERTID", "issuerNameHash", "issuerKeyHash", "OCSP_SIGNATURE", "always", "digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly", "client", "server", "objsign", "reserved", "sslCA", "emailCA", "objCA", "Unspecified", "unspecified", "removeFromCRL", "EXTENDED_KEY_USAGE", "asn1", "unverified", "invalid", "enabled_logs", "CTLOG_FILE", "y_wYuTQ", "ggen", "ENCRYPTED", "St9bad_alloc", "St20bad_array_new_length", "N10__cxxabiv120__si_class_type_infoE", "St11logic_error", "St17__Named_exception", "St13runtime_error", "St12domain_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St11range_error", "St14overflow_error", "St15underflow_error", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv116__shim_type_infoE", "St13bad_exception", "N10__cxxabiv119__pointer_type_infoE", "St9type_info", "St8bad_cast", "St10bad_typeid", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv120__function_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDn", "PKDh", "PKDs", "PKDi", "N10__cxxabiv117__pbase_type_infoE"], "debugstrings": ["cipher_provider_version", "cipher_version", "PRAGMA migrate.user_version = %d;", "PRAGMA user_version;", "data_version", "schema_version", "user_version", "sqlite_version", "version", "PRAGMA %Q.data_version", "documentVersion", "Specifies to continue even if version checking fails (boolean)", "bad version number", "unsupported version", "version", "sct unsupported version", "SCT_set_version", "version incompatibility", "%8sVersion: %ld (0x%lx)\n", "%8sVersion: Unknown (%ld)\n", "%*sVersion: %ld (0x%lX)", "MIME-Version: 1.0%s", "unknown version", "\n%*sVersion   : ", "GCC: (GNU) 4.9.x 20150123 (prerelease)", "Android clang version 5.0.300080  (based on LLVM 5.0.300080)", "Android clang version 3.8.256229  (based on LLVM 3.8.256229)"], "localsymbols": [""], "dependencies": ["libstdc++.so", "liblog.so", "libm.so", "libdl.so", "libc.so"], "elfname": "libsqlcipher.so"}