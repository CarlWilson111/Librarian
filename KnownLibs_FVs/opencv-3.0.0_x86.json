{"globalvars": ["_ZN10__cxxabiv120__unexpected_handlerE", "_ZSt7nothrow", "_ZN2cv15BriskScaleSpace10basicSize_E", "_ZN6CvType4lastE", "_ZN6CvType5firstE", "_ZN10__cxxabiv119__terminate_handlerE", "_ZN2cv15BriskScaleSpace13safetyFactor_E"], "importedglobals": ["_tolower_tab_", "_ctype_", "_toupper_tab_", "__sF"], "importedfunctions": ["fgets", "writev", "floor", "sem_init", "syscall", "ceil", "free", "pthread_mutexattr_settype", "gzopen", "pthread_attr_destroy", "fread", "getenv", "strchr", "write", "wmemmove", "wcscoll", "inflateReset", "strlen", "mkstemp", "sem_wait", "iswctype", "pthread_mutexattr_destroy", "strcpy", "pthread_cond_wait", "fputc", "memchr", "fflush", "cos", "calloc", "strstr", "towlower", "memcpy", "deflate", "gzrewind", "abort", "sqrt", "inflateSync", "wctob", "gzclose", "atoi", "sinf", "strerror", "deflateInit2_", "srand48", "gzputs", "pthread_once", "atan2", "compress", "pthread_key_delete", "btowc", "vfprintf", "closedir", "readdir", "gzgets", "inflateEnd", "munmap", "longjmp", "wcrtomb", "lrintf", "logf", "open", "strtok", "exp", "strxfrm", "unlink", "wcsftime", "hypot", "realloc", "pthread_mutexattr_init", "pthread_create", "pthread_detach", "getwc", "ungetc", "strtol", "wcsxfrm", "strftime", "towupper", "sprintf", "inflate", "wctype", "powf", "pow", "gzeof", "atan2f", "strncmp", "clock", "fseek", "expf", "sqrtf", "close", "dl_iterate_phdr", "atanf", "pthread_cond_init", "ioctl", "pthread_mutex_unlock", "setjmp", "memmove", "fstat", "strncpy", "fclose", "ftell", "deflateReset", "strcmp", "memset", "sscanf", "__stack_chk_fail", "inflateInit_", "putc", "dlopen", "fwrite", "pthread_cond_destroy", "cosf", "putchar", "sem_destroy", "puts", "memcmp", "AndroidBitmap_unlockPixels", "vprintf", "pthread_getspecific", "tan", "fscanf", "log", "AndroidBitmap_lockPixels", "pthread_key_create", "strcat", "snprintf", "fesetenv", "wmemcpy", "__errno", "sin", "asin", "setlocale", "feof", "deflateEnd", "vsprintf", "sinh", "__android_log_print", "pthread_cond_signal", "getc", "opendir", "frexp", "lseek", "pthread_self", "deflateParams", "strdup", "exit", "pthread_attr_setstacksize", "poll", "stat", "atan", "floorf", "malloc", "wmemset", "strrchr", "rewind", "pthread_mutex_init", "deflateInit_", "pthread_mutex_lock", "mmap", "lrint", "dlsym", "ungetwc", "wcslen", "fprintf", "fegetenv", "AndroidBitmap_getInfo", "qsort", "pthread_attr_init", "pthread_mutex_trylock", "pthread_getattr_np", "strtod", "wmemchr", "lrand48", "read", "fmod", "mbrtowc", "fopen", "pthread_setspecific", "acos", "putwc", "pthread_join", "sched_yield", "crc32", "acosf", "log10", "clock_gettime", "vsnprintf", "pthread_mutex_destroy", "fputs", "sem_post", "uncompress", "pthread_attr_getstack", "ldexp", "ceilf", "strcoll", "bsearch", "remove", "printf"], "exportedfunctions": ["cvEllipse2Poly", "cvSaveMemStoragePos", "_Z19vector_Point_to_MatRSt6vectorIN2cv6Point_IiEESaIS2_EERNS0_3MatE", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayERNS0_6StreamE", "_ZN2cv6detail12DisjointSets9mergeSetsEii", "_ZN2cv17DescriptorMatcher3addERKNS_11_InputArrayE", "Java_org_opencv_core_Mat_n_1Mat__III", "Java_org_opencv_videoio_VideoCapture_get_10", "_ZNK2cv14DefaultDeleterI13CvFileStorageEclEPS1_", "Java_org_opencv_ml_DTrees_getUseSurrogates_10", "_ZN2cv5flann5IndexC2ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "Java_org_opencv_imgproc_Imgproc_accumulate_11", "_ZNK2cv6detail15GainCompensator5gainsEv", "cvAddWeighted", "Java_org_opencv_calib3d_StereoMatcher_setNumDisparities_10", "_ZN2cv6detail18GraphCutSeamFinderC1Eiff", "_ZN2cv12KalmanFilterC2Ev", "_ZNSt15__exception_ptr13exception_ptrC2Ev", "Java_org_opencv_photo_MergeMertens_getSaturationWeight_10", "_ZNK2cv3ocl5Queue3ptrEv", "_ZN2cv9ExceptionD1Ev", "_ZN2cv9videostab25ConsistentMosaicInpainterC2Ev", "_ZN2cv16ParallelLoopBodyD1Ev", "cvCalcArrHist", "cvMatchShapes", "Java_org_opencv_imgproc_Imgproc_ellipse_13", "_ZN2cv9videostab18FastMarchingMethod6heapUpEi", "_ZN2cv6detail18SurfFeaturesFinderC1Ediiii", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_10", "_ZN2cv9thresholdERKNS_11_InputArrayERKNS_12_OutputArrayEddi", "Java_org_opencv_video_KalmanFilter_get_1errorCovPost_10", "_ZN2cv3ogl6Arrays18resetTexCoordArrayEv", "cvCloneMatND", "_ZN2cv3ocl6KernelC1Ev", "_ZN2cv14createLMSolverERKNS_3PtrINS_8LMSolver8CallbackEEEi", "Java_org_opencv_core_Core_idct_10", "_ZNK2cv22SimpleBlobDetectorImpl9findBlobsERKNS_11_InputArrayES3_RSt6vectorINS0_6CenterESaIS5_EE", "_ZN2cv8superres13convertToTypeERKNS_4UMatEiRS1_S4_", "Java_org_opencv_photo_MergeDebevec_delete", "_ZN2cv16BOWKMeansTrainerC2EiRKNS_12TermCriteriaEii", "_ZN2cv4UMatC1ERKS0_RKNS_5RangeES5_", "cvTranspose", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayEPKij", "_ZN2cv8Subdiv2D8newPointENS_6Point_IfEEbi", "__gxx_personality_v0", "Java_org_opencv_calib3d_Calib3d_undistortPoints_10", "_ZN2cv3ocl6DeviceD1Ev", "_ZN2cvleEdRKNS_3MatE", "Java_org_opencv_ml_ANN_1MLP_getLayerSizes_10", "Java_org_opencv_imgproc_Imgproc_HoughLines_11", "_ZN2cv3ocl6DeviceC1ERKS1_", "_ZN2cv3ocl8PlatformaSERKS1_", "_ZN2cv14setWindowTitleERKNS_6StringES2_", "cvKMeans2", "_ZN2cv6detail17CylindricalWarper9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RKNS_12_OutputArrayES9_", "_ZN10__cxxabiv120__si_class_type_infoD2Ev", "_ZN2cv2ml21NormalBayesClassifier6createEv", "_ZN2cv4blurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IiEEi", "cvSetCaptureProperty", "Java_org_opencv_core_Mat_n_1eye__DDI", "Java_org_opencv_imgproc_Subdiv2D_getVertex_11", "_ZN2cv5eigenERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZN2cv11VideoWriter6fourccEcccc", "_ZN2cv17FlannBasedMatcher5trainEv", "_ZNK2cv17CommandLineParser12printMessageEv", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKSt6vectorINS_8KeyPointESaIS6_EE", "_ZN2cv6detail12DpSeamFinder11getSeamTipsEiiRNS_6Point_IiEES4_", "Java_org_opencv_core_Core_meanStdDev_10", "Java_org_opencv_photo_Photo_createTonemap_10", "_ZN2cv11RotatedRectC2ERKNS_6Point_IfEES4_S4_", "_ZN2cv3ocl6Kernel3setEiRKNS0_7Image2DE", "_ZNK2cv13HOGDescriptor6detectERKNS_3MatERSt6vectorINS_6Point_IiEESaIS6_EERS4_IdSaIdEEdNS_5Size_IiEESE_RKS8_", "Java_org_opencv_ml_TrainData_getTestResponses_10", "Java_org_opencv_objdetect_CascadeClassifier_isOldFormatCascade_10", "cvTreeToNodeSeq", "_ZN2cv4swapERNS_3MatES1_", "Java_org_opencv_ml_SVM_setP_10", "cvEndWriteSeq", "cvCrossProduct", "_ZN2cv8superres9arrGetMatERKNS_11_InputArrayERNS_3MatE", "cvGetCentralMoment", "_ZN2cv5flann17LinearIndexParamsC1Ev", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC1ERS0_NS_3PtrINS0_9IDetectorEEE", "Java_org_opencv_core_Mat_n_1step1__J", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC1EiN7cvflann20flann_centers_init_tEii", "Java_org_opencv_video_BackgroundSubtractorMOG2_setBackgroundRatio_10", "_ZN2cv3ogl9Texture2DC2EiiNS1_6FormatEjb", "__udivdi3", "_ZN2cv4flipERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_core_Core_multiply_11", "_ZNK2cv3ocl7Program5writeERNS_6StringE", "_ZN2cvplERKNS_7Scalar_IdEERKNS_7MatExprE", "_ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "cvSetReal3D", "Java_org_opencv_core_Core_pow_10", "Java_org_opencv_core_Core_multiply_13", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThreshold_10", "_ZNSt15__exception_ptr13exception_ptrC1EPv", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_10", "cvArcLength", "_ZN2cv7fisheye13distortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_d", "Java_org_opencv_calib3d_Calib3d_undistortImage_10", "_ZN2cv21pyrMeanShiftFilteringERKNS_11_InputArrayERKNS_12_OutputArrayEddiNS_12TermCriteriaE", "Java_org_opencv_photo_Photo_createCalibrateDebevec_10", "_ZNK2cv4cuda6StreamcvMS1_KFvvEEv", "Java_org_opencv_photo_MergeExposures_process_10", "_ZN2cv17cornerMinEigenValERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_ml_EM_trainM_10", "_ZN2cv10BOWTrainerD1Ev", "Java_org_opencv_ml_TrainData_getTestNormCatResponses_10", "Java_org_opencv_calib3d_StereoSGBM_setPreFilterCap_10", "Java_org_opencv_ml_TrainData_getTrainSampleWeights_10", "Java_org_opencv_core_Core_normalize_11", "_ZN2cv4cuda6StreamC2Ev", "_ZNK2cv2ml9StatModel9calcErrorERKNS_3PtrINS0_9TrainDataEEEbRKNS_12_OutputArrayE", "_ZNK2cv3ocl6Device18globalMemCacheTypeEv", "_ZNK2cv4cuda10DeviceInfo11pciDeviceIDEv", "Java_org_opencv_imgproc_Imgproc_drawContours_10", "Java_org_opencv_core_Core_exp_10", "_ZN2cv3ogl6Buffer9unmapHostEv", "_ZN2cv5Mutex4lockEv", "Java_org_opencv_imgproc_Imgproc_convexHull_10", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_idRKNS_12_OutputArrayEid", "_ZN2cv3ogl6BufferC1ERKNS_11_InputArrayENS1_6TargetEb", "_ZNK2cv11_InputArray12getOGlBufferEv", "_ZNK2cv8Subdiv2D7getEdgeEii", "Java_org_opencv_video_KalmanFilter_KalmanFilter_12", "_ZNK2cv8FileNodeixEi", "_ZN2cv5MutexC1Ev", "_ZN2cv12cornerSubPixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEES7_NS_12TermCriteriaE", "_ZN2cv10BriskLayerC1ERKNS_3MatEff", "_ZNKSt9exception4whatEv", "_ZN2cv5MutexaSERKS0_", "_ZN2cv8internal21EstimateUncertaintiesERKNS_11_InputArrayES3_RKNS0_15IntrinsicParamsES3_S3_RS4_RNS_3VecIdLi2EEEdiRd", "_ZN2cv21DetectionBasedTrackerD1Ev", "cvStartAppendToSeq", "Java_org_opencv_video_KalmanFilter_get_1errorCovPre_10", "Java_org_opencv_ml_EM_getMeans_10", "_ZN2cv17rectify3CollinearERKNS_11_InputArrayES2_S2_S2_S2_S2_S2_S2_NS_5Size_IiEES2_S2_S2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_S7_S7_dS4_PNS_5Rect_IiEESA_i", "_ZN2cv15NAryMatIteratorC2Ev", "cvHaveImageReader", "_ZN2cv3ogl9Texture2DC1EiiNS1_6FormatEjb", "cvWriteFrame", "Java_org_opencv_photo_CalibrateRobertson_delete", "_ZN2cv16TLSDataContainerD2Ev", "Java_org_opencv_ml_SVM_setClassWeights_10", "_ZN2cv3ocl10haveAmdFftEv", "_ZN2cv4cuda11setGlDeviceEi", "cvFitEllipse2", "_ZNK2cv4cuda5Event15queryIfCompleteEv", "Java_org_opencv_imgproc_Imgproc_pointPolygonTest_10", "cvPrevTreeNode", "cvGetFileNodeName", "_ZNK2cv3ocl6Device21nativeVectorWidthLongEv", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_11", "cvFirstType", "cvInsertNodeIntoTree", "cvFindChessboardCorners", "Java_org_opencv_core_Core_mean_10", "_ZN2cv6detail15GainCompensator4feedERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_4UMatESaIS9_EERKS2_ISt4pairIS9_hESaISF_EE", "cvGetMat", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_ii", "Java_org_opencv_ml_RTrees_setCalculateVarImportance_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThresholdGen_10", "_ZNK2cv14DefaultDeleterI5CvMatEclEPS1_", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_11", "_ZNK2cv3ocl6Device21nativeVectorWidthCharEv", "Java_org_opencv_photo_CalibrateCRF_delete", "cvUnregisterType", "cvGetSize", "_ZN2cv7directx20getTypeFromD3DFORMATEi", "Java_org_opencv_calib3d_Calib3d_composeRT_11", "_ZN2cvmiERKNS_3MatES2_", "Java_org_opencv_calib3d_Calib3d_matMulDeriv_10", "cvNulDevReport", "_ZN2cv18getMouseWheelDeltaEi", "Java_org_opencv_ml_TrainData_getSample_10", "Java_org_opencv_core_Mat_n_1delete", "_ZN6CvTypeD1Ev", "Java_org_opencv_photo_Photo_createMergeMertens_11", "_ZN2cv2ml5Boost6createEv", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_12", "_ZNK2cv4cuda10DeviceInfo16surfaceAlignmentEv", "Java_org_opencv_core_Core_divide_13", "Java_org_opencv_imgproc_Imgproc_resize_10", "_ZN2cv3ORB6createEifiiiiiii", "_ZN2cvngERKNS_7MatExprE", "_ZN2cv8superres15SuperResolution8setInputERKNS_3PtrINS0_11FrameSourceEEE", "Java_org_opencv_ml_TrainData_shuffleTrainTest_10", "Java_org_opencv_features2d_DescriptorMatcher_match_12", "_ZN2cvplERKNS_3MatES2_", "_Unwind_GetIPInfo", "Java_org_opencv_photo_MergeMertens_setExposureWeight_10", "_ZNSt15__exception_ptr13exception_ptrC1ERKS0_", "_ZN2cv8superres15SuperResolutionC2Ev", "_ZN2cv6detail20CylindricalWarperGpu4warpERKNS_4cuda6GpuMatERKNS_11_InputArrayES8_iiRS3_", "_ZN2cv3dctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv6detail14FeaturesFinderclERKNS_11_InputArrayERNS0_13ImageFeaturesERKSt6vectorINS_5Rect_IiEESaIS9_EE", "Java_org_opencv_imgcodecs_Imgcodecs_imdecode_10", "cvCreateData", "_ZSt14set_unexpectedPFvvE", "_ZN2cv17CommandLineParserD2Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMax_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_10", "_ZN2cv3ocl13ProgramSourceC2ERKS1_", "_ZN2cv17adaptiveThresholdERKNS_11_InputArrayERKNS_12_OutputArrayEdiiid", "_ZN2cv21DetectionBasedTracker3runEv", "_ZNSt13bad_exceptionD0Ev", "_ZN2cv6detail21BlocksGainCompensator5applyEiNS_6Point_IiEERKNS_17_InputOutputArrayERKNS_11_InputArrayE", "Java_org_opencv_core_Core_kmeans_11", "_ZN2cv5errorEiRKNS_6StringEPKcS4_i", "_ZN2cv8Stitcher15composePanoramaERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv11RNG_MT19937C2Ev", "cvBackProjectPCA", "Java_org_opencv_core_Core_phase_11", "_ZN2cv5SobelERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiddi", "_ZNK2cv8Subdiv2D8QuadEdge6isfreeEv", "_ZN2cv27computeRecallPrecisionCurveERKSt6vectorIS0_INS_6DMatchESaIS1_EESaIS3_EERKS0_IS0_IhSaIhEESaIS9_EERS0_INS_6Point_IfEESaISF_EE", "_ZN2cv8superres11FrameSourceD2Ev", "_ZN2cv9SparseMat7newNodeEPKij", "_ZN2cv3ogl9Texture2DC2Ev", "_ZN2cv3ocl12PlatformInfoD2Ev", "cvSet3D", "_ZNK2cv3ocl6Kernel5emptyEv", "cvSetWindowProperty", "Java_org_opencv_imgproc_Imgproc_threshold_10", "_ZNK2cv3LDA4saveERNS_11FileStorageE", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_ii", "_ZN2cv15bilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiddi", "Java_org_opencv_imgproc_Imgproc_ellipse_11", "Java_org_opencv_photo_TonemapDurand_getSigmaSpace_10", "_ZN2cv9videostab14StabilizerBase16postProcessFrameERKNS_3MatE", "_ZNK2cv3PCA5writeERNS_11FileStorageE", "_ZThn16_N2cv9videostab27SparsePyrLkOptFlowEstimator3runERKNS_11_InputArrayES4_S4_RKNS_17_InputOutputArrayERKNS_12_OutputArrayESA_", "cvAdd", "_ZN2cv9Feature2DD1Ev", "cvProjectPCA", "_ZN2cv3ocl6DeviceC1EPv", "_ZNSt9exceptionD1Ev", "cvSet", "_ZN2cv3ocl12PlatformInfoC1EPv", "_ZN2cv17CascadeClassifierC2Ev", "_ZN2cv6detail14PlaneWarperGpu9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_S6_RNS_4cuda6GpuMatES9_", "Java_org_opencv_photo_Photo_illuminationChange_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowThreshold_10", "_ZN2cv5BRISK6createEiif", "_ZN2cv4FASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEibi", "_ZN2cv13detailEnhanceERKNS_11_InputArrayERKNS_12_OutputArrayEff", "Java_org_opencv_photo_TonemapReinhard_setColorAdaptation_10", "Java_org_opencv_features2d_FeatureDetector_write_10", "_ZNK2cv7MatExpr3invEi", "_ZN9CvLevMarq4stepEv", "_Z20Mat_to_vector_doubleRN2cv3MatERSt6vectorIdSaIdEE", "_ZN2cv12mulSpectrumsERKNS_11_InputArrayES2_RKNS_12_OutputArrayEib", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_10", "_ZNK2cv12_OutputArray6assignERKNS_3MatE", "_ZN2cv22SparseMatConstIteratorppEv", "Java_org_opencv_core_Core_normalize_12", "Java_org_opencv_ml_Boost_delete", "_ZN2cv3ogl9Texture2DC1Ev", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleRange_10", "_ZN2cv3ocl5QueueD2Ev", "_ZN2cv11linearPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "_ZN2cv6fontQtERKNS_6StringEiNS_7Scalar_IdEEiii", "_ZN2cv13destroyWindowERKNS_6StringE", "Java_org_opencv_video_Video_calcOpticalFlowFarneback_10", "_ZN2cv20AgastFeatureDetector6createEibi", "_ZN2cv20calcOpticalFlowPyrLKERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayERKNS_12_OutputArrayES8_NS_5Size_IiEEiNS_12TermCriteriaEid", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_10", "_ZN2cv6detail20BundleAdjusterReproj9calcErrorERNS_3MatE", "_ZN2cv16ParallelLoopBodyD0Ev", "_ZN2cv3ocl5QueueC1ERKS1_", "Java_org_opencv_core_Mat_n_1convertTo__JJIDD", "_ZNK2cv4cuda10DeviceInfo19maxSurface1DLayeredEv", "_ZN2cv9videostab20FromFileMotionReaderC2ERKNS_6StringE", "Java_org_opencv_imgproc_Imgproc_applyColorMap_10", "Java_org_opencv_core_Core_norm_13", "Java_org_opencv_core_Core_compare_10", "_ZN2cv13mulTransposedERKNS_11_InputArrayERKNS_12_OutputArrayEbS2_di", "_ZN2cv5flann20CompositeIndexParamsC2EiiiN7cvflann20flann_centers_init_tEf", "Java_org_opencv_photo_Photo_inpaint_10", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_10", "_ZN2cv30createBackgroundSubtractorMOG2Eidb", "_ZN2cv15getDerivKernelsERKNS_12_OutputArrayES2_iiibi", "Java_org_opencv_core_Core_bitwise_1not_10", "Java_org_opencv_photo_Photo_detailEnhance_11", "_ZN2cveqEdRKNS_3MatE", "cvCompareHist", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEi", "_ZN2cv3Mat10deallocateEv", "_ZN2cv21invertAffineTransformERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_objdetect_HOGDescriptor_compute_10", "Java_org_opencv_photo_Photo_createTonemapDrago_10", "cvGetNormalizedCentralMoment", "Java_org_opencv_calib3d_StereoBM_setPreFilterType_10", "Java_org_opencv_core_Core_batchDistance_12", "Java_org_opencv_imgproc_Imgproc_filter2D_11", "_ZN2cv7directx25convertFromD3D11Texture2DEP15ID3D11Texture2DRKNS_12_OutputArrayE", "cvSeqInvert", "cvGetCaptureDomain", "_ZN2cv6detail8resultTlERKSt6vectorINS_6Point_IiEESaIS3_EE", "Java_org_opencv_core_Core_PCACompute_10", "Java_org_opencv_core_Mat_n_1mul__JJD", "Java_org_opencv_video_Video_findTransformECC_12", "_ZN2cv22cornerEigenValsAndVecsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "cvHoughLines2", "_ZNK2cv14DefaultDeleterI9CvCaptureEclEPS1_", "Java_org_opencv_imgproc_Imgproc_filter2D_12", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv8superres24createFrameSource_CameraEi", "_ZNK2cv11_InputArray9getGpuMatEv", "Java_org_opencv_photo_Photo_seamlessClone_10", "Java_org_opencv_calib3d_StereoMatcher_getMinDisparity_10", "_ZN2cv15NAryMatIteratorppEi", "Java_org_opencv_photo_TonemapReinhard_getLightAdaptation_10", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_11", "_ZNK2cv11VideoWriter8isOpenedEv", "_ZN2cv6detail18GraphCutSeamFinder4Impl10findInPairEjjNS_5Rect_IiEE", "Java_org_opencv_imgproc_Imgproc_calcBackProject_10", "Java_org_opencv_core_Core_copyMakeBorder_11", "_ZN2cv4cuda18setBufferPoolUsageEb", "_ZN2cv8tempfileEPKc", "_ZN2cv22createCalibrateDebevecEifb", "_ZN2cv4cuda18registerPageLockedERNS_3MatE", "_ZNK2cv11FileStorage8isOpenedEv", "_ZN2cv31createChiHistogramCostExtractorEif", "Java_org_opencv_imgproc_Imgproc_arrowedLine_11", "_ZN2cv24convertPointsHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "_Z21Mat_to_vector_Point2fRN2cv3MatERSt6vectorINS_6Point_IfEESaIS4_EE", "cvMinEnclosingCircle", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayERKSt6vectorIfSaIfEEiii", "_Z19vector_Vec4f_to_MatRSt6vectorIN2cv3VecIfLi4EEESaIS2_EERNS0_3MatE", "_ZN2cv9seqRemoveEP5CvSeqi", "_ZNK2cv8Subdiv2D9getVertexEiPi", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEi", "_ZN2cv3MataSERKNS_7Scalar_IdEE", "_ZN2cv9normalizeERKNS_11_InputArrayERKNS_17_InputOutputArrayEddiiS2_", "Java_org_opencv_core_Core_inRange_10", "cvSaveWindowParameters", "Java_org_opencv_ml_ANN_1MLP_getTrainMethod_10", "_ZN2cvdvERKNS_7MatExprES2_", "_ZN2cv21DetectionBasedTracker7processERKNS_3MatE", "_ZN2cv3ocl7ProgramD1Ev", "Java_org_opencv_calib3d_Calib3d_stereoRectify_12", "_ZN2cv8superres11FrameSourceD1Ev", "Java_org_opencv_photo_AlignMTB_getCut_10", "_ZN2cv6kmeansERKNS_11_InputArrayEiRKNS_17_InputOutputArrayENS_12TermCriteriaEiiRKNS_12_OutputArrayE", "_ZN2cv4normERKNS_11_InputArrayEiS2_", "_ZN2cv3ocl5QueueC2ERKNS0_7ContextERKNS0_6DeviceE", "Java_org_opencv_ml_LogisticRegression_create_10", "_ZN2cv3ocl8internal26isPerformanceCheckBypassedEv", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_10", "cvGet2D", "cvLinearPolar", "_ZN2cv2ml7ANN_MLP6createEv", "_ZN2cv6detail21BestOf2NearestMatcherC1Ebfii", "cvCreateTrackbar2", "Java_org_opencv_features2d_DescriptorExtractor_compute_11", "_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE", "_ZN2cv2ml12randMVNormalERKNS_11_InputArrayES3_iRKNS_12_OutputArrayE", "Java_org_opencv_photo_Photo_createTonemapReinhard_11", "_ZN2cv5mergeERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_findContours_11", "_ZN2cv8superres24createOptFlow_PyrLK_CUDAEv", "cvPutText", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThresholdGen_10", "_ZN10__cxxabiv116__enum_type_infoD2Ev", "_ZNK2cv5MatOp11augAssignOrERKNS_7MatExprERNS_3MatE", "_ZN2cv9videostab20FromFileMotionReaderC1ERKNS_6StringE", "_ZN2cv7hconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_10", "Java_org_opencv_ml_StatModel_isClassifier_10", "_ZNK2cv4cuda10DeviceInfo21texturePitchAlignmentEv", "cvGetTickFrequency", "_ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "_ZNK2cv3ocl6Kernel13workGroupSizeEv", "Java_org_opencv_core_Core_add_12", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_10", "cvCalcEMD2", "_ZN2cv12VideoCaptureC2Ev", "_ZN2cv4readERKNS_8FileNodeERSt6vectorINS_8KeyPointESaIS4_EE", "cvClearHist", "_ZN2cv17FlannBasedMatcher5clearEv", "Java_org_opencv_photo_TonemapDurand_setSigmaColor_10", "Java_org_opencv_core_Mat_n_1depth", "Java_org_opencv_photo_Photo_textureFlattening_11", "_ZN2cv3ocl7ContextC2Ei", "cvRectangleR", "_ZN2cv8internal15NormalizePixelsERKNS_3MatERKNS0_15IntrinsicParamsE", "_ZN2cv4UMat5zerosEiii", "_ZN2cv9startLoopEPFiiPPcEiS1_", "_ZN2cv3ocl7ContextaSERKS1_", "_ZN2cv6detail12DpSeamFinder14findComponentsEv", "_ZN2cv6detail7Blender5blendERKNS_17_InputOutputArrayES4_", "_ZN2cv11setIdentityERKNS_17_InputOutputArrayERKNS_7Scalar_IdEE", "Java_org_opencv_core_Mat_n_1setTo__JDDDDJ", "Java_org_opencv_ml_TrainData_getVarIdx_10", "_ZN2cv7fisheye9calibrateERKNS_11_InputArrayES3_RKNS_5Size_IiEERKNS_17_InputOutputArrayESA_RKNS_12_OutputArrayESD_iNS_12TermCriteriaE", "Java_org_opencv_videoio_VideoCapture_VideoCapture_12", "_ZNK2cv11_InputArray4colsEi", "_ZN2cv10BOWTrainerC2Ev", "Java_org_opencv_core_Core_sortIdx_10", "Java_org_opencv_core_Core_subtract_13", "_ZNK2cv9BFMatcher5cloneEb", "Java_org_opencv_ml_KNearest_delete", "_ZNK2cv3ogl6Buffer5cloneENS1_6TargetEb", "_ZN2cv9videostab17OnePassStabilizer14estimateMotionEv", "_ZN2cv17borderInterpolateEiii", "_ZN2cv4UMatD2Ev", "cvGetSeqReaderPos", "Java_org_opencv_imgproc_Imgproc_getDefaultNewCameraMatrix_11", "_ZNK2cv3ocl6Device12endianLittleEv", "_ZNK2cv3ocl6Device15maxMemAllocSizeEv", "_ZN2cv3ocl6DeviceC2Ev", "Java_org_opencv_ml_ANN_1MLP_getTermCriteria_10", "_ZN2cv9composeRTERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_S5_S5_S5_", "_ZN2cv11matchShapesERKNS_11_InputArrayES2_id", "_ZN2cv5MutexC2Ev", "_ZN2cv9videostab17OnePassStabilizer27estimateStabilizationMotionEv", "Java_org_opencv_core_Core_solveCubic_10", "_ZN2cv3ogl6BufferC2ERKNS_11_InputArrayENS1_6TargetEb", "_ZNK2cv3ogl6Arrays4bindEv", "cvCreateMatND", "Java_org_opencv_objdetect_HOGDescriptor_get_1cellSize_10", "_ZNK2cv5flann5Index12getAlgorithmEv", "_ZNK2cv13HOGDescriptor9detectROIERKNS_3MatERKSt6vectorINS_6Point_IiEESaIS6_EERS8_RS4_IdSaIdEEdNS_5Size_IiEESG_", "Java_org_opencv_imgproc_Imgproc_distanceTransform_11", "Java_org_opencv_imgproc_Subdiv2D_findNearest_11", "_ZN2cv3ocl5QueueD1Ev", "_ZN2cv9videostab18InpaintingPipeline14setMotionModelENS0_11MotionModelE", "_ZNK2cv8Subdiv2D8nextEdgeEi", "_ZN9CvLevMarq6updateERPK5CvMatRPS0_S5_", "_ZN2cv3ocl6KernelD1Ev", "_ZNK2cv3ocl7Program3ptrEv", "_ZN2cv8Stitcher6stitchERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv3ocl15getPlatfomsInfoERSt6vectorINS0_12PlatformInfoESaIS2_EE", "_ZN2cv3ogl6Arrays15resetColorArrayEv", "_ZNK2cv4UMat3mulERKNS_11_InputArrayEd", "_ZNK2cv11_InputArray5totalEi", "_ZN2cv10BOWTrainer3addERKNS_3MatE", "_ZN2cv3ocl7Image2D14canCreateAliasERKNS_4UMatE", "_ZN2cv16ParallelLoopBodyD2Ev", "Java_org_opencv_calib3d_Calib3d_composeRT_10", "_ZNK2cv10BOWTrainer14getDescriptorsEv", "_ZNK2cv3Mat3mulERKNS_11_InputArrayEd", "_ZN9CvLevMarqC1Eii14CvTermCriteriab", "_ZN2cv9videostab18InpaintingPipeline9setRadiusEi", "_ZN2cv9polylinesERKNS_17_InputOutputArrayERKNS_11_InputArrayEbRKNS_7Scalar_IdEEiii", "_ZN2cv8internal15IntrinsicParamsC2Ev", "_ZNK2cv13HOGDescriptor6detectERKNS_3MatERSt6vectorINS_6Point_IiEESaIS6_EEdNS_5Size_IiEESB_RKS8_", "_ZThn4_N2cv8superres15SuperResolution9nextFrameERKNS_12_OutputArrayE", "cvMoments", "Java_org_opencv_video_DenseOpticalFlow_collectGarbage_10", "Java_org_opencv_photo_Photo_createCalibrateRobertson_10", "cvInpaint", "_ZN2cv6detail17BundleAdjusterRay24setUpInitialCameraParamsERKSt6vectorINS0_12CameraParamsESaIS3_EE", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_11", "_ZN2cv4cuda20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfiiRNS0_6StreamE", "Java_org_opencv_photo_Photo_createAlignMTB_11", "_ZN2cv5flann5IndexC2Ev", "_ZN2cv7MomentsC2Edddddddddd", "_ZN2cv3ogl9Texture2D8copyFromERKNS_11_InputArrayEb", "cvCreateSeqBlock", "_ZN2cv14createStitcherEb", "cvCornerHarris", "Java_org_opencv_photo_Photo_edgePreservingFilter_11", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EEdiiNS_5Size_IiEESB_", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv3LDA11reconstructERKNS_11_InputArrayE", "_ZN2cv17FlannBasedMatcher15radiusMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "_ZN2cv7addTextERKNS_3MatERKNS_6StringENS_6Point_IiEERKNS_6QtFontE", "cvConvexHull2", "_ZN2cv2ml9ParamGridC1Eddd", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorSizeEv", "cvEncodeImage", "_ZN2cv9AlgorithmC1Ev", "_ZNK2cv3ocl6Device24preferredVectorWidthCharEv", "Java_org_opencv_core_Core_getCPUTickCount_10", "Java_org_opencv_video_BackgroundSubtractorKNN_delete", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKSt6vectorINS_6DMatchESaIS6_EE", "cvComposeRT", "_ZN2cv9videostab17TwoPassStabilizer16postProcessFrameERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_drawContours_12", "Java_org_opencv_core_Algorithm_getDefaultName_10", "_ZN2cvleERKNS_3MatES2_", "cvReleaseMat", "_ZN2cv15stereoCalibrateERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayES5_S5_S5_NS_5Size_IiEERKNS_12_OutputArrayESA_SA_SA_iNS_12TermCriteriaE", "_ZN2cv4cuda6Stream9waitEventERKNS0_5EventE", "Java_org_opencv_imgproc_Imgproc_demosaicing_11", "_ZN2cv11bitwise_notERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv4PSNRERKNS_11_InputArrayES2_", "cvWarpAffine", "cvSetNumThreads", "Java_org_opencv_core_Core_divide_11", "_ZN2cv3ocl8PlatformC1ERKS1_", "_ZNK2cv5MatOp3roiERKNS_7MatExprERKNS_5RangeES6_RS1_", "_ZN2cv13getNumThreadsEv", "_ZN2cv3MatC2ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_imgproc_Imgproc_fillPoly_10", "_ZN10__cxxabiv119__pointer_type_infoD2Ev", "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", "Java_org_opencv_imgproc_Imgproc_circle_12", "_ZN2cv6detail11PlaneWarper9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_S6_RKNS_12_OutputArrayES9_", "Java_org_opencv_features2d_FeatureDetector_create_10", "_ZN2cv17setErrorVerbosityEb", "_ZN2cv12findContoursERKNS_17_InputOutputArrayERKNS_12_OutputArrayEiiNS_6Point_IiEE", "_ZNK2cv4cuda10DeviceInfo16asyncEngineCountEv", "_ZN2cv5flann11IndexParamsC2Ev", "_ZN10__cxxabiv123__fundamental_type_infoD2Ev", "Java_org_opencv_core_Mat_nGetF", "_ZN2cv5flann11IndexParams9setDoubleERKNS_6StringEd", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD2Ev", "_ZNSt10bad_typeidD2Ev", "_ZN2cv9Feature2DD0Ev", "_ZN2cv22estimateRigidTransformERKNS_11_InputArrayES2_b", "cvApproxPoly", "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", "Java_org_opencv_ml_DTrees_getMaxCategories_10", "_ZN2cv7decolorERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZNK2cv4UMat7reshapeEiiPKi", "_ZN2cv6detail18PairwiseSeamFinder4findERKSt6vectorINS_4UMatESaIS3_EERKS2_INS_6Point_IiEESaIS9_EERS5_", "Java_org_opencv_photo_Photo_createTonemap_11", "Java_org_opencv_core_Mat_locateROI_10", "_ZN2cvplERKNS_3MatERKNS_7MatExprE", "cvEndFindContours", "_ZN2cv11addWeightedERKNS_11_InputArrayEdS2_ddRKNS_12_OutputArrayEi", "Java_org_opencv_core_Core_randu_10", "_Z28vector_vector_Point3f_to_MatRSt6vectorIS_IN2cv7Point3_IfEESaIS2_EESaIS4_EERNS0_3MatE", "_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE", "_ZN2cv4cuda14deviceSupportsENS0_10FeatureSetE", "_ZNK2cv4cuda10DeviceInfo4nameEv", "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi", "Java_org_opencv_ml_ANN_1MLP_create_10", "_ZN2cv11FileStorageC1ERKNS_6StringEiS3_", "_ZN2cv9videostab15VideoFileSource5resetEv", "_ZN2cv10BOWTrainer5clearEv", "_ZN2cv20minEnclosingTriangleERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv9minMaxIdxERKNS_11_InputArrayEPdS3_PiS4_S2_", "Java_org_opencv_video_DenseOpticalFlow_calc_10", "cvSub", "_ZN2cv6detail21BlocksGainCompensator4feedERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_4UMatESaIS9_EERKS2_ISt4pairIS9_hESaISF_EE", "_ZN2cv7fisheye15stereoCalibrateERKNS_11_InputArrayES3_S3_RKNS_17_InputOutputArrayES6_S6_S6_NS_5Size_IiEERKNS_12_OutputArrayESB_iNS_12TermCriteriaE", "_ZNK2cv12MatAllocator3mapEPNS_8UMatDataEi", "_ZNK2cv11_InputArray5depthEi", "_ZN2cv5MatOpC1Ev", "_ZN2cv16estimateAffine3DERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_dd", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_10", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5Rect_IiEE", "_ZN2cv8calcHistERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayES7_RKS3_IfSaIfEEb", "_ZN2cv6detail15createWeightMapERKNS_11_InputArrayEfRKNS_17_InputOutputArrayE", "_ZN2cv8internal18WriteStructContextD2Ev", "cvGetFileNode", "Java_org_opencv_core_Core_fastAtan2_10", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_11", "_ZN2cv3ipp9setUseIPPEb", "_ZN2cv4cuda6GpuMatC1EiiiPvj", "Java_org_opencv_core_Core_polarToCart_11", "Java_org_opencv_video_BackgroundSubtractorKNN_getHistory_10", "_ZN2cv17getOptimalDFTSizeEi", "_ZNK2cv4cuda10DeviceInfo16canMapHostMemoryEv", "_ZN2cv4UMat9adjustROIEiiii", "_ZN2cv7imwriteERKNS_6StringERKNS_11_InputArrayERKSt6vectorIiSaIiEE", "Java_org_opencv_imgproc_Imgproc_blur_12", "Java_org_opencv_imgproc_Imgproc_rectangle_12", "Java_org_opencv_video_KalmanFilter_get_1measurementMatrix_10", "_ZNK2cv17CommandLineParser4Impl18split_range_stringERKNS_6StringEcc", "_ZN2cv15KeyPointsFilter10retainBestERSt6vectorINS_8KeyPointESaIS2_EEi", "_ZN2cv9normalizeERKNS_9SparseMatERS0_di", "_ZN10__cxxabiv117__class_type_infoD0Ev", "_ZNK2cv3Mat7getUMatEiNS_14UMatUsageFlagsE", "_ZN2cv4cuda6StreamC1Ev", "Java_org_opencv_video_Video_estimateRigidTransform_10", "_ZN2cv6detail15SphericalWarper9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RKNS_12_OutputArrayES9_", "cvNamedWindow", "Java_org_opencv_imgproc_LineSegmentDetector_drawSegments_10", "_ZN2cv12KalmanFilterC1Ev", "_ZN2cv25BOWImgDescriptorExtractorD0Ev", "cvLine", "cvCreateMatHeader", "_ZN2cv11cornerScoreILi16EEEiPKhPKii", "Java_org_opencv_core_Core_patchNaNs_11", "Java_org_opencv_imgproc_Imgproc_line_10", "_ZN2cv15setUseOptimizedEb", "_ZN2cv3ocl6Kernel3setEiPKvj", "cvFloodFill", "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", "cvClearGraph", "Java_org_opencv_ml_SVM_setCoef0_10", "_ZN2cv10convexHullERKNS_11_InputArrayERKNS_12_OutputArrayEbb", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_10", "_ZN2cv3LDAD2Ev", "Java_org_opencv_ml_ANN_1MLP_setBackpropWeightScale_10", "_ZN2cv3minERKNS_4UMatES2_RS0_", "_ZN2cv6imshowERKNS_6StringERKNS_3ogl9Texture2DE", "_ZNK2cv11_InputArray4sizeEi", "_ZN2cv3addERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "cvSave", "Java_org_opencv_features2d_DescriptorExtractor_delete", "_ZN2cv15NAryMatIteratorC1Ev", "Java_org_opencv_features2d_DescriptorExtractor_create_10", "_Z22vector_KeyPoint_to_MatRSt6vectorIN2cv8KeyPointESaIS1_EERNS0_3MatE", "cvSetTrackbarMax", "_ZN9CvLevMarq5clearEv", "Java_org_opencv_imgproc_Imgproc_remap_10", "cvThreshold", "_ZNK2cv9Feature2D14descriptorSizeEv", "_ZN2cv6dilateERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Subdiv2D_nextEdge_10", "_ZN2cv3absERKNS_7MatExprE", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_11", "_Z25vector_vector_char_to_MatRSt6vectorIS_IcSaIcEESaIS1_EERN2cv3MatE", "cvGraphAddEdgeByPtr", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DLinearEv", "_ZN2cv16setMouseCallbackERKNS_6StringEPFviiiiPvES3_", "cvNextTreeNode", "_ZN2cv25BOWImgDescriptorExtractorD1Ev", "_ZN2cv9videostab17TwoPassStabilizer27estimateStabilizationMotionEv", "Java_org_opencv_core_Core_countNonZero_10", "Java_org_opencv_core_Mat_n_1dot", "cvRemap", "Java_org_opencv_core_Core_determinant_10", "cvCreateMatNDHeader", "_Z17Mat_to_vector_MatRN2cv3MatERSt6vectorIS0_SaIS0_EE", "cvGrabFrame", "Java_org_opencv_video_BackgroundSubtractor_apply_10", "_ZN2cv3ogl6BufferC1Eiiijb", "_ZN2cv12VideoCaptureC2ERKNS_6StringE", "_Z19vector_uchar_to_MatRSt6vectorIhSaIhEERN2cv3MatE", "Java_org_opencv_imgproc_Imgproc_HoughCircles_11", "Java_org_opencv_calib3d_Calib3d_Rodrigues_10", "Java_org_opencv_imgproc_Imgproc_ellipse_12", "Java_org_opencv_ml_RTrees_getCalculateVarImportance_10", "_ZN2cv12GFTTDetector6createEiddibd", "_ZNK2cv9Feature2D5emptyEv", "_ZNK2cv3ocl13ProgramSource4hashEv", "_ZN10__cxxabiv112__unexpectedEPFvvE", "_ZN2cv21DetectionBasedTracker20updateTrackedObjectsERKSt6vectorINS_5Rect_IiEESaIS3_EE", "Java_org_opencv_photo_MergeMertens_process_10", "_ZN2cv6detail12CameraParamsC1Ev", "cvColorToScalar", "_ZN2cvneERKNS_3MatES2_", "_ZN2cv21DetectionBasedTracker9addObjectERKNS_5Rect_IiEE", "_ZN2cv17DescriptorMatcherD1Ev", "_ZN2cv6detail18GraphCutSeamFinderD2Ev", "_ZN2cveoERKNS_3MatES2_", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_11", "Java_org_opencv_imgcodecs_Imgcodecs_imread_10", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZN2cv2ml3SVM6createEv", "_ZN2cv6detail14FeaturesFinderclERKNS_11_InputArrayERNS0_13ImageFeaturesE", "cvEigenVV", "Java_org_opencv_ml_LogisticRegression_predict_11", "_ZN2cv3ocl6DeviceaSERKS1_", "_ZNK2cv3ocl6Device16maxParameterSizeEv", "cvSobel", "_ZN2cv25decomposeProjectionMatrixERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_", "Java_org_opencv_photo_CalibrateCRF_process_10", "_ZN2cv3ocl7ContextC1Ev", "Java_org_opencv_core_Core_getBuildInformation_10", "_ZN2cv3Mat5setToERKNS_11_InputArrayES3_", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EEidPS0_IiSaIiEEPS0_IdSaIdEE", "_ZNK2cv4cuda10DeviceInfo11computeModeEv", "Java_org_opencv_core_Core_add_14", "_ZNK2cv4cuda10DeviceInfo15memoryClockRateEv", "cvDecomposeProjectionMatrix", "Java_org_opencv_video_Video_findTransformECC_10", "_ZNK2cv11_InputArray12getMatVectorERSt6vectorINS_3MatESaIS2_EE", "_ZN2cv3ogl6BufferC1ENS_5Size_IiEEijb", "_ZNK2cv5MatOp4sizeERKNS_7MatExprE", "Java_org_opencv_core_Mat_n_1checkVector__JII", "Java_org_opencv_photo_AlignMTB_shiftMat_10", "cvCountNonZero", "Java_org_opencv_core_Core_dft_11", "Java_org_opencv_photo_MergeDebevec_process_10", "cvSolveCubic", "cvChangeSeqBlock", "cvWriteString", "_ZN7cvflann17set_distance_typeENS_16flann_distance_tEi", "_ZN2cv6detail16MultiBandBlender5blendERKNS_17_InputOutputArrayES4_", "Java_org_opencv_ml_TrainData_getCatMap_10", "Java_org_opencv_imgproc_Imgproc_compareHist_10", "Java_org_opencv_photo_TonemapReinhard_setIntensity_10", "_ZN2cv12updateWindowERKNS_6StringE", "_ZN2cv12KalmanFilterC1Eiiii", "_ZN2cv3ogl6Buffer11unmapDeviceERNS_4cuda6StreamE", "_ZNK2cv3ocl6Device17maxWriteImageArgsEv", "Java_org_opencv_imgproc_Imgproc_getRotationMatrix2D_10", "_ZN2cv16convexityDefectsERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv3ocl7Context6createEv", "_ZN2cv17getGaussianKernelEidi", "_ZN2cv8superres22createOptFlow_DualTVL1Ev", "_ZN2cv4readERKNS_8FileNodeERNS_9SparseMatERKS3_", "_ZN10__cxxabiv117__pbase_type_infoD1Ev", "_ZN2cv9videostab18LpMotionStabilizerC1ENS0_11MotionModelE", "Java_org_opencv_objdetect_HOGDescriptor_getDaimlerPeopleDetector_10", "_ZN2cv9videostab14ColorInpainter7inpaintEiRNS_3MatES3_", "_ZN2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "_Z19vector_Vec6f_to_MatRSt6vectorIN2cv3VecIfLi6EEESaIS2_EERNS0_3MatE", "Java_org_opencv_photo_CalibrateDebevec_setSamples_10", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_12", "Java_org_opencv_calib3d_StereoBM_setTextureThreshold_10", "cvRelease", "_ZN2cv9videostab17MotionEstimatorL18estimateERKNS_11_InputArrayES4_Pb", "Java_org_opencv_core_Mat_n_1cols", "Java_org_opencv_ml_LogisticRegression_delete", "Java_org_opencv_imgproc_Subdiv2D_locate_10", "_ZNK2cv3ocl6Device16image3DMaxHeightEv", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEPPKfdb", "_ZNK2cv7HammingclEPKhS2_i", "cvSetSeqReaderPos", "Java_org_opencv_ml_SVM_getP_10", "cvInvert", "Java_org_opencv_ml_EM_delete", "Java_org_opencv_objdetect_HOGDescriptor_get_1derivAperture_10", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_12", "cvStopLoop", "Java_org_opencv_ml_KNearest_setDefaultK_10", "_Z27vector_vector_DMatch_to_MatRSt6vectorIS_IN2cv6DMatchESaIS1_EESaIS3_EERNS0_3MatE", "Java_org_opencv_features2d_DescriptorExtractor_empty_10", "_ZN2cv6detail11MatchesInfoC2ERKS1_", "_ZN2cv3ocl12PlatformInfoC2EPv", "_ZNK2cv17CommandLineParser9getByNameERKNS_6StringEbiPv", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_11", "Java_org_opencv_ml_LogisticRegression_getTermCriteria_10", "_Z17cvCreateSparseMatRKN2cv9SparseMatE", "_ZN2cv8Subdiv2D6VertexC2Ev", "cvSeqRemoveSlice", "_ZN2cv4UMatC2ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_core_Core_mixChannels_10", "cvCamShift", "_ZN2cv16MinProblemSolver8Function11getGradientEPKdPd", "Java_org_opencv_ml_TrainData_getNormCatResponses_10", "_ZN2cv9SparseMat5eraseEiiPj", "Java_org_opencv_calib3d_Calib3d_decomposeHomographyMat_10", "_ZN2cv8Stitcher15composePanoramaERKNS_12_OutputArrayE", "_Znwj", "_ZN2cv18createMergeDebevecEv", "_ZNK2cv9Algorithm4saveERKNS_6StringE", "_ZN2cv6reduceERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "cvGetWindowName", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockStride_10", "cvDFT", "Java_org_opencv_core_Core_add_10", "Java_org_opencv_photo_Photo_edgePreservingFilter_10", "Java_org_opencv_imgproc_Imgproc_Sobel_10", "_ZNSt10bad_typeidD1Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowValue_10", "cvAnd", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayE", "_ZN2cvltEdRKNS_3MatE", "_ZN2cv6detail12DpSeamFinder18hasOnlyOneNeighborEi", "Java_org_opencv_core_Core_copyMakeBorder_10", "_ZN2cv13createTonemapEf", "Java_org_opencv_imgproc_Imgproc_morphologyEx_12", "Java_org_opencv_ml_EM_predict2_10", "Java_org_opencv_core_Core_setIdentity_10", "_ZNK2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayES3_RSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "Java_org_opencv_core_Core_subtract_10", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "_ZNK2cv4cuda10DeviceInfo18maxThreadsPerBlockEv", "_ZN2cv3ocl6DeviceC2ERKS1_", "_ZN2cv3ocl7Program6createERKNS0_13ProgramSourceERKNS_6StringERS5_", "Java_org_opencv_core_Core_dct_10", "Java_org_opencv_ml_EM_create_10", "_Z19vector_float_to_MatRSt6vectorIfSaIfEERN2cv3MatE", "_ZN2cv16findEssentialMatERKNS_11_InputArrayES2_dNS_6Point_IdEEiddRKNS_12_OutputArrayE", "_ZN2cv18minEnclosingCircleERKNS_11_InputArrayERNS_6Point_IfEERf", "_ZN2cv3ogl9Texture2D7releaseEv", "Java_org_opencv_imgproc_Imgproc_arcLength_10", "_ZN2cv2ml9TrainDataD1Ev", "_ZN2cv18SimpleBlobDetector6ParamsC2Ev", "cvSetImageROI", "_ZN2cv11FileStorage8writeRawERKNS_6StringEPKhj", "Java_org_opencv_ml_StatModel_getVarCount_10", "_ZN2cv17DescriptorMatcher15isPossibleMatchERKNS_11_InputArrayEii", "_ZNK2cv12MatAllocator6uploadEPNS_8UMatDataEPKviPKjS6_S6_S6_", "_ZN2cv8StereoBM6createEii", "cvAvgSdv", "_ZN2cv3ocl7ContextC2ERKS1_", "_ZN2cv13matchTemplateERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS2_", "cvAddText", "cvReleaseImage", "cvSplit", "_ZN2cv3ogl6Buffer7mapHostENS1_6AccessE", "_ZN2cv5Mutex7trylockEv", "_ZN2cv6detail11PlaneWarper9warpPointERKNS_6Point_IfEERKNS_11_InputArrayES8_", "Java_org_opencv_photo_Photo_createTonemapMantiuk_10", "_ZTv0_n20_NK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "_ZN2cv3ocl5QueueC2ERKS1_", "_ZN2cv25BOWImgDescriptorExtractor13setVocabularyERKNS_3MatE", "_ZN2cv3dftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZNK2cv11FileStorageixERKNS_6StringE", "_ZN2cv4cuda6GpuMat19setDefaultAllocatorEPNS1_9AllocatorE", "Java_org_opencv_imgproc_Imgproc_warpPerspective_10", "cvGetCaptureProperty", "_ZN2cv5flann5Index9knnSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_iRKNS0_12SearchParamsE", "Java_org_opencv_core_Core_idft_11", "_ZN2cv12cornerHarrisERKNS_11_InputArrayERKNS_12_OutputArrayEiidi", "cvInitImageHeader", "_ZN2cv4UMat4onesEiPKii", "_ZN2cv7fisheye14undistortImageERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_RKNS_5Size_IiEE", "Java_org_opencv_photo_MergeRobertson_process_11", "_ZNK2cv4cuda10DeviceInfo19multiProcessorCountEv", "cvReleaseSparseMat", "Java_org_opencv_imgproc_Imgproc_grabCut_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowThreshold_10", "Java_org_opencv_ml_KNearest_setIsClassifier_10", "Java_org_opencv_videoio_VideoCapture_isOpened_10", "_ZN2cv6seqPopEP5CvSeqPv", "_ZN2cv9Formatter3getEi", "cvFilter2D", "_ZN2cv19FastFeatureDetector6createEibi", "_ZN2cv3RNG8gaussianEd", "_ZNK2cv7MatExpr5crossERKNS_3MatE", "_ZN2cv11RNG_MT19937cviEv", "Java_org_opencv_imgproc_Imgproc_floodFill_11", "_ZN2cv13applyColorMapERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_Z17Mat_to_vector_intRN2cv3MatERSt6vectorIiSaIiEE", "_ZN2cv7noArrayEv", "_ZN2cv9FormatterD1Ev", "_ZN2cv11cornerScoreILi12EEEiPKhPKii", "_ZN2cv9videostab25ensureInclusionConstraintERKNS_3MatENS_5Size_IiEEf", "_Unwind_GetRegionStart", "Java_org_opencv_core_Mat_nGetD", "cvGraphVtxDegree", "cvNormalize", "cvConvertScaleAbs", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv16MatConstIterator4seekEib", "cvGetND", "_ZNK2cv3ocl6Device12imageSupportEv", "Java_org_opencv_core_Mat_n_1convertTo__JJID", "_ZN10__cxxabiv121__vmi_class_type_infoD1Ev", "_ZN2cveoERKNS_3MatERKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_watershed_10", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_10", "_ZNK2cv3ocl7Program9getPrefixEv", "Java_org_opencv_ml_EM_getTermCriteria_10", "cvSetTrackbarPos", "Java_org_opencv_imgproc_Imgproc_cornerHarris_10", "_ZNK2cv8FileNode4nameEv", "Java_org_opencv_core_Core_solve_11", "_ZN2cv12VideoCapture3setEid", "Java_org_opencv_ml_LogisticRegression_setLearningRate_10", "Java_org_opencv_imgproc_Imgproc_ellipse_10", "_ZNSt13bad_exceptionD2Ev", "_ZN2cv9videostab15VideoFileSource9nextFrameEv", "_ZN2cv22SimpleBlobDetectorImplC1ERKNS_18SimpleBlobDetector6ParamsE", "Java_org_opencv_photo_MergeRobertson_delete", "_ZN2cv15calibrateCameraERKNS_11_InputArrayES2_NS_5Size_IiEERKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_iNS_12TermCriteriaE", "_ZNK2cv3ocl6Device13OpenCLVersionEv", "_ZN2cv9HuMomentsERKNS_7MomentsEPd", "Java_org_opencv_calib3d_StereoBM_setPreFilterSize_10", "cvTransform", "cvCreateKalman", "Java_org_opencv_core_Core_patchNaNs_10", "Java_org_opencv_core_Core_gemm_11", "cvEllipse", "_ZTv0_n28_NK2cv9Feature2D5emptyEv", "_ZN2cv13projectPointsERKNS_11_InputArrayES2_S2_S2_S2_RKNS_12_OutputArrayES5_d", "Java_org_opencv_core_Core_perspectiveTransform_10", "Java_org_opencv_imgproc_Imgproc_circle_10", "Java_org_opencv_objdetect_HOGDescriptor_setSVMDetector_10", "_ZN2cv6detail13ProjectorBase15setCameraParamsERKNS_11_InputArrayES4_S4_", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMin_10", "_ZN2cv22SparseMatConstIteratorC2EPKNS_9SparseMatE", "_ZN2cv12getTickCountEv", "_ZN2cv9videostab36TranslationBasedLocalOutlierRejectorC2Ev", "_ZN2cv9SparseMat5clearEv", "_ZN2cv19createHanningWindowERKNS_12_OutputArrayENS_5Size_IiEEi", "_ZN2cv17CommandLineParserC1EiPKPKcRKNS_6StringE", "_ZN2cv8internal18WriteStructContextD1Ev", "_ZNK2cv13HOGDescriptor17checkDetectorSizeEv", "Java_org_opencv_calib3d_Calib3d_rectify3Collinear_10", "_ZN2cv21drawChessboardCornersERKNS_17_InputOutputArrayENS_5Size_IiEERKNS_11_InputArrayEb", "_ZNK2cv3ocl6Device13globalMemSizeEv", "_ZN2cv25BOWImgDescriptorExtractorD2Ev", "_ZN2cv3ocl9KernelArgC1Ev", "Java_org_opencv_ml_TrainData_getNAllVars_10", "_ZN2cv14PCABackProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZN2cv16FileNodeIteratorppEi", "cvRodrigues2", "_ZN2cv5BRISK6createERKSt6vectorIfSaIfEERKS1_IiSaIiEEffS9_", "_ZN2cv3Mat5zerosEiii", "_ZNK2cv3ocl6Device4nameEv", "_ZNK2cv5MatOp6divideEdRKNS_7MatExprERS1_", "_ZN2cv6detail18GraphCutSeamFinder4Impl4findERKSt6vectorINS_4UMatESaIS4_EERKS3_INS_6Point_IiEESaISA_EERS6_", "Java_org_opencv_ml_LogisticRegression_getMiniBatchSize_10", "_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv", "Java_org_opencv_core_Core_completeSymm_11", "Java_org_opencv_calib3d_Calib3d_correctMatches_10", "Java_org_opencv_ml_KNearest_findNearest_11", "cvFindGraphEdge", "Java_org_opencv_core_Core_norm_10", "_ZN2cv3EMDERKNS_11_InputArrayES2_iS2_PfRKNS_12_OutputArrayE", "Java_org_opencv_core_Core_checkRange_10", "_ZN2cv21getStructuringElementEiNS_5Size_IiEENS_6Point_IiEE", "_ZN2cv9SparseMat3ptrEibPj", "_ZN2cv12VideoCapture4openERKNS_6StringE", "cvRandShuffle", "cvGetSpatialMoment", "_ZN2cv3ocl7ProgramC1Ev", "Java_org_opencv_calib3d_Calib3d_calibrate_11", "Java_org_opencv_core_Mat_n_1zeros__III", "Java_org_opencv_ml_SVM_setDegree_10", "Java_org_opencv_features2d_FeatureDetector_detect_13", "cvFillPoly", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_3MatE", "_ZN10__cxxabiv115__forced_unwindD2Ev", "_ZN2cv8Subdiv2D12clearVoronoiEv", "_ZN2cv15BriskScaleSpace12getKeypointsEiRSt6vectorINS_8KeyPointESaIS2_EE", "Java_org_opencv_ml_TrainData_setTrainTestSplit_10", "cvWatershed", "_ZN2cv15findCirclesGridERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEE", "_Z21vector_Point2f_to_MatRSt6vectorIN2cv6Point_IfEESaIS2_EERNS0_3MatE", "cvWaitKey", "_ZN2cv3ogl6Buffer9mapDeviceERNS_4cuda6StreamE", "_ZNK2cv8Subdiv2D10rotateEdgeEii", "_ZNK2cv7MatExpr1tEv", "_ZNK2cv3ocl6Device4typeEv", "_ZN2cv6detail23SphericalPortraitWarper15detectResultRoiENS_5Size_IiEERNS_6Point_IiEES6_", "cvInitSystem", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERNS_9SparseMatEiS4_PPKfbb", "_ZN2cv3Mat3eyeEiii", "Java_org_opencv_core_Algorithm_clear_10", "_ZN2cvleERKNS_3MatEd", "cvGetCols", "_ZN2cv6detail26BestOf2NearestRangeMatcherC1Eibfii", "_ZN2cv15setBreakOnErrorEb", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_11", "_ZNSt15__exception_ptr13exception_ptrC2EPv", "_ZN2cv11SVBackSubstERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "cvMinMaxLoc", "cvPtr1D", "cvFindStereoCorrespondenceBM", "_ZN2cv3ocl7ProgramD2Ev", "_ZN2cv22decomposeHomographyMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_S5_", "_ZN2cv6detail12DpSeamFinder21updateLabelsUsingSeamEiiRKSt6vectorINS_6Point_IiEESaIS4_EEb", "_ZNK2cv8Subdiv2D7edgeOrgEiPNS_6Point_IfEE", "Java_org_opencv_calib3d_Calib3d_convertPointsFromHomogeneous_10", "_ZNK2cv3ocl6Device11addressBitsEv", "_ZN2cv6detail11PlaneWarper7warpRoiENS_5Size_IiEERKNS_11_InputArrayES6_S6_", "Java_org_opencv_imgproc_Imgproc_filter2D_10", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_11", "_ZN2cv3LDAC1ERKNS_11_InputArrayES3_i", "Java_org_opencv_video_KalmanFilter_set_1measurementMatrix_10", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_12", "Java_org_opencv_imgproc_Imgproc_convertMaps_10", "Java_org_opencv_imgproc_Imgproc_initUndistortRectifyMap_10", "_ZN2cv3ocl9typeToStrEi", "Java_org_opencv_core_Mat_nPutD", "Java_org_opencv_ml_Boost_setWeightTrimRate_10", "Java_org_opencv_core_Core_flip_10", "Java_org_opencv_objdetect_HOGDescriptor_load_11", "_ZN2cv14insertImageCOIERKNS_11_InputArrayEPvi", "_ZN2cv3Mat3eyeENS_5Size_IiEEi", "_ZN2cv12resizeWindowERKNS_6StringEii", "Java_org_opencv_core_Mat_n_1Mat__DDI", "_ZN2cv20createMergeRobertsonEv", "_ZN2cv7directx25convertToDirect3DSurface9ERKNS_11_InputArrayEP17IDirect3DSurface9Pv", "_ZN2cv8internal15IntrinsicParamsC1Ev", "_ZNK2cv7MatExpr4diagEi", "_ZN2cv3expERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_11", "_ZSt9terminatev", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayERKS0_", "_ZN2cv3ocl6KernelC2EPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "_ZN2cv5phaseERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "_ZN2cv6detail20BundleAdjusterReproj12calcJacobianERNS_3MatE", "Java_org_opencv_imgproc_Imgproc_resize_11", "_ZN2cv11VideoWriter4openERKNS_6StringEidNS_5Size_IiEEb", "_ZNK2cv11_InputArray6sizendEPii", "_ZN2cv17textureFlatteningERKNS_11_InputArrayES2_RKNS_12_OutputArrayEffi", "_ZN2cv17agast_cornerScoreILi0EEEiPKhPKii", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_17DescriptorMatcherEEE", "_ZN2cv9videostab14StabilizerBase14doOneIterationEv", "Java_org_opencv_photo_Photo_createTonemapDurand_11", "cvSetAdd", "Java_org_opencv_ml_RTrees_setTermCriteria_10", "_ZN2cv3ocl9KernelArgC2Ev", "cvTypeOf", "_ZNK2cv3ocl12PlatformInfo6vendorEv", "Java_org_opencv_core_Core_LUT_10", "_ZNK2cv11_InputArray6offsetEi", "_ZN2cv12VideoCaptureC1Ei", "Java_org_opencv_video_BackgroundSubtractorKNN_getNSamples_10", "_ZN2cv5erodeERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_11", "_ZN2cv25getOptimalNewCameraMatrixERKNS_11_InputArrayES2_NS_5Size_IiEEdS4_PNS_5Rect_IiEEb", "_ZN2cv9videostab15VideoFileSource6heightEv", "cvErode", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_11", "Java_org_opencv_imgproc_Imgproc_minAreaRect_10", "Java_org_opencv_core_Mat_n_1reshape__JII", "_ZN2cv6detail12CameraParamsaSERKS1_", "_ZN2cv9transposeERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv5flann16SavedIndexParamsC2ERKNS_6StringE", "_ZNK2cv17DescriptorMatcher5matchERKNS_11_InputArrayES3_RSt6vectorINS_6DMatchESaIS5_EES3_", "_ZN2cv6detail12DpSeamFinder7processERKNS_3MatES4_NS_6Point_IiEES6_RS2_S7_", "_ZN2cv6detail14PlaneWarperGpu4warpERKNS_4cuda6GpuMatERKNS_11_InputArrayES8_iiRS3_", "_ZN2cv9videostab18InpaintingPipeline19setStabilizedFramesERKSt6vectorINS_3MatESaIS3_EE", "cvConvertMaps", "_ZNK2cv16TLSDataContainer7getDataEv", "_ZSt10unexpectedv", "_ZN2cv8UMatDataC1EPKNS_12MatAllocatorE", "_ZN2cv11bitwise_andERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZN2cv11FileStorage19releaseAndGetStringEv", "cvContourArea", "_ZNSt9bad_allocD1Ev", "Java_org_opencv_imgproc_CLAHE_getTilesGridSize_10", "_ZNK2cv17CommandLineParser20getPathToApplicationEv", "_ZN2cv9patchNaNsERKNS_17_InputOutputArrayEd", "_ZN2cv3ocl11kernelToStrERKNS_11_InputArrayEiPKc", "_ZNSt13bad_exceptionD1Ev", "_ZN2cv6detail11MatchesInfoC2Ev", "_ZN2cv8superres13convertToTypeERKNS_4cuda6GpuMatEiRS2_S5_", "cvGetOptimalNewCameraMatrix", "_ZN2cvplERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2DC1Ev", "_ZNK2cv17CascadeClassifier5emptyEv", "_ZN2cv7fisheye13stereoRectifyERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEES3_S3_RKNS_12_OutputArrayESA_SA_SA_SA_iS7_dd", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_ii", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorINS0_9ExtObjectESaIS2_EE", "Java_org_opencv_imgproc_Imgproc_Scharr_10", "cvSeqPush", "Java_org_opencv_core_Core_eigen_10", "_ZN2cv6detail21BestOf2NearestMatcher5matchERKNS0_13ImageFeaturesES4_RNS0_11MatchesInfoE", "Java_org_opencv_core_Core_norm_14", "_Z21Mat_to_vector_Point3fRN2cv3MatERSt6vectorINS_7Point3_IfEESaIS4_EE", "_ZN2cv8CholeskyEPdjiS0_ji", "Java_org_opencv_imgproc_Imgproc_matchTemplate_11", "_ZN2cv10PCAProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_10", "_ZN2cv9videostab17WeightingDeblurerC2Ev", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_11", "_ZN2cv3ocl7Image2DC1ERKS1_", "_ZN2cv4cuda11resetDeviceEv", "_ZNK2cv4cuda10DeviceInfo8warpSizeEv", "_ZN2cv30createLMeDSPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEidi", "Java_org_opencv_calib3d_Calib3d_projectPoints_11", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERKNS_12_OutputArrayEPSt6vectorIS7_IiSaIiEESaIS9_EE", "_ZSt18uncaught_exceptionv", "Java_org_opencv_calib3d_Calib3d_calibrate_12", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_10", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EEdNS_5Size_IiEESB_ddb", "Java_org_opencv_core_Mat_n_1isSubmatrix", "_ZN2cv12KalmanFilterC2Eiiii", "_ZN2cv31createEMDHistogramCostExtractorEiif", "_ZNK2cv8FileNode7isNamedEv", "_ZN2cv8KeyPoint7convertERKSt6vectorINS_6Point_IfEESaIS3_EERS1_IS0_SaIS0_EEffii", "cvStereoRectifyUncalibrated", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayERNS0_6StreamE", "_ZN2cv6detail18SphericalWarperGpu9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RNS_4cuda6GpuMatES9_", "_ZN2cv3ocl6KernelC1EPKcRKNS0_7ProgramE", "_ZN2cv7fisheye42estimateNewCameraMatrixForUndistortRectifyERKNS_11_InputArrayES3_RKNS_5Size_IiEES3_RKNS_12_OutputArrayEdS7_d", "Java_org_opencv_core_Core_dft_10", "Java_org_opencv_calib3d_Calib3d_calibrationMatrixValues_10", "_ZN2cv2LUEPdjiS0_ji", "_ZN2cv9SparseMatC2ERKNS_3MatE", "_ZN2cv3ocl7Image2DaSERKS1_", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayE", "_ZN2cv9RodriguesERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_10", "_ZN2cv3ocl8internal10isCLBufferERNS_4UMatE", "_ZN2cv3maxERKNS_3MatES2_RS0_", "_ZN2cv5MutexD2Ev", "_ZN2cv17CascadeClassifierC1ERKNS_6StringE", "_Z19Mat_to_vector_ucharRN2cv3MatERSt6vectorIhSaIhEE", "Java_org_opencv_imgproc_Imgproc_createCLAHE_10", "_ZN2cv8Subdiv2D8QuadEdgeC1Ei", "_ZN2cv11mixChannelsEPKNS_3MatEjPS0_jPKij", "cvGetDims", "Java_org_opencv_ml_EM_getWeights_10", "_ZN2cv3ocl6finishEv", "_ZN2cv3ocl6KernelD2Ev", "_ZNK2cv12_OutputArray9fixedSizeEv", "_ZN2cv12buildPyramidERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv4cuda7HostMem7releaseEv", "_ZN2cv7putTextERKNS_17_InputOutputArrayERKNS_6StringENS_6Point_IiEEidNS_7Scalar_IdEEiib", "_ZN2cv28rotatedRectangleIntersectionERKNS_11RotatedRectES2_RKNS_12_OutputArrayE", "_ZN2cv9floodFillERKNS_17_InputOutputArrayENS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZN2cv6detail18GraphCutSeamFinderD0Ev", "_Unwind_GetLanguageSpecificData", "Java_org_opencv_core_Mat_n_1copyTo__JJ", "_ZNK2cv17CommandLineParser4Impl12split_stringERKNS_6StringEcb", "cvMul", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_getDetectShadows_10", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayE", "_ZN2cv7directx23convertToD3D10Texture2DERKNS_11_InputArrayEP15ID3D10Texture2D", "_ZN2cv9arcLengthERKNS_11_InputArrayEb", "_ZN2cveqERKNS_3MatES2_", "_ZN2cv16FileNodeIteratorC1ERKS0_", "cvIntegral", "Java_org_opencv_imgproc_Imgproc_erode_10", "Java_org_opencv_core_Core_addWeighted_10", "Java_org_opencv_photo_Photo_colorChange_11", "_ZN2cv9AlgorithmD2Ev", "Java_org_opencv_core_Core_bitwise_1or_11", "_ZN2cv11RNG_MT19937clEv", "Java_org_opencv_features2d_Features2d_drawMatches_11", "Java_org_opencv_core_Mat_n_1checkVector__JIIZ", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERSt6vectorIS4_INS_8KeyPointESaIS5_EESaIS7_EES3_", "cvRQDecomp3x3", "_ZN2cv3ocl5Queue10getDefaultEv", "_ZNK2cv3ocl6Device16image2DMaxHeightEv", "Java_org_opencv_core_Core_randShuffle_10", "Java_org_opencv_core_Core_solvePoly_11", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi", "_ZN10__cxxabiv117__pbase_type_infoD2Ev", "_ZNSt15__exception_ptr13exception_ptrD2Ev", "_ZN2cv4cuda5Event11elapsedTimeERKS1_S3_", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_10", "_ZN2cv8Subdiv2D11deletePointEi", "_ZN2cv12KalmanFilter4initEiiii", "_ZN2cv2ml9TrainData6createERKNS_11_InputArrayEiS4_S4_S4_S4_S4_", "Java_org_opencv_photo_CalibrateDebevec_setRandom_10", "_ZN2cv9videostab18ToFileMotionWriterC2ERKNS_6StringENS_3PtrINS0_24ImageMotionEstimatorBaseEEE", "_ZN2cv3ocl13ProgramSourceC1EPKc", "Java_org_opencv_imgproc_Imgproc_putText_12", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_11", "_ZN2cv21DetectionBasedTracker10ParametersC1Ev", "_ZNK2cv3ocl6Device7versionEv", "_ZN2cv6detail12DpSeamFinder16resolveConflictsERKNS_3MatES4_NS_6Point_IiEES6_RS2_S7_", "_ZN2cv11FileStorageC2ERKNS_6StringEiS3_", "__powisf2", "_ZNK2cv3Mat7reshapeEiiPKi", "_ZN10__cxxabiv119__foreign_exceptionD1Ev", "Java_org_opencv_ml_RTrees_getActiveVarCount_10", "_ZN2cv16findTransformECCERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEiNS_12TermCriteriaES2_", "_ZN2cv6detail12CameraParamsC2Ev", "_ZN2cv9videostab18LpMotionStabilizerC2ENS0_11MotionModelE", "Java_org_opencv_imgcodecs_Imgcodecs_imread_11", "_Z18Mat_to_vector_RectRN2cv3MatERSt6vectorINS_5Rect_IiEESaIS4_EE", "_ZN2cv6detail10Timelapser10initializeERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_5Size_IiEESaISA_EE", "Java_org_opencv_imgproc_Imgproc_integral2_10", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_10", "_ZN2cv3ocl7ProgramC1ERKS1_", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMax_10", "Java_org_opencv_photo_AlignExposures_delete", "_ZN2cv17validateDisparityERKNS_17_InputOutputArrayERKNS_11_InputArrayEiii", "Java_org_opencv_calib3d_StereoBM_getTextureThreshold_10", "_ZN2cv10moveWindowERKNS_6StringEii", "_ZN2cv9Feature2D16detectAndComputeERKNS_11_InputArrayES3_RSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayEb", "Java_org_opencv_video_KalmanFilter_set_1controlMatrix_10", "_ZN2cv11RNG_MT19937C1Ej", "_ZN2cv9SparseMat5eraseEiiiPj", "cvRectangle", "_ZNK2cv4cuda10DeviceInfo17maxTextureCubemapEv", "cvSetZero", "cvMorphologyEx", "_ZN2cv2ml9StatModel5trainERKNS_11_InputArrayEiS4_", "_ZN2cv21intersectConvexConvexERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "_ZN2cv16displayStatusBarERKNS_6StringES2_i", "_ZN2cv11createCLAHEEdNS_5Size_IiEE", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_11", "Java_org_opencv_ml_SVM_getDegree_10", "_ZN2cv3ocl9KernelArgC2EiPNS_4UMatEiiPKvj", "_ZN2cv9FormatterD0Ev", "_ZN2cv7inpaintERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC2ERS0_NS_3PtrINS0_9IDetectorEEE", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_dNS_6Point_IdEERKNS_17_InputOutputArrayE", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_10", "_ZNK2cv3ocl6Device17maxClockFrequencyEv", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD1Ev", "Java_org_opencv_features2d_DescriptorMatcher_create_10", "cvDiv", "_ZN2cv2ml9TrainData11loadFromCSVERKNS_6StringEiiiS4_cc", "cvGetQuadrangleSubPix", "_ZNK2cv3ocl12PlatformInfo12deviceNumberEv", "_ZN2cv3ipp12getIppStatusEv", "_ZN2cv6detail21resultRoiIntersectionERKSt6vectorINS_6Point_IiEESaIS3_EERKS1_INS_5Size_IiEESaIS9_EE", "_ZN2cv9BFMatcherC2Eib", "_ZN2cv3ocl13ProgramSourceC2ERKNS_6StringE", "Java_org_opencv_imgproc_LineSegmentDetector_delete", "Java_org_opencv_calib3d_Calib3d_undistortPoints_11", "Java_org_opencv_core_Core_SVDecomp_11", "_ZN2cv5flann14LshIndexParamsC2Eiii", "Java_org_opencv_photo_Photo_createMergeMertens_10", "_ZN2cv4UMat4diagERKS0_", "_ZN2cv11blendLinearERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "Java_org_opencv_imgproc_CLAHE_setClipLimit_10", "Java_org_opencv_photo_MergeDebevec_process_11", "_ZN2cv17agast_cornerScoreILi1EEEiPKhPKii", "_ZN2cv16BOWKMeansTrainerD1Ev", "_ZN2cv4UMatC2ERKS0_RKNS_5RangeES5_", "Java_org_opencv_imgproc_Imgproc_isContourConvex_10", "_ZN2cv6detail19createLaplacePyrGpuERKNS_11_InputArrayEiRSt6vectorINS_4UMatESaIS5_EE", "_ZN2cv10HoughLinesERKNS_11_InputArrayERKNS_12_OutputArrayEddidddd", "cvReleasePyramid", "cvAcc", "cvUpdateWindow", "_ZdaPv", "_ZN2cv23evaluateFeatureDetectorERKNS_3MatES2_S2_PSt6vectorINS_8KeyPointESaIS4_EES7_RfRiRKNS_3PtrINS_9Feature2DEEE", "_ZN2cv8Stitcher17estimateTransformERKNS_11_InputArrayE", "_ZN2cv4cuda7HostMem6createEiii", "cvClearMemStorage", "_ZN2cv9AlgorithmC2Ev", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayERNS_4cuda6StreamE", "Java_org_opencv_imgproc_Subdiv2D_insert_11", "cvOpenFileStorage", "_ZN2cv31createRANSACPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEiddi", "_ZN2cv8superres28createFrameSource_Video_CUDAERKNS_6StringE", "Java_org_opencv_ml_ANN_1MLP_getBackpropMomentumScale_10", "Java_org_opencv_core_Core_reduce_10", "cvSet1D", "_ZN2cv3ocl12PlatformInfoC2ERKS1_", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEiRNS0_12ObjectStatusE", "Java_org_opencv_core_Mat_nPutS", "_ZN2cv9videostab20GaussianMotionFilter9setParamsEif", "_ZN2cv7directx27convertFromDirect3DSurface9EP17IDirect3DSurface9RKNS_12_OutputArrayEPv", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayES4_b", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_12", "_ZN2cvmlERKNS_3MatES2_", "_ZN2cv3ocl23checkOptimalVectorWidthEPKiRKNS_11_InputArrayES5_S5_S5_S5_S5_S5_S5_S5_NS0_17OclVectorStrategyE", "_ZN2cv8Subdiv2DC2Ev", "cvSetErrStatus", "_ZN2cvmiERKNS_7MatExprES2_", "_ZN2cv17FlannBasedMatcherC2ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "_ZN2cv6detail17stitchingLogLevelEv", "_ZN2cv23getPerspectiveTransformERKNS_11_InputArrayES2_", "Java_org_opencv_core_Core_sqrt_10", "Java_org_opencv_ml_TrainData_getNVars_10", "_ZN2cv11FileStorage7releaseEv", "_ZN2cv6imshowERKNS_6StringERKNS_11_InputArrayE", "_ZN2cv25getDefaultNewCameraMatrixERKNS_11_InputArrayENS_5Size_IiEEb", "cvGoodFeaturesToTrack", "_ZN2cv9videostab25ConsistentMosaicInpainter7inpaintEiRNS_3MatES3_", "cvUndistortPoints", "Java_org_opencv_video_BackgroundSubtractorKNN_getkNNSamples_10", "Java_org_opencv_core_Mat_n_1size", "_ZN2cv3MatC1ERKS0_PKNS_5RangeE", "cvCreateCameraCapture", "_ZNK2cv4UMat3invEi", "Java_org_opencv_imgproc_Imgproc_warpAffine_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_delete", "cvPyrUp", "_ZN2cv8superres27createSuperResolution_BTVL1Ev", "_ZN2cv9videostab18InpaintingPipeline9setFramesERKSt6vectorINS_3MatESaIS3_EE", "cvRange", "_ZNK2cv3ocl6Device21maxConstantBufferSizeEv", "_ZN2cv4readERKNS_8FileNodeERNS_6StringERKS3_", "_ZN2cv4KAZE6createEbbfiii", "Java_org_opencv_ml_KNearest_getEmax_10", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_10", "Java_org_opencv_imgproc_Imgproc_pyrDown_12", "_ZN2cv3ocl6KernelC1EPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "_ZN2cv17destroyAllWindowsEv", "Java_org_opencv_objdetect_HOGDescriptor_load_10", "Java_org_opencv_ml_StatModel_isTrained_10", "cvTrace", "_ZNK2cv3ocl6Device24preferredVectorWidthHalfEv", "_ZN2cv9videostab14calcBlurrinessERKNS_3MatE", "_ZN2cv3Mat6resizeEjRKNS_7Scalar_IdEE", "__register_frame_info", "_ZN2cv5flann20AutotunedIndexParamsC1Effff", "_ZN2cv10BOWTrainerD2Ev", "_ZN2cv11RNG_MT19937C2Ej", "cvWarpPerspective", "_ZN2cv10checkRangeERKNS_11_InputArrayEbPNS_6Point_IiEEdd", "__deregister_frame_info", "_ZN2cv15extractImageCOIEPKvRKNS_12_OutputArrayEi", "cvCornerMinEigenVal", "Java_org_opencv_photo_TonemapDrago_getBias_10", "Java_org_opencv_core_Mat_n_1diag__J", "Java_org_opencv_photo_TonemapDurand_setSaturation_10", "Java_org_opencv_imgproc_Imgproc_rotatedRectangleIntersection_10", "_ZN2cv11colorChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEfff", "cvLUT", "_ZNK2cv3ocl6Device22nativeVectorWidthShortEv", "Java_org_opencv_imgproc_Imgproc_equalizeHist_10", "Java_org_opencv_calib3d_Calib3d_stereoRectify_13", "_ZN2cv17CascadeClassifier4loadERKNS_6StringE", "Java_org_opencv_ml_SVM_getNu_10", "Java_org_opencv_ml_TrainData_getClassLabels_10", "_ZN2cv3ocl10haveOpenCLEv", "cvBoundingRect", "cvCalcOpticalFlowPyrLK", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_7ProgramE", "Java_org_opencv_ml_KNearest_setEmax_10", "_ZN2cv9SparseMat3ptrEiibPj", "_ZN2cv7MomentsC1Edddddddddd", "cvGetImageROI", "Java_org_opencv_photo_Photo_createMergeRobertson_10", "_ZN2cv8Subdiv2D12initDelaunayENS_5Rect_IiEE", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_12", "_ZN2cv4idftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv6detail17VoronoiSeamFinder4findERKSt6vectorINS_4UMatESaIS3_EERKS2_INS_6Point_IiEESaIS9_EERS5_", "Java_org_opencv_photo_Photo_denoise_1TVL1_11", "cvSeqSlice", "cvStartWriteStruct", "Java_org_opencv_imgproc_Imgproc_warpAffine_12", "Java_org_opencv_imgproc_Imgproc_arrowedLine_10", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMinus_10", "_ZN2cv3Mat5zerosEiPKii", "_ZN2cv2ml18LogisticRegression6createEv", "Java_org_opencv_core_Mat_n_1diag__JI", "_ZNK2cv5MatOp8subtractERKNS_7Scalar_IdEERKNS_7MatExprERS5_", "cvSetOpenGlDrawCallback", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_10", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_10", "_ZN2cv2ml9ParamGridC2Ev", "_ZNK2cv3ocl6Device15maxConstantArgsEv", "cvFitLine", "_ZN2cv16FileNodeIteratorC1EPK13CvFileStoragePK10CvFileNodej", "Java_org_opencv_ml_RTrees_setActiveVarCount_10", "Java_org_opencv_video_DenseOpticalFlow_delete", "_ZN2cv17DescriptorMatcherD2Ev", "cvGetThreadNum", "_ZNK2cv9SparseMat9convertToERS0_id", "Java_org_opencv_core_Mat_n_1Mat__JIIII", "_ZN2cv11HoughLinesPERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_10", "cvFastArctan", "cvCreateGraphScanner", "_ZNK2cv13HOGDescriptor11getWinSigmaEv", "_ZN2cv6detail14FeatherBlender5blendERKNS_17_InputOutputArrayES4_", "_ZN2cv6detail15FeaturesMatcherclERKSt6vectorINS0_13ImageFeaturesESaIS3_EERS2_INS0_11MatchesInfoESaIS8_EERKNS_4UMatE", "_ZNSt9bad_allocD2Ev", "_ZN2cv5flann5Index7releaseEv", "_ZN2cv6detail18GraphCutSeamFinderD1Ev", "cvSetImageCOI", "Java_org_opencv_objdetect_CascadeClassifier_load_10", "cvCompleteSymm", "_ZN2cv3ogl9Texture2DC2ERKNS_11_InputArrayEb", "_ZN2cv9videostab19NullOutlierRejector7processENS_5Size_IiEERKNS_11_InputArrayES6_RKNS_12_OutputArrayE", "_ZNK2cv5MatOp3addERKNS_7MatExprES3_RS1_", "_ZN2cv3ocl13ProgramSourceC1ERKS1_", "_ZNK2cv17DescriptorMatcher20DescriptorCollection14getDescriptorsEv", "cvCreateStereoBMState", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEid", "Java_org_opencv_ml_DTrees_setMaxCategories_10", "_ZNK2cv5MatOp9transposeERKNS_7MatExprERS1_", "_ZNK2cv12_OutputArray6createENS_5Size_IiEEiibi", "Java_org_opencv_core_Core_split_10", "Java_org_opencv_ml_TrainData_getResponseType_10", "_ZNK2cv11_InputArray8sameSizeERKS0_", "Java_org_opencv_imgproc_Imgproc_invertAffineTransform_10", "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", "cvQueryFrame", "_ZN2cv6detail29restoreImageFromLaplacePyrGpuERSt6vectorINS_4UMatESaIS2_EE", "cvReprojectImageTo3D", "Java_org_opencv_photo_TonemapMantiuk_getScale_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setDetectShadows_10", "cvRedirectError", "Java_org_opencv_core_Mat_n_1dataAddr", "_ZNK2cv3ocl6Device15maxWorkItemDimsEv", "_ZN2cv4cuda6GpuMat7releaseEv", "cvWriteRawData", "_ZN2cv5flann11IndexParamsC1Ev", "Java_org_opencv_features2d_DescriptorMatcher_match_10", "Java_org_opencv_imgproc_Imgproc_dilate_10", "Java_org_opencv_ml_DTrees_setMinSampleCount_10", "_ZN2cv3ocl6Kernel3setEiRKNS_4UMatE", "_ZNSt10bad_typeidD0Ev", "Java_org_opencv_core_Core_subtract_12", "Java_org_opencv_photo_CalibrateDebevec_getSamples_10", "Java_org_opencv_ml_KNearest_getDefaultK_10", "Java_org_opencv_ml_TrainData_getNTrainSamples_10", "_ZN2cv8Subdiv2D7newEdgeEv", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5Rect_IiEE", "cvShowImage", "Java_org_opencv_core_Core_borderInterpolate_10", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5RangeES4_", "cvCvtColor", "Java_org_opencv_video_KalmanFilter_KalmanFilter_10", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiifii", "_ZN2cv11VideoWriter3setEid", "_ZN2cv3ogl6Arrays7releaseEv", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_11", "_ZN2cv5flann14LshIndexParamsC1Eiii", "_ZN2cv6detail12DpSeamFinder9findEdgesEv", "_Z21Mat_to_vector_Point3iRN2cv3MatERSt6vectorINS_7Point3_IiEESaIS4_EE", "_ZNK2cv3ocl12PlatformInfo7versionEv", "cvStartWindowThread", "_ZN2cv17startWindowThreadEv", "Java_org_opencv_photo_AlignMTB_setMaxBits_10", "_ZN2cv11bitwise_xorERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "Java_org_opencv_core_Core_add_13", "cvSetRemove", "_ZN2cv4UMat15getStdAllocatorEv", "_ZN2cv11demosaicingERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_10", "_Z19Mat_to_vector_floatRN2cv3MatERSt6vectorIfSaIfEE", "_ZN2cv2ml9TrainDataD2Ev", "_ZN2cv21BaseCascadeClassifierD0Ev", "Java_org_opencv_features2d_DescriptorMatcher_match_13", "_ZN2cv20checkHardwareSupportEi", "_ZN2cv3ocl6DeviceC1Ev", "Java_org_opencv_core_Mat_n_1create__JIII", "_ZNK2cv13HOGDescriptor15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS3_EERS1_IdSaIdEEid", "Java_org_opencv_photo_Photo_createCalibrateRobertson_11", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_12", "_ZNK2cv4cuda10DeviceInfo8memPitchEv", "Java_org_opencv_core_Mat_n_1mul__JJ", "Java_org_opencv_ml_SVM_setNu_10", "_ZNK2cv4cuda10DeviceInfo10ECCEnabledEv", "_ZN2cv9ExceptionC2Ev", "Java_org_opencv_core_Core_add_15", "_ZNK2cv17CommandLineParser3hasERKNS_6StringE", "_ZN2cv10cvarrToMatEPKvbbiPNS_10AutoBufferIdLj136EEE", "Java_org_opencv_ml_DTrees_getCVFolds_10", "_ZNK2cv5flann5Index4saveERKNS_6StringE", "_ZNK2cv3ocl7Image2D3ptrEv", "_ZN2cv5Mutex6unlockEv", "_ZN2cv6formatEPKcz", "_ZN9CvLevMarqD1Ev", "_ZN2cv10bitwise_orERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "Java_org_opencv_imgproc_Subdiv2D_getVoronoiFacetList_10", "_ZN2cv3MatC1ERKS0_RKNS_5Rect_IiEE", "_ZN2cvdvERKNS_3MatES2_", "_ZNK2cv3Mat5crossERKNS_11_InputArrayE", "_ZNK2cv9SparseMat6copyToERNS_3MatE", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_11", "cvSetHistBinRanges", "_ZN2cv10BriskLayerC2ERKNS_3MatEff", "Java_org_opencv_core_Core_bitwise_1xor_11", "cvSolve", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_10", "Java_org_opencv_ml_Boost_getWeightTrimRate_10", "_ZNK2cv4cuda10DeviceInfo19maxTexture2DLayeredEv", "_ZN2cv9SparseMat3Hdr5clearEv", "_ZN2cvmiERKNS_3MatERKNS_7Scalar_IdEE", "_ZNK2cv13HOGDescriptor17getDescriptorSizeEv", "Java_org_opencv_calib3d_Calib3d_validateDisparity_11", "Java_org_opencv_ml_StatModel_empty_10", "Java_org_opencv_photo_Tonemap_delete", "_ZNK2cv3ocl6Device22nativeVectorWidthFloatEv", "Java_org_opencv_core_Core_min_10", "_ZN2cv3SVD9backSubstERKNS_11_InputArrayES3_S3_S3_RKNS_12_OutputArrayE", "cvCloneGraph", "__gcclibcxx_demangle_callback", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_12", "_ZN2cv16FileNodeIteratorC2Ev", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_10", "_ZNK2cv5MatOp3addERKNS_7MatExprERKNS_7Scalar_IdEERS1_", "_ZN2cv15calcBackProjectERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayERKS3_IfSaIfEEd", "cvGetRectSubPix", "_ZNK2cv2ml6KDTree11findNearestERKNS_11_InputArrayEiiRKNS_12_OutputArrayES7_S7_S7_", "_ZN2cv3Mat4onesENS_5Size_IiEEi", "Java_org_opencv_ml_KNearest_getIsClassifier_10", "Java_org_opencv_photo_TonemapDurand_getSaturation_10", "_ZN2cv15NAryMatIteratorppEv", "_ZN2cv6detail12DpSeamFinder4findERKSt6vectorINS_4UMatESaIS3_EERKS2_INS_6Point_IiEESaIS9_EERS5_", "_ZN2cv3maxERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_undistort_10", "_ZNSt15__exception_ptr13exception_ptrC2ERKS0_", "_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_", "_ZNK2cv3ocl7Context8ndevicesEv", "_ZN2cv4normERKNS_9SparseMatEi", "_ZN2cv17agast_cornerScoreILi2EEEiPKhPKii", "Java_org_opencv_calib3d_StereoBM_delete", "_ZN2cv3LDAC2Ei", "_ZNK2cv3Mat3invEi", "cvNot", "_ZN2cv9videostab17TwoPassStabilizer14estimateMotionEv", "_ZN2cv8scaleAddERKNS_11_InputArrayEdS2_RKNS_12_OutputArrayE", "_ZN2cv5flann17KMeansIndexParamsC2EiiN7cvflann20flann_centers_init_tEf", "_Unwind_Resume_or_Rethrow", "Java_org_opencv_ml_LogisticRegression_setTrainMethod_10", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_11", "_ZN2cv3ocl8PlatformD2Ev", "Java_org_opencv_calib3d_Calib3d_stereoRectify_11", "cvPtr2D", "cvConvertScale", "Java_org_opencv_photo_MergeRobertson_process_10", "_ZNK2cv16MatConstIterator3posEv", "_ZNK2cv8FileNodeixERKNS_6StringE", "_ZN2cv4UMat4onesEiii", "_ZN2cv11minAreaRectERKNS_11_InputArrayE", "_ZNK2cv3ocl6Device22globalMemCacheLineSizeEv", "_ZN2cv8superres15SuperResolution14collectGarbageEv", "_ZN2cv8Stitcher11matchImagesEv", "_ZN2cv4readERKNS_8FileNodeERdd", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_11", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_11", "Java_org_opencv_core_Core_SVDecomp_10", "_ZN2cv17CommandLineParserD1Ev", "_ZNK2cv7MatExpr4typeEv", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2ERKS1_", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_11", "_ZThn384_N2cv9videostab17OnePassStabilizer5resetEv", "_ZN2cv9transformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv16FileNodeIteratormIEi", "_ZN2cv9SparseMat3HdrC1EiPKii", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_10", "_ZN2cv7directx23convertToD3D11Texture2DERKNS_11_InputArrayEP15ID3D11Texture2D", "_ZN2cv6detail24HomographyBasedEstimator8estimateERKSt6vectorINS0_13ImageFeaturesESaIS3_EERKS2_INS0_11MatchesInfoESaIS8_EERS2_INS0_12CameraParamsESaISD_EE", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5RangeES4_", "Java_org_opencv_core_Mat_n_1Mat__JII", "Java_org_opencv_video_BackgroundSubtractorKNN_setHistory_10", "_ZN2cvanERKNS_7Scalar_IdEERKNS_3MatE", "_ZN2cv6detail7Blender13createDefaultEib", "_ZN2cv16FileNodeIteratorppEv", "_ZN2cv9videostab18InpaintingPipeline23setStabilizationMotionsERKSt6vectorINS_3MatESaIS3_EE", "_ZN2cv3ogl9Texture2DC2ENS_5Size_IiEENS1_6FormatEjb", "_Z27Mat_to_vector_vector_DMatchRN2cv3MatERSt6vectorIS2_INS_6DMatchESaIS3_EESaIS5_EE", "cvGet3D", "_ZNK2cv2ml9StatModel5emptyEv", "_ZNK2cv4cuda10DeviceInfo24maxTextureCubemapLayeredEv", "_ZNK2cv9Exception4whatEv", "_ZN2cv8clipLineENS_5Size_IiEERNS_6Point_IiEES4_", "_ZNK2cv12_OutputArray10getUMatRefEi", "_ZNK2cv11_InputArray12isContinuousEi", "_ZN2cv13HOGDescriptor24getDaimlerPeopleDetectorEv", "_ZN2cv5AKAZE6createEiiifiii", "__register_frame", "_ZN2cv7fisheye15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_", "cvInitLineIterator", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_10", "_ZN2cv9BFMatcher12knnMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "cvPyrDown", "Java_org_opencv_imgproc_Imgproc_HoughLines_10", "Java_org_opencv_imgproc_Imgproc_warpAffine_10", "cvGetRootFileNode", "_ZN2cv8UMatData6unlockEv", "cvDilate", "_ZN2cv8Subdiv2D8QuadEdgeC2Ev", "_Z25cvHaarDetectObjectsForROCPKvP23CvHaarClassifierCascadeP12CvMemStorageRSt6vectorIiSaIiEERS5_IdSaIdEEdii6CvSizeSC_b", "_ZNK2cv3ocl6Device20nativeVectorWidthIntEv", "_ZNK2cv4UMat4diagEi", "Java_org_opencv_objdetect_HOGDescriptor_get_1gammaCorrection_10", "_ZN2cv9minMaxLocERKNS_9SparseMatEPdS3_PiS4_", "_ZN2cv6detail11PlaneWarper7warpRoiENS_5Size_IiEERKNS_11_InputArrayES6_", "Java_org_opencv_imgproc_Imgproc_pyrDown_10", "_ZNK2cv3ocl6Device15image3DMaxDepthEv", "_ZNK2cv3ocl6Kernel3ptrEv", "_ZN2cv4cuda6GpuMat16defaultAllocatorEv", "_ZN2cv9boxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "_ZNK2cv10BOWTrainer16descriptorsCountEv", "_ZN2cv9videostab18FastMarchingMethod13heapRemoveMinEv", "Java_org_opencv_core_Core_idct_11", "_ZN2cv5flann11IndexParams12setAlgorithmEi", "cvCloneImage", "_ZN2cvmlERKNS_3MatEd", "_ZN2cv9videostab36TranslationBasedLocalOutlierRejector7processENS_5Size_IiEERKNS_11_InputArrayES6_RKNS_12_OutputArrayE", "cvMakeSeqHeaderForArray", "cvMatchTemplate", "_ZN2cv6detail18SurfFeaturesFinderC2Ediiii", "Java_org_opencv_imgproc_Imgproc_erode_11", "Java_org_opencv_ml_ANN_1MLP_setBackpropMomentumScale_10", "_ZN2cv3ogl6Arrays16setTexCoordArrayERKNS_11_InputArrayE", "_ZN2cv11writeScalarERNS_11FileStorageERKNS_6StringE", "cvDrawContours", "_ZN2cv2ml6KDTreeC2Ev", "_ZN2cv23initUndistortRectifyMapERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEEiRKNS_12_OutputArrayES7_", "Java_org_opencv_ml_DTrees_setRegressionAccuracy_10", "_ZNK2cv3ocl13ProgramSource6sourceEv", "cvWrite", "_ZN2cv11FileStorage4openERKNS_6StringEiS3_", "Java_org_opencv_imgproc_Imgproc_Laplacian_11", "Java_org_opencv_photo_TonemapDrago_delete", "_ZN2cv6detail19ExposureCompensator4feedERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_4UMatESaIS9_EESD_", "_ZN2cv6detail12DpSeamFinder12computeCostsERKNS_3MatES4_NS_6Point_IiEES6_iRNS_4Mat_IfEES9_", "Java_org_opencv_imgproc_Imgproc_distanceTransform_10", "Java_org_opencv_features2d_DescriptorExtractor_descriptorType_10", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DLinearEv", "_ZN2cv8Stitcher13createDefaultEb", "Java_org_opencv_ml_LogisticRegression_predict_10", "_Z17vector_Mat_to_MatRSt6vectorIN2cv3MatESaIS1_EERS1_", "Java_org_opencv_imgproc_Imgproc_integral_11", "Java_org_opencv_calib3d_StereoSGBM_getPreFilterCap_10", "_ZN2cv4cuda28getCudaDriverApiErrorMessageEi", "_ZNK2cv12MatAllocator23getBufferPoolControllerEPKc", "Java_org_opencv_imgproc_Imgproc_Scharr_12", "Java_org_opencv_calib3d_StereoSGBM_setMode_10", "__dynamic_cast", "_ZN2cv11determinantERKNS_11_InputArrayE", "_ZN2cv9videostab18FastMarchingMethod8heapDownEi", "_ZN2cv13insertChannelERKNS_11_InputArrayERKNS_17_InputOutputArrayEi", "Java_org_opencv_core_Mat_n_1ones__III", "_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv", "Java_org_opencv_ml_DTrees_getPriors_10", "Java_org_opencv_ml_SVM_setKernel_10", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_10", "cvStartReadSeq", "cvCreateImage", "cvPolyLine", "cvInitSparseMatIterator", "Java_org_opencv_core_Core_PCACompute_12", "_ZN2cv9undistortERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_", "Java_org_opencv_imgproc_Imgproc_undistort_11", "_ZN2cv12findContoursERKNS_17_InputOutputArrayERKNS_12_OutputArrayES5_iiNS_6Point_IiEE", "Java_org_opencv_calib3d_Calib3d_validateDisparity_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMin_10", "_ZN2cv8superres15SuperResolutionC1Ev", "_ZN2cv3ogl6Arrays16resetVertexArrayEv", "Java_org_opencv_core_Core_PCAProject_10", "Java_org_opencv_imgproc_Imgproc_ellipse_15", "_ZN2cv3LDA4loadERKNS_11FileStorageE", "_ZNK2cv7MatExprclERKNS_5Rect_IiEE", "Java_org_opencv_calib3d_Calib3d_drawChessboardCorners_10", "_ZN2cvplERKNS_7MatExprES2_", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_ibd", "_ZN2cv6detail20CylindricalWarperGpu9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RNS_4cuda6GpuMatES9_", "_ZN2cv32createNormHistogramCostExtractorEiif", "_ZN2cv3ocl12PlatformInfoC1Ev", "_ZN2cv9videostab17WeightingDeblurerC1Ev", "_ZN7CvMatNDC2ERKN2cv3MatE", "Java_org_opencv_ml_LogisticRegression_getIterations_10", "Java_org_opencv_core_Core_setIdentity_11", "Java_org_opencv_calib3d_Calib3d_stereoRectify_10", "_ZN2cvgtERKNS_3MatEd", "_ZN2cv8Subdiv2D11calcVoronoiEv", "Java_org_opencv_objdetect_Objdetect_groupRectangles_10", "Java_org_opencv_ml_KNearest_getAlgorithmType_10", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERSt6vectorIS4_INS_8KeyPointESaIS5_EESaIS7_EERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_12", "Java_org_opencv_ml_NormalBayesClassifier_create_10", "_ZNK2cv3ocl6Device10vendorNameEv", "_ZN2cv5flann11IndexParams6setIntERKNS_6StringEi", "Java_org_opencv_ml_TrainData_getNTestSamples_10", "_ZN2cv3ocl5QueueC1Ev", "_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_", "cvPow", "cvGuiBoxReport", "_ZN2cv12VideoCaptureC2Ei", "cvFree_", "_ZN2cv17setWindowPropertyERKNS_6StringEid", "_ZN2cv7seqPushEP5CvSeqPKv", "Java_org_opencv_objdetect_CascadeClassifier_convert_10", "_ZNK2cv3ocl6Device15maxComputeUnitsEv", "Java_org_opencv_ml_EM_getClustersNumber_10", "_ZN10__cxxabiv123__fundamental_type_infoD0Ev", "_ZN2cv8Subdiv2D6VertexC2ENS_6Point_IfEEbi", "_ZN2cv4cuda27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffiiRNS0_6StreamE", "_ZN2cv14getTrackbarPosERKNS_6StringES2_", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EES2_S8_RKS3_INS_6DMatchESaIS9_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESK_RKS3_IcSaIcEEi", "_ZNSt8bad_castD1Ev", "Java_org_opencv_ml_EM_trainEM_10", "Java_org_opencv_core_Core_convertScaleAbs_10", "cvGetElemType", "_ZN2cv9LaplacianERKNS_11_InputArrayERKNS_12_OutputArrayEiiddi", "cvCopyHist", "__register_frame_info_table_bases", "_ZN2cv9videostab36TranslationBasedLocalOutlierRejectorC1Ev", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_10", "_ZN2cv9videostab11LogToStdout5printEPKcz", "Java_org_opencv_imgproc_Imgproc_drawContours_11", "_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj", "_ZNK2cv3ocl6Device12localMemSizeEv", "_ZN2cv8Subdiv2D6VertexC1Ev", "_ZNK2cv4cuda10DeviceInfo16textureAlignmentEv", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_11", "Java_org_opencv_core_Core_mulTransposed_11", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_14", "cvKalmanCorrect", "_ZN2cv15BriskScaleSpace16constructPyramidERKNS_3MatE", "cvCloneMat", "Java_org_opencv_imgproc_Imgproc_ellipse_14", "cvAttrValue", "cvStartFindContours", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_10", "Java_org_opencv_core_Core_subtract_15", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork23workcycleObjectDetectorEv", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_10", "_ZN2cv11writeScalarERNS_11FileStorageEf", "_ZN2cv23calibrationMatrixValuesERKNS_11_InputArrayENS_5Size_IiEEddRdS5_S5_RNS_6Point_IdEES5_", "Java_org_opencv_calib3d_StereoBM_create_11", "Java_org_opencv_ml_ANN_1MLP_delete", "_ZN2cv5solveERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "_ZN2cv13batchDistanceERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS5_iiS2_ib", "Java_org_opencv_calib3d_Calib3d_estimateNewCameraMatrixForUndistortRectify_10", "_ZN2cv17FlannBasedMatcher17convertToDMatchesERKNS_17DescriptorMatcher20DescriptorCollectionERKNS_3MatES7_RSt6vectorIS8_INS_6DMatchESaIS9_EESaISB_EE", "_ZN2cv13HOGDescriptor24getDefaultPeopleDetectorEv", "Java_org_opencv_core_Core_polarToCart_10", "Java_org_opencv_core_Core_bitwise_1and_11", "_ZN2cv3ogl9Texture2D14setAutoReleaseEb", "_ZN2cv17CascadeClassifier7convertERKNS_6StringES3_", "Java_org_opencv_calib3d_StereoMatcher_getNumDisparities_10", "_ZNK2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayES3_RSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "_ZN2cv7fisheye23initUndistortRectifyMapERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEEiRKNS_12_OutputArrayESA_", "_Z20vector_DMatch_to_MatRSt6vectorIN2cv6DMatchESaIS1_EERNS0_3MatE", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DMipmapEv", "_ZN2cv8internal15IntrinsicParamsplERKNS_3MatE", "_ZN2cv12boundingRectERKNS_11_InputArrayE", "_ZN2cveqERKNS_3MatEd", "_ZN2cv4cuda11getInputMatERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_ml_DTrees_setMaxDepth_10", "_ZN10__cxxabiv116__enum_type_infoD1Ev", "_ZN2cv6detail18GraphCutSeamFinder4Impl24setGraphWeightsColorGradERKNS_3MatES5_S5_S5_S5_S5_S5_S5_R7GCGraphIfE", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2Ev", "_Z21vector_Point2d_to_MatRSt6vectorIN2cv6Point_IdEESaIS2_EERNS0_3MatE", "_ZN9CvLevMarqC1Ev", "Java_org_opencv_imgproc_CLAHE_collectGarbage_10", "Java_org_opencv_ml_Boost_setWeakCount_10", "Java_org_opencv_core_Core_vconcat_10", "Java_org_opencv_objdetect_HOGDescriptor_detect_11", "cvXorS", "_ZN2cv3ocl8PlatformC1Ev", "Java_org_opencv_objdetect_CascadeClassifier_empty_10", "_ZN2cv6detail11waveCorrectERSt6vectorINS_3MatESaIS2_EENS0_15WaveCorrectKindE", "_ZN9_IplImageC1ERKN2cv3MatE", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IiSaIiEEdiiNS_5Size_IiEESE_", "Java_org_opencv_core_Core_reduce_11", "_ZNK2cv4cuda10DeviceInfo11queryMemoryERjS2_", "_ZN2cv17CascadeClassifierC2ERKNS_6StringE", "_ZN2cv6detail5Graph7addEdgeEiif", "_ZN2cv9videostab15MotionInpainter7inpaintEiRNS_3MatES3_", "cvAbsDiff", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleWindowSize_10", "Java_org_opencv_video_BackgroundSubtractor_getBackgroundImage_10", "Java_org_opencv_ml_TrainData_getVarType_10", "cvSeqPopFront", "cvEstimateRigidTransform", "_ZSt15set_new_handlerPFvvE", "_ZN2cv12sqrBoxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "_ZN2cv11VideoWriterC1Ev", "_ZN2cv4UMataSERKNS_7Scalar_IdEE", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayEPS4_IS4_IiSaIiEESaISD_EEPNS_3MatE", "_ZN2cv7compareERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "_ZNKSt8bad_cast4whatEv", "cvRestoreMemStoragePos", "Java_org_opencv_calib3d_Calib3d_decomposeEssentialMat_10", "Java_org_opencv_core_Core_PSNR_10", "cvGraphVtxDegreeByPtr", "_ZN2cv3ocl7ContextD1Ev", "_ZN2cv3ogl9Texture2DC1ERKNS_11_InputArrayEb", "_ZN2cv7directx22getTypeFromDXGI_FORMATEi", "cvGetHuMoments", "Java_org_opencv_objdetect_HOGDescriptor_get_1nlevels_10", "_ZN2cv6detail10Timelapser7processERKNS_11_InputArrayES4_NS_6Point_IiEE", "Java_org_opencv_core_Core_compare_11", "Java_org_opencv_imgproc_Imgproc_integral_10", "Java_org_opencv_ml_Boost_create_10", "_ZNK2cv3ocl6Device13driverVersionEv", "cvCreateButton", "_ZN2cv6detail17OrbFeaturesFinder4findERKNS_11_InputArrayERNS0_13ImageFeaturesE", "_ZN2cv2ml6DTrees4NodeC1Ev", "_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj", "_ZN2cv9videostab16MotionFilterBase9stabilizeEiRKSt6vectorINS_3MatESaIS3_EESt4pairIiiEPS3_", "cvInitUndistortRectifyMap", "Java_org_opencv_core_Core_completeSymm_10", "_ZN2cv21DetectionBasedTrackerD2Ev", "Java_org_opencv_core_Mat_nGetB", "_ZN2cv5flann17KMeansIndexParamsC1EiiN7cvflann20flann_centers_init_tEf", "_ZN2cv17getWindowPropertyERKNS_6StringEi", "Java_org_opencv_calib3d_StereoMatcher_getBlockSize_10", "_Unwind_GetTextRelBase", "Java_org_opencv_ml_DTrees_delete", "Java_org_opencv_objdetect_HOGDescriptor_getDescriptorSize_10", "_ZN2cv17DescriptorMatcher11isMaskedOutERKNS_11_InputArrayEi", "_ZN2cv14copyMakeBorderERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiiRKNS_7Scalar_IdEE", "_ZNK2cv3ocl6Device21executionCapabilitiesEv", "_ZN2cv17agast_cornerScoreILi3EEEiPKhPKii", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_10", "_ZN2cv9meanShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "_ZN2cv9BFMatcher15radiusMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "Java_org_opencv_core_Mat_n_1create__JDDI", "_ZNK2cv4cuda10DeviceInfo12maxSurface3DEv", "_ZN2cv18createTonemapDragoEfff", "_ZN2cv15BriskScaleSpaceD2Ev", "_ZN2cv6detail14TimelapserCrop10initializeERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_5Size_IiEESaISA_EE", "Java_org_opencv_calib3d_StereoBM_setROI2_10", "_ZNK2cv12_OutputArray5setToERKNS_11_InputArrayES3_", "Java_org_opencv_imgproc_Imgproc_logPolar_10", "_ZN2cv7sortIdxERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv11RNG_MT19937clEj", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_17DescriptorMatcherEEE", "cvHaveImageWriter", "__deregister_frame_info_bases", "_ZN2cv12KalmanFilter7correctERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_getAffineTransform_10", "Java_org_opencv_features2d_Features2d_drawMatches2_11", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DGatherEv", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprEdRS1_", "_ZN2cv3Mat7reserveEj", "_ZN2cv6detail17OrbFeaturesFinderC2ENS_5Size_IiEEifi", "_ZN2cv11FileStorageC1Ev", "cvRead", "_ZN2cv9videostab17TwoPassStabilizer5resetEv", "_Z18vector_Rect_to_MatRSt6vectorIN2cv5Rect_IiEESaIS2_EERNS0_3MatE", "_ZN2cv3ocl7Image2DD1Ev", "_ZN2cv14extractChannelERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv11compareHistERKNS_9SparseMatES2_i", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterPtxEii", "_ZN2cv10warpAffineERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "cvErrorStr", "_ZN2cv3MatC2ERKS0_RKNS_5RangeES5_", "_ZN2cv9Feature2DD2Ev", "cvMemStorageAlloc", "Java_org_opencv_videoio_VideoCapture_VideoCapture_10", "cvSetSeqBlockSize", "Java_org_opencv_ml_DTrees_setCVFolds_10", "_ZN2cv27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffii", "_ZN2cv8clearSeqEP5CvSeq", "Java_org_opencv_core_Mat_n_1checkVector__JI", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DMipmapEv", "_ZN2cv6detail12DisjointSets17createOneElemSetsEi", "_ZN2cv21setOpenGlDrawCallbackERKNS_6StringEPFvPvES3_", "_ZNK2cv4cuda10DeviceInfo10integratedEv", "_ZNK2cv4cuda10DeviceInfo14memoryBusWidthEv", "Java_org_opencv_core_Mat_n_1assignTo__JJ", "Java_org_opencv_imgproc_Subdiv2D_getEdge_10", "cvGetReal2D", "_ZN2cv5MatOpC2Ev", "_ZN2cv9videostab15VideoFileSource3fpsEv", "_ZN2cv10accumulateERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "Java_org_opencv_calib3d_Calib3d_initUndistortRectifyMap_10", "_ZN2cv6divideEdRKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv3ogl6Buffer11unmapDeviceEv", "Java_org_opencv_objdetect_HOGDescriptor_detect_10", "_ZN2cv3ogl6Arrays14setAutoReleaseEb", "_ZN2cv11VideoWriterC1ERKNS_6StringEidNS_5Size_IiEEb", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork4stopEv", "Java_org_opencv_imgproc_Imgproc_undistortPoints_11", "_ZNK2cv11_InputArray4stepEi", "_ZN2cv8internal15IntrinsicParamsaSERKNS_3MatE", "_Unwind_GetIP", "cvSet2D", "Java_org_opencv_video_KalmanFilter_delete", "Java_org_opencv_ml_SVM_setType_10", "Java_org_opencv_photo_TonemapDurand_delete", "cvKalmanPredict", "_ZN2cv12KalmanFilter7predictERKNS_3MatE", "_ZN2cv6detail19findMaxSpanningTreeEiRKSt6vectorINS0_11MatchesInfoESaIS2_EERNS0_5GraphERS1_IiSaIiEE", "_ZN2cv11arrowedLineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiiid", "_ZNK2cv13HOGDescriptor15computeGradientERKNS_3MatERS1_S4_NS_5Size_IiEES6_", "cvGetSubRect", "cvConvexityDefects", "_ZNK2cv4cuda10DeviceInfo13totalConstMemEv", "cvLogPolar", "_ZN2cv6ScharrERKNS_11_InputArrayERKNS_12_OutputArrayEiiiddi", "cvCreateTrackbar", "_ZN2cv14filterSpecklesERKNS_17_InputOutputArrayEdidS2_", "Java_org_opencv_imgproc_Imgproc_HoughCircles_10", "Java_org_opencv_imgproc_Imgproc_blur_10", "_ZN2cv14setTrackbarMaxERKNS_6StringES2_i", "_ZN2cv8imencodeERKNS_6StringERKNS_11_InputArrayERSt6vectorIhSaIhEERKS6_IiSaIiEE", "_ZN2cv3ocl5QueueC1ERKNS0_7ContextERKNS0_6DeviceE", "_ZN2cv3ocl9useOpenCLEv", "Java_org_opencv_core_Mat_n_1isContinuous", "_ZN2cv3ocl7haveSVMEv", "_ZN2cv11RNG_MT19937C1Ev", "_ZN2cv9boxPointsENS_11RotatedRectERKNS_12_OutputArrayE", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarInit_10", "_ZN2cv21DetectionBasedTracker13resetTrackingEv", "_ZN2cv7directx3ocl32initializeContextFromD3D10DeviceEP12ID3D10Device", "_ZN2cv12countNonZeroERKNS_11_InputArrayE", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayE", "_ZNK2cv3PCA7projectERKNS_11_InputArrayE", "_ZN2cv7absdiffERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_boundingRect_10", "_ZN2cv4cuda5EventC1ENS1_11CreateFlagsE", "Java_org_opencv_ml_Boost_getBoostType_10", "cvGetReal1D", "cvGetSeqElem", "Java_org_opencv_video_KalmanFilter_predict_10", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_10", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_11", "_ZN2cv11namedWindowERKNS_6StringEi", "_ZN2cv4cuda20unregisterPageLockedERNS_3MatE", "_ZN2cv17DescriptorMatcher20DescriptorCollection3setERKSt6vectorINS_3MatESaIS3_EE", "_ZN2cv3ogl6Arrays14setNormalArrayERKNS_11_InputArrayE", "Java_org_opencv_calib3d_StereoBM_getUniquenessRatio_10", "_ZNK2cv17DescriptorMatcher19getTrainDescriptorsEv", "_ZN2cv6repeatERKNS_11_InputArrayEiiRKNS_12_OutputArrayE", "_ZN2cv6detail23normalizeUsingWeightMapERKNS_11_InputArrayERKNS_17_InputOutputArrayE", "_ZN2cv9videostab9getMotionEiiRKSt6vectorINS_3MatESaIS2_EE", "_ZNK2cv3ocl7Context6deviceEj", "_ZN2cv9rectangleERNS_3MatENS_5Rect_IiEERKNS_7Scalar_IdEEiii", "_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE", "cvCheckChessboard", "Java_org_opencv_imgproc_Imgproc_line_12", "_ZN2cv8superres13convertToTypeERKNS_3MatEiRS1_S4_", "_ZN2cv21DetectionBasedTracker13setParametersERKNS0_10ParametersE", "_ZN2cv13HOGDescriptor4loadERKNS_6StringES3_", "_ZN2cv6detail7Blender7prepareENS_5Rect_IiEE", "_ZN2cv3ogl9Texture2DC1ENS_5Size_IiEENS1_6FormatEjb", "cvInitIntrinsicParams2D", "Java_org_opencv_ml_TrainData_getValues_10", "_ZN2cv3MatC1ERKS0_RKNS_5RangeES5_", "_Z20Mat_to_vector_DMatchRN2cv3MatERSt6vectorINS_6DMatchESaIS3_EE", "_ZN2cv6detail12DpSeamFinder16computeGradientsERKNS_3MatES4_", "Java_org_opencv_core_Core_convertScaleAbs_11", "Java_org_opencv_photo_Photo_createTonemapReinhard_10", "_ZN9CvLevMarq4initEii14CvTermCriteriab", "cvDCT", "cvGetWindowProperty", "_ZNK2cv4cuda10DeviceInfo11l2CacheSizeEv", "_ZN2cv6detail21leaveBiggestComponentERSt6vectorINS0_13ImageFeaturesESaIS2_EERS1_INS0_11MatchesInfoESaIS6_EEf", "_ZN2cv9videostab18InpaintingPipeline10setMotionsERKSt6vectorINS_3MatESaIS3_EE", "Java_org_opencv_core_Core_divide_17", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayE", "cvCreateSeq", "Java_org_opencv_core_Core_norm_15", "_ZNK2cv5MatOp8subtractERKNS_7MatExprES3_RS1_", "Java_org_opencv_core_Mat_n_1Mat__IIIDDDD", "_ZTv0_n12_N2cv9Feature2DD0Ev", "_ZN2cv26createGeneralizedHoughGuilEv", "_ZNK2cv12MatAllocator8downloadEPNS_8UMatDataEPviPKjS5_S5_S5_", "_ZN2cv4UMat5zerosENS_5Size_IiEEi", "Java_org_opencv_calib3d_Calib3d_calibrate_10", "cvMin", "_ZN2cv16pointPolygonTestERKNS_11_InputArrayENS_6Point_IfEEb", "_ZN2cv6detail23calibrateRotatingCameraERKSt6vectorINS_3MatESaIS2_EERS2_", "_ZNK2cv7MatExpr3colEi", "_ZN10__cxxabiv115__forced_unwindD0Ev", "_ZN2cvgeEdRKNS_3MatE", "Java_org_opencv_photo_CalibrateRobertson_setMaxIter_10", "_ZN2cv9rectangleERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_ZN2cv10StereoSGBM6createEiiiiiiiiiii", "_ZN2cv5flann17LinearIndexParamsC2Ev", "Java_org_opencv_imgproc_Imgproc_createCLAHE_11", "_ZN2cv3MatC2ERKS0_PKNS_5RangeE", "Java_org_opencv_imgproc_Imgproc_grabCut_10", "_ZN2cv9videostab18ToFileMotionWriterC1ERKNS_6StringENS_3PtrINS0_24ImageMotionEstimatorBaseEEE", "_ZN2cv8cvtColorERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_video_KalmanFilter_get_1statePost_10", "_ZN2cv16FileNodeIterator7readRawERKNS_6StringEPhj", "cvInRangeS", "Java_org_opencv_calib3d_StereoBM_getROI1_10", "_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_", "Java_org_opencv_ml_ANN_1MLP_getBackpropWeightScale_10", "_ZN2cv3ocl7ProgramaSERKS1_", "Java_org_opencv_imgproc_Subdiv2D_getEdgeList_10", "cvCreateGraph", "_ZNK2cv5MatOp4diagERKNS_7MatExprEiRS1_", "_ZN2cv9videostab20GaussianMotionFilter9stabilizeEiRKSt6vectorINS_3MatESaIS3_EESt4pairIiiE", "cvInitTreeNodeIterator", "Java_org_opencv_core_Mat_nPutI", "_ZN2cv9videostab17TwoPassStabilizer21runPrePassIfNecessaryEv", "Java_org_opencv_core_Core_mulTransposed_10", "cvOrS", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprES3_RS1_d", "cvError", "cvMerge", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMax_10", "_ZN2cv7vconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv17CascadeClassifierD2Ev", "_ZN2cv11cornerScoreILi8EEEiPKhPKii", "_ZN2cv17CascadeClassifier13getOldCascadeEv", "Java_org_opencv_core_Mat_n_1Mat__", "_ZN2cv9Exception13formatMessageEv", "Java_org_opencv_calib3d_StereoMatcher_compute_10", "cvThreshHist", "_ZN2cv3ocl12PlatformInfoC2Ev", "_ZN2cv4cuda5Event6recordERNS0_6StreamE", "_ZN2cv3MatC1EiPKiiPvPKj", "_ZN2cv6detail10overlapRoiENS_6Point_IiEES2_NS_5Size_IiEES4_RNS_5Rect_IiEE", "_ZN2cv9videostab26estimateGlobalMotionRansacERKNS_11_InputArrayES3_iRKNS0_12RansacParamsEPfPi", "_ZN2cv21DetectionBasedTrackerD0Ev", "Java_org_opencv_core_Mat_nPutF", "Java_org_opencv_core_Core_multiply_12", "Java_org_opencv_imgproc_Imgproc_remap_11", "_ZN2cv6detail20BundleAdjusterReproj24setUpInitialCameraParamsERKSt6vectorINS0_12CameraParamsESaIS3_EE", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayERNS0_6StreamE", "Java_org_opencv_video_KalmanFilter_set_1errorCovPre_10", "_ZN2cv4UMat6createEiPKiiNS_14UMatUsageFlagsE", "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKPi", "Java_org_opencv_ml_TrainData_getTrainResponses_10", "_ZNK2cv8Subdiv2D7edgeDstEiPNS_6Point_IfEE", "Java_org_opencv_ml_ANN_1MLP_setRpropDWPlus_10", "Java_org_opencv_photo_CalibrateRobertson_setThreshold_10", "_ZN2cv9SparseMat6createEiPKii", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_11", "Java_org_opencv_ml_StatModel_train_10", "_ZN2cv14displayOverlayERKNS_6StringES2_i", "cvGetImage", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayE", "_ZNK2cv3ocl7Context6useSVMEv", "Java_org_opencv_core_Core_normalize_13", "_ZN2cv17CommandLineParser4Impl12apply_paramsEiNS_6StringE", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "_ZNSt15__exception_ptr13exception_ptraSERKS0_", "Java_org_opencv_core_Mat_n_1t", "Java_org_opencv_core_Core_divide_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_11", "_ZN2cv9videostab18ToFileMotionWriter8estimateERKNS_3MatES4_Pb", "Java_org_opencv_ml_SVM_getClassWeights_10", "Java_org_opencv_ml_DTrees_getMaxDepth_10", "Java_org_opencv_objdetect_HOGDescriptor_getWinSigma_10", "Java_org_opencv_core_Core_hconcat_10", "_ZN2cv8Subdiv2D6insertERKSt6vectorINS_6Point_IfEESaIS3_EE", "Java_org_opencv_ml_TrainData_getDefaultSubstValues_10", "_ZNK2cv4cuda10DeviceInfo24kernelExecTimeoutEnabledEv", "_ZN2cv3Mat15getStdAllocatorEv", "cvPOSIT", "_ZN2cvngERKNS_3MatE", "_ZN2cv3ogl6renderERKNS0_9Texture2DENS_5Rect_IdEES5_", "_ZNK2cv6detail12CameraParams1KEv", "_ZN2cv6detail14PlaneWarperGpu9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RNS_4cuda6GpuMatES9_", "Java_org_opencv_photo_MergeMertens_setSaturationWeight_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1signedGradient_10", "Java_org_opencv_calib3d_Calib3d_findHomography_10", "cvLog", "Java_org_opencv_videoio_VideoCapture_grab_10", "Java_org_opencv_video_BackgroundSubtractor_apply_11", "_ZN2cv6detail16MultiBandBlenderC2Eiii", "Java_org_opencv_core_Core_checkRange_11", "_ZN2cv6detail20focalsFromHomographyERKNS_3MatERdS4_RbS5_", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_11", "_ZN2cv3ocl6Kernel3setEiRKNS0_9KernelArgE", "_ZN2cv8stopLoopEv", "_ZN2cv11findNonZeroERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_videoio_VideoCapture_open_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_getNMixtures_10", "_ZN2cv6detail14FeatherBlender7prepareENS_5Rect_IiEE", "_ZNK2cv3ocl7Program6sourceEv", "Java_org_opencv_features2d_DescriptorMatcher_write_10", "Java_org_opencv_imgproc_Imgproc_calcHist_10", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_11", "_ZN2cv6detail12CameraParamsC2ERKS1_", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_10", "_ZN2cv21DetectionBasedTrackerC2ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "Java_org_opencv_ml_SVM_getType_10", "cvSeqPushFront", "_ZN2cv3ocl8PlatformC2Ev", "Java_org_opencv_ml_DTrees_setUseSurrogates_10", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_10", "_ZN2cv6detail9resultRoiERKSt6vectorINS_6Point_IiEESaIS3_EERKS1_INS_5Size_IiEESaIS9_EE", "_ZN2cv3LDA3ldaERKNS_11_InputArrayES3_", "_ZN2cv3ocl7ProgramC2ERKNS0_13ProgramSourceERKNS_6StringERS5_", "_ZN2cv7MatExprC1ERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_cvtColor_10", "_ZN2cv11writeScalarERNS_11FileStorageEd", "_ZN2cv9videostab20NullWobbleSuppressor8suppressEiRKNS_3MatERS2_", "_ZN2cv18accumulateWeightedERKNS_11_InputArrayERKNS_17_InputOutputArrayEdS2_", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEf", "cvNextGraphItem", "_ZN2cv11RQDecomp3x3ERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_", "_ZN2cv16BOWKMeansTrainerD0Ev", "cvMax", "_ZN2cv14correctMatchesERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayES4_b", "_ZN2cv6detail18GraphCutSeamFinder4Impl20setGraphWeightsColorERKNS_3MatES5_S5_S5_R7GCGraphIfE", "_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE", "_ZN2cv6detail17BundleAdjusterRay9calcErrorERNS_3MatE", "Java_org_opencv_ml_EM_trainM_11", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_11", "_ZN2cv9videostab17OnePassStabilizer16postProcessFrameERKNS_3MatE", "Java_org_opencv_core_Mat_n_1push_1back", "Java_org_opencv_video_KalmanFilter_predict_11", "_ZN2cv9videostab14StabilizerBaseC1Ev", "_ZN2cv3ocl7Image2DC2ERKS1_", "Java_org_opencv_calib3d_StereoSGBM_getP2_10", "_ZN2cv28connectedComponentsWithStatsERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "_ZN2cv8Subdiv2D12connectEdgesEii", "_ZN2cv3ocl5QueueC2Ev", "Java_org_opencv_ml_TrainData_getTrainSampleIdx_10", "_ZN2cv3PCA4readERKNS_8FileNodeE", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i", "_ZN2cvdvERKNS_7MatExprEd", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayES4_b", "cvSetImagesForHaarClassifierCascade", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EEid", "_ZN2cv3ogl6BufferC1Ev", "_ZN2cv8UMatDataC2EPKNS_12MatAllocatorE", "_ZN2cv11RNG_MT199377uniformEdd", "_Z26vector_vector_Point_to_MatRSt6vectorIS_IN2cv6Point_IiEESaIS2_EESaIS4_EERNS0_3MatE", "_ZN2cv16BOWKMeansTrainerC1EiRKNS_12TermCriteriaEii", "cvFindFundamentalMat", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_12", "_ZNK2cv3ogl9Texture2D6copyToERKNS_12_OutputArrayEib", "cvReleaseStructuringElement", "_ZN2cv28convertPointsFromHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_calib3d_StereoBM_getPreFilterType_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_12", "_ZN2cv4cuda25getCudaEnabledDeviceCountEv", "_ZN2cv12LineIteratorC2ERKNS_3MatENS_6Point_IiEES5_ib", "_ZNK2cv17CommandLineParser4Impl10cat_stringERKNS_6StringE", "Java_org_opencv_core_Mat_n_1empty", "Java_org_opencv_imgproc_Imgproc_erode_12", "cvInRange", "_ZN2cv3ocl7Image2D17isFormatSupportedEiib", "Java_org_opencv_core_Core_norm_12", "Java_org_opencv_imgproc_Imgproc_getDefaultNewCameraMatrix_10", "_ZN2cv15BriskScaleSpaceD1Ev", "_ZN2cv13parallel_for_ERKNS_5RangeERKNS_16ParallelLoopBodyEd", "_ZN2cv16getTickFrequencyEv", "Java_org_opencv_imgproc_Imgproc_Canny_10", "cvAbsDiffS", "_ZN2cv3ogl6BufferC2Eiiijb", "_ZN2cv3ocl13ProgramSourceD2Ev", "_ZN2cvdvEdRKNS_7MatExprE", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_11", "cvComputeCorrespondEpilines", "_ZNK2cv3ocl7Context3ptrEv", "Java_org_opencv_calib3d_StereoSGBM_create_10", "_ZN2cv11FileStorage20getDefaultObjectNameERKNS_6StringE", "_ZN2cv25createLineSegmentDetectorEiddddddi", "cvValidateDisparity", "Java_org_opencv_features2d_FeatureDetector_read_10", "_ZN2cv3ogl6BufferC2Ev", "Java_org_opencv_ml_ANN_1MLP_getWeights_10", "_ZN2cv24createCalibrateRobertsonEif", "_ZN2cv8Stitcher6stitchERKNS_11_InputArrayERKSt6vectorIS4_INS_5Rect_IiEESaIS6_EESaIS8_EERKNS_12_OutputArrayE", "_ZN2cv6theRNGEv", "_ZNK2cv3ogl9Texture2D5texIdEv", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_11", "_ZNK2cv4UMat7reshapeEii", "Java_org_opencv_photo_TonemapMantiuk_delete", "_ZNK2cv3ocl6Device18deviceVersionMinorEv", "_ZN2cv5flann20AutotunedIndexParamsC2Effff", "Java_org_opencv_core_Core_kmeans_10", "Java_org_opencv_ml_DTrees_getRegressionAccuracy_10", "_ZSt13set_terminatePFvvE", "_ZN2cv4cuda13nonLocalMeansERKNS_11_InputArrayERKNS_12_OutputArrayEfiiiRNS0_6StreamE", "Java_org_opencv_core_Core_mulTransposed_12", "_ZN2cvdvERKNS_7MatExprERKNS_3MatE", "_ZN2cv11VideoWriter7releaseEv", "_ZN2cv4cuda11TargetArchs6hasPtxEii", "_ZN2cv18getAffineTransformEPKNS_6Point_IfEES3_", "Java_org_opencv_ml_EM_setCovarianceMatrixType_10", "_ZN2cv8UMatDataD2Ev", "Java_org_opencv_objdetect_HOGDescriptor_get_1svmDetector_10", "_ZN2cv11stylizationERKNS_11_InputArrayERKNS_12_OutputArrayEff", "_ZN2cv3ocl6Kernel7runTaskEbRKNS0_5QueueE", "Java_org_opencv_imgproc_Imgproc_morphologyEx_10", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EES3_", "_ZN2cvorERKNS_7Scalar_IdEERKNS_3MatE", "_ZN2cv6invertERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv2ml9TrainDataD0Ev", "_ZN2cv3Mat6resizeEj", "Java_org_opencv_calib3d_Calib3d_getValidDisparityROI_10", "Java_org_opencv_imgproc_Imgproc_medianBlur_10", "Java_org_opencv_objdetect_HOGDescriptor_checkDetectorSize_10", "_ZNK2cv5MatOp12augAssignAndERKNS_7MatExprERNS_3MatE", "cvCopy", "Java_org_opencv_core_Core_dct_11", "Java_org_opencv_android_Utils_nBitmapToMat2", "cvCbrt", "Java_org_opencv_imgproc_Imgproc_undistortPoints_10", "_ZNK2cv11_InputArray4kindEv", "cvMaxS", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEd", "_ZN2cv25groupRectangles_meanshiftERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IdSaIdEES8_dNS_5Size_IiEE", "_ZNK2cv25BOWImgDescriptorExtractor13getVocabularyEv", "_ZN2cv17DescriptorMatcherD0Ev", "_ZN2cv11VideoWriterC2ERKNS_6StringEidNS_5Size_IiEEb", "Java_org_opencv_core_Core_mulSpectrums_11", "cvPtr3D", "_ZNK2cv3ocl6Device25preferredVectorWidthFloatEv", "_ZN2cv9videostab17OnePassStabilizerC2Ev", "_ZN10__cxxabiv117__pbase_type_infoD0Ev", "_ZNK2cv12_OutputArray9getMatRefEi", "Java_org_opencv_core_Core_cartToPolar_11", "cvAvg", "Java_org_opencv_features2d_DescriptorExtractor_read_10", "_ZN2cv3ocl14vecopTypeToStrEi", "Java_org_opencv_core_Core_log_10", "Java_org_opencv_video_KalmanFilter_get_1measurementNoiseCov_10", "_ZNK2cv14DefaultDeleterI11CvSparseMatEclEPS1_", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_10", "Java_org_opencv_core_Mat_n_1Mat__DDIDDDD", "_ZN2cv22SimpleBlobDetectorImpl6detectERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EES3_", "_ZN2cv11FileStorageD1Ev", "_ZN2cv5flann11IndexParamsD1Ev", "Java_org_opencv_photo_TonemapDrago_getSaturation_10", "_ZN2cv9videostab20WobbleSuppressorBaseC1Ev", "Java_org_opencv_ml_TrainData_getTrainSamples_10", "_ZNK2cv8FileNode4sizeEv", "_ZNK2cv9SparseMat9convertToERNS_3MatEidd", "Java_org_opencv_features2d_Features2d_drawMatches2_10", "_ZN2cv13setNumThreadsEi", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_10", "_ZNK2cv3ocl6Device16memBaseAddrAlignEv", "_ZN2cv16setOpenGlContextERKNS_6StringE", "Java_org_opencv_ml_TrainData_getNSamples_10", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IiSaIiEEid", "_ZN2cv3LDAD1Ev", "_ZN2cv5flann5Index12radiusSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_diRKNS0_12SearchParamsE", "Java_org_opencv_core_Core_min_11", "_ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "_ZNK2cv13HOGDescriptor19detectMultiScaleROIERKNS_3MatERSt6vectorINS_5Rect_IiEESaIS6_EERS4_INS_12DetectionROIESaISA_EEdi", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_11", "_Unwind_FindEnclosingFunction", "cvMixChannels", "_ZN2cv15calcCovarMatrixERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_17_InputOutputArrayEii", "_ZNK2cv4cuda10DeviceInfo17unifiedAddressingEv", "cvCheckArr", "_ZN2cv7MatExprC2ERKNS_3MatE", "_ZNK2cv11_InputArray7getMat_Ei", "_ZN2cv9videostab17OnePassStabilizerC1Ev", "Java_org_opencv_ml_TrainData_getTestSampleIdx_10", "_ZN2cv7hconcatEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZN2cv5flann12SearchParamsC1Eifb", "Java_org_opencv_photo_TonemapReinhard_delete", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMin_10", "cvMoveWindow", "_ZN2cv11FileStorage8writeObjERKNS_6StringEPKv", "cvGetAffineTransform", "cvGraphRemoveEdgeByPtr", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_id", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_12", "_ZN2cv3ocl14memopTypeToStrEi", "_ZN2cv11contourAreaERKNS_11_InputArrayEb", "Java_org_opencv_calib3d_Calib3d_distortPoints_11", "_ZN2cv16FileNodeIteratorC1Ev", "cvDrawChessboardCorners", "Java_org_opencv_video_BackgroundSubtractorMOG2_setComplexityReductionThreshold_10", "cvSetReal1D", "_ZN2cv8superres23createOptFlow_FarnebackEv", "Java_org_opencv_ml_SVM_getSupportVectors_10", "_ZN2cv17triangulatePointsERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "Java_org_opencv_photo_Photo_createCalibrateDebevec_11", "cvFindContours", "Java_org_opencv_photo_TonemapReinhard_getIntensity_10", "_ZN2cv15KeyPointsFilter16runByImageBorderERSt6vectorINS_8KeyPointESaIS2_EENS_5Size_IiEEi", "Java_org_opencv_imgproc_Imgproc_morphologyEx_11", "_ZN2cv17DescriptorMatcher20DescriptorCollection5clearEv", "Java_org_opencv_ml_RTrees_getVarImportance_10", "Java_org_opencv_imgproc_Subdiv2D_getVertex_10", "_ZN2cv9HuMomentsERKNS_7MomentsERKNS_12_OutputArrayE", "cvLoadHaarClassifierCascade", "Java_org_opencv_imgproc_Imgproc_initWideAngleProjMap_11", "Java_org_opencv_imgproc_Imgproc_fillPoly_11", "_ZNK2cv8Subdiv2D7symEdgeEi", "cvConvertImage", "_Z18Mat_to_vector_charRN2cv3MatERSt6vectorIcSaIcEE", "Java_org_opencv_ml_LogisticRegression_getTrainMethod_10", "_ZN2cv17CascadeClassifier16getMaskGeneratorEv", "_ZN2cv26convertPointsToHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_core_Core_bitwise_1and_10", "_ZNK2cv4cuda10DeviceInfo11pciDomainIDEv", "_ZN2cv10meanStdDevERKNS_11_InputArrayERKNS_12_OutputArrayES5_S2_", "cvNorm", "Java_org_opencv_calib3d_Calib3d_recoverPose_11", "_ZNK2cv8Subdiv2D6Vertex6isfreeEv", "cvFindType", "_ZN2cv12VideoCaptureC1ERKNS_6StringE", "_ZN2cv15isContourConvexERKNS_11_InputArrayE", "cvGetFileNodeByName", "cvFillConvexPoly", "_ZN2cv3ocl7Context7getProgERKNS0_13ProgramSourceERKNS_6StringERS5_", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThreshold_10", "_ZNK2cv18SimpleBlobDetector6Params5writeERNS_11FileStorageE", "Java_org_opencv_core_Core_calcCovarMatrix_10", "_ZN2cv5flann5IndexD1Ev", "_ZNK2cv7MatExpr3dotERKNS_3MatE", "_ZN2cv2ml6RTrees6createEv", "Java_org_opencv_core_Core_norm_11", "_ZN2cv17CascadeClassifierD1Ev", "cvWriteComment", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_10", "_ZN2cv3RNG4fillERKNS_17_InputOutputArrayEiRKNS_11_InputArrayES6_b", "cvDecodeImageM", "Java_org_opencv_core_Mat_n_1zeros__DDI", "_ZN2cv2ml9StatModel5trainERKNS_3PtrINS0_9TrainDataEEEi", "_ZN2cv16TLSDataContainerD0Ev", "_ZN2cv8Subdiv2D19getVoronoiFacetListERKSt6vectorIiSaIiEERS1_IS1_INS_6Point_IfEESaIS7_EESaIS9_EERS9_", "Java_org_opencv_ml_EM_trainE_11", "cvReleaseMemStorage", "_Unwind_SetGR", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSize_10", "_ZN2cv6detail16MultiBandBlenderC1Eiii", "cvCreateMemStorage", "Java_org_opencv_imgproc_Imgproc_getPerspectiveTransform_10", "_ZN2cv3Mat6createEiPKii", "_ZN2cv6detail26BestOf2NearestRangeMatcherclERKSt6vectorINS0_13ImageFeaturesESaIS3_EERS2_INS0_11MatchesInfoESaIS8_EERKNS_4UMatE", "_ZN10__cxxabiv119__pointer_type_infoD1Ev", "_ZN2cv3ocl12setUseOpenCLEb", "_ZN2cv6String10deallocateEv", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_11", "cvSeqInsert", "Java_org_opencv_calib3d_StereoBM_getPreFilterCap_10", "_ZN2cv18illuminationChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEff", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayE", "cvDestroyWindow", "cvInitUndistortMap", "Java_org_opencv_core_Mat_n_1elemSize1", "_ZN2cvdvEdRKNS_3MatE", "Java_org_opencv_calib3d_Calib3d_recoverPose_12", "_ZNK2cv12_OutputArray14createSameSizeERKNS_11_InputArrayEi", "Java_org_opencv_imgproc_Imgproc_pyrUp_11", "Java_org_opencv_ml_DTrees_create_10", "_ZN2cv16MatConstIterator4seekEPKib", "Java_org_opencv_imgproc_Imgproc_n_1getTextSize", "_ZNK2cv3Mat1tEv", "cvCreateChildMemStorage", "Java_org_opencv_photo_Photo_createTonemapMantiuk_11", "Java_org_opencv_ml_LogisticRegression_setMiniBatchSize_10", "_ZN2cv3Mat9push_backERKS0_", "_ZN2cv3ocl5Queue6finishEv", "_ZNK2cv17CascadeClassifier21getOriginalWindowSizeEv", "_ZN2cv9ExceptionD2Ev", "_Z29Mat_to_vector_vector_KeyPointRN2cv3MatERSt6vectorIS2_INS_8KeyPointESaIS3_EESaIS5_EE", "Java_org_opencv_photo_TonemapDrago_setSaturation_10", "cvUseOptimized", "_ZN2cv9videostab15VideoFileSourceC1ERKNS_6StringEb", "_ZNK2cv3ocl6Device22imageFromBufferSupportEv", "_ZN2cv12VideoCapture4readERKNS_12_OutputArrayE", "_ZN2cv3ocl14convertTypeStrEiiiPc", "_ZN2cv13seamlessCloneERKNS_11_InputArrayES2_S2_NS_6Point_IiEERKNS_12_OutputArrayEi", "_ZN2cv21DetectionBasedTracker15InnerParametersC1Ev", "Java_org_opencv_photo_TonemapMantiuk_getSaturation_10", "_ZN2cv2ml6DTrees6createEv", "_ZN2cv3maxERKNS_3MatES2_", "Java_org_opencv_ml_DTrees_getTruncatePrunedTree_10", "_ZN2cv6detail17CylindricalWarper4warpERKNS_11_InputArrayES4_S4_iiRKNS_12_OutputArrayE", "_ZN2cv9videostab21ColorAverageInpainter7inpaintEiRNS_3MatES3_", "_ZN2cv17DescriptorMatcher5clearEv", "_ZN2cv3ocl6KernelaSERKS1_", "_ZN2cv16FileNodeIteratormmEv", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_line_11", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayES6_S6_i", "cvFlip", "Java_org_opencv_video_Video_meanShift_10", "cvCvtSeqToArray", "Java_org_opencv_calib3d_StereoBM_setSmallerBlockSize_10", "_ZNK2cv8Subdiv2D11getEdgeListERSt6vectorINS_3VecIfLi4EEESaIS3_EE", "cvInitMatHeader", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayEb", "_ZN2cv5remapERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_iiRKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_10", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMax_10", "cvGEMM", "_ZN2cv3PCAclERKNS_11_InputArrayES3_id", "_ZN2cv4UMat4onesENS_5Size_IiEEi", "Java_org_opencv_video_KalmanFilter_set_1statePost_10", "_ZN2cv8Subdiv2D6VertexC1ENS_6Point_IfEEbi", "_ZN2cv17FlannBasedMatcher4readERKNS_8FileNodeE", "_ZN2cv4readERKNS_8FileNodeERNS_3MatERKS3_", "_ZN2cv18getAffineTransformERKNS_11_InputArrayES2_", "_ZN2cv6detail10Timelapser13createDefaultEi", "Java_org_opencv_photo_TonemapDurand_setSigmaSpace_10", "_ZN2cv6detail11MatchesInfoaSERKS1_", "_ZN2cv4UMatD1Ev", "cvAlloc", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_10", "_ZN2cv11compareHistERKNS_11_InputArrayES2_i", "_ZN2cv8KeyPoint7convertERKSt6vectorIS0_SaIS0_EERS1_INS_6Point_IfEESaIS7_EERKS1_IiSaIiEE", "_ZN2cv8Subdiv2DC2ENS_5Rect_IiEE", "_ZN2cv4gemmERKNS_11_InputArrayES2_dS2_dRKNS_12_OutputArrayEi", "_ZN2cv6detail11PlaneWarper4warpERKNS_11_InputArrayES4_S4_iiRKNS_12_OutputArrayE", "cvGetRawData", "Java_org_opencv_ml_KNearest_findNearest_10", "cvInitMatNDHeader", "_ZNK2cv12MatAllocator5unmapEPNS_8UMatDataE", "_ZN2cv8fastFreeEPv", "_ZNK2cv3ocl6Device16maxReadImageArgsEv", "_ZN9CvLevMarqC2Ev", "Java_org_opencv_photo_Photo_stylization_10", "_ZNK2cv2ml6KDTree4dimsEv", "Java_org_opencv_imgproc_Imgproc_matchShapes_10", "Java_org_opencv_core_Mat_nGetI", "_ZNK2cv12_OutputArray9fixedTypeEv", "_ZNK2cv3ocl6Device18imageMaxBufferSizeEv", "_ZN2cv3ogl6renderERKNS0_6ArraysEiNS_7Scalar_IdEE", "_ZN2cv6detail11PlaneWarper15detectResultRoiENS_5Size_IiEERNS_6Point_IiEES6_", "_ZN2cv6detail15GainCompensator5applyEiNS_6Point_IiEERKNS_17_InputOutputArrayERKNS_11_InputArrayE", "Java_org_opencv_calib3d_Calib3d_solvePnP_11", "Java_org_opencv_photo_CalibrateDebevec_delete", "_ZN2cv2LUEPfjiS0_ji", "_ZNK2cv3Mat4diagEi", "_ZNK2cv3ogl9Texture2D4bindEv", "cvCreatePyramid", "_Unwind_DeleteException", "Java_org_opencv_core_Mat_n_1dims", "cvSeqSearch", "Java_org_opencv_imgproc_LineSegmentDetector_detect_11", "_ZN2cv9videostab32estimateGlobalMotionLeastSquaresERKNS_17_InputOutputArrayES3_iPf", "Java_org_opencv_video_BackgroundSubtractorMOG2_setDetectShadows_10", "Java_org_opencv_calib3d_StereoSGBM_getP1_10", "_ZN2cv12denoise_TVL1ERKSt6vectorINS_3MatESaIS1_EERS1_di", "Java_org_opencv_imgproc_Imgproc_fitEllipse_10", "_ZN2cv3LDA7projectERKNS_11_InputArrayE", "_ZN2cv3LDA7computeERKNS_11_InputArrayES3_", "_ZN2cv3PCAclERKNS_11_InputArrayES3_ii", "Java_org_opencv_imgproc_Imgproc_floodFill_10", "Java_org_opencv_imgproc_Imgproc_demosaicing_10", "Java_org_opencv_imgproc_Imgproc_Sobel_11", "_ZNK11CvSparseMat15copyToSparseMatERN2cv9SparseMatE", "_ZN2cv9videostab28KeypointBasedMotionEstimatorC1ENS_3PtrINS0_19MotionEstimatorBaseEEE", "Java_org_opencv_video_BackgroundSubtractorMOG2_setNMixtures_10", "Java_org_opencv_ml_ANN_1MLP_setLayerSizes_10", "_ZN2cv29createGeneralizedHoughBallardEv", "_ZN2cv2ml6DTrees5SplitC1Ev", "cvGetValidDisparityROI", "_ZN2cv6repeatERKNS_3MatEii", "_ZN2cv15NAryMatIterator4initEPPKNS_3MatEPS1_PPhi", "_ZN2cv3ocl5QueueaSERKS1_", "cvSetErrMode", "_ZNK2cv3ocl6Device23preferredVectorWidthIntEv", "_ZN2cv5AGASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEib", "_ZNK2cv3ocl6Device16printfBufferSizeEv", "_ZN2cv9videostab23MotionEstimatorRansacL2C2ENS0_11MotionModelE", "cvTriangulatePoints", "_ZNK2cv12_OutputArray15getOGlBufferRefEv", "_ZN2cv5CannyERKNS_11_InputArrayERKNS_12_OutputArrayEddib", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_11", "_ZN2cv6divideERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "cvCanny", "_ZN2cv16FileNodeIteratorC2ERKS0_", "_ZN2cv6detail16MultiBandBlender4feedERKNS_11_InputArrayES4_NS_6Point_IiEE", "Java_org_opencv_core_Core_subtract_11", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayERKSt6vectorIiSaIiEE", "Java_org_opencv_photo_Photo_pencilSketch_10", "_ZN2cv17CascadeClassifier4readERKNS_8FileNodeE", "_ZN2cv3ocl7ProgramC2Ev", "_ZN2cv16FileNodeIteratormmEi", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSigma_10", "_ZNK2cv4UMat6handleEi", "_ZN2cv9videostab28KeypointBasedMotionEstimatorC2ENS_3PtrINS0_19MotionEstimatorBaseEEE", "Java_org_opencv_imgproc_Imgproc_minEnclosingCircle_10", "_ZNK2cv17CascadeClassifier18isOldFormatCascadeEv", "Java_org_opencv_imgproc_Imgproc_boxFilter_10", "Java_org_opencv_objdetect_Objdetect_groupRectangles_11", "Java_org_opencv_videoio_VideoCapture_read_10", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_11", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_11", "_ZN2cv5flann11IndexParams9setStringERKNS_6StringES4_", "_ZN2cv3Mat8pop_backEj", "cvReadChainPoint", "_ZN2cv11VideoWriter5writeERKNS_3MatE", "_ZN2cv22SimpleBlobDetectorImplC2ERKNS_18SimpleBlobDetector6ParamsE", "Java_org_opencv_core_Mat_nDump", "Java_org_opencv_photo_TonemapDurand_getSigmaColor_10", "_ZN2cv3ocl12PlatformInfoC1ERKS1_", "Java_org_opencv_core_Mat_n_1row", "_ZN2cv11FileStorageC2Ev", "cvFindNextContour", "_ZN6CvTypeD2Ev", "_ZN2cv4meanERKNS_11_InputArrayES2_", "cvCalcProbDensity", "_ZN2cv8solvePnPERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bi", "Java_org_opencv_imgproc_Imgproc_convexHull_11", "_ZN2cv3ogl6Buffer14setAutoReleaseEb", "_ZNK2cv5MatOp12augAssignXorERKNS_7MatExprERNS_3MatE", "Java_org_opencv_ml_TrainData_getSampleWeights_10", "cvSum", "_Unwind_SetIP", "Java_org_opencv_imgproc_Imgproc_fitLine_10", "_ZN2cvorERKNS_3MatERKNS_7Scalar_IdEE", "cvPointSeqFromMat", "Java_org_opencv_video_BackgroundSubtractorMOG2_getBackgroundRatio_10", "_ZN2cv8superres12arrGetGpuMatERKNS_11_InputArrayERNS_4cuda6GpuMatE", "_ZN2cv11RNG_MT19937cvdEv", "cvCalcOpticalFlowFarneback", "Java_org_opencv_imgproc_Imgproc_cvtColor_11", "_ZN2cv11FileStorageC1EP13CvFileStorageb", "cvCmpS", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_11", "_ZN2cv12VideoCaptureD0Ev", "_ZN2cv9getRecallERKSt6vectorINS_6Point_IfEESaIS2_EEf", "Java_org_opencv_objdetect_HOGDescriptor_save_10", "_ZN2cv5mergeEPKNS_3MatEjRKNS_12_OutputArrayE", "cvCreateSparseMat", "Java_org_opencv_video_Video_findTransformECC_11", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfii", "cvSetIdentity", "Java_org_opencv_features2d_FeatureDetector_detect_12", "_ZN2cv6detail20matchesGraphAsStringERSt6vectorINS_6StringESaIS2_EERS1_INS0_11MatchesInfoESaIS6_EEf", "_ZN2cv9videostab17TwoPassStabilizer5setUpERKNS_3MatE", "__register_frame_table", "cvClone", "_ZNK2cv3ocl6Device14singleFPConfigEv", "_ZN2cv12drawContoursERKNS_17_InputOutputArrayERKNS_11_InputArrayEiRKNS_7Scalar_IdEEiiS5_iNS_6Point_IiEE", "_ZN2cv4cuda11TargetArchs17hasEqualOrLessPtxEii", "_ZN2cv8Subdiv2D9swapEdgesEi", "Java_org_opencv_ml_TrainData_getTrainNormCatResponses_10", "_ZNK2cv5MatOp6divideERKNS_7MatExprES3_RS1_d", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_11", "_ZNK2cv8FileNodeixEPKc", "_ZN2cv10fastMallocEj", "_ZN2cv11writeScalarERNS_11FileStorageEi", "cvGetReal3D", "_ZN2cv10BriskLayerC2ERKS0_i", "_ZN2cv17DescriptorMatcher5trainEv", "_ZN2cv6detail21BestOf2NearestMatcher14collectGarbageEv", "_ZN2cv4cuda16createContinuousEiiiRKNS_12_OutputArrayE", "Java_org_opencv_features2d_DescriptorMatcher_read_10", "_ZNK2cv4cuda10DeviceInfo27maxThreadsPerMultiProcessorEv", "_ZN2cv3ipp12setIppStatusEiPKcS2_i", "_ZN9CvLevMarqD2Ev", "JNI_OnUnload", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEi", "cvCornerEigenValsAndVecs", "_ZN2cv4MSER6createEiiiddiddi", "Java_org_opencv_ml_StatModel_predict_10", "_ZN2cv3LDAC1Ei", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringERKNS_9SparseMatE", "Java_org_opencv_ml_KNearest_setAlgorithmType_10", "_ZNK2cv12_OutputArray6assignERKNS_4UMatE", "cvGetRealND", "cvHoughCircles", "_ZN2cv11seqPopFrontEP5CvSeqPv", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayES5_iii", "_Z19vector_Vec4i_to_MatRSt6vectorIN2cv3VecIiLi4EEESaIS2_EERNS0_3MatE", "_ZNK2cv11_InputArray4dimsEi", "_ZNK2cv16MinProblemSolver8Function14getGradientEpsEv", "_ZN2cv7MomentsC2Ev", "cvStartWriteSeq", "_ZN10__cxxabiv120__si_class_type_infoD1Ev", "_ZN2cv8fillPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEiiNS_6Point_IiEE", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorISt4pairINS_5Rect_IiEEiESaIS5_EE", "cvLoadImage", "_ZN2cv6detail12DpSeamFinder12estimateSeamERKNS_3MatES4_NS_6Point_IiEES6_iS6_S6_RSt6vectorIS6_SaIS6_EERb", "cvSeqSort", "_ZN2cv3ocl7ProgramC2ERKS1_", "_ZN2cv4UMatC2ERKS0_PKNS_5RangeE", "Java_org_opencv_core_Core_add_11", "Java_org_opencv_features2d_DescriptorMatcher_clone_11", "_ZNK2cv13HOGDescriptor6copyToERS0_", "_ZN2cv17CommandLineParserC2EiPKPKcRKNS_6StringE", "_ZN2cv3ocl7ContextC1ERKS1_", "Java_org_opencv_video_KalmanFilter_get_1processNoiseCov_10", "Java_org_opencv_photo_MergeMertens_getContrastWeight_10", "_ZNK2cv11VideoWriter3getEi", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_11", "_ZN2cv4cuda6Stream19enqueueHostCallbackEPFviPvES2_", "Java_org_opencv_core_Mat_n_1elemSize", "_ZN2cv3Mat10push_back_EPKv", "_ZN2cv15getNumberOfCPUsEv", "_ZNK2cv11FileStorageixEPKc", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_13", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_11", "Java_org_opencv_ml_ANN_1MLP_getRpropDWPlus_10", "_ZN2cv3ocl6KernelC1ERKS1_", "cvReleaseKalman", "_ZN2cv3ocl7Context6createEi", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_11", "cvGetPerspectiveTransform", "Java_org_opencv_video_KalmanFilter_correct_10", "_ZN2cv9videostab18FastMarchingMethod7heapAddERKNS1_3DXYE", "_ZN2cv9fastAtan2Eff", "_ZN2cv8superres10arrGetUMatERKNS_11_InputArrayERNS_4UMatE", "_ZN2cv18createMergeMertensEfff", "Java_org_opencv_features2d_DescriptorMatcher_clear_10", "_ZN2cv9ExceptionC2EiRKNS_6StringES3_S3_i", "_ZN2cv3ocl7Context10getDefaultEb", "_ZN2cv8Subdiv2D10deleteEdgeEi", "_ZN2cv21BaseCascadeClassifierD1Ev", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowThreshold_10", "_Unwind_ForcedUnwind", "_ZNK2cv4cuda10DeviceInfo12isCompatibleEv", "_ZN2cv11FileStorageC2EP13CvFileStorageb", "_ZN2cv23buildOpticalFlowPyramidERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEibiib", "_ZNK2cv11RotatedRect6pointsEPNS_6Point_IfEE", "_ZN2cv9videostab23MotionEstimatorRansacL28estimateERKNS_11_InputArrayES4_Pb", "_ZNK2cv11_InputArray13getUMatVectorERSt6vectorINS_4UMatESaIS2_EE", "Java_org_opencv_core_Core_magnitude_10", "Java_org_opencv_core_Mat_n_1clone", "_ZN2cv8imdecodeERKNS_11_InputArrayEi", "_ZNK2cv4UMat3dotERKNS_11_InputArrayE", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_id", "_ZN2cv4UMat5zerosEiPKii", "Java_org_opencv_imgproc_LineSegmentDetector_detect_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setHistory_10", "cvSeqPushMulti", "_ZN2cv6detail19ExposureCompensator13createDefaultEi", "Java_org_opencv_ml_TrainData_getSamples_10", "_ZNK2cv5MatOp6invertERKNS_7MatExprEiRS1_", "_ZNK2cv4cuda6Stream15queryIfCompleteEv", "cvGetErrMode", "_ZN2cv9videostab28completeFrameAccordingToFlowERKNS_3MatES3_S3_S3_S3_fRS1_S4_", "Java_org_opencv_imgproc_Imgproc_pyrUp_10", "Java_org_opencv_video_KalmanFilter_get_1transitionMatrix_10", "_ZN2cv7vconcatEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZNK2cv9Feature2D14descriptorTypeEv", "Java_org_opencv_core_Core_cartToPolar_10", "_ZN2cv16FileNodeIteratorpLEi", "_ZNK2cv3ocl6Device17hostUnifiedMemoryEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_getComplexityReductionThreshold_10", "__powidf2", "_ZN2cv8superres7arrCopyERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_features2d_DescriptorMatcher_isMaskSupported_10", "cvCartToPolar", "_ZN2cv5flann12SearchParamsC2Eifb", "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi", "Java_org_opencv_core_Mat_n_1submat_1rr", "_ZN2cvcoERKNS_3MatE", "_ZN2cv11sepFilter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_S2_NS_6Point_IiEEdi", "cvCalcMatMulDeriv", "_ZN2cv32createHausdorffDistanceExtractorEif", "_ZN7cvflann19flann_distance_typeEv", "Java_org_opencv_imgproc_Subdiv2D_findNearest_10", "_ZNKSt13bad_exception4whatEv", "Java_org_opencv_photo_MergeMertens_process_11", "_ZN2cv4UMat10deallocateEv", "Java_org_opencv_core_Core_extractChannel_10", "_ZN2cv11cartToPolarERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "_ZN2cv3ocl18getOpenCLAllocatorEv", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC2EiN7cvflann20flann_centers_init_tEii", "_ZNK2cv12_OutputArray7releaseEv", "_ZN2cv20getValidDisparityROIENS_5Rect_IiEES1_iii", "_ZN2cv25computeCorrespondEpilinesERKNS_11_InputArrayEiS2_RKNS_12_OutputArrayE", "_ZN2cv8fillPolyERNS_3MatEPPKNS_6Point_IiEEPKiiRKNS_7Scalar_IdEEiiS3_", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_11", "_ZN2cv11FileStorageD0Ev", "_ZN2cv8clipLineENS_5Rect_IiEERNS_6Point_IiEES4_", "cvCreateImageHeader", "_ZN2cv3ocl8Platform10getDefaultEv", "_ZNK2cv3ocl6Device24profilingTimerResolutionEv", "Java_org_opencv_photo_Photo_detailEnhance_10", "cvSetOpenGlContext", "cvGetNumThreads", "_ZN2cv15getCPUTickCountEv", "_ZN2cv6detail21BestOf2NearestMatcherC2Ebfii", "Java_org_opencv_core_Mat_n_1release", "_ZN2cv5splitERKNS_11_InputArrayERKNS_12_OutputArrayE", "_Z26Mat_to_vector_vector_PointRN2cv3MatERSt6vectorIS2_INS_6Point_IiEESaIS4_EESaIS6_EE", "_ZNK2cv17DescriptorMatcher20DescriptorCollection11getLocalIdxEiRiS2_", "_ZN2cv3ocl28predictOptimalVectorWidthMaxERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_", "Java_org_opencv_calib3d_StereoMatcher_setBlockSize_10", "_ZN2cv9videostab17TwoPassStabilizerC1Ev", "Java_org_opencv_features2d_Features2d_drawKeypoints_11", "_ZN2cv6detail11PlaneWarper9buildMapsENS_5Size_IiEERKNS_11_InputArrayES6_RKNS_12_OutputArrayES9_", "Java_org_opencv_core_Core_multiply_15", "Java_org_opencv_calib3d_StereoBM_setUniquenessRatio_10", "_ZN2cv9videostab12calcFlowMaskERKNS_3MatES3_S3_fS3_S3_RS1_", "_ZNK2cv11RotatedRect12boundingRectEv", "Java_org_opencv_ml_EM_setClustersNumber_10", "_ZNK2cv12_OutputArray6neededEv", "_ZN2cv3ocl7Context9setUseSVMEb", "Java_org_opencv_core_Core_normalize_10", "Java_org_opencv_imgproc_Imgproc_integral2_11", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_10", "_ZNK2cv4cuda7HostMem18createGpuMatHeaderEv", "Java_org_opencv_core_Core_batchDistance_11", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_10", "_ZNK2cv11_InputArray8channelsEi", "_ZN2cv11convertMapsERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_ib", "_ZN10__cxxabiv111__terminateEPFvvE", "Java_org_opencv_video_BackgroundSubtractorKNN_setkNNSamples_10", "_Znaj", "_ZN2cv4cuda11TargetArchs6hasBinEii", "Java_org_opencv_ml_EM_trainEM_11", "_ZN2cv5MatOpD1Ev", "_ZNK2cv3ocl6Device16maxWorkGroupSizeEv", "_ZN2cv9SparseMat3HdrC2EiPKii", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1ERKS1_", "_ZN2cv9videostab14StabilizerBase17logProcessingTimeEv", "_ZN2cv9videostab25ConsistentMosaicInpainterC1Ev", "_ZN2cv4cuda7HostMem12getAllocatorENS1_9AllocTypeE", "_ZN2cv6detail18BundleAdjusterBase8estimateERKSt6vectorINS0_13ImageFeaturesESaIS3_EERKS2_INS0_11MatchesInfoESaIS8_EERS2_INS0_12CameraParamsESaISD_EE", "cvStdErrReport", "Java_org_opencv_imgproc_Imgproc_boxFilter_11", "_ZN2cv4UMat5setToERKNS_11_InputArrayES3_", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IdSaIdEEdNS_5Size_IiEESE_ddb", "cvGetTextSize", "cvBoxPoints", "Java_org_opencv_photo_AlignMTB_calculateShift_10", "_ZNSt9exceptionD2Ev", "_ZNKSt9bad_alloc4whatEv", "Java_org_opencv_core_Core_getTickCount_10", "Java_org_opencv_ml_SVM_getCoef0_10", "Java_org_opencv_features2d_FeatureDetector_detect_11", "_ZN2cv19createTonemapDurandEfffff", "_ZN2cv3ocl7Image2DD2Ev", "_ZN2cv2ml8KNearest6createEv", "Java_org_opencv_video_KalmanFilter_set_1measurementNoiseCov_10", "_ZN2cv20createTonemapMantiukEfff", "_ZN2cv5MutexC2ERKS0_", "_ZN2cv7vconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNK2cv13HOGDescriptor5writeERNS_11FileStorageERKNS_6StringE", "_ZNK2cv12VideoCapture8isOpenedEv", "_ZN2cv7waitKeyEi", "Java_org_opencv_core_Core_mulSpectrums_10", "Java_org_opencv_imgproc_Imgproc_warpPerspective_12", "_ZN2cv5randuERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "_ZNK2cv16BOWKMeansTrainer7clusterEv", "_ZN2cv3maxERKNS_4UMatES2_RS0_", "_ZN2cv12VideoCapturersERNS_3MatE", "_ZNK2cv9Feature2D11defaultNormEv", "_ZN2cv17FlannBasedMatcher12knnMatchImplERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEiS3_b", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_10", "Java_org_opencv_calib3d_StereoMatcher_setMinDisparity_10", "Java_org_opencv_photo_Tonemap_setGamma_10", "cvSubRS", "_ZN2cv5pyrUpERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv6detail12DpSeamFinder14closeToContourEiiRKNS_4Mat_IhEE", "_ZNK2cv3ocl6Device14doubleFPConfigEv", "cvCalcBayesianProb", "Java_org_opencv_core_Mat_n_1step1__JI", "_ZN2cv2ml9ParamGridC2Eddd", "_ZN2cv4normERKNS_11_InputArrayES2_iS2_", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD0Ev", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPS1_i", "_ZN2cv5flann5Index5buildERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZN2cv14solvePnPRansacERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bifdS5_i", "Java_org_opencv_photo_TonemapDurand_getContrast_10", "Java_org_opencv_imgproc_CLAHE_delete", "_Unwind_GetCFA", "_ZN2cv8CamShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "_ZN2cv7directx3ocl36initializeContextFromDirect3DDevice9EP16IDirect3DDevice9", "_ZN2cv12VideoCapture4openEi", "_ZN2cv15getNearestPointERKSt6vectorINS_6Point_IfEESaIS2_EEf", "Java_org_opencv_core_Core_subtract_14", "Java_org_opencv_imgproc_Imgproc_convexityDefects_10", "cvCalibrationMatrixValues", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_11", "_ZN2cv23createAffineTransformerEb", "_ZN2cv5flann11IndexParams7setBoolERKNS_6StringEb", "_ZNK2cv3ocl6Device16maxWorkItemSizesEPj", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_iddRKNS_12_OutputArrayE", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_dS6_", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_10", "cvMinAreaRect2", "_ZN2cv12VideoCapturersERNS_4UMatE", "_ZNK2cv7MatExpr3mulERKS0_d", "_ZN2cv12approxPolyDPERKNS_11_InputArrayERKNS_12_OutputArrayEdb", "_ZNK2cv4UMat1tEv", "_ZN2cv6detail11PlaneWarper9warpPointERKNS_6Point_IfEERKNS_11_InputArrayES8_S8_", "Java_org_opencv_core_Mat_nGet", "cvMeanShift", "Java_org_opencv_core_Core_transform_10", "_ZN2cv6detail11PlaneWarper4warpERKNS_11_InputArrayES4_S4_S4_iiRKNS_12_OutputArrayE", "cvReleaseCapture", "_ZN2cvgeERKNS_3MatES2_", "_ZNK2cv16MatConstIterator3posEPi", "_ZN2cv4cuda9setDeviceEi", "Java_org_opencv_imgproc_Imgproc_polylines_10", "_ZNK2cv3ocl6Device9availableEv", "Java_org_opencv_calib3d_Calib3d_convertPointsToHomogeneous_10", "Java_org_opencv_calib3d_StereoMatcher_getDisp12MaxDiff_10", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringEd", "Java_org_opencv_photo_TonemapReinhard_getColorAdaptation_10", "_ZNK2cv3ocl6Device8vendorIDEv", "_ZN2cv12equalizeHistERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_calib3d_StereoSGBM_getUniquenessRatio_10", "_ZN2cv3ogl6Buffer6createEiiiNS1_6TargetEb", "_ZN2cv5writeERNS_11FileStorageERKNS_6StringES4_", "cvReleaseData", "_ZN2cv11randShuffleERKNS_17_InputOutputArrayEdPNS_3RNGE", "Java_org_opencv_core_Mat_n_1convertTo__JJI", "_ZN2cv4cuda19printCudaDeviceInfoEi", "_ZNK2cv5MatOp12augAssignAddERKNS_7MatExprERNS_3MatE", "_ZN2cv6detail14FeatherBlender16createWeightMapsERKSt6vectorINS_4UMatESaIS3_EERKS2_INS_6Point_IiEESaIS9_EERS5_", "cvResetImageROI", "JNI_OnLoad", "Java_org_opencv_imgproc_Imgproc_polylines_12", "Java_org_opencv_ml_TrainData_getTrainSamples_11", "_ZNK2cv4cuda10DeviceInfo17maxSurfaceCubemapEv", "_ZN2cv2ml6KDTreeC1Ev", "_ZN2cv8internal15IntrinsicParamsC2ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "_ZNK2cv3ocl6Device18globalMemCacheSizeEv", "_ZN2cv9videostab17WeightingDeblurer6deblurEiRNS_3MatE", "Java_org_opencv_ml_SVM_delete", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_10", "cvAdaptiveThreshold", "Java_org_opencv_objdetect_CascadeClassifier_getFeatureType_10", "_ZNK2cv4cuda10DeviceInfo9clockRateEv", "Java_org_opencv_photo_MergeMertens_delete", "cvDisplayStatusBar", "Java_org_opencv_calib3d_StereoSGBM_setP1_10", "_ZN2cv12VideoCapture8retrieveERKNS_12_OutputArrayEi", "Java_org_opencv_core_Core_Mahalanobis_10", "_ZNK2cv2ml9StatModel11getVarCountEv", "Java_org_opencv_core_Core_PCABackProject_10", "_ZN2cv7ellipseERKNS_17_InputOutputArrayENS_6Point_IiEENS_5Size_IiEEdddRKNS_7Scalar_IdEEiii", "_ZN2cv4UMat8copySizeERKS0_", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD0Ev", "_ZN2cv19getRotationMatrix2DENS_6Point_IfEEdd", "Java_org_opencv_imgproc_Subdiv2D_insert_10", "cvSeqPopMulti", "Java_org_opencv_photo_AlignMTB_setCut_10", "_ZN2cv17CascadeClassifierC1Ev", "_ZNK2cv3ocl6Device16OpenCL_C_VersionEv", "_ZNK2cv5flann11IndexParams6getIntERKNS_6StringEi", "Java_org_opencv_imgproc_Imgproc_warpPerspective_11", "_ZN2cv3ocl6Device10getDefaultEv", "_ZN2cv8imdecodeERKNS_11_InputArrayEiPNS_3MatE", "_ZNK2cv17DescriptorMatcher10checkMasksERKNS_11_InputArrayEi", "cvDotProduct", "_ZNK2cv3ocl6Kernel20compileWorkGroupSizeEPj", "_ZNK2cv9Algorithm14getDefaultNameEv", "_ZN2cv3ocl7Image2DC2Ev", "_ZN2cv18SimpleBlobDetector6createERKNS0_6ParamsE", "_ZNSt15__exception_ptr13exception_ptrD1Ev", "cvReleaseHist", "_ZN2cv8superres28createOptFlow_Farneback_CUDAEv", "_ZN2cv3ocl12PlatformInfoD1Ev", "_ZN2cvgeERKNS_3MatEd", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_11", "_ZN2cv7fitLineERKNS_11_InputArrayERKNS_12_OutputArrayEiddd", "_ZN2cv9FormattedD2Ev", "_ZN2cv17DescriptorMatcher5matchERKNS_11_InputArrayERSt6vectorINS_6DMatchESaIS5_EES3_", "_ZN2cv6detail18PairwiseSeamFinder3runEv", "_ZN2cvneEdRKNS_3MatE", "_ZN2cv9videostab15MotionInpainterC2Ev", "Java_org_opencv_core_Core_absdiff_10", "Java_org_opencv_core_Core_bitwise_1or_10", "Java_org_opencv_imgproc_Imgproc_findContours_10", "Java_org_opencv_ml_SVM_setGamma_10", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayE", "_ZN2cv5MutexC1ERKS0_", "_ZN2cv8internal17ComputeHomographyENS_3MatES1_", "_ZNK2cv3ocl6Device15linkerAvailableEv", "_ZNK2cv4cuda10DeviceInfo14totalGlobalMemEv", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork30communicateWithDetectingThreadERKNS_3MatERSt6vectorINS_5Rect_IiEESaIS7_EE", "_ZN2cv5splitERKNS_3MatEPS0_", "Java_org_opencv_ml_StatModel_predict_11", "_ZNK2cv4cuda10DeviceInfo9tccDriverEv", "_ZN2cv7momentsERKNS_11_InputArrayEb", "_ZN2cv15calcCovarMatrixEPKNS_3MatEiRS0_S3_ii", "_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE", "Java_org_opencv_photo_TonemapMantiuk_setScale_10", "_ZN2cv10BOWTrainerC1Ev", "Java_org_opencv_photo_MergeMertens_getExposureWeight_10", "_ZN2cv9videostab17MotionEstimatorL1C2ENS0_11MotionModelE", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterBinEii", "Java_org_opencv_ml_TrainData_getCatCount_10", "Java_org_opencv_core_Core_idft_10", "_ZNK2cv3Mat7reshapeEii", "_ZN2cv9AlgorithmD1Ev", "_ZNK2cv3ocl6Device22errorCorrectionSupportEv", "_ZNK2cv3PCA7projectERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_objdetect_CascadeClassifier_delete", "_ZN2cv3ogl6Arrays16resetNormalArrayEv", "_ZNK2cv8Subdiv2D9isRightOfENS_6Point_IfEEi", "_ZN2cv3ocl8PlatformD1Ev", "_ZN2cv21find4QuadCornerSubpixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEE", "cvAndS", "_ZNK2cv3LDA4saveERKNS_6StringE", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_10", "Java_org_opencv_ml_KNearest_create_10", "Java_org_opencv_core_Mat_n_1copyTo__JJJ", "Java_org_opencv_photo_AlignMTB_process_10", "_ZNK2cv17CommandLineParser11printErrorsEv", "_ZN2cv9videostab14StabilizerBase14stabilizeFrameEv", "_ZN2cvplERKNS_7Scalar_IdEERKNS_3MatE", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_7Affine3IdEES3_S3_dS6_", "cvCreateSet", "_ZN2cv12VideoCapture4grabEv", "_ZN2cvgtERKNS_3MatES2_", "_ZNK2cv17FlannBasedMatcher5cloneEb", "_ZN2cv3ocl7ContextD2Ev", "_ZN2cv3LDA15subspaceProjectERKNS_11_InputArrayES3_S3_", "_ZN2cv8superres23createOptFlow_Brox_CUDAEv", "_ZN2cv6detail7Blender7prepareERKSt6vectorINS_6Point_IiEESaIS4_EERKS2_INS_5Size_IiEESaISA_EE", "_ZN2cv9minMaxLocERKNS_11_InputArrayEPdS3_PNS_6Point_IiEES6_S2_", "_ZN2cv18initCameraMatrix2DERKNS_11_InputArrayES2_NS_5Size_IiEEd", "Java_org_opencv_ml_TrainData_getLayout_10", "cvSeqInsertSlice", "_ZNK2cv3ocl6Device15image3DMaxWidthEv", "_ZN2cv3ocl7Program9getPrefixERKNS_6StringE", "_ZN2cv16BOWKMeansTrainerD2Ev", "_ZN2cv6detail9resultRoiERKSt6vectorINS_6Point_IiEESaIS3_EERKS1_INS_4UMatESaIS8_EE", "_ZN2cv6detail15SphericalWarper15detectResultRoiENS_5Size_IiEERNS_6Point_IiEES6_", "cvGetImageCOI", "Java_org_opencv_ml_RTrees_delete", "__deregister_frame", "_ZThn384_N2cv9videostab17TwoPassStabilizer9nextFrameEv", "_ZN2cv9videostab15VideoFileSourceC2ERKNS_6StringEb", "Java_org_opencv_photo_AlignExposures_process_10", "cvRunningAvg", "_ZN2cv37createThinPlateSplineShapeTransformerEd", "_ZN2cv4lineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_ZNKSt15__exception_ptr13exception_ptrntEv", "_ZNK2cv3ocl6Device23nativeVectorWidthDoubleEv", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMinus_10", "_ZNK2cv17DescriptorMatcher5writeERNS_11FileStorageE", "Java_org_opencv_core_Core_bitwise_1not_11", "cvReshapeMatND", "_ZN2cv14phaseCorrelateERKNS_11_InputArrayES2_S2_Pd", "_ZN2cv8internal15IntrinsicParams4InitERKNS_3VecIdLi2EEES5_RKNS2_IdLi4EEERKd", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowThreshold_10", "_ZN2cv3Mat9adjustROIEiiii", "_ZN2cv4cuda6GpuMat6createEiii", "_ZN2cv6detail12DpSeamFinderC1ENS1_12CostFunctionE", "Java_org_opencv_core_Mat_n_1channels", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_10", "_ZN2cv3minERKNS_3MatEd", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork13resetTrackingEv", "_ZN2cv5flann11IndexParamsD2Ev", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidd", "Java_org_opencv_imgproc_CLAHE_apply_10", "_ZNK2cv3ocl6Device12halfFPConfigEv", "Java_org_opencv_videoio_VideoCapture_VideoCapture_11", "Java_org_opencv_core_Mat_n_1col", "Java_org_opencv_core_Algorithm_delete", "_ZN2cv9solvePolyERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_ml_LogisticRegression_setIterations_10", "_ZN2cv17FlannBasedMatcherC1ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "_ZN2cv8Stitcher17estimateTransformERKNS_11_InputArrayERKSt6vectorIS4_INS_5Rect_IiEESaIS6_EESaIS8_EE", "_ZN2cv8superres32createSuperResolution_BTVL1_CUDAEv", "_ZN2cv6detail16createLaplacePyrERKNS_11_InputArrayEiRSt6vectorINS_4UMatESaIS5_EE", "_ZNSt8bad_castD2Ev", "_ZNK2cv5MatOp15augAssignDivideERKNS_7MatExprERNS_3MatE", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMin_10", "Java_org_opencv_ml_SVM_setTermCriteria_10", "_ZN2cv15scalarToRawDataERKNS_7Scalar_IdEEPvii", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_10", "_ZNK2cv5flann11IndexParams9getStringERKNS_6StringES4_", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayEb", "Java_org_opencv_imgproc_Imgproc_blur_11", "_ZNK2cv4UMat9convertToERKNS_12_OutputArrayEidd", "_ZN2cvmiERKNS_3MatERKNS_7MatExprE", "cvStereoRectify", "_ZN2cv15convertScaleAbsERKNS_11_InputArrayERKNS_12_OutputArrayEdd", "cvSeqElemIdx", "Java_org_opencv_calib3d_Calib3d_solvePnP_10", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERNS0_6StreamE", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_11", "_ZN2cv11polarToCartERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "Java_org_opencv_calib3d_Calib3d_projectPoints_12", "_ZN2cv11MahalanobisERKNS_11_InputArrayES2_S2_", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_10", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_10", "_ZN2cvmlEdRKNS_3MatE", "cvDistTransform", "_ZN2cv11matMulDerivERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_", "Java_org_opencv_video_KalmanFilter_set_1errorCovPost_10", "Java_org_opencv_objdetect_CascadeClassifier_getOriginalWindowSize_10", "Java_org_opencv_calib3d_StereoSGBM_create_11", "_ZN2cv6detail18SurfFeaturesFinder4findERKNS_11_InputArrayERNS0_13ImageFeaturesE", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleWindowSize_10", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS5_EERKNS_12_OutputArrayE", "_Unwind_Find_FDE", "_ZN2cv5MatOpD2Ev", "Java_org_opencv_core_Core_max_10", "Java_org_opencv_photo_AlignMTB_delete", "cvPolarToCart", "_ZN2cv3minERKNS_3MatES2_", "_ZN2cv9FormattedD0Ev", "Java_org_opencv_photo_Tonemap_process_10", "Java_org_opencv_imgproc_Imgproc_calcHist_11", "Java_org_opencv_ml_LogisticRegression_setTermCriteria_10", "Java_org_opencv_imgproc_Imgproc_integral3_10", "_ZNK2cv7MatExpr3rowEi", "cvStartReadRawData", "_ZN2cv9videostab34MoreAccurateMotionWobbleSuppressor8suppressEiRKNS_3MatERS2_", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPPhi", "_ZN2cv3MatC2EiPKiiPvPKj", "_ZN2cv17FlannBasedMatcher3addERKNS_11_InputArrayE", "_ZN2cv2ml6DTrees4NodeC2Ev", "cvMahalanobis", "cvSquareAcc", "_ZN2cv20initWideAngleProjMapERKNS_11_InputArrayES2_NS_5Size_IiEEiiRKNS_12_OutputArrayES7_id", "_ZN2cv3ocl7Image2DC2ERKNS_4UMatEbb", "Java_org_opencv_imgproc_Subdiv2D_symEdge_10", "cvGetErrStatus", "cvSeqPop", "_Z28vector_vector_Point2f_to_MatRSt6vectorIS_IN2cv6Point_IfEESaIS2_EESaIS4_EERNS0_3MatE", "_ZN2cv3minERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_core_Mat_n_1type", "cvMemStorageAllocString", "_ZN2cv21findChessboardCornersERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEi", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_10", "cvGetTickCount", "_ZN2cv4cuda5EventC2ENS1_11CreateFlagsE", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_11", "cvCmp", "cvCalcPCA", "_ZN2cv4readERKNS_8FileNodeERSt6vectorINS_6DMatchESaIS4_EE", "_ZN2cv14fillConvexPolyERNS_3MatEPKNS_6Point_IiEEiRKNS_7Scalar_IdEEii", "_ZNK2cv4cuda10DeviceInfo24maxSurfaceCubemapLayeredEv", "_ZNK2cv9videostab18FastMarchingMethod5solveEiiii", "Java_org_opencv_imgproc_Imgproc_Scharr_11", "_ZN2cv2ml6DTrees5SplitC2Ev", "_ZN10__cxxabiv119__pointer_type_infoD0Ev", "_ZNK2cv4cuda6GpuMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "Java_org_opencv_features2d_Features2d_drawKeypoints_10", "cvCalcArrBackProject", "_ZN2cv9videostab20WobbleSuppressorBaseC2Ev", "_ZNK2cv3ocl6Device18deviceVersionMajorEv", "Java_org_opencv_ml_SVM_getGamma_10", "_ZN2cv3Mat8copySizeERKS0_", "Java_org_opencv_ml_LogisticRegression_get_1learnt_1thetas_10", "_ZN2cv9videostab15MotionInpainterC1Ev", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_10", "cvAddS", "_ZN2cv29createBackgroundSubtractorKNNEidb", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_12", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_13ProgramSourceERKNS_6StringEPS7_", "_ZN2cv4globENS_6StringERSt6vectorIS0_SaIS0_EEb", "_ZN2cv4sqrtERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_createHanningWindow_10", "Java_org_opencv_features2d_DescriptorMatcher_delete", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_11", "_ZN2cv9videostab27SparsePyrLkOptFlowEstimator3runERKNS_11_InputArrayES4_S4_RKNS_17_InputOutputArrayERKNS_12_OutputArrayESA_", "Java_org_opencv_ml_RTrees_getTermCriteria_10", "_ZN2cv12getThreadNumEv", "_ZN2cv4sortERKNS_11_InputArrayERKNS_12_OutputArrayEi", "cvStereoCalibrate", "_ZNK2cv4cuda10DeviceInfo12majorVersionEv", "_ZNK2cv4cuda10DeviceInfo13maxThreadsDimEv", "_ZN2cv5flann16SavedIndexParamsC1ERKNS_6StringE", "Java_org_opencv_imgproc_Imgproc_dilate_12", "cvSampleLine", "_ZN2cv18SimpleBlobDetector6Params4readERKNS_8FileNodeE", "_ZN2cv15warpPerspectiveERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "cvMinS", "cvGetDiag", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_11", "Java_org_opencv_calib3d_StereoBM_getROI2_10", "_ZN2cv14setTrackbarPosERKNS_6StringES2_i", "_ZN2cv21BaseCascadeClassifierD2Ev", "Java_org_opencv_core_Mat_nPutB", "cvPtrND", "_ZN2cv2ml30createConcentricSpheresTestSetEiiiRKNS_12_OutputArrayES3_", "_ZN2cv6detail26restoreImageFromLaplacePyrERSt6vectorINS_4UMatESaIS2_EE", "_ZN2cv18reprojectImageTo3DERKNS_11_InputArrayERKNS_12_OutputArrayES2_bi", "_ZN2cv9SparseMatC1ERKNS_3MatE", "_ZNK2cv3ocl12PlatformInfo9getDeviceERNS0_6DeviceEi", "cvReleaseFileStorage", "Java_org_opencv_objdetect_HOGDescriptor_compute_11", "_ZN2cv6detail14PlaneWarperGpu4warpERKNS_4cuda6GpuMatERKNS_11_InputArrayES8_S8_iiRS3_", "cvXor", "Java_org_opencv_video_Video_CamShift_10", "_ZN2cv3ipp6useIPPEv", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_11", "_ZN2cv3minEdRKNS_3MatE", "Java_org_opencv_features2d_DescriptorMatcher_empty_10", "_ZNK2cv3ocl6Kernel29preferedWorkGroupSizeMultipleEv", "_ZN2cv8superres27createOptFlow_DualTVL1_CUDAEv", "Java_org_opencv_ml_DTrees_setUse1SERule_10", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERSt6vectorINS_5Rect_IiEESaIS6_EERS4_IiSaIiEERS4_IdSaIdEEdiiNS_5Size_IiEESH_b", "Java_org_opencv_core_Core_scaleAdd_10", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_12", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_10", "_ZNK2cv11_InputArray7getUMatEi", "_ZNK2cv3ocl6Device25imageBaseAddressAlignmentEv", "_Z20vector_double_to_MatRSt6vectorIdSaIdEERN2cv3MatE", "cvStartReadChainPoints", "_ZN2cv3LDA19subspaceReconstructERKNS_11_InputArrayES3_S3_", "_ZN2cv11getTextSizeERKNS_6StringEidiPi", "Java_org_opencv_photo_CalibrateRobertson_getMaxIter_10", "cvCreateStructuringElementEx", "cvCloneSparseMat", "_ZN2cv9SparseMat3ptrEPKibPj", "Java_org_opencv_core_Core_multiply_14", "_ZN2cv19getBuildInformationEv", "Java_org_opencv_core_Mat_n_1assignTo__JJI", "_ZNK2cv14DefaultDeleterI12CvMemStorageEclEPS1_", "_ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE", "_ZN10__cxxabiv117__class_type_infoD1Ev", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_10", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_10", "_Z17vector_int_to_MatRSt6vectorIiSaIiEERN2cv3MatE", "cvGetHashedKey", "_Z22Mat_to_vector_KeyPointRN2cv3MatERSt6vectorINS_8KeyPointESaIS3_EE", "Java_org_opencv_core_Mat_n_1rowRange", "Java_org_opencv_imgproc_Imgproc_clipLine_10", "Java_org_opencv_imgproc_Imgproc_adaptiveThreshold_10", "Java_org_opencv_imgproc_Imgproc_connectedComponents_11", "Java_org_opencv_video_BackgroundSubtractorKNN_setDist2Threshold_10", "_ZN2cv13drawKeypointsERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEEi", "_ZN2cv3ocl12PlatformInfoaSERKS1_", "Java_org_opencv_features2d_DescriptorMatcher_add_10", "Java_org_opencv_calib3d_Calib3d_distortPoints_10", "Java_org_opencv_imgproc_Imgproc_initWideAngleProjMap_10", "Java_org_opencv_objdetect_BaseCascadeClassifier_delete", "Java_org_opencv_imgproc_Imgproc_putText_11", "_ZN2cv3sumERKNS_11_InputArrayE", "Java_org_opencv_ml_TrainData_getResponses_10", "_ZN2cv9ExceptionC1Ev", "_ZN2cv4UMatC1ERKS0_PKNS_5RangeE", "_ZN2cv4swapERNS_4UMatES1_", "Java_org_opencv_ml_RTrees_create_10", "_ZNK2cv3ocl12PlatformInfo4nameEv", "_ZN2cv12useOptimizedEv", "cvMulSpectrums", "_ZNK2cv8Subdiv2D15getTriangleListERSt6vectorINS_3VecIfLi6EEESaIS3_EE", "_ZN2cv17DescriptorMatcher6createERKNS_6StringE", "_ZN2cv9videostab28KeypointBasedMotionEstimator8estimateERKNS_3MatES4_Pb", "cvRemoveNodeFromTree", "_ZN2cv10fitEllipseERKNS_11_InputArrayE", "Java_org_opencv_calib3d_Calib3d_estimateNewCameraMatrixForUndistortRectify_11", "cvCopyMakeBorder", "Java_org_opencv_photo_AlignMTB_process_11", "_ZN2cv11VideoWriterD2Ev", "_ZN2cv8Subdiv2D13setEdgePointsEiii", "Java_org_opencv_video_DualTVL1OpticalFlow_delete", "_ZN2cv7directx25convertFromD3D10Texture2DEP15ID3D10Texture2DRKNS_12_OutputArrayE", "_ZN2cv3ogl6Buffer9mapDeviceEv", "_ZN2cv3maxEdRKNS_3MatE", "_ZN2cv17accumulateProductERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayES2_", "_ZN2cv8Subdiv2D6insertENS_6Point_IfEE", "_ZNK2cv11_InputArray4typeEi", "Java_org_opencv_core_Mat_n_1setTo__JDDDD", "Java_org_opencv_ml_SVM_getDecisionFunction_10", "_ZN2cv8multiplyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork3runEv", "_ZN2cv20loadWindowParametersERKNS_6StringE", "cvGraphRemoveEdge", "cvInitFont", "Java_org_opencv_ml_Boost_setBoostType_10", "_ZN2cv3Mat4diagERKS0_", "Java_org_opencv_core_Core_solvePoly_10", "Java_org_opencv_ml_StatModel_delete", "Java_org_opencv_photo_AlignMTB_computeBitmaps_10", "_ZNK2cv4cuda10DeviceInfo8pciBusIDEv", "_ZN2cv17CommandLineParser4Impl12apply_paramsERKNS_6StringES4_", "_ZNK2cv4cuda10DeviceInfo12regsPerBlockEv", "Java_org_opencv_core_Core_multiply_10", "_ZN2cv3ogl6renderERKNS0_6ArraysERKNS_11_InputArrayEiNS_7Scalar_IdEE", "_ZN2cv20edgePreservingFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiff", "Java_org_opencv_core_Core_invert_10", "_ZNK2cv8Subdiv2D11checkSubdivEv", "_ZN2cv5errorERKNS_9ExceptionE", "_ZN2cv6detail18GraphCutSeamFinderC2Eiff", "Java_org_opencv_ml_TrainData_delete", "Java_org_opencv_photo_TonemapReinhard_setLightAdaptation_10", "__divdi3", "_ZNK2cv5flann5Index11getDistanceEv", "cvSmooth", "_ZN2cv8logPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "_ZN2cv16TLSDataContainerD1Ev", "_ZNK2cv17CommandLineParser10getByIndexEibiPv", "_ZNK2cv12MatAllocator4copyEPNS_8UMatDataES2_iPKjS4_S4_S4_S4_b", "_ZN2cv15KeyPointsFilter15runByPixelsMaskERSt6vectorINS_8KeyPointESaIS2_EERKNS_3MatE", "cvReadRawData", "_ZNK2cv17FlannBasedMatcher5writeERNS_11FileStorageE", "_ZN2cv32fastNlMeansDenoisingColoredMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiffii", "cvSubstituteContour", "Java_org_opencv_core_Mat_n_1submat", "Java_org_opencv_imgproc_Imgproc_approxPolyDP_10", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowValue_10", "cvClearSet", "_ZN9_IplImageC2ERKN2cv3MatE", "_ZN2cv3ocl5Queue6createERKNS0_7ContextERKNS0_6DeviceE", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_11", "_ZN2cv3ocl7Image2DC1ERKNS_4UMatEbb", "Java_org_opencv_features2d_DescriptorExtractor_compute_10", "Java_org_opencv_core_Core_gemm_10", "_ZN2cv11RNG_MT199377uniformEff", "cvMultiplyAcc", "_ZN2cv9polylinesERNS_3MatEPKPKNS_6Point_IiEEPKiibRKNS_7Scalar_IdEEiii", "_ZN2cv15BriskScaleSpaceC1Ei", "Java_org_opencv_imgproc_Subdiv2D_rotateEdge_10", "cvGraphRemoveVtxByPtr", "_ZN2cv3Mat4onesEiii", "Java_org_opencv_photo_TonemapDrago_setBias_10", "cvSeqPartition", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_11", "_ZNK2cv5MatOp17augAssignMultiplyERKNS_7MatExprERNS_3MatE", "cvScalarToRawData", "Java_org_opencv_core_Core_mean_11", "_ZN2cv7inRangeERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZN2cv14DownhillSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEERKNS_11_InputArrayENS_12TermCriteriaE", "_ZN2cv9floodFillERKNS_17_InputOutputArrayES2_NS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "cvCalcArrBackProjectPatch", "_ZNK2cv13HOGDescriptor4saveERKNS_6StringES3_", "_ZN2cv18SimpleBlobDetector6ParamsC1Ev", "Java_org_opencv_video_KalmanFilter_set_1transitionMatrix_10", "Java_org_opencv_photo_TonemapDurand_setContrast_10", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEiS4_PPKfbb", "_ZN2cv20saveWindowParametersERKNS_6StringE", "_ZN2cv9videostab17TwoPassStabilizerC2Ev", "Java_org_opencv_ml_NormalBayesClassifier_delete", "Java_org_opencv_calib3d_Calib3d_projectPoints_13", "cvCheckContourConvexity", "_ZNK2cv11_InputArray11isSubmatrixEi", "_ZN2cv8Subdiv2D8QuadEdgeC1Ev", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_11", "Java_org_opencv_calib3d_StereoBM_getPreFilterSize_10", "Java_org_opencv_core_Core_eigen_11", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_10", "_ZN2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayERSt6vectorIS4_INS_6DMatchESaIS5_EESaIS7_EEfS3_b", "Java_org_opencv_ml_ANN_1MLP_setRpropDW0_10", "_ZN2cv4cuda6GpuMatC1ENS_5Size_IiEEiPvj", "Java_org_opencv_photo_Photo_decolor_10", "_ZN2cv4cuda11TargetArchs9builtWithENS0_10FeatureSetE", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEii", "cvDestroyAllWindows", "_ZN2cv6detail12DpSeamFinderC2ENS1_12CostFunctionE", "_ZN2cv6detail18selectRandomSubsetEiiRSt6vectorIiSaIiEE", "_ZN2cv3absERKNS_3MatE", "_ZN2cv15KeyPointsFilter16removeDuplicatedERSt6vectorINS_8KeyPointESaIS2_EE", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_10", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiRNS0_6StreamE", "_ZN2cv8Subdiv2DC1ENS_5Rect_IiEE", "cvCreatePOSITObject", "_ZNK2cv3ocl6Device3ptrEv", "_ZN2cv9videostab15VideoFileSource5widthEv", "_ZN2cv9videostab24estimateOptimalTrimRatioERKNS_3MatENS_5Size_IiEE", "cv2DRotationMatrix", "_ZN2cv4UMat3eyeENS_5Size_IiEEi", "_ZNK2cv3ocl6Device15image2DMaxWidthEv", "_ZN2cv6resizeERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "Java_org_opencv_imgproc_Imgproc_cornerSubPix_10", "_ZN2cvorERKNS_3MatES2_", "_ZN2cv5EMDL1ERKNS_11_InputArrayES2_", "Java_org_opencv_imgproc_Imgproc_boxFilter_12", "Java_org_opencv_core_Core_PCACompute_11", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_11", "_Z21vector_Point3d_to_MatRSt6vectorIN2cv7Point3_IdEESaIS2_EERNS0_3MatE", "cvGetRows", "_ZN2cv11RNG_MT199377uniformEii", "_ZN2cv8UMatData4lockEv", "_ZN10__cxxabiv123__fundamental_type_infoD1Ev", "cvGet1D", "Java_org_opencv_core_Mat_n_1adjustROI", "Java_org_opencv_imgproc_Imgproc_matchTemplate_10", "Java_org_opencv_video_KalmanFilter_get_1gain_10", "cvDecodeImage", "_ZN2cv3ocl13ProgramSourceD1Ev", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_11", "_ZN2cv9videostab23MotionEstimatorRansacL2C1ENS0_11MotionModelE", "_ZN2cv3logERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv7ellipseERKNS_17_InputOutputArrayERKNS_11RotatedRectERKNS_7Scalar_IdEEii", "_ZN2cv6detail16MultiBandBlender7prepareENS_5Rect_IiEE", "_ZN10__cxxabiv121__vmi_class_type_infoD2Ev", "cvGetOptimalDFTSize", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowValue_10", "cvClearND", "Java_org_opencv_core_Mat_n_1rows", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_13", "_ZN2cv4cuda5Event17waitForCompletionEv", "_ZN2cv6detail17BundleAdjusterRay12calcJacobianERNS_3MatE", "Java_org_opencv_core_Core_merge_10", "Java_org_opencv_ml_ANN_1MLP_setTermCriteria_10", "Java_org_opencv_calib3d_StereoBM_getSmallerBlockSize_10", "_ZN2cv14createAlignMTBEiib", "_ZTv0_n24_N2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "Java_org_opencv_imgproc_Imgproc_ellipse2Poly_10", "Java_org_opencv_ml_TrainData_getTestSampleWeights_10", "_ZNK2cv7MatExprclERKNS_5RangeES3_", "_ZN2cv3ocl32buildOptionsAddMatrixDescriptionERNS_6StringERKS1_RKNS_11_InputArrayE", "_ZN2cv3ocl6Kernel3runEiPjS2_bRKNS0_5QueueE", "cvGetTrackbarPos", "_ZN2cv14ConjGradSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEENS_12TermCriteriaE", "cvSolvePoly", "_ZN2cv9ExceptionC1EiRKNS_6StringES3_S3_i", "Java_org_opencv_video_BackgroundSubtractorKNN_setNSamples_10", "_ZN2cv5flann5IndexD2Ev", "_ZNK2cv14DefaultDeleterI9_IplImageEclEPS1_", "cvSVD", "_ZNK2cv8Subdiv2D6Vertex9isvirtualEv", "_Z25Mat_to_vector_vector_charRN2cv3MatERSt6vectorIS2_IcSaIcEESaIS4_EE", "cvCreateVideoWriter", "_ZNK2cv14DefaultDeleterI23CvHaarClassifierCascadeEclEPS1_", "cvReshape", "_ZN2cvmiERKNS_7MatExprERKNS_3MatE", "_ZN2cv21DetectionBasedTrackerC1ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "_ZNK2cv4cuda10DeviceInfo19maxSurface2DLayeredEv", "Java_org_opencv_features2d_DescriptorMatcher_match_11", "_ZN2cv5flann17KDTreeIndexParamsC1Ei", "_ZN2cv6detail7Blender4feedERKNS_11_InputArrayES4_NS_6Point_IiEE", "__frame_state_for", "_ZN2cv12completeSymmERKNS_17_InputOutputArrayEb", "cvSetMouseCallback", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_10", "Java_org_opencv_core_Core_findNonZero_10", "Java_org_opencv_photo_Tonemap_getGamma_10", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_11", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayERNS_4cuda6StreamENS1_6TargetEb", "Java_org_opencv_core_Mat_n_1ones__DDI", "_ZN2cv17CommandLineParserC2ERKS0_", "_ZN2cv5MutexD1Ev", "_ZN2cv22SparseMatConstIteratorC1EPKNS_9SparseMatE", "_ZN2cv8internal18WriteStructContextC2ERNS_11FileStorageERKNS_6StringEiS6_", "_ZN2cv4cuda9getDeviceEv", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_13", "_ZNK2cv5MatOp17augAssignSubtractERKNS_7MatExprERNS_3MatE", "_ZN2cv5flann5IndexD0Ev", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_10", "_ZN2cv12LineIteratorC1ERKNS_3MatENS_6Point_IiEES5_ib", "Java_org_opencv_ml_DTrees_getUse1SERule_10", "cvReleaseVideoWriter", "_ZN2cv12VideoCapture7releaseEv", "_ZN2cv9videostab14StabilizerBase5setUpERKNS_3MatE", "Java_org_opencv_video_BackgroundSubtractorKNN_getDist2Threshold_10", "cvStartNextStream", "Java_org_opencv_ml_LogisticRegression_getRegularization_10", "Java_org_opencv_ml_SVM_setC_10", "Java_org_opencv_features2d_DescriptorMatcher_train_10", "Java_org_opencv_ml_TrainData_getSubVector_10", "_ZN2cv8superres15SuperResolution9nextFrameERKNS_12_OutputArrayE", "_ZNK2cv5flann11IndexParams9getDoubleERKNS_6StringEd", "Java_org_opencv_core_Core_randShuffle_11", "cvConvertPointsHomogeneous", "cvStartLoop", "_ZN2cv8internal18WriteStructContextC1ERNS_11FileStorageERKNS_6StringEiS6_", "cvHaarDetectObjects", "Java_org_opencv_imgproc_Imgproc_cornerHarris_11", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_7MatExprE", "Java_org_opencv_calib3d_Calib3d_projectPoints_10", "_Unwind_GetDataRelBase", "cvNormalizeHist", "_ZN2cv6circleERKNS_17_InputOutputArrayENS_6Point_IiEEiRKNS_7Scalar_IdEEiii", "Java_org_opencv_ml_ANN_1MLP_getRpropDW0_10", "cvExp", "cvCircle", "_ZNK2cv3ocl8Platform3ptrEv", "Java_org_opencv_imgproc_Imgproc_Sobel_12", "_ZN2cv3minERKNS_3MatES2_RS0_", "_ZN2cv2ml9ParamGridC1Ev", "_ZN2cv8Subdiv2D8QuadEdgeC2Ei", "Java_org_opencv_calib3d_Calib3d_computeCorrespondEpilines_10", "Java_org_opencv_videoio_VideoCapture_retrieve_10", "cvSort", "_ZNK2cv14DefaultDeleterI7CvMatNDEclEPS1_", "_ZNK2cv2ml6KDTree8getPointEiPi", "_Z21vector_Point3i_to_MatRSt6vectorIN2cv7Point3_IiEESaIS2_EERNS0_3MatE", "_ZN2cv8subtractERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "_ZN2cv9SparseMat10removeNodeEjjj", "cvPyrMeanShiftFiltering", "_ZN2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "_ZN2cv3ogl6Buffer7releaseEv", "_ZN2cv16TLSDataContainerC1Ev", "_ZNK2cv12_OutputArray6createEiiiibi", "cvSaveImage", "_ZNK2cv4cuda6GpuMat7reshapeEii", "_ZN2cv5MatOpD0Ev", "cvMakeHistHeaderForArray", "_ZNK2cv4cuda10DeviceInfo12maxSurface2DEv", "_ZN2cv8CholeskyEPfjiS0_ji", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_10", "cvMulTransposed", "_ZNK2cv11_InputArray4rowsEi", "cvFindCornerSubPix", "_ZN2cv21DetectionBasedTracker10ParametersC2Ev", "Java_org_opencv_calib3d_StereoSGBM_setP2_10", "_ZN2cv7solveLPERKNS_3MatES2_RS0_", "cvRandArr", "Java_org_opencv_core_Core_sort_10", "_ZN2cv9magnitudeERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv3ocl9KernelArgC1EiPNS_4UMatEiiPKvj", "Java_org_opencv_video_BackgroundSubtractor_delete", "Java_org_opencv_imgproc_CLAHE_setTilesGridSize_10", "_ZNK2cv3ocl6Device19imagePitchAlignmentEv", "_ZN2cv6detail11MatchesInfoC1ERKS1_", "_ZN2cvmlERKNS_7MatExprES2_", "_Z18vector_char_to_MatRSt6vectorIcSaIcEERN2cv3MatE", "_ZN2cv7hconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_ml_DTrees_setTruncatePrunedTree_10", "_ZN2cv3ogl6Buffer6unbindENS1_6TargetE", "Java_org_opencv_imgproc_Imgproc_linearPolar_10", "_ZN2cv3ocl7ContextC1Ei", "_ZN2cv12createButtonERKNS_6StringEPFviPvES3_ib", "_ZN2cv35createShapeContextDistanceExtractorEiiffiRKNS_3PtrINS_22HistogramCostExtractorEEERKNS0_INS_16ShapeTransformerEEE", "Java_org_opencv_calib3d_StereoMatcher_delete", "Java_org_opencv_photo_Photo_createAlignMTB_10", "_ZN2cv10medianBlurERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv7grabCutERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Rect_IiEES5_S5_ii", "Java_org_opencv_core_Mat_n_1setTo__JJJ", "_ZN2cvltERKNS_3MatEd", "cvCalcCovarMatrix", "Java_org_opencv_calib3d_StereoBM_create_10", "Java_org_opencv_imgproc_Imgproc_pyrDown_11", "_ZN10__cxxabiv116__enum_type_infoD0Ev", "_ZNK2cv2ml6KDTree14findOrthoRangeERKNS_11_InputArrayES4_RKNS_12_OutputArrayES7_S7_", "Java_org_opencv_core_Mat_n_1setTo__JJ", "_ZN2cv5randnERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "cvReleaseHaarClassifierCascade", "cvWriteFileNode", "Java_org_opencv_ml_Boost_getWeakCount_10", "_ZN2cv11imreadmultiERKNS_6StringERSt6vectorINS_3MatESaIS4_EEi", "cvRANSACUpdateNumIters", "_ZN10__cxxabiv120__si_class_type_infoD0Ev", "Java_org_opencv_ml_TrainData_getMissing_10", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_11", "_ZN2cv14fillConvexPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEii", "_ZN2cv3ocl13ProgramSourceC1Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowValue_10", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZN2cv11VideoWriterD1Ev", "_ZNK2cv17CascadeClassifier14getFeatureTypeEv", "Java_org_opencv_features2d_DescriptorMatcher_clone_10", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleRange_10", "_ZN2cvltERKNS_3MatES2_", "Java_org_opencv_core_Core_SVBackSubst_10", "_ZN9CvLevMarq9updateAltERPK5CvMatRPS0_S5_RPd", "_ZN2cv17CascadeClassifier16setMaskGeneratorERKNS_3PtrINS_21BaseCascadeClassifier13MaskGeneratorEEE", "Java_org_opencv_core_Mat_n_1inv__J", "_ZN2cv13HOGDescriptor12readALTModelENS_6StringE", "Java_org_opencv_video_KalmanFilter_get_1statePre_10", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayENS1_6TargetEb", "cvReleaseGraphScanner", "_ZN2cv3ocl7ContextC2Ev", "Java_org_opencv_calib3d_Calib3d_triangulatePoints_10", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_11", "cvCreateHist", "cvReleaseImageHeader", "Java_org_opencv_photo_MergeExposures_delete", "Java_org_opencv_video_BackgroundSubtractorKNN_getDetectShadows_10", "_ZN2cv12HoughCirclesERKNS_11_InputArrayERKNS_12_OutputArrayEiddddii", "_ZN2cv9AlgorithmD0Ev", "_ZN2cv14getGaborKernelENS_5Size_IiEEdddddi", "_ZN2cv3PCAC1Ev", "_ZNK2cv3Mat11checkVectorEiib", "Java_org_opencv_core_Core_batchDistance_10", "_ZN2cv22createOptFlow_DualTVL1Ev", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_11", "_ZNK2cv9SparseMat6copyToERS0_", "_ZN2cv12ellipse2PolyENS_6Point_IiEENS_5Size_IiEEiiiiRSt6vectorIS1_SaIS1_EE", "_ZNK2cv21DetectionBasedTracker10getObjectsERSt6vectorINS_5Rect_IiEESaIS3_EE", "_ZNK2cv4UMat6getMatEi", "cvDisplayOverlay", "Java_org_opencv_video_Video_createOptFlow_1DualTVL1_10", "_ZN2cv9SparseMat13resizeHashTabEj", "Java_org_opencv_android_Utils_nBitmapToMat", "_ZN2cv16accumulateSquareERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "Java_org_opencv_photo_AlignMTB_setExcludeRange_10", "_ZNK2cv17DescriptorMatcher5emptyEv", "_ZN2cv9BFMatcherC1Eib", "_ZSt17current_exceptionv", "_ZN2cv3ogl6Arrays14setVertexArrayERKNS_11_InputArrayE", "cvGraphRemoveVtx", "_ZN2cv15preCornerDetectERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvGetErrInfo", "Java_org_opencv_objdetect_HOGDescriptor_getDefaultPeopleDetector_10", "_ZNK2cv5flann11IndexParams6getAllERSt6vectorINS_6StringESaIS3_EERS2_IiSaIiEES6_RS2_IdSaIdEE", "_Unwind_Resume", "Java_org_opencv_video_KalmanFilter_set_1statePre_10", "_ZN2cv22createMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZNSt9bad_allocD0Ev", "_ZN2cvplERKNS_7MatExprERKNS_3MatE", "cvFindExtrinsicCameraParams2", "_ZN2cv3powERKNS_11_InputArrayEdRKNS_12_OutputArrayE", "_ZN2cv3ocl13ProgramSourceC2Ev", "_ZN2cv6String8allocateEj", "_ZNK2cv7MatExpr4sizeEv", "Java_org_opencv_core_Mat_n_1total", "_ZN2cv3ocl7Program4readERKNS_6StringES4_", "cvOr", "Java_org_opencv_imgproc_Imgproc_integral3_11", "Java_org_opencv_photo_Photo_createMergeDebevec_10", "_ZN2cv6detail18GraphCutSeamFinder4findERKSt6vectorINS_4UMatESaIS3_EERKS2_INS_6Point_IiEESaIS9_EERS5_", "_Z28Mat_to_vector_vector_Point3fRN2cv3MatERSt6vectorIS2_INS_7Point3_IfEESaIS4_EESaIS6_EE", "Java_org_opencv_ml_SVM_getKernelType_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_10", "_ZN2cv12GaussianBlurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "Java_org_opencv_core_Core_getOptimalDFTSize_10", "Java_org_opencv_core_Core_phase_10", "_ZN2cv3PCAC2Ev", "_ZN2cv12VideoCaptureD1Ev", "Java_org_opencv_core_Core_setErrorVerbosity_10", "_ZN2cv14createTrackbarERKNS_6StringES2_PiiPFviPvES4_", "Java_org_opencv_core_Mat_nGetS", "_ZN2cv11RNG_MT199374nextEv", "Java_org_opencv_android_Utils_nMatToBitmap2", "_ZN2cv9SparseMat5eraseEPKiPj", "cvCheckHardwareSupport", "_ZN2cv14seqRemoveSliceEP5CvSeq7CvSlice", "Java_org_opencv_imgproc_Imgproc_polylines_11", "Java_org_opencv_calib3d_StereoMatcher_setDisp12MaxDiff_10", "Java_org_opencv_imgproc_Imgproc_contourArea_10", "_ZN2cv8internal15IntrinsicParamsC1ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "cvCheckTermCriteria", "_ZN2cv3LUTERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNK2cv7MatExpr3mulERKNS_3MatEd", "_ZN2cv3ocl6KernelC2Ev", "_ZN2cv8superres23createFrameSource_VideoERKNS_6StringE", "_ZN2cv4cuda6GpuMatC2ENS_5Size_IiEEiPvj", "Java_org_opencv_ml_DTrees_setPriors_10", "_ZN2cv3ocl8PlatformC2ERKS1_", "_ZNK2cv3ocl6Device11maxSamplersEv", "Java_org_opencv_core_Core_randn_10", "_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_", "_ZN2cvdvERKNS_3MatEd", "_ZN2cv6detail17VoronoiSeamFinder10findInPairEjjNS_5Rect_IiEE", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "cvLoad", "cvEqualizeHist", "cvSetND", "cvRegisterType", "_ZN2cv6detail11MatchesInfoC1Ev", "_ZTv0_n12_N2cv9Feature2DD1Ev", "_ZN2cv8Subdiv2D6spliceEii", "Java_org_opencv_core_Mat_n_1inv__JI", "_ZN2cv4cuda18getNppErrorMessageEi", "_ZN2cv3ocl25predictOptimalVectorWidthERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_NS0_17OclVectorStrategyE", "_ZN2cv6imreadERKNS_6StringEi", "_ZN2cv8filter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEdi", "_ZThn4_N2cv8superres15SuperResolution5resetEv", "_ZN10__cxxabiv119__foreign_exceptionD0Ev", "cvSetIPLAllocators", "Java_org_opencv_photo_Photo_denoise_1TVL1_10", "_ZNK2cv8FileNode7readObjEv", "_ZN9CvLevMarqC2Eii14CvTermCriteriab", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_13", "cvSetReal2D", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1Ev", "_ZN2cvmlERKNS_3MatERKNS_7MatExprE", "_ZNKSt10bad_typeid4whatEv", "_ZN2cv17CommandLineParserC1ERKS0_", "Java_org_opencv_core_Core_n_1minMaxLocManual", "cvRunHaarClassifierCascade", "_ZN2cv4cuda24printShortCudaDeviceInfoEi", "_Z21Mat_to_vector_Point2dRN2cv3MatERSt6vectorINS_6Point_IdEESaIS4_EE", "_ZN2cv3ocl9KernelArg8ConstantERKNS_3MatE", "Java_org_opencv_photo_CalibrateRobertson_getThreshold_10", "Java_org_opencv_photo_CalibrateDebevec_setLambda_10", "_ZN2cv7MomentsC1Ev", "_ZNK2cv4cuda10DeviceInfo12minorVersionEv", "_ZNK2cv12_OutputArray13getHostMemRefEv", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_10", "Java_org_opencv_android_Utils_nMatToBitmap", "_ZN2cv12morphologyExERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZNK2cv3SVD9backSubstERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_photo_Photo_illuminationChange_10", "Java_org_opencv_photo_TonemapMantiuk_setSaturation_10", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_11", "_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv", "Java_org_opencv_core_Core_calcCovarMatrix_11", "cvSetData", "_ZThn384_N2cv9videostab17TwoPassStabilizer5resetEv", "_ZN2cv6detail13estimateFocalERKSt6vectorINS0_13ImageFeaturesESaIS2_EERKS1_INS0_11MatchesInfoESaIS7_EERS1_IdSaIdEE", "_ZN10__cxxabiv119__foreign_exceptionD2Ev", "Java_org_opencv_ml_SVM_getC_10", "_ZN2cv14seqInsertSliceEP5CvSeqiPKv", "_ZN7CvMatNDC1ERKN2cv3MatE", "Java_org_opencv_core_Core_solve_10", "_ZN2cvmlEdRKNS_7MatExprE", "_ZN2cv3ocl13ProgramSourceC2EPKc", "_ZN2cv2ml2EM6createEv", "_ZN10__cxxabiv115__forced_unwindD1Ev", "_ZdlPv", "Java_org_opencv_video_BackgroundSubtractorMOG2_getHistory_10", "cvApproxChains", "_ZN2cv12VideoCaptureD2Ev", "_ZN2cv17DescriptorMatcher4readERKNS_8FileNodeE", "_ZN2cv5flann17KDTreeIndexParamsC2Ei", "_ZN2cv3ogl6Arrays13setColorArrayERKNS_11_InputArrayE", "cvReduce", "_ZN2cv3ocl13ProgramSourceC1ERKNS_6StringE", "cvUndistort2", "Java_org_opencv_core_Mat_n_1colRange", "Java_org_opencv_ml_EM_setTermCriteria_10", "Java_org_opencv_features2d_FeatureDetector_empty_10", "_ZN2cv8Subdiv2D6locateENS_6Point_IfEERiS3_", "_ZN2cv32createFaceDetectionMaskGeneratorEv", "_ZN2cv13stereoRectifyERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEES2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_idS4_PNS_5Rect_IiEESA_", "Java_org_opencv_photo_MergeMertens_setContrastWeight_10", "cvReleasePOSITObject", "_ZN2cvanERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv8superres23createFrameSource_EmptyEv", "_Unwind_GetGR", "Java_org_opencv_calib3d_StereoSGBM_setUniquenessRatio_10", "_ZNK2cv4cuda10DeviceInfo12maxTexture2DEv", "__register_frame_info_bases", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_15", "_ZN2cv3LDAC2ERKNS_11_InputArrayES3_i", "cvClearSeq", "_ZNK2cv5MatOp6matmulERKNS_7MatExprES3_RS1_", "Java_org_opencv_imgproc_Imgproc_connectedComponents_10", "_ZN2cv5flann5IndexC1ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "Java_org_opencv_calib3d_Calib3d_undistortImage_11", "_ZNK2cv6detail20BundleAdjusterReproj25obtainRefinedCameraParamsERSt6vectorINS0_12CameraParamsESaIS3_EE", "_ZN2cv3ocl7Image2DC1Ev", "Java_org_opencv_features2d_DescriptorExtractor_write_10", "_ZNK2cv5MatOp3absERKNS_7MatExprERS1_", "cvProjectPoints2", "cvLaplace", "Java_org_opencv_features2d_FeatureDetector_detect_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_12", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_11", "Java_org_opencv_calib3d_Calib3d_findHomography_12", "Java_org_opencv_ml_SVM_create_10", "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockSize_10", "cvResizeWindow", "_ZNK2cv4cuda10DeviceInfo12maxTexture1DEv", "_ZN2cv11VideoWriterlsERKNS_3MatE", "_ZN2cv19connectedComponentsERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv3ogl6BufferC2ENS_5Size_IiEEijb", "Java_org_opencv_imgproc_Imgproc_contourArea_11", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_13", "Java_org_opencv_ml_LogisticRegression_setRegularization_10", "_ZN2cv4cuda12getOutputMatERKNS_12_OutputArrayEiiiRNS0_6StreamE", "_ZN2cv4readERKNS_8FileNodeERii", "Java_org_opencv_core_Core_repeat_10", "_ZN2cv3SVDclERKNS_11_InputArrayEi", "_ZN2cv9ExceptionD0Ev", "_ZN2cv3ocl6DeviceD2Ev", "_ZN2cv5traceERKNS_11_InputArrayE", "_ZNK2cv8FileNode4typeEv", "Java_org_opencv_objdetect_HOGDescriptor_get_1histogramNormType_10", "_ZN2cv6detail18SphericalWarperGpu4warpERKNS_4cuda6GpuMatERKNS_11_InputArrayES8_iiRS3_", "Java_org_opencv_imgproc_Imgproc_Laplacian_10", "Java_org_opencv_imgproc_CLAHE_getClipLimit_10", "Java_org_opencv_core_Core_invert_11", "_ZNK2cv11_InputArray5emptyEv", "_ZN2cv15BriskScaleSpaceC2Ei", "Java_org_opencv_core_Core_divide_14", "_ZN2cv8superres11FrameSourceD0Ev", "_ZN2cv9videostab18InpaintingPipeline7inpaintEiRNS_3MatES3_", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_11", "Java_org_opencv_ml_LogisticRegression_getLearningRate_10", "_ZN2cv3ocl6KernelC2EPKcRKNS0_7ProgramE", "Java_org_opencv_photo_Photo_createTonemapDurand_10", "Java_org_opencv_core_Core_getNumberOfCPUs_10", "Java_org_opencv_imgproc_Imgproc_putText_10", "_ZNK2cv4cuda10DeviceInfo17concurrentKernelsEv", "_ZN2cv6detail14FeatherBlender4feedERKNS_11_InputArrayES4_NS_6Point_IiEE", "Java_org_opencv_imgproc_Imgproc_circle_11", "Java_org_opencv_objdetect_HOGDescriptor_get_1L2HysThreshold_10", "cvEndWriteStruct", "_ZNSt9exceptionD0Ev", "Java_org_opencv_videoio_VideoCapture_open_11", "Java_org_opencv_core_Core_transpose_10", "cvCalibrateCamera2", "_ZN2cv12seqPushFrontEP5CvSeqPKv", "Java_org_opencv_core_Core_max_11", "_ZN2cv3ocl7ProgramC1ERKNS0_13ProgramSourceERKNS_6StringERS5_", "_ZN2cv6detail17VoronoiSeamFinder4findERKSt6vectorINS_5Size_IiEESaIS4_EERKS2_INS_6Point_IiEESaISA_EERS2_INS_4UMatESaISF_EE", "Java_org_opencv_imgproc_Subdiv2D_initDelaunay_10", "_ZN2cv11VideoWriterD0Ev", "_ZN2cv33createEMDL1HistogramCostExtractorEif", "_ZN2cv17CommandLineParseraSERKS0_", "_ZN2cv9videostab27MotionStabilizationPipeline9stabilizeEiRKSt6vectorINS_3MatESaIS3_EESt4pairIiiEPS3_", "_ZN2cv10BriskLayerC1ERKS0_i", "_ZN2cv4cuda6GpuMat9adjustROIEiiii", "_ZN2cv13getRectSubPixERKNS_11_InputArrayENS_5Size_IiEENS_6Point_IfEERKNS_12_OutputArrayEi", "_ZN2cvmlERKNS_7MatExprEd", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERNS0_6StreamE", "_ZN2cv24currentParallelFrameworkEv", "_ZN2cv9videostab20FromFileMotionReader8estimateERKNS_3MatES4_Pb", "_ZN2cv4cuda19setBufferPoolConfigEiji", "_ZN2cv2ml3SVM14getDefaultGridEi", "Java_org_opencv_core_Core_trace_10", "cvClipLine", "_ZN2cvgtEdRKNS_3MatE", "cvPreCornerDetect", "_ZN2cv3ipp19getIppErrorLocationEv", "_ZN2cv15groupRectanglesERSt6vectorINS_5Rect_IiEESaIS2_EERS0_IiSaIiEERS0_IdSaIdEEid", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_11", "_ZN2cv10BOWTrainerD0Ev", "_ZN2cv11RNG_MT199374seedEj", "_ZNK2cv14DefaultDeleterI13CvVideoWriterEclEPS1_", "_ZN2cv4FASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEib", "_ZNK2cv3ogl6Buffer4bindENS1_6TargetE", "_ZN2cv6detail10Timelapser10test_pointENS_6Point_IiEE", "Java_org_opencv_photo_AlignMTB_getMaxBits_10", "Java_org_opencv_photo_Photo_colorChange_10", "Java_org_opencv_core_Core_divide_16", "Java_org_opencv_core_Core_bitwise_1xor_10", "_ZN2cv4idctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv13HOGDescriptor4readERNS_8FileNodeE", "_ZN2cv9videostab18LpMotionStabilizer9stabilizeEiRKSt6vectorINS_3MatESaIS3_EESt4pairIiiEPS3_", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKSt6vectorINS_8KeyPointESaIS4_EES2_S8_RKS3_IS3_INS_6DMatchESaIS9_EESaISB_EERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESM_RKS3_IS3_IcSaIcEESaISO_EEi", "_ZN2cv3ocl6KernelC2ERKS1_", "cvGetWindowHandle", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_11", "_ZN2cv5flann20CompositeIndexParamsC1EiiiN7cvflann20flann_centers_init_tEf", "_ZNK2cv3Mat3dotERKNS_11_InputArrayE", "_Unwind_RaiseException", "Java_org_opencv_imgproc_Imgproc_minEnclosingTriangle_10", "Java_org_opencv_ml_SVM_getTermCriteria_10", "Java_org_opencv_features2d_Features2d_drawMatches_10", "_ZN2cv21DetectionBasedTracker4stopEv", "cvReleaseStereoBMState", "_ZN2cvmiERKNS_7MatExprERKNS_7Scalar_IdEE", "Java_org_opencv_calib3d_Calib3d_recoverPose_10", "_ZN2cv25stereoRectifyUncalibratedERKNS_11_InputArrayES2_S2_NS_5Size_IiEERKNS_12_OutputArrayES7_d", "_ZN2cv4cuda10syncOutputERKNS0_6GpuMatERKNS_12_OutputArrayERNS0_6StreamE", "Java_org_opencv_core_Mat_n_1cross", "_ZN2cv16TLSDataContainerC2Ev", "Java_org_opencv_photo_Photo_createTonemapDrago_11", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_11", "_ZN2cv9watershedERKNS_11_InputArrayERKNS_17_InputOutputArrayE", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD1Ev", "_ZN2cv17CommandLineParser4Impl11sort_paramsEv", "_ZNK2cv4cuda10DeviceInfo19maxTexture1DLayeredEv", "Java_org_opencv_imgproc_Imgproc_accumulate_10", "_ZNK2cv12_OutputArray6createEiPKiiibi", "_ZN2cvmlERKNS_7MatExprERKNS_3MatE", "_ZN2cv13HOGDescriptor14setSVMDetectorERKNS_11_InputArrayE", "_ZN2cvlsERNS_11FileStorageERKNS_6StringE", "Java_org_opencv_features2d_DescriptorExtractor_descriptorSize_10", "Java_org_opencv_ml_DTrees_getMinSampleCount_10", "_ZN2cv9SparseMat3ptrEiiibPj", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiRKSt6vectorIfSaIfEEiii", "_ZN9__gnu_cxx27__verbose_terminate_handlerEv", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_11", "cvNextNArraySlice", "Java_org_opencv_ml_EM_getCovarianceMatrixType_10", "cvWriteReal", "Java_org_opencv_calib3d_StereoBM_setROI1_10", "_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj", "_ZNK2cv4UMat8ndoffsetEPj", "_ZNK2cv16BOWKMeansTrainer7clusterERKNS_3MatE", "cvGetDimSize", "_ZN2cv9videostab17OnePassStabilizer5setUpERKNS_3MatE", "_ZN2cv9FormattedD1Ev", "cvGraphAddVtx", "_ZN2cv3ogl9Texture2D6createEiiNS1_6FormatEb", "_ZN2cv3Mat5zerosENS_5Size_IiEEi", "Java_org_opencv_core_Core_absdiff_11", "_ZN2cv5flann5Index4loadERKNS_11_InputArrayERKNS_6StringE", "_ZN2cv9FormatterD2Ev", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_", "cvSetRealND", "_ZN2cv12VideoCaptureC1Ev", "_ZN2cv11VideoWriterC2Ev", "_ZNK2cv3Mat9convertToERKNS_12_OutputArrayEidd", "_ZN2cv11RotatedRectC1ERKNS_6Point_IfEES4_S4_", "cvFlushSeqWriter", "Java_org_opencv_video_KalmanFilter_get_1controlMatrix_10", "__umoddi3", "_ZNK2cv12_OutputArray5clearEv", "cvPointPolygonTest", "_ZNK2cv3ocl6Device17imageMaxArraySizeEv", "cvDet", "_ZNK2cv5MatOp4typeERKNS_7MatExprE", "Java_org_opencv_features2d_FeatureDetector_delete", "_ZNK2cv17CommandLineParser5checkEv", "Java_org_opencv_photo_CalibrateDebevec_getLambda_10", "Java_org_opencv_video_KalmanFilter_set_1gain_10", "cvFindHomography", "_ZNK2cv5MatOp11elementWiseERKNS_7MatExprE", "cvErrorFromIppStatus", "Java_org_opencv_calib3d_Calib3d_findHomography_11", "_ZNK2cv17DescriptorMatcher20DescriptorCollection4sizeEv", "_ZN2cv4cuda6Stream17waitForCompletionEv", "cvMaxRect", "_ZN2cv8superres15SuperResolution5resetEv", "Java_org_opencv_core_Core_sumElems_10", "Java_org_opencv_core_Core_meanStdDev_11", "_ZNK2cv6detail17BundleAdjusterRay25obtainRefinedCameraParamsERSt6vectorINS0_12CameraParamsESaIS3_EE", "_ZNK2cv13HOGDescriptor7computeERKNS_11_InputArrayERSt6vectorIfSaIfEENS_5Size_IiEES9_RKS4_INS_6Point_IiEESaISB_EE", "_ZN2cv5flann11IndexParams8setFloatERKNS_6StringEf", "Java_org_opencv_videoio_VideoCapture_release_10", "_ZNK2cv4UMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv16FileNodeIteratorC2EPK13CvFileStoragePK10CvFileNodej", "Java_org_opencv_core_Core_addWeighted_11", "Java_org_opencv_core_Core_divide_12", "_ZNK2cv21DetectionBasedTracker13getParametersEv", "Java_org_opencv_imgproc_Imgproc_dilate_11", "_ZN2cv4cuda6Stream4NullEv", "cvLoadImageM", "_Z21vector_Point3f_to_MatRSt6vectorIN2cv7Point3_IfEESaIS2_EERNS0_3MatE", "Java_org_opencv_imgproc_Imgproc_boxPoints_10", "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", "_ZN2cv21DetectionBasedTracker15InnerParametersC2Ev", "_ZN2cv4cuda18ensureSizeIsEnoughEiiiRKNS_12_OutputArrayE", "_ZN2cv9videostab14StabilizerBaseC2Ev", "cvFindGraphEdgeByPtr", "_ZNK2cv4UMat11checkVectorEiib", "cvReadRawDataSlice", "_ZN2cv5AGASTERKNS_11_InputArrayERSt6vectorINS_8KeyPointESaIS4_EEibi", "cvGetMinMaxHistValue", "Java_org_opencv_photo_Photo_stylization_11", "Java_org_opencv_videoio_VideoCapture_retrieve_11", "_ZN2cvplERKNS_7MatExprERKNS_7Scalar_IdEE", "_ZN2cv4UMatC1ERKS0_RKNS_5Rect_IiEE", "_ZN2cv11RNG_MT19937cvfEv", "Java_org_opencv_ml_TrainData_getCatOfs_10", "_ZN2cv20perspectiveTransformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN10__cxxabiv117__class_type_infoD2Ev", "Java_org_opencv_photo_Photo_textureFlattening_10", "_ZN2cv8UMatDataD1Ev", "_ZN2cv9videostab17OnePassStabilizer5resetEv", "_ZN2cv9videostab14StabilizerBase19nextStabilizedFrameEv", "_ZN2cvanERKNS_3MatES2_", "_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv", "_ZNK2cv3ocl6Device24preferredVectorWidthLongEv", "_ZN2cv3ocl11haveAmdBlasEv", "_Unwind_Backtrace", "Java_org_opencv_videoio_VideoCapture_delete", "__register_frame_info_table", "Java_org_opencv_calib3d_StereoSGBM_getMode_10", "Java_org_opencv_imgproc_Imgproc_pyrUp_12", "_ZNK2cv4cuda10DeviceInfo11maxGridSizeEv", "Java_org_opencv_videoio_VideoCapture_set_10", "Java_org_opencv_imgproc_Imgproc_convertMaps_11", "cvWriteInt", "_ZN2cv6detail15SphericalWarper4warpERKNS_11_InputArrayES4_S4_iiRKNS_12_OutputArrayE", "Java_org_opencv_objdetect_HOGDescriptor_save_11", "Java_org_opencv_video_KalmanFilter_set_1processNoiseCov_10", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorTypeEv", "Java_org_opencv_core_Mat_n_1reshape__JI", "_Z28Mat_to_vector_vector_Point2fRN2cv3MatERSt6vectorIS2_INS_6Point_IfEESaIS4_EESaIS6_EE", "_ZN2cv8cubeRootEf", "_ZN2cv8KeyPoint7overlapERKS0_S2_", "_ZN2cv23getPerspectiveTransformEPKNS_6Point_IfEES3_", "_ZN2cv6detail12CameraParamsC1ERKS1_", "_ZN2cv10BriskLayer14getAgastPointsEiRSt6vectorINS_8KeyPointESaIS2_EE", "Java_org_opencv_imgproc_Imgproc_Laplacian_12", "Java_org_opencv_photo_CalibrateRobertson_getRadiance_10", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayEb", "_ZNK2cv3ocl6Kernel12localMemSizeEv", "Java_org_opencv_photo_AlignMTB_getExcludeRange_10", "Java_org_opencv_core_Core_divide_15", "_ZNK2cv2ml6KDTree9getPointsERKNS_11_InputArrayERKNS_12_OutputArrayES7_", "_ZNSt8bad_castD0Ev", "cvSliceLength", "Java_org_opencv_calib3d_Calib3d_Rodrigues_11", "_ZN2cv3ocl6DeviceC2EPv", "_ZN2cv5flann5IndexC1Ev", "_ZN2cv21DetectionBasedTracker14detectInRegionERKNS_3MatERKNS_5Rect_IiEERSt6vectorIS5_SaIS5_EE", "_ZN2cvdvERKNS_3MatERKNS_7MatExprE", "_ZN2cv8Stitcher20estimateCameraParamsEv", "Java_org_opencv_imgproc_Imgproc_rectangle_11", "_ZN2cv13redirectErrorEPFiiPKcS1_S1_iPvES2_PS2_", "Java_org_opencv_photo_CalibrateDebevec_getRandom_10", "cvRepeat", "Java_org_opencv_core_Mat_n_1eye__III", "_ZN2cv6detail12DisjointSets13findSetByElemEi", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_9SparseMatERKNS_12_OutputArrayEPPKfdb", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEi", "_ZN2cv24calcOpticalFlowFarnebackERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEdiiiidi", "_ZN2cv12pencilSketchERKNS_11_InputArrayERKNS_12_OutputArrayES5_fff", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_10", "cvSeqRemove", "cvInitNArrayIterator", "Java_org_opencv_objdetect_HOGDescriptor_delete", "_ZNK2cv4cuda10DeviceInfo17sharedMemPerBlockEv", "_ZN2cv3ocl6Device3setEPv", "_ZN2cv21createTonemapReinhardEffff", "cvRetrieveFrame", "_ZN2cv6detail17OrbFeaturesFinderC1ENS_5Size_IiEEifi", "_ZNK2cv3Mat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv7directx3ocl38initializeContextFromDirect3DDevice9ExEP18IDirect3DDevice9Ex", "_ZN2cv4UMat3eyeEiii", "_ZN2cv10getSeqElemEPK5CvSeqi", "_ZNK2cv17FlannBasedMatcher15isMaskSupportedEv", "_ZN2cv4readERKNS_8FileNodeERff", "_ZN2cv9videostab17MotionEstimatorL1C1ENS0_11MotionModelE", "_ZN2cv8SVDecompERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_i", "_ZN2cv6detail26BestOf2NearestRangeMatcherC2Eibfii", "Java_org_opencv_core_Core_cubeRoot_10", "cvRawDataToScalar", "Java_org_opencv_imgproc_Imgproc_rectangle_10", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarInit_10", "_ZN2cv17CommandLineParser5aboutERKNS_6StringE", "_ZNK2cv4cuda10DeviceInfo12maxSurface1DEv", "_ZNK2cv3ocl6Device17compilerAvailableEv", "_ZN2cv7pyrDownERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv4cuda6GpuMatC2EiiiPvj", "Java_org_opencv_imgproc_Subdiv2D_delete", "Java_org_opencv_calib3d_StereoBM_setPreFilterCap_10", "_ZN2cv3LDA4loadERKNS_6StringE", "_ZN2cv15KeyPointsFilter17runByKeypointSizeERSt6vectorINS_8KeyPointESaIS2_EEff", "_ZN2cv11RNG_MT19937cvjEv", "_ZNK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "cvCreateMat", "Java_org_opencv_ml_EM_trainE_10", "_ZNK2cv3ocl6Device26preferredVectorWidthDoubleEv", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_11", "_ZNK2cv12_OutputArray12getGpuMatRefEv", "Java_org_opencv_photo_Photo_pencilSketch_11", "_ZNK2cv11FileStorage4rootEi", "_ZN2cv11FileStorageD2Ev", "cvPerspectiveTransform", "Java_org_opencv_core_Core_getTickFrequency_10", "_ZN2cv21decomposeEssentialMatERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_", "cvCorrectMatches", "_Z19Mat_to_vector_PointRN2cv3MatERSt6vectorINS_6Point_IiEESaIS4_EE", "_ZN2cv3ocl13ProgramSourceaSERKS1_", "Java_org_opencv_core_Core_insertChannel_10", "_ZN2cv7directx3ocl32initializeContextFromD3D11DeviceEP12ID3D11Device", "cvSVBkSb", "_Z21Mat_to_vector_Point3dRN2cv3MatERSt6vectorINS_7Point3_IdEESaIS4_EE", "_ZN2cv8Subdiv2D11findNearestENS_6Point_IfEEPS2_", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD2Ev", "cvGraphAddEdge", "_ZN2cv3maxERKNS_3MatEd", "_Z29vector_vector_KeyPoint_to_MatRSt6vectorIS_IN2cv8KeyPointESaIS1_EESaIS3_EERNS0_3MatE", "Java_org_opencv_imgproc_Subdiv2D_getTriangleList_10", "Java_org_opencv_imgproc_Imgproc_Canny_11", "_ZN2cveoERKNS_7Scalar_IdEERKNS_3MatE", "_ZNK2cv3ocl6Device10extensionsEv", "Java_org_opencv_objdetect_HOGDescriptor_get_1nbins_10", "_ZNK2cv3ogl6Buffer5bufIdEv", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_13", "_ZN2cv2ml9TrainData12getSubVectorERKNS_3MatES4_", "Java_org_opencv_features2d_DescriptorMatcher_getTrainDescriptors_10", "_ZNK2cv16MatConstIterator4lposEv", "_ZN2cv9videostab15VideoFileSource5countEv", "Java_org_opencv_calib3d_StereoSGBM_delete", "_ZNK2cv3ocl6Device25preferredVectorWidthShortEv", "Java_org_opencv_video_KalmanFilter_KalmanFilter_11", "_ZNK2cv8KeyPoint4hashEv", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiddRNS0_6StreamE", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_10", "_ZN2cv10solveCubicERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_core_Algorithm_save_10", "_ZNK2cv4cuda10DeviceInfo12maxTexture3DEv", "cvResize", "_ZNK2cv12VideoCapture3getEi", "cvScaleAdd", "cvCreateFileCapture", "_ZN2cv9videostab17TwoPassStabilizer9nextFrameEv", "_ZNSt15__exception_ptr13exception_ptrC1Ev", "_ZN2cv3Mat4onesEiPKii", "_ZN2cv9videostab14StabilizerBase5resetEv", "_ZN2cvneERKNS_3MatEd", "_ZNK2cv3ocl6Device12localMemTypeEv", "_ZNK2cv3ocl6Device21nativeVectorWidthHalfEv", "_ZNK2cv4cuda7HostMem7reshapeEii", "Java_org_opencv_ml_TrainData_setTrainTestSplit_11"], "allstrings": ["vector::reserve", "unknown exception", "java/lang/Exception", "std::exception", "org/opencv/core/CvException", "%s caught %s", "org.opencv.core.Mat", "cv::Exception", "org.opencv.android.Utils", "org.opencv.core", "org.opencv.imgproc", "org.opencv.ml", "org.opencv.photo", "org.opencv.video", "org.opencv.imgcodecs", "org.opencv.videoio", "org.opencv.objdetect", "org.opencv.features2d", "org.opencv.calib3d", "Failed to allocate %lu bytes", "GRAY", "BGRA", "true", "bool", "unsigned", "unsigned long long", "float", "double", "string", "unknown", "can not convert: [", "] to [", "Exception: ", "\nERRORS:\n%s\n", "Usage: %s [params] ", " (value:%s)", "\n\t\t%s\n", "error in split_range_string(", "func != 0", "could not open directory: %s", "num_components", "eigenvalues", "eigenvectors", "vector::_M_fill_insert", "a_size.width == len", "a_size.height == len", "type == CV_64FC2", "u != 0", "libOpenCL.so", "libCL.so", "clEnqueueReadBufferRect", "clGetPlatformIDs", "clGetPlatformInfo", "clGetDeviceInfo", "clReleaseContext", "clGetDeviceIDs", "clFinish", "clReleaseCommandQueue", "clReleaseKernel", "clSetKernelArg", "clGetKernelWorkGroupInfo", "clReleaseProgram", "clCreateBuffer", "clReleaseMemObject", "clFlush", "clSetEventCallback", "clEnqueueUnmapMemObject", "clEnqueueReadBuffer", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "DIG(", "True", "TRUE", "False", "false", "FALSE", "OPENCV_OPENCL_RAISE_ERROR", "HOST_ALLOC", "reservedEntries_.empty()", "OpenCL ", "Advanced Micro Devices, Inc.", "Intel(R) Corporation", "Intel", "Iris", "NVIDIA Corporation", "cl_khr_image2d_from_buffer", "_sat", "noconvert", "convert_%s", "convert_%s%s_rte", "convert_%s_sat", "COEFF", " -D %s=%s", "clReleaseEvent", "clCreateKernel", "src4.isMat() || src4.isUMat()", "src5.isMat() || src5.isUMat()", "src6.isMat() || src6.isUMat()", "src7.isMat() || src7.isUMat()", "src8.isMat() || src8.isUMat()", "src9.isMat() || src9.isUMat()", "OPENCV_OPENCL_DEVICE", "disabled", "dgpu", "igpu", "accelerator", "    Platform: ", "    Device types: ", "    Device name: ", "clCreateContext", "clCreateProgramWithSource", " -D INTEL_DEVICE", "clBuildProgram", "clCreateProgramWithBinary", "err == 0", "clCreateCommandQueue", "_globalsize != 0", "clEnqueueNDRangeKernel", "clFinish(qq) == 0", "clEnqueueTask", "clEnqueueMapBuffer", "retval == 0", "clFinish(q) == 0", "clEnqueueWriteBuffer", "dims <= 3", "u->handle != 0", "clEnqueueWriteBufferRect", "clEnqueueCopyBuffer", "clEnqueueCopyBufferRect", "OpenCL runtime not found!", "cn <= 4", "Image format is not supported", "clCreateImage", "!alias", "clCreateImage2D", "clFlush(queue) == 0", "devData != NULL", "clEnqueueCopyBufferToImage", "!alias || canCreateAlias(src)", "uchar", "short", "uchar3", "int2", "int4", "char", "char3", "ushort", "ushort3", "int8", "short3", "int3", "int16", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "uchar2", "uchar4", "uchar8", "uchar16", "char2", "char4", "char8", "char16", "ushort2", "ushort4", "ushort8", "ushort16", "short2", "short4", "short8", "short16", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "\n(:, :, %d) = \n", "(:, :, %d) = \n", "%%.%dg", "], dtype='%s')", "uint8", "uint16", "int32", "float32", "float64", "uint64", "%d-%d", "name", "vectors", "values", "mean", "%d%c", "-.Inf", ".Inf", "%.16e", "%s(%d): %s", "x%02x", "!!%s %c", "!!%s", "<!-- %s -->", "type_id", "#x%02x", "...\n", "---\n", "\n<!-- next stream -->\n", "The storage is not opened", "Comments are not allowed here", "Tabs are prohibited in YAML!", "Invalid character", "Incorrect indentation", "Duplicated key", "Key may not start with '-'", "Missing ':'", "An empty key", "</opencv_storage>\n", "%.8e", "opencv-nd-matrix", "sizes", "data", "opencv-matrix", "rows", "cols", "top-left", "bottom-left", "planar", "interleaved", "opencv-image", "width", "height", "origin", "layout", "opencv-sparse-matrix", "header_dt", "rect", "color", "header_user_data", "oriented", "vertices", "edges", "opencv-graph", "flags", "vertex_count", "vertex_dt", "edge_count", "edge_dt", "2if%s", "opencv-sequence", "level", "count", "recursive", "opencv-sequence-tree", "sequences", "%df%s", "curve", "closed", "hole", "untyped", "Empty tags are not supported", "Mismatched closing tag", "Closing \" is expected", "apos", "quot", "Too long string literal", "Preliminary end of the stream", "Tag should start with '<'", "Unknown tag type", "Empty type name", "The wrong closing bracket", "NULL or empty filename", "NULL or empty buffer", ".xml", ".XML", ".Xml", "UTF-16", "utf-16", "Utf-16", "<?xml version=\"1.0\"?>\n", "<opencv_storage>\n", " <!-- resumed -->", "%YAML:1.0\n", "...\n---\n", "%YAML:", "<?xml", "opencv_storage", "%YAML:1.", "Invalid or unsupported syntax", "vector::_M_insert_aux", "Extra closing '%c'", "Incorrect element name %s", "scaleFunc != 0", "/proc/self/auxv", "%s:%d: error: (%d) %s\n", "OPENCV_TEMP_PATH", "status", "error", "No Error", "Backtrace", "Unspecified error", "Internal error", "Insufficient memory", "Bad argument", "Iterations do not converge", "Autotrace call", "Incorrect size of input array", "Null pointer", "Division by zero occured", "Image step is wrong", "Input COI is not supported", "Bad number of channels", "Bad parameter of type CvPoint", "Bad type of mask argument", "Parsing error", "Assertion failed", "No CUDA support", "Gpu API call", "No OpenGL support", "OpenGL API call", "Unknown %s code %d", "unknown function", "cv::error()", "%s:%d %s", "[empty_any]", "maxResults > 0", "Building kmeans tree...\n", "Building kdtree tree...\n", "Failed to allocate memory.\n", "Cannot read from file", "algorithm", "trees", "branching", "iterations", "centers_init", "cb_index", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "key_size", "multi_probe_level", "filename", "checks", "sorted", "' in the parameters given", "Missing parameter '", "Unknown index type", "FLANN_INDEX", "leaf_max_size", "reorder", "type=%d\n", "matches.cols=%d, nn=%d\n", "Got as close as I can\n", "Start linear estimation\n", "Computing ground truth\n", "Estimating number of checks\n", "Optimum cb_index: %g\n", "Computing ground truth... \n", "Autotuning parameters...\n", "Autotuned parameters:\n", "Search parameters:\n", "scn == 3 || scn == 4", "scn == 2 && depth == CV_8U", "NULL storage pointer", "count >= 0", "src.channels() == 1", "src && dst && count > 0", "dstY <= roi.height", "_kernel.channels() == 1", "rowFilter && columnFilter", "cn == CV_MAT_CN(_dstType)", "MWRMNV RMVV PSTS", "MXVNTMRMPNOPOSPURVTVVU", "MWOMOV OMRMTNUPUSTURVOV", "MWOMOV OMUM OQSQ OVUV", "MVOMOV OMUM OQSQ", "MXVNTMRMPNOPOSPURVTVVUVR SRVR", "MWOMOV UMUV OQUQ", "PTRMRV", "NUSMSTRVPVOTOS", "MWOMOV UMOS QQUV", "MVOMOV OVUV", "LXNMNV NMRV VMRV VMVV", "MWOMOV OMUV UMUV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWOMOV OMSMUNUQSROR", "MWOMOV OMSMUNUQSROR RRUV", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MWRMRV NMVM", "MXOMOSPURVSVUUVSVM", "MWNMRV VMRV", "LXNMPV RMPV RMTV VMTV", "MWOMUV UMOV", "MWNMRQRV VMRQ", "MWUMOV OMUM OVUV", "MVOMOV OMUM", "MWRMNV RMVV NVVV", "MWRMNV RMVV", "MWOMUM PQTR TQPR OVUV", "MWOMOV UMUV OMUM", "MWOMRQOV OMUM OVUV", "MWNONNOMPMQNRPRV VOVNUMTMSNRP", "LXRMRV PONPNSPTTTVSVPTOPO", "LXRMRV NOOPOSQTSTUSUPVO", "MXOVQVOROPPNRMSMUNVPVRTVVV", "MWSMMV SMUV OSTS", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "MXQMNV QMUMVOVQUTTURVNV", "MVQMNV QMVM PQSQ NVSV", "MVQMNV QMVM PQSQ", "MXQMNV WMTV PQUQ", "PUTMQV", "OVUMSSRUQVPVOUOT", "MVQMNV VMOS RQTV", "NVRMOV OVTV", "LYPMMV PMQV XMQV XMUV", "MXQMNV QMTV WMTV", "MWQMNV QMUMVNVPUQSRPR", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "MVSMPV PMVM", "LXPMNSNUOVRVTUUSWM", "MWOMQV WMQV", "KXNMNV SMNV SMSV XMSV", "NWQMTV WMNV", "NWQMSQQV WMSQ", "MWQMWMNVTV", "LXNMRV VMRV NMVM", "MWNLVX", "LXRONU ROVU", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "NWQPTPUQUV URQSPTPUQVSVUU", "MWOMOV OSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVSVUU", "MWUMUV USTQRPPQOSPURVTUUS", "MWOSUSTQRPPQOSPURVTV", "NVUNTMSMRNRV PPTP", "MWOMOV OSPQRPTQUSUV", "PTRLQMRNSMRL RPRV", "PUSLRMSNTMSL SPSXRYQYPX", "NWPMPV UPPT RSUV", "MWOPOV OSPQRPTQUSUV", "MWRPPQOSPURVTUUSTQRP", "MWOPOY OSPURVTUUSTQRPPQOS", "MWUPUY USTQRPPQOSPURVTUUS", "NVPPPV PSQQSPTP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "NVRMRUSVTVUU PPTP", "MWUPUV OPOSPURVTUUS", "NVOPRV UPRV", "LXNPPV RPPV RPTV VPTV", "MWOPUV UPOV", "MWOPRV UPRVQXPYOY", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "MXNQOPQPRQRSQW VPURSTQWPY", "NWUQSPQPPQPRQS SSQSPTPUQVSVUU", "OVRPQSQURVSVTU", "MWQPOV UPTPRQPS PSQUSVTV", "MWOMPMQNRPUV RPOV", "MWNPOPOV UPTSRUOV", "MXOQQPVP QPQRPV TPTRUV", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "MXOQQPVP SPRV", "KXMQNPOPPQPUQVSVTUUSVP", "MWOPPPQQSXTYUY UPTRPWOY", "KYTMRY MQNPOPPQPUQVTVUUVSWP", "LXOPNRNTOVQVRTRR UPVRVTUVSVRT", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "MWOSTSURUQSPRPPQOSPURVTV", "OVVMUMTNSPQVPXOYNY QPUP", "MVQMNV OSPQQPSPTQTRSTSUTVUV", "PUSMSNTNTMSM QPRPSQSRRTRUSVTV", "NVRMOV UPTPRQPS PSQUSVTV", "OTSMQSQURVSV", "MXUSTQRPPQOSPURVTUUS VPSY", "MVOPPPQQQSPV UQTPSPRQQS", "NVTQSPQPPQPRQSRSSTSURVPVOU", "NUSMQSQURVSV PPTP", "MWNPOPPQPROTOUPVRVTUURUP", "NVUPOV PQQPSPTQ PUQVSVTU", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPRPPQOSPURVSVUU OSSS", "MWTMQY RPPQOSPURVSVUUVSUQSPRP", "MWUQSPQPOQOSPTRUSVSWRXQX", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWONQMSMUNUPSQ RQSQURUUSVQVOU", "MWSMSV SMNSVS", "MWPMOQQPRPTQUSTURVQVOU PMTM", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUMQV OMUM", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PURPRQSQSPRP RURVSVSURU", "PURPRQSQSPRP SVRVRUSUSWRY", "PURMRR SMSR RURVSVSURU", "PTRMRQ", "NVPMPQ TMTQ", "NVQMPNPPQQSQTPTNSMQM", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "LXRNRV NRVR", "LXNPVP NTVT", "MWOOUU UOOU", "MWRORU OPUT UPOT", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "LXSOVRSU NRVR", "MXQLQY TLTY OQVQ OTVT", "H\\NRMQLRMSNR VRWQXRWSVR", "I[KRYR", "H\\RUJPRTZPRU", "CaGO]OXI L[GU]U", "D`F^^^^FFFF^", "H\\IR[R", "H\\IR[R IQ[Q", "E_IM[M IR[R IW[W K[YI", "H\\LBL[ RBR[ XBX[", "I[RFJ[ RFZ[ MTWT", "H[LFL[ LFYF LPTP L[Y[", "HZLFL[ LFYF LPTP", "G]KFK[ YFY[ KPYP", "NVRFR[", "JZVFVVUYTZR[P[NZMYLVLT", "G\\KFK[ YFKT POY[", "HYLFL[ L[X[", "F^JFJ[ JFR[ ZFR[ ZFZ[", "G]KFK[ KFY[ YFY[", "G\\KFK[ KFTFWGXHYJYMXOWPTQKQ", "JZRFR[ KFYF", "G]KFKULXNZQ[S[VZXXYUYF", "I[JFR[ ZFR[", "F^HFM[ RFM[ RFW[ \\FW[", "H\\KFY[ YFK[", "I[JFRPR[ ZFRP", "H\\YFK[ KFYF K[Y[", "HYLFL[ LFXF", "I[RFJ[ RFZ[ J[Z[", "I[RFJ[ RFZ[", "I[KFYF OPUP K[Y[", "G]KFK[ YFY[ KFYF", "I[KFRPK[ KFYF K[Y[", "H\\KFY[ K[YF", "I[JFR[ ZFR[ JFZF", "G]IL[b", "E_RJIZ RJ[Z", "I[J[Z[", "I[J[Z[ZZJZJ[", "MYWFUFSGRJR[ OMVM", "I\\MFM[ MQPNRMUMWNXQX[", "NVQFRGSFREQF RMR[", "MWRFSGTFSERF SMS^RaPbNb", "IZMFM[ WMMW QSX[", "I\\MMM[ MQPNRMUMWNXQX[", "KXOMO[ OSPPRNTMWM", "MYRFRWSZU[W[ OMVM", "I\\MMMWNZP[S[UZXW XMX[", "JZLMR[ XMR[", "G]JMN[ RMN[ RMV[ ZMV[", "J[MMX[ XMM[", "JZLMR[ XMR[P_NaLbKb", "J[XMM[ MMXM M[X[", "LWRMPTOXOZP[R[TYUW", "JZKFMFOGPHX[ RML[", "I[LMOMNSMXL[ YMXPWRUURXOZL[", "G]PML[ UMVSWXX[ IPKNNM[M", "H\\SMP[ JPLNOMZM", "I[KMMMOOU`WbYb ZMYOWRM]K`Jb", "MXTTTSSRQROSNTMVMXNZP[S[VYXV", "F^ZIJRZ[", "F^JIZRJ[", "KYOBOb OBVB ObVb", "KYUBUb NBUB NbUb", "H\\NJPISFS[", "H\\UFKTZT UFU[", "H\\YFO[ KFYF", "MWRYQZR[SZRY", "MWSZR[QZRYSZS\\R^Q_", "MWRMQNROSNRM RYQZR[SZRY", "MWRMQNROSNRM SZR[QZRYSZS\\R^Q_", "MWRFRT RYQZR[SZRY", "NVRFRM", "JZNFNM VFVM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "G][BIb", "KYVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`Nb", "NVRBRb", "E_IR[R", "E_RIR[ IR[R", "E_IO[O IU[U", "G]KKYY YKKY", "JZRLRX MOWU WOMU", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "E_UMXP[RXTUW IR[R", "G]OFOb UFUb JQZQ JWZW", "KYOBO[ UBU[", "F^RBR[ I[[[", "F^[BI[[[", "NVPOTU TOPU NRVR", "LRLFLRRRLF LIPQ LLOR LOMQ", "MWRKQMOPMR RKSMUPWR", "MWWRWQVOUNSMQMONNOMQMR", "G]]R]P\\MZJWHTGPGMHJJHMGPGR", "MWMRMSNUOVQWSWUVVUWSWR", "LXLPNRQSSSVRXP", "RURUTTURTPRO", "RVRRUPVNVLUKTK", "NRRROPNNNLOKPK", ">f>RfR", "D`D``D", "RRR>Rf", "D`DD``", "D`DR`R", "F^FY^K", "KYK^YF", "KYKFY^", "F^FK^Y", "KYKRYR", "MWMWWM", "MWMMWW", "D`DOGQKSPTTTYS]Q`O", "PUUDSGQKPPPTQYS]U`", "OTODQGSKTPTTSYQ]O`", "D`DUGSKQPPTPYQ]S`U", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "D`DRJR ORUR ZR`R", "D`DUDO`O`U", "JZRDJR RDZR", "D`DR`R JYZY P`T`", "D`DR`R DRRb `RRb", "LXLLLXXXXLLL", "KYRJKVYVRJ", "LXRHLRR\\XRRH", "JZRIPOJOOSMYRUWYUSZOTORI", "KYRKRY KRYR", "MWMMWW WMMW", "MWRLRX MOWU WOMU", "MWRLRX OOUO MUOWQXSXUWWU", "LXRLRX LQMOWOXQ PWTW", "KYMNWX WNMX OLLOKQ ULXOYQ", "G[MJSV KPSL G\\[\\[RG\\", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "KYRJKVYVRJ RZYNKNRZ", "I[IPKR LKNP RGRO XKVP [PYR", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "NWRKRX SKSX PKUK PXUX", "KXOKOX PKPX MKRK MXWXWTVX", "KZRKRX SKSX NKMOMKXKXOWK PXUX", "KYMKRX NKRU WKRX KKPK TKYK", "LYVKNX WKOX OKNONKWK NXWXWTVX", "KXOKOX PKPX MKWKWOVK MXRX", "KYRKLX RMWX RKXX MWVW LXXX", "KYRKMX RNVX RKWX KXPX TXYX", "NWTKPX UKQX RKWK NXSX", "KXQKMX RKNX OKTK KXUXVUTX", "KZTKPX UKQX PKNNOKZKYNYK NXSX", "KYOKPX PKQV YKPX MKRK VK[K", "LYXKLX YKMX QKONPKYK LXUXVUTX", "KZMHX\\", "JZRMLW RMXW", "NWRKRX SKSX PKSK PXUX", "LWPKPVRXTXUWUV QKQVRX NOTO", "KYNORX OORV VORX LOQO TOXO", "LXUONX VOOX OONQNOVO NXVXVVUX", "NWROPVPWQXSXUWVU SOQVQWRX", "LXLKNKPLWX NKOLVX RPMX RPNX", "KZSPQX SPRX MQOOXO MQOPXP", "NWRORX SOSX POSO PXUX", "LYPNSKSX RLRX OXVX", "LYSMSX TKTX TKMTXT QXVX", "NVRVQWRXSWRV", "NVSWRXQWRVSWSYQ[", "NVROQPRQSPRO RVQWRXSWRV", "NVROQPRQSPRO SWRXQWRVSWSYQ[", "NVRKQLRSSLRK RLRO RVQWRXSWRV", "OVRKRP SKRP", "LXOKOP PKOP UKUP VKUP", "MWQKPLPNQOSOTNTLSKQK", "MWRJRP OKUO UKOO", "KZXHM\\", "MWPHP\\ QHQ\\ PHUH P\\U\\", "MWSHS\\ THT\\ OHTH O\\T\\", "MWTHPRT\\", "MWPHTRP\\", "OURHR\\", "MWPHP\\ THT\\", "I[LRXR", "I[RLRX LRXR", "JZRMRX MRWR MXWX", "JZRMRX MMWM MRWR", "JZMMWW WMMW", "NVRQQRRSSRRQ", "I[RLQMRNSMRL LRXR RVQWRXSWRV", "I[LPXP LTXT", "I[WLMX LPXP LTXT", "I[LNXN LRXR LVXV", "JZWLMRWX", "JZMLWRMX", "JZWKMOWS MTWT MXWX", "JZMKWOMS MTWT MXWX", "JZMSRPWS MSRQWS", "NVSKPO SKTLPO", "NVQKTO QKPLTO", "LXNKOMQNSNUMVK NKONQOSOUNVK", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "JZWMQMONNOMQMSNUOVQWWW MRUR", "I[TOUPXRUTTU UPWRUT LRWR", "MWRMRX OPPORLTOUP PORMTO", "I[POOPLROTPU OPMROT MRXR", "MWRLRW OTPURXTUUT PURWTU", "JZLKRX MKRV XKRX LKXK NLWL", "G[IOLORW KORX [FRX", "KYPKP[ TKT[ MQWQ MUWU", "LYVKVX NKVK QQVQ NXVX", "KYPMTW TMPW MPWT WPMT", "KYOBOb PBPb OBVB ObVb", "KYTBTb UBUb NBUB NbUb", "AXCRGRR` GSRa FSRb X:Rb", "MXRFR[ SFS[ OFVF O[V[", "I[NFN[ OFO[ KFRF K[Z[ZUY[", "I\\RFR[ SFS[ LFKLKFZFZLYF O[V[", "H\\KFR[ LFRX YFR[ IFOF UF[F", "H\\XFK[ YFL[ LFKLKFYF K[Y[YUX[", "I[NFN[ OFO[ KFZFZLYF K[R[", "H\\RFJ[ RFZ[ RIY[ KZYZ J[Z[", "H\\RFK[ RFY[ RIX[ I[O[ U[[[", "LYUFO[ VFP[ RFYF L[S[", "H\\QFK[ RFL[ NFUF H[W[YUV[", "H]UFO[ VFP[ OFLLNF]F\\L\\F L[S[", "H\\NFO[ OFPY \\FO[ LFRF XF^F", "G][FH[ \\FI[ OFLLNF\\F H[V[XUU[", "G]IB[b", "F^RJIZ RJ[Z", "MXRFR[ SFS[ OFSF O[V[", "I[LMR[ MMRY XMR[ JMPM TMZM", "I[WML[ XMM[ MMLQLMXM L[X[XWW[", "LXRMPTOXOZP[S[UYVW SMQTPXPZQ[", "H\\SNP[ SNQ[ JPLNOMZM JPLOONZN", "MXRMR[ SMS[ OMSM O[V[", "H\\NJPISFS[ RGR[ N[W[", "H\\THT[ UFU[ UFJUZU Q[X[", "MWR[QZRYSZS\\R^Q_", "MWRMQNROSNRM R[QZRYSZS\\R^Q_", "MWRFQHRTSHRF RHRN RYQZR[SZRY", "NVRFQM SFQM", "JZNFMM OFMM VFUM WFUM", "JZRFRR MIWO WIMO", "KYUBNRUb", "KYOBVROb", "KYOBOb UBUbbDMIMRY HNR[ b:R[", "I\\XFX[ KFXF PPXP K[X[", "H\\OKUY UKOY KOYU YOKU", "I[KYYK QLULYKXOXS ULXLXO", "I[YKKY LQLUKYOXSX LULXOX", "I[YYKK SLOLKKLOLS OLLLLO", "I[KKYY QXUXYYXUXQ UXXXXU", "NVQQQSSSSQQQ QQSS SQQS", "I[M+MRMy N+NRNy M+X+ MyXy", "I[V+VRVy W+WRWy L+W+ LyWy", "7Z:RARRo @RQo ?RRr Z\"VJRr", "NWRFR[S[ RFSFS[", "IZMFM[ MFNFNZ NZYZY[ M[Y[", "J[RGR[ SGS[R[ LFYFYG LFLGYG", "H\\JFR[ JFKFRX ZFYFRX ZFR[", "H\\KFX[Y[ KFLFY[ YFXFK[ YFL[K[", "MXRFR[S[ RFSFS[ OMVMVN OMONVN", "JZLMR[ LMMMRY XMWMRY XMR[", "I[LMW[X[ LMMMX[ XMWML[ XMM[L[", "H\\NJPISFS[ NJNKPJRHR[S[", "H\\KFYFO[ KFKGXG XFN[O[", "G^[BIbJb [B\\BJb", "F_JQ[Q[R JQJR[R", "F_RIRZSZ RISISZ JQ[Q[R JQJR[R", "F_JM[M[N JMJN[N JU[U[V JUJV[V", "NWSFRGRM SGRM SFTGRM", "F^ZIJRZ[ ZIZJLRZZZ[", "F^JIZRJ[ JIJJXRJZJ[", "H]TJO[ VFP[ VFSIPKNL UIQKNL", "H]XGR[ YFS[ YFJUZU", "MXPYOZP[QZPY", "MXP[OZPYQZQ[P]N_", "MXSMRNSOTNSM PYOZP[QZ", "MXSMRNSOTNSM P[OZPYQZQ[P]N_", "MXVFTHSJSKTLUKTJ", "MXUHTGUFVGVHUJSL", "G]_BEb", "J[TFTR OIYO YIOO", "NWUFSM VFSM", "I[PFNM QFNM YFWM ZFWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "H]SFLb YFRb LQZQ KWYW", "HZMMM[ NMN[ JMXMXRWM J[Q[", "I\\RMR[ SMS[ MMLRLMYMYRXM O[V[", "H]WJR[T[ ZFXJS[ ZFT[ ZFJUZU", "G^_BEbFb _B`BFb", "MWUFTGRM UGRM UFVGRM", "opencv-hist", "type", "is_uniform", "have_ranges", "bins", "thresh", "Unknown comparison method", "NULL ranges pointer", "depth == CV_8U", "H0.isContinuous()", "nimages > 0", "Bad histogram pointer", "Null double array pointer", "nimages > 0 && dims > 0", "csz == 0 || csz == dims", "image.type() == CV_8UC1", "ssize.area() > 0", "Unknown interpolation method", "nnfunc != 0", "M should be >0", "src.cols > 0 && src.rows > 0", "dsize.area() > 0", "func != 0 && cn <= 4", "cn == 4", "Unknown distance", "Unsupported data type (=%d)", "!_src.empty()", "ccn == 1 || delta == 0", "the input arrays are too big", "avg iters = %g\n", "GAUSSIAN", "IDENTITY", "SIGMOID_SYM", "activation_function", "activation_function_id", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "training_params", "train_method", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "term_criteria", "epsilon", "n == 1", "layer_sizes", "input_scale", "output_scale", "inv_output_scale", "weights", "vector::_M_range_check", "ntrees", "nodes", "RealAdaboost", "DiscreteAdaboost", "LogitBoost", "Unknown", "GentleAdaboost", "boosting_type", "weight_trimming_rate", "unknown_%d", "means", "probs", "!means.empty()", "!covs.empty()", "meansFlt.type() == CV_32FC1", "weights.empty()", "invCovsEigenValues.empty()", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "covs", "is_classifier", "default_k", "samples", "responses", "opencv_ml_knn", "opencv_ml_knn_kd", "alpha", "norm", "mini_batch_size", "learnt_thetas", "o_labels", "n_labels", "var_all", "var_idx", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "oob_error", "var_importance", "nactive_vars", "Unknown kernel type", "SVM::getDefaultGrid", "C_SVC", "NU_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "Uknown_%d", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "Unknown_%d", "degree", "gamma", "coef0", "var_count", "class_count", "class_labels", "class_weights", "sv_total", "support_vectors", "decision_functions", "index", "sv_count == sv_total", "Custom kernel is not set", "svm_type", "svmType", "kernel", "SVM kernel tag is not found", "Missing of invalid SVM type", "sv_count", "optimize_linear", "select_working_set_func != 0", "calc_rho_func != 0", "get_row_func != 0", "_samples.type() == CV_32F", "sv_count != 0", "sv_tab[df_index[i]] > 0", "k_fold >= 2", "samples.type() == CV_32F", "not_in", "!roots.empty()", "value", "norm_class_idx", "splits", "quality", "sample.type() == CV_32F", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "var_type", "format", "cat_map", "cat_count", "vector::_M_range_insert", "cat_ofs", "missing_subst", "global_var_idx", "max_bits", "exclude_range", "max_iter", "threshold", "lambda", "random", "images[0].depth() == CV_8U", "srcImgs.size() > 0", "contrast_weight", "saturation_weight", "exposure_weight", "bias", "saturation", "scale", "intensity", "light_adapt", "color_adapt", "contrast", "sigma_color", "sigma_space", "!src.empty()", "history", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "detectShadows", "shadowValue", "shadowThreshold", " -D SHADOW_DETECT", "-D CN=%d -D NMIXTURES=%d%s", "mog2_kernel", "-D CN=%d -D NMIXTURES=%d", "getBackgroundImage2_kernel", "nsamples", "nKNN", "dist2Threshold", "map.rows ==3", "lkSparse", "-D WAVE_SIZE=%d", "cn == 1 || cn == 3 || cn == 4", "gaussianBlur", "-D polyN=%d", "polynomialExpansion", "updateFlow", "updateMatrices", "gaussianBlur5", "boxFilter5", "Inner function failed.", "Destination image must be 8u", "1.5.12", "P%c\n%d %d\n%d\n", "% 4d", "% 6d", "RGBE", "GAMMA=%g\n", "EXPOSURE=%g\n", "FORMAT=32-bit_rle_rgbe\n\n", "-Y %d +X %d\n", "#?%s\n", "FORMAT=32-bit_rle_rgbe\n", "no FORMAT specifier found", "GAMMA=%g", "-Y %d +X %d", "missing image size specifier", "EXPOSURE=%g", "wrong scanline width", "bad scanline data", ".avi", ".AVI", ".Avi", "%c%c%c%c", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "rects", "tilted", "!cascade.data.stumps.empty()", "runHaarClassifier", "runLBPClassifierStumpSimple", "stageType", "BOOST", "featureType", "HAAR", "featureParams", "maxCatCount", "stages", "weakClassifiers", "leafValues", "internalNodes", "stageThreshold", "features", "size", "stage_threshold", "feature", "left_val", "left_node", "right_val", "right_node", "OBJECT_DETECTOR", "opencv-haar-classifier", "stage %d", "parent", "next", "tree %d", "node %d", "Invalid stage %d", "%d%n", "%d%d%d%d%d%f%n", "%s%n", "%f%d%d%n", "%f%n", "%d%d%n", "file not exist", "version?", "V6.01", "version doesnot match", "winSize", "blockSize", "blockStride", "cellSize", "nbins", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "SVMDetector", "opencv-object-detector-hog", "descriptor", "descriptor_channels", "descriptor_size", "octaves", "sublevels", "diffusivity", "thresholdStep", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "FAST_findKeypoints", "FAST_nonmaxSupression", "extended", "upright", "indexParams", "ip.type() == FileNode::SEQ", "searchParams", "sp.type() == FileNode::SEQ", "masks.size() == imageCount", "typename", "FlannBased", "BruteForce", "BruteForce-SL2", "BruteForce-L1", "BruteForce-Hamming", "BruteForce-HammingLUT", "BruteForce-Hamming(2)", "imageCount > 0", "dim > 0", "-D T_FLOAT", "BruteForceMatch_Match", "BruteForceMatch_knnMatch", "BruteForceMatch_RadiusMatch", "ORB_HarrisResponses", "ORB_ICAngle", "ORB_computeDescriptor", "CV_IS_MAT(A) && CV_IS_MAT(B)", "A->cols == B->rows", "cols >= 0", "Q.size() == Size(4,4)", "cvCheckChessboard", "supports depth=8 images only", "!corners.empty()", "!centers.empty()", "samples is empty", "filteredSamples is empty", "Unknown pattern type", "centers.type() == CV_32FC1", "Basis size is not 2", "degenerate basis", "-D WSZ=%d", "prefilter_norm", "prefilter_xsobel", "minDisparity", "numDisparities", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "stereoBM", "StereoMatcher.BM", "mode", "StereoMatcher.SGBM", "affine_type", "distance", "rank", "dummies", "default", "flag", "nRads", "nAngs", "iters", "beWei", "scWei", "iaWei", "costF", "sigma", "regularization", "m >= 1", "mask.type() == CV_8U", "_image.type() == CV_8UC3", "graph matches_graph{\n", "\" -- \"", "[label=\"Nm=", ", Ni=", ", C=", "\"];\n", "states_[comp] & INTERS", "seam.front() == p1", "seam.back() == p2", "states_[comp1] & INTERS", "imgs.size() == imgs_.size()", "buildWarpPlaneMaps", "buildWarpSphericalMaps", "buildWarpCylindricalMaps", "\nprocessing time: %.3f sec\n", "processing frames", "estimated trim ratio: %f\n", "scalable_malloc", "malloc", "libtbbmalloc.so", "ALLOCATOR", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "private", "shared", "thread_monitor %s in %s\n", "pthread_join", "pthread_detach", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "Unidentified exception", "TBB_VERSION", "Tools support", "Detailed description: %s\n", "TBB Warning: %s\n", "%s: ", "Step must be positive", "Index is not allocated", "Resource deadlock would occur", "Operation not permitted", "Invalid hash load factor", "invalid key", "TBB: %s\t%s\n", "%u-%u", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "libirml.so.1", "Bogus message code %d", "Bogus buffer control mode", "Invalid crop request", "DCT coefficient out of range", "Bogus input colorspace", "Bogus JPEG colorspace", "Bogus marker length", "Invalid memory pool code %d", "Bogus sampling factors", "Bogus virtual array access", "Suspension not allowed here", "Bogus DAC index %d", "Bogus DAC value 0x%x", "Bogus DHT index %d", "Bogus DQT index %d", "Read from EMS failed", "Write to EMS failed", "Input file read error", "Empty input file", "Premature end of input file", "Not implemented yet", "Backing store not supported", "Insufficient memory (case %d)", "Read failed on temporary file", "Seek failed on temporary file", "Read from XMS failed", "Write to XMS failed", "9  13-Jan-2013", "Define Huffman Table 0x%02x", "Define Restart Interval %u", "Freed EMS handle %u", "Obtained EMS handle %u", "End Of Image", "Unexpected marker 0x%02x", "Quantizing to %d colors", "RST%d", "Start of Image", "Start Of Scan: %d components", "    Component %d: dc=%d ac=%d", "  Ss=%d, Se=%d, Ah=%d, Al=%d", "Closed temporary file %s", "Opened temporary file %s", "Freed XMS handle %u", "Obtained XMS handle %u", "Premature end of JPEG file", "JPEGMEM", "%ld%c", "RIFF", "WEBP", "VP8X", "ALPH", "VP8 ", "VP8L", "no object", "Incorrect/incomplete header.", "Truncated header.", "Frame not displayable.", "cannot parse picture header", "Bad code word", "bad partition length", "cannot parse segment header", "cannot parse filter header", "cannot parse partitions", "Not a key frame.", "Output aborted.", "Could not decode alpha data.", "Frame setup failed", "thread initialization failed.", " but running with ", "Ignoring invalid time value", " +0000", "Image width is zero in IHDR", "Image height is zero in IHDR", "Invalid image width in IHDR", "Invalid image height in IHDR", "Invalid bit depth in IHDR", "Invalid color type in IHDR", "Unknown filter method in IHDR", "Invalid filter method in IHDR", "Invalid IHDR data", "fixed point overflow ignored", "Invalid cHRM white point", "Invalid cHRM red point", "Invalid cHRM green point", "Invalid cHRM blue point", "gamma table being rebuilt", "libpng warning: %s", "undefined", "libpng error: %s", "Out of Memory", "1.2.3", "zlib memory error", "zlib stream error", "zlib version error", "Unknown zlib error", "Missing IHDR before IDAT", "Missing PLTE before IDAT", "Decompression error", "Not enough image data", "Extra compressed data", "bad adaptive filter value", "sequential row overflow", "Too many IDATs found", "Read Error", "Call to NULL read function", "gamma value", "png_set_background", "invalid alpha mode", "rgb to gray green coefficient", "rgb to gray red coefficient", "invalid background gamma type", "NULL row buffer", "Uninitialized row", "Not a PNG file", "CRC error", "invalid chunklength", "png_inflate logic error", "Unknown compression type @1", "Out of place IHDR", "Invalid IHDR chunk", "Missing IHDR before PLTE", "Invalid PLTE after IDAT", "Duplicate PLTE chunk", "Invalid palette chunk", "No image in file", "Incorrect IEND chunk length", "Missing IHDR before gAMA", "Invalid gAMA after IDAT", "Out of place gAMA chunk", "Duplicate gAMA chunk", "Incorrect gAMA chunk length", "Missing IHDR before sBIT", "Invalid sBIT after IDAT", "Out of place sBIT chunk", "Duplicate sBIT chunk", "Incorrect sBIT chunk length", "Missing IHDR before cHRM", "Invalid cHRM after IDAT", "Out of place cHRM chunk", "Duplicate cHRM chunk", "Incorrect cHRM chunk length", "Missing IHDR before sRGB", "Invalid sRGB after IDAT", "Out of place sRGB chunk", "Duplicate sRGB chunk", "Incorrect sRGB chunk length", "Unknown sRGB intent", "Missing IHDR before iCCP", "Invalid iCCP after IDAT", "Out of place iCCP chunk", "Duplicate iCCP chunk", "Malformed iCCP chunk", "Missing IHDR before sPLT", "Invalid sPLT after IDAT", "malformed sPLT chunk", "sPLT chunk has bad length", "sPLT chunk too long", "Missing IHDR before tRNS", "Invalid tRNS after IDAT", "Duplicate tRNS chunk", "Incorrect tRNS chunk length", "Missing PLTE before tRNS", "Zero length tRNS chunk", "Missing IHDR before bKGD", "Invalid bKGD after IDAT", "Missing PLTE before bKGD", "Duplicate bKGD chunk", "Incorrect bKGD chunk length", "Missing IHDR before hIST", "Invalid hIST after IDAT", "Missing PLTE before hIST", "Duplicate hIST chunk", "Incorrect hIST chunk length", "Missing IHDR before pHYs", "Invalid pHYs after IDAT", "Duplicate pHYs chunk", "Incorrect pHYs chunk length", "Missing IHDR before oFFs", "Invalid oFFs after IDAT", "Duplicate oFFs chunk", "Incorrect oFFs chunk length", "Missing IHDR before pCAL", "Invalid pCAL after IDAT", "Duplicate pCAL chunk", "No memory for pCAL purpose", "Invalid pCAL data", "No memory for pCAL params", "Missing IHDR before sCAL", "Invalid sCAL after IDAT", "Duplicate sCAL chunk", "sCAL chunk too short", "Out of place tIME chunk", "Duplicate tIME chunk", "Incorrect tIME chunk length", "Missing IHDR before tEXt", "Missing IHDR before zTXt", "Truncated zTXt chunk", "Missing IHDR before iTXt", "Truncated iTXt chunk", "Malformed iTXt chunk", "unknown critical chunk", "error in user chunk", "invalid chunk type", "internal row logic error", "internal row width error", "Decompression Error", "Extra compression data", "cHRM Blue Y", "cHRM Blue X", "cHRM Green Y", "cHRM Green X", "cHRM Red Y", "cHRM Red X", "cHRM White Y", "cHRM White X", "cHRM Red Z", "png_set_gAMA", "Invalid pCAL equation type", "Invalid sCAL unit", "Invalid sCAL width", "Invalid sCAL height", "Invalid sCAL width ignored", "Invalid sCAL height ignored", "Invalid palette length", "No memory for sPLT palettes", "Write Error", "Call to NULL write function", "No IDATs written into file", "zlib error", "Unknown custom filter method", "IDAT", "text", "invalid zlib state", ") version error", ") stream error", ") memory error", ") unknown error", "version", "stream", "memory", "[no zlib message]", "Invalid filter type specified", "Invalid sBIT depth specified", "zero length keyword", "Zero length keyword", "Tag ", "pseudo-", "_TIFFVGetField", "DotRange", "TIFFSetField", "custom tag binary object", "%s: Bad value %u for \"%s\" tag", "Error fetching directory link", "%s: Unknown %stag %u", "Directory %d does not exist", "Error writing directory link", "%s: \n", "Setting up field info failed", "_TIFFSetupFields", "TIFFFieldWithTag", "TIFFFieldWithName", "Tag %d", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "ApertureValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CFAPattern", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "Sharpness", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "SubfileType", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "Model", "StripOffsets", "Orientation", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "MinSampleValue", "MaxSampleValue", "XResolution", "YResolution", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "ResolutionUnit", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "ColorMap", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "ICC Profile", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "PerSample", "to read TIFF directory", "Can not read TIFF directory", "for \"StripByteCounts\" array", "Incorrect count for \"%s\"", "Incompatible type for \"%s\"", "Incorrect value for \"%s\"", "Out of memory reading of \"%s\"", "ReadDirEntryArray", "unknown tagname", "for strip array", "TIFFFetchNormalTag", "tiles", "strips", "for IFD list", "Colormap", "Cannot handle zero tile size", "Cannot handle zero strip size", "No space for strip buffer", "gtStripSeparate", "Integer overflow in %s", "No space for tile buffer", "gtTileSeparate", "Out of memory", "Assuming 8-bit colormap", "Missing needed %s tag", "Samples/pixel", "Color channels", "Planarconfiguration", "No \"get\" routine setup", "\"%s\": Bad mode", "Cannot read TIFF header", "Error writing TIFF header", "File not open for reading", "Integer overflow", "TIFFNumberOfStrips", "Invalid YCbCr subsampling", "Integer arithmetic overflow", "TIFFTileRowSize", "TIFFNumberOfTiles", "Seek error at scanline %lu", "Write error at scanline %lu", "tile", "strip", "File not open for writing", "No space for %s arrays", "No space for output buffer", "Warning, ", "%s: %s", "%s: Cannot open", "scanline", "TIFFRegisterCODEC", "TIFFUnRegisterCODEC", "IO error writing tag data", "IO error writing directory", "Error updating TIFF header", "%s: Could not find tag %d.", "for field buffer.", "None", "PackBits", "ThunderScan", "NeXT", "JPEG", "Old-style JPEG", "CCITT RLE", "CCITT RLE/W", "CCITT Group 3", "CCITT Group 4", "ISO JBIG", "Deflate", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "Premature EOL", "Line length mismatch", "  Group 4 Options:", "%suncompressed data", "  Group 3 Options:", "%s2-d encoding", "%sEOL padding", " (%lu = 0x%lx)\n", "  Fax Data:", " clean", " receiver regenerated", " uncorrected errors", " (%u = 0x%x)\n", "  Bad Fax Lines: %lu\n", "InitCCITTFax3", "No space for state block", "for Group 3/4 run arrays", "TIFFInitCCITTFax3", "TIFFInitCCITTFax4", "Group4Options", "Group3Options", "FaxMode", "FaxFillFunc", "BadFaxLines", "CleanFaxData", "ConsecutiveBadFaxLines", "must be either LogLUV or LogL", "Y, L", "XYZ, Luv", "SGILogDataFmt", "SGILogEncode", "No space for LZW hash table", "No space for LZW state block", "No space for LZW code table", "ZLib error: %s", "Unsupported bits/sample: %d", "Encoder error: %s", "  Predictor: ", "none ", "horizontal differencing ", "floating point predictor ", "%u (0x%x)\n", "TIFFPredictorInit", "Predictor", "Not enough", "Too much", "No space for ZIP state block", "string = \"%s\"\n", "ascii = \"%s\"\n", "uclangcode = %d; uclen = %d\n", "sccode = %d\n", "maclen = %d\n", "(%f, %f, %f)\n", "e[%d][%d]=%f ", "number of entires = %d\n", "gamma = %f\n", "entry[%d] = %f\n", "cannot get header\n", "cannot get tab table\n", "numattrs=%d\n", "/tmp/", "%s/tmp.XXXXXXXXXX", "%08x:", " %02x", "error: cannot get box\n", "incorrect magic number\n", "expecting file type box\n", "box type %s\n", "error: no code stream found\n", "error: missing IHDR box\n", "error: no components\n", "error: no COLR box\n", "ICC Profile CS %08x\n", "error: no memory\n", "%s\n_jp2overhead=%lu\n", "%02x ", "hoff[%d] = %d; voff[%d] = %d\n", "seqno = %d;\n", "po[%d] = %d; ", "cs[%d] = %d; ce[%d] = %d; ", "rs[%d] = %d; re[%d] = %d; ", "le[%d] = %d\n", "caps = 0x%02x;\n", "csty = 0x%02x;\n", "prg = %d; numlyrs = %d;\n", "regid = %d;\n", "data = ", "ind=%d; len = %d;\n", "data =\n", "type = 0x%04x (%s);", " len = %d;", "UNKNOWN", "jpc_dec_decodecblks failed\n", "write component failed\n", "cannot get marker segment\n", "RESOLUTION LEVEL %d\n", "BAND %d\n", "CODE BLOCK GROUP %d\n", "CODE BLOCK %d\n", "jpc_dec_decodepkts failed\n", "read error\n", "maxlyrs", "maxpkts", "debug", "cannot write SOC marker\n", "cannot write SIZ marker\n", "Creator: JasPer Version %s", "cannot write COM marker\n", "cannot write COD marker\n", "lyrno = %02d\n", "success %d goodthresh %f\n", "  tcmpt %5d %5d %5d %5d\n", "    rlvl %5d %5d %5d %5d\n", "      band %5d %5d %5d %5d\n", "unsupported image type\n", "ignoring invalid mode %s\n", "invalid tile width %lu\n", "invalid tile height %lu\n", "invalid precinct width\n", "invalid precinct height\n", "invalid code block width %d\n", "invalid code block height %d\n", "code block size too large\n", "too many layers\n", "invalid number of guard bits\n", "cannot open tmp file\n", "cannot write SOT marker\n", "cannot write SOD marker\n", "cannot write EOI marker\n", "invalid JP encoder options\n", "dotile failed\n", "real", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "imgareatlx", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "rate", "ilyrrates", "_jp2overhead", "warning: corrupt code stream\n", "missing SOP marker segment\n", "alignment failed\n", "hdrlen=%lu bodylen=%lu \n", "missing EPH marker segment\n", "packet body offset=%06ld\n", "%04x:", "1.900.1", "channo=%d; type=%d; assoc=%d\n", "numchans = %d\n", "cmptno=%d; map=%d; pcol=%d\n", "numents=%d; numchans=%d\n", "LUT[%d][%d]=%d\n", "method=%d; pri=%d; approx=%d\n", "csid=%d\n", "JP2 box: ", "cannot copy box data\n", "cannot parse box data\n", "FTYP", "JP2H", "IHDR", "BPCC", "COLR", "PCLR", "CMAP", "CDEF", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "Unexpected attribute type.", "Invalid ", ": it is more than ", " characters long.", "Cannot find image attribute \"", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "channels", "lineOrder", "compression", "preview", "pixels.", "Pixel type of \"", "\" image channel is invalid.", "\" channel is not 1.", "\" channel is invalid.", "\" channel.", "File is not an image file.", "Cannot read version ", "attribute name", "attribute type name", "\" to image attribute \"", "\" of type \"", "Cannot read image file \"", "Unknown pixel data type.", "keycode", "m33f", "m33d", "m44f", "m44d", "Unknown pixel type.", "\" to an attribute of type \"", "unrecognized exception", "Cannot overwrite scan line ", "\" to image file \"", "\" failed. \"", "Cannot open image file \"", "\" channel of output file \"", "rational", "Scan line ", " is missing.", "Unexpected data block length.", "\" channel of input file \"", "chromaticities", "whiteLuminance", "adoptedNeutral", "xDensity", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "framesPerSecond", "worldToCamera", "worldToNDC", "renderingTransform", "lookModTransform", "owner", "comments", "capDate", "wrapmodes", "multiView", "File output failed.", "Early end of file: read ", " out of ", " requested bytes.", "Unexpected end of file.", "(string)", "stringvector", "tiledesc", "Arguments not in valid range.", "Unexpected tile block length.", "Tile (", ") is not a valid tile.", ") is missing.", "Unexpected tile x coordinate.", "Unexpected tile y coordinate.", "Argument not in valid range.", "Unknown LevelMode format.", "timecode", "Cannot initialize mutex (%T).", "Cannot lock mutex (%T).", "Cannot unlock mutex (%T).", "box2i", "box2f", "chlist", "channel name", "Integer addition overflow.", "Data decoding (rle) failed.", "std::bad_exception", "pure virtual method called\n", "std::bad_alloc", "basic_ios::clear", "POSIX", "basic_string::erase", "%.*Lf", "%m/%d/%y", "%H:%M", "%H:%M:%S", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::at", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_string::substr", "std::bad_typeid", "std::bad_cast", "-+xX0123456789abcdefABCDEF", "-0123456789", "AKST", "space", "print", "cntrl", "upper", "lower", "digit", "punct", "xdigit", "alnum", "graph", "system", "terminate called recursively\n", "  what():  ", "_GLOBAL_", "(anonymous namespace)", "string literal", "auto", "[abi:", "{default arg#", "JArray", "vtable for ", "VTT for ", "construction vtable for ", "-in-", "typeinfo for ", "typeinfo name for ", "typeinfo fn for ", "non-virtual thunk to ", "virtual thunk to ", "covariant return thunk to ", "java Class for ", "guard variable for ", "TLS init function for ", "TLS wrapper function for ", "reference temporary #", " for ", "hidden alias for ", "transaction clone for ", "non-transaction clone for ", "_Sat ", "_Accum", "_Fract", "operator", "operator ", "new ", "java resource ", "decltype (", "this", "{parm#", "global constructors keyed to ", "global destructors keyed to ", "{lambda(", "{unnamed type#", " [clone ", " restrict", " volatile", " const", "complex ", "imaginary ", " __vector(", "std::allocator", "allocator", "std::basic_string", "basic_string", "std::string", "std::istream", "basic_istream", "std::ostream", "basic_ostream", "std::iostream", "basic_iostream", "alignof ", "const_cast", "delete[] ", "dynamic_cast", "delete ", "operator\"\" ", "new[]", "reinterpret_cast", "static_cast", "sizeof ", "throw", "throw ", "signed char", "boolean", "byte", "long double", "__float128", "unsigned char", "unsigned int", "long", "unsigned long", "__int128", "unsigned __int128", "unsigned short", "void", "wchar_t", "long long", "decimal32", "decimal64", "decimal128", "half", "char16_t", "char32_t", "decltype(nullptr)", "Mat::nGet()", "Mat::nGetD()", "Mat::nGetF()", "Mat::nGetI()", "Mat::nGetS()", "Mat::nGetB()", "Mat::nPutF()", "Mat::nPutI()", "Mat::nPutS()", "Mat::nPutB()", "Mat::nPutD()", "Mat::n_1zeros__DDI()", "Mat::n_1zeros__III()", "Mat::n_1t()", "Mat::n_1submat()", "Mat::n_1submat_1rr()", "Mat::n_1size()", "Mat::n_1setTo__JJ()", "Mat::n_1setTo__JJJ()", "Mat::n_1setTo__JDDDDJ()", "Mat::n_1setTo__JDDDD()", "Mat::n_1rowRange()", "Mat::n_1row()", "Mat::n_1reshape__JI()", "Mat::n_1reshape__JII()", "Mat::n_1release()", "Mat::n_1push_1back()", "Mat::n_1ones__DDI()", "Mat::n_1ones__III()", "Mat::n_1mul__JJ()", "Mat::n_1mul__JJD()", "core::locateROI_10()", "Mat::n_1inv__J()", "Mat::n_1inv__JI()", "Mat::n_1eye__DDI()", "Mat::n_1eye__III()", "Mat::n_1dot()", "Mat::n_1diag__J()", "Mat::n_1diag__JI()", "Mat::n_1cross()", "Mat::n_1create__JDDI()", "Mat::n_1create__JIII()", "Mat::n_1copyTo__JJJ()", "Mat::n_1copyTo__JJ()", "Mat::n_1convertTo__JJI()", "Mat::n_1convertTo__JJID()", "Mat::n_1convertTo__JJIDD()", "Mat::n_1colRange()", "Mat::n_1col()", "Mat::n_1clone()", "Mat::n_1checkVector__JI()", "Mat::n_1checkVector__JII()", "Mat::n_1checkVector__JIIZ()", "Mat::n_1assignTo__JJ()", "Mat::n_1assignTo__JJI()", "Mat::n_1adjustROI()", "Mat::n_1Mat__JII()", "Mat::n_1Mat__JIIII()", "Mat::n_1Mat__DDIDDDD()", "Mat::n_1Mat__IIIDDDD()", "Mat::n_1Mat__DDI()", "Mat::n_1Mat__III()", "info.format == ANDROID_BITMAP_FORMAT_RGBA_8888 || info.format == ANDROID_BITMAP_FORMAT_RGB_565", "nBitmapToMat catched cv::Exception: %s", "nBitmapToMat catched unknown exception (...)", "Unknown exception in JNI code {nBitmapToMat}", "src.dims == 2 && info.height == (uint32_t)src.rows && info.width == (uint32_t)src.cols", "src.type() == CV_8UC1 || src.type() == CV_8UC3 || src.type() == CV_8UC4", "nMatToBitmap catched cv::Exception: %s", "nMatToBitmap catched unknown exception (...)", "Unknown exception in JNI code {nMatToBitmap}", "Unknown exception in JNI code {core::minMaxLoc()}", "Unknown exception in JNI code {core::getTextSize()}", "/builds/master_pack-android/opencv/modules/features2d/misc/java/src/cpp/features2d_manual.hpp", "/builds/master_pack-android/opencv/modules/core/include/opencv2/core/persistence.hpp", "/builds/master_pack-android/opencv/modules/core/src/alloc.cpp", "code == CMP_GT || code == CMP_LE || code == CMP_EQ || code == CMP_NE", "/builds/master_pack-android/opencv/modules/core/src/arithm.cpp", "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'", "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'", "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified", "The lower bounary is neither an array of the same size and same type as src, nor a scalar", "The upper bounary is neither an array of the same size and same type as src, nor a scalar", "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT", "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'", "Either all the pointers should be null or they all should be non-null", "/builds/master_pack-android/opencv/modules/core/src/array.cpp", "Images with planar data layout should be used with COI selected", "Mask should have 8uC1 or 8sC1 data type", "The matrix is not continuous so the number of rows can not be changed", "The total number of matrix elements is not divisible by the new number of rows", "The total matrix width is not divisible by the new number of columns", "The last dimension full size is not divisible by new number of channels", "Simultaneous change of shape and number of channels is not supported. Do it by 2 separate calls", "Number of elements in the original and reshaped array is different", "The matrix is not continuous, thus its number of rows can not be changed", "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", "Iterations flag is set and maximum number of iterations is <= 0", "Neither accuracy nor maximum iterations number flags are set in criteria type", "/builds/master_pack-android/opencv/modules/core/src/command_line_parser.cpp", "unknown/unsupported parameter type", "(termcrit.type==(TermCriteria::MAX_ITER+TermCriteria::EPS) && termcrit.epsilon>0 && termcrit.maxCount>0) || ((termcrit.type==TermCriteria::MAX_ITER) && termcrit.maxCount>0)", "/builds/master_pack-android/opencv/modules/core/src/conjugate_gradient.cpp", "/builds/master_pack-android/opencv/modules/core/src/convert.cpp", "(lutcn == cn || lutcn == 1) && _lut.total() == 256 && _lut.isContinuous() && (depth == CV_8U || depth == CV_8S)", "dst.size() == src.size() && dst.type() == CV_MAKETYPE(lut.depth(), src.channels())", "svec[j].size == dst.size && svec[j].depth() == dst.depth() && svec[j].channels() == 1 && i < dst.channels()", "/builds/master_pack-android/opencv/modules/core/src/copy.cpp", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", "src.type() == dst.type() && dst.rows % src.rows == 0 && dst.cols % src.cols == 0", "0 <= rowRange_.start && rowRange_.start <= rowRange_.end && rowRange_.end <= m.rows", "/builds/master_pack-android/opencv/modules/core/src/cuda_gpu_mat.cpp", "0 <= colRange_.start && colRange_.start <= colRange_.end && colRange_.end <= m.cols", "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", "/builds/master_pack-android/opencv/modules/core/include/opencv2/core/private.cuda.hpp", "/builds/master_pack-android/opencv/modules/core/src/cuda_host_mem.cpp", "/builds/master_pack-android/opencv/modules/core/src/datastructs.cpp", "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", "/builds/master_pack-android/opencv/modules/core/src/directx.cpp", "termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0", "/builds/master_pack-android/opencv/modules/core/src/downhill_simplex.cpp", "(x.cols == 1 && x.rows == ndim) || (x.cols == ndim && x.rows == 1)", "std::min(_step.cols, _step.rows) == 1 && std::max(_step.cols, _step.rows) >= 2 && _step.type() == CV_64FC1", "/builds/master_pack-android/opencv/modules/core/src/dxt.cpp", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "This mode (using nonzero_rows with a single-column matrix) breaks the function's logic, so it is prohibited.\nFor fast convolution/correlation use 2-column matrix or single-row matrix instead", "/builds/master_pack-android/opencv/modules/core/src/gl_core_3_1.cpp", "/builds/master_pack-android/opencv/modules/core/src/glob.cpp", "/builds/master_pack-android/opencv/modules/core/src/kmeans.cpp", "/builds/master_pack-android/opencv/modules/core/include/opencv2/core/mat.inl.hpp", "(best_labels.cols == 1 || best_labels.rows == 1) && best_labels.cols*best_labels.rows == N && best_labels.type() == CV_32S && best_labels.isContinuous()", "/builds/master_pack-android/opencv/modules/core/src/lapack.cpp", "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", "w.type() == type && (w.size() == cv::Size(nm,1) || w.size() == cv::Size(1, nm) || w.size() == cv::Size(nm, nm) || w.size() == cv::Size(n, m))", "src.type() == dst.type() && src.rows == dst.cols && src.cols == dst.rows", "/builds/master_pack-android/opencv/modules/core/src/lda.cpp", "Wrong shapes for given matrices. Was size(src) = (%d,%d), size(W) = (%d,%d).", "Wrong mean shape for the given data matrix. Expected %d, but was %d.", "Wrong mean shape for the given eigenvector matrix. Expected %d, but was %d.", "At least two classes are needed to perform a LDA. Reason: Only one class was given!", "The number of samples must equal the number of labels. Given %d labels, %d samples. ", "Warning: Less observations than feature dimension given!", "Computation will probably fail.", "Wrong shape of input matrix! Expected a matrix with one row or column.", "Wrong number of elements in matrix #%d! Expected %d was %d.", "InputArray Datatype %d is not supported.", "The data is expected as InputArray::STD_VECTOR_MAT (a std::vector<Mat>) or _InputArray::STD_VECTOR_VECTOR (a std::vector< std::vector<...> >).", "(Func.rows==1 && (Constr.cols-Func.cols==1))|| (Func.cols==1 && (Constr.cols-Func.rows==1))", "/builds/master_pack-android/opencv/modules/core/src/lpsolver.cpp", "src1.size() == src2.size() && type == src2.type() && (depth == CV_32F || depth == CV_64F)", "/builds/master_pack-android/opencv/modules/core/src/mathfuncs.cpp", "X.size == Y.size && type == Y.type() && (depth == CV_32F || depth == CV_64F)", "(depth == CV_32F || depth == CV_64F) && (src1.empty() || src1.type() == type)", "the value at (%d, %d)=%g is out of range", "(coeffs.size() == Size(n0, 1) || coeffs.size() == Size(n0+1, 1) || coeffs.size() == Size(1, n0) || coeffs.size() == Size(1, n0+1))", "/builds/master_pack-android/opencv/modules/core/src/matmul.cpp", "(evals0.cols == 1 || evals0.rows == 1) && ecount0 <= ecount && evects0.cols == evects.cols && evects0.rows == ecount0", "type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2)", "C.type() == type && (((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", "delta.channels() == 1 && (delta.rows == src.rows || delta.rows == 1) && (delta.cols == src.cols || delta.cols == 1)", "((flags & CV_COVAR_ROWS) != 0) ^ ((flags & CV_COVAR_COLS) != 0)", "(D.rows == ((flags & CV_GEMM_A_T) == 0 ? A.rows : A.cols)) && (D.cols == ((flags & CV_GEMM_B_T) == 0 ? B.cols : B.rows)) && D.type() == A.type()", "type == v2.type() && type == icovar.type() && sz == v2.size() && len == icovar.rows && len == icovar.cols", "/builds/master_pack-android/opencv/modules/core/src/matop.cpp", "/builds/master_pack-android/opencv/modules/core/src/matrix.cpp", "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", "You should explicitly call mapDevice/unmapDevice methods for ogl::Buffer object", "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", "You should explicitly call download method for cuda::GpuMat object", "Step must be a multiple of esz1", "ch.size == mat.size && ch.depth() == mat.depth() && 0 <= coi && coi < mat.channels()", "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", "dims <= 2 && m.dims <= 2 && size() == m.size() && tp == m.type() && ((rows == 3 && cols == 1) || (cols*channels() == 3 && rows == 1))", "labels.isContinuous() && labels.type() == CV_32S && (labels.cols == 1 || labels.rows == 1) && labels.cols + labels.rows - 1 == data.rows", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2", "abs(vecs[0].dot(vecs[1])) / (norm(vecs[0]) * norm(vecs[1])) <= FLT_EPSILON", "mtype == type0 || (CV_MAT_CN(mtype) == 1 && ((1 << type0) & fixedDepthMask) != 0)", "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", "mtype == type0 || (CV_MAT_CN(mtype) == CV_MAT_CN(type0) && ((1 << type0) & fixedDepthMask) != 0)", "Vectors with element size %d are not supported. Please, modify OutputArray::create()\n", "src.size() == idx.size() && idx.type() == CV_32S && src.data != idx.data", "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)", "src[i].dims <= 2 && src[i].rows == src[0].rows && src[i].type() == src[0].type()", "src[i].dims <= 2 && src[i].cols == src[0].cols && src[i].type() == src[0].type()", "src.rows == dst.cols && src.cols == dst.rows && src.type() == dst.type()", "op == CV_REDUCE_SUM || op == CV_REDUCE_MAX || op == CV_REDUCE_MIN || op == CV_REDUCE_AVG", "/builds/master_pack-android/opencv/modules/core/src/ocl.cpp", "Invalid value for %s parameter: %s", "getBufferPoolController(): unknown BufferPool ID\n", "clGetPlatformInfo(handle, 0x0903, sizeof(buf), buf, &len) == 0", "clGetDeviceInfo(p->handle, 0x1005, MAX_DIMS*sizeof(sizes[0]), &sizes[0], &retsz) == 0", "-D %s_T=%s -D %s_T1=%s -D %s_CN=%d -D %s_TSIZE=%d -D %s_T1SIZE=%d -D %s_DEPTH=%d", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "clSetKernelArg(p->handle, (cl_uint)i, sizeof(h), &h) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+1), sizeof(u2d.step), &u2d.step) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+2), sizeof(u2d.offset), &u2d.offset) == 0", "clSetKernelArg(p->handle, (cl_uint)i, sizeof(u2d.rows), &u2d.rows) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+1), sizeof(cols), &cols) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+1), sizeof(u3d.slicestep), &u3d.slicestep) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+2), sizeof(u3d.step), &u3d.step) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+3), sizeof(u3d.offset), &u3d.offset) == 0", "clSetKernelArg(p->handle, (cl_uint)i, sizeof(u3d.slices), &u3d.rows) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+1), sizeof(u3d.rows), &u3d.rows) == 0", "clSetKernelArg(p->handle, (cl_uint)(i+2), sizeof(u3d.cols), &cols) == 0", "clSetKernelArg(p->handle, (cl_uint)i, arg.sz, arg.obj) == 0", "ERROR: Invalid configuration string for OpenCL device", "clGetPlatformIDs(0, __null, &numPlatforms) == 0", "clGetPlatformIDs(numPlatforms, &platforms[0], &numPlatforms) == 0", "ERROR: Can't find OpenCL platform by name: ", "ERROR: Unsupported device type for OpenCL device (GPU, CPU, ACCELERATOR): ", "ERROR: Requested OpenCL device not found, check configuration: ", "getStringInfo(clGetPlatformInfo, platforms[i], 0x0902, name) == 0", "clGetDeviceIDs(platform, (cl_device_type)Device::TYPE_ALL, 0, __null, &numDevices) == 0", "clGetDeviceIDs(platform, (cl_device_type)Device::TYPE_ALL, numDevices, &devices[0], &numDevices) == 0", "clGetDeviceIDs( pl, dtype, 0, 0, &nd0 ) == 0", "clGetDeviceIDs( pl, dtype, nd0, dlist, &nd0 ) == 0", "clReleaseContext(impl->handle) == 0", "clGetDeviceInfo(d, 0x1031, sizeof(cl_platform_id), &pl, __null) == 0", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "OpenCL program build log: %s\n%s\n", "name=%s\ndriver=%s\nbuildflags=%s\n", "clSetEventCallback(p->e, 0x0, oclCleanupCallback, p) == 0", "clEnqueueReadBuffer(q, (cl_mem)u->handle, 1, 0, u->size, alignedPtr.getAlignedPtr(), 0, 0, 0) == 0", "clEnqueueUnmapMemObject(q, (cl_mem)u->handle, data, 0, 0, 0) == 0", "clEnqueueReadBuffer(q, (cl_mem)u->handle, CL_TRUE, 0, u->size, alignedPtr.getAlignedPtr(), 0, 0, 0) == CL_SUCCESS", "(retval = clEnqueueUnmapMemObject(q, (cl_mem)u->handle, u->data, 0, 0, 0)) == CL_SUCCESS", "(retval = clEnqueueWriteBuffer(q, (cl_mem)u->handle, CL_TRUE, 0, u->size, alignedPtr.getAlignedPtr(), 0, 0, 0)) == CL_SUCCESS", "clEnqueueReadBuffer(q, (cl_mem)u->handle, CL_TRUE, srcrawofs, total, alignedPtr.getAlignedPtr(), 0, 0, 0) >= 0", "clEnqueueReadBufferRect(q, (cl_mem)u->handle, CL_TRUE, new_srcofs, new_dstofs, new_sz, new_srcstep[0], new_srcstep[1], new_dststep[0], new_dststep[1], alignedPtr.getAlignedPtr(), 0, 0, 0) >= 0", "clEnqueueWriteBuffer(q, (cl_mem)u->handle, CL_TRUE, dstrawofs, total, alignedPtr.getAlignedPtr(), 0, 0, 0) >= 0", "clEnqueueWriteBufferRect(q, (cl_mem)u->handle, CL_TRUE, new_dstofs, new_srcofs, new_sz, new_dststep[0], new_dststep[1], new_srcstep[0], new_srcstep[1], alignedPtr.getAlignedPtr(), 0, 0, 0) >= 0", "(retval = clEnqueueCopyBuffer(q, (cl_mem)src->handle, (cl_mem)dst->handle, srcrawofs, dstrawofs, total, 0, 0, 0)) == CL_SUCCESS", "(retval = clEnqueueCopyBufferRect(q, (cl_mem)src->handle, (cl_mem)dst->handle, new_srcofs, new_dstofs, new_sz, new_srcstep[0], new_srcstep[1], new_dststep[0], new_dststep[1], 0, 0, 0)) == CL_SUCCESS", "ocl::Device::getDefault().imageSupport()", "clEnqueueCopyBufferRect(queue, (cl_mem)src.handle(ACCESS_READ), devData, origin, origin, roi, src.step, 0, src.cols * src.elemSize(), 0, 0, NULL, NULL) == CL_SUCCESS", "clEnqueueCopyBufferToImage(queue, devData, handle, 0, origin, region, 0, __null, 0) == 0", "clReleaseMemObject(devData) == 0", "/builds/master_pack-android/opencv/modules/core/src/opengl.cpp", "depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "depth == CV_8S || depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "/builds/master_pack-android/opencv/modules/core/src/out.cpp", "/sys/devices/system/cpu/possible", "/builds/master_pack-android/opencv/modules/core/src/pca.cpp", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && mean.cols == data.cols) || (mean.cols == 1 && mean.rows == data.rows))", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && eigenvectors.rows == data.cols) || (mean.cols == 1 && eigenvectors.rows == data.rows))", "/builds/master_pack-android/opencv/modules/core/src/persistence.cpp", "Bad format of floating-point constant", "An attempt to add element without a key to a map, or add element with key to sequence", "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", "Some collection type: CV_NODE_SEQ or CV_NODE_MAP must be specified", "Invalid character in the stream", "Too long string or a last string w/o newline", "Sequence element should not have name (use <_></_>)", "The size of element calculated from \"dt\" and the elem_size do not match", "Size of sequence element (elem_size) is inconsistent with seq->flags", "The size of header calculated from \"header_dt\" is greater than header_size", "The matrix size does not match to the number of stored elements", "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur", "Some of required function pointers (is_instance, release, read or write) are NULL", "Map element should have a name", "Directive tags are not allowed here", "There should be space between literals", "Invalid numeric value (inconsistent explicit type specification?)", "Literal \" is not allowed within a string. Use &quot;", "Literal ' or > are not allowed. Use &apos; or &gt;", "Invalid numeric value in the string", "Invalid character in the symbol entity name", "The actual type is different from the specified type", "Closing tag should not contain any attributes", "Attribute name should be followed by '='", "Attribute value should be put into single or double quotes", "Invalid closing tag for <?xml ...", "There should be space between attributes", "Name should start with a letter or underscore", "Missing , between the elements", "Complex keys are not supported", "Multi-line text literals are not supported", "Block sequence elements must be preceded with '-'", "CV_STORAGE_APPEND and CV_STORAGE_MEMORY are not currently compatible", "<?xml version=\"1.0\" encoding=\"%s\"?>\n", "Valid XML should start with '<?xml ...?>'", "<opencv_storage> tag is missing", "</opencv_storage> tag is missing", "Unsupported YAML version (it must be 1.x)", "The YAML streams must start with '---', except the first one", "Only collections as YAML streams are supported by this parser", "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence", "Could not open the file storage. Check the path and permissions", "NULL memory storage is passed - the loaded dynamic structure can not be stored", "The closing '%c' does not match the opening '%c'", "/builds/master_pack-android/opencv/modules/core/src/rand.cpp", "_param1.channels() == 1 && (_param1.rows == 1 || _param1.cols == 1) && (_param1.rows + _param1.cols - 1 == cn || _param1.rows + _param1.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))", "_param2.channels() == 1 && (((_param2.rows == 1 || _param2.cols == 1) && (_param2.rows + _param2.cols - 1 == cn || _param2.rows + _param2.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))) || (_param2.rows == cn && _param2.cols == cn && disttype == NORMAL))", "/builds/master_pack-android/opencv/modules/core/src/stat.cpp", "dst.type() == CV_64F && dst.isContinuous() && (dst.cols == 1 || dst.rows == 1) && dcn >= cn", "(cn == 1 && (_mask.empty() || _mask.type() == CV_8U)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", "type == src2.type() && src1.cols == src2.cols && (type == CV_32F || type == CV_8U)", "The combination of type=%d, dtype=%d and normType=%d is not supported", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == CV_8U)", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src1.type() == CV_8U)", "  videoio: Removing WinRT API headers by default\n\nGeneral configuration for OpenCV 3.0.0 =====================================\n  Version control:               3.0.0-6-gc1f114b\n\n  Platform:\n    Host:                        Darwin 13.2.0 i386\n    Target:                      Linux 1 i686\n    CMake:                       2.8.12.2\n    CMake generator:             Ninja\n    CMake build tool:            /usr/local/bin/ninja\n    Configuration:               Release\n\n  C/C++:\n    Built as dynamic libs?:      NO\n    C++ Compiler:                /usr/local/bin/ccache /opt/android/android-ndk-r10e/toolchains/x86-4.8/prebuilt/darwin-x86_64/bin/i686-linux-android-g++ (ver 4.8)\n    C++ flags (Release):         -fexceptions -frtti -fpic --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-x86 -funwind-tables -funswitch-loops -finline-limit=300 -fsigned-char -no-canonical-prefixes -fdata-sections -ffunction-sections -Wa,--noexecstack    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -march=i686 -fomit-frame-pointer -msse -msse2 -mno-avx -msse3 -mno-ssse3 -mno-sse4.1 -mno-sse4.2 -mfpmath=sse -fvisibility=hidden -fvisibility-inlines-hidden -fomit-frame-pointer -fstrict-aliasing -O2 -DNDEBUG  -DNDEBUG\n    C++ flags (Debug):           -fexceptions -frtti -fpic --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-x86 -funwind-tables -funswitch-loops -finline-limit=300 -fsigned-char -no-canonical-prefixes -fdata-sections -ffunction-sections -Wa,--noexecstack    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wno-narrowing -Wno-delete-non-virtual-dtor -fdiagnostics-show-option -march=i686 -fomit-frame-pointer -msse -msse2 -mno-avx -msse3 -mno-ssse3 -mno-sse4.1 -mno-sse4.2 -mfpmath=sse -fvisibility=hidden -fvisibility-inlines-hidden -fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG  -O0 -DDEBUG -D_DEBUG\n    C Compiler:                  /usr/local/bin/ccache /opt/android/android-ndk-r10e/toolchains/x86-4.8/prebuilt/darwin-x86_64/bin/i686-linux-android-gcc\n    C flags (Release):           -fexceptions -fpic --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-x86 -funwind-tables -funswitch-loops -finline-limit=300 -fsigned-char -no-canonical-prefixes -fdata-sections -ffunction-sections -Wa,--noexecstack    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -march=i686 -fomit-frame-pointer -msse -msse2 -mno-avx -msse3 -mno-ssse3 -mno-sse4.1 -mno-sse4.2 -mfpmath=sse -fvisibility=hidden -fomit-frame-pointer -fstrict-aliasing -O2 -DNDEBUG  -DNDEBUG\n    C flags (Debug):             -fexceptions -fpic --sysroot=/opt/android/android-ndk-r10e/platforms/android-9/arch-x86 -funwind-tables -funswitch-loops -finline-limit=300 -fsigned-char -no-canonical-prefixes -fdata-sections -ffunction-sections -Wa,--noexecstack    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wno-narrowing -fdiagnostics-show-option -march=i686 -fomit-frame-pointer -msse -msse2 -mno-avx -msse3 -mno-ssse3 -mno-sse4.1 -mno-sse4.2 -mfpmath=sse -fvisibility=hidden -fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG  -O0 -DDEBUG -D_DEBUG\n    Linker flags (Release):      -Wl,--no-undefined -Wl,--gc-sections -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now \n    Linker flags (Debug):        -Wl,--no-undefined -Wl,--gc-sections -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now \n    Precompiled headers:         NO\n    Extra dependencies:          z dl m log\n    3rdparty dependencies:       libjpeg libwebp libpng libtiff libjasper IlmImf tbb\n\n  OpenCV modules:\n    To be built:                 hal core flann imgproc ml photo video imgcodecs shape videoio highgui objdetect superres ts features2d calib3d java stitching videostab\n    Disabled:                    world\n    Disabled by dependency:      -\n    Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev python2 viz\n\n  Android: \n    Android ABI:                 x86\n    STL type:                    gnustl_static\n    Native API level:            android-9\n    SDK target:                  android-14\n    Android NDK:                 /opt/android/android-ndk-r10e (toolchain: x86-4.8)\n    android tool:                /opt/android/android-sdk-macosx/tools/android (Android SDK Tools, revision 24.1.2.)\n    Google Play manager:         NO\n    Android examples:            YES\n\n  GUI: \n    GTK+:                        NO\n    GThread :                    NO\n    GtkGlExt:                    NO\n    OpenGL support:              NO\n    VTK support:                 NO\n\n  Media I/O: \n    ZLib:                        z (ver 1.2.3)\n    JPEG:                        build (ver 90)\n    WEBP:                        build (ver 0.3.1)\n    PNG:                         build (ver 1.5.12)\n    TIFF:                        build (ver 42 - 4.0.2)\n    JPEG 2000:                   build (ver 1.900.1)\n    OpenEXR:                     build (ver 1.7.1)\n    GDAL:                        NO\n\n  Video I/O:\n\n  Other third-party libraries:\n    Use IPP:                     NO\n    Use IPP Async:               NO\n    Use Eigen:                   NO\n    Use TBB:                     YES (ver 4.1 interface 6102)\n    Use OpenMP:                  NO\n    Use GCD                      NO\n    Use Concurrency              NO\n    Use C=:                      NO\n    Use pthreads for parallel for:\n                                 NO\n    Use Cuda:                    NO\n    Use OpenCL:                  NO\n\n  Python 2:\n    Interpreter:                 /usr/bin/python2.7 (ver 2.7.5)\n\n  Python 3:\n    Interpreter:                 NO\n\n  Python (for build):            /usr/bin/python2.7\n\n  Java:\n    ant:                         /usr/local/bin/ant (ver 1.9.4)\n    Java wrappers:               YES\n    Java tests:                  NO\n\n  Matlab:\n    mex:                         NO\n\n  Documentation:\n    Doxygen:                     NO\n    PlantUML:                    NO\n\n  Tests and samples:\n    Tests:                       NO\n    Performance tests:           NO\n    C/C++ Examples:              NO\n\n  Install path:                  /builds/master_pack-android/build/o4a/install\n\n  cvconfig.h is in:              /builds/master_pack-android/build/o4a\n-----------------------------------------------------------------\n\n", "%s:%d: error: (%d) %s in function %s\n", "Inplace operation is not supported", "Requested object was not found", "Input image depth is not supported by function", "Formats of input arguments do not match", "Sizes of input arguments do not match", "One of arguments' values is out of range", "Unsupported format or combination of formats", "Bad flag (parameter or structure field)", "The function/feature is not implemented", "Memory block has been corrupted", "OpenCV Error: %s (%s) in %s, file %s, line %d", "/builds/master_pack-android/opencv/modules/core/src/system.cpp", "/builds/master_pack-android/opencv/modules/core/src/types.cpp", "/builds/master_pack-android/opencv/modules/core/src/umatrix.cpp", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined cl_khr_fp64\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#ifdef INTEL_DEVICE\n#pragma OPENCL FP_CONTRACT ON\n#pragma OPENCL FP_FAST_FMAF ON\n#pragma OPENCL FP_FAST_FMA ON\n#endif\n#if depth <= 5\n#define CV_PI M_PI_F\n#else\n#define CV_PI M_PI\n#endif\n#ifndef cn\n#define cn 1\n#endif\n#if cn == 1\n#undef srcT1_C1\n#undef srcT2_C1\n#undef dstT_C1\n#define srcT1_C1 srcT1\n#define srcT2_C1 srcT2\n#define dstT_C1 dstT\n#endif\n#if cn != 3\n#define storedst(val) *(__global dstT *)(dstptr + dst_index) = val\n#define storedst2(val) *(__global dstT *)(dstptr2 + dst_index2) = val\n#else\n#define storedst(val) vstore3(val, 0, (__global dstT_C1 *)(dstptr + dst_index))\n#define storedst2(val) vstore3(val, 0, (__global dstT_C1 *)(dstptr2 + dst_index2))\n#endif\n#define noconvert\n#ifndef workT\n#ifndef srcT1\n#define srcT1 dstT\n#endif\n#ifndef srcT1_C1\n#define srcT1_C1 dstT_C1\n#endif\n#ifndef srcT2\n#define srcT2 dstT\n#endif\n#ifndef srcT2_C1\n#define srcT2_C1 dstT_C1\n#endif\n#define workT dstT\n#if cn != 3\n#define srcelem1 *(__global srcT1 *)(srcptr1 + src1_index)\n#define srcelem2 *(__global srcT2 *)(srcptr2 + src2_index)\n#else\n#define srcelem1 vload3(0, (__global srcT1_C1 *)(srcptr1 + src1_index))\n#define srcelem2 vload3(0, (__global srcT2_C1 *)(srcptr2 + src2_index))\n#endif\n#ifndef convertToDT\n#define convertToDT noconvert\n#endif\n#else\n#ifndef convertToWT2\n#define convertToWT2 convertToWT1\n#endif\n#if cn != 3\n#define srcelem1 convertToWT1(*(__global srcT1 *)(srcptr1 + src1_index))\n#define srcelem2 convertToWT2(*(__global srcT2 *)(srcptr2 + src2_index))\n#else\n#define srcelem1 convertToWT1(vload3(0, (__global srcT1_C1 *)(srcptr1 + src1_index)))\n#define srcelem2 convertToWT2(vload3(0, (__global srcT2_C1 *)(srcptr2 + src2_index)))\n#endif\n#endif\n#ifndef workST\n#define workST workT\n#endif\n#define EXTRA_PARAMS\n#define EXTRA_INDEX\n#define EXTRA_INDEX_ADD\n#if defined OP_ADD\n#define PROCESS_ELEM storedst(convertToDT(srcelem1 + srcelem2))\n#elif defined OP_SUB\n#define PROCESS_ELEM storedst(convertToDT(srcelem1 - srcelem2))\n#elif defined OP_RSUB\n#define PROCESS_ELEM storedst(convertToDT(srcelem2 - srcelem1))\n#elif defined OP_ABSDIFF\n#if wdepth <= 4\n#define PROCESS_ELEM \\\nstoredst(convertToDT(convertFromU(abs_diff(srcelem1, srcelem2))))\n#else\n#define PROCESS_ELEM \\\nstoredst(convertToDT(fabs(srcelem1 - srcelem2)))\n#endif\n#elif defined OP_AND\n#define PROCESS_ELEM storedst(srcelem1 & srcelem2)\n#elif defined OP_OR\n#define PROCESS_ELEM storedst(srcelem1 | srcelem2)\n#elif defined OP_XOR\n#define PROCESS_ELEM storedst(srcelem1 ^ srcelem2)\n#elif defined OP_NOT\n#define PROCESS_ELEM storedst(~srcelem1)\n#elif defined OP_MIN\n#define PROCESS_ELEM storedst(min(srcelem1, srcelem2))\n#elif defined OP_MAX\n#define PROCESS_ELEM storedst(max(srcelem1, srcelem2))\n#elif defined OP_MUL\n#define PROCESS_ELEM storedst(convertToDT(srcelem1 * srcelem2))\n#elif defined OP_MUL_SCALE\n#undef EXTRA_PARAMS\n#ifdef UNARY_OP\n#define EXTRA_PARAMS , workST srcelem2_, scaleT scale\n#undef srcelem2\n#define srcelem2 srcelem2_\n#else\n#define EXTRA_PARAMS , scaleT scale\n#endif\n#define PROCESS_ELEM storedst(convertToDT(srcelem1 * scale * srcelem2))\n#elif defined OP_DIV\n#define PROCESS_ELEM \\\nworkT e2 = srcelem2, zero = (workT)(0); \\\nstoredst(convertToDT(e2 != zero ? srcelem1 / e2 : zero))\n#elif defined OP_DIV_SCALE\n#undef EXTRA_PARAMS\n#ifdef UNARY_OP\n#define EXTRA_PARAMS , workST srcelem2_, scaleT scale\n#undef srcelem2\n#define srcelem2 srcelem2_\n#else\n#define EXTRA_PARAMS , scaleT scale\n#endif\n#define PROCESS_ELEM \\\nworkT e2 = srcelem2, zero = (workT)(0); \\\nstoredst(convertToDT(e2 == zero ? zero : (srcelem1 * (workT)(scale) / e2)))\n#elif defined OP_RDIV_SCALE\n#undef EXTRA_PARAMS\n#ifdef UNARY_OP\n#define EXTRA_PARAMS , workST srcelem2_, scaleT scale\n#undef srcelem2\n#define srcelem2 srcelem2_\n#else\n#define EXTRA_PARAMS , scaleT scale\n#endif\n#define PROCESS_ELEM \\\nworkT e1 = srcelem1, zero = (workT)(0); \\\nstoredst(convertToDT(e1 == zero ? zero : (srcelem2 * (workT)(scale) / e1)))\n#elif defined OP_RECIP_SCALE\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , scaleT scale\n#define PROCESS_ELEM \\\nworkT e1 = srcelem1, zero = (workT)(0); \\\nstoredst(convertToDT(e1 != zero ? scale / e1 : zero))\n#elif defined OP_ADDW\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , scaleT alpha, scaleT beta, scaleT gamma\n#if wdepth <= 4\n#define PROCESS_ELEM storedst(convertToDT(mad24(srcelem1, alpha, mad24(srcelem2, beta, gamma))))\n#else\n#define PROCESS_ELEM storedst(convertToDT(fma(srcelem1, alpha, fma(srcelem2, beta, gamma))))\n#endif\n#elif defined OP_MAG\n#define PROCESS_ELEM storedst(hypot(srcelem1, srcelem2))\n#elif defined OP_PHASE_RADIANS\n#define PROCESS_ELEM \\\nworkT tmp = atan2(srcelem2, srcelem1); \\\nif (tmp < 0) \\\ntmp += 2 * CV_PI; \\\nstoredst(tmp)\n#elif defined OP_PHASE_DEGREES\n#define PROCESS_ELEM \\\nworkT tmp = degrees(atan2(srcelem2, srcelem1)); \\\nif (tmp < 0) \\\ntmp += 360; \\\nstoredst(tmp)\n#elif defined OP_EXP\n#if wdepth == 5\n#define PROCESS_ELEM storedst(native_exp(srcelem1))\n#else\n#define PROCESS_ELEM storedst(exp(srcelem1))\n#endif\n#elif defined OP_POW\n#define PROCESS_ELEM storedst(pow(srcelem1, srcelem2))\n#elif defined OP_POWN\n#undef workT\n#define workT int\n#define PROCESS_ELEM storedst(pown(srcelem1, srcelem2))\n#elif defined OP_SQRT\n#if depth <= 5\n#define PROCESS_ELEM storedst(native_sqrt(srcelem1))\n#else\n#define PROCESS_ELEM storedst(sqrt(srcelem1))\n#endif\n#elif defined OP_LOG\n#define PROCESS_ELEM \\\nstoredst(log(fabs(srcelem1)))\n#elif defined OP_CMP\n#define srcT2 srcT1\n#ifndef convertToWT1\n#define convertToWT1\n#endif\n#define PROCESS_ELEM \\\nstoredst(srcelem1 CMP_OPERATOR srcelem2 ? (dstT)(255) : (dstT)(0))\n#elif defined OP_CONVERT_SCALE_ABS\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , workT1 alpha, workT1 beta\n#if wdepth <= 4\n#define PROCESS_ELEM \\\nworkT value = mad24(srcelem1, (workT)(alpha), (workT)(beta)); \\\nstoredst(convertToDT(abs(value)))\n#else\n#define PROCESS_ELEM \\\nworkT value = fma(srcelem1, (workT)(alpha), (workT)(beta)); \\\nstoredst(convertToDT(fabs(value)))\n#endif\n#elif defined OP_SCALE_ADD\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , workT1 alpha\n#if wdepth <= 4\n#define PROCESS_ELEM storedst(convertToDT(mad24(srcelem1, (workT)(alpha), srcelem2)))\n#else\n#define PROCESS_ELEM storedst(convertToDT(fma(srcelem1, (workT)(alpha), srcelem2)))\n#endif\n#elif defined OP_CTP_AD || defined OP_CTP_AR\n#if depth <= 5\n#define CV_EPSILON FLT_EPSILON\n#else\n#define CV_EPSILON DBL_EPSILON\n#endif\n#ifdef OP_CTP_AD\n#define TO_DEGREE cartToPolar = degrees(cartToPolar);\n#elif defined OP_CTP_AR\n#define TO_DEGREE\n#endif\n#define PROCESS_ELEM \\\ndstT x = srcelem1, y = srcelem2; \\\ndstT x2 = x * x, y2 = y * y; \\\ndstT magnitude = sqrt(x2 + y2); \\\ndstT tmp = y >= 0 ? 0 : CV_PI * 2; \\\ntmp = x < 0 ? CV_PI : tmp; \\\ndstT tmp1 = y >= 0 ? CV_PI * 0.5f : CV_PI * 1.5f; \\\ndstT cartToPolar = y2 <= x2 ? x * y / mad((dstT)(0.28f), y2, x2 + CV_EPSILON) + tmp : (tmp1 - x * y / mad((dstT)(0.28f), x2, y2 + CV_EPSILON)); \\\nTO_DEGREE \\\nstoredst(magnitude); \\\nstoredst2(cartToPolar)\n#elif defined OP_PTC_AD || defined OP_PTC_AR\n#ifdef OP_PTC_AD\n#define FROM_DEGREE y = radians(y)\n#else\n#define FROM_DEGREE\n#endif\n#define PROCESS_ELEM \\\ndstT x = srcelem1, y = srcelem2, cosval; \\\nFROM_DEGREE; \\\nstoredst2(sincos(y, &cosval) * x); \\\nstoredst(cosval * x);\n#elif defined OP_PATCH_NANS\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , dstT val\n#define PROCESS_ELEM \\\nif (isnan(srcelem1)) \\\nstoredst(val)\n#else\n#error \"unknown op type\"\n#endif\n#if defined OP_CTP_AD || defined OP_CTP_AR || defined OP_PTC_AD || defined OP_PTC_AR\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , __global uchar* dstptr2, int dststep2, int dstoffset2\n#undef EXTRA_INDEX\n#define EXTRA_INDEX int dst_index2 = mad24(y0, dststep2, mad24(x, (int)sizeof(dstT_C1) * cn, dstoffset2))\n#undef EXTRA_INDEX_ADD\n#define EXTRA_INDEX_ADD dst_index2 += dststep2\n#endif\n#if defined UNARY_OP || defined MASK_UNARY_OP\n#if defined OP_AND || defined OP_OR || defined OP_XOR || defined OP_ADD || defined OP_SAT_ADD || \\\ndefined OP_SUB || defined OP_SAT_SUB || defined OP_RSUB || defined OP_SAT_RSUB || \\\ndefined OP_ABSDIFF || defined OP_CMP || defined OP_MIN || defined OP_MAX || defined OP_POW || \\\ndefined OP_MUL || defined OP_DIV || defined OP_POWN || defined OP_POWR || defined OP_ROOTN\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , workST srcelem2_\n#undef srcelem2\n#define srcelem2 srcelem2_\n#endif\n#if cn == 3\n#undef srcelem2\n#define srcelem2 (workT)(srcelem2_.x, srcelem2_.y, srcelem2_.z)\n#endif\n#endif\n#if defined BINARY_OP\n__kernel void KF(__global const uchar * srcptr1, int srcstep1, int srcoffset1,\n__global const uchar * srcptr2, int srcstep2, int srcoffset2,\n__global uchar * dstptr, int dststep, int dstoffset,\nint rows, int cols EXTRA_PARAMS )\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint src1_index = mad24(y0, srcstep1, mad24(x, (int)sizeof(srcT1_C1) * cn, srcoffset1));\n#if !(defined(OP_RECIP_SCALE) || defined(OP_NOT))\nint src2_index = mad24(y0, srcstep2, mad24(x, (int)sizeof(srcT2_C1) * cn, srcoffset2));\n#endif\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT_C1) * cn, dstoffset));\nEXTRA_INDEX;\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, src1_index += srcstep1, dst_index += dststep)\n{\nPROCESS_ELEM;\n#if !(defined(OP_RECIP_SCALE) || defined(OP_NOT))\nsrc2_index += srcstep2;\n#endif\nEXTRA_INDEX_ADD;\n}\n}\n}\n#elif defined MASK_BINARY_OP\n__kernel void KF(__global const uchar * srcptr1, int srcstep1, int srcoffset1,\n__global const uchar * srcptr2, int srcstep2, int srcoffset2,\n__global const uchar * mask, int maskstep, int maskoffset,\n__global uchar * dstptr, int dststep, int dstoffset,\nint rows, int cols EXTRA_PARAMS )\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint mask_index = mad24(y0, maskstep, x + maskoffset);\nint src1_index = mad24(y0, srcstep1, mad24(x, (int)sizeof(srcT1_C1) * cn, srcoffset1));\nint src2_index = mad24(y0, srcstep2, mad24(x, (int)sizeof(srcT2_C1) * cn, srcoffset2));\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT_C1) * cn, dstoffset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, src1_index += srcstep1, src2_index += srcstep2,\nmask_index += maskstep, dst_index += dststep)\nif (mask[mask_index])\n{\nPROCESS_ELEM;\n}\n}\n}\n#elif defined UNARY_OP\n__kernel void KF(__global const uchar * srcptr1, int srcstep1, int srcoffset1,\n__global uchar * dstptr, int dststep, int dstoffset,\nint rows, int cols EXTRA_PARAMS )\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint src1_index = mad24(y0, srcstep1, mad24(x, (int)sizeof(srcT1_C1) * cn, srcoffset1));\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT_C1) * cn, dstoffset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, src1_index += srcstep1, dst_index += dststep)\n{\nPROCESS_ELEM;\n}\n}\n}\n#elif defined MASK_UNARY_OP\n__kernel void KF(__global const uchar * srcptr1, int srcstep1, int srcoffset1,\n__global const uchar * mask, int maskstep, int maskoffset,\n__global uchar * dstptr, int dststep, int dstoffset,\nint rows, int cols EXTRA_PARAMS )\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint mask_index = mad24(y0, maskstep, x + maskoffset);\nint src1_index = mad24(y0, srcstep1, mad24(x, (int)sizeof(srcT1_C1) * cn, srcoffset1));\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT_C1) * cn, dstoffset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, src1_index += srcstep1, mask_index += maskstep, dst_index += dststep)\nif (mask[mask_index])\n{\nPROCESS_ELEM;\n}\n}\n}\n#else\n#error \"Unknown operation type\"\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n__kernel void convertTo(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nWT alpha, WT beta, int rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nint src_index = mad24(y0, src_step, mad24(x, (int)sizeof(srcT), src_offset));\nint dst_index = mad24(y0, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\nfor (int y = y0, y1 = min(dst_rows, y0 + rowsPerWI); y < y1; ++y, src_index += src_step, dst_index += dst_step)\n{\n__global const srcT * src = (__global const srcT *)(srcptr + src_index);\n__global dstT * dst = (__global dstT *)(dstptr + dst_index);\ndst[0] = convertToDT(fma(convertToWT(src[0]), alpha, beta));\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = val\n#define TSIZE ((int)sizeof(T))\n#define convertScalar(a) (a)\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1*)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#define convertScalar(a) (T)(a.x, a.y, a.z)\n#endif\n#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, cols) \\\n;\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, cols) \\\nx = clamp(x, 0, cols - 1);\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, cols) \\\n{ \\\nif (x < 0) \\\nx -= ((x - cols + 1) / cols) * cols; \\\nif (x >= cols) \\\nx %= cols; \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#ifdef BORDER_REFLECT\n#define DELTA int delta = 0\n#else\n#define DELTA int delta = 1\n#endif\n#define EXTRAPOLATE(x, cols) \\\n{ \\\nDELTA; \\\nif (cols == 1) \\\nx = 0; \\\nelse \\\ndo \\\n{ \\\nif( x < 0 ) \\\nx = -x - 1 + delta; \\\nelse \\\nx = cols - 1 - (x - cols) - delta; \\\n} \\\nwhile (x >= cols || x < 0); \\\n}\n#else\n#error \"No extrapolation method\"\n#endif\n#define NEED_EXTRAPOLATION(x, cols) (x >= cols || x < 0)\n__kernel void copyMakeBorder(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint top, int left, ST nVal)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\n#ifdef BORDER_CONSTANT\nT scalar = convertScalar(nVal);\n#endif\nif (x < dst_cols)\n{\nint src_x = x - left, src_y;\nint dst_index = mad24(y0, dst_step, mad24(x, (int)TSIZE, dst_offset));\nif (NEED_EXTRAPOLATION(src_x, src_cols))\n{\n#ifdef BORDER_CONSTANT\nfor (int y = y0, y1 = min(y0 + rowsPerWI, dst_rows); y < y1; ++y, dst_index += dst_step)\nstorepix(scalar, dstptr + dst_index);\nreturn;\n#endif\nEXTRAPOLATE(src_x, src_cols)\n}\nsrc_x = mad24(src_x, TSIZE, src_offset);\nfor (int y = y0, y1 = min(y0 + rowsPerWI, dst_rows); y < y1; ++y, dst_index += dst_step)\n{\nsrc_y = y - top;\nif (NEED_EXTRAPOLATION(src_y, src_rows))\n{\nEXTRAPOLATE(src_y, src_rows)\n#ifdef BORDER_CONSTANT\nstorepix(scalar, dstptr + dst_index);\ncontinue;\n#endif\n}\nint src_index = mad24(src_y, src_step, src_x);\nstorepix(loadpix(srcptr + src_index), dstptr + dst_index);\n}\n}\n}\n", "#ifdef COPY_TO_MASK\n#define DEFINE_DATA \\\nint src_index = mad24(y, src_step, mad24(x, (int)sizeof(T1) * scn, src_offset)); \\\nint dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(T1) * scn, dst_offset)); \\\n\\\n__global const T1 * src = (__global const T1 *)(srcptr + src_index); \\\n__global T1 * dst = (__global T1 *)(dstptr + dst_index)\n__kernel void copyToMask(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * mask, int mask_step, int mask_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nmask += mad24(y, mask_step, mad24(x, mcn, mask_offset));\n#if mcn == 1\nif (mask[0])\n{\nDEFINE_DATA;\n#pragma unroll\nfor (int c = 0; c < scn; ++c)\ndst[c] = src[c];\n}\n#ifdef HAVE_DST_UNINIT\nelse\n{\nDEFINE_DATA;\n#pragma unroll\nfor (int c = 0; c < scn; ++c)\ndst[c] = (T1)(0);\n}\n#endif\n#elif scn == mcn\nDEFINE_DATA;\n#pragma unroll\nfor (int c = 0; c < scn; ++c)\nif (mask[c])\ndst[c] = src[c];\n#ifdef HAVE_DST_UNINIT\nelse\ndst[c] = (T1)(0);\n#endif\n#else\n#error \"(mcn == 1 || mcn == scn) should be true\"\n#endif\n}\n}\n#else\n#ifndef dstST\n#define dstST dstT\n#endif\n#if cn != 3\n#define value value_\n#define storedst(val) *(__global dstT *)(dstptr + dst_index) = val\n#else\n#define value (dstT)(value_.x, value_.y, value_.z)\n#define storedst(val) vstore3(val, 0, (__global dstT1 *)(dstptr + dst_index))\n#endif\n__kernel void setMask(__global const uchar* mask, int maskstep, int maskoffset,\n__global uchar* dstptr, int dststep, int dstoffset,\nint rows, int cols, dstST value_)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint mask_index = mad24(y0, maskstep, x + maskoffset);\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT1) * cn, dstoffset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y)\n{\nif( mask[mask_index] )\nstoredst(value);\nmask_index += maskstep;\ndst_index += dststep;\n}\n}\n}\n__kernel void set(__global uchar* dstptr, int dststep, int dstoffset,\nint rows, int cols, dstST value_)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint dst_index  = mad24(y0, dststep, mad24(x, (int)sizeof(dstT1) * cn, dstoffset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, dst_index += dststep)\nstoredst(value);\n}\n}\n#endif\n", "#define SQRT_2 0.707106781188f\n#define sin_120 0.866025403784f\n#define fft5_2  0.559016994374f\n#define fft5_3 -0.951056516295f\n#define fft5_4 -1.538841768587f\n#define fft5_5  0.363271264002f\n#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n__attribute__((always_inline))\nCT mul_complex(CT a, CT b) {\nreturn (CT)(fma(a.x, b.x, -a.y * b.y), fma(a.x, b.y, a.y * b.x));\n}\n__attribute__((always_inline))\nCT twiddle(CT a) {\nreturn (CT)(a.y, -a.x);\n}\n__attribute__((always_inline))\nvoid butterfly2(CT a0, CT a1, __local CT* smem, __global const CT* twiddles,\nconst int x, const int block_size)\n{\nconst int k = x & (block_size - 1);\na1 = mul_complex(twiddles[k], a1);\nconst int dst_ind = (x << 1) - k;\nsmem[dst_ind] = a0 + a1;\nsmem[dst_ind+block_size] = a0 - a1;\n}\n__attribute__((always_inline))\nvoid butterfly4(CT a0, CT a1, CT a2, CT a3, __local CT* smem, __global const CT* twiddles,\nconst int x, const int block_size)\n{\nconst int k = x & (block_size - 1);\na1 = mul_complex(twiddles[k], a1);\na2 = mul_complex(twiddles[k + block_size], a2);\na3 = mul_complex(twiddles[k + 2*block_size], a3);\nconst int dst_ind = ((x - k) << 2) + k;\nCT b0 = a0 + a2;\na2 = a0 - a2;\nCT b1 = a1 + a3;\na3 = twiddle(a1 - a3);\nsmem[dst_ind]                = b0 + b1;\nsmem[dst_ind + block_size]   = a2 + a3;\nsmem[dst_ind + 2*block_size] = b0 - b1;\nsmem[dst_ind + 3*block_size] = a2 - a3;\n}\n__attribute__((always_inline))\nvoid butterfly3(CT a0, CT a1, CT a2, __local CT* smem, __global const CT* twiddles,\nconst int x, const int block_size)\n{\nconst int k = x % block_size;\na1 = mul_complex(twiddles[k], a1);\na2 = mul_complex(twiddles[k+block_size], a2);\nconst int dst_ind = ((x - k) * 3) + k;\nCT b1 = a1 + a2;\na2 = twiddle(sin_120*(a1 - a2));\nCT b0 = a0 - (CT)(0.5f)*b1;\nsmem[dst_ind] = a0 + b1;\nsmem[dst_ind + block_size] = b0 + a2;\nsmem[dst_ind + 2*block_size] = b0 - a2;\n}\n__attribute__((always_inline))\nvoid butterfly5(CT a0, CT a1, CT a2, CT a3, CT a4, __local CT* smem, __global const CT* twiddles,\nconst int x, const int block_size)\n{\nconst int k = x % block_size;\na1 = mul_complex(twiddles[k], a1);\na2 = mul_complex(twiddles[k + block_size], a2);\na3 = mul_complex(twiddles[k+2*block_size], a3);\na4 = mul_complex(twiddles[k+3*block_size], a4);\nconst int dst_ind = ((x - k) * 5) + k;\n__local CT* dst = smem + dst_ind;\nCT b0, b1, b5;\nb1 = a1 + a4;\na1 -= a4;\na4 = a3 + a2;\na3 -= a2;\na2 = b1 + a4;\nb0 = a0 - (CT)0.25f * a2;\nb1 = fft5_2 * (b1 - a4);\na4 = fft5_3 * (CT)(-a1.y - a3.y, a1.x + a3.x);\nb5 = (CT)(a4.x - fft5_5 * a1.y, a4.y + fft5_5 * a1.x);\na4.x += fft5_4 * a3.y;\na4.y -= fft5_4 * a3.x;\na1 = b0 + b1;\nb0 -= b1;\ndst[0] = a0 + a2;\ndst[block_size] = a1 + a4;\ndst[2 * block_size] = b0 + b5;\ndst[3 * block_size] = b0 - b5;\ndst[4 * block_size] = a1 - a4;\n}\n__attribute__((always_inline))\nvoid fft_radix2(__local CT* smem, __global const CT* twiddles, const int x, const int block_size, const int t)\n{\nCT a0, a1;\nif (x < t)\n{\na0 = smem[x];\na1 = smem[x+t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < t)\nbutterfly2(a0, a1, smem, twiddles, x, block_size);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix2_B2(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/2;\nCT a0, a1, a2, a3;\nif (x1 < t/2)\n{\na0 = smem[x1]; a1 = smem[x1+t];\na2 = smem[x2]; a3 = smem[x2+t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/2)\n{\nbutterfly2(a0, a1, smem, twiddles, x1, block_size);\nbutterfly2(a2, a3, smem, twiddles, x2, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix2_B3(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/3;\nconst int x3 = x1 + 2*t/3;\nCT a0, a1, a2, a3, a4, a5;\nif (x1 < t/3)\n{\na0 = smem[x1]; a1 = smem[x1+t];\na2 = smem[x2]; a3 = smem[x2+t];\na4 = smem[x3]; a5 = smem[x3+t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/3)\n{\nbutterfly2(a0, a1, smem, twiddles, x1, block_size);\nbutterfly2(a2, a3, smem, twiddles, x2, block_size);\nbutterfly2(a4, a5, smem, twiddles, x3, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix2_B4(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int thread_block = t/4;\nconst int x2 = x1 + thread_block;\nconst int x3 = x1 + 2*thread_block;\nconst int x4 = x1 + 3*thread_block;\nCT a0, a1, a2, a3, a4, a5, a6, a7;\nif (x1 < t/4)\n{\na0 = smem[x1]; a1 = smem[x1+t];\na2 = smem[x2]; a3 = smem[x2+t];\na4 = smem[x3]; a5 = smem[x3+t];\na6 = smem[x4]; a7 = smem[x4+t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/4)\n{\nbutterfly2(a0, a1, smem, twiddles, x1, block_size);\nbutterfly2(a2, a3, smem, twiddles, x2, block_size);\nbutterfly2(a4, a5, smem, twiddles, x3, block_size);\nbutterfly2(a6, a7, smem, twiddles, x4, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix2_B5(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int thread_block = t/5;\nconst int x2 = x1 + thread_block;\nconst int x3 = x1 + 2*thread_block;\nconst int x4 = x1 + 3*thread_block;\nconst int x5 = x1 + 4*thread_block;\nCT a0, a1, a2, a3, a4, a5, a6, a7, a8, a9;\nif (x1 < t/5)\n{\na0 = smem[x1]; a1 = smem[x1+t];\na2 = smem[x2]; a3 = smem[x2+t];\na4 = smem[x3]; a5 = smem[x3+t];\na6 = smem[x4]; a7 = smem[x4+t];\na8 = smem[x5]; a9 = smem[x5+t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/5)\n{\nbutterfly2(a0, a1, smem, twiddles, x1, block_size);\nbutterfly2(a2, a3, smem, twiddles, x2, block_size);\nbutterfly2(a4, a5, smem, twiddles, x3, block_size);\nbutterfly2(a6, a7, smem, twiddles, x4, block_size);\nbutterfly2(a8, a9, smem, twiddles, x5, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix4(__local CT* smem, __global const CT* twiddles, const int x, const int block_size, const int t)\n{\nCT a0, a1, a2, a3;\nif (x < t)\n{\na0 = smem[x]; a1 = smem[x+t]; a2 = smem[x+2*t]; a3 = smem[x+3*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < t)\nbutterfly4(a0, a1, a2, a3, smem, twiddles, x, block_size);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix4_B2(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/2;\nCT a0, a1, a2, a3, a4, a5, a6, a7;\nif (x1 < t/2)\n{\na0 = smem[x1]; a1 = smem[x1+t]; a2 = smem[x1+2*t]; a3 = smem[x1+3*t];\na4 = smem[x2]; a5 = smem[x2+t]; a6 = smem[x2+2*t]; a7 = smem[x2+3*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/2)\n{\nbutterfly4(a0, a1, a2, a3, smem, twiddles, x1, block_size);\nbutterfly4(a4, a5, a6, a7, smem, twiddles, x2, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix4_B3(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/3;\nconst int x3 = x2 + t/3;\nCT a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;\nif (x1 < t/3)\n{\na0 = smem[x1]; a1 = smem[x1+t]; a2 = smem[x1+2*t]; a3 = smem[x1+3*t];\na4 = smem[x2]; a5 = smem[x2+t]; a6 = smem[x2+2*t]; a7 = smem[x2+3*t];\na8 = smem[x3]; a9 = smem[x3+t]; a10 = smem[x3+2*t]; a11 = smem[x3+3*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/3)\n{\nbutterfly4(a0, a1, a2, a3, smem, twiddles, x1, block_size);\nbutterfly4(a4, a5, a6, a7, smem, twiddles, x2, block_size);\nbutterfly4(a8, a9, a10, a11, smem, twiddles, x3, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix8(__local CT* smem, __global const CT* twiddles, const int x, const int block_size, const int t)\n{\nconst int k = x % block_size;\nCT a0, a1, a2, a3, a4, a5, a6, a7;\nif (x < t)\n{\nint tw_ind = block_size / 8;\na0 = smem[x];\na1 = mul_complex(twiddles[k], smem[x + t]);\na2 = mul_complex(twiddles[k + block_size],smem[x+2*t]);\na3 = mul_complex(twiddles[k+2*block_size],smem[x+3*t]);\na4 = mul_complex(twiddles[k+3*block_size],smem[x+4*t]);\na5 = mul_complex(twiddles[k+4*block_size],smem[x+5*t]);\na6 = mul_complex(twiddles[k+5*block_size],smem[x+6*t]);\na7 = mul_complex(twiddles[k+6*block_size],smem[x+7*t]);\nCT b0, b1, b6, b7;\nb0 = a0 + a4;\na4 = a0 - a4;\nb1 = a1 + a5;\na5 = a1 - a5;\na5 = (CT)(SQRT_2) * (CT)(a5.x + a5.y, -a5.x + a5.y);\nb6 = twiddle(a2 - a6);\na2 = a2 + a6;\nb7 = a3 - a7;\nb7 = (CT)(SQRT_2) * (CT)(-b7.x + b7.y, -b7.x - b7.y);\na3 = a3 + a7;\na0 = b0 + a2;\na2 = b0 - a2;\na1 = b1 + a3;\na3 = twiddle(b1 - a3);\na6 = a4 - b6;\na4 = a4 + b6;\na7 = twiddle(a5 - b7);\na5 = a5 + b7;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < t)\n{\nconst int dst_ind = ((x - k) << 3) + k;\n__local CT* dst = smem + dst_ind;\ndst[0] = a0 + a1;\ndst[block_size] = a4 + a5;\ndst[2 * block_size] = a2 + a3;\ndst[3 * block_size] = a6 + a7;\ndst[4 * block_size] = a0 - a1;\ndst[5 * block_size] = a4 - a5;\ndst[6 * block_size] = a2 - a3;\ndst[7 * block_size] = a6 - a7;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix3(__local CT* smem, __global const CT* twiddles, const int x, const int block_size, const int t)\n{\nCT a0, a1, a2;\nif (x < t)\n{\na0 = smem[x]; a1 = smem[x+t]; a2 = smem[x+2*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < t)\nbutterfly3(a0, a1, a2, smem, twiddles, x, block_size);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix3_B2(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/2;\nCT a0, a1, a2, a3, a4, a5;\nif (x1 < t/2)\n{\na0 = smem[x1]; a1 = smem[x1+t]; a2 = smem[x1+2*t];\na3 = smem[x2]; a4 = smem[x2+t]; a5 = smem[x2+2*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/2)\n{\nbutterfly3(a0, a1, a2, smem, twiddles, x1, block_size);\nbutterfly3(a3, a4, a5, smem, twiddles, x2, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix3_B3(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1 + t/3;\nconst int x3 = x2 + t/3;\nCT a0, a1, a2, a3, a4, a5, a6, a7, a8;\nif (x1 < t/3)\n{\na0 = smem[x1]; a1 = smem[x1+t]; a2 = smem[x1+2*t];\na3 = smem[x2]; a4 = smem[x2+t]; a5 = smem[x2+2*t];\na6 = smem[x3]; a7 = smem[x3+t]; a8 = smem[x3+2*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/3)\n{\nbutterfly3(a0, a1, a2, smem, twiddles, x1, block_size);\nbutterfly3(a3, a4, a5, smem, twiddles, x2, block_size);\nbutterfly3(a6, a7, a8, smem, twiddles, x3, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix3_B4(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int thread_block = t/4;\nconst int x2 = x1 + thread_block;\nconst int x3 = x1 + 2*thread_block;\nconst int x4 = x1 + 3*thread_block;\nCT a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;\nif (x1 < t/4)\n{\na0 = smem[x1]; a1 = smem[x1+t]; a2 = smem[x1+2*t];\na3 = smem[x2]; a4 = smem[x2+t]; a5 = smem[x2+2*t];\na6 = smem[x3]; a7 = smem[x3+t]; a8 = smem[x3+2*t];\na9 = smem[x4]; a10 = smem[x4+t]; a11 = smem[x4+2*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/4)\n{\nbutterfly3(a0, a1, a2, smem, twiddles, x1, block_size);\nbutterfly3(a3, a4, a5, smem, twiddles, x2, block_size);\nbutterfly3(a6, a7, a8, smem, twiddles, x3, block_size);\nbutterfly3(a9, a10, a11, smem, twiddles, x4, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix5(__local CT* smem, __global const CT* twiddles, const int x, const int block_size, const int t)\n{\nconst int k = x % block_size;\nCT a0, a1, a2, a3, a4;\nif (x < t)\n{\na0 = smem[x]; a1 = smem[x + t]; a2 = smem[x+2*t]; a3 = smem[x+3*t]; a4 = smem[x+4*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < t)\nbutterfly5(a0, a1, a2, a3, a4, smem, twiddles, x, block_size);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n__attribute__((always_inline))\nvoid fft_radix5_B2(__local CT* smem, __global const CT* twiddles, const int x1, const int block_size, const int t)\n{\nconst int x2 = x1+t/2;\nCT a0, a1, a2, a3, a4, a5, a6, a7, a8, a9;\nif (x1 < t/2)\n{\na0 = smem[x1]; a1 = smem[x1 + t]; a2 = smem[x1+2*t]; a3 = smem[x1+3*t]; a4 = smem[x1+4*t];\na5 = smem[x2]; a6 = smem[x2 + t]; a7 = smem[x2+2*t]; a8 = smem[x2+3*t]; a9 = smem[x2+4*t];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x1 < t/2)\n{\nbutterfly5(a0, a1, a2, a3, a4, smem, twiddles, x1, block_size);\nbutterfly5(a5, a6, a7, a8, a9, smem, twiddles, x2, block_size);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#ifdef DFT_SCALE\n#define SCALE_VAL(x, scale) x*scale\n#else\n#define SCALE_VAL(x, scale) x\n#endif\n__kernel void fft_multi_radix_rows(__global const uchar* src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar* dst_ptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global CT* twiddles_ptr, int twiddles_step, int twiddles_offset, const int t, const int nz)\n{\nconst int x = get_global_id(0);\nconst int y = get_group_id(1);\nconst int block_size = LOCAL_SIZE/kercn;\nif (y < nz)\n{\n__local CT smem[LOCAL_SIZE];\n__global const CT* twiddles = (__global const CT*)(twiddles_ptr + twiddles_offset);\nconst int ind = x;\n#ifdef IS_1D\nFT scale = (FT) 1/dst_cols;\n#else\nFT scale = (FT) 1/(dst_cols*dst_rows);\n#endif\n#ifdef COMPLEX_INPUT\n__global const CT* src = (__global const CT*)(src_ptr + mad24(y, src_step, mad24(x, (int)(sizeof(CT)), src_offset)));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\nsmem[x+i*block_size] = src[i*block_size];\n#else\n__global const FT* src = (__global const FT*)(src_ptr + mad24(y, src_step, mad24(x, (int)sizeof(FT), src_offset)));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\nsmem[x+i*block_size] = (CT)(src[i*block_size], 0.f);\n#endif\nbarrier(CLK_LOCAL_MEM_FENCE);\nRADIX_PROCESS;\n#ifdef COMPLEX_OUTPUT\n#ifdef NO_CONJUGATE\nconst int cols = dst_cols/2 + 1;\n#else\nconst int cols = dst_cols;\n#endif\n__global CT* dst = (__global CT*)(dst_ptr + mad24(y, dst_step, dst_offset));\n#pragma unroll\nfor (int i=x; i<cols; i+=block_size)\ndst[i] = SCALE_VAL(smem[i], scale);\n#ifdef REAL_INPUT\n#ifdef COMPLEX_OUTPUT\n#ifdef IS_1D\nfor(int i=x+1; i < (dst_cols+1)/2; i+=block_size)\n{\ndst[dst_cols-i] = (CT)(SCALE_VAL(smem[i].x, scale), SCALE_VAL(-smem[i].y, scale));\n}\n#endif\n#endif\n#endif\n#else\n__local FT* smem_1cn = (__local FT*) smem;\n__global FT* dst = (__global FT*)(dst_ptr + mad24(y, dst_step, dst_offset));\nfor (int i=x; i<dst_cols-1; i+=block_size)\ndst[i+1] = SCALE_VAL(smem_1cn[i+2], scale);\nif (x == 0)\ndst[0] = SCALE_VAL(smem_1cn[0], scale);\n#endif\n}\nelse\n{\n#ifdef COMPLEX_OUTPUT\n__global CT* dst = (__global CT*)(dst_ptr + mad24(y, dst_step, dst_offset));\n#else\n__global FT* dst = (__global FT*)(dst_ptr + mad24(y, dst_step, dst_offset));\n#endif\n#pragma unroll\nfor (int i=x; i<dst_cols; i+=block_size)\ndst[i] = 0.f;\n}\n}\n__kernel void fft_multi_radix_cols(__global const uchar* src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar* dst_ptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global CT* twiddles_ptr, int twiddles_step, int twiddles_offset, const int t, const int nz)\n{\nconst int x = get_group_id(0);\nconst int y = get_global_id(1);\nif (x < nz)\n{\n__local CT smem[LOCAL_SIZE];\n__global const uchar* src = src_ptr + mad24(y, src_step, mad24(x, (int)(sizeof(CT)), src_offset));\n__global const CT* twiddles = (__global const CT*)(twiddles_ptr + twiddles_offset);\nconst int ind = y;\nconst int block_size = LOCAL_SIZE/kercn;\nFT scale = 1.f/(dst_rows*dst_cols);\n#pragma unroll\nfor (int i=0; i<kercn; i++)\nsmem[y+i*block_size] = *((__global const CT*)(src + i*block_size*src_step));\nbarrier(CLK_LOCAL_MEM_FENCE);\nRADIX_PROCESS;\n#ifdef COMPLEX_OUTPUT\n__global uchar* dst = dst_ptr + mad24(y, dst_step, mad24(x, (int)(sizeof(CT)), dst_offset));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n*((__global CT*)(dst + i*block_size*dst_step)) = SCALE_VAL(smem[y + i*block_size], scale);\n#else\nif (x == 0)\n{\n__local FT* smem_1cn = (__local FT*) smem;\n__global uchar* dst = dst_ptr + mad24(y+1, dst_step, dst_offset);\nfor (int i=y; i<dst_rows-1; i+=block_size, dst+=dst_step*block_size)\n*((__global FT*) dst) = SCALE_VAL(smem_1cn[i+2], scale);\nif (y == 0)\n*((__global FT*) (dst_ptr + dst_offset)) = SCALE_VAL(smem_1cn[0], scale);\n}\nelse if (x == (dst_cols+1)/2)\n{\n__local FT* smem_1cn = (__local FT*) smem;\n__global uchar* dst = dst_ptr + mad24(dst_cols-1, (int)sizeof(FT), mad24(y+1, dst_step, dst_offset));\nfor (int i=y; i<dst_rows-1; i+=block_size, dst+=dst_step*block_size)\n*((__global FT*) dst) = SCALE_VAL(smem_1cn[i+2], scale);\nif (y == 0)\n*((__global FT*) (dst_ptr + mad24(dst_cols-1, (int)sizeof(FT), dst_offset))) = SCALE_VAL(smem_1cn[0], scale);\n}\nelse\n{\n__global uchar* dst = dst_ptr + mad24(x, (int)sizeof(FT)*2, mad24(y, dst_step, dst_offset - (int)sizeof(FT)));\n#pragma unroll\nfor (int i=y; i<dst_rows; i+=block_size, dst+=block_size*dst_step)\nvstore2(SCALE_VAL(smem[i], scale), 0, (__global FT*) dst);\n}\n#endif\n}\n}\n__kernel void ifft_multi_radix_rows(__global const uchar* src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar* dst_ptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global CT* twiddles_ptr, int twiddles_step, int twiddles_offset, const int t, const int nz)\n{\nconst int x = get_global_id(0);\nconst int y = get_group_id(1);\nconst int block_size = LOCAL_SIZE/kercn;\n#ifdef IS_1D\nconst FT scale = (FT) 1/dst_cols;\n#else\nconst FT scale = (FT) 1/(dst_cols*dst_rows);\n#endif\nif (y < nz)\n{\n__local CT smem[LOCAL_SIZE];\n__global const CT* twiddles = (__global const CT*)(twiddles_ptr + twiddles_offset);\nconst int ind = x;\n#if defined(COMPLEX_INPUT) && !defined(NO_CONJUGATE)\n__global const CT* src = (__global const CT*)(src_ptr + mad24(y, src_step, mad24(x, (int)(sizeof(CT)), src_offset)));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\nsmem[x+i*block_size].x =  src[i*block_size].x;\nsmem[x+i*block_size].y = -src[i*block_size].y;\n}\n#else\n#if !defined(REAL_INPUT) && defined(NO_CONJUGATE)\n__global const CT* src = (__global const CT*)(src_ptr + mad24(y, src_step, mad24(2, (int)sizeof(FT), src_offset)));\n#pragma unroll\nfor (int i=x; i<(LOCAL_SIZE-1)/2; i+=block_size)\n{\nsmem[i+1].x = src[i].x;\nsmem[i+1].y = -src[i].y;\nsmem[LOCAL_SIZE-i-1] = src[i];\n}\n#else\n#pragma unroll\nfor (int i=x; i<(LOCAL_SIZE-1)/2; i+=block_size)\n{\nCT src = vload2(0, (__global const FT*)(src_ptr + mad24(y, src_step, mad24(2*i+1, (int)sizeof(FT), src_offset))));\nsmem[i+1].x = src.x;\nsmem[i+1].y = -src.y;\nsmem[LOCAL_SIZE-i-1] = src;\n}\n#endif\nif (x==0)\n{\nsmem[0].x = *(__global const FT*)(src_ptr + mad24(y, src_step, src_offset));\nsmem[0].y = 0.f;\nif(LOCAL_SIZE % 2 ==0)\n{\n#if !defined(REAL_INPUT) && defined(NO_CONJUGATE)\nsmem[LOCAL_SIZE/2].x = src[LOCAL_SIZE/2-1].x;\n#else\nsmem[LOCAL_SIZE/2].x = *(__global const FT*)(src_ptr + mad24(y, src_step, mad24(LOCAL_SIZE-1, (int)sizeof(FT), src_offset)));\n#endif\nsmem[LOCAL_SIZE/2].y = 0.f;\n}\n}\n#endif\nbarrier(CLK_LOCAL_MEM_FENCE);\nRADIX_PROCESS;\n#ifdef COMPLEX_OUTPUT\n__global CT* dst = (__global CT*)(dst_ptr + mad24(y, dst_step, mad24(x, (int)(sizeof(CT)), dst_offset)));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\ndst[i*block_size].x = SCALE_VAL(smem[x + i*block_size].x, scale);\ndst[i*block_size].y = SCALE_VAL(-smem[x + i*block_size].y, scale);\n}\n#else\n__global FT* dst = (__global FT*)(dst_ptr + mad24(y, dst_step, mad24(x, (int)(sizeof(FT)), dst_offset)));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\ndst[i*block_size] = SCALE_VAL(smem[x + i*block_size].x, scale);\n}\n#endif\n}\nelse\n{\n#ifdef COMPLEX_OUTPUT\n__global CT* dst = (__global CT*)(dst_ptr + mad24(y, dst_step, dst_offset));\n#else\n__global FT* dst = (__global FT*)(dst_ptr + mad24(y, dst_step, dst_offset));\n#endif\n#pragma unroll\nfor (int i=x; i<dst_cols; i+=block_size)\ndst[i] = 0.f;\n}\n}\n__kernel void ifft_multi_radix_cols(__global const uchar* src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar* dst_ptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global CT* twiddles_ptr, int twiddles_step, int twiddles_offset, const int t, const int nz)\n{\nconst int x = get_group_id(0);\nconst int y = get_global_id(1);\n#ifdef COMPLEX_INPUT\nif (x < nz)\n{\n__local CT smem[LOCAL_SIZE];\n__global const uchar* src = src_ptr + mad24(y, src_step, mad24(x, (int)(sizeof(CT)), src_offset));\n__global uchar* dst = dst_ptr + mad24(y, dst_step, mad24(x, (int)(sizeof(CT)), dst_offset));\n__global const CT* twiddles = (__global const CT*)(twiddles_ptr + twiddles_offset);\nconst int ind = y;\nconst int block_size = LOCAL_SIZE/kercn;\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\nCT temp = *((__global const CT*)(src + i*block_size*src_step));\nsmem[y+i*block_size].x =  temp.x;\nsmem[y+i*block_size].y =  -temp.y;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nRADIX_PROCESS;\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\n__global CT* res = (__global CT*)(dst + i*block_size*dst_step);\nres[0].x = smem[y + i*block_size].x;\nres[0].y = -smem[y + i*block_size].y;\n}\n}\n#else\nif (x < nz)\n{\n__global const CT* twiddles = (__global const CT*)(twiddles_ptr + twiddles_offset);\nconst int ind = y;\nconst int block_size = LOCAL_SIZE/kercn;\n__local CT smem[LOCAL_SIZE];\n#ifdef EVEN\nif (x!=0 && (x!=(nz-1)))\n#else\nif (x!=0)\n#endif\n{\n__global const uchar* src = src_ptr + mad24(y, src_step, mad24(2*x-1, (int)sizeof(FT), src_offset));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\nCT temp = vload2(0, (__global const FT*)(src + i*block_size*src_step));\nsmem[y+i*block_size].x = temp.x;\nsmem[y+i*block_size].y = -temp.y;\n}\n}\nelse\n{\nint ind = x==0 ? 0: 2*x-1;\n__global const FT* src = (__global const FT*)(src_ptr + mad24(1, src_step, mad24(ind, (int)sizeof(FT), src_offset)));\nint step = src_step/(int)sizeof(FT);\n#pragma unroll\nfor (int i=y; i<(LOCAL_SIZE-1)/2; i+=block_size)\n{\nsmem[i+1].x = src[2*i*step];\nsmem[i+1].y = -src[(2*i+1)*step];\nsmem[LOCAL_SIZE-i-1].x = src[2*i*step];;\nsmem[LOCAL_SIZE-i-1].y = src[(2*i+1)*step];\n}\nif (y==0)\n{\nsmem[0].x = *(__global const FT*)(src_ptr + mad24(ind, (int)sizeof(FT), src_offset));\nsmem[0].y = 0.f;\nif(LOCAL_SIZE % 2 ==0)\n{\nsmem[LOCAL_SIZE/2].x = src[(LOCAL_SIZE-2)*step];\nsmem[LOCAL_SIZE/2].y = 0.f;\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nRADIX_PROCESS;\n__global uchar* dst = dst_ptr + mad24(y, dst_step, mad24(x, (int)(sizeof(CT)), dst_offset));\n#pragma unroll\nfor (int i=0; i<kercn; i++)\n{\n__global CT* res = (__global CT*)(dst + i*block_size*dst_step);\nres[0].x =  smem[y + i*block_size].x;\nres[0].y = -smem[y + i*block_size].y;\n}\n}\n#endif\n}\n", "#if kercn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#endif\n__kernel void arithm_flip_rows(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, int thread_rows, int thread_cols)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index0 = mad24(y0, src_step, mad24(x, TSIZE, src_offset));\nint src_index1 = mad24(rows - y0 - 1, src_step, mad24(x, TSIZE, src_offset));\nint dst_index0 = mad24(y0, dst_step, mad24(x, TSIZE, dst_offset));\nint dst_index1 = mad24(rows - y0 - 1, dst_step, mad24(x, TSIZE, dst_offset));\n#pragma unroll\nfor (int y = y0, y1 = min(thread_rows, y0 + PIX_PER_WI_Y); y < y1; ++y)\n{\nT src0 = loadpix(srcptr + src_index0);\nT src1 = loadpix(srcptr + src_index1);\nstorepix(src1, dstptr + dst_index0);\nstorepix(src0, dstptr + dst_index1);\nsrc_index0 += src_step;\nsrc_index1 -= src_step;\ndst_index0 += dst_step;\ndst_index1 -= dst_step;\n}\n}\n}\n__kernel void arithm_flip_rows_cols(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, int thread_rows, int thread_cols)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1)*PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index0 = mad24(y0, src_step, mad24(x, TSIZE, src_offset));\nint src_index1 = mad24(rows - y0 - 1, src_step, mad24(cols - x - 1, TSIZE, src_offset));\nint dst_index0 = mad24(y0, dst_step, mad24(x, TSIZE, dst_offset));\nint dst_index1 = mad24(rows - y0 - 1, dst_step, mad24(cols - x - 1, TSIZE, dst_offset));\n#pragma unroll\nfor (int y = y0, y1 = min(thread_rows, y0 + PIX_PER_WI_Y); y < y1; ++y)\n{\nT src0 = loadpix(srcptr + src_index0);\nT src1 = loadpix(srcptr + src_index1);\n#if kercn == 2\n#if cn == 1\nsrc0 = src0.s10;\nsrc1 = src1.s10;\n#endif\n#elif kercn == 4\n#if cn == 1\nsrc0 = src0.s3210;\nsrc1 = src1.s3210;\n#elif cn == 2\nsrc0 = src0.s2301;\nsrc1 = src1.s2301;\n#endif\n#endif\nstorepix(src1, dstptr + dst_index0);\nstorepix(src0, dstptr + dst_index1);\nsrc_index0 += src_step;\nsrc_index1 -= src_step;\ndst_index0 += dst_step;\ndst_index1 -= dst_step;\n}\n}\n}\n__kernel void arithm_flip_cols(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, int thread_rows, int thread_cols)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1)*PIX_PER_WI_Y;\nif (x < thread_cols)\n{\nint src_index0 = mad24(y0, src_step, mad24(x, TSIZE, src_offset));\nint src_index1 = mad24(y0, src_step, mad24(cols - x - 1, TSIZE, src_offset));\nint dst_index0 = mad24(y0, dst_step, mad24(x, TSIZE, dst_offset));\nint dst_index1 = mad24(y0, dst_step, mad24(cols - x - 1, TSIZE, dst_offset));\n#pragma unroll\nfor (int y = y0, y1 = min(rows, y0 + PIX_PER_WI_Y); y < y1; ++y)\n{\nT src0 = loadpix(srcptr + src_index0);\nT src1 = loadpix(srcptr + src_index1);\n#if kercn == 2\n#if cn == 1\nsrc0 = src0.s10;\nsrc1 = src1.s10;\n#endif\n#elif kercn == 4\n#if cn == 1\nsrc0 = src0.s3210;\nsrc1 = src1.s3210;\n#elif cn == 2\nsrc0 = src0.s2301;\nsrc1 = src1.s2301;\n#endif\n#endif\nstorepix(src1, dstptr + dst_index0);\nstorepix(src0, dstptr + dst_index1);\nsrc_index0 += src_step;\nsrc_index1 += src_step;\ndst_index0 += dst_step;\ndst_index1 += dst_step;\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define TSIZE  (int)sizeof(T)\n#define WTSIZE (int)sizeof(WT)\n#define IND_A mad24(y, A_step, A_offset)\n#define IND_B mad24(x, WTSIZE, B_offset)\n#define STEP_B B_step / WTSIZE\n#define LOCAL_SIZE_ODD (LOCAL_SIZE + 1)\n#if cn==2\n#if kercn==2\n#define MUL(a, b)\\\n{\\\nsum.x += fma(a.x, b.x, - a.y * b.y);\\\nsum.y += fma(a.x, b.y, a.y * b.x);\\\n}\n#else\n#define MUL(a, b)\\\n{\\\nsum.x += fma(a.x, b.x, - a.y * b.y);\\\nsum.y += fma(a.x, b.y, a.y * b.x);\\\nsum.z += fma(a.x, b.z, - a.y * b.w);\\\nsum.w += fma(a.x, b.w, a.y * b.z);\\\n}\n#endif\n#else\n#define MUL(a, b) sum = fma(a, b, sum);\n#endif\n__kernel void gemm(__global const uchar * A_ptr, int A_step, int A_offset,\n__global const uchar * B_ptr, int B_step, int B_offset,\n__global uchar * D_ptr, int D_step, int D_offset, int D_rows, int D_cols,\nint n, T1 alpha, T1 beta)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nint lidx = get_local_id(0);\nint lidy = get_local_id(1);\n__global const T* A = (__global const T*)(A_ptr + IND_A);\n__global const WT* B = (__global const WT*)(B_ptr + IND_B);\nWT sum = (WT)(0);\n#if LOCAL_SIZE == 1\nif (x < D_cols && y < D_rows)\n{\nfor (int i = 0; i < n; ++i)\nMUL(A[i], B[i*STEP_B]);\n#else\n__local T  a_local[LOCAL_SIZE_ODD*LOCAL_SIZE];\n__local WT b_local[LOCAL_SIZE_ODD*LOCAL_SIZE];\nint reps;\n#if NO_MULT\nreps = (n + LOCAL_SIZE-1)/LOCAL_SIZE;\n#else\nreps = n/LOCAL_SIZE;\n#endif\nfor (int p = 0; p < reps; ++p)\n{\nif (p * LOCAL_SIZE + lidx < n && y < D_rows)\na_local[mad24(lidy, LOCAL_SIZE_ODD, lidx)] = A[mad24(p, LOCAL_SIZE, lidx)];\nif (p * LOCAL_SIZE + lidy < n && x < D_cols)\nb_local[mad24(lidy, LOCAL_SIZE_ODD, lidx)] = B[mad24(p, LOCAL_SIZE, lidy)*STEP_B];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < D_cols && y < D_rows)\n{\n#if NO_MULT\nint ie = min(LOCAL_SIZE, n - p * LOCAL_SIZE);\nfor (int i = 0; i < ie; ++i)\n#else\nfor (int i = 0; i < LOCAL_SIZE; ++i)\n#endif\nMUL(a_local[mad24(lidy, LOCAL_SIZE_ODD, i)], b_local[mad24(i, LOCAL_SIZE_ODD, lidx)]);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (x < D_cols && y < D_rows)\n{\n#endif\n__global WT* D = (__global WT*)(D_ptr + mad24(y, D_step, mad24(x, WTSIZE, D_offset)));\n#if HAVE_C\nD[0] = mad(alpha, sum, D[0]*beta);\n#else\nD[0] = alpha * sum;\n#endif\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n__kernel void inrange(__global const uchar * src1ptr, int src1_step, int src1_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n#ifdef HAVE_SCALAR\n__global const srcT1 * src2, __global const srcT1 * src3,\n#else\n__global const uchar * src2ptr, int src2_step, int src2_offset,\n__global const uchar * src3ptr, int src3_step, int src3_offset,\n#endif\nint rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nint src1_index = mad24(y0, src1_step, mad24(x, (int)sizeof(srcT1) * kercn, src1_offset));\nint dst_index = mad24(y0, dst_step, mad24(x, colsPerWI, dst_offset));\n#ifndef HAVE_SCALAR\nint src2_index = mad24(y0, src2_step, mad24(x, (int)sizeof(srcT1) * kercn, src2_offset));\nint src3_index = mad24(y0, src3_step, mad24(x, (int)sizeof(srcT1) * kercn, src3_offset));\n#endif\nfor (int y = y0, y1 = min(dst_rows, y0 + rowsPerWI); y < y1; ++y, src1_index += src1_step, dst_index += dst_step)\n{\n#if kercn >= cn && kercn == 4 && depth <= 4 && !defined HAVE_SCALAR\nsrcT src1 = *(__global const srcT *)(src1ptr + src1_index);\nsrcT src2 = *(__global const srcT *)(src2ptr + src2_index);\nsrcT src3 = *(__global const srcT *)(src3ptr + src3_index);\n__global dstT * dst = (__global dstT *)(dstptr + dst_index);\n#if cn == 1\ndst[0] = src2 > src1 || src3 < src1 ? (dstT)(0) : (dstT)(255);\n#elif cn == 2\ndst[0] = (dstT)(src2.xy > src1.xy || src3.xy < src1.xy ||\nsrc2.zw > src1.zw || src3.zw < src1.zw ? (dstT)(0) : (dstT)(255);\n#elif cn == 4\ndst[0] = (dstT)(src2.x > src1.x || src3.x < src1.x ||\nsrc2.y > src1.y || src3.y < src1.y ||\nsrc2.z > src1.z || src3.z < src1.z ||\nsrc2.w > src1.w || src3.w < src1.w ? 0 : 255);\n#endif\n#else\n__global const srcT1 * src1 = (__global const srcT1 *)(src1ptr + src1_index);\n__global uchar * dst = dstptr + dst_index;\n#ifndef HAVE_SCALAR\n__global const srcT1 * src2 = (__global const srcT1 *)(src2ptr + src2_index);\n__global const srcT1 * src3 = (__global const srcT1 *)(src3ptr + src3_index);\n#endif\n#pragma unroll\nfor (int px = 0; px < colsPerWI; ++px, src1 += cn\n#ifndef HAVE_SCALAR\n, src2 += cn, src3 += cn\n#endif\n)\n{\ndst[px] = 255;\nfor (int c = 0; c < cn; ++c)\nif (src2[c] > src1[c] || src3[c] < src1[c])\n{\ndst[px] = 0;\nbreak;\n}\n}\n#endif\n#ifndef HAVE_SCALAR\nsrc2_index += src2_step;\nsrc3_index += src3_step;\n#endif\n}\n}\n}\n", "#if lcn == 1\n#if dcn == 4\n#define LUT_OP  \\\nint idx = *(__global const int *)(srcptr + src_index); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx & 0xff]; \\\ndst[1] = lut_l[(idx >> 8) & 0xff]; \\\ndst[2] = lut_l[(idx >> 16) & 0xff]; \\\ndst[3] = lut_l[(idx >> 24) & 0xff];\n#elif dcn == 3\n#define LUT_OP  \\\nuchar3 idx = vload3(0, srcptr + src_index); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx.x]; \\\ndst[1] = lut_l[idx.y]; \\\ndst[2] = lut_l[idx.z];\n#elif dcn == 2\n#define LUT_OP \\\nshort idx = *(__global const short *)(srcptr + src_index); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx & 0xff]; \\\ndst[1] = lut_l[(idx >> 8) & 0xff];\n#elif dcn == 1\n#define LUT_OP \\\nuchar idx = (srcptr + src_index)[0]; \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx];\n#else\n#define LUT_OP \\\n__global const srcT * src = (__global const srcT *)(srcptr + src_index); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\nfor (int cn = 0; cn < dcn; ++cn) \\\ndst[cn] = lut_l[src[cn]];\n#endif\n#else\n#if dcn == 4\n#define LUT_OP \\\n__global const uchar4 * src_pixel = (__global const uchar4 *)(srcptr + src_index); \\\nint4 idx = mad24(convert_int4(src_pixel[0]), (int4)(lcn), (int4)(0, 1, 2, 3)); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx.x]; \\\ndst[1] = lut_l[idx.y]; \\\ndst[2] = lut_l[idx.z]; \\\ndst[3] = lut_l[idx.w];\n#elif dcn == 3\n#define LUT_OP \\\nuchar3 src_pixel = vload3(0, srcptr + src_index); \\\nint3 idx = mad24(convert_int3(src_pixel), (int3)(lcn), (int3)(0, 1, 2)); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx.x]; \\\ndst[1] = lut_l[idx.y]; \\\ndst[2] = lut_l[idx.z];\n#elif dcn == 2\n#define LUT_OP \\\n__global const uchar2 * src_pixel = (__global const uchar2 *)(srcptr + src_index); \\\nint2 idx = mad24(convert_int2(src_pixel[0]), lcn, (int2)(0, 1)); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx.x]; \\\ndst[1] = lut_l[idx.y];\n#elif dcn == 1\n#define LUT_OP \\\nuchar idx = (srcptr + src_index)[0]; \\\ndst = (__global dstT *)(dstptr + dst_index); \\\ndst[0] = lut_l[idx];\n#else\n#define LUT_OP \\\n__global const srcT * src = (__global const srcT *)(srcptr + src_index); \\\ndst = (__global dstT *)(dstptr + dst_index); \\\nfor (int cn = 0; cn < dcn; ++cn) \\\ndst[cn] = lut_l[mad24(src[cn], lcn, cn)];\n#endif\n#endif\n__kernel void LUT(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * lutptr, int lut_step, int lut_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) << 2;\n__local dstT lut_l[256 * lcn];\n__global const dstT * lut = (__global const dstT *)(lutptr + lut_offset);\nfor (int i = mad24((int)get_local_id(1), (int)get_local_size(0), (int)get_local_id(0)),\nstep = get_local_size(0) * get_local_size(1); i < 256 * lcn; i += step)\nlut_l[i] = lut[i];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < cols && y < rows)\n{\nint src_index = mad24(y, src_step, mad24(x, (int)sizeof(srcT) * dcn, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT) * dcn, dst_offset));\n__global dstT * dst;\nLUT_OP;\nif (y < rows - 1)\n{\nsrc_index += src_step;\ndst_index += dst_step;\nLUT_OP;\nif (y < rows - 2)\n{\nsrc_index += src_step;\ndst_index += dst_step;\nLUT_OP;\nif (y < rows - 3)\n{\nsrc_index += src_step;\ndst_index += dst_step;\nLUT_OP;\n}\n}\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define storesqpix(val, addr)  *(__global sqdstT *)(addr) = val\n#define srcTSIZE (int)sizeof(srcT)\n#define dstTSIZE (int)sizeof(dstT)\n#define sqdstTSIZE (int)sizeof(sqdstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define storesqpix(val, addr) vstore3(val, 0, (__global sqdstT1 *)(addr))\n#define srcTSIZE ((int)sizeof(srcT1)*3)\n#define dstTSIZE ((int)sizeof(dstT1)*3)\n#define sqdstTSIZE ((int)sizeof(sqdstT1)*3)\n#endif\n__kernel void meanStdDev(__global const uchar * srcptr, int src_step, int src_offset, int cols,\nint total, int groups, __global uchar * dstptr\n#ifdef HAVE_MASK\n, __global const uchar * mask, int mask_step, int mask_offset\n#endif\n)\n{\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint id = get_global_id(0);\n__local dstT localMemSum[WGS2_ALIGNED];\n__local sqdstT localMemSqSum[WGS2_ALIGNED];\n#ifdef HAVE_MASK\n__local int localMemNonZero[WGS2_ALIGNED];\n#endif\ndstT accSum = (dstT)(0);\nsqdstT accSqSum = (sqdstT)(0);\n#ifdef HAVE_MASK\nint accNonZero = 0;\nmask += mask_offset;\n#endif\nsrcptr += src_offset;\nfor (int grain = groups * WGS; id < total; id += grain)\n{\n#ifdef HAVE_MASK\n#ifdef HAVE_MASK_CONT\nint mask_index = id;\n#else\nint mask_index = mad24(id / cols, mask_step, id % cols);\n#endif\nif (mask[mask_index])\n#endif\n{\n#ifdef HAVE_SRC_CONT\nint src_index = id * srcTSIZE;\n#else\nint src_index = mad24(id / cols, src_step, mul24(id % cols, srcTSIZE));\n#endif\nsrcT value = loadpix(srcptr + src_index);\naccSum += convertToDT(value);\nsqdstT dvalue = convertToSDT(value);\naccSqSum = fma(dvalue, dvalue, accSqSum);\n#ifdef HAVE_MASK\n++accNonZero;\n#endif\n}\n}\nif (lid < WGS2_ALIGNED)\n{\nlocalMemSum[lid] = accSum;\nlocalMemSqSum[lid] = accSqSum;\n#ifdef HAVE_MASK\nlocalMemNonZero[lid] = accNonZero;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid >= WGS2_ALIGNED && total >= WGS2_ALIGNED)\n{\nlocalMemSum[lid - WGS2_ALIGNED] += accSum;\nlocalMemSqSum[lid - WGS2_ALIGNED] += accSqSum;\n#ifdef HAVE_MASK\nlocalMemNonZero[lid - WGS2_ALIGNED] += accNonZero;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = WGS2_ALIGNED >> 1; lsize > 0; lsize >>= 1)\n{\nif (lid < lsize)\n{\nint lid2 = lsize + lid;\nlocalMemSum[lid] += localMemSum[lid2];\nlocalMemSqSum[lid] += localMemSqSum[lid2];\n#ifdef HAVE_MASK\nlocalMemNonZero[lid] += localMemNonZero[lid2];\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (lid == 0)\n{\nstorepix(localMemSum[0], dstptr + dstTSIZE * gid);\nstoresqpix(localMemSqSum[0], dstptr + mad24(dstTSIZE, groups, sqdstTSIZE * gid));\n#ifdef HAVE_MASK\n*(__global int *)(dstptr + mad24(dstTSIZE + sqdstTSIZE, groups, (int)sizeof(int) * gid)) = localMemNonZero[0];\n#endif\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#ifdef DEPTH_0\n#define MIN_VAL 0\n#define MAX_VAL UCHAR_MAX\n#elif defined DEPTH_1\n#define MIN_VAL SCHAR_MIN\n#define MAX_VAL SCHAR_MAX\n#elif defined DEPTH_2\n#define MIN_VAL 0\n#define MAX_VAL USHRT_MAX\n#elif defined DEPTH_3\n#define MIN_VAL SHRT_MIN\n#define MAX_VAL SHRT_MAX\n#elif defined DEPTH_4\n#define MIN_VAL INT_MIN\n#define MAX_VAL INT_MAX\n#elif defined DEPTH_5\n#define MIN_VAL (-FLT_MAX)\n#define MAX_VAL FLT_MAX\n#elif defined DEPTH_6\n#define MIN_VAL (-DBL_MAX)\n#define MAX_VAL DBL_MAX\n#endif\n#define noconvert\n#define INDEX_MAX UINT_MAX\n#if wdepth <= 4\n#define MIN_ABS(a) convertFromU(abs(a))\n#define MIN_ABS2(a, b) convertFromU(abs_diff(a, b))\n#define MIN(a, b) min(a, b)\n#define MAX(a, b) max(a, b)\n#else\n#define MIN_ABS(a) fabs(a)\n#define MIN_ABS2(a, b) fabs(a - b)\n#define MIN(a, b) fmin(a, b)\n#define MAX(a, b) fmax(a, b)\n#endif\n#if kercn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define srcTSIZE (int)sizeof(srcT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define srcTSIZE ((int)sizeof(srcT1) * 3)\n#endif\n#ifndef HAVE_MASK\n#undef srcTSIZE\n#define srcTSIZE (int)sizeof(srcT1)\n#endif\n#ifdef NEED_MINVAL\n#ifdef NEED_MINLOC\n#define CALC_MIN(p, inc) \\\nif (minval > temp.p) \\\n{ \\\nminval = temp.p; \\\nminloc = id + inc; \\\n}\n#else\n#define CALC_MIN(p, inc) \\\nminval = MIN(minval, temp.p);\n#endif\n#else\n#define CALC_MIN(p, inc)\n#endif\n#ifdef NEED_MAXVAL\n#ifdef NEED_MAXLOC\n#define CALC_MAX(p, inc) \\\nif (maxval < temp.p) \\\n{ \\\nmaxval = temp.p; \\\nmaxloc = id + inc; \\\n}\n#else\n#define CALC_MAX(p, inc) \\\nmaxval = MAX(maxval, temp.p);\n#endif\n#else\n#define CALC_MAX(p, inc)\n#endif\n#ifdef OP_CALC2\n#define CALC_MAX2(p) \\\nmaxval2 = MAX(maxval2, temp2.p);\n#else\n#define CALC_MAX2(p)\n#endif\n#define CALC_P(p, inc) \\\nCALC_MIN(p, inc) \\\nCALC_MAX(p, inc) \\\nCALC_MAX2(p)\n__kernel void minmaxloc(__global const uchar * srcptr, int src_step, int src_offset, int cols,\nint total, int groupnum, __global uchar * dstptr\n#ifdef HAVE_MASK\n, __global const uchar * mask, int mask_step, int mask_offset\n#endif\n#ifdef HAVE_SRC2\n, __global const uchar * src2ptr, int src2_step, int src2_offset\n#endif\n)\n{\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint  id = get_global_id(0)\n#ifndef HAVE_MASK\n* kercn;\n#else\n;\n#endif\nsrcptr += src_offset;\n#ifdef HAVE_MASK\nmask += mask_offset;\n#endif\n#ifdef HAVE_SRC2\nsrc2ptr += src2_offset;\n#endif\n#ifdef NEED_MINVAL\n__local dstT1 localmem_min[WGS2_ALIGNED];\ndstT1 minval = MAX_VAL;\n#ifdef NEED_MINLOC\n__local uint localmem_minloc[WGS2_ALIGNED];\nuint minloc = INDEX_MAX;\n#endif\n#endif\n#ifdef NEED_MAXVAL\ndstT1 maxval = MIN_VAL;\n__local dstT1 localmem_max[WGS2_ALIGNED];\n#ifdef NEED_MAXLOC\n__local uint localmem_maxloc[WGS2_ALIGNED];\nuint maxloc = INDEX_MAX;\n#endif\n#endif\n#ifdef OP_CALC2\n__local dstT1 localmem_max2[WGS2_ALIGNED];\ndstT1 maxval2 = MIN_VAL;\n#endif\nint src_index;\n#ifdef HAVE_MASK\nint mask_index;\n#endif\n#ifdef HAVE_SRC2\nint src2_index;\n#endif\ndstT temp;\n#ifdef HAVE_SRC2\ndstT temp2;\n#endif\nfor (int grain = groupnum * WGS\n#ifndef HAVE_MASK\n* kercn\n#endif\n; id < total; id += grain)\n{\n#ifdef HAVE_MASK\n#ifdef HAVE_MASK_CONT\nmask_index = id;\n#else\nmask_index = mad24(id / cols, mask_step, id % cols);\n#endif\nif (mask[mask_index])\n#endif\n{\n#ifdef HAVE_SRC_CONT\nsrc_index = id * srcTSIZE;\n#else\nsrc_index = mad24(id / cols, src_step, mul24(id % cols, srcTSIZE));\n#endif\ntemp = convertToDT(loadpix(srcptr + src_index));\n#ifdef OP_ABS\ntemp = MIN_ABS(temp);\n#endif\n#ifdef HAVE_SRC2\n#ifdef HAVE_SRC2_CONT\nsrc2_index = id * srcTSIZE;\n#else\nsrc2_index = mad24(id / cols, src2_step, mul24(id % cols, srcTSIZE));\n#endif\ntemp2 = convertToDT(loadpix(src2ptr + src2_index));\ntemp = MIN_ABS2(temp, temp2);\n#ifdef OP_CALC2\ntemp2 = MIN_ABS(temp2);\n#endif\n#endif\n#if kercn == 1\n#ifdef NEED_MINVAL\n#ifdef NEED_MINLOC\nif (minval > temp)\n{\nminval = temp;\nminloc = id;\n}\n#else\nminval = MIN(minval, temp);\n#endif\n#endif\n#ifdef NEED_MAXVAL\n#ifdef NEED_MAXLOC\nif (maxval < temp)\n{\nmaxval = temp;\nmaxloc = id;\n}\n#else\nmaxval = MAX(maxval, temp);\n#endif\n#ifdef OP_CALC2\nmaxval2 = MAX(maxval2, temp2);\n#endif\n#endif\n#elif kercn >= 2\nCALC_P(s0, 0)\nCALC_P(s1, 1)\n#if kercn >= 3\nCALC_P(s2, 2)\n#if kercn >= 4\nCALC_P(s3, 3)\n#if kercn >= 8\nCALC_P(s4, 4)\nCALC_P(s5, 5)\nCALC_P(s6, 6)\nCALC_P(s7, 7)\n#if kercn == 16\nCALC_P(s8, 8)\nCALC_P(s9, 9)\nCALC_P(sA, 10)\nCALC_P(sB, 11)\nCALC_P(sC, 12)\nCALC_P(sD, 13)\nCALC_P(sE, 14)\nCALC_P(sF, 15)\n#endif\n#endif\n#endif\n#endif\n#endif\n}\n}\nif (lid < WGS2_ALIGNED)\n{\n#ifdef NEED_MINVAL\nlocalmem_min[lid] = minval;\n#endif\n#ifdef NEED_MAXVAL\nlocalmem_max[lid] = maxval;\n#endif\n#ifdef NEED_MINLOC\nlocalmem_minloc[lid] = minloc;\n#endif\n#ifdef NEED_MAXLOC\nlocalmem_maxloc[lid] = maxloc;\n#endif\n#ifdef OP_CALC2\nlocalmem_max2[lid] = maxval2;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid >= WGS2_ALIGNED && total >= WGS2_ALIGNED)\n{\nint lid3 = lid - WGS2_ALIGNED;\n#ifdef NEED_MINVAL\n#ifdef NEED_MINLOC\nif (localmem_min[lid3] >= minval)\n{\nif (localmem_min[lid3] == minval)\nlocalmem_minloc[lid3] = min(localmem_minloc[lid3], minloc);\nelse\nlocalmem_minloc[lid3] = minloc,\nlocalmem_min[lid3] = minval;\n}\n#else\nlocalmem_min[lid3] = MIN(localmem_min[lid3], minval);\n#endif\n#endif\n#ifdef NEED_MAXVAL\n#ifdef NEED_MAXLOC\nif (localmem_max[lid3] <= maxval)\n{\nif (localmem_max[lid3] == maxval)\nlocalmem_maxloc[lid3] = min(localmem_maxloc[lid3], maxloc);\nelse\nlocalmem_maxloc[lid3] = maxloc,\nlocalmem_max[lid3] = maxval;\n}\n#else\nlocalmem_max[lid3] = MAX(localmem_max[lid3], maxval);\n#endif\n#endif\n#ifdef OP_CALC2\nlocalmem_max2[lid3] = MAX(localmem_max2[lid3], maxval2);\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = WGS2_ALIGNED >> 1; lsize > 0; lsize >>= 1)\n{\nif (lid < lsize)\n{\nint lid2 = lsize + lid;\n#ifdef NEED_MINVAL\n#ifdef NEED_MINLOC\nif (localmem_min[lid] >= localmem_min[lid2])\n{\nif (localmem_min[lid] == localmem_min[lid2])\nlocalmem_minloc[lid] = min(localmem_minloc[lid2], localmem_minloc[lid]);\nelse\nlocalmem_minloc[lid] = localmem_minloc[lid2],\nlocalmem_min[lid] = localmem_min[lid2];\n}\n#else\nlocalmem_min[lid] = MIN(localmem_min[lid], localmem_min[lid2]);\n#endif\n#endif\n#ifdef NEED_MAXVAL\n#ifdef NEED_MAXLOC\nif (localmem_max[lid] <= localmem_max[lid2])\n{\nif (localmem_max[lid] == localmem_max[lid2])\nlocalmem_maxloc[lid] = min(localmem_maxloc[lid2], localmem_maxloc[lid]);\nelse\nlocalmem_maxloc[lid] = localmem_maxloc[lid2],\nlocalmem_max[lid] = localmem_max[lid2];\n}\n#else\nlocalmem_max[lid] = MAX(localmem_max[lid], localmem_max[lid2]);\n#endif\n#endif\n#ifdef OP_CALC2\nlocalmem_max2[lid] = MAX(localmem_max2[lid], localmem_max2[lid2]);\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (lid == 0)\n{\nint pos = 0;\n#ifdef NEED_MINVAL\n*(__global dstT1 *)(dstptr + mad24(gid, (int)sizeof(dstT1), pos)) = localmem_min[0];\npos = mad24(groupnum, (int)sizeof(dstT1), pos);\n#endif\n#ifdef NEED_MAXVAL\n*(__global dstT1 *)(dstptr + mad24(gid, (int)sizeof(dstT1), pos)) = localmem_max[0];\npos = mad24(groupnum, (int)sizeof(dstT1), pos);\n#endif\n#ifdef NEED_MINLOC\n*(__global uint *)(dstptr + mad24(gid, (int)sizeof(uint), pos)) = localmem_minloc[0];\npos = mad24(groupnum, (int)sizeof(uint), pos);\n#endif\n#ifdef NEED_MAXLOC\n*(__global uint *)(dstptr + mad24(gid, (int)sizeof(uint), pos)) = localmem_maxloc[0];\n#ifdef OP_CALC2\npos = mad24(groupnum, (int)sizeof(uint), pos);\n#endif\n#endif\n#ifdef OP_CALC2\n*(__global dstT1 *)(dstptr + mad24(gid, (int)sizeof(dstT1), pos)) = localmem_max2[0];\n#endif\n}\n}\n", "#define DECLARE_INPUT_MAT(i) \\\n__global const uchar * src##i##ptr, int src##i##_step, int src##i##_offset,\n#define DECLARE_OUTPUT_MAT(i) \\\n__global uchar * dst##i##ptr, int dst##i##_step, int dst##i##_offset,\n#define DECLARE_INDEX(i) \\\nint src##i##_index = mad24(src##i##_step, y0, mad24(x, (int)sizeof(T) * scn##i, src##i##_offset)); \\\nint dst##i##_index = mad24(dst##i##_step, y0, mad24(x, (int)sizeof(T) * dcn##i, dst##i##_offset));\n#define PROCESS_ELEM(i) \\\n__global const T * src##i = (__global const T *)(src##i##ptr + src##i##_index); \\\n__global T * dst##i = (__global T *)(dst##i##ptr + dst##i##_index); \\\ndst##i[0] = src##i[0]; \\\nsrc##i##_index += src##i##_step; \\\ndst##i##_index += dst##i##_step;\n__kernel void mixChannels(DECLARE_INPUT_MAT_N DECLARE_OUTPUT_MAT_N int rows, int cols, int rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nDECLARE_INDEX_N\nfor (int y = y0, y1 = min(y0 + rowsPerWI, rows); y < y1; ++y)\n{\nPROCESS_ELEM_N\n}\n}\n}\n", "inline float2 cmulf(float2 a, float2 b)\n{\nreturn (float2)(mad(a.x, b.x, - a.y * b.y), mad(a.x, b.y, a.y * b.x));\n}\ninline float2 conjf(float2 a)\n{\nreturn (float2)(a.x, - a.y);\n}\n__kernel void mulAndScaleSpectrums(__global const uchar * src1ptr, int src1_step, int src1_offset,\n__global const uchar * src2ptr, int src2_step, int src2_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint dst_rows, int dst_cols, int rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nint src1_index = mad24(y0, src1_step, mad24(x, (int)sizeof(float2), src1_offset));\nint src2_index = mad24(y0, src2_step, mad24(x, (int)sizeof(float2), src2_offset));\nint dst_index = mad24(y0, dst_step, mad24(x, (int)sizeof(float2), dst_offset));\nfor (int y = y0, y1 = min(dst_rows, y0 + rowsPerWI); y < y1; ++y,\nsrc1_index += src1_step, src2_index += src2_step, dst_index += dst_step)\n{\nfloat2 src0 = *(__global const float2 *)(src1ptr + src1_index);\nfloat2 src1 = *(__global const float2 *)(src2ptr + src2_index);\n__global float2 * dst = (__global float2 *)(dstptr + dst_index);\n#ifdef CONJ\nfloat2 v = cmulf(src0, conjf(src1));\n#else\nfloat2 v = cmulf(src0, src1);\n#endif\ndst[0] = v;\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define srcTSIZE (int)sizeof(srcT)\n#define dstTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define srcTSIZE ((int)sizeof(srcT1)*3)\n#define dstTSIZE ((int)sizeof(dstT1)*3)\n#endif\n__kernel void normalizek(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * mask, int mask_step, int mask_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols\n#ifdef HAVE_SCALE\n, float scale\n#endif\n#ifdef HAVE_DELTA\n, float delta\n#endif\n)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nint src_index  = mad24(y0, src_step, mad24(x, srcTSIZE, src_offset));\nint mask_index = mad24(y0, mask_step, x + mask_offset);\nint dst_index  = mad24(y0, dst_step, mad24(x, dstTSIZE, dst_offset));\nfor (int y = y0, y1 = min(y0 + rowsPerWI, dst_rows); y < y1;\n++y, src_index += src_step, dst_index += dst_step, mask_index += mask_step)\n{\nif (mask[mask_index])\n{\nworkT value = convertToWT(loadpix(srcptr + src_index));\n#ifdef HAVE_SCALE\n#ifdef HAVE_DELTA\nvalue = fma(value, (workT)(scale), (workT)(delta));\n#else\nvalue *= (workT)(scale);\n#endif\n#else\n#ifdef HAVE_DELTA\nvalue += (workT)(delta);\n#endif\n#endif\nstorepix(convertToDT(value), dstptr + dst_index);\n}\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if defined OP_NORM_INF_MASK\n#ifdef DEPTH_0\n#define MIN_VAL 0\n#define MAX_VAL 255\n#elif defined DEPTH_1\n#define MIN_VAL -128\n#define MAX_VAL 127\n#elif defined DEPTH_2\n#define MIN_VAL 0\n#define MAX_VAL 65535\n#elif defined DEPTH_3\n#define MIN_VAL -32768\n#define MAX_VAL 32767\n#elif defined DEPTH_4\n#define MIN_VAL INT_MIN\n#define MAX_VAL INT_MAX\n#elif defined DEPTH_5\n#define MIN_VAL (-FLT_MAX)\n#define MAX_VAL FLT_MAX\n#elif defined DEPTH_6\n#define MIN_VAL (-DBL_MAX)\n#define MAX_VAL DBL_MAX\n#endif\n#define dstT srcT\n#define dstT1 srcT1\n#endif\n#define noconvert\n#ifndef kercn\n#define kercn 1\n#endif\n#ifdef HAVE_MASK_CONT\n#define MASK_INDEX int mask_index = id + mask_offset;\n#else\n#define MASK_INDEX int mask_index = mad24(id / cols, mask_step, mask_offset + (id % cols))\n#endif\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#if kercn == 1\n#define srcTSIZE (int)sizeof(srcT)\n#else\n#define srcTSIZE (int)sizeof(srcT1)\n#endif\n#define dstTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define srcTSIZE ((int)sizeof(srcT1)*3)\n#define dstTSIZE ((int)sizeof(dstT1)*3)\n#endif\n#if ddepth <= 4\n#define SUM_ABS(a) convertFromU(abs(a))\n#define SUM_ABS2(a, b) convertFromU(abs_diff(a, b))\n#else\n#define SUM_ABS(a) fabs(a)\n#define SUM_ABS2(a, b) fabs(a - b)\n#endif\n#ifdef HAVE_MASK\n#ifdef HAVE_SRC2\n#define EXTRA_PARAMS , __global const uchar * mask, int mask_step, int mask_offset, __global const uchar * src2ptr, int src2_step, int src2_offset\n#else\n#define EXTRA_PARAMS , __global const uchar * mask, int mask_step, int mask_offset\n#endif\n#else\n#ifdef HAVE_SRC2\n#define EXTRA_PARAMS , __global const uchar * src2ptr, int src2_step, int src2_offset\n#else\n#define EXTRA_PARAMS\n#endif\n#endif\n#if defined OP_SUM || defined OP_SUM_ABS || defined OP_SUM_SQR || defined OP_DOT\n#ifdef OP_DOT\n#if ddepth <= 4\n#define FUNC(a, b, c) a = mad24(b, c, a)\n#else\n#define FUNC(a, b, c) a = mad(b, c, a)\n#endif\n#elif defined OP_SUM\n#define FUNC(a, b) a += b\n#elif defined OP_SUM_ABS\n#define FUNC(a, b) a += SUM_ABS(b)\n#elif defined OP_SUM_SQR\n#if ddepth <= 4\n#define FUNC(a, b) a = mad24(b, b, a)\n#else\n#define FUNC(a, b) a = mad(b, b, a)\n#endif\n#endif\n#ifdef OP_CALC2\n#define DECLARE_LOCAL_MEM \\\n__local dstT localmem[WGS2_ALIGNED], localmem2[WGS2_ALIGNED]\n#define DEFINE_ACCUMULATOR \\\ndstT accumulator = (dstT)(0), accumulator2 = (dstT)(0)\n#else\n#define DECLARE_LOCAL_MEM \\\n__local dstT localmem[WGS2_ALIGNED]\n#define DEFINE_ACCUMULATOR \\\ndstT accumulator = (dstT)(0)\n#endif\n#ifdef HAVE_SRC2\n#ifdef OP_CALC2\n#define PROCESS_ELEMS \\\ndstT temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstT temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator2, temp2); \\\nFUNC(accumulator, temp)\n#else\n#define PROCESS_ELEMS \\\ndstT temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstT temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp)\n#endif\n#else\n#define PROCESS_ELEMS \\\ndstT temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp)\n#endif\n#ifdef HAVE_MASK\n#define REDUCE_GLOBAL \\\nMASK_INDEX; \\\nif (mask[mask_index]) \\\n{ \\\nPROCESS_ELEMS; \\\n}\n#elif defined OP_DOT\n#ifdef HAVE_SRC2_CONT\n#define SRC2_INDEX int src2_index = mad24(id, srcTSIZE, src2_offset);\n#else\n#define SRC2_INDEX int src2_index = mad24(id / cols, src2_step, mad24(id % cols, srcTSIZE, src2_offset))\n#endif\n#if kercn == 1\n#define REDUCE_GLOBAL \\\nSRC2_INDEX; \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)), temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\nFUNC(accumulator, temp, temp2)\n#elif kercn == 2\n#define REDUCE_GLOBAL \\\nSRC2_INDEX; \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)), temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\nFUNC(accumulator, temp.s0, temp2.s0); \\\nFUNC(accumulator, temp.s1, temp2.s1)\n#elif kercn == 4\n#define REDUCE_GLOBAL \\\nSRC2_INDEX; \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)), temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\nFUNC(accumulator, temp.s0, temp2.s0); \\\nFUNC(accumulator, temp.s1, temp2.s1); \\\nFUNC(accumulator, temp.s2, temp2.s2); \\\nFUNC(accumulator, temp.s3, temp2.s3)\n#elif kercn == 8\n#define REDUCE_GLOBAL \\\nSRC2_INDEX; \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)), temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\nFUNC(accumulator, temp.s0, temp2.s0); \\\nFUNC(accumulator, temp.s1, temp2.s1); \\\nFUNC(accumulator, temp.s2, temp2.s2); \\\nFUNC(accumulator, temp.s3, temp2.s3); \\\nFUNC(accumulator, temp.s4, temp2.s4); \\\nFUNC(accumulator, temp.s5, temp2.s5); \\\nFUNC(accumulator, temp.s6, temp2.s6); \\\nFUNC(accumulator, temp.s7, temp2.s7)\n#elif kercn == 16\n#define REDUCE_GLOBAL \\\nSRC2_INDEX; \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)), temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\nFUNC(accumulator, temp.s0, temp2.s0); \\\nFUNC(accumulator, temp.s1, temp2.s1); \\\nFUNC(accumulator, temp.s2, temp2.s2); \\\nFUNC(accumulator, temp.s3, temp2.s3); \\\nFUNC(accumulator, temp.s4, temp2.s4); \\\nFUNC(accumulator, temp.s5, temp2.s5); \\\nFUNC(accumulator, temp.s6, temp2.s6); \\\nFUNC(accumulator, temp.s7, temp2.s7); \\\nFUNC(accumulator, temp.s8, temp2.s8); \\\nFUNC(accumulator, temp.s9, temp2.s9); \\\nFUNC(accumulator, temp.sA, temp2.sA); \\\nFUNC(accumulator, temp.sB, temp2.sB); \\\nFUNC(accumulator, temp.sC, temp2.sC); \\\nFUNC(accumulator, temp.sD, temp2.sD); \\\nFUNC(accumulator, temp.sE, temp2.sE); \\\nFUNC(accumulator, temp.sF, temp2.sF)\n#endif\n#else\n#ifdef HAVE_SRC2\n#ifdef OP_CALC2\n#if kercn == 1\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator, temp); \\\nFUNC(accumulator2, temp2)\n#elif kercn == 2\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator2, temp2.s0); \\\nFUNC(accumulator2, temp2.s1)\n#elif kercn == 4\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator2, temp2.s0); \\\nFUNC(accumulator2, temp2.s1); \\\nFUNC(accumulator2, temp2.s2); \\\nFUNC(accumulator2, temp2.s3)\n#elif kercn == 8\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7); \\\nFUNC(accumulator2, temp2.s0); \\\nFUNC(accumulator2, temp2.s1); \\\nFUNC(accumulator2, temp2.s2); \\\nFUNC(accumulator2, temp2.s3); \\\nFUNC(accumulator2, temp2.s4); \\\nFUNC(accumulator2, temp2.s5); \\\nFUNC(accumulator2, temp2.s6); \\\nFUNC(accumulator2, temp2.s7)\n#elif kercn == 16\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\ntemp2 = SUM_ABS(temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7); \\\nFUNC(accumulator, temp.s8); \\\nFUNC(accumulator, temp.s9); \\\nFUNC(accumulator, temp.sA); \\\nFUNC(accumulator, temp.sB); \\\nFUNC(accumulator, temp.sC); \\\nFUNC(accumulator, temp.sD); \\\nFUNC(accumulator, temp.sE); \\\nFUNC(accumulator, temp.sF); \\\nFUNC(accumulator2, temp2.s0); \\\nFUNC(accumulator2, temp2.s1); \\\nFUNC(accumulator2, temp2.s2); \\\nFUNC(accumulator2, temp2.s3); \\\nFUNC(accumulator2, temp2.s4); \\\nFUNC(accumulator2, temp2.s5); \\\nFUNC(accumulator2, temp2.s6); \\\nFUNC(accumulator2, temp2.s7); \\\nFUNC(accumulator2, temp2.s8); \\\nFUNC(accumulator2, temp2.s9); \\\nFUNC(accumulator2, temp2.sA); \\\nFUNC(accumulator2, temp2.sB); \\\nFUNC(accumulator2, temp2.sC); \\\nFUNC(accumulator2, temp2.sD); \\\nFUNC(accumulator2, temp2.sE); \\\nFUNC(accumulator2, temp2.sF)\n#endif\n#else\n#if kercn == 1\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp)\n#elif kercn == 2\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1)\n#elif kercn == 4\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3)\n#elif kercn == 8\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7)\n#elif kercn == 16\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\ndstTK temp2 = convertToDT(loadpix(src2ptr + src2_index)); \\\ntemp = SUM_ABS2(temp, temp2); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7); \\\nFUNC(accumulator, temp.s8); \\\nFUNC(accumulator, temp.s9); \\\nFUNC(accumulator, temp.sA); \\\nFUNC(accumulator, temp.sB); \\\nFUNC(accumulator, temp.sC); \\\nFUNC(accumulator, temp.sD); \\\nFUNC(accumulator, temp.sE); \\\nFUNC(accumulator, temp.sF)\n#endif\n#endif\n#else\n#if kercn == 1\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp)\n#elif kercn == 2\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1)\n#elif kercn == 4\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3)\n#elif kercn == 8\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7)\n#elif kercn == 16\n#define REDUCE_GLOBAL \\\ndstTK temp = convertToDT(loadpix(srcptr + src_index)); \\\nFUNC(accumulator, temp.s0); \\\nFUNC(accumulator, temp.s1); \\\nFUNC(accumulator, temp.s2); \\\nFUNC(accumulator, temp.s3); \\\nFUNC(accumulator, temp.s4); \\\nFUNC(accumulator, temp.s5); \\\nFUNC(accumulator, temp.s6); \\\nFUNC(accumulator, temp.s7); \\\nFUNC(accumulator, temp.s8); \\\nFUNC(accumulator, temp.s9); \\\nFUNC(accumulator, temp.sA); \\\nFUNC(accumulator, temp.sB); \\\nFUNC(accumulator, temp.sC); \\\nFUNC(accumulator, temp.sD); \\\nFUNC(accumulator, temp.sE); \\\nFUNC(accumulator, temp.sF)\n#endif\n#endif\n#endif\n#ifdef OP_CALC2\n#define SET_LOCAL_1 \\\nlocalmem[lid] = accumulator; \\\nlocalmem2[lid] = accumulator2\n#define REDUCE_LOCAL_1 \\\nlocalmem[lid - WGS2_ALIGNED] += accumulator; \\\nlocalmem2[lid - WGS2_ALIGNED] += accumulator2\n#define REDUCE_LOCAL_2 \\\nlocalmem[lid] += localmem[lid2]; \\\nlocalmem2[lid] += localmem2[lid2]\n#define CALC_RESULT \\\nstorepix(localmem[0], dstptr + dstTSIZE * gid); \\\nstorepix(localmem2[0], dstptr + mad24(groupnum, dstTSIZE, dstTSIZE * gid))\n#else\n#define SET_LOCAL_1 \\\nlocalmem[lid] = accumulator\n#define REDUCE_LOCAL_1 \\\nlocalmem[lid - WGS2_ALIGNED] += accumulator\n#define REDUCE_LOCAL_2 \\\nlocalmem[lid] += localmem[lid2]\n#define CALC_RESULT \\\nstorepix(localmem[0], dstptr + dstTSIZE * gid)\n#endif\n#elif defined OP_COUNT_NON_ZERO\n#define dstT int\n#define DECLARE_LOCAL_MEM \\\n__local dstT localmem[WGS2_ALIGNED]\n#define DEFINE_ACCUMULATOR \\\ndstT accumulator = (dstT)(0); \\\nsrcT1 zero = (srcT1)(0), one = (srcT1)(1)\n#if kercn == 1\n#define REDUCE_GLOBAL \\\naccumulator += loadpix(srcptr + src_index) == zero ? zero : one\n#elif kercn == 2\n#define REDUCE_GLOBAL \\\nsrcT value = loadpix(srcptr + src_index); \\\naccumulator += value.s0 == zero ? zero : one; \\\naccumulator += value.s1 == zero ? zero : one\n#elif kercn == 4\n#define REDUCE_GLOBAL \\\nsrcT value = loadpix(srcptr + src_index); \\\naccumulator += value.s0 == zero ? zero : one; \\\naccumulator += value.s1 == zero ? zero : one; \\\naccumulator += value.s2 == zero ? zero : one; \\\naccumulator += value.s3 == zero ? zero : one\n#elif kercn == 8\n#define REDUCE_GLOBAL \\\nsrcT value = loadpix(srcptr + src_index); \\\naccumulator += value.s0 == zero ? zero : one; \\\naccumulator += value.s1 == zero ? zero : one; \\\naccumulator += value.s2 == zero ? zero : one; \\\naccumulator += value.s3 == zero ? zero : one; \\\naccumulator += value.s4 == zero ? zero : one; \\\naccumulator += value.s5 == zero ? zero : one; \\\naccumulator += value.s6 == zero ? zero : one; \\\naccumulator += value.s7 == zero ? zero : one\n#elif kercn == 16\n#define REDUCE_GLOBAL \\\nsrcT value = loadpix(srcptr + src_index); \\\naccumulator += value.s0 == zero ? zero : one; \\\naccumulator += value.s1 == zero ? zero : one; \\\naccumulator += value.s2 == zero ? zero : one; \\\naccumulator += value.s3 == zero ? zero : one; \\\naccumulator += value.s4 == zero ? zero : one; \\\naccumulator += value.s5 == zero ? zero : one; \\\naccumulator += value.s6 == zero ? zero : one; \\\naccumulator += value.s7 == zero ? zero : one; \\\naccumulator += value.s8 == zero ? zero : one; \\\naccumulator += value.s9 == zero ? zero : one; \\\naccumulator += value.sA == zero ? zero : one; \\\naccumulator += value.sB == zero ? zero : one; \\\naccumulator += value.sC == zero ? zero : one; \\\naccumulator += value.sD == zero ? zero : one; \\\naccumulator += value.sE == zero ? zero : one; \\\naccumulator += value.sF == zero ? zero : one\n#endif\n#define SET_LOCAL_1 \\\nlocalmem[lid] = accumulator\n#define REDUCE_LOCAL_1 \\\nlocalmem[lid - WGS2_ALIGNED] += accumulator\n#define REDUCE_LOCAL_2 \\\nlocalmem[lid] += localmem[lid2]\n#define CALC_RESULT \\\nstorepix(localmem[0], dstptr + dstTSIZE * gid)\n#else\n#error \"No operation\"\n#endif\n#ifdef OP_DOT\n#undef EXTRA_PARAMS\n#define EXTRA_PARAMS , __global uchar * src2ptr, int src2_step, int src2_offset\n#endif\n__kernel void reduce(__global const uchar * srcptr, int src_step, int src_offset, int cols,\nint total, int groupnum, __global uchar * dstptr EXTRA_PARAMS)\n{\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint  id = get_global_id(0) * kercn;\nsrcptr += src_offset;\n#ifdef HAVE_SRC2\nsrc2ptr += src2_offset;\n#endif\nDECLARE_LOCAL_MEM;\nDEFINE_ACCUMULATOR;\nfor (int grain = groupnum * WGS * kercn; id < total; id += grain)\n{\n#ifdef HAVE_SRC_CONT\nint src_index = id * srcTSIZE;\n#else\nint src_index = mad24(id / cols, src_step, mul24(id % cols, srcTSIZE));\n#endif\n#ifdef HAVE_SRC2\n#ifdef HAVE_SRC2_CONT\nint src2_index = id * srcTSIZE;\n#else\nint src2_index = mad24(id / cols, src2_step, mul24(id % cols, srcTSIZE));\n#endif\n#endif\nREDUCE_GLOBAL;\n}\nif (lid < WGS2_ALIGNED)\n{\nSET_LOCAL_1;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid >= WGS2_ALIGNED && total >= WGS2_ALIGNED)\n{\nREDUCE_LOCAL_1;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = WGS2_ALIGNED >> 1; lsize > 0; lsize >>= 1)\n{\nif (lid < lsize)\n{\nint lid2 = lsize + lid;\nREDUCE_LOCAL_2;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (lid == 0)\n{\nCALC_RESULT;\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if ddepth == 0\n#define MIN_VAL 0\n#define MAX_VAL 255\n#elif ddepth == 1\n#define MIN_VAL -128\n#define MAX_VAL 127\n#elif ddepth == 2\n#define MIN_VAL 0\n#define MAX_VAL 65535\n#elif ddepth == 3\n#define MIN_VAL -32768\n#define MAX_VAL 32767\n#elif ddepth == 4\n#define MIN_VAL INT_MIN\n#define MAX_VAL INT_MAX\n#elif ddepth == 5\n#define MIN_VAL (-FLT_MAX)\n#define MAX_VAL FLT_MAX\n#elif ddepth == 6\n#define MIN_VAL (-DBL_MAX)\n#define MAX_VAL DBL_MAX\n#else\n#error \"Unsupported depth\"\n#endif\n#define noconvert\n#if defined OCL_CV_REDUCE_SUM || defined OCL_CV_REDUCE_AVG\n#define INIT_VALUE 0\n#define PROCESS_ELEM(acc, value) acc += value\n#elif defined OCL_CV_REDUCE_MAX\n#define INIT_VALUE MIN_VAL\n#define PROCESS_ELEM(acc, value) acc = max(value, acc)\n#elif defined OCL_CV_REDUCE_MIN\n#define INIT_VALUE MAX_VAL\n#define PROCESS_ELEM(acc, value) acc = min(value, acc)\n#else\n#error \"No operation is specified\"\n#endif\n#ifdef OP_REDUCE_PRE\n__kernel void reduce_horz_opt(__global const uchar * srcptr, int src_step, int src_offset, int rows, int cols,\n__global uchar * dstptr, int dst_step, int dst_offset\n#ifdef OCL_CV_REDUCE_AVG\n, float fscale\n#endif\n)\n{\n__local bufT lsmem[TILE_HEIGHT][BUF_COLS][cn];\nint x = get_global_id(0);\nint y = get_global_id(1);\nint liy = get_local_id(1);\nif ((x < BUF_COLS) && (y < rows))\n{\nint src_index = mad24(y, src_step, mad24(x, (int)sizeof(srcT) * cn, src_offset));\n__global const srcT * src = (__global const srcT *)(srcptr + src_index);\nbufT tmp[cn];\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\ntmp[c] = INIT_VALUE;\nint src_step_mul = BUF_COLS * cn;\nfor (int idx = x; idx < cols; idx += BUF_COLS, src += src_step_mul)\n{\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\nbufT value = convertToBufT(src[c]);\nPROCESS_ELEM(tmp[c], value);\n}\n}\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\nlsmem[liy][x][c] = tmp[c];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif ((x < BUF_COLS / 2) && (y < rows))\n{\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\nPROCESS_ELEM(lsmem[liy][x][c], lsmem[liy][x +  BUF_COLS / 2][c]);\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif ((x == 0) && (y < rows))\n{\nint dst_index = mad24(y, dst_step, dst_offset);\n__global dstT * dst = (__global dstT *)(dstptr + dst_index);\nbufT tmp[cn];\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\ntmp[c] = INIT_VALUE;\n#pragma unroll\nfor (int xin = 0; xin < BUF_COLS / 2; xin ++)\n{\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\nPROCESS_ELEM(tmp[c], lsmem[liy][xin][c]);\n}\n}\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n#ifdef OCL_CV_REDUCE_AVG\ndst[c] = convertToDT(convertToWT(tmp[c]) * fscale);\n#else\ndst[c] = convertToDT(tmp[c]);\n#endif\n}\n}\n#else\n__kernel void reduce(__global const uchar * srcptr, int src_step, int src_offset, int rows, int cols,\n__global uchar * dstptr, int dst_step, int dst_offset\n#ifdef OCL_CV_REDUCE_AVG\n, float fscale\n#endif\n)\n{\n#if dim == 0\nint x = get_global_id(0);\nif (x < cols)\n{\nint src_index = mad24(x, (int)sizeof(srcT) * cn, src_offset);\nint dst_index = mad24(x, (int)sizeof(dstT0) * cn, dst_offset);\n__global dstT0 * dst = (__global dstT0 *)(dstptr + dst_index);\ndstT tmp[cn];\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\ntmp[c] = INIT_VALUE;\nfor (int y = 0; y < rows; ++y, src_index += src_step)\n{\n__global const srcT * src = (__global const srcT *)(srcptr + src_index);\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\ndstT value = convertToDT(src[c]);\nPROCESS_ELEM(tmp[c], value);\n}\n}\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n#ifdef OCL_CV_REDUCE_AVG\ndst[c] = convertToDT0(convertToWT(tmp[c]) * fscale);\n#else\ndst[c] = convertToDT0(tmp[c]);\n#endif\n}\n#elif dim == 1\nint y = get_global_id(0);\nif (y < rows)\n{\nint src_index = mad24(y, src_step, src_offset);\nint dst_index = mad24(y, dst_step, dst_offset);\n__global const srcT * src = (__global const srcT *)(srcptr + src_index);\n__global dstT * dst = (__global dstT *)(dstptr + dst_index);\ndstT tmp[cn];\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\ntmp[c] = INIT_VALUE;\nfor (int x = 0; x < cols; ++x, src += cn)\n{\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\ndstT value = convertToDT(src[c]);\nPROCESS_ELEM(tmp[c], value);\n}\n}\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n#ifdef OCL_CV_REDUCE_AVG\ndst[c] = convertToDT0(convertToWT(tmp[c]) * fscale);\n#else\ndst[c] = convertToDT0(tmp[c]);\n#endif\n}\n#else\n#error \"Dims must be either 0 or 1\"\n#endif\n}\n#endif\n", "#if cn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#endif\n__kernel void repeat(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < src_cols)\n{\nint src_index = mad24(y0, src_step, mad24(x, (int)sizeof(T), src_offset));\nint dst_index0 = mad24(y0, dst_step, mad24(x, (int)sizeof(T), dst_offset));\nfor (int y = y0, y1 = min(src_rows, y0 + rowsPerWI); y < y1; ++y, src_index += src_step, dst_index0 += dst_step)\n{\nT srcelem = loadpix(srcptr + src_index);\n#pragma unroll\nfor (int ey = 0; ey < ny; ++ey)\n{\nint dst_index = mad24(ey * src_rows, dst_step, dst_index0);\n#pragma unroll\nfor (int ex = 0; ex < nx; ++ex)\n{\nstorepix(srcelem, dstptr + dst_index);\ndst_index = mad24(src_cols, (int)sizeof(T), dst_index);\n}\n}\n}\n}\n}\n", "#if kercn != 3\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#define scalar scalar_\n#else\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#define scalar (T)(scalar_.x, scalar_.y, scalar_.z)\n#endif\n__kernel void setIdentity(__global uchar * srcptr, int src_step, int src_offset, int rows, int cols,\nST scalar_)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nint src_index = mad24(y0, src_step, mad24(x, TSIZE, src_offset));\n#if kercn == cn\n#pragma unroll\nfor (int y = y0, i = 0, y1 = min(rows, y0 + rowsPerWI); i < rowsPerWI; ++y, ++i, src_index += src_step)\nif (y < y1)\nstorepix(x == y ? scalar : (T)(0), srcptr + src_index);\n#elif kercn == 4 && cn == 1\nif (y0 < rows)\n{\nstorepix(x == y0 >> 2 ? (T)(scalar, 0, 0, 0) : (T)(0), srcptr + src_index);\nif (++y0 < rows)\n{\nsrc_index += src_step;\nstorepix(x == y0 >> 2 ? (T)(0, scalar, 0, 0) : (T)(0), srcptr + src_index);\nif (++y0 < rows)\n{\nsrc_index += src_step;\nstorepix(x == y0 >> 2 ? (T)(0, 0, scalar, 0) : (T)(0), srcptr + src_index);\nif (++y0 < rows)\n{\nsrc_index += src_step;\nstorepix(x == y0 >> 2 ? (T)(0, 0, 0, scalar) : (T)(0), srcptr + src_index);\n}\n}\n}\n}\n#else\n#error \"Incorrect combination of cn && kercn\"\n#endif\n}\n}\n", "#ifdef OP_MERGE\n#define DECLARE_SRC_PARAM(index) __global const uchar * src##index##ptr, int src##index##_step, int src##index##_offset,\n#define DECLARE_INDEX(index) int src##index##_index = mad24(src##index##_step, y0, mad24(x, (int)sizeof(T) * scn##index, src##index##_offset));\n#define PROCESS_ELEM(index) \\\n__global const T * src##index = (__global const T *)(src##index##ptr + src##index##_index); \\\ndst[index] = src##index[0]; \\\nsrc##index##_index += src##index##_step;\n__kernel void merge(DECLARE_SRC_PARAMS_N\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, int rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nDECLARE_INDEX_N\nint dst_index = mad24(dst_step, y0, mad24(x, (int)sizeof(T) * cn, dst_offset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, dst_index += dst_step)\n{\n__global T * dst = (__global T *)(dstptr + dst_index);\nPROCESS_ELEMS_N\n}\n}\n}\n#elif defined OP_SPLIT\n#define DECLARE_DST_PARAM(index) , __global uchar * dst##index##ptr, int dst##index##_step, int dst##index##_offset\n#define DECLARE_INDEX(index) int dst##index##_index = mad24(y0, dst##index##_step, mad24(x, (int)sizeof(T), dst##index##_offset));\n#define PROCESS_ELEM(index) \\\n__global T * dst##index = (__global T *)(dst##index##ptr + dst##index##_index); \\\ndst##index[0] = src[index]; \\\ndst##index##_index += dst##index##_step;\n__kernel void split(__global uchar* srcptr, int src_step, int src_offset, int rows, int cols DECLARE_DST_PARAMS, int rowsPerWI)\n{\nint x = get_global_id(0);\nint y0 = get_global_id(1) * rowsPerWI;\nif (x < cols)\n{\nDECLARE_INDEX_N\nint src_index = mad24(y0, src_step, mad24(x, cn * (int)sizeof(T), src_offset));\nfor (int y = y0, y1 = min(rows, y0 + rowsPerWI); y < y1; ++y, src_index += src_step)\n{\n__global const T * src = (__global const T *)(srcptr + src_index);\nPROCESS_ELEMS_N\n}\n}\n}\n#else\n#error \"No operation\"\n#endif\n", "#if cn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#endif\n#ifndef INPLACE\n#define LDS_STEP      (TILE_DIM + 1)\n__kernel void transpose(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset)\n{\nint gp_x = get_group_id(0),   gp_y = get_group_id(1);\nint gs_x = get_num_groups(0), gs_y = get_num_groups(1);\nint groupId_x, groupId_y;\nif (src_rows == src_cols)\n{\ngroupId_y = gp_x;\ngroupId_x = (gp_x + gp_y) % gs_x;\n}\nelse\n{\nint bid = mad24(gs_x, gp_y, gp_x);\ngroupId_y =  bid % gs_y;\ngroupId_x = ((bid / gs_y) + groupId_y) % gs_x;\n}\nint lx = get_local_id(0);\nint ly = get_local_id(1);\nint x = mad24(groupId_x, TILE_DIM, lx);\nint y = mad24(groupId_y, TILE_DIM, ly);\nint x_index = mad24(groupId_y, TILE_DIM, lx);\nint y_index = mad24(groupId_x, TILE_DIM, ly);\n__local T tile[TILE_DIM * LDS_STEP];\nif (x < src_cols && y < src_rows)\n{\nint index_src = mad24(y, src_step, mad24(x, TSIZE, src_offset));\n#pragma unroll\nfor (int i = 0; i < TILE_DIM; i += BLOCK_ROWS)\nif (y + i < src_rows)\n{\ntile[mad24(ly + i, LDS_STEP, lx)] = loadpix(srcptr + index_src);\nindex_src = mad24(BLOCK_ROWS, src_step, index_src);\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x_index < src_rows && y_index < src_cols)\n{\nint index_dst = mad24(y_index, dst_step, mad24(x_index, TSIZE, dst_offset));\n#pragma unroll\nfor (int i = 0; i < TILE_DIM; i += BLOCK_ROWS)\nif ((y_index + i) < src_cols)\n{\nstorepix(tile[mad24(lx, LDS_STEP, ly + i)], dstptr + index_dst);\nindex_dst = mad24(BLOCK_ROWS, dst_step, index_dst);\n}\n}\n}\n#else\n__kernel void transpose_inplace(__global uchar * srcptr, int src_step, int src_offset, int src_rows)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < y + rowsPerWI)\n{\nint src_index = mad24(y, src_step, mad24(x, TSIZE, src_offset));\nint dst_index = mad24(x, src_step, mad24(y, TSIZE, src_offset));\nT tmp;\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y, src_index += src_step, dst_index += TSIZE)\nif (y < src_rows && x < y)\n{\n__global uchar * src = srcptr + src_index;\n__global uchar * dst = srcptr + dst_index;\ntmp = loadpix(dst);\nstorepix(loadpix(src), dst);\nstorepix(tmp, src);\n}\n}\n}\n#endif\n", "f938bc7c686ae7bca004809df19ef032", "11e06966b3c2f2081fd02cf70337b495", "75020e8c1da6cf8aece6bd5cc5b9ed4f", "d7a6b479ac9abf39f50a2d86c0b50863", "675811294a4da68880f2ace25764d371", "2bd554448b0b0af7e1a1ddd57a55f5a6", "05e23451b4bf16c50a0eba9d6c5c0012", "0ffb2c858f6664aa3e56efb81f025f5c", "26a27b81c3e2524a8eb918b3a518da0a", "c2741330ed8390675ed210edd54f5258", "1284edd21da32ce135cd26c0c897bd08", "02217d060320fc126306ad16885be711", "e7220f9dc5b30fc5558622a452890287", "0a79f557db56fcdce22ea905e7fc899f", "296714e8641b2d8359104d11b332b14b", "3d61276324844b5841beb34e245f270a", "f8f028f1776dc5c98bf03411d3b72318", "64f03714b8763ec6c2ac2f4b2ad0cf5d", "04c460dd0be049cd132d4c4611c93a5b", "ed0d3325149acdde26581a72052260a5", "[WARNING] The cvflann::set_distance_type function is deperecated, use cv::flann::GenericIndex<Distance> instead.", "[ERROR] cvflann::set_distance_type only provides backwards compatibility for the L1 and L2 distances. For other distance types you must use cv::flann::GenericIndex<Distance>", "LSH is not implemented for that type", "Unknown/unsupported distance type", "/builds/master_pack-android/opencv/modules/flann/src/miniflann.cpp", "LSH index does not support radiusSearch operation", "query.type() == type && indices.type() == CV_32S && dists.type() == dtype", "query.isContinuous() && indices.isContinuous() && dists.isContinuous()", "/builds/master_pack-android/opencv/modules/flann/include/opencv2/flann/general.h", "Invalid key_size (=%d). Valid values for your system are %d <= key_size < %d.", "/builds/master_pack-android/opencv/modules/flann/include/opencv2/flann/lsh_table.h", "Can not open file %s for writing FLANN index\n", "I can only search one feature at a time for range search\n", "Unknown algorithm for choosing initial centers.", "Invalid index file, cannot read", "Invalid index file, wrong signature", "Datatype of saved index is different than of the one to be created.", "The index saved belongs to a different dataset", "Only continuous arrays are supported", "Reading FLANN index error: unsupported feature type %d for the index type %d\n", "Reading FLANN index error: unsupported distance type %d\n", "Reading FLANN index error: the saved data size (%d, %d) or type (%d) is different from the passed one (%d, %d), %d\n", "DataType<ElementType>::type == data.type() && data.isContinuous()", "Ground truth is not computed for as many neighbors as requested", "%8d %10.4g %10.5g %10.5g %10.5g\n", "  Nodes  Precision(%)   Time(s)   Time/vec(ms)  Mean dist\n", "---------------------------------------------------------\n", "No need for linear estimation\n", "KDTree using params: trees=%d\n", "KDTree buildTime=%g, searchTime=%g\n", "KMeans algorithm, estimating cluster border factor\n", "Required number of checks: %d \n", "It doesn't make any sense to use more than one tree for exact search", "Branching factor must be at least 2", "KMEANS, Step 1: Exploring parameter space\n", "KMeansTree using params: max_iterations=%d, branching=%d\n", "KMeansTree buildTime=%g, searchTime=%g, build_weight=%g\n", "Entering autotuning, dataset size: %d, sampleSize: %d, testSampleSize: %d, target precision: %g\n", "Choosing linear, dataset too small\n", "KD-TREE, Step 1: Exploring parameter space\n", "----------------------------------------------------\n", "/builds/master_pack-android/opencv/modules/imgproc/src/accum.cpp", "_mask.empty() || (_src1.sameSize(_mask) && _mask.type() == CV_8U)", "/builds/master_pack-android/opencv/modules/imgproc/src/approx.cpp", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "CV_SEQ_ELTYPE(src_seq) == CV_32SC2 || CV_SEQ_ELTYPE(src_seq) == CV_32FC2", "/builds/master_pack-android/opencv/modules/imgproc/src/blend.cpp", "size == _src2.size() && size == _weights1.size() && size == _weights2.size()", "type == _src2.type() && _weights1.type() == CV_32FC1 && _weights2.type() == CV_32FC1", "/builds/master_pack-android/opencv/modules/imgproc/src/canny.cpp", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "/builds/master_pack-android/opencv/modules/imgproc/src/clahe.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/color.cpp", "(scn == 3 || scn == 4) && depth == CV_8U", "(dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U", "scn == 1 && (dcn == 3 || dcn == 4)", "scn == 3 && (dcn == 3 || dcn == 4)", "(scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F)", "scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F)", "coeffs[i] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "coeffs[j] >= 0 && coeffs[j + 1] >= 0 && coeffs[j + 2] >= 0 && coeffs[j] + coeffs[j + 1] + coeffs[j + 2] < 1.5f*LabCbrtTabScale", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 1.5f", "Unknown/unsupported color conversion code", "/builds/master_pack-android/opencv/modules/imgproc/src/colormap.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/connectedcomponents.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/contours.cpp", "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", "Contour header size must be >= sizeof(CvContour)", "Input array must be 8uC1 or 8sC1", "/builds/master_pack-android/opencv/modules/core/include/opencv2/core/core_c.h", "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == CV_32S)", "/builds/master_pack-android/opencv/modules/imgproc/src/convhull.cpp", "Convex hull must represented as a sequence of indices or sequence of pointers", "The hull matrix should be continuous and have a single row or a single column", "The hull matrix must have the same type as input or 32sC1 (integers)", "/builds/master_pack-android/opencv/modules/imgproc/src/corner.cpp", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "/builds/master_pack-android/opencv/modules/imgproc/src/cornersubpix.cpp", "win.width > 0 && win.height > 0", "src.cols >= win.width*2 + 5 && src.rows >= win.height*2 + 5", "/builds/master_pack-android/opencv/modules/imgproc/src/demosaicing.cpp", "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", "/builds/master_pack-android/opencv/modules/imgproc/src/deriv.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/distransform.cpp", "distType == CV_DIST_C || distType == CV_DIST_L1 || distType == CV_DIST_L2", "/builds/master_pack-android/opencv/modules/imgproc/src/drawing.cpp", "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "radius >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "axes.width >= 0 && axes.height >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "box.size.width >= 0 && box.size.height >= 0 && thickness <= MAX_THICKNESS", "The arrays must have equal number of columns (which is number of dimensions but 1)", "/builds/master_pack-android/opencv/modules/imgproc/src/emd.cpp", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "The lower boundary can not be calculated if the cost matrix is used", "In case of user-defined distance Distance function is undefined", "Number of dimensions can be 0 only if a user-defined metric is used", "/builds/master_pack-android/opencv/modules/imgproc/src/featureselect.cpp", "_mask.empty() || (_mask.type() == CV_8UC1 && _mask.sameSize(_image))", "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows", "/builds/master_pack-android/opencv/modules/imgproc/src/filter.cpp", "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows", "wholeSize.width > 0 && wholeSize.height > 0", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "Unsupported combination of source format (=%d), and buffer format (=%d)", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "columnBorderType != BORDER_WRAP", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "/builds/master_pack-android/opencv/modules/imgproc/src/filterengine.hpp", "Unsupported combination of source format (=%d), and destination format (=%d)", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "/builds/master_pack-android/opencv/modules/imgproc/src/floodfill.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/gabor.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/generalized_hough.cpp", "templDx_.type() == CV_32FC1 && templDx_.size() == templEdges_.size()", "templDy_.type() == templDx_.type() && templDy_.size() == templEdges_.size()", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageSize_", "levels_ > 0 && r_table_.size() == static_cast<size_t>(levels_ + 1)", "imageDx_.type() == CV_32FC1 && imageDx_.size() == imageEdges_.size()", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageEdges_.size()", "minAngle_ >= 0.0 && minAngle_ < maxAngle_ && maxAngle_ <= 360.0", "/builds/master_pack-android/opencv/modules/imgproc/src/geometry.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/grabcut.cpp", "mask element value must be equelGC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "/builds/master_pack-android/opencv/modules/imgproc/src/gcgraph.hpp", "MWOMOV OMSMUNUPSQ OQSQURUUSVOV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM STVW", "MXRMPNOPOSPURVSVUUVSVPUNSMRM QQTR TQQR", "MWQMNV QMTMVNVPSQPQ SQURUTTURVNV", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM QVPUPTQSRSSTTVUWVW", "MWQMNV QMUMVNVPUQSRPR QRRUSVTVUU", "MWUPUVTXRYPY USTQRPPQOSPURVTUUS", "KYMPMV MSNQOPPPQQRSRV RSSQTPUPVQWSWV", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "NWTMSNSOTP UPSPQQPSPUQVSWSXRYQY", "LXNQOPPPQQQSPV QSRQTPUPVQVSUVTY", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "LYPPMY UPTSSUQVPVOUOS TSTUUVVVWU", "NWTMSNSOTP UPSPQQQRRSTS SSQTPUPVQWSXSYRZQZ", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "LWTSSQQPOQNSOUQVSUTS UPTSTUUVVV", "LWTSSQQPOQNSOUQVSUTS VMTSTUUVVV", "MXUSTQRPPQOSPURVTUUS VPTVSXRYPYOX", "OUSMSNTNTMSM QPRPSQSRRVQXPYOYNX", "JYKPLPMQMSLV MSNQOPQPRQRSQV RSSQTPVPWQWRVTVUWVXV", "MWNPOPPQPSOV PSQQRPTPUQURTTTUUVVV", "MXNPOPPQPSNY PSQUSVUUVSUQSPQQPS", "MWNPOPPQPROTOUPVRVSUTS UPTSTUUVVV", "KYLPMPNQNRMTMUNVPVQURSSP RSRUSVUVVUWRWP", "MWOQPPQPRQRUSVTVUU VQUPTPSQQUPVOVNU", "MWNPOPPQPROTOUPVRVSUTS UPSVRXQYOYNX", "MWRMQNPPOSOVPWRWSVTTUQUNTMRM PRTR", "KYTPTSUTVTWSWQVOUNSMQMONNOMQMSNUOVQWSWUV TQSPQPPQPSQTSTTS", "LYPMQNQOPPOPNONNOMPMSNUNWMNV USTTTUUVVVWUWTVSUS", "MWQMONOPQQSQUPUNSMQM QQOROUQVSVUUURSQ", "NWPNRMSMUNUPRQRRSRSQUP RURVSVSURU", "MWRKRX UNSMQMONOPQQTRUSUUSVQVOU", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LXNNOQOSNV VNUQUSVV NNQOSOVN NVQUSUVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "H\\MPLQLRMSNSOROQNPMP MQMRNRNQMQ WPVQVRWSXSYRYQXPWP WQWRXRXQWQ", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IYJWLVNVPWTZV[X[ZZ[W IYJVLUNUPVTYVZXZZY[W", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IW[W I[[[", "KYQVOUNSNQOOQNSNUOVQVSUUSVQV SVVS QVVQ OUUO NSSN NQQN", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZQ[O\\N^Na TTUUVWUYTZ N`O_P_S`V`W_ P_SaVaW_W^", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYPFSCSP RDRP OPVP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOEOFNFNEODQCTCVDWFVHTIQJOKNMNP TCUDVFUHTI NOONPNSOVOWN PNSPVPWNWM MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYNCNG VERLPP WCTIQP NEPCRCUE NEPDRDUEVE MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR SVSa TTTa TTM]X] QaVa", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR SVSa TTTa TTM]X] QaVa", "F^YXWZU[R[PZMXKWIWHXHZI[K[MZOWPURQTKWGYFZF[G\\H[IZH[G[FZFYFWGVHTLRPPVNZMZ OPUP", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ NJNW OJOW LJSJVKWMWNVPSQOQ SJUKVMVNUPSQ LWQW SQTRUVVWWWXV SQURVVWW", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ UKVJVNUKSJPJNKMLLOLRMUNVPWSWUVVT PJNLMOMRNUPW", "CaaOdNfLgKfKdLaN^P\\SZWX", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX ^I^G]F\\FZGXIVLTNROPO ROSQSXTZU[V[XZYY[V", "I\\MRORSQVOXMYKYHXFVFUGTISNRSQVPXNZL[J[IZIXJWLWNXQZT[V[YZ[X", "@aEMCLBJBICGEFFFHGIIIKHPGTE[ GTJLLHMGOFPFRGSISKRPQTO[ QTTLVHWGYFZF\\G]I]K\\PZWZZ[[\\[^Z_YaaF_G\\JYNVTS[", "F^NLLLKKKILGNFPFRGSISLQUQXRZT[V[XZYXYVXUVU ]I]G\\FZFXGVITLPUNXLZJ[H[GZGX", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLXMZN[P[RZTXVUWSYM [FYMVWT]RbPfNgMfMdNaP^S[VY[V", "H]ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWTTWPZN[K[JZJXKWNWPXQYR[R^QaPcNfLgKfKdLaN^Q[TYZV", "I\\XMX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "H[LFL[ LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\XFX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I[LSXSXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\XMX]W`VaTbQbOa XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "CaGMG[ GQJNLMOMQNRQR[ RQUNWMZM\\N]Q][", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM", "H[LMLb LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I\\XMXb XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "J[XPWNTMQMNNMPNRPSUTWUXWXXWZT[Q[NZMX", "H]QMONMPLRKUKXLZN[P[RZUWWTYPZM QMSMTNUPWXXZY[Z[", "I\\UFSGQIOMNPMTLZKb UFWFYHYKXMWNUORO ROTPVRWTWWVYUZS[Q[OZNYMV", "I\\JPLNNMOMQNROSRSVR[ ZMYPXRR[P_Ob", "I[TMQMONMPLSLVMYNZP[R[TZVXWUWRVOTMRKQIQGRFTFVGXI", "JZWOVNTMQMONOPPRSS SSOTMVMXNZP[S[UZWX", "JYTFRGQHQIRJUKXK XKTMQONRMUMWNYP[S]T_TaSbQbP`", "H\\IQJOLMNMONOPNTL[ NTPPRNTMVMXOXRWWTb", "G\\HQIOKMMMNNNPMUMXNZO[Q[SZUWVUWRXMXJWGUFSFRHRJSMUPWRZT", "I[OMK[ YNXMWMUNQROSNS NSPTQUSZT[U[VZ", "H]OMIb NQMVMYO[Q[SZUXWT YMWTVXVZW[Y[[Y\\W", "JZTFRGQHQIRJUKXK UKRLPMOOOQQSTTVT TTPUNVMXMZO\\S^T_TaRbPb", "J[RMPNNPMSMVNYOZQ[S[UZWXXUXRWOVNTMRM", "I[MSMVNYOZQ[S[UZWXXUXRWOVNTMRMPNNPMSIb", "I][MQMONMPLSLVMYNZP[R[TZVXWUWRVOUNSM", "H\\IQJOLMNMONOPMVMYO[Q[TZVXXTYPYM", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb", "F]VFNb GQHOJMLMMNMPLULXMZO[Q[TZVXXUZP[M", "F]NMLNJQITIWJZK[M[OZQW RSQWRZS[U[WZYWZTZQYNXM", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXVRUWUZV[W[YZZY\\V", "M[MVOSRNSLTITGSFQGPIOMNTNZO[P[RZTXUUURVVWWYW[V", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXZF VRUWUZV[W[YZZY\\V", "NXOYQXRWSUSSRRQROSNUNXOZQ[S[UZVYXV", "OWOVSQUNVLWIWGVFTGSIQQNZKaJdJfKgMfNcOZP[R[TZUYWV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZTY VRTYPdOfMgLfLdMaP^S\\U[XY[V", "M\\MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "PWSMSNTNTMSM PVRRPXPZQ[R[TZUYWV", "PWSMSNTNTMSM PVRRLdKfIgHfHdIaL^O\\Q[TYWV", "M[MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUTVQV QVSWTZU[V[XZYY[V", "OWOVQSTNULVIVGUFSGRIQMPTPZQ[R[TZUYWV", "E^EVGSIRJSJTIXH[ IXJVLSNRPRQSQTPXO[ PXQVSSURWRXSXUWXWZX[Y[[Z\\Y^V", "J\\JVLSNROSOTNXM[ NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "LZRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXWXYWZV", "KZKVMSNQMUGg MUNSPRRRTSUUUWTYSZQ[ MZO[R[UZWYZV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZ VRUUSZPaOdOfPgRfScS\\U[XY[V", "MZMVOSPQPSSSTTTVSYSZT[U[WZXYZV", "NYNVPSQQQSSVTXTZR[ NZP[T[VZWYYV", "OXOVQSSO VFPXPZQ[S[UZVYXV PNWN", "L[LVNRLXLZM[O[QZSXUU VRTXTZU[V[XZYY[V", "L[LVNRMWMZN[O[RZTXUUUR URVVWWYW[V", "I^LRJTIWIYJ[L[NZPX RRPXPZQ[S[UZWXXUXR XRYVZW\\W^V", "JZJVLSNRPRQSQZR[U[XYZV WSVRTRSSOZN[L[KZ", "L[LVNRLXLZM[O[QZSXUU VRPdOfMgLfLdMaP^S\\U[XY[V", "LZLVNSPRRRTTTVSXQZN[P\\Q^QaPdOfMgLfLdMaP^S\\WYZV", "J\\K[NZQXSVUSWOXKXIWGUFSGRHQJPOPTQXRZT[V[XZYY", "I[WUWRVOUNSMQMONMPLSLVMYNZP[R[TZVXWUXPXKWHVGTFRFPGNI", "JZWNUMRMPNNPMSMVNYOZQ[T[VZ MTUT", "J[TFRGPJOLNOMTMXNZO[Q[SZUWVUWRXMXIWGVFTF NPWP", "H\\VFNb QMNNLPKSKVLXNZQ[S[VZXXYUYRXPVNSMQM", "I[XOWNTMQMNNMOLQLSMUOWSZT\\T^S_Q_", "DaWNVLTKQKOLNMMOMRNTOUQVTVVUWS WKWSXUYV[V\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYY", "KYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb", "KYPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb`OacPALBJCGEEGCJBLAPATBXCZE]G_JaLbPcTcXbZa]__]aZbXcTcPbLaJ_G]EZCXBTAPA", "<hP<K=G?DAAD?G=K<P<T=Y?]A`DcGeKgPhThYg]e`cc`e]gYhThPgKeGcD`A]?Y=T<P<", "){O)I*E+@-;073370;-@+E*I)O)U*[+_-d0i3m7q;t@wEyIzO{U{[z_ydwitmqqmtiwdy_z[{U{OzIyEw@t;q7m3i0d-_+[*U)O)", ">fRAPCMDJDGCEA>H@JAMAZB]D_G`M`PaRc RATCWDZD]C_AfHdJcMcZb]`_]`W`TaRc", "AcRAPCMDJDGCEABGAKAPBTDXG\\L`Rc RATCWDZD]C_AbGcKcPbT`X]\\X`Rc BHbH", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[ LbXF", "KYRKMX RNVX RKWX OTTT KXPX TXYX", "JZNKNX OKOX LKSKVLWNVPSQ SKULVNUPSQ OQSQVRWTWUVWSXLX SQURVTVUUWSX", "KYVLWKWOVLTKQKOLNMMPMSNVOWQXTXVWWU QKOMNPNSOVQX", "JZNKNX OKOX LKSKVLWMXPXSWVVWSXLX SKULVMWPWSVVUWSX", "JYNKNX OKOX SOSS LKVKVOUK OQSQ LXVXVTUX", "JXNKNX OKOX SOSS LKVKVOUK OQSQ LXQX", "K[VLWKWOVLTKQKOLNMMPMSNVOWQXTXVW QKOMNPNSOVQX TXUWVU VSVX WSWX TSYS", "J[NKNX OKOX VKVX WKWX LKQK TKYK OQVQ LXQX TXYX", "LXSKSURWQX TKTUSWQXPXNWMUNTOUNV QKVK", "JZNKNX OKOX WKOS QQVX RQWX LKQK TKYK LXQX TXYX", "I\\MKMX NNRX NKRU WKRX WKWX XKXX KKNK WKZK KXOX UXZX", "JZNKNX OMVX OKVV VKVX LKOK TKXK LXPX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK PWPUQTSTTUUZV[W[XZ TUUXVZW[", "JZNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX SRTSUWVXWXXW SRUSVWWX", "KZVMWKWOVMULSKQKOLNMNOOPQQTRVSWT NNOOQPTQVRWSWVVWTXRXPWOVNTNXOV", "J[NKNUOWQXTXVWWUWK OKOUPWQX LKQK UKYK", "I[LKOX MKOT RKOX RKUX SKUT XKUX JKOK VKZK", "KZNKVX OKWX WKNX LKQK TKYK LXQX TXYX", "LYNKRRRX OKSR WKSRSX LKQK TKYK PXUX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK QOQT TOTT QQTQ QRTR", "JZMJLM XJWM PPOS UPTS MVLY XVWY MKWK MLWL PQTQ PRTR MWWW MXWX", "J[NKNX OKOX VKVX WKWX LKYK LXQX TXYX", "K[MKRQ NKSQMX MKWKXOVK NWWW MXWXXTVX", "KZMONLOKPKQLRORX XOWLVKUKTLSOSX MONMOLPLQMRO XOWMVLULTMSO PXUX", "KZRKRX SKSX QNNOMQMRNTQUTUWTXRXQWOTNQN QNOONQNROTQU TUVTWRWQVOTN PKUK PXUX", "J[RKRX SKSX LPMONOOSQU TUVSWOXOYP MONROTQUTUVTWRXO PKUK PXUX", "KZMVNXQXMRMONMOLQKTKVLWMXOXRTXWXXV OUNRNOOMQK TKVMWOWRVU NWPW UWWW", "KYTKKX SMTX TKUX NTTT IXNX RXWX", "JYPKLX QKMX NKUKWLWNVPSQ UKVLVNUPSQ OQRQTRUSUUTWQXJX RQTSTUSWQX", "KXVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUU RKPMOONRNVPX", "JYPKLX QKMX NKTKVLWNWQVTUVTWQXJX TKULVNVQUTTVSWQX", "JYPKLX QKMX SORS NKXKWNWK OQRQ JXTXUUSX", "JXPKLX QKMX SORS NKXKWNWK OQRQ JXOX", "KYVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUVVS RKPMOONRNVPX RXTVUS SSXS", "J[PKLX QKMX XKTX YKUX NKSK VK[K OQVQ JXOX RXWX", "LXUKRUQWPX VKSURWPXOXMWLUMTNUMV SKXK", "JZPKLX QKMX YKOR RPTX SPUX NKSK VK[K JXOX RXWX", "I\\OKKX OMPX PKQV YKPX YKUX ZKVX MKPK YK\\K IXMX SXXX", "JZPKLX PKTX QKTU XKTX NKQK VKZK JXNX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK", "JYPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR JXOX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK OWOVPUQURVRZS[T[UZ RVSZT[", "JZPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR SRTWUXVXWW SRTSUWVX JXOX", "KZWLXLYKXNWLUKRKPLOMOOPPUSVT ONPOURVSVVUWSXPXNWMULXMWNW", "J[PKMUMWOXSXUWVUYK QKNUNWOX NKSK WK[K", "I[NKMX OKNV TKMX TKSX UKTV ZKSX LKQK XK\\K", "KZPKTX QKUX YKLX NKSK VK[K JXOX RXWX", "LYPKRQPX QKSQ YKSQQX NKSK VK[K NXSX", "LZQOPPPQOQOPQOTOVQVWWXXX TOUQUWWX URRSPTOUOWPXSXTWUU RSPUPWQX", "JYNKNX OKOX ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LKOK", "LXVQUQURVRVQUPSOQOOPNRNUOWQXSXUWVV QOPPOROUPWQX", "L[VKVX WKWX VRUPSOQOOPNRNUOWQXSXUWVU QOPPOROUPWQX TKWK VXYX", "LXOSVSVRUPSOQOOPNRNUOWQXSXUWVV USUQSO QOPPOROUPWQX", "LWTKULUMVMVLTKRKPMPX RKQMQX NOSO NXSX", "LYQOOQOSQUSUUSUQSOQO QOPQPSQU SUTSTQSO TPUOVO PTOUOXPYTYVZ OWPXTXVYV[T\\P\\N[NYPX", "J[NKNX OKOX ORPPROTOVPWRWX TOUPVRVX LKOK LXQX TXYX", "NWRKRLSLSKRK RORX SOSX POSO PXUX", "NWSKSLTLTKSK SOSZR\\ TOTZR\\P\\O[OZPZP[O[ QOTO", "JZNKNX OKOX WOOU RSVX SSWX LKOK TOYO LXQX TXYX", "F_JOJX KOKX KRLPNOPORPSRSX POQPRRRX SRTPVOXOZP[R[X XOYPZRZX HOKO HXMX PXUX XX]X", "J[NONX OOOX ORPPROTOVPWRWX TOUPVRVX LOOO LXQX TXYX", "LYQOOPNRNUOWQXTXVWWUWRVPTOQO QOPPOROUPWQX TXUWVUVRUPTO", "JYNON\\ OOO\\ ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LOOO L\\Q\\", "KYUOU\\ VOV\\ URTPROPONPMRMUNWPXRXTWUU POOPNRNUOWPX S\\X\\", "KXOOOX POPX PRQPSOUOVPVQUQUPVP MOPO MXRX", "LYTOUPUQVQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWOVPVPWQX", "J[NONUOWQXSXUWVU OOOUPWQX VOVX WOWX LOOO TOWO VXYX", "I[LOOX MOOU ROOX ROUX SOUU XOUX JOOO VOZO", "KYNOUX OOVX VONX LOQO TOXO LXPX SXXX", "KYNORX OORV VORXP[N\\M\\L[LZMZM[L[ LOQO TOXO", "K[QOOPNQMSMUNWPXQXSWUUWRXO QOOQNSNUOWPX QOSOUPWWXX SOTPVWXXYX", "KXRKPMOOMUK\\ QLPNNTL\\ RKTKVLVNUPRQ TKULUNTPRQ RQTRUTUVTWRXQXOWNT RQSRTTTVRX", "KYLQNOPORPSSSXR\\ LQNPPPRQSS WOVRSXQ\\", "KYSOQOOPNQMSMUNWPXRXTWUVVTVRUPRNQLQKRJTJUKVM QOOQNSNVPX RXTVUTUQSO QLRKTKVM", "LXVPTOQOOPOQPRRS QOPPPQRS RSOTNUNWPXSXUW RSPTOUOWPX", "LWRKQLQMSNVNVMSNPOOPNRNTOVPWRXSYS[R\\P\\O[ SNQOPPOROTPVRX", "IYJRKPLONOOPOQMX MONPNQLX OQPPROTOVPVRS\\ TOUPURR\\", "IYJSKQLPNPOQOVPX MPNQNUOWPXQXSWTVUTVQVNULTKRKQLQNRPURWS QXSVTTUQUNTK", "KYOOLX POMX UOVPWPVOTORQOR ORPSRWTXVWWU ORQSSWTX", "KZOOK\\ POL\\ NUNWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "JYNOMX OONUMX VRVOWOVRTUQWNXMX LOOO", "MXRKQLQMSNVN TNQOPPPRRSUS TNROQPQRRS SSPTOUOWQXSYTZT[S\\Q\\ SSQTPUPWQX", "KXQOOPNQMSMUNWPXRXTWUVVTVRUPSOQO QOOQNSNVPX RXTVUTUQSO", "IZPPMX PPNX TPSX TPTX KQMOXO KQMPXP", "JXSOQOOPNQMSJ\\ QOOQNSK\\ SOUPVRVTUVTWRXPXNWMU SOUQUTTVRX", "K[YOQOOPNQMSMUNWPXRXTWUVVTVRUPYP QOOQNSNVPX RXTVUTUQSO", "JXKRLPMOOOPPPROUOWPX NOOPORNUNWPXQXSWUUVRVOUOVP", "KZOPNQMSMUNWPXRXUWWUXRXPWOUOTPSRRUO\\ MUNVPWRWUVWTXR XQWPUPSR RUQXP\\", "KXMONOPPS[T\\ NOOPR[T\\U\\ VOTRNYL\\", "I[TKQ\\ UKP\\ JRKPLONOOPOVPWSWUVWT MONPNTOWPXSXUWWTXRYO", "JZNPPPPONPMQLSLUMWNXPXQWRUSR LUNWPWRU RRRWSXUXWVXTXRWPVOVPWP RUSWUWWV", "KZVOTVTWUXWXXWYU WOUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "JXOKMR PKNRNVPX NROPQOSOUPVRVTUVTWRXPXNWMUMR SOUQUTTVRX MKPK", "KXUPUQVQUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "KZWKTVTWUXWXXWYU XKUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX UKXK", "KWNURTTSURUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "MXWKXLXKVKTLSNPYO[N\\ VKULTNQYP[N\\L\\L[M\\ POVO", "KYVOTVSYR[ WOUVTYR[P\\M\\L[M[N\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "KZPKLX QKMX OQPPROTOVPVRUUUWVX TOUPURTUTWUXWXXWYU NKQK", "MWSKSLTLTKSK NROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "MWTKTLULUKTK ORPPQOSOTPTRRYQ[O\\M\\M[N\\ ROSPSRQYP[O\\", "KXPKLX QKMX VPUQVQVPUOTORQPROR ORPSQWRXTXUWVU ORQSRWSX NKQK", "NVSKPVPWQXSXTWUU TKQVQWRX QKTK", "F^GRHPIOKOLPLQJX JOKPKQIX LQMPOOQOSPSQQX QORPRQPX SQTPVOXOZPZRYUYWZX XOYPYRXUXWYX[X\\W]U", "J[KRLPMOOOPPPQNX NOOPOQMX PQQPSOUOWPWRVUVWWX UOVPVRUUUWVXXXYWZU", "JYKRLPMOOOPPPQM\\ NOOPOQL\\ PQROTOVPWRWTVVUWSXQXOVOT TOVQVTUVSX J\\O\\", "KYVOR\\ WOS\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX P\\U\\", "LXMRNPOOQORPRQPX POQPQQOX RQSPUOVOWPWQVQWP", "LYVPVQWQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWNVOVOW", "NWSKPVPWQXSXTWUU TKQVQWRX POUO", "IZJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "H\\IRJPKOMONPNRMUMWNX LOMPMRLULWNXOXQWRV TORVRWTX UOSVSWTXUXWWYUZRZOYOZP", "JZMRNPPOROSPSR QORPRRQUPWNXMXLWLVMVLW XPWQXQXPWOVOTPSRRURWSX QUQWRXTXVWWU", "IYJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVSYR[ WOUVTYR[P\\M\\L[M[N\\", "KYWOWPVQNVMWMX NQOOROUQ OPRPUQVQ NVOVRWUW OVRXUXVV", "H[RKSLSMTMTLRKOKMLLNLX OKNLMNMX XKYLYMZMZLXKVKTMTX VKUMUX JOWO JXOX RXWX", "J[UKVLWLWKQKOLNNNX QKPLONOX VOVX WOWX LOWO LXQX TXYX", "J[WKQKOLNNNX QKPLONOX UKVLVX WKWX LOVO LXQX TXYX", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX YKZL[L[KUKSLRNRX UKTLSNSX ZOZX [O[X HO[O HXMX PXUX XX]X", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX [KUKSLRNRX UKTLSNSX YKZLZX [K[X HOZO HXMX PXUX XX]X", "LXVPTOROPPOQNSNUOWQXSXUW ROPQOSOVQX OSSS", "LYSKQLPMOONRNUOWPXRXTWUVVTWQWNVLUKSK SKQMPOOSOVPX RXTVUTVPVMUK OQVQ", "KZTKQ\\ UKP\\ QONPMRMUNWQXTXWWXUXRWPTOQO QOOPNRNUOWQX TXVWWUWRVPTO", "LXUPVRVQUPSOQOOPNRNTOVRX QOOQOTPVRXSYS[R\\P\\", "I[VKWLXLVKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ ZK[L[KYKWLVNSYR[Q\\ YKXLWNTYS[Q\\O\\O[P\\ LOYO", "IZVKWLXLXKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ VOTVTWUXWXXWYU WOUVUWVX LOWO", "IZVKWL XKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ WKTVTWUXWXXWYU XKUVUWVX LOVO", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L\\L\\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ ZOXVXWYX[X\\W]U [OYVYWZX IO[O", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L \\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ [KXVXWYX[X\\W]U \\KYVYWZX IOZO", "MWNROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "LYQKOLNONTOWQXTXVWWTWOVLTKQK QKPLOOOTPWQX TXUWVTVOULTK", "LYOMONNNNMOLQKTKVLWNVPTQQROSNUNX TKULVNUPTQ NWOVPVSWVWWV PVSXVXWVWU", "LYOMONNNNMOLQKTKVLWNVPTQ TKULVNUPTQ RQTQVRWTWUVWTXQXOWNVNUOUOV TQURVTVUUWTX", "LYOKNQ OKVK OLSLVK NQOPQOTOVPWRWUVWTXQXOWNVNUOUOV TOUPVRVUUWTX", "LYVMVNWNWMVLTKRKPLOMNPNUOWQXTXVWWUWSVQTPQPNR RKPMOPOUPWQX TXUWVUVSUQTP", "LYNKNO VMRTPX WKTQQX NMPKRKUM NMPLRLUMVM", "LYQKOLNNOPQQTQVPWNVLTKQK QKPLONPPQQ TQUPVNULTK QQORNTNUOWQXTXVWWUWTVRTQ QQPROTOUPWQX TXUWVUVTURTQ", "LYOVOUNUNVOWQXSXUWVVWSWNVLTKQKOLNNNPORQSTSWQ SXUVVSVNULTK QKPLONOPPRQS", "LYNNONOONONNOLQKTKVLWNWOVQSRRSRTST TKVMVPUQSR RWRXSXSWRW", "MWUHSJQMPPPTQWSZU\\ SJRLQPQTRXSZ", "MWOHQJSMTPTTSWQZO\\ QJRLSPSTRXQZ", "LWSHRIQKQMRORPPRRTRUQWQYR[S\\ RIQM QKRO RUQY QWR[", "MXQHRISKSMRORPTRRTRUSWSYR[Q\\ RISM SKRO RUSY SWR[", "H[YUWUUTTSRPQOONNNLOKQKRLTNUOUQTRSTPUOWNYN", "JZLTLRMPOPUSWSXR LRMQOQUTWTXRXP", "KYVSUPSOQOOPNQMSMUNWPXRXTWUVVTWQWNVLTKQKPLQLRK QOOQNSNVPX RXTVUTVQVNULTK", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[ QNOONQNSOUQVSVUUVSVQUOSNQN", "H\\ZRYTWUVUTTSSQPPONNMNKOJQJRKTMUNUPTQSSPTOVNWNYOZQZR", "JZXKLX OKPLPNOOMOLNLLMKOKSLVLXK UTTUTWUXWXXWXUWTUT", "J[YPXPXQYQYPXOWOVPUTTVSWQXOXMWLVLTMSORRPSNSLRKPKOLONPQUWWXXXYW OXMVMTOR ONPPVWWX", "J[UPSOQOPQPRQTSTUS UOUSVTXTYRYQXNVLSKRKOLMNLQLRMUOWRXSXVW", "KZQHQ\\ THT\\ WLVLVMWMWLUKPKNLNNOPVSWT NNOOVRWTWVVWTXQXOWNVNUOUOVNV", "LXTLSLSMTMTLSKQKPLPNQPTRUS PNQOTQUSUUSW QPOROTPVSXTY OTPUSWTYT[S\\Q\\P[PZQZQ[P[", "LXRKQLRMSLRK RMRQ RQQSRVSSRQ RVR\\ POONNOOPPOTOUNVOUPTO", "LXRMSLRKQLRMRQQRSURV RQSRQURVRZQ[R\\S[RZ POONNOOPPOTOUNVOUPTO PXOWNXOYPXTXUWVXUYTX", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RQQRRSSRRQ", "LYQKPLPMQN TKULUMTN RNPOOQORPTRUSUUTVRVQUOSNRN RURY SUSY OWVW", "LYRKPLONOOPQRRSRUQVOVNULSKRK RRRX SRSX OUVU", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RKRY KRYR", "JYRRPQOQMRLTLUMWOXPXRWSUSTRR WMRR RMWMWR RMVNWR", "JZLLMKOKQLRNRPQRPSNT OKPLQNQQPS VKUX WKTX NTXT", "JYNKNU OKNR NROPQOSOUPVQVTTVTXUYVYWX SOUQUTTV LKOK", "LYONRKRQ VNSKSQ RQPROTOUPWRXSXUWVUVTURSQ RTRUSUSTRT", "JZRKRY MKMPNRPSTSVRWPWK LMMKNM QMRKSM VMWKXM OVUV", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXVXVUUX", "LYWKTKQLONNQNSOVQXTYWY WKTLRNQQQSRVTXWY", "JZRRPQOQMRLTLUMWOXPXRWSUSTRR SLQQ WMRR XQSS", "J[OUMULVLXMYOYPXPVNTMRMONMOLQKTKVLWMXOXRWTUVUXVYXYYXYVXUVU NMPLULWM", "J[OOMOLNLLMKOKPLPNNPMRMUNWOXQYTYVXWWXUXRWPUNULVKXKYLYNXOVO NWPXUXWW", "F^KHK\\ LHL\\ XHX\\ YHY\\ HH\\H H\\O\\ U\\\\\\", "H]KHRQJ\\ JHQQ JHYHZMXH K[X[ J\\Y\\ZWX\\", "KYVBTDRGPKOPOTPYR]T`Vb TDRHQKPPPTQYR\\T`", "KYNBPDRGTKUPUTTYR]P`Nb PDRHSKTPTTSYR\\P`", "JYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb RDQGQKRN RVQYQ]R`", "KZPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb RDSGSKRN RVSYS]R`", "KYU@RCPFOIOLPOSVTYT\\S_Ra RCQEPHPKQNTUUXU[T^RaOd", "KYO@RCTFUIULTOQVPYP\\Q_Ra RCSETHTKSNPUOXO[P^RaUd", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia`Y``NFH[ NFO[ OFPY \\FO[ \\FV[ ]FW[ KFOF \\F`F E[K[ S[Z[", "F_OFI[ OFVX OIV[ \\FV[ LFOF YF_F F[L[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF", "F]OFI[ PFJ[ LFXF[G\\I\\K[NYPUQMQ XFZG[I[KZNXPUQ F[M[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF LYLXMVOUPURVSXS_T`V`W^W] SXT^U_V_W^", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVPMP WFYGZIZKYNXOVP RPTQURVZW[Y[ZYZX URWYXZYZZY F[M[", "G^ZH[H\\F[L[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "F_NFKQJUJXKZN[R[UZWXXU\\F OFLQKUKXLZN[ KFRF YF_F", "E_MFK[ NFLY UFK[ UFS[ VFTY ]FS[ JFQF ZF`F", "G]NFU[ OFV[ \\FH[ LFRF XF^F F[L[ R[X[", "H]NFRPO[ OFSPP[ ]FSP LFRF YF_F L[S[", "H\\KILKXWYYY[ LLXX KIKKLMXYY[ PPLTKVKXLZK[ KVMZ LTLVMXMZK[ SSXN VIVLWNYNYLWKVI VIWLYN", "H\\QIK[ SIY[ RIX[ MUVU I[O[ U[[[ QBOCNENGOIQJSJUIVGVEUCSBQB", "I]NONPMPMONNPMTMVNWOXQXXYZZ[ WOWXXZZ[[[ WQVRPSMTLVLXMZP[S[UZWX PSNTMVMXNZP[", "G\\LFL[ MFM[ MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IFMF", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[", "H]WFW[ XFX[ WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ TFXF W[[[", "H[LSXSXQWOVNTMQMNNLPKSKULXNZQ[S[VZXX WSWPVN QMONMPLSLUMXOZQ[", "KXUGTHUIVHVGUFSFQGPIP[ SFRGQIQ[ MMUM M[T[", "I\\QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM ONNPNTOV UVVTVPUN VOWNYMYNWN NUMVLXLYM[P\\U\\X]Y^ LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[", "G]LFL[ MFM[ MPONRMTMWNXPX[ TMVNWPW[ IFMF I[P[ T[[[", "MXRFQGRHSGRF RMR[ SMS[ OMSM O[V[", "MXSFRGSHTGSF TMT_SaQbObNaN`O_P`Oa SMS_RaQb PMTM", "G\\LFL[ MFM[ WMMW RSX[ QSW[ IFMF TMZM I[P[ T[Z[", "BcGMG[ HMH[ HPJNMMOMRNSPS[ OMQNRPR[ SPUNXMZM]N^P^[ ZM\\N]P][ DMHM D[K[ O[V[ Z[a[", "G]LML[ MMM[ MPONRMTMWNXPX[ TMVNWPW[ IMMM I[P[ T[[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "G\\LMLb MMMb MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IMMM IbPb", "H\\WMWb XMXb WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ Tb[b", "IZNMN[ OMO[ OSPPRNTMWMXNXOWPVOWN KMOM K[R[", "J[WOXMXQWOVNTMPMNNMOMQNRPSUUWVXW MPNQPRUTWUXVXYWZU[Q[OZNYMWM[NY", "KZPFPWQZS[U[WZXX QFQWRZS[ MMUM", "G]LMLXMZP[R[UZWX MMMXNZP[ WMW[ XMX[ IMMM TMXM W[[[", "F^JMN[ KMNX RMN[ RMV[ SMVX ZMV[ GMNM WM]M", "H\\LMW[ MMX[ XML[ JMPM TMZM J[P[ T[Z[", "H[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "G^QMNNLPKRJUJXKZN[P[RZUWWTYPZM QMONMPLRKUKXLZN[ QMSMUNVPXXYZZ[ SMTNUPWXXZZ[[[", "G\\TFQGOIMMLPKTJZIb TFRGPINMMPLTKZJb TFVFXGYHYKXMWNTOPO VFXHXKWMVNTO POTPVRWTWWVYUZR[P[NZMYLV POSPURVTVWUYTZR[", "H\\IPKNMMOMQNROSRSVRZOb JOLNPNRO ZMYPXRSYP^Nb YMXPWRSY", "I\\VNTMRMONMQLTLWMYNZP[R[UZWWXTXQWOSJRHRFSEUEWFYH RMPNNQMTMXNZ R[TZVWWTWPVNTKSISGTFVFYH", "I[XPVNTMPMNNNPPRSS PMONOPQRSS SSNTLVLXMZP[S[UZWX SSOTMVMXNZP[", "I[TFRGQHQIRJUKZKZJWKSMPOMRLULWMYP[S]T_TaSbQbPa ULQONRMUMWNYP[", "G]HQIOKMNMONOPNTL[ MMNNNPMTK[ NTPPRNTMVMXNYOYRXWUb VMXOXRWWTb", "F]GQHOJMMMNNNPMUMXNZO[ LMMNMPLULXMZO[Q[SZUXWUXRYMYIXGVFTFRHRJSMUPWRZT SZUWVUWRXMXIWGVF", "H\\NMJ[ OMK[ XMYNZNYMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW", "H\\KFMFOGPHQJWXXZY[ MFOHPJVXWZY[Z[ RMJ[ RMK[", "F]MMGb NMHb MPLVLYN[P[RZTXVU XMUXUZV[Y[[Y\\W YMVXVZW[", "H\\NML[ OMNSMXL[ YMXQVU ZMYPXRVUTWQYOZL[ KMOM", "IZTFRGQHQIRJUKXK UKQLOMNONQPSSTVT UKRLPMOOOQQSST STOUMVLXLZN\\S^T_TaRbPb STPUNVMXMZO\\S^", "I[RMONMQLTLWMYNZP[R[UZWWXTXQWOVNTMRM RMPNNQMTMXNZ R[TZVWWTWPVN", "G]PNL[ PNM[ VNV[ VNW[ IPKNNM[M IPKONN[N", "H[LVMYNZP[R[UZWWXTXQWOVNTMRMONMQLTHb R[TZVWWTWPVN RMPNNQMTIb", "H][MQMNNLQKTKWLYMZO[Q[TZVWWTWQVOUNSM QMONMQLTLXMZ Q[SZUWVTVPUN UN[N", "H\\IQJOLMOMPNPPNVNYP[ NMONOPMVMYNZP[Q[TZVXXUYRYOXMWNXOYR XUYO", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb JWLYNZQZTYWWYU ZOXNVNTPRSPYNb", "I[KMMMONPPU_VaWb MMNNOPT_UaWbYb ZMYOWRM]K`Jb", "F]UFOb VFNba XFVHUJTNRWQ[P^O`NaLbJbIaI`J_K`Ja OMYM", "H\\YMU[T^RaObLbJaI`I_J^K_J` XMT[S^QaOb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "H]PFJ[ QFK[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W MFQF", "LYUFTGUHVGUF MQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "LYVFUGVHWGVF NQOOQMTMUNUQR[Q^P`OaMbKbJaJ`K_L`Ka SMTNTQQ[P^O`Mb", "H\\PFJ[ QFK[ XNWOXPYOYNXMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW MFQF", "MYUFQTPXPZQ[T[VYWW VFRTQXQZR[ RFVF", "AbBQCOEMHMINIPHTF[ GMHNHPGTE[ HTJPLNNMPMRNSOSQP[ PMRORQO[ RTTPVNXMZM\\N]O]Q[W[Z\\[ ZM\\O\\QZWZZ[[^[`YaW", "F]GQHOJMMMNNNPMTK[ LMMNMPLTJ[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W", "G\\HQIOKMNMONOPNTJb MMNNNPMTIb NTOQQNSMUMWNXOYQYTXWVZS[Q[OZNWNT WNXPXTWWUZS[ FbMb", "H\\XMRb YMSb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ ObVb", "IZJQKOMMPMQNQPPTN[ OMPNPPOTM[ PTRPTNVMXMYNYOXPWOXN", "J[XOXPYPYOXNUMRMONNONQORVVWW NPOQVUWVWYVZS[P[MZLYLXMXMY", "KYTFPTOXOZP[S[UYVW UFQTPXPZQ[ NMWM", "F]GQHOJMMMNNNQLWLYN[ LMMNMQKWKYLZN[P[RZTXVT XMVTUXUZV[Y[[Y\\W YMWTVXVZW[", "H\\IQJOLMOMPNPQNWNYP[ NMONOQMWMYNZP[Q[TZVXXUYQYMXMYO", "C`DQEOGMJMKNKQIWIYK[ IMJNJQHWHYIZK[M[OZQXRV TMRVRYSZU[W[YZ[X\\V]R]M\\M]O UMSVSYU[", "H\\KQMNOMRMSOSR QMRORRQVPXNZL[K[JZJYKXLYKZ QVQYR[U[WZYW YNXOYPZOZNYMXMVNTPSRRVRYS[", "G\\HQIOKMNMONOQMWMYO[ MMNNNQLWLYMZO[Q[SZUXWT ZMV[U^SaPbMbKaJ`J_K^L_K` YMU[T^RaPb", "H\\YMXOVQNWLYK[ LQMOOMRMVO MOONRNVOXO LYNYRZUZWY NYR[U[WYXW", "G^VGUHVIWHWGUFRFOGMILLL[ RFPGNIMLM[ \\G[H\\I]H]G\\FZFXGWIW[ ZFYGXIX[ IM[M I[P[ T[[[", "G]WGVHWIXHWGUFRFOGMILLL[ RFPGNIMLM[ WMW[ XMX[ IMXM I[P[ T[[[", "G]VGUHVIWHWGUF XFRFOGMILLL[ RFPGNIMLM[ WHW[ XFX[ IMWM I[P[ T[[[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ ]G\\H]I^H]G[FXFUGSIRLR[ XFVGTISLS[ ]M][ ^M^[ DM^M D[K[ O[V[ Z[a[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ \\G[H\\I]H]G[F ^FXFUGSIRLR[ XFVGTISLS[ ]H][ ^F^[ DM]M D[K[ O[V[ Z[a[", "IZWNUMRMONMPLSLVMYNZQ[T[VZ RMPNNPMSMVNYOZQ[ MTUT", "I\\TFQGOJNLMOLTLXMZO[Q[TZVWWUXRYMYIXGVFTF TFRGPJOLNOMTMXNZO[ Q[SZUWVUWRXMXIWGVF NPWP", "G]UFOb VFNb QMMNKPJSJVKXMZP[S[WZYXZUZRYPWNTMQM QMNNLPKSKVLXNZP[ S[VZXXYUYRXPVNTM", "I[TMVNXPXOWNTMQMNNMOLQLSMUOWSZ QMONNOMQMSNUSZT\\T^S_Q_", "G]LMKNJPJRKUOYP[ JRKTOXP[P]O`MbLbKaJ_J\\KXMTOQRNTMVMYNZPZTYXWZU[T[SZSXTWUXTY VMXNYPYTXXWZ", "E_YGXHYIZHYGWFTFQGOINKMNLRJ[I_Ha TFRGPIOKNNLWK[J^I`HaFbDbCaC`D_E`Da _G^H_I`H`G_F]F[GZHYJXMU[T_Sa ]F[HZJYNWWV[U^T`SaQbObNaN`O_P`Oa IM^M", "F^[GZH[I\\H[GXFUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea YMWTVXVZW[Z[\\Y]W ZMXTWXWZX[ JMZM", "F^YGXHYIZHZGXF \\FUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea [FWTVXVZW[Z[\\Y]W \\FXTWXWZX[ JMYM", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a `G_H`IaH`G]FZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja ^M\\T[X[Z\\[_[aYbW _M]T\\X\\Z][ DM_M", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a ^G]H^I_H_G]F aFZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja `F\\T[X[Z\\[_[aYbW a` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "F_\\S[UYVWVUUTTQPPONNLNJOIQISJULVNVPUQTTPUOWNYN[O\\Q\\S", "F^[FI[ NFPHPJOLMMKMIKIIJGLFNFPGSHVHYG[F WTUUTWTYV[X[ZZ[X[VYTWT", "F_[NZO[P\\O\\N[MZMYNXPVUTXRZP[M[JZIXIUJSPORMSKSIRGPFNGMIMKNNPQUXWZZ[[[\\Z\\Y M[KZJXJUKSMQ MKNMVXXZZ[", "E`WNVLTKQKOLNMMPMSNUPVSVUUVS QKOMNPNSOUPV WKVSVUXVZV\\T]Q]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYZX XKWSWUXV", "H\\PBP_ TBT_ XIWJXKYJYIWGTFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[P[MZKXKWLVMWLX", "JZUITJUKVJVIUGSFQFOGNINKOMQOVR OMTPVRWTWVVXTZ PNNPMRMTNVPXU[ NVSYU[V]V_UaSbQbOaN_N^O]P^O_", "JZRFQHRJSHRF RFRb RQQTRbSTRQ LMNNPMNLLM LMXM TMVNXMVLTM", "JZRFQHRJSHRF RFRT RPQRSVRXQVSRRP RTRb R^Q`RbS`R^ LMNNPMNLLM LMXM TMVNXMVLTM L[N\\P[NZL[ L[X[ T[V\\X[VZT[", "E`QFNGKIILHOHRIUKXNZQ[T[WZZX\\U]R]O\\LZIWGTFQF ROQPQQRRSRTQTPSORO RPRQSQSPRP", "J[PFNGOIQJ PFOGOI UFWGVITJ UFVGVI QJOKNLMNMQNSOTQUTUVTWSXQXNWLVKTJQJ RUR[ SUS[ NXWX", "I\\RFOGMILLLMMPORRSSSVRXPYMYLXIVGSFRF RSR[ SSS[ NWWW", "D`PFMGJIHLGOGSHVJYM[P\\T\\W[ZY\\V]S]O\\LZIWGTFPF RFR\\ GQ]Q", "G`fHfIeIdHcGcFdFfGhIiKiNhPfQdR`RUQ;Q4R/S-U,V,X-Y/Y3X6W8U;P?JCHEFHEJDNDREVGYJ[N\\R\\V[XZZW[T[PZMYKWITHPHMIKKJNJRKUMW GdGeHeHdGd U;Q?LCIFGIFKENERFVGXJ[ R\\U[WZYWZTZPYMXKVITH", "EfNSOUQVSVUUVSVQUOSNQNOONPMSMVNYP[S\\V\\Y[[Y\\W]T]P\\MZJXIUHRHOIMJKLIOHSHXI]KaMcPeTfYf]e`cba KLJNIRIXJ\\L`NbQdUeYe]d_cba POTO OPUP NQVQ NRVR NSVS OTUT PUTU aLaNcNcLaL bLbN aMcM aVaXcXcVaV bVbX aWcW", "D`H@Hd M@Md W@Wd \\@\\d MMWK MNWL MOWM MWWU MXWV MYWW", "H\\PMMNLOKQKSLUMVPWTWWVXUYSYQXOWNTMPM MNLPLSMUNVPW WVXTXQWOVNTM", "JZQCVMRTRU ULQS TITKPRRUUY W\\UYSXQXOYN[N]O_Ra W\\UZSYOYO]P_Ra SXPZN]", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLSY", "IjNQOOQNSNUOVQVSUUSVQVOUNTMQMNNKPISHWH[I^K`NaRaW`[_]]`ZcVfQiMk WHZI]K_N`R`W_[^]\\`YcTgQi POTO OPUP NQVQ NRVR NSVS OTUT PUTU eLeNgNgLeL fLfN eMgM eVeXgXgVeV fVfX eWgW", "D`H>Hf I>If M>Mf QBSBSDQDQAR?T>W>Y?[A\\D\\I[LYNWOUOSNRLQNOQNROSQVRXSVUUWUYV[X\\[\\`[cYeWfTfReQcQ`S`SbQb RBRD QCSC Y?ZA[D[IZLYN RLRNPQNRPSRVRX YVZX[[[`ZcYe R`Rb QaSa", "AcHBHb IBIb [B[b \\B\\b DB`B DbMb Wb`b", "BaGBQPFb FBPP EBPQ EB\\B^I[B Ga\\a Fb\\b^[[b", "I[X+U1R8P=OANFMNMVN^OcPgRlUsXy U1S6Q<P@OFNNNVO^PdQhSnUs", "I[L+O1R8T=UAVFWNWVV^UcTgRlOsLy O1Q6S<T@UFVNVVU^TdShQnOs", "H[V+R1P5O:O>PBTJTLSNROMRRUSVTXTZPbOfOjPoRsVy T.R2Q5P:P>QCRF R^QaPfPjQoRrTv", "I\\N+R1T5U:U>TBPJPLQNROWRRUQVPXPZTbUfUjToRsNy P.R2S5T:T>SCRF R^SaTfTjSoRrPv", "I[V.S1Q4O8N=NCOIPMSXT\\UbUgTlSoQs S1Q5P8O=OBPHQLTWU[VaVgUlSpQsNv", "I[N.Q1S4U8V=VCUITMQXP\\ObOgPlQoSs Q1S5T8U=UBTHSLPWO[NaNgOlQpSsVv", "Ca].\\.[/[0\\1]1^0^.],[+Y+W,U.T0S3R:QJQjPsOv \\/\\0]0]/\\/ R:Rj U.T1S:SZRjQqPtOvMxKyIyGxFvFtGsHsItIuHvGv GtGuHuHtGt`RFNOKUIXGZE[C[BZBXCWDXCY RFPMOQNVNZP[ RFQJPOOVOZP[ [FWORXP[ [FYMXQWVWZY[Z[\\Z^X [FZJYOXVXZY[", "G^RFQJOPMULWJZH[F[EZEXFWGXFY RFRKSVT[ RFSKTVT[ `G_H`IaHaG```SaQaO`N_L_ XMX\\W_UaSbPbNaL_ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "H\\LFL[M[ LFMFM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMR[S[ RMSMS[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMRbSb RMSMSb", "H[LFL[M[ LFMFM[ XMWMMW XMMX PTV[X[ QSX[", "CbGMG[H[ GMHMH[ HQKNMMPMRNSQS[ HQKOMNONQORQR[S[ SQVNXM[M]N^Q^[ SQVOXNZN\\O]Q][^[", "H\\LML[M[ LMMMM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM QNOONPMSMUNXOYQZTZVYWXXUXSWPVOTNQN", "H\\LMLbMb LMMMMb MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "H\\WMWbXb WMXMXb WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "KYOMO[P[ OMPMP[ PSQPSNUMXM PSQQSOUNXNXM", "J[XPWNTMQMNNMPNRPSUUWV VUWWWXVZ WYTZQZNY OZNXMX XPWPVN WOTNQNNO ONNPOR NQPRUTWUXWXXWZT[Q[NZMX", "H\\LMLWMZO[R[TZWW LMMMMWNYPZRZTYWW WMW[X[ WMXMX[", "F^IMN[ IMJMNX RMNX RPN[ RPV[ RMVX [MZMVX [MV[", "JZLMR[ LMMMRY XMWMRYNb XMR[ObNb", "I[VNL[ XMNZ LMXM LMLNVN NZXZX[ L[X[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRTXTZV[XZYY[V WRUXUZV[", "LZLVNSPO SFMXMZO[P[RZTXUUURVVWWXWZV TFNXNZO[", "LXTSSTTTTSSRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ ZFTXTZV[XZYY[V [FUXUZV[", "LXOYQXRWSUSSRRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "OXRRUOWLXIXGWFUGTIKdKfLgNfOcPZQ[S[UZVYXV TISNRRO[M`Kd", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "L[LVNSPO SFL[ TFM[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "NVSLRMSNTMSL QROXOZQ[SZTYVV RRPXPZQ[", "NVSLRMSNTMSL QRKd RRO[M`KdJfHgGfGdHaJ_M]Q[TYVV", "LZLVNSPO SFL[ TFM[ URUSVSURTRRTOU OURVSZT[ OUQVRZT[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[", "E^EVGSIRKSKUI[ IRJSJUH[ KUMSORPRRSRUP[ PRQSQUO[ RUTSVRWRYSYUXXXZY[ WRXSXUWXWZY[[Z\\Y^V", "I[IVKSMROSOUM[ MRNSNUL[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "KYRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXVXXWYV PRNTMVMYO[", "L[LVNSPO QLHg RLIg OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "K[UUTSRRPRNSMTLVLXMZO[Q[SZ PRNTMVMYO[ VRPdPfQgSfTcT[V[YY[V WRT[R`Pd", "LZLVNSPRRSRUP[ PRQSQUO[ RUTSVRWRVU VRVUWWXWZV", "NZNVPSQQQSTUUWUYTZR[ QSSUTWTYR[ NZP[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[ PNVN", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRTXTZV[XZYY[V WRUXUZV[", "KZNRMTLWLZN[O[RZTXUUUR ORNTMWMZN[ URVVWWXWZV", "H]LRJTIWIZK[L[NZPX MRKTJWJZK[ RRPXPZR[S[UZWXXUXR SRQXQZR[ XRYVZW[W]V", "JZJVLSNRPRQSQUPXOZM[L[KZKYLYKZ WSVTWTWSVRURSSRUQXQZR[U[XYZV QSRU SSQU PXQZ QXOZ", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "LYLVNSPRRRTSTVSXPZN[ RRSSSVRXPZ N[P\\Q^QaPdNfLgKfKdLaO^R\\VYYV N[O\\P^PaOdNf`UbVb UBVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`NbOb NBOBQDSGUKVPVTUYS]Q`Ob", "JZRFQGSQRR RFRR RFSGQQRR MINIVOWO MIWO MIMJWNWO WIVINOMO WIMO WIWJMNMO", "I[NFMGMM NGMM NFOGMM WFVGVM WGVM WFXGVM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF QFNIOMSNVKUGQF SFOGNKQNUMVISF", "G^OFObPb OFPFPb UFUbVb UFVFVb JP[P[Q JPJQ[Q JW[W[X JWJX[X", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[I[ [F\\FI[ YTWTUUTWTYV[X[ZZ[X[VYT NFJGIKMMPJNF LFIIKMOLPHLF YTUUTYX[[XYT WTTWV[ZZ[VWT", "E``Qb VESIQMPPOUOZP_Qb", "JYSBTDUGVLVPUUSYQ\\N_Jb SBTEUJUOTTSWQ[N_", "E_^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FF[ XTVTTUSWSYU[W[YZZXZVXT", "G]LFL[ MFM[ IFYFYLXF MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "F^NFNLMTLXKZJ[ XFX[ YFY[ KF\\F G[\\[ G[Gb H[Gb [[\\b \\[\\b", "CbRFR[ SFS[ OFVF GGHHGIFHFGGFHFIGJIKMLONPWPYOZM[I\\G]F^F_G_H^I]H^G NPLQKSJXIZH[ NPMQLSKXJZI[G[FZEX WPYQZS[X\\Z][ WPXQYSZX[Z\\[^[_Z`X O[V[", "H\\LIKFKLLINGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[O[MZLYKWKVLUMVLW WQXTXWWYVZT[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[ N@N?M?M@NBPCTCVBW@", "F^KFK[ LFL[ HFOF LPSPUOVMWIXGYFZF[G[HZIYHZG SPUQVSWXXZY[ SPTQUSVXWZX[Z[[Z\\X H[O[", "E^MFMLLTKXJZI[H[GZGYHXIYHZ XFX[ YFY[ JF\\F U[\\[", "H]KFRV LFSV ZFSVQYPZN[M[LZLYMXNYMZ IFOF VF\\F", "F_RFR[ SFS[ OFVF PILJJLIOIRJULWPXUXYW[U\\R\\O[LYJUIPI PIMJKLJOJRKUMWPX UXXWZU[R[OZLXJUI O[V[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F H[\\[ [[\\b \\[\\b", "F]KFKQLSOTRTUSWQ LFLQMSOT WFW[ XFX[ HFOF TF[F T[[[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[ `[ab a[ab", "F`PFP[ QFQ[ IFHLHFTF QPXP[Q\\R]T]W\\Y[ZX[M[ XPZQ[R\\T\\W[YZZX[", "CaHFH[ IFI[ EFLF IPPPSQTRUTUWTYSZP[E[ PPRQSRTTTWSYRZP[ [F[[ \\F\\[ XF_F X[_[", "H]MFM[ NFN[ JFQF NPUPXQYRZTZWYYXZU[J[ UPWQXRYTYWXYWZU[", "H]LIKFKLLINGQFSFVGXIYKZNZSYVXXVZS[P[MZLYKWKVLUMVLW SFUGWIXKYNYSXVWXUZS[ PPYP", "CbHFH[ IFI[ EFLF E[L[ VFSGQIPKOOORPVQXSZV[X[[Z]X^V_R_O^K]I[GXFVF VFTGRIQKPOPRQVRXTZV[ X[ZZ\\X]V^R^O]K\\IZGXF IPOP", "G]WFW[ XFX[ [FOFLGKHJJJLKNLOOPWP OFMGLHKJKLLNMOOP RPPQORLYKZJZIY PQOSMZL[J[IYIX T[[[", "H\\XFWGQINKLNKQKULXNZQ[S[VZXXYUYSXPVNSMQMNNLPKS XFWHUIQJNLLN QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "H\\MMM[ NMN[ JMUMXNYPYQXSUT UMWNXPXQWSUT NTUTXUYWYXXZU[J[ UTWUXWXXWZU[", "F]NMNQMWLZK[ WMW[ XMX[ KM[M I[H`H[[[[`Z[", "E`aLbKbJaK`La JMPM TMZM", "H]RFRb SFSb OFSF RPQNPMNMLNKQKWLZN[P[QZRX NMMNLQLWMZN[ WMXNYQYWXZW[ SPTNUMWMYNZQZWYZW[U[TZSX ObVb", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[[[[`Z[", "G]LMLTMVPWRWUVWT MMMTNVPW WMW[ XMX[ IMPM TM[M T[[[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[``_[", "H]QMQ[ RMR[ LMKRKMUM RTVTYUZWZXYZV[N[ VTXUYWYXXZV[", "E_JMJ[ KMK[ GMNM KTOTRUSWSXRZO[G[ OTQURWRXQZO[ YMY[ ZMZ[ VM]M V[][", "J[OMO[ PMP[ LMSM PTTTWUXWXXWZT[L[ TTVUWWWXVZT[", "I\\MOLMLQMONNPMSMVNXPYSYUXXVZS[P[NZLXLWMVNWMX SMUNWPXSXUWXUZS[ RTXT", "Da`Y`Z^Z\\ V\\W^X_Y_ UXW]X^Y^Z]", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUPNP XHYJYLXN UFWGXIXMWOUP RPTQUSWYX[Z[[Y[W WWXYYZZZ TQURXXYYZY[X I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "H\\XIYFYLXIVGSFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[Q[NZLXKUK[LX", "H\\JFJL QFQ[ RGRZ SFS[ ZFZL JFZF N[V[ KFJL LFJI MFJH OFJG UFZG WFZH XFZI YFZL QZO[ QYP[ SYT[ SZU[", "F^KFKULXNZQ[S[VZXXYUYG LGLVMX MFMVNYOZQ[ HFPF VF\\F IFKG JFKH NFMH OFMG WFYG [FYG", "H\\KFR[ LFRXR[ MFSX YGR[ IFPF UF[F JFLH NFMH OFMG WFYG ZFYG", "F^JFN[ KFNVN[ LFOV RFOVN[ RFV[ SFVVV[ TFWV ZGWVV[ GFOF RFTF WF]F HFKG IFKH MFLH NFLG XFZG \\FZG", "H\\KFW[ LFX[ MFY[ XGLZ IFPF UF[F I[O[ T[[[ JFMH NFMH OFMG VFXG ZFXG LZJ[ LZN[ WZU[ WYV[ WYZ[", "G]JFQQQ[ KFRQRZ LFSQS[ YGSQ HFOF VF\\F N[V[ IFKG NFLG WFYG [FYG QZO[ QYP[ SYT[ SZU[", "H\\YFKFKL WFK[ XFL[ YFM[ K[Y[YU LFKL MFKI NFKH PFKG T[YZ V[YY W[YX X[YU", "I[NFN[ OGOZ PFP[ KFZFZL K[S[ LFNG MFNH QFPH RFPG UFZG WFZH XFZI YFZL NYM[ NZL[ PYQ[ PZR[", "H\\RFJ[ QIX[ RIY[ RFZ[ KYXY KZXZ J[Z[", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF OMOT UMUT OPUP OQUQ ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS", "H\\RFKZ QIW[ RIX[ RFY[ I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "G]JEJL ZEZL OMOT UMUT JUJ\\ ZUZ\\ JGZG JHZH JIZI OPUP OQUQ JXZX JYZY JZZZ JFMH ZFWH KIJK LIJJ XIZJ YIZK ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS JVKX JWLX ZWXX ZVYX MYJ[ WYZ[", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HF\\F H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "G]IFPPQQ JFQP KFRPI[ IFYFZLYIWF VFYH TFYG KYYY JZYZ I[Y[ZUYXWY", "H\\JMKILGMFOFPGQIRM LHMGOGPH JMKJMHOHPIQMQ[ RMR[ ZMYJWHUHTISMS[ XHWGUGTH ZMYIXGWFUFTGSIRM N[V[ QYP[ QZO[ SZU[ SYT[", "G]QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ OKLLKMJOJRKTLUOVUVXUYTZRZOYMXLUKOK LMKOKRLT XTYRYOXM OKMLLOLRMUOV UVWUXRXOWLUK", "F^QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ HMIMJNKQLSMTPUTUWTXSYQZN[M\\M LRKNJLILKN HMIKJKKLLPMSNTPU YN[LZLYNXR TUVTWSXPYLZK[K\\M", "G]NYKYJWK[O[MVKRJOJLKIMGPFTFWGYIZLZOYRWVU[Y[ZWYYVY LSKOKLLI XIYLYOXS O[MULPLKMHNGPF TFVGWHXKXPWUU[ KZNZ VZYZ", "H\\UFIZ SJT[ THUZ UFUHVYV[ LUTU F[L[ Q[X[ IZG[ IZK[ TZR[ TYS[ VYW[", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVP YGZIZKYNXO WFXGYIYKXNVP NPVPXQYSYUXXVZR[F[ WQXSXUWXUZ VPWRWUVXTZR[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV QHOJNLMOLSLWMY TFRGPJOLNOMSMXNZP[", "F]OFI[ PFJ[ QFK[ LFUFXGYHZKZOYSWWUYSZO[F[ WGXHYKYOXSVWTY UFWHXKXOWSUWRZO[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "F]OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[U[WV MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[ P[UZ R[UY UYWV", "F\\OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[N[ MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT QHOJNLMOLSLWMY VXWWXT TFRGPJOLNOMSMXNZP[ R[TZVWWT TT\\T UTWU VTWW ZTXV [TXU", "E_NFH[ OFI[ PFJ[ ZFT[ [FU[ \\FV[ KFSF WF_F LPXP E[M[ Q[Y[ LFOG MFNH QFOH RFOG XF[G YFZH ]F[H ^F[G IZF[ IYG[ JYK[ IZL[ UZR[ UYS[ VYW[ UZX[", "KYTFN[ UFO[ VFP[ QFYF K[S[ RFUG SFTH WFUH XFUG OZL[ OYM[ PYQ[ OZR[", "I\\WFRWQYO[ XFTSSVRX YFUSSXQZO[M[KZJXJVKULUMVMWLXKX KVKWLWLVKV TF\\F UFXG VFWH ZFXH [FXG", "F]OFI[ PFJ[ QFK[ \\GMR QOU[ ROV[ SNWZ LFTF YF_F F[N[ R[Y[ MFPG NFOH RFPH SFPG ZF\\G ^F\\G JZG[ JYH[ KYL[ JZM[ UZS[ UYT[ VYX[", "H\\QFK[ RFL[ SFM[ NFVF H[W[YU OFRG PFQH TFRH UFRG LZI[ LYJ[ MYN[ LZO[ R[WZ T[XX V[YU", "D`MFGZ MGNYN[ NFOY OFPX [FPXN[ [FU[ \\FV[ ]FW[ JFOF [F``V``aUbObLaK_K^L\\O[ ObMaL_L^M\\O[", "G^LFL[ MGMZ IFNFN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JFLG KFLH LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "LXQFQHSHSFQF RFRH QGSG QMQ[ RNRZ NMSMS[ N[V[ OMQN PMQO QZO[ QYP[ SYT[ SZU[", "KXRFRHTHTFRF SFSH RGTG RMR^QaPb SNS]R` OMTMT]S`RaPbMbLaL_N_NaMaM` PMRN QMRO", "G]LFL[ MGMZ IFNFN[ WNNW RSY[ RTX[ QTW[ TM[M I[Q[ T[[[ JFLG KFLH UMWN ZMWN LZJ[ LYK[ NYO[ NZP[ WYU[ VYZ[", "LXQFQ[ RGRZ NFSFS[ N[V[ OFQG PFQH QZO[ QYP[ SYT[ SZU[", "AcFMF[ GNGZ CMHMH[ HQIOJNLMOMQNROSRS[ QORRRZ OMPNQQQ[ SQTOUNWMZM\\N]O^R^[ \\O]R]Z ZM[N\\Q\\[ C[K[ N[V[ Y[a[ DMFN EMFO FZD[ FYE[ HYI[ HZJ[ QZO[ QYP[ SYT[ SZU[ \\ZZ[ \\Y[[ ^Y_[ ^Z`[", "G^LML[ MNMZ IMNMN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JMLN KMLO LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM MPLRLVMX WXXVXRWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNSM", "G\\LMLb MNMa IMNMNb NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ IbQb JMLN KMLO LaJb L`Kb N`Ob NaPb", "H\\VNVb WOWa UNWNXMXb VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ Sb[b VaTb V`Ub X`Yb XaZbaLbJbIaI_K_KaJaJ` JMQM TMZM KMNO PMNN VMXN YMXN", "I[VML[ WMM[ XMN[ XMLMLQ L[X[XW MMLQ NMLP OMLO QMLN S[XZ U[XY V[XX W[XW", "G^[MZQYTWXUZR[P[MZKXJUJSKPMNPMRMUNVOWQYXZZ[[\\[ ZMYQXTWVUYTZR[ LXKVKRLP P[NZMYLVLRMONNPM RMTNUOVQXXYZ[[", "G\\QFNGMHLJKNKb NHMJLNLa QFOGNIMNMb QFSFVGWHXJXLWNVOSP PPTPWQXRYTYWXYWZT[Q[OZNYMW VHWJWLVN WRXTXWWY SFUGVIVMUOSP TPVQWSWXVZT[ KbMb", "F\\HRINKMMMONPOQRRYSb IOKNMNOOPP HRIPKOMOOPPQQTRYRa XMWPVRTUSWR[Qb YMWQ ZMYOWRTVSXR[ XMZM QbSb", "H\\SMQMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMPLNKMJMHNGPFSFWH MPLSLUMX WXXUXSWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNOKNJNIOHQGTGWH", "I[SMUNVOWOVNSMQMMNLOLQMRQS SSQSMTKVKXMZP[S[VZXXWXVZ NNMOMQNR MULVLXMY QMONNONQORQS QSNTMVMXNZP[", "I[QHRGRFQFPGPIQJTKXKYKYJXJUKSLPNNPMRLULWMYNZP[S\\U]V_VaUbSbRaR`S`Sa POOPNRMUMWNYOZ UKRMQNOQNTNWOYQ[S\\", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ UMVNWQWb WOXRXa NQOOPNRMUMWNXOYRYb L[N[ WbYb", "F]IMJNKPKTLWMYNZQ[S[VZWYXWYRYOXJVGTFRFPGOIOKPMSOVP[Q JMKNLPLTMWNY VYWWXRXOWJVHTG GPHNIMKMLNMPMTNXOZQ[ S[UZVXWSWNVJUHSGQGOI", "KZNMONPPPXQZS[U[WZXX OMPNQPQXRZ LPMNNMPMQNRPRXSZT[", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ SOUNWNXOXPZPZNXMVMTNQQOTNW XNYOYP PSQSWYYYZX TWWZYZ RTUZV[X[YZZX L[N[", "H\\JGKFMFOGQIXXYZZ[ OHPIWXXY MFNGOIVXXZZ[[[ RMJZJ[K[RM", "G]KMKb LNLa MMMb VMVXWZX[Z[[Z\\X WNWXXZY[ XMXXYZZ[ MXNZP[R[TZUYVW KMMM VMXM KbMb", "G]JMKNLPMTN[ KMLNMPNTOZ HPINJMLMMNNPOTPZ VVWTXQXMYMZNYQXSVVTXQZN[ XRYOYM", "JZPGSFRFPGOHOIPJSKVLWKVJSKPLNMMOMQNRPSSTVUWTVSSTOUMVLXLZM[O\\S]U^V_VaTbRbOaPaRb OMNONQOR NVMXMZN[ VKSKQLPMOOOQQSST VTSTPUOVNXNZP\\S]", "G]IQJOKNMM[M KOMNZN IQJPLO[O OONZM[LZMWOO UOVZW[XZWWUO [M[O OOMZ UOWZ", "G\\QMNNLPKTKb MPLTLa QMONNOMSMb MWNYOZQ[S[VZXXYUYSXPVNSMQM WXXVXRWP S[UZVYWVWRVOUNSM KbMb", "G]PMMNKPJSJUKXMZP[R[UZWXXUXSWPUNRM LPKRKVLX VXWVWRVP PMNNMOLRLVMYNZP[ R[TZUYVVVRUOTNRM RMZO[N[MPM RMZN", "H\\JQKOLNNMZM LONNYN JQKPMOZO ROQZR[SZRO ZMZO RORZ", "G\\JMKNLPLUMXOZQ[S[UZWXXVYRYNXMWMXPXSWWUZ KMLNMPMUNX WMXNXO HPINJMLMMNNPNVOYQ[", "G]RQQNPMNMLNKOJRJUKXMZP[T[WZYXZUZRYOXNVMTMSNRQ LOKRKULX XXYUYRXO NMMNLQLVMYNZP[ T[VZWYXVXQWNVM RQQb RQRa RQSb QbSb", "H\\LMMNNPT_VaXbZb[a NOOPU_V` INJMLMNNPPV_WaXb VSXPYMZMYOVSN\\K`JbKbL_N\\", "F]HNINJPJUKXMZP[T[VZXXYVZRZNYMXMYPYSXWVZ JNKPKULX XMYNYO GPHNIMJMKNLPLVMYNZP[ QFSb RGRa SFQb QFSF QbSb`Kb TJSMRRP[O^ XFVHUJTMSRQZP]O_MaKbIbHaH_J_JaIaI` NMYM", "H]XMT[S^QaOb YMU[S_ XMZMV[T_RaObLbJaI`I^K^K`J`J_ VTVQUNSMQMNNLQKTKVLYMZO[Q[SZTYUWVT NOMQLTLWMY QMOONQMTMWNZO[", "G]OFI[K[ PFJ[ LFQFK[ MTOPQNSMUMWNXPXSVX WNWRVVVZ WPUUUXVZW[Y[[Y\\W MFPG NFOH", "KXTFTHVHVFTF UFUH TGVG LQMOOMQMRNSPSSQX RNRRQVQZ RPPUPXQZR[T[VYWW", "KXUFUHWHWFUF VFVH UGWG MQNOPMRMSNTPTSRZQ]P_NaLbJbIaI_K_KaJaJ` SNSSQZP]O_ SPRTP[O^N`Lb", "G]OFI[K[ PFJ[ LFQFK[ YOYNXNXPZPZNYMWMUNQROS MSOSQTRUTYUZWZ QUSYTZ OSPTRZS[U[WZYW MFPG NFOH", "LXTFQQPUPXQZR[T[VYWW UFRQQUQZ QFVFRTQX RFUG SFTH", "@cAQBODMFMGNHPHSF[ GNGSE[ GPFTD[F[ HSJPLNNMPMRNSPSSQ[ RNRSP[ RPQTO[Q[ SSUPWNYM[M]N^P^S\\X ]N]R\\V\\Z ]P[U[X\\Z][_[aYbW", "F^GQHOJMLMMNNPNSL[ MNMSK[ MPLTJ[L[ NSPPRNTMVMXNYPYSWX XNXRWVWZ XPVUVXWZX[Z[\\Y]W", "H\\QMNNLQKTKVLYMZP[S[VZXWYTYRXOWNTMQM NOMQLTLWMY VYWWXTXQWO QMOONQMTMWNZP[ S[UYVWWTWQVNTM", "G]HQIOKMMMNNOPOSNWKb NNNSMWJb NPMTIb OTPQQORNTMVMXNYOZRZTYWWZT[R[PZOWOT XOYQYTXWWY VMWNXQXTWWVYT[ FbNb JaGb J`Hb K`Lb JaMb", "G\\WMQb XMRb WMYMSb UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ NbVb RaOb R`Pb S`Tb RaUb", "I[JQKOMMOMPNQPQTO[ PNPTN[ PPOTM[O[ YOYNXNXPZPZNYMWMUNSPQT", "J[XPXOWOWQYQYOXNUMRMONNONQOSQTTUVVWX ONNQ ORQSTTVU WVVZ NOOQQRTSVTWVWXVZS[P[MZLYLWNWNYMYMX", "KYTFQQPUPXQZR[T[VYWW UFRQQUQZ TFVFRTQX NMXM", "F^GQHOJMLMMNNPNSLX MNMRLVLZ MPKUKXLZN[P[RZTXVU XMVUVXWZX[Z[\\Y]W YMWUWZ XMZMXTWX", "H\\IQJOLMNMONPPPSNX ONORNVNZ OPMUMXNZP[R[TZVXXUYQYMXMXNYP", "CaDQEOGMIMJNKPKSIX JNJRIVIZ JPHUHXIZK[M[OZQXRU TMRURXSZU[W[YZ[X]U^Q^M]M]N^P UMSUSZ TMVMTTSX", "G]JQLNNMPMRNSPSR PMQNQRPVOXMZK[I[HZHXJXJZIZIY RORRQVQY ZOZNYNYP[P[NZMXMVNTPSRRVRZS[ PVPXQZS[U[WZYW", "G]HQIOKMMMNNOPOSMX NNNRMVMZ NPLULXMZO[Q[SZUXWT YMU[T^RaPb ZMV[T_ YM[MW[U_SaPbMbKaJ`J^L^L`K`K_", "H\\YMXOVQNWLYK[ XOOOMPLR VORNONNO VORMOMMOLR LYUYWXXV NYRZUZVY NYR[U[WYXV", "H\\WQVOUNSMQMNNLPKSKULXNZQ[S[VZWYXWYSYNXJWHVGSFQFNGMHNHOGQF MPLRLVMX VYWWXSXNWJVH QMONNOMRMVNYOZQ[ S[UZVXWTWMVIUGSF", "I[UMWNXOYOXNUMRMONMPLSLUMXOZR[U[XZYYXYWZU[ NPMSMUNX RMPNOONRNVOYPZR[ NTTUUTTSNT NTTT", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF LPXQ LQXP", "G]PMMNKPJSJUKXMZP[T[WZYXZUZSYPWNTMPM LPKSKULX XXYUYSXP PMNNMOLRLVMYNZP[T[VZWYXVXRWOVNTM QFSb RGRa SFQb QFSF QbSb`Ub QHPKOOOUPYQ\\ SDRFQIPOPUQ[R^S`", "KYOBQDSGUKVPVTUYS]Q`Ob SHTKUOUUTYS\\ QDRFSITOTUS[R^Q`", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[ [FI[ [FJ[ YTWTUUTWTYV[X[ZZ[X[VYT OGLFIIJLMMPJOG NFJGIK KMOLPH ZUWTTWUZX[[XZU YTUUTY V[ZZ[V H[J[", "E`b SHQKOONTN\\ ZBWDTGRJQLPOOSN\\ NTO]P`Qb", "JZSBUEVHWLWQVUTYR\\O_LaJb VHVPUUSYQ\\ SBTDUGVP VHUQTUSXRZP]M`Jb", "J[TFSGUQTR TFTR TFUGSQTR OIPIXOYO OIYO OIOJYNYO YIXIPOOO YIOO YIYJONOO", "H\\PFOGMM PGMM PFQGMM ZFYGWM ZGWM ZF[GWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF SFPIQMUNXKWGSF UFQGPKSNWMXIUF", "G^SFKbLb SFTFLb YFQbRb YFZFRb KP\\P\\Q KPKQ\\Q IWZWZX IWIXZX", "E^^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FE[ ^FF[ ^FG[ XTVTTUSWSYU[W[YZZXZVXT PGMFJIKLNMQJPG OFKGJK LMPLQH YUVTSWTZW[ZXYU XTTUSY U[YZZV E[G[", "E`UQUNTLRKPKNLMMLPLSMUOVQVSUTTUQ OLNMMPMSNU RKPLOMNPNSOUPV VKUQUSVUXVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WKVQVSWU VKXKWQWSXUZV", "/builds/master_pack-android/opencv/modules/imgproc/src/histogram.cpp", "H1.type() == H2.type() && H1.depth() == CV_32F", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "Only uniform bin ranges can be used here (to avoid memory allocation)", "Too small number of histograms", "mask.size() == imsize && mask.channels() == 1", "csz == 0 || csz == dims || (csz == 1 && _1d)", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "mutex: pthread_mutex_init failed", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "Bad normalization factor (set it to 1.0 if unsure)", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "/builds/master_pack-android/opencv/modules/imgproc/src/hough.cpp", "The destination matrix should be continuous and have a single row or a single column", "The destination matrix data type is inappropriate, see the manual", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "/builds/master_pack-android/opencv/modules/imgproc/src/imgwarp.cpp", "Unknown/unsupported interpolation type", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && map2.empty()) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && m2->empty())", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "dsize.area() > 0 || (inv_scale_x > 0 && inv_scale_y > 0)", "/builds/master_pack-android/opencv/modules/imgproc/src/intersection.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/linefit.cpp", "_scale > 0 && _sigma_scale > 0 && _quant >= 0 && _ang_th > 0 && _ang_th < 180 && _density_th >= 0 && _density_th < 1 && _n_bins > 0", "/builds/master_pack-android/opencv/modules/imgproc/src/lsd.cpp", "!(double_equal(Ixx, 0) && double_equal(Iyy, 0) && double_equal(Ixy, 0))", "scaled_image.isContinuous() && modgrad.isContinuous() && angles.isContinuous()", "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", "/builds/master_pack-android/opencv/modules/imgproc/src/matchcontours.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/min_enclosing_triangle.cpp", "(pointsMat.checkVector(2) > 0) && ((pointsMat.depth() == CV_32F) || (pointsMat.depth() == CV_32S))", "The position of the vertex C on side B could not be determined, because the considered lines do not intersect.", "The position of side B could not be determined, because gamma(b) could not be computed.", "/builds/master_pack-android/opencv/modules/imgproc/src/moments.cpp", "Invalid image type (must be single-channel)", "contour.depth() == CV_32S || contour.depth() == CV_32F", "/builds/master_pack-android/opencv/modules/imgproc/src/morph.cpp", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "/builds/master_pack-android/opencv/modules/imgproc/src/phasecorr.cpp", "ssize.width > 0 && ssize.height > 0 && std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "/builds/master_pack-android/opencv/modules/imgproc/src/pyramids.cpp", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "/builds/master_pack-android/opencv/modules/imgproc/src/rotcalipers.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/samplers.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/segmentation.cpp", "/builds/master_pack-android/opencv/modules/imgproc/src/shapedescr.cpp", "Only curves with integer coordinates are supported in case of contour slice", "/builds/master_pack-android/opencv/modules/imgproc/src/smooth.cpp", "Unsupported combination of sum format (=%d), and destination format (=%d)", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.data != dst.data", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.data != dst.data", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "/builds/master_pack-android/opencv/modules/imgproc/src/subdivision2d.cpp", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "Subdiv2D::locate returned invalid location = %d", "/builds/master_pack-android/opencv/modules/imgproc/src/sumpixels.cpp", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "/builds/master_pack-android/opencv/modules/imgproc/src/templmatch.cpp", "depth == tdepth || tdepth == CV_32F", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "(depth == CV_8U || depth == CV_32F) && type == _templ.type() && _img.dims() <= 2", "_img.size().height <= _templ.size().height && _img.size().width <= _templ.size().width", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "/builds/master_pack-android/opencv/modules/imgproc/src/thresh.cpp", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "/builds/master_pack-android/opencv/modules/imgproc/src/undistort.cpp", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8 || _distCoeffs->rows*_distCoeffs->cols == 12)", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8)", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1) || distCoeffs.size() == Size(1, 12) || distCoeffs.size() == Size(12, 1)", "/builds/master_pack-android/opencv/modules/imgproc/src/utils.cpp", "The matrix can not be converted to point sequence because of inappropriate element type", "The matrix converted to point sequence must be 1-dimensional and continuous", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define SRC_TSIZE cn * (int)sizeof(srcT1)\n#define DST_TSIZE cn * (int)sizeof(dstT1)\n#define noconvert\n__kernel void accumulate(__global const uchar * srcptr, int src_step, int src_offset,\n#ifdef ACCUMULATE_PRODUCT\n__global const uchar * src2ptr, int src2_step, int src2_offset,\n#endif\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols\n#ifdef ACCUMULATE_WEIGHTED\n, dstT1 alpha\n#endif\n#ifdef HAVE_MASK\n, __global const uchar * mask, int mask_step, int mask_offset\n#endif\n)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nint src_index = mad24(y, src_step, mad24(x, SRC_TSIZE, src_offset));\n#ifdef HAVE_MASK\nint mask_index = mad24(y, mask_step, mask_offset + x);\nmask += mask_index;\n#endif\n#ifdef ACCUMULATE_PRODUCT\nint src2_index = mad24(y, src2_step, mad24(x, SRC_TSIZE, src2_offset));\n#endif\nint dst_index = mad24(y, dst_step, mad24(x, DST_TSIZE, dst_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i)\nif (y < dst_rows)\n{\n__global const srcT1 * src = (__global const srcT1 *)(srcptr + src_index);\n#ifdef ACCUMULATE_PRODUCT\n__global const srcT1 * src2 = (__global const srcT1 *)(src2ptr + src2_index);\n#endif\n__global dstT1 * dst = (__global dstT1 *)(dstptr + dst_index);\n#ifdef HAVE_MASK\nif (mask[0])\n#endif\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\n{\n#ifdef ACCUMULATE\ndst[c] += convertToDT(src[c]);\n#elif defined ACCUMULATE_SQUARE\ndstT1 val = convertToDT(src[c]);\ndst[c] = fma(val, val, dst[c]);\n#elif defined ACCUMULATE_PRODUCT\ndst[c] = fma(convertToDT(src[c]), convertToDT(src2[c]), dst[c]);\n#elif defined ACCUMULATE_WEIGHTED\ndst[c] = fma(1 - alpha, dst[c], src[c] * alpha);\n#else\n#error \"Unknown accumulation type\"\n#endif\n}\nsrc_index += src_step;\n#ifdef ACCUMULATE_PRODUCT\nsrc2_index += src2_step;\n#endif\n#ifdef HAVE_MASK\nmask += mask_step;\n#endif\ndst_index += dst_step;\n++y;\n}\n}\n}\n", "#if cn != 3\n#define loadpix(addr) *(__global const uchar_t *)(addr)\n#define storepix(val, addr)  *(__global uchar_t *)(addr) = val\n#define TSIZE cn\n#else\n#define loadpix(addr) vload3(0, (__global const uchar *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global uchar *)(addr))\n#define TSIZE 3\n#endif\n#if cn == 1\n#define SUM(a) a\n#elif cn == 2\n#define SUM(a) a.x + a.y\n#elif cn == 3\n#define SUM(a) a.x + a.y + a.z\n#elif cn == 4\n#define SUM(a) a.x + a.y + a.z + a.w\n#else\n#error \"cn should be <= 4\"\n#endif\n__kernel void bilateral(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant float * space_weight, __constant int * space_ofs)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (y < dst_rows && x < dst_cols)\n{\nint src_index = mad24(y + radius, src_step, mad24(x + radius, TSIZE, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nfloat_t sum = (float_t)(0.0f);\nfloat wsum = 0.0f;\n#ifdef INTEL_DEVICE\nfloat_t val0 = convert_float_t(loadpix(src + src_index));\n#else\nint_t val0 = convert_int_t(loadpix(src + src_index));\n#endif\n#pragma unroll\nfor (int k = 0; k < maxk; k++ )\n{\n#ifdef INTEL_DEVICE\nfloat_t val = convert_float_t(loadpix(src + src_index + space_ofs[k]));\nfloat diff = SUM(fabs(val - val0));\n#else\nint_t val = convert_int_t(loadpix(src + src_index + space_ofs[k]));\nint diff = SUM(abs(val - val0));\n#endif\nfloat w = space_weight[k] * native_exp((float)(diff * diff * gauss_color_coeff));\nsum += convert_float_t(val) * (float_t)(w);\nwsum += w;\n}\nstorepix(convert_uchar_t(sum / (float_t)(wsum)), dst + dst_index);\n}\n}\n#ifdef INTEL_DEVICE\n#if cn == 1\n__kernel void bilateral_float4(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant float * space_weight, __constant int * space_ofs)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (y < dst_rows && x < dst_cols / 4 )\n{\nint src_index = ((y + radius) * src_step) + x * 4  + (radius + src_offset);\nint dst_index = (y  * dst_step) +  x * 4 + dst_offset ;\nfloat4 sum = 0.f, wsum = 0.f;\nfloat4 val0 = convert_float4(vload4(0, src + src_index));\n#pragma unroll\nfor (int k = 0; k < maxk; k++ )\n{\nfloat4 val = convert_float4(vload4(0, src + src_index + space_ofs[k]));\nfloat4 w = space_weight[k] * native_exp((val - val0) * (val - val0) * gauss_color_coeff);\nsum += val * w;\nwsum += w;\n}\nsum = sum / wsum + .5f;\nvstore4(convert_uchar4_rtz(sum), 0, dst + dst_index);\n}\n}\n#endif\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n__kernel void blendLinear(__global const uchar * src1ptr, int src1_step, int src1_offset,\n__global const uchar * src2ptr, int src2_step, int src2_offset,\n__global const uchar * weight1, int weight1_step, int weight1_offset,\n__global const uchar * weight2, int weight2_step, int weight2_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint src1_index = mad24(y, src1_step, src1_offset + x * cn * (int)sizeof(T));\nint src2_index = mad24(y, src2_step, src2_offset + x * cn * (int)sizeof(T));\nint weight1_index = mad24(y, weight1_step, weight1_offset + x * (int)sizeof(float));\nint weight2_index = mad24(y, weight2_step, weight2_offset + x * (int)sizeof(float));\nint dst_index = mad24(y, dst_step, dst_offset + x * cn * (int)sizeof(T));\nfloat w1 = *(__global const float *)(weight1 + weight1_index),\nw2 = *(__global const float *)(weight2 + weight2_index);\nfloat den = w1 + w2 + 1e-5f;\n__global const T * src1 = (__global const T *)(src1ptr + src1_index);\n__global const T * src2 = (__global const T *)(src2ptr + src2_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\n#pragma unroll\nfor (int i = 0; i < cn; ++i)\n{\nfloat num = w1 * convert_float(src1[i]) + w2 * convert_float(src2[i]);\ndst[i] = convertToT(num / den);\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr) *(__global const ST *)(addr)\n#define storepix(val, addr)  *(__global DT *)(addr) = val\n#define SRCSIZE (int)sizeof(ST)\n#define DSTSIZE (int)sizeof(DT)\n#else\n#define loadpix(addr) vload3(0, (__global const ST1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global DT1 *)(addr))\n#define SRCSIZE (int)sizeof(ST1)*cn\n#define DSTSIZE (int)sizeof(DT1)*cn\n#endif\n#ifdef BORDER_CONSTANT\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nx = max(min(x, maxX - 1), minX); \\\ny = max(min(y, maxY - 1), minY); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nif (x < minX) \\\nx -= ((x - maxX + 1) / maxX) * maxX; \\\nif (x >= maxX) \\\nx %= maxX; \\\nif (y < minY) \\\ny -= ((y - maxY + 1) / maxY) * maxY; \\\nif (y >= maxY) \\\ny %= maxY; \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, delta) \\\n{ \\\nif (maxX - minX == 1) \\\nx = minX; \\\nelse \\\ndo \\\n{ \\\nif (x < minX) \\\nx = minX - (x - minX) - 1 + delta; \\\nelse \\\nx = maxX - 1 - (x - maxX) - delta; \\\n} \\\nwhile (x >= maxX || x < minX); \\\n\\\nif (maxY - minY == 1) \\\ny = minY; \\\nelse \\\ndo \\\n{ \\\nif (y < minY) \\\ny = minY - (y - minY) - 1 + delta; \\\nelse \\\ny = maxY - 1 - (y - maxY) - delta; \\\n} \\\nwhile (y >= maxY || y < minY); \\\n}\n#ifdef BORDER_REFLECT\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 0)\n#elif defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 1)\n#endif\n#else\n#error No extrapolation method\n#endif\n#define noconvert\n#ifdef SQR\n#define PROCESS_ELEM(value) (value * value)\n#else\n#define PROCESS_ELEM(value) value\n#endif\nstruct RectCoords\n{\nint x1, y1, x2, y2;\n};\ninline WT readSrcPixel(int2 pos, __global const uchar * srcptr, int src_step, const struct RectCoords srcCoords)\n{\n#ifdef BORDER_ISOLATED\nif (pos.x >= srcCoords.x1 && pos.y >= srcCoords.y1 && pos.x < srcCoords.x2 && pos.y < srcCoords.y2)\n#else\nif (pos.x >= 0 && pos.y >= 0 && pos.x < srcCoords.x2 && pos.y < srcCoords.y2)\n#endif\n{\nint src_index = mad24(pos.y, src_step, pos.x * SRCSIZE);\nWT value = convertToWT(loadpix(srcptr + src_index));\nreturn PROCESS_ELEM(value);\n}\nelse\n{\n#ifdef BORDER_CONSTANT\nreturn (WT)(0);\n#else\nint selected_col = pos.x, selected_row = pos.y;\nEXTRAPOLATE(selected_col, selected_row,\n#ifdef BORDER_ISOLATED\nsrcCoords.x1, srcCoords.y1,\n#else\n0, 0,\n#endif\nsrcCoords.x2, srcCoords.y2);\nint src_index = mad24(selected_row, src_step, selected_col * SRCSIZE);\nWT value = convertToWT(loadpix(srcptr + src_index));\nreturn PROCESS_ELEM(value);\n#endif\n}\n}\n__kernel void boxFilter(__global const uchar * srcptr, int src_step, int srcOffsetX, int srcOffsetY, int srcEndX, int srcEndY,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols\n#ifdef NORMALIZE\n, float alpha\n#endif\n)\n{\nconst struct RectCoords srcCoords = { srcOffsetX, srcOffsetY, srcEndX, srcEndY };\nint x = get_local_id(0) + (LOCAL_SIZE_X - (KERNEL_SIZE_X - 1)) * get_group_id(0) - ANCHOR_X;\nint y = get_global_id(1) * BLOCK_SIZE_Y;\nint local_id = get_local_id(0);\nWT data[KERNEL_SIZE_Y];\n__local WT sumOfCols[LOCAL_SIZE_X];\nint2 srcPos = (int2)(srcCoords.x1 + x, srcCoords.y1 + y - ANCHOR_Y);\n#pragma unroll\nfor (int sy = 0; sy < KERNEL_SIZE_Y; sy++, srcPos.y++)\ndata[sy] = readSrcPixel(srcPos, srcptr, src_step, srcCoords);\nWT tmp_sum = (WT)(0);\n#pragma unroll\nfor (int sy = 0; sy < KERNEL_SIZE_Y; sy++)\ntmp_sum += data[sy];\nsumOfCols[local_id] = tmp_sum;\nbarrier(CLK_LOCAL_MEM_FENCE);\nint dst_index = mad24(y, dst_step, mad24(x, DSTSIZE, dst_offset));\n__global DT * dst = (__global DT *)(dstptr + dst_index);\nint sy_index = 0;\nfor (int i = 0, stepY = min(rows - y, BLOCK_SIZE_Y); i < stepY; ++i)\n{\nif (local_id >= ANCHOR_X && local_id < LOCAL_SIZE_X - (KERNEL_SIZE_X - 1 - ANCHOR_X) &&\nx >= 0 && x < cols)\n{\nWT total_sum = (WT)(0);\n#pragma unroll\nfor (int sx = 0; sx < KERNEL_SIZE_X; sx++)\ntotal_sum += sumOfCols[local_id + sx - ANCHOR_X];\n#ifdef NORMALIZE\nDT dstval = convertToDT((WT)(alpha) * total_sum);\n#else\nDT dstval = convertToDT(total_sum);\n#endif\nstorepix(dstval, dst);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\ntmp_sum = sumOfCols[local_id];\ntmp_sum -= data[sy_index];\ndata[sy_index] = readSrcPixel(srcPos, srcptr, src_step, srcCoords);\nsrcPos.y++;\ntmp_sum += data[sy_index];\nsumOfCols[local_id] = tmp_sum;\nsy_index = sy_index + 1 < KERNEL_SIZE_Y ? sy_index + 1 : 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\ndst = (__global DT *)((__global uchar *)dst + dst_step);\n}\n}\n", "#define OUT_OF_RANGE -1\n#define ROUNDING_EPS 0.000001f\n#if histdims == 1\n__kernel void calcLUT(__global const uchar * histptr, int hist_step, int hist_offset, int hist_bins,\n__global int * lut, float scale, __constant float * ranges)\n{\nint x = get_global_id(0);\nfloat value = convert_float(x);\nif (value > ranges[1] || value < ranges[0])\nlut[x] = OUT_OF_RANGE;\nelse\n{\nfloat lb = ranges[0], ub = ranges[1], gap = (ub - lb) / hist_bins;\nvalue -= lb;\nint bin = convert_int_sat_rtn(value / gap + ROUNDING_EPS);\nif (bin >= hist_bins)\nlut[x] = OUT_OF_RANGE;\nelse\n{\nint hist_index = mad24(hist_step, bin, hist_offset);\n__global const float * hist = (__global const float *)(histptr + hist_index);\nlut[x] = (int)convert_uchar_sat_rte(hist[0] * scale);\n}\n}\n}\n__kernel void LUT(__global const uchar * src, int src_step, int src_offset,\n__constant int * lut,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint src_index = mad24(y, src_step, src_offset + x * scn);\nint dst_index = mad24(y, dst_step, dst_offset + x);\nint value = lut[src[src_index]];\ndst[dst_index] = value == OUT_OF_RANGE ? 0 : convert_uchar(value);\n}\n}\n#elif histdims == 2\n__kernel void calcLUT(int hist_bins, __global int * lut, int lut_offset,\n__constant float * ranges, int roffset)\n{\nint x = get_global_id(0);\nfloat value = convert_float(x);\nranges += roffset;\nlut += lut_offset;\nif (value > ranges[1] || value < ranges[0])\nlut[x] = OUT_OF_RANGE;\nelse\n{\nfloat lb = ranges[0], ub = ranges[1], gap = (ub - lb) / hist_bins;\nvalue -= lb;\nint bin = convert_int_sat_rtn(value / gap + ROUNDING_EPS);\nlut[x] = bin >= hist_bins ? OUT_OF_RANGE : bin;\n}\n}\n__kernel void LUT(__global const uchar * src1, int src1_step, int src1_offset,\n__global const uchar * src2, int src2_step, int src2_offset,\n__global const uchar * histptr, int hist_step, int hist_offset,\n__constant int * lut, float scale,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint src1_index = mad24(y, src1_step, src1_offset + x * scn1);\nint src2_index = mad24(y, src2_step, src2_offset + x * scn2);\nint dst_index = mad24(y, dst_step, dst_offset + x);\nint bin1 = lut[src1[src1_index]];\nint bin2 = lut[src2[src2_index] + 256];\ndst[dst_index] = bin1 == OUT_OF_RANGE || bin2 == OUT_OF_RANGE ? 0 :\nconvert_uchar_sat_rte(*(__global const float *)(histptr +\nmad24(hist_step, bin1, hist_offset + bin2 * (int)sizeof(float))) * scale);\n}\n}\n#else\n#error \"(nimages <= 2) should be true\"\n#endif\n", "#define TG22 0.4142135623730950488016887242097f\n#define TG67 2.4142135623730950488016887242097f\n#ifdef WITH_SOBEL\n#if cn == 1\n#define loadpix(addr) convert_floatN(*(__global const TYPE *)(addr))\n#else\n#define loadpix(addr) convert_floatN(vload3(0, (__global const TYPE *)(addr)))\n#endif\n#define storepix(value, addr) *(__global int *)(addr) = (int)(value)\n__constant int prev[4][2] = {\n{ 0, -1 },\n{ -1, 1 },\n{ -1, 0 },\n{ -1, -1 }\n};\n__constant int next[4][2] = {\n{ 0, 1 },\n{ 1, -1 },\n{ 1, 0 },\n{ 1, 1 }\n};\ninline float3 sobel(int idx, __local const floatN *smem)\n{\nfloat3 res;\nfloatN dx = fma(2, smem[idx + GRP_SIZEX + 6] - smem[idx + GRP_SIZEX + 4],\nsmem[idx + 2] - smem[idx] + smem[idx + 2 * GRP_SIZEX + 10] - smem[idx + 2 * GRP_SIZEX + 8]);\nfloatN dy = fma(2, smem[idx + 1] - smem[idx + 2 * GRP_SIZEX + 9],\nsmem[idx + 2] - smem[idx + 2 * GRP_SIZEX + 10] + smem[idx] - smem[idx + 2 * GRP_SIZEX + 8]);\n#ifdef L2GRAD\nfloatN magN = fma(dx, dx, dy * dy);\n#else\nfloatN magN = fabs(dx) + fabs(dy);\n#endif\n#if cn == 1\nres.z = magN;\nres.x = dx;\nres.y = dy;\n#else\nres.z = max(magN.x, max(magN.y, magN.z));\nif (res.z == magN.y)\n{\ndx.x = dx.y;\ndy.x = dy.y;\n}\nelse if (res.z == magN.z)\n{\ndx.x = dx.z;\ndy.x = dy.z;\n}\nres.x = dx.x;\nres.y = dy.x;\n#endif\nreturn res;\n}\n__kernel void stage1_with_sobel(__global const uchar *src, int src_step, int src_offset, int rows, int cols,\n__global uchar *map, int map_step, int map_offset,\nfloat low_thr, float high_thr)\n{\n__local floatN smem[(GRP_SIZEX + 4) * (GRP_SIZEY + 4)];\nint lidx = get_local_id(0);\nint lidy = get_local_id(1);\nint start_x = GRP_SIZEX * get_group_id(0);\nint start_y = GRP_SIZEY * get_group_id(1);\nint i = lidx + lidy * GRP_SIZEX;\nfor (int j = i;  j < (GRP_SIZEX + 4) * (GRP_SIZEY + 4); j += GRP_SIZEX * GRP_SIZEY)\n{\nint x = clamp(start_x - 2 + (j % (GRP_SIZEX + 4)), 0, cols - 1);\nint y = clamp(start_y - 2 + (j / (GRP_SIZEX + 4)), 0, rows - 1);\nsmem[j] = loadpix(src + mad24(y, src_step, mad24(x, cn * (int)sizeof(TYPE), src_offset)));\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n__local float mag[(GRP_SIZEX + 2) * (GRP_SIZEY + 2)];\nlidx++;\nlidy++;\nif (i < GRP_SIZEX + 2)\n{\nint grp_sizey = min(GRP_SIZEY + 1, rows - start_y);\nmag[i] = (sobel(i, smem)).z;\nmag[i + grp_sizey * (GRP_SIZEX + 2)] = (sobel(i + grp_sizey * (GRP_SIZEX + 4), smem)).z;\n}\nif (i < GRP_SIZEY + 2)\n{\nint grp_sizex = min(GRP_SIZEX + 1, cols - start_x);\nmag[i * (GRP_SIZEX + 2)] = (sobel(i * (GRP_SIZEX + 4), smem)).z;\nmag[i * (GRP_SIZEX + 2) + grp_sizex] = (sobel(i * (GRP_SIZEX + 4) + grp_sizex, smem)).z;\n}\nint idx = lidx + lidy * (GRP_SIZEX + 4);\ni = lidx + lidy * (GRP_SIZEX + 2);\nfloat3 res = sobel(idx, smem);\nmag[i] = res.z;\nbarrier(CLK_LOCAL_MEM_FENCE);\nint x = (int) res.x;\nint y = (int) res.y;\nint gidx = get_global_id(0);\nint gidy = get_global_id(1);\nif (gidx >= cols || gidy >= rows)\nreturn;\nfloat mag0 = mag[i];\nint value = 1;\nif (mag0 > low_thr)\n{\nint a = (y / (float)x) * TG22;\nint b = (y / (float)x) * TG67;\na = min((int)abs(a), 1) + 1;\nb = min((int)abs(b), 1);\nint dir3 = (a * b) & (((x ^ y) & 0x80000000) >> 31);\nint dir = a * b + 2 * dir3;\nfloat prev_mag = mag[(lidy + prev[dir][0]) * (GRP_SIZEX + 2) + lidx + prev[dir][1]];\nfloat next_mag = mag[(lidy + next[dir][0]) * (GRP_SIZEX + 2) + lidx + next[dir][1]] + (dir & 1);\nif (mag0 > prev_mag && mag0 >= next_mag)\n{\nvalue = (mag0 > high_thr) ? 2 : 0;\n}\n}\nstorepix(value, map + mad24(gidy, map_step, mad24(gidx, (int)sizeof(int), map_offset)));\n}\n#elif defined WITHOUT_SOBEL\n#define loadpix(addr) (__global short *)(addr)\n#define storepix(val, addr) *(__global int *)(addr) = (int)(val)\n#ifdef L2GRAD\n#define dist(x, y) ((int)(x) * (x) + (int)(y) * (y))\n#else\n#define dist(x, y) (abs(x) + abs(y))\n#endif\n__constant int prev[4][2] = {\n{ 0, -1 },\n{ -1, -1 },\n{ -1, 0 },\n{ -1, 1 }\n};\n__constant int next[4][2] = {\n{ 0, 1 },\n{ 1, 1 },\n{ 1, 0 },\n{ 1, -1 }\n};\n__kernel void stage1_without_sobel(__global const uchar *dxptr, int dx_step, int dx_offset,\n__global const uchar *dyptr, int dy_step, int dy_offset,\n__global uchar *map, int map_step, int map_offset, int rows, int cols,\nint low_thr, int high_thr)\n{\nint start_x = get_group_id(0) * GRP_SIZEX;\nint start_y = get_group_id(1) * GRP_SIZEY;\nint lidx = get_local_id(0);\nint lidy = get_local_id(1);\n__local int mag[(GRP_SIZEX + 2) * (GRP_SIZEY + 2)];\n__local short2 sigma[(GRP_SIZEX + 2) * (GRP_SIZEY + 2)];\n#pragma unroll\nfor (int i = lidx + lidy * GRP_SIZEX; i < (GRP_SIZEX + 2) * (GRP_SIZEY + 2); i += GRP_SIZEX * GRP_SIZEY)\n{\nint x = clamp(start_x - 1 + i % (GRP_SIZEX + 2), 0, cols - 1);\nint y = clamp(start_y - 1 + i / (GRP_SIZEX + 2), 0, rows - 1);\nint dx_index = mad24(y, dx_step, mad24(x, cn * (int)sizeof(short), dx_offset));\nint dy_index = mad24(y, dy_step, mad24(x, cn * (int)sizeof(short), dy_offset));\n__global short *dx = loadpix(dxptr + dx_index);\n__global short *dy = loadpix(dyptr + dy_index);\nint mag0 = dist(dx[0], dy[0]);\n#if cn > 1\nshort cdx = dx[0], cdy = dy[0];\n#pragma unroll\nfor (int j = 1; j < cn; ++j)\n{\nint mag1 = dist(dx[j], dy[j]);\nif (mag1 > mag0)\n{\nmag0 = mag1;\ncdx = dx[j];\ncdy = dy[j];\n}\n}\ndx[0] = cdx;\ndy[0] = cdy;\n#endif\nmag[i] = mag0;\nsigma[i] = (short2)(dx[0], dy[0]);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint gidx = get_global_id(0);\nint gidy = get_global_id(1);\nif (gidx >= cols || gidy >= rows)\nreturn;\nlidx++;\nlidy++;\nint mag0 = mag[lidx + lidy * (GRP_SIZEX + 2)];\nshort x = (sigma[lidx + lidy * (GRP_SIZEX + 2)]).x;\nshort y = (sigma[lidx + lidy * (GRP_SIZEX + 2)]).y;\nint value = 1;\nif (mag0 > low_thr)\n{\nint a = (y / (float)x) * TG22;\nint b = (y / (float)x) * TG67;\na = min((int)abs(a), 1) + 1;\nb = min((int)abs(b), 1);\nint dir3 = (a * b) & (((x ^ y) & 0x80000000) >> 31);\nint dir = a * b + 2 * dir3;\nint prev_mag = mag[(lidy + prev[dir][0]) * (GRP_SIZEX + 2) + lidx + prev[dir][1]];\nint next_mag = mag[(lidy + next[dir][0]) * (GRP_SIZEX + 2) + lidx + next[dir][1]] + (dir & 1);\nif (mag0 > prev_mag && mag0 >= next_mag)\n{\nvalue = (mag0 > high_thr) ? 2 : 0;\n}\n}\nstorepix(value, map + mad24(gidy, map_step, mad24(gidx, (int)sizeof(int), map_offset)));\n}\n#undef TG22\n#undef CANNY_SHIFT\n#elif defined STAGE2\n#define loadpix(addr) *(__global int *)(addr)\n#define storepix(val, addr) *(__global int *)(addr) = (int)(val)\n#define LOCAL_TOTAL (LOCAL_X*LOCAL_Y)\n#define l_stack_size (4*LOCAL_TOTAL)\n#define p_stack_size 8\n__constant short move_dir[2][8] = {\n{ -1, -1, -1, 0, 0, 1, 1, 1 },\n{ -1, 0, 1, -1, 1, -1, 0, 1 }\n};\n__kernel void stage2_hysteresis(__global uchar *map_ptr, int map_step, int map_offset, int rows, int cols)\n{\nmap_ptr += map_offset;\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI;\nint lid = get_local_id(0) + get_local_id(1) * LOCAL_X;\n__local ushort2 l_stack[l_stack_size];\n__local int l_counter;\nif (lid == 0)\nl_counter = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < cols)\n{\n__global uchar* map = map_ptr + mad24(y, map_step, x * (int)sizeof(int));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI; ++cy)\n{\nif (y < rows)\n{\nint type = loadpix(map);\nif (type == 2)\n{\nl_stack[atomic_inc(&l_counter)] = (ushort2)(x, y);\n}\ny++;\nmap += map_step;\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nushort2 p_stack[p_stack_size];\nint p_counter = 0;\nwhile(l_counter != 0)\n{\nint mod = l_counter % LOCAL_TOTAL;\nint pix_per_thr = l_counter / LOCAL_TOTAL + ((lid < mod) ? 1 : 0);\nfor (int i = 0; i < pix_per_thr; ++i)\n{\nint index = atomic_dec(&l_counter) - 1;\nif (index < 0)\ncontinue;\nushort2 pos = l_stack[ index ];\n#pragma unroll\nfor (int j = 0; j < 8; ++j)\n{\nushort posx = pos.x + move_dir[0][j];\nushort posy = pos.y + move_dir[1][j];\nif (posx < 0 || posy < 0 || posx >= cols || posy >= rows)\ncontinue;\n__global uchar *addr = map_ptr + mad24(posy, map_step, posx * (int)sizeof(int));\nint type = loadpix(addr);\nif (type == 0)\n{\np_stack[p_counter++] = (ushort2)(posx, posy);\nstorepix(2, addr);\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (l_counter < 0)\nl_counter = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nwhile (p_counter > 0)\n{\nl_stack[ atomic_inc(&l_counter) ] = p_stack[--p_counter];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\n#elif defined GET_EDGES\n__kernel void getEdges(__global const uchar *mapptr, int map_step, int map_offset, int rows, int cols,\n__global uchar *dst, int dst_step, int dst_offset)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI;\nif (x < cols)\n{\nint map_index = mad24(map_step, y, mad24(x, (int)sizeof(int), map_offset));\nint dst_index = mad24(dst_step, y, x + dst_offset);\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI; ++cy)\n{\nif (y < rows)\n{\n__global const int * map = (__global const int *)(mapptr + map_index);\ndst[dst_index] = (uchar)(-(map[0] >> 1));\ny++;\nmap_index += map_step;\ndst_index += dst_step;\n}\n}\n}\n}\n#endif\n", "#ifndef WAVE_SIZE\n#define WAVE_SIZE 1\n#endif\ninline int calc_lut(__local int* smem, int val, int tid)\n{\nsmem[tid] = val;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid == 0)\nfor (int i = 1; i < 256; ++i)\nsmem[i] += smem[i - 1];\nbarrier(CLK_LOCAL_MEM_FENCE);\nreturn smem[tid];\n}\n#ifdef CPU\ninline void reduce(volatile __local int* smem, int val, int tid)\n{\nsmem[tid] = val;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 128)\nsmem[tid] = val += smem[tid + 128];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 64)\nsmem[tid] = val += smem[tid + 64];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 32)\nsmem[tid] += smem[tid + 32];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16)\nsmem[tid] += smem[tid + 16];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 8)\nsmem[tid] += smem[tid + 8];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 4)\nsmem[tid] += smem[tid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 2)\nsmem[tid] += smem[tid + 2];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 1)\nsmem[256] = smem[tid] + smem[tid + 1];\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#else\ninline void reduce(__local volatile int* smem, int val, int tid)\n{\nsmem[tid] = val;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 128)\nsmem[tid] = val += smem[tid + 128];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 64)\nsmem[tid] = val += smem[tid + 64];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 32)\n{\nsmem[tid] += smem[tid + 32];\n#if WAVE_SIZE < 32\n} barrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16)\n{\n#endif\nsmem[tid] += smem[tid + 16];\n#if WAVE_SIZE < 16\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 8)\n{\n#endif\nsmem[tid] += smem[tid + 8];\nsmem[tid] += smem[tid + 4];\nsmem[tid] += smem[tid + 2];\nsmem[tid] += smem[tid + 1];\n}\n}\n#endif\n__kernel void calcLut(__global __const uchar * src, const int srcStep,\nconst int src_offset, __global uchar * lut,\nconst int dstStep, const int dst_offset,\nconst int2 tileSize, const int tilesX,\nconst int clipLimit, const float lutScale)\n{\n__local int smem[512];\nint tx = get_group_id(0);\nint ty = get_group_id(1);\nint tid = get_local_id(1) * get_local_size(0)\n+ get_local_id(0);\nsmem[tid] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int i = get_local_id(1); i < tileSize.y; i += get_local_size(1))\n{\n__global const uchar* srcPtr = src + mad24(ty * tileSize.y + i, srcStep, tx * tileSize.x + src_offset);\nfor (int j = get_local_id(0); j < tileSize.x; j += get_local_size(0))\n{\nconst int data = srcPtr[j];\natomic_inc(&smem[data]);\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint tHistVal = smem[tid];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (clipLimit > 0)\n{\nint clipped = 0;\nif (tHistVal > clipLimit)\n{\nclipped = tHistVal - clipLimit;\ntHistVal = clipLimit;\n}\nreduce(smem, clipped, tid);\nbarrier(CLK_LOCAL_MEM_FENCE);\n#ifdef CPU\nclipped = smem[256];\n#else\nclipped = smem[0];\n#endif\n__local int totalClipped;\nif (tid == 0)\ntotalClipped = clipped;\nbarrier(CLK_LOCAL_MEM_FENCE);\nint redistBatch = totalClipped / 256;\ntHistVal += redistBatch;\nint residual = totalClipped - redistBatch * 256;\nif (tid < residual)\n++tHistVal;\n}\nconst int lutVal = calc_lut(smem, tHistVal, tid);\nuint ires = (uint)convert_int_rte(lutScale * lutVal);\nlut[(ty * tilesX + tx) * dstStep + tid + dst_offset] =\nconvert_uchar(clamp(ires, (uint)0, (uint)255));\n}\n__kernel void transform(__global __const uchar * src, const int srcStep, const int src_offset,\n__global uchar * dst, const int dstStep, const int dst_offset,\n__global uchar * lut, const int lutStep, int lut_offset,\nconst int cols, const int rows,\nconst int2 tileSize,\nconst int tilesX, const int tilesY)\n{\nconst int x = get_global_id(0);\nconst int y = get_global_id(1);\nif (x >= cols || y >= rows)\nreturn;\nconst float tyf = (convert_float(y) / tileSize.y) - 0.5f;\nint ty1 = convert_int_rtn(tyf);\nint ty2 = ty1 + 1;\nconst float ya = tyf - ty1;\nty1 = max(ty1, 0);\nty2 = min(ty2, tilesY - 1);\nconst float txf = (convert_float(x) / tileSize.x) - 0.5f;\nint tx1 = convert_int_rtn(txf);\nint tx2 = tx1 + 1;\nconst float xa = txf - tx1;\ntx1 = max(tx1, 0);\ntx2 = min(tx2, tilesX - 1);\nconst int srcVal = src[mad24(y, srcStep, x + src_offset)];\nfloat res = 0;\nres += lut[mad24(ty1 * tilesX + tx1, lutStep, srcVal + lut_offset)] * ((1.0f - xa) * (1.0f - ya));\nres += lut[mad24(ty1 * tilesX + tx2, lutStep, srcVal + lut_offset)] * ((xa) * (1.0f - ya));\nres += lut[mad24(ty2 * tilesX + tx1, lutStep, srcVal + lut_offset)] * ((1.0f - xa) * (ya));\nres += lut[mad24(ty2 * tilesX + tx2, lutStep, srcVal + lut_offset)] * ((xa) * (ya));\nuint ires = (uint)convert_int_rte(res);\ndst[mad24(y, dstStep, x + dst_offset)] = convert_uchar(clamp(ires, (uint)0, (uint)255));\n}\n", "#ifdef BORDER_CONSTANT\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\nx = max(min(x, maxV - 1), 0); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\nif (x < 0) \\\nx -= ((x - maxV + 1) / maxV) * maxV; \\\nif (x >= maxV) \\\nx %= maxV; \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT101)\n#define EXTRAPOLATE_(x, maxV, delta) \\\n{ \\\nif (maxV == 1) \\\nx = 0; \\\nelse \\\ndo \\\n{ \\\nif ( x < 0 ) \\\nx = -x - 1 + delta; \\\nelse \\\nx = maxV - 1 - (x - maxV) - delta; \\\n} \\\nwhile (x >= maxV || x < 0); \\\n}\n#ifdef BORDER_REFLECT\n#define EXTRAPOLATE(x, maxV) EXTRAPOLATE_(x, maxV, 0)\n#else\n#define EXTRAPOLATE(x, maxV) EXTRAPOLATE_(x, maxV, 1)\n#endif\n#else\n#error No extrapolation method\n#endif\n#define THREADS 256\n__kernel void corner(__global const float * Dx, int dx_step, int dx_offset, int dx_whole_rows, int dx_whole_cols,\n__global const float * Dy, int dy_step, int dy_offset, int dy_whole_rows, int dy_whole_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols, float k)\n{\nint col = get_local_id(0);\nint gX = get_group_id(0);\nint gY = get_group_id(1);\nint gly = get_global_id(1);\nint dx_x_off = (dx_offset % dx_step) >> 2;\nint dx_y_off = dx_offset / dx_step;\nint dy_x_off = (dy_offset % dy_step) >> 2;\nint dy_y_off = dy_offset / dy_step;\nint dst_x_off = (dst_offset % dst_step) >> 2;\nint dst_y_off = dst_offset / dst_step;\nint dx_startX = gX * (THREADS-ksX+1) - anX + dx_x_off;\nint dx_startY = (gY << 1) - anY + dx_y_off;\nint dy_startX = gX * (THREADS-ksX+1) - anX + dy_x_off;\nint dy_startY = (gY << 1) - anY + dy_y_off;\nint dst_startX = gX * (THREADS-ksX+1) + dst_x_off;\nint dst_startY = (gY << 1) + dst_y_off;\nfloat data[3][ksY+1];\n__local float temp[6][THREADS];\n#ifdef BORDER_CONSTANT\nfor (int i=0; i < ksY+1; i++)\n{\nbool dx_con = dx_startX+col >= 0 && dx_startX+col < dx_whole_cols && dx_startY+i >= 0 && dx_startY+i < dx_whole_rows;\nint indexDx = mad24(dx_startY+i, dx_step>>2, dx_startX+col);\nfloat dx_s = dx_con ? Dx[indexDx] : 0.0f;\nbool dy_con = dy_startX+col >= 0 && dy_startX+col < dy_whole_cols && dy_startY+i >= 0 && dy_startY+i < dy_whole_rows;\nint indexDy = mad24(dy_startY+i, dy_step>>2, dy_startX+col);\nfloat dy_s = dy_con ? Dy[indexDy] : 0.0f;\ndata[0][i] = dx_s * dx_s;\ndata[1][i] = dx_s * dy_s;\ndata[2][i] = dy_s * dy_s;\n}\n#else\nint clamped_col = min(2*dst_cols, col);\nfor (int i=0; i < ksY+1; i++)\n{\nint dx_selected_row = dx_startY+i, dx_selected_col = dx_startX+clamped_col;\nEXTRAPOLATE(dx_selected_row, dx_whole_rows)\nEXTRAPOLATE(dx_selected_col, dx_whole_cols)\nfloat dx_s = Dx[mad24(dx_selected_row, dx_step>>2, dx_selected_col)];\nint dy_selected_row = dy_startY+i, dy_selected_col = dy_startX+clamped_col;\nEXTRAPOLATE(dy_selected_row, dy_whole_rows)\nEXTRAPOLATE(dy_selected_col, dy_whole_cols)\nfloat dy_s = Dy[mad24(dy_selected_row, dy_step>>2, dy_selected_col)];\ndata[0][i] = dx_s * dx_s;\ndata[1][i] = dx_s * dy_s;\ndata[2][i] = dy_s * dy_s;\n}\n#endif\nfloat sum0 = 0.0f, sum1 = 0.0f, sum2 = 0.0f;\nfor (int i=1; i < ksY; i++)\n{\nsum0 += data[0][i];\nsum1 += data[1][i];\nsum2 += data[2][i];\n}\nfloat sum01 = sum0 + data[0][0];\nfloat sum02 = sum0 + data[0][ksY];\ntemp[0][col] = sum01;\ntemp[1][col] = sum02;\nfloat sum11 = sum1 + data[1][0];\nfloat sum12 = sum1 + data[1][ksY];\ntemp[2][col] = sum11;\ntemp[3][col] = sum12;\nfloat sum21 = sum2 + data[2][0];\nfloat sum22 = sum2 + data[2][ksY];\ntemp[4][col] = sum21;\ntemp[5][col] = sum22;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (col < (THREADS - (ksX - 1)))\n{\ncol += anX;\nint posX = dst_startX - dst_x_off + col - anX;\nint posY = (gly << 1);\nint till = (ksX + 1) & 1;\nfloat tmp_sum[6] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\nfor (int k=0; k<6; k++)\n{\nfloat temp_sum = 0;\nfor (int i=-anX; i<=anX - till; i++)\ntemp_sum += temp[k][col+i];\ntmp_sum[k] = temp_sum;\n}\n#ifdef CORNER_HARRIS\nif (posX < dst_cols && (posY) < dst_rows)\n{\nint dst_index = mad24(dst_step, dst_startY, (int)sizeof(float) * (dst_startX + col - anX));\n*(__global float *)(dst + dst_index) =\ntmp_sum[0] * tmp_sum[4] - tmp_sum[2] * tmp_sum[2] - k * (tmp_sum[0] + tmp_sum[4]) * (tmp_sum[0] + tmp_sum[4]);\n}\nif (posX < dst_cols && (posY + 1) < dst_rows)\n{\nint dst_index = mad24(dst_step, dst_startY + 1, (int)sizeof(float) * (dst_startX + col - anX));\n*(__global float *)(dst + dst_index) =\ntmp_sum[1] * tmp_sum[5] - tmp_sum[3] * tmp_sum[3] - k * (tmp_sum[1] + tmp_sum[5]) * (tmp_sum[1] + tmp_sum[5]);\n}\n#elif defined CORNER_MINEIGENVAL\nif (posX < dst_cols && (posY) < dst_rows)\n{\nint dst_index = mad24(dst_step, dst_startY, (int)sizeof(float) * (dst_startX + col - anX));\nfloat a = tmp_sum[0] * 0.5f;\nfloat b = tmp_sum[2];\nfloat c = tmp_sum[4] * 0.5f;\n*(__global float *)(dst + dst_index) = (float)((a+c) - native_sqrt((a-c)*(a-c) + b*b));\n}\nif (posX < dst_cols && (posY + 1) < dst_rows)\n{\nint dst_index = mad24(dst_step, dst_startY + 1, (int)sizeof(float) * (dst_startX + col - anX));\nfloat a = tmp_sum[1] * 0.5f;\nfloat b = tmp_sum[3];\nfloat c = tmp_sum[5] * 0.5f;\n*(__global float *)(dst + dst_index) = (float)((a+c) - native_sqrt((a-c)*(a-c) + b*b));\n}\n#else\n#error \"No such corners type\"\n#endif\n}\n}\n", "#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, maxV)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = clamp((x), 0, (maxV)-1); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = ( (x) + (maxV) ) % (maxV); \\\n}\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min( mad24((maxV)-1,2,-(x))+1 , max((x),-(x)-1) ); \\\n}\n#elif defined BORDER_REFLECT_101 || defined BORDER_REFLECT101\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min( mad24((maxV)-1,2,-(x)), max((x),-(x)) ); \\\n}\n#else\n#error No extrapolation method\n#endif\n#define SRC(_x,_y) convert_float(((global SRCTYPE*)(Src+(_y)*src_step))[_x])\n#ifdef BORDER_CONSTANT\n#define ELEM(_x,_y,r_edge,t_edge,const_v) (_x)<0 | (_x) >= (r_edge) | (_y)<0 | (_y) >= (t_edge) ? (const_v) : SRC((_x),(_y))\n#else\n#define ELEM(_x,_y,r_edge,t_edge,const_v) SRC((_x),(_y))\n#endif\n#define DSTX(_x,_y) (((global float*)(DstX+DstXOffset+(_y)*DstXPitch))[_x])\n#define DSTY(_x,_y) (((global float*)(DstY+DstYOffset+(_y)*DstYPitch))[_x])\n#define INIT_AND_READ_LOCAL_SOURCE(width, height, fill_const, kernel_border) \\\nint srcX = x + srcOffsetX - (kernel_border); \\\nint srcY = y + srcOffsetY - (kernel_border); \\\nint xb = srcX; \\\nint yb = srcY; \\\n\\\nEXTRAPOLATE(xb, (width)); \\\nEXTRAPOLATE(yb, (height)); \\\nlsmem[liy][lix] = ELEM(xb, yb, (width), (height), (fill_const) ); \\\n\\\nif(lix < ((kernel_border)*2)) \\\n{ \\\nint xb = srcX+BLK_X; \\\nEXTRAPOLATE(xb,(width)); \\\nlsmem[liy][lix+BLK_X] = ELEM(xb, yb, (width), (height), (fill_const) ); \\\n} \\\nif(liy< ((kernel_border)*2)) \\\n{ \\\nint yb = srcY+BLK_Y; \\\nEXTRAPOLATE(yb, (height)); \\\nlsmem[liy+BLK_Y][lix] = ELEM(xb, yb, (width), (height), (fill_const) ); \\\n} \\\nif(lix<((kernel_border)*2) && liy<((kernel_border)*2)) \\\n{ \\\nint xb = srcX+BLK_X; \\\nint yb = srcY+BLK_Y; \\\nEXTRAPOLATE(xb,(width)); \\\nEXTRAPOLATE(yb,(height)); \\\nlsmem[liy+BLK_Y][lix+BLK_X] = ELEM(xb, yb, (width), (height), (fill_const) ); \\\n}\n__kernel void sobel3(__global const uchar * Src, int src_step, int srcOffsetX, int srcOffsetY,\n__global uchar * DstX, int DstXPitch, int DstXOffset,\n__global uchar * DstY, int DstYPitch, int DstYOffset, int dstHeight, int dstWidth,\nint height, int width, float scale)\n{\n__local float lsmem[BLK_Y+2][BLK_X+2];\nint lix = get_local_id(0);\nint liy = get_local_id(1);\nint x = (int)get_global_id(0);\nint y = (int)get_global_id(1);\nINIT_AND_READ_LOCAL_SOURCE(width, height, 0, 1)\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( x >= dstWidth || y >=dstHeight )  return;\nfloat u1 = lsmem[liy][lix];\nfloat u2 = lsmem[liy][lix+1];\nfloat u3 = lsmem[liy][lix+2];\nfloat m1 = lsmem[liy+1][lix];\nfloat m3 = lsmem[liy+1][lix+2];\nfloat b1 = lsmem[liy+2][lix];\nfloat b2 = lsmem[liy+2][lix+1];\nfloat b3 = lsmem[liy+2][lix+2];\n#ifdef SCHARR\nDSTX(x,y) = mad(10.0f, m3 - m1, 3.0f * (u3 - u1 + b3 - b1)) * scale;\nDSTY(x,y) = mad(10.0f, b2 - u2, 3.0f * (b1 - u1 + b3 - u3)) * scale;\n#else\nDSTX(x,y) = mad(2.0f, m3 - m1, u3 - u1 + b3 - b1) * scale;\nDSTY(x,y) = mad(2.0f, b2 - u2, b1 - u1 + b3 - u3) * scale;\n#endif\n}\n__kernel void sobel5(__global const uchar * Src, int src_step, int srcOffsetX, int srcOffsetY,\n__global uchar * DstX, int DstXPitch, int DstXOffset,\n__global uchar * DstY, int DstYPitch, int DstYOffset, int dstHeight, int dstWidth,\nint height, int width, float scale)\n{\n__local float lsmem[BLK_Y+4][BLK_X+4];\nint lix = get_local_id(0);\nint liy = get_local_id(1);\nint x = (int)get_global_id(0);\nint y = (int)get_global_id(1);\nINIT_AND_READ_LOCAL_SOURCE(width, height, 0, 2)\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( x >= dstWidth || y >=dstHeight )  return;\nfloat t1 = lsmem[liy][lix];\nfloat t2 = lsmem[liy][lix+1];\nfloat t3 = lsmem[liy][lix+2];\nfloat t4 = lsmem[liy][lix+3];\nfloat t5 = lsmem[liy][lix+4];\nfloat u1 = lsmem[liy+1][lix];\nfloat u2 = lsmem[liy+1][lix+1];\nfloat u3 = lsmem[liy+1][lix+2];\nfloat u4 = lsmem[liy+1][lix+3];\nfloat u5 = lsmem[liy+1][lix+4];\nfloat m1 = lsmem[liy+2][lix];\nfloat m2 = lsmem[liy+2][lix+1];\nfloat m4 = lsmem[liy+2][lix+3];\nfloat m5 = lsmem[liy+2][lix+4];\nfloat l1 = lsmem[liy+3][lix];\nfloat l2 = lsmem[liy+3][lix+1];\nfloat l3 = lsmem[liy+3][lix+2];\nfloat l4 = lsmem[liy+3][lix+3];\nfloat l5 = lsmem[liy+3][lix+4];\nfloat b1 = lsmem[liy+4][lix];\nfloat b2 = lsmem[liy+4][lix+1];\nfloat b3 = lsmem[liy+4][lix+2];\nfloat b4 = lsmem[liy+4][lix+3];\nfloat b5 = lsmem[liy+4][lix+4];\nDSTX(x,y) = scale *\nmad(12.0f, m4 - m2,\nmad(6.0f, m5 - m1,\nmad(8.0f, u4 - u2 + l4 - l2,\nmad(4.0f, u5 - u1 + l5 - l1,\nmad(2.0f, t4 - t2 + b4 - b2, t5 - t1 + b5 - b1 )\n)\n)\n)\n);\nDSTY(x,y) = scale *\nmad(12.0f, l3 - u3,\nmad(6.0f, b3 - t3,\nmad(8.0f, l2 - u2 + l4 - u4,\nmad(4.0f, b2 - t2 + b4 - t4,\nmad(2.0f, l1 - u1 + l5 - u5, b1 - t1 + b5 - t5 )\n)\n)\n)\n);\n}\n__kernel void sobel7(__global const uchar * Src, int src_step, int srcOffsetX, int srcOffsetY,\n__global uchar * DstX, int DstXPitch, int DstXOffset,\n__global uchar * DstY, int DstYPitch, int DstYOffset, int dstHeight, int dstWidth,\nint height, int width, float scale)\n{\n__local float lsmem[BLK_Y+6][BLK_X+6];\nint lix = get_local_id(0);\nint liy = get_local_id(1);\nint x = (int)get_global_id(0);\nint y = (int)get_global_id(1);\nINIT_AND_READ_LOCAL_SOURCE(width, height, 0, 3)\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( x >= dstWidth || y >=dstHeight )  return;\nfloat tt1 = lsmem[liy][lix];\nfloat tt2 = lsmem[liy][lix+1];\nfloat tt3 = lsmem[liy][lix+2];\nfloat tt4 = lsmem[liy][lix+3];\nfloat tt5 = lsmem[liy][lix+4];\nfloat tt6 = lsmem[liy][lix+5];\nfloat tt7 = lsmem[liy][lix+6];\nfloat t1 = lsmem[liy+1][lix];\nfloat t2 = lsmem[liy+1][lix+1];\nfloat t3 = lsmem[liy+1][lix+2];\nfloat t4 = lsmem[liy+1][lix+3];\nfloat t5 = lsmem[liy+1][lix+4];\nfloat t6 = lsmem[liy+1][lix+5];\nfloat t7 = lsmem[liy+1][lix+6];\nfloat u1 = lsmem[liy+2][lix];\nfloat u2 = lsmem[liy+2][lix+1];\nfloat u3 = lsmem[liy+2][lix+2];\nfloat u4 = lsmem[liy+2][lix+3];\nfloat u5 = lsmem[liy+2][lix+4];\nfloat u6 = lsmem[liy+2][lix+5];\nfloat u7 = lsmem[liy+2][lix+6];\nfloat m1 = lsmem[liy+3][lix];\nfloat m2 = lsmem[liy+3][lix+1];\nfloat m3 = lsmem[liy+3][lix+2];\nfloat m5 = lsmem[liy+3][lix+4];\nfloat m6 = lsmem[liy+3][lix+5];\nfloat m7 = lsmem[liy+3][lix+6];\nfloat l1 = lsmem[liy+4][lix];\nfloat l2 = lsmem[liy+4][lix+1];\nfloat l3 = lsmem[liy+4][lix+2];\nfloat l4 = lsmem[liy+4][lix+3];\nfloat l5 = lsmem[liy+4][lix+4];\nfloat l6 = lsmem[liy+4][lix+5];\nfloat l7 = lsmem[liy+4][lix+6];\nfloat b1 = lsmem[liy+5][lix];\nfloat b2 = lsmem[liy+5][lix+1];\nfloat b3 = lsmem[liy+5][lix+2];\nfloat b4 = lsmem[liy+5][lix+3];\nfloat b5 = lsmem[liy+5][lix+4];\nfloat b6 = lsmem[liy+5][lix+5];\nfloat b7 = lsmem[liy+5][lix+6];\nfloat bb1 = lsmem[liy+6][lix];\nfloat bb2 = lsmem[liy+6][lix+1];\nfloat bb3 = lsmem[liy+6][lix+2];\nfloat bb4 = lsmem[liy+6][lix+3];\nfloat bb5 = lsmem[liy+6][lix+4];\nfloat bb6 = lsmem[liy+6][lix+5];\nfloat bb7 = lsmem[liy+6][lix+6];\nDSTX(x,y) = scale *\nmad(100.0f, m5 - m3,\nmad(80.0f, m6 - m2,\nmad(20.0f, m7 - m1,\nmad(75.0f, u5 - u3 + l5 - l3,\nmad(60.0f, u6 - u2 + l6 - l2,\nmad(15.0f, u7 - u1 + l7 - l1,\nmad(30.0f, t5 - t3 + b5 - b3,\nmad(24.0f, t6 - t2 + b6 - b2,\nmad(6.0f, t7 - t1 + b7 - b1,\nmad(5.0f, tt5 - tt3 + bb5 - bb3,\nmad(4.0f, tt6 - tt2 + bb6 - bb2, tt7 - tt1 + bb7 - bb1 )\n)\n)\n)\n)\n)\n)\n)\n)\n)\n);\nDSTY(x,y) = scale *\nmad(100.0f, l4 - u4,\nmad(80.0f, b4 - t4,\nmad(20.0f, bb4 - tt4,\nmad(75.0f, l5 - u5 + l3 - u3,\nmad(60.0f, b5 - t5 + b3 - t3,\nmad(15.0f, bb5 - tt5 + bb3 - tt3,\nmad(30.0f, l6 - u6 + l2 - u2,\nmad(24.0f, b6 - t6 + b2 - t2,\nmad(6.0f, bb6 - tt6 + bb2 - tt2,\nmad(5.0f, l7 - u7 + l1 - u1,\nmad(4.0f, b7 - t7 + b1 - t1, bb7 - tt7 + bb1 - tt1 )\n)\n)\n)\n)\n)\n)\n)\n)\n)\n);\n}\n", "#if depth == 0\n#define DATA_TYPE uchar\n#define MAX_NUM  255\n#define HALF_MAX 128\n#define COEFF_TYPE int\n#define SAT_CAST(num) convert_uchar_sat(num)\n#define DEPTH_0\n#elif depth == 2\n#define DATA_TYPE ushort\n#define MAX_NUM  65535\n#define HALF_MAX 32768\n#define COEFF_TYPE int\n#define SAT_CAST(num) convert_ushort_sat(num)\n#define DEPTH_2\n#elif depth == 5\n#define DATA_TYPE float\n#define MAX_NUM  1.0f\n#define HALF_MAX 0.5f\n#define COEFF_TYPE float\n#define SAT_CAST(num) (num)\n#define DEPTH_5\n#else\n#error \"invalid depth: should be 0 (CV_8U), 2 (CV_16U) or 5 (CV_32F)\"\n#endif\n#define CV_DESCALE(x,n) (((x) + (1 << ((n)-1))) >> (n))\nenum\n{\nyuv_shift  = 14,\nxyz_shift  = 12,\nhsv_shift  = 12,\nR2Y        = 4899,\nG2Y        = 9617,\nB2Y        = 1868,\nBLOCK_SIZE = 256\n};\n#define scnbytes ((int)sizeof(DATA_TYPE)*scn)\n#define dcnbytes ((int)sizeof(DATA_TYPE)*dcn)\n#ifndef hscale\n#define hscale 0\n#endif\n#ifndef hrange\n#define hrange 0\n#endif\n#if bidx == 0\n#define R_COMP z\n#define G_COMP y\n#define B_COMP x\n#elif bidx == 2\n#define R_COMP x\n#define G_COMP y\n#define B_COMP z\n#elif bidx == 3\n#define R_COMP w\n#define G_COMP w\n#define B_COMP w\n#endif\n#ifndef uidx\n#define uidx 0\n#endif\n#ifndef yidx\n#define yidx 0\n#endif\n#ifndef PIX_PER_WI_X\n#define PIX_PER_WI_X 1\n#endif\n#define __CAT(x, y) x##y\n#define CAT(x, y) __CAT(x, y)\n#define DATA_TYPE_4 CAT(DATA_TYPE, 4)\n__kernel void RGB2Gray(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE* src = (__global const DATA_TYPE*)(srcptr + src_index);\n__global DATA_TYPE* dst = (__global DATA_TYPE*)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\n#ifdef DEPTH_5\ndst[0] = fma(src_pix.B_COMP, 0.114f, fma(src_pix.G_COMP, 0.587f, src_pix.R_COMP * 0.299f));\n#else\ndst[0] = (DATA_TYPE)CV_DESCALE(mad24(src_pix.B_COMP, B2Y, mad24(src_pix.G_COMP, G2Y, mul24(src_pix.R_COMP, R2Y))), yuv_shift);\n#endif\n++y;\nsrc_index += src_step;\ndst_index += dst_step;\n}\n}\n}\n}\n__kernel void Gray2RGB(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE* src = (__global const DATA_TYPE*)(srcptr + src_index);\n__global DATA_TYPE* dst = (__global DATA_TYPE*)(dstptr + dst_index);\nDATA_TYPE val = src[0];\n#if dcn == 3 || defined DEPTH_5\ndst[0] = dst[1] = dst[2] = val;\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n#else\n*(__global DATA_TYPE_4 *)dst = (DATA_TYPE_4)(val, val, val, MAX_NUM);\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__constant float c_RGB2YUVCoeffs_f[5]  = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };\n__constant int   c_RGB2YUVCoeffs_i[5]  = { B2Y, G2Y, R2Y, 8061, 14369 };\n__kernel void RGB2YUV(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dt_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dt_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE* src = (__global const DATA_TYPE*)(srcptr + src_index);\n__global DATA_TYPE* dst = (__global DATA_TYPE*)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\nDATA_TYPE b = src_pix.B_COMP, g = src_pix.G_COMP, r = src_pix.R_COMP;\n#ifdef DEPTH_5\n__constant float * coeffs = c_RGB2YUVCoeffs_f;\nconst DATA_TYPE Y = fma(b, coeffs[0], fma(g, coeffs[1], r * coeffs[2]));\nconst DATA_TYPE U = fma(b - Y, coeffs[3], HALF_MAX);\nconst DATA_TYPE V = fma(r - Y, coeffs[4], HALF_MAX);\n#else\n__constant int * coeffs = c_RGB2YUVCoeffs_i;\nconst int delta = HALF_MAX * (1 << yuv_shift);\nconst int Y = CV_DESCALE(mad24(b, coeffs[0], mad24(g, coeffs[1], mul24(r, coeffs[2]))), yuv_shift);\nconst int U = CV_DESCALE(mad24(b - Y, coeffs[3], delta), yuv_shift);\nconst int V = CV_DESCALE(mad24(r - Y, coeffs[4], delta), yuv_shift);\n#endif\ndst[0] = SAT_CAST( Y );\ndst[1] = SAT_CAST( U );\ndst[2] = SAT_CAST( V );\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__constant float c_YUV2RGBCoeffs_f[4] = { 2.032f, -0.395f, -0.581f, 1.140f };\n__constant int   c_YUV2RGBCoeffs_i[4] = { 33292, -6472, -9519, 18678 };\n__kernel void YUV2RGB(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dt_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dt_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE* src = (__global const DATA_TYPE*)(srcptr + src_index);\n__global DATA_TYPE* dst = (__global DATA_TYPE*)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\nDATA_TYPE Y = src_pix.x, U = src_pix.y, V = src_pix.z;\n#ifdef DEPTH_5\n__constant float * coeffs = c_YUV2RGBCoeffs_f;\nfloat r = fma(V - HALF_MAX, coeffs[3], Y);\nfloat g = fma(V - HALF_MAX, coeffs[2], fma(U - HALF_MAX, coeffs[1], Y));\nfloat b = fma(U - HALF_MAX, coeffs[0], Y);\n#else\n__constant int * coeffs = c_YUV2RGBCoeffs_i;\nconst int r = Y + CV_DESCALE(mul24(V - HALF_MAX, coeffs[3]), yuv_shift);\nconst int g = Y + CV_DESCALE(mad24(V - HALF_MAX, coeffs[2], mul24(U - HALF_MAX, coeffs[1])), yuv_shift);\nconst int b = Y + CV_DESCALE(mul24(U - HALF_MAX, coeffs[0]), yuv_shift);\n#endif\ndst[bidx] = SAT_CAST( b );\ndst[1] = SAT_CAST( g );\ndst[bidx^2] = SAT_CAST( r );\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__constant float c_YUV2RGBCoeffs_420[5] = { 1.163999557f, 2.017999649f, -0.390999794f,\n-0.812999725f, 1.5959997177f };\n__kernel void YUV2RGB_NVx(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dt_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols / 2)\n{\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows / 2 )\n{\n__global const uchar* ysrc = srcptr + mad24(y << 1, src_step, (x << 1) + src_offset);\n__global const uchar* usrc = srcptr + mad24(rows + y, src_step, (x << 1) + src_offset);\n__global uchar*       dst1 = dstptr + mad24(y << 1, dst_step, mad24(x, dcn<<1, dt_offset));\n__global uchar*       dst2 = dst1 + dst_step;\nfloat Y1 = ysrc[0];\nfloat Y2 = ysrc[1];\nfloat Y3 = ysrc[src_step];\nfloat Y4 = ysrc[src_step + 1];\nfloat U  = ((float)usrc[uidx]) - HALF_MAX;\nfloat V  = ((float)usrc[1-uidx]) - HALF_MAX;\n__constant float* coeffs = c_YUV2RGBCoeffs_420;\nfloat ruv = fma(coeffs[4], V, 0.5f);\nfloat guv = fma(coeffs[3], V, fma(coeffs[2], U, 0.5f));\nfloat buv = fma(coeffs[1], U, 0.5f);\nY1 = max(0.f, Y1 - 16.f) * coeffs[0];\ndst1[2 - bidx] = convert_uchar_sat(Y1 + ruv);\ndst1[1]        = convert_uchar_sat(Y1 + guv);\ndst1[bidx]     = convert_uchar_sat(Y1 + buv);\n#if dcn == 4\ndst1[3]        = 255;\n#endif\nY2 = max(0.f, Y2 - 16.f) * coeffs[0];\ndst1[dcn + 2 - bidx] = convert_uchar_sat(Y2 + ruv);\ndst1[dcn + 1]        = convert_uchar_sat(Y2 + guv);\ndst1[dcn + bidx]     = convert_uchar_sat(Y2 + buv);\n#if dcn == 4\ndst1[7]        = 255;\n#endif\nY3 = max(0.f, Y3 - 16.f) * coeffs[0];\ndst2[2 - bidx] = convert_uchar_sat(Y3 + ruv);\ndst2[1]        = convert_uchar_sat(Y3 + guv);\ndst2[bidx]     = convert_uchar_sat(Y3 + buv);\n#if dcn == 4\ndst2[3]        = 255;\n#endif\nY4 = max(0.f, Y4 - 16.f) * coeffs[0];\ndst2[dcn + 2 - bidx] = convert_uchar_sat(Y4 + ruv);\ndst2[dcn + 1]        = convert_uchar_sat(Y4 + guv);\ndst2[dcn + bidx]     = convert_uchar_sat(Y4 + buv);\n#if dcn == 4\ndst2[7]        = 255;\n#endif\n}\n++y;\n}\n}\n}\n__kernel void YUV2RGB_YV12_IYUV(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dt_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols / 2)\n{\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows / 2 )\n{\n__global const uchar* ysrc = srcptr + mad24(y << 1, src_step, (x << 1) + src_offset);\n__global uchar*       dst1 = dstptr + mad24(y << 1, dst_step, x * (dcn<<1) + dt_offset);\n__global uchar*       dst2 = dst1 + dst_step;\nfloat Y1 = ysrc[0];\nfloat Y2 = ysrc[1];\nfloat Y3 = ysrc[src_step];\nfloat Y4 = ysrc[src_step + 1];\n#ifdef SRC_CONT\n__global const uchar* uvsrc = srcptr + mad24(rows, src_step, src_offset);\nint u_ind = mad24(y, cols >> 1, x);\nfloat uv[2] = { ((float)uvsrc[u_ind]) - HALF_MAX, ((float)uvsrc[u_ind + ((rows * cols) >> 2)]) - HALF_MAX };\n#else\nint vsteps[2] = { cols >> 1, src_step - (cols >> 1)};\n__global const uchar* usrc = srcptr + mad24(rows + (y>>1), src_step, src_offset + (y%2)*(cols >> 1) + x);\n__global const uchar* vsrc = usrc + mad24(rows >> 2, src_step, rows % 4 ? vsteps[y%2] : 0);\nfloat uv[2] = { ((float)usrc[0]) - HALF_MAX, ((float)vsrc[0]) - HALF_MAX };\n#endif\nfloat U = uv[uidx];\nfloat V = uv[1-uidx];\n__constant float* coeffs = c_YUV2RGBCoeffs_420;\nfloat ruv = fma(coeffs[4], V, 0.5f);\nfloat guv = fma(coeffs[3], V, fma(coeffs[2], U, 0.5f));\nfloat buv = fma(coeffs[1], U, 0.5f);\nY1 = max(0.f, Y1 - 16.f) * coeffs[0];\ndst1[2 - bidx] = convert_uchar_sat(Y1 + ruv);\ndst1[1]        = convert_uchar_sat(Y1 + guv);\ndst1[bidx]     = convert_uchar_sat(Y1 + buv);\n#if dcn == 4\ndst1[3]        = 255;\n#endif\nY2 = max(0.f, Y2 - 16.f) * coeffs[0];\ndst1[dcn + 2 - bidx] = convert_uchar_sat(Y2 + ruv);\ndst1[dcn + 1]        = convert_uchar_sat(Y2 + guv);\ndst1[dcn + bidx]     = convert_uchar_sat(Y2 + buv);\n#if dcn == 4\ndst1[7]        = 255;\n#endif\nY3 = max(0.f, Y3 - 16.f) * coeffs[0];\ndst2[2 - bidx] = convert_uchar_sat(Y3 + ruv);\ndst2[1]        = convert_uchar_sat(Y3 + guv);\ndst2[bidx]     = convert_uchar_sat(Y3 + buv);\n#if dcn == 4\ndst2[3]        = 255;\n#endif\nY4 = max(0.f, Y4 - 16.f) * coeffs[0];\ndst2[dcn + 2 - bidx] = convert_uchar_sat(Y4 + ruv);\ndst2[dcn + 1]        = convert_uchar_sat(Y4 + guv);\ndst2[dcn + bidx]     = convert_uchar_sat(Y4 + buv);\n#if dcn == 4\ndst2[7]        = 255;\n#endif\n}\n++y;\n}\n}\n}\n__constant float c_RGB2YUVCoeffs_420[8] = { 0.256999969f, 0.50399971f, 0.09799957f, -0.1479988098f, -0.2909994125f,\n0.438999176f, -0.3679990768f, -0.0709991455f };\n__kernel void RGB2YUV_YV12_IYUV(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0) * PIX_PER_WI_X;\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols/2)\n{\nint src_index  = mad24(y << 1, src_step, mad24(x << 1, scn, src_offset));\nint ydst_index = mad24(y << 1, dst_step, (x << 1) + dst_offset);\nint y_rows = rows / 3 * 2;\nint vsteps[2] = { cols >> 1, dst_step - (cols >> 1)};\n__constant float* coeffs = c_RGB2YUVCoeffs_420;\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows / 3)\n{\n__global const uchar* src1 = srcptr + src_index;\n__global const uchar* src2 = src1 + src_step;\n__global uchar* ydst1 = dstptr + ydst_index;\n__global uchar* ydst2 = ydst1 + dst_step;\n__global uchar* udst = dstptr + mad24(y_rows + (y>>1), dst_step, dst_offset + (y%2)*(cols >> 1) + x);\n__global uchar* vdst = udst + mad24(y_rows >> 2, dst_step, y_rows % 4 ? vsteps[y%2] : 0);\n#if PIX_PER_WI_X == 2\nint s11 = *((__global const int*) src1);\nint s12 = *((__global const int*) src1 + 1);\nint s13 = *((__global const int*) src1 + 2);\n#if scn == 4\nint s14 = *((__global const int*) src1 + 3);\n#endif\nint s21 = *((__global const int*) src2);\nint s22 = *((__global const int*) src2 + 1);\nint s23 = *((__global const int*) src2 + 2);\n#if scn == 4\nint s24 = *((__global const int*) src2 + 3);\n#endif\nfloat src_pix1[scn * 4], src_pix2[scn * 4];\n*((float4*) src_pix1)     = convert_float4(as_uchar4(s11));\n*((float4*) src_pix1 + 1) = convert_float4(as_uchar4(s12));\n*((float4*) src_pix1 + 2) = convert_float4(as_uchar4(s13));\n#if scn == 4\n*((float4*) src_pix1 + 3) = convert_float4(as_uchar4(s14));\n#endif\n*((float4*) src_pix2)     = convert_float4(as_uchar4(s21));\n*((float4*) src_pix2 + 1) = convert_float4(as_uchar4(s22));\n*((float4*) src_pix2 + 2) = convert_float4(as_uchar4(s23));\n#if scn == 4\n*((float4*) src_pix2 + 3) = convert_float4(as_uchar4(s24));\n#endif\nuchar4 y1, y2;\ny1.x = convert_uchar_sat(fma(coeffs[0], src_pix1[      2-bidx], fma(coeffs[1], src_pix1[      1], fma(coeffs[2], src_pix1[      bidx], 16.5f))));\ny1.y = convert_uchar_sat(fma(coeffs[0], src_pix1[  scn+2-bidx], fma(coeffs[1], src_pix1[  scn+1], fma(coeffs[2], src_pix1[  scn+bidx], 16.5f))));\ny1.z = convert_uchar_sat(fma(coeffs[0], src_pix1[2*scn+2-bidx], fma(coeffs[1], src_pix1[2*scn+1], fma(coeffs[2], src_pix1[2*scn+bidx], 16.5f))));\ny1.w = convert_uchar_sat(fma(coeffs[0], src_pix1[3*scn+2-bidx], fma(coeffs[1], src_pix1[3*scn+1], fma(coeffs[2], src_pix1[3*scn+bidx], 16.5f))));\ny2.x = convert_uchar_sat(fma(coeffs[0], src_pix2[      2-bidx], fma(coeffs[1], src_pix2[      1], fma(coeffs[2], src_pix2[      bidx], 16.5f))));\ny2.y = convert_uchar_sat(fma(coeffs[0], src_pix2[  scn+2-bidx], fma(coeffs[1], src_pix2[  scn+1], fma(coeffs[2], src_pix2[  scn+bidx], 16.5f))));\ny2.z = convert_uchar_sat(fma(coeffs[0], src_pix2[2*scn+2-bidx], fma(coeffs[1], src_pix2[2*scn+1], fma(coeffs[2], src_pix2[2*scn+bidx], 16.5f))));\ny2.w = convert_uchar_sat(fma(coeffs[0], src_pix2[3*scn+2-bidx], fma(coeffs[1], src_pix2[3*scn+1], fma(coeffs[2], src_pix2[3*scn+bidx], 16.5f))));\n*((__global int*) ydst1) = as_int(y1);\n*((__global int*) ydst2) = as_int(y2);\nfloat uv[4] = { fma(coeffs[3], src_pix1[      2-bidx], fma(coeffs[4], src_pix1[      1], fma(coeffs[5], src_pix1[      bidx], 128.5f))),\nfma(coeffs[5], src_pix1[      2-bidx], fma(coeffs[6], src_pix1[      1], fma(coeffs[7], src_pix1[      bidx], 128.5f))),\nfma(coeffs[3], src_pix1[2*scn+2-bidx], fma(coeffs[4], src_pix1[2*scn+1], fma(coeffs[5], src_pix1[2*scn+bidx], 128.5f))),\nfma(coeffs[5], src_pix1[2*scn+2-bidx], fma(coeffs[6], src_pix1[2*scn+1], fma(coeffs[7], src_pix1[2*scn+bidx], 128.5f))) };\nudst[0] = convert_uchar_sat(uv[uidx]    );\nvdst[0] = convert_uchar_sat(uv[1 - uidx]);\nudst[1] = convert_uchar_sat(uv[2 + uidx]);\nvdst[1] = convert_uchar_sat(uv[3 - uidx]);\n#else\nfloat4 src_pix1 = convert_float4(vload4(0, src1));\nfloat4 src_pix2 = convert_float4(vload4(0, src1+scn));\nfloat4 src_pix3 = convert_float4(vload4(0, src2));\nfloat4 src_pix4 = convert_float4(vload4(0, src2+scn));\nydst1[0] = convert_uchar_sat(fma(coeffs[0], src_pix1.R_COMP, fma(coeffs[1], src_pix1.G_COMP, fma(coeffs[2], src_pix1.B_COMP, 16.5f))));\nydst1[1] = convert_uchar_sat(fma(coeffs[0], src_pix2.R_COMP, fma(coeffs[1], src_pix2.G_COMP, fma(coeffs[2], src_pix2.B_COMP, 16.5f))));\nydst2[0] = convert_uchar_sat(fma(coeffs[0], src_pix3.R_COMP, fma(coeffs[1], src_pix3.G_COMP, fma(coeffs[2], src_pix3.B_COMP, 16.5f))));\nydst2[1] = convert_uchar_sat(fma(coeffs[0], src_pix4.R_COMP, fma(coeffs[1], src_pix4.G_COMP, fma(coeffs[2], src_pix4.B_COMP, 16.5f))));\nfloat uv[2] = { fma(coeffs[3], src_pix1.R_COMP, fma(coeffs[4], src_pix1.G_COMP, fma(coeffs[5], src_pix1.B_COMP, 128.5f))),\nfma(coeffs[5], src_pix1.R_COMP, fma(coeffs[6], src_pix1.G_COMP, fma(coeffs[7], src_pix1.B_COMP, 128.5f))) };\nudst[0] = convert_uchar_sat(uv[uidx]  );\nvdst[0] = convert_uchar_sat(uv[1-uidx]);\n#endif\n++y;\nsrc_index += 2*src_step;\nydst_index += 2*dst_step;\n}\n}\n}\n}\n__kernel void YUV2RGB_422(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols / 2)\n{\n__global const uchar* src = srcptr + mad24(y, src_step, (x << 2) + src_offset);\n__global uchar*       dst = dstptr + mad24(y, dst_step, mad24(x << 1, dcn, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows )\n{\n__constant float* coeffs = c_YUV2RGBCoeffs_420;\n#ifndef USE_OPTIMIZED_LOAD\nfloat U = ((float) src[uidx]) - HALF_MAX;\nfloat V = ((float) src[(2 + uidx) % 4]) - HALF_MAX;\nfloat y00 = max(0.f, ((float) src[yidx]) - 16.f) * coeffs[0];\nfloat y01 = max(0.f, ((float) src[yidx + 2]) - 16.f) * coeffs[0];\n#else\nint load_src = *((__global int*) src);\nfloat vec_src[4] = { load_src & 0xff, (load_src >> 8) & 0xff, (load_src >> 16) & 0xff, (load_src >> 24) & 0xff};\nfloat U = vec_src[uidx] - HALF_MAX;\nfloat V = vec_src[(2 + uidx) % 4] - HALF_MAX;\nfloat y00 = max(0.f, vec_src[yidx] - 16.f) * coeffs[0];\nfloat y01 = max(0.f, vec_src[yidx + 2] - 16.f) * coeffs[0];\n#endif\nfloat ruv = fma(coeffs[4], V, 0.5f);\nfloat guv = fma(coeffs[3], V, fma(coeffs[2], U, 0.5f));\nfloat buv = fma(coeffs[1], U, 0.5f);\ndst[2 - bidx] = convert_uchar_sat(y00 + ruv);\ndst[1]        = convert_uchar_sat(y00 + guv);\ndst[bidx]     = convert_uchar_sat(y00 + buv);\n#if dcn == 4\ndst[3]        = 255;\n#endif\ndst[dcn + 2 - bidx] = convert_uchar_sat(y01 + ruv);\ndst[dcn + 1]        = convert_uchar_sat(y01 + guv);\ndst[dcn + bidx]     = convert_uchar_sat(y01 + buv);\n#if dcn == 4\ndst[7]        = 255;\n#endif\n}\n++y;\nsrc += src_step;\ndst += dst_step;\n}\n}\n}\n__constant float c_RGB2YCrCbCoeffs_f[5] = {0.299f, 0.587f, 0.114f, 0.713f, 0.564f};\n__constant int   c_RGB2YCrCbCoeffs_i[5] = {R2Y, G2Y, B2Y, 11682, 9241};\n__kernel void RGB2YCrCb(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dt_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dt_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE* src = (__global const DATA_TYPE*)(srcptr + src_index);\n__global DATA_TYPE* dst = (__global DATA_TYPE*)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\nDATA_TYPE b = src_pix.B_COMP, g = src_pix.G_COMP, r = src_pix.R_COMP;\n#ifdef DEPTH_5\n__constant float * coeffs = c_RGB2YCrCbCoeffs_f;\nDATA_TYPE Y = fma(b, coeffs[2], fma(g, coeffs[1], r * coeffs[0]));\nDATA_TYPE Cr = fma(r - Y, coeffs[3], HALF_MAX);\nDATA_TYPE Cb = fma(b - Y, coeffs[4], HALF_MAX);\n#else\n__constant int * coeffs = c_RGB2YCrCbCoeffs_i;\nint delta = HALF_MAX * (1 << yuv_shift);\nint Y =  CV_DESCALE(mad24(b, coeffs[2], mad24(g, coeffs[1], mul24(r, coeffs[0]))), yuv_shift);\nint Cr = CV_DESCALE(mad24(r - Y, coeffs[3], delta), yuv_shift);\nint Cb = CV_DESCALE(mad24(b - Y, coeffs[4], delta), yuv_shift);\n#endif\ndst[0] = SAT_CAST( Y );\ndst[1] = SAT_CAST( Cr );\ndst[2] = SAT_CAST( Cb );\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__constant float c_YCrCb2RGBCoeffs_f[4] = { 1.403f, -0.714f, -0.344f, 1.773f };\n__constant int   c_YCrCb2RGBCoeffs_i[4] = { 22987, -11698, -5636, 29049 };\n__kernel void YCrCb2RGB(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE * srcptr = (__global const DATA_TYPE*)(src + src_index);\n__global DATA_TYPE * dstptr = (__global DATA_TYPE*)(dst + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, srcptr);\nDATA_TYPE yp = src_pix.x, cr = src_pix.y, cb = src_pix.z;\n#ifdef DEPTH_5\n__constant float * coeff = c_YCrCb2RGBCoeffs_f;\nfloat r = fma(coeff[0], cr - HALF_MAX, yp);\nfloat g = fma(coeff[1], cr - HALF_MAX, fma(coeff[2], cb - HALF_MAX, yp));\nfloat b = fma(coeff[3], cb - HALF_MAX, yp);\n#else\n__constant int * coeff = c_YCrCb2RGBCoeffs_i;\nint r = yp + CV_DESCALE(coeff[0] * (cr - HALF_MAX), yuv_shift);\nint g = yp + CV_DESCALE(mad24(coeff[1], cr - HALF_MAX, coeff[2] * (cb - HALF_MAX)), yuv_shift);\nint b = yp + CV_DESCALE(coeff[3] * (cb - HALF_MAX), yuv_shift);\n#endif\ndstptr[(bidx^2)] = SAT_CAST(r);\ndstptr[1] = SAT_CAST(g);\ndstptr[bidx] = SAT_CAST(b);\n#if dcn == 4\ndstptr[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void RGB2XYZ(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, __constant COEFF_TYPE * coeffs)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1) * PIX_PER_WI_Y;\nif (dx < cols)\n{\nint src_index = mad24(dy, src_step, mad24(dx, scnbytes, src_offset));\nint dst_index = mad24(dy, dst_step, mad24(dx, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (dy < rows)\n{\n__global const DATA_TYPE * src = (__global const DATA_TYPE *)(srcptr + src_index);\n__global DATA_TYPE * dst = (__global DATA_TYPE *)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\nDATA_TYPE r = src_pix.x, g = src_pix.y, b = src_pix.z;\n#ifdef DEPTH_5\nfloat x = fma(r, coeffs[0], fma(g, coeffs[1], b * coeffs[2]));\nfloat y = fma(r, coeffs[3], fma(g, coeffs[4], b * coeffs[5]));\nfloat z = fma(r, coeffs[6], fma(g, coeffs[7], b * coeffs[8]));\n#else\nint x = CV_DESCALE(mad24(r, coeffs[0], mad24(g, coeffs[1], b * coeffs[2])), xyz_shift);\nint y = CV_DESCALE(mad24(r, coeffs[3], mad24(g, coeffs[4], b * coeffs[5])), xyz_shift);\nint z = CV_DESCALE(mad24(r, coeffs[6], mad24(g, coeffs[7], b * coeffs[8])), xyz_shift);\n#endif\ndst[0] = SAT_CAST(x);\ndst[1] = SAT_CAST(y);\ndst[2] = SAT_CAST(z);\n++dy;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void XYZ2RGB(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint rows, int cols, __constant COEFF_TYPE * coeffs)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1) * PIX_PER_WI_Y;\nif (dx < cols)\n{\nint src_index = mad24(dy, src_step, mad24(dx, scnbytes, src_offset));\nint dst_index = mad24(dy, dst_step, mad24(dx, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (dy < rows)\n{\n__global const DATA_TYPE * src = (__global const DATA_TYPE *)(srcptr + src_index);\n__global DATA_TYPE * dst = (__global DATA_TYPE *)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\nDATA_TYPE x = src_pix.x, y = src_pix.y, z = src_pix.z;\n#ifdef DEPTH_5\nfloat b = fma(x, coeffs[0], fma(y, coeffs[1], z * coeffs[2]));\nfloat g = fma(x, coeffs[3], fma(y, coeffs[4], z * coeffs[5]));\nfloat r = fma(x, coeffs[6], fma(y, coeffs[7], z * coeffs[8]));\n#else\nint b = CV_DESCALE(mad24(x, coeffs[0], mad24(y, coeffs[1], z * coeffs[2])), xyz_shift);\nint g = CV_DESCALE(mad24(x, coeffs[3], mad24(y, coeffs[4], z * coeffs[5])), xyz_shift);\nint r = CV_DESCALE(mad24(x, coeffs[6], mad24(y, coeffs[7], z * coeffs[8])), xyz_shift);\n#endif\nDATA_TYPE dst0 = SAT_CAST(b);\nDATA_TYPE dst1 = SAT_CAST(g);\nDATA_TYPE dst2 = SAT_CAST(r);\n#if dcn == 3 || defined DEPTH_5\ndst[0] = dst0;\ndst[1] = dst1;\ndst[2] = dst2;\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n#else\n*(__global DATA_TYPE_4 *)dst = (DATA_TYPE_4)(dst0, dst1, dst2, MAX_NUM);\n#endif\n++dy;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void RGB(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const DATA_TYPE * src = (__global const DATA_TYPE *)(srcptr + src_index);\n__global DATA_TYPE * dst = (__global DATA_TYPE *)(dstptr + dst_index);\nDATA_TYPE_4 src_pix = vload4(0, src);\n#ifdef REVERSE\ndst[0] = src_pix.z;\ndst[1] = src_pix.y;\ndst[2] = src_pix.x;\n#else\ndst[0] = src_pix.x;\ndst[1] = src_pix.y;\ndst[2] = src_pix.z;\n#endif\n#if dcn == 4\n#if scn == 3\ndst[3] = MAX_NUM;\n#else\ndst[3] = src[3];\n#endif\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void RGB5x52RGB(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nushort t = *((__global const ushort*)(src + src_index));\n#if greenbits == 6\ndst[dst_index + bidx] = (uchar)(t << 3);\ndst[dst_index + 1] = (uchar)((t >> 3) & ~3);\ndst[dst_index + (bidx^2)] = (uchar)((t >> 8) & ~7);\n#else\ndst[dst_index + bidx] = (uchar)(t << 3);\ndst[dst_index + 1] = (uchar)((t >> 2) & ~7);\ndst[dst_index + (bidx^2)] = (uchar)((t >> 7) & ~7);\n#endif\n#if dcn == 4\n#if greenbits == 6\ndst[dst_index + 3] = 255;\n#else\ndst[dst_index + 3] = t & 0x8000 ? 255 : 0;\n#endif\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void RGB2RGB5x5(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = vload4(0, src + src_index);\n#if greenbits == 6\n*((__global ushort*)(dst + dst_index)) = (ushort)((src_pix.B_COMP >> 3)|((src_pix.G_COMP&~3) << 3)|((src_pix.R_COMP&~7) << 8));\n#elif scn == 3\n*((__global ushort*)(dst + dst_index)) = (ushort)((src_pix.B_COMP >> 3)|((src_pix.G_COMP&~7) << 2)|((src_pix.R_COMP&~7) << 7));\n#else\n*((__global ushort*)(dst + dst_index)) = (ushort)((src_pix.B_COMP >> 3)|((src_pix.G_COMP&~7) << 2)|\n((src_pix.R_COMP&~7) << 7)|(src_pix.w ? 0x8000 : 0));\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void BGR5x52Gray(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, dst_offset + x);\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nint t = *((__global const ushort*)(src + src_index));\n#if greenbits == 6\ndst[dst_index] = (uchar)CV_DESCALE(mad24((t << 3) & 0xf8, B2Y, mad24((t >> 3) & 0xfc, G2Y, ((t >> 8) & 0xf8) * R2Y)), yuv_shift);\n#else\ndst[dst_index] = (uchar)CV_DESCALE(mad24((t << 3) & 0xf8, B2Y, mad24((t >> 2) & 0xf8, G2Y, ((t >> 7) & 0xf8) * R2Y)), yuv_shift);\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void Gray2BGR5x5(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, src_offset + x);\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nint t = src[src_index];\n#if greenbits == 6\n*((__global ushort*)(dst + dst_index)) = (ushort)((t >> 3) | ((t & ~3) << 3) | ((t & ~7) << 8));\n#else\nt >>= 3;\n*((__global ushort*)(dst + dst_index)) = (ushort)(t|(t << 5)|(t << 10));\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__constant int sector_data[][3] = { { 1, 3, 0 },\n{ 1, 0, 2 },\n{ 3, 0, 1 },\n{ 0, 2, 1 },\n{ 0, 1, 3 },\n{ 2, 1, 0 } };\n#ifdef DEPTH_0\n__kernel void RGB2HSV(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols,\n__constant int * sdiv_table, __constant int * hdiv_table)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = vload4(0, src + src_index);\nint b = src_pix.B_COMP, g = src_pix.G_COMP, r = src_pix.R_COMP;\nint h, s, v = b;\nint vmin = b, diff;\nint vr, vg;\nv = max(v, g);\nv = max(v, r);\nvmin = min(vmin, g);\nvmin = min(vmin, r);\ndiff = v - vmin;\nvr = v == r ? -1 : 0;\nvg = v == g ? -1 : 0;\ns = mad24(diff, sdiv_table[v], (1 << (hsv_shift-1))) >> hsv_shift;\nh = (vr & (g - b)) +\n(~vr & ((vg & mad24(diff, 2, b - r)) + ((~vg) & mad24(4, diff, r - g))));\nh = mad24(h, hdiv_table[diff], (1 << (hsv_shift-1))) >> hsv_shift;\nh += h < 0 ? hrange : 0;\ndst[dst_index] = convert_uchar_sat_rte(h);\ndst[dst_index + 1] = (uchar)s;\ndst[dst_index + 2] = (uchar)v;\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void HSV2RGB(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = vload4(0, src + src_index);\nfloat h = src_pix.x, s = src_pix.y*(1/255.f), v = src_pix.z*(1/255.f);\nfloat b, g, r;\nif (s != 0)\n{\nfloat tab[4];\nint sector;\nh *= hscale;\nif( h < 0 )\ndo h += 6; while( h < 0 );\nelse if( h >= 6 )\ndo h -= 6; while( h >= 6 );\nsector = convert_int_sat_rtn(h);\nh -= sector;\nif( (unsigned)sector >= 6u )\n{\nsector = 0;\nh = 0.f;\n}\ntab[0] = v;\ntab[1] = v*(1.f - s);\ntab[2] = v*(1.f - s*h);\ntab[3] = v*(1.f - s*(1.f - h));\nb = tab[sector_data[sector][0]];\ng = tab[sector_data[sector][1]];\nr = tab[sector_data[sector][2]];\n}\nelse\nb = g = r = v;\ndst[dst_index + bidx] = convert_uchar_sat_rte(b*255.f);\ndst[dst_index + 1] = convert_uchar_sat_rte(g*255.f);\ndst[dst_index + (bidx^2)] = convert_uchar_sat_rte(r*255.f);\n#if dcn == 4\ndst[dst_index + 3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#elif defined DEPTH_5\n__kernel void RGB2HSV(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat b = src_pix.B_COMP, g = src_pix.G_COMP, r = src_pix.R_COMP;\nfloat h, s, v;\nfloat vmin, diff;\nv = vmin = r;\nif( v < g ) v = g;\nif( v < b ) v = b;\nif( vmin > g ) vmin = g;\nif( vmin > b ) vmin = b;\ndiff = v - vmin;\ns = diff/(float)(fabs(v) + FLT_EPSILON);\ndiff = (float)(60.f/(diff + FLT_EPSILON));\nif( v == r )\nh = (g - b)*diff;\nelse if( v == g )\nh = fma(b - r, diff, 120.f);\nelse\nh = fma(r - g, diff, 240.f);\nif( h < 0 )\nh += 360.f;\ndst[0] = h*hscale;\ndst[1] = s;\ndst[2] = v;\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void HSV2RGB(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat h = src_pix.x, s = src_pix.y, v = src_pix.z;\nfloat b, g, r;\nif (s != 0)\n{\nfloat tab[4];\nint sector;\nh *= hscale;\nif(h < 0)\ndo h += 6; while (h < 0);\nelse if (h >= 6)\ndo h -= 6; while (h >= 6);\nsector = convert_int_sat_rtn(h);\nh -= sector;\nif ((unsigned)sector >= 6u)\n{\nsector = 0;\nh = 0.f;\n}\ntab[0] = v;\ntab[1] = v*(1.f - s);\ntab[2] = v*(1.f - s*h);\ntab[3] = v*(1.f - s*(1.f - h));\nb = tab[sector_data[sector][0]];\ng = tab[sector_data[sector][1]];\nr = tab[sector_data[sector][2]];\n}\nelse\nb = g = r = v;\ndst[bidx] = b;\ndst[1] = g;\ndst[bidx^2] = r;\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#endif\n#ifdef DEPTH_0\n__kernel void RGB2HLS(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = vload4(0, src + src_index);\nfloat b = src_pix.B_COMP*(1/255.f), g = src_pix.G_COMP*(1/255.f), r = src_pix.R_COMP*(1/255.f);\nfloat h = 0.f, s = 0.f, l;\nfloat vmin, vmax, diff;\nvmax = vmin = r;\nif (vmax < g) vmax = g;\nif (vmax < b) vmax = b;\nif (vmin > g) vmin = g;\nif (vmin > b) vmin = b;\ndiff = vmax - vmin;\nl = (vmax + vmin)*0.5f;\nif (diff > FLT_EPSILON)\n{\ns = l < 0.5f ? diff/(vmax + vmin) : diff/(2 - vmax - vmin);\ndiff = 60.f/diff;\nif( vmax == r )\nh = (g - b)*diff;\nelse if( vmax == g )\nh = fma(b - r, diff, 120.f);\nelse\nh = fma(r - g, diff, 240.f);\nif( h < 0.f )\nh += 360.f;\n}\ndst[dst_index] = convert_uchar_sat_rte(h*hscale);\ndst[dst_index + 1] = convert_uchar_sat_rte(l*255.f);\ndst[dst_index + 2] = convert_uchar_sat_rte(s*255.f);\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void HLS2RGB(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = vload4(0, src + src_index);\nfloat h = src_pix.x, l = src_pix.y*(1.f/255.f), s = src_pix.z*(1.f/255.f);\nfloat b, g, r;\nif (s != 0)\n{\nfloat tab[4];\nfloat p2 = l <= 0.5f ? l*(1 + s) : l + s - l*s;\nfloat p1 = 2*l - p2;\nh *= hscale;\nif( h < 0 )\ndo h += 6; while( h < 0 );\nelse if( h >= 6 )\ndo h -= 6; while( h >= 6 );\nint sector = convert_int_sat_rtn(h);\nh -= sector;\ntab[0] = p2;\ntab[1] = p1;\ntab[2] = fma(p2 - p1, 1-h, p1);\ntab[3] = fma(p2 - p1, h, p1);\nb = tab[sector_data[sector][0]];\ng = tab[sector_data[sector][1]];\nr = tab[sector_data[sector][2]];\n}\nelse\nb = g = r = l;\ndst[dst_index + bidx] = convert_uchar_sat_rte(b*255.f);\ndst[dst_index + 1] = convert_uchar_sat_rte(g*255.f);\ndst[dst_index + (bidx^2)] = convert_uchar_sat_rte(r*255.f);\n#if dcn == 4\ndst[dst_index + 3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#elif defined DEPTH_5\n__kernel void RGB2HLS(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat b = src_pix.B_COMP, g = src_pix.G_COMP, r = src_pix.R_COMP;\nfloat h = 0.f, s = 0.f, l;\nfloat vmin, vmax, diff;\nvmax = vmin = r;\nif (vmax < g) vmax = g;\nif (vmax < b) vmax = b;\nif (vmin > g) vmin = g;\nif (vmin > b) vmin = b;\ndiff = vmax - vmin;\nl = (vmax + vmin)*0.5f;\nif (diff > FLT_EPSILON)\n{\ns = l < 0.5f ? diff/(vmax + vmin) : diff/(2 - vmax - vmin);\ndiff = 60.f/diff;\nif( vmax == r )\nh = (g - b)*diff;\nelse if( vmax == g )\nh = fma(b - r, diff, 120.f);\nelse\nh = fma(r - g, diff, 240.f);\nif( h < 0.f ) h += 360.f;\n}\ndst[0] = h*hscale;\ndst[1] = l;\ndst[2] = s;\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void HLS2RGB(__global const uchar* srcptr, int src_step, int src_offset,\n__global uchar* dstptr, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat h = src_pix.x, l = src_pix.y, s = src_pix.z;\nfloat b, g, r;\nif (s != 0)\n{\nfloat tab[4];\nint sector;\nfloat p2 = l <= 0.5f ? l*(1 + s) : l + s - l*s;\nfloat p1 = 2*l - p2;\nh *= hscale;\nif( h < 0 )\ndo h += 6; while( h < 0 );\nelse if( h >= 6 )\ndo h -= 6; while( h >= 6 );\nsector = convert_int_sat_rtn(h);\nh -= sector;\ntab[0] = p2;\ntab[1] = p1;\ntab[2] = fma(p2 - p1, 1-h, p1);\ntab[3] = fma(p2 - p1, h, p1);\nb = tab[sector_data[sector][0]];\ng = tab[sector_data[sector][1]];\nr = tab[sector_data[sector][2]];\n}\nelse\nb = g = r = l;\ndst[bidx] = b;\ndst[1] = g;\ndst[bidx^2] = r;\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#endif\n#ifdef DEPTH_0\n__kernel void RGBA2mRGBA(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, src_offset + (x << 2));\nint dst_index = mad24(y, dst_step, dst_offset + (x << 2));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = *(__global const uchar4 *)(src + src_index);\n*(__global uchar4 *)(dst + dst_index) =\n(uchar4)(mad24(src_pix.x, src_pix.w, HALF_MAX) / MAX_NUM,\nmad24(src_pix.y, src_pix.w, HALF_MAX) / MAX_NUM,\nmad24(src_pix.z, src_pix.w, HALF_MAX) / MAX_NUM, src_pix.w);\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n__kernel void mRGBA2RGBA(__global const uchar* src, int src_step, int src_offset,\n__global uchar* dst, int dst_step, int dst_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, 4, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, 4, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\nuchar4 src_pix = *(__global const uchar4 *)(src + src_index);\nuchar v3 = src_pix.w, v3_half = v3 / 2;\nif (v3 == 0)\n*(__global uchar4 *)(dst + dst_index) = (uchar4)(0, 0, 0, 0);\nelse\n*(__global uchar4 *)(dst + dst_index) =\n(uchar4)(mad24(src_pix.x, MAX_NUM, v3_half) / v3,\nmad24(src_pix.y, MAX_NUM, v3_half) / v3,\nmad24(src_pix.z, MAX_NUM, v3_half) / v3, v3);\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#endif\n#define lab_shift xyz_shift\n#define gamma_shift 3\n#define lab_shift2 (lab_shift + gamma_shift)\n#define GAMMA_TAB_SIZE 1024\n#define GammaTabScale (float)GAMMA_TAB_SIZE\ninline float splineInterpolate(float x, __global const float * tab, int n)\n{\nint ix = clamp(convert_int_sat_rtn(x), 0, n-1);\nx -= ix;\ntab += ix << 2;\nreturn fma(fma(fma(tab[3], x, tab[2]), x, tab[1]), x, tab[0]);\n}\n#ifdef DEPTH_0\n__kernel void BGR2Lab(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int rows, int cols,\n__global const ushort * gammaTab, __global ushort * LabCbrtTab_b,\n__constant int * coeffs, int Lscale, int Lshift)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const uchar* src_ptr = src + src_index;\n__global uchar* dst_ptr = dst + dst_index;\nuchar4 src_pix = vload4(0, src_ptr);\nint C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],\nC3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],\nC6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];\nint R = gammaTab[src_pix.x], G = gammaTab[src_pix.y], B = gammaTab[src_pix.z];\nint fX = LabCbrtTab_b[CV_DESCALE(mad24(R, C0, mad24(G, C1, B*C2)), lab_shift)];\nint fY = LabCbrtTab_b[CV_DESCALE(mad24(R, C3, mad24(G, C4, B*C5)), lab_shift)];\nint fZ = LabCbrtTab_b[CV_DESCALE(mad24(R, C6, mad24(G, C7, B*C8)), lab_shift)];\nint L = CV_DESCALE( Lscale*fY + Lshift, lab_shift2 );\nint a = CV_DESCALE( mad24(500, fX - fY, 128*(1 << lab_shift2)), lab_shift2 );\nint b = CV_DESCALE( mad24(200, fY - fZ, 128*(1 << lab_shift2)), lab_shift2 );\ndst_ptr[0] = SAT_CAST(L);\ndst_ptr[1] = SAT_CAST(a);\ndst_ptr[2] = SAT_CAST(b);\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#elif defined DEPTH_5\n__kernel void BGR2Lab(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float _1_3, float _a)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],\nC3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],\nC6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];\nfloat R = clamp(src_pix.x, 0.0f, 1.0f);\nfloat G = clamp(src_pix.y, 0.0f, 1.0f);\nfloat B = clamp(src_pix.z, 0.0f, 1.0f);\n#ifdef SRGB\nR = splineInterpolate(R * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nG = splineInterpolate(G * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nB = splineInterpolate(B * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\nfloat X = fma(R, C0, fma(G, C1, B*C2));\nfloat Y = fma(R, C3, fma(G, C4, B*C5));\nfloat Z = fma(R, C6, fma(G, C7, B*C8));\nfloat FX = X > 0.008856f ? rootn(X, 3) : fma(7.787f, X, _a);\nfloat FY = Y > 0.008856f ? rootn(Y, 3) : fma(7.787f, Y, _a);\nfloat FZ = Z > 0.008856f ? rootn(Z, 3) : fma(7.787f, Z, _a);\nfloat L = Y > 0.008856f ? fma(116.f, FY, -16.f) : (903.3f * Y);\nfloat a = 500.f * (FX - FY);\nfloat b = 200.f * (FY - FZ);\ndst[0] = L;\ndst[1] = a;\ndst[2] = b;\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#endif\ninline void Lab2BGR_f(const float * srcbuf, float * dstbuf,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float lThresh, float fThresh)\n{\nfloat li = srcbuf[0], ai = srcbuf[1], bi = srcbuf[2];\nfloat C0 = coeffs[0], C1 = coeffs[1], C2 = coeffs[2],\nC3 = coeffs[3], C4 = coeffs[4], C5 = coeffs[5],\nC6 = coeffs[6], C7 = coeffs[7], C8 = coeffs[8];\nfloat y, fy;\nif (li <= lThresh)\n{\ny = li / 903.3f;\nfy = fma(7.787f, y, 16.0f / 116.0f);\n}\nelse\n{\nfy = (li + 16.0f) / 116.0f;\ny = fy * fy * fy;\n}\nfloat fxz[] = { ai / 500.0f + fy, fy - bi / 200.0f };\n#pragma unroll\nfor (int j = 0; j < 2; j++)\nif (fxz[j] <= fThresh)\nfxz[j] = (fxz[j] - 16.0f / 116.0f) / 7.787f;\nelse\nfxz[j] = fxz[j] * fxz[j] * fxz[j];\nfloat x = fxz[0], z = fxz[1];\nfloat ro = clamp(fma(C0, x, fma(C1, y, C2 * z)), 0.0f, 1.0f);\nfloat go = clamp(fma(C3, x, fma(C4, y, C5 * z)), 0.0f, 1.0f);\nfloat bo = clamp(fma(C6, x, fma(C7, y, C8 * z)), 0.0f, 1.0f);\n#ifdef SRGB\nro = splineInterpolate(ro * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\ngo = splineInterpolate(go * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nbo = splineInterpolate(bo * GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\ndstbuf[0] = ro, dstbuf[1] = go, dstbuf[2] = bo;\n}\n#ifdef DEPTH_0\n__kernel void Lab2BGR(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float lThresh, float fThresh)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const uchar* src_ptr = src + src_index;\n__global uchar * dst_ptr = dst + dst_index;\nuchar4 src_pix = vload4(0, src_ptr);\nfloat srcbuf[3], dstbuf[3];\nsrcbuf[0] = src_pix.x*(100.f/255.f);\nsrcbuf[1] = convert_float(src_pix.y - 128);\nsrcbuf[2] = convert_float(src_pix.z - 128);\nLab2BGR_f(&srcbuf[0], &dstbuf[0],\n#ifdef SRGB\ngammaTab,\n#endif\ncoeffs, lThresh, fThresh);\n#if dcn == 3\ndst_ptr[0] = SAT_CAST(dstbuf[0] * 255.0f);\ndst_ptr[1] = SAT_CAST(dstbuf[1] * 255.0f);\ndst_ptr[2] = SAT_CAST(dstbuf[2] * 255.0f);\n#else\n*(__global uchar4 *)dst_ptr = (uchar4)(SAT_CAST(dstbuf[0] * 255.0f),\nSAT_CAST(dstbuf[1] * 255.0f), SAT_CAST(dstbuf[2] * 255.0f), MAX_NUM);\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#elif defined DEPTH_5\n__kernel void Lab2BGR(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float lThresh, float fThresh)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\n{\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat4 src_pix = vload4(0, src);\nfloat srcbuf[3], dstbuf[3];\nsrcbuf[0] = src_pix.x, srcbuf[1] = src_pix.y, srcbuf[2] = src_pix.z;\nLab2BGR_f(&srcbuf[0], &dstbuf[0],\n#ifdef SRGB\ngammaTab,\n#endif\ncoeffs, lThresh, fThresh);\ndst[0] = dstbuf[0], dst[1] = dstbuf[1], dst[2] = dstbuf[2];\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n}\n#endif\n#define LAB_CBRT_TAB_SIZE 1024\n#define LAB_CBRT_TAB_SIZE_B (256*3/2*(1<<gamma_shift))\n__constant float LabCbrtTabScale = LAB_CBRT_TAB_SIZE/1.5f;\n#ifdef DEPTH_5\n__kernel void BGR2Luv(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__global const float * LabCbrtTab, __constant float * coeffs, float _un, float _vn)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat R = src[0], G = src[1], B = src[2];\n#ifdef SRGB\nR = splineInterpolate(R*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nG = splineInterpolate(G*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nB = splineInterpolate(B*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\nfloat X = fma(R, coeffs[0], fma(G, coeffs[1], B*coeffs[2]));\nfloat Y = fma(R, coeffs[3], fma(G, coeffs[4], B*coeffs[5]));\nfloat Z = fma(R, coeffs[6], fma(G, coeffs[7], B*coeffs[8]));\nfloat L = splineInterpolate(Y*LabCbrtTabScale, LabCbrtTab, LAB_CBRT_TAB_SIZE);\nL = fma(116.f, L, -16.f);\nfloat d = 52.0f / fmax(fma(15.0f, Y, fma(3.0f, Z, X)), FLT_EPSILON);\nfloat u = L*fma(X, d, -_un);\nfloat v = L*fma(2.25f, Y*d, -_vn);\ndst[0] = L;\ndst[1] = u;\ndst[2] = v;\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n#elif defined DEPTH_0\n__kernel void BGR2Luv(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__global const float * LabCbrtTab, __constant float * coeffs, float _un, float _vn)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nsrc += mad24(y, src_step, mad24(x, scnbytes, src_offset));\ndst += mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\nif (y < rows)\n{\nfloat scale = 1.0f / 255.0f;\nfloat R = src[0]*scale, G = src[1]*scale, B = src[2]*scale;\n#ifdef SRGB\nR = splineInterpolate(R*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nG = splineInterpolate(G*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nB = splineInterpolate(B*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\nfloat X = fma(R, coeffs[0], fma(G, coeffs[1], B*coeffs[2]));\nfloat Y = fma(R, coeffs[3], fma(G, coeffs[4], B*coeffs[5]));\nfloat Z = fma(R, coeffs[6], fma(G, coeffs[7], B*coeffs[8]));\nfloat L = splineInterpolate(Y*LabCbrtTabScale, LabCbrtTab, LAB_CBRT_TAB_SIZE);\nL = 116.f*L - 16.f;\nfloat d = (4*13) / fmax(fma(15.0f, Y, fma(3.0f, Z, X)), FLT_EPSILON);\nfloat u = L*(X*d - _un);\nfloat v = L*fma(2.25f, Y*d, -_vn);\ndst[0] = SAT_CAST(L * 2.55f);\ndst[1] = SAT_CAST(fma(u, 0.72033898305084743f, 96.525423728813564f));\ndst[2] = SAT_CAST(fma(v, 0.9732824427480916f, 136.259541984732824f));\n++y;\ndst += dst_step;\nsrc += src_step;\n}\n}\n}\n#endif\n#ifdef DEPTH_5\n__kernel void Luv2BGR(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float _un, float _vn)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nint src_index = mad24(y, src_step, mad24(x, scnbytes, src_offset));\nint dst_index = mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\nif (y < rows)\n{\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\nfloat L = src[0], u = src[1], v = src[2], d, X, Y, Z;\nY = (L + 16.f) * (1.f/116.f);\nY = Y*Y*Y;\nd = (1.f/13.f)/L;\nu = fma(u, d, _un);\nv = fma(v, d, _vn);\nfloat iv = 1.f/v;\nX = 2.25f * u * Y * iv;\nZ = (12 - fma(3.0f, u, 20.0f * v)) * Y * 0.25f * iv;\nfloat R = fma(X, coeffs[0], fma(Y, coeffs[1], Z * coeffs[2]));\nfloat G = fma(X, coeffs[3], fma(Y, coeffs[4], Z * coeffs[5]));\nfloat B = fma(X, coeffs[6], fma(Y, coeffs[7], Z * coeffs[8]));\nR = clamp(R, 0.f, 1.f);\nG = clamp(G, 0.f, 1.f);\nB = clamp(B, 0.f, 1.f);\n#ifdef SRGB\nR = splineInterpolate(R*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nG = splineInterpolate(G*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nB = splineInterpolate(B*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\ndst[0] = R;\ndst[1] = G;\ndst[2] = B;\n#if dcn == 4\ndst[3] = MAX_NUM;\n#endif\n++y;\ndst_index += dst_step;\nsrc_index += src_step;\n}\n}\n}\n#elif defined DEPTH_0\n__kernel void Luv2BGR(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int rows, int cols,\n#ifdef SRGB\n__global const float * gammaTab,\n#endif\n__constant float * coeffs, float _un, float _vn)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * PIX_PER_WI_Y;\nif (x < cols)\n{\nsrc += mad24(y, src_step, mad24(x, scnbytes, src_offset));\ndst += mad24(y, dst_step, mad24(x, dcnbytes, dst_offset));\n#pragma unroll\nfor (int cy = 0; cy < PIX_PER_WI_Y; ++cy)\nif (y < rows)\n{\nfloat d, X, Y, Z;\nfloat L = src[0]*(100.f/255.f);\nfloat u = fma(convert_float(src[1]), 1.388235294117647f, -134.f);\nfloat v = fma(convert_float(src[2]), 1.027450980392157f, - 140.f);\nY = (L + 16.f) * (1.f/116.f);\nY = Y*Y*Y;\nd = (1.f/13.f)/L;\nu = fma(u, d, _un);\nv = fma(v, d, _vn);\nfloat iv = 1.f/v;\nX = 2.25f * u * Y * iv ;\nZ = (12 - fma(3.0f, u, 20.0f * v)) * Y * 0.25f * iv;\nfloat R = fma(X, coeffs[0], fma(Y, coeffs[1], Z * coeffs[2]));\nfloat G = fma(X, coeffs[3], fma(Y, coeffs[4], Z * coeffs[5]));\nfloat B = fma(X, coeffs[6], fma(Y, coeffs[7], Z * coeffs[8]));\nR = clamp(R, 0.f, 1.f);\nG = clamp(G, 0.f, 1.f);\nB = clamp(B, 0.f, 1.f);\n#ifdef SRGB\nR = splineInterpolate(R*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nG = splineInterpolate(G*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\nB = splineInterpolate(B*GammaTabScale, gammaTab, GAMMA_TAB_SIZE);\n#endif\nuchar dst0 = SAT_CAST(R * 255.0f);\nuchar dst1 = SAT_CAST(G * 255.0f);\nuchar dst2 = SAT_CAST(B * 255.0f);\n#if dcn == 4\n*(__global uchar4 *)dst = (uchar4)(dst0, dst1, dst2, MAX_NUM);\n#else\ndst[0] = dst0;\ndst[1] = dst1;\ndst[2] = dst2;\n#endif\n++y;\ndst += dst_step;\nsrc += src_step;\n}\n}\n}\n#endif\n", "#ifdef EXTRA_EXTRAPOLATION\n#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, minV, maxV)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\n(x) = clamp((x), (minV), (maxV)-1); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\nif ((x) < (minV)) \\\n(x) += ((maxV) - (minV)); \\\nif ((x) >= (maxV)) \\\n(x) -= ((maxV) - (minV)); \\\n}\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\nif ((maxV) - (minV) == 1) \\\n(x) = (minV); \\\nelse \\\nwhile ((x) >= (maxV) || (x) < (minV)) \\\n{ \\\nif ((x) < (minV)) \\\n(x) = (minV) - ((x) - (minV)) - 1; \\\nelse \\\n(x) = (maxV) - 1 - ((x) - (maxV)); \\\n} \\\n}\n#elif defined BORDER_REFLECT_101 || defined BORDER_REFLECT101\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\nif ((maxV) - (minV) == 1) \\\n(x) = (minV); \\\nelse \\\nwhile ((x) >= (maxV) || (x) < (minV)) \\\n{ \\\nif ((x) < (minV)) \\\n(x) = (minV) - ((x) - (minV)); \\\nelse \\\n(x) = (maxV) - 1 - ((x) - (maxV)) - 1; \\\n} \\\n}\n#else\n#error No extrapolation method\n#endif\n#else\n#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, minV, maxV)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\n(x) = clamp((x), (minV), (maxV)-1); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\nif ((x) < (minV)) \\\n(x) += (((minV) - (x)) / ((maxV) - (minV)) + 1) * ((maxV) - (minV)); \\\nif ((x) >= (maxV)) \\\n(x) = ((x) - (minV)) % ((maxV) - (minV)) + (minV); \\\n}\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\n(x) = clamp((x), 2 * (minV) - (x) - 1, 2 * (maxV) - (x) - 1); \\\n}\n#elif defined BORDER_REFLECT_101 || defined BORDER_REFLECT101\n#define EXTRAPOLATE(x, minV, maxV) \\\n{ \\\n(x) = clamp((x), 2 * (minV) - (x), 2 * (maxV) - (x) - 2); \\\n}\n#else\n#error No extrapolation method\n#endif\n#endif\n#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1) * cn\n#define DSTSIZE (int)sizeof(dstT1) * cn\n#endif\n#define UPDATE_COLUMN_SUM(col) \\\n__constant WT1 * k = &kernelData[KERNEL_SIZE_Y2_ALIGNED * col]; \\\nWT tmp_sum = 0;                                                 \\\nfor (int sy = 0; sy < KERNEL_SIZE_Y; sy++)                      \\\ntmp_sum += data[sy] * k[sy];                                \\\nsumOfCols[local_id] = tmp_sum;                                  \\\nbarrier(CLK_LOCAL_MEM_FENCE);\n#define UPDATE_TOTAL_SUM(col) \\\nint id = local_id + col - ANCHOR_X; \\\nif (id >= 0 && id < LOCAL_SIZE)     \\\ntotal_sum += sumOfCols[id];     \\\nbarrier(CLK_LOCAL_MEM_FENCE);\n#define noconvert\n#define DIG(a) a,\n__constant WT1 kernelData[] = { COEFF };\n__kernel void filter2D(__global const uchar * srcptr, int src_step, int srcOffsetX, int srcOffsetY, int srcEndX, int srcEndY,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols, float delta)\n{\nint local_id = get_local_id(0);\nint x = local_id + (LOCAL_SIZE - (KERNEL_SIZE_X - 1)) * get_group_id(0) - ANCHOR_X;\nint y = get_global_id(1);\nWT data[KERNEL_SIZE_Y];\n__local WT sumOfCols[LOCAL_SIZE];\n#ifdef BORDER_ISOLATED\nint srcBeginX = srcOffsetX;\nint srcBeginY = srcOffsetY;\n#else\nint srcBeginX = 0;\nint srcBeginY = 0;\n#endif\nint srcX = srcOffsetX + x;\nint srcY = srcOffsetY + y - ANCHOR_Y;\n__global dstT *dst = (__global dstT *)(dstptr + mad24(y, dst_step, mad24(x, DSTSIZE, dst_offset)));\n#ifdef BORDER_CONSTANT\nif (srcX >= srcBeginX && srcX < srcEndX)\n{\nfor (int sy = 0, sy_index = 0; sy < KERNEL_SIZE_Y; sy++, srcY++)\n{\nif (srcY >= srcBeginY && srcY < srcEndY)\ndata[sy + sy_index] = convertToWT(loadpix(srcptr + mad24(srcY, src_step, srcX * SRCSIZE)));\nelse\ndata[sy + sy_index] = (WT)(0);\n}\n}\nelse\n{\nfor (int sy = 0, sy_index = 0; sy < KERNEL_SIZE_Y; sy++, srcY++)\n{\ndata[sy + sy_index] = (WT)(0);\n}\n}\n#else\nEXTRAPOLATE(srcX, srcBeginX, srcEndX);\nfor (int sy = 0, sy_index = 0; sy < KERNEL_SIZE_Y; sy++, srcY++)\n{\nint tempY = srcY;\nEXTRAPOLATE(tempY, srcBeginY, srcEndY);\ndata[sy + sy_index] = convertToWT(loadpix(srcptr + mad24(tempY, src_step, srcX * SRCSIZE)));\n}\n#endif\nWT total_sum = 0;\nfor (int sx = 0; sx < ANCHOR_X; sx++)\n{\nUPDATE_COLUMN_SUM(sx);\nUPDATE_TOTAL_SUM(sx);\n}\n__constant WT1 * k = &kernelData[KERNEL_SIZE_Y2_ALIGNED * ANCHOR_X];\nfor (int sy = 0; sy < KERNEL_SIZE_Y; sy++)\ntotal_sum += data[sy] * k[sy];\nfor (int sx = ANCHOR_X + 1; sx < KERNEL_SIZE_X; sx++)\n{\nUPDATE_COLUMN_SUM(sx);\nUPDATE_TOTAL_SUM(sx);\n}\nif (local_id >= ANCHOR_X && local_id < LOCAL_SIZE - (KERNEL_SIZE_X - 1 - ANCHOR_X) && x >= 0 && x < cols)\nstorepix(convertToDstT(total_sum + (WT)(delta)), dst);\n}\n", "#ifdef BORDER_REPLICATE\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (l_edge)   : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (r_edge)-1 : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? (t_edge)   :(i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? (b_edge)-1 :(addr))\n#endif\n#ifdef BORDER_REFLECT\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)-1               : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-1+((r_edge)<<1) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? -(i)-1 : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? -(i)-1+((b_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_REFLECT_101\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)                 : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-2+((r_edge)<<1) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? -(i)                 : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? -(i)-2+((b_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_WRAP\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (i)+(r_edge) : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (i)-(r_edge) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? (i)+(b_edge) : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? (i)-(b_edge) : (addr))\n#endif\n#ifdef BORDER_ISOLATED\n#define ISOLATED_MIN(VAL) (VAL)\n#else\n#define ISOLATED_MIN(VAL) 0\n#endif\n#ifdef EXTRA_EXTRAPOLATION\n#ifdef BORDER_CONSTANT\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nx = max(min(x, maxX - 1), minX); \\\ny = max(min(y, maxY - 1), minY); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nif (x < minX) \\\nx -= ((x - maxX + 1) / maxX) * maxX; \\\nif (x >= maxX) \\\nx %= maxX; \\\nif (y < minY) \\\ny -= ((y - maxY + 1) / maxY) * maxY; \\\nif (y >= maxY) \\\ny %= maxY; \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, delta) \\\n{ \\\nif (maxX - minX == 1) \\\nx = minX; \\\nelse \\\ndo \\\n{ \\\nif (x < minX) \\\nx = minX - (x - minX) - 1 + delta; \\\nelse \\\nx = maxX - 1 - (x - maxX) - delta; \\\n} \\\nwhile (x >= maxX || x < minX); \\\n\\\nif (maxY - minY == 1) \\\ny = minY; \\\nelse \\\ndo \\\n{ \\\nif (y < minY) \\\ny = minY - (y - minY) - 1 + delta; \\\nelse \\\ny = maxY - 1 - (y - maxY) - delta; \\\n} \\\nwhile (y >= maxY || y < minY); \\\n}\n#ifdef BORDER_REFLECT\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 0)\n#elif defined(BORDER_REFLECT_101) || defined(BORDER_REFLECT101)\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 1)\n#endif\n#else\n#error No extrapolation method\n#endif\n#else\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nint _row = y - ISOLATED_MIN(minY), _col = x - ISOLATED_MIN(minX); \\\n_row = ADDR_H(_row, 0, maxY - ISOLATED_MIN(minY)); \\\n_row = ADDR_B(_row, maxY - ISOLATED_MIN(minY), _row); \\\ny = _row + ISOLATED_MIN(minY); \\\n\\\n_col = ADDR_L(_col, 0, maxX - ISOLATED_MIN(minX)); \\\n_col = ADDR_R(_col, maxX - ISOLATED_MIN(minX), _col); \\\nx = _col + ISOLATED_MIN(minX); \\\n}\n#endif\n#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1) * cn\n#define DSTSIZE (int)sizeof(dstT1) * cn\n#endif\n#define noconvert\nstruct RectCoords\n{\nint x1, y1, x2, y2;\n};\n#ifdef BORDER_ISOLATED\ninline bool isBorder(const struct RectCoords bounds, int2 coord, int numPixels)\n{\nreturn (coord.x < bounds.x1 || coord.y < bounds.y1 || coord.x + numPixels > bounds.x2 || coord.y >= bounds.y2);\n}\n#else\ninline bool isBorder(const struct RectCoords bounds, int2 coord, int numPixels)\n{\nreturn (coord.x < 0 || coord.y < 0 || coord.x + numPixels > bounds.x2 || coord.y >= bounds.y2);\n}\n#endif\ninline WT getBorderPixel(const struct RectCoords bounds, int2 coord,\n__global const uchar* srcptr, int srcstep)\n{\n#ifdef BORDER_CONSTANT\nreturn (WT)(0);\n#else\nint selected_col = coord.x;\nint selected_row = coord.y;\nEXTRAPOLATE(selected_col, selected_row,\nbounds.x1, bounds.y1,\nbounds.x2, bounds.y2\n);\ncoord = (int2)(selected_col, selected_row);\n__global const uchar* ptr = srcptr + mul24(coord.y, srcstep) +\ncoord.x * SRCSIZE;\nreturn convertToWT(loadpix(ptr));\n#endif\n}\ninline WT readSrcPixelSingle(int2 pos, __global const uchar* srcptr,\nint srcstep, const struct RectCoords srcCoords)\n{\nif (!isBorder(srcCoords, pos, 1))\n{\n__global const uchar* ptr = srcptr + mul24(pos.y, srcstep) +\npos.x * SRCSIZE;\nreturn convertToWT(loadpix(ptr));\n}\nelse\n{\nreturn getBorderPixel(srcCoords, pos, srcptr, srcstep);\n}\n}\n#define __CAT(x, y) x##y\n#define CAT(x, y) __CAT(x, y)\n#define vload1(OFFSET, PTR) (*(PTR + OFFSET))\n#define PX_LOAD_VEC_TYPE CAT(srcT1, PX_LOAD_VEC_SIZE)\n#define PX_LOAD_FLOAT_VEC_TYPE CAT(WT1, PX_LOAD_VEC_SIZE)\n#if PX_LOAD_VEC_SIZE == 1\n#define PX_LOAD_FLOAT_VEC_CONV (float)\n#elif PX_LOAD_VEC_SIZE == 2\n#define PX_LOAD_FLOAT_VEC_CONV convert_float2\n#elif PX_LOAD_VEC_SIZE == 3\n#define PX_LOAD_FLOAT_VEC_CONV convert_float3\n#elif PX_LOAD_VEC_SIZE == 4\n#define PX_LOAD_FLOAT_VEC_CONV convert_float4\n#endif\n#define PX_LOAD CAT(vload, PX_LOAD_VEC_SIZE)\n#define float1 float\ninline PX_LOAD_FLOAT_VEC_TYPE readSrcPixelGroup(int2 pos, __global const uchar* srcptr,\nint srcstep, const struct RectCoords srcCoords)\n{\n__global const srcT1* ptr = (__global const srcT1*)\n(srcptr + mul24(pos.y, srcstep) +\npos.x * SRCSIZE);\nreturn PX_LOAD_FLOAT_VEC_CONV(PX_LOAD(0, ptr));\n}\n#define LOOP1(VAR, STMT) (STMT); (VAR)++;\n#define LOOP2(VAR, STMT) LOOP1(VAR, STMT); (STMT); (VAR)++;\n#define LOOP3(VAR, STMT) LOOP2(VAR, STMT); (STMT); (VAR)++;\n#define LOOP4(VAR, STMT) LOOP3(VAR, STMT); (STMT); (VAR)++;\n#define LOOP5(VAR, STMT) LOOP4(VAR, STMT); (STMT); (VAR)++;\n#define LOOP6(VAR, STMT) LOOP5(VAR, STMT); (STMT); (VAR)++;\n#define LOOP7(VAR, STMT) LOOP6(VAR, STMT); (STMT); (VAR)++;\n#define LOOP8(VAR, STMT) LOOP7(VAR, STMT); (STMT); (VAR)++;\n#define LOOP9(VAR, STMT) LOOP8(VAR, STMT); (STMT); (VAR)++;\n#define LOOP10(VAR, STMT) LOOP9(VAR, STMT); (STMT); (VAR)++;\n#define LOOP11(VAR, STMT) LOOP10(VAR, STMT); (STMT); (VAR)++;\n#define LOOP12(VAR, STMT) LOOP11(VAR, STMT); (STMT); (VAR)++;\n#define LOOP13(VAR, STMT) LOOP12(VAR, STMT); (STMT); (VAR)++;\n#define LOOP(N, VAR, STMT) CAT(LOOP, N)((VAR), (STMT))\n#define DIG(a) a,\n__constant WT1 kernelData[] = { COEFF };\n__kernel void filter2DSmall(__global const uchar * srcptr, int src_step, int srcOffsetX, int srcOffsetY, int srcEndX, int srcEndY,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols, float delta)\n{\nconst struct RectCoords srcCoords = { srcOffsetX, srcOffsetY, srcEndX, srcEndY };\nconst int startX = get_global_id(0) * PX_PER_WI_X;\nconst int startY = get_global_id(1) * PX_PER_WI_Y;\nif ((startX >= cols) || (startY >= rows))\n{\nreturn;\n}\nWT privateData[PX_PER_WI_Y + KERNEL_SIZE_Y - 1][PRIV_DATA_WIDTH];\nint py = 0;\nLOOP(PX_LOAD_Y_ITERATIONS, py,\n{\nint y = startY + py;\nint px = 0;\nLOOP(PX_LOAD_X_ITERATIONS, px,\n{\nint x = startX + (px * PX_LOAD_NUM_PX);\nint2 srcPos = (int2)(srcCoords.x1 + x - ANCHOR_X, srcCoords.y1 + y - ANCHOR_Y);\nif (!isBorder(srcCoords, srcPos, PX_LOAD_NUM_PX))\n{\nPX_LOAD_FLOAT_VEC_TYPE p = readSrcPixelGroup(srcPos, srcptr, src_step, srcCoords);\n*((PX_LOAD_FLOAT_VEC_TYPE*)&privateData[py][px * PX_LOAD_NUM_PX]) = p;\n}\nelse\n{\nint lx = 0;\nLOOP(PX_LOAD_NUM_PX, lx,\n{\nWT p = readSrcPixelSingle(srcPos, srcptr, src_step, srcCoords);\n*((WT*)&privateData[py][px * PX_LOAD_NUM_PX + lx]) = p;\nsrcPos.x++;\n});\n}\n});\n});\npy = 0;\nLOOP(PX_PER_WI_Y, py,\n{\nint y = startY + py;\nint px = 0;\nLOOP(PX_PER_WI_X, px,\n{\nint x = startX + px;\nWT total_sum = 0;\nint sy = 0;\nint kernelIndex = 0;\nLOOP(KERNEL_SIZE_Y, sy,\n{\nint sx = 0;\nLOOP(KERNEL_SIZE_X, sx,\n{\ntotal_sum = mad(kernelData[kernelIndex++], privateData[py + sy][px + sx], total_sum);\n});\n});\n__global dstT* dstPtr = (__global dstT*)(dstptr + y * dst_step + dst_offset + x * DSTSIZE);\nstorepix(convertToDstT(total_sum + (WT)(delta)), dstPtr);\n});\n});\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define READ_TIMES_COL ((2*(RADIUSY+LSIZE1)-1)/LSIZE1)\n#define RADIUS 1\n#define noconvert\n#if CN != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr)  vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1)*3\n#define DSTSIZE (int)sizeof(dstT1)*3\n#endif\n#define DIG(a) a,\n__constant srcT1 mat_kernel[] = { COEFF };\n__kernel void col_filter(__global const uchar * src, int src_step, int src_offset, int src_whole_rows, int src_whole_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols, float delta)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nint l_x = get_local_id(0);\nint l_y = get_local_id(1);\nint start_addr = mad24(y, src_step, x * SRCSIZE);\nint end_addr = mad24(src_whole_rows - 1, src_step, src_whole_cols * SRCSIZE);\nsrcT sum, temp[READ_TIMES_COL];\n__local srcT LDS_DAT[LSIZE1 * READ_TIMES_COL][LSIZE0 + 1];\nfor (int i = 0; i < READ_TIMES_COL; ++i)\n{\nint current_addr = mad24(i, LSIZE1 * src_step, start_addr);\ncurrent_addr = current_addr < end_addr ? current_addr : 0;\ntemp[i] = loadpix(src + current_addr);\n}\nfor (int i = 0; i < READ_TIMES_COL; ++i)\nLDS_DAT[mad24(i, LSIZE1, l_y)][l_x] = temp[i];\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = LDS_DAT[l_y + RADIUSY][l_x] * mat_kernel[RADIUSY];\nfor (int i = 1; i <= RADIUSY; ++i)\n{\ntemp[0] = LDS_DAT[l_y + RADIUSY - i][l_x];\ntemp[1] = LDS_DAT[l_y + RADIUSY + i][l_x];\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\nsum += mad24(temp[0],mat_kernel[RADIUSY - i], temp[1] * mat_kernel[RADIUSY + i]);\n#else\nsum += mad(temp[0], mat_kernel[RADIUSY - i], temp[1] * mat_kernel[RADIUSY + i]);\n#endif\n}\n#ifdef INTEGER_ARITHMETIC\n#ifdef INTEL_DEVICE\nsum = (sum + (1 << (SHIFT_BITS-1))) / (1 << SHIFT_BITS);\n#else\nsum = (sum + (1 << (SHIFT_BITS-1))) >> SHIFT_BITS;\n#endif\n#endif\nif (x < dst_cols && y < dst_rows)\n{\nstart_addr = mad24(y, dst_step, mad24(DSTSIZE, x, dst_offset));\nstorepix(convertToDstT(sum + (srcT)(delta)), dst + start_addr);\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define READ_TIMES_ROW ((2*(RADIUSX+LSIZE0)-1)/LSIZE0)\n#define RADIUS 1\n#ifdef BORDER_REPLICATE\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (l_edge)   : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (r_edge)-1 : (addr))\n#endif\n#ifdef BORDER_REFLECT\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)-1               : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-1+((r_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_REFLECT_101\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)                 : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-2+((r_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_WRAP\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (i)+(r_edge) : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (i)-(r_edge) : (addr))\n#endif\n#ifdef EXTRA_EXTRAPOLATION\n#ifdef BORDER_CONSTANT\n#define ELEM(i,l_edge,r_edge,elem1,elem2) (i)<(l_edge) | (i) >= (r_edge) ? (elem1) : (elem2)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(t, minT, maxT) \\\n{ \\\nt = max(min(t, (maxT) - 1), (minT)); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, minT, maxT) \\\n{ \\\nif (t < (minT)) \\\nt -= ((t - (maxT) + 1) / (maxT)) * (maxT); \\\nif (t >= (maxT)) \\\nt %= (maxT); \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE_(t, minT, maxT, delta) \\\n{ \\\nif ((maxT) - (minT) == 1) \\\nt = (minT); \\\nelse \\\ndo \\\n{ \\\nif (t < (minT)) \\\nt = (minT) - (t - (minT)) - 1 + delta; \\\nelse \\\nt = (maxT) - 1 - (t - (maxT)) - delta; \\\n} \\\nwhile (t >= (maxT) || t < (minT)); \\\n\\\n}\n#ifdef BORDER_REFLECT\n#define EXTRAPOLATE(t, minT, maxT) EXTRAPOLATE_(t, minT, maxT, 0)\n#elif defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE(t, minT, maxT) EXTRAPOLATE_(t, minT, maxT, 1)\n#endif\n#else\n#error No extrapolation method\n#endif\n#else\n#ifdef BORDER_CONSTANT\n#define ELEM(i,l_edge,r_edge,elem1,elem2) (i)<(l_edge) | (i) >= (r_edge) ? (elem1) : (elem2)\n#else\n#define EXTRAPOLATE(t, minT, maxT) \\\n{ \\\nint _delta = t - (minT); \\\n_delta = ADDR_L(_delta, 0, (maxT) - (minT)); \\\n_delta = ADDR_R(_delta, (maxT) - (minT), _delta); \\\nt = _delta + (minT); \\\n}\n#endif\n#endif\n#define noconvert\n#if CN != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr)  vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1)*3\n#define DSTSIZE (int)sizeof(dstT1)*3\n#endif\n#define DIG(a) a,\n__constant dstT1 mat_kernel[] = { COEFF };\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\n#define dstT4 int4\n#define convertDstVec convert_int4\n#else\n#define dstT4 float4\n#define convertDstVec convert_float4\n#endif\n__kernel void row_filter_C1_D0(__global const uchar * src, int src_step_in_pixel, int src_offset_x, int src_offset_y,\nint src_cols, int src_rows, int src_whole_cols, int src_whole_rows,\n__global float * dst, int dst_step_in_pixel, int dst_cols, int dst_rows,\nint radiusy)\n{\nint x = get_global_id(0)<<2;\nint y = get_global_id(1);\nint l_x = get_local_id(0);\nint l_y = get_local_id(1);\nint start_x = x + src_offset_x - RADIUSX & 0xfffffffc;\nint offset = src_offset_x - RADIUSX & 3;\nint start_y = y + src_offset_y - radiusy;\nint start_addr = mad24(start_y, src_step_in_pixel, start_x);\ndstT4 sum;\nuchar4 temp[READ_TIMES_ROW];\n__local uchar4 LDS_DAT[LSIZE1][READ_TIMES_ROW * LSIZE0 + 1];\n#ifdef BORDER_CONSTANT\nint end_addr = mad24(src_whole_rows - 1, src_step_in_pixel, src_whole_cols);\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\nint current_addr = mad24(i, LSIZE0 << 2, start_addr);\ncurrent_addr = current_addr < end_addr && current_addr > 0 ? current_addr : 0;\ntemp[i] = *(__global const uchar4 *)&src[current_addr];\n}\n#ifdef BORDER_ISOLATED\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\ntemp[i].x = ELEM(start_x+i*LSIZE0*4,   src_offset_x, src_offset_x + src_cols, 0,         temp[i].x);\ntemp[i].y = ELEM(start_x+i*LSIZE0*4+1, src_offset_x, src_offset_x + src_cols, 0,         temp[i].y);\ntemp[i].z = ELEM(start_x+i*LSIZE0*4+2, src_offset_x, src_offset_x + src_cols, 0,         temp[i].z);\ntemp[i].w = ELEM(start_x+i*LSIZE0*4+3, src_offset_x, src_offset_x + src_cols, 0,         temp[i].w);\ntemp[i]   = ELEM(start_y,              src_offset_y, src_offset_y + src_rows, (uchar4)0, temp[i]);\n}\n#else\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\ntemp[i].x = ELEM(start_x+i*LSIZE0*4,   0, src_whole_cols, 0,         temp[i].x);\ntemp[i].y = ELEM(start_x+i*LSIZE0*4+1, 0, src_whole_cols, 0,         temp[i].y);\ntemp[i].z = ELEM(start_x+i*LSIZE0*4+2, 0, src_whole_cols, 0,         temp[i].z);\ntemp[i].w = ELEM(start_x+i*LSIZE0*4+3, 0, src_whole_cols, 0,         temp[i].w);\ntemp[i]   = ELEM(start_y,              0, src_whole_rows, (uchar4)0, temp[i]);\n}\n#endif\n#else\n#ifdef BORDER_ISOLATED\nint not_all_in_range = (start_x<src_offset_x) | (start_x + READ_TIMES_ROW*LSIZE0*4+4>src_offset_x + src_cols)| (start_y<src_offset_y) | (start_y >= src_offset_y + src_rows);\n#else\nint not_all_in_range = (start_x<0) | (start_x + READ_TIMES_ROW*LSIZE0*4+4>src_whole_cols)| (start_y<0) | (start_y >= src_whole_rows);\n#endif\nint4 index[READ_TIMES_ROW], addr;\nint s_y;\nif (not_all_in_range)\n{\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\nindex[i] = (int4)(mad24(i, LSIZE0 << 2, start_x)) + (int4)(0, 1, 2, 3);\n#ifdef BORDER_ISOLATED\nEXTRAPOLATE(index[i].x, src_offset_x, src_offset_x + src_cols);\nEXTRAPOLATE(index[i].y, src_offset_x, src_offset_x + src_cols);\nEXTRAPOLATE(index[i].z, src_offset_x, src_offset_x + src_cols);\nEXTRAPOLATE(index[i].w, src_offset_x, src_offset_x + src_cols);\n#else\nEXTRAPOLATE(index[i].x, 0, src_whole_cols);\nEXTRAPOLATE(index[i].y, 0, src_whole_cols);\nEXTRAPOLATE(index[i].z, 0, src_whole_cols);\nEXTRAPOLATE(index[i].w, 0, src_whole_cols);\n#endif\n}\ns_y = start_y;\n#ifdef BORDER_ISOLATED\nEXTRAPOLATE(s_y, src_offset_y, src_offset_y + src_rows);\n#else\nEXTRAPOLATE(s_y, 0, src_whole_rows);\n#endif\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\naddr = mad24((int4)s_y, (int4)src_step_in_pixel, index[i]);\ntemp[i].x = src[addr.x];\ntemp[i].y = src[addr.y];\ntemp[i].z = src[addr.z];\ntemp[i].w = src[addr.w];\n}\n}\nelse\n{\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\ntemp[i] = *(__global uchar4*)&src[mad24(i, LSIZE0 << 2, start_addr)];\n}\n#endif\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\nLDS_DAT[l_y][mad24(i, LSIZE0, l_x)] = temp[i];\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = convertDstVec(vload4(0,(__local uchar *)&LDS_DAT[l_y][l_x]+RADIUSX+offset)) * mat_kernel[RADIUSX];\nfor (int i = 1; i <= RADIUSX; ++i)\n{\ntemp[0] = vload4(0, (__local uchar*)&LDS_DAT[l_y][l_x] + RADIUSX + offset - i);\ntemp[1] = vload4(0, (__local uchar*)&LDS_DAT[l_y][l_x] + RADIUSX + offset + i);\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\nsum += mad24(convertDstVec(temp[0]), mat_kernel[RADIUSX-i], convertDstVec(temp[1]) * mat_kernel[RADIUSX + i]);\n#else\nsum += mad(convertDstVec(temp[0]), mat_kernel[RADIUSX-i], convertDstVec(temp[1]) * mat_kernel[RADIUSX + i]);\n#endif\n}\nstart_addr = mad24(y, dst_step_in_pixel, x);\nif ((x+3<dst_cols) & (y<dst_rows))\n*(__global dstT4*)&dst[start_addr] = sum;\nelse if ((x+2<dst_cols) && (y<dst_rows))\n{\ndst[start_addr] = sum.x;\ndst[start_addr+1] = sum.y;\ndst[start_addr+2] = sum.z;\n}\nelse if ((x+1<dst_cols) && (y<dst_rows))\n{\ndst[start_addr] = sum.x;\ndst[start_addr+1] = sum.y;\n}\nelse if (x<dst_cols && y<dst_rows)\ndst[start_addr] = sum.x;\n}\n__kernel void row_filter(__global const uchar * src, int src_step, int src_offset_x, int src_offset_y,\nint src_cols, int src_rows, int src_whole_cols, int src_whole_rows,\n__global uchar * dst, int dst_step, int dst_cols, int dst_rows,\nint radiusy)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nint l_x = get_local_id(0);\nint l_y = get_local_id(1);\nint start_x = x + src_offset_x - RADIUSX;\nint start_y = y + src_offset_y - radiusy;\nint start_addr = mad24(start_y, src_step, start_x * SRCSIZE);\ndstT sum;\nsrcT temp[READ_TIMES_ROW];\n__local srcT LDS_DAT[LSIZE1][READ_TIMES_ROW * LSIZE0 + 1];\n#ifdef BORDER_CONSTANT\nint end_addr = mad24(src_whole_rows - 1, src_step, src_whole_cols * SRCSIZE);\nfor (int i = 0; i < READ_TIMES_ROW; i++)\n{\nint current_addr = mad24(i, LSIZE0 * SRCSIZE, start_addr);\ncurrent_addr = current_addr < end_addr && current_addr >= 0 ? current_addr : 0;\ntemp[i] = loadpix(src + current_addr);\n}\n#ifdef BORDER_ISOLATED\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\ntemp[i] = ELEM(mad24(i, LSIZE0, start_x), src_offset_x, src_offset_x + src_cols, (srcT)(0), temp[i]);\ntemp[i] = ELEM(start_y,                   src_offset_y, src_offset_y + src_rows, (srcT)(0), temp[i]);\n}\n#else\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\ntemp[i] = ELEM(mad24(i, LSIZE0, start_x), 0, src_whole_cols, (srcT)(0), temp[i]);\ntemp[i] = ELEM(start_y,                   0, src_whole_rows, (srcT)(0), temp[i]);\n}\n#endif\n#else\nint index[READ_TIMES_ROW], s_x, s_y;\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\n{\ns_x = mad24(i, LSIZE0, start_x);\ns_y = start_y;\n#ifdef BORDER_ISOLATED\nEXTRAPOLATE(s_x, src_offset_x, src_offset_x + src_cols);\nEXTRAPOLATE(s_y, src_offset_y, src_offset_y + src_rows);\n#else\nEXTRAPOLATE(s_x, 0, src_whole_cols);\nEXTRAPOLATE(s_y, 0, src_whole_rows);\n#endif\nindex[i] = mad24(s_y, src_step, s_x * SRCSIZE);\n}\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\ntemp[i] = loadpix(src + index[i]);\n#endif\nfor (int i = 0; i < READ_TIMES_ROW; ++i)\nLDS_DAT[l_y][mad24(i, LSIZE0, l_x)] = temp[i];\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = convertToDstT(LDS_DAT[l_y][l_x + RADIUSX]) * mat_kernel[RADIUSX];\nfor (int i = 1; i <= RADIUSX; ++i)\n{\ntemp[0] = LDS_DAT[l_y][l_x + RADIUSX - i];\ntemp[1] = LDS_DAT[l_y][l_x + RADIUSX + i];\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\nsum += mad24(convertToDstT(temp[0]), mat_kernel[RADIUSX - i], convertToDstT(temp[1]) * mat_kernel[RADIUSX + i]);\n#else\nsum += mad(convertToDstT(temp[0]), mat_kernel[RADIUSX - i], convertToDstT(temp[1]) * mat_kernel[RADIUSX + i]);\n#endif\n}\nif (x < dst_cols && y < dst_rows)\n{\nstart_addr = mad24(y, dst_step, x * DSTSIZE);\nstorepix(sum, dst + start_addr);\n}\n}\n", "#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, maxV)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = clamp((x), 0, (maxV)-1); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = ( (x) + (maxV) ) % (maxV); \\\n}\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min(((maxV)-1)*2-(x)+1, max((x),-(x)-1) ); \\\n}\n#elif defined BORDER_REFLECT_101 || defined BORDER_REFLECT101\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min(((maxV)-1)*2-(x), max((x),-(x)) ); \\\n}\n#else\n#error No extrapolation method\n#endif\n#if CN != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr)  vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1)*3\n#define DSTSIZE (int)sizeof(dstT1)*3\n#endif\n#define SRC(_x,_y) convertToWT(loadpix(Src + mad24(_y, src_step, SRCSIZE * _x)))\n#ifdef BORDER_CONSTANT\n#define ELEM(_x,_y,r_edge,t_edge,const_v) (_x)<0 | (_x) >= (r_edge) | (_y)<0 | (_y) >= (t_edge) ? (const_v) : SRC((_x),(_y))\n#else\n#define ELEM(_x,_y,r_edge,t_edge,const_v) SRC((_x),(_y))\n#endif\n#define noconvert\n#define DIG(a) a,\n__constant WT1 mat_kernelX[] = { KERNEL_MATRIX_X };\n__constant WT1 mat_kernelY[] = { KERNEL_MATRIX_Y };\n__kernel void sep_filter(__global uchar* Src, int src_step, int srcOffsetX, int srcOffsetY, int height, int width,\n__global uchar* Dst, int dst_step, int dst_offset, int dst_rows, int dst_cols, float delta)\n{\n__local WT lsmem[BLK_Y + 2 * RADIUSY][BLK_X + 2 * RADIUSX];\n__local WT lsmemDy[BLK_Y][BLK_X + 2 * RADIUSX];\nint lix = get_local_id(0);\nint liy = get_local_id(1);\nint x = get_global_id(0);\nint srcX = x + srcOffsetX - RADIUSX;\nint clocY = liy;\ndo\n{\nint yb = clocY + srcOffsetY - RADIUSY;\nEXTRAPOLATE(yb, (height));\nint clocX = lix;\nint cSrcX = srcX;\ndo\n{\nint xb = cSrcX;\nEXTRAPOLATE(xb,(width));\nlsmem[clocY][clocX] = ELEM(xb, yb, (width), (height), 0 );\nclocX += BLK_X;\ncSrcX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUSX*2));\nclocY += BLK_Y;\n}\nwhile (clocY < BLK_Y+(RADIUSY*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int y = 0; y < dst_rows; y+=BLK_Y)\n{\nint i, clocX = lix;\nWT sum = (WT) 0;\ndo\n{\nsum = (WT) 0;\nfor (i=0; i<=2*RADIUSY; i++)\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\nsum = mad24(lsmem[liy + i][clocX], mat_kernelY[i], sum);\n#else\nsum = mad(lsmem[liy + i][clocX], mat_kernelY[i], sum);\n#endif\nlsmemDy[liy][clocX] = sum;\nclocX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUSX*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\nif ((x < dst_cols) && (y + liy < dst_rows))\n{\nsum = 0.0f;\nfor (i=0; i<=2*RADIUSX; i++)\n#if (defined(INTEGER_ARITHMETIC) && !INTEL_DEVICE)\nsum = mad24(lsmemDy[liy][lix+i], mat_kernelX[i], sum);\n#else\nsum = mad(lsmemDy[liy][lix+i], mat_kernelX[i], sum);\n#endif\n#ifdef INTEGER_ARITHMETIC\n#ifdef INTEL_DEVICE\nsum = (sum + (1 << (SHIFT_BITS-1))) / (1 << SHIFT_BITS);\n#else\nsum = (sum + (1 << (SHIFT_BITS-1))) >> SHIFT_BITS;\n#endif\n#endif\nstorepix(convertToDstT(sum + (WT)(delta)), Dst + mad24(y + liy, dst_step, mad24(x, DSTSIZE, dst_offset)));\n}\nfor (int i = liy * BLK_X + lix; i < (RADIUSY*2) * (BLK_X+(RADIUSX*2)); i += BLK_X * BLK_Y)\n{\nint clocX = i % (BLK_X+(RADIUSX*2));\nint clocY = i / (BLK_X+(RADIUSX*2));\nlsmem[clocY][clocX] = lsmem[clocY + BLK_Y][clocX];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint yb = y + liy + BLK_Y + srcOffsetY + RADIUSY;\nEXTRAPOLATE(yb, (height));\nclocX = lix;\nint cSrcX = x + srcOffsetX - RADIUSX;\ndo\n{\nint xb = cSrcX;\nEXTRAPOLATE(xb,(width));\nlsmem[liy + 2*RADIUSY][clocX] = ELEM(xb, yb, (width), (height), 0 );\nclocX += BLK_X;\ncSrcX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUSX*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\n", "#ifdef BORDER_REPLICATE\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (l_edge)   : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (r_edge)-1 : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? (t_edge)   :(i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? (b_edge)-1 :(addr))\n#endif\n#ifdef BORDER_REFLECT\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)-1               : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-1+((r_edge)<<1) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? -(i)-1 : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? -(i)-1+((b_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_REFLECT_101\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? -(i)                 : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? -(i)-2+((r_edge)<<1) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? -(i)                 : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? -(i)-2+((b_edge)<<1) : (addr))\n#endif\n#ifdef BORDER_WRAP\n#define ADDR_L(i, l_edge, r_edge)  ((i) <  (l_edge) ? (i)+(r_edge) : (i))\n#define ADDR_R(i, r_edge, addr)    ((i) >= (r_edge) ? (i)-(r_edge) : (addr))\n#define ADDR_H(i, t_edge, b_edge)  ((i) <  (t_edge) ? (i)+(b_edge) : (i))\n#define ADDR_B(i, b_edge, addr)    ((i) >= (b_edge) ? (i)-(b_edge) : (addr))\n#endif\n#ifdef BORDER_ISOLATED\n#define ISOLATED_MIN(VAL) (VAL)\n#else\n#define ISOLATED_MIN(VAL) 0\n#endif\n#ifdef EXTRA_EXTRAPOLATION\n#ifdef BORDER_CONSTANT\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nx = max(min(x, maxX - 1), minX); \\\ny = max(min(y, maxY - 1), minY); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nif (x < minX) \\\nx -= ((x - maxX + 1) / maxX) * maxX; \\\nif (x >= maxX) \\\nx %= maxX; \\\nif (y < minY) \\\ny -= ((y - maxY + 1) / maxY) * maxY; \\\nif (y >= maxY) \\\ny %= maxY; \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#define EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, delta) \\\n{ \\\nif (maxX - minX == 1) \\\nx = minX; \\\nelse \\\ndo \\\n{ \\\nif (x < minX) \\\nx = minX - (x - minX) - 1 + delta; \\\nelse \\\nx = maxX - 1 - (x - maxX) - delta; \\\n} \\\nwhile (x >= maxX || x < minX); \\\n\\\nif (maxY - minY == 1) \\\ny = minY; \\\nelse \\\ndo \\\n{ \\\nif (y < minY) \\\ny = minY - (y - minY) - 1 + delta; \\\nelse \\\ny = maxY - 1 - (y - maxY) - delta; \\\n} \\\nwhile (y >= maxY || y < minY); \\\n}\n#ifdef BORDER_REFLECT\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 0)\n#elif defined(BORDER_REFLECT_101) || defined(BORDER_REFLECT101)\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) EXTRAPOLATE_(x, y, minX, minY, maxX, maxY, 1)\n#endif\n#else\n#error No extrapolation method\n#endif\n#else\n#define EXTRAPOLATE(x, y, minX, minY, maxX, maxY) \\\n{ \\\nint _row = y - ISOLATED_MIN(minY), _col = x - ISOLATED_MIN(minX); \\\n_row = ADDR_H(_row, 0, maxY - ISOLATED_MIN(minY)); \\\n_row = ADDR_B(_row, maxY - ISOLATED_MIN(minY), _row); \\\ny = _row + ISOLATED_MIN(minY); \\\n\\\n_col = ADDR_L(_col, 0, maxX - ISOLATED_MIN(minX)); \\\n_col = ADDR_R(_col, maxX - ISOLATED_MIN(minX), _col); \\\nx = _col + ISOLATED_MIN(minX); \\\n}\n#endif\n#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr) vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1) * cn\n#define DSTSIZE (int)sizeof(dstT1) * cn\n#endif\n#define noconvert\nstruct RectCoords\n{\nint x1, y1, x2, y2;\n};\n#ifdef BORDER_ISOLATED\ninline bool isBorder(const struct RectCoords bounds, int2 coord, int numPixels)\n{\nreturn coord.x < bounds.x1 || coord.y < bounds.y1 || coord.x + numPixels > bounds.x2 || coord.y >= bounds.y2;\n}\n#else\ninline bool isBorder(const struct RectCoords bounds, int2 coord, int numPixels)\n{\nreturn coord.x < 0 || coord.y < 0 || coord.x + numPixels > bounds.x2 || coord.y >= bounds.y2;\n}\n#endif\n#define float1 float\n#define uchar1 uchar\n#define int1 int\n#define uint1 unit\n#define __CAT(x, y) x##y\n#define CAT(x, y) __CAT(x, y)\n#define vload1(OFFSET, PTR) (*(PTR + OFFSET))\n#define PX_LOAD_VEC_TYPE CAT(srcT1, PX_LOAD_VEC_SIZE)\n#define PX_LOAD_FLOAT_VEC_TYPE CAT(WT1, PX_LOAD_VEC_SIZE)\n#define PX_LOAD CAT(vload, PX_LOAD_VEC_SIZE)\ninline PX_LOAD_FLOAT_VEC_TYPE readSrcPixelGroup(int2 pos, __global const uchar * srcptr,\nint srcstep, const struct RectCoords srcCoords)\n{\n__global const srcT1 * ptr = (__global const srcT1 *)\n(srcptr + mad24(pos.y, srcstep, pos.x * SRCSIZE));\nreturn PX_LOAD_FLOAT_VEC_CONV(PX_LOAD(0, ptr));\n}\n#define LOOP1(VAR, STMT) (STMT); (VAR)++;\n#define LOOP2(VAR, STMT) LOOP1(VAR, STMT); (STMT); (VAR)++;\n#define LOOP3(VAR, STMT) LOOP2(VAR, STMT); (STMT); (VAR)++;\n#define LOOP4(VAR, STMT) LOOP3(VAR, STMT); (STMT); (VAR)++;\n#define LOOP5(VAR, STMT) LOOP4(VAR, STMT); (STMT); (VAR)++;\n#define LOOP6(VAR, STMT) LOOP5(VAR, STMT); (STMT); (VAR)++;\n#define LOOP7(VAR, STMT) LOOP6(VAR, STMT); (STMT); (VAR)++;\n#define LOOP8(VAR, STMT) LOOP7(VAR, STMT); (STMT); (VAR)++;\n#define LOOP9(VAR, STMT) LOOP8(VAR, STMT); (STMT); (VAR)++;\n#define LOOP10(VAR, STMT) LOOP9(VAR, STMT); (STMT); (VAR)++;\n#define LOOP11(VAR, STMT) LOOP10(VAR, STMT); (STMT); (VAR)++;\n#define LOOP12(VAR, STMT) LOOP11(VAR, STMT); (STMT); (VAR)++;\n#define LOOP13(VAR, STMT) LOOP12(VAR, STMT); (STMT); (VAR)++;\n#define LOOP(N, VAR, STMT) CAT(LOOP, N)((VAR), (STMT))\n#ifdef OP_BOX_FILTER\n#define PROCESS_ELEM \\\nWT total_sum = (WT)(0); \\\nint sy = 0; \\\nLOOP(KERNEL_SIZE_Y, sy, \\\n{ \\\nint sx = 0; \\\nLOOP(KERNEL_SIZE_X, sx, \\\n{ \\\ntotal_sum += privateData[py + sy][px + sx]; \\\n}); \\\n})\n#elif defined OP_FILTER2D\n#define DIG(a) a,\n__constant WT1 kernelData[] = { COEFF };\n#define PROCESS_ELEM \\\nWT total_sum = 0; \\\nint sy = 0; \\\nint kernelIndex = 0; \\\nLOOP(KERNEL_SIZE_Y, sy, \\\n{ \\\nint sx = 0; \\\nLOOP(KERNEL_SIZE_X, sx, \\\n{ \\\ntotal_sum = fma(kernelData[kernelIndex++], privateData[py + sy][px + sx], total_sum); \\\n}); \\\n})\n#elif defined OP_ERODE || defined OP_DILATE\n#ifdef DEPTH_0\n#define MIN_VAL 0\n#define MAX_VAL UCHAR_MAX\n#elif defined DEPTH_1\n#define MIN_VAL SCHAR_MIN\n#define MAX_VAL SCHAR_MAX\n#elif defined DEPTH_2\n#define MIN_VAL 0\n#define MAX_VAL USHRT_MAX\n#elif defined DEPTH_3\n#define MIN_VAL SHRT_MIN\n#define MAX_VAL SHRT_MAX\n#elif defined DEPTH_4\n#define MIN_VAL INT_MIN\n#define MAX_VAL INT_MAX\n#elif defined DEPTH_5\n#define MIN_VAL (-FLT_MAX)\n#define MAX_VAL FLT_MAX\n#elif defined DEPTH_6\n#define MIN_VAL (-DBL_MAX)\n#define MAX_VAL DBL_MAX\n#endif\n#ifdef OP_ERODE\n#define VAL (WT)MAX_VAL\n#elif defined OP_DILATE\n#define VAL (WT)MIN_VAL\n#else\n#error \"Unknown operation\"\n#endif\n#define convert_float1 convert_float\n#define convert_uchar1 convert_uchar\n#define convert_int1 convert_int\n#define convert_uint1 convert_uint\n#ifdef OP_ERODE\n#if defined INTEL_DEVICE && defined DEPTH_0\n#define WA_CONVERT_1 CAT(convert_uint, cn)\n#define WA_CONVERT_2 CAT(convert_, srcT)\n#define MORPH_OP(A, B) ((A) < (B) ? (A) : (B))\n#else\n#define MORPH_OP(A, B) min((A), (B))\n#endif\n#endif\n#ifdef OP_DILATE\n#define MORPH_OP(A, B) max((A), (B))\n#endif\n#define PROCESS(_y, _x) \\\ntotal_sum = convertToWT(MORPH_OP(convertToWT(total_sum), convertToWT(privateData[py + _y][px + _x])));\n#define PROCESS_ELEM \\\nWT total_sum = convertToWT(VAL); \\\nPROCESS_ELEM_\n#else\n#error \"No processing is specified\"\n#endif\n#if defined OP_GRADIENT || defined OP_TOPHAT || defined OP_BLACKHAT\n#define EXTRA_PARAMS , __global const uchar * matptr, int mat_step, int mat_offset\n#else\n#define EXTRA_PARAMS\n#endif\ninline WT getBorderPixel(const struct RectCoords bounds, int2 coord,\n__global const uchar * srcptr, int srcstep)\n{\n#ifdef BORDER_CONSTANT\n#ifdef OP_ERODE\nreturn (WT)(MAX_VAL);\n#elif defined OP_DILATE\nreturn (WT)(MIN_VAL);\n#else\nreturn (WT)(0);\n#endif\n#else\nint selected_col = coord.x;\nint selected_row = coord.y;\nEXTRAPOLATE(selected_col, selected_row,\nbounds.x1, bounds.y1,\nbounds.x2, bounds.y2);\n__global const uchar* ptr = srcptr + mad24(selected_row, srcstep, selected_col * SRCSIZE);\nreturn convertToWT(loadpix(ptr));\n#endif\n}\ninline WT readSrcPixelSingle(int2 pos, __global const uchar * srcptr,\nint srcstep, const struct RectCoords srcCoords)\n{\nif (!isBorder(srcCoords, pos, 1))\n{\n__global const uchar * ptr = srcptr + mad24(pos.y, srcstep, pos.x * SRCSIZE);\nreturn convertToWT(loadpix(ptr));\n}\nelse\nreturn getBorderPixel(srcCoords, pos, srcptr, srcstep);\n}\n__kernel void filterSmall(__global const uchar * srcptr, int src_step, int srcOffsetX, int srcOffsetY, int srcEndX, int srcEndY,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols\n#ifdef NORMALIZE\n, float alpha\n#endif\nEXTRA_PARAMS )\n{\nconst struct RectCoords srcCoords = { srcOffsetX, srcOffsetY, srcEndX, srcEndY };\nconst int startX = get_global_id(0) * PX_PER_WI_X;\nconst int startY = get_global_id(1) * PX_PER_WI_Y;\nif (startX >= cols || startY >= rows)\nreturn;\nWT privateData[PX_PER_WI_Y + KERNEL_SIZE_Y - 1][PRIV_DATA_WIDTH];\nint py = 0;\nLOOP(PX_LOAD_Y_ITERATIONS, py,\n{\nint y = startY + py;\nint px = 0;\nLOOP(PX_LOAD_X_ITERATIONS, px,\n{\nint x = startX + (px * PX_LOAD_NUM_PX);\nint2 srcPos = (int2)(srcCoords.x1 + x - ANCHOR_X, srcCoords.y1 + y - ANCHOR_Y);\nif (!isBorder(srcCoords, srcPos, PX_LOAD_NUM_PX))\n{\nPX_LOAD_FLOAT_VEC_TYPE p = readSrcPixelGroup(srcPos, srcptr, src_step, srcCoords);\n#ifdef SQR\n*((PX_LOAD_FLOAT_VEC_TYPE *)&privateData[py][px * PX_LOAD_NUM_PX]) = p * p;\n#else\n*((PX_LOAD_FLOAT_VEC_TYPE *)&privateData[py][px * PX_LOAD_NUM_PX]) = p;\n#endif\n}\nelse\n{\nint lx = 0;\nLOOP(PX_LOAD_NUM_PX, lx,\n{\nWT p = readSrcPixelSingle(srcPos, srcptr, src_step, srcCoords);\n#ifdef SQR\n*((WT*)&privateData[py][px * PX_LOAD_NUM_PX + lx]) = p * p;\n#else\n*((WT*)&privateData[py][px * PX_LOAD_NUM_PX + lx]) = p;\n#endif\nsrcPos.x++;\n});\n}\n});\n});\npy = 0;\nLOOP(PX_PER_WI_Y, py,\n{\nint y = startY + py;\nint px = 0;\nLOOP(PX_PER_WI_X, px,\n{\nint x = startX + px;\nPROCESS_ELEM;\nint dst_index = mad24(y, dst_step, mad24(x, DSTSIZE, dst_offset));\n__global dstT * dstPtr = (__global dstT *)(dstptr + dst_index);\n#ifdef NORMALIZE\ntotal_sum *= (WT)(alpha);\n#endif\n#if defined OP_GRADIENT || defined OP_TOPHAT || defined OP_BLACKHAT\nint mat_index = mad24(y, mat_step, mad24(x, SRCSIZE, mat_offset));\nWT value = convertToWT(loadpix(matptr + mat_index));\n#ifdef OP_GRADIENT\nstorepix(convertToDstT(convertToWT(total_sum) - convertToWT(value)), dstPtr );\n#elif defined OP_TOPHAT\nstorepix(convertToDstT(convertToWT(value) - convertToWT(total_sum)), dstPtr );\n#elif defined OP_BLACKHAT\nstorepix(convertToDstT(convertToWT(total_sum) - convertToWT(value)), dstPtr );\n#endif\n#else\nstorepix(convertToDstT(total_sum), dstPtr);\n#endif\n});\n});\n}\n", "#ifdef OP_MAX_EIGEN_VAL\n__kernel void maxEigenVal(__global const uchar * srcptr, int src_step, int src_offset, int cols,\nint total, __global uchar * dstptr\n#ifdef HAVE_MASK\n, __global const uchar * maskptr, int mask_step, int mask_offset\n#endif\n)\n{\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint  id = get_global_id(0);\n__local float localmem_max[WGS2_ALIGNED];\nfloat maxval = -FLT_MAX;\nfor (int grain = groupnum * WGS; id < total; id += grain)\n{\nint src_index = mad24(id / cols, src_step, mad24((id % cols), (int)sizeof(float), src_offset));\n#ifdef HAVE_MASK\nint mask_index = mad24(id / cols, mask_step, id % cols + mask_offset);\nif (maskptr[mask_index])\n#endif\nmaxval = max(maxval, *(__global const float *)(srcptr + src_index));\n}\nif (lid < WGS2_ALIGNED)\nlocalmem_max[lid] = maxval;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid >= WGS2_ALIGNED && total >= WGS2_ALIGNED)\nlocalmem_max[lid - WGS2_ALIGNED] = max(maxval, localmem_max[lid - WGS2_ALIGNED]);\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = WGS2_ALIGNED >> 1; lsize > 0; lsize >>= 1)\n{\nif (lid < lsize)\n{\nint lid2 = lsize + lid;\nlocalmem_max[lid] = max(localmem_max[lid], localmem_max[lid2]);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (lid == 0)\n*(__global float *)(dstptr + (int)sizeof(float) * gid) = localmem_max[0];\n}\n__kernel void maxEigenValTask(__global float * dst, float qualityLevel,\n__global int * cornersptr)\n{\nfloat maxval = -FLT_MAX;\n#pragma unroll\nfor (int x = 0; x < groupnum; ++x)\nmaxval = max(maxval, dst[x]);\ndst[0] = maxval * qualityLevel;\ncornersptr[0] = 0;\n}\n#elif OP_FIND_CORNERS\n#define GET_SRC_32F(_y, _x) *(__global const float *)(eigptr + (_y) * eig_step + (_x) * (int)sizeof(float) )\n__kernel void findCorners(__global const uchar * eigptr, int eig_step, int eig_offset,\n#ifdef HAVE_MASK\n__global const uchar * mask, int mask_step, int mask_offset,\n#endif\n__global uchar * cornersptr, int rows, int cols,\n__constant float * threshold, int max_corners)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\n__global int* counter = (__global int*) cornersptr;\n__global float2 * corners = (__global float2 *)(cornersptr + (int)sizeof(float2));\nif (y < rows && x < cols\n#ifdef HAVE_MASK\n&& mask[mad24(y, mask_step, x + mask_offset)]\n#endif\n)\n{\n++x, ++y;\nfloat val = GET_SRC_32F(y, x);\nif (val > threshold[0])\n{\nfloat maxVal = val;\nmaxVal = max(GET_SRC_32F(y - 1, x - 1), maxVal);\nmaxVal = max(GET_SRC_32F(y - 1, x    ), maxVal);\nmaxVal = max(GET_SRC_32F(y - 1, x + 1), maxVal);\nmaxVal = max(GET_SRC_32F(y    , x - 1), maxVal);\nmaxVal = max(GET_SRC_32F(y    , x + 1), maxVal);\nmaxVal = max(GET_SRC_32F(y + 1, x - 1), maxVal);\nmaxVal = max(GET_SRC_32F(y + 1, x    ), maxVal);\nmaxVal = max(GET_SRC_32F(y + 1, x + 1), maxVal);\nif (val == maxVal)\n{\nint ind = atomic_inc(counter);\nif (ind < max_corners)\n{\ncorners[ind].x = val;\ncorners[ind].y = as_float(y | (x << 16));\n}\n}\n}\n}\n}\n#endif\n", "#ifndef kercn\n#define kercn 1\n#endif\n#ifndef T\n#define T uchar\n#endif\n#define noconvert\n__kernel void calculate_histogram(__global const uchar * src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * histptr, int total)\n{\nint lid = get_local_id(0);\nint id = get_global_id(0) * kercn;\nint gid = get_group_id(0);\n__local int localhist[BINS];\n#pragma unroll\nfor (int i = lid; i < BINS; i += WGS)\nlocalhist[i] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\n__global const uchar * src = src_ptr + src_offset;\nint src_index;\nfor (int grain = HISTS_COUNT * WGS * kercn; id < total; id += grain)\n{\n#ifdef HAVE_SRC_CONT\nsrc_index = id;\n#else\nsrc_index = mad24(id / src_cols, src_step, id % src_cols);\n#endif\n#if kercn == 1\natomic_inc(localhist + convert_int(src[src_index]));\n#elif kercn == 4\nint value = *(__global const int *)(src + src_index);\natomic_inc(localhist + (value & 0xff));\natomic_inc(localhist + ((value >> 8) & 0xff));\natomic_inc(localhist + ((value >> 16) & 0xff));\natomic_inc(localhist + ((value >> 24) & 0xff));\n#elif kercn >= 2\nT value = *(__global const T *)(src + src_index);\natomic_inc(localhist + value.s0);\natomic_inc(localhist + value.s1);\n#if kercn >= 4\natomic_inc(localhist + value.s2);\natomic_inc(localhist + value.s3);\n#if kercn >= 8\natomic_inc(localhist + value.s4);\natomic_inc(localhist + value.s5);\natomic_inc(localhist + value.s6);\natomic_inc(localhist + value.s7);\n#if kercn == 16\natomic_inc(localhist + value.s8);\natomic_inc(localhist + value.s9);\natomic_inc(localhist + value.sA);\natomic_inc(localhist + value.sB);\natomic_inc(localhist + value.sC);\natomic_inc(localhist + value.sD);\natomic_inc(localhist + value.sE);\natomic_inc(localhist + value.sF);\n#endif\n#endif\n#endif\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n__global int * hist = (__global int *)(histptr + gid * BINS * (int)sizeof(int));\n#pragma unroll\nfor (int i = lid; i < BINS; i += WGS)\nhist[i] = localhist[i];\n}\n#ifndef HT\n#define HT int\n#endif\n#ifndef convertToHT\n#define convertToHT noconvert\n#endif\n__kernel void merge_histogram(__global const int * ghist, __global uchar * histptr, int hist_step, int hist_offset)\n{\nint lid = get_local_id(0);\n__global HT * hist = (__global HT *)(histptr + hist_offset);\n#if WGS >= BINS\nHT res = (HT)(0);\n#else\n#pragma unroll\nfor (int i = lid; i < BINS; i += WGS)\nhist[i] = (HT)(0);\n#endif\n#pragma unroll\nfor (int i = 0; i < HISTS_COUNT; ++i)\n{\n#pragma unroll\nfor (int j = lid; j < BINS; j += WGS)\n#if WGS >= BINS\nres += convertToHT(ghist[j]);\n#else\nhist[j] += convertToHT(ghist[j]);\n#endif\nghist += BINS;\n}\n#if WGS >= BINS\nif (lid < BINS)\n*(__global HT *)(histptr + mad24(lid, hist_step, hist_offset)) = res;\n#endif\n}\n__kernel void calcLUT(__global uchar * dst, __global const int * ghist, int total)\n{\nint lid = get_local_id(0);\n__local int sumhist[BINS];\n__local float scale;\n#if WGS >= BINS\nint res = 0;\n#else\n#pragma unroll\nfor (int i = lid; i < BINS; i += WGS)\nsumhist[i] = 0;\n#endif\n#pragma unroll\nfor (int i = 0; i < HISTS_COUNT; ++i)\n{\n#pragma unroll\nfor (int j = lid; j < BINS; j += WGS)\n#if WGS >= BINS\nres += ghist[j];\n#else\nsumhist[j] += ghist[j];\n#endif\nghist += BINS;\n}\n#if WGS >= BINS\nif (lid < BINS)\nsumhist[lid] = res;\n#endif\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid == 0)\n{\nint sum = 0, i = 0;\nwhile (!sumhist[i])\n++i;\nif (total == sumhist[i])\n{\nscale = 1;\nfor (int j = 0; j < BINS; ++j)\nsumhist[i] = i;\n}\nelse\n{\nscale = 255.f / (total - sumhist[i]);\nfor (sumhist[i++] = 0; i < BINS; i++)\n{\nsum += sumhist[i];\nsumhist[i] = sum;\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n#pragma unroll\nfor (int i = lid; i < BINS; i += WGS)\ndst[i]= convert_uchar_sat_rte(convert_float(sumhist[i]) * scale);\n}\n", "#define ACCUM(ptr) *((__global int*)(ptr))\n#ifdef MAKE_POINTS_LIST\n__kernel void make_point_list(__global const uchar * src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * list_ptr, int list_step, int list_offset, __global int* global_offset)\n{\nint x = get_local_id(0);\nint y = get_group_id(1);\n__local int l_index, l_offset;\n__local int l_points[LOCAL_SIZE];\n__global const uchar * src = src_ptr + mad24(y, src_step, src_offset);\n__global int * list = (__global int*)(list_ptr + list_offset);\nif (x == 0)\nl_index = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y < src_rows)\n{\ny <<= 16;\nfor (int i=x; i < src_cols; i+=GROUP_SIZE)\n{\nif (src[i])\n{\nint val = y | i;\nint index = atomic_inc(&l_index);\nl_points[index] = val;\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x == 0)\nl_offset = atomic_add(global_offset, l_index);\nbarrier(CLK_LOCAL_MEM_FENCE);\nlist += l_offset;\nfor (int i=x; i < l_index; i+=GROUP_SIZE)\n{\nlist[i] = l_points[i];\n}\n}\n#elif defined FILL_ACCUM_GLOBAL\n__kernel void fill_accum_global(__global const uchar * list_ptr, int list_step, int list_offset,\n__global uchar * accum_ptr, int accum_step, int accum_offset,\nint total_points, float irho, float theta, int numrho, int numangle)\n{\nint theta_idx = get_global_id(1);\nint count_idx = get_global_id(0);\nint glob_size = get_global_size(0);\nfloat cosVal;\nfloat sinVal = sincos(theta * ((float)theta_idx), &cosVal);\nsinVal *= irho;\ncosVal *= irho;\n__global const int * list = (__global const int*)(list_ptr + list_offset);\n__global int* accum = (__global int*)(accum_ptr + mad24(theta_idx + 1, accum_step, accum_offset));\nconst int shift = (numrho - 1) / 2;\nif (theta_idx < numangle)\n{\nfor (int i = count_idx; i < total_points; i += glob_size)\n{\nconst int val = list[i];\nconst int x = (val & 0xFFFF);\nconst int y = (val >> 16) & 0xFFFF;\nint r = convert_int_rte(mad(x, cosVal, y * sinVal)) + shift;\natomic_inc(accum + r + 1);\n}\n}\n}\n#elif defined FILL_ACCUM_LOCAL\n__kernel void fill_accum_local(__global const uchar * list_ptr, int list_step, int list_offset,\n__global uchar * accum_ptr, int accum_step, int accum_offset,\nint total_points, float irho, float theta, int numrho, int numangle)\n{\nint theta_idx = get_group_id(1);\nint count_idx = get_local_id(0);\nif (theta_idx > 0 && theta_idx < numangle + 1)\n{\nfloat cosVal;\nfloat sinVal = sincos(theta * (float) (theta_idx-1), &cosVal);\nsinVal *= irho;\ncosVal *= irho;\n__local int l_accum[BUFFER_SIZE];\nfor (int i=count_idx; i<BUFFER_SIZE; i+=LOCAL_SIZE)\nl_accum[i] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\n__global const int * list = (__global const int*)(list_ptr + list_offset);\nconst int shift = (numrho - 1) / 2;\nfor (int i = count_idx; i < total_points; i += LOCAL_SIZE)\n{\nconst int point = list[i];\nconst int x = (point & 0xFFFF);\nconst int y = point >> 16;\nint r = convert_int_rte(mad(x, cosVal, y * sinVal)) + shift;\natomic_inc(l_accum + r + 1);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n__global int* accum = (__global int*)(accum_ptr + mad24(theta_idx, accum_step, accum_offset));\nfor (int i=count_idx; i<BUFFER_SIZE; i+=LOCAL_SIZE)\naccum[i] = l_accum[i];\n}\nelse if (theta_idx < numangle + 2)\n{\n__global int* accum = (__global int*)(accum_ptr + mad24(theta_idx, accum_step, accum_offset));\nfor (int i=count_idx; i<BUFFER_SIZE; i+=LOCAL_SIZE)\naccum[i] = 0;\n}\n}\n#elif defined GET_LINES\n__kernel void get_lines(__global uchar * accum_ptr, int accum_step, int accum_offset, int accum_rows, int accum_cols,\n__global uchar * lines_ptr, int lines_step, int lines_offset, __global int* lines_index_ptr,\nint linesMax, int threshold, float rho, float theta)\n{\nint x0 = get_global_id(0);\nint y = get_global_id(1);\nint glob_size = get_global_size(0);\nif (y < accum_rows-2)\n{\n__global uchar* accum = accum_ptr + mad24(y+1, accum_step, mad24(x0+1, (int) sizeof(int), accum_offset));\n__global float2* lines = (__global float2*)(lines_ptr + lines_offset);\n__global int* lines_index = lines_index_ptr + 1;\nfor (int x=x0; x<accum_cols-2; x+=glob_size)\n{\nint curVote = ACCUM(accum);\nif (curVote > threshold && curVote > ACCUM(accum - sizeof(int)) && curVote >= ACCUM(accum + sizeof(int)) &&\ncurVote > ACCUM(accum - accum_step) && curVote >= ACCUM(accum + accum_step))\n{\nint index = atomic_inc(lines_index);\nif (index < linesMax)\n{\nfloat radius = (x - (accum_cols - 3) * 0.5f) * rho;\nfloat angle = y * theta;\nlines[index] = (float2)(radius, angle);\n}\n}\naccum += glob_size * (int) sizeof(int);\n}\n}\n}\n#elif GET_LINES_PROBABOLISTIC\n__kernel void get_lines(__global const uchar * accum_ptr, int accum_step, int accum_offset, int accum_rows, int accum_cols,\n__global const uchar * src_ptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * lines_ptr, int lines_step, int lines_offset, __global int* lines_index_ptr,\nint linesMax, int threshold, int lineLength, int lineGap, float rho, float theta)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (y < accum_rows-2)\n{\n__global uchar* accum = accum_ptr + mad24(y+1, accum_step, mad24(x+1, (int) sizeof(int), accum_offset));\n__global int4* lines = (__global int4*)(lines_ptr + lines_offset);\n__global int* lines_index = lines_index_ptr + 1;\nint curVote = ACCUM(accum);\nif (curVote >= threshold &&\ncurVote > ACCUM(accum - accum_step - sizeof(int)) &&\ncurVote > ACCUM(accum - accum_step) &&\ncurVote > ACCUM(accum - accum_step + sizeof(int)) &&\ncurVote > ACCUM(accum - sizeof(int)) &&\ncurVote > ACCUM(accum + sizeof(int)) &&\ncurVote > ACCUM(accum + accum_step - sizeof(int)) &&\ncurVote > ACCUM(accum + accum_step) &&\ncurVote > ACCUM(accum + accum_step + sizeof(int)))\n{\nconst float radius = (x - (accum_cols - 2 - 1) * 0.5f) * rho;\nconst float angle = y * theta;\nfloat cosa;\nfloat sina = sincos(angle, &cosa);\nfloat2 p0 = (float2)(cosa * radius, sina * radius);\nfloat2 dir = (float2)(-sina, cosa);\nfloat2 pb[4] = { (float2)(-1, -1), (float2)(-1, -1), (float2)(-1, -1), (float2)(-1, -1) };\nfloat a;\nif (dir.x != 0)\n{\na = -p0.x / dir.x;\npb[0].x = 0;\npb[0].y = p0.y + a * dir.y;\na = (src_cols - 1 - p0.x) / dir.x;\npb[1].x = src_cols - 1;\npb[1].y = p0.y + a * dir.y;\n}\nif (dir.y != 0)\n{\na = -p0.y / dir.y;\npb[2].x = p0.x + a * dir.x;\npb[2].y = 0;\na = (src_rows - 1 - p0.y) / dir.y;\npb[3].x = p0.x + a * dir.x;\npb[3].y = src_rows - 1;\n}\nif (pb[0].x == 0 && (pb[0].y >= 0 && pb[0].y < src_rows))\n{\np0 = pb[0];\nif (dir.x < 0)\ndir = -dir;\n}\nelse if (pb[1].x == src_cols - 1 && (pb[1].y >= 0 && pb[1].y < src_rows))\n{\np0 = pb[1];\nif (dir.x > 0)\ndir = -dir;\n}\nelse if (pb[2].y == 0 && (pb[2].x >= 0 && pb[2].x < src_cols))\n{\np0 = pb[2];\nif (dir.y < 0)\ndir = -dir;\n}\nelse if (pb[3].y == src_rows - 1 && (pb[3].x >= 0 && pb[3].x < src_cols))\n{\np0 = pb[3];\nif (dir.y > 0)\ndir = -dir;\n}\ndir /= max(fabs(dir.x), fabs(dir.y));\nfloat2 line_end[2];\nint gap;\nbool inLine = false;\nif (p0.x < 0 || p0.x >= src_cols || p0.y < 0 || p0.y >= src_rows)\nreturn;\nfor (;;)\n{\nif (*(src_ptr + mad24(p0.y, src_step, p0.x + src_offset)))\n{\ngap = 0;\nif (!inLine)\n{\nline_end[0] = p0;\nline_end[1] = p0;\ninLine = true;\n}\nelse\n{\nline_end[1] = p0;\n}\n}\nelse if (inLine)\n{\nif (++gap > lineGap)\n{\nbool good_line = fabs(line_end[1].x - line_end[0].x) >= lineLength ||\nfabs(line_end[1].y - line_end[0].y) >= lineLength;\nif (good_line)\n{\nint index = atomic_inc(lines_index);\nif (index < linesMax)\nlines[index] = (int4)(line_end[0].x, line_end[0].y, line_end[1].x, line_end[1].y);\n}\ngap = 0;\ninLine = false;\n}\n}\np0 = p0 + dir;\nif (p0.x < 0 || p0.x >= src_cols || p0.y < 0 || p0.y >= src_rows)\n{\nif (inLine)\n{\nbool good_line = fabs(line_end[1].x - line_end[0].x) >= lineLength ||\nfabs(line_end[1].y - line_end[0].y) >= lineLength;\nif (good_line)\n{\nint index = atomic_inc(lines_index);\nif (index < linesMax)\nlines[index] = (int4)(line_end[0].x, line_end[0].y, line_end[1].x, line_end[1].y);\n}\n}\nbreak;\n}\n}\n}\n}\n}\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#ifndef LOCAL_SUM_SIZE\n#define LOCAL_SUM_SIZE      16\n#endif\n#define LOCAL_SUM_STRIDE    (LOCAL_SUM_SIZE + 1)\nkernel void integral_sum_cols(__global const uchar *src_ptr, int src_step, int src_offset, int rows, int cols,\n__global uchar *buf_ptr, int buf_step, int buf_offset\n#ifdef SUM_SQUARE\n,__global uchar *buf_sq_ptr, int buf_sq_step, int buf_sq_offset\n#endif\n)\n{\n__local sumT lm_sum[LOCAL_SUM_STRIDE * LOCAL_SUM_SIZE];\n#ifdef SUM_SQUARE\n__local sumSQT lm_sum_sq[LOCAL_SUM_STRIDE * LOCAL_SUM_SIZE];\n#endif\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint x = get_global_id(0);\nint src_index = x + src_offset;\nsumT accum = 0;\n#ifdef SUM_SQUARE\nsumSQT accum_sq = 0;\n#endif\nfor (int y = 0; y < rows; y += LOCAL_SUM_SIZE)\n{\nint lsum_index = lid;\n#pragma unroll\nfor (int yin = 0; yin < LOCAL_SUM_SIZE; yin++, src_index+=src_step, lsum_index += LOCAL_SUM_STRIDE)\n{\nif ((x < cols) && (y + yin < rows))\n{\n__global const uchar *src = src_ptr + src_index;\naccum += src[0];\n#ifdef SUM_SQUARE\nsumSQT temp = src[0] * src[0];\naccum_sq += temp;\n#endif\n}\nlm_sum[lsum_index] = accum;\n#ifdef SUM_SQUARE\nlm_sum_sq[lsum_index] = accum_sq;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint buf_index = mad24(buf_step, LOCAL_SUM_SIZE * gid, mad24((int)sizeof(sumT), y + lid, buf_offset));\n#ifdef SUM_SQUARE\nint buf_sq_index = mad24(buf_sq_step, LOCAL_SUM_SIZE * gid, mad24((int)sizeof(sumSQT), y + lid, buf_sq_offset));\n#endif\nlsum_index = LOCAL_SUM_STRIDE * lid;\n#pragma unroll\nfor (int yin = 0; yin < LOCAL_SUM_SIZE; yin++, lsum_index ++)\n{\n__global sumT *buf = (__global sumT *)(buf_ptr + buf_index);\nbuf[0] = lm_sum[lsum_index];\nbuf_index += buf_step;\n#ifdef SUM_SQUARE\n__global sumSQT *bufsq = (__global sumSQT *)(buf_sq_ptr + buf_sq_index);\nbufsq[0] = lm_sum_sq[lsum_index];\nbuf_sq_index += buf_sq_step;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\nkernel void integral_sum_rows(__global const uchar *buf_ptr, int buf_step, int buf_offset,\n#ifdef SUM_SQUARE\n__global uchar *buf_sq_ptr, int buf_sq_step, int buf_sq_offset,\n#endif\n__global uchar *dst_ptr, int dst_step, int dst_offset, int rows, int cols\n#ifdef SUM_SQUARE\n,__global uchar *dst_sq_ptr, int dst_sq_step, int dst_sq_offset\n#endif\n)\n{\n__local sumT lm_sum[LOCAL_SUM_STRIDE * LOCAL_SUM_SIZE];\n#ifdef SUM_SQUARE\n__local sumSQT lm_sum_sq[LOCAL_SUM_STRIDE * LOCAL_SUM_SIZE];\n#endif\nint lid = get_local_id(0);\nint gid = get_group_id(0);\nint gs = get_global_size(0);\nint x = get_global_id(0);\n__global sumT *dst = (__global sumT *)(dst_ptr + dst_offset);\nfor (int xin = x; xin < cols; xin += gs)\n{\ndst[xin] = 0;\n}\ndst_offset += dst_step;\nif (x < rows - 1)\n{\ndst = (__global sumT *)(dst_ptr + mad24(x, dst_step, dst_offset));\ndst[0] = 0;\n}\nint buf_index = mad24((int)sizeof(sumT), x, buf_offset);\nsumT accum = 0;\n#ifdef SUM_SQUARE\n__global sumSQT *dst_sq = (__global sumT *)(dst_sq_ptr + dst_sq_offset);\nfor (int xin = x; xin < cols; xin += gs)\n{\ndst_sq[xin] = 0;\n}\ndst_sq_offset += dst_sq_step;\nif (x < rows - 1)\n{\ndst_sq = (__global sumSQT *)(dst_sq_ptr + mad24(x, dst_sq_step, dst_sq_offset));\ndst_sq[0] = 0;\n}\nint buf_sq_index = mad24((int)sizeof(sumSQT), x, buf_sq_offset);\nsumSQT accum_sq = 0;\n#endif\nfor (int y = 1; y < cols; y += LOCAL_SUM_SIZE)\n{\nint lsum_index = lid;\n#pragma unroll\nfor (int yin = 0; yin < LOCAL_SUM_SIZE; yin++, lsum_index += LOCAL_SUM_STRIDE)\n{\n__global const sumT *buf = (__global const sumT *)(buf_ptr + buf_index);\naccum += buf[0];\nlm_sum[lsum_index] = accum;\nbuf_index += buf_step;\n#ifdef SUM_SQUARE\n__global const sumSQT *buf_sq = (__global const sumSQT *)(buf_sq_ptr + buf_sq_index);\naccum_sq += buf_sq[0];\nlm_sum_sq[lsum_index] = accum_sq;\nbuf_sq_index += buf_sq_step;\n#endif\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y + lid < cols)\n{\nint dst_index = mad24(dst_step, LOCAL_SUM_SIZE * gid, mad24((int)sizeof(sumT), y + lid, dst_offset));\n#ifdef SUM_SQUARE\nint dst_sq_index = mad24(dst_sq_step, LOCAL_SUM_SIZE * gid, mad24((int)sizeof(sumSQT), y + lid, dst_sq_offset));\n#endif\nlsum_index = LOCAL_SUM_STRIDE * lid;\nint yin_max = min(rows - 1 -  LOCAL_SUM_SIZE * gid, LOCAL_SUM_SIZE);\n#pragma unroll\nfor (int yin = 0; yin < yin_max; yin++, lsum_index++)\n{\ndst = (__global sumT *)(dst_ptr + dst_index);\ndst[0] = lm_sum[lsum_index];\ndst_index += dst_step;\n#ifdef SUM_SQUARE\ndst_sq = (__global sumSQT *)(dst_sq_ptr + dst_sq_index);\ndst_sq[0] = lm_sum_sq[lsum_index];\ndst_sq_index += dst_sq_step;\n#endif\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\n", "#define noconvert\n#ifdef ONLY_SUM_CONVERT\n__kernel void sumConvert(__global const uchar * src1ptr, int src1_step, int src1_offset,\n__global const uchar * src2ptr, int src2_step, int src2_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\ncoeffT scale, coeffT delta)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (y < dst_rows && x < dst_cols)\n{\nint src1_index = mad24(y, src1_step, mad24(x, (int)sizeof(srcT), src1_offset));\nint src2_index = mad24(y, src2_step, mad24(x, (int)sizeof(srcT), src2_offset));\nint dst_index = mad24(y, dst_step, mad24(x, (int)sizeof(dstT), dst_offset));\n__global const srcT * src1 = (__global const srcT *)(src1ptr + src1_index);\n__global const srcT * src2 = (__global const srcT *)(src2ptr + src2_index);\n__global dstT * dst = (__global dstT *)(dstptr + dst_index);\n#if wdepth <= 4\ndst[0] = convertToDT( mad24((WT)(scale), convertToWT(src1[0]) + convertToWT(src2[0]), (WT)(delta)) );\n#else\ndst[0] = convertToDT( mad((WT)(scale), convertToWT(src1[0]) + convertToWT(src2[0]), (WT)(delta)) );\n#endif\n}\n}\n#else\n#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(x, maxV)\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = clamp((x), 0, (maxV)-1); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = ( (x) + (maxV) ) % (maxV); \\\n}\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min(((maxV)-1)*2-(x)+1, max((x),-(x)-1) ); \\\n}\n#elif defined BORDER_REFLECT_101\n#define EXTRAPOLATE(x, maxV) \\\n{ \\\n(x) = min(((maxV)-1)*2-(x), max((x),-(x)) ); \\\n}\n#else\n#error No extrapolation method\n#endif\n#if CN != 3\n#define loadpix(addr) *(__global const srcT *)(addr)\n#define storepix(val, addr)  *(__global dstT *)(addr) = val\n#define SRCSIZE (int)sizeof(srcT)\n#define DSTSIZE (int)sizeof(dstT)\n#else\n#define loadpix(addr)  vload3(0, (__global const srcT1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global dstT1 *)(addr))\n#define SRCSIZE (int)sizeof(srcT1)*3\n#define DSTSIZE (int)sizeof(dstT1)*3\n#endif\n#define SRC(_x,_y) convertToWT(loadpix(Src + mad24(_y, src_step, SRCSIZE * _x)))\n#ifdef BORDER_CONSTANT\n#define ELEM(_x,_y,r_edge,t_edge,const_v) (_x)<0 | (_x) >= (r_edge) | (_y)<0 | (_y) >= (t_edge) ? (const_v) : SRC((_x),(_y))\n#else\n#define ELEM(_x,_y,r_edge,t_edge,const_v) SRC((_x),(_y))\n#endif\n#define DIG(a) a,\n__constant WT1 mat_kernelX[] = { KERNEL_MATRIX_X };\n__constant WT1 mat_kernelY[] = { KERNEL_MATRIX_Y };\n__kernel void laplacian(__global uchar* Src, int src_step, int srcOffsetX, int srcOffsetY, int height, int width,\n__global uchar* Dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nWT1 scale, WT1 delta)\n{\n__local WT lsmem[BLK_Y + 2 * RADIUS][BLK_X + 2 * RADIUS];\n__local WT lsmemDy1[BLK_Y][BLK_X + 2 * RADIUS];\n__local WT lsmemDy2[BLK_Y][BLK_X + 2 * RADIUS];\nint lix = get_local_id(0);\nint liy = get_local_id(1);\nint x = get_global_id(0);\nint srcX = x + srcOffsetX - RADIUS;\nint clocY = liy;\ndo\n{\nint yb = clocY + srcOffsetY - RADIUS;\nEXTRAPOLATE(yb, (height));\nint clocX = lix;\nint cSrcX = srcX;\ndo\n{\nint xb = cSrcX;\nEXTRAPOLATE(xb,(width));\nlsmem[clocY][clocX] = ELEM(xb, yb, (width), (height), 0 );\nclocX += BLK_X;\ncSrcX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUS*2));\nclocY += BLK_Y;\n}\nwhile (clocY < BLK_Y+(RADIUS*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\nWT scale_v = (WT)scale;\nWT delta_v = (WT)delta;\nfor (int y = 0; y < dst_rows; y+=BLK_Y)\n{\nint i, clocX = lix;\nWT sum1 = (WT) 0;\nWT sum2 = (WT) 0;\ndo\n{\nsum1 = (WT) 0;\nsum2 = (WT) 0;\nfor (i=0; i<=2*RADIUS; i++)\n{\nsum1 = mad(lsmem[liy + i][clocX], mat_kernelY[i], sum1);\nsum2 = mad(lsmem[liy + i][clocX], mat_kernelX[i], sum2);\n}\nlsmemDy1[liy][clocX] = sum1;\nlsmemDy2[liy][clocX] = sum2;\nclocX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUS*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\nif ((x < dst_cols) && (y + liy < dst_rows))\n{\nsum1 = (WT) 0;\nsum2 = (WT) 0;\nfor (i=0; i<=2*RADIUS; i++)\n{\nsum1 = mad(lsmemDy1[liy][lix+i], mat_kernelX[i], sum1);\nsum2 = mad(lsmemDy2[liy][lix+i], mat_kernelY[i], sum2);\n}\nWT sum = mad(scale_v, (sum1 + sum2), delta_v);\nstorepix(convertToDT(sum), Dst + mad24(y + liy, dst_step, mad24(x, DSTSIZE, dst_offset)));\n}\nfor (int i = liy * BLK_X + lix; i < (RADIUS*2) * (BLK_X+(RADIUS*2)); i += BLK_X * BLK_Y)\n{\nint clocX = i % (BLK_X+(RADIUS*2));\nint clocY = i / (BLK_X+(RADIUS*2));\nlsmem[clocY][clocX] = lsmem[clocY + BLK_Y][clocX];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint yb = y + liy + BLK_Y + srcOffsetY + RADIUS;\nEXTRAPOLATE(yb, (height));\nclocX = lix;\nint cSrcX = x + srcOffsetX - RADIUS;\ndo\n{\nint xb = cSrcX;\nEXTRAPOLATE(xb,(width));\nlsmem[liy + 2*RADIUS][clocX] = ELEM(xb, yb, (width), (height), 0 );\nclocX += BLK_X;\ncSrcX += BLK_X;\n}\nwhile(clocX < BLK_X+(RADIUS*2));\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\n#endif\n", "#if cn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#endif\n#define SQSUMS_PTR(ox, oy) mad24(y + oy, src_sqsums_step, mad24(x + ox, cn, src_sqsums_offset))\n#define SUMS_PTR(ox, oy) mad24(y + oy, src_sums_step, mad24(x + ox, cn, src_sums_offset))\n#define SUMS(ox, oy)    mad24(y+oy, src_sums_step, mad24(x+ox, (int)sizeof(T1)*cn, src_sums_offset))\n#define SQ_SUMS(ox, oy) mad24(y+oy, src_sqsums_step, mad24(x+ox, (int)sizeof(T1)*cn, src_sqsums_offset))\ninline float normAcc(float num, float denum)\n{\nif (fabs(num) < denum)\nreturn num / denum;\nif (fabs(num) < denum * 1.125f)\nreturn num > 0 ? 1 : -1;\nreturn 0;\n}\ninline float normAcc_SQDIFF(float num, float denum)\n{\nif (fabs(num) < denum)\nreturn num / denum;\nif (fabs(num) < denum * 1.125f)\nreturn num > 0 ? 1 : -1;\nreturn 1;\n}\n#define noconvert\n#if cn == 1\n#define convertToDT(value) (float)(value)\n#elif cn == 2\n#define convertToDT(value) (float)(value.x + value.y)\n#elif cn == 3\n#define convertToDT(value) (float)(value.x + value.y + value.z)\n#elif cn == 4\n#define convertToDT(value) (float)(value.x + value.y + value.z + value.w)\n#else\n#error \"cn should be 1-4\"\n#endif\n#ifdef CALC_SUM\n__kernel void calcSum(__global const uchar * srcptr, int src_step, int src_offset,\nint cols, int total, __global float * dst)\n{\nint lid = get_local_id(0), id = get_global_id(0);\n__local WT localmem[WGS2_ALIGNED];\nWT accumulator = (WT)(0), tmp;\nfor ( ; id < total; id += WGS)\n{\nint src_index = mad24(id / cols, src_step, mad24(id % cols, TSIZE, src_offset));\nT src = loadpix(srcptr + src_index);\ntmp = convertToWT(src);\naccumulator = mad(tmp, tmp, accumulator);\n}\nif (lid < WGS2_ALIGNED)\nlocalmem[lid] = accumulator;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lid >= WGS2_ALIGNED && total >= WGS2_ALIGNED)\nlocalmem[lid - WGS2_ALIGNED] += accumulator;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = WGS2_ALIGNED >> 1; lsize > 0; lsize >>= 1)\n{\nif (lid < lsize)\n{\nint lid2 = lsize + lid;\nlocalmem[lid] += localmem[lid2];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (lid == 0)\ndst[0] = convertToDT(localmem[0]);\n}\n#elif defined FIRST_CHANNEL\n__kernel void extractFirstChannel( const __global uchar* img, int img_step, int img_offset,\n__global uchar* res, int res_step, int res_offset, int rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1)*PIX_PER_WI_Y;\nif(x < cols )\n{\n#pragma unroll\nfor (int cy=0; cy < PIX_PER_WI_Y && y < rows; ++cy, ++y)\n{\nT1 image = *(__global const T1*)(img + mad24(y, img_step, mad24(x, (int)sizeof(T1)*cn, img_offset)));;\nint res_idx = mad24(y, res_step, mad24(x, (int)sizeof(float), res_offset));\n*(__global float *)(res + res_idx) = image;\n}\n}\n}\n#elif defined CCORR\n#if cn==1 && PIX_PER_WI_X==4\n__kernel void matchTemplate_Naive_CCORR(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * templateptr, int template_step, int template_offset, int template_rows, int template_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x0 = get_global_id(0)*PIX_PER_WI_X;\nint y = get_global_id(1);\nif (y < dst_rows)\n{\nif (x0 + PIX_PER_WI_X <= dst_cols)\n{\nWT sum = (WT)(0);\nint ind = mad24(y, src_step, mad24(x0, (int)sizeof(T1), src_offset));\n__global const T1 * template = (__global const T1*)(templateptr + template_offset);\nfor (int i = 0; i < template_rows; ++i)\n{\nfor (int j = 0; j < template_cols; ++j)\n{\nT temp = (T)(template[j]);\nT src = vload4(0, (__global const T1*)(srcptr + ind + j*(int)sizeof(T1)));\nsum = mad(convertToWT(src), convertToWT(temp), sum);\n}\nind += src_step;\ntemplate = (__global const T1 *)((__global const uchar *)template + template_step);\n}\nT temp = (T)(template[0]);\nint dst_idx = mad24(y, dst_step, mad24(x0, (int)sizeof(float), dst_offset));\n*(__global float4 *)(dst + dst_idx) = convert_float4(sum);\n}\nelse\n{\nWT1 sum [PIX_PER_WI_X];\n#pragma unroll\nfor (int i=0; i < PIX_PER_WI_X; i++) sum[i] = 0;\n__global const T1 * src = (__global const T1 *)(srcptr + mad24(y, src_step, mad24(x0, (int)sizeof(T1), src_offset)));\n__global const T1 * template = (__global const T1 *)(templateptr + template_offset);\nfor (int i = 0; i < template_rows; ++i)\n{\nfor (int j = 0; j < template_cols; ++j)\n{\n#pragma unroll\nfor (int cx=0, x = x0; cx < PIX_PER_WI_X && x < dst_cols; ++cx, ++x)\n{\nsum[cx] = mad(convertToWT1(src[j+cx]), convertToWT1(template[j]), sum[cx]);\n}\n}\nsrc = (__global const T1 *)((__global const uchar *)src + src_step);\ntemplate = (__global const T1 *)((__global const uchar *)template + template_step);\n}\n#pragma unroll\nfor (int cx=0; cx < PIX_PER_WI_X && x0 < dst_cols; ++cx, ++x0)\n{\nint dst_idx = mad24(y, dst_step, mad24(x0, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) = convertToDT(sum[cx]);\n}\n}\n}\n}\n#else\n__kernel void matchTemplate_Naive_CCORR(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * templateptr, int template_step, int template_offset, int template_rows, int template_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nWT sum = (WT)(0);\nfor (int i = 0; i < template_rows; ++i)\n{\nfor (int j = 0; j < template_cols; ++j)\n{\nT src      = loadpix(srcptr      + mad24(y+i, src_step,    mad24(x+j, TSIZE, src_offset)));\nT template = loadpix(templateptr + mad24(i, template_step, mad24(j, TSIZE, template_offset)));\nsum = mad(convertToWT(src), convertToWT(template), sum);\n}\n}\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) = convertToDT(sum);\n}\n}\n#endif\n#elif defined CCORR_NORMED\n__kernel void matchTemplate_CCORR_NORMED(__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, __global const float * template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\n__global const float * sqsum = (__global const float *)(src_sqsums);\nsrc_sqsums_step /= sizeof(float);\nsrc_sqsums_offset /= sizeof(float);\nfloat image_sqsum_ = (float)(sqsum[SQSUMS_PTR(template_cols, template_rows)] - sqsum[SQSUMS_PTR(template_cols, 0)] -\nsqsum[SQSUMS_PTR(0, template_rows)] + sqsum[SQSUMS_PTR(0, 0)]);\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst + dst_idx);\n*dstult = normAcc(*dstult, sqrt(image_sqsum_ * template_sqsum[0]));\n}\n}\n#elif defined SQDIFF\n__kernel void matchTemplate_Naive_SQDIFF(__global const uchar * srcptr, int src_step, int src_offset,\n__global const uchar * templateptr, int template_step, int template_offset, int template_rows, int template_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nWT sum = (WT)(0), value;\nfor (int i = 0; i < template_rows; ++i)\n{\nfor (int j = 0; j < template_cols; ++j)\n{\nT src      = loadpix(srcptr      + mad24(y+i, src_step,    mad24(x+j, TSIZE, src_offset)));\nT template = loadpix(templateptr + mad24(i, template_step, mad24(j, TSIZE, template_offset)));\nvalue = convertToWT(src) - convertToWT(template);\nsum = mad(value, value, sum);\n}\n}\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) = convertToDT(sum);\n}\n}\n#elif defined SQDIFF_PREPARED\n__kernel void matchTemplate_Prepared_SQDIFF(__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, __global const float * template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nsrc_sqsums_step /= sizeof(float);\nsrc_sqsums_offset /= sizeof(float);\n__global const float * sqsum = (__global const float *)(src_sqsums);\nfloat image_sqsum_ = (float)(\n(sqsum[SQSUMS_PTR(template_cols, template_rows)] - sqsum[SQSUMS_PTR(template_cols, 0)]) -\n(sqsum[SQSUMS_PTR(0, template_rows)] - sqsum[SQSUMS_PTR(0, 0)]));\nfloat template_sqsum_value = template_sqsum[0];\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst + dst_idx);\n*dstult = image_sqsum_ - 2.0f * dstult[0] + template_sqsum_value;\n}\n}\n#elif defined SQDIFF_NORMED\n__kernel void matchTemplate_SQDIFF_NORMED(__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, __global const float * template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nsrc_sqsums_step /= sizeof(float);\nsrc_sqsums_offset /= sizeof(float);\n__global const float * sqsum = (__global const float *)(src_sqsums);\nfloat image_sqsum_ = (float)(\n(sqsum[SQSUMS_PTR(template_cols, template_rows)] - sqsum[SQSUMS_PTR(template_cols, 0)]) -\n(sqsum[SQSUMS_PTR(0, template_rows)] - sqsum[SQSUMS_PTR(0, 0)]));\nfloat template_sqsum_value = template_sqsum[0];\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst + dst_idx);\n*dstult = normAcc_SQDIFF(image_sqsum_ - 2.0f * dstult[0] + template_sqsum_value, sqrt(image_sqsum_ * template_sqsum_value));\n}\n}\n#elif defined CCOEFF\n#if cn == 1\n__kernel void matchTemplate_Prepared_CCOEFF(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, float template_sum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\n__global const T* sum = (__global const T*)(src_sums + mad24(y, src_sums_step, mad24(x, (int)sizeof(T), src_sums_offset)));\nint step = src_sums_step/(int)sizeof(T);\nT image_sum = (T)(0), value;\nvalue = (T)(sum[mad24(template_rows, step, template_cols)] - sum[mad24(template_rows, step, 0)] - sum[template_cols] + sum[0]);\nimage_sum = mad(value, template_sum , image_sum);\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) -= convertToDT(image_sum);\n}\n}\n#elif cn==3\n__kernel void matchTemplate_Prepared_CCOEFF(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, float4 template_sum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nT image_sum = (T)(0), value, temp_sum;\ntemp_sum.x = template_sum.x;\ntemp_sum.y = template_sum.y;\ntemp_sum.z = template_sum.z;\nvalue  = vload3(0, (__global const T1 *)(src_sums + SUMS(template_cols, template_rows)));\nvalue -= vload3(0, (__global const T1 *)(src_sums + SUMS(0, template_rows)));\nvalue -= vload3(0, (__global const T1 *)(src_sums + SUMS(template_cols, 0)));\nvalue += vload3(0, (__global const T1 *)(src_sums + SUMS(0, 0)));\nimage_sum = mad(value, temp_sum , 0);\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) -= convertToDT(image_sum);\n}\n}\n#elif (cn==2 || cn==4)\n__kernel void matchTemplate_Prepared_CCOEFF(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint template_rows, int template_cols, float4 template_sum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\n__global const T* sum = (__global const T*)(src_sums + mad24(y, src_sums_step, mad24(x, (int)sizeof(T), src_sums_offset)));\nint step = src_sums_step/(int)sizeof(T);\nT image_sum = (T)(0), value, temp_sum;\n#if cn==2\ntemp_sum.x = template_sum.x;\ntemp_sum.y = template_sum.y;\n#else\ntemp_sum = template_sum;\n#endif\nvalue = (sum[mad24(template_rows, step, template_cols)] - sum[mad24(template_rows, step, 0)] - sum[template_cols] + sum[0]);\nimage_sum = mad(value, temp_sum , image_sum);\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n*(__global float *)(dst + dst_idx) -= convertToDT(image_sum);\n}\n}\n#else\n#error \"cn should be 1-4\"\n#endif\n#elif defined CCOEFF_NORMED\n#if cn == 1\n__kernel void matchTemplate_CCOEFF_NORMED(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint t_rows, int t_cols, float weight, float template_sum, float template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nfloat sum_[2];\nfloat sqsum_[2];\nif (x < dst_cols && y < dst_rows)\n{\nint step = src_sums_step/(int)sizeof(T);\n__global const T* sum   = (__global const T*)(src_sums + mad24(y, src_sums_step,     mad24(x, (int)sizeof(T), src_sums_offset)));\n__global const T* sqsum = (__global const T*)(src_sqsums + mad24(y, src_sqsums_step, mad24(x, (int)sizeof(T), src_sqsums_offset)));\nT value_sum   = sum[mad24(t_rows, step, t_cols)] - sum[mad24(t_rows, step, 0)] - sum[t_cols] + sum[0];\nT value_sqsum = sqsum[mad24(t_rows, step, t_cols)] - sqsum[mad24(t_rows, step, 0)] - sqsum[t_cols] + sqsum[0];\nfloat num = convertToDT(mad(value_sum, template_sum, 0));\nvalue_sqsum -= weight * value_sum * value_sum;\nfloat denum = sqrt(mad(template_sqsum, convertToDT(value_sqsum), 0));\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst+dst_idx);\n*dstult = normAcc((*dstult) - num, denum);\n}\n}\n#elif cn==3\n__kernel void matchTemplate_CCOEFF_NORMED(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint t_rows, int t_cols, float weight, float4 template_sum, float template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint step = src_sums_step/(int)sizeof(T);\nT temp_sum, value_sum, value_sqsum;\ntemp_sum.x = template_sum.x;\ntemp_sum.y = template_sum.y;\ntemp_sum.z = template_sum.z;\nvalue_sum  = vload3(0, (__global const T1 *)(src_sums + SUMS(t_cols, t_rows)));\nvalue_sum -= vload3(0, (__global const T1 *)(src_sums + SUMS(0, t_rows)));\nvalue_sum -= vload3(0, (__global const T1 *)(src_sums + SUMS(t_cols, 0)));\nvalue_sum += vload3(0, (__global const T1 *)(src_sums + SUMS(0, 0)));\nvalue_sqsum  = vload3(0, (__global const T1 *)(src_sqsums + SQ_SUMS(t_cols, t_rows)));\nvalue_sqsum -= vload3(0, (__global const T1 *)(src_sqsums + SQ_SUMS(0, t_rows)));\nvalue_sqsum -= vload3(0, (__global const T1 *)(src_sqsums + SQ_SUMS(t_cols, 0)));\nvalue_sqsum += vload3(0, (__global const T1 *)(src_sqsums + SQ_SUMS(0, 0)));\nfloat num = convertToDT(mad(value_sum, temp_sum, 0));\nvalue_sqsum -= weight * value_sum * value_sum;\nfloat denum = sqrt(mad(template_sqsum, convertToDT(value_sqsum), 0));\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst+dst_idx);\n*dstult = normAcc((*dstult) - num, denum);\n}\n}\n#elif (cn==2 || cn==4)\n__kernel void matchTemplate_CCOEFF_NORMED(__global const uchar * src_sums, int src_sums_step, int src_sums_offset,\n__global const uchar * src_sqsums, int src_sqsums_step, int src_sqsums_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint t_rows, int t_cols, float weight, float4 template_sum, float template_sqsum)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint step = src_sums_step/(int)sizeof(T);\nT temp_sum;\n__global const T* sum   = (__global const T*)(src_sums + mad24(y, src_sums_step,     mad24(x, (int)sizeof(T), src_sums_offset)));\n__global const T* sqsum = (__global const T*)(src_sqsums + mad24(y, src_sqsums_step, mad24(x, (int)sizeof(T), src_sqsums_offset)));\nT value_sum   = sum[mad24(t_rows, step, t_cols)] - sum[mad24(t_rows, step, 0)] - sum[t_cols] + sum[0];\nT value_sqsum = sqsum[mad24(t_rows, step, t_cols)] - sqsum[mad24(t_rows, step, 0)] - sqsum[t_cols] + sqsum[0];\n#if cn==2\ntemp_sum.x = template_sum.x;\ntemp_sum.y = template_sum.y;\n#else\ntemp_sum = template_sum;\n#endif\nfloat num = convertToDT(mad(value_sum, temp_sum, 0));\nvalue_sqsum -= weight * value_sum * value_sum;\nfloat denum = sqrt(mad(template_sqsum, convertToDT(value_sqsum), 0));\nint dst_idx = mad24(y, dst_step, mad24(x, (int)sizeof(float), dst_offset));\n__global float * dstult = (__global float *)(dst+dst_idx);\n*dstult = normAcc((*dstult) - num, denum);\n}\n}\n#else\n#error \"cn should be 1-4\"\n#endif\n#endif\n", "#if cn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE (int)sizeof(T1) * cn\n#endif\n#define OP(a,b) {    mid=a; a=min(a,b); b=max(mid,b);}\n#ifdef USE_4OPT\n#if cn == 1\n#define LOAD4(val, offs) (val) = vload4(0, (__global T1 *)(srcptr + src_index + (offs)))\n#define STORE4(val, offs) vstore4((val), 0, (__global T1 *)(dstptr + (offs)))\n#define SHUFFLE4_3(src0, src1, src2, dst0, dst1, dst2) { dst1 = src1; \\\ndst0 = (T4)(src0, dst1.xyz); \\\ndst2 = (T4)(dst1.yzw, src2); }\n#define SHUFFLE4_5(src0, src1, src2, src3, src4, dst0, dst1, dst2, dst3, dst4) { dst2 = src2; \\\ndst0 = (T4)(src0, src1, dst2.xy); \\\ndst1 = (T4)(src1, dst2.xyz); \\\ndst3 = (T4)(dst2.yzw, src3); \\\ndst4 = (T4)(dst2.zw, src3, src4); }\n#elif cn == 2\n#define LOAD4(val, offs) (val) = vload8(0, (__global T1 *)(srcptr + src_index + (offs)))\n#define STORE4(val, offs) vstore8((val), 0, (__global T1 *)(dstptr + (offs)))\n#define SHUFFLE4_3(src0, src1, src2, dst0, dst1, dst2) { dst1 = src1; \\\ndst0 = (T4)(src0, dst1.s012345); \\\ndst2 = (T4)(dst1.s234567, src2); }\n#define SHUFFLE4_5(src0, src1, src2, src3, src4, dst0, dst1, dst2, dst3, dst4) { dst2 = src2; \\\ndst0 = (T4)(src0, src1, dst2.s0123); \\\ndst1 = (T4)(src1, dst2.s012345); \\\ndst3 = (T4)(dst2.s234567, src3); \\\ndst4 = (T4)(dst2.s4567, src3, src4); }\n#elif cn == 4\n#define LOAD4(val, offs) (val) = vload16(0, (__global T1 *)(srcptr + src_index + (offs)))\n#define STORE4(val, offs) vstore16((val), 0, (__global T1 *)(dstptr + (offs)))\n#define SHUFFLE4_3(src0, src1, src2, dst0, dst1, dst2) { dst1 = src1; \\\ndst0 = (T4)(src0, dst1.s0123456789ab ); \\\ndst2 = (T4)(dst1.s456789abcdef, src2); }\n#define SHUFFLE4_5(src0, src1, src2, src3, src4, dst0, dst1, dst2, dst3, dst4) { dst2 = src2; \\\ndst0 = (T4)(src0, src1, dst2.s01234567); \\\ndst1 = (T4)(src1, dst2.s0123456789ab); \\\ndst3 = (T4)(dst2.s456789abcdef, src3); \\\ndst4 = (T4)(dst2.s89abcdef, src3, src4); }\n#endif\n__kernel void medianFilter3_u(__global const uchar* srcptr, int srcStep, int srcOffset,\n__global uchar*       dstptr, int dstStep, int dstOffset,\nint rows, int cols)\n{\nint gx= get_global_id(0) << 2;\nint gy= get_global_id(1) << 2;\nif( gy >= rows || gx >= cols)\nreturn;\nT c0; T4 c1; T c2;\nT c3; T4 c4; T c5;\nT c6; T4 c7; T c8;\nint x_left     = mad24(max(gx-1, 0), TSIZE, srcOffset);\nint x_central  = mad24(gx, TSIZE, srcOffset);\nint x_right    = mad24(min(gx+4, cols-1), TSIZE, srcOffset);\nint xdst = mad24(gx, TSIZE, dstOffset);\nint src_index = max(gy-1, 0)*srcStep;\nc0 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c1, x_central);\nc2 = *(__global T *)(srcptr + src_index + x_right);\nsrc_index = gy*srcStep;\nc3 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c4, x_central);\nc5 = *(__global T *)(srcptr + src_index + x_right);\n#define ITER3(k) { \\\nsrc_index = min(gy+k+1, rows-1)*srcStep; \\\nc6 = *(__global T *)(srcptr + src_index + x_left); \\\nLOAD4(c7, x_central); \\\nc8 = *(__global T *)(srcptr + src_index + x_right); \\\nT4 p0, p1, p2, p3, p4, p5, p6, p7, p8; \\\nSHUFFLE4_3(c0, c1, c2, p0, p1, p2); \\\nSHUFFLE4_3(c3, c4, c5, p3, p4, p5); \\\nSHUFFLE4_3(c6, c7, c8, p6, p7, p8); \\\nT4 mid; \\\nOP(p1, p2); OP(p4, p5); OP(p7, p8); OP(p0, p1); \\\nOP(p3, p4); OP(p6, p7); OP(p1, p2); OP(p4, p5); \\\nOP(p7, p8); OP(p0, p3); OP(p5, p8); OP(p4, p7); \\\nOP(p3, p6); OP(p1, p4); OP(p2, p5); OP(p4, p7); \\\nOP(p4, p2); OP(p6, p4); OP(p4, p2); \\\nint dst_index = mad24( gy+k, dstStep, xdst); \\\nSTORE4(p4, dst_index); \\\nc0 = c3; c1 = c4; c2 = c5; \\\nc3 = c6; c4 = c7; c5 = c8; \\\n}\nITER3(0);\nITER3(1);\nITER3(2);\nITER3(3);\n}\n__kernel void medianFilter5_u(__global const uchar* srcptr, int srcStep, int srcOffset,\n__global uchar*       dstptr, int dstStep, int dstOffset,\nint rows, int cols)\n{\nint gx= get_global_id(0) << 2;\nint gy= get_global_id(1) << 2;\nif( gy >= rows || gx >= cols)\nreturn;\nT  c0; T  c1; T4  c2; T  c3; T  c4;\nT  c5; T  c6; T4  c7; T  c8; T  c9;\nT c10; T c11; T4 c12; T c13; T c14;\nT c15; T c16; T4 c17; T c18; T c19;\nT c20; T c21; T4 c22; T c23; T c24;\nint x_leftmost = mad24(max(gx-2, 0), TSIZE, srcOffset);\nint x_left     = mad24(max(gx-1, 0), TSIZE, srcOffset);\nint x_central  = mad24(gx, TSIZE, srcOffset);\nint x_right    = mad24(min(gx+4, cols-1), TSIZE, srcOffset);\nint x_rightmost= mad24(min(gx+5, cols-1), TSIZE, srcOffset);\nint xdst = mad24(gx, TSIZE, dstOffset);\nint src_index = max(gy-2, 0)*srcStep;\nc0 = *(__global T *)(srcptr + src_index + x_leftmost);\nc1 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c2, x_central);\nc3 = *(__global T *)(srcptr + src_index + x_right);\nc4 = *(__global T *)(srcptr + src_index + x_rightmost);\nsrc_index = max(gy-1, 0)*srcStep;\nc5 = *(__global T *)(srcptr + src_index + x_leftmost);\nc6 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c7, x_central);\nc8 = *(__global T *)(srcptr + src_index + x_right);\nc9 = *(__global T *)(srcptr + src_index + x_rightmost);\nsrc_index = gy*srcStep;\nc10 = *(__global T *)(srcptr + src_index + x_leftmost);\nc11 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c12, x_central);\nc13 = *(__global T *)(srcptr + src_index + x_right);\nc14 = *(__global T *)(srcptr + src_index + x_rightmost);\nsrc_index = (gy+1)*srcStep;\nc15 = *(__global T *)(srcptr + src_index + x_leftmost);\nc16 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c17, x_central);\nc18 = *(__global T *)(srcptr + src_index + x_right);\nc19 = *(__global T *)(srcptr + src_index + x_rightmost);\nfor(int k = 0; k < 4; k++)\n{\nsrc_index = min(gy+k+2, rows-1) * srcStep;\nc20 = *(__global T *)(srcptr + src_index + x_leftmost);\nc21 = *(__global T *)(srcptr + src_index + x_left);\nLOAD4(c22, x_central);\nc23 = *(__global T *)(srcptr + src_index + x_right);\nc24 = *(__global T *)(srcptr + src_index + x_rightmost);\nT4 p0,  p1,  p2,  p3,  p4,\np5,  p6,  p7,  p8,  p9,\np10, p11, p12, p13, p14,\np15, p16, p17, p18, p19,\np20, p21, p22, p23, p24;\nSHUFFLE4_5(c0, c1, c2, c3, c4, p0, p1, p2, p3, p4);\nSHUFFLE4_5(c5, c6, c7, c8, c9, p5, p6, p7, p8, p9);\nSHUFFLE4_5(c10, c11, c12, c13, c14, p10, p11, p12, p13, p14);\nSHUFFLE4_5(c15, c16, c17, c18, c19, p15, p16, p17, p18, p19);\nSHUFFLE4_5(c20, c21, c22, c23, c24, p20, p21, p22, p23, p24);\nT4 mid;\nOP(p1, p2); OP(p0, p1); OP(p1, p2); OP(p4, p5); OP(p3, p4);\nOP(p4, p5); OP(p0, p3); OP(p2, p5); OP(p2, p3); OP(p1, p4);\nOP(p1, p2); OP(p3, p4); OP(p7, p8); OP(p6, p7); OP(p7, p8);\nOP(p10, p11); OP(p9, p10); OP(p10, p11); OP(p6, p9); OP(p8, p11);\nOP(p8, p9); OP(p7, p10); OP(p7, p8); OP(p9, p10); OP(p0, p6);\nOP(p4, p10); OP(p4, p6); OP(p2, p8); OP(p2, p4); OP(p6, p8);\nOP(p1, p7); OP(p5, p11); OP(p5, p7); OP(p3, p9); OP(p3, p5);\nOP(p7, p9); OP(p1, p2); OP(p3, p4); OP(p5, p6); OP(p7, p8);\nOP(p9, p10); OP(p13, p14); OP(p12, p13); OP(p13, p14); OP(p16, p17);\nOP(p15, p16); OP(p16, p17); OP(p12, p15); OP(p14, p17); OP(p14, p15);\nOP(p13, p16); OP(p13, p14); OP(p15, p16); OP(p19, p20); OP(p18, p19);\nOP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p21, p23); OP(p22, p24);\nOP(p22, p23); OP(p18, p21); OP(p20, p23); OP(p20, p21); OP(p19, p22);\nOP(p22, p24); OP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p12, p18);\nOP(p16, p22); OP(p16, p18); OP(p14, p20); OP(p20, p24); OP(p14, p16);\nOP(p18, p20); OP(p22, p24); OP(p13, p19); OP(p17, p23); OP(p17, p19);\nOP(p15, p21); OP(p15, p17); OP(p19, p21); OP(p13, p14); OP(p15, p16);\nOP(p17, p18); OP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p0, p12);\nOP(p8, p20);  OP(p8, p12); OP(p4, p16); OP(p16, p24); OP(p12, p16);\nOP(p2, p14);  OP(p10, p22); OP(p10, p14); OP(p6, p18); OP(p6, p10);\nOP(p10, p12); OP(p1, p13); OP(p9, p21); OP(p9, p13); OP(p5, p17);\nOP(p13, p17); OP(p3, p15); OP(p11, p23); OP(p11, p15); OP(p7, p19);\nOP(p7, p11);  OP(p11, p13); OP(p11, p12);\nint dst_index = mad24( gy+k, dstStep, xdst);\nSTORE4(p12, dst_index);\nc0=c5;   c1=c6;   c2=c7;   c3=c8;   c4=c9;\nc5=c10;  c6=c11;  c7=c12;  c8=c13;  c9=c14;\nc10=c15; c11=c16; c12=c17; c13=c18; c14=c19;\nc15=c20; c16=c21; c17=c22; c18=c23; c19=c24;\n}\n}\n#endif\n__kernel void medianFilter3(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n__local T data[18][18];\nint x = get_local_id(0);\nint y = get_local_id(1);\nint gx = get_global_id(0);\nint gy = get_global_id(1);\nint dx = gx - x - 1;\nint dy = gy - y - 1;\nint id = min(mad24(x, 16, y), 9*18-1);\nint dr = id / 18;\nint dc = id % 18;\nint c = clamp(dx + dc, 0, dst_cols - 1);\nint r = clamp(dy + dr, 0, dst_rows - 1);\nint index1 = mad24(r, src_step, mad24(c, TSIZE, src_offset));\nr = clamp(dy + dr + 9, 0, dst_rows - 1);\nint index9 = mad24(r, src_step, mad24(c, TSIZE, src_offset));\ndata[dr][dc] = loadpix(srcptr + index1);\ndata[dr+9][dc] = loadpix(srcptr + index9);\nbarrier(CLK_LOCAL_MEM_FENCE);\nT p0 = data[y][x], p1 = data[y][(x+1)], p2 = data[y][(x+2)];\nT p3 = data[y+1][x], p4 = data[y+1][(x+1)], p5 = data[y+1][(x+2)];\nT p6 = data[y+2][x], p7 = data[y+2][(x+1)], p8 = data[y+2][(x+2)];\nT mid;\nOP(p1, p2); OP(p4, p5); OP(p7, p8); OP(p0, p1);\nOP(p3, p4); OP(p6, p7); OP(p1, p2); OP(p4, p5);\nOP(p7, p8); OP(p0, p3); OP(p5, p8); OP(p4, p7);\nOP(p3, p6); OP(p1, p4); OP(p2, p5); OP(p4, p7);\nOP(p4, p2); OP(p6, p4); OP(p4, p2);\nint dst_index = mad24( gy, dst_step, mad24(gx, TSIZE, dst_offset));\nif (gy < dst_rows && gx < dst_cols)\nstorepix(p4, dstptr + dst_index);\n}\n__kernel void medianFilter5(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\n__local T data[20][20];\nint x = get_local_id(0);\nint y = get_local_id(1);\nint gx = get_global_id(0);\nint gy = get_global_id(1);\nint dx = gx - x - 2;\nint dy = gy - y - 2;\nint id = min(mad24(x, 16, y), 10*20-1);\nint dr = id / 20;\nint dc = id % 20;\nint c = clamp(dx + dc, 0, dst_cols - 1);\nint r = clamp(dy + dr, 0, dst_rows - 1);\nint index1 = mad24(r, src_step, mad24(c, TSIZE, src_offset));\nr = clamp(dy + dr + 10, 0, dst_rows - 1);\nint index10 = mad24(r, src_step, mad24(c, TSIZE, src_offset));\ndata[dr][dc] = loadpix(srcptr + index1);\ndata[dr+10][dc] = loadpix(srcptr + index10);\nbarrier(CLK_LOCAL_MEM_FENCE);\nT p0 = data[y][x], p1 = data[y][x+1], p2 = data[y][x+2], p3 = data[y][x+3], p4 = data[y][x+4];\nT p5 = data[y+1][x], p6 = data[y+1][x+1], p7 = data[y+1][x+2], p8 = data[y+1][x+3], p9 = data[y+1][x+4];\nT p10 = data[y+2][x], p11 = data[y+2][x+1], p12 = data[y+2][x+2], p13 = data[y+2][x+3], p14 = data[y+2][x+4];\nT p15 = data[y+3][x], p16 = data[y+3][x+1], p17 = data[y+3][x+2], p18 = data[y+3][x+3], p19 = data[y+3][x+4];\nT p20 = data[y+4][x], p21 = data[y+4][x+1], p22 = data[y+4][x+2], p23 = data[y+4][x+3], p24 = data[y+4][x+4];\nT mid;\nOP(p1, p2); OP(p0, p1); OP(p1, p2); OP(p4, p5); OP(p3, p4);\nOP(p4, p5); OP(p0, p3); OP(p2, p5); OP(p2, p3); OP(p1, p4);\nOP(p1, p2); OP(p3, p4); OP(p7, p8); OP(p6, p7); OP(p7, p8);\nOP(p10, p11); OP(p9, p10); OP(p10, p11); OP(p6, p9); OP(p8, p11);\nOP(p8, p9); OP(p7, p10); OP(p7, p8); OP(p9, p10); OP(p0, p6);\nOP(p4, p10); OP(p4, p6); OP(p2, p8); OP(p2, p4); OP(p6, p8);\nOP(p1, p7); OP(p5, p11); OP(p5, p7); OP(p3, p9); OP(p3, p5);\nOP(p7, p9); OP(p1, p2); OP(p3, p4); OP(p5, p6); OP(p7, p8);\nOP(p9, p10); OP(p13, p14); OP(p12, p13); OP(p13, p14); OP(p16, p17);\nOP(p15, p16); OP(p16, p17); OP(p12, p15); OP(p14, p17); OP(p14, p15);\nOP(p13, p16); OP(p13, p14); OP(p15, p16); OP(p19, p20); OP(p18, p19);\nOP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p21, p23); OP(p22, p24);\nOP(p22, p23); OP(p18, p21); OP(p20, p23); OP(p20, p21); OP(p19, p22);\nOP(p22, p24); OP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p12, p18);\nOP(p16, p22); OP(p16, p18); OP(p14, p20); OP(p20, p24); OP(p14, p16);\nOP(p18, p20); OP(p22, p24); OP(p13, p19); OP(p17, p23); OP(p17, p19);\nOP(p15, p21); OP(p15, p17); OP(p19, p21); OP(p13, p14); OP(p15, p16);\nOP(p17, p18); OP(p19, p20); OP(p21, p22); OP(p23, p24); OP(p0, p12);\nOP(p8, p20); OP(p8, p12); OP(p4, p16); OP(p16, p24); OP(p12, p16);\nOP(p2, p14); OP(p10, p22); OP(p10, p14); OP(p6, p18); OP(p6, p10);\nOP(p10, p12); OP(p1, p13); OP(p9, p21); OP(p9, p13); OP(p5, p17);\nOP(p13, p17); OP(p3, p15); OP(p11, p23); OP(p11, p15); OP(p7, p19);\nOP(p7, p11); OP(p11, p13); OP(p11, p12);\nint dst_index = mad24(gy, dst_step, mad24(gx, TSIZE, dst_offset));\nif (gy < dst_rows && gx < dst_cols)\nstorepix(p12, dstptr + dst_index);\n}\n", "#if TILE_SIZE != 32\n#error \"TILE SIZE should be 32\"\n#endif\n__kernel void moments(__global const uchar* src, int src_step, int src_offset,\nint src_rows, int src_cols, __global int* mom0, int xtiles)\n{\nint x0 = get_global_id(0);\nint y0 = get_group_id(1);\nint x, y = get_local_id(1);\nint x_min = x0*TILE_SIZE;\nint ypix = y0*TILE_SIZE + y;\n__local int mom[TILE_SIZE][10];\nif (x_min < src_cols && y0*TILE_SIZE < src_rows)\n{\nif (ypix < src_rows)\n{\nint x_max = min(src_cols - x_min, TILE_SIZE);\n__global const uchar* ptr = src + src_offset + ypix*src_step + x_min;\nint4 S = (int4)(0, 0, 0, 0), p;\n#define SUM_ELEM(elem, ofs) \\\n(int4)(1, (ofs), (ofs)*(ofs), (ofs)*(ofs)*(ofs))*elem\nx = x_max & -4;\nif (x_max >= 4)\n{\np = convert_int4(vload4(0, ptr));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, 0, 0, 0) + (int4)(p.s1, p.s1, p.s1, p.s1) +\n(int4)(p.s2, p.s2 * 2, p.s2 * 4, p.s2 * 8) + (int4)(p.s3, p.s3 * 3, p.s3 * 9, p.s3 * 27);\nif (x_max >= 8)\n{\np = convert_int4(vload4(0, ptr + 4));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 4, p.s0 * 16, p.s0 * 64) + (int4)(p.s1, p.s1 * 5, p.s1 * 25, p.s1 * 125) +\n(int4)(p.s2, p.s2 * 6, p.s2 * 36, p.s2 * 216) + (int4)(p.s3, p.s3 * 7, p.s3 * 49, p.s3 * 343);\nif (x_max >= 12)\n{\np = convert_int4(vload4(0, ptr + 8));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 8, p.s0 * 64, p.s0 * 512) + (int4)(p.s1, p.s1 * 9, p.s1 * 81, p.s1 * 729) +\n(int4)(p.s2, p.s2 * 10, p.s2 * 100, p.s2 * 1000) + (int4)(p.s3, p.s3 * 11, p.s3 * 121, p.s3 * 1331);\nif (x_max >= 16)\n{\np = convert_int4(vload4(0, ptr + 12));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 12, p.s0 * 144, p.s0 * 1728) + (int4)(p.s1, p.s1 * 13, p.s1 * 169, p.s1 * 2197) +\n(int4)(p.s2, p.s2 * 14, p.s2 * 196, p.s2 * 2744) + (int4)(p.s3, p.s3 * 15, p.s3 * 225, p.s3 * 3375);\n}\n}\n}\n}\nif (x_max >= 20)\n{\np = convert_int4(vload4(0, ptr + 16));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 16, p.s0 * 256, p.s0 * 4096) + (int4)(p.s1, p.s1 * 17, p.s1 * 289, p.s1 * 4913) +\n(int4)(p.s2, p.s2 * 18, p.s2 * 324, p.s2 * 5832) + (int4)(p.s3, p.s3 * 19, p.s3 * 361, p.s3 * 6859);\nif (x_max >= 24)\n{\np = convert_int4(vload4(0, ptr + 20));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 20, p.s0 * 400, p.s0 * 8000) + (int4)(p.s1, p.s1 * 21, p.s1 * 441, p.s1 * 9261) +\n(int4)(p.s2, p.s2 * 22, p.s2 * 484, p.s2 * 10648) + (int4)(p.s3, p.s3 * 23, p.s3 * 529, p.s3 * 12167);\nif (x_max >= 28)\n{\np = convert_int4(vload4(0, ptr + 24));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 24, p.s0 * 576, p.s0 * 13824) + (int4)(p.s1, p.s1 * 25, p.s1 * 625, p.s1 * 15625) +\n(int4)(p.s2, p.s2 * 26, p.s2 * 676, p.s2 * 17576) + (int4)(p.s3, p.s3 * 27, p.s3 * 729, p.s3 * 19683);\nif (x_max >= 32)\n{\np = convert_int4(vload4(0, ptr + 28));\n#ifdef OP_MOMENTS_BINARY\np = min(p, 1);\n#endif\nS += (int4)(p.s0, p.s0 * 28, p.s0 * 784, p.s0 * 21952) + (int4)(p.s1, p.s1 * 29, p.s1 * 841, p.s1 * 24389) +\n(int4)(p.s2, p.s2 * 30, p.s2 * 900, p.s2 * 27000) + (int4)(p.s3, p.s3 * 31, p.s3 * 961, p.s3 * 29791);\n}\n}\n}\n}\nif (x < x_max)\n{\nint ps = ptr[x];\n#ifdef OP_MOMENTS_BINARY\nps = min(ps, 1);\n#endif\nS += SUM_ELEM(ps, x);\nif (x + 1 < x_max)\n{\nps = ptr[x + 1];\n#ifdef OP_MOMENTS_BINARY\nps = min(ps, 1);\n#endif\nS += SUM_ELEM(ps, x + 1);\nif (x + 2 < x_max)\n{\nps = ptr[x + 2];\n#ifdef OP_MOMENTS_BINARY\nps = min(ps, 1);\n#endif\nS += SUM_ELEM(ps, x + 2);\n}\n}\n}\nint sy = y*y;\nmom[y][0] = S.s0;\nmom[y][1] = S.s1;\nmom[y][2] = y*S.s0;\nmom[y][3] = S.s2;\nmom[y][4] = y*S.s1;\nmom[y][5] = sy*S.s0;\nmom[y][6] = S.s3;\nmom[y][7] = y*S.s2;\nmom[y][8] = sy*S.s1;\nmom[y][9] = y*sy*S.s0;\n}\nelse\nmom[y][0] = mom[y][1] = mom[y][2] = mom[y][3] = mom[y][4] =\nmom[y][5] = mom[y][6] = mom[y][7] = mom[y][8] = mom[y][9] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\n#define REDUCE(d) \\\nif (y < d) \\\n{ \\\nmom[y][0] += mom[y + d][0]; \\\nmom[y][1] += mom[y + d][1]; \\\nmom[y][2] += mom[y + d][2]; \\\nmom[y][3] += mom[y + d][3]; \\\nmom[y][4] += mom[y + d][4]; \\\nmom[y][5] += mom[y + d][5]; \\\nmom[y][6] += mom[y + d][6]; \\\nmom[y][7] += mom[y + d][7]; \\\nmom[y][8] += mom[y + d][8]; \\\nmom[y][9] += mom[y + d][9]; \\\n} \\\nbarrier(CLK_LOCAL_MEM_FENCE)\nREDUCE(16);\nREDUCE(8);\nREDUCE(4);\nREDUCE(2);\nif (y < 10)\n{\n__global int* momout = mom0 + (y0*xtiles + x0) * 10;\nmomout[y] = mom[0][y] + mom[1][y];\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n#if cn != 3\n#define loadpix(addr) *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr) vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#endif\n#ifdef DEPTH_0\n#define MIN_VAL 0\n#define MAX_VAL UCHAR_MAX\n#elif defined DEPTH_1\n#define MIN_VAL SCHAR_MIN\n#define MAX_VAL SCHAR_MAX\n#elif defined DEPTH_2\n#define MIN_VAL 0\n#define MAX_VAL USHRT_MAX\n#elif defined DEPTH_3\n#define MIN_VAL SHRT_MIN\n#define MAX_VAL SHRT_MAX\n#elif defined DEPTH_4\n#define MIN_VAL INT_MIN\n#define MAX_VAL INT_MAX\n#elif defined DEPTH_5\n#define MIN_VAL (-FLT_MAX)\n#define MAX_VAL FLT_MAX\n#elif defined DEPTH_6\n#define MIN_VAL (-DBL_MAX)\n#define MAX_VAL DBL_MAX\n#endif\n#ifdef OP_ERODE\n#define VAL MAX_VAL\n#elif defined OP_DILATE\n#define VAL MIN_VAL\n#else\n#error \"Unknown operation\"\n#endif\n#ifdef OP_ERODE\n#if defined INTEL_DEVICE && defined DEPTH_0\n#define MORPH_OP(A, B) ((A) < (B) ? (A) : (B))\n#else\n#define MORPH_OP(A, B) min((A), (B))\n#endif\n#endif\n#ifdef OP_DILATE\n#define MORPH_OP(A, B) max((A), (B))\n#endif\n#define PROCESS(y, x) \\\ntemp = LDS_DAT[mad24(l_y + y, width, l_x + x)]; \\\nres = MORPH_OP(res, temp);\n#define ELEM(i, l_edge, r_edge, elem1, elem2) (i) < (l_edge) | (i) >= (r_edge) ? (elem1) : (elem2)\n#if defined OP_GRADIENT || defined OP_TOPHAT || defined OP_BLACKHAT\n#define EXTRA_PARAMS , __global const uchar * matptr, int mat_step, int mat_offset\n#else\n#define EXTRA_PARAMS\n#endif\n__kernel void morph(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint src_offset_x, int src_offset_y, int cols, int rows,\nint src_whole_cols, int src_whole_rows EXTRA_PARAMS)\n{\nint gidx = get_global_id(0), gidy = get_global_id(1);\nint l_x = get_local_id(0), l_y = get_local_id(1);\nint x = get_group_id(0) * LSIZE0, y = get_group_id(1) * LSIZE1;\nint start_x = x + src_offset_x - RADIUSX;\nint width = mad24(RADIUSX, 2, LSIZE0 + 1);\nint start_y = y + src_offset_y - RADIUSY;\nint point1 = mad24(l_y, LSIZE0, l_x);\nint point2 = point1 + LSIZE0 * LSIZE1;\nint tl_x = point1 % width, tl_y = point1 / width;\nint tl_x2 = point2 % width, tl_y2 = point2 / width;\nint cur_x = start_x + tl_x, cur_y = start_y + tl_y;\nint cur_x2 = start_x + tl_x2, cur_y2 = start_y + tl_y2;\nint start_addr = mad24(cur_y, src_step, cur_x * TSIZE);\nint start_addr2 = mad24(cur_y2, src_step, cur_x2 * TSIZE);\n__local T LDS_DAT[2 * LSIZE1 * LSIZE0];\nint end_addr = mad24(src_whole_rows - 1, src_step, src_whole_cols * TSIZE);\nstart_addr = start_addr < end_addr && start_addr > 0 ? start_addr : 0;\nstart_addr2 = start_addr2 < end_addr && start_addr2 > 0 ? start_addr2 : 0;\nT temp0 = loadpix(srcptr + start_addr);\nT temp1 = loadpix(srcptr + start_addr2);\ntemp0 = ELEM(cur_x, 0, src_whole_cols, (T)(VAL), temp0);\ntemp0 = ELEM(cur_y, 0, src_whole_rows, (T)(VAL), temp0);\ntemp1 = ELEM(cur_x2, 0, src_whole_cols, (T)(VAL), temp1);\ntemp1 = ELEM(cur_y2, 0, src_whole_rows, (T)(VAL), temp1);\nLDS_DAT[point1] = temp0;\nLDS_DAT[point2] = temp1;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (gidx < cols && gidy < rows)\n{\nT res = (T)(VAL), temp;\nPROCESS_ELEMS;\nint dst_index = mad24(gidy, dst_step, mad24(gidx, TSIZE, dst_offset));\n#if defined OP_GRADIENT || defined OP_TOPHAT || defined OP_BLACKHAT\nint mat_index =  mad24(gidy, mat_step, mad24(gidx, TSIZE, mat_offset));\nT value = loadpix(matptr + mat_index);\n#ifdef OP_GRADIENT\nstorepix(convertToT(convertToWT(res) - convertToWT(value)), dstptr + dst_index);\n#elif defined OP_TOPHAT\nstorepix(convertToT(convertToWT(value) - convertToWT(res)), dstptr + dst_index);\n#elif defined OP_BLACKHAT\nstorepix(convertToT(convertToWT(res) - convertToWT(value)), dstptr + dst_index);\n#endif\n#else\nstorepix(res, dstptr + dst_index);\n#endif\n}\n}\n", "__kernel void preCornerDetect(__global const uchar * Dxptr, int dx_step, int dx_offset,\n__global const uchar * Dyptr, int dy_step, int dy_offset,\n__global const uchar * D2xptr, int d2x_step, int d2x_offset,\n__global const uchar * D2yptr, int d2y_step, int d2y_offset,\n__global const uchar * Dxyptr, int dxy_step, int dxy_offset,\n__global uchar * dstptr, int dst_step, int dst_offset,\nint dst_rows, int dst_cols, float factor)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < dst_cols && y < dst_rows)\n{\nint dx_index = mad24(dx_step, y, (int)sizeof(float) * x + dx_offset);\nint dy_index = mad24(dy_step, y, (int)sizeof(float) * x + dy_offset);\nint d2x_index = mad24(d2x_step, y, (int)sizeof(float) * x + d2x_offset);\nint d2y_index = mad24(d2y_step, y, (int)sizeof(float) * x + d2y_offset);\nint dxy_index = mad24(dxy_step, y, (int)sizeof(float) * x + dxy_offset);\nint dst_index = mad24(dst_step, y, (int)sizeof(float) * x + dst_offset);\nfloat dx = *(__global const float *)(Dxptr + dx_index);\nfloat dy = *(__global const float *)(Dyptr + dy_index);\nfloat d2x = *(__global const float *)(D2xptr + d2x_index);\nfloat d2y = *(__global const float *)(D2yptr + d2y_index);\nfloat dxy = *(__global const float *)(Dxyptr + dxy_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\ndst[0] = factor * (dx*dx*d2y + dy*dy*d2x - 2*dx*dy*dxy);\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if defined BORDER_REPLICATE\n#define EXTRAPOLATE(x, maxV) clamp((x), 0, (maxV)-1)\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(x, maxV) ( (x) + (maxV) ) % (maxV)\n#elif defined BORDER_REFLECT\n#define EXTRAPOLATE(x, maxV) clamp(min(((maxV)-1)*2-(x)+1, max((x),-(x)-1) ), 0, (maxV)-1)\n#elif defined BORDER_REFLECT_101 || defined BORDER_REFLECT101\n#define EXTRAPOLATE(x, maxV) clamp(min(((maxV)-1)*2-(x), max((x),-(x)) ), 0, (maxV)-1)\n#else\n#error No extrapolation method\n#endif\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = (val)\n#define PIXSIZE ((int)sizeof(T))\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3((val), 0, (__global T1*)(addr))\n#define PIXSIZE ((int)sizeof(T1)*3)\n#endif\n#define SRC(_x,_y) convertToFT(loadpix(srcData + mad24(_y, src_step, PIXSIZE * _x)))\n#if kercn == 4\n#define SRC4(_x,_y) convert_float4(vload4(0, srcData + mad24(_y, src_step, PIXSIZE * _x)))\n#endif\n#ifdef INTEL_DEVICE\n#define MAD(x,y,z) fma((x),(y),(z))\n#else\n#define MAD(x,y,z) mad((x),(y),(z))\n#endif\n#define LOAD_LOCAL(col_gl, col_lcl) \\\nsum0 =     co3* SRC(col_gl, EXTRAPOLATE_(src_y - 2, src_rows));         \\\nsum0 = MAD(co2, SRC(col_gl, EXTRAPOLATE_(src_y - 1, src_rows)), sum0);  \\\ntemp = SRC(col_gl, EXTRAPOLATE_(src_y, src_rows));                      \\\nsum0 = MAD(co1, temp, sum0);                                            \\\nsum1 = co3 * temp;                                                      \\\ntemp = SRC(col_gl, EXTRAPOLATE_(src_y + 1, src_rows));                  \\\nsum0 = MAD(co2, temp, sum0);                                            \\\nsum1 = MAD(co2, temp, sum1);                                            \\\ntemp = SRC(col_gl, EXTRAPOLATE_(src_y + 2, src_rows));                  \\\nsum0 = MAD(co3, temp, sum0);                                            \\\nsum1 = MAD(co1, temp, sum1);                                            \\\nsmem[0][col_lcl] = sum0;                                                \\\nsum1 = MAD(co2, SRC(col_gl, EXTRAPOLATE_(src_y + 3, src_rows)), sum1);  \\\nsum1 = MAD(co3, SRC(col_gl, EXTRAPOLATE_(src_y + 4, src_rows)), sum1);  \\\nsmem[1][col_lcl] = sum1;\n#if kercn == 4\n#define LOAD_LOCAL4(col_gl, col_lcl) \\\nsum40 =     co3* SRC4(col_gl, EXTRAPOLATE_(src_y - 2, src_rows));           \\\nsum40 = MAD(co2, SRC4(col_gl, EXTRAPOLATE_(src_y - 1, src_rows)), sum40);   \\\ntemp4 = SRC4(col_gl,  EXTRAPOLATE_(src_y, src_rows));                       \\\nsum40 = MAD(co1, temp4, sum40);                                             \\\nsum41 = co3 * temp4;                                                        \\\ntemp4 = SRC4(col_gl,  EXTRAPOLATE_(src_y + 1, src_rows));                   \\\nsum40 = MAD(co2, temp4, sum40);                                             \\\nsum41 = MAD(co2, temp4, sum41);                                             \\\ntemp4 = SRC4(col_gl,  EXTRAPOLATE_(src_y + 2, src_rows));                   \\\nsum40 = MAD(co3, temp4, sum40);                                             \\\nsum41 = MAD(co1, temp4, sum41);                                             \\\nvstore4(sum40, col_lcl, (__local float*) &smem[0][2]);                      \\\nsum41 = MAD(co2, SRC4(col_gl,  EXTRAPOLATE_(src_y + 3, src_rows)), sum41);  \\\nsum41 = MAD(co3, SRC4(col_gl,  EXTRAPOLATE_(src_y + 4, src_rows)), sum41);  \\\nvstore4(sum41, col_lcl, (__local float*) &smem[1][2]);\n#endif\n#define noconvert\n__kernel void pyrDown(__global const uchar * src, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nconst int x = get_global_id(0)*kercn;\nconst int y = 2*get_global_id(1);\n__local FT smem[2][LOCAL_SIZE + 4];\n__global uchar * dstData = dst + dst_offset;\n__global const uchar * srcData = src + src_offset;\nFT sum0, sum1, temp;\nFT co1 = 0.375f;\nFT co2 = 0.25f;\nFT co3 = 0.0625f;\nconst int src_y = 2*y;\nint col;\nif (src_y >= 2 && src_y < src_rows - 4)\n{\n#define EXTRAPOLATE_(val, maxVal)   val\n#if kercn == 1\ncol = EXTRAPOLATE(x, src_cols);\nLOAD_LOCAL(col, 2 + get_local_id(0))\n#else\nif (x < src_cols-4)\n{\nfloat4 sum40, sum41, temp4;\nLOAD_LOCAL4(x, get_local_id(0))\n}\nelse\n{\nfor (int i=0; i<4; i++)\n{\ncol = EXTRAPOLATE(x+i, src_cols);\nLOAD_LOCAL(col, 2 + 4 * get_local_id(0) + i)\n}\n}\n#endif\nif (get_local_id(0) < 2)\n{\ncol = EXTRAPOLATE((int)(get_group_id(0)*LOCAL_SIZE + get_local_id(0) - 2), src_cols);\nLOAD_LOCAL(col, get_local_id(0))\n}\nelse if (get_local_id(0) < 4)\n{\ncol = EXTRAPOLATE((int)((get_group_id(0)+1)*LOCAL_SIZE + get_local_id(0) - 2), src_cols);\nLOAD_LOCAL(col, LOCAL_SIZE + get_local_id(0))\n}\n}\nelse\n{\n#define EXTRAPOLATE_(val, maxVal)   EXTRAPOLATE(val, maxVal)\n#if kercn == 1\ncol = EXTRAPOLATE(x, src_cols);\nLOAD_LOCAL(col, 2 + get_local_id(0))\n#else\nif (x < src_cols-4)\n{\nfloat4 sum40, sum41, temp4;\nLOAD_LOCAL4(x, get_local_id(0))\n}\nelse\n{\nfor (int i=0; i<4; i++)\n{\ncol = EXTRAPOLATE(x+i, src_cols);\nLOAD_LOCAL(col, 2 + 4*get_local_id(0) + i)\n}\n}\n#endif\nif (get_local_id(0) < 2)\n{\ncol = EXTRAPOLATE((int)(get_group_id(0)*LOCAL_SIZE + get_local_id(0) - 2), src_cols);\nLOAD_LOCAL(col, get_local_id(0))\n}\nelse if (get_local_id(0) < 4)\n{\ncol = EXTRAPOLATE((int)((get_group_id(0)+1)*LOCAL_SIZE + get_local_id(0) - 2), src_cols);\nLOAD_LOCAL(col, LOCAL_SIZE + get_local_id(0))\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n#if kercn == 1\nif (get_local_id(0) < LOCAL_SIZE / 2)\n{\nconst int tid2 = get_local_id(0) * 2;\nconst int dst_x = (get_group_id(0) * get_local_size(0) + tid2) / 2;\nif (dst_x < dst_cols)\n{\nfor (int yin = y, y1 = min(dst_rows, y + 2); yin < y1; yin++)\n{\n#if cn == 1\n#if fdepth <= 5\nFT sum = dot(vload4(0, (__local float*) (&smem) + tid2 + (yin - y) * (LOCAL_SIZE + 4)), (float4)(co3, co2, co1, co2));\n#else\nFT sum = dot(vload4(0, (__local double*) (&smem) + tid2 + (yin - y) * (LOCAL_SIZE + 4)), (double4)(co3, co2, co1, co2));\n#endif\n#else\nFT sum = co3 * smem[yin - y][2 + tid2 - 2];\nsum = MAD(co2, smem[yin - y][2 + tid2 - 1], sum);\nsum = MAD(co1, smem[yin - y][2 + tid2    ], sum);\nsum = MAD(co2, smem[yin - y][2 + tid2 + 1], sum);\n#endif\nsum = MAD(co3, smem[yin - y][2 + tid2 + 2], sum);\nstorepix(convertToT(sum), dstData + yin * dst_step + dst_x * PIXSIZE);\n}\n}\n}\n#else\nint tid4 = get_local_id(0) * 4;\nint dst_x = (get_group_id(0) * LOCAL_SIZE + tid4) / 2;\nif (dst_x < dst_cols - 1)\n{\nfor (int yin = y, y1 = min(dst_rows, y + 2); yin < y1; yin++)\n{\nFT sum =  co3* smem[yin - y][2 + tid4 + 2];\nsum = MAD(co3, smem[yin - y][2 + tid4 - 2], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 - 1], sum);\nsum = MAD(co1, smem[yin - y][2 + tid4    ], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 + 1], sum);\nstorepix(convertToT(sum), dstData + mad24(yin, dst_step, dst_x * PIXSIZE));\ndst_x ++;\nsum =     co3* smem[yin - y][2 + tid4 + 4];\nsum = MAD(co3, smem[yin - y][2 + tid4    ], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 + 1], sum);\nsum = MAD(co1, smem[yin - y][2 + tid4 + 2], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 + 3], sum);\nstorepix(convertToT(sum), dstData + mad24(yin, dst_step, dst_x * PIXSIZE));\ndst_x --;\n}\n}\nelse if (dst_x < dst_cols)\n{\nfor (int yin = y, y1 = min(dst_rows, y + 2); yin < y1; yin++)\n{\nFT sum =  co3* smem[yin - y][2 + tid4 + 2];\nsum = MAD(co3, smem[yin - y][2 + tid4 - 2], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 - 1], sum);\nsum = MAD(co1, smem[yin - y][2 + tid4    ], sum);\nsum = MAD(co2, smem[yin - y][2 + tid4 + 1], sum);\nstorepix(convertToT(sum), dstData + mad24(yin, dst_step, dst_x * PIXSIZE));\n}\n}\n#endif\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = (val)\n#define PIXSIZE ((int)sizeof(T))\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3((val), 0, (__global T1*)(addr))\n#define PIXSIZE ((int)sizeof(T1)*3)\n#endif\n#define EXTRAPOLATE(x, maxV) min(maxV - 1, (int) abs(x))\n#define noconvert\n__kernel void pyrUp(__global const uchar * src, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nconst int x = get_global_id(0);\nconst int y = get_global_id(1);\nconst int tidx = get_local_id(0);\nconst int tidy = get_local_id(1);\n__local FT s_srcPatch[LOCAL_SIZE/2 + 2][LOCAL_SIZE/2 + 2];\n__local FT s_dstPatch[LOCAL_SIZE/2 + 2][LOCAL_SIZE];\n__global uchar * dstData = dst + dst_offset;\n__global const uchar * srcData = src + src_offset;\nif( tidx < (LOCAL_SIZE/2 + 2) && tidy < LOCAL_SIZE/2 + 2 )\n{\nint srcx = EXTRAPOLATE(mad24((int)get_group_id(0), LOCAL_SIZE/2, tidx) - 1, src_cols);\nint srcy = EXTRAPOLATE(mad24((int)get_group_id(1), LOCAL_SIZE/2, tidy) - 1, src_rows);\ns_srcPatch[tidy][tidx] = convertToFT(loadpix(srcData + srcy * src_step + srcx * PIXSIZE));\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nFT sum = 0.f;\nconst FT co1 = 0.75f;\nconst FT co2 = 0.5f;\nconst FT co3 = 0.125f;\nconst FT coef1 = (tidx & 1) == 0 ? co1 : (FT) 0;\nconst FT coef2 = (tidx & 1) == 0 ? co3 : co2;\nconst FT coefy1 = (tidy & 1) == 0 ? co1 : (FT) 0;\nconst FT coefy2 = (tidy & 1) == 0 ? co3 : co2;\nif(tidy < LOCAL_SIZE/2 + 2)\n{\nsum =     coef2* s_srcPatch[tidy][1 + ((tidx - 1) >> 1)];\nsum = mad(coef1, s_srcPatch[tidy][1 + ((tidx    ) >> 1)], sum);\nsum = mad(coef2, s_srcPatch[tidy][1 + ((tidx + 2) >> 1)], sum);\ns_dstPatch[tidy][tidx] = sum;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum =     coefy2* s_dstPatch[1 + ((tidy - 1) >> 1)][tidx];\nsum = mad(coefy1, s_dstPatch[1 + ((tidy    ) >> 1)][tidx], sum);\nsum = mad(coefy2, s_dstPatch[1 + ((tidy + 2) >> 1)][tidx], sum);\nif ((x < dst_cols) && (y < dst_rows))\nstorepix(convertToT(sum), dstData + y * dst_step + x * PIXSIZE);\n}\n__kernel void pyrUp_unrolled(__global const uchar * src, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nconst int lx = 2*get_local_id(0);\nconst int ly = 2*get_local_id(1);\n__local FT s_srcPatch[LOCAL_SIZE+2][LOCAL_SIZE+2];\n__local FT s_dstPatch[LOCAL_SIZE+2][2*LOCAL_SIZE];\n__global uchar * dstData = dst + dst_offset;\n__global const uchar * srcData = src + src_offset;\nif( lx < (LOCAL_SIZE+2) && ly < (LOCAL_SIZE+2) )\n{\nint srcx = mad24((int)get_group_id(0), LOCAL_SIZE, lx) - 1;\nint srcy = mad24((int)get_group_id(1), LOCAL_SIZE, ly) - 1;\nint srcx1 = EXTRAPOLATE(srcx, src_cols);\nint srcx2 = EXTRAPOLATE(srcx+1, src_cols);\nint srcy1 = EXTRAPOLATE(srcy, src_rows);\nint srcy2 = EXTRAPOLATE(srcy+1, src_rows);\ns_srcPatch[ly][lx] = convertToFT(loadpix(srcData + srcy1 * src_step + srcx1 * PIXSIZE));\ns_srcPatch[ly+1][lx] = convertToFT(loadpix(srcData + srcy2 * src_step + srcx1 * PIXSIZE));\ns_srcPatch[ly][lx+1] = convertToFT(loadpix(srcData + srcy1 * src_step + srcx2 * PIXSIZE));\ns_srcPatch[ly+1][lx+1] = convertToFT(loadpix(srcData + srcy2 * src_step + srcx2 * PIXSIZE));\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nFT sum;\nconst FT co1 = 0.75f;\nconst FT co2 = 0.5f;\nconst FT co3 = 0.125f;\nsum =       co3 * s_srcPatch[1 + (ly >> 1)][1 + ((lx - 2) >> 1)];\nsum = mad(co1, s_srcPatch[1 + (ly >> 1)][1 + ((lx    ) >> 1)], sum);\nsum = mad(co3, s_srcPatch[1 + (ly >> 1)][1 + ((lx + 2) >> 1)], sum);\ns_dstPatch[1 + get_local_id(1)][lx] = sum;\nsum =       co2 * s_srcPatch[1 + (ly >> 1)][1 + ((lx + 1 - 1) >> 1)];\nsum = mad(co2, s_srcPatch[1 + (ly >> 1)][1 + ((lx + 1 + 1) >> 1)], sum);\ns_dstPatch[1 + get_local_id(1)][lx+1] = sum;\nif (ly < 1)\n{\nsum =       co3 * s_srcPatch[0][1 + ((lx - 2) >> 1)];\nsum = mad(co1, s_srcPatch[0][1 + ((lx    ) >> 1)], sum);\nsum = mad(co3, s_srcPatch[0][1 + ((lx + 2) >> 1)], sum);\ns_dstPatch[0][lx] = sum;\nsum =       co2 * s_srcPatch[0][1 + ((lx + 1 - 1) >> 1)];\nsum = mad(co2, s_srcPatch[0][1 + ((lx + 1 + 1) >> 1)], sum);\ns_dstPatch[0][lx+1] = sum;\n}\nif (ly > 2*LOCAL_SIZE-3)\n{\nsum =       co3 * s_srcPatch[LOCAL_SIZE+1][1 + ((lx - 2) >> 1)];\nsum = mad(co1, s_srcPatch[LOCAL_SIZE+1][1 + ((lx    ) >> 1)], sum);\nsum = mad(co3, s_srcPatch[LOCAL_SIZE+1][1 + ((lx + 2) >> 1)], sum);\ns_dstPatch[LOCAL_SIZE+1][lx] = sum;\nsum =       co2 * s_srcPatch[LOCAL_SIZE+1][1 + ((lx + 1 - 1) >> 1)];\nsum = mad(co2, s_srcPatch[LOCAL_SIZE+1][1 + ((lx + 1 + 1) >> 1)], sum);\ns_dstPatch[LOCAL_SIZE+1][lx+1] = sum;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint dst_x = 2*get_global_id(0);\nint dst_y = 2*get_global_id(1);\nif ((dst_x < dst_cols) && (dst_y < dst_rows))\n{\nsum =       co3 * s_dstPatch[1 + get_local_id(1) - 1][lx];\nsum = mad(co1, s_dstPatch[1 + get_local_id(1)    ][lx], sum);\nsum = mad(co3, s_dstPatch[1 + get_local_id(1) + 1][lx], sum);\nstorepix(convertToT(sum), dstData + dst_y * dst_step + dst_x * PIXSIZE);\nsum =       co3 * s_dstPatch[1 + get_local_id(1) - 1][lx+1];\nsum = mad(co1, s_dstPatch[1 + get_local_id(1)    ][lx+1], sum);\nsum = mad(co3, s_dstPatch[1 + get_local_id(1) + 1][lx+1], sum);\nstorepix(convertToT(sum), dstData + dst_y * dst_step + (dst_x+1) * PIXSIZE);\nsum =       co2 * s_dstPatch[1 + get_local_id(1)    ][lx];\nsum = mad(co2, s_dstPatch[1 + get_local_id(1) + 1][lx], sum);\nstorepix(convertToT(sum), dstData + (dst_y+1) * dst_step + dst_x * PIXSIZE);\nsum =       co2 * s_dstPatch[1 + get_local_id(1)    ][lx+1];\nsum = mad(co2, s_dstPatch[1 + get_local_id(1) + 1][lx+1], sum);\nstorepix(convertToT(sum), dstData + (dst_y+1) * dst_step + (dst_x+1) * PIXSIZE);\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define noconvert\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = val\n#define TSIZE ((int)sizeof(T))\n#define convertScalar(a) (a)\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1*)(addr))\n#define TSIZE ((int)sizeof(T1)*3)\n#define convertScalar(a) (T)(a.x, a.y, a.z)\n#endif\nenum\n{\nINTER_BITS = 5,\nINTER_TAB_SIZE = 1 << INTER_BITS,\nINTER_TAB_SIZE2 = INTER_TAB_SIZE * INTER_TAB_SIZE\n};\n#ifdef INTER_NEAREST\n#define convertToWT\n#endif\n#ifdef BORDER_CONSTANT\n#define EXTRAPOLATE(v2, v) v = scalar;\n#elif defined BORDER_REPLICATE\n#define EXTRAPOLATE(v2, v) \\\n{ \\\nv2 = max(min(v2, (int2)(src_cols - 1, src_rows - 1)), (int2)(0)); \\\nv = convertToWT(loadpix((__global const T*)(srcptr + mad24(v2.y, src_step, v2.x * TSIZE + src_offset)))); \\\n}\n#elif defined BORDER_WRAP\n#define EXTRAPOLATE(v2, v) \\\n{ \\\nif (v2.x < 0) \\\nv2.x -= ((v2.x - src_cols + 1) / src_cols) * src_cols; \\\nif (v2.x >= src_cols) \\\nv2.x %= src_cols; \\\n\\\nif (v2.y < 0) \\\nv2.y -= ((v2.y - src_rows + 1) / src_rows) * src_rows; \\\nif( v2.y >= src_rows ) \\\nv2.y %= src_rows; \\\nv = convertToWT(loadpix((__global const T*)(srcptr + mad24(v2.y, src_step, v2.x * TSIZE + src_offset)))); \\\n}\n#elif defined(BORDER_REFLECT) || defined(BORDER_REFLECT_101)\n#ifdef BORDER_REFLECT\n#define DELTA int delta = 0\n#else\n#define DELTA int delta = 1\n#endif\n#define EXTRAPOLATE(v2, v) \\\n{ \\\nDELTA; \\\nif (src_cols == 1) \\\nv2.x = 0; \\\nelse \\\ndo \\\n{ \\\nif( v2.x < 0 ) \\\nv2.x = -v2.x - 1 + delta; \\\nelse \\\nv2.x = src_cols - 1 - (v2.x - src_cols) - delta; \\\n} \\\nwhile (v2.x >= src_cols || v2.x < 0); \\\n\\\nif (src_rows == 1) \\\nv2.y = 0; \\\nelse \\\ndo \\\n{ \\\nif( v2.y < 0 ) \\\nv2.y = -v2.y - 1 + delta; \\\nelse \\\nv2.y = src_rows - 1 - (v2.y - src_rows) - delta; \\\n} \\\nwhile (v2.y >= src_rows || v2.y < 0); \\\nv = convertToWT(loadpix((__global const T*)(srcptr + mad24(v2.y, src_step, v2.x * TSIZE + src_offset)))); \\\n}\n#else\n#error No extrapolation method\n#endif\n#define NEED_EXTRAPOLATION(gx, gy) (gx >= src_cols || gy >= src_rows || gx < 0 || gy < 0)\n#ifdef INTER_NEAREST\n__kernel void remap_2_32FC1(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * map1ptr, int map1_step, int map1_offset,\n__global const uchar * map2ptr, int map2_step, int map2_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nT scalar = convertScalar(nVal);\nint map1_index = mad24(y, map1_step, mad24(x, (int)sizeof(float), map1_offset));\nint map2_index = mad24(y, map2_step, mad24(x, (int)sizeof(float), map2_offset));\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap1_index += map1_step, map2_index += map2_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const float * map1 = (__global const float *)(map1ptr + map1_index);\n__global const float * map2 = (__global const float *)(map2ptr + map2_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nint gx = convert_int_sat_rte(map1[0]);\nint gy = convert_int_sat_rte(map2[0]);\nif (NEED_EXTRAPOLATION(gx, gy))\n{\n#ifndef BORDER_CONSTANT\nint2 gxy = (int2)(gx, gy);\n#endif\nT v;\nEXTRAPOLATE(gxy, v)\nstorepix(v, dst);\n}\nelse\n{\nint src_index = mad24(gy, src_step, mad24(gx, TSIZE, src_offset));\nstorepix(loadpix((__global const T*)(srcptr + src_index)), dst);\n}\n}\n}\n}\n__kernel void remap_32FC2(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * mapptr, int map_step, int map_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nT scalar = convertScalar(nVal);\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map_index = mad24(y, map_step, mad24(x, (int)sizeof(float2), map_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap_index += map_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const float2 * map = (__global const float2 *)(mapptr + map_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nint2 gxy = convert_int2_sat_rte(map[0]);\nint gx = gxy.x, gy = gxy.y;\nif (NEED_EXTRAPOLATION(gx, gy))\n{\nT v;\nEXTRAPOLATE(gxy, v)\nstorepix(v, dst);\n}\nelse\n{\nint src_index = mad24(gy, src_step, mad24(gx, TSIZE, src_offset));\nstorepix(loadpix((__global const T *)(srcptr + src_index)), dst);\n}\n}\n}\n}\n__kernel void remap_16SC2(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * mapptr, int map_step, int map_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nT scalar = convertScalar(nVal);\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map_index = mad24(y, map_step, mad24(x, (int)sizeof(short2), map_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap_index += map_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const short2 * map = (__global const short2 *)(mapptr + map_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nint2 gxy = convert_int2(map[0]);\nint gx = gxy.x, gy = gxy.y;\nif (NEED_EXTRAPOLATION(gx, gy))\n{\nT v;\nEXTRAPOLATE(gxy, v)\nstorepix(v, dst);\n}\nelse\n{\nint src_index = mad24(gy, src_step, mad24(gx, TSIZE, src_offset));\nstorepix(loadpix((__global const T *)(srcptr + src_index)), dst);\n}\n}\n}\n}\n__kernel void remap_16SC2_16UC1(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * map1ptr, int map1_step, int map1_offset,\n__global const uchar * map2ptr, int map2_step, int map2_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nT scalar = convertScalar(nVal);\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map1_index = mad24(y, map1_step, mad24(x, (int)sizeof(short2), map1_offset));\nint map2_index = mad24(y, map2_step, mad24(x, (int)sizeof(ushort), map2_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap1_index += map1_step, map2_index += map2_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const short2 * map1 = (__global const short2 *)(map1ptr + map1_index);\n__global const ushort * map2 = (__global const ushort *)(map2ptr + map2_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nint map2Value = convert_int(map2[0]) & (INTER_TAB_SIZE2 - 1);\nint dx = (map2Value & (INTER_TAB_SIZE - 1)) < (INTER_TAB_SIZE >> 1) ? 1 : 0;\nint dy = (map2Value >> INTER_BITS) < (INTER_TAB_SIZE >> 1) ? 1 : 0;\nint2 gxy = convert_int2(map1[0]) + (int2)(dx, dy);\nint gx = gxy.x, gy = gxy.y;\nif (NEED_EXTRAPOLATION(gx, gy))\n{\nT v;\nEXTRAPOLATE(gxy, v)\nstorepix(v, dst);\n}\nelse\n{\nint src_index = mad24(gy, src_step, mad24(gx, TSIZE, src_offset));\nstorepix(loadpix((__global const T *)(srcptr + src_index)), dst);\n}\n}\n}\n}\n#elif defined INTER_LINEAR\n__constant float coeffs[64] =\n{ 1.000000f, 0.000000f, 0.968750f, 0.031250f, 0.937500f, 0.062500f, 0.906250f, 0.093750f, 0.875000f, 0.125000f, 0.843750f, 0.156250f,\n0.812500f, 0.187500f, 0.781250f, 0.218750f, 0.750000f, 0.250000f, 0.718750f, 0.281250f, 0.687500f, 0.312500f, 0.656250f, 0.343750f,\n0.625000f, 0.375000f, 0.593750f, 0.406250f, 0.562500f, 0.437500f, 0.531250f, 0.468750f, 0.500000f, 0.500000f, 0.468750f, 0.531250f,\n0.437500f, 0.562500f, 0.406250f, 0.593750f, 0.375000f, 0.625000f, 0.343750f, 0.656250f, 0.312500f, 0.687500f, 0.281250f, 0.718750f,\n0.250000f, 0.750000f, 0.218750f, 0.781250f, 0.187500f, 0.812500f, 0.156250f, 0.843750f, 0.125000f, 0.875000f, 0.093750f, 0.906250f,\n0.062500f, 0.937500f, 0.031250f, 0.968750f };\n__kernel void remap_16SC2_16UC1(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * map1ptr, int map1_step, int map1_offset,\n__global const uchar * map2ptr, int map2_step, int map2_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nWT scalar = convertToWT(convertScalar(nVal));\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map1_index = mad24(y, map1_step, mad24(x, (int)sizeof(short2), map1_offset));\nint map2_index = mad24(y, map2_step, mad24(x, (int)sizeof(ushort), map2_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap1_index += map1_step, map2_index += map2_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const short2 * map1 = (__global const short2 *)(map1ptr + map1_index);\n__global const ushort * map2 = (__global const ushort *)(map2ptr + map2_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nint2 map_dataA = convert_int2(map1[0]);\nint2 map_dataB = (int2)(map_dataA.x + 1, map_dataA.y);\nint2 map_dataC = (int2)(map_dataA.x, map_dataA.y + 1);\nint2 map_dataD = (int2)(map_dataA.x + 1, map_dataA.y + 1);\nushort map2Value = (ushort)(map2[0] & (INTER_TAB_SIZE2 - 1));\nWT2 u = (WT2)(map2Value & (INTER_TAB_SIZE - 1), map2Value >> INTER_BITS) / (WT2)(INTER_TAB_SIZE);\nWT a = scalar, b = scalar, c = scalar, d = scalar;\nif (!NEED_EXTRAPOLATION(map_dataA.x, map_dataA.y))\na = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataA.y, src_step, map_dataA.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataA, a);\nif (!NEED_EXTRAPOLATION(map_dataB.x, map_dataB.y))\nb = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataB.y, src_step, map_dataB.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataB, b);\nif (!NEED_EXTRAPOLATION(map_dataC.x, map_dataC.y))\nc = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataC.y, src_step, map_dataC.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataC, c);\nif (!NEED_EXTRAPOLATION(map_dataD.x, map_dataD.y))\nd = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataD.y, src_step, map_dataD.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataD, d);\nWT dst_data = a * (1 - u.x) * (1 - u.y) +\nb * (u.x)     * (1 - u.y) +\nc * (1 - u.x) * (u.y) +\nd * (u.x)     * (u.y);\nstorepix(convertToT(dst_data), dst);\n}\n}\n}\n__kernel void remap_2_32FC1(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * map1ptr, int map1_step, int map1_offset,\n__global const uchar * map2ptr, int map2_step, int map2_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nWT scalar = convertToWT(convertScalar(nVal));\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map1_index = mad24(y, map1_step, mad24(x, (int)sizeof(float), map1_offset));\nint map2_index = mad24(y, map2_step, mad24(x, (int)sizeof(float), map2_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap1_index += map1_step, map2_index += map2_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const float * map1 = (__global const float *)(map1ptr + map1_index);\n__global const float * map2 = (__global const float *)(map2ptr + map2_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\n#if defined BORDER_CONSTANT\nfloat xf = map1[0], yf = map2[0];\nint sx = convert_int_sat_rtz(mad(xf, INTER_TAB_SIZE, 0.5f)) >> INTER_BITS;\nint sy = convert_int_sat_rtz(mad(yf, INTER_TAB_SIZE, 0.5f)) >> INTER_BITS;\n__constant float * coeffs_x = coeffs + ((convert_int_rte(xf * INTER_TAB_SIZE) & (INTER_TAB_SIZE - 1)) << 1);\n__constant float * coeffs_y = coeffs + ((convert_int_rte(yf * INTER_TAB_SIZE) & (INTER_TAB_SIZE - 1)) << 1);\nWT sum = (WT)(0), xsum;\nint src_index = mad24(sy, src_step, mad24(sx, TSIZE, src_offset));\n#pragma unroll\nfor (int yp = 0; yp < 2; ++yp, src_index += src_step)\n{\nif (sy + yp >= 0 && sy + yp < src_rows)\n{\nxsum = (WT)(0);\nif (sx >= 0 && sx + 2 < src_cols)\n{\n#if depth == 0 && cn == 1\nuchar2 value = vload2(0, srcptr + src_index);\nxsum = dot(convert_float2(value), (float2)(coeffs_x[0], coeffs_x[1]));\n#else\n#pragma unroll\nfor (int xp = 0; xp < 2; ++xp)\nxsum = fma(convertToWT(loadpix(srcptr + mad24(xp, TSIZE, src_index))), coeffs_x[xp], xsum);\n#endif\n}\nelse\n{\n#pragma unroll\nfor (int xp = 0; xp < 2; ++xp)\nxsum = fma(sx + xp >= 0 && sx + xp < src_cols ?\nconvertToWT(loadpix(srcptr + mad24(xp, TSIZE, src_index))) : scalar, coeffs_x[xp], xsum);\n}\nsum = fma(xsum, coeffs_y[yp], sum);\n}\nelse\nsum = fma(scalar, coeffs_y[yp], sum);\n}\nstorepix(convertToT(sum), dst);\n#else\nfloat2 map_data = (float2)(map1[0], map2[0]);\nint2 map_dataA = convert_int2_sat_rtn(map_data);\nint2 map_dataB = (int2)(map_dataA.x + 1, map_dataA.y);\nint2 map_dataC = (int2)(map_dataA.x, map_dataA.y + 1);\nint2 map_dataD = (int2)(map_dataA.x + 1, map_dataA.y + 1);\nfloat2 _u = map_data - convert_float2(map_dataA);\nWT2 u = convertToWT2(convert_int2_rte(convertToWT2(_u) * (WT2)INTER_TAB_SIZE)) / (WT2)INTER_TAB_SIZE;\nWT scalar = convertToWT(convertScalar(nVal));\nWT a = scalar, b = scalar, c = scalar, d = scalar;\nif (!NEED_EXTRAPOLATION(map_dataA.x, map_dataA.y))\na = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataA.y, src_step, map_dataA.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataA, a);\nif (!NEED_EXTRAPOLATION(map_dataB.x, map_dataB.y))\nb = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataB.y, src_step, map_dataB.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataB, b);\nif (!NEED_EXTRAPOLATION(map_dataC.x, map_dataC.y))\nc = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataC.y, src_step, map_dataC.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataC, c);\nif (!NEED_EXTRAPOLATION(map_dataD.x, map_dataD.y))\nd = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataD.y, src_step, map_dataD.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataD, d);\nWT dst_data = a * (1 - u.x) * (1 - u.y) +\nb * (u.x)     * (1 - u.y) +\nc * (1 - u.x) * (u.y) +\nd * (u.x)     * (u.y);\nstorepix(convertToT(dst_data), dst);\n#endif\n}\n}\n}\n__kernel void remap_32FC2(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * mapptr, int map_step, int map_offset,\nST nVal)\n{\nint x = get_global_id(0);\nint y = get_global_id(1) * rowsPerWI;\nif (x < dst_cols)\n{\nWT scalar = convertToWT(convertScalar(nVal));\nint dst_index = mad24(y, dst_step, mad24(x, TSIZE, dst_offset));\nint map_index = mad24(y, map_step, mad24(x, (int)sizeof(float2), map_offset));\n#pragma unroll\nfor (int i = 0; i < rowsPerWI; ++i, ++y,\nmap_index += map_step, dst_index += dst_step)\nif (y < dst_rows)\n{\n__global const float2 * map = (__global const float2 *)(mapptr + map_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\nfloat2 map_data = map[0];\nint2 map_dataA = convert_int2_sat_rtn(map_data);\nint2 map_dataB = (int2)(map_dataA.x + 1, map_dataA.y);\nint2 map_dataC = (int2)(map_dataA.x, map_dataA.y + 1);\nint2 map_dataD = (int2)(map_dataA.x + 1, map_dataA.y + 1);\nfloat2 _u = map_data - convert_float2(map_dataA);\nWT2 u = convertToWT2(convert_int2_rte(convertToWT2(_u) * (WT2)INTER_TAB_SIZE)) / (WT2)INTER_TAB_SIZE;\nWT a = scalar, b = scalar, c = scalar, d = scalar;\nif (!NEED_EXTRAPOLATION(map_dataA.x, map_dataA.y))\na = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataA.y, src_step, map_dataA.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataA, a);\nif (!NEED_EXTRAPOLATION(map_dataB.x, map_dataB.y))\nb = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataB.y, src_step, map_dataB.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataB, b);\nif (!NEED_EXTRAPOLATION(map_dataC.x, map_dataC.y))\nc = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataC.y, src_step, map_dataC.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataC, c);\nif (!NEED_EXTRAPOLATION(map_dataD.x, map_dataD.y))\nd = convertToWT(loadpix((__global const T *)(srcptr + mad24(map_dataD.y, src_step, map_dataD.x * TSIZE + src_offset))));\nelse\nEXTRAPOLATE(map_dataD, d);\nWT dst_data = a * (1 - u.x) * (1 - u.y) +\nb * (u.x)     * (1 - u.y) +\nc * (1 - u.x) * (u.y) +\nd * (u.x)     * (u.y);\nstorepix(convertToT(dst_data), dst);\n}\n}\n}\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#define INTER_RESIZE_COEF_SCALE (1 << INTER_RESIZE_COEF_BITS)\n#define CAST_BITS (INTER_RESIZE_COEF_BITS << 1)\n#define INC(x,l) min(x+1,l-1)\n#define noconvert\n#if cn != 3\n#define loadpix(addr)  *(__global const T *)(addr)\n#define storepix(val, addr)  *(__global T *)(addr) = val\n#define TSIZE (int)sizeof(T)\n#else\n#define loadpix(addr)  vload3(0, (__global const T1 *)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1 *)(addr))\n#define TSIZE (int)sizeof(T1)*cn\n#endif\n#if defined USE_SAMPLER\n#if cn == 1\n#define READ_IMAGE(X,Y,Z)  read_imagef(X,Y,Z).x\n#define INTERMEDIATE_TYPE  float\n#elif cn == 2\n#define READ_IMAGE(X,Y,Z)  read_imagef(X,Y,Z).xy\n#define INTERMEDIATE_TYPE  float2\n#elif cn == 3\n#define READ_IMAGE(X,Y,Z)  read_imagef(X,Y,Z).xyz\n#define INTERMEDIATE_TYPE  float3\n#elif cn == 4\n#define READ_IMAGE(X,Y,Z)  read_imagef(X,Y,Z)\n#define INTERMEDIATE_TYPE  float4\n#endif\n#define __CAT(x, y) x##y\n#define CAT(x, y) __CAT(x, y)\n#define float1 float\n#if depth == 0\n#define RESULT_SCALE    255.0f\n#elif depth == 1\n#define RESULT_SCALE    127.0f\n#elif depth == 2\n#define RESULT_SCALE    65535.0f\n#elif depth == 3\n#define RESULT_SCALE    32767.0f\n#else\n#define RESULT_SCALE    1.0f\n#endif\n__kernel void resizeSampler(__read_only image2d_t srcImage,\n__global uchar* dstptr, int dststep, int dstoffset,\nint dstrows, int dstcols,\nfloat ifx, float ify)\n{\nconst sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE |\nCLK_ADDRESS_CLAMP_TO_EDGE |\nCLK_FILTER_LINEAR;\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nfloat sx = ((dx+0.5f) * ifx), sy = ((dy+0.5f) * ify);\nINTERMEDIATE_TYPE intermediate = READ_IMAGE(srcImage, sampler, (float2)(sx, sy));\n#if depth <= 4\nT uval = convertToDT(round(intermediate * RESULT_SCALE));\n#else\nT uval = convertToDT(intermediate * RESULT_SCALE);\n#endif\nif(dx < dstcols && dy < dstrows)\n{\nstorepix(uval, dstptr + mad24(dy, dststep, dstoffset + dx*TSIZE));\n}\n}\n#elif defined INTER_LINEAR_INTEGER\n__kernel void resizeLN(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const uchar * buffer)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\n__global const int * xofs = (__global const int *)(buffer), * yofs = xofs + dst_cols;\n__global const short * ialpha = (__global const short *)(yofs + dst_rows);\n__global const short * ibeta = ialpha + ((dst_cols + dy) << 1);\nialpha += dx << 1;\nint sx0 = xofs[dx], sy0 = clamp(yofs[dy], 0, src_rows - 1),\nsy1 = clamp(yofs[dy] + 1, 0, src_rows - 1);\nshort a0 = ialpha[0], a1 = ialpha[1];\nshort b0 = ibeta[0], b1 = ibeta[1];\nint src_index0 = mad24(sy0, src_step, mad24(sx0, TSIZE, src_offset)),\nsrc_index1 = mad24(sy1, src_step, mad24(sx0, TSIZE, src_offset));\nWT data0 = convertToWT(loadpix(srcptr + src_index0));\nWT data1 = convertToWT(loadpix(srcptr + src_index0 + TSIZE));\nWT data2 = convertToWT(loadpix(srcptr + src_index1));\nWT data3 = convertToWT(loadpix(srcptr + src_index1 + TSIZE));\nWT val = ( (((data0 * a0 + data1 * a1) >> 4) * b0) >> 16) +\n( (((data2 * a0 + data3 * a1) >> 4) * b1) >> 16);\nstorepix(convertToDT((val + 2) >> 2),\ndstptr + mad24(dy, dst_step, mad24(dx, TSIZE, dst_offset)));\n}\n}\n#elif defined INTER_LINEAR\n__kernel void resizeLN(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nfloat ifx, float ify)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nfloat sx = ((dx+0.5f) * ifx - 0.5f), sy = ((dy+0.5f) * ify - 0.5f);\nint x = floor(sx), y = floor(sy);\nfloat u = sx - x, v = sy - y;\nif ( x<0 ) x=0,u=0;\nif ( x>=src_cols ) x=src_cols-1,u=0;\nif ( y<0 ) y=0,v=0;\nif ( y>=src_rows ) y=src_rows-1,v=0;\nint y_ = INC(y, src_rows);\nint x_ = INC(x, src_cols);\n#if depth <= 4\nu = u * INTER_RESIZE_COEF_SCALE;\nv = v * INTER_RESIZE_COEF_SCALE;\nint U = rint(u);\nint V = rint(v);\nint U1 = rint(INTER_RESIZE_COEF_SCALE - u);\nint V1 = rint(INTER_RESIZE_COEF_SCALE - v);\nWT data0 = convertToWT(loadpix(srcptr + mad24(y, src_step, mad24(x, TSIZE, src_offset))));\nWT data1 = convertToWT(loadpix(srcptr + mad24(y, src_step, mad24(x_, TSIZE, src_offset))));\nWT data2 = convertToWT(loadpix(srcptr + mad24(y_, src_step, mad24(x, TSIZE, src_offset))));\nWT data3 = convertToWT(loadpix(srcptr + mad24(y_, src_step, mad24(x_, TSIZE, src_offset))));\nWT val = mul24((WT)mul24(U1, V1), data0) + mul24((WT)mul24(U, V1), data1) +\nmul24((WT)mul24(U1, V), data2) + mul24((WT)mul24(U, V), data3);\nT uval = convertToDT((val + (1<<(CAST_BITS-1)))>>CAST_BITS);\n#else\nfloat u1 = 1.f - u;\nfloat v1 = 1.f - v;\nWT data0 = convertToWT(loadpix(srcptr + mad24(y, src_step, mad24(x, TSIZE, src_offset))));\nWT data1 = convertToWT(loadpix(srcptr + mad24(y, src_step, mad24(x_, TSIZE, src_offset))));\nWT data2 = convertToWT(loadpix(srcptr + mad24(y_, src_step, mad24(x, TSIZE, src_offset))));\nWT data3 = convertToWT(loadpix(srcptr + mad24(y_, src_step, mad24(x_, TSIZE, src_offset))));\nT uval = u1 * v1 * data0 + u * v1 * data1 + u1 * v *data2 + u * v *data3;\n#endif\nstorepix(uval, dstptr + mad24(dy, dst_step, mad24(dx, TSIZE, dst_offset)));\n}\n}\n#elif defined INTER_NEAREST\n__kernel void resizeNN(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nfloat ifx, float ify)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nfloat s1 = dx * ifx;\nfloat s2 = dy * ify;\nint sx = min(convert_int_rtz(s1), src_cols - 1);\nint sy = min(convert_int_rtz(s2), src_rows - 1);\nstorepix(loadpix(srcptr + mad24(sy, src_step, mad24(sx, TSIZE, src_offset))),\ndstptr + mad24(dy, dst_step, mad24(dx, TSIZE, dst_offset)));\n}\n}\n#elif defined INTER_AREA\n#ifdef INTER_AREA_FAST\n__kernel void resizeAREA_FAST(__global const uchar * src, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nint dst_index = mad24(dy, dst_step, dst_offset);\nint sx = XSCALE * dx;\nint sy = YSCALE * dy;\nWTV sum = (WTV)(0);\n#pragma unroll\nfor (int py = 0; py < YSCALE; ++py)\n{\nint y = min(sy + py, src_rows - 1);\nint src_index = mad24(y, src_step, src_offset);\n#pragma unroll\nfor (int px = 0; px < XSCALE; ++px)\n{\nint x = min(sx + px, src_cols - 1);\nsum += convertToWTV(loadpix(src + src_index + x*TSIZE));\n}\n}\nstorepix(convertToT(convertToWT2V(sum) * (WT2V)(SCALE)), dst + mad24(dx, TSIZE, dst_index));\n}\n}\n#else\n__kernel void resizeAREA(__global const uchar * src, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nfloat ifx, float ify, __global const int * ofs_tab,\n__global const int * map_tab, __global const float * alpha_tab)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nint dst_index = mad24(dy, dst_step, dst_offset);\n__global const int * xmap_tab = map_tab;\n__global const int * ymap_tab = (__global const int *)(map_tab + (src_cols << 1));\n__global const float * xalpha_tab = alpha_tab;\n__global const float * yalpha_tab = (__global const float *)(alpha_tab + (src_cols << 1));\n__global const int * xofs_tab = ofs_tab;\n__global const int * yofs_tab = (__global const int *)(ofs_tab + dst_cols + 1);\nint xk0 = xofs_tab[dx], xk1 = xofs_tab[dx + 1];\nint yk0 = yofs_tab[dy], yk1 = yofs_tab[dy + 1];\nint sy0 = ymap_tab[yk0], sy1 = ymap_tab[yk1 - 1];\nint sx0 = xmap_tab[xk0], sx1 = xmap_tab[xk1 - 1];\nWTV sum = (WTV)(0), buf;\nint src_index = mad24(sy0, src_step, src_offset);\nfor (int sy = sy0, yk = yk0; sy <= sy1; ++sy, src_index += src_step, ++yk)\n{\nWTV beta = (WTV)(yalpha_tab[yk]);\nbuf = (WTV)(0);\nfor (int sx = sx0, xk = xk0; sx <= sx1; ++sx, ++xk)\n{\nWTV alpha = (WTV)(xalpha_tab[xk]);\nbuf += convertToWTV(loadpix(src + mad24(sx, TSIZE, src_index))) * alpha;\n}\nsum += buf * beta;\n}\nstorepix(convertToT(sum), dst + mad24(dx, TSIZE, dst_index));\n}\n}\n#endif\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n__kernel void threshold(__global const uchar * srcptr, int src_step, int src_offset,\n__global uchar * dstptr, int dst_step, int dst_offset, int rows, int cols,\nT1 thresh, T1 max_val, T1 min_val)\n{\nint gx = get_global_id(0);\nint gy = get_global_id(1) * STRIDE_SIZE;\nif (gx < cols)\n{\nint src_index = mad24(gy, src_step, mad24(gx, (int)sizeof(T), src_offset));\nint dst_index = mad24(gy, dst_step, mad24(gx, (int)sizeof(T), dst_offset));\n#pragma unroll\nfor (int i = 0; i < STRIDE_SIZE; i++)\n{\nif (gy < rows)\n{\nT sdata = *(__global const T *)(srcptr + src_index);\n__global T * dst = (__global T *)(dstptr + dst_index);\n#ifdef THRESH_BINARY\ndst[0] = sdata > (thresh) ? (T)(max_val) : (T)(0);\n#elif defined THRESH_BINARY_INV\ndst[0] = sdata > (thresh) ? (T)(0) : (T)(max_val);\n#elif defined THRESH_TRUNC\ndst[0] = clamp(sdata, (T)min_val, (T)(thresh));\n#elif defined THRESH_TOZERO\ndst[0] = sdata > (thresh) ? sdata : (T)(0);\n#elif defined THRESH_TOZERO_INV\ndst[0] = sdata > (thresh) ? (T)(0) : sdata;\n#endif\ngy++;\nsrc_index += src_step;\ndst_index += dst_step;\n}\n}\n}\n}\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#define CT double\n#else\n#define CT float\n#endif\n#define INTER_BITS 5\n#define INTER_TAB_SIZE (1 << INTER_BITS)\n#define INTER_SCALE 1.f/INTER_TAB_SIZE\n#define AB_BITS max(10, (int)INTER_BITS)\n#define AB_SCALE (1 << AB_BITS)\n#define INTER_REMAP_COEF_BITS 15\n#define INTER_REMAP_COEF_SCALE (1 << INTER_REMAP_COEF_BITS)\n#define ROUND_DELTA (1 << (AB_BITS - INTER_BITS - 1))\n#define noconvert\n#ifndef ST\n#define ST T\n#endif\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = val\n#define scalar scalar_\n#define pixsize (int)sizeof(T)\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1*)(addr))\n#ifdef INTER_NEAREST\n#define scalar (T)(scalar_.x, scalar_.y, scalar_.z)\n#else\n#define scalar (WT)(scalar_.x, scalar_.y, scalar_.z)\n#endif\n#define pixsize ((int)sizeof(T1)*3)\n#endif\n#ifdef INTER_NEAREST\n__kernel void warpAffine(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy0 = get_global_id(1) * rowsPerWI;\nif (dx < dst_cols)\n{\nint round_delta = (AB_SCALE >> 1);\nint X0_ = rint(M[0] * dx * AB_SCALE);\nint Y0_ = rint(M[3] * dx * AB_SCALE);\nint dst_index = mad24(dy0, dst_step, mad24(dx, pixsize, dst_offset));\nfor (int dy = dy0, dy1 = min(dst_rows, dy0 + rowsPerWI); dy < dy1; ++dy, dst_index += dst_step)\n{\nint X0 = X0_ + rint(fma(M[1], dy, M[2]) * AB_SCALE) + round_delta;\nint Y0 = Y0_ + rint(fma(M[4], dy, M[5]) * AB_SCALE) + round_delta;\nshort sx = convert_short_sat(X0 >> AB_BITS);\nshort sy = convert_short_sat(Y0 >> AB_BITS);\nif (sx >= 0 && sx < src_cols && sy >= 0 && sy < src_rows)\n{\nint src_index = mad24(sy, src_step, mad24(sx, pixsize, src_offset));\nstorepix(loadpix(srcptr + src_index), dstptr + dst_index);\n}\nelse\nstorepix(scalar, dstptr + dst_index);\n}\n}\n}\n#elif defined INTER_LINEAR\n__constant float coeffs[64] =\n{ 1.000000f, 0.000000f, 0.968750f, 0.031250f, 0.937500f, 0.062500f, 0.906250f, 0.093750f, 0.875000f, 0.125000f, 0.843750f, 0.156250f,\n0.812500f, 0.187500f, 0.781250f, 0.218750f, 0.750000f, 0.250000f, 0.718750f, 0.281250f, 0.687500f, 0.312500f, 0.656250f, 0.343750f,\n0.625000f, 0.375000f, 0.593750f, 0.406250f, 0.562500f, 0.437500f, 0.531250f, 0.468750f, 0.500000f, 0.500000f, 0.468750f, 0.531250f,\n0.437500f, 0.562500f, 0.406250f, 0.593750f, 0.375000f, 0.625000f, 0.343750f, 0.656250f, 0.312500f, 0.687500f, 0.281250f, 0.718750f,\n0.250000f, 0.750000f, 0.218750f, 0.781250f, 0.187500f, 0.812500f, 0.156250f, 0.843750f, 0.125000f, 0.875000f, 0.093750f, 0.906250f,\n0.062500f, 0.937500f, 0.031250f, 0.968750f };\n__kernel void warpAffine(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy0 = get_global_id(1) * rowsPerWI;\nif (dx < dst_cols)\n{\nint tmp = dx << AB_BITS;\nint X0_ = rint(M[0] * tmp);\nint Y0_ = rint(M[3] * tmp);\nfor (int dy = dy0, dy1 = min(dst_rows, dy0 + rowsPerWI); dy < dy1; ++dy)\n{\nint X0 = X0_ + rint(fma(M[1], dy, M[2]) * AB_SCALE) + ROUND_DELTA;\nint Y0 = Y0_ + rint(fma(M[4], dy, M[5]) * AB_SCALE) + ROUND_DELTA;\nX0 = X0 >> (AB_BITS - INTER_BITS);\nY0 = Y0 >> (AB_BITS - INTER_BITS);\nshort sx = convert_short_sat(X0 >> INTER_BITS), sy = convert_short_sat(Y0 >> INTER_BITS);\nshort ax = convert_short(X0 & (INTER_TAB_SIZE-1)), ay = convert_short(Y0 & (INTER_TAB_SIZE-1));\n#if defined AMD_DEVICE || depth > 4\nWT v0 = scalar, v1 = scalar, v2 = scalar, v3 = scalar;\nif (sx >= 0 && sx < src_cols)\n{\nif (sy >= 0 && sy < src_rows)\nv0 = convertToWT(loadpix(srcptr + mad24(sy, src_step, mad24(sx, pixsize, src_offset))));\nif (sy+1 >= 0 && sy+1 < src_rows)\nv2 = convertToWT(loadpix(srcptr + mad24(sy+1, src_step, mad24(sx, pixsize, src_offset))));\n}\nif (sx+1 >= 0 && sx+1 < src_cols)\n{\nif (sy >= 0 && sy < src_rows)\nv1 = convertToWT(loadpix(srcptr + mad24(sy, src_step, mad24(sx+1, pixsize, src_offset))));\nif (sy+1 >= 0 && sy+1 < src_rows)\nv3 = convertToWT(loadpix(srcptr + mad24(sy+1, src_step, mad24(sx+1, pixsize, src_offset))));\n}\nfloat taby = 1.f/INTER_TAB_SIZE*ay;\nfloat tabx = 1.f/INTER_TAB_SIZE*ax;\nint dst_index = mad24(dy, dst_step, mad24(dx, pixsize, dst_offset));\n#if depth <= 4\nint itab0 = convert_short_sat_rte( (1.0f-taby)*(1.0f-tabx) * INTER_REMAP_COEF_SCALE );\nint itab1 = convert_short_sat_rte( (1.0f-taby)*tabx * INTER_REMAP_COEF_SCALE );\nint itab2 = convert_short_sat_rte( taby*(1.0f-tabx) * INTER_REMAP_COEF_SCALE );\nint itab3 = convert_short_sat_rte( taby*tabx * INTER_REMAP_COEF_SCALE );\nWT val = mad24(v0, itab0, mad24(v1, itab1, mad24(v2, itab2, v3 * itab3)));\nstorepix(convertToT((val + (1 << (INTER_REMAP_COEF_BITS-1))) >> INTER_REMAP_COEF_BITS), dstptr + dst_index);\n#else\nfloat tabx2 = 1.0f - tabx, taby2 = 1.0f - taby;\nWT val = fma(tabx2, fma(v0, taby2, v2 * taby), tabx * fma(v1, taby2, v3 * taby));\nstorepix(convertToT(val), dstptr + dst_index);\n#endif\n#else\n__constant float * coeffs_y = coeffs + (ay << 1), * coeffs_x = coeffs + (ax << 1);\nint src_index0 = mad24(sy, src_step, mad24(sx, pixsize, src_offset)), src_index;\nint dst_index = mad24(dy, dst_step, mad24(dx, pixsize, dst_offset));\nWT sum = (WT)(0), xsum;\n#pragma unroll\nfor (int y = 0; y < 2; y++)\n{\nsrc_index = mad24(y, src_step, src_index0);\nif (sy + y >= 0 && sy + y < src_rows)\n{\nxsum = (WT)(0);\nif (sx >= 0 && sx + 2 < src_cols)\n{\n#if depth == 0 && cn == 1\nuchar2 value = vload2(0, srcptr + src_index);\nxsum = dot(convert_float2(value), (float2)(coeffs_x[0], coeffs_x[1]));\n#else\n#pragma unroll\nfor (int x = 0; x < 2; x++)\nxsum = fma(convertToWT(loadpix(srcptr + mad24(x, pixsize, src_index))), coeffs_x[x], xsum);\n#endif\n}\nelse\n{\n#pragma unroll\nfor (int x = 0; x < 2; x++)\nxsum = fma(sx + x >= 0 && sx + x < src_cols ?\nconvertToWT(loadpix(srcptr + mad24(x, pixsize, src_index))) : scalar, coeffs_x[x], xsum);\n}\nsum = fma(xsum, coeffs_y[y], sum);\n}\nelse\nsum = fma(scalar, coeffs_y[y], sum);\n}\nstorepix(convertToT(sum), dstptr + dst_index);\n#endif\n}\n}\n}\n#elif defined INTER_CUBIC\n#ifdef AMD_DEVICE\ninline void interpolateCubic( float x, float* coeffs )\n{\nconst float A = -0.75f;\ncoeffs[0] = fma(fma(fma(A, (x + 1.f), - 5.0f*A), (x + 1.f), 8.0f*A), x + 1.f, - 4.0f*A);\ncoeffs[1] = fma(fma(A + 2.f, x, - (A + 3.f)), x*x, 1.f);\ncoeffs[2] = fma(fma(A + 2.f, 1.f - x, - (A + 3.f)), (1.f - x)*(1.f - x), 1.f);\ncoeffs[3] = 1.f - coeffs[0] - coeffs[1] - coeffs[2];\n}\n#else\n__constant float coeffs[128] =\n{ 0.000000f, 1.000000f, 0.000000f, 0.000000f, -0.021996f, 0.997841f, 0.024864f, -0.000710f, -0.041199f, 0.991516f, 0.052429f, -0.002747f,\n-0.057747f, 0.981255f, 0.082466f, -0.005974f, -0.071777f, 0.967285f, 0.114746f, -0.010254f, -0.083427f, 0.949837f, 0.149040f, -0.015450f,\n-0.092834f, 0.929138f, 0.185120f, -0.021423f, -0.100136f, 0.905418f, 0.222755f, -0.028038f, -0.105469f, 0.878906f, 0.261719f, -0.035156f,\n-0.108971f, 0.849831f, 0.301781f, -0.042641f, -0.110779f, 0.818420f, 0.342712f, -0.050354f, -0.111031f, 0.784904f, 0.384285f, -0.058159f,\n-0.109863f, 0.749512f, 0.426270f, -0.065918f, -0.107414f, 0.712471f, 0.468437f, -0.073494f, -0.103821f, 0.674011f, 0.510559f, -0.080750f,\n-0.099220f, 0.634361f, 0.552406f, -0.087547f, -0.093750f, 0.593750f, 0.593750f, -0.093750f, -0.087547f, 0.552406f, 0.634361f, -0.099220f,\n-0.080750f, 0.510559f, 0.674011f, -0.103821f, -0.073494f, 0.468437f, 0.712471f, -0.107414f, -0.065918f, 0.426270f, 0.749512f, -0.109863f,\n-0.058159f, 0.384285f, 0.784904f, -0.111031f, -0.050354f, 0.342712f, 0.818420f, -0.110779f, -0.042641f, 0.301781f, 0.849831f, -0.108971f,\n-0.035156f, 0.261719f, 0.878906f, -0.105469f, -0.028038f, 0.222755f, 0.905418f, -0.100136f, -0.021423f, 0.185120f, 0.929138f, -0.092834f,\n-0.015450f, 0.149040f, 0.949837f, -0.083427f, -0.010254f, 0.114746f, 0.967285f, -0.071777f, -0.005974f, 0.082466f, 0.981255f, -0.057747f,\n-0.002747f, 0.052429f, 0.991516f, -0.041199f, -0.000710f, 0.024864f, 0.997841f, -0.021996f };\n#endif\n__kernel void warpAffine(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nint tmp = (dx << AB_BITS);\nint X0 = rint(M[0] * tmp) + rint(fma(M[1], dy, M[2]) * AB_SCALE) + ROUND_DELTA;\nint Y0 = rint(M[3] * tmp) + rint(fma(M[4], dy, M[5]) * AB_SCALE) + ROUND_DELTA;\nX0 = X0 >> (AB_BITS - INTER_BITS);\nY0 = Y0 >> (AB_BITS - INTER_BITS);\nint sx = (short)(X0 >> INTER_BITS) - 1, sy = (short)(Y0 >> INTER_BITS) - 1;\nint ay = (short)(Y0 & (INTER_TAB_SIZE - 1)), ax = (short)(X0 & (INTER_TAB_SIZE - 1));\n#ifdef AMD_DEVICE\nWT v[16];\n#pragma unroll\nfor (int y = 0; y < 4; y++)\n{\nif (sy+y >= 0 && sy+y < src_rows)\n{\n#pragma unroll\nfor (int x = 0; x < 4; x++)\nv[mad24(y, 4, x)] = sx+x >= 0 && sx+x < src_cols ?\nconvertToWT(loadpix(srcptr + mad24(sy+y, src_step, mad24(sx+x, pixsize, src_offset)))) : scalar;\n}\nelse\n{\n#pragma unroll\nfor (int x = 0; x < 4; x++)\nv[mad24(y, 4, x)] = scalar;\n}\n}\nfloat tab1y[4], tab1x[4];\nfloat ayy = INTER_SCALE * ay;\nfloat axx = INTER_SCALE * ax;\ninterpolateCubic(ayy, tab1y);\ninterpolateCubic(axx, tab1x);\nint dst_index = mad24(dy, dst_step, mad24(dx, pixsize, dst_offset));\nWT sum = (WT)(0);\n#if depth <= 4\nint itab[16];\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nitab[i] = rint(tab1y[(i>>2)] * tab1x[(i&3)] * INTER_REMAP_COEF_SCALE);\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nsum = mad24(v[i], itab[i], sum);\nstorepix(convertToT( (sum + (1 << (INTER_REMAP_COEF_BITS-1))) >> INTER_REMAP_COEF_BITS ), dstptr + dst_index);\n#else\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nsum = fma(v[i], tab1y[(i>>2)] * tab1x[(i&3)], sum);\nstorepix(convertToT( sum ), dstptr + dst_index);\n#endif\n#else\n__constant float * coeffs_y = coeffs + (ay << 2), * coeffs_x = coeffs + (ax << 2);\nint src_index0 = mad24(sy, src_step, mad24(sx, pixsize, src_offset)), src_index;\nint dst_index = mad24(dy, dst_step, mad24(dx, pixsize, dst_offset));\nWT sum = (WT)(0), xsum;\n#pragma unroll\nfor (int y = 0; y < 4; y++)\n{\nsrc_index = mad24(y, src_step, src_index0);\nif (sy + y >= 0 && sy + y < src_rows)\n{\nxsum = (WT)(0);\nif (sx >= 0 && sx + 4 < src_cols)\n{\n#if depth == 0 && cn == 1\nuchar4 value = vload4(0, srcptr + src_index);\nxsum = dot(convert_float4(value), (float4)(coeffs_x[0], coeffs_x[1], coeffs_x[2], coeffs_x[3]));\n#else\n#pragma unroll\nfor (int x = 0; x < 4; x++)\nxsum = fma(convertToWT(loadpix(srcptr + mad24(x, pixsize, src_index))), coeffs_x[x], xsum);\n#endif\n}\nelse\n{\n#pragma unroll\nfor (int x = 0; x < 4; x++)\nxsum = fma(sx + x >= 0 && sx + x < src_cols ?\nconvertToWT(loadpix(srcptr + mad24(x, pixsize, src_index))) : scalar, coeffs_x[x], xsum);\n}\nsum = fma(xsum, coeffs_y[y], sum);\n}\nelse\nsum = fma(scalar, coeffs_y[y], sum);\n}\nstorepix(convertToT(sum), dstptr + dst_index);\n#endif\n}\n}\n#endif\n", "#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#define CT double\n#else\n#define CT float\n#endif\n#define INTER_BITS 5\n#define INTER_TAB_SIZE (1 << INTER_BITS)\n#define INTER_SCALE 1.f / INTER_TAB_SIZE\n#define AB_BITS max(10, (int)INTER_BITS)\n#define AB_SCALE (1 << AB_BITS)\n#define INTER_REMAP_COEF_BITS 15\n#define INTER_REMAP_COEF_SCALE (1 << INTER_REMAP_COEF_BITS)\n#define noconvert\n#ifndef ST\n#define ST T\n#endif\n#if cn != 3\n#define loadpix(addr)  *(__global const T*)(addr)\n#define storepix(val, addr)  *(__global T*)(addr) = val\n#define scalar scalar_\n#define pixsize (int)sizeof(T)\n#else\n#define loadpix(addr)  vload3(0, (__global const T1*)(addr))\n#define storepix(val, addr) vstore3(val, 0, (__global T1*)(addr))\n#ifdef INTER_NEAREST\n#define scalar (T)(scalar_.x, scalar_.y, scalar_.z)\n#else\n#define scalar (WT)(scalar_.x, scalar_.y, scalar_.z)\n#endif\n#define pixsize ((int)sizeof(T1)*3)\n#endif\n#ifdef INTER_NEAREST\n__kernel void warpPerspective(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nCT X0 = M[0] * dx + M[1] * dy + M[2];\nCT Y0 = M[3] * dx + M[4] * dy + M[5];\nCT W = M[6] * dx + M[7] * dy + M[8];\nW = W != 0.0f ? 1.f / W : 0.0f;\nshort sx = convert_short_sat_rte(X0*W);\nshort sy = convert_short_sat_rte(Y0*W);\nint dst_index = mad24(dy, dst_step, dx * pixsize + dst_offset);\nif (sx >= 0 && sx < src_cols && sy >= 0 && sy < src_rows)\n{\nint src_index = mad24(sy, src_step, sx * pixsize + src_offset);\nstorepix(loadpix(srcptr + src_index), dstptr + dst_index);\n}\nelse\nstorepix(scalar, dstptr + dst_index);\n}\n}\n#elif defined INTER_LINEAR\n__kernel void warpPerspective(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nCT X0 = M[0] * dx + M[1] * dy + M[2];\nCT Y0 = M[3] * dx + M[4] * dy + M[5];\nCT W = M[6] * dx + M[7] * dy + M[8];\nW = W != 0.0f ? INTER_TAB_SIZE / W : 0.0f;\nint X = rint(X0 * W), Y = rint(Y0 * W);\nshort sx = convert_short_sat(X >> INTER_BITS);\nshort sy = convert_short_sat(Y >> INTER_BITS);\nshort ay = (short)(Y & (INTER_TAB_SIZE - 1));\nshort ax = (short)(X & (INTER_TAB_SIZE - 1));\nWT v0 = (sx >= 0 && sx < src_cols && sy >= 0 && sy < src_rows) ?\nconvertToWT(loadpix(srcptr + mad24(sy, src_step, src_offset + sx * pixsize))) : scalar;\nWT v1 = (sx+1 >= 0 && sx+1 < src_cols && sy >= 0 && sy < src_rows) ?\nconvertToWT(loadpix(srcptr + mad24(sy, src_step, src_offset + (sx+1) * pixsize))) : scalar;\nWT v2 = (sx >= 0 && sx < src_cols && sy+1 >= 0 && sy+1 < src_rows) ?\nconvertToWT(loadpix(srcptr + mad24(sy+1, src_step, src_offset + sx * pixsize))) : scalar;\nWT v3 = (sx+1 >= 0 && sx+1 < src_cols && sy+1 >= 0 && sy+1 < src_rows) ?\nconvertToWT(loadpix(srcptr + mad24(sy+1, src_step, src_offset + (sx+1) * pixsize))) : scalar;\nfloat taby = 1.f/INTER_TAB_SIZE*ay;\nfloat tabx = 1.f/INTER_TAB_SIZE*ax;\nint dst_index = mad24(dy, dst_step, dst_offset + dx * pixsize);\n#if depth <= 4\nint itab0 = convert_short_sat_rte( (1.0f-taby)*(1.0f-tabx) * INTER_REMAP_COEF_SCALE );\nint itab1 = convert_short_sat_rte( (1.0f-taby)*tabx * INTER_REMAP_COEF_SCALE );\nint itab2 = convert_short_sat_rte( taby*(1.0f-tabx) * INTER_REMAP_COEF_SCALE );\nint itab3 = convert_short_sat_rte( taby*tabx * INTER_REMAP_COEF_SCALE );\nWT val = v0 * itab0 +  v1 * itab1 + v2 * itab2 + v3 * itab3;\nstorepix(convertToT((val + (1 << (INTER_REMAP_COEF_BITS-1))) >> INTER_REMAP_COEF_BITS), dstptr + dst_index);\n#else\nfloat tabx2 = 1.0f - tabx, taby2 = 1.0f - taby;\nWT val = v0 * tabx2 * taby2 +  v1 * tabx * taby2 + v2 * tabx2 * taby + v3 * tabx * taby;\nstorepix(convertToT(val), dstptr + dst_index);\n#endif\n}\n}\n#elif defined INTER_CUBIC\ninline void interpolateCubic( float x, float* coeffs )\n{\nconst float A = -0.75f;\ncoeffs[0] = ((A*(x + 1.f) - 5.0f*A)*(x + 1.f) + 8.0f*A)*(x + 1.f) - 4.0f*A;\ncoeffs[1] = ((A + 2.f)*x - (A + 3.f))*x*x + 1.f;\ncoeffs[2] = ((A + 2.f)*(1.f - x) - (A + 3.f))*(1.f - x)*(1.f - x) + 1.f;\ncoeffs[3] = 1.f - coeffs[0] - coeffs[1] - coeffs[2];\n}\n__kernel void warpPerspective(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__constant CT * M, ST scalar_)\n{\nint dx = get_global_id(0);\nint dy = get_global_id(1);\nif (dx < dst_cols && dy < dst_rows)\n{\nCT X0 = M[0] * dx + M[1] * dy + M[2];\nCT Y0 = M[3] * dx + M[4] * dy + M[5];\nCT W = M[6] * dx + M[7] * dy + M[8];\nW = W != 0.0f ? INTER_TAB_SIZE / W : 0.0f;\nint X = rint(X0 * W), Y = rint(Y0 * W);\nshort sx = convert_short_sat(X >> INTER_BITS) - 1;\nshort sy = convert_short_sat(Y >> INTER_BITS) - 1;\nshort ay = (short)(Y & (INTER_TAB_SIZE-1));\nshort ax = (short)(X & (INTER_TAB_SIZE-1));\nWT v[16];\n#pragma unroll\nfor (int y = 0; y < 4; y++)\n#pragma unroll\nfor (int x = 0; x < 4; x++)\nv[mad24(y, 4, x)] = (sx+x >= 0 && sx+x < src_cols && sy+y >= 0 && sy+y < src_rows) ?\nconvertToWT(loadpix(srcptr + mad24(sy+y, src_step, src_offset + (sx+x) * pixsize))) : scalar;\nfloat tab1y[4], tab1x[4];\nfloat ayy = INTER_SCALE * ay;\nfloat axx = INTER_SCALE * ax;\ninterpolateCubic(ayy, tab1y);\ninterpolateCubic(axx, tab1x);\nint dst_index = mad24(dy, dst_step, dst_offset + dx * pixsize);\nWT sum = (WT)(0);\n#if depth <= 4\nint itab[16];\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nitab[i] = rint(tab1y[(i>>2)] * tab1x[(i&3)] * INTER_REMAP_COEF_SCALE);\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nsum += v[i] * itab[i];\nstorepix(convertToT( (sum + (1 << (INTER_REMAP_COEF_BITS-1))) >> INTER_REMAP_COEF_BITS ), dstptr + dst_index);\n#else\n#pragma unroll\nfor (int i = 0; i < 16; i++)\nsum += v[i] * tab1y[(i>>2)] * tab1x[(i&3)];\nstorepix(convertToT( sum ), dstptr + dst_index);\n#endif\n}\n}\n#endif\n", "1449b5059b082c4595846a86ed5702ad", "582cfe4cf8dd76973e63698796247546", "f464151682565a20de380a62e09ae458", "3e1ea3c21fc70a7a9166d5cc66b7ff80", "6833b9a226d061c1ff80509eed0dd178", "e48abb0036bd5e090ad06600b018eec9", "3266de56ccdc2bcb8226bf97c932e272", "14a94db70b88aa76ff8840f03f3ad556", "232e712bff362e53c55027da6e1e1584", "1d0545282b5860ed7eeeb6860fa9edc3", "f082457348bfbcb2e2de3014f46093a8", "b3c29b8efeb2ed66a052794cb7d162cb", "3ce3fc1a1c2e6be3a8fd0d2f51afeaf1", "ce49fba6c7a369504177acc108203a38", "1a16d01d003274c100d23519d745047f", "3bfd6703e639c8a36eb7cdd5f3eefda6", "cb2cfd26f04e14ae047e2f5eb28c8e11", "2aafc30dda5e658542c92a9ab2a63d4a", "1335aadebf2523a98cb069063bdd2ba1", "e99b92fca8604fe253f3c641802ce117", "83a29b40287a01ffdb496951c71bc7cd", "030d23b1d64d51e6485f8941af1e3fc3", "77e935928055f243ff9082b1879a0b2c", "4cef6d86e62644944b49b945ea0fc356", "97cb1ffd4e7c1bc93caba596bf9c6e55", "0b0ba9ee4305009cb2433737f7ed5bcd", "1240500336efb8988a25b1da384c217d", "00cd5c7db7816a3deac5680f13536a02", "6bab391f796ff5b2ba3d38f23929307e", "d3e542270fa2ea1fc3744043dad50cb4", "76072b51c3ede4951ee0200aa33297dc", "1cc12569fdb93cbfa05bb215d3d42e64", "5f2c2d40f721d738ad2b8ef755376c6f", "/builds/master_pack-android/opencv/modules/ml/src/ann_mlp.cpp", "Some of new output training vector components run exceed the original range too much", "The network has not been created. Use method create or the appropriate constructor", "input training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of 0-th (input) layer", "output training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of last (output) layer", "The network has not been trained or loaded", "(type == CV_32F || type == CV_64F) && inputs.cols == layer_sizes[0]", "there should be at least one input and one output and every hidden layer must have more than 1 neuron", "params.CVFolds should be =0 (the tree is not pruned) or n>0 (tree is pruned using n-fold cross-validation)", "/builds/master_pack-android/opencv/modules/ml/src/precomp.hpp", "/builds/master_pack-android/opencv/modules/ml/src/boost.cpp", "/builds/master_pack-android/opencv/modules/ml/src/data.cpp", "type spec is not correct; it should have format \"cat\", \"ord\" or \"ord[n1,n2-n3,n4-n5,...]cat[m1-m2,m3,m4-m5,...]\", where n's and m's are 0-based variable indices", "(data.cols == 1 || data.rows == 1) && (data.type() == CV_32S || data.type() == CV_32F)", "(sampleIdx.checkVector(1, CV_32S, true) > 0 && checkRange(sampleIdx, true, 0, 0, nsamples-1)) || sampleIdx.checkVector(1, CV_8U, true) == nsamples", "(varIdx.checkVector(1, CV_32S, true) > 0 && checkRange(varIdx, true, 0, 0, ninputvars)) || varIdx.checkVector(1, CV_8U, true) == ninputvars", "(layout == ROW_SAMPLE && responses.rows == nsamples) || (layout == COL_SAMPLE && responses.cols == nsamples)", "varType.checkVector(1, CV_8U, true) == nvars && checkRange(varType, true, 0, VAR_ORDERED, VAR_CATEGORICAL+1)", "responses.type() == CV_32F || responses.type() == CV_32S", "missing.size() == samples.size() && missing.type() == CV_8U", "(!varTypesSet && vtypes[i] == rowtypes[i]) || (varTypesSet && (vtypes[i] == rowtypes[i] || rowtypes[i] == VAR_ORDERED))", "If responses are vector values, not scalars, they must be marked as ordered responses", "covMatType == COV_MAT_SPHERICAL || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_GENERIC", "/builds/master_pack-android/opencv/modules/ml/src/em.cpp", "startStep == START_AUTO_STEP || startStep == START_E_STEP || startStep == START_M_STEP", "covMatType == COV_MAT_GENERIC || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_SPHERICAL", "!probs || (!probs->empty() && probs->rows == nsamples && probs->cols == nclusters && (probs->type() == CV_32FC1 || probs->type() == CV_64FC1))", "!weights || (!weights->empty() && (weights->cols == 1 || weights->rows == 1) && static_cast<int>(weights->total()) == nclusters && (weights->type() == CV_32FC1 || weights->type() == CV_64FC1))", "!means || (!means->empty() && means->rows == nclusters && means->cols == dim && means->channels() == 1)", "!covs || (!covs->empty() && static_cast<int>(covs->size()) == nclusters)", "(stype == CV_32F || stype == CV_64F) && (ptype == CV_32F || ptype == CV_64F)", "/builds/master_pack-android/opencv/modules/ml/src/inner_functions.cpp", "idxmat.isContinuous() && idxmat.type() == CV_32S && (idxmat.cols == 1 || idxmat.rows == 1)", "/builds/master_pack-android/opencv/modules/ml/src/kdtree.cpp", "vecmat.isContinuous() && vecmat.type() == CV_32F && vecmat.total() == (size_t)points.cols", "lowerBound.size == upperBound.size && lowerBound.isContinuous() && upperBound.isContinuous() && lowerBound.type() == upperBound.type() && lowerBound.type() == CV_32F && lowerBound.total() == (size_t)ptdims", "/builds/master_pack-android/opencv/modules/ml/src/knearest.cpp", "test_samples.type() == CV_32F && test_samples.cols == samples.cols", "new_samples.cols == samples.cols && new_responses.cols == responses.cols", "/builds/master_pack-android/opencv/modules/ml/src/lr.cpp", "Logisitic Regression Classifier", "check training parameters for the classifier", "number of iterations cannot be zero or a negative number", "The input samples must be 32f matrix with the number of columns = nallvars", "/builds/master_pack-android/opencv/modules/ml/src/nbayes.cpp", "When the number of input samples is >1, the output vector of results must be passed", "The field \"var_count\" of NBayes classifier is missing or non-positive", "The new training data is inconsistent with the original training data; varIdx and the class labels should be the same", "/builds/master_pack-android/opencv/modules/ml/src/rtrees.cpp", "/builds/master_pack-android/opencv/modules/ml/src/svm.cpp", "INTERNAL ERROR: Unknown SVM type, the SVM structure is probably corrupted", "Invalid type of parameter (use one of SVM::C, SVM::GAMMA et al.)", "SVM model data is invalid, check sv_count, var_* and class_count tags", "No element name has been given", "Unknown/unsupported kernel type", "gamma parameter of the kernel must be positive", "The kernel parameter <coef0> must be positive or zero", "The kernel parameter <degree> must be positive", "The parameter C must be positive", "Invalid SVM kernel type (or custom kernel)", "(int)sv_node.size() == sv_total", "(int)df_node.size() == df_count", "Array of class labels is missing or invalid", "svmType == C_SVC || svmType == NU_SVC", "_responses.isContinuous() && _responses.checkVector(1, CV_32S) == nsamples", "While cross-validation one or more of the classes have been fell out of the sample. Try to enlarge <Params::k_fold>", "params.class_weights must be 1d floating-point vector containing as many elements as the number of classes", "in the case of classification problem the responses must be categorical; either specify varType when creating TrainData, or pass integer responses", "/builds/master_pack-android/opencv/modules/ml/src/testset.cpp", "/builds/master_pack-android/opencv/modules/ml/src/tree.cpp", "(int)w->sample_weights.size() == nsamples", "/builds/master_pack-android/opencv/modules/photo/src/align.cpp", "/builds/master_pack-android/opencv/modules/photo/src/calibrate.cpp", "images.size() == times.total()", "/builds/master_pack-android/opencv/modules/photo/src/contrast_preserve.cpp", "/builds/master_pack-android/opencv/modules/photo/src/denoise_tvl1.cpp", "/builds/master_pack-android/opencv/modules/photo/src/denoising.cpp", "imgToDenoiseIndex and temporalWindowSize should be chosen corresponding srcImgs size!", "/builds/master_pack-android/opencv/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp", "/builds/master_pack-android/opencv/modules/photo/src/fast_nlmeans_denoising_invoker.hpp", "srcImgs[0].channels() == pixelInfo<T>::channels", "template_window_size_ <= 46340", "src.channels() == pixelInfo<T>::channels", "Unsupported number of channels! Only 1, 2, 3, and 4 are supported", "Unsupported depth! Only CV_8U and CV_16U are supported for NORM_L1", "Unsupported image format! Only CV_8U, CV_8UC2, CV_8UC3 and CV_8UC4 are supported", "Type of input images should be CV_8UC3!", "/builds/master_pack-android/opencv/modules/photo/src/hdr_common.cpp", "/builds/master_pack-android/opencv/modules/photo/src/inpaint.cpp", "Only 8-bit 1-channel and 3-channel input/output images are supported", "The flags argument must be one of CV_INPAINT_TELEA or CV_INPAINT_NS", "/builds/master_pack-android/opencv/modules/photo/src/merge.cpp", "response.rows == LDR_SIZE && response.cols == 1 && response.channels() == channels", "minxd >= 0 && minyd >= 0 && maxxd <= dest.rows && maxyd <= dest.cols", "/builds/master_pack-android/opencv/modules/photo/src/seamless_cloning.cpp", "/builds/master_pack-android/opencv/modules/photo/src/tonemap.cpp", "#ifdef cl_amd_printf\n#pragma OPENCL_EXTENSION cl_amd_printf:enable\n#endif\n#ifdef DOUBLE_SUPPORT\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined cl_khr_fp64\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#endif\n#ifdef OP_CALC_WEIGHTS\n__kernel void calcAlmostDist2Weight(__global wlut_t * almostDist2Weight, int almostMaxDist,\nFT almostDist2ActualDistMultiplier, int fixedPointMult,\nw_t den, FT WEIGHT_THRESHOLD)\n{\nint almostDist = get_global_id(0);\nif (almostDist < almostMaxDist)\n{\nFT dist = almostDist * almostDist2ActualDistMultiplier;\n#ifdef ABS\nw_t w = exp((w_t)(-dist*dist) * den);\n#else\nw_t w = exp((w_t)(-dist) * den);\n#endif\nwlut_t weight = convert_wlut_t(fixedPointMult * (isnan(w) ? (w_t)1.0 : w));\nalmostDist2Weight[almostDist] =\nweight < (wlut_t)(WEIGHT_THRESHOLD * fixedPointMult) ? (wlut_t)0 : weight;\n}\n}\n#elif defined OP_CALC_FASTNLMEANS\n#define noconvert\n#define SEARCH_SIZE_SQ (SEARCH_SIZE * SEARCH_SIZE)\ninline int calcDist(pixel_t a, pixel_t b)\n{\n#ifdef ABS\nint_t retval = convert_int_t(abs_diff(a, b));\n#else\nint_t diff = convert_int_t(a) - convert_int_t(b);\nint_t retval = diff * diff;\n#endif\n#if cn == 1\nreturn retval;\n#elif cn == 2\nreturn retval.x + retval.y;\n#elif cn == 3\nreturn retval.x + retval.y + retval.z;\n#elif cn == 4\nreturn retval.x + retval.y + retval.z + retval.w;\n#else\n#error \"cn should be either 1, 2, 3 or 4\"\n#endif\n}\n#ifdef ABS\ninline int calcDistUpDown(pixel_t down_value, pixel_t down_value_t, pixel_t up_value, pixel_t up_value_t)\n{\nreturn calcDist(down_value, down_value_t) - calcDist(up_value, up_value_t);\n}\n#else\ninline int calcDistUpDown(pixel_t down_value, pixel_t down_value_t, pixel_t up_value, pixel_t up_value_t)\n{\nint_t A = convert_int_t(down_value) - convert_int_t(down_value_t);\nint_t B = convert_int_t(up_value) - convert_int_t(up_value_t);\nint_t retval = (A - B) * (A + B);\n#if cn == 1\nreturn retval;\n#elif cn == 2\nreturn retval.x + retval.y;\n#elif cn == 3\nreturn retval.x + retval.y + retval.z;\n#elif cn == 4\nreturn retval.x + retval.y + retval.z + retval.w;\n#else\n#error \"cn should be either 1, 2, 3 or 4\"\n#endif\n}\n#endif\n#define COND if (x == 0 && y == 0)\ninline void calcFirstElementInRow(__global const uchar * src, int src_step, int src_offset,\n__local int * dists, int y, int x, int id,\n__global int * col_dists, __global int * up_col_dists)\n{\ny -= TEMPLATE_SIZE2;\nint sx = x - SEARCH_SIZE2, sy = y - SEARCH_SIZE2;\nint col_dists_current_private[TEMPLATE_SIZE];\nfor (int i = id; i < SEARCH_SIZE_SQ; i += CTA_SIZE)\n{\nint dist = 0, value;\n__global const pixel_t * src_template = (__global const pixel_t *)(src +\nmad24(sy + i / SEARCH_SIZE, src_step, mad24(psz, sx + i % SEARCH_SIZE, src_offset)));\n__global const pixel_t * src_current = (__global const pixel_t *)(src + mad24(y, src_step, mad24(psz, x, src_offset)));\n__global int * col_dists_current = col_dists + i * TEMPLATE_SIZE;\n#pragma unroll\nfor (int j = 0; j < TEMPLATE_SIZE; ++j)\ncol_dists_current_private[j] = 0;\nfor (int ty = 0; ty < TEMPLATE_SIZE; ++ty)\n{\n#pragma unroll\nfor (int tx = -TEMPLATE_SIZE2; tx <= TEMPLATE_SIZE2; ++tx)\n{\nvalue = calcDist(src_template[tx], src_current[tx]);\ncol_dists_current_private[tx + TEMPLATE_SIZE2] += value;\ndist += value;\n}\nsrc_current = (__global const pixel_t *)((__global const uchar *)src_current + src_step);\nsrc_template = (__global const pixel_t *)((__global const uchar *)src_template + src_step);\n}\n#pragma unroll\nfor (int j = 0; j < TEMPLATE_SIZE; ++j)\ncol_dists_current[j] = col_dists_current_private[j];\ndists[i] = dist;\nup_col_dists[0 + i] = col_dists[TEMPLATE_SIZE - 1];\n}\n}\ninline void calcElementInFirstRow(__global const uchar * src, int src_step, int src_offset,\n__local int * dists, int y, int x0, int x, int id, int first,\n__global int * col_dists, __global int * up_col_dists)\n{\nx += TEMPLATE_SIZE2;\ny -= TEMPLATE_SIZE2;\nint sx = x - SEARCH_SIZE2, sy = y - SEARCH_SIZE2;\nfor (int i = id; i < SEARCH_SIZE_SQ; i += CTA_SIZE)\n{\n__global const pixel_t * src_current = (__global const pixel_t *)(src + mad24(y, src_step, mad24(psz, x, src_offset)));\n__global const pixel_t * src_template = (__global const pixel_t *)(src +\nmad24(sy + i / SEARCH_SIZE, src_step, mad24(psz, sx + i % SEARCH_SIZE, src_offset)));\n__global int * col_dists_current = col_dists + TEMPLATE_SIZE * i;\nint col_dist = 0;\n#pragma unroll\nfor (int ty = 0; ty < TEMPLATE_SIZE; ++ty)\n{\ncol_dist += calcDist(src_current[0], src_template[0]);\nsrc_current = (__global const pixel_t *)((__global const uchar *)src_current + src_step);\nsrc_template = (__global const pixel_t *)((__global const uchar *)src_template + src_step);\n}\ndists[i] += col_dist - col_dists_current[first];\ncol_dists_current[first] = col_dist;\nup_col_dists[mad24(x0, SEARCH_SIZE_SQ, i)] = col_dist;\n}\n}\ninline void calcElement(__global const uchar * src, int src_step, int src_offset,\n__local int * dists, int y, int x0, int x, int id, int first,\n__global int * col_dists, __global int * up_col_dists)\n{\nint sx = x + TEMPLATE_SIZE2;\nint sy_up = y - TEMPLATE_SIZE2 - 1;\nint sy_down = y + TEMPLATE_SIZE2;\npixel_t up_value = *(__global const pixel_t *)(src + mad24(sy_up, src_step, mad24(psz, sx, src_offset)));\npixel_t down_value = *(__global const pixel_t *)(src + mad24(sy_down, src_step, mad24(psz, sx, src_offset)));\nsx -= SEARCH_SIZE2;\nsy_up -= SEARCH_SIZE2;\nsy_down -= SEARCH_SIZE2;\nfor (int i = id; i < SEARCH_SIZE_SQ; i += CTA_SIZE)\n{\nint wx = i % SEARCH_SIZE, wy = i / SEARCH_SIZE;\npixel_t up_value_t = *(__global const pixel_t *)(src + mad24(sy_up + wy, src_step, mad24(psz, sx + wx, src_offset)));\npixel_t down_value_t = *(__global const pixel_t *)(src + mad24(sy_down + wy, src_step, mad24(psz, sx + wx, src_offset)));\n__global int * col_dists_current = col_dists + mad24(i, TEMPLATE_SIZE, first);\n__global int * up_col_dists_current = up_col_dists + mad24(x0, SEARCH_SIZE_SQ, i);\nint col_dist = up_col_dists_current[0] + calcDistUpDown(down_value, down_value_t, up_value, up_value_t);\ndists[i] += col_dist - col_dists_current[0];\ncol_dists_current[0] = col_dist;\nup_col_dists_current[0] = col_dist;\n}\n}\ninline void convolveWindow(__global const uchar * src, int src_step, int src_offset,\n__local int * dists, __global const wlut_t * almostDist2Weight,\n__global uchar * dst, int dst_step, int dst_offset,\nint y, int x, int id, __local weight_t * weights_local,\n__local sum_t * weighted_sum_local, int almostTemplateWindowSizeSqBinShift)\n{\nint sx = x - SEARCH_SIZE2, sy = y - SEARCH_SIZE2;\nweight_t weights = (weight_t)0;\nsum_t weighted_sum = (sum_t)0;\nfor (int i = id; i < SEARCH_SIZE_SQ; i += CTA_SIZE)\n{\nint src_index = mad24(sy + i / SEARCH_SIZE, src_step, mad24(i % SEARCH_SIZE + sx, psz, src_offset));\nsum_t src_value = convert_sum_t(*(__global const pixel_t *)(src + src_index));\nint almostAvgDist = dists[i] >> almostTemplateWindowSizeSqBinShift;\nweight_t weight = convert_weight_t(almostDist2Weight[almostAvgDist]);\nweights += weight;\nweighted_sum += (sum_t)weight * src_value;\n}\nweights_local[id] = weights;\nweighted_sum_local[id] = weighted_sum;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor (int lsize = CTA_SIZE >> 1; lsize > 2; lsize >>= 1)\n{\nif (id < lsize)\n{\nint id2 = lsize + id;\nweights_local[id] += weights_local[id2];\nweighted_sum_local[id] += weighted_sum_local[id2];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (id == 0)\n{\nint dst_index = mad24(y, dst_step, mad24(psz, x, dst_offset));\nsum_t weighted_sum_local_0 = weighted_sum_local[0] + weighted_sum_local[1] +\nweighted_sum_local[2] + weighted_sum_local[3];\nweight_t weights_local_0 = weights_local[0] + weights_local[1] + weights_local[2] + weights_local[3];\n*(__global pixel_t *)(dst + dst_index) = convert_pixel_t(weighted_sum_local_0 / (sum_t)weights_local_0);\n}\n}\n__kernel void fastNlMeansDenoising(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\n__global const wlut_t * almostDist2Weight, __global uchar * buffer,\nint almostTemplateWindowSizeSqBinShift)\n{\nint block_x = get_group_id(0), nblocks_x = get_num_groups(0);\nint block_y = get_group_id(1);\nint id = get_local_id(0), first;\n__local int dists[SEARCH_SIZE_SQ];\n__local weight_t weights[CTA_SIZE];\n__local sum_t weighted_sum[CTA_SIZE];\nint x0 = block_x * BLOCK_COLS, x1 = min(x0 + BLOCK_COLS, dst_cols);\nint y0 = block_y * BLOCK_ROWS, y1 = min(y0 + BLOCK_ROWS, dst_rows);\nint block_data_start = SEARCH_SIZE_SQ * (mad24(block_y, dst_cols, x0) + mad24(block_y, nblocks_x, block_x) * TEMPLATE_SIZE);\n__global int * col_dists = (__global int *)(buffer + block_data_start * sizeof(int));\n__global int * up_col_dists = col_dists + SEARCH_SIZE_SQ * TEMPLATE_SIZE;\nfor (int y = y0; y < y1; ++y)\nfor (int x = x0; x < x1; ++x)\n{\nif (x == x0)\n{\ncalcFirstElementInRow(src, src_step, src_offset, dists, y, x, id, col_dists, up_col_dists);\nfirst = 0;\n}\nelse\n{\nif (y == y0)\ncalcElementInFirstRow(src, src_step, src_offset, dists, y, x - x0, x, id, first, col_dists, up_col_dists);\nelse\ncalcElement(src, src_step, src_offset, dists, y, x - x0, x, id, first, col_dists, up_col_dists);\nfirst = (first + 1) % TEMPLATE_SIZE;\n}\nconvolveWindow(src, src_step, src_offset, dists, almostDist2Weight, dst, dst_step, dst_offset,\ny, x, id, weights, weighted_sum, almostTemplateWindowSizeSqBinShift);\n}\n}\n#endif\n", "094aea838a917cea483f77e19dd39de3", "/builds/master_pack-android/opencv/modules/video/src/bgfg_gaussmix2.cpp", "/builds/master_pack-android/opencv/modules/video/src/bgfg_KNN.cpp", "/builds/master_pack-android/opencv/modules/video/src/camshift.cpp", "state and measurement vectors must have positive number of dimensions", "/builds/master_pack-android/opencv/modules/video/src/compat_video.cpp", "/builds/master_pack-android/opencv/modules/video/src/ecc.cpp", "motionType == MOTION_TRANSLATION || motionType == MOTION_EUCLIDEAN || motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY", "motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY || motionType == MOTION_EUCLIDEAN || motionType == MOTION_TRANSLATION", "criteria.type & TermCriteria::COUNT || criteria.type & TermCriteria::EPS", "The algorithm stopped before its convergence. The correlation is going to be minimized. Images may be uncorrelated or non-overlapped", "/builds/master_pack-android/opencv/modules/video/src/kalman.cpp", "/builds/master_pack-android/opencv/modules/video/src/lkpyramid.cpp", "img.depth() == CV_8U && winSize.width > 2 && winSize.height > 2", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height", "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()", "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()", "Both input images must have either 8uC1 or 8uC3 type", "Both input images must have the same size", "/builds/master_pack-android/opencv/modules/video/src/optflowgf.cpp", "prev0.size() == next0.size() && prev0.channels() == next0.channels() && prev0.channels() == 1 && pyr_scale < 1", "/builds/master_pack-android/opencv/modules/video/src/tvl1flow.cpp", "!useInitialFlow || (_flow.size() == I0.size() && _flow.type() == CV_32FC2)", "#if CN==1\n#define T_MEAN float\n#define F_ZERO (0.0f)\n#define cnMode 1\n#define frameToMean(a, b) (b) = *(a);\n#define meanToFrame(a, b) *b = convert_uchar_sat(a);\ninline float sum(float val)\n{\nreturn val;\n}\n#else\n#define T_MEAN float4\n#define F_ZERO (0.0f, 0.0f, 0.0f, 0.0f)\n#define cnMode 4\n#define meanToFrame(a, b)\\\nb[0] = convert_uchar_sat(a.x); \\\nb[1] = convert_uchar_sat(a.y); \\\nb[2] = convert_uchar_sat(a.z);\n#define frameToMean(a, b)\\\nb.x = a[0]; \\\nb.y = a[1]; \\\nb.z = a[2]; \\\nb.w = 0.0f;\ninline float sum(const float4 val)\n{\nreturn (val.x + val.y + val.z);\n}\n#endif\n__kernel void mog2_kernel(__global const uchar* frame, int frame_step, int frame_offset, int frame_row, int frame_col,\n__global uchar* modesUsed,\n__global uchar* weight,\n__global uchar* mean,\n__global uchar* variance,\n__global uchar* fgmask, int fgmask_step, int fgmask_offset,\nfloat alphaT, float alpha1, float prune,\nfloat c_Tb, float c_TB, float c_Tg, float c_varMin,\nfloat c_varMax, float c_varInit, float c_tau\n#ifdef SHADOW_DETECT\n, uchar c_shadowVal\n#endif\n)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif( x < frame_col && y < frame_row)\n{\n__global const uchar* _frame = (frame + mad24(y, frame_step, mad24(x, CN, frame_offset)));\nT_MEAN pix;\nframeToMean(_frame, pix);\nuchar foreground = 255;\nbool fitsPDF = false;\nint pt_idx =  mad24(y, frame_col, x);\nint idx_step = frame_row * frame_col;\n__global uchar* _modesUsed = modesUsed + pt_idx;\nuchar nmodes = _modesUsed[0];\nfloat totalWeight = 0.0f;\n__global float* _weight = (__global float*)(weight);\n__global float* _variance = (__global float*)(variance);\n__global T_MEAN* _mean = (__global T_MEAN*)(mean);\nuchar mode = 0;\nfor (; mode < nmodes; ++mode)\n{\nint mode_idx = mad24(mode, idx_step, pt_idx);\nfloat c_weight = mad(alpha1, _weight[mode_idx], prune);\nfloat c_var = _variance[mode_idx];\nT_MEAN c_mean = _mean[mode_idx];\nT_MEAN diff = c_mean - pix;\nfloat dist2 = dot(diff, diff);\nif (totalWeight < c_TB && dist2 < c_Tb * c_var)\nforeground = 0;\nif (dist2 < c_Tg * c_var)\n{\nfitsPDF = true;\nc_weight += alphaT;\nfloat k = alphaT / c_weight;\nT_MEAN mean_new = mad((T_MEAN)-k, diff, c_mean);\nfloat variance_new  = clamp(mad(k, (dist2 - c_var), c_var), c_varMin, c_varMax);\nfor (int i = mode; i > 0; --i)\n{\nint prev_idx = mode_idx - idx_step;\nif (c_weight < _weight[prev_idx])\nbreak;\n_weight[mode_idx]   = _weight[prev_idx];\n_variance[mode_idx] = _variance[prev_idx];\n_mean[mode_idx]     = _mean[prev_idx];\nmode_idx = prev_idx;\n}\n_mean[mode_idx]     = mean_new;\n_variance[mode_idx] = variance_new;\n_weight[mode_idx]   = c_weight;\ntotalWeight += c_weight;\nmode ++;\nbreak;\n}\nif (c_weight < -prune)\nc_weight = 0.0f;\n_weight[mode_idx] = c_weight;\ntotalWeight += c_weight;\n}\nfor (; mode < nmodes; ++mode)\n{\nint mode_idx = mad24(mode, idx_step, pt_idx);\nfloat c_weight = mad(alpha1, _weight[mode_idx], prune);\nif (c_weight < -prune)\n{\nc_weight = 0.0f;\nnmodes = mode;\nbreak;\n}\n_weight[mode_idx] = c_weight;\ntotalWeight += c_weight;\n}\nif (0.f < totalWeight)\n{\ntotalWeight = 1.f / totalWeight;\nfor (int mode = 0; mode < nmodes; ++mode)\n_weight[mad24(mode, idx_step, pt_idx)] *= totalWeight;\n}\nif (!fitsPDF)\n{\nuchar mode = nmodes == (NMIXTURES) ? (NMIXTURES) - 1 : nmodes++;\nint mode_idx = mad24(mode, idx_step, pt_idx);\nif (nmodes == 1)\n_weight[mode_idx] = 1.f;\nelse\n{\n_weight[mode_idx] = alphaT;\nfor (int i = pt_idx; i < mode_idx; i += idx_step)\n_weight[i] *= alpha1;\n}\nfor (int i = nmodes - 1; i > 0; --i)\n{\nint prev_idx = mode_idx - idx_step;\nif (alphaT < _weight[prev_idx])\nbreak;\n_weight[mode_idx]   = _weight[prev_idx];\n_variance[mode_idx] = _variance[prev_idx];\n_mean[mode_idx]     = _mean[prev_idx];\nmode_idx = prev_idx;\n}\n_mean[mode_idx] = pix;\n_variance[mode_idx] = c_varInit;\n}\n_modesUsed[0] = nmodes;\n#ifdef SHADOW_DETECT\nif (foreground)\n{\nfloat tWeight = 0.0f;\nfor (uchar mode = 0; mode < nmodes; ++mode)\n{\nint mode_idx = mad24(mode, idx_step, pt_idx);\nT_MEAN c_mean = _mean[mode_idx];\nT_MEAN pix_mean = pix * c_mean;\nfloat numerator = sum(pix_mean);\nfloat denominator = dot(c_mean, c_mean);\nif (denominator == 0)\nbreak;\nif (numerator <= denominator && numerator >= c_tau * denominator)\n{\nfloat a = numerator / denominator;\nT_MEAN dD = mad(a, c_mean, -pix);\nif (dot(dD, dD) < c_Tb * _variance[mode_idx] * a * a)\n{\nforeground = c_shadowVal;\nbreak;\n}\n}\ntWeight += _weight[mode_idx];\nif (tWeight > c_TB)\nbreak;\n}\n}\n#endif\n__global uchar* _fgmask = fgmask + mad24(y, fgmask_step, x + fgmask_offset);\n*_fgmask = (uchar)foreground;\n}\n}\n__kernel void getBackgroundImage2_kernel(__global const uchar* modesUsed,\n__global const uchar* weight,\n__global const uchar* mean,\n__global uchar* dst, int dst_step, int dst_offset, int dst_row, int dst_col,\nfloat c_TB)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < dst_col && y < dst_row)\n{\nint pt_idx =  mad24(y, dst_col, x);\n__global const uchar* _modesUsed = modesUsed + pt_idx;\nuchar nmodes = _modesUsed[0];\nT_MEAN meanVal = (T_MEAN)F_ZERO;\nfloat totalWeight = 0.0f;\n__global const float* _weight = (__global const float*)weight;\n__global const T_MEAN* _mean = (__global const T_MEAN*)(mean);\nint idx_step = dst_row * dst_col;\nfor (uchar mode = 0; mode < nmodes; ++mode)\n{\nint mode_idx = mad24(mode, idx_step, pt_idx);\nfloat c_weight = _weight[mode_idx];\nT_MEAN c_mean = _mean[mode_idx];\nmeanVal = mad(c_weight, c_mean, meanVal);\ntotalWeight += c_weight;\nif (totalWeight > c_TB)\nbreak;\n}\nif (0.f < totalWeight)\nmeanVal = meanVal / totalWeight;\nelse\nmeanVal = (T_MEAN)(0.f);\n__global uchar* _dst = dst + mad24(y, dst_step, mad24(x, CN, dst_offset));\nmeanToFrame(meanVal, _dst);\n}\n}\n", "#define tx  (int)get_local_id(0)\n#define ty  get_local_id(1)\n#define bx  get_group_id(0)\n#define bdx (int)get_local_size(0)\n#define BORDER_SIZE 5\n#define MAX_KSIZE_HALF 100\n#ifndef polyN\n#define polyN 5\n#endif\n#if USE_DOUBLE\n#ifdef cl_amd_fp64\n#pragma OPENCL EXTENSION cl_amd_fp64:enable\n#elif defined (cl_khr_fp64)\n#pragma OPENCL EXTENSION cl_khr_fp64:enable\n#endif\n#define TYPE double\n#define VECTYPE double4\n#else\n#define TYPE float\n#define VECTYPE float4\n#endif\n__kernel void polynomialExpansion(__global __const float * src, int srcStep,\n__global float * dst, int dstStep,\nconst int rows, const  int cols,\n__global __const float * c_g,\n__global __const float * c_xg,\n__global __const float * c_xxg,\n__local float * smem,\nconst VECTYPE ig)\n{\nconst int y = get_global_id(1);\nconst int x = bx * (bdx - 2*polyN) + tx - polyN;\nint xWarped;\n__local float *row = smem + tx;\nif (y < rows && y >= 0)\n{\nxWarped = min(max(x, 0), cols - 1);\nrow[0] = src[mad24(y, srcStep, xWarped)] * c_g[0];\nrow[bdx] = 0.f;\nrow[2*bdx] = 0.f;\n#pragma unroll\nfor (int k = 1; k <= polyN; ++k)\n{\nfloat t0 = src[mad24(max(y - k, 0), srcStep, xWarped)];\nfloat t1 = src[mad24(min(y + k, rows - 1), srcStep, xWarped)];\nrow[0] += c_g[k] * (t0 + t1);\nrow[bdx] += c_xg[k] * (t1 - t0);\nrow[2*bdx] += c_xxg[k] * (t0 + t1);\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y < rows && y >= 0 && tx >= polyN && tx + polyN < bdx && x < cols)\n{\nTYPE b1 = c_g[0] * row[0];\nTYPE b3 = c_g[0] * row[bdx];\nTYPE b5 = c_g[0] * row[2*bdx];\nTYPE b2 = 0, b4 = 0, b6 = 0;\n#pragma unroll\nfor (int k = 1; k <= polyN; ++k)\n{\nb1 += (row[k] + row[-k]) * c_g[k];\nb4 += (row[k] + row[-k]) * c_xxg[k];\nb2 += (row[k] - row[-k]) * c_xg[k];\nb3 += (row[k + bdx] + row[-k + bdx]) * c_g[k];\nb6 += (row[k + bdx] - row[-k + bdx]) * c_xg[k];\nb5 += (row[k + 2*bdx] + row[-k + 2*bdx]) * c_g[k];\n}\ndst[mad24(y, dstStep, xWarped)] = (float)(b3*ig.s0);\ndst[mad24(rows + y, dstStep, xWarped)] = (float)(b2*ig.s0);\ndst[mad24(2*rows + y, dstStep, xWarped)] = (float)(b1*ig.s1 + b5*ig.s2);\ndst[mad24(3*rows + y, dstStep, xWarped)] = (float)(b1*ig.s1 + b4*ig.s2);\ndst[mad24(4*rows + y, dstStep, xWarped)] = (float)(b6*ig.s3);\n}\n}\ninline int idx_row_low(const int y, const int last_row)\n{\nreturn abs(y) % (last_row + 1);\n}\ninline int idx_row_high(const int y, const int last_row)\n{\nreturn abs(last_row - abs(last_row - y)) % (last_row + 1);\n}\ninline int idx_col_low(const int x, const int last_col)\n{\nreturn abs(x) % (last_col + 1);\n}\ninline int idx_col_high(const int x, const int last_col)\n{\nreturn abs(last_col - abs(last_col - x)) % (last_col + 1);\n}\ninline int idx_col(const int x, const int last_col)\n{\nreturn idx_col_low(idx_col_high(x, last_col), last_col);\n}\n__kernel void gaussianBlur(__global const float * src, int srcStep,\n__global float * dst, int dstStep, const int rows, const  int cols,\n__global const float * c_gKer, const int ksizeHalf,\n__local float * smem)\n{\nconst int y = get_global_id(1);\nconst int x = get_global_id(0);\n__local float *row = smem + ty * (bdx + 2*ksizeHalf);\nif (y < rows)\n{\nfor (int i = tx; i < bdx + 2*ksizeHalf; i += bdx)\n{\nint xExt = (int)(bx * bdx) + i - ksizeHalf;\nxExt = idx_col(xExt, cols - 1);\nrow[i] = src[mad24(y, srcStep, xExt)] * c_gKer[0];\nfor (int j = 1; j <= ksizeHalf; ++j)\nrow[i] += (src[mad24(idx_row_low(y - j, rows - 1), srcStep, xExt)]\n+ src[mad24(idx_row_high(y + j, rows - 1), srcStep, xExt)]) * c_gKer[j];\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y < rows && y >= 0 && x < cols && x >= 0)\n{\nrow += tx + ksizeHalf;\nfloat res = row[0] * c_gKer[0];\nfor (int i = 1; i <= ksizeHalf; ++i)\nres += (row[-i] + row[i]) * c_gKer[i];\ndst[mad24(y, dstStep, x)] = res;\n}\n}\n__kernel void gaussianBlur5(__global const float * src, int srcStep,\n__global float * dst, int dstStep,\nconst int rows, const  int cols,\n__global const float * c_gKer, const int ksizeHalf,\n__local float * smem)\n{\nconst int y = get_global_id(1);\nconst int x = get_global_id(0);\nconst int smw = bdx + 2*ksizeHalf;\n__local volatile float *row = smem + 5 * ty * smw;\nif (y < rows)\n{\nfor (int i = tx; i < bdx + 2*ksizeHalf; i += bdx)\n{\nint xExt = (int)(bx * bdx) + i - ksizeHalf;\nxExt = idx_col(xExt, cols - 1);\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nrow[k*smw + i] = src[mad24(k*rows + y, srcStep, xExt)] * c_gKer[0];\nfor (int j = 1; j <= ksizeHalf; ++j)\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nrow[k*smw + i] +=\n(src[mad24(k*rows + idx_row_low(y - j, rows - 1), srcStep, xExt)] +\nsrc[mad24(k*rows + idx_row_high(y + j, rows - 1), srcStep, xExt)]) * c_gKer[j];\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y < rows && y >= 0 && x < cols && x >= 0)\n{\nrow += tx + ksizeHalf;\nfloat res[5];\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nres[k] = row[k*smw] * c_gKer[0];\nfor (int i = 1; i <= ksizeHalf; ++i)\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nres[k] += (row[k*smw - i] + row[k*smw + i]) * c_gKer[i];\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\ndst[mad24(k*rows + y, dstStep, x)] = res[k];\n}\n}\n__constant float c_border[BORDER_SIZE + 1] = { 0.14f, 0.14f, 0.4472f, 0.4472f, 0.4472f, 1.f };\n__kernel void updateMatrices(__global const float * flowx, int xStep,\n__global const float * flowy, int yStep,\nconst int rows, const int cols,\n__global const float * R0, int R0Step,\n__global const float * R1, int R1Step,\n__global float * M, int mStep)\n{\nconst int y = get_global_id(1);\nconst int x = get_global_id(0);\nif (y < rows && y >= 0 && x < cols && x >= 0)\n{\nfloat dx = flowx[mad24(y, xStep, x)];\nfloat dy = flowy[mad24(y, yStep, x)];\nfloat fx = x + dx;\nfloat fy = y + dy;\nint x1 = convert_int(floor(fx));\nint y1 = convert_int(floor(fy));\nfx -= x1;\nfy -= y1;\nfloat r2, r3, r4, r5, r6;\nif (x1 >= 0 && y1 >= 0 && x1 < cols - 1 && y1 < rows - 1)\n{\nfloat a00 = (1.f - fx) * (1.f - fy);\nfloat a01 = fx * (1.f - fy);\nfloat a10 = (1.f - fx) * fy;\nfloat a11 = fx * fy;\nr2 = a00 * R1[mad24(y1, R1Step, x1)] +\na01 * R1[mad24(y1, R1Step, x1 + 1)] +\na10 * R1[mad24(y1 + 1, R1Step, x1)] +\na11 * R1[mad24(y1 + 1, R1Step, x1 + 1)];\nr3 = a00 * R1[mad24(rows + y1, R1Step, x1)] +\na01 * R1[mad24(rows + y1, R1Step, x1 + 1)] +\na10 * R1[mad24(rows + y1 + 1, R1Step, x1)] +\na11 * R1[mad24(rows + y1 + 1, R1Step, x1 + 1)];\nr4 = a00 * R1[mad24(2*rows + y1, R1Step, x1)] +\na01 * R1[mad24(2*rows + y1, R1Step, x1 + 1)] +\na10 * R1[mad24(2*rows + y1 + 1, R1Step, x1)] +\na11 * R1[mad24(2*rows + y1 + 1, R1Step, x1 + 1)];\nr5 = a00 * R1[mad24(3*rows + y1, R1Step, x1)] +\na01 * R1[mad24(3*rows + y1, R1Step, x1 + 1)] +\na10 * R1[mad24(3*rows + y1 + 1, R1Step, x1)] +\na11 * R1[mad24(3*rows + y1 + 1, R1Step, x1 + 1)];\nr6 = a00 * R1[mad24(4*rows + y1, R1Step, x1)] +\na01 * R1[mad24(4*rows + y1, R1Step, x1 + 1)] +\na10 * R1[mad24(4*rows + y1 + 1, R1Step, x1)] +\na11 * R1[mad24(4*rows + y1 + 1, R1Step, x1 + 1)];\nr4 = (R0[mad24(2*rows + y, R0Step, x)] + r4) * 0.5f;\nr5 = (R0[mad24(3*rows + y, R0Step, x)] + r5) * 0.5f;\nr6 = (R0[mad24(4*rows + y, R0Step, x)] + r6) * 0.25f;\n}\nelse\n{\nr2 = r3 = 0.f;\nr4 = R0[mad24(2*rows + y, R0Step, x)];\nr5 = R0[mad24(3*rows + y, R0Step, x)];\nr6 = R0[mad24(4*rows + y, R0Step, x)] * 0.5f;\n}\nr2 = (R0[mad24(y, R0Step, x)] - r2) * 0.5f;\nr3 = (R0[mad24(rows + y, R0Step, x)] - r3) * 0.5f;\nr2 += r4*dy + r6*dx;\nr3 += r6*dy + r5*dx;\nfloat scale =\nc_border[min(x, BORDER_SIZE)] *\nc_border[min(y, BORDER_SIZE)] *\nc_border[min(cols - x - 1, BORDER_SIZE)] *\nc_border[min(rows - y - 1, BORDER_SIZE)];\nr2 *= scale;\nr3 *= scale;\nr4 *= scale;\nr5 *= scale;\nr6 *= scale;\nM[mad24(y, mStep, x)] = r4*r4 + r6*r6;\nM[mad24(rows + y, mStep, x)] = (r4 + r5)*r6;\nM[mad24(2*rows + y, mStep, x)] = r5*r5 + r6*r6;\nM[mad24(3*rows + y, mStep, x)] = r4*r2 + r6*r3;\nM[mad24(4*rows + y, mStep, x)] = r6*r2 + r5*r3;\n}\n}\n__kernel void boxFilter5(__global const float * src, int srcStep,\n__global float * dst, int dstStep,\nconst int rows, const  int cols,\nconst int ksizeHalf,\n__local float * smem)\n{\nconst int y = get_global_id(1);\nconst int x = get_global_id(0);\nconst float boxAreaInv = 1.f / ((1 + 2*ksizeHalf) * (1 + 2*ksizeHalf));\nconst int smw = bdx + 2*ksizeHalf;\n__local float *row = smem + 5 * ty * smw;\nif (y < rows)\n{\nfor (int i = tx; i < bdx + 2*ksizeHalf; i += bdx)\n{\nint xExt = (int)(bx * bdx) + i - ksizeHalf;\nxExt = min(max(xExt, 0), cols - 1);\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nrow[k*smw + i] = src[mad24(k*rows + y, srcStep, xExt)];\nfor (int j = 1; j <= ksizeHalf; ++j)\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nrow[k*smw + i] +=\nsrc[mad24(k*rows + max(y - j, 0), srcStep, xExt)] +\nsrc[mad24(k*rows + min(y + j, rows - 1), srcStep, xExt)];\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (y < rows && y >= 0 && x < cols && x >= 0)\n{\nrow += tx + ksizeHalf;\nfloat res[5];\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nres[k] = row[k*smw];\nfor (int i = 1; i <= ksizeHalf; ++i)\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\nres[k] += row[k*smw - i] + row[k*smw + i];\n#pragma unroll\nfor (int k = 0; k < 5; ++k)\ndst[mad24(k*rows + y, dstStep, x)] = res[k] * boxAreaInv;\n}\n}\n__kernel void updateFlow(__global const float * M, int mStep,\n__global float * flowx, int xStep,\n__global float * flowy, int yStep,\nconst int rows, const int cols)\n{\nconst int y = get_global_id(1);\nconst int x = get_global_id(0);\nif (y < rows && y >= 0 && x < cols && x >= 0)\n{\nfloat g11 = M[mad24(y, mStep, x)];\nfloat g12 = M[mad24(rows + y, mStep, x)];\nfloat g22 = M[mad24(2*rows + y, mStep, x)];\nfloat h1 =  M[mad24(3*rows + y, mStep, x)];\nfloat h2 =  M[mad24(4*rows + y, mStep, x)];\nfloat detInv = 1.f / (g11*g22 - g12*g12 + 1e-3f);\nflowx[mad24(y, xStep, x)] = (g11*h2 - g12*h1) * detInv;\nflowy[mad24(y, yStep, x)] = (g22*h1 - g12*h2) * detInv;\n}\n}\n", "__kernel void centeredGradientKernel(__global const float* src_ptr, int src_col, int src_row, int src_step,\n__global float* dx, __global float* dy, int d_step)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif((x < src_col)&&(y < src_row))\n{\nint src_x1 = (x + 1) < (src_col -1)? (x + 1) : (src_col - 1);\nint src_x2 = (x - 1) > 0 ? (x -1) : 0;\ndx[y * d_step+ x] = 0.5f * (src_ptr[y * src_step + src_x1] - src_ptr[y * src_step+ src_x2]);\nint src_y1 = (y+1) < (src_row - 1) ? (y + 1) : (src_row - 1);\nint src_y2 = (y - 1) > 0 ? (y - 1) : 0;\ndy[y * d_step+ x] = 0.5f * (src_ptr[src_y1 * src_step + x] - src_ptr[src_y2 * src_step+ x]);\n}\n}\ninline float bicubicCoeff(float x_)\n{\nfloat x = fabs(x_);\nif (x <= 1.0f)\nreturn x * x * (1.5f * x - 2.5f) + 1.0f;\nelse if (x < 2.0f)\nreturn x * (x * (-0.5f * x + 2.5f) - 4.0f) + 2.0f;\nelse\nreturn 0.0f;\n}\n__kernel void warpBackwardKernel(__global const float* I0, int I0_step, int I0_col, int I0_row,\nimage2d_t tex_I1, image2d_t tex_I1x, image2d_t tex_I1y,\n__global const float* u1, int u1_step,\n__global const float* u2,\n__global float* I1w,\n__global float* I1wx, \n__global float* I1wy, \n__global float* grad, \n__global float* rho,\nint I1w_step,\nint u2_step,\nint u1_offset_x,\nint u1_offset_y,\nint u2_offset_x,\nint u2_offset_y)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < I0_col&&y < I0_row)\n{\nfloat u1Val = u1[(y + u1_offset_y) * u1_step + x + u1_offset_x];\nfloat u2Val = u2[(y + u2_offset_y) * u2_step + x + u2_offset_x];\nfloat wx = x + u1Val;\nfloat wy = y + u2Val;\nint xmin = ceil(wx - 2.0f);\nint xmax = floor(wx + 2.0f);\nint ymin = ceil(wy - 2.0f);\nint ymax = floor(wy + 2.0f);\nfloat sum  = 0.0f;\nfloat sumx = 0.0f;\nfloat sumy = 0.0f;\nfloat wsum = 0.0f;\nsampler_t sampleri = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;\nfor (int cy = ymin; cy <= ymax; ++cy)\n{\nfor (int cx = xmin; cx <= xmax; ++cx)\n{\nfloat w = bicubicCoeff(wx - cx) * bicubicCoeff(wy - cy);\nint2 cood = (int2)(cx, cy);\nsum += w * read_imagef(tex_I1, sampleri, cood).x;\nsumx += w * read_imagef(tex_I1x, sampleri, cood).x;\nsumy += w * read_imagef(tex_I1y, sampleri, cood).x;\nwsum += w;\n}\n}\nfloat coeff = 1.0f / wsum;\nfloat I1wVal  = sum  * coeff;\nfloat I1wxVal = sumx * coeff;\nfloat I1wyVal = sumy * coeff;\nI1w[y * I1w_step + x]  = I1wVal;\nI1wx[y * I1w_step + x] = I1wxVal;\nI1wy[y * I1w_step + x] = I1wyVal;\nfloat Ix2 = I1wxVal * I1wxVal;\nfloat Iy2 = I1wyVal * I1wyVal;\ngrad[y * I1w_step + x] = Ix2 + Iy2;\nfloat I0Val = I0[y * I0_step + x];\nrho[y * I1w_step + x] = I1wVal - I1wxVal * u1Val - I1wyVal * u2Val - I0Val;\n}\n}\ninline float readImage(__global float *image,  int x,  int y,  int rows,  int cols, int elemCntPerRow)\n{\nint i0 = clamp(x, 0, cols - 1);\nint j0 = clamp(y, 0, rows - 1);\nreturn image[j0 * elemCntPerRow + i0];\n}\n__kernel void warpBackwardKernelNoImage2d(__global const float* I0, int I0_step, int I0_col, int I0_row,\n__global const float* tex_I1, __global const float* tex_I1x, __global const float* tex_I1y,\n__global const float* u1, int u1_step,\n__global const float* u2,\n__global float* I1w,\n__global float* I1wx, \n__global float* I1wy, \n__global float* grad, \n__global float* rho,\nint I1w_step,\nint u2_step,\nint I1_step,\nint I1x_step)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < I0_col&&y < I0_row)\n{\nfloat u1Val = u1[y * u1_step + x];\nfloat u2Val = u2[y * u2_step + x];\nfloat wx = x + u1Val;\nfloat wy = y + u2Val;\nint xmin = ceil(wx - 2.0f);\nint xmax = floor(wx + 2.0f);\nint ymin = ceil(wy - 2.0f);\nint ymax = floor(wy + 2.0f);\nfloat sum  = 0.0f;\nfloat sumx = 0.0f;\nfloat sumy = 0.0f;\nfloat wsum = 0.0f;\nfor (int cy = ymin; cy <= ymax; ++cy)\n{\nfor (int cx = xmin; cx <= xmax; ++cx)\n{\nfloat w = bicubicCoeff(wx - cx) * bicubicCoeff(wy - cy);\nint2 cood = (int2)(cx, cy);\nsum += w * readImage(tex_I1, cood.x, cood.y, I0_col, I0_row, I1_step);\nsumx += w * readImage(tex_I1x, cood.x, cood.y, I0_col, I0_row, I1x_step);\nsumy += w * readImage(tex_I1y, cood.x, cood.y, I0_col, I0_row, I1x_step);\nwsum += w;\n}\n}\nfloat coeff = 1.0f / wsum;\nfloat I1wVal  = sum  * coeff;\nfloat I1wxVal = sumx * coeff;\nfloat I1wyVal = sumy * coeff;\nI1w[y * I1w_step + x]  = I1wVal;\nI1wx[y * I1w_step + x] = I1wxVal;\nI1wy[y * I1w_step + x] = I1wyVal;\nfloat Ix2 = I1wxVal * I1wxVal;\nfloat Iy2 = I1wyVal * I1wyVal;\ngrad[y * I1w_step + x] = Ix2 + Iy2;\nfloat I0Val = I0[y * I0_step + x];\nrho[y * I1w_step + x] = I1wVal - I1wxVal * u1Val - I1wyVal * u2Val - I0Val;\n}\n}\n__kernel void estimateDualVariablesKernel(__global const float* u1, int u1_col, int u1_row, int u1_step,\n__global const float* u2,\n__global float* p11, int p11_step,\n__global float* p12,\n__global float* p21,\n__global float* p22,\nfloat taut,\nint u2_step,\nint u1_offset_x,\nint u1_offset_y,\nint u2_offset_x,\nint u2_offset_y)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < u1_col && y < u1_row)\n{\nint src_x1 = (x + 1) < (u1_col - 1) ? (x + 1) : (u1_col - 1);\nfloat u1x = u1[(y + u1_offset_y) * u1_step + src_x1 + u1_offset_x] - u1[(y + u1_offset_y) * u1_step + x + u1_offset_x];\nint src_y1 = (y + 1) < (u1_row - 1) ? (y + 1) : (u1_row - 1);\nfloat u1y = u1[(src_y1 + u1_offset_y) * u1_step + x + u1_offset_x] - u1[(y + u1_offset_y) * u1_step + x + u1_offset_x];\nint src_x2 = (x + 1) < (u1_col - 1) ? (x + 1) : (u1_col - 1);\nfloat u2x = u2[(y + u2_offset_y) * u2_step + src_x2 + u2_offset_x] - u2[(y + u2_offset_y) * u2_step + x + u2_offset_x];\nint src_y2 = (y + 1) <  (u1_row - 1) ? (y + 1) : (u1_row - 1);\nfloat u2y = u2[(src_y2 + u2_offset_y) * u2_step + x + u2_offset_x] - u2[(y + u2_offset_y) * u2_step + x + u2_offset_x];\nfloat g1 = hypot(u1x, u1y);\nfloat g2 = hypot(u2x, u2y);\nfloat ng1 = 1.0f + taut * g1;\nfloat ng2 = 1.0f + taut * g2;\np11[y * p11_step + x] = (p11[y * p11_step + x] + taut * u1x) / ng1;\np12[y * p11_step + x] = (p12[y * p11_step + x] + taut * u1y) / ng1;\np21[y * p11_step + x] = (p21[y * p11_step + x] + taut * u2x) / ng2;\np22[y * p11_step + x] = (p22[y * p11_step + x] + taut * u2y) / ng2;\n}\n}\ninline float divergence(__global const float* v1, __global const float* v2, int y, int x, int v1_step, int v2_step)\n{\nif (x > 0 && y > 0)\n{\nfloat v1x = v1[y * v1_step + x] - v1[y * v1_step + x - 1];\nfloat v2y = v2[y * v2_step + x] - v2[(y - 1) * v2_step + x];\nreturn v1x + v2y;\n}\nelse\n{\nif (y > 0)\nreturn v1[y * v1_step + 0] + v2[y * v2_step + 0] - v2[(y - 1) * v2_step + 0];\nelse\n{\nif (x > 0)\nreturn v1[0 * v1_step + x] - v1[0 * v1_step + x - 1] + v2[0 * v2_step + x];\nelse\nreturn v1[0 * v1_step + 0] + v2[0 * v2_step + 0];\n}\n}\n}\n__kernel void estimateUKernel(__global const float* I1wx, int I1wx_col, int I1wx_row, int I1wx_step,\n__global const float* I1wy, \n__global const float* grad, \n__global const float* rho_c, \n__global const float* p11, \n__global const float* p12, \n__global const float* p21, \n__global const float* p22, \n__global float* u1, int u1_step,\n__global float* u2,\n__global float* error, float l_t, float theta, int u2_step,\nint u1_offset_x,\nint u1_offset_y,\nint u2_offset_x,\nint u2_offset_y,\nchar calc_error)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < I1wx_col && y < I1wx_row)\n{\nfloat I1wxVal = I1wx[y * I1wx_step + x];\nfloat I1wyVal = I1wy[y * I1wx_step + x];\nfloat gradVal = grad[y * I1wx_step + x];\nfloat u1OldVal = u1[(y + u1_offset_y) * u1_step + x + u1_offset_x];\nfloat u2OldVal = u2[(y + u2_offset_y) * u2_step + x + u2_offset_x];\nfloat rho = rho_c[y * I1wx_step + x] + (I1wxVal * u1OldVal + I1wyVal * u2OldVal);\nfloat d1 = 0.0f;\nfloat d2 = 0.0f;\nif (rho < -l_t * gradVal)\n{\nd1 = l_t * I1wxVal;\nd2 = l_t * I1wyVal;\n}\nelse if (rho > l_t * gradVal)\n{\nd1 = -l_t * I1wxVal;\nd2 = -l_t * I1wyVal;\n}\nelse if (gradVal > 1.192092896e-07f)\n{\nfloat fi = -rho / gradVal;\nd1 = fi * I1wxVal;\nd2 = fi * I1wyVal;\n}\nfloat v1 = u1OldVal + d1;\nfloat v2 = u2OldVal + d2;\nfloat div_p1 = divergence(p11, p12, y, x, I1wx_step, I1wx_step);\nfloat div_p2 = divergence(p21, p22, y, x, I1wx_step, I1wx_step);\nfloat u1NewVal = v1 + theta * div_p1;\nfloat u2NewVal = v2 + theta * div_p2;\nu1[(y + u1_offset_y) * u1_step + x + u1_offset_x] = u1NewVal;\nu2[(y + u2_offset_y) * u2_step + x + u2_offset_x] = u2NewVal;\nif(calc_error)\n{\nfloat n1 = (u1OldVal - u1NewVal) * (u1OldVal - u1NewVal);\nfloat n2 = (u2OldVal - u2NewVal) * (u2OldVal - u2NewVal);\nerror[y * I1wx_step + x] = n1 + n2;\n}\n}\n}\n", "#define GRIDSIZE    3\n#define LSx 8\n#define LSy 8\n#define LM_W (LSx*GRIDSIZE+2)\n#define LM_H (LSy*GRIDSIZE+2)\n#define BUFFER  (LSx*LSy)\n#define BUFFER2 BUFFER>>1\n#ifndef WAVE_SIZE\n#define WAVE_SIZE 1\n#endif\n#ifdef CPU\ninline void reduce3(float val1, float val2, float val3,  __local float* smem1,  __local float* smem2,  __local float* smem3, int tid)\n{\nsmem1[tid] = val1;\nsmem2[tid] = val2;\nsmem3[tid] = val3;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor(int i = BUFFER2; i > 0; i >>= 1)\n{\nif(tid < i)\n{\nsmem1[tid] += smem1[tid + i];\nsmem2[tid] += smem2[tid + i];\nsmem3[tid] += smem3[tid + i];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\ninline void reduce2(float val1, float val2, volatile __local float* smem1, volatile __local float* smem2, int tid)\n{\nsmem1[tid] = val1;\nsmem2[tid] = val2;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor(int i = BUFFER2; i > 0; i >>= 1)\n{\nif(tid < i)\n{\nsmem1[tid] += smem1[tid + i];\nsmem2[tid] += smem2[tid + i];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\ninline void reduce1(float val1, volatile __local float* smem1, int tid)\n{\nsmem1[tid] = val1;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfor(int i = BUFFER2; i > 0; i >>= 1)\n{\nif(tid < i)\n{\nsmem1[tid] += smem1[tid + i];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n}\n#else\ninline void reduce3(float val1, float val2, float val3,\n__local volatile float* smem1, __local volatile float* smem2, __local volatile float* smem3, int tid)\n{\nsmem1[tid] = val1;\nsmem2[tid] = val2;\nsmem3[tid] = val3;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 32)\n{\nsmem1[tid] += smem1[tid + 32];\nsmem2[tid] += smem2[tid + 32];\nsmem3[tid] += smem3[tid + 32];\n#if WAVE_SIZE < 32\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16)\n{\n#endif\nsmem1[tid] += smem1[tid + 16];\nsmem2[tid] += smem2[tid + 16];\nsmem3[tid] += smem3[tid + 16];\n#if WAVE_SIZE <16\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid<1)\n{\n#endif\nlocal float8* m1 = (local float8*)smem1;\nlocal float8* m2 = (local float8*)smem2;\nlocal float8* m3 = (local float8*)smem3;\nfloat8 t1 = m1[0]+m1[1];\nfloat8 t2 = m2[0]+m2[1];\nfloat8 t3 = m3[0]+m3[1];\nfloat4 t14 = t1.lo + t1.hi;\nfloat4 t24 = t2.lo + t2.hi;\nfloat4 t34 = t3.lo + t3.hi;\nsmem1[0] = t14.x+t14.y+t14.z+t14.w;\nsmem2[0] = t24.x+t24.y+t24.z+t24.w;\nsmem3[0] = t34.x+t34.y+t34.z+t34.w;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\ninline void reduce2(float val1, float val2, __local volatile float* smem1, __local volatile float* smem2, int tid)\n{\nsmem1[tid] = val1;\nsmem2[tid] = val2;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 32)\n{\nsmem1[tid] += smem1[tid + 32];\nsmem2[tid] += smem2[tid + 32];\n#if WAVE_SIZE < 32\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16)\n{\n#endif\nsmem1[tid] += smem1[tid + 16];\nsmem2[tid] += smem2[tid + 16];\n#if WAVE_SIZE <16\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid<1)\n{\n#endif\nlocal float8* m1 = (local float8*)smem1;\nlocal float8* m2 = (local float8*)smem2;\nfloat8 t1 = m1[0]+m1[1];\nfloat8 t2 = m2[0]+m2[1];\nfloat4 t14 = t1.lo + t1.hi;\nfloat4 t24 = t2.lo + t2.hi;\nsmem1[0] = t14.x+t14.y+t14.z+t14.w;\nsmem2[0] = t24.x+t24.y+t24.z+t24.w;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\ninline void reduce1(float val1, __local volatile float* smem1, int tid)\n{\nsmem1[tid] = val1;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 32)\n{\nsmem1[tid] += smem1[tid + 32];\n#if WAVE_SIZE < 32\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16)\n{\n#endif\nsmem1[tid] += smem1[tid + 16];\n#if WAVE_SIZE <16\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid<1)\n{\n#endif\nlocal float8* m1 = (local float8*)smem1;\nfloat8 t1 = m1[0]+m1[1];\nfloat4 t14 = t1.lo + t1.hi;\nsmem1[0] = t14.x+t14.y+t14.z+t14.w;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#endif\n#define SCALE (1.0f / (1 << 20))\n#define  THRESHOLD  0.01f\n__constant sampler_t sampler    = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_LINEAR;\n#define VAL(_y,_x,_yy,_xx)    (IPatchLocal[(yid+((_y)*LSy)+1+(_yy))*LM_W+(xid+((_x)*LSx)+1+(_xx))])\ninline void SetPatch(local float* IPatchLocal, int TileY, int TileX,\nfloat* Pch, float* Dx, float* Dy,\nfloat* A11, float* A12, float* A22, float w)\n{\nunsigned int xid=get_local_id(0);\nunsigned int yid=get_local_id(1);\n*Pch = VAL(TileY,TileX,0,0);\nfloat dIdx = (3.0f*VAL(TileY,TileX,-1,1)+10.0f*VAL(TileY,TileX,0,1)+3.0f*VAL(TileY,TileX,+1,1))-(3.0f*VAL(TileY,TileX,-1,-1)+10.0f*VAL(TileY,TileX,0,-1)+3.0f*VAL(TileY,TileX,+1,-1));\nfloat dIdy = (3.0f*VAL(TileY,TileX,1,-1)+10.0f*VAL(TileY,TileX,1,0)+3.0f*VAL(TileY,TileX,1,+1))-(3.0f*VAL(TileY,TileX,-1,-1)+10.0f*VAL(TileY,TileX,-1,0)+3.0f*VAL(TileY,TileX,-1,+1));\ndIdx *= w;\ndIdy *= w;\n*Dx = dIdx;\n*Dy = dIdy;\n*A11 += dIdx * dIdx;\n*A12 += dIdx * dIdy;\n*A22 += dIdy * dIdy;\n}\n#undef VAL\ninline void GetPatch(image2d_t J, float x, float y,\nfloat* Pch, float* Dx, float* Dy,\nfloat* b1, float* b2)\n{\nfloat J_val = read_imagef(J, sampler, (float2)(x, y)).x;\nfloat diff = (J_val - *Pch) * 32.0f;\n*b1 += diff**Dx;\n*b2 += diff**Dy;\n}\ninline void GetError(image2d_t J, const float x, const float y, const float* Pch, float* errval)\n{\nfloat diff = read_imagef(J, sampler, (float2)(x,y)).x-*Pch;\n*errval += fabs(diff);\n}\n#define READI(_y,_x)    IPatchLocal[(yid+((_y)*LSy))*LM_W+(xid+((_x)*LSx))] = read_imagef(I, sampler, (float2)(Point.x + xid+(_x)*LSx + 0.5f-1, Point.y + yid+(_y)*LSy+ 0.5f-1)).x;\nvoid ReadPatchIToLocalMem(image2d_t I, float2 Point, local float* IPatchLocal)\n{\nunsigned int xid=get_local_id(0);\nunsigned int yid=get_local_id(1);\nREADI(0,0);READI(0,1);READI(0,2);\nREADI(1,0);READI(1,1);READI(1,2);\nREADI(2,0);READI(2,1);READI(2,2);\nif(xid<2)\n{\nREADI(0,3);\nREADI(1,3);\nREADI(2,3);\n}\nif(yid<2)\n{\nREADI(3,0);READI(3,1);READI(3,2);\n}\nif(yid<2 && xid<2)\n{\nREADI(3,3);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#undef READI\n__attribute__((reqd_work_group_size(LSx, LSy, 1)))\n__kernel void lkSparse(image2d_t I, image2d_t J,\n__global const float2* prevPts, __global float2* nextPts, __global uchar* status, __global float* err,\nconst int level, const int rows, const int cols, int PATCH_X, int PATCH_Y, int c_winSize_x, int c_winSize_y, int c_iters, char calcErr)\n{\n__local float smem1[BUFFER];\n__local float smem2[BUFFER];\n__local float smem3[BUFFER];\nunsigned int xid=get_local_id(0);\nunsigned int yid=get_local_id(1);\nunsigned int gid=get_group_id(0);\nunsigned int xsize=get_local_size(0);\nunsigned int ysize=get_local_size(1);\nint xBase, yBase, k;\nfloat wx = ((xid+2*xsize)<c_winSize_x)?1:0;\nfloat wy = ((yid+2*ysize)<c_winSize_y)?1:0;\nfloat2 c_halfWin = (float2)((c_winSize_x - 1)>>1, (c_winSize_y - 1)>>1);\nconst int tid = mad24(yid, xsize, xid);\nfloat2 prevPt = prevPts[gid] / (float2)(1 << level);\nif (prevPt.x < 0 || prevPt.x >= cols || prevPt.y < 0 || prevPt.y >= rows)\n{\nif (tid == 0 && level == 0)\n{\nstatus[gid] = 0;\n}\nreturn;\n}\nprevPt -= c_halfWin;\nfloat A11 = 0;\nfloat A12 = 0;\nfloat A22 = 0;\nfloat I_patch[GRIDSIZE][GRIDSIZE];\nfloat dIdx_patch[GRIDSIZE][GRIDSIZE];\nfloat dIdy_patch[GRIDSIZE][GRIDSIZE];\nlocal float IPatchLocal[LM_W*LM_H];\nReadPatchIToLocalMem(I,prevPt,IPatchLocal);\n{\nSetPatch(IPatchLocal, 0, 0,\n&I_patch[0][0], &dIdx_patch[0][0], &dIdy_patch[0][0],\n&A11, &A12, &A22,1);\nSetPatch(IPatchLocal, 0, 1,\n&I_patch[0][1], &dIdx_patch[0][1], &dIdy_patch[0][1],\n&A11, &A12, &A22,1);\nSetPatch(IPatchLocal, 0, 2,\n&I_patch[0][2], &dIdx_patch[0][2], &dIdy_patch[0][2],\n&A11, &A12, &A22,wx);\n}\n{\nSetPatch(IPatchLocal, 1, 0,\n&I_patch[1][0], &dIdx_patch[1][0], &dIdy_patch[1][0],\n&A11, &A12, &A22,1);\nSetPatch(IPatchLocal, 1,1,\n&I_patch[1][1], &dIdx_patch[1][1], &dIdy_patch[1][1],\n&A11, &A12, &A22,1);\nSetPatch(IPatchLocal, 1,2,\n&I_patch[1][2], &dIdx_patch[1][2], &dIdy_patch[1][2],\n&A11, &A12, &A22,wx);\n}\n{\nSetPatch(IPatchLocal, 2,0,\n&I_patch[2][0], &dIdx_patch[2][0], &dIdy_patch[2][0],\n&A11, &A12, &A22,wy);\nSetPatch(IPatchLocal, 2,1,\n&I_patch[2][1], &dIdx_patch[2][1], &dIdy_patch[2][1],\n&A11, &A12, &A22,wy);\nSetPatch(IPatchLocal, 2,2,\n&I_patch[2][2], &dIdx_patch[2][2], &dIdy_patch[2][2],\n&A11, &A12, &A22,wx*wy);\n}\nreduce3(A11, A12, A22, smem1, smem2, smem3, tid);\nA11 = smem1[0];\nA12 = smem2[0];\nA22 = smem3[0];\nbarrier(CLK_LOCAL_MEM_FENCE);\nfloat D = A11 * A22 - A12 * A12;\nif (D < 1.192092896e-07f)\n{\nif (tid == 0 && level == 0)\nstatus[gid] = 0;\nreturn;\n}\nA11 /= D;\nA12 /= D;\nA22 /= D;\nprevPt = nextPts[gid] * 2.0f - c_halfWin;\nfor (k = 0; k < c_iters; ++k)\n{\nif (prevPt.x < -c_halfWin.x || prevPt.x >= cols || prevPt.y < -c_halfWin.y || prevPt.y >= rows)\n{\nif (tid == 0 && level == 0)\nstatus[gid] = 0;\nbreak;\n}\nfloat b1 = 0;\nfloat b2 = 0;\nyBase=yid;\n{\nxBase=xid;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][0], &dIdx_patch[0][0], &dIdy_patch[0][0],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][1], &dIdx_patch[0][1], &dIdy_patch[0][1],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][2], &dIdx_patch[0][2], &dIdy_patch[0][2],\n&b1, &b2);\n}\nyBase+=ysize;\n{\nxBase=xid;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][0], &dIdx_patch[1][0], &dIdy_patch[1][0],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][1], &dIdx_patch[1][1], &dIdy_patch[1][1],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][2], &dIdx_patch[1][2], &dIdy_patch[1][2],\n&b1, &b2);\n}\nyBase+=ysize;\n{\nxBase=xid;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][0], &dIdx_patch[2][0], &dIdy_patch[2][0],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][1], &dIdx_patch[2][1], &dIdy_patch[2][1],\n&b1, &b2);\nxBase+=xsize;\nGetPatch(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][2], &dIdx_patch[2][2], &dIdy_patch[2][2],\n&b1, &b2);\n}\nreduce2(b1, b2, smem1, smem2, tid);\nb1 = smem1[0];\nb2 = smem2[0];\nbarrier(CLK_LOCAL_MEM_FENCE);\nfloat2 delta;\ndelta.x = A12 * b2 - A22 * b1;\ndelta.y = A12 * b1 - A11 * b2;\nprevPt += delta;\nif (fabs(delta.x) < THRESHOLD && fabs(delta.y) < THRESHOLD)\nbreak;\n}\nD = 0.0f;\nif (calcErr)\n{\nyBase=yid;\n{\nxBase=xid;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][0], &D);\nxBase+=xsize;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][1], &D);\nxBase+=xsize;\nif(xBase<c_winSize_x)\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[0][2], &D);\n}\nyBase+=ysize;\n{\nxBase=xid;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][0], &D);\nxBase+=xsize;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][1], &D);\nxBase+=xsize;\nif(xBase<c_winSize_x)\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[1][2], &D);\n}\nyBase+=ysize;\nif(yBase<c_winSize_y)\n{\nxBase=xid;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][0], &D);\nxBase+=xsize;\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][1], &D);\nxBase+=xsize;\nif(xBase<c_winSize_x)\nGetError(J, prevPt.x + xBase + 0.5f, prevPt.y + yBase + 0.5f,\n&I_patch[2][2], &D);\n}\nreduce1(D, smem1, tid);\n}\nif (tid == 0)\n{\nprevPt += c_halfWin;\nnextPts[gid] = prevPt;\nif (calcErr)\nerr[gid] = smem1[0] / (float)(c_winSize_x * c_winSize_y);\n}\n}\n", "b7099fcbc60bd5528dacc491eadd88c1", "a9d306a49b405703820fae23312ebd28", "529300e6242f574f83d11a089cc120c0", "b6e3850899862b7f0ab67cb32f1d52e9", "/builds/master_pack-android/opencv/modules/imgcodecs/src/loadsave.cpp", "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", "/builds/master_pack-android/opencv/modules/imgcodecs/src/utils.cpp", "Source image must have 1, 3 or 4 channels", "Destination image must have 1 or 3 channels", "Unsupported combination of input/output formats", "/builds/master_pack-android/opencv/modules/imgcodecs/src/grfmt_base.cpp", "/builds/master_pack-android/opencv/modules/imgcodecs/src/grfmt_hdr.cpp", "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", "JPEG 2000 LOADER ERROR: cannot convert colorspace\n", "JPEG 2000 LOADER ERROR: unable to create colorspace\n", "JPEG2000 LOADER ERROR: colorspace conversion failed\n", "/builds/master_pack-android/opencv/modules/imgcodecs/src/grfmt_png.cpp", "PNG input buffer is incomplete", "/builds/master_pack-android/opencv/modules/imgcodecs/src/bitstrm.cpp", "/builds/master_pack-android/opencv/modules/imgcodecs/src/rgbe.cpp", "missing blank line after FORMAT specifier", "unable to allocate buffer space", "/builds/master_pack-android/opencv/modules/videoio/src/cap_mjpeg_encoder.cpp", "Invalid combination of specified video colorspace and the input image colorspace", "Unexpected end of file while searching for %s list\n", "Unexpected element. Expected: %s. Got: %s.\n", "Unexpected list type. Expected: %s. Got: %s.\n", "Unexpected end of file while searching for %s chunk\n", "More than one video stream found within AVI/AVIX list. Stream %c%cdc would be ignored\n", "Frame offset points outside movi section.\n", "Failed to parse avi: index was not found\n", "/builds/master_pack-android/opencv/modules/highgui/src/window.cpp", "The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Carbon support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script", "/builds/master_pack-android/opencv/modules/objdetect/src/cascadedetect.cpp", "/builds/master_pack-android/opencv/modules/objdetect/src/cascadedetect.hpp", "sqsum.u == u && sqsum.size() == s.szi && sqsum.type()==CV_32S", "-D LOCAL_SIZE_X=%d -D LOCAL_SIZE_Y=%d -D SUM_BUF_SIZE=%d -D SUM_BUF_STEP=%d -D NODE_COUNT=%d -D SPLIT_STAGE=%d -D N_STAGES=%d -D MAX_FACES=%d -D HAAR", "-D LOCAL_SIZE_X=%d -D LOCAL_SIZE_Y=%d -D NODE_COUNT=%d -D SPLIT_STAGE=%d -D N_STAGES=%d -D MAX_FACES=%d -D HAAR", "-D LOCAL_SIZE_X=%d -D LOCAL_SIZE_Y=%d -D SUM_BUF_SIZE=%d -D SUM_BUF_STEP=%d -D SPLIT_STAGE=%d -D N_STAGES=%d -D MAX_FACES=%d -D LBP", "-D LOCAL_SIZE_X=%d -D LOCAL_SIZE_Y=%d -D SPLIT_STAGE=%d -D N_STAGES=%d -D MAX_FACES=%d -D LBP", "/builds/master_pack-android/opencv/modules/core/include/opencv2/core/operations.hpp", "/builds/master_pack-android/opencv/modules/objdetect/src/detection_based_tracker.cpp", "\n %s: ERROR: OpenCV Exception caught: \n'%s'\n\n", "\n %s: ERROR: Exception caught: \n'%s'\n\n", "\n %s: ERROR: UNKNOWN Exception caught\n\n", "DetectionBasedTracker: workcycleObjectDetectorFunction: ERROR concerning pointer, received as the function parameter", "/builds/master_pack-android/opencv/modules/objdetect/src/haar.cpp", "header of the stage classifier #%d is invalid (has null pointers or non-positive classfier count)", "rectangle #%d of the classifier #%d of the stage classifier #%d is not inside the reference (original) cascade window", "Trees node is not a valid sequence. (stage %d)", "Tree node is not a valid sequence. (stage %d, tree %d)", "Tree node %d is not a valid map. (stage %d, tree %d)", "Feature node is not a valid map. (stage %d, tree %d, node %d)", "Rects node is not a valid sequence. (stage %d, tree %d, node %d)", "Rect %d is not a valid sequence. (stage %d, tree %d, node %d)", "x coordinate must be non-negative integer. (stage %d, tree %d, node %d, rect %d)", "y coordinate must be non-negative integer. (stage %d, tree %d, node %d, rect %d)", "width must be positive integer and (x + width) must not exceed window width. (stage %d, tree %d, node %d, rect %d)", "height must be positive integer and (y + height) must not exceed window height. (stage %d, tree %d, node %d, rect %d)", "weight must be real number. (stage %d, tree %d, node %d, rect %d)", "tilted must be 0 or 1. (stage %d, tree %d, node %d)", "threshold must be real number. (stage %d, tree %d, node %d)", "left node must be valid node number. (stage %d, tree %d, node %d)", "left node or left value must be specified. (stage %d, tree %d, node %d)", "left value must be real number. (stage %d, tree %d, node %d)", "Tree structure is broken: too many values. (stage %d, tree %d, node %d)", "right node must be valid node number. (stage %d, tree %d, node %d)", "right node or right value must be specified. (stage %d, tree %d, node %d)", "right value must be real number. (stage %d, tree %d, node %d)", "Tree structure is broken: too few values. (stage %d, tree %d)", "stage threshold must be real number. (stage %d)", "parent must be integer number. (stage %d)", "next must be integer number. (stage %d)", "Hidden cascade has not been created.\nUse cvSetImagesForHaarClassifierCascade", "Only (32s, 64f, 32s) combination of (sum,sqsum,tilted_sum) formats is allowed", "%s%s%d/AdaBoostCARTHaarClassifier.txt", "%s/%d/AdaBoostCARTHaarClassifier.txt", "blockSize.width % cellSize.width == 0 && blockSize.height % cellSize.height == 0", "/builds/master_pack-android/opencv/modules/objdetect/src/hog.cpp", "(winSize.width - blockSize.width) % blockStride.width == 0 && (winSize.height - blockSize.height) % blockStride.height == 0", "pt.x % cacheStride.width == 0 && pt.y % cacheStride.height == 0", "pt0.x % cacheStride.width == 0 && pt0.y % cacheStride.height == 0", "#ifdef HAAR\ntypedef struct __attribute__((aligned(4))) OptHaarFeature\n{\nint4 ofs[3] __attribute__((aligned (4)));\nfloat4 weight __attribute__((aligned (4)));\n}\nOptHaarFeature;\n#endif\n#ifdef LBP\ntypedef struct __attribute__((aligned(4))) OptLBPFeature\n{\nint16 ofs __attribute__((aligned (4)));\n}\nOptLBPFeature;\n#endif\ntypedef struct __attribute__((aligned(4))) Stump\n{\nfloat4 st __attribute__((aligned (4)));\n}\nStump;\ntypedef struct __attribute__((aligned(4))) Node\n{\nint4 n __attribute__((aligned (4)));\n}\nNode;\ntypedef struct __attribute__((aligned (4))) Stage\n{\nint first __attribute__((aligned (4)));\nint ntrees __attribute__((aligned (4)));\nfloat threshold __attribute__((aligned (4)));\n}\nStage;\ntypedef struct __attribute__((aligned (4))) ScaleData\n{\nfloat scale __attribute__((aligned (4)));\nint szi_width __attribute__((aligned (4)));\nint szi_height __attribute__((aligned (4)));\nint layer_ofs __attribute__((aligned (4)));\nint ystep __attribute__((aligned (4)));\n}\nScaleData;\n#ifndef SUM_BUF_SIZE\n#define SUM_BUF_SIZE 0\n#endif\n#ifndef NODE_COUNT\n#define NODE_COUNT 1\n#endif\n#ifdef HAAR\n__kernel __attribute__((reqd_work_group_size(LOCAL_SIZE_X,LOCAL_SIZE_Y,1)))\nvoid runHaarClassifier(\nint nscales, __global const ScaleData* scaleData,\n__global const int* sum,\nint _sumstep, int sumoffset,\n__global const OptHaarFeature* optfeatures,\n__global const Stage* stages,\n__global const Node* nodes,\n__global const float* leaves0,\nvolatile __global int* facepos,\nint4 normrect, int sqofs, int2 windowsize)\n{\nint lx = get_local_id(0);\nint ly = get_local_id(1);\nint groupIdx = get_group_id(0);\nint i, ngroups = get_global_size(0)/LOCAL_SIZE_X;\nint scaleIdx, tileIdx, stageIdx;\nint sumstep = (int)(_sumstep/sizeof(int));\nint4 nofs0 = (int4)(mad24(normrect.y, sumstep, normrect.x),\nmad24(normrect.y, sumstep, normrect.x + normrect.z),\nmad24(normrect.y + normrect.w, sumstep, normrect.x),\nmad24(normrect.y + normrect.w, sumstep, normrect.x + normrect.z));\nint normarea = normrect.z * normrect.w;\nfloat invarea = 1.f/normarea;\nint lidx = ly*LOCAL_SIZE_X + lx;\n#if SUM_BUF_SIZE > 0\nint4 nofs = (int4)(mad24(normrect.y, SUM_BUF_STEP, normrect.x),\nmad24(normrect.y, SUM_BUF_STEP, normrect.x + normrect.z),\nmad24(normrect.y + normrect.w, SUM_BUF_STEP, normrect.x),\nmad24(normrect.y + normrect.w, SUM_BUF_STEP, normrect.x + normrect.z));\n#else\nint4 nofs = nofs0;\n#endif\n#define LOCAL_SIZE (LOCAL_SIZE_X*LOCAL_SIZE_Y)\n__local int lstore[SUM_BUF_SIZE + LOCAL_SIZE*5/2+1];\n#if SUM_BUF_SIZE > 0\n__local int* ibuf = lstore;\n__local int* lcount = ibuf + SUM_BUF_SIZE;\n#else\n__local int* lcount = lstore;\n#endif\n__local float* lnf = (__local float*)(lcount + 1);\n__local float* lpartsum = lnf + LOCAL_SIZE;\n__local short* lbuf = (__local short*)(lpartsum + LOCAL_SIZE);\nfor( scaleIdx = nscales-1; scaleIdx >= 0; scaleIdx-- )\n{\n__global const ScaleData* s = scaleData + scaleIdx;\nint ystep = s->ystep;\nint2 worksize = (int2)(max(s->szi_width - windowsize.x, 0), max(s->szi_height - windowsize.y, 0));\nint2 ntiles = (int2)((worksize.x + LOCAL_SIZE_X-1)/LOCAL_SIZE_X,\n(worksize.y + LOCAL_SIZE_Y-1)/LOCAL_SIZE_Y);\nint totalTiles = ntiles.x*ntiles.y;\nfor( tileIdx = groupIdx; tileIdx < totalTiles; tileIdx += ngroups )\n{\nint ix0 = (tileIdx % ntiles.x)*LOCAL_SIZE_X;\nint iy0 = (tileIdx / ntiles.x)*LOCAL_SIZE_Y;\nint ix = lx, iy = ly;\n__global const int* psum0 = sum + mad24(iy0, sumstep, ix0) + s->layer_ofs;\n__global const int* psum1 = psum0 + mad24(iy, sumstep, ix);\nif( ix0 >= worksize.x || iy0 >= worksize.y )\ncontinue;\n#if SUM_BUF_SIZE > 0\nfor( i = lidx*4; i < SUM_BUF_SIZE; i += LOCAL_SIZE_X*LOCAL_SIZE_Y*4 )\n{\nint dy = i/SUM_BUF_STEP, dx = i - dy*SUM_BUF_STEP;\nvstore4(vload4(0, psum0 + mad24(dy, sumstep, dx)), 0, ibuf+i);\n}\n#endif\nif( lidx == 0 )\nlcount[0] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( ix0 + ix < worksize.x && iy0 + iy < worksize.y )\n{\n#if NODE_COUNT==1\n__global const Stump* stump = (__global const Stump*)nodes;\n#else\n__global const Node* node = nodes;\n__global const float* leaves = leaves0;\n#endif\n#if SUM_BUF_SIZE > 0\n__local const int* psum = ibuf + mad24(iy, SUM_BUF_STEP, ix);\n#else\n__global const int* psum = psum1;\n#endif\n__global const int* psqsum = (__global const int*)(psum1 + sqofs);\nfloat sval = (psum[nofs.x] - psum[nofs.y] - psum[nofs.z] + psum[nofs.w])*invarea;\nfloat sqval = (psqsum[nofs0.x] - psqsum[nofs0.y] - psqsum[nofs0.z] + psqsum[nofs0.w])*invarea;\nfloat nf = (float)normarea * sqrt(max(sqval - sval * sval, 0.f));\nnf = nf > 0 ? nf : 1.f;\nfor( stageIdx = 0; stageIdx < SPLIT_STAGE; stageIdx++ )\n{\nint ntrees = stages[stageIdx].ntrees;\nfloat s = 0.f;\n#if NODE_COUNT==1\nfor( i = 0; i < ntrees; i++ )\n{\nfloat4 st = stump[i].st;\n__global const OptHaarFeature* f = optfeatures + as_int(st.x);\nfloat4 weight = f->weight;\nint4 ofs = f->ofs[0];\nsval = (psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w])*weight.x;\nofs = f->ofs[1];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.y, sval);\nif( weight.z > 0 )\n{\nofs = f->ofs[2];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.z, sval);\n}\ns += (sval < st.y*nf) ? st.z : st.w;\n}\nstump += ntrees;\n#else\nfor( i = 0; i < ntrees; i++, node += NODE_COUNT, leaves += NODE_COUNT+1 )\n{\nint idx = 0;\ndo\n{\nint4 n = node[idx].n;\n__global const OptHaarFeature* f = optfeatures + n.x;\nfloat4 weight = f->weight;\nint4 ofs = f->ofs[0];\nsval = (psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w])*weight.x;\nofs = f->ofs[1];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.y, sval);\nif( weight.z > 0 )\n{\nofs = f->ofs[2];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.z, sval);\n}\nidx = (sval < as_float(n.y)*nf) ? n.z : n.w;\n}\nwhile(idx > 0);\ns += leaves[-idx];\n}\n#endif\nif( s < stages[stageIdx].threshold )\nbreak;\n}\nif( stageIdx == SPLIT_STAGE && (ystep == 1 || ((ix | iy) & 1) == 0) )\n{\nint count = atomic_inc(lcount);\nlbuf[count] = (int)(ix | (iy << 8));\nlnf[count] = nf;\n}\n}\nfor( stageIdx = SPLIT_STAGE; stageIdx < N_STAGES; stageIdx++ )\n{\nbarrier(CLK_LOCAL_MEM_FENCE);\nint nrects = lcount[0];\nif( nrects == 0 )\nbreak;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( lidx == 0 )\nlcount[0] = 0;\n{\n#if NODE_COUNT == 1\n__global const Stump* stump = (__global const Stump*)nodes + stages[stageIdx].first;\n#else\n__global const Node* node = nodes + stages[stageIdx].first*NODE_COUNT;\n__global const float* leaves = leaves0 + stages[stageIdx].first*(NODE_COUNT+1);\n#endif\nint nparts = LOCAL_SIZE / nrects;\nint ntrees = stages[stageIdx].ntrees;\nint ntrees_p = (ntrees + nparts - 1)/nparts;\nint nr = lidx / nparts;\nint partidx = -1, idxval = 0;\nfloat partsum = 0.f, nf = 0.f;\nif( nr < nrects )\n{\npartidx = lidx % nparts;\nidxval = lbuf[nr];\nnf = lnf[nr];\n{\nint ntrees0 = ntrees_p*partidx;\nint ntrees1 = min(ntrees0 + ntrees_p, ntrees);\nint ix1 = idxval & 255, iy1 = idxval >> 8;\n#if SUM_BUF_SIZE > 0\n__local const int* psum = ibuf + mad24(iy1, SUM_BUF_STEP, ix1);\n#else\n__global const int* psum = psum0 + mad24(iy1, sumstep, ix1);\n#endif\n#if NODE_COUNT == 1\nfor( i = ntrees0; i < ntrees1; i++ )\n{\nfloat4 st = stump[i].st;\n__global const OptHaarFeature* f = optfeatures + as_int(st.x);\nfloat4 weight = f->weight;\nint4 ofs = f->ofs[0];\nfloat sval = (psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w])*weight.x;\nofs = f->ofs[1];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.y, sval);\nif( fabs(weight.z) > 0 )\n{\nofs = f->ofs[2];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.z, sval);\n}\npartsum += (sval < st.y*nf) ? st.z : st.w;\n}\n#else\nfor( i = ntrees0; i < ntrees1; i++ )\n{\nint idx = 0;\ndo\n{\nint4 n = node[i*2 + idx].n;\n__global const OptHaarFeature* f = optfeatures + n.x;\nfloat4 weight = f->weight;\nint4 ofs = f->ofs[0];\nfloat sval = (psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w])*weight.x;\nofs = f->ofs[1];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.y, sval);\nif( weight.z > 0 )\n{\nofs = f->ofs[2];\nsval = mad((psum[ofs.x] - psum[ofs.y] - psum[ofs.z] + psum[ofs.w]), weight.z, sval);\n}\nidx = (sval < as_float(n.y)*nf) ? n.z : n.w;\n}\nwhile(idx > 0);\npartsum += leaves[i*3-idx];\n}\n#endif\n}\n}\nlpartsum[lidx] = partsum;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( partidx == 0 )\n{\nfloat s = lpartsum[nr*nparts];\nfor( i = 1; i < nparts; i++ )\ns += lpartsum[i + nr*nparts];\nif( s >= stages[stageIdx].threshold )\n{\nint count = atomic_inc(lcount);\nlbuf[count] = idxval;\nlnf[count] = nf;\n}\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( stageIdx == N_STAGES )\n{\nint nrects = lcount[0];\nif( lidx < nrects )\n{\nint nfaces = atomic_inc(facepos);\nif( nfaces < MAX_FACES )\n{\nvolatile __global int* face = facepos + 1 + nfaces*3;\nint val = lbuf[lidx];\nface[0] = scaleIdx;\nface[1] = ix0 + (val & 255);\nface[2] = iy0 + (val >> 8);\n}\n}\n}\n}\n}\n}\n#endif\n#ifdef LBP\n#undef CALC_SUM_OFS_\n#define CALC_SUM_OFS_(p0, p1, p2, p3, ptr) \\\n((ptr)[p0] - (ptr)[p1] - (ptr)[p2] + (ptr)[p3])\n__kernel void runLBPClassifierStumpSimple(\nint nscales, __global const ScaleData* scaleData,\n__global const int* sum,\nint _sumstep, int sumoffset,\n__global const OptLBPFeature* optfeatures,\n__global const Stage* stages,\n__global const Stump* stumps,\n__global const int* bitsets,\nint bitsetSize,\nvolatile __global int* facepos,\nint2 windowsize)\n{\nint lx = get_local_id(0);\nint ly = get_local_id(1);\nint local_size_x = get_local_size(0);\nint local_size_y = get_local_size(1);\nint groupIdx = get_group_id(1)*get_num_groups(0) + get_group_id(0);\nint ngroups = get_num_groups(0)*get_num_groups(1);\nint scaleIdx, tileIdx, stageIdx;\nint sumstep = (int)(_sumstep/sizeof(int));\nfor( scaleIdx = nscales-1; scaleIdx >= 0; scaleIdx-- )\n{\n__global const ScaleData* s = scaleData + scaleIdx;\nint ystep = s->ystep;\nint2 worksize = (int2)(max(s->szi_width - windowsize.x, 0), max(s->szi_height - windowsize.y, 0));\nint2 ntiles = (int2)((worksize.x/ystep + local_size_x-1)/local_size_x,\n(worksize.y/ystep + local_size_y-1)/local_size_y);\nint totalTiles = ntiles.x*ntiles.y;\nfor( tileIdx = groupIdx; tileIdx < totalTiles; tileIdx += ngroups )\n{\nint iy = mad24((tileIdx / ntiles.x), local_size_y, ly) * ystep;\nint ix = mad24((tileIdx % ntiles.x), local_size_x, lx) * ystep;\nif( ix < worksize.x && iy < worksize.y )\n{\n__global const int* p = sum + mad24(iy, sumstep, ix) + s->layer_ofs;\n__global const Stump* stump = stumps;\n__global const int* bitset = bitsets;\nfor( stageIdx = 0; stageIdx < N_STAGES; stageIdx++ )\n{\nint i, ntrees = stages[stageIdx].ntrees;\nfloat s = 0.f;\nfor( i = 0; i < ntrees; i++, stump++, bitset += bitsetSize )\n{\nfloat4 st = stump->st;\n__global const OptLBPFeature* f = optfeatures + as_int(st.x);\nint16 ofs = f->ofs;\nint cval = CALC_SUM_OFS_( ofs.s5, ofs.s6, ofs.s9, ofs.sa, p );\nint mask, idx = (CALC_SUM_OFS_( ofs.s0, ofs.s1, ofs.s4, ofs.s5, p ) >= cval ? 4 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s1, ofs.s2, ofs.s5, ofs.s6, p ) >= cval ? 2 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s2, ofs.s3, ofs.s6, ofs.s7, p ) >= cval ? 1 : 0);\nmask = (CALC_SUM_OFS_( ofs.s6, ofs.s7, ofs.sa, ofs.sb, p ) >= cval ? 16 : 0);\nmask |= (CALC_SUM_OFS_( ofs.sa, ofs.sb, ofs.se, ofs.sf, p ) >= cval ? 8 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s9, ofs.sa, ofs.sd, ofs.se, p ) >= cval ? 4 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s8, ofs.s9, ofs.sc, ofs.sd, p ) >= cval ? 2 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s4, ofs.s5, ofs.s8, ofs.s9, p ) >= cval ? 1 : 0);\ns += (bitset[idx] & (1 << mask)) ? st.z : st.w;\n}\nif( s < stages[stageIdx].threshold )\nbreak;\n}\nif( stageIdx == N_STAGES )\n{\nint nfaces = atomic_inc(facepos);\nif( nfaces < MAX_FACES )\n{\nvolatile __global int* face = facepos + 1 + nfaces*3;\nface[0] = scaleIdx;\nface[1] = ix;\nface[2] = iy;\n}\n}\n}\n}\n}\n}\n__kernel __attribute__((reqd_work_group_size(LOCAL_SIZE_X,LOCAL_SIZE_Y,1)))\nvoid runLBPClassifierStump(\nint nscales, __global const ScaleData* scaleData,\n__global const int* sum,\nint _sumstep, int sumoffset,\n__global const OptLBPFeature* optfeatures,\n__global const Stage* stages,\n__global const Stump* stumps,\n__global const int* bitsets,\nint bitsetSize,\nvolatile __global int* facepos,\nint2 windowsize)\n{\nint lx = get_local_id(0);\nint ly = get_local_id(1);\nint groupIdx = get_group_id(0);\nint i, ngroups = get_global_size(0)/LOCAL_SIZE_X;\nint scaleIdx, tileIdx, stageIdx;\nint sumstep = (int)(_sumstep/sizeof(int));\nint lidx = ly*LOCAL_SIZE_X + lx;\n#define LOCAL_SIZE (LOCAL_SIZE_X*LOCAL_SIZE_Y)\n__local int lstore[SUM_BUF_SIZE + LOCAL_SIZE*3/2+1];\n#if SUM_BUF_SIZE > 0\n__local int* ibuf = lstore;\n__local int* lcount = ibuf + SUM_BUF_SIZE;\n#else\n__local int* lcount = lstore;\n#endif\n__local float* lpartsum = (__local float*)(lcount + 1);\n__local short* lbuf = (__local short*)(lpartsum + LOCAL_SIZE);\nfor( scaleIdx = nscales-1; scaleIdx >= 0; scaleIdx-- )\n{\n__global const ScaleData* s = scaleData + scaleIdx;\nint ystep = s->ystep;\nint2 worksize = (int2)(max(s->szi_width - windowsize.x, 0), max(s->szi_height - windowsize.y, 0));\nint2 ntiles = (int2)((worksize.x + LOCAL_SIZE_X-1)/LOCAL_SIZE_X,\n(worksize.y + LOCAL_SIZE_Y-1)/LOCAL_SIZE_Y);\nint totalTiles = ntiles.x*ntiles.y;\nfor( tileIdx = groupIdx; tileIdx < totalTiles; tileIdx += ngroups )\n{\nint ix0 = (tileIdx % ntiles.x)*LOCAL_SIZE_X;\nint iy0 = (tileIdx / ntiles.x)*LOCAL_SIZE_Y;\nint ix = lx, iy = ly;\n__global const int* psum0 = sum + mad24(iy0, sumstep, ix0) + s->layer_ofs;\nif( ix0 >= worksize.x || iy0 >= worksize.y )\ncontinue;\n#if SUM_BUF_SIZE > 0\nfor( i = lidx*4; i < SUM_BUF_SIZE; i += LOCAL_SIZE_X*LOCAL_SIZE_Y*4 )\n{\nint dy = i/SUM_BUF_STEP, dx = i - dy*SUM_BUF_STEP;\nvstore4(vload4(0, psum0 + mad24(dy, sumstep, dx)), 0, ibuf+i);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n#endif\nif( lidx == 0 )\nlcount[0] = 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( ix0 + ix < worksize.x && iy0 + iy < worksize.y )\n{\n__global const Stump* stump = stumps;\n__global const int* bitset = bitsets;\n#if SUM_BUF_SIZE > 0\n__local const int* p = ibuf + mad24(iy, SUM_BUF_STEP, ix);\n#else\n__global const int* p = psum0 + mad24(iy, sumstep, ix);\n#endif\nfor( stageIdx = 0; stageIdx < SPLIT_STAGE; stageIdx++ )\n{\nint ntrees = stages[stageIdx].ntrees;\nfloat s = 0.f;\nfor( i = 0; i < ntrees; i++, stump++, bitset += bitsetSize )\n{\nfloat4 st = stump->st;\n__global const OptLBPFeature* f = optfeatures + as_int(st.x);\nint16 ofs = f->ofs;\nint cval = CALC_SUM_OFS_( ofs.s5, ofs.s6, ofs.s9, ofs.sa, p );\nint mask, idx = (CALC_SUM_OFS_( ofs.s0, ofs.s1, ofs.s4, ofs.s5, p ) >= cval ? 4 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s1, ofs.s2, ofs.s5, ofs.s6, p ) >= cval ? 2 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s2, ofs.s3, ofs.s6, ofs.s7, p ) >= cval ? 1 : 0);\nmask = (CALC_SUM_OFS_( ofs.s6, ofs.s7, ofs.sa, ofs.sb, p ) >= cval ? 16 : 0);\nmask |= (CALC_SUM_OFS_( ofs.sa, ofs.sb, ofs.se, ofs.sf, p ) >= cval ? 8 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s9, ofs.sa, ofs.sd, ofs.se, p ) >= cval ? 4 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s8, ofs.s9, ofs.sc, ofs.sd, p ) >= cval ? 2 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s4, ofs.s5, ofs.s8, ofs.s9, p ) >= cval ? 1 : 0);\ns += (bitset[idx] & (1 << mask)) ? st.z : st.w;\n}\nif( s < stages[stageIdx].threshold )\nbreak;\n}\nif( stageIdx == SPLIT_STAGE && (ystep == 1 || ((ix | iy) & 1) == 0) )\n{\nint count = atomic_inc(lcount);\nlbuf[count] = (int)(ix | (iy << 8));\n}\n}\nfor( stageIdx = SPLIT_STAGE; stageIdx < N_STAGES; stageIdx++ )\n{\nint nrects = lcount[0];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( nrects == 0 )\nbreak;\nif( lidx == 0 )\nlcount[0] = 0;\n{\n__global const Stump* stump = stumps + stages[stageIdx].first;\n__global const int* bitset = bitsets + stages[stageIdx].first*bitsetSize;\nint nparts = LOCAL_SIZE / nrects;\nint ntrees = stages[stageIdx].ntrees;\nint ntrees_p = (ntrees + nparts - 1)/nparts;\nint nr = lidx / nparts;\nint partidx = -1, idxval = 0;\nfloat partsum = 0.f, nf = 0.f;\nif( nr < nrects )\n{\npartidx = lidx % nparts;\nidxval = lbuf[nr];\n{\nint ntrees0 = ntrees_p*partidx;\nint ntrees1 = min(ntrees0 + ntrees_p, ntrees);\nint ix1 = idxval & 255, iy1 = idxval >> 8;\n#if SUM_BUF_SIZE > 0\n__local const int* p = ibuf + mad24(iy1, SUM_BUF_STEP, ix1);\n#else\n__global const int* p = psum0 + mad24(iy1, sumstep, ix1);\n#endif\nfor( i = ntrees0; i < ntrees1; i++ )\n{\nfloat4 st = stump[i].st;\n__global const OptLBPFeature* f = optfeatures + as_int(st.x);\nint16 ofs = f->ofs;\n#define CALC_SUM_OFS_(p0, p1, p2, p3, ptr) \\\n((ptr)[p0] - (ptr)[p1] - (ptr)[p2] + (ptr)[p3])\nint cval = CALC_SUM_OFS_( ofs.s5, ofs.s6, ofs.s9, ofs.sa, p );\nint mask, idx = (CALC_SUM_OFS_( ofs.s0, ofs.s1, ofs.s4, ofs.s5, p ) >= cval ? 4 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s1, ofs.s2, ofs.s5, ofs.s6, p ) >= cval ? 2 : 0);\nidx |= (CALC_SUM_OFS_( ofs.s2, ofs.s3, ofs.s6, ofs.s7, p ) >= cval ? 1 : 0);\nmask = (CALC_SUM_OFS_( ofs.s6, ofs.s7, ofs.sa, ofs.sb, p ) >= cval ? 16 : 0);\nmask |= (CALC_SUM_OFS_( ofs.sa, ofs.sb, ofs.se, ofs.sf, p ) >= cval ? 8 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s9, ofs.sa, ofs.sd, ofs.se, p ) >= cval ? 4 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s8, ofs.s9, ofs.sc, ofs.sd, p ) >= cval ? 2 : 0);\nmask |= (CALC_SUM_OFS_( ofs.s4, ofs.s5, ofs.s8, ofs.s9, p ) >= cval ? 1 : 0);\npartsum += (bitset[i*bitsetSize + idx] & (1 << mask)) ? st.z : st.w;\n}\n}\n}\nlpartsum[lidx] = partsum;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( partidx == 0 )\n{\nfloat s = lpartsum[nr*nparts];\nfor( i = 1; i < nparts; i++ )\ns += lpartsum[i + nr*nparts];\nif( s >= stages[stageIdx].threshold )\n{\nint count = atomic_inc(lcount);\nlbuf[count] = idxval;\n}\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( stageIdx == N_STAGES )\n{\nint nrects = lcount[0];\nif( lidx < nrects )\n{\nint nfaces = atomic_inc(facepos);\nif( nfaces < MAX_FACES )\n{\nvolatile __global int* face = facepos + 1 + nfaces*3;\nint val = lbuf[lidx];\nface[0] = scaleIdx;\nface[1] = ix0 + (val & 255);\nface[2] = iy0 + (val >> 8);\n}\n}\n}\n}\n}\n}\n#endif\n", "#define CELL_WIDTH 8\n#define CELL_HEIGHT 8\n#define CELLS_PER_BLOCK_X 2\n#define CELLS_PER_BLOCK_Y 2\n#define NTHREADS 256\n#define CV_PI_F M_PI_F\n#ifdef INTEL_DEVICE\n#define QANGLE_TYPE     int\n#define QANGLE_TYPE2    int2\n#else\n#define QANGLE_TYPE     uchar\n#define QANGLE_TYPE2    uchar2\n#endif\n__kernel void compute_hists_lut_kernel(\nconst int cblock_stride_x, const int cblock_stride_y,\nconst int cnbins, const int cblock_hist_size, const int img_block_width,\nconst int blocks_in_group, const int blocks_total,\nconst int grad_quadstep, const int qangle_step,\n__global const float* grad, __global const QANGLE_TYPE* qangle,\n__global const float* gauss_w_lut,\n__global float* block_hists, __local float* smem)\n{\nconst int lx = get_local_id(0);\nconst int lp = lx / 24; \nconst int gid = get_group_id(0) * blocks_in_group + lp;\nconst int gidY = gid / img_block_width;\nconst int gidX = gid - gidY * img_block_width;\nconst int lidX = lx - lp * 24;\nconst int lidY = get_local_id(1);\nconst int cell_x = lidX / 12;\nconst int cell_y = lidY;\nconst int cell_thread_x = lidX - cell_x * 12;\n__local float* hists = smem + lp * cnbins * (CELLS_PER_BLOCK_X *\nCELLS_PER_BLOCK_Y * 12 + CELLS_PER_BLOCK_X * CELLS_PER_BLOCK_Y);\n__local float* final_hist = hists + cnbins *\n(CELLS_PER_BLOCK_X * CELLS_PER_BLOCK_Y * 12);\nconst int offset_x = gidX * cblock_stride_x + (cell_x << 2) + cell_thread_x;\nconst int offset_y = gidY * cblock_stride_y + (cell_y << 2);\n__global const float* grad_ptr = (gid < blocks_total) ?\ngrad + offset_y * grad_quadstep + (offset_x << 1) : grad;\n__global const QANGLE_TYPE* qangle_ptr = (gid < blocks_total) ?\nqangle + offset_y * qangle_step + (offset_x << 1) : qangle;\n__local float* hist = hists + 12 * (cell_y * CELLS_PER_BLOCK_Y + cell_x) +\ncell_thread_x;\nfor (int bin_id = 0; bin_id < cnbins; ++bin_id)\nhist[bin_id * 48] = 0.f;\nconst int dist_x = -4 + cell_thread_x - 4 * cell_x;\nconst int dist_center_x = dist_x - 4 * (1 - 2 * cell_x);\nconst int dist_y_begin = -4 - 4 * lidY;\nfor (int dist_y = dist_y_begin; dist_y < dist_y_begin + 12; ++dist_y)\n{\nfloat2 vote = (float2) (grad_ptr[0], grad_ptr[1]);\nQANGLE_TYPE2 bin = (QANGLE_TYPE2) (qangle_ptr[0], qangle_ptr[1]);\ngrad_ptr += grad_quadstep;\nqangle_ptr += qangle_step;\nint dist_center_y = dist_y - 4 * (1 - 2 * cell_y);\nint idx = (dist_center_y + 8) * 16 + (dist_center_x + 8);\nfloat gaussian = gauss_w_lut[idx];\nidx = (dist_y + 8) * 16 + (dist_x + 8);\nfloat interp_weight = gauss_w_lut[256+idx];\nhist[bin.x * 48] += gaussian * interp_weight * vote.x;\nhist[bin.y * 48] += gaussian * interp_weight * vote.y;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nvolatile __local float* hist_ = hist;\nfor (int bin_id = 0; bin_id < cnbins; ++bin_id, hist_ += 48)\n{\nif (cell_thread_x < 6)\nhist_[0] += hist_[6];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (cell_thread_x < 3)\nhist_[0] += hist_[3];\n#ifdef CPU\nbarrier(CLK_LOCAL_MEM_FENCE);\n#endif\nif (cell_thread_x == 0)\nfinal_hist[(cell_x * 2 + cell_y) * cnbins + bin_id] =\nhist_[0] + hist_[1] + hist_[2];\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nint tid = (cell_y * CELLS_PER_BLOCK_Y + cell_x) * 12 + cell_thread_x;\nif ((tid < cblock_hist_size) && (gid < blocks_total))\n{\n__global float* block_hist = block_hists +\n(gidY * img_block_width + gidX) * cblock_hist_size;\nblock_hist[tid] = final_hist[tid];\n}\n}\n__kernel void normalize_hists_36_kernel(__global float* block_hists,\nconst float threshold, __local float *squares)\n{\nconst int tid = get_local_id(0);\nconst int gid = get_global_id(0);\nconst int bid = tid / 36;      \nconst int boffset = bid * 36;  \nconst int hid = tid - boffset; \nfloat elem = block_hists[gid];\nsquares[tid] = elem * elem;\nbarrier(CLK_LOCAL_MEM_FENCE);\n__local float* smem = squares + boffset;\nfloat sum = smem[hid];\nif (hid < 18)\nsmem[hid] = sum = sum + smem[hid + 18];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (hid < 9)\nsmem[hid] = sum = sum + smem[hid + 9];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (hid < 4)\nsmem[hid] = sum + smem[hid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = smem[0] + smem[1] + smem[2] + smem[3] + smem[8];\nelem = elem / (sqrt(sum) + 3.6f);\nelem = min(elem, threshold);\nbarrier(CLK_LOCAL_MEM_FENCE);\nsquares[tid] = elem * elem;\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = smem[hid];\nif (hid < 18)\nsmem[hid] = sum = sum + smem[hid + 18];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (hid < 9)\nsmem[hid] = sum = sum + smem[hid + 9];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (hid < 4)\nsmem[hid] = sum + smem[hid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = smem[0] + smem[1] + smem[2] + smem[3] + smem[8];\nblock_hists[gid] = elem / (sqrt(sum) + 1e-3f);\n}\ninline float reduce_smem(volatile __local float* smem, int size)\n{\nunsigned int tid = get_local_id(0);\nfloat sum = smem[tid];\nif (size >= 512) { if (tid < 256) smem[tid] = sum = sum + smem[tid + 256];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 256) { if (tid < 128) smem[tid] = sum = sum + smem[tid + 128];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 128) { if (tid < 64) smem[tid] = sum = sum + smem[tid + 64];\nbarrier(CLK_LOCAL_MEM_FENCE); }\n#ifdef CPU\nif (size >= 64) { if (tid < 32) smem[tid] = sum = sum + smem[tid + 32];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 32) { if (tid < 16) smem[tid] = sum = sum + smem[tid + 16];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 16) { if (tid < 8) smem[tid] = sum = sum + smem[tid + 8];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 8) { if (tid < 4) smem[tid] = sum = sum + smem[tid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 4) { if (tid < 2) smem[tid] = sum = sum + smem[tid + 2];\nbarrier(CLK_LOCAL_MEM_FENCE); }\nif (size >= 2) { if (tid < 1) smem[tid] = sum = sum + smem[tid + 1];\nbarrier(CLK_LOCAL_MEM_FENCE); }\n#else\nif (tid < 32)\n{\nif (size >= 64) smem[tid] = sum = sum + smem[tid + 32];\n#if WAVE_SIZE < 32\n} barrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16) {\n#endif\nif (size >= 32) smem[tid] = sum = sum + smem[tid + 16];\nif (size >= 16) smem[tid] = sum = sum + smem[tid + 8];\nif (size >= 8) smem[tid] = sum = sum + smem[tid + 4];\nif (size >= 4) smem[tid] = sum = sum + smem[tid + 2];\nif (size >= 2) smem[tid] = sum = sum + smem[tid + 1];\n}\n#endif\nreturn sum;\n}\n__kernel void normalize_hists_kernel(\nconst int nthreads, const int block_hist_size, const int img_block_width,\n__global float* block_hists, const float threshold, __local float *squares)\n{\nconst int tid = get_local_id(0);\nconst int gidX = get_group_id(0);\nconst int gidY = get_group_id(1);\n__global float* hist = block_hists + (gidY * img_block_width + gidX) *\nblock_hist_size + tid;\nfloat elem = 0.f;\nif (tid < block_hist_size)\nelem = hist[0];\nsquares[tid] = elem * elem;\nbarrier(CLK_LOCAL_MEM_FENCE);\nfloat sum = reduce_smem(squares, nthreads);\nfloat scale = 1.0f / (sqrt(sum) + 0.1f * block_hist_size);\nelem = min(elem * scale, threshold);\nbarrier(CLK_LOCAL_MEM_FENCE);\nsquares[tid] = elem * elem;\nbarrier(CLK_LOCAL_MEM_FENCE);\nsum = reduce_smem(squares, nthreads);\nscale = 1.0f / (sqrt(sum) + 1e-3f);\nif (tid < block_hist_size)\nhist[0] = elem * scale;\n}\n__kernel void classify_hists_180_kernel(\nconst int cdescr_width, const int cdescr_height, const int cblock_hist_size,\nconst int img_win_width, const int img_block_width,\nconst int win_block_stride_x, const int win_block_stride_y,\n__global const float * block_hists, __global const float* coefs,\nfloat free_coef, float threshold, __global uchar* labels)\n{\nconst int tid = get_local_id(0);\nconst int gidX = get_group_id(0);\nconst int gidY = get_group_id(1);\n__global const float* hist = block_hists + (gidY * win_block_stride_y *\nimg_block_width + gidX * win_block_stride_x) * cblock_hist_size;\nfloat product = 0.f;\nfor (int i = 0; i < cdescr_height; i++)\n{\nproduct += coefs[i * cdescr_width + tid] *\nhist[i * img_block_width * cblock_hist_size + tid];\n}\n__local float products[180];\nproducts[tid] = product;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 90) products[tid] = product = product + products[tid + 90];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 45) products[tid] = product = product + products[tid + 45];\nbarrier(CLK_LOCAL_MEM_FENCE);\nvolatile __local float* smem = products;\n#ifdef CPU\nif (tid < 13) smem[tid] = product = product + smem[tid + 32];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16) smem[tid] = product = product + smem[tid + 16];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<8) smem[tid] = product = product + smem[tid + 8];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<4) smem[tid] = product = product + smem[tid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<2) smem[tid] = product = product + smem[tid + 2];\nbarrier(CLK_LOCAL_MEM_FENCE);\n#else\nif (tid < 13)\n{\nsmem[tid] = product = product + smem[tid + 32];\n}\n#if WAVE_SIZE < 32\nbarrier(CLK_LOCAL_MEM_FENCE);\n#endif\nif (tid < 16)\n{\nsmem[tid] = product = product + smem[tid + 16];\nsmem[tid] = product = product + smem[tid + 8];\nsmem[tid] = product = product + smem[tid + 4];\nsmem[tid] = product = product + smem[tid + 2];\n}\n#endif\nif (tid == 0){\nproduct = product + smem[tid + 1];\nlabels[gidY * img_win_width + gidX] = (product + free_coef >= threshold);\n}\n}\n__kernel void classify_hists_252_kernel(\nconst int cdescr_width, const int cdescr_height, const int cblock_hist_size,\nconst int img_win_width, const int img_block_width,\nconst int win_block_stride_x, const int win_block_stride_y,\n__global const float * block_hists, __global const float* coefs,\nfloat free_coef, float threshold, __global uchar* labels)\n{\nconst int tid = get_local_id(0);\nconst int gidX = get_group_id(0);\nconst int gidY = get_group_id(1);\n__global const float* hist = block_hists + (gidY * win_block_stride_y *\nimg_block_width + gidX * win_block_stride_x) * cblock_hist_size;\nfloat product = 0.f;\nif (tid < cdescr_width)\n{\nfor (int i = 0; i < cdescr_height; i++)\nproduct += coefs[i * cdescr_width + tid] *\nhist[i * img_block_width * cblock_hist_size + tid];\n}\n__local float products[NTHREADS];\nproducts[tid] = product;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 128) products[tid] = product = product + products[tid + 128];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 64) products[tid] = product = product + products[tid + 64];\nbarrier(CLK_LOCAL_MEM_FENCE);\nvolatile __local float* smem = products;\n#ifdef CPU\nif(tid<32) smem[tid] = product = product + smem[tid + 32];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<16) smem[tid] = product = product + smem[tid + 16];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<8) smem[tid] = product = product + smem[tid + 8];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<4) smem[tid] = product = product + smem[tid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<2) smem[tid] = product = product + smem[tid + 2];\nbarrier(CLK_LOCAL_MEM_FENCE);\n#else\nif (tid < 32)\n{\nsmem[tid] = product = product + smem[tid + 32];\n#if WAVE_SIZE < 32\n} barrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16) {\n#endif\nsmem[tid] = product = product + smem[tid + 16];\nsmem[tid] = product = product + smem[tid + 8];\nsmem[tid] = product = product + smem[tid + 4];\nsmem[tid] = product = product + smem[tid + 2];\n}\n#endif\nif (tid == 0){\nproduct = product + smem[tid + 1];\nlabels[gidY * img_win_width + gidX] = (product + free_coef >= threshold);\n}\n}\n__kernel void classify_hists_kernel(\nconst int cdescr_size, const int cdescr_width, const int cblock_hist_size,\nconst int img_win_width, const int img_block_width,\nconst int win_block_stride_x, const int win_block_stride_y,\n__global const float * block_hists, __global const float* coefs,\nfloat free_coef, float threshold, __global uchar* labels)\n{\nconst int tid = get_local_id(0);\nconst int gidX = get_group_id(0);\nconst int gidY = get_group_id(1);\n__global const float* hist = block_hists + (gidY * win_block_stride_y *\nimg_block_width + gidX * win_block_stride_x) * cblock_hist_size;\nfloat product = 0.f;\nfor (int i = tid; i < cdescr_size; i += NTHREADS)\n{\nint offset_y = i / cdescr_width;\nint offset_x = i - offset_y * cdescr_width;\nproduct += coefs[i] *\nhist[offset_y * img_block_width * cblock_hist_size + offset_x];\n}\n__local float products[NTHREADS];\nproducts[tid] = product;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 128) products[tid] = product = product + products[tid + 128];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 64) products[tid] = product = product + products[tid + 64];\nbarrier(CLK_LOCAL_MEM_FENCE);\nvolatile __local float* smem = products;\n#ifdef CPU\nif(tid<32) smem[tid] = product = product + smem[tid + 32];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<16) smem[tid] = product = product + smem[tid + 16];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<8) smem[tid] = product = product + smem[tid + 8];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<4) smem[tid] = product = product + smem[tid + 4];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif(tid<2) smem[tid] = product = product + smem[tid + 2];\nbarrier(CLK_LOCAL_MEM_FENCE);\n#else\nif (tid < 32)\n{\nsmem[tid] = product = product + smem[tid + 32];\n#if WAVE_SIZE < 32\n} barrier(CLK_LOCAL_MEM_FENCE);\nif (tid < 16) {\n#endif\nsmem[tid] = product = product + smem[tid + 16];\nsmem[tid] = product = product + smem[tid + 8];\nsmem[tid] = product = product + smem[tid + 4];\nsmem[tid] = product = product + smem[tid + 2];\n}\n#endif\nif (tid == 0){\nsmem[tid] = product = product + smem[tid + 1];\nlabels[gidY * img_win_width + gidX] = (product + free_coef >= threshold);\n}\n}\n__kernel void extract_descrs_by_rows_kernel(\nconst int cblock_hist_size, const int descriptors_quadstep,\nconst int cdescr_size, const int cdescr_width, const int img_block_width,\nconst int win_block_stride_x, const int win_block_stride_y,\n__global const float* block_hists, __global float* descriptors)\n{\nint tid = get_local_id(0);\nint gidX = get_group_id(0);\nint gidY = get_group_id(1);\n__global const float* hist = block_hists + (gidY * win_block_stride_y *\nimg_block_width + gidX * win_block_stride_x) * cblock_hist_size;\n__global float* descriptor = descriptors +\n(gidY * get_num_groups(0) + gidX) * descriptors_quadstep;\nfor (int i = tid; i < cdescr_size; i += NTHREADS)\n{\nint offset_y = i / cdescr_width;\nint offset_x = i - offset_y * cdescr_width;\ndescriptor[i] = hist[offset_y * img_block_width * cblock_hist_size + offset_x];\n}\n}\n__kernel void extract_descrs_by_cols_kernel(\nconst int cblock_hist_size, const int descriptors_quadstep, const int cdescr_size,\nconst int cnblocks_win_x, const int cnblocks_win_y, const int img_block_width,\nconst int win_block_stride_x, const int win_block_stride_y,\n__global const float* block_hists, __global float* descriptors)\n{\nint tid = get_local_id(0);\nint gidX = get_group_id(0);\nint gidY = get_group_id(1);\n__global const float* hist = block_hists +  (gidY * win_block_stride_y *\nimg_block_width + gidX * win_block_stride_x) * cblock_hist_size;\n__global float* descriptor = descriptors +\n(gidY * get_num_groups(0) + gidX) * descriptors_quadstep;\nfor (int i = tid; i < cdescr_size; i += NTHREADS)\n{\nint block_idx = i / cblock_hist_size;\nint idx_in_block = i - block_idx * cblock_hist_size;\nint y = block_idx / cnblocks_win_x;\nint x = block_idx - y * cnblocks_win_x;\ndescriptor[(x * cnblocks_win_y + y) * cblock_hist_size + idx_in_block] =\nhist[(y * img_block_width  + x) * cblock_hist_size + idx_in_block];\n}\n}\n__kernel void compute_gradients_8UC4_kernel(\nconst int height, const int width,\nconst int img_step, const int grad_quadstep, const int qangle_step,\nconst __global uchar4 * img, __global float * grad, __global QANGLE_TYPE * qangle,\nconst float angle_scale, const char correct_gamma, const int cnbins)\n{\nconst int x = get_global_id(0);\nconst int tid = get_local_id(0);\nconst int gSizeX = get_local_size(0);\nconst int gidY = get_group_id(1);\n__global const uchar4* row = img + gidY * img_step;\n__local float sh_row[(NTHREADS + 2) * 3];\nuchar4 val;\nif (x < width)\nval = row[x];\nelse\nval = row[width - 2];\nsh_row[tid + 1] = val.x;\nsh_row[tid + 1 + (NTHREADS + 2)] = val.y;\nsh_row[tid + 1 + 2 * (NTHREADS + 2)] = val.z;\nif (tid == 0)\n{\nval = row[max(x - 1, 1)];\nsh_row[0] = val.x;\nsh_row[(NTHREADS + 2)] = val.y;\nsh_row[2 * (NTHREADS + 2)] = val.z;\n}\nif (tid == gSizeX - 1)\n{\nval = row[min(x + 1, width - 2)];\nsh_row[gSizeX + 1] = val.x;\nsh_row[gSizeX + 1 + (NTHREADS + 2)] = val.y;\nsh_row[gSizeX + 1 + 2 * (NTHREADS + 2)] = val.z;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < width)\n{\nfloat4 a = (float4) (sh_row[tid], sh_row[tid + (NTHREADS + 2)],\nsh_row[tid + 2 * (NTHREADS + 2)], 0);\nfloat4 b = (float4) (sh_row[tid + 2], sh_row[tid + 2 + (NTHREADS + 2)],\nsh_row[tid + 2 + 2 * (NTHREADS + 2)], 0);\nfloat4 dx;\nif (correct_gamma == 1)\ndx = sqrt(b) - sqrt(a);\nelse\ndx = b - a;\nfloat4 dy = (float4) 0.f;\nif (gidY > 0 && gidY < height - 1)\n{\na = convert_float4(img[(gidY - 1) * img_step + x].xyzw);\nb = convert_float4(img[(gidY + 1) * img_step + x].xyzw);\nif (correct_gamma == 1)\ndy = sqrt(b) - sqrt(a);\nelse\ndy = b - a;\n}\nfloat4 mag = hypot(dx, dy);\nfloat best_dx = dx.x;\nfloat best_dy = dy.x;\nfloat mag0 = mag.x;\nif (mag0 < mag.y)\n{\nbest_dx = dx.y;\nbest_dy = dy.y;\nmag0 = mag.y;\n}\nif (mag0 < mag.z)\n{\nbest_dx = dx.z;\nbest_dy = dy.z;\nmag0 = mag.z;\n}\nfloat ang = (atan2(best_dy, best_dx) + CV_PI_F) * angle_scale - 0.5f;\nint hidx = (int)floor(ang);\nang -= hidx;\nhidx = (hidx + cnbins) % cnbins;\nqangle[(gidY * qangle_step + x) << 1] = hidx;\nqangle[((gidY * qangle_step + x) << 1) + 1] = (hidx + 1) % cnbins;\ngrad[(gidY * grad_quadstep + x) << 1] = mag0 * (1.f - ang);\ngrad[((gidY * grad_quadstep + x) << 1) + 1] = mag0 * ang;\n}\n}\n__kernel void compute_gradients_8UC1_kernel(\nconst int height, const int width,\nconst int img_step, const int grad_quadstep, const int qangle_step,\n__global const uchar * img, __global float * grad, __global QANGLE_TYPE * qangle,\nconst float angle_scale, const char correct_gamma, const int cnbins)\n{\nconst int x = get_global_id(0);\nconst int tid = get_local_id(0);\nconst int gSizeX = get_local_size(0);\nconst int gidY = get_group_id(1);\n__global const uchar* row = img + gidY * img_step;\n__local float sh_row[NTHREADS + 2];\nif (x < width)\nsh_row[tid + 1] = row[x];\nelse\nsh_row[tid + 1] = row[width - 2];\nif (tid == 0)\nsh_row[0] = row[max(x - 1, 1)];\nif (tid == gSizeX - 1)\nsh_row[gSizeX + 1] = row[min(x + 1, width - 2)];\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (x < width)\n{\nfloat dx;\nif (correct_gamma == 1)\ndx = sqrt(sh_row[tid + 2]) - sqrt(sh_row[tid]);\nelse\ndx = sh_row[tid + 2] - sh_row[tid];\nfloat dy = 0.f;\nif (gidY > 0 && gidY < height - 1)\n{\nfloat a = (float) img[ (gidY + 1) * img_step + x ];\nfloat b = (float) img[ (gidY - 1) * img_step + x ];\nif (correct_gamma == 1)\ndy = sqrt(a) - sqrt(b);\nelse\ndy = a - b;\n}\nfloat mag = hypot(dx, dy);\nfloat ang = (atan2(dy, dx) + CV_PI_F) * angle_scale - 0.5f;\nint hidx = (int)floor(ang);\nang -= hidx;\nhidx = (hidx + cnbins) % cnbins;\nqangle[ (gidY * qangle_step + x) << 1 ]     = hidx;\nqangle[ ((gidY * qangle_step + x) << 1) + 1 ] = (hidx + 1) % cnbins;\ngrad[ (gidY * grad_quadstep + x) << 1 ]       = mag * (1.f - ang);\ngrad[ ((gidY * grad_quadstep + x) << 1) + 1 ]   = mag * ang;\n}\n}\n", "bc57f4f75fb81bae73bfe73cc4ca15e4", "06c037755dc15a7796c0f3bc7ff05233", "/builds/master_pack-android/opencv/modules/features2d/src/agast_score.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/akaze.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/bagofwords.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/brisk.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/draw.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/evaluation.cpp", "fdetector must not be empty when keypoints1 or keypoints2 is empty", "/builds/master_pack-android/opencv/modules/features2d/src/fast_score.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/feature2d.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/kaze/AKAZEFeatures.cpp", "0 <= kpts[i].class_id && kpts[i].class_id < static_cast<int>(evolution_.size())", "/builds/master_pack-android/opencv/modules/features2d/src/kaze/KAZEFeatures.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/kaze/nldiffusion_functions.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/kaze.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/keypoint.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/matchers.cpp", "masks[i].rows == queryDescriptorsCount && (masks[i].cols == rows || masks[i].cols == rows) && masks[i].type() == CV_8UC1", "deep clone functionality is not implemented, because Flann::Index has not copy constructor or clone method ", "-D T=%s -D TN=%s -D kercn=%d %s -D DIST_TYPE=%d -D BLOCK_SIZE=%d -D MAX_DESC_LEN=%d", "-D T=%s -D TN=%s -D kercn=%d %s -D DIST_TYPE=%d -D BLOCK_SIZE=%d", "trainDescCollection.size() == 0", "_queryDescriptors.type() == trainDescType", "(int64)imgCount*IMGIDX_ONE < INT_MAX", "trainDescCollection[iIdx].rows < IMGIDX_ONE", "_descriptors.isUMat() || _descriptors.isUMatVector() || _descriptors.isMat() || _descriptors.isMatVector()", "/builds/master_pack-android/opencv/modules/features2d/src/mser.cpp", "/builds/master_pack-android/opencv/modules/features2d/src/orb.cpp", "-D ORB_RESPONSES -D blockSize=%d -D scale_sq_sq=%.12ef -D HARRIS_K=%.12ff", "wta_k == 2 || wta_k == 3 || wta_k == 4", "-D ORB_DESCRIPTORS -D WTA_K=%d", "#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics:enable\n#define MAX_FLOAT 3.40282e+038f\n#ifndef T\n#define T float\n#endif\n#ifndef BLOCK_SIZE\n#define BLOCK_SIZE 16\n#endif\n#ifndef MAX_DESC_LEN\n#define MAX_DESC_LEN 64\n#endif\n#define BLOCK_SIZE_ODD          (BLOCK_SIZE + 1)\n#ifndef SHARED_MEM_SZ\n#  if (BLOCK_SIZE < MAX_DESC_LEN)\n#    define SHARED_MEM_SZ      (kercn * (BLOCK_SIZE * MAX_DESC_LEN + BLOCK_SIZE * BLOCK_SIZE))\n#  else\n#    define SHARED_MEM_SZ      (kercn * 2 * BLOCK_SIZE_ODD * BLOCK_SIZE)\n#  endif\n#endif\n#ifndef DIST_TYPE\n#define DIST_TYPE 2\n#endif\n#if (DIST_TYPE == 2)\n#   ifdef T_FLOAT\ntypedef float result_type;\n#       if (8 == kercn)\ntypedef float8 value_type;\n#           define DIST(x, y) {value_type d = fabs((x) - (y)); result += d.s0 + d.s1 + d.s2 + d.s3 + d.s4 + d.s5 + d.s6 + d.s7;}\n#       elif (4 == kercn)\ntypedef float4 value_type;\n#           define DIST(x, y) {value_type d = fabs((x) - (y)); result += d.s0 + d.s1 + d.s2 + d.s3;}\n#       else\ntypedef float value_type;\n#           define DIST(x, y) result += fabs((x) - (y))\n#       endif\n#   else\ntypedef int result_type;\n#       if (8 == kercn)\ntypedef int8 value_type;\n#           define DIST(x, y) {value_type d = abs((x) - (y)); result += d.s0 + d.s1 + d.s2 + d.s3 + d.s4 + d.s5 + d.s6 + d.s7;}\n#       elif (4 == kercn)\ntypedef int4 value_type;\n#           define DIST(x, y) {value_type d = abs((x) - (y)); result += d.s0 + d.s1 + d.s2 + d.s3;}\n#       else\ntypedef int  value_type;\n#           define DIST(x, y) result += abs((x) - (y))\n#       endif\n#   endif\n#   define DIST_RES(x) (x)\n#elif (DIST_TYPE == 4)\ntypedef float result_type;\n#   if (8 == kercn)\ntypedef float8 value_type;\n#       define DIST(x, y)   {value_type d = ((x) - (y)); result += dot(d.s0123, d.s0123) + dot(d.s4567, d.s4567);}\n#   elif (4 == kercn)\ntypedef float4      value_type;\n#       define DIST(x, y)   {value_type d = ((x) - (y)); result += dot(d, d);}\n#   else\ntypedef float       value_type;\n#       define DIST(x, y)   {value_type d = ((x) - (y)); result = mad(d, d, result);}\n#   endif\n#   define DIST_RES(x) sqrt(x)\n#elif (DIST_TYPE == 6)\n#   if (8 == kercn)\ntypedef int8 value_type;\n#   elif (4 == kercn)\ntypedef int4 value_type;\n#   else\ntypedef int value_type;\n#   endif\ntypedef int result_type;\n#   define DIST(x, y) result += popcount( (x) ^ (y) )\n#   define DIST_RES(x) (x)\n#endif\ninline result_type reduce_block(\n__local value_type *s_query,\n__local value_type *s_train,\nint lidx,\nint lidy\n)\n{\nresult_type result = 0;\n#pragma unroll\nfor (int j = 0 ; j < BLOCK_SIZE ; j++)\n{\nDIST(s_query[lidy * BLOCK_SIZE_ODD + j], s_train[j * BLOCK_SIZE_ODD + lidx]);\n}\nreturn DIST_RES(result);\n}\ninline result_type reduce_block_match(\n__local value_type *s_query,\n__local value_type *s_train,\nint lidx,\nint lidy\n)\n{\nresult_type result = 0;\n#pragma unroll\nfor (int j = 0 ; j < BLOCK_SIZE ; j++)\n{\nDIST(s_query[lidy * BLOCK_SIZE_ODD + j], s_train[j * BLOCK_SIZE_ODD + lidx]);\n}\nreturn result;\n}\ninline result_type reduce_multi_block(\n__local value_type *s_query,\n__local value_type *s_train,\nint block_index,\nint lidx,\nint lidy\n)\n{\nresult_type result = 0;\n#pragma unroll\nfor (int j = 0 ; j < BLOCK_SIZE ; j++)\n{\nDIST(s_query[lidy * MAX_DESC_LEN + block_index * BLOCK_SIZE + j], s_train[j * BLOCK_SIZE + lidx]);\n}\nreturn result;\n}\n__kernel void BruteForceMatch_Match(\n__global T *query,\n__global T *train,\n__global int *bestTrainIdx,\n__global float *bestDistance,\nint query_rows,\nint query_cols,\nint train_rows,\nint train_cols,\nint step\n)\n{\nconst int lidx = get_local_id(0);\nconst int lidy = get_local_id(1);\nconst int groupidx = get_group_id(0);\nconst int queryIdx = mad24(BLOCK_SIZE, groupidx, lidy);\nconst int queryOffset = min(queryIdx, query_rows - 1) * step;\n__global TN *query_vec = (__global TN *)(query + queryOffset);\nquery_cols /= kercn;\n__local float sharebuffer[SHARED_MEM_SZ];\n__local value_type *s_query = (__local value_type *)sharebuffer;\n#if 0 < MAX_DESC_LEN\n__local value_type *s_train = (__local value_type *)sharebuffer + BLOCK_SIZE * MAX_DESC_LEN;\n#pragma unroll\nfor (int i = 0; i < MAX_DESC_LEN / BLOCK_SIZE; i++)\n{\nconst int loadx = mad24(BLOCK_SIZE, i, lidx);\ns_query[mad24(MAX_DESC_LEN, lidy, loadx)] = loadx < query_cols ? query_vec[loadx] : 0;\n}\n#else\n__local value_type *s_train = (__local value_type *)sharebuffer + BLOCK_SIZE_ODD * BLOCK_SIZE;\nconst int s_query_i = mad24(BLOCK_SIZE_ODD, lidy, lidx);\nconst int s_train_i = mad24(BLOCK_SIZE_ODD, lidx, lidy);\n#endif\nfloat myBestDistance = MAX_FLOAT;\nint myBestTrainIdx = -1;\nfor (int t = 0, endt = (train_rows + BLOCK_SIZE - 1) / BLOCK_SIZE; t < endt; t++)\n{\nresult_type result = 0;\nconst int trainOffset = min(mad24(BLOCK_SIZE, t, lidy), train_rows - 1) * step;\n__global TN *train_vec = (__global TN *)(train + trainOffset);\n#if 0 < MAX_DESC_LEN\n#pragma unroll\nfor (int i = 0; i < MAX_DESC_LEN / BLOCK_SIZE; i++)\n{\nconst int loadx = mad24(BLOCK_SIZE, i, lidx);\ns_train[mad24(BLOCK_SIZE, lidx, lidy)] = loadx < train_cols ? train_vec[loadx] : 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nresult += reduce_multi_block(s_query, s_train, i, lidx, lidy);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#else\nfor (int i = 0, endq = (query_cols + BLOCK_SIZE - 1) / BLOCK_SIZE; i < endq; i++)\n{\nconst int loadx = mad24(i, BLOCK_SIZE, lidx);\nif (loadx < query_cols)\n{\ns_query[s_query_i] = query_vec[loadx];\ns_train[s_train_i] = train_vec[loadx];\n}\nelse\n{\ns_query[s_query_i] = 0;\ns_train[s_train_i] = 0;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nresult += reduce_block_match(s_query, s_train, lidx, lidy);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#endif\nresult = DIST_RES(result);\nconst int trainIdx = mad24(BLOCK_SIZE, t, lidx);\nif (queryIdx < query_rows && trainIdx < train_rows && result < myBestDistance )\n{\nmyBestDistance = result;\nmyBestTrainIdx = trainIdx;\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n__local float *s_distance = (__local float *)sharebuffer;\n__local int *s_trainIdx = (__local int *)(sharebuffer + BLOCK_SIZE_ODD * BLOCK_SIZE);\ns_distance += lidy * BLOCK_SIZE_ODD;\ns_trainIdx += lidy * BLOCK_SIZE_ODD;\ns_distance[lidx] = myBestDistance;\ns_trainIdx[lidx] = myBestTrainIdx;\nbarrier(CLK_LOCAL_MEM_FENCE);\n#pragma unroll\nfor (int k = 0 ; k < BLOCK_SIZE; k++)\n{\nif (myBestDistance > s_distance[k])\n{\nmyBestDistance = s_distance[k];\nmyBestTrainIdx = s_trainIdx[k];\n}\n}\nif (queryIdx < query_rows && lidx == 0)\n{\nbestTrainIdx[queryIdx] = myBestTrainIdx;\nbestDistance[queryIdx] = myBestDistance;\n}\n}\n__kernel void BruteForceMatch_RadiusMatch(\n__global T *query,\n__global T *train,\nfloat maxDistance,\n__global int *bestTrainIdx,\n__global float *bestDistance,\n__global int *nMatches,\nint query_rows,\nint query_cols,\nint train_rows,\nint train_cols,\nint bestTrainIdx_cols,\nint step,\nint ostep\n)\n{\nconst int lidx = get_local_id(0);\nconst int lidy = get_local_id(1);\nconst int groupidx = get_group_id(0);\nconst int groupidy = get_group_id(1);\nconst int queryIdx = mad24(BLOCK_SIZE, groupidy, lidy);\nconst int queryOffset = min(queryIdx, query_rows - 1) * step;\n__global TN *query_vec = (__global TN *)(query + queryOffset);\nconst int trainIdx = mad24(BLOCK_SIZE, groupidx, lidx);\nconst int trainOffset = min(mad24(BLOCK_SIZE, groupidx, lidy), train_rows - 1) * step;\n__global TN *train_vec = (__global TN *)(train + trainOffset);\nquery_cols /= kercn;\n__local float sharebuffer[SHARED_MEM_SZ];\n__local value_type *s_query = (__local value_type *)sharebuffer;\n__local value_type *s_train = (__local value_type *)sharebuffer + BLOCK_SIZE_ODD * BLOCK_SIZE;\nresult_type result = 0;\nconst int s_query_i = mad24(BLOCK_SIZE_ODD, lidy, lidx);\nconst int s_train_i = mad24(BLOCK_SIZE_ODD, lidx, lidy);\nfor (int i = 0 ; i < (query_cols + BLOCK_SIZE - 1) / BLOCK_SIZE ; ++i)\n{\nconst int loadx = mad24(BLOCK_SIZE, i, lidx);\nif (loadx < query_cols)\n{\ns_query[s_query_i] = query_vec[loadx];\ns_train[s_train_i] = train_vec[loadx];\n}\nelse\n{\ns_query[s_query_i] = 0;\ns_train[s_train_i] = 0;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nresult += reduce_block(s_query, s_train, lidx, lidy);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\nif (queryIdx < query_rows && trainIdx < train_rows && convert_float(result) < maxDistance)\n{\nint ind = atom_inc(nMatches + queryIdx);\nif(ind < bestTrainIdx_cols)\n{\nbestTrainIdx[mad24(queryIdx, ostep, ind)] = trainIdx;\nbestDistance[mad24(queryIdx, ostep, ind)] = result;\n}\n}\n}\n__kernel void BruteForceMatch_knnMatch(\n__global T *query,\n__global T *train,\n__global int2 *bestTrainIdx,\n__global float2 *bestDistance,\nint query_rows,\nint query_cols,\nint train_rows,\nint train_cols,\nint step\n)\n{\nconst int lidx = get_local_id(0);\nconst int lidy = get_local_id(1);\nconst int groupidx = get_group_id(0);\nconst int queryIdx = mad24(BLOCK_SIZE, groupidx, lidy);\nconst int queryOffset = min(queryIdx, query_rows - 1) * step;\n__global TN *query_vec = (__global TN *)(query + queryOffset);\nquery_cols /= kercn;\n__local float sharebuffer[SHARED_MEM_SZ];\n__local value_type *s_query = (__local value_type *)sharebuffer;\n#if 0 < MAX_DESC_LEN\n__local value_type *s_train = (__local value_type *)sharebuffer + BLOCK_SIZE * MAX_DESC_LEN;\n#pragma unroll\nfor (int i = 0 ;  i <  MAX_DESC_LEN / BLOCK_SIZE; i ++)\n{\nint loadx = mad24(BLOCK_SIZE, i, lidx);\ns_query[mad24(MAX_DESC_LEN, lidy, loadx)] = loadx < query_cols ? query_vec[loadx] : 0;\n}\n#else\n__local value_type *s_train = (__local value_type *)sharebuffer + BLOCK_SIZE_ODD * BLOCK_SIZE;\nconst int s_query_i = mad24(BLOCK_SIZE_ODD, lidy, lidx);\nconst int s_train_i = mad24(BLOCK_SIZE_ODD, lidx, lidy);\n#endif\nfloat myBestDistance1 = MAX_FLOAT;\nfloat myBestDistance2 = MAX_FLOAT;\nint myBestTrainIdx1 = -1;\nint myBestTrainIdx2 = -1;\nfor (int t = 0, endt = (train_rows + BLOCK_SIZE - 1) / BLOCK_SIZE; t < endt ; t++)\n{\nresult_type result = 0;\nint trainOffset = min(mad24(BLOCK_SIZE, t, lidy), train_rows - 1) * step;\n__global TN *train_vec = (__global TN *)(train + trainOffset);\n#if 0 < MAX_DESC_LEN\n#pragma unroll\nfor (int i = 0 ; i < MAX_DESC_LEN / BLOCK_SIZE ; i++)\n{\nconst int loadx = mad24(BLOCK_SIZE, i, lidx);\ns_train[mad24(BLOCK_SIZE, lidx, lidy)] = loadx < train_cols ? train_vec[loadx] : 0;\nbarrier(CLK_LOCAL_MEM_FENCE);\nresult += reduce_multi_block(s_query, s_train, i, lidx, lidy);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#else\nfor (int i = 0, endq = (query_cols + BLOCK_SIZE -1) / BLOCK_SIZE; i < endq ; i++)\n{\nconst int loadx = mad24(BLOCK_SIZE, i, lidx);\nif (loadx < query_cols)\n{\ns_query[s_query_i] = query_vec[loadx];\ns_train[s_train_i] = train_vec[loadx];\n}\nelse\n{\ns_query[s_query_i] = 0;\ns_train[s_train_i] = 0;\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nresult += reduce_block_match(s_query, s_train, lidx, lidy);\nbarrier(CLK_LOCAL_MEM_FENCE);\n}\n#endif\nresult = DIST_RES(result);\nconst int trainIdx = mad24(BLOCK_SIZE, t, lidx);\nif (queryIdx < query_rows && trainIdx < train_rows)\n{\nif (result < myBestDistance1)\n{\nmyBestDistance2 = myBestDistance1;\nmyBestTrainIdx2 = myBestTrainIdx1;\nmyBestDistance1 = result;\nmyBestTrainIdx1 = trainIdx;\n}\nelse if (result < myBestDistance2)\n{\nmyBestDistance2 = result;\nmyBestTrainIdx2 = trainIdx;\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\n__local float *s_distance = (__local float *)sharebuffer;\n__local int *s_trainIdx = (__local int *)(sharebuffer + BLOCK_SIZE_ODD * BLOCK_SIZE);\ns_distance += lidy * BLOCK_SIZE_ODD;\ns_trainIdx += lidy * BLOCK_SIZE_ODD;\ns_distance[lidx] = myBestDistance1;\ns_trainIdx[lidx] = myBestTrainIdx1;\nfloat bestDistance1 = MAX_FLOAT;\nfloat bestDistance2 = MAX_FLOAT;\nint bestTrainIdx1 = -1;\nint bestTrainIdx2 = -1;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lidx == 0)\n{\nfor (int i = 0 ; i < BLOCK_SIZE ; i++)\n{\nfloat val = s_distance[i];\nif (val < bestDistance1)\n{\nbestDistance2 = bestDistance1;\nbestTrainIdx2 = bestTrainIdx1;\nbestDistance1 = val;\nbestTrainIdx1 = s_trainIdx[i];\n}\nelse if (val < bestDistance2)\n{\nbestDistance2 = val;\nbestTrainIdx2 = s_trainIdx[i];\n}\n}\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\ns_distance[lidx] = myBestDistance2;\ns_trainIdx[lidx] = myBestTrainIdx2;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lidx == 0)\n{\nfor (int i = 0 ; i < BLOCK_SIZE ; i++)\n{\nfloat val = s_distance[i];\nif (val < bestDistance2)\n{\nbestDistance2 = val;\nbestTrainIdx2 = s_trainIdx[i];\n}\n}\n}\nmyBestDistance1 = bestDistance1;\nmyBestDistance2 = bestDistance2;\nmyBestTrainIdx1 = bestTrainIdx1;\nmyBestTrainIdx2 = bestTrainIdx2;\nif (queryIdx < query_rows && lidx == 0)\n{\nbestTrainIdx[queryIdx] = (int2)(myBestTrainIdx1, myBestTrainIdx2);\nbestDistance[queryIdx] = (float2)(myBestDistance1, myBestDistance2);\n}\n}\n", "inline int cornerScore(__global const uchar* img, int step)\n{\nint k, tofs, v = img[0], a0 = 0, b0;\nint d[16];\n#define LOAD2(idx, ofs) \\\ntofs = ofs; d[idx] = (short)(v - img[tofs]); d[idx+8] = (short)(v - img[-tofs])\nLOAD2(0, 3);\nLOAD2(1, -step+3);\nLOAD2(2, -step*2+2);\nLOAD2(3, -step*3+1);\nLOAD2(4, -step*3);\nLOAD2(5, -step*3-1);\nLOAD2(6, -step*2-2);\nLOAD2(7, -step-3);\n#pragma unroll\nfor( k = 0; k < 16; k += 2 )\n{\nint a = min((int)d[(k+1)&15], (int)d[(k+2)&15]);\na = min(a, (int)d[(k+3)&15]);\na = min(a, (int)d[(k+4)&15]);\na = min(a, (int)d[(k+5)&15]);\na = min(a, (int)d[(k+6)&15]);\na = min(a, (int)d[(k+7)&15]);\na = min(a, (int)d[(k+8)&15]);\na0 = max(a0, min(a, (int)d[k&15]));\na0 = max(a0, min(a, (int)d[(k+9)&15]));\n}\nb0 = -a0;\n#pragma unroll\nfor( k = 0; k < 16; k += 2 )\n{\nint b = max((int)d[(k+1)&15], (int)d[(k+2)&15]);\nb = max(b, (int)d[(k+3)&15]);\nb = max(b, (int)d[(k+4)&15]);\nb = max(b, (int)d[(k+5)&15]);\nb = max(b, (int)d[(k+6)&15]);\nb = max(b, (int)d[(k+7)&15]);\nb = max(b, (int)d[(k+8)&15]);\nb0 = min(b0, max(b, (int)d[k]));\nb0 = min(b0, max(b, (int)d[(k+9)&15]));\n}\nreturn -b0-1;\n}\n__kernel\nvoid FAST_findKeypoints(\n__global const uchar * _img, int step, int img_offset,\nint img_rows, int img_cols,\nvolatile __global int* kp_loc,\nint max_keypoints, int threshold )\n{\nint j = get_global_id(0) + 3;\nint i = get_global_id(1) + 3;\nif (i < img_rows - 3 && j < img_cols - 3)\n{\n__global const uchar* img = _img + mad24(i, step, j + img_offset);\nint v = img[0], t0 = v - threshold, t1 = v + threshold;\nint k, tofs, v0, v1;\nint m0 = 0, m1 = 0;\n#define UPDATE_MASK(idx, ofs) \\\ntofs = ofs; v0 = img[tofs]; v1 = img[-tofs]; \\\nm0 |= ((v0 < t0) << idx) | ((v1 < t0) << (8 + idx)); \\\nm1 |= ((v0 > t1) << idx) | ((v1 > t1) << (8 + idx))\nUPDATE_MASK(0, 3);\nif( (m0 | m1) == 0 )\nreturn;\nUPDATE_MASK(2, -step*2+2);\nUPDATE_MASK(4, -step*3);\nUPDATE_MASK(6, -step*2-2);\n#define EVEN_MASK (1+4+16+64)\nif( ((m0 | (m0 >> 8)) & EVEN_MASK) != EVEN_MASK &&\n((m1 | (m1 >> 8)) & EVEN_MASK) != EVEN_MASK )\nreturn;\nUPDATE_MASK(1, -step+3);\nUPDATE_MASK(3, -step*3+1);\nUPDATE_MASK(5, -step*3-1);\nUPDATE_MASK(7, -step-3);\nif( ((m0 | (m0 >> 8)) & 255) != 255 &&\n((m1 | (m1 >> 8)) & 255) != 255 )\nreturn;\nm0 |= m0 << 16;\nm1 |= m1 << 16;\n#define CHECK0(i) ((m0 & (511 << i)) == (511 << i))\n#define CHECK1(i) ((m1 & (511 << i)) == (511 << i))\nif( CHECK0(0) + CHECK0(1) + CHECK0(2) + CHECK0(3) +\nCHECK0(4) + CHECK0(5) + CHECK0(6) + CHECK0(7) +\nCHECK0(8) + CHECK0(9) + CHECK0(10) + CHECK0(11) +\nCHECK0(12) + CHECK0(13) + CHECK0(14) + CHECK0(15) +\nCHECK1(0) + CHECK1(1) + CHECK1(2) + CHECK1(3) +\nCHECK1(4) + CHECK1(5) + CHECK1(6) + CHECK1(7) +\nCHECK1(8) + CHECK1(9) + CHECK1(10) + CHECK1(11) +\nCHECK1(12) + CHECK1(13) + CHECK1(14) + CHECK1(15) == 0 )\nreturn;\n{\nint idx = atomic_inc(kp_loc);\nif( idx < max_keypoints )\n{\nkp_loc[1 + 2*idx] = j;\nkp_loc[2 + 2*idx] = i;\n}\n}\n}\n}\n__kernel\nvoid FAST_nonmaxSupression(\n__global const int* kp_in, volatile __global int* kp_out,\n__global const uchar * _img, int step, int img_offset,\nint rows, int cols, int counter, int max_keypoints)\n{\nconst int idx = get_global_id(0);\nif (idx < counter)\n{\nint x = kp_in[1 + 2*idx];\nint y = kp_in[2 + 2*idx];\n__global const uchar* img = _img + mad24(y, step, x + img_offset);\nint s = cornerScore(img, step);\nif( (x < 4 || s > cornerScore(img-1, step)) +\n(y < 4 || s > cornerScore(img-step, step)) != 2 )\nreturn;\nif( (x >= cols - 4 || s > cornerScore(img+1, step)) +\n(y >= rows - 4 || s > cornerScore(img+step, step)) +\n(x < 4 || y < 4 || s > cornerScore(img-step-1, step)) +\n(x >= cols - 4 || y < 4 || s > cornerScore(img-step+1, step)) +\n(x < 4 || y >= rows - 4 || s > cornerScore(img+step-1, step)) +\n(x >= cols - 4 || y >= rows - 4 || s > cornerScore(img+step+1, step)) == 6)\n{\nint new_idx = atomic_inc(kp_out);\nif( new_idx < max_keypoints )\n{\nkp_out[1 + 3*new_idx] = x;\nkp_out[2 + 3*new_idx] = y;\nkp_out[3 + 3*new_idx] = s;\n}\n}\n}\n}\n", "#define LAYERINFO_SIZE 1\n#define LAYERINFO_OFS 0\n#define KEYPOINT_SIZE 3\n#define ORIENTED_KEYPOINT_SIZE 4\n#define KEYPOINT_X 0\n#define KEYPOINT_Y 1\n#define KEYPOINT_Z 2\n#define KEYPOINT_ANGLE 3\n#ifdef ORB_RESPONSES\n__kernel void\nORB_HarrisResponses(__global const uchar* imgbuf, int imgstep, int imgoffset0,\n__global const int* layerinfo, __global const int* keypoints,\n__global float* responses, int nkeypoints )\n{\nint idx = get_global_id(0);\nif( idx < nkeypoints )\n{\n__global const int* kpt = keypoints + idx*KEYPOINT_SIZE;\n__global const int* layer = layerinfo + kpt[KEYPOINT_Z]*LAYERINFO_SIZE;\n__global const uchar* img = imgbuf + imgoffset0 + layer[LAYERINFO_OFS] +\n(kpt[KEYPOINT_Y] - blockSize/2)*imgstep + (kpt[KEYPOINT_X] - blockSize/2);\nint i, j;\nint a = 0, b = 0, c = 0;\nfor( i = 0; i < blockSize; i++, img += imgstep-blockSize )\n{\nfor( j = 0; j < blockSize; j++, img++ )\n{\nint Ix = (img[1] - img[-1])*2 + img[-imgstep+1] - img[-imgstep-1] + img[imgstep+1] - img[imgstep-1];\nint Iy = (img[imgstep] - img[-imgstep])*2 + img[imgstep-1] - img[-imgstep-1] + img[imgstep+1] - img[-imgstep+1];\na += Ix*Ix;\nb += Iy*Iy;\nc += Ix*Iy;\n}\n}\nresponses[idx] = ((float)a * b - (float)c * c - HARRIS_K * (float)(a + b) * (a + b))*scale_sq_sq;\n}\n}\n#endif\n#ifdef ORB_ANGLES\n#define _DBL_EPSILON 2.2204460492503131e-16f\n#define atan2_p1 (0.9997878412794807f*57.29577951308232f)\n#define atan2_p3 (-0.3258083974640975f*57.29577951308232f)\n#define atan2_p5 (0.1555786518463281f*57.29577951308232f)\n#define atan2_p7 (-0.04432655554792128f*57.29577951308232f)\ninline float fastAtan2( float y, float x )\n{\nfloat ax = fabs(x), ay = fabs(y);\nfloat a, c, c2;\nif( ax >= ay )\n{\nc = ay/(ax + _DBL_EPSILON);\nc2 = c*c;\na = (((atan2_p7*c2 + atan2_p5)*c2 + atan2_p3)*c2 + atan2_p1)*c;\n}\nelse\n{\nc = ax/(ay + _DBL_EPSILON);\nc2 = c*c;\na = 90.f - (((atan2_p7*c2 + atan2_p5)*c2 + atan2_p3)*c2 + atan2_p1)*c;\n}\nif( x < 0 )\na = 180.f - a;\nif( y < 0 )\na = 360.f - a;\nreturn a;\n}\n__kernel void\nORB_ICAngle(__global const uchar* imgbuf, int imgstep, int imgoffset0,\n__global const int* layerinfo, __global const int* keypoints,\n__global float* responses, const __global int* u_max,\nint nkeypoints, int half_k )\n{\nint idx = get_global_id(0);\nif( idx < nkeypoints )\n{\n__global const int* kpt = keypoints + idx*KEYPOINT_SIZE;\n__global const int* layer = layerinfo + kpt[KEYPOINT_Z]*LAYERINFO_SIZE;\n__global const uchar* center = imgbuf + imgoffset0 + layer[LAYERINFO_OFS] +\nkpt[KEYPOINT_Y]*imgstep + kpt[KEYPOINT_X];\nint u, v, m_01 = 0, m_10 = 0;\nfor( u = -half_k; u <= half_k; u++ )\nm_10 += u * center[u];\nfor( v = 1; v <= half_k; v++ )\n{\nint v_sum = 0;\nint d = u_max[v];\nfor( u = -d; u <= d; u++ )\n{\nint val_plus = center[u + v*imgstep], val_minus = center[u - v*imgstep];\nv_sum += (val_plus - val_minus);\nm_10 += u * (val_plus + val_minus);\n}\nm_01 += v * v_sum;\n}\nresponses[idx] = fastAtan2((float)m_01, (float)m_10);\n}\n}\n#endif\n#ifdef ORB_DESCRIPTORS\n__kernel void\nORB_computeDescriptor(__global const uchar* imgbuf, int imgstep, int imgoffset0,\n__global const int* layerinfo, __global const int* keypoints,\n__global uchar* _desc, const __global int* pattern,\nint nkeypoints, int dsize )\n{\nint idx = get_global_id(0);\nif( idx < nkeypoints )\n{\nint i;\n__global const int* kpt = keypoints + idx*ORIENTED_KEYPOINT_SIZE;\n__global const int* layer = layerinfo + kpt[KEYPOINT_Z]*LAYERINFO_SIZE;\n__global const uchar* center = imgbuf + imgoffset0 + layer[LAYERINFO_OFS] +\nkpt[KEYPOINT_Y]*imgstep + kpt[KEYPOINT_X];\nfloat angle = as_float(kpt[KEYPOINT_ANGLE]);\nangle *= 0.01745329251994329547f;\nfloat cosa;\nfloat sina = sincos(angle, &cosa);\n__global uchar* desc = _desc + idx*dsize;\n#define GET_VALUE(idx) \\\ncenter[mad24(convert_int_rte(pattern[(idx)*2] * sina + pattern[(idx)*2+1] * cosa), imgstep, \\\nconvert_int_rte(pattern[(idx)*2] * cosa - pattern[(idx)*2+1] * sina))]\nfor( i = 0; i < dsize; i++ )\n{\nint val;\n#if WTA_K == 2\nint t0, t1;\nt0 = GET_VALUE(0); t1 = GET_VALUE(1);\nval = t0 < t1;\nt0 = GET_VALUE(2); t1 = GET_VALUE(3);\nval |= (t0 < t1) << 1;\nt0 = GET_VALUE(4); t1 = GET_VALUE(5);\nval |= (t0 < t1) << 2;\nt0 = GET_VALUE(6); t1 = GET_VALUE(7);\nval |= (t0 < t1) << 3;\nt0 = GET_VALUE(8); t1 = GET_VALUE(9);\nval |= (t0 < t1) << 4;\nt0 = GET_VALUE(10); t1 = GET_VALUE(11);\nval |= (t0 < t1) << 5;\nt0 = GET_VALUE(12); t1 = GET_VALUE(13);\nval |= (t0 < t1) << 6;\nt0 = GET_VALUE(14); t1 = GET_VALUE(15);\nval |= (t0 < t1) << 7;\npattern += 16*2;\n#elif WTA_K == 3\nint t0, t1, t2;\nt0 = GET_VALUE(0); t1 = GET_VALUE(1); t2 = GET_VALUE(2);\nval = t2 > t1 ? (t2 > t0 ? 2 : 0) : (t1 > t0);\nt0 = GET_VALUE(3); t1 = GET_VALUE(4); t2 = GET_VALUE(5);\nval |= (t2 > t1 ? (t2 > t0 ? 2 : 0) : (t1 > t0)) << 2;\nt0 = GET_VALUE(6); t1 = GET_VALUE(7); t2 = GET_VALUE(8);\nval |= (t2 > t1 ? (t2 > t0 ? 2 : 0) : (t1 > t0)) << 4;\nt0 = GET_VALUE(9); t1 = GET_VALUE(10); t2 = GET_VALUE(11);\nval |= (t2 > t1 ? (t2 > t0 ? 2 : 0) : (t1 > t0)) << 6;\npattern += 12*2;\n#elif WTA_K == 4\nint t0, t1, t2, t3, k;\nint a, b;\nt0 = GET_VALUE(0); t1 = GET_VALUE(1);\nt2 = GET_VALUE(2); t3 = GET_VALUE(3);\na = 0, b = 2;\nif( t1 > t0 ) t0 = t1, a = 1;\nif( t3 > t2 ) t2 = t3, b = 3;\nk = t0 > t2 ? a : b;\nval = k;\nt0 = GET_VALUE(4); t1 = GET_VALUE(5);\nt2 = GET_VALUE(6); t3 = GET_VALUE(7);\na = 0, b = 2;\nif( t1 > t0 ) t0 = t1, a = 1;\nif( t3 > t2 ) t2 = t3, b = 3;\nk = t0 > t2 ? a : b;\nval |= k << 2;\nt0 = GET_VALUE(8); t1 = GET_VALUE(9);\nt2 = GET_VALUE(10); t3 = GET_VALUE(11);\na = 0, b = 2;\nif( t1 > t0 ) t0 = t1, a = 1;\nif( t3 > t2 ) t2 = t3, b = 3;\nk = t0 > t2 ? a : b;\nval |= k << 4;\nt0 = GET_VALUE(12); t1 = GET_VALUE(13);\nt2 = GET_VALUE(14); t3 = GET_VALUE(15);\na = 0, b = 2;\nif( t1 > t0 ) t0 = t1, a = 1;\nif( t3 > t2 ) t2 = t3, b = 3;\nk = t0 > t2 ? a : b;\nval |= k << 6;\npattern += 16*2;\n#else\n#error \"unknown/undefined WTA_K value; should be 2, 3 or 4\"\n#endif\ndesc[i] = (uchar)val;\n}\n}\n}\n#endif\n", "a7c2cfaeda19907b637211b1cc91d253", "f5e6f463f21a7ed77bd4d2c753478305", "35c3a1e231d446e4088561e3604fb94f", "/builds/master_pack-android/opencv/modules/calib3d/src/calibinit.cpp", "objectPoints should contain vector of vectors of points of type Point3f", "/builds/master_pack-android/opencv/modules/calib3d/src/calibration.cpp", "imagePoints1 should contain vector of vectors of points of type Point2f", "nimages > 0 && nimages == (int)imagePoints1.total() && (!imgPtMat2 || nimages == (int)imagePoints2.total())", "CV_ARE_TYPES_EQ(A, B) && (CV_MAT_TYPE(A->type) == CV_32F || CV_MAT_TYPE(A->type) == CV_64F)", "CV_ARE_TYPES_EQ(A, dABdA) && dABdA->rows == A->rows*B->cols && dABdA->cols == A->rows*A->cols", "CV_ARE_TYPES_EQ(A, dABdB) && dABdB->rows == A->rows*B->cols && dABdB->cols == B->rows*B->cols", "Output matrix must be 3x3, single-channel floating point matrix", "Output matrix must be 1x3 or 3x1", "CV_MAT_TYPE(_rvec1->type) == CV_32F || CV_MAT_TYPE(_rvec1->type) == CV_64F", "_rvec1->rows == 3 && _rvec1->cols == 1 && CV_ARE_SIZES_EQ(_rvec1, _rvec2)", "CV_ARE_SIZES_EQ(_tvec1, _tvec2) && CV_ARE_SIZES_EQ(_tvec1, _rvec1)", "Some of parameters is a NULL pointer!", "stype == CV_8UC1 || stype == CV_16SC1 || stype == CV_32SC1 || stype == CV_32FC1", "dtype == CV_16SC3 || dtype == CV_32SC3 || dtype == CV_32FC3", "CV_IS_MAT(matrixM) && CV_IS_MAT(matrixR) && CV_IS_MAT(matrixQ) && matrixM->cols == 3 && matrixM->rows == 3 && CV_ARE_SIZES_EQ(matrixM, matrixR) && CV_ARE_SIZES_EQ(matrixM, matrixQ)", "One of required arguments is not a valid matrix", "Homogeneous coordinates are not supported", "Rotation must be represented by 1x3 or 3x1 floating-point rotation vector, or 3x3 rotation matrix", "Translation vector must be 1x3 or 3x1 floating-point vector", "Instrinsic parameters must be 3x3 floating-point matrix", "Distortion coefficients must be 1x4, 4x1, 1x5, 5x1, 1x8, 8x1, 1x12 or 12x1 floating-point vector", "dp/drot must be 2Nx3 floating-point matrix", "dp/dT must be 2Nx3 floating-point matrix", "dp/df must be 2Nx2 floating-point matrix", "dp/dc must be 2Nx2 floating-point matrix", "distCoeffs is NULL while dpdk is not", "dp/df must be 2Nx12, 2Nx8, 2Nx5, 2Nx4 or 2Nx2 floating-point matrix", "CV_IS_MAT(objectPoints) && CV_IS_MAT(imagePoints) && CV_IS_MAT(A) && CV_IS_MAT(rvec) && CV_IS_MAT(tvec)", "(CV_MAT_DEPTH(rvec->type) == CV_64F || CV_MAT_DEPTH(rvec->type) == CV_32F) && (rvec->rows == 1 || rvec->cols == 1) && rvec->rows*rvec->cols*CV_MAT_CN(rvec->type) == 3", "(CV_MAT_DEPTH(tvec->type) == CV_64F || CV_MAT_DEPTH(tvec->type) == CV_32F) && (tvec->rows == 1 || tvec->cols == 1) && tvec->rows*tvec->cols*CV_MAT_CN(tvec->type) == 3", "Both object points and image points must be 2D", "object points and image points must be a single-row matrices", "One of required vector arguments is not a valid matrix", "image width and height must be positive", "the array of point counters must be 1-dimensional integer vector", "Thin prism model must have 12 parameters in the distortion matrix", "the output array of translation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of views", "Intrinsic parameters must be 3x3 floating-point matrix", "The number of points in the view #%d is < 4", "Focal length (fx and fy) must be positive", "Principal point must be within the image", "Non-zero skew is not supported by the function", "The intrinsic matrix must have [fx 0 cx; 0 fy cy; 0 0 1] shape", "The specified aspect ratio (= cameraMatrix[0][0] / cameraMatrix[1][1]) is incorrect", "For non-planar calibration rigs the initial intrinsic matrix must be specified", "the output array of rotation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 or nx9 array, where n is the number of views", "CV_IS_MAT(_imagePoints1) && CV_IS_MAT(_imagePoints2) && CV_IS_MAT(_objectPoints) && CV_IS_MAT(_npoints) && CV_IS_MAT(matR) && CV_IS_MAT(matT)", "CV_ARE_TYPES_EQ(_imagePoints1, _imagePoints2) && CV_ARE_DEPTHS_EQ(_imagePoints1, _objectPoints)", "(_npoints->cols == 1 || _npoints->rows == 1) && CV_MAT_TYPE(_npoints->type) == CV_32SC1", "(CV_MAT_DEPTH(_imagePoints1->type) == CV_32F || CV_MAT_DEPTH(_imagePoints1->type) == CV_64F) && ((_imagePoints1->rows == pointsTotal && _imagePoints1->cols*cn == 2) || (_imagePoints1->rows == 1 && _imagePoints1->cols == pointsTotal && cn == 2))", "CV_IS_MAT(_points1) && CV_IS_MAT(_points2) && (_points1->rows == 1 || _points1->cols == 1) && (_points2->rows == 1 || _points2->cols == 1) && CV_ARE_SIZES_EQ(_points1, _points2)", "/builds/master_pack-android/opencv/modules/calib3d/src/checkchessboard.cpp", "supports single-channel images only", "/builds/master_pack-android/opencv/modules/calib3d/src/circlesgrid.cpp", "basisGraphs[0].getVerticesCount() == basisGraphs[1].getVerticesCount()", "largeHoles != 0 && smallHoles != 0", "Number of basis graphs is not 2", "/builds/master_pack-android/opencv/modules/calib3d/src/compat_ptsetreg.cpp", "FM0.cols == 3 && FM0.rows % 3 == 0 && FM.cols == 3 && FM.rows % 3 == 0 && FM.channels() == 1", "/builds/master_pack-android/opencv/modules/calib3d/src/compat_stereo.cpp", "/builds/master_pack-android/opencv/modules/calib3d/src/fisheye.cpp", "K.size() == Size(3,3) && (K.type() == CV_32F || K.type() == CV_64F) && D.total() == 4", "_tvec.getMat().isContinuous() && _rvec.getMat().isContinuous()", "objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3", "_rvec.total() * _rvec.channels() == 3 && (_rvec.depth() == CV_32F || _rvec.depth() == CV_64F)", "_tvec.total() * _tvec.channels() == 3 && (_tvec.depth() == CV_32F || _tvec.depth() == CV_64F)", "_K.size() == Size(3,3) && (_K.type() == CV_32F || _K.type() == CV_64F) && _D.type() == _K.type() && _D.total() == 4", "R.empty() || R.size() == Size(3, 3) || R.total() * R.channels() == 3", "D.total() == 4 && K.size() == Size(3, 3) && (K.depth() == CV_32F || K.depth() == CV_64F)", "K.size() == Size(3, 3) && (K.depth() == CV_32F || K.depth() == CV_64F)", "(D.empty() || D.total() == 4) && (D.depth() == CV_32F || D.depth() == CV_64F || D.empty())", "(_R.size() == Size(3, 3) || _R.total() * _R.channels() == 3) && (_R.depth() == CV_32F || _R.depth() == CV_64F)", "m1type == CV_16SC2 || m1type == CV_32F || m1type <=0", "(K.depth() == CV_32F || K.depth() == CV_64F) && (D.depth() == CV_32F || D.depth() == CV_64F)", "(P.depth() == CV_32F || P.depth() == CV_64F) && (R.depth() == CV_32F || R.depth() == CV_64F)", "!objectPoints.empty() && objectPoints.type() == CV_64FC3", "!imagePoints.empty() && imagePoints.type() == CV_64FC2", "svd.w.at<double>(0) / svd.w.at<double>((int)svd.w.total() - 1) < thresh_cond", "!objectPoints.empty() && (objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3)", "!imagePoints.empty() && (imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2)", "omc.type() == CV_64FC3 || Tc.type() == CV_64FC3", "data && dims <= 2 && (rows == 1 || cols == 1) && rows + cols - 1 == n && channels() == 1", "svd.w.at<double>(0) / svd.w.at<double>(svd.w.rows - 1) < thresh_cond", "!omc.empty() && omc.type() == CV_64FC3", "!Tc.empty() && Tc.type() == CV_64FC3", "(!K.empty() && K.size() == Size(3,3)) || K.empty()", "!objectPoints.empty() && !imagePoints.empty() && objectPoints.total() == imagePoints.total()", "imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2", "(!D.empty() && D.total() == 4) || D.empty()", "(!rvecs.empty() && rvecs.channels() == 3) || rvecs.empty()", "(!tvecs.empty() && tvecs.channels() == 3) || tvecs.empty()", "((flags & CALIB_USE_INTRINSIC_GUESS) && !K.empty() && !D.empty()) || !(flags & CALIB_USE_INTRINSIC_GUESS)", "(!K1.empty() && K1.size() == Size(3,3)) || K1.empty()", "(!K2.empty() && K1.size() == Size(3,3)) || K2.empty()", "!objectPoints.empty() && !imagePoints1.empty() && !imagePoints2.empty()", "objectPoints.total() == imagePoints1.total() || imagePoints1.total() == imagePoints2.total()", "imagePoints1.type() == CV_32FC2 || imagePoints1.type() == CV_64FC2", "imagePoints2.type() == CV_32FC2 || imagePoints2.type() == CV_64FC2", "(!D1.empty() && D1.total() == 4) || D1.empty()", "(!D2.empty() && D1.total() == 4) || D2.empty()", "((flags & CALIB_FIX_INTRINSIC) && !K1.empty() && !K2.empty() && !D1.empty() && !D2.empty()) || !(flags & CALIB_FIX_INTRINSIC)", "npoints >= 5 && points2.checkVector(2) == npoints && points1.type() == points2.type()", "/builds/master_pack-android/opencv/modules/calib3d/src/five-point.cpp", "npoints >= 0 && points2.checkVector(2) == npoints && points1.type() == points2.type()", "/builds/master_pack-android/opencv/modules/calib3d/src/fundam.cpp", "npoints >= 0 && (depth == CV_32S || depth == CV_32F || depth == CV_64F)", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == npoints", "/builds/master_pack-android/opencv/modules/calib3d/src/homography_decomp.cpp", "(param0.cols == 1 || param0.rows == 1) && (ptype == CV_32F || ptype == CV_64F)", "/builds/master_pack-android/opencv/modules/calib3d/src/levmarq.cpp", "************************************************************************************", "\titr\tnfJ\t\tSUM(r^2)\t\tx\t\tdx\t\tl\t\tlc", "%c%10d %10d %15.4e %16.4e %17.4e %16.4e %17.4e\n", "/builds/master_pack-android/opencv/modules/calib3d/src/posit.cpp", "(icvPOSIT( pObject, imagePoints,(float) focalLength, criteria, rotation, translation )) >= 0", "/builds/master_pack-android/opencv/modules/calib3d/src/ptsetreg.cpp", "(bestMask.cols == 1 || bestMask.rows == 1) && (int)bestMask.total() == count", "err.isContinuous() && err.type() == CV_32F && mask.isContinuous() && mask.type() == CV_8U", "errf.isContinuous() && errf.type() == CV_32F && (int)errf.total() == count", "/builds/master_pack-android/opencv/modules/calib3d/src/quadsubpix.cpp", "npoints >= 0 && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "/builds/master_pack-android/opencv/modules/calib3d/src/solvepnp.cpp", "(rtype == CV_32F || rtype == CV_64F) && (ttype == CV_32F || ttype == CV_64F)", "(rsize == Size(1, 3) || rsize == Size(3, 1)) && (tsize == Size(1, 3) || tsize == Size(3, 1))", "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_EPNP or SOLVEPNP_DLS", "(opoints.rows == 1 && opoints.channels() == 3) || opoints.cols*opoints.channels() == 3", "(ipoints.rows == 1 && ipoints.channels() == 2) || ipoints.cols*ipoints.channels() == 2", "/builds/master_pack-android/opencv/modules/calib3d/src/stereobm.cpp", "-D DEFINE_KERNEL_STEREOBM -D MIN_DISP=%d -D NUM_DISP=%d -D BLOCK_SIZE_X=%d -D BLOCK_SIZE_Y=%d -D WSZ=%d", "SADWindowSize must be odd, be within 5..255 and be not larger than image width or height", "/builds/master_pack-android/opencv/modules/calib3d/src/stereosgbm.cpp", "numberOfDisparities > 0 && disp.type() == CV_16S && (costType == CV_16S || costType == CV_32S) && disp.size() == cost.size()", "left.size() == right.size() && left.type() == right.type() && left.depth() == CV_8U", "/builds/master_pack-android/opencv/modules/calib3d/src/triangulate.cpp", "_w.data == (uchar*)&w.val[0] && _u.data == (uchar*)&u.val[0] && _vt.data == (uchar*)&vt.val[0]", "The point-matrices must have one row, and an equal number of columns", "The first set of points must contain two channels; one for x and one for y", "The second set of points must contain two channels; one for x and one for y", "The first output matrix must have the same dimensions as the input matrices", "The first output matrix must have two channels; one for x and one for y", "The second output matrix must have the same dimensions as the input matrices", "The second output matrix must have two channels; one for x and one for y", "#define MAX_VAL 32767\n#ifndef WSZ\n#define WSZ     2\n#endif\n#define WSZ2    (WSZ / 2)\n#ifdef DEFINE_KERNEL_STEREOBM\n#define DISPARITY_SHIFT     4\n#define FILTERED            ((MIN_DISP - 1) << DISPARITY_SHIFT)\nvoid calcDisp(__local short * cost, __global short * disp, int uniquenessRatio,\n__local int * bestDisp, __local int * bestCost, int d, int x, int y, int cols, int rows)\n{\nint best_disp = *bestDisp, best_cost = *bestCost;\nbarrier(CLK_LOCAL_MEM_FENCE);\nshort c = cost[0];\nint thresh = best_cost + (best_cost * uniquenessRatio / 100);\nbool notUniq = ( (c <= thresh) && (d < (best_disp - 1) || d > (best_disp + 1) ) );\nif (notUniq)\n*bestCost = FILTERED;\nbarrier(CLK_LOCAL_MEM_FENCE);\nif( *bestCost != FILTERED && x < cols - WSZ2 - MIN_DISP && y < rows - WSZ2 && d == best_disp)\n{\nint d_aprox = 0;\nint yp =0, yn = 0;\nif ((0 < best_disp) && (best_disp < NUM_DISP - 1))\n{\nyp = cost[-2 * BLOCK_SIZE_Y];\nyn = cost[2 * BLOCK_SIZE_Y];\nd_aprox = yp + yn - 2 * c + abs(yp - yn);\n}\ndisp[0] = (short)(((best_disp + MIN_DISP)*256 + (d_aprox != 0 ? (yp - yn) * 256 / d_aprox : 0) + 15) >> 4);\n}\n}\nshort calcCostBorder(__global const uchar * leftptr, __global const uchar * rightptr, int x, int y, int nthread,\nshort * costbuf, int *h, int cols, int d, short cost)\n{\nint head = (*h) % WSZ;\n__global const uchar * left, * right;\nint idx = mad24(y + WSZ2 * (2 * nthread - 1), cols, x + WSZ2 * (1 - 2 * nthread));\nleft = leftptr + idx;\nright = rightptr + (idx - d);\nshort costdiff = 0;\nif (0 == nthread)\n{\n#pragma unroll\nfor (int i = 0; i < WSZ; i++)\n{\ncostdiff += abs( left[0] - right[0] );\nleft += cols;\nright += cols;\n}\n}\nelse\n{\n#pragma unroll\nfor (int i = 0; i < WSZ; i++)\n{\ncostdiff += abs(left[i] - right[i]);\n}\n}\ncost += costdiff - costbuf[head];\ncostbuf[head] = costdiff;\n*h = head + 1;\nreturn cost;\n}\nshort calcCostInside(__global const uchar * leftptr, __global const uchar * rightptr, int x, int y,\nint cols, int d, short cost_up_left, short cost_up, short cost_left)\n{\n__global const uchar * left, * right;\nint idx = mad24(y - WSZ2 - 1, cols, x - WSZ2 - 1);\nleft = leftptr + idx;\nright = rightptr + (idx - d);\nint idx2 = WSZ*cols;\nuchar corrner1 = abs(left[0] - right[0]),\ncorrner2 = abs(left[WSZ] - right[WSZ]),\ncorrner3 = abs(left[idx2] - right[idx2]),\ncorrner4 = abs(left[idx2 + WSZ] - right[idx2 + WSZ]);\nreturn cost_up + cost_left - cost_up_left + corrner1 -\ncorrner2 - corrner3 + corrner4;\n}\n__kernel void stereoBM(__global const uchar * leftptr,\n__global const uchar * rightptr,\n__global uchar * dispptr, int disp_step, int disp_offset,\nint rows, int cols,\nint textureTreshold, int uniquenessRatio)\n{\nint lz = get_local_id(0);\nint gx = get_global_id(1) * BLOCK_SIZE_X;\nint gy = get_global_id(2) * BLOCK_SIZE_Y;\nint nthread = lz / NUM_DISP;\nint disp_idx = lz % NUM_DISP;\n__global short * disp;\n__global const uchar * left, * right;\n__local short costFunc[2 * BLOCK_SIZE_Y * NUM_DISP];\n__local short * cost;\n__local int best_disp[2];\n__local int best_cost[2];\nbest_cost[nthread] = MAX_VAL;\nbest_disp[nthread] = -1;\nbarrier(CLK_LOCAL_MEM_FENCE);\nshort costbuf[WSZ];\nint head = 0;\nint shiftX = WSZ2 + NUM_DISP + MIN_DISP - 1;\nint shiftY = WSZ2;\nint x = gx + shiftX, y = gy + shiftY, lx = 0, ly = 0;\nint costIdx = disp_idx * 2 * BLOCK_SIZE_Y + (BLOCK_SIZE_Y - 1);\ncost = costFunc + costIdx;\nint tempcost = 0;\nif (x < cols - WSZ2 - MIN_DISP && y < rows - WSZ2)\n{\nif (0 == nthread)\n{\n#pragma unroll\nfor (int i = 0; i < WSZ; i++)\n{\nint idx = mad24(y - WSZ2, cols, x - WSZ2 + i);\nleft = leftptr + idx;\nright = rightptr + (idx - disp_idx);\nshort costdiff = 0;\nfor(int j = 0; j < WSZ; j++)\n{\ncostdiff += abs( left[0] - right[0] );\nleft += cols;\nright += cols;\n}\ncostbuf[i] = costdiff;\n}\n}\nelse\n{\n#pragma unroll\nfor (int i = 0; i < WSZ; i++)\n{\nint idx = mad24(y - WSZ2 + i, cols, x - WSZ2);\nleft = leftptr + idx;\nright = rightptr + (idx - disp_idx);\nshort costdiff = 0;\nfor (int j = 0; j < WSZ; j++)\n{\ncostdiff += abs( left[j] - right[j]);\n}\ntempcost += costdiff;\ncostbuf[i] = costdiff;\n}\n}\n}\nif (nthread == 1)\n{\ncost[0] = tempcost;\natomic_min(best_cost + 1, tempcost);\n}\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (best_cost[1] == tempcost)\natomic_max(best_disp + 1, disp_idx);\nbarrier(CLK_LOCAL_MEM_FENCE);\nint dispIdx = mad24(gy, disp_step, mad24((int)sizeof(short), gx, disp_offset));\ndisp = (__global short *)(dispptr + dispIdx);\ncalcDisp(cost, disp, uniquenessRatio, best_disp + 1, best_cost + 1, disp_idx, x, y, cols, rows);\nbarrier(CLK_LOCAL_MEM_FENCE);\nlx = 1 - nthread;\nly = nthread;\nfor (int i = 0; i < BLOCK_SIZE_Y * BLOCK_SIZE_X / 2; i++)\n{\nx = (lx < BLOCK_SIZE_X) ? gx + shiftX + lx : cols;\ny = (ly < BLOCK_SIZE_Y) ? gy + shiftY + ly : rows;\nbest_cost[nthread] = MAX_VAL;\nbest_disp[nthread] = -1;\nbarrier(CLK_LOCAL_MEM_FENCE);\ncostIdx = mad24(2 * BLOCK_SIZE_Y, disp_idx, (BLOCK_SIZE_Y - 1 - ly + lx));\nif (0 > costIdx)\ncostIdx = BLOCK_SIZE_Y - 1;\ncost = costFunc + costIdx;\nif (x < cols - WSZ2 - MIN_DISP && y < rows - WSZ2)\n{\ntempcost = (ly * (1 - nthread) + lx * nthread == 0) ?\ncalcCostBorder(leftptr, rightptr, x, y, nthread, costbuf, &head, cols, disp_idx, cost[2*nthread-1]) :\ncalcCostInside(leftptr, rightptr, x, y, cols, disp_idx, cost[0], cost[1], cost[-1]);\n}\ncost[0] = tempcost;\natomic_min(best_cost + nthread, tempcost);\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (best_cost[nthread] == tempcost)\natomic_max(best_disp + nthread, disp_idx);\nbarrier(CLK_LOCAL_MEM_FENCE);\ndispIdx = mad24(gy + ly, disp_step, mad24((int)sizeof(short), (gx + lx), disp_offset));\ndisp = (__global short *)(dispptr + dispIdx);\ncalcDisp(cost, disp, uniquenessRatio, best_disp + nthread, best_cost + nthread, disp_idx, x, y, cols, rows);\nbarrier(CLK_LOCAL_MEM_FENCE);\nif (lx + nthread - 1 == ly)\n{\nlx = (lx + nthread + 1) * (1 - nthread);\nly = (ly + 1) * nthread;\n}\nelse\n{\nlx += nthread;\nly = ly - nthread + 1;\n}\n}\n}\n#endif\n__kernel void prefilter_norm(__global unsigned char *input, __global unsigned char *output,\nint rows, int cols, int prefilterCap, int scale_g, int scale_s)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < cols && y < rows)\n{\nint cov1 =                                   input[   max(y-1, 0)   * cols + x] * 1 +\ninput[y * cols + max(x-1,0)] * 1 + input[      y          * cols + x] * 4 + input[y * cols + min(x+1, cols-1)] * 1 +\ninput[min(y+1, rows-1) * cols + x] * 1;\nint cov2 = 0;\nfor(int i = -WSZ2; i < WSZ2+1; i++)\nfor(int j = -WSZ2; j < WSZ2+1; j++)\ncov2 += input[clamp(y+i, 0, rows-1) * cols + clamp(x+j, 0, cols-1)];\nint res = (cov1*scale_g - cov2*scale_s)>>10;\nres = clamp(res, -prefilterCap, prefilterCap) + prefilterCap;\noutput[y * cols + x] = res;\n}\n}\n__kernel void prefilter_xsobel(__global unsigned char *input, __global unsigned char *output,\nint rows, int cols, int prefilterCap)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif(x < cols && y < rows)\n{\nif (0 < x && !((y == rows-1) & (rows%2==1) ) )\n{\nint cov = input[ ((y > 0) ? y-1 : y+1)  * cols + (x-1)] * (-1) + input[ ((y > 0) ? y-1 : y+1)  * cols + ((x<cols-1) ? x+1 : x-1)] * (1) +\ninput[              (y)       * cols + (x-1)] * (-2) + input[        (y)             * cols + ((x<cols-1) ? x+1 : x-1)] * (2) +\ninput[((y<rows-1)?(y+1):(y-1))* cols + (x-1)] * (-1) + input[((y<rows-1)?(y+1):(y-1))* cols + ((x<cols-1) ? x+1 : x-1)] * (1);\ncov = clamp(cov, -prefilterCap, prefilterCap) + prefilterCap;\noutput[y * cols + x] = cov;\n}\nelse\noutput[y * cols + x] = prefilterCap;\n}\n}\n", "8ede5990f0c9582639e5bef29cfd6cf9", "/builds/master_pack-android/opencv/modules/shape/src/aff_trans.cpp", "(pts1.channels()==2) && (pts1.cols>0) && (pts2.channels()==2) && (pts2.cols>0)", "(sig1.rows==sig2.rows) && (sig1.cols==sig2.cols) && (!sig1.empty()) && (!sig2.empty())", "/builds/master_pack-android/opencv/modules/shape/src/emdL1.cpp", "/builds/master_pack-android/opencv/modules/shape/src/haus_dis.cpp", "/builds/master_pack-android/opencv/modules/shape/src/hist_cost.cpp", "/builds/master_pack-android/opencv/modules/shape/src/sc_dis.cpp", "(set1.channels()==2) && (set1.cols>0)", "(set2.channels()==2) && (set2.cols>0)", "(!image1.empty()) && (!image2.empty())", "/builds/master_pack-android/opencv/modules/shape/src/tps_trans.cpp", "/builds/master_pack-android/opencv/modules/superres/src/btv_l1.cpp", "The called functionality is disabled for current build or platform", "/builds/master_pack-android/opencv/modules/superres/src/btv_l1_cuda.cpp", "/builds/master_pack-android/opencv/modules/superres/src/frame_source.cpp", "/builds/master_pack-android/opencv/modules/superres/src/input_array_utility.cpp", "/builds/master_pack-android/opencv/modules/superres/src/optical_flow.cpp", "#ifndef cn\n#define cn 1\n#endif\n#define sz (int)sizeof(float)\n#define src_elem_at(_src, y, step, x) *(__global const float *)(_src + mad24(y, step, (x) * sz))\n#define dst_elem_at(_dst, y, step, x) *(__global float *)(_dst + mad24(y, step, (x) * sz))\n__kernel void buildMotionMaps(__global const uchar * forwardMotionPtr, int forwardMotion_step, int forwardMotion_offset,\n__global const uchar * backwardMotionPtr, int backwardMotion_step, int backwardMotion_offset,\n__global const uchar * forwardMapPtr, int forwardMap_step, int forwardMap_offset,\n__global const uchar * backwardMapPtr, int backwardMap_step, int backwardMap_offset,\nint rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < cols && y < rows)\n{\nint forwardMotion_index = mad24(forwardMotion_step, y, (int)sizeof(float2) * x + forwardMotion_offset);\nint backwardMotion_index = mad24(backwardMotion_step, y, (int)sizeof(float2) * x + backwardMotion_offset);\nint forwardMap_index = mad24(forwardMap_step, y, (int)sizeof(float2) * x + forwardMap_offset);\nint backwardMap_index = mad24(backwardMap_step, y, (int)sizeof(float2) * x + backwardMap_offset);\nfloat2 forwardMotion = *(__global const float2 *)(forwardMotionPtr + forwardMotion_index);\nfloat2 backwardMotion = *(__global const float2 *)(backwardMotionPtr + backwardMotion_index);\n__global float2 * forwardMap = (__global float2 *)(forwardMapPtr + forwardMap_index);\n__global float2 * backwardMap = (__global float2 *)(backwardMapPtr + backwardMap_index);\nfloat2 basePoint = (float2)(x, y);\nforwardMap[0] = basePoint + backwardMotion;\nbackwardMap[0] = basePoint + forwardMotion;\n}\n}\n__kernel void upscale(__global const uchar * srcptr, int src_step, int src_offset, int src_rows, int src_cols,\n__global uchar * dstptr, int dst_step, int dst_offset, int scale)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < src_cols && y < src_rows)\n{\nint src_index = mad24(y, src_step, sz * x * cn + src_offset);\nint dst_index = mad24(y * scale, dst_step, sz * x * scale * cn + dst_offset);\n__global const float * src = (__global const float *)(srcptr + src_index);\n__global float * dst = (__global float *)(dstptr + dst_index);\n#pragma unroll\nfor (int c = 0; c < cn; ++c)\ndst[c] = src[c];\n}\n}\ninline float diffSign1(float a, float b)\n{\nreturn a > b ? 1.0f : a < b ? -1.0f : 0.0f;\n}\ninline float3 diffSign3(float3 a, float3 b)\n{\nfloat3 pos;\npos.x = a.x > b.x ? 1.0f : a.x < b.x ? -1.0f : 0.0f;\npos.y = a.y > b.y ? 1.0f : a.y < b.y ? -1.0f : 0.0f;\npos.z = a.z > b.z ? 1.0f : a.z < b.z ? -1.0f : 0.0f;\nreturn pos;\n}\n__kernel void diffSign(__global const uchar * src1, int src1_step, int src1_offset,\n__global const uchar * src2, int src2_step, int src2_offset,\n__global uchar * dst, int dst_step, int dst_offset, int rows, int cols)\n{\nint x = get_global_id(0);\nint y = get_global_id(1);\nif (x < cols && y < rows)\n*(__global float *)(dst + mad24(y, dst_step, sz * x + dst_offset)) =\ndiffSign1(*(__global const float *)(src1 + mad24(y, src1_step, sz * x + src1_offset)),\n*(__global const float *)(src2 + mad24(y, src2_step, sz * x + src2_offset)));\n}\n__kernel void calcBtvRegularization(__global const uchar * src, int src_step, int src_offset,\n__global uchar * dst, int dst_step, int dst_offset, int dst_rows, int dst_cols,\nint ksize, __constant float * c_btvRegWeights)\n{\nint x = get_global_id(0) + ksize;\nint y = get_global_id(1) + ksize;\nif (y < dst_rows - ksize && x < dst_cols - ksize)\n{\nsrc += src_offset;\n#if cn == 1\nconst float srcVal = src_elem_at(src, y, src_step, x);\nfloat dstVal = 0.0f;\nfor (int m = 0, count = 0; m <= ksize; ++m)\nfor (int l = ksize; l + m >= 0; --l, ++count)\n{\ndstVal += c_btvRegWeights[count] * (diffSign1(srcVal, src_elem_at(src, y + m, src_step, x + l))\n- diffSign1(src_elem_at(src, y - m, src_step, x - l), srcVal));\n}\ndst_elem_at(dst, y, dst_step, x) = dstVal;\n#elif cn == 3\n__global const float * src0ptr = (__global const float *)(src + mad24(y, src_step, 3 * sz * x + src_offset));\nfloat3 srcVal = (float3)(src0ptr[0], src0ptr[1], src0ptr[2]), dstVal = 0.f;\nfor (int m = 0, count = 0; m <= ksize; ++m)\n{\nfor (int l = ksize; l + m >= 0; --l, ++count)\n{\n__global const float * src1ptr = (__global const float *)(src + mad24(y + m, src_step, 3 * sz * (x + l) + src_offset));\n__global const float * src2ptr = (__global const float *)(src + mad24(y - m, src_step, 3 * sz * (x - l) + src_offset));\nfloat3 src1 = (float3)(src1ptr[0], src1ptr[1], src1ptr[2]);\nfloat3 src2 = (float3)(src2ptr[0], src2ptr[1], src2ptr[2]);\ndstVal += c_btvRegWeights[count] * (diffSign3(srcVal, src1) - diffSign3(src2, srcVal));\n}\n}\n__global float * dstptr = (__global float *)(dst + mad24(y, dst_step, 3 * sz * x + dst_offset + 0));\ndstptr[0] = dstVal.x;\ndstptr[1] = dstVal.y;\ndstptr[2] = dstVal.z;\n#else\n#error \"Number of channels should be either 1 of 3\"\n#endif\n}\n}\n", "747d707919dd581b14986fa59ef19f88", "/builds/master_pack-android/opencv/modules/stitching/src/autocalib.cpp", "/builds/master_pack-android/opencv/modules/stitching/src/blenders.cpp", "img.type() == CV_16SC3 || img.type() == CV_8UC3", "/builds/master_pack-android/opencv/modules/stitching/src/exposure_compensate.cpp", "corners.size() == images.size() && images.size() == masks.size()", "/builds/master_pack-android/opencv/modules/stitching/src/matchers.cpp", "features2.descriptors.depth() == CV_8U || features2.descriptors.depth() == CV_32F", "(image.type() == CV_8UC3) || (image.type() == CV_8UC4) || (image.type() == CV_8UC1)", "mask.empty() || (mask.type() == CV_8U && mask.cols == num_images && mask.rows)", "/builds/master_pack-android/opencv/modules/stitching/src/motion_estimators.cpp", "unsupported kind of wave correction", "centers.size() > 0 && centers.size() <= 2", "/builds/master_pack-android/opencv/modules/stitching/src/seam_finders.cpp", "both images must have CV_32FC3(4) or CV_8UC3(4) type", "/builds/master_pack-android/opencv/modules/stitching/src/../../imgproc/src/gcgraph.hpp", "unsupported pixel similarity measure", "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "/builds/master_pack-android/opencv/modules/stitching/include/opencv2/stitching/detail/warpers_inl.hpp", "/builds/master_pack-android/opencv/modules/stitching/include/opencv2/stitching/detail/motion_estimators.hpp", "/builds/master_pack-android/opencv/modules/stitching/src/stitcher.cpp", "/builds/master_pack-android/opencv/modules/stitching/src/timelapsers.cpp", "/builds/master_pack-android/opencv/modules/stitching/src/util.cpp", "/builds/master_pack-android/opencv/modules/stitching/src/warpers.cpp", "(T.size() == Size(1, 3) || T.size() == Size(3, 1)) && T.type() == CV_32F", "#ifndef NL\n#define NL\n#endif\n#define REF(x) x\n#define __CAT(x, y) x##y\n#define CAT(x, y) __CAT(x, y)\n#define DECLARE_MAT_ARG(name) \\\n__global uchar* restrict name ## Ptr, \\\nint name ## StepBytes, \\\nint name ## Offset, \\\nint name ## Height, \\\nint name ## Width NL\n#define MAT_BYTE_OFFSET(name, x, y) mad24((y), name ## StepBytes, ((x)) * (int)(name ## _TSIZE) + name ## Offset)\n#define MAT_RELATIVE_BYTE_OFFSET(name, x, y) mad24(y, name ## StepBytes, (x) * (int)(name ## _TSIZE))\n#define __LOAD_MAT_AT(name, byteOffset) *((const __global name ## _T*)(name ## Ptr + (byteOffset)))\n#define __vload_CN__(name_cn) vload ## name_cn\n#define __vload_CN_(name_cn) __vload_CN__(name_cn)\n#define __vload_CN(name) __vload_CN_(name ## _CN)\n#define __LOAD_MAT_AT_vload(name, byteOffset) __vload_CN(name)(0, ((const __global name ## _T1*)(name ## Ptr + (byteOffset))))\n#define __LOAD_MAT_AT_1 __LOAD_MAT_AT\n#define __LOAD_MAT_AT_2 __LOAD_MAT_AT\n#define __LOAD_MAT_AT_3 __LOAD_MAT_AT_vload\n#define __LOAD_MAT_AT_4 __LOAD_MAT_AT\n#define __LOAD_MAT_AT_CN__(name_cn) __LOAD_MAT_AT_ ## name_cn\n#define __LOAD_MAT_AT_CN_(name_cn) __LOAD_MAT_AT_CN__(name_cn)\n#define __LOAD_MAT_AT_CN(name) __LOAD_MAT_AT_CN_(name ## _CN)\n#define LOAD_MAT_AT(name, byteOffset) __LOAD_MAT_AT_CN(name)(name, byteOffset)\n#define __STORE_MAT_AT(name, byteOffset, v) *((__global name ## _T*)(name ## Ptr + (byteOffset))) = v\n#define __vstore_CN__(name_cn) vstore ## name_cn\n#define __vstore_CN_(name_cn) __vstore_CN__(name_cn)\n#define __vstore_CN(name) __vstore_CN_(name ## _CN)\n#define __STORE_MAT_AT_vstore(name, byteOffset, v) __vstore_CN(name)(v, 0, ((__global name ## _T1*)(name ## Ptr + (byteOffset))))\n#define __STORE_MAT_AT_1 __STORE_MAT_AT\n#define __STORE_MAT_AT_2 __STORE_MAT_AT\n#define __STORE_MAT_AT_3 __STORE_MAT_AT_vstore\n#define __STORE_MAT_AT_4 __STORE_MAT_AT\n#define __STORE_MAT_AT_CN__(name_cn) __STORE_MAT_AT_ ## name_cn\n#define __STORE_MAT_AT_CN_(name_cn) __STORE_MAT_AT_CN__(name_cn)\n#define __STORE_MAT_AT_CN(name) __STORE_MAT_AT_CN_(name ## _CN)\n#define STORE_MAT_AT(name, byteOffset, v) __STORE_MAT_AT_CN(name)(name, byteOffset, v)\n#define T1_uchar uchar\n#define T1_uchar2 uchar\n#define T1_uchar3 uchar\n#define T1_uchar4 uchar\n#define T1_char char\n#define T1_char2 char\n#define T1_char3 char\n#define T1_char4 char\n#define T1_ushort ushort\n#define T1_ushort2 ushort\n#define T1_ushort3 ushort\n#define T1_ushort4 ushort\n#define T1_short short\n#define T1_short2 short\n#define T1_short3 short\n#define T1_short4 short\n#define T1_int int\n#define T1_int2 int\n#define T1_int3 int\n#define T1_int4 int\n#define T1_float float\n#define T1_float2 float\n#define T1_float3 float\n#define T1_float4 float\n#define T1_double double\n#define T1_double2 double\n#define T1_double3 double\n#define T1_double4 double\n#define T1(type) REF(CAT(T1_, REF(type)))\n#define uchar1 uchar\n#define char1 char\n#define short1 short\n#define ushort1 ushort\n#define int1 int\n#define float1 float\n#define double1 double\n#define TYPE(type, cn) REF(CAT(REF(type), REF(cn)))\n#define __CONVERT_MODE_uchar_uchar __NO_CONVERT\n#define __CONVERT_MODE_uchar_char __CONVERT_sat\n#define __CONVERT_MODE_uchar_ushort __CONVERT\n#define __CONVERT_MODE_uchar_short __CONVERT\n#define __CONVERT_MODE_uchar_int __CONVERT\n#define __CONVERT_MODE_uchar_float __CONVERT\n#define __CONVERT_MODE_uchar_double __CONVERT\n#define __CONVERT_MODE_char_uchar __CONVERT_sat\n#define __CONVERT_MODE_char_char __NO_CONVERT\n#define __CONVERT_MODE_char_ushort __CONVERT_sat\n#define __CONVERT_MODE_char_short __CONVERT\n#define __CONVERT_MODE_char_int __CONVERT\n#define __CONVERT_MODE_char_float __CONVERT\n#define __CONVERT_MODE_char_double __CONVERT\n#define __CONVERT_MODE_ushort_uchar __CONVERT_sat\n#define __CONVERT_MODE_ushort_char __CONVERT_sat\n#define __CONVERT_MODE_ushort_ushort __NO_CONVERT\n#define __CONVERT_MODE_ushort_short __CONVERT_sat\n#define __CONVERT_MODE_ushort_int __CONVERT\n#define __CONVERT_MODE_ushort_float __CONVERT\n#define __CONVERT_MODE_ushort_double __CONVERT\n#define __CONVERT_MODE_short_uchar __CONVERT_sat\n#define __CONVERT_MODE_short_char __CONVERT_sat\n#define __CONVERT_MODE_short_ushort __CONVERT_sat\n#define __CONVERT_MODE_short_short __NO_CONVERT\n#define __CONVERT_MODE_short_int __CONVERT\n#define __CONVERT_MODE_short_float __CONVERT\n#define __CONVERT_MODE_short_double __CONVERT\n#define __CONVERT_MODE_int_uchar __CONVERT_sat\n#define __CONVERT_MODE_int_char __CONVERT_sat\n#define __CONVERT_MODE_int_ushort __CONVERT_sat\n#define __CONVERT_MODE_int_short __CONVERT_sat\n#define __CONVERT_MODE_int_int __NO_CONVERT\n#define __CONVERT_MODE_int_float __CONVERT\n#define __CONVERT_MODE_int_double __CONVERT\n#define __CONVERT_MODE_float_uchar __CONVERT_sat_rte\n#define __CONVERT_MODE_float_char __CONVERT_sat_rte\n#define __CONVERT_MODE_float_ushort __CONVERT_sat_rte\n#define __CONVERT_MODE_float_short __CONVERT_sat_rte\n#define __CONVERT_MODE_float_int __CONVERT_rte\n#define __CONVERT_MODE_float_float __NO_CONVERT\n#define __CONVERT_MODE_float_double __CONVERT\n#define __CONVERT_MODE_double_uchar __CONVERT_sat_rte\n#define __CONVERT_MODE_double_char __CONVERT_sat_rte\n#define __CONVERT_MODE_double_ushort __CONVERT_sat_rte\n#define __CONVERT_MODE_double_short __CONVERT_sat_rte\n#define __CONVERT_MODE_double_int __CONVERT_rte\n#define __CONVERT_MODE_double_float __CONVERT\n#define __CONVERT_MODE_double_double __NO_CONVERT\n#define __CONVERT_MODE(srcType, dstType) CAT(__CONVERT_MODE_, CAT(REF(T1(srcType)), CAT(_, REF(T1(dstType)))))\n#define __ROUND_MODE__NO_CONVERT\n#define __ROUND_MODE__CONVERT\n#define __ROUND_MODE__CONVERT_rte _rte\n#define __ROUND_MODE__CONVERT_sat _sat\n#define __ROUND_MODE__CONVERT_sat_rte _sat_rte\n#define ROUND_MODE(srcType, dstType) CAT(__ROUND_MODE_, __CONVERT_MODE(srcType, dstType))\n#define __CONVERT_ROUND(dstType, roundMode) CAT(CAT(convert_, REF(dstType)), roundMode)\n#define __NO_CONVERT(dstType)\n#define __CONVERT(dstType) __CONVERT_ROUND(dstType,)\n#define __CONVERT_rte(dstType) __CONVERT_ROUND(dstType,_rte)\n#define __CONVERT_sat(dstType) __CONVERT_ROUND(dstType,_sat)\n#define __CONVERT_sat_rte(dstType) __CONVERT_ROUND(dstType,_sat_rte)\n#define CONVERT(srcType, dstType) REF(__CONVERT_MODE(srcType,dstType))(dstType)\n#define CONVERT_TO(dstType) __CONVERT_ROUND(dstType,)\n#define CV_8U   0\n#define CV_8S   1\n#define CV_16U  2\n#define CV_16S  3\n#define CV_32S  4\n#define CV_32F  5\n#define CV_64F  6\n#if defined(DEFINE_feed)\n#define workType TYPE(weight_T1, src_CN)\n#if src_DEPTH == 3 && src_CN == 3\n#define convertSrcToWorkType convert_float3\n#else\n#define convertSrcToWorkType CONVERT_TO(workType)\n#endif\n#if dst_DEPTH == 3 && dst_CN == 3\n#define convertToDstType convert_short3\n#else\n#define convertToDstType CONVERT_TO(dst_T)\n#endif\n__kernel void feed(\nDECLARE_MAT_ARG(src), DECLARE_MAT_ARG(weight),\nDECLARE_MAT_ARG(dst), DECLARE_MAT_ARG(dstWeight)\n)\n{\nconst int x = get_global_id(0);\nconst int y = get_global_id(1);\nif (x < srcWidth && y < srcHeight)\n{\nint src_byteOffset = MAT_BYTE_OFFSET(src, x, y);\nint weight_byteOffset = MAT_BYTE_OFFSET(weight, x, y);\nint dst_byteOffset = MAT_BYTE_OFFSET(dst, x, y);\nint dstWeight_byteOffset = MAT_BYTE_OFFSET(dstWeight, x, y);\nweight_T w = LOAD_MAT_AT(weight, weight_byteOffset);\nworkType src_value = convertSrcToWorkType(LOAD_MAT_AT(src, src_byteOffset));\nSTORE_MAT_AT(dst, dst_byteOffset, LOAD_MAT_AT(dst, dst_byteOffset) + convertToDstType(src_value * w));\nSTORE_MAT_AT(dstWeight, dstWeight_byteOffset, LOAD_MAT_AT(dstWeight, dstWeight_byteOffset) + w);\n}\n}\n#endif\n#if defined(DEFINE_normalizeUsingWeightMap)\n#if mat_DEPTH == 3 && mat_CN == 3\n#define workType float3\n#define convertSrcToWorkType convert_float3\n#define convertToDstType convert_short3\n#else\n#define workType TYPE(weight_T1, mat_CN)\n#define convertSrcToWorkType CONVERT_TO(workType)\n#define convertToDstType CONVERT_TO(mat_T)\n#endif\n#if weight_DEPTH >= CV_32F\n#define WEIGHT_EPS 1e-5f\n#else\n#define WEIGHT_EPS 0\n#endif\n__kernel void normalizeUsingWeightMap(\nDECLARE_MAT_ARG(mat), DECLARE_MAT_ARG(weight)\n)\n{\nconst int x = get_global_id(0);\nconst int y = get_global_id(1);\nif (x < matWidth && y < matHeight)\n{\nint mat_byteOffset = MAT_BYTE_OFFSET(mat, x, y);\nint weight_byteOffset = MAT_BYTE_OFFSET(weight, x, y);\nweight_T w = LOAD_MAT_AT(weight, weight_byteOffset);\nworkType value = convertSrcToWorkType(LOAD_MAT_AT(mat, mat_byteOffset));\nvalue = value / (w + WEIGHT_EPS);\nSTORE_MAT_AT(mat, mat_byteOffset, convertToDstType(value));\n}\n}\n#endif\n", "__kernel void buildWarpPlaneMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n__constant float * ck_rinv, __constant float * ct,\nint tl_u, int tl_v, float scale, int rowsPerWI)\n{\nint du = get_global_id(0);\nint dv0 = get_global_id(1) * rowsPerWI;\nif (du < cols)\n{\nint xmap_index = mad24(dv0, xmap_step, mad24(du, (int)sizeof(float), xmap_offset));\nint ymap_index = mad24(dv0, ymap_step, mad24(du, (int)sizeof(float), ymap_offset));\nfloat u = tl_u + du;\nfloat x_ = fma(u, scale, -ct[0]);\nfloat ct1 = 1 - ct[2];\nfor (int dv = dv0, dv1 = min(rows, dv0 + rowsPerWI); dv < dv1; ++dv, xmap_index += xmap_step,\nymap_index += ymap_step)\n{\n__global float * xmap = (__global float *)(xmapptr + xmap_index);\n__global float * ymap = (__global float *)(ymapptr + ymap_index);\nfloat v = tl_v + dv;\nfloat y_ = fma(v, scale, -ct[1]);\nfloat x = fma(ck_rinv[0], x_, fma(ck_rinv[1], y_, ck_rinv[2] * ct1));\nfloat y = fma(ck_rinv[3], x_, fma(ck_rinv[4], y_, ck_rinv[5] * ct1));\nfloat z = fma(ck_rinv[6], x_, fma(ck_rinv[7], y_, ck_rinv[8] * ct1));\nif (z != 0)\nx /= z, y /= z;\nelse\nx = y = -1;\nxmap[0] = x;\nymap[0] = y;\n}\n}\n}\n__kernel void buildWarpCylindricalMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n__constant float * ck_rinv, int tl_u, int tl_v, float scale, int rowsPerWI)\n{\nint du = get_global_id(0);\nint dv0 = get_global_id(1) * rowsPerWI;\nif (du < cols)\n{\nint xmap_index = mad24(dv0, xmap_step, mad24(du, (int)sizeof(float), xmap_offset));\nint ymap_index = mad24(dv0, ymap_step, mad24(du, (int)sizeof(float), ymap_offset));\nfloat u = (tl_u + du) * scale;\nfloat x_, z_;\nx_ = sincos(u, &z_);\nfor (int dv = dv0, dv1 = min(rows, dv0 + rowsPerWI); dv < dv1; ++dv, xmap_index += xmap_step,\nymap_index += ymap_step)\n{\n__global float * xmap = (__global float *)(xmapptr + xmap_index);\n__global float * ymap = (__global float *)(ymapptr + ymap_index);\nfloat y_ = (tl_v + dv) * scale;\nfloat x, y, z;\nx = fma(ck_rinv[0], x_, fma(ck_rinv[1], y_, ck_rinv[2] * z_));\ny = fma(ck_rinv[3], x_, fma(ck_rinv[4], y_, ck_rinv[5] * z_));\nz = fma(ck_rinv[6], x_, fma(ck_rinv[7], y_, ck_rinv[8] * z_));\nif (z > 0)\nx /= z, y /= z;\nelse\nx = y = -1;\nxmap[0] = x;\nymap[0] = y;\n}\n}\n}\n__kernel void buildWarpSphericalMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n__constant float * ck_rinv, int tl_u, int tl_v, float scale, int rowsPerWI)\n{\nint du = get_global_id(0);\nint dv0 = get_global_id(1) * rowsPerWI;\nif (du < cols)\n{\nint xmap_index = mad24(dv0, xmap_step, mad24(du, (int)sizeof(float), xmap_offset));\nint ymap_index = mad24(dv0, ymap_step, mad24(du, (int)sizeof(float), ymap_offset));\nfloat u = (tl_u + du) * scale;\nfloat cosu, sinu = sincos(u, &cosu);\nfor (int dv = dv0, dv1 = min(rows, dv0 + rowsPerWI); dv < dv1; ++dv, xmap_index += xmap_step,\nymap_index += ymap_step)\n{\n__global float * xmap = (__global float *)(xmapptr + xmap_index);\n__global float * ymap = (__global float *)(ymapptr + ymap_index);\nfloat v = (tl_v + dv) * scale;\nfloat cosv, sinv = sincos(v, &cosv);\nfloat x_ = sinv * sinu;\nfloat y_ = -cosv;\nfloat z_ = sinv * cosu;\nfloat x, y, z;\nx = fma(ck_rinv[0], x_, fma(ck_rinv[1], y_, ck_rinv[2] * z_));\ny = fma(ck_rinv[3], x_, fma(ck_rinv[4], y_, ck_rinv[5] * z_));\nz = fma(ck_rinv[6], x_, fma(ck_rinv[7], y_, ck_rinv[8] * z_));\nif (z > 0)\nx /= z, y /= z;\nelse\nx = y = -1;\nxmap[0] = x;\nymap[0] = y;\n}\n}\n}\n", "83a61a49d8be5dcc09a00d8d4651c4f8", "3320d5f13a357c8ee3c223e66d598244", "/builds/master_pack-android/opencv/modules/videostab/src/deblurring.cpp", "/builds/master_pack-android/opencv/modules/videostab/src/frame_source.cpp", "/builds/master_pack-android/opencv/modules/videostab/src/global_motion.cpp", "/builds/master_pack-android/opencv/modules/videostab/include/opencv2/videostab/motion_core.hpp", "/builds/master_pack-android/opencv/modules/videostab/src/inpainting.cpp", "/builds/master_pack-android/opencv/modules/videostab/include/opencv2/videostab/fast_marching_inl.hpp", "/builds/master_pack-android/opencv/modules/videostab/src/motion_stabilizing.cpp", "/builds/master_pack-android/opencv/modules/videostab/src/outlier_rejection.cpp", "points0.getMat().checkVector(2) == points1.getMat().checkVector(2)", "first pass: estimating motions", "\nmotion estimation time: %.3f sec\n", "motion stabilization time: %.3f sec\n", "/builds/master_pack-android/opencv/modules/videostab/src/wobble_suppression.cpp", "TBB failed to initialize task scheduler TLS\n", "TBB failed to destroy task scheduler TLS", "rml::tbb_factory::make_server failed with status %x, falling back on private rml", "Attempt to terminate nested scheduler in blocking mode\n", "Newer master request for larger stack cannot be satisfied\n", "bad allocation in previous or concurrent attempt", "attempted recursive lock on critical section or non-recursive mutex", "User-initiated abort has terminated this operation", "The same task_handle object cannot be executed more than once", "wait() was not called on the structured_task_group", "Assertion %s failed on line %d of file %s\n", "Index out of requested size range", "Index out of allocated segment slots", "Wait on condition variable failed", "[backward compatibility] Invalid number of buckets", "swap() is invalid on non-equal allocators", "reservation size exceeds permitted max size", "Nesting of blocking termiantion is impossible", "atomic store on misaligned 8-byte location %p is slow", "/sys/devices/system/cpu/present", "__TBB_call_with_my_server_info", "ALIGN_TYPE is wrong, please fix", "MAX_ALLOC_CHUNK is wrong, please fix", "Invalid component ID %d in SOS", "DCT scaled block size %dx%d not supported", "Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c", "Bogus Huffman table definition", "Wrong JPEG library version: library is %d, caller expects %d", "Sampling factors too large for interleaved scan", "Unsupported JPEG data precision %d", "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d", "Invalid progressive parameters at scan script entry %d", "Invalid scan script at entry %d", "Improper call to JPEG library in state %d", "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u", "Buffer passed to JPEG library is too small", "CCIR601 sampling not implemented yet", "Too many color components: %d, max %d", "Unsupported color conversion request", "Empty JPEG image (DNL not supported)", "Didn't expect more than one scan", "Output file write error --- out of disk space?", "Fractional sampling not implemented yet", "Huffman code size table overflow", "Missing Huffman code table entry", "Maximum supported image dimension is %u pixels", "Cannot transcode due to multiple use of quantization table %d", "Scan script does not transmit all data", "Invalid color quantization mode change", "Requested feature was omitted at compile time", "Arithmetic table 0x%02x was not defined", "Huffman table 0x%02x was not defined", "JPEG datastream contains no image", "Quantization table 0x%02x was not defined", "Not a JPEG file: starts with 0x%02x 0x%02x", "Cannot quantize more than %d color components", "Cannot quantize to fewer than %d colors", "Cannot quantize to more than %d colors", "Invalid JPEG file structure: %s before SOF", "Invalid JPEG file structure: two SOF markers", "Invalid JPEG file structure: missing SOS marker", "Unsupported JPEG process: SOF type 0x%02x", "Invalid JPEG file structure: two SOI markers", "Failed to create temporary file %s", "Write failed on temporary file --- out of disk space?", "Application transferred too few scanlines", "Unsupported marker type 0x%02x", "Virtual array controller messed up", "Image too wide for this implementation", "Copyright (C) 2013, Thomas G. Lane, Guido Vollbeding", "Caution: quantization tables are too coarse for baseline JPEG", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "Unknown APP0 marker (not JFIF), length %u", "Unknown APP14 marker (not Adobe), length %u", "Define Arithmetic Table 0x%02x: 0x%02x", "Define Quantization Table %d  precision %d", "        %3d %3d %3d %3d %3d %3d %3d %3d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", "Warning: thumbnail image size does not match data length %u", "JFIF extension marker: type 0x%02x, length %u", "    with %d x %d thumbnail image", "Miscellaneous marker 0x%02x, length %u", "        %4u %4u %4u %4u %4u %4u %4u %4u", "Quantizing to %d = %d*%d*%d colors", "Selected %d colors for quantization", "At marker 0x%02x, recovery action %d", "Smoothing not supported with nonstandard sampling ratios", "Start Of Frame 0x%02x: width=%u, height=%u, components=%d", "    Component %d: %dhx%dv q=%d", "JFIF extension marker: JPEG-compressed thumbnail image, length %u", "JFIF extension marker: palette thumbnail image, length %u", "JFIF extension marker: RGB thumbnail image, length %u", "Unrecognized component IDs %d %d %d, assuming YCbCr", "Unknown Adobe color transform code %d", "Corrupt JPEG data: bad arithmetic code", "Inconsistent progression sequence for component %d coefficient %d", "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x", "Corrupt JPEG data: premature end of data segment", "Corrupt JPEG data: bad Huffman code", "Warning: unknown JFIF revision number %d.%02d", "Corrupt JPEG data: found marker 0x%02x instead of RST%d", "Invalid SOS parameters for sequential JPEG", "Application transferred too many scanlines", "null VP8Io passed to VP8GetHeaders()", "Unexpected lossless format encountered.", "Incorrect keyframe parameters.", "NULL VP8Io parameter in VP8Decode().", "Premature end-of-file encountered.", "no memory during frame initialization.", "Too many bytes for PNG signature", "Potential overflow in png_zalloc()", "Application built with libpng-", "Unknown freer parameter in png_data_freer", "\nlibpng version 1.5.12 - July 11, 2012\nCopyright (c) 1998-2012 Glenn Randers-Pehrson\nCopyright (c) 1996-1997 Andreas Dilger\nCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n", " libpng version 1.5.12 - July 11, 2012\n\n", "Image width exceeds user limit in IHDR", "Image height exceeds user limit in IHDR", "Width is too large for libpng to process pixels", "Invalid color type/bit depth combination in IHDR", "Unknown interlace method in IHDR", "Unknown compression method in IHDR", "MNG features are not allowed in a PNG datastream", "ASCII conversion buffer too small", "extreme cHRM chunk cannot be converted to tristimulus values", "internal error in png_XYZ_from_xy", "Ignoring attempt to set negative chromaticity value", "Ignoring attempt to set cHRM RGB triangle with zero area", "Invalid attempt to read row data", "internal sequential row size calculation error", "Interlace handling should be turned on when using png_read_image", "Read palette index exceeding num_palette", "Image is too high to process with png_read_png()", "Can't set both read_data_fn and write_data_fn in the same structure", "Can't discard critical data on CRC error", "Application must supply a known background gamma", "output gamma out of expected range", "conflicting calls to set alpha mode and background", "invalid error action to rgb_to_gray", "ignoring out of range rgb_to_gray coefficients", "libpng does not support gamma+background+rgb_to_gray", "png_do_encode_alpha: unexpected call", "png_do_rgb_to_gray found nongray pixel", "png_do_quantize returned rowbytes=0", "Buffer error in compressed datastream", "Data error in compressed datastream", "Incomplete compressed datastream", "PNG unsigned integer out of range", "PNG file corrupted by ASCII conversion", "Exceeded size limit while expanding chunk", "Not enough memory to decompress chunk", "Ignoring PLTE chunk in grayscale PNG", "Truncating incorrect tRNS chunk length", "Truncating incorrect info tRNS chunk length", "Ignoring gAMA chunk with out of range gamma", "Ignoring incorrect gAMA value @1 when sRGB is also present", "Ignoring cHRM chunk with negative chromaticities", "Ignoring incorrect cHRM white(@1,@2) r(@3,@4)g(@5,@6)b(@7,@8) when sRGB is also present", "internal error handling cHRM coefficients", "internal error handling cHRM->XYZ", "Ignoring incorrect cHRM value when sRGB is also present", "Ignoring nonzero compression type in iCCP chunk", "Profile size field missing from iCCP chunk", "Ignoring iCCP chunk with declared size = @1 and actual length = @2", "No space in chunk cache for sPLT", "sPLT chunk requires too much memory", "tRNS chunk not allowed with alpha channel", "Incorrect bKGD chunk index value", "Invalid pCAL parameters for equation type", "Unrecognized equation type for pCAL chunk", "Out of memory while processing sCAL chunk", "Invalid sCAL ignored: invalid unit", "Invalid sCAL chunk ignored: bad width format", "Invalid sCAL chunk ignored: non-positive width", "Invalid sCAL chunk ignored: bad height format", "Invalid sCAL chunk ignored: non-positive height", "No space in chunk cache for tEXt", "No memory to process text chunk", "Not enough memory to process text chunk", "Insufficient memory to process text chunk", "No space in chunk cache for zTXt", "Out of memory processing zTXt chunk", "Unknown compression type in zTXt chunk", "Not enough memory to process zTXt chunk", "Insufficient memory to store zTXt chunk", "No space in chunk cache for iTXt", "No memory to process iTXt chunk", "Unknown iTXt compression type or method", "Not enough memory to process iTXt chunk", "Insufficient memory to store iTXt chunk", "No space in chunk cache for unknown chunk", "internal row size calculation error", "invalid user transform pixel depth", "Row has too many bytes to allocate in memory", "XYZ values out of representable range", "Out of range gamma value ignored", "Invalid palette size, hIST allocation skipped", "Insufficient memory for hIST chunk data", "Invalid format for pCAL parameter", "Insufficient memory for pCAL purpose", "Insufficient memory for pCAL units", "Insufficient memory for pCAL params", "Insufficient memory for pCAL parameter", "Memory allocation failed while processing sCAL", "Insufficient memory to process iCCP chunk", "Insufficient memory to process iCCP profile", "text compression mode is out of range", "Insufficient memory to store text", "tRNS chunk has out-of-range samples for bit_depth", "Out of memory while processing sPLT chunk", "Out of memory while processing unknown chunk", "Unknown filter heuristic method", "Writing zero-length unknown chunk", "Valid palette required for paletted images", "Wrote palette index exceeding num_palette", "png_write_info was never called before png_write_row", "internal write transform logic error", "Unknown row filter for method 0", "Can't add Up filter after starting", "Can't add Average filter after starting", "Can't add Paeth filter after starting", "Only compression windows <= 32k supported by PNG", "Only compression windows >= 256 supported by PNG", "Compression window is being reset to 512", "Only compression method 8 is supported by PNG", "Text compression window is being reset to 512", "zlib failed to initialize compressor (", "zstream already in use (internal error)", "zlib failed to reset compressor: @1(@2): @3", "zstream not in use (internal error)", "Invalid zlib compression method or flags in non-IDAT chunk", "Invalid bit depth for grayscale image", "Invalid bit depth for RGB image", "Invalid bit depth for paletted image", "Invalid bit depth for grayscale+alpha image", "Invalid bit depth for RGBA image", "Invalid image color type specified", "Invalid compression type specified", "Invalid interlace type specified", "Invalid number of colors in palette", "Ignoring request to write a PLTE chunk in grayscale PNG", "Invalid zlib compression method or flags in IDAT", "Invalid sRGB rendering intent specified", "Invalid number of transparent colors specified", "Ignoring attempt to write tRNS chunk out-of-range for bit_depth", "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8", "Can't write tRNS with an alpha channel", "Invalid background palette index", "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8", "Ignoring attempt to write bKGD chunk out-of-range for bit_depth", "Invalid number of histogram entries specified", "Out of memory while procesing keyword", "invalid keyword character 0x@1", "trailing spaces removed from keyword", "leading spaces removed from keyword", "extra interior spaces removed from keyword", "keyword length must be 1 - 79 characters", "Unknown compression type in iCCP chunk", "Embedded profile length in iCCP chunk is negative", "Embedded profile length too large in iCCP chunk", "Truncating profile to actual length in iCCP chunk", "Empty language field in iTXt chunk", "Unrecognized unit type for oFFs chunk", "Can't write sCAL (buffer too small)", "Unrecognized unit type for pHYs chunk", "Invalid time specified for tIME chunk", "%s: Invalid %stag \"%s\" (not supported by codec)", "Nonstandard tile width %d, convert file", "Nonstandard tile length %d, convert file", "%s: Sorry, cannot nest SubIFDs", "%s: Invalid InkNames value; expecting %d names, found %d", "%s: Failed to allocate space for list of custom values", "%s: Bad field type %d for \"%s\"", "%s: Null count for \"%s\" (type %d, writecount %d, passcount %d)", "Error fetching directory count", "Sanity check on directory count failed", "%s: Error fetching directory count", "%s: Error fetching directory link", "%s: Cannot modify tag \"%s\" while writing", "Can not unlink directory in read-only file", "field[%2d] %5lu, %2d, %2d, %d, %2d, %5s, %5s, %s\n", "Failed to allocate fields array", "Internal error, unknown tag 0x%x", "Internal error, unknown tag %s", "%s: Seek error accessing TIFF directory", "%s: Can not read TIFF directory count", "Sanity check on directory count failed, this is probably not a valid IFD offset", "%.100s: Can not read TIFF directory", "Can not read TIFF directory count", "Sanity check on directory count failed, zero tag directories not supported", "Cannot determine size of unknown tag type %d", "Invalid TIFF directory; tags are not sorted in ascending order", "IO error during reading of \"%s\"", "Cannot handle different values per sample for \"%s\"", "Sanity check on size of \"%s\" value failed", "Incorrect count for \"%s\"; tag ignored", "Incompatible type for \"%s\"; tag ignored", "IO error during reading of \"%s\"; tag ignored", "Incorrect value for \"%s\"; tag ignored", "Cannot handle different values per sample for \"%s\"; tag ignored", "Sanity check on size of \"%s\" value failed; tag ignored", "Out of memory reading of \"%s\"; tag ignored", "No definition found for tag %d", "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations", "ASCII value for tag \"%s\" does not end in null byte", "Failed to read directory at offset %llu", "Unknown field with tag %d (0x%x) encountered", "Registering anonymous field with tag %d (0x%x) failed", "Planarconfig tag value assumed incorrect, assuming data is contig instead of chunky", "TIFF directory is missing required \"%s\" field", "Cannot handle zero number of %s", "Photometric tag is missing, assuming data is YCbCr", "Photometric tag value assumed incorrect, assuming data is YCbCr instead of RGB", "BitsPerSample tag is missing, assuming 8 bits per sample", "SamplesPerPixel tag is missing, assuming correct SamplesPerPixel value is 3", "SamplesPerPixel tag is missing, applying correct SamplesPerPixel value of 3", "TIFF directory is missing required \"StripByteCounts\" field, calculating from imagelength", "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength", "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength", "for chopped \"StripByteCounts\" array", "for chopped \"StripOffsets\" array", "Cannot handle zero scanline size", "Failed to read custom directory at offset %llu", "Wrong data type %d for \"%s\"; tag ignored", "incorrect count for field \"%s\" (%llu, expecting %u); tag ignored", "incorrect count for field \"%s\" (%llu, expecting %u); tag trimmed", "No space for YCbCr->RGB conversion state", "No space for photometric conversion table", "No space for B&W mapping table", "No space for Palette mapping table", "Sorry, can not handle images with %d-bit samples", "Sorry, can not handle contiguous data with %s=%d, and %s=%d and Bits/Sample=%d", "Sorry, can not handle RGB image with %s=%d", "Sorry, can not handle separated image with %s=%d", "Sorry, LogL data must have %s=%d", "Sorry, LogLuv data must have %s=%d or %d", "Sorry, can not handle LogLuv images with %s=%d", "Sorry, can not handle image with %s=%d", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "No \"put\" routine setupl; probably can not handle image format", "Can't use TIFFReadRGBAStrip() with tiled file.", "Row passed to TIFFReadRGBAStrip() must be first in a strip.", "Can't use TIFFReadRGBATile() with stripped file.", "Row/col passed to TIFFReadRGBATile() must be topleft corner of a tile.", "%s: Out of memory (TIFF structure)", "One of the client procedures is NULL pointer.", "Not a TIFF or MDI file, bad magic number %d (0x%x)", "Not a TIFF file, bad version number %d (0x%x)", "Not a TIFF file, bad BigTIFF offsetsize %d (0x%x)", "Not a TIFF file, bad BigTIFF unused %d (0x%x)", "Can not read tiles from a stripped image", "Can not read scanlines from a tiled image", "Seek error at scanline %lu, strip %lu", "Read error at scanline %lu; got %llu bytes, expected %llu", "Read error at scanline %lu, strip %lu; got %llu bytes, expected %llu", "Seek error at row %lu, col %lu, tile %lu", "Read error at row %lu, col %lu; got %llu bytes, expected %llu", "Read error at row %lu, col %lu, tile %lu; got %llu bytes, expected %llu", "%lu: Strip out of range, max %lu", "Compression scheme does not support access to raw uncompressed data", "%llu: Invalid strip byte count, strip %lu", "%lu: Tile out of range, max %lu", "No space for data buffer at scanline %lu", "Invalid strip byte count %llu, strip %lu", "Read error on strip %lu; got %llu bytes, expected %llu", "Data buffer too small to hold strip %lu", "%llu: Invalid tile byte count, tile %lu", "Data buffer too small to hold tile %lu", "%lu: Row out of range, max %lu", "%lu: Sample out of range, max %lu", "Invalid td_samplesperpixel value", "Invalid YCbCr subsampling (%dx%d)", "%lu: Col out of range, max %lu", "%lu: Depth out of range, max %lu", "Maximum TIFF file size exceeded", "No space to expand strip arrays", "Can not write tiles to a stripped image", "Can not write scanlines to a tiled image", "Must set \"ImageWidth\" before writing data", "Must set \"PlanarConfiguration\" before writing data", "Can not grow image by strips when using separate planes", "Tile %lu out of range, max %lu", "Can not change \"ImageLength\" when using separate planes", "Failed to allocate memory for %s (%ld elements of %ld bytes each)", "No space for \"TransferFunction\" tag", "Compression algorithm does not support random access", "%s %s encoding is not implemented", "Compression scheme %u %s encoding is not implemented", "%s %s decoding is not implemented", "Compression scheme %u %s decoding is not implemented", "No space to register compression scheme %s", "Cannot remove compression scheme %s; not registered", "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file.", "Error post-encoding before directory write", "Error flushing data before directory write", "Error writing SubIFD directory link", "Sanity check on tag count failed, likely corrupt TIFF", "Memory mapped files not currently supported for this operation.", "Attempt to reset field on directory not already on disk.", "%s: Can not read TIFF directory entry.", "Value exceeds 32bit range of output type.", "%s: Can not write TIFF directory entry.", "%s compression support is not configured", "Not enough data for scanline %lu, expected a request for at most %lld bytes, got a request for %lld bytes", "Bad code word at line %u of %s %u (x %u)", "Premature EOF at line %u of %s %u (x %u)", "%s at line %u of %s %u (got %u, expected %u)", "Fractional scanlines cannot be read", "Uncompressed data (not supported) at line %u of %s %u (x %u)", "  Consecutive Bad Fax Lines: %lu\n", "Merging common CCITT Fax codec-specific tags failed", "Fractional scanlines cannot be written", "Bits/sample must be 1 for Group 3/4 encoding/decoding", "Row pixels integer overflow (rowpixels %u)", "No space for Group 3/4 reference line", "Merging CCITT Fax 3 codec-specific tags failed", "Merging CCITT Fax 4 codec-specific tags failed", "Not enough data at row %lu (short %llu pixels)", "Unknown data format %d for LogLuv compression", "Unknown encoding %d for LogLuv compression", "SGILog compression cannot handle non-contiguous data", "No support for converting user data format to LogLuv", "No space for SGILog translation buffer", "No support for converting user data format to LogL", "Inappropriate photometric interpretation %d for SGILog compression; %s", "SGILog compression supported only for %s, or raw data", "Merging SGILog codec-specific tags failed", "%s: No space for LogLuv state block", "LZWDecode: Strip %d not terminated with EOI code", "LZWDecode: Corrupted LZW table at scanline %d", "Corrupted LZW table at scanline %d", "Wrong length of decoded string: data probably corrupted at scanline %d", "Bogus encoding, loop in the code table; scanline %d", "Not enough data at scanline %d (short %llu bytes)", "Old-style LZW codes, convert file", "Not enough data for scanline %ld", "Discarding %lu bytes to avoid buffer overrun", "Not enough data for scanline %lu", "%d bit input not supported in PixarLog", "Decoding error at scanline %lu, %s", "Not enough data at scanline %lu (short %llu bytes)", "stride %lu is not a multiple of sample count, %lu, data truncated.", "ZLib cannot deal with buffers this size", "PixarLog compression can't handle %d bit linear encodings", "PixarLog compression can't handle bits depth/data format combination (depth: %d)", "Merging PixarLog codec-specific tags failed", "No space for PixarLog state block", "Horizontal differencing \"Predictor\" not supported with %d-bit samples", "Floating point \"Predictor\" not supported with %d data format", "\"Predictor\" value %d not supported", "Out of memory allocating %zd byte temp buffer.", "Merging Predictor codec-specific tags failed", "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample.", "%s data at scanline %lu (%llu != %llu)", "Merging Deflate codec-specific tags failed", "numinchans=%d, numoutchans=%d, clutlen=%d\n", "numintabents=%d, numouttabents=%d\n", "refcnt = %d; type = 0x%08x %s\n", "attrno=%d; attrname=\"%s\"(0x%08x); attrtype=\"%s\"(0x%08x)\n", "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", "error: expecting signature box\n", "error: cannot decode code stream\n", "warning: number of components mismatch\n", "warning: component data type mismatch\n", "error: unsupported compression type\n", "warning: superfluous BPCC box\n", "warning: missing PCLR box or superfluous CMAP box\n", "warning: missing CMAP box or superfluous PCLR box\n", "error: invalid component number in CMAP box\n", "error: invalid CMAP LUT index\n", "compno = %d; qntsty = %d; numguard = %d; numstepsizes = %d\n", "expn[%d] = 0x%04x; mant[%d] = 0x%04x;\n", "qntsty = %d; numguard = %d; numstepsizes = %d\n", "compno = %d; roisty = %d; roishift = %d\n", "compno = %d; csty = 0x%02x; numdlvls = %d;\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x; qmfbid = %d;\n", "width = %d; height = %d; xoff = %d; yoff = %d;\n", "tilewidth = %d; tileheight = %d; tilexoff = %d; tileyoff = %d;\n", "prec[%d] = %d; sgnd[%d] = %d; hsamp[%d] = %d; vsamp[%d] = %d\n", "tileno = %d; len = %d; partno = %d; numparts = %d\n", "numdlvls = %d; qmfbid = %d; mctrans = %d\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x;\n", "prcwidth[%d] = %d, prcheight[%d] = %d\n", "warning: trailing garbage in marker segment (%ld bytes)\n", "invalid component number in RGN marker segment\n", "warning: ignoring unknown marker segment\n", "warning: possibly corrupt code stream\n", "invalid component number in COC marker segment\n", "invalid component number in QCC marker segment\n", "warning: ignoring invalid option %s\n", "unexpected marker segment type\n", "xs =%d, ys = %d, xe = %d, ye = %d, w = %d, h = %d\n", "warning: ignoring trailing garbage (%lu bytes)\n", "warning: not enough tile data (%lu bytes)\n", "invalid tile number in SOT marker segment\n", "start=%d end=%d type=%d term=%d lyrno=%d firstchar=%02x size=%ld pos=%ld\n", "lyrno=%02d cmptno=%02d rlvlno=%02d bandno=%02d prcno=%02d cblkno=%03d passno=%03d\n", "min rdslope = %f max rdslope = %f\n", "maxlen=%08ld actuallen=%08ld thresh=%f\n", "warning: empty layer generated\n", "        prc %5d %5d %5d %5d (%5d %5d)\n", "         cblk %5d %5d %5d %5d\n", "ignoring invalid progression order %s\n", "ignoring bad rate specifier %s\n", "warning: invalid intermediate layer rates specifier ignored (%s)\n", "warning: overriding imgareatlx value\n", "warning: overriding imgareatly value\n", "warning: color space apparently not RGB\n", "invalid tile grid offset (%lu, %lu)\n", "cannot use real mode for lossless coding\n", "must be at least one resolution level\n", "warning: specified rate is unreasonably large (%lu > %lu)\n", "intermediate layer rates must increase monotonically\n", "warning: intermediate layer rates must be less than overall rate\n", "error: too few guard bits (need at least %d)\n", "warning: bad segmentation symbol\n", "coding pass failed passtype=%d segtype=%d\n", "warning: bad termination pattern detected\n", "warning: stopping decode prematurely as requested\n", "packet offset=%08ld prg=%d cmptno=%02d rlvlno=%02d prcno=%03d lyrno=%02d\n", "cannot get (EPH) marker segment\n", "type=%c%s%c (0x%08x); length=%d\n", "warning: cannot handle large 64-bit box length\n", "Image channel name cannot be an empty string.", "Cannot find frame buffer slice \"", "Frame buffer slice name cannot be an empty string.", "basic_string::_S_construct null not valid", "Invalid display window in image header.", "Invalid data window in image header.", "The width of the data window exceeds the maximum width of ", "Invalid pixel aspect ratio in image header.", "Invalid screen window width in image header.", "Tiled image has no tile description attribute.", "Invalid tile size in image header.", "The width of the tiles exceeds the maximum width of ", "Invalid level mode in image header.", "Invalid level rounding mode in image header.", "Invalid line order in image header.", "Unknown compression type in image header.", "The x subsampling factor for the \"", "The y subsampling factor for the \"", "The minimum x coordinate of the image's data window is not a multiple of the x subsampling factor of the \"", "The minimum y coordinate of the image's data window is not a multiple of the y subsampling factor of the \"", "Number of pixels per row in the image's data window is not a multiple of the x subsampling factor of the \"", "Number of pixels per column in the image's data window is not a multiple of the y subsampling factor of the \"", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", "Unexpected type for image attribute \"", "Image attribute name cannot be an empty string.", "Cannot assign a value of type \"", "Tried to read scan line outside the image file's data window.", "Tried to read a raw scanline from a tiled image.", "Error reading pixel data from image file \"", "Tried to read a raw tile from a scanline-based image.", "Error reading tile data from image file \"", "Cannot get a TiledInputFile pointer from an InputFile that is not tiled.", "Attempt to perform a memory-mapped read on a file that is not memory mapped.", "Invalid key code film manufacturer code (must be between 0 and 99).", "Invalid key code film type (must be between 0 and 99).", "Invalid key code prefix (must be between 0 and 999999).", "Invalid key code count (must be between 0 and 9999).", "Invalid key code perforation offset (must be between 0 and 119).", "Invalid key code number of perforations per frame (must be between 1 and 15).", "Invalid key code number of perforations per count (must be between 20 and 120).", "Cannot copy the value of an image file attribute of type \"", "Cannot determine current file position (%T).", "Cannot update preview image pixels. File \"", "\" does not contain a preview image.", "Cannot update preview image pixels for file \"", ". The scan line has not yet been stored in file \"", "No frame buffer specified as pixel data source.", "Tried to write more scan lines than specified by the data window.", "Failed to write pixel data to image file \"", "Cannot copy pixels from image file \"", "\". The input file is tiled, but the output file is not. Try using TiledOutputFile::copyPixels instead.", "\". The files have different data windows.", "Quick pixel copy from image file \"", "\" failed. The files have different line orders.", "\" failed. The files use different compression methods.", "\" failed.  The files have different channel lists.", "\" already contains pixel data.", "\" is not compatible with the frame buffer's pixel type.", "X and/or y subsampling factors of \"", "\" are not compatible with the frame buffer's subsampling factors.", "Integer multiplication overflow.", "Unexpected data block y coordinate.", "No frame buffer specified as pixel data destination.", "Error calling numLevels() on image file \"", "\" (numLevels() is not defined for files with RIPMAP level mode).", "Error calling levelWidth() on image file \"", "Error calling levelHeight() on image file \"", "Error calling numXTiles() on image file \"", "\" (Argument is not in valid range).", "Error calling numYTiles() on image file \"", "Error calling dataWindowForLevel() on image file \"", "Error calling dataWindowForTile() on image file \"", "Tried to read a tile outside the image file's data window.", "Unexpected tile x level number coordinate.", "Unexpected tile y level number coordinate.", "Expected a tiled file but the file is not tiled.", "Attempt to set the number of threads in a thread pool to a negative value.", "Cannot create new thread (%T).", "Cannot initialize semaphore (%T).", "Post operation on semaphore failed (%T).", "Cannot read semaphore value (%T).", "Cannot register image file attribute type \"", "\". The type has already been registered.", "Cannot create image file attribute of unknown type \"", "Error in header for PIZ-compressed data (invalid bitmap size).", "Error decompressing data (input data are shorter than expected).", "Data compression (zlib) failed.", "Data decompression (zlib) failed.", "Error decompressing data (input data are longer than expected).", "Error in Huffman-encoded data (decoded data are shorter than expected).", "Error in Huffman-encoded data (unexpected end of code table data).", "Error in Huffman-encoded data (code table is longer than expected).", "Error in Huffman-encoded data (invalid code table entry).", "Error in Huffman-encoded data (decoded data are longer than expected).", "Error in Huffman-encoded data (invalid code).", "Error in Huffman-encoded data (invalid code table size).", "Error in header for Huffman-encoded data (invalid number of bits).", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "deleted virtual method called\n", "locale::facet::_S_create_c_locale name not valid", "basic_filebuf::underflow codecvt::max_length() is not valid", "basic_filebuf::underflow incomplete character in file", "basic_filebuf::underflow invalid byte sequence in file", "basic_filebuf::underflow error reading the file", "basic_filebuf::xsgetn error reading the file", "basic_filebuf::_M_convert_to_external conversion error", "-+xX0123456789abcdef0123456789ABCDEF", "terminate called after throwing an instance of '", "terminate called without an active exception\n", "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", "std::basic_istream<char, std::char_traits<char> >", "std::basic_ostream<char, std::char_traits<char> >", "std::basic_iostream<char, std::char_traits<char> >", "void Java_org_opencv_android_Utils_nMatToBitmap2(JNIEnv*, jclass, jlong, jobject, jboolean)", "void Java_org_opencv_android_Utils_nBitmapToMat2(JNIEnv*, jclass, jobject, jlong, jboolean)", "core::getDefaultName_10()", "core::save_10()", "core::clear_10()", "core::normalize_13()", "core::normalize_12()", "core::normalize_11()", "core::normalize_10()", "core::batchDistance_12()", "core::batchDistance_11()", "core::batchDistance_10()", "core::PSNR_10()", "core::norm_15()", "core::norm_14()", "core::norm_13()", "core::norm_12()", "core::norm_11()", "core::norm_10()", "core::mean_11()", "core::mean_10()", "core::meanStdDev_11()", "core::meanStdDev_10()", "core::findNonZero_10()", "core::countNonZero_10()", "core::sumElems_10()", "core::LUT_10()", "core::convertScaleAbs_11()", "core::convertScaleAbs_10()", "core::addWeighted_11()", "core::addWeighted_10()", "core::scaleAdd_10()", "core::divide_17()", "core::divide_16()", "core::divide_15()", "core::divide_14()", "core::divide_13()", "core::multiply_15()", "core::multiply_14()", "core::multiply_13()", "core::add_15()", "core::add_14()", "core::add_13()", "core::copyMakeBorder_11()", "core::copyMakeBorder_10()", "core::borderInterpolate_10()", "core::pow_10()", "core::sqrt_10()", "core::max_11()", "core::min_11()", "core::compare_11()", "core::inRange_10()", "core::absdiff_11()", "core::bitwise_1not_11()", "core::bitwise_1not_10()", "core::bitwise_1xor_11()", "core::bitwise_1xor_10()", "core::bitwise_1or_11()", "core::bitwise_1or_10()", "core::bitwise_1and_11()", "core::bitwise_1and_10()", "core::vconcat_10()", "core::hconcat_10()", "core::fastAtan2_10()", "core::cubeRoot_10()", "core::getCPUTickCount_10()", "core::gemm_11()", "core::gemm_10()", "core::patchNaNs_11()", "core::patchNaNs_10()", "core::checkRange_11()", "core::checkRange_10()", "core::magnitude_10()", "core::phase_11()", "core::phase_10()", "core::cartToPolar_11()", "core::cartToPolar_10()", "core::polarToCart_11()", "core::polarToCart_10()", "core::log_10()", "core::exp_10()", "core::getBuildInformation_10()", "core::getTickFrequency_10()", "core::getTickCount_10()", "core::min_10()", "core::compare_10()", "core::divide_12()", "core::divide_11()", "core::divide_10()", "core::multiply_12()", "core::multiply_11()", "core::multiply_10()", "core::subtract_15()", "core::subtract_14()", "core::subtract_13()", "core::absdiff_10()", "core::max_10()", "core::setErrorVerbosity_10()", "core::kmeans_11()", "core::kmeans_10()", "core::randShuffle_11()", "core::randShuffle_10()", "core::randn_10()", "core::randu_10()", "core::getOptimalDFTSize_10()", "core::mulSpectrums_11()", "core::mulSpectrums_10()", "core::idct_11()", "core::idct_10()", "core::dct_11()", "core::dct_10()", "core::idft_11()", "core::idft_10()", "core::dft_11()", "core::dft_10()", "core::Mahalanobis_10()", "core::SVBackSubst_10()", "core::SVDecomp_11()", "core::SVDecomp_10()", "core::PCABackProject_10()", "core::PCAProject_10()", "core::PCACompute_12()", "core::PCACompute_11()", "core::PCACompute_10()", "core::calcCovarMatrix_11()", "core::calcCovarMatrix_10()", "core::eigen_11()", "core::eigen_10()", "core::solvePoly_11()", "core::solvePoly_10()", "core::solveCubic_10()", "core::sortIdx_10()", "core::sort_10()", "core::solve_11()", "core::solve_10()", "core::invert_11()", "core::invert_10()", "core::trace_10()", "core::determinant_10()", "core::setIdentity_11()", "core::setIdentity_10()", "core::completeSymm_11()", "core::completeSymm_10()", "core::perspectiveTransform_10()", "core::transform_10()", "core::transpose_10()", "core::mulTransposed_12()", "core::mulTransposed_11()", "core::mulTransposed_10()", "core::getNumberOfCPUs_10()", "core::add_12()", "core::add_11()", "core::add_10()", "core::repeat_10()", "core::flip_10()", "core::insertChannel_10()", "core::extractChannel_10()", "core::mixChannels_10()", "core::split_10()", "core::merge_10()", "core::reduce_11()", "core::reduce_10()", "core::subtract_12()", "core::subtract_11()", "core::subtract_10()", "imgproc::getTilesGridSize_10()", "imgproc::collectGarbage_10()", "imgproc::setTilesGridSize_10()", "imgproc::getClipLimit_10()", "imgproc::apply_10()", "imgproc::setClipLimit_10()", "imgproc::ellipse_15()", "imgproc::ellipse_14()", "imgproc::ellipse_13()", "imgproc::circle_12()", "imgproc::circle_11()", "imgproc::circle_10()", "imgproc::rectangle_12()", "imgproc::rectangle_11()", "imgproc::rectangle_10()", "imgproc::arrowedLine_11()", "imgproc::arrowedLine_10()", "imgproc::line_12()", "imgproc::line_11()", "imgproc::line_10()", "imgproc::applyColorMap_10()", "imgproc::createCLAHE_11()", "imgproc::createCLAHE_10()", "imgproc::rotatedRectangleIntersection_10()", "imgproc::pointPolygonTest_10()", "imgproc::fitLine_10()", "imgproc::fitEllipse_10()", "imgproc::intersectConvexConvex_11()", "imgproc::intersectConvexConvex_10()", "imgproc::isContourConvex_10()", "imgproc::convexityDefects_10()", "imgproc::convexHull_11()", "imgproc::convexHull_10()", "imgproc::matchShapes_10()", "imgproc::minEnclosingTriangle_10()", "imgproc::minEnclosingCircle_10()", "imgproc::boxPoints_10()", "imgproc::minAreaRect_10()", "imgproc::contourArea_11()", "imgproc::contourArea_10()", "imgproc::boundingRect_10()", "imgproc::arcLength_10()", "imgproc::approxPolyDP_10()", "imgproc::findContours_11()", "imgproc::findContours_10()", "imgproc::connectedComponentsWithStats_11()", "imgproc::connectedComponentsWithStats_10()", "imgproc::connectedComponents_11()", "imgproc::connectedComponents_10()", "imgproc::Canny_11()", "imgproc::Canny_10()", "imgproc::Laplacian_12()", "imgproc::Laplacian_11()", "imgproc::Laplacian_10()", "imgproc::Scharr_12()", "imgproc::Scharr_11()", "imgproc::Scharr_10()", "imgproc::Sobel_12()", "imgproc::Sobel_11()", "imgproc::Sobel_10()", "imgproc::sepFilter2D_12()", "imgproc::sepFilter2D_11()", "imgproc::sepFilter2D_10()", "imgproc::filter2D_12()", "imgproc::filter2D_11()", "imgproc::filter2D_10()", "imgproc::blur_12()", "imgproc::blur_11()", "imgproc::blur_10()", "imgproc::matchTemplate_11()", "imgproc::matchTemplate_10()", "imgproc::demosaicing_11()", "imgproc::demosaicing_10()", "imgproc::cvtColor_11()", "imgproc::cvtColor_10()", "imgproc::floodFill_11()", "imgproc::floodFill_10()", "imgproc::distanceTransform_11()", "imgproc::distanceTransform_10()", "imgproc::distanceTransformWithLabels_11()", "imgproc::distanceTransformWithLabels_10()", "imgproc::grabCut_11()", "imgproc::grabCut_10()", "imgproc::pyrMeanShiftFiltering_11()", "imgproc::pyrMeanShiftFiltering_10()", "imgproc::watershed_10()", "imgproc::equalizeHist_10()", "imgproc::compareHist_10()", "imgproc::calcBackProject_10()", "imgproc::calcHist_11()", "imgproc::calcHist_10()", "imgproc::undistortPoints_11()", "imgproc::undistortPoints_10()", "imgproc::threshold_10()", "imgproc::createHanningWindow_10()", "imgproc::phaseCorrelate_11()", "imgproc::phaseCorrelate_10()", "imgproc::accumulateWeighted_11()", "imgproc::accumulateWeighted_10()", "imgproc::accumulateProduct_11()", "imgproc::accumulateProduct_10()", "imgproc::accumulateSquare_11()", "imgproc::accumulateSquare_10()", "imgproc::accumulate_11()", "imgproc::accumulate_10()", "imgproc::integral3_11()", "imgproc::integral3_10()", "imgproc::integral2_11()", "imgproc::integral2_10()", "imgproc::integral_11()", "imgproc::integral_10()", "imgproc::getDefaultNewCameraMatrix_11()", "imgproc::getDefaultNewCameraMatrix_10()", "imgproc::initWideAngleProjMap_11()", "imgproc::initWideAngleProjMap_10()", "imgproc::initUndistortRectifyMap_10()", "imgproc::undistort_11()", "imgproc::undistort_10()", "imgproc::pyrUp_12()", "imgproc::pyrUp_11()", "imgproc::pyrUp_10()", "imgproc::pyrDown_12()", "imgproc::pyrDown_11()", "imgproc::pyrDown_10()", "imgproc::adaptiveThreshold_10()", "imgproc::linearPolar_10()", "imgproc::logPolar_10()", "imgproc::getRectSubPix_11()", "imgproc::getRectSubPix_10()", "imgproc::getAffineTransform_10()", "imgproc::getPerspectiveTransform_10()", "imgproc::invertAffineTransform_10()", "imgproc::getRotationMatrix2D_10()", "imgproc::convertMaps_11()", "imgproc::convertMaps_10()", "imgproc::remap_11()", "imgproc::remap_10()", "imgproc::warpPerspective_12()", "imgproc::warpPerspective_11()", "imgproc::warpPerspective_10()", "imgproc::warpAffine_12()", "imgproc::warpAffine_11()", "imgproc::warpAffine_10()", "imgproc::resize_11()", "imgproc::resize_10()", "imgproc::morphologyEx_12()", "imgproc::morphologyEx_11()", "imgproc::morphologyEx_10()", "imgproc::dilate_12()", "imgproc::dilate_11()", "imgproc::dilate_10()", "imgproc::erode_12()", "imgproc::erode_11()", "imgproc::erode_10()", "imgproc::HoughCircles_11()", "imgproc::HoughCircles_10()", "imgproc::HoughLinesP_11()", "imgproc::HoughLinesP_10()", "imgproc::HoughLines_11()", "imgproc::HoughLines_10()", "imgproc::goodFeaturesToTrack_11()", "imgproc::goodFeaturesToTrack_10()", "imgproc::cornerSubPix_10()", "imgproc::preCornerDetect_11()", "imgproc::preCornerDetect_10()", "imgproc::cornerEigenValsAndVecs_11()", "imgproc::cornerEigenValsAndVecs_10()", "imgproc::cornerHarris_11()", "imgproc::cornerHarris_10()", "imgproc::cornerMinEigenVal_12()", "imgproc::cornerMinEigenVal_11()", "imgproc::cornerMinEigenVal_10()", "imgproc::sqrBoxFilter_12()", "imgproc::sqrBoxFilter_11()", "imgproc::sqrBoxFilter_10()", "imgproc::boxFilter_12()", "imgproc::boxFilter_11()", "imgproc::boxFilter_10()", "imgproc::bilateralFilter_11()", "imgproc::bilateralFilter_10()", "imgproc::GaussianBlur_12()", "imgproc::GaussianBlur_11()", "imgproc::GaussianBlur_10()", "imgproc::medianBlur_10()", "imgproc::getStructuringElement_11()", "imgproc::getStructuringElement_10()", "imgproc::getGaborKernel_11()", "imgproc::getGaborKernel_10()", "imgproc::getDerivKernels_11()", "imgproc::getDerivKernels_10()", "imgproc::getGaussianKernel_11()", "imgproc::getGaussianKernel_10()", "imgproc::createLineSegmentDetector_11()", "imgproc::createLineSegmentDetector_10()", "imgproc::clipLine_10()", "imgproc::drawContours_12()", "imgproc::drawContours_11()", "imgproc::drawContours_10()", "imgproc::polylines_12()", "imgproc::polylines_11()", "imgproc::polylines_10()", "imgproc::fillPoly_11()", "imgproc::fillPoly_10()", "imgproc::fillConvexPoly_11()", "imgproc::fillConvexPoly_10()", "imgproc::ellipse_12()", "imgproc::ellipse_11()", "imgproc::ellipse_10()", "imgproc::putText_12()", "imgproc::putText_11()", "imgproc::putText_10()", "imgproc::ellipse2Poly_10()", "imgproc::edgeDst_11()", "imgproc::edgeDst_10()", "imgproc::edgeOrg_11()", "imgproc::edgeOrg_10()", "imgproc::symEdge_10()", "imgproc::rotateEdge_10()", "imgproc::nextEdge_10()", "imgproc::getEdge_10()", "imgproc::getVertex_11()", "imgproc::getVertex_10()", "imgproc::getVoronoiFacetList_10()", "imgproc::getTriangleList_10()", "imgproc::getEdgeList_10()", "imgproc::findNearest_11()", "imgproc::findNearest_10()", "imgproc::locate_10()", "imgproc::insert_11()", "imgproc::insert_10()", "imgproc::initDelaunay_10()", "imgproc::Subdiv2D_11()", "imgproc::Subdiv2D_10()", "imgproc::compareSegments_11()", "imgproc::compareSegments_10()", "imgproc::drawSegments_10()", "imgproc::detect_11()", "imgproc::detect_10()", "ml::create_10()", "ml::getVarImportance_10()", "ml::setTermCriteria_10()", "ml::getTermCriteria_10()", "ml::setActiveVarCount_10()", "ml::getActiveVarCount_10()", "ml::setCalculateVarImportance_10()", "ml::getCalculateVarImportance_10()", "ml::predict_11()", "ml::predict_10()", "ml::train_10()", "ml::isClassifier_10()", "ml::isTrained_10()", "ml::empty_10()", "ml::getVarCount_10()", "ml::create_10()", "ml::getWeights_10()", "ml::setRpropDWMax_10()", "ml::getRpropDWMax_10()", "ml::setRpropDWMin_10()", "ml::getRpropDWMin_10()", "ml::setRpropDWMinus_10()", "ml::getRpropDWMinus_10()", "ml::setRpropDWPlus_10()", "ml::getRpropDWPlus_10()", "ml::setRpropDW0_10()", "ml::getRpropDW0_10()", "ml::setBackpropMomentumScale_10()", "ml::getBackpropMomentumScale_10()", "ml::setBackpropWeightScale_10()", "ml::getBackpropWeightScale_10()", "ml::setTermCriteria_10()", "ml::getTermCriteria_10()", "ml::getLayerSizes_10()", "ml::setLayerSizes_10()", "ml::getTrainMethod_10()", "ml::setActivationFunction_11()", "ml::setActivationFunction_10()", "ml::setTrainMethod_11()", "ml::setTrainMethod_10()", "ml::create_10()", "ml::setPriors_10()", "ml::getPriors_10()", "ml::setRegressionAccuracy_10()", "ml::getRegressionAccuracy_10()", "ml::setTruncatePrunedTree_10()", "ml::getTruncatePrunedTree_10()", "ml::setUse1SERule_10()", "ml::getUse1SERule_10()", "ml::setUseSurrogates_10()", "ml::getUseSurrogates_10()", "ml::setCVFolds_10()", "ml::getCVFolds_10()", "ml::setMinSampleCount_10()", "ml::getMinSampleCount_10()", "ml::setMaxDepth_10()", "ml::getMaxDepth_10()", "ml::setMaxCategories_10()", "ml::getMaxCategories_10()", "ml::create_10()", "ml::findNearest_11()", "ml::findNearest_10()", "ml::setAlgorithmType_10()", "ml::getAlgorithmType_10()", "ml::setEmax_10()", "ml::getEmax_10()", "ml::setIsClassifier_10()", "ml::getIsClassifier_10()", "ml::setDefaultK_10()", "ml::getDefaultK_10()", "ml::create_10()", "ml::get_1learnt_1thetas_10()", "ml::predict_11()", "ml::predict_10()", "ml::setTermCriteria_10()", "ml::getTermCriteria_10()", "ml::setMiniBatchSize_10()", "ml::getMiniBatchSize_10()", "ml::setTrainMethod_10()", "ml::getTrainMethod_10()", "ml::setRegularization_10()", "ml::getRegularization_10()", "ml::setIterations_10()", "ml::getIterations_10()", "ml::setLearningRate_10()", "ml::getLearningRate_10()", "ml::create_10()", "ml::setWeightTrimRate_10()", "ml::getWeightTrimRate_10()", "ml::setWeakCount_10()", "ml::getWeakCount_10()", "ml::setBoostType_10()", "ml::getBoostType_10()", "ml::getSubVector_10()", "ml::shuffleTrainTest_10()", "ml::setTrainTestSplitRatio_11()", "ml::setTrainTestSplitRatio_10()", "ml::setTrainTestSplit_11()", "ml::setTrainTestSplit_10()", "ml::getCatMap_10()", "ml::getCatOfs_10()", "ml::getClassLabels_10()", "ml::getCatCount_10()", "ml::getDefaultSubstValues_10()", "ml::getValues_10()", "ml::getTestSampleIdx_10()", "ml::getTrainSampleIdx_10()", "ml::getResponseType_10()", "ml::getVarType_10()", "ml::getVarIdx_10()", "ml::getTestSampleWeights_10()", "ml::getTrainSampleWeights_10()", "ml::getSampleWeights_10()", "ml::getNormCatResponses_10()", "ml::getResponses_10()", "ml::getTestNormCatResponses_10()", "ml::getTestResponses_10()", "ml::getTrainNormCatResponses_10()", "ml::getTrainResponses_10()", "ml::getTrainSamples_11()", "ml::getTrainSamples_10()", "ml::getMissing_10()", "ml::getSamples_10()", "ml::getSample_10()", "ml::getNAllVars_10()", "ml::getNVars_10()", "ml::getNTrainSamples_10()", "ml::getNTestSamples_10()", "ml::getNSamples_10()", "ml::getLayout_10()", "ml::create_10()", "ml::predictProb_11()", "ml::predictProb_10()", "ml::create_10()", "ml::getDecisionFunction_10()", "ml::getSupportVectors_10()", "ml::setKernel_10()", "ml::getKernelType_10()", "ml::setTermCriteria_10()", "ml::getTermCriteria_10()", "ml::setClassWeights_10()", "ml::getClassWeights_10()", "ml::setP_10()", "ml::getP_10()", "ml::setNu_10()", "ml::getNu_10()", "ml::setC_10()", "ml::getC_10()", "ml::setDegree_10()", "ml::getDegree_10()", "ml::setCoef0_10()", "ml::getCoef0_10()", "ml::setGamma_10()", "ml::getGamma_10()", "ml::setType_10()", "ml::getType_10()", "ml::create_10()", "ml::trainM_11()", "ml::trainM_10()", "ml::trainE_11()", "ml::trainE_10()", "ml::trainEM_11()", "ml::trainEM_10()", "ml::predict2_10()", "ml::getMeans_10()", "ml::getWeights_10()", "ml::setTermCriteria_10()", "ml::getTermCriteria_10()", "ml::setCovarianceMatrixType_10()", "ml::getCovarianceMatrixType_10()", "ml::setClustersNumber_10()", "ml::getClustersNumber_10()", "photo::setGamma_10()", "photo::getGamma_10()", "photo::process_10()", "photo::process_11()", "photo::process_10()", "photo::process_10()", "photo::setExposureWeight_10()", "photo::getExposureWeight_10()", "photo::setSaturationWeight_10()", "photo::getSaturationWeight_10()", "photo::setContrastWeight_10()", "photo::getContrastWeight_10()", "photo::process_11()", "photo::process_10()", "photo::process_11()", "photo::process_10()", "photo::setCut_10()", "photo::getCut_10()", "photo::setExcludeRange_10()", "photo::getExcludeRange_10()", "photo::setMaxBits_10()", "photo::getMaxBits_10()", "photo::computeBitmaps_10()", "photo::shiftMat_10()", "photo::calculateShift_10()", "photo::process_11()", "photo::process_10()", "photo::setBias_10()", "photo::getBias_10()", "photo::setSaturation_10()", "photo::getSaturation_10()", "photo::process_10()", "photo::process_10()", "photo::stylization_11()", "photo::stylization_10()", "photo::pencilSketch_11()", "photo::pencilSketch_10()", "photo::detailEnhance_11()", "photo::detailEnhance_10()", "photo::edgePreservingFilter_11()", "photo::edgePreservingFilter_10()", "photo::textureFlattening_11()", "photo::textureFlattening_10()", "photo::illuminationChange_11()", "photo::illuminationChange_10()", "photo::colorChange_11()", "photo::colorChange_10()", "photo::seamlessClone_10()", "photo::decolor_10()", "photo::createMergeRobertson_10()", "photo::createMergeMertens_11()", "photo::createMergeMertens_10()", "photo::createMergeDebevec_10()", "photo::createCalibrateRobertson_11()", "photo::createCalibrateRobertson_10()", "photo::createCalibrateDebevec_11()", "photo::createCalibrateDebevec_10()", "photo::createAlignMTB_11()", "photo::createAlignMTB_10()", "photo::createTonemapMantiuk_11()", "photo::createTonemapMantiuk_10()", "photo::createTonemapReinhard_11()", "photo::createTonemapReinhard_10()", "photo::createTonemapDurand_11()", "photo::createTonemapDurand_10()", "photo::createTonemapDrago_11()", "photo::createTonemapDrago_10()", "photo::createTonemap_11()", "photo::createTonemap_10()", "photo::denoise_1TVL1_11()", "photo::denoise_1TVL1_10()", "photo::fastNlMeansDenoisingColoredMulti_11()", "photo::fastNlMeansDenoisingColoredMulti_10()", "photo::fastNlMeansDenoisingMulti_13()", "photo::fastNlMeansDenoisingMulti_12()", "photo::inpaint_10()", "photo::fastNlMeansDenoising_13()", "photo::fastNlMeansDenoising_12()", "photo::fastNlMeansDenoisingMulti_11()", "photo::fastNlMeansDenoisingMulti_10()", "photo::fastNlMeansDenoisingColored_11()", "photo::fastNlMeansDenoisingColored_10()", "photo::fastNlMeansDenoising_11()", "photo::fastNlMeansDenoising_10()", "photo::setColorAdaptation_10()", "photo::getColorAdaptation_10()", "photo::setLightAdaptation_10()", "photo::getLightAdaptation_10()", "photo::setIntensity_10()", "photo::getIntensity_10()", "photo::setRandom_10()", "photo::getRandom_10()", "photo::setSamples_10()", "photo::getSamples_10()", "photo::setLambda_10()", "photo::getLambda_10()", "photo::setSigmaColor_10()", "photo::getSigmaColor_10()", "photo::setSigmaSpace_10()", "photo::getSigmaSpace_10()", "photo::setContrast_10()", "photo::getContrast_10()", "photo::setSaturation_10()", "photo::getSaturation_10()", "photo::setSaturation_10()", "photo::getSaturation_10()", "photo::setScale_10()", "photo::getScale_10()", "photo::getRadiance_10()", "photo::setThreshold_10()", "photo::getThreshold_10()", "photo::setMaxIter_10()", "photo::getMaxIter_10()", "video::setShadowThreshold_10()", "video::getShadowThreshold_10()", "video::setShadowValue_10()", "video::getShadowValue_10()", "video::setDetectShadows_10()", "video::getDetectShadows_10()", "video::setkNNSamples_10()", "video::getkNNSamples_10()", "video::setDist2Threshold_10()", "video::getDist2Threshold_10()", "video::setNSamples_10()", "video::getNSamples_10()", "video::setHistory_10()", "video::getHistory_10()", "video::setVarInit_10()", "video::getVarInit_10()", "video::setVarThresholdGen_10()", "video::getVarThresholdGen_10()", "video::setVarThreshold_10()", "video::getVarThreshold_10()", "video::setBackgroundRatio_10()", "video::getBackgroundRatio_10()", "video::setNMixtures_10()", "video::getNMixtures_10()", "video::setHistory_10()", "video::getHistory_10()", "video::setShadowThreshold_10()", "video::getShadowThreshold_10()", "video::setShadowValue_10()", "video::getShadowValue_10()", "video::setDetectShadows_10()", "video::getDetectShadows_10()", "video::setComplexityReductionThreshold_10()", "video::getComplexityReductionThreshold_10()", "video::setVarMax_10()", "video::getVarMax_10()", "video::setVarMin_10()", "video::getVarMin_10()", "video::set_1errorCovPost_10()", "video::get_1errorCovPost_10()", "video::set_1gain_10()", "video::get_1gain_10()", "video::set_1errorCovPre_10()", "video::get_1errorCovPre_10()", "video::set_1measurementNoiseCov_10()", "video::get_1measurementNoiseCov_10()", "video::set_1processNoiseCov_10()", "video::get_1processNoiseCov_10()", "video::set_1measurementMatrix_10()", "video::get_1measurementMatrix_10()", "video::set_1controlMatrix_10()", "video::get_1controlMatrix_10()", "video::set_1transitionMatrix_10()", "video::get_1transitionMatrix_10()", "video::set_1statePost_10()", "video::get_1statePost_10()", "video::set_1statePre_10()", "video::get_1statePre_10()", "video::correct_10()", "video::predict_11()", "video::predict_10()", "video::KalmanFilter_12()", "video::KalmanFilter_11()", "video::KalmanFilter_10()", "video::CamShift_10()", "video::meanShift_10()", "video::findTransformECC_12()", "video::findTransformECC_11()", "video::findTransformECC_10()", "video::estimateRigidTransform_10()", "video::calcOpticalFlowPyrLK_12()", "video::calcOpticalFlowPyrLK_11()", "video::calcOpticalFlowPyrLK_10()", "video::calcOpticalFlowFarneback_10()", "video::createOptFlow_1DualTVL1_10()", "video::createBackgroundSubtractorKNN_11()", "video::createBackgroundSubtractorKNN_10()", "video::createBackgroundSubtractorMOG2_11()", "video::createBackgroundSubtractorMOG2_10()", "video::buildOpticalFlowPyramid_11()", "video::buildOpticalFlowPyramid_10()", "video::getBackgroundImage_10()", "video::apply_11()", "video::apply_10()", "video::collectGarbage_10()", "video::calc_10()", "imgcodecs::imencode_11()", "imgcodecs::imencode_10()", "imgcodecs::imdecode_10()", "imgcodecs::imwrite_11()", "imgcodecs::imwrite_10()", "imgcodecs::imreadmulti_11()", "imgcodecs::imreadmulti_10()", "imgcodecs::imread_11()", "imgcodecs::imread_10()", "videoio::set_10()", "videoio::get_10()", "videoio::retrieve_11()", "videoio::retrieve_10()", "videoio::read_10()", "videoio::grab_10()", "videoio::release_10()", "videoio::isOpened_10()", "videoio::open_11()", "videoio::open_10()", "videoio::VideoCapture_12()", "videoio::VideoCapture_11()", "videoio::VideoCapture_10()", "objdetect::groupRectangles_11()", "objdetect::groupRectangles_10()", "objdetect::get_1svmDetector_10()", "objdetect::get_1cellSize_10()", "objdetect::get_1blockStride_10()", "objdetect::get_1blockSize_10()", "objdetect::get_1winSize_10()", "objdetect::getDaimlerPeopleDetector_10()", "objdetect::getDefaultPeopleDetector_10()", "objdetect::computeGradient_11()", "objdetect::computeGradient_10()", "objdetect::detectMultiScale_11()", "objdetect::detectMultiScale_10()", "objdetect::detect_11()", "objdetect::detect_10()", "objdetect::compute_11()", "objdetect::compute_10()", "objdetect::save_11()", "objdetect::save_10()", "objdetect::load_11()", "objdetect::load_10()", "objdetect::setSVMDetector_10()", "objdetect::getWinSigma_10()", "objdetect::checkDetectorSize_10()", "objdetect::getDescriptorSize_10()", "objdetect::HOGDescriptor_13()", "objdetect::HOGDescriptor_12()", "objdetect::HOGDescriptor_11()", "objdetect::HOGDescriptor_10()", "objdetect::convert_10()", "objdetect::getFeatureType_10()", "objdetect::getOriginalWindowSize_10()", "objdetect::isOldFormatCascade_10()", "objdetect::detectMultiScale3_11()", "objdetect::detectMultiScale3_10()", "objdetect::detectMultiScale2_11()", "objdetect::detectMultiScale2_10()", "objdetect::detectMultiScale_11()", "objdetect::detectMultiScale_10()", "objdetect::empty_10()", "objdetect::load_10()", "objdetect::CascadeClassifier_11()", "objdetect::CascadeClassifier_10()", "features2d::write_10()", "static cv::javaFeatureDetector* cv::javaFeatureDetector::create(int)", "features2d::create_10()", "features2d::empty_10()", "features2d::detect_13()", "features2d::detect_12()", "features2d::detect_11()", "features2d::detect_10()", "features2d::read_10()", "features2d::write_10()", "static cv::javaDescriptorMatcher* cv::javaDescriptorMatcher::create(int)", "features2d::create_10()", "features2d::clone_11()", "features2d::clone_10()", "features2d::radiusMatch_13()", "features2d::radiusMatch_12()", "features2d::knnMatch_13()", "features2d::knnMatch_12()", "features2d::match_13()", "features2d::match_12()", "features2d::radiusMatch_11()", "features2d::radiusMatch_10()", "features2d::knnMatch_11()", "features2d::knnMatch_10()", "features2d::match_11()", "features2d::match_10()", "features2d::train_10()", "features2d::empty_10()", "features2d::clear_10()", "features2d::getTrainDescriptors_10()", "features2d::add_10()", "features2d::isMaskSupported_10()", "features2d::drawMatches2_11()", "features2d::drawMatches2_10()", "features2d::drawMatches_11()", "features2d::drawMatches_10()", "features2d::drawKeypoints_11()", "features2d::drawKeypoints_10()", "features2d::read_10()", "features2d::write_10()", "static cv::javaDescriptorExtractor* cv::javaDescriptorExtractor::create(int)", "features2d::create_10()", "features2d::empty_10()", "features2d::descriptorType_10()", "features2d::descriptorSize_10()", "features2d::compute_11()", "features2d::compute_10()", "calib3d::composeRT_11()", "calib3d::composeRT_10()", "calib3d::matMulDeriv_10()", "calib3d::decomposeProjectionMatrix_11()", "calib3d::decomposeProjectionMatrix_10()", "calib3d::RQDecomp3x3_11()", "calib3d::RQDecomp3x3_10()", "calib3d::findHomography_12()", "calib3d::findHomography_11()", "calib3d::findHomography_10()", "calib3d::Rodrigues_11()", "calib3d::Rodrigues_10()", "calib3d::stereoCalibrate_15()", "calib3d::stereoCalibrate_14()", "calib3d::stereoCalibrate_13()", "calib3d::stereoRectify_13()", "calib3d::stereoRectify_12()", "calib3d::calibrate_12()", "calib3d::calibrate_11()", "calib3d::calibrate_10()", "calib3d::estimateNewCameraMatrixForUndistortRectify_11()", "calib3d::estimateNewCameraMatrixForUndistortRectify_10()", "calib3d::undistortImage_11()", "calib3d::undistortImage_10()", "calib3d::initUndistortRectifyMap_10()", "calib3d::undistortPoints_11()", "calib3d::undistortPoints_10()", "calib3d::distortPoints_11()", "calib3d::distortPoints_10()", "calib3d::projectPoints_13()", "calib3d::projectPoints_12()", "calib3d::decomposeHomographyMat_10()", "calib3d::estimateAffine3D_11()", "calib3d::estimateAffine3D_10()", "calib3d::reprojectImageTo3D_12()", "calib3d::reprojectImageTo3D_11()", "calib3d::reprojectImageTo3D_10()", "calib3d::validateDisparity_11()", "calib3d::validateDisparity_10()", "calib3d::getValidDisparityROI_10()", "calib3d::filterSpeckles_11()", "calib3d::filterSpeckles_10()", "calib3d::correctMatches_10()", "calib3d::triangulatePoints_10()", "calib3d::computeCorrespondEpilines_10()", "calib3d::recoverPose_12()", "calib3d::recoverPose_11()", "calib3d::recoverPose_10()", "calib3d::decomposeEssentialMat_10()", "calib3d::findEssentialMat_12()", "calib3d::findEssentialMat_11()", "calib3d::findEssentialMat_10()", "calib3d::findFundamentalMat_12()", "calib3d::findFundamentalMat_11()", "calib3d::findFundamentalMat_10()", "calib3d::convertPointsFromHomogeneous_10()", "calib3d::convertPointsToHomogeneous_10()", "calib3d::getOptimalNewCameraMatrix_11()", "calib3d::getOptimalNewCameraMatrix_10()", "calib3d::rectify3Collinear_10()", "calib3d::stereoRectifyUncalibrated_11()", "calib3d::stereoRectifyUncalibrated_10()", "calib3d::stereoRectify_11()", "calib3d::stereoRectify_10()", "calib3d::stereoCalibrate_12()", "calib3d::stereoCalibrate_11()", "calib3d::stereoCalibrate_10()", "calib3d::calibrationMatrixValues_10()", "calib3d::calibrateCamera_12()", "calib3d::calibrateCamera_11()", "calib3d::calibrateCamera_10()", "calib3d::findCirclesGrid_11()", "calib3d::findCirclesGrid_10()", "calib3d::drawChessboardCorners_10()", "calib3d::initCameraMatrix2D_11()", "calib3d::initCameraMatrix2D_10()", "calib3d::findChessboardCorners_11()", "calib3d::findChessboardCorners_10()", "calib3d::solvePnPRansac_11()", "calib3d::solvePnPRansac_10()", "calib3d::solvePnP_11()", "calib3d::solvePnP_10()", "calib3d::projectPoints_11()", "calib3d::projectPoints_10()", "calib3d::setDisp12MaxDiff_10()", "calib3d::getDisp12MaxDiff_10()", "calib3d::setSpeckleRange_10()", "calib3d::getSpeckleRange_10()", "calib3d::setSpeckleWindowSize_10()", "calib3d::getSpeckleWindowSize_10()", "calib3d::setBlockSize_10()", "calib3d::getBlockSize_10()", "calib3d::setNumDisparities_10()", "calib3d::getNumDisparities_10()", "calib3d::setMinDisparity_10()", "calib3d::getMinDisparity_10()", "calib3d::compute_10()", "calib3d::create_11()", "calib3d::create_10()", "calib3d::setROI2_10()", "calib3d::getROI2_10()", "calib3d::setROI1_10()", "calib3d::getROI1_10()", "calib3d::setSmallerBlockSize_10()", "calib3d::getSmallerBlockSize_10()", "calib3d::setUniquenessRatio_10()", "calib3d::getUniquenessRatio_10()", "calib3d::setTextureThreshold_10()", "calib3d::getTextureThreshold_10()", "calib3d::setPreFilterCap_10()", "calib3d::getPreFilterCap_10()", "calib3d::setPreFilterSize_10()", "calib3d::getPreFilterSize_10()", "calib3d::setPreFilterType_10()", "calib3d::getPreFilterType_10()", "calib3d::create_11()", "calib3d::create_10()", "calib3d::setMode_10()", "calib3d::getMode_10()", "calib3d::setP2_10()", "calib3d::getP2_10()", "calib3d::setP1_10()", "calib3d::getP1_10()", "calib3d::setUniquenessRatio_10()", "calib3d::getUniquenessRatio_10()", "calib3d::setPreFilterCap_10()", "calib3d::getPreFilterCap_10()", "\"K\"K\"K\"K\"K\"K\"K\"K", "N2cv9AlgorithmE", "void* cv::OutOfMemoryError(size_t)", "void cvMaxS(const void*, double, void*)", "void cvMinS(const void*, double, void*)", "void cvMax(const void*, const void*, void*)", "void cvMin(const void*, const void*, void*)", "void cvCmpS(const void*, double, void*, int)", "void cvCmp(const void*, const void*, void*, int)", "void cvInRangeS(const void*, CvScalar, CvScalar, void*)", "void cvInRange(const void*, const void*, const void*, void*)", "void cvAbsDiffS(const CvArr*, CvArr*, CvScalar)", "void cvAbsDiff(const CvArr*, const CvArr*, CvArr*)", "void cvAddWeighted(const CvArr*, double, const CvArr*, double, double, CvArr*)", "void cvDiv(const CvArr*, const CvArr*, CvArr*, double)", "void cvMul(const CvArr*, const CvArr*, CvArr*, double)", "void cvSubRS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvAddS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvSub(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvAdd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvXorS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvOrS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvAndS(const CvArr*, CvScalar, CvArr*, const CvArr*)", "void cvXor(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvOr(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvAnd(const CvArr*, const CvArr*, CvArr*, const CvArr*)", "void cvNot(const CvArr*, CvArr*)", "void cv::inRange(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::Cmp_SIMD<signed char>::Cmp_SIMD(int)", "cv::Cmp_SIMD<int>::Cmp_SIMD(int)", "void cv::compare(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "void cv::arithm_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int, void (**)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, cv::Size, void*), bool, void*, int)", "void cv::binary_op(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, void (* const*)(const uchar*, size_t, const uchar*, size_t, uchar*, size_t, cv::Size, void*), bool, int)", "void cv::convertAndUnrollScalar(const cv::Mat&, int, uchar*, size_t)", "CvTermCriteria cvCheckTermCriteria(CvTermCriteria, double, int)", "IplImage* cvCloneImage(const IplImage*)", "int cvGetImageCOI(const IplImage*)", "void cvSetImageCOI(IplImage*, int)", "CvRect cvGetImageROI(const IplImage*)", "void cvResetImageROI(IplImage*)", "void cvSetImageROI(IplImage*, CvRect)", "void cvReleaseImage(IplImage**)", "void cvReleaseImageHeader(IplImage**)", "IplImage* cvInitImageHeader(IplImage*, CvSize, int, int, int, int)", "IplImage* cvGetImage(const CvArr*, IplImage*)", "CvMat* cvReshape(const CvArr*, CvMat*, int, int)", "CvArr* cvReshapeMatND(const CvArr*, int, CvArr*, int, int, int*)", "CvMat* cvGetMat(const CvArr*, CvMat*, int*, int)", "void icvDeleteNode(CvSparseMat*, const int*, unsigned int*)", "void cvSetRealND(CvArr*, const int*, double)", "void cvSetReal3D(CvArr*, int, int, int, double)", "void cvSetReal2D(CvArr*, int, int, double)", "void cvSetReal1D(CvArr*, int, double)", "void cvSet2D(CvArr*, int, int, CvScalar)", "void cvSet1D(CvArr*, int, CvScalar)", "double cvGetRealND(const CvArr*, const int*)", "double cvGetReal3D(const CvArr*, int, int, int)", "double cvGetReal2D(const CvArr*, int, int)", "double cvGetReal1D(const CvArr*, int)", "CvScalar cvGet2D(const CvArr*, int, int)", "CvScalar cvGet1D(const CvArr*, int)", "uchar* cvPtrND(const CvArr*, const int*, int*, int, unsigned int*)", "uchar* cvPtr3D(const CvArr*, int, int, int, int*)", "uchar* cvPtr2D(const CvArr*, int, int, int*)", "uchar* icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned int*)", "uchar* cvPtr1D(const CvArr*, int, int*)", "void cvRawDataToScalar(const void*, int, CvScalar*)", "void cvScalarToRawData(const CvScalar*, void*, int, int)", "CvMat* cvGetDiag(const CvArr*, CvMat*, int)", "CvMat* cvGetCols(const CvArr*, CvMat*, int, int)", "CvMat* cvGetRows(const CvArr*, CvMat*, int, int, int)", "CvMat* cvGetSubRect(const CvArr*, CvMat*, CvRect)", "CvSize cvGetSize(const CvArr*)", "int cvGetDimSize(const CvArr*, int)", "int cvGetDims(const CvArr*, int*)", "int cvGetElemType(const CvArr*)", "void cvGetRawData(const CvArr*, uchar**, int*, CvSize*)", "void cvReleaseData(CvArr*)", "void cvSetData(CvArr*, void*, int)", "void cvCreateData(CvArr*)", "CvSparseNode* cvInitSparseMatIterator(const CvSparseMat*, CvSparseMatIterator*)", "CvSparseMat* cvCloneSparseMat(const CvSparseMat*)", "void cvReleaseSparseMat(CvSparseMat**)", "CvSparseMat* cvCreateSparseMat(int, const int*, int)", "CvMatND* cvGetMatND(const CvArr*, CvMatND*, int*)", "int cvInitNArrayIterator(int, CvArr**, const CvArr*, CvMatND*, CvNArrayIterator*, int)", "CvMatND* cvCloneMatND(const CvMatND*)", "CvMatND* cvCreateMatNDHeader(int, const int*, int)", "CvMatND* cvInitMatNDHeader(CvMatND*, int, const int*, int, void*)", "CvMat* cvCloneMat(const CvMat*)", "void cvReleaseMat(CvMat**)", "CvMat* cvInitMatHeader(CvMat*, int, int, int, void*, int)", "CvMat* cvCreateMatHeader(int, int, int)", "void cvSetIPLAllocators(Cv_iplCreateImageHeader, Cv_iplAllocateImageData, Cv_iplDeallocate, Cv_iplCreateROI, Cv_iplCloneImage)", "virtual void cv::ConjGradSolverImpl::setTermCriteria(const cv::TermCriteria&)", "virtual double cv::ConjGradSolverImpl::minimize(cv::InputOutputArray)", "N2cv6detail8PtrOwnerE", "N2cv16MinProblemSolver8FunctionE", "N2cv16MinProblemSolverE", "N2cv14ConjGradSolverE", "N2cv18ConjGradSolverImplE", "N2cv6detail12PtrOwnerImplINS_18ConjGradSolverImplENS_14DefaultDeleterIS2_EEEE", "void cvNormalize(const CvArr*, CvArr*, double, double, int, const CvArr*)", "void cvLUT(const void*, void*, const void*)", "void cvConvertScale(const void*, void*, double, double)", "void cvConvertScaleAbs(const void*, void*, double, double)", "void cvMerge(const void*, const void*, const void*, const void*, void*)", "void cvSplit(const void*, void*, void*, void*, void*)", "void cv::normalize(cv::InputArray, cv::InputOutputArray, double, double, int, int, cv::InputArray)", "void cv::LUT(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::Mat::convertTo(cv::OutputArray, int, double, double) const", "void cv::convertScaleAbs(cv::InputArray, cv::OutputArray, double, double)", "void cv::insertChannel(cv::InputArray, cv::InputOutputArray, int)", "void cv::extractChannel(cv::InputArray, cv::OutputArray, int)", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const std::vector<int>&)", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const int*, size_t)", "void cv::mixChannels(const cv::Mat*, size_t, cv::Mat*, size_t, const int*, size_t)", "void cv::merge(const cv::Mat*, size_t, cv::OutputArray)", "void cv::split(cv::InputArray, cv::OutputArrayOfArrays)", "void cv::split(const cv::Mat&, cv::Mat*)", "N2cv15LUTParallelBodyE", "N2cv6detail12PtrOwnerImplINS_16ParallelLoopBodyENS_14DefaultDeleterIS2_EEEE", "void cvRepeat(const CvArr*, CvArr*)", "void cvFlip(const CvArr*, CvArr*, int)", "void cvCopy(const void*, void*, const void*)", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const Scalar&)", "int cv::borderInterpolate(int, int, int)", "void cv::repeat(cv::InputArray, int, int, cv::OutputArray)", "void cv::flip(cv::InputArray, cv::OutputArray, int)", "cv::Mat& cv::Mat::setTo(cv::InputArray, cv::InputArray)", "void cv::Mat::copyTo(cv::OutputArray, cv::InputArray) const", "void cv::Mat::copyTo(cv::OutputArray) const", "void throw_no_cuda()", "cv::cuda::GpuMat cv::cuda::GpuMat::reshape(int, int) const", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat&, cv::Rect)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat&, cv::Range, cv::Range)", "cv::cuda::HostMem cv::cuda::HostMem::reshape(int, int) const", "void throw_no_cuda()", "void throw_no_cuda()", "void throw_no_cuda()", "void* cvPrevTreeNode(CvTreeNodeIterator*)", "void* cvNextTreeNode(CvTreeNodeIterator*)", "void cvInitTreeNodeIterator(CvTreeNodeIterator*, const void*, int)", "void cvRemoveNodeFromTree(void*, void*)", "void cvInsertNodeIntoTree(void*, void*, void*)", "CvSeq* cvTreeToNodeSeq(const void*, int, CvMemStorage*)", "CvGraph* cvCloneGraph(const CvGraph*, CvMemStorage*)", "schar* icvSeqFindNextElem(CvSeq*, int, int, int, int*)", "int cvNextGraphItem(CvGraphScanner*)", "void cvReleaseGraphScanner(CvGraphScanner**)", "void icvSeqElemsClearFlags(CvSeq*, int, int)", "CvGraphScanner* cvCreateGraphScanner(CvGraph*, CvGraphVtx*, int)", "int cvGraphVtxDegree(const CvGraph*, int)", "int cvGraphVtxDegreeByPtr(const CvGraph*, const CvGraphVtx*)", "void cvGraphRemoveEdge(CvGraph*, int, int)", "void cvGraphRemoveEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*)", "int cvGraphAddEdge(CvGraph*, int, int, const CvGraphEdge*, CvGraphEdge**)", "int cvGraphAddEdgeByPtr(CvGraph*, CvGraphVtx*, CvGraphVtx*, const CvGraphEdge*, CvGraphEdge**)", "CvGraphEdge* cvFindGraphEdge(const CvGraph*, int, int)", "CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph*, const CvGraphVtx*, const CvGraphVtx*)", "int cvGraphRemoveVtx(CvGraph*, int)", "int cvGraphRemoveVtxByPtr(CvGraph*, CvGraphVtx*)", "int cvGraphAddVtx(CvGraph*, const CvGraphVtx*, CvGraphVtx**)", "void cvClearGraph(CvGraph*)", "CvGraph* cvCreateGraph(int, int, int, int, CvMemStorage*)", "void cvSetRemove(CvSet*, int)", "int cvSetAdd(CvSet*, CvSetElem*, CvSetElem**)", "CvSet* cvCreateSet(int, int, int, CvMemStorage*)", "int cvSeqPartition(const CvSeq*, CvMemStorage*, CvSeq**, CvCmpFunc, void*)", "schar* cvSeqSearch(CvSeq*, const void*, CvCmpFunc, int, int*, void*)", "void cvSeqSort(CvSeq*, CvCmpFunc, void*)", "void cvSeqInsertSlice(CvSeq*, int, const CvArr*)", "void cvSeqRemoveSlice(CvSeq*, CvSlice)", "CvSeq* cvSeqSlice(const CvSeq*, CvSlice, CvMemStorage*, int)", "void cvClearSeq(CvSeq*)", "void cvSeqPopMulti(CvSeq*, void*, int, int)", "void cvSeqPushMulti(CvSeq*, const void*, int, int)", "void cvSeqRemove(CvSeq*, int)", "schar* cvSeqInsert(CvSeq*, int, const void*)", "void cvSeqPopFront(CvSeq*, void*)", "schar* cvSeqPushFront(CvSeq*, const void*)", "void cvSeqPop(CvSeq*, void*)", "schar* cvSeqPush(CvSeq*, const void*)", "void cvSetSeqReaderPos(CvSeqReader*, int, int)", "int cvGetSeqReaderPos(CvSeqReader*)", "void cvChangeSeqBlock(void*, int)", "void cvStartReadSeq(const CvSeq*, CvSeqReader*, int)", "void icvGrowSeq(CvSeq*, int)", "void cvCreateSeqBlock(CvSeqWriter*)", "CvSeq* cvEndWriteSeq(CvSeqWriter*)", "void cvFlushSeqWriter(CvSeqWriter*)", "void cvStartWriteSeq(int, int, int, CvMemStorage*, CvSeqWriter*)", "void cvStartAppendToSeq(CvSeq*, CvSeqWriter*)", "CvSeq* cvMakeSeqHeaderForArray(int, int, int, void*, int, CvSeq*, CvSeqBlock*)", "void* cvCvtSeqToArray(const CvSeq*, void*, CvSlice)", "int cvSeqElemIdx(const CvSeq*, const void*, CvSeqBlock**)", "void cvSetSeqBlockSize(CvSeq*, int)", "CvSeq* cvCreateSeq(int, size_t, size_t, CvMemStorage*)", "void icvGoNextMemBlock(CvMemStorage*)", "void* cvMemStorageAlloc(CvMemStorage*, size_t)", "void cvRestoreMemStoragePos(CvMemStorage*, CvMemStoragePos*)", "void cvSaveMemStoragePos(const CvMemStorage*, CvMemStoragePos*)", "void cvClearMemStorage(CvMemStorage*)", "void icvDestroyMemStorage(CvMemStorage*)", "void cvReleaseMemStorage(CvMemStorage**)", "CvMemStorage* cvCreateChildMemStorage(CvMemStorage*)", "void icvInitMemStorage(CvMemStorage*, int)", "void cv::directx::convertToDirect3DSurface9(cv::InputArray, IDirect3DSurface9*, void*)", "void cv::directx::convertFromD3D10Texture2D(ID3D10Texture2D*, cv::OutputArray)", "void cv::directx::convertToD3D10Texture2D(cv::InputArray, ID3D10Texture2D*)", "void cv::directx::convertFromD3D11Texture2D(ID3D11Texture2D*, cv::OutputArray)", "void cv::directx::convertToD3D11Texture2D(cv::InputArray, ID3D11Texture2D*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromDirect3DDevice9(IDirect3DDevice9*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromDirect3DDevice9Ex(IDirect3DDevice9Ex*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromD3D10Device(ID3D10Device*)", "cv::ocl::Context& cv::directx::ocl::initializeContextFromD3D11Device(ID3D11Device*)", "int cv::directx::getTypeFromD3DFORMAT(int)", "int cv::directx::getTypeFromDXGI_FORMAT(int)", "void cv::DownhillSolverImpl::updateCoordSum(const cv::Mat&, cv::Mat&)", "double cv::DownhillSolverImpl::calc_f(const double*)", "double cv::DownhillSolverImpl::innerDownhillSimplex(cv::Mat&, double, double, int&, int)", "void cv::DownhillSolverImpl::createInitialSimplex(const cv::Mat&, cv::Mat&, cv::Mat&)", "virtual double cv::DownhillSolverImpl::minimize(cv::InputOutputArray)", "virtual void cv::DownhillSolverImpl::setTermCriteria(const cv::TermCriteria&)", "N2cv14DownhillSolverE", "N2cv18DownhillSolverImplE", "N2cv6detail12PtrOwnerImplINS_18DownhillSolverImplENS_14DefaultDeleterIS2_EEEE", "void cvDCT(const CvArr*, CvArr*, int)", "void cvMulSpectrums(const CvArr*, const CvArr*, CvArr*, int)", "void cvDFT(const CvArr*, CvArr*, int, int)", "void cv::dct(cv::InputArray, cv::OutputArray, int)", "void cv::mulSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "void cv::DFT(const cv::Complex<_Tp>*, cv::Complex<_Tp>*, int, int, const int*, const int*, const cv::Complex<_Tp>*, int, const void*, cv::Complex<_Tp>*, int, double) [with T = float]", "void cv::DFT(const cv::Complex<_Tp>*, cv::Complex<_Tp>*, int, int, const int*, const int*, const cv::Complex<_Tp>*, int, const void*, cv::Complex<_Tp>*, int, double) [with T = double]", "void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "0Y\r@:i\r", "PF SdF", " [@W:[", "void glob_rec(const cv::String&, const cv::String&, std::vector<cv::String>&, bool)", "cv::Mat::Mat(int, int, int, void*, size_t)", "double cv::kmeans(cv::InputArray, int, cv::InputOutputArray, cv::TermCriteria, int, int, cv::OutputArray)", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerE", "void cvSVBkSb(const CvArr*, const CvArr*, const CvArr*, const CvArr*, CvArr*, int)", "void cvSVD(CvArr*, CvArr*, CvArr*, CvArr*, int)", "void cvEigenVV(CvArr*, CvArr*, CvArr*, double, int, int)", "int cvSolve(const CvArr*, const CvArr*, CvArr*, int)", "double cvInvert(const CvArr*, CvArr*, int)", "double cvDet(const CvArr*)", "static void cv::SVD::backSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::_SVDcompute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "bool cv::eigen(cv::InputArray, cv::OutputArray, cv::OutputArray)", "bool cv::solve(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "double cv::invert(cv::InputArray, cv::OutputArray, int)", "cv::Mat::Mat(int, int, int, void*, size_t)", "double cv::determinant(cv::InputArray)", "cv::Mat cv::asRowMatrix(cv::InputArrayOfArrays, int, double, double)", "void cv::LDA::compute(cv::InputArrayOfArrays, cv::InputArray)", "void cv::sortMatrixColumnsByIndices(cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::Mat cv::argsort(cv::InputArray, bool)", "void cv::LDA::lda(cv::InputArrayOfArrays, cv::InputArray)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::LDA::load(const cv::String&)", "void cv::LDA::save(const cv::String&) const", "static cv::Mat cv::LDA::subspaceReconstruct(cv::InputArray, cv::InputArray, cv::InputArray)", "static cv::Mat cv::LDA::subspaceProject(cv::InputArray, cv::InputArray, cv::InputArray)", "int cv::solveLP(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void cvSolvePoly(const CvMat*, CvMat*, int, int)", "int cvSolveCubic(const CvMat*, CvMat*)", "double cv::solvePoly(cv::InputArray, cv::OutputArray, int)", "int cv::solveCubic(cv::InputArray, cv::OutputArray)", "void cvPow(const CvArr*, CvArr*, double)", "void cvLog(const CvArr*, CvArr*)", "void cvExp(const CvArr*, CvArr*)", "void cvPolarToCart(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "void cvCartToPolar(const CvArr*, const CvArr*, CvArr*, CvArr*, int)", "void cv::patchNaNs(cv::InputOutputArray, double)", "bool cv::checkRange(cv::InputArray, bool, cv::Point*, double, double)", "void cv::pow(cv::InputArray, double, cv::OutputArray)", "void cv::log(cv::InputArray, cv::OutputArray)", "void cv::exp(cv::InputArray, cv::OutputArray)", "void cv::cartToPolar(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "void cv::phase(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "void cv::magnitude(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cvBackProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "void cvProjectPCA(const CvArr*, const CvArr*, const CvArr*, CvArr*)", "void cvCalcPCA(const CvArr*, CvArr*, CvArr*, CvArr*, int)", "void cvCalcCovarMatrix(const CvArr**, int, CvArr*, CvArr*, int)", "void cvScaleAdd(const CvArr*, CvScalar, const CvArr*, CvArr*)", "void cvPerspectiveTransform(const CvArr*, CvArr*, const CvMat*)", "void cvTransform(const CvArr*, CvArr*, const CvMat*, const CvMat*)", "void cvGEMM(const CvArr*, const CvArr*, double, const CvArr*, double, CvArr*, int)", "double cv::Mat::dot(cv::InputArray) const", "void cv::mulTransposed(cv::InputArray, cv::OutputArray, bool, cv::InputArray, double, int)", "double cv::Mahalanobis(cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::calcCovarMatrix(cv::InputArray, cv::OutputArray, cv::InputOutputArray, int, int)", "void cv::calcCovarMatrix(const cv::Mat*, int, cv::Mat&, cv::Mat&, int, int)", "void cv::scaleAdd(cv::InputArray, double, cv::InputArray, cv::OutputArray)", "void cv::perspectiveTransform(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::transform(cv::InputArray, cv::OutputArray, cv::InputArray)", "cv::Mat::Mat(int, int, int, void*, size_t)", "void cv::gemm(cv::InputArray, cv::InputArray, double, cv::InputArray, double, cv::OutputArray, int)", "virtual void cv::MatOp_Initializer::assign(const cv::MatExpr&, cv::Mat&, int) const", "virtual void cv::MatOp_Bin::assign(const cv::MatExpr&, cv::Mat&, int) const", "virtual void cv::MatOp_Identity::assign(const cv::MatExpr&, cv::Mat&, int) const", "N2cv5MatOpE", "N2cv14MatOp_IdentityE", "N2cv11MatOp_AddExE", "N2cv9MatOp_BinE", "N2cv9MatOp_CmpE", "N2cv10MatOp_GEMME", "N2cv12MatOp_InvertE", "N2cv7MatOp_TE", "N2cv11MatOp_SolveE", "N2cv17MatOp_InitializerE", "_IplImage::_IplImage(const cv::Mat&)", "cv::RotatedRect::RotatedRect(const Point2f&, const Point2f&, const Point2f&)", "void cv::normalize(const cv::SparseMat&, cv::SparseMat&, double, int)", "void cv::minMaxLoc(const cv::SparseMat&, double*, double*, int*, int*)", "double cv::norm(const cv::SparseMat&, int)", "void cv::SparseMat::erase(const int*, size_t*)", "void cv::SparseMat::erase(int, int, int, size_t*)", "void cv::SparseMat::erase(int, int, size_t*)", "uchar* cv::SparseMat::ptr(const int*, bool, size_t*)", "uchar* cv::SparseMat::ptr(int, int, int, bool, size_t*)", "uchar* cv::SparseMat::ptr(int, int, bool, size_t*)", "uchar* cv::SparseMat::ptr(int, bool, size_t*)", "void cv::SparseMat::convertTo(cv::Mat&, int, double, double) const", "void (* cv::getConvertScaleElem(int, int))(const void*, void*, int, double, double)", "void (* cv::getConvertElem(int, int))(const void*, void*, int)", "void cv::SparseMat::convertTo(cv::SparseMat&, int, double) const", "void cv::SparseMat::copyTo(cv::Mat&) const", "void cv::SparseMat::create(int, const int*, int)", "void cv::MatConstIterator::pos(int*) const", "void cv::NAryMatIterator::init(const cv::Mat**, cv::Mat*, uchar**, int)", "cv::Mat cv::Mat::reshape(int, int, const int*) const", "int cvKMeans2(const CvArr*, int, CvArr*, CvTermCriteria, int, CvRNG*, int, CvArr*, double*)", "void cvSort(const CvArr*, CvArr*, CvArr*, int)", "CvArr* cvRange(CvArr*, double, double)", "void cvReduce(const CvArr*, CvArr*, int, int)", "void cvCrossProduct(const CvArr*, const CvArr*, CvArr*)", "void cvTranspose(const CvArr*, CvArr*)", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = unsigned char]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = signed char]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short unsigned int]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = short int]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = int]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = float]", "void cv::sortIdx_(const cv::Mat&, cv::Mat&, int) [with T = double]", "void cv::sortIdx(cv::InputArray, cv::OutputArray, int)", "void cv::sort(cv::InputArray, cv::OutputArray, int)", "void cv::reduce(cv::InputArray, cv::OutputArray, int, int, int)", "cv::Mat cv::Mat::cross(cv::InputArray) const", "void cv::completeSymm(cv::InputOutputArray, bool)", "void cv::transpose(cv::InputArray, cv::OutputArray)", "cv::Scalar cv::trace(cv::InputArray)", "void cv::setIdentity(cv::InputOutputArray, const Scalar&)", "void cv::vconcat(const cv::Mat*, size_t, cv::OutputArray)", "void cv::hconcat(const cv::Mat*, size_t, cv::OutputArray)", "void cv::_OutputArray::assign(const cv::Mat&) const", "void cv::_OutputArray::assign(const cv::UMat&) const", "void cv::_OutputArray::setTo(const cv::_InputArray&, const cv::_InputArray&) const", "cv::cuda::HostMem& cv::_OutputArray::getHostMemRef() const", "cv::ogl::Buffer& cv::_OutputArray::getOGlBufferRef() const", "cv::cuda::GpuMat& cv::_OutputArray::getGpuMatRef() const", "cv::UMat& cv::_OutputArray::getUMatRef(int) const", "cv::Mat& cv::_OutputArray::getMatRef(int) const", "void cv::_OutputArray::clear() const", "void cv::_OutputArray::release() const", "void cv::_OutputArray::create(int, const int*, int, int, bool, int) const", "void cv::_OutputArray::create(int, int, int, int, bool, int) const", "void cv::_OutputArray::create(cv::Size, int, int, bool, int) const", "void cv::_InputArray::copyTo(const cv::_OutputArray&, const cv::_InputArray&) const", "void cv::_InputArray::copyTo(const cv::_OutputArray&) const", "size_t cv::_InputArray::step(int) const", "size_t cv::_InputArray::offset(int) const", "bool cv::_InputArray::isSubmatrix(int) const", "bool cv::_InputArray::isContinuous(int) const", "bool cv::_InputArray::empty() const", "int cv::_InputArray::type(int) const", "size_t cv::_InputArray::total(int) const", "int cv::_InputArray::dims(int) const", "int cv::_InputArray::sizend(int*, int) const", "cv::Size cv::_InputArray::size(int) const", "cv::ogl::Buffer cv::_InputArray::getOGlBuffer() const", "cv::cuda::GpuMat cv::_InputArray::getGpuMat() const", "void cv::_InputArray::getUMatVector(std::vector<cv::UMat>&) const", "void cv::_InputArray::getMatVector(std::vector<cv::Mat>&) const", "cv::UMat cv::_InputArray::getUMat(int) const", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "cv::Mat cv::_InputArray::getMat_(int) const", "void cv::scalarToRawData(const Scalar&, void*, int, int)", "static cv::Mat cv::Mat::diag(const cv::Mat&)", "cv::Mat cv::Mat::reshape(int, int) const", "void cv::insertImageCOI(cv::InputArray, CvArr*, int)", "void cv::extractImageCOI(const CvArr*, cv::OutputArray, int)", "cv::Mat& cv::Mat::adjustROI(int, int, int, int)", "void cv::Mat::locateROI(cv::Size&, cv::Point&) const", "cv::Mat::Mat(int, int, int, void*, size_t)", "cv::Mat cv::iplImageToMat(const IplImage*, bool)", "cv::Mat cv::cvarrToMat(const CvArr*, bool, bool, int, cv::AutoBuffer<double>*)", "void cv::Mat::push_back(const cv::Mat&)", "void cv::Mat::resize(size_t)", "void cv::Mat::reserve(size_t)", "void cv::Mat::pop_back(size_t)", "cv::Mat cv::Mat::diag(int) const", "cv::Mat::Mat(const cv::Mat&, const cv::Range*)", "cv::Mat::Mat(const cv::Mat&, const Rect&)", "cv::Mat::Mat(const cv::Mat&, const cv::Range&, const cv::Range&)", "void cv::setSize(cv::Mat&, int, const int*, const size_t*, bool)", "void cv::Mat::create(int, const int*, int)", "virtual void cv::StdMatAllocator::deallocate(cv::UMatData*) const", "virtual cv::UMatData* cv::StdMatAllocator::allocate(int, const int*, int, void*, size_t*, int, cv::UMatUsageFlags) const", "virtual void cv::MatAllocator::copy(cv::UMatData*, cv::UMatData*, int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, bool) const", "virtual void cv::MatAllocator::upload(cv::UMatData*, const void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "virtual void cv::MatAllocator::download(cv::UMatData*, void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "N2cv20BufferPoolControllerE", "N2cv12MatAllocatorE", "N2cv25DummyBufferPoolControllerE", "N2cv15StdMatAllocatorE", "void cv::ocl::OpenCLBufferPoolBaseImpl<Derived, BufferEntry, T>::release(T) [with Derived = cv::ocl::OpenCLBufferPoolImpl; BufferEntry = cv::ocl::CLBufferEntry; T = _cl_mem*]", "void cv::ocl::OpenCLBufferPoolImpl::_allocateBufferEntry(cv::ocl::OpenCLBufferPoolImpl::BufferEntry&, size_t)", "void cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(const BufferEntry&)", "cv::ocl::OpenCLBufferPoolBaseImpl<Derived, BufferEntry, T>::~OpenCLBufferPoolBaseImpl() [with Derived = cv::ocl::OpenCLBufferPoolImpl; BufferEntry = cv::ocl::CLBufferEntry; T = _cl_mem*]", "static bool cv::ocl::Image2D::Impl::isFormatSupported(cl_image_format)", "int cv::ocl::checkOptimalVectorWidth(const int*, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::ocl::OclVectorStrategy)", "cv::String cv::ocl::kernelToStr(cv::InputArray, int, const char*)", "void cv::ocl::getPlatforms(std::vector<_cl_platform_id*>&)", "void cv::ocl::PlatformInfo::getDevice(cv::ocl::Device&, int) const", "void cv::ocl::getDevices(std::vector<_cl_device_id*>&, cl_platform_id)", "size_t getConfigurationParameterForSize(const char*, size_t)", "virtual cv::BufferPoolController* cv::ocl::OpenCLAllocator::getBufferPoolController(const char*) const", "virtual void cv::ocl::OpenCLAllocator::copy(cv::UMatData*, cv::UMatData*, int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, bool) const", "virtual void cv::ocl::OpenCLAllocator::upload(cv::UMatData*, const void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "bool cv::ocl::OpenCLAllocator::checkContinuous(int, const size_t*, const size_t*, const size_t*, const size_t*, const size_t*, size_t&, size_t*, size_t&, size_t*, size_t*, size_t&, size_t*, size_t*) const", "virtual void cv::ocl::OpenCLAllocator::download(cv::UMatData*, void*, int, const size_t*, const size_t*, const size_t*, const size_t*) const", "virtual void cv::ocl::OpenCLAllocator::unmap(cv::UMatData*) const", "virtual void cv::ocl::OpenCLAllocator::map(cv::UMatData*, int) const", "virtual void cv::ocl::OpenCLAllocator::deallocate(cv::UMatData*) const", "virtual bool cv::ocl::OpenCLAllocator::allocate(cv::UMatData*, int, cv::UMatUsageFlags) const", "virtual cv::UMatData* cv::ocl::OpenCLAllocator::allocate(int, const int*, int, void*, size_t*, int, cv::UMatUsageFlags) const", "cv::ocl::Program::Impl::Impl(const cv::String&, const cv::String&)", "bool cv::ocl::Kernel::runTask(bool, const cv::ocl::Queue&)", "bool cv::ocl::Kernel::run(int, size_t*, size_t*, bool, const cv::ocl::Queue&)", "void cv::ocl::Kernel::Impl::addUMat(const cv::UMat&, bool)", "int cv::ocl::Kernel::set(int, const cv::ocl::KernelArg&)", "int cv::ocl::Kernel::set(int, const void*, size_t)", "cv::ocl::Kernel::Impl::Impl(const char*, const cv::ocl::Program&)", "static cv::ocl::KernelArg cv::ocl::KernelArg::Constant(const cv::Mat&)", "void cv::ocl::Queue::finish()", "cv::ocl::Queue::Impl::Impl(const cv::ocl::Context&, const cv::ocl::Device&)", "void cv::ocl::Context::setUseSVM(bool)", "_cl_device_id* cv::ocl::selectOpenCLDevice()", "void cv::ocl::Context::Impl::setDefault()", "cv::ocl::Context::Impl::Impl(int)", "void cv::ocl::Device::maxWorkItemSizes(size_t*) const", "bool getBoolParameter(const char*, bool)", "void cv::ocl::Platform::Impl::init()", "N2cv3ocl16OpenCLBufferPoolIP7_cl_memEE", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl15OpenCLAllocatorE", "void cv::ogl::Arrays::setTexCoordArray(cv::InputArray)", "void cv::ogl::Arrays::setNormalArray(cv::InputArray)", "void cv::ogl::Arrays::setColorArray(cv::InputArray)", "void cv::ogl::Arrays::setVertexArray(cv::InputArray)", "void {anonymous}::throw_no_ogl()", "cv::FormattedImpl::FormattedImpl(cv::String, cv::String, cv::Mat, char*, bool, bool, int)", "N2cv9FormattedE", "N2cv9FormatterE", "N2cv13FormattedImplE", "N2cv13FormatterBaseE", "N2cv16DefaultFormatterE", "N2cv15MatlabFormatterE", "N2cv15PythonFormatterE", "N2cv14NumpyFormatterE", "N2cv12CSVFormatterE", "N2cv10CFormatterE", "N2cv6detail12PtrOwnerImplINS_13FormattedImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16DefaultFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15MatlabFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12CSVFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15PythonFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_14NumpyFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10CFormatterENS_14DefaultDeleterIS2_EEEE", "N3tbb10interface68internal11signal_taskE", "*N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN12_GLOBAL__N_113ProxyLoopBodyEKNS_16auto_partitionerEEE", "N2cv16ParallelLoopBodyE", "N3tbb10interface68internal9flag_taskE", "N2cv7TLSDataINS_13ThreadManager13work_thread_tEEE", "OPENCV_FOR_THREADS_NUM", "void cv::PCA::backProject(cv::InputArray, cv::OutputArray) const", "void cv::PCA::project(cv::InputArray, cv::OutputArray) const", "cv::PCA& cv::PCA::operator()(cv::InputArray, cv::InputArray, int, double)", "void cv::PCA::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "void cv::PCA::write(cv::FileStorage&) const", "cv::PCA& cv::PCA::operator()(cv::InputArray, cv::InputArray, int, int)", "void* icvReadSeq(CvFileStorage*, CvFileNode*)", "void* icvReadSeqTree(CvFileStorage*, CvFileNode*)", "void icvReleaseGraph(void**)", "void* icvReadGraph(CvFileStorage*, CvFileNode*)", "void icvWriteHeaderData(CvFileStorage*, const CvSeq*, CvAttrList*, int)", "char* icvGetFormat(const CvSeq*, const char*, CvAttrList*, int, char*)", "void* icvReadSparseMat(CvFileStorage*, CvFileNode*)", "void* icvReadImage(CvFileStorage*, CvFileNode*)", "void icvWriteImage(CvFileStorage*, const char*, const void*, CvAttrList)", "void* icvReadMat(CvFileStorage*, CvFileNode*)", "int icvDecodeSimpleFormat(const char*)", "void* icvReadMatND(CvFileStorage*, CvFileNode*)", "void cv::read(const cv::FileNode&, cv::SparseMat&, const cv::SparseMat&)", "void cv::read(const cv::FileNode&, cv::Mat&, const cv::Mat&)", "cv::FileNodeIterator& cv::FileNodeIterator::readRaw(const cv::String&, uchar*, size_t)", "void cv::FileStorage::writeRaw(const cv::String&, const uchar*, size_t)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const cv::String&)", "void* cvLoad(const char*, CvMemStorage*, const char*, const char**)", "void cvSave(const char*, const void*, const char*, const char*, CvAttrList)", "void cvWrite(CvFileStorage*, const char*, const void*, CvAttrList)", "void* cvRead(CvFileStorage*, CvFileNode*, CvAttrList*)", "void* cvClone(const void*)", "void cvRelease(void**)", "void cvRegisterType(const CvTypeInfo*)", "void icvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*)", "void cvWriteFileNode(CvFileStorage*, const char*, const CvFileNode*, int)", "void cvReadRawData(const CvFileStorage*, const CvFileNode*, void*, const char*)", "void cvReadRawDataSlice(const CvFileStorage*, CvSeqReader*, int, void*, const char*)", "void cvStartReadRawData(const CvFileStorage*, const CvFileNode*, CvSeqReader*)", "int icvDecodeFormat(const char*, int*, int)", "void cvWriteRawData(CvFileStorage*, const void*, int, const char*)", "void cvStartNextStream(CvFileStorage*)", "void cvWriteComment(CvFileStorage*, const char*, int)", "void cvWriteString(CvFileStorage*, const char*, const char*, int)", "void cvWriteReal(CvFileStorage*, const char*, double)", "void cvWriteInt(CvFileStorage*, const char*, int)", "void cvEndWriteStruct(CvFileStorage*)", "void cvStartWriteStruct(CvFileStorage*, const char*, int, const char*, CvAttrList)", "char* icvYMLSkipSpaces(CvFileStorage*, char*, int, int)", "char* icvYMLParseKey(CvFileStorage*, char*, CvFileNode*, CvFileNode**)", "char* icvYMLParseValue(CvFileStorage*, char*, CvFileNode*, int, int)", "void icvYMLParse(CvFileStorage*)", "char* icvXMLSkipSpaces(CvFileStorage*, char*, int)", "char* icvXMLParseTag(CvFileStorage*, char*, CvStringHashNode**, CvAttrList**, int*)", "void icvFSCreateCollection(CvFileStorage*, int, CvFileNode*)", "void icvProcessSpecialDouble(CvFileStorage*, char*, double*, char**)", "char* icvXMLParseValue(CvFileStorage*, char*, CvFileNode*, int)", "void icvXMLParse(CvFileStorage*)", "char* icvGets(CvFileStorage*, char*, int)", "void icvXMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "void icvXMLEndWriteStruct(CvFileStorage*)", "void icvXMLWriteTag(CvFileStorage*, const char*, int, CvAttrList)", "void icvXMLWriteScalar(CvFileStorage*, const char*, const char*, int)", "void icvXMLWriteString(CvFileStorage*, const char*, const char*, int)", "void icvXMLWriteComment(CvFileStorage*, const char*, int)", "void icvYMLStartWriteStruct(CvFileStorage*, const char*, int, const char*)", "void icvYMLEndWriteStruct(CvFileStorage*)", "void icvYMLWrite(CvFileStorage*, const char*, const char*)", "void icvYMLWriteString(CvFileStorage*, const char*, const char*, int)", "void icvYMLWriteComment(CvFileStorage*, const char*, int)", "CvFileStorage* cvOpenFileStorage(const char*, CvMemStorage*, int, const char*)", "CvFileNode* cvGetRootFileNode(const CvFileStorage*, int)", "CvFileNode* cvGetFileNodeByName(const CvFileStorage*, const CvFileNode*, const char*)", "CvFileNode* cvGetFileNode(CvFileStorage*, CvFileNode*, const CvStringHashNode*, int)", "void icvPuts(CvFileStorage*, const char*)", "void icvClose(CvFileStorage*, cv::String*)", "void cvReleaseFileStorage(CvFileStorage**)", "static cv::String cv::FileStorage::getDefaultObjectName(const cv::String&)", "ucwsifdr", "N2cv11FileStorageE", "N2cv6detail12PtrOwnerImplI11CvSparseMatNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvFileStorageNS_14DefaultDeleterIS2_EEEE", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = unsigned char]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = short unsigned int]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<unsigned char, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = int]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<short unsigned int, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 2>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 3>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 4>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 6>]", "void cv::randShuffle_(cv::Mat&, cv::RNG&, double) [with T = cv::Vec<int, 8>]", "void cv::randShuffle(cv::InputOutputArray, double, cv::RNG*)", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "void cv::RNG::fill(cv::InputOutputArray, int, cv::InputArray, cv::InputArray, bool)", "void cvAvgSdv(const CvArr*, CvScalar*, CvScalar*, const void*)", "CvScalar cvAvg(const void*, const void*)", "CvScalar cvSum(const CvArr*)", "double cv::PSNR(cv::InputArray, cv::InputArray)", "void cv::findNonZero(cv::InputArray, cv::OutputArray)", "void cv::batchDistance(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::OutputArray, int, int, cv::InputArray, int, bool)", "double cv::norm(cv::InputArray, cv::InputArray, int, cv::InputArray)", "double cv::norm(cv::InputArray, int, cv::InputArray)", "void cv::minMaxLoc(cv::InputArray, double*, double*, cv::Point*, cv::Point*, cv::InputArray)", "void cv::minMaxIdx(cv::InputArray, double*, double*, int*, int*, cv::InputArray)", "void cv::meanStdDev(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::InputArray)", "cv::Scalar cv::mean(cv::InputArray, cv::InputArray)", "int cv::countNonZero(cv::InputArray)", "cv::Scalar cv::sum(cv::InputArray)", "N2cv16BatchDistInvokerE", "void* cv::TLSDataContainer::getData() const", "void cv::TLSContainerStorage::releaseKey(int, cv::TLSDataContainer*)", "N2cv9ExceptionE", "N2cv16TLSDataContainerE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "double cv::UMat::dot(cv::InputArray) const", "void cv::UMat::copyTo(cv::OutputArray) const", "void* cv::UMat::handle(int) const", "cv::Mat cv::UMat::getMat(int) const", "cv::UMat cv::UMat::reshape(int, int, const int*) const", "static cv::UMat cv::UMat::diag(const cv::UMat&)", "cv::UMat cv::UMat::reshape(int, int) const", "cv::UMat& cv::UMat::adjustROI(int, int, int, int)", "void cv::UMat::locateROI(cv::Size&, cv::Point&) const", "cv::UMat cv::UMat::diag(int) const", "cv::UMat::UMat(const cv::UMat&, const cv::Range*)", "cv::UMat::UMat(const cv::UMat&, const Rect&)", "cv::UMat::UMat(const cv::UMat&, const cv::Range&, const cv::Range&)", "void cv::UMat::create(int, const int*, int, cv::UMatUsageFlags)", "void cv::setSize(cv::UMat&, int, const int*, const size_t*, bool)", "N2cv6StringE", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl14big_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl9empty_anyE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl16small_any_policyIjEE", "void cvflann::lsh::LshTable<ElementType>::initialize(size_t) [with ElementType = unsigned char; size_t = unsigned int]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >; FILE = __sFILE]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >; FILE = __sFILE]", "bool cv::flann::loadIndex_(cv::flann::Index*, void*&, const cv::Mat&, FILE*, const Distance&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>; FILE = __sFILE]", "virtual void cv::flann::Index::save(const cv::String&) const", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "int cv::flann::runRadiusSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, double, const cv::flann::SearchParams&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>]", "virtual int cv::flann::Index::radiusSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, double, int, const cv::flann::SearchParams&)", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "void cv::flann::runKnnSearch_(void*, const cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::flann::SearchParams&) [with Distance = cvflann::HammingLUT; IndexType = cvflann::Index<cvflann::HammingLUT>]", "virtual void cv::flann::Index::knnSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, int, const cv::flann::SearchParams&)", "virtual void cv::flann::Index::release()", "void cv::flann::buildIndex_(void*&, const cv::Mat&, const cv::flann::IndexParams&, const Distance&) [with Distance = cvflann::L1<float>; IndexType = cvflann::Index<cvflann::L1<float> >]", "void cv::flann::buildIndex_(void*&, const cv::Mat&, const cv::flann::IndexParams&, const Distance&) [with Distance = cvflann::L2<float>; IndexType = cvflann::Index<cvflann::L2<float> >]", "virtual void cv::flann::Index::build(cv::InputArray, const cv::flann::IndexParams&, cvflann::flann_distance_t)", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann12KNNResultSetIfEE", "N2cv5flann5IndexE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann7NNIndexINS_10HammingLUTEEE", "N7cvflann5IndexINS_10HammingLUTEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann9ResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann9ResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_10HammingLUTEEE", "N7cvflann27HierarchicalClusteringIndexINS_10HammingLUTEEE", "N7cvflann8LshIndexINS_10HammingLUTEEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "CvSeq* cvApproxPoly(const void*, int, CvMemStorage*, int, double, int)", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "CvSeq* cvApproxChains(CvSeq*, CvMemStorage*, int, double, int, int)", "CvSeq* icvApproximateChainTC89(CvChain*, int, CvMemStorage*, int)", "void cv::blendLinear(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "void cvCanny(const CvArr*, CvArr*, double, double, int)", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "N3tbb10strict_ppl8internal31concurrent_queue_page_allocatorE", "N3tbb10empty_taskE", "N3tbb10strict_ppl8internal24concurrent_queue_base_v3IPhEE", "N3tbb10strict_ppl16concurrent_queueIPhNS_23cache_aligned_allocatorIS2_EEEE", "N3tbb8internal13function_taskIN2cv8tbbCannyEEE", "virtual void {anonymous}::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "*N12_GLOBAL__N_110CLAHE_ImplE", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEE", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi4096ELi4EEE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyIhEE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyItEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi4096ELi4EEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124CLAHE_Interpolation_BodyIhEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124CLAHE_Interpolation_BodyItEENS_14DefaultDeleterIS4_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_110CLAHE_ImplENS_14DefaultDeleterIS3_EEEE", "N2cv5CLAHEE", "void cvCvtColor(const CvArr*, CvArr*, int)", "cv::Luv2RGB_f::Luv2RGB_f(int, int, const float*, const float*, bool)", "cv::RGB2Luv_f::RGB2Luv_f(int, int, const float*, const float*, bool)", "cv::RGB2Lab_f::RGB2Lab_f(int, int, const float*, const float*, bool)", "cv::RGB2Lab_b::RGB2Lab_b(int, int, const float*, const float*, bool)", "cv::RGB2HSV_b::RGB2HSV_b(int, int, int)", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "void cv::sortMatrixRowsByIndices(cv::InputArray, cv::InputArray, cv::OutputArray)", "cv::Mat cv::argsort(cv::InputArray, bool)", "cv::Mat cv::interp1(cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::colormap::ColorMap::operator()(cv::InputArray, cv::OutputArray) const", "N2cv8colormap8ColorMapE", "N2cv8colormap6AutumnE", "N2cv8colormap4BoneE", "N2cv8colormap3JetE", "N2cv8colormap6WinterE", "N2cv8colormap7RainbowE", "N2cv8colormap5OceanE", "N2cv8colormap6SummerE", "N2cv8colormap6SpringE", "N2cv8colormap4CoolE", "N2cv8colormap3HSVE", "N2cv8colormap4PinkE", "N2cv8colormap3HotE", "N2cv8colormap6ParulaE", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = unsigned char; PixelT = unsigned char; StatsOp = cv::connectedcomponents::CCStatsOp]", "int cv::connectedComponents_sub1(const cv::Mat&, cv::Mat&, int, StatsOp&) [with StatsOp = cv::connectedcomponents::CCStatsOp]", "int cv::connectedComponentsWithStats(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int)", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = short unsigned int; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "LabelT cv::connectedcomponents::LabelingImpl<LabelT, PixelT, StatsOp>::operator()(const cv::Mat&, cv::Mat&, int, StatsOp&) [with LabelT = unsigned char; PixelT = unsigned char; StatsOp = cv::connectedcomponents::NoOp]", "int cv::connectedComponents_sub1(const cv::Mat&, cv::Mat&, int, StatsOp&) [with StatsOp = cv::connectedcomponents::NoOp]", "int cv::connectedComponents(cv::InputArray, cv::OutputArray, int, int)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvSeq*; CvSeq = CvSeq]", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "int icvFindContoursInInterval(const CvArr*, CvMemStorage*, CvSeq**, int)", "int cvFindContours(void*, CvMemStorage*, CvSeq**, int, int, int, CvPoint)", "CvSeq* cvEndFindContours(_CvContourScanner**)", "CvSeq* cvFindNextContour(CvContourScanner)", "void cvSubstituteContour(CvContourScanner, CvSeq*)", "_CvContourScanner* cvStartFindContours(void*, CvMemStorage*, int, int, int, CvPoint)", "CvPoint cvReadChainPoint(CvChainPtReader*)", "void cvStartReadChainPoints(CvChain*, CvChainPtReader*)", "N2cv6detail12PtrOwnerImplI12CvMemStorageNS_14DefaultDeleterIS2_EEEE", "int cvCheckContourConvexity(const CvArr*)", "CvSeq* cvConvexityDefects(const CvArr*, const CvArr*, CvMemStorage*)", "CvSeq* cvConvexHull2(const CvArr*, void*, int, int)", "bool cv::isContourConvex(cv::InputArray)", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "void cvPreCornerDetect(const void*, void*, int)", "void cvCornerEigenValsAndVecs(const void*, void*, int, int)", "void cvCornerHarris(const CvArr*, CvArr*, int, int, double)", "void cvCornerMinEigenVal(const CvArr*, CvArr*, int, int)", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "void cv::cornerEigenValsVecs(const cv::Mat&, cv::Mat&, int, int, int, double, int)", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "void cv::demosaicing(cv::InputArray, cv::OutputArray, int, int)", "N2cv17Bayer2RGB_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "void cvLaplace(const void*, void*, int)", "void cvSobel(const void*, void*, int, int, int)", "void cv::getSobelKernels(cv::OutputArray, cv::OutputArray, int, int, int, bool, int)", "void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "void cv::distanceATS_L1_8u(const cv::Mat&, cv::Mat&)", "void cv::distanceTransform_L1_8U(cv::InputArray, cv::OutputArray)", "void cv::getDistanceTransformMask(int, float*)", "void cv::trueDistTrans(const cv::Mat&, cv::Mat&)", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int, int)", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "void cvGetTextSize(const char*, const CvFont*, CvSize*, int*)", "void cvInitFont(CvFont*, int, double, double, double, int, int)", "void cvPutText(CvArr*, const char*, CvPoint, const CvFont*, CvScalar)", "int cvInitLineIterator(const CvArr*, CvPoint, CvPoint, CvLineIterator*, int, int)", "int cvClipLine(CvSize, CvPoint*, CvPoint*)", "void cvDrawContours(void*, CvSeq*, CvScalar, CvScalar, int, int, int, CvPoint)", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const Scalar&, int, int, cv::InputArray, int, cv::Point)", "void cv::polylines(cv::InputOutputArray, cv::InputArrayOfArrays, bool, const Scalar&, int, int, int)", "void cv::fillPoly(cv::InputOutputArray, cv::InputArrayOfArrays, const Scalar&, int, int, cv::Point)", "void cv::fillConvexPoly(cv::InputOutputArray, cv::InputArray, const Scalar&, int, int)", "const int* cv::getFontData(int)", "void cv::polylines(cv::Mat&, const Point* const*, const int*, int, bool, const Scalar&, int, int, int)", "void cv::fillPoly(cv::Mat&, const Point**, const int*, int, const Scalar&, int, int, cv::Point)", "void cv::fillConvexPoly(cv::Mat&, const Point*, int, const Scalar&, int, int)", "void cv::ellipse(cv::InputOutputArray, const cv::RotatedRect&, const Scalar&, int, int)", "void cv::ellipse(cv::InputOutputArray, cv::Point, cv::Size, double, double, double, const Scalar&, int, int, int)", "void cv::circle(cv::InputOutputArray, cv::Point, int, const Scalar&, int, int, int)", "void cv::rectangle(cv::Mat&, cv::Rect, const Scalar&, int, int, int)", "void cv::rectangle(cv::InputOutputArray, cv::Point, cv::Point, const Scalar&, int, int, int)", "void cv::PolyLine(cv::Mat&, const Point*, int, bool, const void*, int, int, int)", "void cv::line(cv::InputOutputArray, cv::Point, cv::Point, const Scalar&, int, int, int)", "cv::LineIterator::LineIterator(const cv::Mat&, cv::Point, cv::Point, int, bool)", "int icvInitEMD(const float*, int, const float*, int, int, CvDistanceFunction, void*, const float*, int, CvEMDState*, float*, cv::AutoBuffer<char>&)", "float cvCalcEMD2(const CvArr*, const CvArr*, int, CvDistanceFunction, const CvArr*, CvArr*, float*, void*)", "void cvGoodFeaturesToTrack(const void*, void*, void*, CvPoint2D32f*, int*, double, double, const void*, int, int, double)", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, bool, double)", "void cvFilter2D(const CvArr*, CvArr*, const CvMat*, CvPoint)", "cv::Ptr<cv::FilterEngine> cv::createLinearFilter(int, int, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = double; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterVec_32f; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterVec_8u16s; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterVec_8u; cv::Point = cv::Point_<int>]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "void cv::preprocess2DKernel(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<unsigned char>&)", "cv::Ptr<cv::FilterEngine> cv::createSeparableLinearFilter(int, int, cv::InputArray, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "cv::SymmColumnVec_32f::SymmColumnVec_32f(const cv::Mat&, int, int, double)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "cv::SymmColumnVec_32f16s::SymmColumnVec_32f16s(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnVec_32s8u::SymmColumnVec_32s8u(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnSmallVec_32f::SymmColumnSmallVec_32f(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnSmallVec_32s16s::SymmColumnSmallVec_32s16s(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = double; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowVec_32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowVec_16s32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = float; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = float; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowVec_8u32s]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "cv::Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "int cv::getKernelType(cv::InputArray, cv::Point)", "virtual void cv::FilterEngine::apply(const cv::Mat&, cv::Mat&, const Rect&, cv::Point, bool)", "virtual int cv::FilterEngine::proceed(const uchar*, int, int, uchar*, int)", "virtual int cv::FilterEngine::start(const cv::Mat&, const Rect&, bool, int)", "virtual int cv::FilterEngine::start(cv::Size, cv::Rect, int)", "void cv::FilterEngine::init(const cv::Ptr<cv::BaseFilter>&, const cv::Ptr<cv::BaseRowFilter>&, const cv::Ptr<cv::BaseColumnFilter>&, int, int, int, int, int, const Scalar&)", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv6detail12PtrOwnerImplINS_12FilterEngineENS_14DefaultDeleterIS2_EEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhiNS_12RowVec_8u32sEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsfNS_13RowVec_16s32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIffNS_10RowVec_32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIfdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIddNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "int cv::floodFill(cv::InputOutputArray, cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect*, cv::Scalar, cv::Scalar, int)", "cv::Mat cv::getGaborKernel(cv::Size, double, double, double, double, double, int)", "void {anonymous}::GeneralizedHoughGuilImpl::calcPosition(double, int, double, int)", "void {anonymous}::GeneralizedHoughGuilImpl::calcScale(double)", "void {anonymous}::GeneralizedHoughGuilImpl::calcOrientation()", "void {anonymous}::GeneralizedHoughGuilImpl::getContourPoints(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<{anonymous}::GeneralizedHoughGuilImpl::ContourPoint>&)", "void {anonymous}::GeneralizedHoughGuilImpl::buildFeatureList(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<std::vector<{anonymous}::GeneralizedHoughGuilImpl::Feature> >&, cv::Point2d)", "void {anonymous}::GeneralizedHoughBase::setTemplateImpl(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point)", "void {anonymous}::GeneralizedHoughBase::calcEdges(cv::InputArray, cv::Mat&, cv::Mat&, cv::Mat&)", "void {anonymous}::GeneralizedHoughBase::convertTo(cv::OutputArray, cv::OutputArray)", "void {anonymous}::GeneralizedHoughBase::filterMinDist()", "void {anonymous}::GeneralizedHoughBase::detectImpl(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "virtual void {anonymous}::GeneralizedHoughBallardImpl::processTempl()", "void {anonymous}::GeneralizedHoughBallardImpl::findPosInHist()", "void {anonymous}::GeneralizedHoughBallardImpl::calcHist()", "*N12_GLOBAL__N_120GeneralizedHoughBaseE", "*N12_GLOBAL__N_127GeneralizedHoughBallardImplE", "*N12_GLOBAL__N_124GeneralizedHoughGuilImplE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_127GeneralizedHoughBallardImplENS_14DefaultDeleterIS3_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_124GeneralizedHoughGuilImplENS_14DefaultDeleterIS3_EEEE", "N2cv16GeneralizedHoughE", "N2cv23GeneralizedHoughBallardE", "N2cv20GeneralizedHoughGuilE", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "void cvBoxPoints(CvBox2D, CvPoint2D32f*)", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = double]", "TWeight GCGraph<TWeight>::maxFlow() [with TWeight = double]", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = double]", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = double]", "void checkMask(const cv::Mat&, const cv::Mat&)", "void initGMMs(const cv::Mat&, const cv::Mat&, GMM&, GMM&)", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "void GMM::calcInverseCovAndDeterm(int)", "double GMM::operator()(int, cv::Vec3d) const", "GMM::GMM(cv::Mat&)", "void* icvReadHist(CvFileStorage*, CvFileNode*)", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "void cvCalcProbDensity(const CvHistogram*, const CvHistogram*, CvHistogram*, double)", "void cvCalcBayesianProb(CvHistogram**, int, CvHistogram**)", "void cvCalcArrBackProjectPatch(CvArr**, CvArr*, CvSize, CvHistogram*, int, double)", "void cvCalcArrBackProject(CvArr**, CvArr*, const CvHistogram*)", "void cvCalcArrHist(CvArr**, CvHistogram*, int, const CvArr*)", "void cvSetHistBinRanges(CvHistogram*, float**, int)", "void cvCopyHist(const CvHistogram*, CvHistogram**)", "double cvCompareHist(const CvHistogram*, const CvHistogram*, int)", "void cvGetMinMaxHistValue(const CvHistogram*, float*, float*, int*, int*)", "void cvNormalizeHist(CvHistogram*, double)", "void cvThreshHist(CvHistogram*, double)", "void cvClearHist(CvHistogram*)", "void cvReleaseHist(CvHistogram**)", "CvHistogram* cvMakeHistHeaderForArray(int, int*, CvHistogram*, float*, float**, int)", "CvHistogram* cvCreateHist(int, int*, CvHistType, float**, int)", "double cv::compareHist(const cv::SparseMat&, const cv::SparseMat&, int)", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<float>&, double)", "void cv::calcBackProject(const cv::Mat*, int, const int*, const cv::SparseMat&, cv::OutputArray, const float**, double, bool)", "void cv::calcBackProject(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, const float**, double, bool)", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<int>&, const std::vector<float>&, bool)", "void cv::calcHist(const cv::Mat*, int, const int*, const cv::Mat&, cv::SparseMat&, int, const int*, const float**, bool, bool, bool)", "void cv::histPrepareImages(const cv::Mat*, int, const int*, const cv::Mat&, int, const int*, const float**, bool, std::vector<unsigned char*>&, std::vector<int>&, cv::Size&, std::vector<double, std::allocator<double> >&)", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, int, const int*, const float**, bool, bool)", "28EqualizeHistCalcHist_Invoker", "23EqualizeHistLut_Invoker", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist2D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist3D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist1D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerIfEEKNS_16auto_partitionerEEE", "CvSeq* cvHoughCircles(CvArr*, void*, int, double, double, double, double, int, int)", "CvSeq* cvHoughLines2(CvArr*, void*, int, double, double, int, double, double, double, double)", "void cv::HoughLinesProbabilistic(cv::Mat&, float, float, int, int, int, std::vector<cv::Vec<int, 4> >&, int)", "void cv::HoughLinesSDiv(const cv::Mat&, float, float, int, int, int, std::vector<cv::Vec<float, 2> >&, int, double, double)", "void cv::HoughLinesStandard(const cv::Mat&, float, float, int, std::vector<cv::Vec<float, 2> >&, int, double, double)", "N2cv6detail12PtrOwnerImplI5CvMatNS_14DefaultDeleterIS2_EEEE", "int cv::ResizeAreaFastVec_SIMD_8u::operator()(const uchar*, uchar*, int) const", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = unsigned char; SIMDVecOp = cv::ResizeAreaFastVec_SIMD_8u]", "int cv::ResizeAreaFastVec_SIMD_16u::operator()(const ushort*, ushort*, int) const", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = short unsigned int; SIMDVecOp = cv::ResizeAreaFastVec_SIMD_16u]", "int cv::ResizeAreaFastVec_SIMD_16s::operator()(const short int*, short int*, int) const", "int cv::ResizeAreaFastVec<T, SIMDVecOp>::operator()(const T*, T*, int) const [with T = short int; SIMDVecOp = cv::ResizeAreaFastVec_SIMD_16s]", "void cvLinearPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "void cvLogPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "CvMat* cvGetAffineTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "CvMat* cvGetPerspectiveTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "CvMat* cv2DRotationMatrix(CvPoint2D32f, double, double, CvMat*)", "void cvRemap(const CvArr*, CvArr*, const CvArr*, const CvArr*, int, CvScalar)", "void cvWarpPerspective(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cvWarpAffine(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cvResize(const CvArr*, CvArr*, int)", "cv::Mat cv::getAffineTransform(cv::InputArray, cv::InputArray)", "cv::Mat cv::getPerspectiveTransform(cv::InputArray, cv::InputArray)", "void cv::invertAffineTransform(cv::InputArray, cv::OutputArray)", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapVec_8u; AT = short int; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, float>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<double, double>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::initInterTab1D(int, float*, int)", "const void* cv::initInterTab2D(int, bool)", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const Scalar&)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<unsigned char, int, short int>; VResize = cv::VResizeLanczos4<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short unsigned int, float, float>; VResize = cv::VResizeLanczos4<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short int, float, float>; VResize = cv::VResizeLanczos4<short int, float, float, cv::Cast<float, short int>, cv::VResizeLanczos4Vec_32f16s>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<float, float, float>; VResize = cv::VResizeLanczos4<float, float, float, cv::Cast<float, float>, cv::VResizeLanczos4Vec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<double, double, float>; VResize = cv::VResizeLanczos4<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeCubicVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeCubicVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeCubicVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeCubicVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<double, double, float>; VResize = cv::VResizeCubic<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeLinearVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeLinearVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeLinearVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeLinearVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<double, double, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_22VResizeLinearVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_22VResizeLinearVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_21VResizeCubicVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_21VResizeCubicVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_25VResizeLanczos4Vec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_22VResizeLanczos4Vec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_25ResizeAreaFastVec_SIMD_8uEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_26ResizeAreaFastVec_SIMD_16uEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_26ResizeAreaFastVec_SIMD_16sEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_26ResizeAreaFastVec_SIMD_32fEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "int cv::rotatedRectangleIntersection(const cv::RotatedRect&, const cv::RotatedRect&, cv::OutputArray)", "void cvFitLine(const CvArr*, int, double, double, double, float*)", "void cv::fitLine3D(cv::Point3f*, int, int, float, float, float, float*)", "void cv::fitLine2D(const Point2f*, int, int, float, float, float, float*)", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "virtual int cv::LineSegmentDetectorImpl::compareSegments(const Size&, cv::InputArray, cv::InputArray, cv::InputOutputArray)", "virtual void cv::LineSegmentDetectorImpl::drawSegments(cv::InputOutputArray, cv::InputArray)", "double cv::LineSegmentDetectorImpl::get_theta(const std::vector<cv::LineSegmentDetectorImpl::RegionPoint>&, const int&, const double&, const double&, const double&, const double&) const", "void cv::LineSegmentDetectorImpl::region2rect(const std::vector<cv::LineSegmentDetectorImpl::RegionPoint>&, int, double, double, double, cv::LineSegmentDetectorImpl::rect&) const", "void cv::LineSegmentDetectorImpl::ll_angle(const double&, const unsigned int&, std::vector<cv::LineSegmentDetectorImpl::coorlist>&)", "virtual void cv::LineSegmentDetectorImpl::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "cv::LineSegmentDetectorImpl::LineSegmentDetectorImpl(int, double, double, double, double, double, double, int)", "N2cv19LineSegmentDetectorE", "N2cv23LineSegmentDetectorImplE", "N2cv6detail12PtrOwnerImplINS_23LineSegmentDetectorImplENS_14DefaultDeleterIS2_EEEE", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "void minEnclosingTriangle::updateSideB(const std::vector<cv::Point_<float> >&, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int&, cv::Point2f&, cv::Point2f&)", "cv::Point2f minEnclosingTriangle::findVertexCOnSideB(const std::vector<cv::Point_<float> >&, unsigned int, unsigned int, unsigned int, const Point2f&, const Point2f&, const Point2f&, const Point2f&)", "void minEnclosingTriangle::lineEquationDeterminedByPoints(const Point2f&, const Point2f&, double&, double&, double&)", "void minEnclosingTriangle::createConvexHull(cv::InputArray, std::vector<cv::Point_<float> >&)", "void cvGetHuMoments(CvMoments*, CvHuMoments*)", "double cvGetCentralMoment(CvMoments*, int, int)", "double cvGetSpatialMoment(CvMoments*, int, int)", "void cvMoments(const CvArr*, CvMoments*, int)", "void cv::HuMoments(const cv::Moments&, cv::OutputArray)", "cv::Moments cv::contourMoments(const cv::Mat&)", "cv::Moments cv::moments(cv::InputArray, bool)", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin8u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16s; uchar = unsigned char]", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin32f; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax8u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16s; uchar = unsigned char]", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax32f; uchar = unsigned char]", "void cvMorphologyEx(const void*, void*, void*, IplConvKernel*, int, int)", "void cvDilate(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvErode(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvReleaseStructuringElement(IplConvKernel**)", "IplConvKernel* cvCreateStructuringElementEx(int, int, int, int, int, int*)", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::Mat cv::getStructuringElement(int, cv::Size, cv::Point)", "cv::Ptr<cv::FilterEngine> cv::createMorphologyFilter(int, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphFVec<cv::VMax32f>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphIVec<cv::VMax16s>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMax16u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMax8u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphFVec<cv::VMin32f>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphIVec<cv::VMin16s>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMin16u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMin8u>; cv::Point = cv::Point_<int>]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "cv::Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "cv::Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "N2cv16MorphologyRunnerE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEE", "N2cv11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "cv::Point2d cv::weightedCentroid(cv::InputArray, cv::Point, cv::Size, double*)", "void cv::divSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "void cv::magSpectrums(cv::InputArray, cv::OutputArray)", "cv::Point2d cv::phaseCorrelate(cv::InputArray, cv::InputArray, cv::InputArray, double*)", "CvMat** cvCreatePyramid(const CvArr*, int, double, const CvSize*, CvArr*, int, int)", "void cvReleasePyramid(CvMat***, int)", "void cvPyrUp(const void*, void*, int)", "void cvPyrDown(const void*, void*, int)", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 6>; VecOp = cv::PyrUpVec_32s8u]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 6>; VecOp = cv::PyrUpVec_32s16s]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 6>; VecOp = cv::PyrUpNoVec<int, short unsigned int>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 6>; VecOp = cv::PyrUpVec_32f]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 6>; VecOp = cv::PyrUpNoVec<double, double>]", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const Size&, int)", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::PyrDownVec_32s8u]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 8>; VecOp = cv::PyrDownVec_32s16s]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 8>; VecOp = cv::PyrDownNoVec<int, short unsigned int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::PyrDownVec_32f]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 8>; VecOp = cv::PyrDownNoVec<double, double>]", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const Size&, int)", "void cv::rotatingCalipers(const Point2f*, int, int, float*)", "int cvSampleLine(const void*, CvPoint, CvPoint, void*, int)", "void cvGetQuadrangleSubPix(const void*, void*, const CvMat*)", "void cvGetRectSubPix(const void*, void*, CvPoint2D32f)", "void cv::getRectSubPix(cv::InputArray, cv::Size, cv::Point2f, cv::OutputArray, int)", "void cv::pyrMeanShiftFiltering(cv::InputArray, cv::OutputArray, double, double, int, cv::TermCriteria)", "void cv::watershed(cv::InputArray, cv::InputOutputArray)", "CvRect cvBoundingRect(CvArr*, int)", "double cvArcLength(const void*, CvSlice, int)", "void icvMemCopy(double**, double**, double**, int*)", "double icvContourSecArea(CvSeq*, CvSlice)", "double cvContourArea(const void*, CvSlice, int)", "cv::Rect cv::pointSetBoundingRect(const cv::Mat&)", "cv::Rect cv::maskBoundingRect(const cv::Mat&)", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "double cv::contourArea(cv::InputArray, bool)", "double cv::arcLength(cv::InputArray, bool)", "int cv::findEnslosingCicle4pts_32f(cv::Point2f*, cv::Point2f&, float&)", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f&, float&)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = unsigned char; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short unsigned int; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short int; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = float; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = double; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = double; uchar = unsigned char]", "void cvSmooth(const void*, void*, int, int, int, double, double)", "void cv::bilateralFilter_32f(const cv::Mat&, cv::Mat&, int, double, double, int)", "void cv::bilateralFilter_8u(const cv::Mat&, cv::Mat&, int, double, double, int)", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "virtual void cv::BilateralFilter_32f_Invoker::operator()(const cv::Range&) const", "void cv::createGaussianKernels(cv::Mat&, cv::Mat&, int, cv::Size, double, double)", "cv::Mat cv::getGaussianKernel(int, double, int)", "cv::Ptr<cv::BaseRowFilter> cv::getSqrRowSumFilter(int, int, int, int)", "cv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "cv::Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "virtual void cv::ColumnSum<int, float>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, int>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, short unsigned int>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, short int>::operator()(const uchar**, uchar*, int, int, int)", "virtual void cv::ColumnSum<int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv9SqrRowSumIhiEE", "N2cv9SqrRowSumIhdEE", "N2cv9SqrRowSumItdEE", "N2cv9SqrRowSumIsdEE", "N2cv9SqrRowSumIfdEE", "N2cv9SqrRowSumIddEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIihEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdhEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIitEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIisEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdsEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIifEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdfEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIidEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIddEENS_14DefaultDeleterIS3_EEEE", "void cv::Subdiv2D::checkSubdiv() const", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f*)", "int cv::Subdiv2D::insert(cv::Point2f)", "int cv::Subdiv2D::locate(cv::Point2f, int&, int&)", "void cvIntegral(const CvArr*, CvArr*, CvArr*, CvArr*)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int)", "void cvMatchTemplate(const CvArr*, const CvArr*, CvArr*, int)", "void cv::matchTemplateMask(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "void cv::crossCorr(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Size, int, cv::Point, double, int)", "void cvAdaptiveThreshold(const void*, void*, double, int, int, int, double)", "double cvThreshold(const void*, void*, double, double, int)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "void cv::thresh_32f(const cv::Mat&, cv::Mat&, float, float, int)", "void cv::thresh_16s(const cv::Mat&, cv::Mat&, short int, short int, int)", "void cv::thresh_8u(const cv::Mat&, cv::Mat&, uchar, uchar, int)", "N2cv15ThresholdRunnerE", "cv::Point2f cv::mapPointSpherical(const Point2f&, float, cv::Vec4d*, int)", "float cv::initWideAngleProjMap(cv::InputArray, cv::InputArray, cv::Size, int, int, cv::OutputArray, cv::OutputArray, int, double)", "void cv::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cvUndistortPoints(const CvMat*, CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*)", "void cvInitUndistortRectifyMap(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvInitUndistortMap(const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvUndistort2(const CvArr*, CvArr*, const CvMat*, const CvMat*, const CvMat*)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, int, cv::OutputArray, cv::OutputArray)", "void cvCopyMakeBorder(const CvArr*, CvArr*, CvPoint, int, CvScalar)", "CvSeq* cvPointSeqFromMat(int, const CvArr*, CvContour*, CvSeqBlock*)", "virtual cv::Mat cv::ml::ANN_MLPImpl::getWeights(int) const", "void cv::ml::ANN_MLPImpl::read_params(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::ml::ANN_MLPImpl::write_params(cv::FileStorage&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<int>]", "int cv::ml::ANN_MLPImpl::train_rprop(const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::TermCriteria)", "void cv::ml::ANN_MLPImpl::calc_output_scale(const cv::Mat&, int)", "void cv::ml::ANN_MLPImpl::prepare_to_train(const cv::Mat&, const cv::Mat&, cv::Mat&, int)", "void cv::ml::ANN_MLPImpl::calc_activ_func(cv::Mat&, const cv::Mat&) const", "virtual float cv::ml::ANN_MLPImpl::predict(cv::InputArray, cv::OutputArray, int) const", "virtual void cv::ml::ANN_MLPImpl::setLayerSizes(cv::InputArray)", "virtual void cv::ml::ANN_MLPImpl::setActivationFunction(int, double, double)", "N2cv2ml7ANN_MLPE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "N2cv2ml11ANN_MLPImplE", "N2cv6detail12PtrOwnerImplINS_2ml11ANN_MLPImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::ml::DTreesImplForBoost::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::ml::DTreesImplForBoost::write(cv::FileStorage&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::ml::DTreesImplForBoost::updateWeightsAndTrim(int, std::vector<int>&)", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "void cv::ml::TreeParams::setCVFolds(int)", "void cv::ml::TreeParams::setMaxDepth(int)", "void cv::ml::TreeParams::setMaxCategories(int)", "N2cv2ml6DTreesE", "N2cv2ml5BoostE", "N2cv2ml18DTreesImplForBoostE", "N2cv2ml9BoostImplE", "N2cv6detail12PtrOwnerImplINS_2ml9BoostImplENS_14DefaultDeleterIS3_EEEE", "void cv::ml::TrainDataImpl::preprocessCategorical(const cv::Mat&, cv::Mat*, std::vector<int>&, std::vector<int>*, std::vector<int>&)", "void cv::ml::TrainDataImpl::setData(cv::InputArray, int, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::ml::TrainDataImpl::setVarTypes(const cv::String&, int, std::vector<unsigned char>&) const", "bool cv::ml::TrainDataImpl::loadCSV(const cv::String&, int, int, int, const cv::String&, char, char)", "virtual void cv::ml::TrainDataImpl::getSample(cv::InputArray, int, float*) const", "virtual void cv::ml::TrainDataImpl::getNormCatValues(int, cv::InputArray, int*) const", "virtual void cv::ml::TrainDataImpl::getValues(int, cv::InputArray, float*) const", "virtual void cv::ml::TrainDataImpl::shuffleTrainTest()", "virtual void cv::ml::TrainDataImpl::setTrainTestSplit(int, bool)", "virtual void cv::ml::TrainDataImpl::setTrainTestSplitRatio(double, bool)", "virtual int cv::ml::TrainDataImpl::getCatCount(int) const", "static cv::Mat cv::ml::TrainData::getSubVector(const cv::Mat&, const cv::Mat&)", "N2cv2ml9TrainDataE", "N2cv2ml13TrainDataImplE", "N2cv6detail12PtrOwnerImplINS_2ml13TrainDataImplENS_14DefaultDeleterIS3_EEEE", "void cv::ml::EMImpl::read_params(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual cv::Vec2d cv::ml::EMImpl::predict2(cv::InputArray, cv::OutputArray) const", "cv::Vec2d cv::ml::EMImpl::computeProbabilities(const cv::Mat&, cv::Mat*, int) const", "void cv::ml::EMImpl::computeLogWeightDivDet()", "void cv::ml::EMImpl::decomposeCovs()", "void cv::ml::EMImpl::clusterTrainSamples()", "bool cv::ml::EMImpl::doTrain(int, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "static void cv::ml::EMImpl::checkTrainData(int, const cv::Mat&, int, int, const cv::Mat*, const cv::Mat*, const std::vector<cv::Mat>*, const cv::Mat*)", "virtual void cv::ml::EMImpl::setCovarianceMatrixType(int)", "virtual void cv::ml::EMImpl::setClustersNumber(int)", "N2cv2ml6EMImplE", "N2cv6detail12PtrOwnerImplINS_2ml6EMImplENS_14DefaultDeleterIS3_EEEE", "void cv::ml::Cholesky(const cv::Mat&, cv::Mat&)", "virtual bool cv::ml::StatModel::train(const cv::Ptr<cv::ml::TrainData>&, int)", "N2cv2ml9StatModelE", "const float* cv::ml::KDTree::getPoint(int, int*) const", "void cv::ml::KDTree::getPoints(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "void cv::ml::KDTree::findOrthoRange(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "int cv::ml::KDTree::findNearest(cv::InputArray, int, int, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "float cv::ml::medianPartition(size_t*, int, int, const float*)", "void cv::ml::KDTree::build(cv::InputArray, cv::InputArray, bool)", "bool cv::ml::Impl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual float cv::ml::KDTreeImpl::findNearest(cv::InputArray, int, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "virtual float cv::ml::BruteForceImpl::findNearest(cv::InputArray, int, cv::OutputArray, cv::OutputArray, cv::OutputArray) const", "N2cv2ml8KNearestE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "N2cv2ml14BruteForceImplE", "N2cv2ml10KDTreeImplE", "N2cv2ml12KNearestImplE", "N2cv6detail12PtrOwnerImplINS_2ml14BruteForceImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10KDTreeImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml12KNearestImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::ml::LogisticRegressionImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "virtual void cv::ml::LogisticRegressionImpl::write(cv::FileStorage&) const", "cv::Mat cv::ml::LogisticRegressionImpl::remap_labels(const cv::Mat&, const std::map<int, int>&) const", "cv::Mat cv::ml::LogisticRegressionImpl::compute_mini_batch_gradient(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "cv::Mat cv::ml::LogisticRegressionImpl::compute_batch_gradient(const cv::Mat&, const cv::Mat&, const cv::Mat&)", "void cv::Mat::push_back(const _Tp&) [with _Tp = int]", "virtual float cv::ml::LogisticRegressionImpl::predict(cv::InputArray, cv::OutputArray, int) const", "virtual bool cv::ml::LogisticRegressionImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "N2cv2ml18LogisticRegressionE", "N2cv2ml22LogisticRegressionImplE", "N2cv6detail12PtrOwnerImplINS_2ml22LogisticRegressionImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::ml::NormalBayesClassifierImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual float cv::ml::NormalBayesClassifierImpl::predictProb(cv::InputArray, cv::OutputArray, cv::OutputArray, int) const", "virtual bool cv::ml::NormalBayesClassifierImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "N2cv2ml21NormalBayesClassifierE", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv6detail12PtrOwnerImplINS_2ml25NormalBayesClassifierImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::ml::DTreesImplForRTrees::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "virtual void cv::ml::DTreesImplForRTrees::write(cv::FileStorage&) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "void cv::ml::TreeParams::setCVFolds(int)", "void cv::ml::TreeParams::setMaxDepth(int)", "void cv::ml::TreeParams::setMaxCategories(int)", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "N2cv2ml10RTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10RTreesImplENS_14DefaultDeleterIS3_EEEE", "void cv::ml::SVMImpl::read_params(const cv::FileNode&)", "virtual void cv::ml::SVMImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "virtual void cv::ml::SVMImpl::write(cv::FileStorage&) const", "virtual double cv::ml::SVMImpl::getDecisionFunction(int, cv::OutputArray, cv::OutputArray) const", "virtual float cv::ml::SVMImpl::predict(cv::InputArray, cv::OutputArray, int) const", "virtual void cv::ml::SVMImpl::PredictBody::operator()(const cv::Range&) const", "void cv::ml::checkParamGrid(const cv::ml::ParamGrid&)", "virtual bool cv::ml::SVMImpl::trainAuto(const cv::Ptr<cv::ml::TrainData>&, int, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, cv::ml::ParamGrid, bool)", "void cv::ml::sortSamplesByClasses(const cv::Mat&, const cv::Mat&, std::vector<int>&, std::vector<int>&)", "static bool cv::ml::SVMImpl::Solver::solve_nu_svr(const cv::Mat&, const std::vector<float>&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, std::vector<double, std::allocator<double> >&, cv::ml::SVMImpl::Solver::SolutionInfo&, cv::TermCriteria)", "static bool cv::ml::SVMImpl::Solver::solve_eps_svr(const cv::Mat&, const std::vector<float>&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, std::vector<double, std::allocator<double> >&, cv::ml::SVMImpl::Solver::SolutionInfo&, cv::TermCriteria)", "cv::ml::SVMImpl::Solver::Solver(const cv::Mat&, const std::vector<signed char>&, std::vector<double, std::allocator<double> >&, const std::vector<double, std::allocator<double> >&, double, double, const cv::Ptr<cv::ml::SVM::Kernel>&, cv::ml::SVMImpl::Solver::GetRow, cv::ml::SVMImpl::Solver::SelectWorkingSet, cv::ml::SVMImpl::Solver::CalcRho, cv::TermCriteria)", "bool cv::ml::SVMImpl::do_train(const cv::Mat&, const cv::Mat&)", "void cv::ml::SVMImpl::checkParams()", "virtual bool cv::ml::SVMImpl::train(const cv::Ptr<cv::ml::TrainData>&, int)", "virtual void cv::ml::SVMKernelImpl::calc(int, int, const float*, const float*, cv::ml::Qfloat*)", "N2cv2ml3SVM6KernelE", "N2cv2ml3SVME", "N2cv2ml13SVMKernelImplE", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImplE", "N2cv6detail12PtrOwnerImplINS_2ml13SVMKernelImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml7SVMImplENS_14DefaultDeleterIS3_EEEE", "void cv::ml::createConcentricSpheresTestSet(int, int, int, cv::OutputArray, cv::OutputArray)", "virtual void cv::ml::DTreesImpl::read(const cv::FileNode&)", "virtual int cv::ml::DTreesImpl::readSplit(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<int>]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<cv::Vec<int, 2> >]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<unsigned char>]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = bool]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual float cv::ml::DTreesImpl::predict(cv::InputArray, cv::OutputArray, int) const", "virtual float cv::ml::DTreesImpl::predictTrees(const cv::Range&, const cv::Mat&, int) const", "virtual int cv::ml::DTreesImpl::calcDir(int, const std::vector<int>&, std::vector<int>&, std::vector<int>&)", "virtual cv::ml::DTreesImpl::WSplit cv::ml::DTreesImpl::findSplitCatClass(int, const std::vector<int>&, double, int*)", "virtual int cv::ml::DTreesImpl::findBestSplit(const std::vector<int>&)", "virtual int cv::ml::DTreesImpl::addNodeAndTrySplit(int, const std::vector<int>&)", "virtual int cv::ml::DTreesImpl::addTree(const std::vector<int>&)", "virtual void cv::ml::DTreesImpl::initCompVarIdx()", "virtual void cv::ml::DTreesImpl::startTraining(const cv::Ptr<cv::ml::TrainData>&, int)", "void cv::ml::TreeParams::setRegressionAccuracy(float)", "void cv::ml::TreeParams::setCVFolds(int)", "void cv::ml::TreeParams::setMaxDepth(int)", "void cv::ml::TreeParams::setMaxCategories(int)", "N2cv2ml10DTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImpl8WorkDataENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImplENS_14DefaultDeleterIS3_EEEE", "virtual void cv::AlignMTBImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual cv::Point cv::AlignMTBImpl::calculateShift(cv::InputArray, cv::InputArray)", "N2cv14AlignExposuresE", "N2cv8AlignMTBE", "N2cv12AlignMTBImplE", "N2cv6detail12PtrOwnerImplINS_12AlignMTBImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::CalibrateRobertsonImpl::read(const cv::FileNode&)", "virtual void cv::CalibrateRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "virtual void cv::CalibrateDebevecImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::CalibrateDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "N2cv12CalibrateCRFE", "N2cv16CalibrateDebevecE", "N2cv18CalibrateRobertsonE", "N2cv20CalibrateDebevecImplE", "N2cv22CalibrateRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_20CalibrateDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22CalibrateRobertsonImplENS_14DefaultDeleterIS2_EEEE", "void cv::decolor(cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::denoise_TVL1(const std::vector<cv::Mat>&, cv::Mat&, double, int)", "void cv::fastNlMeansDenoisingColoredMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, float, int, int)", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistAbs]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 4>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 3>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 2>]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansMultiDenoisingInvoker(const std::vector<cv::Mat>&, int, int, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "void fastNlMeansDenoisingMulti_(const std::vector<cv::Mat>&, cv::Mat&, int, int, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistSquared]", "void fastNlMeansDenoisingMultiCheckPreconditions(const std::vector<cv::Mat>&, int, int, int, int)", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, const std::vector<float>&, int, int, int)", "void cv::fastNlMeansDenoisingColored(cv::InputArray, cv::OutputArray, float, float, int, int)", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 4>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 3>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<short unsigned int, 2>; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs; WT = int]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = short unsigned int; IT = long long int; UIT = long long unsigned int; D = DistAbs]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 3>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = cv::Vec<int, 2>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistAbs; WT = int]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistAbs]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 4>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 4>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 3>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 3>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = cv::Vec<int, 2>]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = cv::Vec<unsigned char, 2>; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "FastNlMeansDenoisingInvoker<T, IT, UIT, D, WT>::FastNlMeansDenoisingInvoker(const cv::Mat&, cv::Mat&, int, int, const float*) [with T = unsigned char; IT = int; UIT = unsigned int; D = DistSquared; WT = int]", "void fastNlMeansDenoising_(const cv::Mat&, cv::Mat&, const std::vector<float>&, int, int) [with ST = unsigned char; IT = int; UIT = unsigned int; D = DistSquared]", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, const std::vector<float>&, int, int, int)", "27FastNlMeansDenoisingInvokerIhij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerIhij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerItxy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhxy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "void throw_no_cuda()", "void cv::checkImageDimensions(const std::vector<cv::Mat>&)", "void cvInpaint(const CvArr*, const CvArr*, CvArr*, double, int)", "N2cv6detail12PtrOwnerImplI14_IplConvKernelNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI20CvPriorityQueueFloatNS_14DefaultDeleterIS2_EEEE", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "virtual void cv::MergeMertensImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArray)", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "N2cv14MergeExposuresE", "N2cv12MergeDebevecE", "N2cv12MergeMertensE", "N2cv14MergeRobertsonE", "N2cv16MergeDebevecImplE", "N2cv16MergeMertensImplE", "N2cv18MergeRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_16MergeDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16MergeMertensImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18MergeRobertsonImplENS_14DefaultDeleterIS2_EEEE", "void cv::seamlessClone(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point, cv::OutputArray, int)", "virtual void cv::TonemapMantiukImpl::read(const cv::FileNode&)", "virtual void cv::TonemapMantiukImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapReinhardImpl::read(const cv::FileNode&)", "virtual void cv::TonemapReinhardImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapDurandImpl::read(const cv::FileNode&)", "virtual void cv::TonemapDurandImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapDragoImpl::read(const cv::FileNode&)", "virtual void cv::TonemapDragoImpl::process(cv::InputArray, cv::OutputArray)", "virtual void cv::TonemapImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::TonemapImpl::process(cv::InputArray, cv::OutputArray)", "N2cv7TonemapE", "N2cv12TonemapDragoE", "N2cv13TonemapDurandE", "N2cv15TonemapReinhardE", "N2cv14TonemapMantiukE", "N2cv11TonemapImplE", "N2cv16TonemapDragoImplE", "N2cv17TonemapDurandImplE", "N2cv19TonemapReinhardImplE", "N2cv18TonemapMantiukImplE", "N2cv6detail12PtrOwnerImplINS_11TonemapImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16TonemapDragoImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17TonemapDurandImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19TonemapReinhardImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18TonemapMantiukImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage(cv::OutputArray) const", "void cv::BackgroundSubtractorMOG2Impl::initialize(cv::Size, int)", "virtual void cv::BackgroundSubtractorMOG2Impl::apply(cv::InputArray, cv::OutputArray, double)", "virtual void cv::BackgroundSubtractorMOG2Impl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "virtual void cv::BackgroundSubtractorMOG2Impl::setDetectShadows(bool)", "N2cv20BackgroundSubtractorE", "N2cv24BackgroundSubtractorMOG2E", "N2cv28BackgroundSubtractorMOG2ImplE", "N2cv11MOG2InvokerE", "N2cv6detail12PtrOwnerImplINS_28BackgroundSubtractorMOG2ImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::BackgroundSubtractorKNNImpl::getBackgroundImage(cv::OutputArray) const", "virtual void cv::BackgroundSubtractorKNNImpl::apply(cv::InputArray, cv::OutputArray, double)", "virtual void cv::BackgroundSubtractorKNNImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv23BackgroundSubtractorKNNE", "N2cv27BackgroundSubtractorKNNImplE", "N2cv6detail12PtrOwnerImplINS_27BackgroundSubtractorKNNImplENS_14DefaultDeleterIS2_EEEE", "int cv::meanShift(cv::InputArray, cv::Rect&, cv::TermCriteria)", "void cvCalcOpticalFlowFarneback(const CvArr*, const CvArr*, CvArr*, double, int, int, int, int, double, int)", "void cvCalcOpticalFlowPyrLK(const void*, const void*, void*, void*, const CvPoint2D32f*, CvPoint2D32f*, int, CvSize, int, char*, float*, CvTermCriteria, int)", "const CvMat* cvKalmanCorrect(CvKalman*, const CvMat*)", "const CvMat* cvKalmanPredict(CvKalman*, const CvMat*)", "void cvReleaseKalman(CvKalman**)", "CvKalman* cvCreateKalman(int, int, int)", "void update_warping_matrix_ECC(cv::Mat&, const cv::Mat&, int)", "void project_onto_jacobian_ECC(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_euclidean_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_translation_ECC(const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_homo_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "void image_jacobian_affine_ECC(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "double cv::findTransformECC(cv::InputArray, cv::InputArray, cv::InputOutputArray, int, cv::TermCriteria, cv::InputArray)", "void cv::KalmanFilter::init(int, int, int, int)", "void cv::getRTMatrix(const Point2f*, const Point2f*, int, cv::Mat&, bool)", "cv::Mat cv::estimateRigidTransform(cv::InputArray, cv::InputArray, bool)", "bool cv::PyrLKOpticalFlow::lkSparse_run(cv::UMat&, cv::UMat&, const cv::UMat&, cv::UMat&, cv::UMat&, cv::UMat&, int, int)", "void cv::calcOpticalFlowPyrLK(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray, cv::Size, int, cv::TermCriteria, int, double)", "void {anonymous}::calcSharrDeriv(const cv::Mat&, cv::Mat&)", "int cv::buildOpticalFlowPyramid(cv::InputArray, cv::OutputArrayOfArrays, cv::Size, int, bool, int, int, bool)", "N2cv6detail16LKTrackerInvokerE", "void cv::FarnebackPolyExp(const cv::Mat&, cv::Mat&, int, double)", "bool cv::FarnebackOpticalFlow::gaussianBlurOcl(const cv::UMat&, int, cv::UMat&)", "bool cv::FarnebackOpticalFlow::operator()(const cv::UMat&, const cv::UMat&, cv::UMat&, cv::UMat&)", "void cv::calcOpticalFlowFarneback(cv::InputArray, cv::InputArray, cv::InputOutputArray, double, int, int, int, int, double, int)", "virtual void {anonymous}::OpticalFlowDual_TVL1::calc(cv::InputArray, cv::InputArray, cv::InputOutputArray)", "*N12_GLOBAL__N_120OpticalFlowDual_TVL1E", "*N12_GLOBAL__N_116BuildFlowMapBodyE", "*N12_GLOBAL__N_120CenteredGradientBodyE", "*N12_GLOBAL__N_119ForwardGradientBodyE", "*N12_GLOBAL__N_114DivergenceBodyE", "*N12_GLOBAL__N_115CalcGradRhoBodyE", "*N12_GLOBAL__N_113EstimateVBodyE", "*N12_GLOBAL__N_125EstimateDualVariablesBodyE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_120OpticalFlowDual_TVL1ENS_14DefaultDeleterIS3_EEEE", "N2cv16DenseOpticalFlowE", "N2cv19DualTVL1OpticalFlowE", "CvMat* cvDecodeImageM(const CvMat*, int)", "IplImage* cvDecodeImage(const CvMat*, int)", "bool cv::imencode(const cv::String&, cv::InputArray, std::vector<unsigned char>&, const std::vector<int>&)", "void* cv::imdecode_(const cv::Mat&, int, int, cv::Mat*)", "bool cv::imwrite_(const cv::String&, const cv::Mat&, const std::vector<int>&, bool)", "N2cv6detail12PtrOwnerImplINS_10BmpDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrEncoderENS_14DefaultDeleterIS2_EEEE", "virtual void cv::BaseImageEncoder::throwOnEror() const", "N2cv16BaseImageDecoderE", "N2cv16BaseImageEncoderE", "N2cv10BmpEncoderE", "N2cv10ExrDecoderE", "N2cv10ExrEncoderE", "virtual bool cv::HdrEncoder::write(const cv::Mat&, const std::vector<int>&)", "N2cv10HdrDecoderE", "N2cv10HdrEncoderE", "N2cv11JpegDecoderE", "N2cv11JpegEncoderE", "N2cv13Jpeg2KDecoderE", "N2cv13Jpeg2KEncoderE", "static void cv::PngEncoder::writeDataToBuf(void*, uchar*, size_t)", "static void cv::PngDecoder::readDataFromBuf(void*, uchar*, size_t)", "N2cv10PngDecoderE", "N2cv10PngEncoderE", "*N2cv5._179E", "N2cv10PxMDecoderE", "N2cv10PxMEncoderE", "N2cv16SunRasterDecoderE", "N2cv16SunRasterEncoderE", "N2cv11TiffDecoderE", "N2cv11TiffEncoderE", "N2cv11WebPDecoderE", "N2cv11WebPEncoderE", "virtual bool cv::RBaseStream::open(const cv::Mat&)", "*N2cv5._179E", "N2cv11RBaseStreamE", "N2cv12RLByteStreamE", "N2cv12RMByteStreamE", "N2cv11WBaseStreamE", "N2cv12WLByteStreamE", "N2cv12WMByteStreamE", "int rgbe_error(int, const char*)", "N2cv12VideoCaptureE", "N2cv11VideoWriterE", "N2cv6detail12PtrOwnerImplI9CvCaptureNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvVideoWriterNS_14DefaultDeleterIS2_EEEE", "13CvVideoWriter", "16CvCapture_Images", "20CvVideoWriter_Images", "bool cv::mjpeg::MotionJpegWriter::open(const cv::String&, double, cv::Size, bool)", "static bool cv::mjpeg::BitStream::createEncodeHuffmanTable(const int*, unsigned int*, int)", "void cv::mjpeg::BitStream::putBytes(const uchar*, int)", "void cv::mjpeg::MotionJpegWriter::writeFrameData(const uchar*, int, int, int)", "virtual void cv::mjpeg::MotionJpegWriter::write(cv::InputArray)", "void cv::mjpeg::BitStream::writeBlock()", "void cv::mjpeg::BitStream::patchInt(int, size_t)", "N2cv5mjpeg16MotionJpegWriterE", "N2cv6detail12PtrOwnerImplINS_5mjpeg16MotionJpegWriterENS_14DefaultDeleterIS3_EEEE", "N2cv17MotionJpegCaptureE", "N2cv6detail12PtrOwnerImplINS_17MotionJpegCaptureENS_14DefaultDeleterIS2_EEEE", "void cv::setWindowTitle(const cv::String&, const cv::String&)", "int cv::createButton(const cv::String&, cv::ButtonCallback, void*, int, bool)", "void cv::loadWindowParameters(const cv::String&)", "void cv::saveWindowParameters(const cv::String&)", "void cv::stopLoop()", "int cv::startLoop(int (*)(int, char**), int, char**)", "void cv::displayOverlay(const cv::String&, const cv::String&, int)", "void cv::displayStatusBar(const cv::String&, const cv::String&, int)", "void cv::addText(const cv::Mat&, const cv::String&, cv::Point, const cv::QtFont&)", "cv::QtFont cv::fontQt(const cv::String&, int, cv::Scalar, int, int, int)", "void cvUpdateWindow(const char*)", "void cvSetOpenGlContext(const char*)", "void cvSetOpenGlDrawCallback(const char*, CvOpenGlDrawCallback, void*)", "void cv::imshow(const cv::String&, const cv::ogl::Texture2D&)", "void cv::imshow(const cv::String&, cv::InputArray)", "cv::Ptr<cv::BaseCascadeClassifier::MaskGenerator> cv::CascadeClassifier::getMaskGenerator()", "void cv::CascadeClassifier::setMaskGenerator(const cv::Ptr<cv::BaseCascadeClassifier::MaskGenerator>&)", "void* cv::CascadeClassifier::getOldCascade()", "int cv::CascadeClassifier::getFeatureType() const", "cv::Size cv::CascadeClassifier::getOriginalWindowSize() const", "bool cv::CascadeClassifier::isOldFormatCascade() const", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, cv::Size, cv::Size, bool)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, double, int, int, cv::Size, cv::Size)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, double, int, int, cv::Size, cv::Size)", "void cv::clipObjects(cv::Size, std::vector<cv::Rect_<int> >&, std::vector<int>*, std::vector<double, std::allocator<double> >*)", "bool cv::CascadeClassifierImpl::Data::read(const cv::FileNode&)", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, double, int, int, cv::Size, cv::Size)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvAvgComp; CvSeq = CvSeq]", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<cv::Rect_<int> >&, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, cv::Size, cv::Size, bool)", "int cv::predictCategoricalStump(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::LBPEvaluator]", "int cv::predictOrderedStump(cv::CascadeClassifierImpl&, cv::Ptr<cv::FeatureEvaluator>&, double&) [with FEval = cv::HaarEvaluator]", "virtual bool cv::LBPEvaluator::setWindow(cv::Point, int)", "const cv::FeatureEvaluator::ScaleData& cv::FeatureEvaluator::getScaleData(int) const", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "virtual void cv::HaarEvaluator::computeChannels(int, cv::InputArray)", "virtual bool cv::HaarEvaluator::read(const cv::FileNode&, cv::Size)", "int cv::partition(const std::vector<_Tp>&, std::vector<int>&, _EqPredicate) [with _Tp = cv::Rect_<int>; _EqPredicate = cv::SimilarRects]", "N2cv21BaseCascadeClassifierE", "N2cv16FeatureEvaluatorE", "N2cv21CascadeClassifierImplE", "N2cv13HaarEvaluatorE", "N2cv12LBPEvaluatorE", "N2cv24CascadeClassifierInvokerE", "N2cv6detail12PtrOwnerImplINS_13HaarEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12LBPEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_16FeatureEvaluator9ScaleDataESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplI23CvHaarClassifierCascadeNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_21CascadeClassifierImplENS_14DefaultDeleterIS2_EEEE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "void cv::DetectionBasedTracker::updateTrackedObjects(const std::vector<cv::Rect_<int> >&)", "virtual void cv::DetectionBasedTracker::process(const cv::Mat&)", "cv::DetectionBasedTracker::DetectionBasedTracker(cv::Ptr<cv::DetectionBasedTracker::IDetector>, cv::Ptr<cv::DetectionBasedTracker::IDetector>, const cv::DetectionBasedTracker::Parameters&)", "void cv::DetectionBasedTracker::SeparateDetectionWork::workcycleObjectDetector()", "void* cv::workcycleObjectDetectorFunction(void*)", "cv::DetectionBasedTracker::SeparateDetectionWork::SeparateDetectionWork(cv::DetectionBasedTracker&, cv::Ptr<cv::DetectionBasedTracker::IDetector>)", "N2cv21DetectionBasedTrackerE", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "N2cv6detail12PtrOwnerImplINS_21DetectionBasedTracker21SeparateDetectionWorkENS_14DefaultDeleterIS3_EEEE", "void* icvReadHaarClassifier(CvFileStorage*, CvFileNode*)", "CvHaarClassifierCascade* icvCreateHaarClassifierCascade(int)", "CvHaarClassifierCascade* cvLoadHaarClassifierCascade(const char*, CvSize)", "CvSeq* cvHaarDetectObjectsForROC(const CvArr*, CvHaarClassifierCascade*, CvMemStorage*, std::vector<int>&, std::vector<double, std::allocator<double> >&, double, int, int, CvSize, CvSize, bool)", "int cvRunHaarClassifierCascadeSum(const CvHaarClassifierCascade*, CvPoint, double&, int)", "CvHidHaarClassifierCascade* icvCreateHidHaarClassifierCascade(CvHaarClassifierCascade*)", "void cvSetImagesForHaarClassifierCascade(CvHaarClassifierCascade*, const CvArr*, const CvArr*, const CvArr*, double)", "N2cv36HaarDetectObjects_ScaleImage_InvokerE", "N2cv38HaarDetectObjects_ScaleCascade_InvokerE", "void cv::HOGDescriptor::groupRectangles(std::vector<cv::Rect_<int> >&, std::vector<double, std::allocator<double> >&, int, double) const", "readALTModel", "cv::Mat::Mat(cv::Size, int, void*, size_t)", "virtual void cv::HOGDescriptor::detect(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<double, std::allocator<double> >&, double, cv::Size, cv::Size, const std::vector<cv::Point_<int> >&) const", "const float* cv::HOGCache::getBlock(cv::Point, float*)", "virtual void cv::HOGDescriptor::computeGradient(const cv::Mat&, cv::Mat&, cv::Mat&, cv::Size, cv::Size) const", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = std::vector<float>]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = bool]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Size_<int>]", "virtual bool cv::HOGDescriptor::read(cv::FileNode&)", "virtual void cv::HOGDescriptor::setSVMDetector(cv::InputArray)", "size_t cv::HOGDescriptor::getDescriptorSize() const", "N2cv13HOGDescriptorE", "N2cv8HOGCacheE", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "N2cv20AgastFeatureDetectorE", "N2cv25AgastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_25AgastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::makeAgastOffsets(int*, int, int)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::AKAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "N2cv5AKAZEE", "N2cv10AKAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_10AKAZE_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, cv::OutputArray, std::vector<std::vector<int> >*)", "virtual cv::Mat cv::BOWKMeansTrainer::cluster() const", "void cv::BOWTrainer::add(const cv::Mat&)", "N2cv10BOWTrainerE", "N2cv16BOWKMeansTrainerE", "N2cv25BOWImgDescriptorExtractorE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv18SimpleBlobDetectorE", "N2cv22SimpleBlobDetectorImplE", "N2cv6detail12PtrOwnerImplINS_22SimpleBlobDetectorImplENS_14DefaultDeleterIS2_EEEE", "static void cv::BriskLayer::twothirdsample(const cv::Mat&, cv::Mat&)", "static void cv::BriskLayer::halfsample(const cv::Mat&, cv::Mat&)", "float cv::BriskScaleSpace::getScoreMaxAbove(int, int, int, int, bool&, float&, float&) const", "float cv::BriskScaleSpace::getScoreMaxBelow(int, int, int, int, bool&, float&, float&) const", "void cv::BRISK_Impl::generateKernel(const std::vector<float>&, const std::vector<int>&, float, float, const std::vector<int>&)", "N2cv5BRISKE", "N2cv10BRISK_ImplE", "N2cv6detail12PtrOwnerImplINS_10BRISK_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::drawMatches(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, const std::vector<std::vector<cv::DMatch> >&, cv::InputOutputArray, const Scalar&, const Scalar&, const std::vector<std::vector<char> >&, int)", "void cv::_prepareImgAndDrawKeypoints(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputOutputArray, cv::Mat&, cv::Mat&, const Scalar&, int)", "void cv::drawMatches(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputArray, const std::vector<cv::KeyPoint>&, const std::vector<cv::DMatch>&, cv::InputOutputArray, const Scalar&, const Scalar&, const std::vector<char>&, int)", "void cv::_drawKeypoint(cv::InputOutputArray, const cv::KeyPoint&, const Scalar&, int)", "void cv::drawKeypoints(cv::InputArray, const std::vector<cv::KeyPoint>&, cv::InputOutputArray, const Scalar&, int)", "void IntersectAreaCounter::operator()(const BlockedRange&)", "void cv::computeRecallPrecisionCurve(const std::vector<std::vector<cv::DMatch> >&, const std::vector<std::vector<unsigned char> >&, std::vector<cv::Point_<float> >&)", "void cv::evaluateFeatureDetector(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<cv::KeyPoint>*, std::vector<cv::KeyPoint>*, float&, int&, const cv::Ptr<cv::Feature2D>&)", "static void EllipticKeyPoint::calcProjection(const std::vector<EllipticKeyPoint>&, const cv::Mat_<double>&, std::vector<EllipticKeyPoint>&)", "static void EllipticKeyPoint::convert(const std::vector<cv::KeyPoint>&, std::vector<EllipticKeyPoint>&)", "N3tbb10interface68internal13finish_reduceI20IntersectAreaCounterEE", "N3tbb10interface68internal12start_reduceINS_13blocked_rangeIiEE20IntersectAreaCounterKNS_16auto_partitionerEEE", "N2cv19FastFeatureDetectorE", "N2cv24FastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_24FastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::makeOffsets(int*, int, int)", "virtual void cv::Feature2D::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "virtual void cv::Feature2D::compute(cv::InputArrayOfArrays, std::vector<std::vector<cv::KeyPoint> >&, cv::OutputArrayOfArrays)", "virtual void cv::Feature2D::detect(cv::InputArrayOfArrays, std::vector<std::vector<cv::KeyPoint> >&, cv::InputArrayOfArrays)", "N2cv9Feature2DE", "N2cv12GFTTDetectorE", "N2cv17GFTTDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_17GFTTDetector_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::generateDescriptorSubsample(cv::Mat&, cv::Mat&, int, int, int)", "void cv::MLDB_Full_Descriptor_Invoker::Get_MLDB_Full_Descriptor(const cv::KeyPoint&, unsigned char*) const", "void cv::AKAZEFeatures::Compute_Descriptors(std::vector<cv::KeyPoint>&, cv::Mat&)", "int cv::AKAZEFeatures::Create_Nonlinear_Scale_Space(const cv::Mat&)", "N2cv33MultiscaleDerivativesAKAZEInvokerE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "void cv::KAZEFeatures::Feature_Description(std::vector<cv::KeyPoint>&, cv::Mat&)", "int cv::KAZEFeatures::Create_Nonlinear_Scale_Space(const cv::Mat&)", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "void cv::halfsample_image(const cv::Mat&, cv::Mat&)", "N2cv23Nld_Step_Scalar_InvokerE", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "virtual void cv::KAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "N2cv4KAZEE", "N2cv9KAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_9KAZE_ImplENS_14DefaultDeleterIS2_EEEE", "static void cv::KeyPointsFilter::runByKeypointSize(std::vector<cv::KeyPoint>&, float, float)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = short int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = short unsigned int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = char]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = unsigned char]", "virtual void cv::FlannBasedMatcher::read(const cv::FileNode&)", "virtual void cv::FlannBasedMatcher::train()", "cv::FlannBasedMatcher::FlannBasedMatcher(const cv::Ptr<cv::flann::IndexParams>&, const cv::Ptr<cv::flann::SearchParams>&)", "static cv::Ptr<cv::DescriptorMatcher> cv::DescriptorMatcher::create(const cv::String&)", "virtual void cv::BFMatcher::radiusMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArrayOfArrays, bool)", "virtual void cv::BFMatcher::knnMatchImpl(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArrayOfArrays, bool)", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, float, cv::InputArrayOfArrays, bool)", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, std::vector<std::vector<cv::DMatch> >&, int, cv::InputArrayOfArrays, bool)", "void cv::DescriptorMatcher::checkMasks(cv::InputArrayOfArrays, int) const", "void cv::convertMatches(const std::vector<std::vector<cv::DMatch> >&, std::vector<cv::DMatch>&)", "virtual void cv::DescriptorMatcher::add(cv::InputArrayOfArrays)", "void cv::DescriptorMatcher::DescriptorCollection::getLocalIdx(int, int&, int&) const", "const cv::Mat cv::DescriptorMatcher::DescriptorCollection::getDescriptor(int) const", "const cv::Mat cv::DescriptorMatcher::DescriptorCollection::getDescriptor(int, int) const", "void cv::DescriptorMatcher::DescriptorCollection::set(const std::vector<cv::Mat>&)", "N2cv17DescriptorMatcher20DescriptorCollectionE", "N2cv17DescriptorMatcherE", "N2cv9BFMatcherE", "N2cv17FlannBasedMatcherE", "N2cv6detail12PtrOwnerImplINS_5flann17KDTreeIndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann12SearchParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9BFMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17FlannBasedMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann5IndexENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann11IndexParamsENS_14DefaultDeleterIS3_EEEE", "void cv::MSER_Impl::pass(const cv::Mat&, std::vector<std::vector<cv::Point_<int> > >&, std::vector<cv::Rect_<int> >&, cv::Size, const int*, int)", "virtual void cv::MSER_Impl::detectRegions(cv::InputArray, std::vector<std::vector<cv::Point_<int> > >&, std::vector<cv::Rect_<int> >&)", "N2cv9MSER_ImplE", "N2cv6detail12PtrOwnerImplINS_9MSER_ImplENS_14DefaultDeleterIS2_EEEE", "void cv::computeOrbDescriptors(const cv::Mat&, const std::vector<cv::Rect_<int> >&, const std::vector<float>&, std::vector<cv::KeyPoint>&, cv::Mat&, const std::vector<cv::Point_<int> >&, int, int)", "void cv::HarrisResponses(const cv::Mat&, const std::vector<cv::Rect_<int> >&, std::vector<cv::KeyPoint>&, int, float)", "virtual void cv::ORB_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<cv::KeyPoint>&, cv::OutputArray, bool)", "N2cv3ORBE", "N2cv8ORB_ImplE", "N2cv6detail12PtrOwnerImplINS_8ORB_ImplENS_14DefaultDeleterIS2_EEEE", "bool cv::findCirclesGrid(cv::InputArray, cv::Size, cv::OutputArray, int, const cv::Ptr<cv::Feature2D>&)", "void cv::drawChessboardCorners(cv::InputOutputArray, cv::Size, cv::InputArray, bool)", "void cvDrawChessboardCorners(CvArr*, CvSize, CvPoint2D32f*, int, int)", "int cvFindChessboardCorners(const void*, CvSize, CvPoint2D32f*, int*, int)", "void cv::adjust3rdMatrix(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&)", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "void cv::collectCalibrationData(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Mat&, cv::Mat&, cv::Mat*, cv::Mat&)", "void cv::projectPoints(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double)", "void cvDecomposeProjectionMatrix(const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvPoint3D64f*)", "void cvRQDecomp3x3(const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvPoint3D64f*)", "void cvReprojectImageTo3D(const CvArr*, CvArr*, const CvMat*, int)", "void cv::reprojectImageTo3D(cv::InputArray, cv::OutputArray, cv::InputArray, bool, int)", "int cvStereoRectifyUncalibrated(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, CvMat*, double)", "void cvCalibrationMatrixValues(const CvMat*, CvSize, double, double, double*, double*, double*, CvPoint2D64f*, double*)", "double cvCalibrateCamera2(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, CvMat*, CvMat*, CvMat*, int, CvTermCriteria)", "void cvInitIntrinsicParams2D(const CvMat*, const CvMat*, const CvMat*, CvSize, CvMat*, double)", "void cvFindExtrinsicCameraParams2(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, int)", "void cvProjectPoints2(const CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, double)", "int cvRodrigues2(const CvMat*, CvMat*, CvMat*)", "void cvComposeRT(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "void cvCalcMatMulDeriv(const CvMat*, const CvMat*, CvMat*, CvMat*)", "size_t CirclesGridFinder::getFirstCorner(std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&) const", "void CirclesGridFinder::getCornerSegments(const std::vector<std::vector<unsigned int> >&, std::vector<std::vector<CirclesGridFinder::Segment> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&, std::vector<cv::Point_<int> >&) const", "void CirclesGridFinder::getAsymmetricHoles(std::vector<cv::Point_<float> >&) const", "size_t CirclesGridFinder::findLongestPath(std::vector<Graph>&, Path&)", "void computePredecessorMatrix(const cv::Mat&, int, cv::Mat&)", "void CirclesGridFinder::findBasis(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&, std::vector<Graph>&)", "void CirclesGridFinder::filterOutliersByDensity(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "float CirclesGridFinder::computeGraphConfidence(const std::vector<Graph>&, bool, const std::vector<unsigned int>&, const std::vector<unsigned int>&)", "static void CirclesGridFinder::insertWinner(float, float, float, bool, const std::vector<unsigned int>&, const std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&)", "void CirclesGridFinder::findCandidateHoles(std::vector<unsigned int>&, std::vector<unsigned int>&, bool, cv::Point2f, std::vector<unsigned int>&, std::vector<unsigned int>&)", "void CirclesGridFinder::findCandidateLine(std::vector<unsigned int>&, size_t, bool, cv::Point2f, std::vector<unsigned int>&)", "static cv::Mat CirclesGridFinder::rectifyGrid(cv::Size, const std::vector<cv::Point_<float> >&, const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "bool CirclesGridFinder::isDetectionCorrect()", "bool CirclesGridFinder::findHoles()", "CirclesGridFinder::CirclesGridFinder(cv::Size, const std::vector<cv::Point_<float> >&, const CirclesGridFinderParameters&)", "const Neighbors& Graph::getNeighbors(size_t) const", "void Graph::floydWarshall(cv::Mat&, int) const", "size_t Graph::getDegree(size_t) const", "bool Graph::areVerticesAdjacent(size_t, size_t) const", "void Graph::removeEdge(size_t, size_t)", "void Graph::addEdge(size_t, size_t)", "void Graph::addVertex(size_t)", "void CirclesGridClusterFinder::findOutsideCorners(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "void CirclesGridClusterFinder::findCorners(const std::vector<cv::Point_<float> >&, std::vector<cv::Point_<float> >&)", "void cvConvertPointsHomogeneous(const CvMat*, CvMat*)", "void cvComputeCorrespondEpilines(const CvMat*, int, const CvMat*, CvMat*)", "int cvFindFundamentalMat(const CvMat*, const CvMat*, CvMat*, int, double, double, CvMat*)", "bool CvLevMarq::updateAlt(const CvMat*&, CvMat*&, CvMat*&, double*&)", "void cvFindStereoCorrespondenceBM(const CvArr*, const CvArr*, CvArr*, CvStereoBMState*)", "void cvReleaseStereoBMState(CvStereoBMState**)", "cv::Vec3d cv::internal::median3d(cv::InputArray)", "double cv::internal::median(const cv::Mat&)", "void cv::internal::dAB(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::internal::EstimateUncertainties(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, cv::InputArray, cv::InputArray, cv::internal::IntrinsicParams&, cv::Vec2d&, double, int, double&)", "void cv::internal::ComputeJacobians(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, cv::InputArray, cv::InputArray, const int&, const double&, cv::Mat&, cv::Mat&)", "void cv::internal::CalibrateExtrinsics(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::internal::IntrinsicParams&, int, double, cv::InputOutputArray, cv::InputOutputArray)", "void cv::internal::InitExtrinsics(const cv::Mat&, const cv::Mat&, const cv::internal::IntrinsicParams&, cv::Mat&, cv::Mat&)", "cv::Mat cv::internal::NormalizePixels(const cv::Mat&, const cv::internal::IntrinsicParams&)", "void cv::internal::ComputeExtrinsicRefine(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, cv::Mat&, int, const cv::internal::IntrinsicParams&, double)", "void cv::internal::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, const cv::internal::IntrinsicParams&, cv::OutputArray)", "cv::internal::IntrinsicParams& cv::internal::IntrinsicParams::operator=(const cv::Mat&)", "cv::internal::IntrinsicParams cv::internal::IntrinsicParams::operator+(const cv::Mat&)", "cv::Mat::operator cv::Vec<_Tp, m>() const [with _Tp = double; int n = 3]", "void cv::{anonymous}::subMatrix(const cv::Mat&, cv::Mat&, const std::vector<int>&, const std::vector<int>&)", "double cv::fisheye::stereoCalibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "double cv::fisheye::calibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const Size&, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "void cv::fisheye::stereoRectify(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const Size&, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, const Size&, double, double)", "void cv::fisheye::estimateNewCameraMatrixForUndistortRectify(cv::InputArray, cv::InputArray, const Size&, cv::InputArray, cv::OutputArray, double, const Size&, double)", "void cv::fisheye::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const Size&, int, cv::OutputArray, cv::OutputArray)", "void cv::fisheye::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::fisheye::distortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, double)", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = double; int m = 3; int n = 3]", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = float; int m = 3; int n = 3]", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "void cv::decomposeEssentialMat(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "int cv::recoverPose(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, cv::Point2d, cv::InputOutputArray)", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, double, cv::Point2d, int, double, double, cv::OutputArray)", "N2cv19PointSetRegistrator8CallbackE", "N2cv19EMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_19EMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "void cv::convertPointsHomogeneous(cv::InputArray, cv::OutputArray)", "void cv::convertPointsToHomogeneous(cv::InputArray, cv::OutputArray)", "void cv::convertPointsFromHomogeneous(cv::InputArray, cv::OutputArray)", "void cv::computeCorrespondEpilines(cv::InputArray, int, cv::InputArray, cv::OutputArray)", "cv::Mat cv::findFundamentalMat(cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "int cv::run8Point(const cv::Mat&, const cv::Mat&, cv::Mat&)", "cv::Mat cv::findHomography(cv::InputArray, cv::InputArray, int, double, cv::OutputArray, int, double)", "virtual bool cv::HomographyRefineCallback::compute(cv::InputArray, cv::OutputArray, cv::OutputArray) const", "N2cv8LMSolver8CallbackE", "N2cv27HomographyEstimatorCallbackE", "N2cv24HomographyRefineCallbackE", "N2cv19FMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_27HomographyEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24HomographyRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19FMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "cv::Mat::operator cv::Matx<_Tp, m, n>() const [with _Tp = double; int m = 3; int n = 3]", "int cv::decomposeHomographyMat(cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv23HomographyDecomposition16HomographyDecompE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "virtual int cv::LMSolverImpl::run(cv::InputOutputArray) const", "N2cv8LMSolverE", "N2cv12LMSolverImplE", "N2cv6detail12PtrOwnerImplINS_12LMSolverImplENS_14DefaultDeleterIS2_EEEE", "CvPOSITObject* cvCreatePOSITObject(CvPoint3D32f*, int)", "int cv::estimateAffine3D(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, double)", "virtual bool cv::Affine3DEstimatorCallback::checkSubset(cv::InputArray, cv::InputArray, int) const", "virtual void cv::Affine3DEstimatorCallback::computeError(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray) const", "virtual bool cv::LMeDSPointSetRegistrator::run(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "int cv::RANSACPointSetRegistrator::findInliers(const cv::Mat&, const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, double) const", "bool cv::RANSACPointSetRegistrator::getSubset(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Mat&, cv::RNG&, int) const", "virtual bool cv::RANSACPointSetRegistrator::run(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "int cv::RANSACUpdateNumIters(double, double, int, int)", "N2cv19PointSetRegistratorE", "N2cv25RANSACPointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "N2cv25Affine3DEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_25RANSACPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24LMeDSPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine3DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "void cv::findCorner(const std::vector<cv::Point_<float> >&, cv::Point2f, cv::Point2f&)", "bool cv::find4QuadCornerSubpix(cv::InputArray, cv::InputOutputArray, cv::Size)", "N2cv8RHO_HESTE", "N2cv13RHO_HEST_REFCE", "N2cv6detail12PtrOwnerImplINS_13RHO_HEST_REFCENS_14DefaultDeleterIS2_EEEE", "void cv::Mat::push_back(const _Tp&) [with _Tp = int]", "bool cv::solvePnPRansac(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int, float, double, cv::OutputArray, int)", "bool cv::solvePnP(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int)", "N2cv17PnPRansacCallbackE", "N2cv6detail12PtrOwnerImplINS_17PnPRansacCallbackENS_14DefaultDeleterIS2_EEEE", "virtual void cv::StereoBMImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::StereoBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv13StereoMatcherE", "N2cv8StereoBME", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "N2cv12StereoBMImplE", "N2cv6detail12PtrOwnerImplINS_12StereoBMImplENS_14DefaultDeleterIS2_EEEE", "void cv::validateDisparity(cv::InputOutputArray, cv::InputArray, int, int, int)", "void cv::filterSpeckles(cv::InputOutputArray, double, int, double, cv::InputOutputArray)", "virtual void cv::StereoSGBMImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "void cv::computeDisparitySGBM(const cv::Mat&, const cv::Mat&, cv::Mat&, const cv::StereoSGBMParams&, cv::Mat&)", "virtual void cv::StereoSGBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv10StereoSGBME", "N2cv14StereoSGBMImplE", "N2cv6detail12PtrOwnerImplINS_14StereoSGBMImplENS_14DefaultDeleterIS2_EEEE", "void cvCorrectMatches(CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "static void cv::SVD::compute(const cv::Matx<_Tp, m, n>&, cv::Matx<_Tp, nm, 1>&, cv::Matx<_Tp, m, l>&, cv::Matx<_Tp, m, n>&) [with _Tp = double; int m = 4; int n = 4; int nm = 4]", "void cvTriangulatePoints(CvMat*, CvMat*, CvMat*, CvMat*, CvMat*)", "virtual float cv::AffineTransformerImpl::applyTransformation(cv::InputArray, cv::OutputArray)", "virtual void cv::AffineTransformerImpl::estimateTransformation(cv::InputArray, cv::InputArray, std::vector<cv::DMatch>&)", "virtual void cv::AffineTransformerImpl::warpImage(cv::InputArray, cv::OutputArray, int, int, const Scalar&) const", "virtual void cv::AffineTransformerImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv16ShapeTransformerE", "N2cv17AffineTransformerE", "N2cv21AffineTransformerImplE", "N2cv6detail12PtrOwnerImplINS_21AffineTransformerImplENS_14DefaultDeleterIS2_EEEE", "float EmdL1::getEMDL1(cv::Mat&, cv::Mat&)", "virtual float cv::HausdorffDistanceExtractorImpl::computeDistance(cv::InputArray, cv::InputArray)", "virtual void cv::HausdorffDistanceExtractorImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "virtual void cv::HausdorffDistanceExtractorImpl::setRankProportion(float)", "N2cv22ShapeDistanceExtractorE", "N2cv26HausdorffDistanceExtractorE", "N2cv30HausdorffDistanceExtractorImplE", "N2cv6detail12PtrOwnerImplINS_30HausdorffDistanceExtractorImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::EMDL1HistogramCostExtractorImpl::read(const cv::FileNode&)", "virtual void cv::ChiHistogramCostExtractorImpl::read(const cv::FileNode&)", "virtual void cv::EMDHistogramCostExtractorImpl::read(const cv::FileNode&)", "virtual void cv::NormHistogramCostExtractorImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "N2cv22HistogramCostExtractorE", "N2cv26NormHistogramCostExtractorE", "N2cv25EMDHistogramCostExtractorE", "N2cv25ChiHistogramCostExtractorE", "N2cv27EMDL1HistogramCostExtractorE", "N2cv30NormHistogramCostExtractorImplE", "N2cv29EMDHistogramCostExtractorImplE", "N2cv29ChiHistogramCostExtractorImplE", "N2cv31EMDL1HistogramCostExtractorImplE", "N2cv6detail12PtrOwnerImplINS_30NormHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29EMDHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29ChiHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_31EMDL1HistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "virtual float cv::ShapeContextDistanceExtractorImpl::computeDistance(cv::InputArray, cv::InputArray)", "virtual void cv::ShapeContextDistanceExtractorImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = float]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = bool]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = int]", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = cv::Mat]", "virtual void cv::ShapeContextDistanceExtractorImpl::setIterations(int)", "virtual void cv::ShapeContextDistanceExtractorImpl::getImages(cv::OutputArray, cv::OutputArray) const", "virtual void cv::ShapeContextDistanceExtractorImpl::setImages(cv::InputArray, cv::InputArray)", "virtual void cv::ShapeContextDistanceExtractorImpl::setOuterRadius(float)", "virtual void cv::ShapeContextDistanceExtractorImpl::setInnerRadius(float)", "virtual void cv::ShapeContextDistanceExtractorImpl::setRadialBins(int)", "virtual void cv::ShapeContextDistanceExtractorImpl::setAngularBins(int)", "N2cv31ThinPlateSplineShapeTransformerE", "N2cv29ShapeContextDistanceExtractorE", "N2cv33ShapeContextDistanceExtractorImplE", "N2cv6detail12PtrOwnerImplINS_33ShapeContextDistanceExtractorImplENS_14DefaultDeleterIS2_EEEE", "virtual void cv::ThinPlateSplineShapeTransformerImpl::estimateTransformation(cv::InputArray, cv::InputArray, std::vector<cv::DMatch>&)", "virtual float cv::ThinPlateSplineShapeTransformerImpl::applyTransformation(cv::InputArray, cv::OutputArray)", "virtual void cv::ThinPlateSplineShapeTransformerImpl::warpImage(cv::InputArray, cv::OutputArray, int, int, const Scalar&) const", "virtual void cv::ThinPlateSplineShapeTransformerImpl::read(const cv::FileNode&)", "cv::FileStorage& cv::operator<<(cv::FileStorage&, const _Tp&) [with _Tp = double]", "N2cv35ThinPlateSplineShapeTransformerImplE", "N2cv6detail12PtrOwnerImplINS_35ThinPlateSplineShapeTransformerImplENS_14DefaultDeleterIS2_EEEE", "void {anonymous}::calcBtvRegularization(cv::InputArray, cv::OutputArray, int, const std::vector<float>&, const cv::UMat&)", "void {anonymous}::upscale(cv::InputArray, cv::OutputArray, int)", "void {anonymous}::BTVL1_Base::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArrayOfArrays, cv::InputArrayOfArrays, int)", "*N12_GLOBAL__N_110BTVL1_BaseE", "*N12_GLOBAL__N_15BTVL1E", "*N12_GLOBAL__N_121BtvRegularizationBodyIfEE", "*N12_GLOBAL__N_121BtvRegularizationBodyIN2cv7Point3_IfEEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_15BTVL1ENS_14DefaultDeleterIS3_EEEE", "cv::Ptr<cv::superres::SuperResolution> cv::superres::createSuperResolution_BTVL1_CUDA()", "cv::Ptr<cv::superres::FrameSource> cv::superres::createFrameSource_Video_CUDA(const cv::String&)", "virtual void {anonymous}::CameraFrameSource::reset()", "virtual void {anonymous}::VideoFrameSource::reset()", "virtual void {anonymous}::CaptureFrameSource::nextFrame(cv::OutputArray)", "*N12_GLOBAL__N_116EmptyFrameSourceE", "*N12_GLOBAL__N_118CaptureFrameSourceE", "*N12_GLOBAL__N_116VideoFrameSourceE", "*N12_GLOBAL__N_117CameraFrameSourceE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_116EmptyFrameSourceENS_14DefaultDeleterIS3_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_116VideoFrameSourceENS_14DefaultDeleterIS3_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_117CameraFrameSourceENS_14DefaultDeleterIS3_EEEE", "N2cv8superres11FrameSourceE", "void {anonymous}::convertToDepth(cv::InputArray, cv::OutputArray, int)", "void {anonymous}::convertToCn(cv::InputArray, cv::OutputArray, int)", "void cv::superres::arrCopy(cv::InputArray, cv::OutputArray)", "cv::Ptr<cv::superres::PyrLKOpticalFlow> cv::superres::createOptFlow_PyrLK_CUDA()", "cv::Ptr<cv::superres::BroxOpticalFlow> cv::superres::createOptFlow_Brox_CUDA()", "cv::Ptr<cv::superres::DualTVL1OpticalFlow> cv::superres::createOptFlow_DualTVL1_CUDA()", "cv::Ptr<cv::superres::FarnebackOpticalFlow> cv::superres::createOptFlow_Farneback_CUDA()", "virtual void {anonymous}::CpuOpticalFlow::calc(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "*N12_GLOBAL__N_114CpuOpticalFlowE", "*N12_GLOBAL__N_19FarnebackE", "*N12_GLOBAL__N_18DualTVL1E", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_19FarnebackENS_14DefaultDeleterIS3_EEEE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_18DualTVL1ENS_14DefaultDeleterIS3_EEEE", "N2cv8superres19DenseOpticalFlowExtE", "N2cv8superres20FarnebackOpticalFlowE", "N2cv8superres19DualTVL1OpticalFlowE", "N2cv8superres15SuperResolutionE", "bool cv::detail::calibrateRotatingCamera(const std::vector<cv::Mat>&, cv::Mat&)", "void cv::detail::focalsFromHomography(const cv::Mat&, double&, double&, bool&, bool&)", "void cv::detail::restoreImageFromLaplacePyrGpu(std::vector<cv::UMat>&)", "void cv::detail::createLaplacePyrGpu(cv::InputArray, int, std::vector<cv::UMat>&)", "void cv::detail::createWeightMap(cv::InputArray, float, cv::InputOutputArray)", "void cv::detail::normalizeUsingWeightMap(cv::InputArray, cv::InputOutputArray)", "virtual void cv::detail::MultiBandBlender::feed(cv::InputArray, cv::InputArray, cv::Point)", "cv::detail::MultiBandBlender::MultiBandBlender(int, int, int)", "virtual void cv::detail::FeatherBlender::feed(cv::InputArray, cv::InputArray, cv::Point)", "virtual void cv::detail::Blender::feed(cv::InputArray, cv::InputArray, cv::Point)", "static cv::Ptr<cv::detail::Blender> cv::detail::Blender::createDefault(int, bool)", "N2cv6detail7BlenderE", "N2cv6detail14FeatherBlenderE", "N2cv6detail16MultiBandBlenderE", "N2cv6detail12PtrOwnerImplINS0_7BlenderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_14FeatherBlenderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_16MultiBandBlenderENS_14DefaultDeleterIS2_EEEE", "virtual void cv::detail::BlocksGainCompensator::apply(int, cv::Point, cv::InputOutputArray, cv::InputArray)", "virtual void cv::detail::BlocksGainCompensator::feed(const std::vector<cv::Point_<int> >&, const std::vector<cv::UMat>&, const std::vector<std::pair<cv::UMat, unsigned char> >&)", "virtual void cv::detail::GainCompensator::feed(const std::vector<cv::Point_<int> >&, const std::vector<cv::UMat>&, const std::vector<std::pair<cv::UMat, unsigned char> >&)", "static cv::Ptr<cv::detail::ExposureCompensator> cv::detail::ExposureCompensator::createDefault(int)", "N2cv6detail19ExposureCompensatorE", "N2cv6detail21NoExposureCompensatorE", "N2cv6detail15GainCompensatorE", "N2cv6detail21BlocksGainCompensatorE", "N2cv6detail12PtrOwnerImplINS0_21NoExposureCompensatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_15GainCompensatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_21BlocksGainCompensatorENS_14DefaultDeleterIS2_EEEE", "void cv::detail::BestOf2NearestRangeMatcher::operator()(const std::vector<cv::detail::ImageFeatures>&, std::vector<cv::detail::MatchesInfo>&, const cv::UMat&)", "virtual void {anonymous}::CpuMatcher::match(const cv::detail::ImageFeatures&, const cv::detail::ImageFeatures&, cv::detail::MatchesInfo&)", "void cv::detail::FeaturesMatcher::operator()(const std::vector<cv::detail::ImageFeatures>&, std::vector<cv::detail::MatchesInfo>&, const cv::UMat&)", "virtual void cv::detail::OrbFeaturesFinder::find(cv::InputArray, cv::detail::ImageFeatures&)", "virtual void cv::detail::SurfFeaturesFinder::find(cv::InputArray, cv::detail::ImageFeatures&)", "cv::detail::SurfFeaturesFinder::SurfFeaturesFinder(double, int, int, int, int)", "*N12_GLOBAL__N_114MatchPairsBodyE", "*N12_GLOBAL__N_110CpuMatcherE", "*N2cv6detail12PtrOwnerImplIN12_GLOBAL__N_110CpuMatcherENS_14DefaultDeleterIS3_EEEE", "N2cv6detail14FeaturesFinderE", "N2cv6detail18SurfFeaturesFinderE", "N2cv6detail17OrbFeaturesFinderE", "N2cv6detail15FeaturesMatcherE", "N2cv6detail21BestOf2NearestMatcherE", "N2cv6detail26BestOf2NearestRangeMatcherE", "void cv::detail::findMaxSpanningTree(int, const std::vector<cv::detail::MatchesInfo>&, cv::detail::Graph&, std::vector<int>&)", "void cv::detail::waveCorrect(std::vector<cv::Mat>&, cv::detail::WaveCorrectKind)", "virtual void cv::detail::BundleAdjusterRay::setUpInitialCameraParams(const std::vector<cv::detail::CameraParams>&)", "virtual void cv::detail::BundleAdjusterReproj::setUpInitialCameraParams(const std::vector<cv::detail::CameraParams>&)", "N2cv6detail9EstimatorE", "N2cv6detail24HomographyBasedEstimatorE", "N2cv6detail18BundleAdjusterBaseE", "N2cv6detail20BundleAdjusterReprojE", "N2cv6detail17BundleAdjusterRayE", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = float]", "TWeight GCGraph<TWeight>::maxFlow() [with TWeight = float]", "virtual void cv::detail::GraphCutSeamFinder::Impl::findInPair(size_t, size_t, cv::Rect)", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = float]", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = float]", "virtual void cv::detail::GraphCutSeamFinder::Impl::find(const std::vector<cv::UMat>&, const std::vector<cv::Point_<int> >&, std::vector<cv::UMat>&)", "bool cv::detail::DpSeamFinder::estimateSeam(const cv::Mat&, const cv::Mat&, cv::Point, cv::Point, int, cv::Point, cv::Point, std::vector<cv::Point_<int> >&, bool&)", "void cv::detail::DpSeamFinder::computeCosts(const cv::Mat&, const cv::Mat&, cv::Point, cv::Point, int, cv::Mat_<float>&, cv::Mat_<float>&)", "int cv::partition(const std::vector<_Tp>&, std::vector<int>&, _EqPredicate) [with _Tp = cv::Point_<int>; _EqPredicate = cv::detail::DpSeamFinder::ClosePoints]", "bool cv::detail::DpSeamFinder::getSeamTips(int, int, cv::Point&, cv::Point&)", "void cv::detail::DpSeamFinder::computeGradients(const cv::Mat&, const cv::Mat&)", "void cv::detail::DpSeamFinder::process(const cv::Mat&, const cv::Mat&, cv::Point, cv::Point, cv::Mat&, cv::Mat&)", "N2cv6detail22GraphCutSeamFinderBaseE", "N2cv6detail10SeamFinderE", "N2cv6detail18PairwiseSeamFinderE", "N2cv6detail17VoronoiSeamFinderE", "N2cv6detail12DpSeamFinderE", "N2cv6detail18GraphCutSeamFinderE", "N2cv6detail18GraphCutSeamFinder4ImplE", "N2cv6detail12PtrOwnerImplINS0_18GraphCutSeamFinder4ImplENS_14DefaultDeleterIS3_EEEE", "void cv::detail::RotationWarperBase<P>::warpBackward(cv::InputArray, cv::InputArray, cv::InputArray, int, int, cv::Size, cv::OutputArray) [with P = cv::detail::SphericalProjector; cv::InputArray = const cv::_InputArray&; cv::Size = cv::Size_<int>; cv::OutputArray = const cv::_OutputArray&]", "cv::Stitcher::Status cv::Stitcher::composePanorama(cv::InputArrayOfArrays, cv::OutputArray)", "void cv::detail::BundleAdjusterBase::setRefinementMask(const cv::Mat&)", "N2cv6detail14RotationWarperE", "N2cv6detail18RotationWarperBaseINS0_18SphericalProjectorEEE", "N2cv13WarperCreatorE", "N2cv15SphericalWarperE", "N2cv6detail12PtrOwnerImplINS0_15SphericalWarperENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_21BestOf2NearestMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_17BundleAdjusterRayENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_17OrbFeaturesFinderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15SphericalWarperENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_18GraphCutSeamFinderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_8StitcherENS_14DefaultDeleterIS2_EEEE", "virtual void cv::detail::Timelapser::process(cv::InputArray, cv::InputArray, cv::Point)", "static cv::Ptr<cv::detail::Timelapser> cv::detail::Timelapser::createDefault(int)", "N2cv6detail10TimelapserE", "N2cv6detail14TimelapserCropE", "N2cv6detail12PtrOwnerImplINS0_10TimelapserENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_14TimelapserCropENS_14DefaultDeleterIS2_EEEE", "cv::Rect cv::detail::resultRoiIntersection(const std::vector<cv::Point_<int> >&, const std::vector<cv::Size_<int> >&)", "cv::Rect cv::detail::resultRoi(const std::vector<cv::Point_<int> >&, const std::vector<cv::Size_<int> >&)", "void cv::detail::RotationWarperBase<P>::warpBackward(cv::InputArray, cv::InputArray, cv::InputArray, int, int, cv::Size, cv::OutputArray) [with P = cv::detail::PlaneProjector; cv::InputArray = const cv::_InputArray&; cv::Size = cv::Size_<int>; cv::OutputArray = const cv::_OutputArray&]", "void cv::detail::RotationWarperBase<P>::warpBackward(cv::InputArray, cv::InputArray, cv::InputArray, int, int, cv::Size, cv::OutputArray) [with P = cv::detail::SphericalPortraitProjector; cv::InputArray = const cv::_InputArray&; cv::Size = cv::Size_<int>; cv::OutputArray = const cv::_OutputArray&]", "void cv::detail::RotationWarperBase<P>::warpBackward(cv::InputArray, cv::InputArray, cv::InputArray, int, int, cv::Size, cv::OutputArray) [with P = cv::detail::CylindricalProjector; cv::InputArray = const cv::_InputArray&; cv::Size = cv::Size_<int>; cv::OutputArray = const cv::_OutputArray&]", "void cv::detail::ProjectorBase::setCameraParams(cv::InputArray, cv::InputArray, cv::InputArray)", "N2cv6detail18RotationWarperBaseINS0_14PlaneProjectorEEE", "N2cv6detail11PlaneWarperE", "N2cv6detail15SphericalWarperE", "N2cv6detail18RotationWarperBaseINS0_20CylindricalProjectorEEE", "N2cv6detail17CylindricalWarperE", "N2cv6detail18RotationWarperBaseINS0_26SphericalPortraitProjectorEEE", "N2cv6detail23SphericalPortraitWarperE", "void throw_no_cuda()", "virtual void cv::videostab::WeightingDeblurer::deblur(int, cv::Mat&)", "N2cv9videostab12DeblurerBaseE", "N2cv9videostab17WeightingDeblurerE", "virtual void cv::videostab::{anonymous}::VideoFileSourceImpl::reset()", "*N2cv9videostab12_GLOBAL__N_119VideoFileSourceImplE", "*N2cv6detail12PtrOwnerImplINS_9videostab12_GLOBAL__N_119VideoFileSourceImplENS_14DefaultDeleterIS4_EEEE", "N2cv9videostab12IFrameSourceE", "N2cv9videostab15VideoFileSourceE", "cv::videostab::ToFileMotionWriter::ToFileMotionWriter(const cv::String&, cv::Ptr<cv::videostab::ImageMotionEstimatorBase>)", "cv::videostab::FromFileMotionReader::FromFileMotionReader(const cv::String&)", "virtual cv::Mat cv::videostab::MotionEstimatorL1::estimate(cv::InputArray, cv::InputArray, bool*)", "virtual cv::Mat cv::videostab::MotionEstimatorRansacL2::estimate(cv::InputArray, cv::InputArray, bool*)", "static cv::videostab::RansacParams cv::videostab::RansacParams::default2dMotion(cv::videostab::MotionModel)", "cv::Mat cv::videostab::estimateGlobalMotionRansac(cv::InputArray, cv::InputArray, int, const cv::videostab::RansacParams&, float*, int*)", "cv::Mat cv::videostab::estimateGlobalMotionLeastSquares(cv::InputOutputArray, cv::InputOutputArray, int, float*)", "N2cv9videostab23ISparseOptFlowEstimatorE", "N2cv9videostab25PyrLkOptFlowEstimatorBaseE", "N2cv9videostab16IOutlierRejectorE", "N2cv9videostab19MotionEstimatorBaseE", "N2cv9videostab23MotionEstimatorRansacL2E", "N2cv9videostab17MotionEstimatorL1E", "N2cv9videostab24ImageMotionEstimatorBaseE", "N2cv9videostab20FromFileMotionReaderE", "N2cv9videostab18ToFileMotionWriterE", "N2cv9videostab28KeypointBasedMotionEstimatorE", "N2cv6detail12PtrOwnerImplINS_9videostab27SparsePyrLkOptFlowEstimatorENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab19NullOutlierRejectorENS_14DefaultDeleterIS3_EEEE", "void cv::videostab::completeFrameAccordingToFlow(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&, float, cv::Mat&, cv::Mat&)", "void cv::videostab::calcFlowMask(const cv::Mat&, const cv::Mat&, const cv::Mat&, float, const cv::Mat&, const cv::Mat&, cv::Mat&)", "Inpaint cv::videostab::FastMarchingMethod::run(const cv::Mat&, Inpaint) [with Inpaint = cv::videostab::ColorAverageInpaintBody]", "Inpaint cv::videostab::FastMarchingMethod::run(const cv::Mat&, Inpaint) [with Inpaint = cv::videostab::MotionInpaintBody]", "float cv::videostab::alignementError(const cv::Mat&, const cv::Mat&, const cv::Mat&, const cv::Mat&)", "cv::videostab::MotionInpainter::MotionInpainter()", "virtual void cv::videostab::ConsistentMosaicInpainter::inpaint(int, cv::Mat&, cv::Mat&)", "N2cv9videostab13InpainterBaseE", "N2cv9videostab18InpaintingPipelineE", "N2cv9videostab25ConsistentMosaicInpainterE", "N2cv9videostab15MotionInpainterE", "N2cv9videostab21ColorAverageInpainterE", "N2cv9videostab14ColorInpainterE", "N2cv9videostab4ILogE", "N2cv9videostab11LogToStdoutE", "float cv::videostab::estimateOptimalTrimRatio(const cv::Mat&, cv::Size)", "cv::Mat cv::videostab::ensureInclusionConstraint(const cv::Mat&, cv::Size, float)", "virtual void cv::videostab::LpMotionStabilizer::stabilize(int, const std::vector<cv::Mat>&, std::pair<int, int>, cv::Mat*)", "N2cv9videostab17IMotionStabilizerE", "N2cv9videostab27MotionStabilizationPipelineE", "N2cv9videostab16MotionFilterBaseE", "N2cv9videostab20GaussianMotionFilterE", "N2cv9videostab18LpMotionStabilizerE", "N2cv9videostab27SparsePyrLkOptFlowEstimatorE", "virtual void cv::videostab::TranslationBasedLocalOutlierRejector::process(cv::Size, cv::InputArray, cv::InputArray, cv::OutputArray)", "virtual void cv::videostab::NullOutlierRejector::process(cv::Size, cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv9videostab19NullOutlierRejectorE", "N2cv9videostab36TranslationBasedLocalOutlierRejectorE", "N2cv9videostab15NullFrameSourceE", "N2cv9videostab13NullInpainterE", "N2cv9videostab12NullDeblurerE", "N2cv9videostab20WobbleSuppressorBaseE", "N2cv9videostab14StabilizerBaseE", "N2cv9videostab17OnePassStabilizerE", "N2cv9videostab17TwoPassStabilizerE", "N2cv6detail12PtrOwnerImplINS_9videostab11LogToStdoutENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab15NullFrameSourceENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab23MotionEstimatorRansacL2ENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab28KeypointBasedMotionEstimatorENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab12NullDeblurerENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab13NullInpainterENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab20GaussianMotionFilterENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab20NullWobbleSuppressorENS_14DefaultDeleterIS3_EEEE", "virtual void cv::videostab::MoreAccurateMotionWobbleSuppressor::suppress(int, const cv::Mat&, cv::Mat&)", "N2cv9videostab20NullWobbleSuppressorE", "N2cv9videostab38MoreAccurateMotionWobbleSuppressorBaseE", "N2cv9videostab34MoreAccurateMotionWobbleSuppressorE", "N3tbb8internal9no_assignE", "N3tbb8internal7no_copyE", "N3rml16versioned_objectE", "N3rml6clientE", "N3tbb8internal3rml10tbb_clientE", "N3tbb8internal6marketE", "N3rml6serverE", "N3tbb8internal3rml10tbb_serverE", "N3tbb8internal3rml14private_serverE", "N3tbb8internal15scheduler_stateE", "N3rml3jobE", "N3tbb8internal9schedulerE", "N3tbb13tbb_exceptionE", "N3tbb8internal17generic_schedulerE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb10interface58internal9task_baseE", "N3tbb4taskE", "N3tbb18captured_exceptionE", "TBB: VERSION\t\t4.1\nTBB: INTERFACE VERSION\t6102\nTBB: BUILD_DATE\t\tJun 23 201519:20:22\nTBB: BUILD_HOST\t    Unknown\nTBB: BUILD_OS\t\tAndroid\nTBB: BUILD_KERNEL\tUnknown\nTBB: BUILD_GCC\t\tgcc version 4.4.3\nTBB: BUILD_GLIBC\tUnknown\nTBB: BUILD_LD\t\tUnknown\nTBB: BUILD_TARGET\tUnknown\nTBB: BUILD_COMMAND\tuse cv::getBuildInformation() for details\nTBB: TBB_USE_DEBUG\t0\nTBB: TBB_USE_ASSERT\t0\n", "N3tbb14bad_last_allocE", "N3tbb13improper_lockE", "N3tbb10user_abortE", "N3tbb12missing_waitE", "N3tbb27invalid_multiple_schedulingE", "````````````````````````````````````````````````", "0123456789ABCDEF", "0123456789ABCDEF", "_TIFFMergeFields", "for fields array", "MissingRequired", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFReadDirectoryCheckOrder", "TIFFFetchDirectory", "TIFFReadDirectory", "initYCbCrConversion", "BuildMapBitdepth16To8", "BuildMapUaToAa", "TIFFReadBufferSetup", "TIFFFillTile", "TIFFReadEncodedTile", "TIFFFillStrip", "TIFFReadEncodedStrip", "TIFFScanlineSize", "TIFFScanlineSize64", "TIFFStripSize", "TIFFVStripSize", "TIFFVStripSize64", "TIFFComputeStrip", "TIFFVTileSize64", "TIFFTileRowSize", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "TIFFWriteEncodedStrip", "TIFFWriteScanline", "TIFFOpen", "TIFFRewriteDirectory", "TIFFLinkDirectory", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagData", "TIFFWriteDirectorySec", "DumpModeDecode", "Fax4Decode", "Fax4Encode", "Fax3Decode2D", "Fax3SetupState", "Fax3Decode1D", "Fax3Encode", "InitCCITTFax3", "LogLuvDecode24", "LogLuvDecode32", "LogL16Decode", "LogLuvSetupDecode", "LogL16InitState", "LogLuvInitState", "LogLuvSetupEncode", "LogLuvVSetField", "TIFFInitSGILog", "LZWDecodeCompat", "LZWPreDecode", "LZWDecode", "LZWSetupEncode", "TIFFInitLZW", "NeXTDecode", "PackBitsDecode", "PixarLogDecode", "PixarLogSetupEncode", "PixarLogPostEncode", "PixarLogEncode", "PixarLogVSetField", "TIFFInitPixarLog", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecode", "ThunderDecodeRow", "ZIPSetupDecode", "ZIPDecode", "ZIPSetupEncode", "ZIPPostEncode", "ZIPEncode", "TIFFInitZIP", "N3Iex7MathExcE", "N3Iex8InputExcE", "N3Iex7TypeExcE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeISsEE", "N3Imf14TypedAttributeISt6vectorISsSaISsEEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Imf9InputFileE", "N3Imf9InputFile4DataE", "N3Imf7IStreamE", "N3Imf7OStreamE", "N3Imf15OpaqueAttributeE", "*N3Imf12_GLOBAL__N_114LineBufferTaskE", "N3Iex5IoExcE", "N3Imf10OutputFileE", "N3Imf10OutputFile4DataE", "N3Iex11OverflowExcE", "*N3Imf12_GLOBAL__N_114LineBufferTaskE", "N3Imf17ScanLineInputFileE", "N3Imf17ScanLineInputFile4DataE", "N3Imf11StdIFStreamE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Iex8ErrnoExcE", "*N3Imf12_GLOBAL__N_114TileBufferTaskE", "N3Imf14TiledInputFileE", "N3Imf14TiledInputFile4DataE", "N3Iex7BaseExcE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "N9IlmThread5MutexE", "*N9IlmThread12_GLOBAL__N_112WorkerThreadE", "N9IlmThread10ThreadPoolE", "N9IlmThread4TaskE", "N9IlmThread6ThreadE", "N9IlmThread9SemaphoreE", "N3Imf9AttributeE", "N3Imf13PizCompressorE", "N3Imf15Pxr24CompressorE", "N3Imf13RleCompressorE", "N3Imf13ZipCompressorE", "N3Imf13B44CompressorE", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDs", "PKDi", "PKDf", "PKDd", "PKDe", "PKDn", "St9exception", "St13bad_exception", "N10__cxxabiv115__forced_unwindE", "N10__cxxabiv119__foreign_exceptionE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "St9bad_alloc", "St9basic_iosIcSt11char_traitsIcEE", "St9basic_iosIwSt11char_traitsIwEE", "St11logic_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St13runtime_error", "St11range_error", "St15basic_streambufIcSt11char_traitsIcEE", "St15basic_streambufIwSt11char_traitsIwEE", "St8ios_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7collateIcE", "St8numpunctIcE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St17__timepunct_cacheIcE", "St11__timepunctIcE", "St10moneypunctIcLb1EE", "St10moneypunctIcLb0EE", "St8messagesIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb0EE", "St18__moneypunct_cacheIcLb1EE", "St16__numpunct_cacheIcE", "St7codecvtIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St13basic_istreamIwSt11char_traitsIwEE", "St15basic_stringbufIcSt11char_traitsIcESaIcEE", "St19basic_istringstreamIcSt11char_traitsIcESaIcEE", "St19basic_ostringstreamIcSt11char_traitsIcESaIcEE", "St18basic_stringstreamIcSt11char_traitsIcESaIcEE", "St5ctypeIwE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "NSt6locale5facetE", "St21__ctype_abstract_baseIwE", "St8numpunctIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St17__timepunct_cacheIwE", "St11__timepunctIwE", "St10moneypunctIwLb1EE", "St10moneypunctIwLb0EE", "St8messagesIwE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb0EE", "St18__moneypunct_cacheIwLb1EE", "St16__numpunct_cacheIwE", "St13basic_ostreamIwSt11char_traitsIwEE", "St13basic_filebufIcSt11char_traitsIcEE", "St14basic_ifstreamIcSt11char_traitsIcEE", "St14basic_ofstreamIcSt11char_traitsIcEE", "St9type_info", "St10bad_typeid", "N10__cxxabiv117__pbase_type_infoE", "St8bad_cast", "*N12_GLOBAL__N_122generic_error_categoryE", "*N12_GLOBAL__N_121system_error_categoryE", "St14error_category"], "stringidentifiers": ["vector::reserve", "std::exception", "cv::Exception", "GRAY", "BGRA", "true", "bool", "unsigned", "float", "double", "string", "unknown", "num_components", "eigenvalues", "eigenvectors", "vector::_M_fill_insert", "clEnqueueReadBufferRect", "clGetPlatformIDs", "clGetPlatformInfo", "clGetDeviceInfo", "clReleaseContext", "clGetDeviceIDs", "clFinish", "clReleaseCommandQueue", "clReleaseKernel", "clSetKernelArg", "clGetKernelWorkGroupInfo", "clReleaseProgram", "clCreateBuffer", "clReleaseMemObject", "clFlush", "clSetEventCallback", "clEnqueueUnmapMemObject", "clEnqueueReadBuffer", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "True", "TRUE", "False", "false", "FALSE", "OPENCV_OPENCL_RAISE_ERROR", "HOST_ALLOC", "Intel", "Iris", "cl_khr_image2d_from_buffer", "_sat", "noconvert", "COEFF", "clReleaseEvent", "clCreateKernel", "OPENCV_OPENCL_DEVICE", "disabled", "dgpu", "igpu", "accelerator", "clCreateContext", "clCreateProgramWithSource", "clBuildProgram", "clCreateProgramWithBinary", "clCreateCommandQueue", "clEnqueueNDRangeKernel", "clEnqueueTask", "clEnqueueMapBuffer", "clEnqueueWriteBuffer", "clEnqueueWriteBufferRect", "clEnqueueCopyBuffer", "clEnqueueCopyBufferRect", "clCreateImage", "clCreateImage2D", "clEnqueueCopyBufferToImage", "uchar", "short", "uchar3", "int2", "int4", "char", "char3", "ushort", "ushort3", "int8", "short3", "int3", "int16", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "uchar2", "uchar4", "uchar8", "uchar16", "char2", "char4", "char8", "char16", "ushort2", "ushort4", "ushort8", "ushort16", "short2", "short4", "short8", "short16", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "uint8", "uint16", "int32", "float32", "float64", "uint64", "name", "vectors", "values", "mean", "type_id", "sizes", "data", "rows", "cols", "planar", "interleaved", "width", "height", "origin", "layout", "header_dt", "rect", "color", "header_user_data", "oriented", "vertices", "edges", "flags", "vertex_count", "vertex_dt", "edge_count", "edge_dt", "level", "count", "recursive", "sequences", "curve", "closed", "hole", "untyped", "apos", "quot", "opencv_storage", "vector::_M_insert_aux", "OPENCV_TEMP_PATH", "status", "error", "Backtrace", "algorithm", "trees", "branching", "iterations", "centers_init", "cb_index", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "key_size", "multi_probe_level", "filename", "checks", "sorted", "FLANN_INDEX", "leaf_max_size", "reorder", "MXVNTMRMPNOPOSPURVTVVU", "PTRMRV", "NUSMSTRVPVOTOS", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MXOMOSPURVSVUUVSVM", "MXOVQVOROPPNRMSMUNVPVRTVVV", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "PUTMQV", "OVUMSSRUQVPVOUOT", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "LXPMNSNUOVRVTUUSWM", "MWQMWMNVTV", "MWNLVX", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "MWUQSPRPPQOSPURVSVUU", "MWOSUSTQRPPQOSPURVTV", "MWRPPQOSPURVTUUSTQRP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "OVRPQSQURVSVTU", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "KXMQNPOPPQPUQVSVTUUSVP", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "MWOSTSURUQSPRPPQOSPURVTV", "OTSMQSQURVSV", "NVTQSPQPPQPRQSRSSTSURVPVOU", "MWNPOPPQPROTOUPVRVTUURUP", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPQPOQOSPTRUSVSWRXQX", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PTRMRQ", "NVQMPNPPQQSQTPTNSMQM", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "NVRFRM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "NVRBRb", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "MWWRWQVOUNSMQMONNOMQMR", "MWMRMSNUOVQWSWUVVUWSWR", "LXLPNRQSSSVRXP", "RURUTTURTPRO", "RVRRUPVNVLUKTK", "NRRROPNNNLOKPK", "KYKRYR", "MWMWWM", "MWMMWW", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "LXLLLXXXXLLL", "KYRJKVYVRJ", "JZRIPOJOOSMYRUWYUSZOTORI", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "NVRVQWRXSWRV", "MWQKPLPNQOSOTNTLSKQK", "NVRQQRRSSRRQ", "JZWLMRWX", "JZMLWRMX", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "KYUBNRUb", "KYOBVROb", "MWRHSGRFQGQIRKSL", "MWQFRGSISKRLQKRJ", "MXVFTHSJSKTLUKTJ", "MXUHTGUFVGVHUJSL", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "type", "is_uniform", "have_ranges", "bins", "thresh", "GAUSSIAN", "IDENTITY", "SIGMOID_SYM", "activation_function", "activation_function_id", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "training_params", "train_method", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "term_criteria", "epsilon", "layer_sizes", "input_scale", "output_scale", "inv_output_scale", "weights", "vector::_M_range_check", "ntrees", "nodes", "RealAdaboost", "DiscreteAdaboost", "LogitBoost", "Unknown", "GentleAdaboost", "boosting_type", "weight_trimming_rate", "means", "probs", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "covs", "is_classifier", "default_k", "samples", "responses", "opencv_ml_knn", "opencv_ml_knn_kd", "alpha", "norm", "mini_batch_size", "learnt_thetas", "o_labels", "n_labels", "var_all", "var_idx", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "oob_error", "var_importance", "nactive_vars", "SVM::getDefaultGrid", "C_SVC", "NU_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "degree", "gamma", "coef0", "var_count", "class_count", "class_labels", "class_weights", "sv_total", "support_vectors", "decision_functions", "index", "svm_type", "svmType", "kernel", "sv_count", "optimize_linear", "not_in", "value", "norm_class_idx", "splits", "quality", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "var_type", "format", "cat_map", "cat_count", "vector::_M_range_insert", "cat_ofs", "missing_subst", "global_var_idx", "max_bits", "exclude_range", "max_iter", "threshold", "lambda", "random", "contrast_weight", "saturation_weight", "exposure_weight", "bias", "saturation", "scale", "intensity", "light_adapt", "color_adapt", "contrast", "sigma_color", "sigma_space", "history", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "detectShadows", "shadowValue", "shadowThreshold", "mog2_kernel", "getBackgroundImage2_kernel", "nsamples", "nKNN", "dist2Threshold", "lkSparse", "gaussianBlur", "polynomialExpansion", "updateFlow", "updateMatrices", "gaussianBlur5", "boxFilter5", "RGBE", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "rects", "tilted", "runHaarClassifier", "runLBPClassifierStumpSimple", "stageType", "BOOST", "featureType", "HAAR", "featureParams", "maxCatCount", "stages", "weakClassifiers", "leafValues", "internalNodes", "stageThreshold", "features", "size", "stage_threshold", "feature", "left_val", "left_node", "right_val", "right_node", "OBJECT_DETECTOR", "parent", "next", "winSize", "blockSize", "blockStride", "cellSize", "nbins", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "SVMDetector", "descriptor", "descriptor_channels", "descriptor_size", "octaves", "sublevels", "diffusivity", "thresholdStep", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "FAST_findKeypoints", "FAST_nonmaxSupression", "extended", "upright", "indexParams", "searchParams", "typename", "FlannBased", "BruteForce", "BruteForceMatch_Match", "BruteForceMatch_knnMatch", "BruteForceMatch_RadiusMatch", "ORB_HarrisResponses", "ORB_ICAngle", "ORB_computeDescriptor", "cvCheckChessboard", "prefilter_norm", "prefilter_xsobel", "minDisparity", "numDisparities", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "stereoBM", "mode", "affine_type", "distance", "rank", "dummies", "default", "flag", "nRads", "nAngs", "iters", "beWei", "scWei", "iaWei", "costF", "sigma", "regularization", "buildWarpPlaneMaps", "buildWarpSphericalMaps", "buildWarpCylindricalMaps", "scalable_malloc", "malloc", "ALLOCATOR", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "private", "shared", "pthread_join", "pthread_detach", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "TBB_VERSION", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "JPEGMEM", "RIFF", "WEBP", "VP8X", "ALPH", "VP8L", "undefined", "png_set_background", "png_set_gAMA", "IDAT", "text", "version", "stream", "memory", "_TIFFVGetField", "DotRange", "TIFFSetField", "_TIFFSetupFields", "TIFFFieldWithTag", "TIFFFieldWithName", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "ApertureValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CFAPattern", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "Sharpness", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "SubfileType", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "Model", "StripOffsets", "Orientation", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "MinSampleValue", "MaxSampleValue", "XResolution", "YResolution", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "ResolutionUnit", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "ColorMap", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "PerSample", "ReadDirEntryArray", "TIFFFetchNormalTag", "tiles", "strips", "Colormap", "gtStripSeparate", "gtTileSeparate", "Planarconfiguration", "TIFFNumberOfStrips", "TIFFTileRowSize", "TIFFNumberOfTiles", "tile", "strip", "scanline", "TIFFRegisterCODEC", "TIFFUnRegisterCODEC", "None", "PackBits", "ThunderScan", "NeXT", "JPEG", "Deflate", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "InitCCITTFax3", "TIFFInitCCITTFax3", "TIFFInitCCITTFax4", "Group4Options", "Group3Options", "FaxMode", "FaxFillFunc", "BadFaxLines", "CleanFaxData", "ConsecutiveBadFaxLines", "SGILogDataFmt", "SGILogEncode", "TIFFPredictorInit", "Predictor", "UNKNOWN", "maxlyrs", "maxpkts", "debug", "real", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "imgareatlx", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "rate", "ilyrrates", "_jp2overhead", "FTYP", "JP2H", "IHDR", "BPCC", "COLR", "PCLR", "CMAP", "CDEF", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "channels", "lineOrder", "compression", "preview", "keycode", "m33f", "m33d", "m44f", "m44d", "rational", "chromaticities", "whiteLuminance", "adoptedNeutral", "xDensity", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "framesPerSecond", "worldToCamera", "worldToNDC", "renderingTransform", "lookModTransform", "owner", "comments", "capDate", "wrapmodes", "multiView", "stringvector", "tiledesc", "timecode", "box2i", "box2f", "chlist", "std::bad_exception", "std::bad_alloc", "basic_ios::clear", "POSIX", "basic_string::erase", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::at", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_string::substr", "std::bad_typeid", "std::bad_cast", "AKST", "space", "print", "cntrl", "upper", "lower", "digit", "punct", "xdigit", "alnum", "graph", "system", "_GLOBAL_", "auto", "JArray", "_Accum", "_Fract", "operator", "this", "std::allocator", "allocator", "std::basic_string", "basic_string", "std::string", "std::istream", "basic_istream", "std::ostream", "basic_ostream", "std::iostream", "basic_iostream", "const_cast", "dynamic_cast", "reinterpret_cast", "static_cast", "throw", "boolean", "byte", "__float128", "long", "__int128", "void", "wchar_t", "decimal32", "decimal64", "decimal128", "half", "char16_t", "char32_t", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "f938bc7c686ae7bca004809df19ef032", "d7a6b479ac9abf39f50a2d86c0b50863", "c2741330ed8390675ed210edd54f5258", "e7220f9dc5b30fc5558622a452890287", "f8f028f1776dc5c98bf03411d3b72318", "ed0d3325149acdde26581a72052260a5", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "f464151682565a20de380a62e09ae458", "e48abb0036bd5e090ad06600b018eec9", "f082457348bfbcb2e2de3014f46093a8", "b3c29b8efeb2ed66a052794cb7d162cb", "ce49fba6c7a369504177acc108203a38", "cb2cfd26f04e14ae047e2f5eb28c8e11", "e99b92fca8604fe253f3c641802ce117", "d3e542270fa2ea1fc3744043dad50cb4", "b7099fcbc60bd5528dacc491eadd88c1", "a9d306a49b405703820fae23312ebd28", "b6e3850899862b7f0ab67cb32f1d52e9", "bc57f4f75fb81bae73bfe73cc4ca15e4", "a7c2cfaeda19907b637211b1cc91d253", "f5e6f463f21a7ed77bd4d2c753478305", "__TBB_call_with_my_server_info", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "N2cv9AlgorithmE", "N2cv6detail8PtrOwnerE", "N2cv16MinProblemSolver8FunctionE", "N2cv16MinProblemSolverE", "N2cv14ConjGradSolverE", "N2cv18ConjGradSolverImplE", "N2cv6detail12PtrOwnerImplINS_18ConjGradSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv15LUTParallelBodyE", "N2cv6detail12PtrOwnerImplINS_16ParallelLoopBodyENS_14DefaultDeleterIS2_EEEE", "N2cv14DownhillSolverE", "N2cv18DownhillSolverImplE", "N2cv6detail12PtrOwnerImplINS_18DownhillSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerE", "N2cv5MatOpE", "N2cv14MatOp_IdentityE", "N2cv11MatOp_AddExE", "N2cv9MatOp_BinE", "N2cv9MatOp_CmpE", "N2cv10MatOp_GEMME", "N2cv12MatOp_InvertE", "N2cv7MatOp_TE", "N2cv11MatOp_SolveE", "N2cv17MatOp_InitializerE", "N2cv20BufferPoolControllerE", "N2cv12MatAllocatorE", "N2cv25DummyBufferPoolControllerE", "N2cv15StdMatAllocatorE", "N2cv3ocl16OpenCLBufferPoolIP7_cl_memEE", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl15OpenCLAllocatorE", "N2cv9FormattedE", "N2cv9FormatterE", "N2cv13FormattedImplE", "N2cv13FormatterBaseE", "N2cv16DefaultFormatterE", "N2cv15MatlabFormatterE", "N2cv15PythonFormatterE", "N2cv14NumpyFormatterE", "N2cv12CSVFormatterE", "N2cv10CFormatterE", "N2cv6detail12PtrOwnerImplINS_13FormattedImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16DefaultFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15MatlabFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12CSVFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15PythonFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_14NumpyFormatterENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10CFormatterENS_14DefaultDeleterIS2_EEEE", "N3tbb10interface68internal11signal_taskE", "N2cv16ParallelLoopBodyE", "N3tbb10interface68internal9flag_taskE", "N2cv7TLSDataINS_13ThreadManager13work_thread_tEEE", "OPENCV_FOR_THREADS_NUM", "ucwsifdr", "N2cv11FileStorageE", "N2cv6detail12PtrOwnerImplI11CvSparseMatNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvFileStorageNS_14DefaultDeleterIS2_EEEE", "N2cv16BatchDistInvokerE", "N2cv9ExceptionE", "N2cv16TLSDataContainerE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "N2cv6StringE", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl14big_any_policyIN2cv6StringEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl9empty_anyE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl16small_any_policyIjEE", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann12KNNResultSetIfEE", "N2cv5flann5IndexE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann7NNIndexINS_10HammingLUTEEE", "N7cvflann5IndexINS_10HammingLUTEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann9ResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann9ResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_10HammingLUTEEE", "N7cvflann27HierarchicalClusteringIndexINS_10HammingLUTEEE", "N7cvflann8LshIndexINS_10HammingLUTEEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "N3tbb10strict_ppl8internal31concurrent_queue_page_allocatorE", "N3tbb10empty_taskE", "N3tbb10strict_ppl8internal24concurrent_queue_base_v3IPhEE", "N3tbb10strict_ppl16concurrent_queueIPhNS_23cache_aligned_allocatorIS2_EEEE", "N3tbb8internal13function_taskIN2cv8tbbCannyEEE", "N2cv5CLAHEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "N2cv8colormap8ColorMapE", "N2cv8colormap6AutumnE", "N2cv8colormap4BoneE", "N2cv8colormap3JetE", "N2cv8colormap6WinterE", "N2cv8colormap7RainbowE", "N2cv8colormap5OceanE", "N2cv8colormap6SummerE", "N2cv8colormap6SpringE", "N2cv8colormap4CoolE", "N2cv8colormap3HSVE", "N2cv8colormap4PinkE", "N2cv8colormap3HotE", "N2cv8colormap6ParulaE", "N2cv6detail12PtrOwnerImplI12CvMemStorageNS_14DefaultDeleterIS2_EEEE", "N2cv17Bayer2RGB_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv6detail12PtrOwnerImplINS_12FilterEngineENS_14DefaultDeleterIS2_EEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhiNS_12RowVec_8u32sEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIhdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItfNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterItdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsfNS_13RowVec_16s32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIsdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIffNS_10RowVec_32fEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIfdNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_9RowFilterIddNS_8RowNoVecEEENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIftEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DItNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv16GeneralizedHoughE", "N2cv23GeneralizedHoughBallardE", "N2cv20GeneralizedHoughGuilE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist2D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist3D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv20CalcHist1D_8uInvokerEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerItEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist1D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist2D_InvokerIfEEKNS_16auto_partitionerEEE", "N3tbb10interface68internal9start_forINS_13blocked_rangeIiEEN2cv18calcHist3D_InvokerIfEEKNS_16auto_partitionerEEE", "N2cv6detail12PtrOwnerImplI5CvMatNS_14DefaultDeleterIS2_EEEE", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_22VResizeLinearVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_22VResizeLinearVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_21VResizeCubicVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_21VResizeCubicVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_25VResizeLanczos4Vec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_22VResizeLanczos4Vec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_25ResizeAreaFastVec_SIMD_8uEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_26ResizeAreaFastVec_SIMD_16uEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_26ResizeAreaFastVec_SIMD_16sEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_26ResizeAreaFastVec_SIMD_32fEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N2cv19LineSegmentDetectorE", "N2cv23LineSegmentDetectorImplE", "N2cv6detail12PtrOwnerImplINS_23LineSegmentDetectorImplENS_14DefaultDeleterIS2_EEEE", "N2cv16MorphologyRunnerE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEE", "N2cv11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEENS_14DefaultDeleterIS8_EEEE", "N2cv6detail12PtrOwnerImplINS_11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEENS_14DefaultDeleterIS6_EEEE", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv9SqrRowSumIhiEE", "N2cv9SqrRowSumIhdEE", "N2cv9SqrRowSumItdEE", "N2cv9SqrRowSumIsdEE", "N2cv9SqrRowSumIfdEE", "N2cv9SqrRowSumIddEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_6RowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIihEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdhEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIitEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdtEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIisEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdsEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIiiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIifEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIdfEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIidEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9ColumnSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhiEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIhdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumItdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIsdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIfdEENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9SqrRowSumIddEENS_14DefaultDeleterIS3_EEEE", "N2cv15ThresholdRunnerE", "N2cv2ml7ANN_MLPE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "N2cv2ml11ANN_MLPImplE", "N2cv6detail12PtrOwnerImplINS_2ml11ANN_MLPImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml6DTreesE", "N2cv2ml5BoostE", "N2cv2ml18DTreesImplForBoostE", "N2cv2ml9BoostImplE", "N2cv6detail12PtrOwnerImplINS_2ml9BoostImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml9TrainDataE", "N2cv2ml13TrainDataImplE", "N2cv6detail12PtrOwnerImplINS_2ml13TrainDataImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml6EMImplE", "N2cv6detail12PtrOwnerImplINS_2ml6EMImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml9StatModelE", "N2cv2ml8KNearestE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "N2cv2ml14BruteForceImplE", "N2cv2ml10KDTreeImplE", "N2cv2ml12KNearestImplE", "N2cv6detail12PtrOwnerImplINS_2ml14BruteForceImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10KDTreeImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml12KNearestImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml18LogisticRegressionE", "N2cv2ml22LogisticRegressionImplE", "N2cv6detail12PtrOwnerImplINS_2ml22LogisticRegressionImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml21NormalBayesClassifierE", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv6detail12PtrOwnerImplINS_2ml25NormalBayesClassifierImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "N2cv2ml10RTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10RTreesImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml3SVM6KernelE", "N2cv2ml3SVME", "N2cv2ml13SVMKernelImplE", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImplE", "N2cv6detail12PtrOwnerImplINS_2ml13SVMKernelImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml7SVMImplENS_14DefaultDeleterIS3_EEEE", "N2cv2ml10DTreesImplE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImpl8WorkDataENS_14DefaultDeleterIS4_EEEE", "N2cv6detail12PtrOwnerImplINS_2ml10DTreesImplENS_14DefaultDeleterIS3_EEEE", "N2cv14AlignExposuresE", "N2cv8AlignMTBE", "N2cv12AlignMTBImplE", "N2cv6detail12PtrOwnerImplINS_12AlignMTBImplENS_14DefaultDeleterIS2_EEEE", "N2cv12CalibrateCRFE", "N2cv16CalibrateDebevecE", "N2cv18CalibrateRobertsonE", "N2cv20CalibrateDebevecImplE", "N2cv22CalibrateRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_20CalibrateDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_22CalibrateRobertsonImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI14_IplConvKernelNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI20CvPriorityQueueFloatNS_14DefaultDeleterIS2_EEEE", "N2cv14MergeExposuresE", "N2cv12MergeDebevecE", "N2cv12MergeMertensE", "N2cv14MergeRobertsonE", "N2cv16MergeDebevecImplE", "N2cv16MergeMertensImplE", "N2cv18MergeRobertsonImplE", "N2cv6detail12PtrOwnerImplINS_16MergeDebevecImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16MergeMertensImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18MergeRobertsonImplENS_14DefaultDeleterIS2_EEEE", "N2cv7TonemapE", "N2cv12TonemapDragoE", "N2cv13TonemapDurandE", "N2cv15TonemapReinhardE", "N2cv14TonemapMantiukE", "N2cv11TonemapImplE", "N2cv16TonemapDragoImplE", "N2cv17TonemapDurandImplE", "N2cv19TonemapReinhardImplE", "N2cv18TonemapMantiukImplE", "N2cv6detail12PtrOwnerImplINS_11TonemapImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16TonemapDragoImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17TonemapDurandImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19TonemapReinhardImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_18TonemapMantiukImplENS_14DefaultDeleterIS2_EEEE", "N2cv20BackgroundSubtractorE", "N2cv24BackgroundSubtractorMOG2E", "N2cv28BackgroundSubtractorMOG2ImplE", "N2cv11MOG2InvokerE", "N2cv6detail12PtrOwnerImplINS_28BackgroundSubtractorMOG2ImplENS_14DefaultDeleterIS2_EEEE", "N2cv23BackgroundSubtractorKNNE", "N2cv27BackgroundSubtractorKNNImplE", "N2cv6detail12PtrOwnerImplINS_27BackgroundSubtractorKNNImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail16LKTrackerInvokerE", "N2cv16DenseOpticalFlowE", "N2cv19DualTVL1OpticalFlowE", "N2cv6detail12PtrOwnerImplINS_10BmpDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10BmpEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10HdrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11JpegEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11WebPEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_16SunRasterEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PxMEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_11TiffEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10PngEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_13Jpeg2KEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrDecoderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_10ExrEncoderENS_14DefaultDeleterIS2_EEEE", "N2cv16BaseImageDecoderE", "N2cv16BaseImageEncoderE", "N2cv10BmpEncoderE", "N2cv10ExrDecoderE", "N2cv10ExrEncoderE", "N2cv10HdrDecoderE", "N2cv10HdrEncoderE", "N2cv11JpegDecoderE", "N2cv11JpegEncoderE", "N2cv13Jpeg2KDecoderE", "N2cv13Jpeg2KEncoderE", "N2cv10PngDecoderE", "N2cv10PngEncoderE", "N2cv10PxMDecoderE", "N2cv10PxMEncoderE", "N2cv16SunRasterDecoderE", "N2cv16SunRasterEncoderE", "N2cv11TiffDecoderE", "N2cv11TiffEncoderE", "N2cv11WebPDecoderE", "N2cv11WebPEncoderE", "N2cv11RBaseStreamE", "N2cv12RLByteStreamE", "N2cv12RMByteStreamE", "N2cv11WBaseStreamE", "N2cv12WLByteStreamE", "N2cv12WMByteStreamE", "N2cv12VideoCaptureE", "N2cv11VideoWriterE", "N2cv6detail12PtrOwnerImplI9CvCaptureNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplI13CvVideoWriterNS_14DefaultDeleterIS2_EEEE", "N2cv5mjpeg16MotionJpegWriterE", "N2cv6detail12PtrOwnerImplINS_5mjpeg16MotionJpegWriterENS_14DefaultDeleterIS3_EEEE", "N2cv17MotionJpegCaptureE", "N2cv6detail12PtrOwnerImplINS_17MotionJpegCaptureENS_14DefaultDeleterIS2_EEEE", "N2cv21BaseCascadeClassifierE", "N2cv16FeatureEvaluatorE", "N2cv21CascadeClassifierImplE", "N2cv13HaarEvaluatorE", "N2cv12LBPEvaluatorE", "N2cv24CascadeClassifierInvokerE", "N2cv6detail12PtrOwnerImplINS_13HaarEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_12LBPEvaluatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_16FeatureEvaluator9ScaleDataESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_13HaarEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator7FeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplISt6vectorINS_12LBPEvaluator10OptFeatureESaIS4_EENS_14DefaultDeleterIS6_EEEE", "N2cv6detail12PtrOwnerImplI23CvHaarClassifierCascadeNS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_21CascadeClassifierImplENS_14DefaultDeleterIS2_EEEE", "N2cv21DetectionBasedTrackerE", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "N2cv6detail12PtrOwnerImplINS_21DetectionBasedTracker21SeparateDetectionWorkENS_14DefaultDeleterIS3_EEEE", "N2cv36HaarDetectObjects_ScaleImage_InvokerE", "N2cv38HaarDetectObjects_ScaleCascade_InvokerE", "readALTModel", "N2cv13HOGDescriptorE", "N2cv8HOGCacheE", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "N2cv20AgastFeatureDetectorE", "N2cv25AgastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_25AgastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv5AKAZEE", "N2cv10AKAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_10AKAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv10BOWTrainerE", "N2cv16BOWKMeansTrainerE", "N2cv25BOWImgDescriptorExtractorE", "N2cv18SimpleBlobDetectorE", "N2cv22SimpleBlobDetectorImplE", "N2cv6detail12PtrOwnerImplINS_22SimpleBlobDetectorImplENS_14DefaultDeleterIS2_EEEE", "N2cv5BRISKE", "N2cv10BRISK_ImplE", "N2cv6detail12PtrOwnerImplINS_10BRISK_ImplENS_14DefaultDeleterIS2_EEEE", "N3tbb10interface68internal13finish_reduceI20IntersectAreaCounterEE", "N3tbb10interface68internal12start_reduceINS_13blocked_rangeIiEE20IntersectAreaCounterKNS_16auto_partitionerEEE", "N2cv19FastFeatureDetectorE", "N2cv24FastFeatureDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_24FastFeatureDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv9Feature2DE", "N2cv12GFTTDetectorE", "N2cv17GFTTDetector_ImplE", "N2cv6detail12PtrOwnerImplINS_17GFTTDetector_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv33MultiscaleDerivativesAKAZEInvokerE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "N2cv23Nld_Step_Scalar_InvokerE", "N2cv4KAZEE", "N2cv9KAZE_ImplE", "N2cv6detail12PtrOwnerImplINS_9KAZE_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv17DescriptorMatcher20DescriptorCollectionE", "N2cv17DescriptorMatcherE", "N2cv9BFMatcherE", "N2cv17FlannBasedMatcherE", "N2cv6detail12PtrOwnerImplINS_5flann17KDTreeIndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann12SearchParamsENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9BFMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_17FlannBasedMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann5IndexENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_5flann11IndexParamsENS_14DefaultDeleterIS3_EEEE", "N2cv9MSER_ImplE", "N2cv6detail12PtrOwnerImplINS_9MSER_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv3ORBE", "N2cv8ORB_ImplE", "N2cv6detail12PtrOwnerImplINS_8ORB_ImplENS_14DefaultDeleterIS2_EEEE", "N2cv19PointSetRegistrator8CallbackE", "N2cv19EMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_19EMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv8LMSolver8CallbackE", "N2cv27HomographyEstimatorCallbackE", "N2cv24HomographyRefineCallbackE", "N2cv19FMEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_27HomographyEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24HomographyRefineCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_19FMEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv23HomographyDecomposition16HomographyDecompE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "N2cv8LMSolverE", "N2cv12LMSolverImplE", "N2cv6detail12PtrOwnerImplINS_12LMSolverImplENS_14DefaultDeleterIS2_EEEE", "N2cv19PointSetRegistratorE", "N2cv25RANSACPointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "N2cv25Affine3DEstimatorCallbackE", "N2cv6detail12PtrOwnerImplINS_25RANSACPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_24LMeDSPointSetRegistratorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_25Affine3DEstimatorCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv8RHO_HESTE", "N2cv13RHO_HEST_REFCE", "N2cv6detail12PtrOwnerImplINS_13RHO_HEST_REFCENS_14DefaultDeleterIS2_EEEE", "N2cv17PnPRansacCallbackE", "N2cv6detail12PtrOwnerImplINS_17PnPRansacCallbackENS_14DefaultDeleterIS2_EEEE", "N2cv13StereoMatcherE", "N2cv8StereoBME", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "N2cv12StereoBMImplE", "N2cv6detail12PtrOwnerImplINS_12StereoBMImplENS_14DefaultDeleterIS2_EEEE", "N2cv10StereoSGBME", "N2cv14StereoSGBMImplE", "N2cv6detail12PtrOwnerImplINS_14StereoSGBMImplENS_14DefaultDeleterIS2_EEEE", "N2cv16ShapeTransformerE", "N2cv17AffineTransformerE", "N2cv21AffineTransformerImplE", "N2cv6detail12PtrOwnerImplINS_21AffineTransformerImplENS_14DefaultDeleterIS2_EEEE", "N2cv22ShapeDistanceExtractorE", "N2cv26HausdorffDistanceExtractorE", "N2cv30HausdorffDistanceExtractorImplE", "N2cv6detail12PtrOwnerImplINS_30HausdorffDistanceExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv22HistogramCostExtractorE", "N2cv26NormHistogramCostExtractorE", "N2cv25EMDHistogramCostExtractorE", "N2cv25ChiHistogramCostExtractorE", "N2cv27EMDL1HistogramCostExtractorE", "N2cv30NormHistogramCostExtractorImplE", "N2cv29EMDHistogramCostExtractorImplE", "N2cv29ChiHistogramCostExtractorImplE", "N2cv31EMDL1HistogramCostExtractorImplE", "N2cv6detail12PtrOwnerImplINS_30NormHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29EMDHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_29ChiHistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_31EMDL1HistogramCostExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv31ThinPlateSplineShapeTransformerE", "N2cv29ShapeContextDistanceExtractorE", "N2cv33ShapeContextDistanceExtractorImplE", "N2cv6detail12PtrOwnerImplINS_33ShapeContextDistanceExtractorImplENS_14DefaultDeleterIS2_EEEE", "N2cv35ThinPlateSplineShapeTransformerImplE", "N2cv6detail12PtrOwnerImplINS_35ThinPlateSplineShapeTransformerImplENS_14DefaultDeleterIS2_EEEE", "N2cv8superres11FrameSourceE", "N2cv8superres19DenseOpticalFlowExtE", "N2cv8superres20FarnebackOpticalFlowE", "N2cv8superres19DualTVL1OpticalFlowE", "N2cv8superres15SuperResolutionE", "N2cv6detail7BlenderE", "N2cv6detail14FeatherBlenderE", "N2cv6detail16MultiBandBlenderE", "N2cv6detail12PtrOwnerImplINS0_7BlenderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_14FeatherBlenderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_16MultiBandBlenderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail19ExposureCompensatorE", "N2cv6detail21NoExposureCompensatorE", "N2cv6detail15GainCompensatorE", "N2cv6detail21BlocksGainCompensatorE", "N2cv6detail12PtrOwnerImplINS0_21NoExposureCompensatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_15GainCompensatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_21BlocksGainCompensatorENS_14DefaultDeleterIS2_EEEE", "N2cv6detail14FeaturesFinderE", "N2cv6detail18SurfFeaturesFinderE", "N2cv6detail17OrbFeaturesFinderE", "N2cv6detail15FeaturesMatcherE", "N2cv6detail21BestOf2NearestMatcherE", "N2cv6detail26BestOf2NearestRangeMatcherE", "N2cv6detail9EstimatorE", "N2cv6detail24HomographyBasedEstimatorE", "N2cv6detail18BundleAdjusterBaseE", "N2cv6detail20BundleAdjusterReprojE", "N2cv6detail17BundleAdjusterRayE", "N2cv6detail22GraphCutSeamFinderBaseE", "N2cv6detail10SeamFinderE", "N2cv6detail18PairwiseSeamFinderE", "N2cv6detail17VoronoiSeamFinderE", "N2cv6detail12DpSeamFinderE", "N2cv6detail18GraphCutSeamFinderE", "N2cv6detail18GraphCutSeamFinder4ImplE", "N2cv6detail12PtrOwnerImplINS0_18GraphCutSeamFinder4ImplENS_14DefaultDeleterIS3_EEEE", "N2cv6detail14RotationWarperE", "N2cv6detail18RotationWarperBaseINS0_18SphericalProjectorEEE", "N2cv13WarperCreatorE", "N2cv15SphericalWarperE", "N2cv6detail12PtrOwnerImplINS0_15SphericalWarperENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_21BestOf2NearestMatcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_17BundleAdjusterRayENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_17OrbFeaturesFinderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_15SphericalWarperENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_18GraphCutSeamFinderENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS_8StitcherENS_14DefaultDeleterIS2_EEEE", "N2cv6detail10TimelapserE", "N2cv6detail14TimelapserCropE", "N2cv6detail12PtrOwnerImplINS0_10TimelapserENS_14DefaultDeleterIS2_EEEE", "N2cv6detail12PtrOwnerImplINS0_14TimelapserCropENS_14DefaultDeleterIS2_EEEE", "N2cv6detail18RotationWarperBaseINS0_14PlaneProjectorEEE", "N2cv6detail11PlaneWarperE", "N2cv6detail15SphericalWarperE", "N2cv6detail18RotationWarperBaseINS0_20CylindricalProjectorEEE", "N2cv6detail17CylindricalWarperE", "N2cv6detail18RotationWarperBaseINS0_26SphericalPortraitProjectorEEE", "N2cv6detail23SphericalPortraitWarperE", "N2cv9videostab12DeblurerBaseE", "N2cv9videostab17WeightingDeblurerE", "N2cv9videostab12IFrameSourceE", "N2cv9videostab15VideoFileSourceE", "N2cv9videostab23ISparseOptFlowEstimatorE", "N2cv9videostab25PyrLkOptFlowEstimatorBaseE", "N2cv9videostab16IOutlierRejectorE", "N2cv9videostab19MotionEstimatorBaseE", "N2cv9videostab23MotionEstimatorRansacL2E", "N2cv9videostab17MotionEstimatorL1E", "N2cv9videostab24ImageMotionEstimatorBaseE", "N2cv9videostab20FromFileMotionReaderE", "N2cv9videostab18ToFileMotionWriterE", "N2cv9videostab28KeypointBasedMotionEstimatorE", "N2cv6detail12PtrOwnerImplINS_9videostab27SparsePyrLkOptFlowEstimatorENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab19NullOutlierRejectorENS_14DefaultDeleterIS3_EEEE", "N2cv9videostab13InpainterBaseE", "N2cv9videostab18InpaintingPipelineE", "N2cv9videostab25ConsistentMosaicInpainterE", "N2cv9videostab15MotionInpainterE", "N2cv9videostab21ColorAverageInpainterE", "N2cv9videostab14ColorInpainterE", "N2cv9videostab4ILogE", "N2cv9videostab11LogToStdoutE", "N2cv9videostab17IMotionStabilizerE", "N2cv9videostab27MotionStabilizationPipelineE", "N2cv9videostab16MotionFilterBaseE", "N2cv9videostab20GaussianMotionFilterE", "N2cv9videostab18LpMotionStabilizerE", "N2cv9videostab27SparsePyrLkOptFlowEstimatorE", "N2cv9videostab19NullOutlierRejectorE", "N2cv9videostab36TranslationBasedLocalOutlierRejectorE", "N2cv9videostab15NullFrameSourceE", "N2cv9videostab13NullInpainterE", "N2cv9videostab12NullDeblurerE", "N2cv9videostab20WobbleSuppressorBaseE", "N2cv9videostab14StabilizerBaseE", "N2cv9videostab17OnePassStabilizerE", "N2cv9videostab17TwoPassStabilizerE", "N2cv6detail12PtrOwnerImplINS_9videostab11LogToStdoutENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab15NullFrameSourceENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab23MotionEstimatorRansacL2ENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab28KeypointBasedMotionEstimatorENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab12NullDeblurerENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab13NullInpainterENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab20GaussianMotionFilterENS_14DefaultDeleterIS3_EEEE", "N2cv6detail12PtrOwnerImplINS_9videostab20NullWobbleSuppressorENS_14DefaultDeleterIS3_EEEE", "N2cv9videostab20NullWobbleSuppressorE", "N2cv9videostab38MoreAccurateMotionWobbleSuppressorBaseE", "N2cv9videostab34MoreAccurateMotionWobbleSuppressorE", "N3tbb8internal9no_assignE", "N3tbb8internal7no_copyE", "N3rml16versioned_objectE", "N3rml6clientE", "N3tbb8internal3rml10tbb_clientE", "N3tbb8internal6marketE", "N3rml6serverE", "N3tbb8internal3rml10tbb_serverE", "N3tbb8internal3rml14private_serverE", "N3tbb8internal15scheduler_stateE", "N3rml3jobE", "N3tbb8internal9schedulerE", "N3tbb13tbb_exceptionE", "N3tbb8internal17generic_schedulerE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb10interface58internal9task_baseE", "N3tbb4taskE", "N3tbb18captured_exceptionE", "N3tbb14bad_last_allocE", "N3tbb13improper_lockE", "N3tbb10user_abortE", "N3tbb12missing_waitE", "N3tbb27invalid_multiple_schedulingE", "_TIFFMergeFields", "MissingRequired", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFReadDirectoryCheckOrder", "TIFFFetchDirectory", "TIFFReadDirectory", "initYCbCrConversion", "BuildMapBitdepth16To8", "BuildMapUaToAa", "TIFFReadBufferSetup", "TIFFFillTile", "TIFFReadEncodedTile", "TIFFFillStrip", "TIFFReadEncodedStrip", "TIFFScanlineSize", "TIFFScanlineSize64", "TIFFStripSize", "TIFFVStripSize", "TIFFVStripSize64", "TIFFComputeStrip", "TIFFVTileSize64", "TIFFTileRowSize", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "TIFFWriteEncodedStrip", "TIFFWriteScanline", "TIFFOpen", "TIFFRewriteDirectory", "TIFFLinkDirectory", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagData", "TIFFWriteDirectorySec", "DumpModeDecode", "Fax4Decode", "Fax4Encode", "Fax3Decode2D", "Fax3SetupState", "Fax3Decode1D", "Fax3Encode", "InitCCITTFax3", "LogLuvDecode24", "LogLuvDecode32", "LogL16Decode", "LogLuvSetupDecode", "LogL16InitState", "LogLuvInitState", "LogLuvSetupEncode", "LogLuvVSetField", "TIFFInitSGILog", "LZWDecodeCompat", "LZWPreDecode", "LZWDecode", "LZWSetupEncode", "TIFFInitLZW", "NeXTDecode", "PackBitsDecode", "PixarLogDecode", "PixarLogSetupEncode", "PixarLogPostEncode", "PixarLogEncode", "PixarLogVSetField", "TIFFInitPixarLog", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecode", "ThunderDecodeRow", "ZIPSetupDecode", "ZIPDecode", "ZIPSetupEncode", "ZIPPostEncode", "ZIPEncode", "TIFFInitZIP", "N3Iex7MathExcE", "N3Iex8InputExcE", "N3Iex7TypeExcE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeISsEE", "N3Imf14TypedAttributeISt6vectorISsSaISsEEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Imf9InputFileE", "N3Imf9InputFile4DataE", "N3Imf7IStreamE", "N3Imf7OStreamE", "N3Imf15OpaqueAttributeE", "N3Iex5IoExcE", "N3Imf10OutputFileE", "N3Imf10OutputFile4DataE", "N3Iex11OverflowExcE", "N3Imf17ScanLineInputFileE", "N3Imf17ScanLineInputFile4DataE", "N3Imf11StdIFStreamE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Iex8ErrnoExcE", "N3Imf14TiledInputFileE", "N3Imf14TiledInputFile4DataE", "N3Iex7BaseExcE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "N9IlmThread5MutexE", "N9IlmThread10ThreadPoolE", "N9IlmThread4TaskE", "N9IlmThread6ThreadE", "N9IlmThread9SemaphoreE", "N3Imf9AttributeE", "N3Imf13PizCompressorE", "N3Imf15Pxr24CompressorE", "N3Imf13RleCompressorE", "N3Imf13ZipCompressorE", "N3Imf13B44CompressorE", "N10__cxxabiv121__vmi_class_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDs", "PKDi", "PKDf", "PKDd", "PKDe", "PKDn", "St9exception", "St13bad_exception", "N10__cxxabiv115__forced_unwindE", "N10__cxxabiv119__foreign_exceptionE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "St9bad_alloc", "St9basic_iosIcSt11char_traitsIcEE", "St9basic_iosIwSt11char_traitsIwEE", "St11logic_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St13runtime_error", "St11range_error", "St15basic_streambufIcSt11char_traitsIcEE", "St15basic_streambufIwSt11char_traitsIwEE", "St8ios_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7collateIcE", "St8numpunctIcE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St17__timepunct_cacheIcE", "St11__timepunctIcE", "St10moneypunctIcLb1EE", "St10moneypunctIcLb0EE", "St8messagesIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb0EE", "St18__moneypunct_cacheIcLb1EE", "St16__numpunct_cacheIcE", "St7codecvtIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St13basic_istreamIwSt11char_traitsIwEE", "St15basic_stringbufIcSt11char_traitsIcESaIcEE", "St19basic_istringstreamIcSt11char_traitsIcESaIcEE", "St19basic_ostringstreamIcSt11char_traitsIcESaIcEE", "St18basic_stringstreamIcSt11char_traitsIcESaIcEE", "St5ctypeIwE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "NSt6locale5facetE", "St21__ctype_abstract_baseIwE", "St8numpunctIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St17__timepunct_cacheIwE", "St11__timepunctIwE", "St10moneypunctIwLb1EE", "St10moneypunctIwLb0EE", "St8messagesIwE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb0EE", "St18__moneypunct_cacheIwLb1EE", "St16__numpunct_cacheIwE", "St13basic_ostreamIwSt11char_traitsIwEE", "St13basic_filebufIcSt11char_traitsIcEE", "St14basic_ifstreamIcSt11char_traitsIcEE", "St14basic_ofstreamIcSt11char_traitsIcEE", "St9type_info", "St10bad_typeid", "N10__cxxabiv117__pbase_type_infoE", "St8bad_cast", "St14error_category"], "debugstrings": ["<?xml version=\"1.0\"?>\n", "version?", "version doesnot match", "TBB_VERSION", "zlib version error", ") version error", "version", "OptoelectricConversionFactor", "ExifVersion", "FlashpixVersion", "DNGVersion", "DNGBackwardVersion", "Creator: JasPer Version %s", "Cannot read version ", "<?xml version=\"1.0\" encoding=\"%s\"?>\n", "Unsupported YAML version (it must be 1.x)", "Unknown/unsupported color conversion code", "JPEG2000 LOADER ERROR: colorspace conversion failed\n", "Wrong JPEG library version: library is %d, caller expects %d", "Unsupported color conversion request", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", " libpng version 1.5.12 - July 11, 2012\n\n", "ASCII conversion buffer too small", "PNG file corrupted by ASCII conversion", "No space for YCbCr->RGB conversion state", "No space for photometric conversion table", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "Not a TIFF file, bad version number %d (0x%x)", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", "basic_filebuf::_M_convert_to_external conversion error", "N3rml16versioned_objectE", "initYCbCrConversion", "GCC: (GNU) 4.8"], "localsymbols": [""], "dependencies": ["libdl.so", "libjnigraphics.so", "libm.so", "liblog.so", "libc.so", "libz.so"], "elfname": "libopencv_java3.so"}