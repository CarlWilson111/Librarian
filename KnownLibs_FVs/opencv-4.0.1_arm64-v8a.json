{"globalvars": ["_ZTVNSt6__ndk115__codecvt_utf16IDsLb1EEE", "_ZTSN3tbb12missing_waitE", "_ZTSN10__cxxabiv120__si_class_type_infoE", "_ZTVN2cv20AgastFeatureDetectorE", "_ZTVSt13runtime_error", "_ZTIN2cv20AgastFeatureDetectorE", "_ZTId", "_ZTIN2cv21DetectionBasedTrackerE", "_ZTCN2cv22SimpleBlobDetectorImplE0_NS_18SimpleBlobDetectorE", "_ZTSNSt6__ndk115numpunct_bynameIwEE", "_ZTIPKs", "_ZTSN2cv12VideoCaptureE", "_ZTINSt6__ndk116__narrow_to_utf8ILm32EEE", "_ZTSN2cv2ml9StatModelE", "_ZTSl", "_ZTVN2cv25BOWImgDescriptorExtractorE", "_ZTCN2cv18SimpleBlobDetectorE0_NS_9Feature2DE", "_ZTSPKj", "_ZTIN2cv25BOWImgDescriptorExtractorE", "_ZTSSt12length_error", "_ZNSt6__ndk18ios_base5rightE", "_ZTINSt6__ndk115__codecvt_utf16IDiLb0EEE", "_ZNSt6__ndk119__start_std_streamsE", "_ZTSNSt6__ndk116__narrow_to_utf8ILm16EEE", "_ZTSNSt6__ndk112bad_weak_ptrE", "_ZTTN2cv12GFTTDetectorE", "_ZNSt6__ndk14cerrE", "_ZTSNSt6__ndk115__codecvt_utf16IDiLb0EEE", "_ZTTN2cv5BRISKE", "_ZTSPKDi", "_ZTCN2cv3ORBE0_NS_9Feature2DE", "_ZTINSt6__ndk120__codecvt_utf8_utf16IDsEE", "_ZTSPDn", "_ZTINSt6__ndk115numpunct_bynameIwEE", "_ZTIN2cv16TLSDataContainerE", "_ZTVNSt6__ndk117__widen_from_utf8ILm32EEE", "_ZTINSt6__ndk115numpunct_bynameIcEE", "_ZTSN2cv3dnn14dnn4_v201812215LayerE", "_ZTSPKn", "_ZTSN3tbb8internal3rml14private_serverE", "_ZTSN2cv17FlannBasedMatcherE", "_ZNSt6__ndk18ios_base9__xindex_E", "_ZTSPKDh", "_ZTVNSt6__ndk115__codecvt_utf16IwLb1EEE", "_ZTVSt14overflow_error", "_ZTSPKy", "_ZTSNSt6__ndk114__codecvt_utf8IDiEE", "_ZTIDs", "_ZTIPKb", "_ZTSN2cv2ml9TrainDataE", "_ZTSN10__cxxabiv123__fundamental_type_infoE", "_ZTTN2cv4KAZEE", "_ZTSN2cv11FileStorageE", "_ZTVSt9exception", "_ZTSNSt6__ndk112ctype_bynameIcEE", "_ZTVNSt6__ndk15ctypeIcEE", "_ZTINSt6__ndk115__codecvt_utf16IDiLb1EEE", "_ZNSt6__ndk110ctype_base5printE", "_ZTSDn", "_ZTIi", "_ZTIN2cv21BaseCascadeClassifierE", "_ZTSPKd", "_ZN3tbb8internal8governor13UsePrivateRMLE", "_ZTSNSt6__ndk115numpunct_bynameIcEE", "_ZNSt6__ndk15wcerrE", "_ZTVNSt6__ndk114__codecvt_utf8IwEE", "_ZTVNSt6__ndk117__widen_from_utf8ILm16EEE", "_ZTSPKe", "_ZTVN3tbb13improper_lockE", "_ZTSN2cv21DetectionBasedTrackerE", "_ZNSt6__ndk16locale4timeE", "_ZNSt6__ndk15ctypeIcE2idE", "_ZTSNSt6__ndk115__codecvt_utf16IDiLb1EEE", "_ZTSDi", "_ZTVN2cv9BFMatcherE", "_ZTIN3tbb10user_abortE", "_ZTIPKn", "_ZTSNSt6__ndk114__shared_countE", "_ZTSN2cv12MatAllocatorE", "_ZTSSt16nested_exception", "_ZNSt6__ndk110defer_lockE", "_ZTIN3tbb12missing_waitE", "_ZTSN2cv13HOGDescriptorE", "_ZTIPKa", "_ZTIw", "_ZTIPDh", "_ZTSPKv", "_ZTSSt16invalid_argument", "_ZTIN10__cxxabiv121__vmi_class_type_infoE", "_ZTVNSt6__ndk18numpunctIwEE", "_ZN3tbb8internal35the_context_state_propagation_mutexE", "_ZTSNSt6__ndk112ctype_bynameIwEE", "_ZTSNSt6__ndk112future_errorE", "_ZTSN2cv18SimpleBlobDetectorE", "_ZTIs", "_ZTVSt11range_error", "_ZTVN2cv9FormattedE", "_ZN3tbb8internal35the_context_state_propagation_epochE", "_ZTVSt16invalid_argument", "_ZTIa", "_ZTSPKw", "_ZTSNSt6__ndk15ctypeIcEE", "_ZTSPKi", "_ZTVN2cv4MSERE", "_ZNSt6__ndk18numpunctIwE2idE", "_ZTIPg", "_ZN3tbb8internal20AllocateSchedulerPtrE", "_ZTSN3tbb27invalid_multiple_schedulingE", "_ZTSN2cv5flann5IndexE", "_ZNSt6__ndk18ios_base5fixedE", "_ZTVN2cv16TLSDataContainerE", "_ZTVSt16nested_exception", "_ZTIPKi", "_ZTVSt20bad_array_new_length", "_ZTSN2cv11VideoWriterE", "_ZTSSt9type_info", "_ZNSt6__ndk18ios_base3hexE", "_ZTVN3tbb27invalid_multiple_schedulingE", "_ZTINSt6__ndk112ctype_bynameIwEE", "_ZTSSt13bad_exception", "_ZTIPc", "_ZTSPKf", "_ZNSt6__ndk17codecvtIwc9mbstate_tE2idE", "_ZTINSt6__ndk114__shared_countE", "_ZTVSt15underflow_error", "_ZN2cv13__terminationE", "_ZN3tbb8internal8governor17is_rethrow_brokenE", "_ZTIN2cv11VideoWriterE", "_ZTSNSt6__ndk114collate_bynameIwEE", "_ZTVN10__cxxabiv129__pointer_to_member_type_infoE", "_ZNSt6__ndk16locale3allE", "_ZTVN10__cxxabiv120__function_type_infoE", "_ZTSNSt6__ndk120__codecvt_utf8_utf16IDiEE", "_ZTSPKDn", "_ZTIN2cv2ml9TrainDataE", "_ZNSt6__ndk18ios_base10floatfieldE", "__cxa_new_handler", "_ZTVN2cv17DescriptorMatcherE", "_ZTCN2cv12GFTTDetectorE0_NS_9Feature2DE", "_ZTSPKDs", "_ZTTN2cv20AgastFeatureDetectorE", "_ZTINSt6__ndk115__codecvt_utf16IDsLb1EEE", "_ZNSt6__ndk110ctype_base5alnumE", "_ZNSt6__ndk18ios_base6eofbitE", "_ZTVNSt6__ndk117__assoc_sub_stateE", "_ZTSSt20bad_array_new_length", "_ZTISt10bad_typeid", "_ZTVN2cv9AlgorithmE", "_ZTSN2cv12GFTTDetectorE", "_ZTSd", "_ZTINSt6__ndk112system_errorE", "_ZTSNSt6__ndk115__codecvt_utf16IDsLb1EEE", "_ZNSt6__ndk18ios_base8internalE", "_ZTVNSt6__ndk115__codecvt_utf16IwLb0EEE", "_ZTSN2cv9BFMatcherE", "_ZTVNSt6__ndk115__codecvt_utf16IDsLb0EEE", "_ZTVN2cv2ml9StatModelE", "_ZTINSt6__ndk18ios_baseE", "_ZTIN2cv2ml9StatModelE", "_ZN3tbb8internal14__TBB_InitOnce18InitializationLockE", "_ZTSN10__cxxabiv120__function_type_infoE", "_ZTIPKDh", "_ZTISt9type_info", "_ZTSN2cv9AlgorithmE", "_ZTIN10__cxxabiv120__function_type_infoE", "_ZTVNSt6__ndk115numpunct_bynameIcEE", "_ZTIN10__cxxabiv119__pointer_type_infoE", "_ZTSPx", "_ZTVN2cv5BRISKE", "_ZTVN2cv16MinProblemSolver8FunctionE", "_ZTTN2cv18SimpleBlobDetectorE", "_ZTSNSt6__ndk17codecvtIwc9mbstate_tEE", "_ZNSt6__ndk18ios_base7goodbitE", "_ZNSt6__ndk18ios_base3ateE", "_ZTIN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTVSt12domain_error", "_ZNSt6__ndk13cinE", "_ZNSt6__ndk110ctype_base5lowerE", "_ZNSt6__ndk17codecvtIcc9mbstate_tE2idE", "_ZTISt14overflow_error", "_ZTIg", "_ZTVN2cv9ExceptionE", "_ZTIN3tbb8internal6marketE", "_ZTTN2cv3ORBE", "_ZTVSt16bad_array_length", "_ZTSN10__cxxabiv117__class_type_infoE", "_ZTSN2cv9Feature2DE", "_ZTIPv", "_ZTSNSt6__ndk116__narrow_to_utf8ILm32EEE", "_ZNSt6__ndk110ctype_base5digitE", "_ZTIN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTVN2cv9Feature2DE", "_ZTIN10__cxxabiv117__array_type_infoE", "_ZTCN2cv19FastFeatureDetectorE0_NS_9Feature2DE", "_ZTIN2cv12GFTTDetectorE", "_ZTSN3tbb8internal6marketE", "_ZTVNSt6__ndk112ctype_bynameIwEE", "_ZTSPj", "_ZTIN3tbb8internal3rml14private_serverE", "_ZTVN2cv16BOWKMeansTrainerE", "_ZTIPy", "_ZTVN10__cxxabiv116__shim_type_infoE", "_ZTSN2cv22SimpleBlobDetectorImplE", "_ZTINSt6__ndk15ctypeIcEE", "_ZTIm", "_ZTIPj", "_ZTIN2cv9AlgorithmE", "_ZTIPl", "_ZTIN2cv16ParallelLoopBodyE", "_ZTIPKj", "_ZTVN2cv11VideoWriterE", "_ZTVN3tbb14bad_last_allocE", "_ZTVNSt6__ndk114collate_bynameIwEE", "_ZTINSt6__ndk15ctypeIwEE", "_ZTSN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTIf", "_ZTIPKx", "_ZNSt6__ndk18ios_base11adjustfieldE", "_ZTIPo", "_ZTVN2cv5flann5IndexE", "_ZTVN2cv10BOWTrainerE", "_ZTISt15underflow_error", "_ZTIN2cv4MSERE", "_ZTIPKt", "_ZTSy", "_ZTISt11logic_error", "_ZTVNSt6__ndk18ios_baseE", "_ZTSN2cv10BOWTrainerE", "_ZTIPKm", "_ZTIN2cv9ExceptionE", "_ZTVSt10bad_typeid", "_ZTVNSt6__ndk114__shared_countE", "_ZTINSt6__ndk18ios_base7failureE", "_ZTVNSt6__ndk114__codecvt_utf8IDiEE", "_ZTSPv", "_ZN3tbb8internal14__TBB_InitOnce5countE", "_ZTVSt11logic_error", "_ZTSN3tbb13improper_lockE", "_ZTSa", "_ZTIN3tbb14bad_last_allocE", "_ZTSPKo", "_ZTSPKb", "_ZTSN10__cxxabiv119__pointer_type_infoE", "_ZTSSt9exception", "_ZTSNSt6__ndk120__codecvt_utf8_utf16IDsEE", "_ZNSt6__ndk18ios_base9showpointE", "_ZTSSt11range_error", "__cxa_terminate_handler", "_ZTSn", "_ZTSN2cv9FormatterE", "_ZTIc", "_ZTIN10__cxxabiv116__shim_type_infoE", "_ZTVN2cv5MatOpE", "_ZTIb", "_ZNSt6__ndk18ios_base10scientificE", "_ZN3tbb8internal6market9theMarketE", "_ZTVN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTVN3tbb4taskE", "_ZTINSt6__ndk17codecvtIDsc9mbstate_tEE", "_ZTINSt6__ndk114__codecvt_utf8IDiEE", "_ZTISt9bad_alloc", "_ZTIN2cv16MinProblemSolver8FunctionE", "VP8GetCPUInfo", "_ZNSt6__ndk110ctype_base5upperE", "_ZTINSt6__ndk17codecvtIDic9mbstate_tEE", "_ZTSN3tbb18captured_exceptionE", "_ZTIPDi", "_ZTINSt6__ndk115__codecvt_utf16IwLb1EEE", "_ZTIl", "_ZTINSt6__ndk117__widen_from_utf8ILm32EEE", "_ZTIPKDs", "_ZTIPKh", "_ZTSPg", "_ZTSNSt6__ndk115__codecvt_utf16IDsLb0EEE", "_ZTSN2cv20AgastFeatureDetectorE", "_ZTSN2cv17DescriptorMatcher20DescriptorCollectionE", "_ZTVNSt6__ndk120__codecvt_utf8_utf16IDiEE", "_ZTSPw", "_ZTSNSt6__ndk114__codecvt_utf8IDsEE", "_ZTVSt12length_error", "_ZTSNSt6__ndk18numpunctIcEE", "_ZTSNSt6__ndk17codecvtIDic9mbstate_tEE", "_ZTIh", "_ZTINSt6__ndk115__codecvt_utf16IDsLb0EEE", "_ZTIPKf", "_ZTVN2cv5AKAZEE", "_ZTSNSt6__ndk114error_categoryE", "_ZTIN2cv9Feature2DE", "_ZTINSt6__ndk18numpunctIcEE", "_ZN3tbb8internal14__TBB_InitOnce18InitializationDoneE", "_ZTVN2cv12VideoCaptureE", "_ZTSN2cv5BRISKE", "_ZNSt6__ndk18ios_base4leftE", "_ZTIPKw", "_ZTISt16nested_exception", "_ZTSN3tbb10user_abortE", "_ZNSt6__ndk16locale8monetaryE", "_ZTSN2cv4MSERE", "_ZTSN2cv25BOWImgDescriptorExtractorE", "_ZNSt6__ndk110ctype_base5graphE", "_ZTIPKDi", "_ZTSPc", "_ZTSPDs", "_ZTVN2cv21DetectionBasedTrackerE", "_ZTIy", "_ZTINSt6__ndk17codecvtIcc9mbstate_tEE", "_ZTSSt16bad_array_length", "_ZTVNSt6__ndk18ios_base7failureE", "_ZTSNSt6__ndk18numpunctIwEE", "_ZTSNSt6__ndk112system_errorE", "_ZTTN2cv9Feature2DE", "_ZTSe", "_ZNSt6__ndk18ios_base6badbitE", "_ZTSPDh", "_ZTIPw", "_ZTSSt12domain_error", "_ZTSb", "_ZTVN2cv19FastFeatureDetectorE", "_ZTIN10__cxxabiv123__fundamental_type_infoE", "_ZTSPn", "_ZTIN2cv12VideoCaptureE", "_ZTIN2cv5BRISKE", "_ZTINSt6__ndk114collate_bynameIcEE", "_ZNSt6__ndk15wclogE", "_ZN3tbb8internal8governor19theRMLServerFactoryE", "_ZTVN2cv18SimpleBlobDetectorE", "_ZTSNSt6__ndk18ios_baseE", "_ZTSPKl", "_ZTSPb", "_ZTVSt9bad_alloc", "_ZTIPa", "_ZTTN2cv4MSERE", "_ZTSN2cv9ExceptionE", "_ZTVSt12out_of_range", "_ZTIN3tbb27invalid_multiple_schedulingE", "_ZTVNSt6__ndk114collate_bynameIcEE", "_ZNSt6__ndk16locale7collateE", "_ZTIPKDn", "_ZTSNSt6__ndk115__codecvt_utf16IwLb1EEE", "_ZTSN2cv3dnn14dnn4_v201812219LSTMLayerE", "_ZTINSt6__ndk112future_errorE", "_ZTVN2cv22SimpleBlobDetectorImplE", "_ZTCN2cv5AKAZEE0_NS_9Feature2DE", "_ZTSPKt", "_ZTIPt", "_ZTTN2cv22SimpleBlobDetectorImplE", "_ZNSt6__ndk18ios_base3appE", "_ZNSt6__ndk18ios_base9boolalphaE", "_ZTVNSt6__ndk114error_categoryE", "_ZTIPi", "_ZTIx", "_ZTSN2cv3ORBE", "_ZTSN2cv4KAZEE", "_ZTSN3tbb14bad_last_allocE", "_ZTSx", "_ZTVN10__cxxabiv121__vmi_class_type_infoE", "_ZTSN10__cxxabiv117__pbase_type_infoE", "_ZTINSt6__ndk114collate_bynameIwEE", "_ZTISt12out_of_range", "_ZTSh", "_ZTINSt6__ndk119__shared_weak_countE", "_ZTVN2cv2ml9TrainDataE", "_ZTISt9exception", "_ZTVNSt6__ndk15ctypeIwEE", "_ZTINSt6__ndk120__codecvt_utf8_utf16IDiEE", "_ZTISt8bad_cast", "_ZTIN2cv19FastFeatureDetectorE", "_ZTIPKv", "_ZN3tbb8internal8governor22DefaultNumberOfThreadsE", "_ZTSN3tbb8internal17generic_schedulerE", "_ZTIN2cv13HOGDescriptorE", "_ZTSPKg", "_ZTSN10__cxxabiv117__array_type_infoE", "_ZTSv", "_ZNSt6__ndk17codecvtIDsc9mbstate_tE2idE", "_ZTINSt6__ndk16locale5facetE", "_ZTVNSt6__ndk112system_errorE", "_ZTVN2cv12GFTTDetectorE", "_ZTIN2cv10BOWTrainerE", "_ZNSt6__ndk110ctype_base5punctE", "_ZNSt6__ndk18ios_base9uppercaseE", "_ZTSN2cv19FastFeatureDetectorE", "_ZTIPKd", "_ZTSN2cv16BOWKMeansTrainerE", "_ZNSt6__ndk18ios_base6skipwsE", "_ZTSNSt6__ndk115__codecvt_utf16IwLb0EEE", "_ZTVNSt6__ndk120__codecvt_utf8_utf16IDsEE", "_ZTVNSt6__ndk114__codecvt_utf8IDsEE", "_ZTIPm", "_ZTCN2cv5BRISKE0_NS_9Feature2DE", "_ZTSN2cv5MatOpE", "_ZTISt11range_error", "_ZTINSt6__ndk120__codecvt_utf8_utf16IwEE", "_ZTSSt14overflow_error", "_ZTINSt6__ndk116__narrow_to_utf8ILm16EEE", "_ZTSNSt6__ndk15ctypeIwEE", "_ZTSPd", "_ZTSt", "_ZTIN2cv3dnn14dnn4_v201812215LayerE", "_ZTTN2cv5AKAZEE", "_ZTVN10__cxxabiv123__fundamental_type_infoE", "_ZN3tbb8internal24the_global_observer_listE", "_ZTVN2cv11FileStorageE", "_ZTIN10__cxxabiv116__enum_type_infoE", "_ZTVN3tbb18captured_exceptionE", "_ZTSPy", "_ZTINSt6__ndk117__assoc_sub_stateE", "_ZTINSt6__ndk114__codecvt_utf8IwEE", "_ZTVNSt6__ndk119__shared_weak_countE", "_ZTCN2cv4KAZEE0_NS_9Feature2DE", "_ZTVN2cv9FormatterE", "_ZTINSt6__ndk117__widen_from_utf8ILm16EEE", "__cxa_unexpected_handler", "_ZNSt6__ndk18ios_base7showposE", "_ZTVNSt6__ndk16locale5facetE", "_ZTSN2cv9FormattedE", "_ZNSt6__ndk110ctype_base6xdigitE", "_ZTVN10__cxxabiv116__enum_type_infoE", "_ZTISt16bad_array_length", "_ZTIPKo", "_ZTVNSt6__ndk112future_errorE", "_ZTVN2cv12MatAllocatorE", "_ZTIN2cv17DescriptorMatcherE", "_ZTIe", "_ZNSt6__ndk110ctype_base5alphaE", "_ZTVN10__cxxabiv119__pointer_type_infoE", "_ZTSPKa", "_ZTSPo", "_ZTIN2cv3dnn14dnn4_v201812219LSTMLayerE", "_ZTIN3tbb8internal17generic_schedulerE", "_ZTIN2cv12MatAllocatorE", "_ZNSt6__ndk113allocator_argE", "_ZNSt6__ndk18ios_base2inE", "_ZTIDh", "_ZTSNSt6__ndk117__widen_from_utf8ILm16EEE", "_ZTSPKh", "_ZTVNSt6__ndk120__codecvt_utf8_utf16IwEE", "_ZTVSt9type_info", "_ZNSt6__ndk14wcinE", "_ZTVNSt6__ndk17codecvtIDsc9mbstate_tEE", "_ZTSPKs", "_ZTSo", "_ZTIN2cv17FlannBasedMatcherE", "_ZTVNSt6__ndk17codecvtIcc9mbstate_tEE", "_ZTSDh", "_ZTIN10__cxxabiv117__class_type_infoE", "_ZTSg", "_ZNSt6__ndk18ios_base3octE", "_ZTSN2cv16TLSDataContainerE", "_ZTSSt12out_of_range", "_ZNSt6__ndk16locale7numericE", "_ZTIN2cv5AKAZEE", "_ZTSPKx", "_ZTSSt13runtime_error", "_ZSt7nothrow", "_ZTVN2cv3dnn14dnn4_v201812215LayerE", "_ZTISt16invalid_argument", "_ZTVN10__cxxabiv117__class_type_infoE", "_ZTIPKc", "_ZTSN3tbb4taskE", "_ZTIPKg", "_ZTISt13runtime_error", "_ZTIN2cv22SimpleBlobDetectorImplE", "_ZTVN3tbb8internal17generic_schedulerE", "_ZTSPl", "_ZTVN2cv13HOGDescriptorE", "_ZTSNSt6__ndk18ios_base7failureE", "_ZTIN3tbb13improper_lockE", "_ZTVN2cv17FlannBasedMatcherE", "_ZNSt6__ndk18ios_base8showbaseE", "_ZTSNSt6__ndk117__assoc_sub_stateE", "_ZNSt6__ndk14coutE", "_ZNSt6__ndk18ios_base6binaryE", "_ZTSN10__cxxabiv129__pointer_to_member_type_infoE", "_ZTVN2cv21BaseCascadeClassifierE", "_ZTINSt6__ndk17codecvtIwc9mbstate_tEE", "_ZTINSt6__ndk115__codecvt_utf16IwLb0EEE", "_ZTIPe", "_ZTSSt8bad_cast", "_ZTCN2cv22SimpleBlobDetectorImplE0_NS_9Feature2DE", "_ZTVN3tbb8internal6marketE", "_ZTSPs", "_ZTSPDi", "_ZTTN2cv19FastFeatureDetectorE", "_ZNSt6__ndk18ios_base3decE", "_ZN3tbb8internal6market14theMarketMutexE", "_ZTIPKe", "_ZTIN10__cxxabiv120__si_class_type_infoE", "_ZTSNSt6__ndk17codecvtIcc9mbstate_tEE", "_ZTCN2cv20AgastFeatureDetectorE0_NS_9Feature2DE", "_ZTSc", "_ZTIPDs", "_ZTSPf", "_ZTSPe", "_ZTIN2cv3ORBE", "_ZTIn", "_ZTIN2cv16BOWKMeansTrainerE", "_ZTIN2cv4KAZEE", "_ZTIDn", "_ZTIPDn", "_ZTVNSt6__ndk115__codecvt_utf16IDiLb0EEE", "_ZNSt6__ndk110ctype_base5blankE", "_ZTVNSt6__ndk17codecvtIwc9mbstate_tEE", "_ZNSt6__ndk18numpunctIcE2idE", "_ZTVN10__cxxabiv117__array_type_infoE", "_ZTVSt8bad_cast", "_ZTSPm", "_ZNSt6__ndk110ctype_base5spaceE", "_ZNSt6__ndk15ctypeIwE2idE", "_ZTIN2cv9FormatterE", "_ZTSSt9bad_alloc", "_ZNSt6__ndk18ios_base5truncE", "_ZTIN2cv5flann5IndexE", "_ZTSNSt6__ndk114collate_bynameIcEE", "_ZTSs", "_ZNSt6__ndk17codecvtIDic9mbstate_tE2idE", "_ZTSN10__cxxabiv121__vmi_class_type_infoE", "_ZTIN3tbb4taskE", "_ZNSt6__ndk16locale4noneE", "_ZTSPi", "_ZTIPKl", "_ZTINSt6__ndk114error_categoryE", "_ZTVN3tbb10user_abortE", "_ZTSPKm", "_ZTIPb", "_ZTVN10__cxxabiv120__si_class_type_infoE", "_ZTVNSt6__ndk112ctype_bynameIcEE", "_ZTSNSt6__ndk117__widen_from_utf8ILm32EEE", "_ZTVSt13bad_exception", "_ZTIN10__cxxabiv129__pointer_to_member_type_infoE", "_ZTIN10__cxxabiv117__pbase_type_infoE", "_ZTINSt6__ndk112bad_weak_ptrE", "_ZTVNSt6__ndk112bad_weak_ptrE", "_ZTISt13bad_exception", "_ZTISt12length_error", "_ZTIN2cv11FileStorageE", "_ZTSN2cv5AKAZEE", "_ZTSN2cv16MinProblemSolver8FunctionE", "_ZTSSt11logic_error", "_ZTIv", "_ZTVNSt6__ndk116__narrow_to_utf8ILm32EEE", "_ZTIt", "_ZNSt6__ndk15wcoutE", "_ZTSNSt6__ndk16locale5facetE", "_ZTIPKy", "_ZTVN2cv16ParallelLoopBodyE", "_ZTIN2cv5MatOpE", "_ZTSN2cv17DescriptorMatcherE", "_ZTSN10__cxxabiv116__enum_type_infoE", "_ZTSj", "_ZTVNSt6__ndk116__narrow_to_utf8ILm16EEE", "_ZTIo", "_ZNSt6__ndk16locale2id9__next_idE", "_ZNSt6__ndk18ios_base9basefieldE", "_ZTINSt6__ndk112ctype_bynameIcEE", "_ZTVNSt6__ndk115numpunct_bynameIwEE", "_ZNSt6__ndk110ctype_base5cntrlE", "_ZTISt12domain_error", "_ZNSt6__ndk14clogE", "_ZTSPh", "_ZTSPt", "_ZTSNSt6__ndk120__codecvt_utf8_utf16IwEE", "_ZTSi", "_ZTVN2cv3dnn14dnn4_v201812219LSTMLayerE", "_ZTVN10__cxxabiv117__pbase_type_infoE", "_ZTSDs", "_ZTIDi", "_ZTIPf", "_ZNSt6__ndk18ios_base7failbitE", "_ZTSSt15underflow_error", "_ZTVN3tbb8internal3rml14private_serverE", "_ZTVNSt6__ndk115__codecvt_utf16IDiLb1EEE", "_ZTSNSt6__ndk17codecvtIDsc9mbstate_tEE", "_ZTSw", "_ZN3tbb8internal8governor6theTLSE", "_ZTIN3tbb18captured_exceptionE", "_ZTSNSt6__ndk114__codecvt_utf8IwEE", "_ZTIPx", "_ZTVNSt6__ndk18numpunctIcEE", "_ZNSt6__ndk18ios_base7unitbufE", "_ZTVN2cv3ORBE", "_ZNSt6__ndk18ios_base3outE", "_ZTVNSt6__ndk17codecvtIDic9mbstate_tEE", "_ZTSm", "_ZTSN10__cxxabiv116__shim_type_infoE", "_ZNSt6__ndk114__num_get_base5__srcE", "_ZTIN2cv9FormattedE", "_ZTIN2cv9BFMatcherE", "_ZTISt20bad_array_new_length", "_ZTSN2cv21BaseCascadeClassifierE", "_ZTVN2cv4KAZEE", "_ZTIN2cv18SimpleBlobDetectorE", "_ZNSt6__ndk16locale8messagesE", "_ZTVN3tbb12missing_waitE", "_ZN3tbb8internal8governor22is_speculation_enabledE", "_ZTINSt6__ndk114__codecvt_utf8IDsEE", "_ZTIPh", "_ZNSt6__ndk16locale5ctypeE", "_ZTSPa", "_ZTIPn", "_ZTSPKc", "_ZTCN2cv4MSERE0_NS_9Feature2DE", "_ZNSt6__ndk110adopt_lockE", "_ZTIPd", "_ZTSNSt6__ndk119__shared_weak_countE", "_ZTINSt6__ndk18numpunctIwEE", "_ZTIPs", "_ZNSt6__ndk111try_to_lockE", "_ZTIj", "_ZTSSt10bad_typeid", "_ZTSf", "_ZTVN2cv21DetectionBasedTracker21SeparateDetectionWorkE", "_ZTSN2cv16ParallelLoopBodyE"], "importedglobals": ["__sF"], "importedfunctions": ["fputc", "tan", "printf", "mbrtowc", "sin", "pthread_attr_getstack", "fstat", "strlen", "free", "fputs", "iswdigit", "pthread_self", "log10", "strcmp", "strtold", "pthread_mutex_init", "inflateInit2_", "cos", "pthread_mutex_trylock", "__android_log_print", "pthread_key_create", "pthread_once", "acos", "pthread_detach", "deflateInit2_", "frexpf", "wcstoll", "wcstof", "dl_iterate_phdr", "pthread_getattr_np", "log", "fseeko", "crc32", "isalpha", "wmemcpy", "munmap", "mbtowc", "freelocale", "inflateInit_", "sem_trywait", "wmemcmp", "strcat", "inflateEnd", "compress", "pthread_attr_setstacksize", "sprintf", "modf", "strstr", "remove", "setjmp", "wcsnrtombs", "uncompress", "acosf", "strtof", "atan2f", "bsearch", "getcwd", "strncpy", "rmdir", "calloc", "deflateParams", "fprintf", "wcscoll", "atan", "gzopen", "pthread_create", "fmod", "iswalpha", "logf", "android_set_abort_message", "sem_getvalue", "opendir", "strtok", "abort", "swprintf", "setvbuf", "lrint", "asin", "dladdr", "frexp", "sqrtf", "memchr", "ungetc", "fclose", "wcslen", "sem_destroy", "close", "pthread_mutex_unlock", "strtold_l", "fcntl", "fegetenv", "mkdir", "strtoul", "setlocale", "lseek", "wcsxfrm", "wmemmove", "sqrt", "closelog", "islower", "strerror_r", "exp", "fseek", "sysconf", "qsort", "cbrt", "tanh", "toupper", "pthread_cond_timedwait", "sscanf", "isxdigit", "__errno", "atoi", "strftime", "pthread_cond_destroy", "pthread_mutexattr_init", "pthread_attr_destroy", "mbsnrtowcs", "ftell", "strcoll", "newlocale", "pthread_join", "sinh", "pthread_mutexattr_destroy", "gzrewind", "tanhf", "memcmp", "posix_memalign", "__ctype_get_mb_cur_max", "deflateEnd", "fwrite", "gzclose", "getc", "exit", "realpath", "__android_log_write", "atanf", "unlink", "wctob", "inflate", "rewind", "pthread_getspecific", "deflateReset", "sem_wait", "pthread_key_delete", "uselocale", "sched_yield", "fgetc", "strtod", "puts", "pthread_cond_broadcast", "strchr", "pthread_mutex_lock", "pthread_setspecific", "realloc", "closedir", "ferror", "expf", "write", "wmemset", "iswxdigit", "exp2", "hypot", "wcstoul", "scalbn", "memcpy", "sinf", "btowc", "iswprint", "tolower", "syslog", "pthread_attr_init", "pow", "vsscanf", "strnlen", "memset", "mbsrtowcs", "readdir", "wcstol", "asinf", "longjmp", "wcstold", "isprint", "strtoll", "atof", "open", "exp2f", "iswupper", "isalnum", "snprintf", "deflateInit_", "iswlower", "read", "strpbrk", "fgets", "inflateReset2", "cosf", "strxfrm", "towlower", "__stack_chk_fail", "iswcntrl", "openlog", "gzeof", "sem_init", "fopen", "strncmp", "rand", "vasprintf", "strrchr", "wcstod", "gzgets", "feof", "adler32", "syscall", "fflush", "isupper", "ldexp", "nanosleep", "mbrlen", "gmtime", "atan2", "fread", "inflateReset", "malloc", "wcrtomb", "pthread_cond_signal", "sem_post", "deflate", "towupper", "stat", "iswspace", "pthread_mutexattr_settype", "pthread_mutex_destroy", "mmap", "strtol", "pthread_cond_init", "mkstemp", "strtoull", "AndroidBitmap_unlockPixels", "wmemchr", "strtoull_l", "inflateSync", "memmove", "vsnprintf", "logb", "iswblank", "pthread_cond_wait", "vfprintf", "wcstoull", "fscanf", "powf", "clock_gettime", "ftello", "fesetenv", "AndroidBitmap_lockPixels", "pthread_equal", "getenv", "iswpunct", "strtoll_l", "strerror", "strcpy", "putchar", "localeconv", "gzputs", "AndroidBitmap_getInfo", "isspace", "lrintf"], "exportedfunctions": ["_ZN2cv3powERKNS_10softdoubleES2_", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_10", "Java_org_opencv_photo_Photo_colorChange_13", "Java_org_opencv_imgproc_CLAHE_getClipLimit_10", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_11", "Java_org_opencv_imgproc_Subdiv2D_findNearest_10", "_ZN2cv3hal6log64fEPKdPdi", "_ZNSt16nested_exceptionD1Ev", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_12", "_ZNK2cv4cuda6Stream15queryIfCompleteEv", "_ZN2cv5instr8setFlagsENS0_5FLAGSE", "_ZN3tbb8internal17generic_schedulerC2ERNS0_6marketE", "Java_org_opencv_imgproc_Imgproc_putText_13", "Java_org_opencv_imgproc_Subdiv2D_getTriangleList_10", "cvCornerHarris", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_11", "cvGraphVtxDegree", "Java_org_opencv_core_TickMeter_getCounter_10", "_ZN2cv3ocl7Context10unloadProgERNS0_7ProgramE", "_ZN2cv3ocl6Kernel12runProfilingEiPmS2_RKNS0_5QueueE", "_ZN2cv5utils30getConfigurationParameterPathsEPKcRKNSt6__ndk16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEE", "_ZNSt13runtime_errorD0Ev", "_ZN2cv15KeyPointsFilter16runByImageBorderERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEENS_5Size_IiEEi", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_13", "cvSetZero", "Java_org_opencv_dnn_Net_forward_11", "Java_org_opencv_core_Core_mulTransposed_11", "_ZN2cv4readERKNS_8FileNodeERff", "_ZN2cv3dftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv9meanShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "Java_org_opencv_video_DISOpticalFlow_setPatchSize_10", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_photo_Photo_createTonemapReinhard_12", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_12", "cvGetTextSize", "Java_org_opencv_calib3d_StereoSGBM_create_19", "Java_org_opencv_ml_SVM_trainAuto_18", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortPoints_11", "_ZN2cvlsERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_12", "_ZNK2cv11FileStorage8isOpenedEv", "_ZN3tbb8internal6market22remove_arena_from_listERNS0_5arenaE", "_ZNK2cv4cuda10DeviceInfo11queryMemoryERmS2_", "_ZN2cv14QRCodeDetectorD2Ev", "_ZNKSt6__ndk120__time_get_c_storageIwE3__rEv", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5RangeES4_", "_ZNSt12domain_errorD0Ev", "cvDFT", "Java_org_opencv_imgproc_Imgproc_getRotationMatrix2D_10", "_ZN2cv3minERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_features2d_BRISK_create_10", "WebPGetDecoderVersion", "_ZNSt6__ndk114__num_put_base14__format_floatEPcPKcj", "Java_org_opencv_ml_ParamGrid_set_1logStep_10", "_ZN2cv3ipp14getIppFeaturesEv", "Java_org_opencv_videoio_VideoWriter_getBackendName_10", "Java_org_opencv_videoio_VideoCapture_retrieve_11", "_ZNSt13runtime_errorD1Ev", "Java_org_opencv_photo_MergeRobertson_delete", "_ZNK2cv3ogl6Buffer5cloneENS1_6TargetEb", "_ZNSt6__ndk111timed_mutexD2Ev", "_ZN2cv11FileStorage8writeRawERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKvm", "Java_org_opencv_photo_Photo_pencilSketch_10", "_ZNSt6__ndk18numpunctIwEC2Em", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_10", "_ZN2cv11FileStorageC2Ev", "_ZN2cv32fastNlMeansDenoisingColoredMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiffii", "_ZNSt6__ndk18ios_base7failureC2EPKcRKNS_10error_codeE", "Java_org_opencv_imgproc_GeneralizedHough_setTemplate_10", "cvClearMemStorage", "_ZN2cv4cuda6GpuMat7releaseEv", "_ZN9CvLevMarq5clearEv", "_ZN2cv3dnn14dnn4_v2018122118ChannelsPReLULayer6createERKNS1_11LayerParamsE", "_ZNKSt6__ndk114__codecvt_utf8IwE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_core_Core_mulTransposed_13", "_ZNSt16bad_array_lengthD1Ev", "_ZN3tbb4task4selfEv", "_ZN3tbb10interface914global_control16internal_destroyEv", "_ZNK2cv8FileNode5emptyEv", "_ZN2cv5flann11IndexParams8setFloatERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEf", "_ZN3tbb8internal18concurrent_monitor12prepare_waitERNS1_14thread_contextEm", "Java_org_opencv_core_Core_subtract_10", "_ZNSt6__ndk118__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv3hal19cvtTwoPlaneYUVtoBGREPKhmPhmiiibi", "_ZNK2cv17CascadeClassifier5emptyEv", "Java_org_opencv_core_Core_PSNR_10", "_ZNK2cv3ocl6Device18deviceVersionMinorEv", "cvSaveWindowParameters", "_ZNKSt6__ndk118__time_get_storageIwE15__do_date_orderEv", "_ZN2cv24calcOpticalFlowFarnebackERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEdiiiidi", "Java_org_opencv_imgproc_Imgproc_Sobel_14", "_ZN2cv21DetectionBasedTracker10ParametersC1Ev", "_ZN3tbb8internal23allocate_via_handler_v3Em", "_ZN2cv3maxERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv3hal14addWeighted32sEPKimS2_mPimiiPv", "_ZNSt11range_errorD2Ev", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_dRKNS_17_InputOutputArrayES5_", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_11", "_ZN2cv8Subdiv2D12connectEdgesEii", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_12", "_ZN2cv5instr8NodeDataC1EPKcS3_iPvbNS0_4TYPEENS0_4IMPLE", "_ZNSt6__ndk15mutex8try_lockEv", "_ZN2cv3dnn14dnn4_v2018122110SplitLayer6createERKNS1_11LayerParamsE", "_ZNK2cv4UMat3mulERKNS_11_InputArrayEd", "_ZNSt13exception_ptraSERKS_", "_ZN2cv8scaleAddERKNS_11_InputArrayEdS2_RKNS_12_OutputArrayE", "_ZN2cv3ocl5Queue6createERKNS0_7ContextERKNS0_6DeviceE", "Java_org_opencv_features2d_AgastFeatureDetector_getNonmaxSuppression_10", "Java_org_opencv_core_Core_copyTo_10", "_ZN2cv4cuda5Event11elapsedTimeERKS1_S3_", "_ZNK2cv16MatConstIterator4lposEv", "_ZN2cv8filter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEdi", "Java_org_opencv_core_Core_sort_10", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayES8_i", "_ZN2cv3dnn14dnn4_v2018122112PaddingLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_StereoMatcher_getBlockSize_10", "_ZNK2cv4cuda10DeviceInfo19maxSurface1DLayeredEv", "Java_org_opencv_core_Core_dft_12", "Java_org_opencv_imgproc_Imgproc_boxFilter_11", "_ZNK2cv3dnn14dnn4_v201812213Net14getLayersCountERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZNSt11range_errorD0Ev", "_ZN2cv5MatOpD2Ev", "Java_org_opencv_features2d_KAZE_getDiffusivity_10", "_ZNK2cv11_InputArray15getGpuMatVectorERNSt6__ndk16vectorINS_4cuda6GpuMatENS1_9allocatorIS4_EEEE", "_ZN2cv3dnn14dnn4_v201812213Net12enableFusionEb", "_ZN2cv4UMat9adjustROIEiiii", "Java_org_opencv_core_Core_max_11", "_ZN2cv3Mat10push_back_EPKv", "_ZNSt6__ndk112ctype_bynameIwEC1EPKcm", "Java_org_opencv_features2d_ORB_getWTA_1K_10", "_ZN3tbb8internal6market13arena_in_needERNS0_14intrusive_listINS0_5arenaEEERPS3_", "_Z6cvCeilRKN2cv10softdoubleE", "_ZN2cv2ml9TrainData6createERKNS_11_InputArrayEiS4_S4_S4_S4_S4_", "_ZNSt6__ndk117__assoc_sub_state4waitEv", "_ZNK2cv3ocl6Device24preferredVectorWidthHalfEv", "_ZN9CvLevMarq4stepEv", "_ZN2cv3ocl7Image2DC2ERKS1_", "_ZNK2cv3ocl6Device9availableEv", "_ZNK2cv3ocl6Device4nameEv", "_ZN2cv12GFTTDetector6createEiddiibd", "_ZN2cv7absdiffERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_video_KalmanFilter_get_1errorCovPost_10", "_ZN2cv3ocl6KernelC1Ev", "_ZNK2cv13HOGDescriptor19detectMultiScaleROIERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEERNS5_INS_12DetectionROIENS8_ISC_EEEEdi", "_ZN3tbb8internal13observer_list6removeEPNS0_14observer_proxyE", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNSt6__ndk16vectorIiNS6_9allocatorIiEEEE", "_ZN2cv3dnn14dnn4_v2018122110ScaleLayer6createERKNS1_11LayerParamsE", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE16do_always_noconvEv", "_ZN2cv3MatC2ERKS0_PKNS_5RangeE", "_ZNK2cv4cuda7HostMem7reshapeEii", "Java_org_opencv_calib3d_Calib3d_composeRT_18", "_ZN2cv11contourAreaERKNS_11_InputArrayEb", "Java_org_opencv_core_Core_min_10", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_10", "Java_org_opencv_dnn_Net_forward_12", "_ZN2cv11RNG_MT19937cviEv", "Java_org_opencv_features2d_KAZE_getNOctaveLayers_10", "_ZN2cv3ogl6BufferC2ENS_5Size_IiEEijb", "_ZN2cv4normERKNS_11_InputArrayES2_iS2_", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_ml_KNearest_setAlgorithmType_10", "_ZN2cv6detail20check_failed_MatTypeEiiRKNS0_12CheckContextE", "_ZNK2cv13HOGDescriptor7computeERKNS_11_InputArrayERNSt6__ndk16vectorIfNS4_9allocatorIfEEEENS_5Size_IiEESB_RKNS5_INS_6Point_IiEENS6_ISD_EEEE", "_ZN3tbb8internal14observer_proxyC1ERNS0_26task_scheduler_observer_v3E", "_ZN2cv4normERKNS_11_InputArrayEiS2_", "Java_org_opencv_imgproc_Imgproc_drawMarker_10", "_ZN3tbb8internal6market28acknowledge_close_connectionEv", "_ZN2cv3ocl6DeviceC2EPv", "_ZNSt6__ndk115recursive_mutexD1Ev", "_ZN2cv3Mat4onesEiPKii", "_ZN2cv11RotatedRectC2ERKNS_6Point_IfEES4_S4_", "_ZNSt9type_infoD1Ev", "_ZN2cv4UMatC1ERKS0_PKNS_5RangeE", "Java_org_opencv_calib3d_StereoSGBM_getP2_10", "Java_org_opencv_core_Core_idct_10", "_ZNK2cv3ocl6Device7versionEv", "cvReshape", "Java_org_opencv_calib3d_StereoSGBM_getUniquenessRatio_10", "Java_org_opencv_features2d_ORB_create_11", "_ZN2cv17CommandLineParser4Impl12apply_paramsEiNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv4cuda18registerPageLockedERNS_3MatE", "_ZN2cv17FlannBasedMatcher5trainEv", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_10", "_ZNK2cv11_InputArray4colsEi", "cvDCT", "_ZN2cv8internal15IntrinsicParamsplERKNS_3MatE", "_ZNSt11logic_errorC1EPKc", "_ZN3tbb8internal17generic_scheduler11local_spawnEPNS_4taskERS3_", "_ZNSt6__ndk110__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv3hal3logEPKfPfi", "_ZN2cv7samples24addSamplesDataSearchPathERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv5randnERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "_ZN2cv11RNG_MT199374seedEj", "_ZN2cv4PSNRERKNS_11_InputArrayES2_d", "_ZNK2cv18SimpleBlobDetector6Params5writeERNS_11FileStorageE", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_10", "_ZN2cv3dnn14dnn4_v2018122112FlattenLayer6createERKNS1_11LayerParamsE", "_ZNK2cv12_OutputArray6createENS_5Size_IiEEiibNS0_9DepthMaskE", "Java_org_opencv_imgproc_Imgproc_warpAffine_13", "Java_org_opencv_ml_EM_trainE_14", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_10", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE10do_unshiftER9mbstate_tPcS4_RS4_", "WebPGetFeaturesInternal", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_15", "Java_org_opencv_photo_Photo_createTonemapReinhard_11", "_ZN2cv3ocl8PlatformaSERKS1_", "_ZN2cv3ogl9Texture2DC1ERKNS_11_InputArrayEb", "_ZN2cv3hal9absdiff8sEPKamS2_mPamiiPv", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_11", "_ZNSt6__ndk17codecvtIDic9mbstate_tED1Ev", "_ZNKSt6__ndk120__time_get_c_storageIcE3__cEv", "Java_org_opencv_ml_SVMSGD_setMarginRegularization_10", "_ZN2cv3hal6cmp32fEPKfmS2_mPhmiiPv", "_ZN2cv8Subdiv2D9swapEdgesEi", "_ZNK3tbb8internal3rml11tbb_factory21call_with_server_infoEPFvPvPKcES3_", "Java_org_opencv_features2d_ORB_create_16", "_ZNSt6__ndk18ios_base17register_callbackEPFvNS0_5eventERS0_iEi", "_ZN3tbb8internal8governor22initialize_rml_factoryEv", "_ZN2cv3ocl7ContextaSERKS1_", "Java_org_opencv_features2d_BOWTrainer_getDescriptors_10", "Java_org_opencv_objdetect_HOGDescriptor_compute_11", "_ZNSt6__ndk115__thread_structC1Ev", "_ZN3tbb16spin_rw_mutex_v323internal_acquire_readerEv", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_10", "Java_org_opencv_photo_CalibrateRobertson_delete", "_ZNK2cv8FileNodeixEi", "Java_org_opencv_imgproc_Imgproc_Scharr_12", "_ZN2cv11writeScalarERNS_11FileStorageEd", "_ZN2cv3dnn14dnn4_v201812215Layer9tryAttachERKNS_3PtrINS1_11BackendNodeEEE", "_ZNK3tbb10user_abort4whatEv", "Java_org_opencv_video_DISOpticalFlow_getFinestScale_10", "_ZN2cv16findEssentialMatERKNS_11_InputArrayES2_S2_iddRKNS_12_OutputArrayE", "_ZN2cv10haveOpenVXEv", "Java_org_opencv_videoio_VideoCapture_VideoCapture_14", "_ZN2cv18SimpleBlobDetector6Params4readERKNS_8FileNodeE", "_ZN2cv18getVersionRevisionEv", "_ZN2cv3ocl9KernelArgC2Ev", "cvThreshHist", "Java_org_opencv_core_Core_reduce_10", "_ZN2cv9startLoopEPFiiPPcEiS1_", "_ZN2cv5eigenERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "_ZN2cv5flann5Index12radiusSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_diRKNS0_12SearchParamsE", "_ZN2cv3ocl8PlatformC1Ev", "Java_org_opencv_calib3d_Calib3d_fisheye_1projectPoints_10", "_ZNK2cv3ogl9Texture2D4bindEv", "_ZN2cv15getVersionMinorEv", "_ZN2cv3ocl6Device3setEPv", "_ZN2cv3hal6div32fEPKfmS2_mPfmiiPv", "_ZN2cvanERKNS_7Scalar_IdEERKNS_3MatE", "_ZNK2cv12MatAllocator5unmapEPNS_8UMatDataE", "Java_org_opencv_imgproc_Imgproc_convexHull_10", "Java_org_opencv_ml_SVM_setDegree_10", "_ZN2cv14createAlignMTBEiib", "_ZN3tbb8internal3rml14private_worker14thread_routineEPv", "_ZNK2cv12_OutputArray5clearEv", "_ZNK2cv3ocl6Device18globalMemCacheSizeEv", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE11do_encodingEv", "_ZN2cv5mergeERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv3ogl6Buffer9mapDeviceERNS_4cuda6StreamE", "Java_org_opencv_dnn_DictValue_delete", "Java_org_opencv_video_BackgroundSubtractorMOG2_getDetectShadows_10", "_ZNSt6__ndk112system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "cvPrevTreeNode", "_ZNK2cv17CommandLineParser4Impl18split_range_stringERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEcc", "Java_org_opencv_features2d_BFMatcher_BFMatcher_12", "_ZNK2cv4cuda10DeviceInfo24maxTextureCubemapLayeredEv", "cvRemap", "_ZNK2cv11RotatedRect6pointsEPNS_6Point_IfEE", "_ZN2cv13applyColorMapERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "cvReleaseCapture", "_ZNK2cv5MatOp6matmulERKNS_7MatExprES3_RS1_", "_ZN2cv3ogl9Texture2DC2ENS_5Size_IiEENS1_6FormatEjb", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_12", "cvSetRealND", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_10", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_11", "cvNorm", "_ZN2cv2ml9ParamGrid6createEddd", "_ZNSt6__ndk117__widen_from_utf8ILm16EED0Ev", "Java_org_opencv_video_FarnebackOpticalFlow_create_17", "Java_org_opencv_imgproc_LineSegmentDetector_detect_13", "cvInsertNodeIntoTree", "_ZN2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "_ZNK2cv3ocl6Device25preferredVectorWidthFloatEv", "_ZN3tbb18captured_exceptionD0Ev", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_11", "Java_org_opencv_photo_CalibrateDebevec_setLambda_10", "Java_org_opencv_core_Core_batchDistance_10", "_ZN3tbb8internal3rml14private_serverD0Ev", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_15", "WebPEncodeLosslessRGB", "cvGetSeqElem", "_ZNSt12out_of_rangeD2Ev", "Java_org_opencv_calib3d_Calib3d_fisheye_1calibrate_12", "_ZNK2cv3ocl6Device16image2DMaxHeightEv", "Java_org_opencv_calib3d_Calib3d_drawChessboardCorners_10", "_ZNSt6__ndk15ctypeIcED2Ev", "_ZN2cv3hal4sqrtEPKdPdi", "Java_org_opencv_dnn_Dnn_shrinkCaffeModel_11", "_ZNK2cv3ocl6Device15linkerAvailableEv", "Java_org_opencv_photo_AlignMTB_getCut_10", "Java_org_opencv_photo_MergeMertens_setContrastWeight_10", "Java_org_opencv_calib3d_StereoMatcher_setDisp12MaxDiff_10", "_ZN2cv3ocl7Context7getProgERKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_", "Java_org_opencv_features2d_DescriptorMatcher_write_10", "Java_org_opencv_ml_ANN_1MLP_getAnnealFinalT_10", "Java_org_opencv_photo_Photo_createTonemapMantiuk_12", "_ZN2cv5utils14dumpInputArrayERKNS_11_InputArrayE", "_ZN2cv5flann5Index7releaseEv", "_ZN2cv11MahalanobisERKNS_11_InputArrayES2_S2_", "Java_org_opencv_core_Mat_n_1clone", "Java_org_opencv_ml_TrainData_getVarIdx_10", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_15", "_ZN2cv5utils2fs6existsERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_10", "_ZN2cv4UMat6createERKNSt6__ndk16vectorIiNS1_9allocatorIiEEEEiNS_14UMatUsageFlagsE", "_ZN2cv12getThreadNumEv", "_ZN2cv16convexityDefectsERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "Java_org_opencv_calib3d_Calib3d_findHomography_15", "_ZN2cv3dnn14dnn4_v2018122117InnerProductLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_features2d_Feature2D_write_10", "_ZN2cv3ocl6KernelD2Ev", "_ZNK3tbb18captured_exception4whatEv", "_ZN2cv21DetectionBasedTrackerC2ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "_ZNK2cv8FileNodecviEv", "Java_org_opencv_video_KalmanFilter_set_1processNoiseCov_10", "cvGetCols", "_ZNK2cv12_OutputArray6createEiPKiiibNS0_9DepthMaskE", "cvCopyHist", "_ZN2cv3ipp15useIPP_NotExactEv", "_ZN2cv11FileStorageD2Ev", "Java_org_opencv_ml_DTrees_setMinSampleCount_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_15", "_ZNKSt6__ndk110__time_put8__do_putEPcRS1_PK2tmcc", "_ZN3tbb8internal5arenaC2ERNS0_6marketEjj", "Java_org_opencv_core_Core_divide_15", "_ZNK2cv9Feature2D11defaultNormEv", "Java_org_opencv_features2d_Params_set_1maxArea_10", "WebPConfigLosslessPreset", "_ZN2cv11compareHistERKNS_9SparseMatES2_i", "Java_org_opencv_photo_CalibrateDebevec_setSamples_10", "Java_org_opencv_objdetect_HOGDescriptor_compute_13", "_ZN2cv16AVIReadContainer10printErrorERNS_9RiffChunkEj", "_ZN2cv8KeyPoint7convertERKNSt6__ndk16vectorIS0_NS1_9allocatorIS0_EEEERNS2_INS_6Point_IfEENS3_IS9_EEEERKNS2_IiNS3_IiEEEE", "_ZN2cv9AlgorithmD0Ev", "cvNextNArraySlice", "_ZNK2cv3ocl6Device14singleFPConfigEv", "Java_org_opencv_ml_ANN_1MLP_getAnnealInitialT_10", "_ZNK2cv4cuda10DeviceInfo4nameEv", "_ZN2cv12seqPushFrontEP5CvSeqPKv", "_ZNK2cv12_OutputArray12getGpuMatRefEv", "_ZNK2cv16BOWKMeansTrainer7clusterERKNS_3MatE", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_14", "_ZN2cv2ml6KDTreeC2Ev", "cvSeqSlice", "Java_org_opencv_calib3d_StereoMatcher_getDisp12MaxDiff_10", "Java_org_opencv_core_Core_meanStdDev_10", "cvAddWeighted", "Java_org_opencv_features2d_Params_set_1minCircularity_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThresholdGen_10", "_ZNSt6__ndk113shared_futureIvEaSERKS1_", "_ZN3tbb8internal3rml11tbb_factory5closeEv", "_ZN2cv3hal6sub32sEPKimS2_mPimiiPv", "_ZNK2cv11_InputArray4typeEi", "_ZN2cv9boxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "VP8LCheckSignature", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_10", "_ZN3tbb8internal8governor6is_setEPNS0_17generic_schedulerE", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE9do_lengthERS1_PKcS5_m", "_ZN2cv7directx23convertToD3D11Texture2DERKNS_11_InputArrayEP15ID3D11Texture2D", "_ZN2cv4UMat5zerosEiii", "_ZN2cv7grabCutERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Rect_IiEES5_S5_ii", "_ZN2cv13matchTemplateERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS2_", "Java_org_opencv_calib3d_StereoSGBM_getMode_10", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE10do_unshiftERS1_PcS4_RS4_", "Java_org_opencv_ml_ANN_1MLP_setLayerSizes_10", "_ZN2cv5MatOpC2Ev", "_ZN2cv3hal11normHammingEPKhS2_i", "Java_org_opencv_imgproc_GeneralizedHoughGuil_delete", "WebPDecodeBGRA", "_ZN2cv4cuda20unregisterPageLockedERNS_3MatE", "_ZN2cv3dnn14dnn4_v201812215Layer9initVkComERKNSt6__ndk16vectorINS_3PtrINS1_14BackendWrapperEEENS3_9allocatorIS7_EEEE", "_ZNSt12length_errorD1Ev", "Java_org_opencv_calib3d_Calib3d_recoverPose_14", "cvHoughCircles", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC1ERS0_NS_3PtrINS0_9IDetectorEEERKNS0_10ParametersE", "_ZN2cv19FastFeatureDetector6createEibNS0_12DetectorTypeE", "Java_org_opencv_imgproc_Imgproc_accumulateSquare_11", "Java_org_opencv_video_VariationalRefinement_getSorIterations_10", "_ZN2cv12VideoCapturersERNS_3MatE", "_ZN2cv3dnn14dnn4_v201812215Layer7forwardERKNS_11_InputArrayERKNS_12_OutputArrayES8_", "Java_org_opencv_features2d_GFTTDetector_create_10", "_ZN2cv12VideoCaptureC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi", "_ZN3rml8internal14thread_monitor13detach_threadEl", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_12", "_ZN2cv3RNG4fillERKNS_17_InputOutputArrayEiRKNS_11_InputArrayES6_b", "_ZN2cv13destroyWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE13do_max_lengthEv", "_ZN2cv3hal6mul64fEPKdmS2_mPdmiiPv", "Java_org_opencv_ml_RTrees_load_10", "Java_org_opencv_photo_Photo_createMergeMertens_10", "cvPreCornerDetect", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_14", "_ZNKSt6__ndk114__codecvt_utf8IDsE16do_always_noconvEv", "_ZNK2cv5MatOp9transposeERKNS_7MatExprERS1_", "_ZNKSt6__ndk114__codecvt_utf8IDiE9do_lengthER9mbstate_tPKcS5_m", "_ZN2cvplERKNS_7MatExprES2_", "cvFindNextContour", "_ZNK2cv4cuda10DeviceInfo10ECCEnabledEv", "Java_org_opencv_dnn_Dnn_writeTextGraph_10", "Java_org_opencv_imgproc_Imgproc_HuMoments_10", "_ZNSt13runtime_erroraSERKS_", "Java_org_opencv_imgproc_Imgproc_cvtColor_10", "Java_org_opencv_imgproc_Imgproc_fitEllipse_10", "_ZN2cv11polarToCartERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayERNS0_6StreamE", "_ZNSt9exceptionD2Ev", "_ZNSt6__ndk117__widen_from_utf8ILm32EED2Ev", "_ZNSt6__ndk19to_stringEm", "_ZN2cv3hal11fastAtan32fEPKfS2_Pfib", "Java_org_opencv_features2d_GFTTDetector_setQualityLevel_10", "_ZNSt6__ndk110to_wstringEx", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_11", "_ZN2cv3ocl13attachContextERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPvSA_SA_", "_ZNSt6__ndk117__widen_from_utf8ILm16EED1Ev", "Java_org_opencv_features2d_Feature2D_detect_12", "_ZNK2cv12VideoCapture3getEi", "_ZN3tbb8internal8governor7sign_onEPNS0_17generic_schedulerE", "_ZN2cv3ocl8internal14isOpenCLForcedEv", "Java_org_opencv_ml_SVM_trainAuto_12", "_ZN2cv3Mat6createEiPKii", "_ZN2cv3dnn14dnn4_v2018122118readNetFromDarknetERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_photo_Photo_colorChange_12", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_16", "Java_org_opencv_ml_EM_trainM_12", "_ZN2cv2ml9ParamGridC1Ev", "_ZN2cv6detail24check_failed_MatChannelsEiRKNS0_12CheckContextE", "Java_org_opencv_ml_ParamGrid_create_11", "cvCreatePyramid", "Java_org_opencv_dnn_Net_setHalideScheduler_10", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_10", "_ZN3tbb8internal17is_malloc_used_v3Ev", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE10do_unshiftERS1_PcS4_RS4_", "_ZN2cv12LineIteratorC1ERKNS_3MatENS_6Point_IiEES5_ib", "_ZNKSt6__ndk15ctypeIwE10do_tolowerEw", "Java_org_opencv_core_Core_merge_10", "WebPDecodeARGBInto", "_ZN3tbb8internal17generic_scheduler12reload_tasksERPNS_4taskERPS3_ll", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE10do_unshiftER9mbstate_tPcS4_RS4_", "_ZN2cv8Subdiv2D11calcVoronoiEv", "cvPointPolygonTest", "Java_org_opencv_features2d_BOWTrainer_delete", "Java_org_opencv_calib3d_Calib3d_findHomography_11", "Java_org_opencv_features2d_ORB_getEdgeThreshold_10", "_ZN2cv5flann11IndexParamsC2Ev", "_ZN2cv17DescriptorMatcherD2Ev", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_ii", "Java_org_opencv_video_VariationalRefinement_setGamma_10", "_ZN2cv16accumulateSquareERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "_ZNKSt6__ndk114collate_bynameIcE12do_transformEPKcS3_", "cvGetRows", "cvCreateChildMemStorage", "_ZNSt6__ndk110to_wstringEi", "Java_org_opencv_dnn_DictValue_isString_10", "Java_org_opencv_dnn_Net_getFLOPS_12", "Java_org_opencv_features2d_Params_delete", "_ZN2cv5utils5trace7details6Region4ImplD2Ev", "Java_org_opencv_ml_ANN_1MLP_setTermCriteria_10", "Java_org_opencv_photo_Photo_createMergeMertens_11", "Java_org_opencv_ml_RTrees_setActiveVarCount_10", "_ZNK2cv11VideoWriter8isOpenedEv", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_10", "_ZN2cv3hal6min64fEPKdmS2_mPdmiiPv", "_ZN3tbb10interface78internal15task_arena_base18internal_terminateEv", "Java_org_opencv_core_Core_PCACompute2_12", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE13do_max_lengthEv", "_ZNKSt6__ndk15ctypeIwE10do_toupperEPwPKw", "Java_org_opencv_imgproc_Imgproc_HoughCircles_10", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE9do_lengthER9mbstate_tPKcS5_m", "_ZNSt6__ndk18ios_baseD2Ev", "_ZN3tbb8internal17generic_scheduler19spawn_root_and_waitERNS_4taskERPS2_", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortPoints_10", "_ZN2cv10checkRangeERKNS_11_InputArrayEbPNS_6Point_IiEEdd", "_ZN2cv3hal14cvtBGR5x5toBGREPKhmPhmiiibi", "WebPDecodeARGB", "Java_org_opencv_core_Mat_n_1assignTo__JJI", "cvInitTreeNodeIterator", "_ZN2cv3ocl6DeviceC2Ev", "Java_org_opencv_features2d_Params_set_1maxThreshold_10", "_ZN2cv3Mat7reserveEm", "_ZN2cv3dnn14dnn4_v201812219CropLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_imgproc_Imgproc_warpPerspective_11", "Java_org_opencv_video_FarnebackOpticalFlow_setNumLevels_10", "_ZNK2cv4KAZE14getDefaultNameEv", "_ZNSt6__ndk118condition_variable4waitERNS_11unique_lockINS_5mutexEEE", "_ZNK2cv10softdoublegtERKS0_", "_ZNSt6__ndk112ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZN2cv9ExceptionC2Ev", "_ZN3tbb8internal5arenaC1ERNS0_6marketEjj", "_ZN2cv3ocl6Kernel3setEiRKNS_4UMatE", "_ZN3tbb8internal6market7releaseEbb", "Java_org_opencv_video_Video_findTransformECC_12", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_7ProgramE", "cvDestroyWindow", "Java_org_opencv_features2d_DescriptorMatcher_match_10", "_ZNSt6__ndk18numpunctIcED1Ev", "Java_org_opencv_video_FarnebackOpticalFlow_create_10", "_ZNK2cv12MatAllocator3mapEPNS_8UMatDataENS_10AccessFlagE", "_ZN2cv9fastAtan2Eff", "cvStartWriteSeq", "cvSolvePoly", "_ZN2cv8UMatDataD2Ev", "_ZNSt6__ndk117__assoc_sub_state16__on_zero_sharedEv", "_ZN2cv3Mat4onesEiii", "_ZNSt6__ndk114collate_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZNK2cv11_InputArray4kindEv", "cvGetRectSubPix", "_ZNKSt6__ndk120__time_get_c_storageIcE3__xEv", "_ZNK2cv8Subdiv2D9isRightOfENS_6Point_IfEEi", "_ZN2cv3hal6resizeEiPKhmiiPhmiiddi", "Java_org_opencv_core_Mat_nPutB", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_12", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE16do_always_noconvEv", "Java_org_opencv_imgproc_Imgproc_drawContours_15", "cvInvert", "cvSetIPLAllocators", "_ZN2cv11determinantERKNS_11_InputArrayE", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_10", "_ZN2cv14correctMatchesERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_11", "_ZN2cv11bitwise_andERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_11", "_ZN2cv17validateDisparityERKNS_17_InputOutputArrayERKNS_11_InputArrayEiii", "_ZNKSt6__ndk16locale4nameEv", "Java_org_opencv_videoio_VideoCapture_open_10", "_ZN3tbb8internal5arena18has_enqueued_tasksEv", "_ZN2cv6imshowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayE", "_ZNK2cv4cuda10DeviceInfo27maxThreadsPerMultiProcessorEv", "Java_org_opencv_video_KalmanFilter_KalmanFilter_10", "_ZN2cv6detail13typeToString_Ei", "Java_org_opencv_imgproc_Imgproc_boxPoints_10", "Java_org_opencv_objdetect_QRCodeDetector_setEpsX_10", "Java_org_opencv_dnn_Dnn_readTorchBlob_10", "_ZN2cv3ocl12setUseOpenCLEb", "Java_org_opencv_features2d_DescriptorMatcher_isMaskSupported_10", "Java_org_opencv_features2d_MSER_create_18", "cvCanny", "_ZN2cv3ocl6DeviceC1ERKS1_", "_ZNK2cv3ocl6Device18deviceVersionMajorEv", "_ZNSt6__ndk114__shared_countD0Ev", "_ZNSt6__ndk112system_errorC2ENS_10error_codeE", "_ZN2cv9SparseMat5eraseEPKiPm", "Java_org_opencv_dnn_Net_setInput_11", "Java_org_opencv_core_Algorithm_empty_10", "Java_org_opencv_ml_DTrees_setTruncatePrunedTree_10", "Java_org_opencv_photo_Photo_createMergeRobertson_10", "_ZNK2cv3ocl6Device10extensionsEv", "Java_org_opencv_objdetect_QRCodeDetector_setEpsY_10", "Java_org_opencv_features2d_DescriptorMatcher_read_10", "Java_org_opencv_calib3d_Calib3d_stereoRectify_10", "_ZN2cv3ocl7ProgramC2ERKS1_", "Java_org_opencv_calib3d_Calib3d_stereoRectify_15", "_ZNSt6__ndk19to_stringEf", "Java_org_opencv_ml_SVM_setC_10", "_ZNSt6__ndk15ctypeIcED1Ev", "_ZN2cv3dnn14dnn4_v201812218MVNLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_dnn_Dnn_readNetFromTorch_12", "Java_org_opencv_core_Core_getThreadNum_10", "_ZN2cv5utils2fs8FileLockC1EPKc", "Java_org_opencv_imgproc_Imgproc_line_10", "_ZNKSt6__ndk114__codecvt_utf8IDiE13do_max_lengthEv", "_ZN2cv8Subdiv2D12clearVoronoiEv", "_ZN2cv17accumulateProductERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayES2_", "_ZNSt6__ndk117moneypunct_bynameIwLb1EE4initEPKc", "Java_org_opencv_features2d_AKAZE_setNOctaves_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThresholdGen_10", "cvNamedWindow", "Java_org_opencv_features2d_BRISK_create_110", "Java_org_opencv_imgproc_GeneralizedHough_detect_11", "_ZN2cvgeEdRKNS_3MatE", "Java_org_opencv_ml_KNearest_setEmax_10", "_ZNSt16invalid_argumentD2Ev", "_ZN2cv15haveImageReaderERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN2cv5MatOpD0Ev", "Java_org_opencv_features2d_BFMatcher_create_11", "Java_org_opencv_dnn_DictValue_getStringValue_10", "_ZN2cv27computeRecallPrecisionCurveERKNSt6__ndk16vectorINS1_INS_6DMatchENS0_9allocatorIS2_EEEENS3_IS5_EEEERKNS1_INS1_IhNS3_IhEEEENS3_ISB_EEEERNS1_INS_6Point_IfEENS3_ISH_EEEE", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE6do_outER9mbstate_tPKDsS5_RS5_PcS7_RS7_", "_ZN3tbb8internal26task_scheduler_observer_v37observeEb", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayERKS0_", "Java_org_opencv_ml_SVM_load_10", "cvFillPoly", "Java_org_opencv_photo_AlignMTB_process_11", "cvMultiplyAcc", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_getVocabulary_10", "_ZN2cv4UMat3eyeENS_5Size_IiEEi", "_ZN3tbb8internal17generic_scheduler18nested_arena_entryEPNS0_5arenaEm", "_ZNK2cv8FileNode4typeEv", "Java_org_opencv_ml_SVMSGD_getTermCriteria_10", "Java_org_opencv_features2d_BRISK_getOctaves_10", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE13do_max_lengthEv", "Java_org_opencv_core_Mat_nGetS", "_ZNKSt6__ndk114__codecvt_utf8IwE11do_encodingEv", "Java_org_opencv_core_TickMeter_getTimeMilli_10", "_ZNK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "Java_org_opencv_video_BackgroundSubtractorMOG2_apply_11", "_ZN2cv3ocl5QueueaSERKS1_", "_ZN2cv5BRISK6createERKNSt6__ndk16vectorIfNS1_9allocatorIfEEEERKNS2_IiNS3_IiEEEEffSB_", "_ZNSt6__ndk16localeC1Ev", "_ZN2cv4idctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv4UMat4onesEiPKii", "_ZN2cv3dnn14dnn4_v201812215LayerC1Ev", "_ZN2cv3hal6cmp32sEPKimS2_mPhmiiPv", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiiRKNSt6__ndk16vectorIfNS6_9allocatorIfEEEEiii", "Java_org_opencv_imgproc_Imgproc_floodFill_14", "Java_org_opencv_imgproc_Imgproc_drawContours_12", "Java_org_opencv_features2d_Params_set_1minDistBetweenBlobs_10", "Java_org_opencv_imgproc_Imgproc_distanceTransform_11", "cvWaitKey", "_ZNSt6__ndk18numpunctIwEC1Em", "_ZN2cv6dilateERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv5utils20dumpInputOutputArrayERKNS_17_InputOutputArrayE", "Java_org_opencv_core_TickMeter_getTimeMicro_10", "Java_org_opencv_imgproc_Imgproc_drawMarker_12", "Java_org_opencv_features2d_Params_get_1maxConvexity_10", "WebPEncodeLosslessRGBA", "_ZNSt6__ndk15ctypeIwED0Ev", "_ZNK2cv3Mat7reshapeEiRKNSt6__ndk16vectorIiNS1_9allocatorIiEEEE", "_ZNK2cv17DescriptorMatcher20DescriptorCollection4sizeEv", "_ZNK2cv5MatOp3absERKNS_7MatExprERS1_", "_ZN3tbb8internal8governor19terminate_schedulerEPNS0_17generic_schedulerEPKNS_19task_scheduler_initEb", "_ZNK2cv3ocl6Device19imagePitchAlignmentEv", "_ZN2cv5flann17LinearIndexParamsC2Ev", "cvStartReadChainPoints", "_ZN2cv3minEdRKNS_3MatE", "Java_org_opencv_features2d_AKAZE_getDescriptorType_10", "_ZTv0_n72_NK2cv19FastFeatureDetector14getDefaultNameEv", "_ZNSt6__ndk114__num_put_base12__format_intEPcPKcbj", "Java_org_opencv_imgproc_Imgproc_demosaicing_10", "_ZN2cv16TLSDataContainerD2Ev", "_ZN2cv3hal8gemm64fcEPKdmS2_mdS2_mdPdmiiii", "Java_org_opencv_features2d_ORB_setWTA_1K_10", "_ZN2cv7solveLPERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNKSt6__ndk114__codecvt_utf8IDsE5do_inER9mbstate_tPKcS5_RS5_PDsS7_RS7_", "_ZN2cv3ocl5QueueC1ERKNS0_7ContextERKNS0_6DeviceE", "_ZN2cv8va_intel18convertToVASurfaceEPvRKNS_11_InputArrayEjNS_5Size_IiEE", "_ZNSt13bad_exceptionD1Ev", "Java_org_opencv_core_TickMeter_stop_10", "_ZN2cv8Subdiv2D11findNearestENS_6Point_IfEEPS2_", "_ZNK2cv3ocl6Device25preferredVectorWidthShortEv", "_ZNK2cv13HOGDescriptor11getWinSigmaEv", "_ZN2cv8LMSolver6createERKNS_3PtrINS0_8CallbackEEEi", "Java_org_opencv_photo_Photo_createTonemapMantiuk_13", "Java_org_opencv_imgproc_Imgproc_polylines_13", "Java_org_opencv_video_FarnebackOpticalFlow_getPolySigma_10", "_ZNKSt6__ndk120__time_get_c_storageIwE7__am_pmEv", "_ZN2cv15warpPerspectiveERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "Java_org_opencv_video_KalmanFilter_get_1controlMatrix_10", "_ZN3tbb18captured_exception3setEPKcS2_", "_ZNK3tbb8internal27allocate_continuation_proxy4freeERNS_4taskE", "_ZN2cv12resizeWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii", "Java_org_opencv_features2d_ORB_getScaleFactor_10", "_ZNSt6__ndk116__narrow_to_utf8ILm16EED0Ev", "Java_org_opencv_features2d_FastFeatureDetector_setThreshold_10", "Java_org_opencv_photo_Photo_createCalibrateRobertson_10", "_ZN2cv5flann11IndexParams9setStringERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "WebPConfigInitInternal", "Java_org_opencv_core_Mat_n_1release", "_ZNSt6__ndk16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "Java_org_opencv_features2d_BFMatcher_BFMatcher_11", "_ZN2cv3ocl5QueueC2ERKNS0_7ContextERKNS0_6DeviceE", "Java_org_opencv_photo_MergeRobertson_process_11", "_ZN2cv9SparseMatC1ERKNS_3MatE", "Java_org_opencv_ml_ANN_1MLP_getLayerSizes_10", "_ZNSt6__ndk16thread4joinEv", "_ZN2cv6formatEPKcz", "_ZN2cv18SimpleBlobDetector6ParamsC1Ev", "_ZNKSt6__ndk114__codecvt_utf8IDsE13do_max_lengthEv", "Java_org_opencv_imgproc_Imgproc_medianBlur_10", "Java_org_opencv_features2d_Params_get_1filterByInertia_10", "_ZNSt6__ndk118__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE", "Java_org_opencv_ml_StatModel_predict_11", "_ZN2cv16AVIReadContainer9parseRiffERNSt6__ndk15dequeINS1_4pairImjEENS1_9allocatorIS4_EEEE", "_ZNK2cv5MatOp12augAssignAndERKNS_7MatExprERNS_3MatE", "_ZN3tbb19task_scheduler_init19default_num_threadsEv", "_ZN2cv9watershedERKNS_11_InputArrayERKNS_17_InputOutputArrayE", "_ZN2cv5utils2fs8FileLock13unlock_sharedEv", "_ZN3tbb8internal25deallocate_via_handler_v3EPv", "cvSquareAcc", "cvXorS", "_ZNK2cv5MatOp12augAssignAddERKNS_7MatExprERNS_3MatE", "_ZNSt6__ndk121recursive_timed_mutexD1Ev", "_ZN2cv7pyrDownERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv3dnn14dnn4_v201812213Net14getPerfProfileERNSt6__ndk16vectorIdNS3_9allocatorIdEEEE", "_ZN2cv4cuda10BufferPoolC1ERNS0_6StreamE", "_ZN2cv3ipp18setUseIPP_NotExactEb", "_ZN2cv6seqPopEP5CvSeqPv", "Java_org_opencv_calib3d_Calib3d_findChessboardCornersSB_11", "_Z7cvRoundRKN2cv9softfloatE", "Java_org_opencv_features2d_BFMatcher_create_12", "_ZN2cv3ocl17convertFromBufferEPvmiiiRNS_4UMatE", "_ZN3tbb8internal6market29mandatory_concurrency_disableEPNS0_5arenaE", "Java_org_opencv_ml_SVMSGD_setInitialStepSize_10", "Java_org_opencv_dnn_Net_forward_10", "_ZN3tbb8internal8governor24does_client_join_workersERKNS0_3rml10tbb_clientE", "_ZN2cv3ocl25predictOptimalVectorWidthERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_NS0_17OclVectorStrategyE", "_ZN2cv3ocl8PlatformC2ERKS1_", "_ZN2cv3hal6cmp16uEPKtmS2_mPhmiiPv", "Java_org_opencv_calib3d_Calib3d_filterHomographyDecompByVisibleRefpoints_10", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_11", "cvSetCaptureProperty", "_ZN2cv17CommandLineParserC1ERKS0_", "cvConvexityDefects", "_ZNK2cv17AVIWriteContainer14isOpenedStreamEv", "_ZN2cv21DetectionBasedTracker13resetTrackingEv", "_ZN2cv10softdoubleC2Em", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE11do_encodingEv", "Java_org_opencv_features2d_DescriptorMatcher_clone_11", "Java_org_opencv_features2d_AgastFeatureDetector_getType_10", "Java_org_opencv_features2d_Params_get_1minRepeatability_10", "Java_org_opencv_objdetect_HOGDescriptor_save_11", "_ZNSt11logic_errorD1Ev", "Java_org_opencv_imgproc_Imgproc_convexityDefects_10", "_ZN2cv7directx3ocl38initializeContextFromDirect3DDevice9ExEP18IDirect3DDevice9Ex", "_ZN2cv11matMulDerivERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_", "cvMax", "Java_org_opencv_imgproc_Imgproc_isContourConvex_10", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_13", "_ZN2cv3ocl7ContextC1ERKS1_", "_ZN9CvLevMarqD1Ev", "Java_org_opencv_calib3d_StereoBM_getPreFilterCap_10", "Java_org_opencv_core_Mat_n_1adjustROI", "cvReduce", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_12", "_ZN2cv3dnn14dnn4_v201812213NetC1Ev", "Java_org_opencv_features2d_Feature2D_compute_10", "cvMemStorageAlloc", "_ZN2cv3hal6add32sEPKimS2_mPimiiPv", "_ZN2cv4idftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv9SparseMat3ptrEiiibPm", "Java_org_opencv_ml_SVMSGD_load_10", "Java_org_opencv_imgcodecs_Imgcodecs_imreadmulti_10", "_ZNSt13bad_exceptionD0Ev", "Java_org_opencv_imgproc_Imgproc_convexHull_12", "Java_org_opencv_imgproc_Imgproc_fitEllipseAMS_10", "Java_org_opencv_videoio_VideoCapture_open_11", "Java_org_opencv_photo_Photo_pencilSketch_11", "Java_org_opencv_core_Core_bitwise_1xor_10", "_ZN2cv2ml6SVMSGD6createEv", "_ZN3tbb8internal17tbb_exception_ptr7destroyEv", "_ZNK2cv11_InputArray6copyToERKNS_12_OutputArrayE", "_ZNK2cv4cuda10DeviceInfo11computeModeEv", "_ZN2cv5instr8getTraceEv", "_ZN2cv8Subdiv2DC1Ev", "Java_org_opencv_ml_DTrees_setPriors_10", "_ZNSt11logic_errorC1ERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZNK2cv5MatOp4sizeERKNS_7MatExprE", "_ZN2cv3hal6add16uEPKtmS2_mPtmiiPv", "_ZN2cv13getRectSubPixERKNS_11_InputArrayENS_5Size_IiEENS_6Point_IfEERKNS_12_OutputArrayEi", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_", "_ZNSt6__ndk117__assoc_sub_state24set_value_at_thread_exitEv", "Java_org_opencv_imgproc_Imgproc_calcBackProject_10", "_ZN2cv3hal5cmp8sEPKamS2_mPhmiiPv", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_14", "Java_org_opencv_core_Core_randShuffle_10", "Java_org_opencv_calib3d_Calib3d_composeRT_16", "cvCreateFileCaptureWithPreference", "_ZNSt6__ndk110__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "cvResize", "_ZN2cv3hal8filter2DEiiiPhmS1_miiiiiiS1_miiiidib", "Java_org_opencv_ml_TrainData_getVarType_10", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE16do_always_noconvEv", "_ZNKSt13runtime_error4whatEv", "Java_org_opencv_video_FarnebackOpticalFlow_getWinSize_10", "_ZNK2cv3ocl6Device17compilerAvailableEv", "_ZNK2cv5flann5Index12getAlgorithmEv", "cvFitEllipse2", "Java_org_opencv_ml_TrainData_getCatCount_10", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEERNS5_IiNS8_IiEEEERNS5_IdNS8_IdEEEEdiiNS_5Size_IiEESJ_b", "Java_org_opencv_core_Core_getVersionMinor_10", "Java_org_opencv_ml_SVM_getP_10", "_ZNSt6__ndk115numpunct_bynameIwED0Ev", "_ZN3tbb8internal13observer_list25do_notify_entry_observersERPNS0_14observer_proxyEb", "Java_org_opencv_features2d_AKAZE_create_15", "_ZN2cv14displayOverlayERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_i", "_ZN2cv3LDA7projectERKNS_11_InputArrayE", "Java_org_opencv_imgproc_Imgproc_Sobel_10", "_ZN2cv3ocl6DeviceaSERKS1_", "_ZN2cv16BOWKMeansTrainerD2Ev", "cvConvexHull2", "_ZNK2cv5MatOp3roiERKNS_7MatExprERKNS_5RangeES6_RS1_", "Java_org_opencv_imgproc_Subdiv2D_getEdge_10", "_ZN3tbb18task_group_context26register_pending_exceptionEv", "_ZN2cv24currentParallelFrameworkEv", "Java_org_opencv_ml_Boost_getWeakCount_10", "Java_org_opencv_ml_SVM_delete", "_ZN2cv9SparseMat5eraseEiiPm", "_ZN2cv4cuda6GpuMat16defaultAllocatorEv", "_ZN2cv11minAreaRectERKNS_11_InputArrayE", "_ZNK2cv3ocl8Platform3ptrEv", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_17", "_ZN2cv3LDA19subspaceReconstructERKNS_11_InputArrayES3_S3_", "_ZN2cv3ocl9typeToStrEi", "_ZN2cv16FileNodeIteratorppEi", "_ZN2cv2ml30createConcentricSpheresTestSetEiiiRKNS_12_OutputArrayES3_", "_ZN2cv6detail17check_failed_autoEiRKNS0_12CheckContextE", "_ZN2cv3dnn14dnn4_v201812219BNLLLayer6createERKNS1_11LayerParamsE", "_ZNK2cv11VideoWriter14getBackendNameEv", "_ZNSt12domain_errorD2Ev", "_ZN2cv16FileNodeIteratorpLEi", "_ZN2cv8Subdiv2D6VertexC1ENS_6Point_IfEEbi", "cvAnd", "_ZN2cv14extractChannelERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZNSt6__ndk110to_wstringEl", "Java_org_opencv_video_Video_readOpticalFlow_10", "cvMinMaxLoc", "_ZN2cv4cuda7HostMem12getAllocatorENS1_9AllocTypeE", "Java_org_opencv_features2d_AgastFeatureDetector_create_13", "_ZNK2cv8FileNodeixEPKc", "_ZN2cv5utils5trace7details12TraceManagerC1Ev", "Java_org_opencv_dnn_Dnn_blobFromImages_12", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_iibd", "_ZN3tbb16spin_rw_mutex_v323internal_release_writerEv", "Java_org_opencv_core_Core_addSamplesDataSearchSubDirectory_10", "cvDestroyAllWindows", "_ZN2cv9undistortERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_", "Java_org_opencv_imgproc_Imgproc_Canny_12", "_ZNK2cv3Mat3invEi", "_ZN2cv3ogl6Buffer11unmapDeviceEv", "Java_org_opencv_ml_StatModel_train_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowThreshold_10", "Java_org_opencv_features2d_Params_get_1maxInertiaRatio_10", "_ZN3tbb8internal8governor17acquire_resourcesEv", "_ZN2cv3ocl14convertTypeStrEiiiPc", "_ZN2cv3ogl6Arrays7releaseEv", "_ZN2cv11RNG_MT19937cvjEv", "Java_org_opencv_ml_DTrees_delete", "_ZN2cv9FormattedD0Ev", "Java_org_opencv_core_Core_setErrorVerbosity_10", "_ZN2cv3ocl6KernelC1EPKcRKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEPSD_", "Java_org_opencv_calib3d_StereoBM_setUniquenessRatio_10", "Java_org_opencv_video_KalmanFilter_get_1measurementMatrix_10", "Java_org_opencv_imgproc_Imgproc_n_1getTextSize", "_ZNSt6__ndk112system_errorC1EiRKNS_14error_categoryE", "Java_org_opencv_objdetect_HOGDescriptor_getDescriptorSize_10", "Java_org_opencv_features2d_ORB_create_17", "_ZN2cv8KeyPoint7convertERKNSt6__ndk16vectorINS_6Point_IfEENS1_9allocatorIS4_EEEERNS2_IS0_NS5_IS0_EEEEffii", "_ZN2cv11writeScalarERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN3tbb10interface78internal15task_arena_base24internal_max_concurrencyEPKNS0_10task_arenaE", "cvSeqPushFront", "_ZNK2cv17CommandLineParser11printErrorsEv", "_ZN3tbb18captured_exceptionD2Ev", "Java_org_opencv_imgproc_GeneralizedHough_setDp_10", "Java_org_opencv_imgproc_Imgproc_fillPoly_10", "Java_org_opencv_imgproc_CLAHE_collectGarbage_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1derivAperture_10", "_ZN2cv3dnn14dnn4_v201812213Net8addLayerERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_RNS1_11LayerParamsE", "Java_org_opencv_imgproc_Imgproc_morphologyEx_12", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_14", "cvCloneMatND", "_ZN2cv3hal5add8uEPKhmS2_mPhmiiPv", "Java_org_opencv_ml_DTrees_setUse1SERule_10", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEi", "_ZNK2cv21DetectionBasedTracker13getParametersEv", "Java_org_opencv_calib3d_StereoSGBM_create_18", "_ZN2cv23getPerspectiveTransformEPKNS_6Point_IfEES3_i", "_ZN2cv3ogl6BufferC1ERKNS_11_InputArrayENS1_6TargetEb", "Java_org_opencv_core_Core_norm_15", "_ZNK2cv4cuda10DeviceInfo14totalGlobalMemEv", "_ZN2cv5flann5Index4loadERKNS_11_InputArrayERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE", "_ZN3tbb8internal3rml14private_worker14start_shutdownEv", "_ZNSt12domain_errorD1Ev", "_ZN2cv3dnn14dnn4_v201812213Net7forwardERKNS_12_OutputArrayERKNSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_HoughLines_12", "_ZNSt6__ndk117__widen_from_utf8ILm16EED2Ev", "Java_org_opencv_dnn_Dnn_NMSBoxes_11", "_ZN2cv3hal19cvtOnePlaneYUVtoBGREPKhmPhmiiibii", "Java_org_opencv_dnn_Net_getLayersCount_10", "cvAdd", "_ZN2cv3logERKNS_10softdoubleE", "Java_org_opencv_objdetect_HOGDescriptor_checkDetectorSize_10", "WebPDecode", "_ZN2cv4cuda11resetDeviceEv", "_ZN2cv21DetectionBasedTracker14detectInRegionERKNS_3MatERKNS_5Rect_IiEERNSt6__ndk16vectorIS5_NS8_9allocatorIS5_EEEE", "_ZNK2cv12_OutputArray5setToERKNS_11_InputArrayES3_", "_ZN2cv11RNG_MT199374nextEv", "_ZNK2cv9softfloatgeERKS0_", "_ZN2cv3dnn14dnn4_v201812215LayerD0Ev", "WebPPictureImportBGRX", "_ZN2cv3hal8CholeskyEPfmiS1_mi", "_ZN2cv7directx3ocl36initializeContextFromDirect3DDevice9EP16IDirect3DDevice9", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_11", "_ZNSt6__ndk110__time_getC1EPKc", "_ZN2cv22SimpleBlobDetectorImpl6detectERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS4_9allocatorIS6_EEEES3_", "_ZN3tbb10interface78internal15task_arena_base15internal_attachEv", "_ZNSt6__ndk15stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm", "cvCreateMatND", "_ZN2cv4FASTERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEEibNS_19FastFeatureDetector12DetectorTypeE", "_ZNK2cv11_InputArray5emptyEv", "Java_org_opencv_features2d_FastFeatureDetector_create_13", "_ZN2cv2ml3SVM6createEv", "_ZN2cv15setUseOptimizedEb", "Java_org_opencv_core_Core_convertScaleAbs_10", "_ZN2cv3ocl7Image2DC1ERKS1_", "_ZN2cv3Mat19getDefaultAllocatorEv", "_ZN2cv5SobelERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiddi", "Java_org_opencv_ml_TrainData_getNSamples_10", "_ZNSt6__ndk118condition_variableD1Ev", "_ZN2cv14DISOpticalFlow6createEi", "Java_org_opencv_calib3d_Calib3d_fisheye_1estimateNewCameraMatrixForUndistortRectify_10", "_ZN2cv9AlgorithmD1Ev", "_ZN2cv3ocl13ProgramSourceC2ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_minAreaRect_10", "_ZN2cv6detail17check_failed_autoEmmRKNS0_12CheckContextE", "_ZN2cv4cuda11TargetArchs6hasBinEii", "_ZNSt6__ndk16stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi", "_ZN2cv11FileStorage5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorIS7_NS5_IS7_EEEE", "_ZNK2cv3ocl7Image2D3ptrEv", "_ZN2cv3hal19cvtBGRtoTwoPlaneYUVEPKhmPhS3_miiibi", "_ZN2cv5utils2fs4globERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RNS2_6vectorIS8_NS6_IS8_EEEEbb", "_ZNK2cv4cuda10DeviceInfo12maxTexture3DEv", "Java_org_opencv_video_FarnebackOpticalFlow_setWinSize_10", "_ZNK2cv3ocl7Program6sourceEv", "_ZNSt6__ndk16locale7classicEv", "Java_org_opencv_core_Mat_n_1channels", "Java_org_opencv_core_Mat_n_1eye__III", "Java_org_opencv_features2d_AKAZE_create_17", "Java_org_opencv_core_Core_solve_11", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_dnn_Net_getLayerId_10", "Java_org_opencv_calib3d_StereoBM_setPreFilterType_10", "_ZN2cv18createMergeDebevecEv", "_ZN2cv12VideoCapture7releaseEv", "_ZNK2cv3ocl5Timer10durationNSEv", "_ZN2cv21drawChessboardCornersERKNS_17_InputOutputArrayENS_5Size_IiEERKNS_11_InputArrayEb", "cvRange", "_ZTv0_n72_NK2cv4MSER14getDefaultNameEv", "Java_org_opencv_core_Algorithm_delete", "_ZN2cv16getTickFrequencyEv", "Java_org_opencv_core_Core_trace_10", "Java_org_opencv_ml_SVM_trainAuto_11", "_ZN2cv4cuda6StreamC2Ev", "Java_org_opencv_imgproc_Imgproc_fitEllipseDirect_10", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_14", "_ZN2cv3ORB6createEifiiiiNS0_9ScoreTypeEii", "Java_org_opencv_features2d_BOWTrainer_add_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_13", "Java_org_opencv_video_VariationalRefinement_setDelta_10", "cvGetCaptureDomain", "_ZN2cv8fillPolyERKNS_17_InputOutputArrayEPPKNS_6Point_IiEEPKiiRKNS_7Scalar_IdEEiiS4_", "_ZN2cv6resizeERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv3ocl6Device10getDefaultEv", "_ZN2cv24convertPointsHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv4UMatC2ERKS0_RKNSt6__ndk16vectorINS_5RangeENS3_9allocatorIS5_EEEE", "_ZN2cv12VideoCapture3setEid", "Java_org_opencv_core_Core_cubeRoot_10", "cvReleaseImage", "Java_org_opencv_ml_SVM_setCoef0_10", "_ZNK2cv3ocl6Device22errorCorrectionSupportEv", "_ZN2cv17AVIWriteContainer13putStreamByteEi", "Java_org_opencv_imgproc_Imgproc_circle_11", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_12", "Java_org_opencv_core_Core_fastAtan2_10", "Java_org_opencv_imgproc_Imgproc_dilate_10", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_11", "_ZN2cv4UMat10deallocateEv", "Java_org_opencv_objdetect_CascadeClassifier_getFeatureType_10", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_", "Java_org_opencv_video_FarnebackOpticalFlow_getFastPyramids_10", "_ZN3tbb18task_group_context13register_withEPNS_8internal17generic_schedulerE", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_18", "_ZNSt9bad_allocC1Ev", "cvGraphAddEdge", "_ZN2cv5utils5trace7details6Region17LocationExtraData4initERKNS3_21LocationStaticStorageE", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS_9SparseMatE", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_13", "_ZN2cv3dnn14dnn4_v2018122117resetMyriadDeviceEv", "Java_org_opencv_imgproc_Imgproc_spatialGradient_11", "cvFindGraphEdge", "_ZN2cv13drawFrameAxesERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_S5_S5_fi", "Java_org_opencv_photo_TonemapReinhard_getColorAdaptation_10", "Java_org_opencv_ml_DTrees_getUse1SERule_10", "_ZN2cv27CirclesGridFinderParametersC1Ev", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_8KeyPointENS4_9allocatorIS6_EEEENS7_IS9_EEEERKNS_12_OutputArrayE", "_ZN2cv7inRangeERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZN2cv8imdecodeERKNS_11_InputArrayEiPNS_3MatE", "_ZN2cv4UMat4onesEiii", "_ZN2cv3dnn14dnn4_v201812213Net7connectENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_", "Java_org_opencv_ml_ANN_1MLP_create_10", "cvAvg", "_ZN2cv8Subdiv2D6VertexC1Ev", "_ZNK2cv9Feature2D5writeERNS_11FileStorageE", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_12", "Java_org_opencv_imgproc_Imgproc_erode_12", "_ZNK2cv11_InputArray4dimsEi", "_ZNSt8bad_castD0Ev", "Java_org_opencv_ml_TrainData_getNTestSamples_10", "Java_org_opencv_core_Core_getTickCount_10", "_ZNK2cv8FileNode5isSeqEv", "_ZNSt6__ndk112future_errorD0Ev", "Java_org_opencv_features2d_GFTTDetector_getQualityLevel_10", "_ZNK2cv9softfloateqERKS0_", "_ZN2cv12KalmanFilterC2Eiiii", "Java_org_opencv_core_Core_checkRange_14", "cvSaveMemStoragePos", "_ZN3tbb8internal9schedulerD2Ev", "Java_org_opencv_core_Mat_n_1rows", "_ZNSt15underflow_errorD0Ev", "_ZNK2cv10softdoublemiERKS0_", "_ZNSt6__ndk15ctypeIcED0Ev", "_ZNK2cv13HOGDescriptor6detectERKNS_11_InputArrayERNSt6__ndk16vectorINS_6Point_IiEENS4_9allocatorIS7_EEEERNS5_IdNS8_IdEEEEdNS_5Size_IiEESG_RKSA_", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_compute_10", "WebPDecodeRGB", "_ZNSt6__ndk118condition_variableD2Ev", "Java_org_opencv_objdetect_HOGDescriptor_load_11", "_ZNSt6__ndk18ios_base5pwordEi", "Java_org_opencv_imgproc_Imgproc_filter2D_11", "Java_org_opencv_ml_NormalBayesClassifier_predictProb_10", "_ZNSt6__ndk110__time_putC2EPKc", "_ZN2cv17DescriptorMatcher11isMaskedOutERKNS_11_InputArrayEi", "Java_org_opencv_imgproc_GeneralizedHough_delete", "_ZNK2cv11_InputArray6offsetEi", "_ZN2cv4UMatC2ERKS0_RKNS_5RangeES5_", "Java_org_opencv_video_KalmanFilter_set_1gain_10", "_ZNSt6__ndk16__clocEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowValue_10", "Java_org_opencv_imgproc_Imgproc_cornerHarris_11", "Java_org_opencv_photo_CalibrateDebevec_getLambda_10", "_ZN2cv3dnn14dnn4_v201812213Net14getLayerInputsENS1_9DictValueE", "_ZN2cv3hal4or8uEPKhmS2_mPhmiiPv", "_ZNSt6__ndk15mutexD2Ev", "_ZNK2cv3dnn14dnn4_v201812213Net14getLayerShapesERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEEiRS9_SC_", "_ZN2cv4cuda20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfiiRNS0_6StreamE", "Java_org_opencv_video_FarnebackOpticalFlow_setFastPyramids_10", "_ZN3tbb18task_group_context7bind_toEPNS_8internal17generic_schedulerE", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_11", "_ZNSt6__ndk17codecvtIcc9mbstate_tED2Ev", "_ZN2cv3dnn14dnn4_v2018122119ShuffleChannelLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_Calib3d_recoverPose_12", "Java_org_opencv_core_Core_countNonZero_10", "Java_org_opencv_core_Mat_nDump", "_ZN2cv14PCABackProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE", "_ZNK2cv17DescriptorMatcher20DescriptorCollection13getDescriptorEii", "_ZNSt6__ndk118__time_get_storageIcEC1EPKc", "Java_org_opencv_dnn_Net_getFLOPS_13", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_13", "cvReleaseData", "WebPPictureImportRGBX", "_ZN2cv3hal8CholeskyEPdmiS1_mi", "Java_org_opencv_ml_EM_create_10", "Java_org_opencv_features2d_AgastFeatureDetector_delete", "_ZN2cv2ml18LogisticRegression6createEv", "_ZNSt6__ndk112__do_nothingEPv", "_ZN2cv3ogl9Texture2D6createEiiNS1_6FormatEb", "_ZN2cvmiERKNS_7MatExprERKNS_3MatE", "cvSeqInvert", "_ZN2cv5utils5trace7details6RegionC2ERKNS3_21LocationStaticStorageE", "_ZN2cv5instr8getFlagsEv", "_ZNSt16invalid_argumentD1Ev", "_ZNSt6__ndk121recursive_timed_mutex4lockEv", "_ZN2cv8Subdiv2D8QuadEdgeC1Ev", "Java_org_opencv_calib3d_Calib3d_undistort_10", "_ZN2cv3Mat9adjustROIEiiii", "_ZNK2cv13HOGDescriptor17checkDetectorSizeEv", "_ZN3tbb8internal8governor12tls_value_ofEPNS0_17generic_schedulerE", "_ZN2cv9ExceptionC2EiRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_i", "Java_org_opencv_imgproc_Imgproc_boxFilter_13", "_ZNK2cv17FlannBasedMatcher15isMaskSupportedEv", "_ZN2cv3dnn14dnn4_v201812215Layer17outputNameToIndexERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZN2cv12VideoCapture4grabEv", "Java_org_opencv_calib3d_Calib3d_fisheye_1estimateNewCameraMatrixForUndistortRectify_11", "Java_org_opencv_imgproc_Imgproc_threshold_10", "_ZN2cv17AVIWriteContainer13startWriteAVIEi", "_ZN2cv5phaseERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_10", "Java_org_opencv_videoio_Videoio_getBackendName_10", "Java_org_opencv_videoio_VideoWriter_set_10", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_10", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEEdiiNS_5Size_IiEESD_", "_ZN2cv8FileNode8setValueEiPKvi", "_ZN2cv4lineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_ZN2cv3dnn14dnn4_v2018122113ProposalLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_video_KalmanFilter_set_1statePost_10", "_ZNKSt6__ndk114collate_bynameIwE10do_compareEPKwS3_S3_S3_", "Java_org_opencv_imgproc_Imgproc_convertMaps_10", "Java_org_opencv_features2d_Features2d_drawMatches_13", "Java_org_opencv_dnn_Dnn_NMSBoxes_13", "_ZN2cv9floodFillERKNS_17_InputOutputArrayENS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "Java_org_opencv_objdetect_QRCodeDetector_delete", "Java_org_opencv_ml_TrainData_setTrainTestSplit_11", "_ZNK2cv2ml9StatModel11getVarCountEv", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiddRNS0_6StreamE", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE16do_always_noconvEv", "_ZN2cv3hal12cvtGraytoBGREPKhmPhmiiii", "Java_org_opencv_core_Core_pow_10", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_110", "Java_org_opencv_core_Core_randn_10", "Java_org_opencv_features2d_MSER_setPass2Only_10", "Java_org_opencv_features2d_Feature2D_detect_11", "Java_org_opencv_photo_AlignMTB_setCut_10", "_ZN2cv4readERKNS_8FileNodeERNS_3MatERKS3_", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEiRNS0_12ObjectStatusE", "_ZNSt6__ndk115recursive_mutex4lockEv", "_ZN2cv3hal3expEPKdPdi", "_ZNK2cv9softfloatrmERKS0_", "Java_org_opencv_calib3d_Calib3d_findHomography_14", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoCalibrate_11", "_ZN2cvplERKNS_7MatExprERKNS_7Scalar_IdEE", "_ZN2cv9SparseMat3ptrEibPm", "_ZN3tbb8internal14__TBB_InitOnce7add_refEv", "_ZNK2cv8Subdiv2D11checkSubdivEv", "_ZN2cv3ocl13ProgramSourceC2EPKc", "_ZNSt6__ndk119__shared_weak_count10__add_weakEv", "Java_org_opencv_features2d_AKAZE_setThreshold_10", "_ZN2cv4cuda5Event17waitForCompletionEv", "_ZN2cv3dnn14dnn4_v201812218ELULayer6createERKNS1_11LayerParamsE", "_ZN2cv5flann12SearchParamsC1Eifb", "Java_org_opencv_imgproc_GeneralizedHough_getCannyHighThresh_10", "Java_org_opencv_calib3d_StereoSGBM_delete", "Java_org_opencv_calib3d_Calib3d_findHomography_10", "_ZNSt6__ndk114__num_get_base10__get_baseERNS_8ios_baseE", "_ZN2cv16setOpenGlContextERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "cvSubRS", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_11", "Java_org_opencv_imgproc_Imgproc_ellipse_15", "Java_org_opencv_imgproc_GeneralizedHough_setCannyHighThresh_10", "Java_org_opencv_features2d_DescriptorMatcher_match_12", "Java_org_opencv_features2d_GFTTDetector_create_19", "cvCloneGraph", "_ZN2cv3hal5sub8uEPKhmS2_mPhmiiPv", "Java_org_opencv_objdetect_CascadeClassifier_isOldFormatCascade_10", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_13", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE11do_encodingEv", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_10", "Java_org_opencv_video_KalmanFilter_get_1measurementNoiseCov_10", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_11", "Java_org_opencv_core_Core_dft_10", "_ZN3tbb8internal3rml14private_serverD1Ev", "Java_org_opencv_imgproc_Imgproc_getFontScaleFromHeight_11", "Java_org_opencv_video_DISOpticalFlow_setVariationalRefinementDelta_10", "_ZN2cv20perspectiveTransformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "cvSetTrackbarMax", "Java_org_opencv_core_Mat_n_1empty", "_ZNKSt6__ndk18numpunctIwE12do_falsenameEv", "cvCmp", "Java_org_opencv_ml_KNearest_findNearest_11", "_ZNK2cv8FileNode5beginEv", "_ZN2cv5utils2fs8FileLock6unlockEv", "_ZN2cv4cuda28getCudaDriverApiErrorMessageEi", "_ZNKSt6__ndk112ctype_bynameIwE9do_narrowEPKwS3_cPc", "_ZN2cv7directx27convertFromDirect3DSurface9EP17IDirect3DSurface9RKNS_12_OutputArrayEPv", "Java_org_opencv_ml_EM_trainEM_12", "Java_org_opencv_ml_ANN_1MLP_getRpropDW0_10", "_Z9cvRound64RKN2cv10softdoubleE", "Java_org_opencv_calib3d_Calib3d_recoverPose_18", "_ZNSt6__ndk115__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE", "Java_org_opencv_features2d_Feature2D_defaultNorm_10", "_ZN3tbb8internal8governor14auto_terminateEPv", "_ZNK2cv8FileNodeixERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cvneEdRKNS_3MatE", "cvCornerEigenValsAndVecs", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_14", "Java_org_opencv_videoio_VideoWriter_open_11", "Java_org_opencv_photo_Photo_detailEnhance_11", "_ZN2cv4cuda25getCudaEnabledDeviceCountEv", "Java_org_opencv_core_Core_mulTransposed_12", "_ZN2cv4sqrtERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_11", "_ZNK2cv11_InputArray4rowsEi", "Java_org_opencv_core_Core_divide_17", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEd", "cvLaplace", "_ZN2cv3ocl16convertFromImageEPvRNS_4UMatE", "_ZN2cv12VideoCaptureC2Eii", "_ZNSt6__ndk110to_wstringEm", "_ZN2cv6repeatERKNS_3MatEii", "cvDisplayOverlay", "_ZNSt6__ndk16localeC2EPKc", "_ZNSt6__ndk115numpunct_bynameIwEC2EPKcm", "_ZNSt6__ndk110__time_putD2Ev", "_ZN2cv3ocl7Image2DaSERKS1_", "_ZN2cv11VideoWriterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEidNS_5Size_IiEEb", "cvGetPerspectiveTransform", "_ZNKSt6__ndk15ctypeIwE10do_scan_isEmPKwS3_", "Java_org_opencv_calib3d_StereoSGBM_create_17", "Java_org_opencv_features2d_AgastFeatureDetector_getThreshold_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowValue_10", "_ZNSt6__ndk114collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE16do_always_noconvEv", "Java_org_opencv_imgproc_Imgproc_erode_11", "_ZN2cv3MatC1ERKS0_RKNSt6__ndk16vectorINS_5RangeENS3_9allocatorIS5_EEEE", "Java_org_opencv_calib3d_Calib3d_triangulatePoints_10", "_ZN2cv5erodeERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv16FileNodeIteratorC1Ev", "Java_org_opencv_core_Algorithm_getDefaultName_10", "_ZNK2cv3ocl6Device16maxWorkItemSizesEPm", "_ZN2cv3ogl9Texture2DC2Ev", "_ZN2cv16writeOpticalFlowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayE", "_ZNSt6__ndk116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj", "_ZN3tbb8internal17generic_scheduler5spawnERNS_4taskERPS2_", "_ZTv0_n72_NK2cv12GFTTDetector14getDefaultNameEv", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE13do_max_lengthEv", "Java_org_opencv_core_Core_normalize_13", "_ZN2cv16FileNodeIteratorC1ERKNS_8FileNodeEb", "Java_org_opencv_dnn_Net_getFLOPS_10", "_ZN2cv19getRotationMatrix2DENS_6Point_IfEEdd", "_ZN2cv3ocl6KernelC1EPKcRKNS0_7ProgramE", "_ZNK2cv4UMat3invEi", "_ZNKSt6__ndk15ctypeIwE8do_widenEc", "Java_org_opencv_core_Mat_n_1copyTo__JJJ", "Java_org_opencv_calib3d_Calib3d_fisheye_1projectPoints_12", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE13do_max_lengthEv", "cvCircle", "_ZNK2cv10softdoubleltERKS0_", "_ZNSt6__ndk114error_categoryC2Ev", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_17", "cvQueryFrame", "Java_org_opencv_dnn_DictValue_isInt_10", "_ZN2cv3dnn14dnn4_v201812213Net18setHalideSchedulerERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZNKSt6__ndk118__time_get_storageIcE15__do_date_orderEv", "Java_org_opencv_ml_EM_trainM_13", "_ZN2cv5utils2fs17getCacheDirectoryEPKcS3_", "_ZN2cv4cuda6GpuMatC1ENS_5Size_IiEEiPvm", "_ZNK2cv8FileNode8isStringEv", "_ZNSt6__ndk16localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi", "cvCreateFileCapture", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_setVocabulary_10", "_ZNSt6__ndk14stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm", "Java_org_opencv_calib3d_StereoSGBM_getP1_10", "Java_org_opencv_ml_ANN_1MLP_setRpropDW0_10", "Java_org_opencv_imgproc_Subdiv2D_getLeadingEdgeList_10", "Java_org_opencv_features2d_AKAZE_getDescriptorSize_10", "_ZN2cv9softfloatC1Em", "Java_org_opencv_dnn_Dnn_blobFromImages_15", "_ZN2cv3dnn14dnn4_v2018122114blobFromImagesERKNS_11_InputArrayERKNS_12_OutputArrayEdNS_5Size_IiEERKNS_7Scalar_IdEEbbi", "_ZN2cv3dnn14dnn4_v201812218NMSBoxesERKNSt6__ndk16vectorINS_5Rect_IdEENS2_9allocatorIS5_EEEERKNS3_IfNS6_IfEEEEffRNS3_IiNS6_IiEEEEfi", "_ZN2cv16AVIReadContainer9readFrameENSt6__ndk116__deque_iteratorINS1_4pairImjEEPS4_RS4_PS5_lLl256EEE", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_12", "_ZN2cv17CommandLineParserC2EiPKPKcRKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_16", "Java_org_opencv_imgproc_Imgproc_boundingRect_10", "_ZN2cv3ipp19getIppErrorLocationEv", "_ZNK2cv5AKAZE14getDefaultNameEv", "Java_org_opencv_imgproc_Imgproc_warpPerspective_13", "_ZN2cv21DetectionBasedTracker15InnerParametersC1Ev", "_ZN2cv9Feature2D7computeERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS4_9allocatorIS6_EEEERKNS_12_OutputArrayE", "_ZNSt6__ndk18ios_base34__set_failbit_and_consider_rethrowEv", "Java_org_opencv_ml_DTrees_getRegressionAccuracy_10", "cvTranspose", "_ZN2cv11RNG_MT199377uniformEdd", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE11do_encodingEv", "Java_org_opencv_imgproc_Imgproc_pyrUp_11", "cvSetAdd", "_ZN2cv3maxEdRKNS_3MatE", "Java_org_opencv_core_Mat_n_1cols", "Java_org_opencv_imgproc_Imgproc_ellipse_10", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getFlags_10", "Java_org_opencv_imgproc_Subdiv2D_initDelaunay_10", "Java_org_opencv_calib3d_Calib3d_recoverPose_11", "_ZNK2cv4UMat8ndoffsetEPm", "Java_org_opencv_ml_KNearest_getEmax_10", "_ZN2cv7samples32addSamplesDataSearchSubDirectoryERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZNK2cv4UMat3dotERKNS_11_InputArrayE", "_ZN2cv3MataSERKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_erode_13", "Java_org_opencv_imgproc_Imgproc_line_12", "cvGetReal3D", "Java_org_opencv_imgproc_Imgproc_floodFill_11", "Java_org_opencv_calib3d_Calib3d_stereoRectify_11", "Java_org_opencv_features2d_Params_get_1thresholdStep_10", "Java_org_opencv_imgproc_Imgproc_GaussianBlur_11", "_ZNSt6__ndk117__assoc_sub_state9set_valueEv", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_12", "_ZNSt10bad_typeidD2Ev", "Java_org_opencv_ml_LogisticRegression_load_11", "_ZN3tbb19task_scheduler_init18internal_terminateEb", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_14", "_ZN2cv17DescriptorMatcher6createERKNS0_11MatcherTypeE", "_ZN2cv5utils5trace7details6Region4Impl14registerRegionERNS2_23TraceManagerThreadLocalE", "Java_org_opencv_core_Core_max_10", "Java_org_opencv_features2d_DescriptorMatcher_create_11", "_ZNSt6__ndk110to_wstringEf", "cvLine", "Java_org_opencv_objdetect_HOGDescriptor_detect_14", "Java_org_opencv_core_Core_PCABackProject_10", "Java_org_opencv_ml_EM_trainM_10", "Java_org_opencv_core_Core_bitwise_1xor_11", "_ZNSt6__ndk115numpunct_bynameIwE6__initEPKc", "_ZNSt6__ndk110__time_getD1Ev", "cvCmpS", "Java_org_opencv_features2d_KAZE_getUpright_10", "_ZNSt6__ndk16localeaSERKS0_", "_ZNSt6__ndk117moneypunct_bynameIcLb0EE4initEPKc", "_ZNSt6__ndk125notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE", "_ZNK2cv12VideoCapture14getBackendNameEv", "_ZN2cv16AVIReadContainer21parseAviWithFrameListERNSt6__ndk15dequeINS1_4pairImjEENS1_9allocatorIS4_EEEENS_6CodecsE", "_ZN2cv3hal13addWeighted8sEPKamS2_mPamiiPv", "_ZNSt6__ndk16thread6detachEv", "_ZN2cv3ogl9Texture2DC2ERKNS_11_InputArrayEb", "cvGetNormalizedCentralMoment", "Java_org_opencv_features2d_AgastFeatureDetector_create_12", "Java_org_opencv_ml_ANN_1MLP_setRpropDWPlus_10", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE10do_unshiftER9mbstate_tPcS4_RS4_", "Java_org_opencv_ml_SVM_trainAuto_14", "Java_org_opencv_photo_Photo_createTonemapReinhard_14", "_ZN2cv4UMat4onesENS_5Size_IiEEi", "_ZNSt6__ndk18ios_base5imbueERKNS_6localeE", "Java_org_opencv_core_Core_add_12", "Java_org_opencv_ml_Boost_create_10", "_ZN2cv8FileNodeC1Ev", "_ZNSt15underflow_errorD1Ev", "Java_org_opencv_dnn_Net_getUnconnectedOutLayersNames_10", "_ZNSt6__ndk115numpunct_bynameIcEC1EPKcm", "cvPtr3D", "_ZN2cv11linearPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "Java_org_opencv_core_Core_setRNGSeed_10", "Java_org_opencv_imgproc_LineSegmentDetector_delete", "_ZN2cv21createTonemapReinhardEffff", "Java_org_opencv_features2d_Params_set_1minRepeatability_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork3runEv", "Java_org_opencv_ml_DTrees_setUseSurrogates_10", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprEdRS1_", "_ZN2cv3Mat5setToERKNS_11_InputArrayES3_", "cvFillConvexPoly", "Java_org_opencv_features2d_Params_get_1minDistBetweenBlobs_10", "Java_org_opencv_videoio_VideoWriter_isOpened_10", "Java_org_opencv_imgproc_Imgproc_HoughCircles_14", "_ZN2cv9minMaxLocERKNS_9SparseMatEPdS3_PiS4_", "_ZNK2cv3dnn14dnn4_v201812213Net15getLayersShapesERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEERS7_RNS4_INS4_IS7_NS5_IS7_EEEENS5_ISC_EEEESF_", "Java_org_opencv_imgproc_Imgproc_morphologyEx_11", "_ZNSt6__ndk112future_errorD1Ev", "_ZNK2cv5MatOp11elementWiseERKNS_7MatExprE", "_ZN2cv4UMat5zerosENS_5Size_IiEEi", "_ZNK3tbb18captured_exception4nameEv", "cvExp", "_ZNK2cv3PCA7projectERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv3sinERKNS_10softdoubleE", "Java_org_opencv_features2d_AKAZE_delete", "cvGet2D", "_ZN2cv3ocl10haveOpenCLEv", "_ZN2cv11RNG_MT19937C2Ev", "_ZNK2cv3ocl6Device16maxWorkGroupSizeEv", "_ZN2cv3ocl6Kernel7runTaskEbRKNS0_5QueueE", "_ZN2cv7fitLineERKNS_11_InputArrayERKNS_12_OutputArrayEiddd", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_11", "_ZN2cv3ocl6DeviceC1EPv", "cvSet3D", "Java_org_opencv_features2d_BOWTrainer_cluster_11", "_ZN2cv2ml12randMVNormalERKNS_11_InputArrayES3_iRKNS_12_OutputArrayE", "WebPEncodeRGB", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_descriptorSize_10", "cvLog", "_ZNSt6__ndk114error_categoryD2Ev", "Java_org_opencv_features2d_Params_get_1minArea_10", "_ZNSt20bad_array_new_lengthC1Ev", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_13", "Java_org_opencv_imgproc_Subdiv2D_insert_11", "Java_org_opencv_core_Core_dct_10", "_ZNSt6__ndk15ctypeIcEC1EPKmbm", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "Java_org_opencv_calib3d_StereoMatcher_setMinDisparity_10", "_ZN2cv9softfloatC2El", "Java_org_opencv_core_Core_divide_11", "_ZNSt6__ndk15stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "Java_org_opencv_imgproc_Imgproc_integral2_11", "Java_org_opencv_ml_ANN_1MLP_setBackpropWeightScale_10", "_ZNK2cv3ocl6Kernel5emptyEv", "_ZNK2cv12_OutputArray15getOGlBufferRefEv", "_ZN2cv16AVIReadContainer13parseHdrlListENS_6CodecsE", "Java_org_opencv_videoio_VideoCapture_read_10", "_ZN2cv3hal3expEPKfPfi", "_ZNK2cv9Algorithm5writeERKNS_3PtrINS_11FileStorageEEERKNSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE", "_ZN2cv19createHanningWindowERKNS_12_OutputArrayENS_5Size_IiEEi", "_ZNK2cv3ocl6Device21nativeVectorWidthLongEv", "_ZN2cv8subtractERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "Java_org_opencv_ml_EM_setTermCriteria_10", "_ZN2cv3hal6sub16uEPKtmS2_mPtmiiPv", "_ZN2cv31createRANSACPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEiddi", "cvGetImageROI", "_ZNK2cv16BOWKMeansTrainer7clusterEv", "Java_org_opencv_dnn_DictValue_getStringValue_11", "cvSmooth", "cvSetHistBinRanges", "Java_org_opencv_ml_SVM_setType_10", "Java_org_opencv_imgproc_Imgproc_integral_10", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_10", "_ZNK2cv8Subdiv2D18getLeadingEdgeListERNSt6__ndk16vectorIiNS1_9allocatorIiEEEE", "Java_org_opencv_imgproc_Imgproc_matchTemplate_11", "_ZN2cv6copyToERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv4cuda18getNppErrorMessageEi", "_ZN3tbb8internal36get_initial_auto_partitioner_divisorEv", "_ZNKSt6__ndk112ctype_bynameIcE10do_toupperEPcPKc", "cvInRangeS", "_ZNSt6__ndk116__narrow_to_utf8ILm16EED2Ev", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE5do_inER9mbstate_tPKcS5_RS5_PDsS7_RS7_", "cvSetTrackbarPos", "cvFastArctan", "_ZNK2cv4cuda6StreamcvMS1_KFvvEEv", "WebPMemoryWriterInit", "_ZN2cv11VideoWriterC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiidNS_5Size_IiEEb", "_ZN3tbb10interface78internal15task_arena_base19internal_initializeEv", "Java_org_opencv_video_BackgroundSubtractorKNN_getNSamples_10", "Java_org_opencv_imgproc_Imgproc_ellipse_14", "_ZN2cv18getAffineTransformERKNS_11_InputArrayES2_", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_11", "Java_org_opencv_core_TickMeter_TickMeter_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarThreshold_10", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_11", "Java_org_opencv_core_Core_norm_14", "Java_org_opencv_ml_EM_trainE_13", "_ZNK3tbb18task_group_context28is_group_execution_cancelledEv", "_ZN2cv6detail17check_failed_autoEddRKNS0_12CheckContextE", "Java_org_opencv_ml_SVM_getSupportVectors_10", "_ZNK2cv9softfloatltERKS0_", "Java_org_opencv_video_KalmanFilter_get_1transitionMatrix_10", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterBinEii", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_13", "Java_org_opencv_ml_SVM_setKernel_10", "Java_org_opencv_imgproc_Imgproc_resize_10", "Java_org_opencv_features2d_ORB_getScoreType_10", "_ZN3tbb8internal5arena24restore_priority_if_needEv", "_ZNKSt6__ndk114__codecvt_utf8IDsE10do_unshiftER9mbstate_tPcS4_RS4_", "_ZNK2cv17CommandLineParser12printMessageEv", "_ZN2cv7inpaintERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZNKSt6__ndk120__time_get_c_storageIcE7__weeksEv", "Java_org_opencv_calib3d_StereoMatcher_getMinDisparity_10", "_ZN2cv3addERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "Java_org_opencv_video_DISOpticalFlow_getPatchSize_10", "WebPEncodeBGRA", "_ZN2cv4cuda6Stream19enqueueHostCallbackEPFviPvES2_", "Java_org_opencv_ml_ANN_1MLP_getBackpropMomentumScale_10", "cvPutText", "_ZN2cv20createTonemapMantiukEfff", "_ZNKSt6__ndk112ctype_bynameIwE10do_toupperEPwPKw", "Java_org_opencv_core_TickMeter_getTimeTicks_10", "_ZNK2cv4cuda5Event15queryIfCompleteEv", "_ZNKSt6__ndk120__time_get_c_storageIcE7__am_pmEv", "_ZN2cv12typeToStringEi", "_ZN2cv17AVIWriteContainer17writeStreamHeaderENS_6CodecsE", "Java_org_opencv_dnn_Net_delete", "Java_org_opencv_features2d_Feature2D_detectAndCompute_11", "_ZN2cv14setTrackbarPosERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_i", "Java_org_opencv_features2d_AgastFeatureDetector_getDefaultName_10", "_ZN2cv20minEnclosingTriangleERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv4readERKNS_8FileNodeERNSt6__ndk16vectorINS_6DMatchENS3_9allocatorIS5_EEEE", "_ZNK2cv3ocl6Device26preferredVectorWidthDoubleEv", "_ZN2cv8FileNode5isMapEi", "Java_org_opencv_photo_AlignMTB_computeBitmaps_10", "_ZNK2cv4cuda10DeviceInfo12regsPerBlockEv", "_ZNSt6__ndk118condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILl1ELl1000000000EEEEEEE", "_ZN2cv2ml9ParamGridC2Eddd", "Java_org_opencv_objdetect_HOGDescriptor_get_1nlevels_10", "_ZNK2cv4cuda10DeviceInfo12maxTexture1DEv", "Java_org_opencv_photo_Photo_createTonemap_10", "Java_org_opencv_imgproc_Imgproc_accumulate_11", "cvInitSparseMatIterator", "_ZNK2cv5flann5Index11getDistanceEv", "_ZN2cv3hal5DFT1D6createEiiiiPb", "_ZN2cv12createButtonERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPFviPvES9_ib", "_ZN2cv3hal10absdiff64fEPKdmS2_mPdmiiPv", "_ZNSt9type_infoD2Ev", "_ZN2cv8CholeskyEPfmiS0_mi", "Java_org_opencv_photo_AlignExposures_process_10", "_ZN2cv5utils5trace7details12TraceManagerC2Ev", "cvAbsDiff", "_ZNSt6__ndk111__call_onceERVmPvPFvS2_E", "_ZN3tbb8internal14observer_proxy9is_globalEv", "_ZN2cv15getNumberOfCPUsEv", "_ZN2cv17CommandLineParserD2Ev", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_12", "_ZN2cv3hal6cmp16sEPKsmS2_mPhmiiPv", "_ZN2cv11VideoWriterD0Ev", "_ZNSt6__ndk116__narrow_to_utf8ILm16EED1Ev", "Java_org_opencv_core_Core_bitwise_1not_10", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEES2_SA_RKNS4_INS4_INS_6DMatchENS6_ISB_EEEENS6_ISD_EEEERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESO_RKNS4_INS4_IcNS6_IcEEEENS6_ISQ_EEEENS_16DrawMatchesFlagsE", "Java_org_opencv_imgproc_Subdiv2D_getVertex_10", "_ZN2cv9RodriguesERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "Java_org_opencv_video_FarnebackOpticalFlow_create_16", "_ZNSt6__ndk118__time_get_storageIwEC1EPKc", "cvEllipse", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionEiRKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEERmSC_", "Java_org_opencv_video_DISOpticalFlow_getPatchStride_10", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC1EiN7cvflann20flann_centers_init_tEii", "_ZNK2cv12_OutputArray7releaseEv", "WebPGetInfo", "_ZN2cv3hal6exp32fEPKfPfi", "Java_org_opencv_imgproc_Imgproc_dilate_12", "_ZNK2cv3Mat11checkVectorEiib", "_ZN2cv4cuda9setDeviceEi", "Java_org_opencv_imgproc_Imgproc_demosaicing_11", "_ZN2cv5utils2fs15createDirectoryERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_15", "_ZNK2cv9softfloatdvERKS0_", "_ZN2cv3hal7recip8uEPKhmS2_mPhmiiPv", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_10", "_ZNSt13runtime_errorC2ERKS_", "_ZNSt6__ndk115numpunct_bynameIcEC2EPKcm", "_ZN2cv3dnn14dnn4_v201812215LayerC1ERKNS1_11LayerParamsE", "_ZN2cv3ocl6DeviceD1Ev", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_19", "Java_org_opencv_imgproc_Imgproc_getPerspectiveTransform_10", "_ZN2cv13HOGDescriptor14setSVMDetectorERKNS_11_InputArrayE", "Java_org_opencv_ml_DTrees_load_10", "Java_org_opencv_ml_ANN_1MLP_getAnnealItePerStep_10", "_ZN2cv7putTextERKNS_17_InputOutputArrayERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_6Point_IiEEidNS_7Scalar_IdEEiib", "_ZNKSt6__ndk15ctypeIwE8do_widenEPKcS3_Pw", "Java_org_opencv_dnn_Net_getUnconnectedOutLayers_10", "_ZN2cv11bitwise_xorERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZN2cv4UMat20updateContinuityFlagEv", "_ZN2cv17adaptiveThresholdERKNS_11_InputArrayERKNS_12_OutputArrayEdiiid", "_ZNSt6__ndk112__next_primeEm", "cvSet1D", "_ZNK2cv5flann11IndexParams6getAllERNSt6__ndk16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEERNS3_INS0_14FlannIndexTypeENS7_ISD_EEEESC_RNS3_IdNS7_IdEEEE", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayE", "_ZN2cv3minERKNS_3MatES2_RS0_", "_ZN2cv3hal8merge64sEPPKlPlii", "_ZNK3tbb4task26is_owned_by_current_threadEv", "_ZN2cv15checkChessboardERKNS_11_InputArrayENS_5Size_IiEE", "_ZN2cv17eigenNonSymmetricERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "cvFree_", "_ZNK2cv14DefaultDeleterI9_IplImageEclEPS1_", "cvGetImageCOI", "Java_org_opencv_core_Core_batchDistance_13", "_ZN2cv11RNG_MT19937C1Ev", "_ZN2cv8va_intel20convertFromVASurfaceEPvjNS_5Size_IiEERKNS_12_OutputArrayE", "_ZN2cv3dnn14dnn4_v201812213Net22readFromModelOptimizerERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_", "_ZN2cv21setOpenGlDrawCallbackERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPFvPvES9_", "_ZN2cv3hal14addWeighted64fEPKdmS2_mPdmiiPv", "Java_org_opencv_imgproc_CLAHE_apply_10", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_14", "_ZN2cv3hal11normHammingEPKhii", "Java_org_opencv_objdetect_HOGDescriptor_delete", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_10", "_ZN2cv5splitERKNS_3MatEPS0_", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortImage_12", "_ZNK2cv7MatExpr4typeEv", "_ZNK2cv12MatAllocator23getBufferPoolControllerEPKc", "Java_org_opencv_photo_Photo_createCalibrateRobertson_12", "Java_org_opencv_imgproc_Imgproc_getRectSubPix_11", "_ZN2cv3minERKNS_4UMatES2_RS0_", "Java_org_opencv_ml_EM_trainE_11", "cvArcLength", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getTermCriteria_10", "_ZN2cv22createMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv16TLSDataContainerD1Ev", "_ZN2cv5flann11IndexParams6setIntERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi", "_ZN2cv3hal6max16uEPKtmS2_mPtmiiPv", "_ZN2cv11HoughLinesPERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "_ZN2cv3ipp9setUseIPPEb", "Java_org_opencv_imgproc_Subdiv2D_edgeDst_11", "Java_org_opencv_core_Core_completeSymm_10", "_ZNSt6__ndk117__widen_from_utf8ILm32EED0Ev", "Java_org_opencv_video_BackgroundSubtractorKNN_setShadowThreshold_10", "Java_org_opencv_video_FarnebackOpticalFlow_create_18", "_ZNKSt6__ndk112bad_weak_ptr4whatEv", "Java_org_opencv_ml_LogisticRegression_getLearningRate_10", "_ZN2cv3hal13addRNGBias64fEPdPKdi", "_ZN2cv3ogl6BufferC2Ev", "_ZNKSt20bad_array_new_length4whatEv", "_ZNK2cv3ocl6Device22globalMemCacheLineSizeEv", "_ZNSt6__ndk110to_wstringEe", "_ZNSt6__ndk112system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Java_org_opencv_core_Mat_nPutBwOffset", "_ZN2cv3hal14addWeighted16uEPKtmS2_mPtmiiPv", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_13", "Java_org_opencv_core_Core_sqrt_10", "_ZN3tbb21set_assertion_handlerEPFvPKciS1_S1_E", "_ZNSt6__ndk18ios_base5clearEj", "_ZN2cv4readERKNS_8FileNodeERNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEE", "Java_org_opencv_core_Core_multiply_14", "cvSampleLine", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_10", "Java_org_opencv_features2d_FastFeatureDetector_create_11", "cvSet2D", "WebPDecodeBGR", "_ZNKSt6__ndk112ctype_bynameIcE10do_toupperEc", "_ZN2cv3ocl6Kernel3setEiRKNS0_9KernelArgE", "cvClearHist", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayE", "_ZN3tbb8internal12dynamic_linkEPKcPKNS0_23dynamic_link_descriptorEmPPvi", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_13", "_ZN2cv9FormattedD2Ev", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_10", "_ZN2cv7noArrayEv", "_ZNSt6__ndk112ctype_bynameIwED1Ev", "_ZNK2cv3PCA7projectERKNS_11_InputArrayE", "_ZN9CvLevMarqD2Ev", "Java_org_opencv_photo_Photo_inpaint_10", "Java_org_opencv_features2d_FastFeatureDetector_getNonmaxSuppression_10", "_ZN2cv3ocl7Context10getDefaultEb", "_ZN2cv3hal9fastAtan2EPKfS2_Pfib", "_ZN2cv2ml5Boost6createEv", "_ZNK2cv5MatOp17augAssignSubtractERKNS_7MatExprERNS_3MatE", "Java_org_opencv_core_Core_multiply_12", "Java_org_opencv_photo_CalibrateCRF_delete", "_ZN2cv11RNG_MT19937C1Ej", "_ZN2cv5instr18useInstrumentationEv", "Java_org_opencv_core_Core_absdiff_11", "_ZN2cv14DownhillSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEERKNS_11_InputArrayENS_12TermCriteriaE", "Java_org_opencv_video_VariationalRefinement_getGamma_10", "_ZNK2cv11_InputArray12getOGlBufferEv", "_ZNSt6__ndk17codecvtIwc9mbstate_tED1Ev", "_ZNK2cv4cuda10DeviceInfo8warpSizeEv", "_ZNSt6__ndk17promiseIvE9set_valueEv", "_ZNSt6__ndk119declare_no_pointersEPcm", "_ZN2cv17DescriptorMatcherD1Ev", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE9do_lengthERS1_PKcS5_m", "Java_org_opencv_core_TickMeter_getTimeSec_10", "Java_org_opencv_calib3d_Calib3d_recoverPose_13", "_ZNK2cv17DescriptorMatcher10checkMasksERKNS_11_InputArrayEi", "_ZN2cv9rectangleERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiii", "_ZNK2cv13HOGDescriptor15computeGradientERKNS_11_InputArrayERKNS_17_InputOutputArrayES6_NS_5Size_IiEES8_", "_ZN2cv3dnn14dnn4_v201812215Layer13setParamsFromERKNS1_11LayerParamsE", "Java_org_opencv_imgproc_Imgproc_calcHist_11", "Java_org_opencv_ml_EM_predict_10", "_ZN2cv3hal10invSqrt64fEPKdPdi", "cvGuiBoxReport", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_15", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMax_10", "Java_org_opencv_calib3d_Calib3d_rectify3Collinear_10", "_ZN2cv7samples8findFileERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbb", "_ZNSt6__ndk17codecvtIDic9mbstate_tED0Ev", "_ZN2cv3ocl7Image2DD1Ev", "cvFlip", "_ZN2cv9boxPointsENS_11RotatedRectERKNS_12_OutputArrayE", "_ZNKSt6__ndk18ios_base6getlocEv", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidd", "_ZNKSt6__ndk112ctype_bynameIwE10do_scan_isEmPKwS3_", "_ZN2cv5flann33HierarchicalClusteringIndexParamsC2EiN7cvflann20flann_centers_init_tEii", "_ZNK2cv12_OutputArray9fixedTypeEv", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_15", "_ZNK2cv17DescriptorMatcher20DescriptorCollection11getLocalIdxEiRiS2_", "Java_org_opencv_ml_TrainData_getTrainNormCatResponses_10", "cvKMeans2", "_ZN2cv3hal8gemm32fcEPKfmS2_mfS2_mfPfmiiii", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_11", "_ZN2cv3ocl5QueueC2Ev", "Java_org_opencv_ml_LogisticRegression_get_1learnt_1thetas_10", "_ZN2cv4cuda11TargetArchs9builtWithENS0_10FeatureSetE", "_ZN2cv5utils5trace7details6Region4Impl11leaveRegionERNS2_23TraceManagerThreadLocalE", "_ZN2cv3dnn14dnn4_v201812215Layer8finalizeERKNSt6__ndk16vectorINS_3MatENS3_9allocatorIS5_EEEE", "Java_org_opencv_ml_DTrees_getMaxCategories_10", "_ZN2cv3hal5QR32fEPfmiiiS1_mS1_", "_ZN2cv7MomentsC1Ev", "_ZNSt6__ndk16locale14__install_ctorERKS0_PNS0_5facetEl", "_ZN2cv8internal21EstimateUncertaintiesERKNS_11_InputArrayES3_RKNS0_15IntrinsicParamsES3_S3_RS4_RNS_3VecIdLi2EEEdiRd", "cvSeqSort", "Java_org_opencv_calib3d_StereoBM_setPreFilterSize_10", "_ZN2cv15stereoCalibrateERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayES5_S5_S5_NS_5Size_IiEERKNS_12_OutputArrayESA_SA_SA_iNS_12TermCriteriaE", "Java_org_opencv_photo_Photo_textureFlattening_11", "_ZN2cv4cuda19printCudaDeviceInfoEi", "_ZN2cv15calibrateCameraERKNS_11_InputArrayES2_NS_5Size_IiEERKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_iNS_12TermCriteriaE", "_ZN2cvmlERKNS_3MatEd", "Java_org_opencv_imgproc_GeneralizedHough_setMaxBufferSize_10", "_ZNK2cv5MatOp4diagERKNS_7MatExprEiRS1_", "_ZN2cv7directx3ocl32initializeContextFromD3D10DeviceEP12ID3D10Device", "cvConvertScale", "_ZNSt9bad_allocD1Ev", "_ZN2cveoERKNS_7Scalar_IdEERKNS_3MatE", "_ZNK2cv4cuda10DeviceInfo17maxSurfaceCubemapEv", "_ZNK2cv3ocl6Device4typeEv", "Java_org_opencv_imgproc_Imgproc_HoughCircles_12", "_ZNK2cv17FlannBasedMatcher5cloneEb", "Java_org_opencv_calib3d_Calib3d_correctMatches_10", "cvPow", "Java_org_opencv_core_Mat_n_1step1__J", "_ZN2cv6detail21check_failed_MatDepthEiiRKNS0_12CheckContextE", "_ZN2cv8tempfileEPKc", "Java_org_opencv_core_Core_transform_10", "Java_org_opencv_features2d_FlannBasedMatcher_FlannBasedMatcher_10", "Java_org_opencv_ml_DTrees_setRegressionAccuracy_10", "_ZN2cv17AVIWriteContainer11getAVIIndexEiNS_10StreamTypeE", "_ZN2cv10softdoubleC2Ej", "_ZN2cv11FileStorage12writeCommentERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb", "cvGraphAddEdgeByPtr", "_ZN3tbb10interface914global_control15internal_createEv", "_ZN2cv10BOWTrainer3addERKNS_3MatE", "_ZN2cv4UMatC2ERKS0_PKNS_5RangeE", "_ZN2cv3Mat6resizeEmRKNS_7Scalar_IdEE", "_ZN3tbb8internal17generic_scheduler13allocate_taskEmPNS_4taskEPNS_18task_group_contextE", "_ZNSt6__ndk119__shared_weak_count16__release_sharedEv", "_ZN2cv16estimateAffine3DERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_dd", "_ZN2cv3hal6sub32fEPKfmS2_mPfmiiPv", "WebPEncode", "Java_org_opencv_video_DISOpticalFlow_getGradientDescentIterations_10", "Java_org_opencv_imgproc_GeneralizedHough_getCannyLowThresh_10", "Java_org_opencv_dnn_Net_forward_14", "_ZNSt6__ndk111timed_mutexD1Ev", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_", "_ZN2cv15bilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiddi", "Java_org_opencv_features2d_MSER_getPass2Only_10", "_ZNSt6__ndk17codecvtIcc9mbstate_tED1Ev", "_ZNK2cv3dnn14dnn4_v201812215Layer20applyHalideSchedulerERNS_3PtrINS1_11BackendNodeEEERKNSt6__ndk16vectorIPNS_3MatENS7_9allocatorISA_EEEERKNS8_IS9_NSB_IS9_EEEEi", "Java_org_opencv_videoio_VideoCapture_VideoCapture_13", "Java_org_opencv_ml_TrainData_create_13", "cvCopyMakeBorder", "_ZN2cv3hal2LUEPfmiS1_mi", "Java_org_opencv_features2d_DescriptorMatcher_match_13", "_ZN2cv3dnn14dnn4_v2018122116ConvolutionLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_dnn_Dnn_readTorchBlob_11", "Java_org_opencv_core_Core_divide_13", "_ZN2cv3dnn14dnn4_v2018122120getAvailableBackendsEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_setShadowThreshold_10", "Java_org_opencv_core_Mat_n_1assignTo__JJ", "Java_org_opencv_dnn_Dnn_NMSBoxes_10", "Java_org_opencv_core_Mat_n_1inv__J", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_11", "Java_org_opencv_features2d_Params_set_1maxInertiaRatio_10", "_ZN2cv5utils2fs10remove_allERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv17cornerMinEigenValERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_10", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_13", "Java_org_opencv_core_Core_findNonZero_10", "Java_org_opencv_dnn_Net_setInputsNames_10", "_ZN2cv15spatialGradientERKNS_11_InputArrayERKNS_12_OutputArrayES5_ii", "_ZNSt6__ndk112system_errorC1ENS_10error_codeEPKc", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_16", "cvSetWindowProperty", "_ZNSt6__ndk118__time_get_storageIcEC2EPKc", "_ZNK2cv3ocl6Device15maxWorkItemDimsEv", "_ZN2cv4KAZE6createEbbfiiNS0_15DiffusivityTypeE", "_ZN2cv21pyrMeanShiftFilteringERKNS_11_InputArrayERKNS_12_OutputArrayEddiNS_12TermCriteriaE", "_ZTv0_n56_NK2cv9Feature2D5emptyEv", "cvNormalizeHist", "_ZN2cv3dnn14dnn4_v2018122112PoolingLayer6createERKNS1_11LayerParamsE", "_ZNSt8bad_castC2Ev", "_ZNSt6__ndk114collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "Java_org_opencv_core_Core_addSamplesDataSearchPath_10", "cvFilter2D", "_ZNSt6__ndk118__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_arrowedLine_11", "_ZNK2cv9Algorithm14getDefaultNameEv", "Java_org_opencv_imgproc_Imgproc_preCornerDetect_11", "_ZN2cv9selectROIERKNS_11_InputArrayEbb", "_ZN2cv5flann5Index9knnSearchERKNS_11_InputArrayERKNS_12_OutputArrayES7_iRKNS0_12SearchParamsE", "Java_org_opencv_imgproc_Imgproc_Scharr_10", "_ZN2cv7directx25convertToDirect3DSurface9ERKNS_11_InputArrayEP17IDirect3DSurface9Pv", "_ZNSt6__ndk114collate_bynameIcEC2EPKcm", "Java_org_opencv_imgproc_Imgproc_remap_11", "_ZN2cv12VideoCaptureD1Ev", "cvNot", "_ZN3tbb8internal5arena25occupy_free_slot_in_rangeERNS0_17generic_schedulerEmm", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_12", "_ZN2cv3hal10normL2Sqr_EPKfS2_i", "Java_org_opencv_core_Mat_n_1setTo__JDDDDJ", "_ZN2cv3ocl13ProgramSourceD1Ev", "Java_org_opencv_imgproc_Subdiv2D_findNearest_11", "_ZTv0_n48_N2cv9Feature2D4readERKNS_8FileNodeE", "_ZNSt6__ndk15ctypeIwED1Ev", "_ZN3tbb8internal18throw_exception_v4ENS0_12exception_idE", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayERKNSt6__ndk16vectorIfNS6_9allocatorIfEEEEiii", "_ZNSt6__ndk118__time_get_storageIwEC2EPKc", "Java_org_opencv_video_BackgroundSubtractorMOG2_getComplexityReductionThreshold_10", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE5do_inER9mbstate_tPKcS5_RS5_PDiS7_RS7_", "Java_org_opencv_photo_Photo_colorChange_11", "Java_org_opencv_features2d_MSER_setDelta_10", "_ZN2cv10fitEllipseERKNS_11_InputArrayE", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_10", "_ZN2cv12buildPyramidERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZNK2cv3ocl6Device21maxConstantBufferSizeEv", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayENS1_6TargetEb", "Java_org_opencv_core_Mat_locateROI_10", "_ZNK2cv4cuda10DeviceInfo24maxSurfaceCubemapLayeredEv", "Java_org_opencv_core_Core_multiply_11", "_ZNSt6__ndk114collate_bynameIcEC1EPKcm", "_ZN2cvltEdRKNS_3MatE", "_ZN2cv3ocl13ProgramSource8fromSPIRERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_PKhmSA_", "Java_org_opencv_calib3d_Calib3d_findHomography_12", "_ZN2cv3ocl6finishEv", "_ZN2cv12sqrBoxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "Java_org_opencv_core_Core_bitwise_1and_11", "_ZNSt6__ndk118get_pointer_safetyEv", "_ZN2cv23findChessboardCornersSBERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEi", "_ZNKSt6__ndk15ctypeIcE8do_widenEc", "_ZNKSt6__ndk112ctype_bynameIwE5do_isEmw", "Java_org_opencv_video_VariationalRefinement_getDelta_10", "Java_org_opencv_imgproc_Imgproc_filter2D_12", "_ZNSt6__ndk115numpunct_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "cvPyrUp", "_ZN2cv12morphologyExERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZNK2cv8FileNode6isNoneEv", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_11", "_ZNK2cv9softfloatcvNS_10softdoubleEEv", "Java_org_opencv_features2d_Features2d_drawKeypoints_11", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_13", "Java_org_opencv_ml_LogisticRegression_setTermCriteria_10", "_ZN2cv7fisheye14undistortImageERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_RKNS_5Size_IiEE", "_ZN2cv11FileStorage4openERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_", "Java_org_opencv_ml_ParamGrid_set_1maxVal_10", "_ZN2cv5flann5Index5buildERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZTv0_n40_NK2cv22SimpleBlobDetectorImpl5writeERNS_11FileStorageE", "_ZN2cv13drawKeypointsERKNS_11_InputArrayERKNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEERKNS_17_InputOutputArrayERKNS_7Scalar_IdEENS_16DrawMatchesFlagsE", "Java_org_opencv_core_Mat_n_1create__JIII", "Java_org_opencv_calib3d_Calib3d_initCameraMatrix2D_10", "Java_org_opencv_core_Core_multiply_13", "cvCreateVideoWriter", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_10", "_ZN2cv6invertERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv12LineIteratorC2ERKNS_3MatENS_6Point_IiEES5_ib", "_ZNSt6__ndk114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE", "_ZNK2cv3ocl6Device11addressBitsEv", "_ZN3tbb8internal17generic_scheduler14free_schedulerEv", "_ZN2cv5flann11IndexParams12setAlgorithmEi", "_ZN2cv9getRecallERKNSt6__ndk16vectorINS_6Point_IfEENS0_9allocatorIS3_EEEEf", "Java_org_opencv_ml_SVMSGD_getInitialStepSize_10", "Java_org_opencv_core_Core_checkRange_11", "_ZN3tbb18task_group_contextD2Ev", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEEdNS_5Size_IiEESD_ddb", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setMinEigThreshold_10", "_ZN2cv17CascadeClassifier13getOldCascadeEv", "Java_org_opencv_features2d_Feature2D_delete", "Java_org_opencv_core_Core_idft_10", "Java_org_opencv_objdetect_Objdetect_groupRectangles_10", "Java_org_opencv_photo_Photo_stylization_12", "Java_org_opencv_features2d_FastFeatureDetector_getThreshold_10", "_ZN2cv28rotatedRectangleIntersectionERKNS_11RotatedRectES2_RKNS_12_OutputArrayE", "Java_org_opencv_video_BackgroundSubtractorKNN_setNSamples_10", "_ZN2cv5utils7logging11getLogLevelEv", "_ZN2cv2ml21NormalBayesClassifier4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_objdetect_BaseCascadeClassifier_delete", "cvInitLineIterator", "_ZNK2cv3ocl6Device15maxComputeUnitsEv", "_ZN2cv3hal12cvtBGRtoGrayEPKhmPhmiiiib", "cvLUT", "_ZN2cv5flann14LshIndexParamsC1Eiii", "_ZN2cv9transposeERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_calib3d_Calib3d_solvePnP_12", "_ZN2cv3dnn14dnn4_v201812213Net7connectEiiii", "_ZN2cv3PCAC1Ev", "_ZN3tbb8internal17generic_scheduler16get_mailbox_taskEl", "_ZN2cv3ogl6Buffer9unmapHostEv", "_ZN2cv4cuda6Stream4NullEv", "_ZN2cv7compareERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "Java_org_opencv_dnn_Net_setInput_12", "_ZNK2cv3ocl5Queue3ptrEv", "_ZNK2cv8Subdiv2D15getTriangleListERNSt6__ndk16vectorINS_3VecIfLi6EEENS1_9allocatorIS4_EEEE", "_ZN2cv11RotatedRectC1ERKNS_6Point_IfEES4_S4_", "Java_org_opencv_imgproc_Imgproc_HoughLines_13", "_ZN2cv15groupRectanglesERNSt6__ndk16vectorINS_5Rect_IiEENS0_9allocatorIS3_EEEERNS1_IiNS4_IiEEEERNS1_IdNS4_IdEEEEid", "Java_org_opencv_ml_ParamGrid_delete", "_ZN3tbb8internal18concurrent_monitor18notify_one_relaxedEv", "Java_org_opencv_imgproc_Imgproc_grabCut_11", "_ZN2cv17AVIWriteContainer13endWriteChunkEv", "Java_org_opencv_features2d_BFMatcher_BFMatcher_10", "_ZNSt16bad_array_lengthC1Ev", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_14", "_ZN2cv4UMat6createEiPKiiNS_14UMatUsageFlagsE", "Java_org_opencv_core_Core_normalize_10", "_ZN2cv17AVIWriteContainer14finishWriteAVIEv", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_RKNS_17_InputOutputArrayE", "_ZN2cv3hal6min32sEPKimS2_mPimiiPv", "Java_org_opencv_core_Core_SVDecomp_10", "_ZN2cv8CamShiftERKNS_11_InputArrayERNS_5Rect_IiEENS_12TermCriteriaE", "Java_org_opencv_calib3d_Calib3d_recoverPose_15", "cvReleaseMat", "Java_org_opencv_ml_DTrees_setMaxDepth_10", "Java_org_opencv_dnn_Dnn_readNetFromTorch_10", "_ZN2cv4cuda6StreamC1ERKNS_3PtrINS0_6GpuMat9AllocatorEEE", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_14", "_ZN2cvdvERKNS_3MatEd", "_ZNK2cv12VideoCapture8isOpenedEv", "Java_org_opencv_core_Core_addWeighted_10", "_ZN3tbb8internal14observer_proxy15get_v6_observerEv", "_ZSt15set_new_handlerPFvvE", "_ZN2cv11RQDecomp3x3ERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_", "_ZN2cv11FileStorage16startWriteStructERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_", "Java_org_opencv_dnn_Net_getParam_10", "Java_org_opencv_calib3d_Calib3d_calibrateCameraExtended_11", "Java_org_opencv_core_Core_mulTransposed_10", "_ZN2cv12findContoursERKNS_11_InputArrayERKNS_12_OutputArrayEiiNS_6Point_IiEE", "_ZN2cv20saveWindowParametersERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERNS_9SparseMatEiS4_PPKfbb", "_ZN3tbb18captured_exceptionD1Ev", "_ZN2cv25fastNlMeansDenoisingMultiERKNS_11_InputArrayERKNS_12_OutputArrayEiifii", "cvEndWriteSeq", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i", "Java_org_opencv_videoio_VideoWriter_open_13", "_ZN2cv3dnn14dnn4_v2018122118DeconvolutionLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Core_LUT_10", "cvMinAreaRect2", "_ZNKSt6__ndk119__shared_weak_count13__get_deleterERKSt9type_info", "Java_org_opencv_core_Core_PCACompute_10", "Java_org_opencv_photo_MergeMertens_delete", "Java_org_opencv_features2d_Feature2D_compute_11", "cvLogPolar", "cvAddText", "_ZNSt6__ndk115system_categoryEv", "_ZNSt6__ndk117moneypunct_bynameIwLb0EE4initEPKc", "_ZN2cv5flann5IndexD2Ev", "_ZN2cv3EMDERKNS_11_InputArrayES2_iS2_PfRKNS_12_OutputArrayE", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE6do_outER9mbstate_tPKDsS5_RS5_PcS7_RS7_", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_11", "_ZN2cv3dnn14dnn4_v201812215Layer16inputNameToIndexENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZTv0_n72_NK2cv20AgastFeatureDetector14getDefaultNameEv", "_ZN2cv8internal15IntrinsicParamsC2ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "Java_org_opencv_imgproc_Imgproc_morphologyEx_14", "_ZNSt6__ndk17promiseIvEC1Ev", "Java_org_opencv_core_Core_polarToCart_10", "_ZN2cv17DescriptorMatcher15isPossibleMatchERKNS_11_InputArrayEii", "_ZNSt6__ndk116generic_categoryEv", "Java_org_opencv_ml_StatModel_predict_10", "Java_org_opencv_features2d_BRISK_delete", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_12", "cvHoughLines2", "Java_org_opencv_core_Core_inRange_10", "_ZN2cv3LDA7computeERKNS_11_InputArrayES3_", "_ZN2cv9SparseMat5clearEv", "Java_org_opencv_core_Core_gemm_11", "Java_org_opencv_ml_TrainData_getSamples_10", "_ZN2cv5flann17KDTreeIndexParamsC1Ei", "Java_org_opencv_dnn_Dnn_blobFromImage_14", "_ZN2cv3hal5LU64fEPdmiS1_mi", "_ZN3tbb8internal6market17try_destroy_arenaEPNS0_5arenaEm", "_ZN2cv8Subdiv2D6spliceEii", "Java_org_opencv_core_Core_gemm_10", "_ZN2cv3LDAC1ERKNS_11_InputArrayES3_i", "Java_org_opencv_features2d_KAZE_getDefaultName_10", "_ZN2cv9Feature2DD1Ev", "_ZN2cv3ocl13ProgramSourceC1Ev", "_ZN2cv7fisheye13distortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_d", "cvMoments", "_ZN2cv13projectPointsERKNS_11_InputArrayES2_S2_S2_S2_RKNS_12_OutputArrayES5_d", "cvErrorStr", "cvGrabFrame", "cvFindContours", "_ZNK2cv3ocl6Device16maxReadImageArgsEv", "_ZNSt9type_infoD0Ev", "Java_org_opencv_features2d_AKAZE_getThreshold_10", "_ZNSt6__ndk18numpunctIwED2Ev", "_ZNK2cv3ocl6Device16image3DMaxHeightEv", "_ZN2cv2ml21NormalBayesClassifier6createEv", "_ZN3tbb8internal5arena14is_out_of_workEv", "_ZNSt6__ndk115numpunct_bynameIwEC1EPKcm", "_ZN2cv5flann11IndexParamsD2Ev", "_ZN2cv3ocl7Image2DC2ERKNS_4UMatEbb", "_ZN2cv17DescriptorMatcher5clearEv", "_ZN3tbb8internal17generic_scheduler7enqueueERNS_4taskEPv", "_ZNK2cv3ocl7Context6useSVMEv", "_ZNK2cv5MatOp6divideEdRKNS_7MatExprERS1_", "_ZNSt11logic_errorC2ERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "Java_org_opencv_core_Core_findFileOrKeep_10", "_ZNK3tbb18task_group_context8priorityEv", "_ZN3tbb16spin_rw_mutex_v327internal_try_acquire_writerEv", "_ZN2cv2ml7ANN_MLP6createEv", "_ZN2cv21DetectionBasedTrackerD1Ev", "Java_org_opencv_core_Core_add_15", "_ZNSt6__ndk112ctype_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZN2cv3ocl13ProgramSourceaSERKS1_", "Java_org_opencv_video_FarnebackOpticalFlow_getNumLevels_10", "_ZN2cv8FileNodeC2Ev", "Java_org_opencv_imgproc_Imgproc_boxFilter_12", "_ZNSt9bad_allocD0Ev", "Java_org_opencv_ml_SVM_getClassWeights_10", "Java_org_opencv_photo_Photo_createTonemapReinhard_10", "_ZNK2cv4cuda10DeviceInfo12maxSurface2DEv", "_ZNK2cv5flann5Index4saveERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZNSt6__ndk18numpunctIcED0Ev", "Java_org_opencv_dnn_Dnn_blobFromImage_15", "cvTreeToNodeSeq", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowValue_10", "cvGraphAddVtx", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_13", "_ZN2cv17DescriptorMatcher20DescriptorCollection5clearEv", "Java_org_opencv_photo_CalibrateDebevec_delete", "_ZNSt13exception_ptrC2ERKS_", "cvChangeSeqBlock", "_ZN2cv3ipp6useIPPEv", "_ZN2cv14QRCodeDetector7setEpsXEd", "_ZN9CvLevMarq4initEii14CvTermCriteriab", "_ZN2cv4UMat5setToERKNS_11_InputArrayES3_", "cvSetTrackbarMin", "_ZN2cv3hal12magnitude64fEPKdS2_Pdi", "_ZNSt11logic_errorD2Ev", "cvInitMatHeader", "Java_org_opencv_dnn_Dnn_NMSBoxes_12", "_ZNK2cv4cuda10DeviceInfo8memPitchEv", "_ZN2cv2LUEPdmiS0_mi", "_ZN2cv8UMatDataC2EPKNS_12MatAllocatorE", "Java_org_opencv_video_DISOpticalFlow_getVariationalRefinementGamma_10", "_ZNSt6__ndk119__shared_weak_count4lockEv", "_ZN3tbb8internal17generic_scheduler31get_task_and_activate_task_poolEmml", "_ZN3tbb18task_group_context5resetEv", "Java_org_opencv_core_Core_getHardwareFeatureName_10", "Java_org_opencv_features2d_BFMatcher_delete", "_ZNK2cv7MatExprclERKNS_5Rect_IiEE", "_ZN2cv7fisheye23initUndistortRectifyMapERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEEiRKNS_12_OutputArrayESA_", "_ZN2cv10setRNGSeedEi", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_10", "Java_org_opencv_features2d_AKAZE_setDiffusivity_10", "_ZNKSt6__ndk115error_condition7messageEv", "cvStdErrReport", "_ZN2cv15KeyPointsFilter17runByKeypointSizeERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEEff", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE13do_max_lengthEv", "Java_org_opencv_photo_MergeMertens_process_10", "_ZN2cv3hal5min8sEPKamS2_mPamiiPv", "_ZN2cv3dnn14dnn4_v201812213Net7forwardERKNS_12_OutputArrayERKNSt6__ndk16vectorINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEE", "_ZNK2cv10BOWTrainer16descriptorsCountEv", "cvMaxRect", "_ZNK2cv4UMat6getMatENS_10AccessFlagE", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_13", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getMinEigThreshold_10", "_ZN2cvdvERKNS_3MatERKNS_7MatExprE", "_ZNSt6__ndk115numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "Java_org_opencv_ml_SVMSGD_getMarginRegularization_10", "Java_org_opencv_features2d_BOWTrainer_descriptorsCount_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMax_10", "Java_org_opencv_imgproc_Imgproc_pyrUp_12", "Java_org_opencv_imgproc_Imgproc_resize_12", "Java_org_opencv_ml_SVMSGD_setStepDecreasingPower_10", "_ZN2cv5utils5trace7details6Region4ImplD1Ev", "Java_org_opencv_features2d_GFTTDetector_setMinDistance_10", "Java_org_opencv_dnn_Net_getMemoryConsumption_12", "Java_org_opencv_photo_Photo_pencilSketch_12", "cvMakeHistHeaderForArray", "_ZN2cv7fisheye42estimateNewCameraMatrixForUndistortRectifyERKNS_11_InputArrayES3_RKNS_5Size_IiEES3_RKNS_12_OutputArrayEdS7_d", "_ZN2cv3ogl6BufferC2ERKNS_11_InputArrayENS1_6TargetEb", "_ZNK2cv8FileNode4realEv", "_ZN2cv4readERKNS_8FileNodeERNS_6DMatchERKS3_", "cvResetImageROI", "Java_org_opencv_video_FarnebackOpticalFlow_setPyrScale_10", "_ZNK2cv3dnn14dnn4_v201812213Net8getFLOPSERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEE", "Java_org_opencv_core_Mat_n_1rowRange", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSigma_10", "_ZNK2cv8Subdiv2D7symEdgeEi", "Java_org_opencv_photo_Photo_stylization_11", "cvCreateSeq", "_ZN2cv3maxERKNS_3MatEd", "_ZNSt10bad_typeidC2Ev", "_ZNK2cv9softfloatneERKS0_", "Java_org_opencv_imgproc_Imgproc_createHanningWindow_10", "_ZN2cv7imwriteERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayERKNS0_6vectorIiNS4_IiEEEE", "Java_org_opencv_features2d_GFTTDetector_setBlockSize_10", "_ZNK3tbb8internal32allocate_root_with_context_proxy4freeERNS_4taskE", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_15", "cvSetIdentity", "_ZNK2cv3ocl13ProgramSource4hashEv", "_ZNSt6__ndk115recursive_mutexC1Ev", "cvInitFont", "_ZN2cv17borderInterpolateEiii", "_ZNKSt6__ndk112ctype_bynameIwE10do_tolowerEPwPKw", "_ZN2cv4cuda11setGlDeviceEi", "Java_org_opencv_imgproc_LineSegmentDetector_drawSegments_10", "_ZN2cv3hal7merge8uEPPKhPhii", "_ZN2cv3ocl7ProgramC1ERKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_", "Java_org_opencv_calib3d_Calib3d_fisheye_1estimateNewCameraMatrixForUndistortRectify_12", "Java_org_opencv_video_KalmanFilter_get_1errorCovPre_10", "Java_org_opencv_calib3d_Calib3d_filterSpeckles_10", "Java_org_opencv_features2d_KAZE_setUpright_10", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_12", "_ZNK2cv4cuda6GpuMat9convertToERKNS_12_OutputArrayEiRNS0_6StreamE", "_ZNKSt6__ndk18numpunctIwE16do_thousands_sepEv", "_ZN2cv12ellipse2PolyENS_6Point_IiEENS_5Size_IiEEiiiiRNSt6__ndk16vectorIS1_NS4_9allocatorIS1_EEEE", "Java_org_opencv_dnn_Net_getMemoryConsumption_10", "_ZN2cv8clipLineENS_5Size_IiEERNS_6Point_IiEES4_", "_ZN2cv3dnn14dnn4_v2018122112LayerFactory13registerLayerERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPFNS_3PtrINS1_5LayerEEERNS1_11LayerParamsEE", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_14", "Java_org_opencv_features2d_Features2d_drawMatches_10", "Java_org_opencv_photo_Photo_createCalibrateDebevec_10", "_ZNK2cv11_InputArray9getGpuMatEv", "_ZN2cv2ml3SVM4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv15groupRectanglesERNSt6__ndk16vectorINS_5Rect_IiEENS0_9allocatorIS3_EEEEidPNS1_IiNS4_IiEEEEPNS1_IdNS4_IdEEEE", "_ZN2cv5utils7logging8internal15writeLogMessageENS1_8LogLevelEPKc", "_ZN2cv17FlannBasedMatcher15radiusMatchImplERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEfS3_b", "_ZN2cv25createLineSegmentDetectorEiddddddi", "_ZN2cv3ogl6renderERKNS0_6ArraysERKNS_11_InputArrayEiNS_7Scalar_IdEE", "Java_org_opencv_ml_SVMSGD_getStepDecreasingPower_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setComplexityReductionThreshold_10", "Java_org_opencv_calib3d_StereoBM_create_12", "cvGetTickCount", "_ZN3tbb8internal6market13global_marketEbjm", "cvGetImage", "Java_org_opencv_objdetect_QRCodeDetector_QRCodeDetector_10", "cvBoundingRect", "_ZN3tbb18task_group_context12set_priorityENS_10priority_tE", "Java_org_opencv_features2d_BRISK_create_11", "_ZN2cv3ogl20convertToGLTexture2DERKNS_11_InputArrayERNS0_9Texture2DE", "_ZNSt6__ndk14stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi", "_ZN2cv2ml6DTrees4NodeC2Ev", "_ZNKSt6__ndk114__codecvt_utf8IwE5do_inER9mbstate_tPKcS5_RS5_PwS7_RS7_", "_ZN2cvmiERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv11findNonZeroERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv23evaluateFeatureDetectorERKNS_3MatES2_S2_PNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEES9_RfRiRKNS_3PtrINS_9Feature2DEEE", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_15", "cvDrawContours", "_ZNSt6__ndk120__throw_system_errorEiPKc", "_ZN2cv12KalmanFilterC1Eiiii", "_ZN2cv8FileNode6isFlowEi", "_ZN2cv3dnn14dnn4_v201812213Net8setInputERKNS_11_InputArrayERKNSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdRKNS_7Scalar_IdEE", "_ZNSt6__ndk110to_wstringEd", "_ZN2cv3dnn14dnn4_v2018122114BatchNormLayer6createERKNS1_11LayerParamsE", "_ZN2cv3dnn14dnn4_v2018122116readNetFromCaffeEPKcmS3_m", "_ZN2cv14seqInsertSliceEP5CvSeqiPKv", "_ZN2cv13createTonemapEf", "Java_org_opencv_core_Core_exp_10", "Java_org_opencv_dnn_Dnn_readNet_11", "_ZNK2cv3Mat3dotERKNS_11_InputArrayE", "_ZN2cv3dnn14dnn4_v2018122120DetectionOutputLayer6createERKNS1_11LayerParamsE", "_ZNK2cv3ocl6Kernel20compileWorkGroupSizeEPm", "_ZN2cvmlERKNS_7MatExprEd", "_ZN2cv3dnn14dnn4_v201812213Net14setInputsNamesERKNSt6__ndk16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEE", "Java_org_opencv_photo_AlignMTB_process_10", "Java_org_opencv_videoio_VideoCapture_VideoCapture_11", "_ZN3tbb4task13note_affinityEt", "_ZNSt6__ndk117__assoc_sub_state13set_exceptionESt13exception_ptr", "_ZNK2cv4UMat6handleENS_10AccessFlagE", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_10", "_ZNKSt6__ndk112ctype_bynameIwE5do_isEPKwS3_Pm", "Java_org_opencv_objdetect_HOGDescriptor_detect_10", "Java_org_opencv_ml_SVM_setNu_10", "cvSeqSearch", "_ZN2cv9Feature2D4readERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_features2d_Feature2D_descriptorType_10", "_ZNK2cv7MatExpr3mulERKS0_d", "_ZN2cv11VideoWriterC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEidNS_5Size_IiEEb", "_ZN2cv3ocl9KernelArgC2EiPNS_4UMatEiiPKvm", "Java_org_opencv_imgproc_Subdiv2D_getEdgeList_10", "_ZN2cv5AGASTERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEEibNS_20AgastFeatureDetector12DetectorTypeE", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_10", "Java_org_opencv_core_Core_sumElems_10", "Java_org_opencv_calib3d_StereoSGBM_create_16", "Java_org_opencv_calib3d_Calib3d_composeRT_14", "_ZNKSt10bad_typeid4whatEv", "_ZN2cv13insertChannelERKNS_11_InputArrayERKNS_17_InputOutputArrayEi", "_ZN2cv19getBuildInformationEv", "_ZNK2cv5MatOp17augAssignMultiplyERKNS_7MatExprERNS_3MatE", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_12", "_ZN2cv3hal6max16sEPKsmS2_mPsmiiPv", "_ZN2cv15KeyPointsFilter16removeDuplicatedERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEE", "Java_org_opencv_ml_RTrees_delete", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE11do_encodingEv", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_111", "_ZN2cv3Mat6createERKNSt6__ndk16vectorIiNS1_9allocatorIiEEEEi", "_ZN3tbb8internal34initialize_cache_aligned_allocatorEv", "cvMoveWindow", "_ZN3tbb16spin_rw_mutex_v323internal_release_readerEv", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork23workcycleObjectDetectorEv", "_ZN2cv3maxERKNS_3MatES2_RS0_", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE10do_unshiftER9mbstate_tPcS4_RS4_", "Java_org_opencv_imgproc_Imgproc_Sobel_12", "Java_org_opencv_dnn_Dnn_readNet_14", "WebPSafeFree", "Java_org_opencv_core_Core_convertScaleAbs_11", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEi", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_10", "_ZNK2cv13HOGDescriptor6copyToERS0_", "Java_org_opencv_video_BackgroundSubtractor_delete", "_ZN2cv4cuda5EventC2ENS1_11CreateFlagsE", "_ZN2cv16AVIReadContainer10initStreamENS_3PtrINS_16VideoInputStreamEEE", "_ZN2cv16BOWKMeansTrainerC1EiRKNS_12TermCriteriaEii", "Java_org_opencv_objdetect_HOGDescriptor_detect_13", "Java_org_opencv_imgproc_Imgproc_Scharr_11", "_ZNSt6__ndk14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "_ZN2cv5utils12findDataFileERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKcPKNS1_6vectorIS7_NS5_IS7_EEEESG_", "_ZNK2cv3ORB14getDefaultNameEv", "_ZN2cv3hal15cvtBGR5x5toGrayEPKhmPhmiii", "JNI_OnLoad", "_ZN2cv6detail21check_failed_MatDepthEiRKNS0_12CheckContextE", "cvShowImage", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayE", "_ZN2cv3ocl12PlatformInfoC1Ev", "_ZNK2cv14DefaultDeleterI11CvSparseMatEclEPS1_", "_ZNSt6__ndk111timed_mutex4lockEv", "_ZNKSt6__ndk112ctype_bynameIwE8do_widenEPKcS3_Pw", "_ZN2cv5flann5IndexC1ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "Java_org_opencv_calib3d_Calib3d_stereoRectify_12", "Java_org_opencv_video_BackgroundSubtractorKNN_setkNNSamples_10", "Java_org_opencv_dnn_Net_enableFusion_10", "cvGetSeqReaderPos", "Java_org_opencv_features2d_MSER_create_14", "cvCheckContourConvexity", "cvCalcProbDensity", "_ZNSt6__ndk19to_stringEl", "_ZN2cv3hal10absdiff16uEPKtmS2_mPtmiiPv", "_ZNSt6__ndk16localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN9CvLevMarq6updateERPK5CvMatRPS0_S5_", "cvSetReal3D", "_ZN2cv14QRCodeDetector6decodeERKNS_11_InputArrayES3_RKNS_12_OutputArrayE", "Java_org_opencv_video_KalmanFilter_predict_10", "Java_org_opencv_calib3d_Calib3d_decomposeEssentialMat_10", "_ZNKSt6__ndk15ctypeIcE9do_narrowEcc", "_ZNK2cv17CommandLineParser3hasERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_videoio_VideoWriter_get_10", "Java_org_opencv_photo_Photo_createMergeDebevec_10", "Java_org_opencv_imgproc_Imgproc_circle_10", "cvCalcPCA", "Java_org_opencv_imgproc_Imgproc_Laplacian_12", "_ZNKSt6__ndk15ctypeIwE9do_narrowEwc", "_ZNSt6__ndk118condition_variable10notify_oneEv", "_ZN2cv4UMat3eyeEiii", "_ZN2cv25BOWImgDescriptorExtractorD0Ev", "_ZN2cv4cuda11getInputMatERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_imgproc_Imgproc_rotatedRectangleIntersection_10", "_ZNSt6__ndk18numpunctIcEC2Em", "Java_org_opencv_ml_SVMSGD_load_11", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_10", "Java_org_opencv_objdetect_HOGDescriptor_compute_12", "Java_org_opencv_core_Core_divide_10", "_ZNSt6__ndk112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv7MatExprC1ERKNS_3MatE", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_dS6_", "_ZN2cv9ExceptionC1EiRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_i", "_ZN2cv3ogl9Texture2DC1ENS_5Size_IiEENS1_6FormatEjb", "Java_org_opencv_core_Core_findFileOrKeep_11", "_ZN2cv11cartToPolarERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_b", "Java_org_opencv_imgproc_Imgproc_connectedComponents_12", "_ZN2cv17CommandLineParserC1EiPKPKcRKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE", "_ZN3tbb8internal8NFS_FreeEPv", "_ZNSt9exceptionD0Ev", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkC2ERS0_NS_3PtrINS0_9IDetectorEEERKNS0_10ParametersE", "Java_org_opencv_features2d_ORB_setScaleFactor_10", "_ZNSt6__ndk112ctype_bynameIwED0Ev", "_ZN2cvngERKNS_7MatExprE", "Java_org_opencv_imgproc_Imgproc_grabCut_10", "Java_org_opencv_features2d_FastFeatureDetector_setType_10", "_ZNK2cv2ml9StatModel9calcErrorERKNS_3PtrINS0_9TrainDataEEEbRKNS_12_OutputArrayE", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_", "_ZNK2cv4cuda10DeviceInfo24kernelExecTimeoutEnabledEv", "_ZNK2cv3ogl6Buffer4bindENS1_6TargetE", "_ZN2cv3ocl9KernelArgC1Ev", "cvSeqInsertSlice", "_ZN2cv4UMat4diagERKS0_", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarThreshold_10", "cvCreateMemStorage", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork30communicateWithDetectingThreadERKNS_3MatERNSt6__ndk16vectorINS_5Rect_IiEENS5_9allocatorIS8_EEEE", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_13", "_ZN2cv3dnn14dnn4_v201812215Layer7forwardERNSt6__ndk16vectorIPNS_3MatENS3_9allocatorIS6_EEEERNS4_IS5_NS7_IS5_EEEESD_", "_ZNKSt6__ndk112ctype_bynameIwE10do_tolowerEw", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_10", "Java_org_opencv_ml_TrainData_getTestNormCatResponses_10", "_ZNSt6__ndk15stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi", "Java_org_opencv_imgproc_Imgproc_integral3_10", "Java_org_opencv_imgproc_Imgproc_cvtColorTwoPlane_10", "_ZNKSt13bad_exception4whatEv", "_ZN9CvLevMarqC2Eii14CvTermCriteriab", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setTermCriteria_10", "_ZN2cv20calcOpticalFlowPyrLKERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayERKNS_12_OutputArrayES8_NS_5Size_IiEEiNS_12TermCriteriaEid", "_ZN2cv14copyMakeBorderERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv5utils2fs8FileLock4lockEv", "cvSVD", "_ZNK2cv3ogl6Buffer5bufIdEv", "_ZN2cvcoERKNS_3MatE", "Java_org_opencv_ml_StatModel_getVarCount_10", "_ZN2cv17CommandLineParserC2ERKS0_", "_ZN2cv5flann5IndexD1Ev", "_ZN2cv7MomentsC2Ev", "Java_org_opencv_core_Core_subtract_13", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMax_10", "_ZN2cv9AlgorithmC2Ev", "Java_org_opencv_imgproc_Imgproc_Canny_11", "_ZN2cv16UMatDataAutoLockC1EPNS_8UMatDataES2_", "_ZN2cv3dnn14dnn4_v2018122112PermuteLayer6createERKNS1_11LayerParamsE", "_ZNSt6__ndk17promiseIvEC2Ev", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD1Ev", "_ZNK2cv21DetectionBasedTracker10getObjectsERNSt6__ndk16vectorINS1_4pairINS_5Rect_IiEEiEENS1_9allocatorIS6_EEEE", "_ZNSt6__ndk16localeC1ERKS0_S2_i", "_ZNKSt16bad_array_length4whatEv", "_ZN2cv11FileStorage5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_3MatE", "_ZNSt6__ndk17codecvtIwc9mbstate_tED0Ev", "_ZN2cv3dnn14dnn4_v2018122116readNetFromCaffeERKNSt6__ndk16vectorIhNS2_9allocatorIhEEEES8_", "_ZN2cvorERKNS_3MatES2_", "_ZNK2cv8FileNode5isIntEv", "Java_org_opencv_imgproc_Imgproc_arrowedLine_13", "cvRunningAvg", "Java_org_opencv_photo_AlignMTB_getExcludeRange_10", "_ZN2cv3dnn14dnn4_v201812213Net10getLayerIdERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZN2cv3dnn14dnn4_v201812215Layer8finalizeERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv8fillPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEiiNS_6Point_IiEE", "Java_org_opencv_features2d_KAZE_create_15", "_ZN2cv15NAryMatIteratorppEv", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE13do_max_lengthEv", "_ZNK2cv18SimpleBlobDetector14getDefaultNameEv", "_ZN3tbb8internal5arena22orphan_offloaded_tasksERNS0_17generic_schedulerE", "_ZN2cv2ml9StatModel5trainERKNS_11_InputArrayEiS4_", "Java_org_opencv_features2d_MSER_create_19", "_ZN2cv16videoio_registry14getBackendNameENS_16VideoCaptureAPIsE", "_ZNSt6__ndk18numpunctIwED1Ev", "_ZN2cv17FlannBasedMatcherC1ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "_ZN2cv3MatC2ERKS0_RKNS_5RangeES5_", "_ZNSt6__ndk16localeC1EPKc", "_ZN2cv3hal5xor8uEPKhmS2_mPhmiiPv", "_ZN2cv4UMat5zerosEiPKii", "_ZN2cv5utils5trace7details6Region17LocationExtraDataC2ERKNS3_21LocationStaticStorageE", "Java_org_opencv_core_Core_findFile_12", "_ZNK2cv3ocl6Device10vendorNameEv", "Java_org_opencv_calib3d_Calib3d_decomposeHomographyMat_10", "_ZN2cv5errorERKNS_9ExceptionE", "Java_org_opencv_imgproc_GeneralizedHoughBallard_getVotesThreshold_10", "_ZN2cv3dnn14dnn4_v201812215Layer3runERKNSt6__ndk16vectorINS_3MatENS3_9allocatorIS5_EEEERS8_SB_", "_ZN2cv16AVIReadContainer10printErrorERNS_8RiffListEj", "Java_org_opencv_ml_TrainData_getDefaultSubstValues_10", "_ZNK2cv9Feature2D14descriptorTypeEv", "_ZNSt6__ndk16localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv22SparseMatConstIteratorppEv", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE6do_outER9mbstate_tPKDiS5_RS5_PcS7_RS7_", "_ZN2cv3PCAC2Ev", "_ZN2cv17getOptimalDFTSizeEi", "_ZNSt6__ndk15alignEmmRPvRm", "_ZN2cv17textureFlatteningERKNS_11_InputArrayES2_RKNS_12_OutputArrayEffi", "_ZN2cv12ellipse2PolyENS_6Point_IdEENS_5Size_IdEEiiiiRNSt6__ndk16vectorIS1_NS4_9allocatorIS1_EEEE", "_ZN2cv17AVIWriteContainerC1Ev", "_ZN2cv3ocl20getOpenCLErrorStringEi", "Java_org_opencv_video_KalmanFilter_predict_11", "_ZN2cv11FileStorage5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEd", "_ZN2cv9SparseMat3Hdr5clearEv", "Java_org_opencv_core_Core_PCACompute_11", "Java_org_opencv_calib3d_Calib3d_fisheye_1calibrate_11", "_ZNSt6__ndk17codecvtIwc9mbstate_tEC1Em", "_ZN2cv11RNG_MT19937clEj", "WebPPictureSmartARGBToYUVA", "_ZNKSt6__ndk18numpunctIcE12do_falsenameEv", "_ZN2cv3ocl7Image2DC1ERKNS_4UMatEbb", "_ZN2cv13HOGDescriptor24getDefaultPeopleDetectorEv", "Java_org_opencv_calib3d_StereoBM_create_10", "Java_org_opencv_features2d_AKAZE_getNOctaves_10", "Java_org_opencv_ml_TrainData_getCatMap_10", "__gxx_personality_v0", "Java_org_opencv_video_DISOpticalFlow_getUseMeanNormalization_10", "_ZNK2cv4cuda10DeviceInfo19maxTexture1DLayeredEv", "Java_org_opencv_video_KalmanFilter_correct_10", "cvGraphRemoveVtx", "_ZNK2cv25BOWImgDescriptorExtractor13getVocabularyEv", "_ZNSt6__ndk114collate_bynameIwED0Ev", "_ZN2cv12VideoCaptureD0Ev", "Java_org_opencv_ml_TrainData_getTrainSamples_13", "_ZN3tbb8internal5arena14allocate_arenaERNS0_6marketEjj", "_ZNSt6__ndk117__assoc_sub_state9__executeEv", "Java_org_opencv_core_Mat_n_1dot", "Java_org_opencv_core_Core_phase_11", "_ZN2cv4FASTERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEEib", "_ZNK2cv8FileNode3endEv", "Java_org_opencv_features2d_GFTTDetector_create_16", "_ZN2cv5utils5trace7details15getTraceManagerEv", "_ZN2cv21findChessboardCornersERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEi", "Java_org_opencv_calib3d_Calib3d_fisheye_1calibrate_10", "Java_org_opencv_calib3d_Calib3d_undistortPointsIter_10", "_ZNK2cv3ocl6Device15image3DMaxWidthEv", "cvMin", "_ZNK2cv2ml6KDTree8getPointEiPi", "Java_org_opencv_imgproc_Imgproc_contourArea_10", "_ZN2cv17CommandLineParser4Impl12apply_paramsERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZN2cv3dnn14dnn4_v2018122115readNetFromONNXERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN3tbb16spin_rw_mutex_v327internal_try_acquire_readerEv", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_12", "_ZNSt6__ndk112system_errorD1Ev", "_ZN2cv9thresholdERKNS_11_InputArrayERKNS_12_OutputArrayEddi", "_ZN2cv3hal5QR64fEPdmiiiS1_mS1_", "Java_org_opencv_imgproc_Imgproc_HoughLinesPointSet_10", "_ZNSt6__ndk112ctype_bynameIcED2Ev", "_ZN2cv3ocl13ProgramSourceC1ERKS1_", "Java_org_opencv_dnn_Net_connect_10", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEid", "_ZN3tbb8internal18call_itt_notify_v5EiPv", "_ZN2cv9SparseMat3HdrC2EiPKii", "cvSeqElemIdx", "_ZNK2cv5flann11IndexParams9getStringERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_calib3d_StereoBM_setPreFilterCap_10", "_ZNK2cv5MatOp8subtractERKNS_7Scalar_IdEERKNS_7MatExprERS5_", "Java_org_opencv_video_KalmanFilter_set_1measurementMatrix_10", "Java_org_opencv_dnn_Net_setParam_10", "_ZN2cv3ocl8PlatformC2Ev", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_11", "_ZNK2cv3LDA4saveERNS_11FileStorageE", "Java_org_opencv_dnn_Net_readFromModelOptimizer_10", "Java_org_opencv_photo_Tonemap_getGamma_10", "_ZN2cv18getAffineTransformEPKNS_6Point_IfEES3_", "Java_org_opencv_calib3d_Calib3d_getValidDisparityROI_10", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_13", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE9do_lengthERS1_PKcS5_m", "_ZN3tbb8internal3rml14private_server9wake_someEi", "WebPPictureYUVAToARGB", "_ZN2cv3Mat20updateContinuityFlagEv", "_ZN3rml8internal14thread_monitor4joinEl", "Java_org_opencv_video_Video_findTransformECC_10", "_ZN3tbb19task_scheduler_init9terminateEv", "Java_org_opencv_dnn_Dnn_NMSBoxesRotated_12", "_ZN2cv16pointPolygonTestERKNS_11_InputArrayENS_6Point_IfEEb", "_ZN2cv20AgastFeatureDetector6createEibNS0_12DetectorTypeE", "_ZN2cv5instr8NodeDataC1ERS1_", "Java_org_opencv_imgproc_Imgproc_applyColorMap_10", "_ZN2cv21DetectionBasedTracker7processERKNS_3MatE", "_ZN2cv21decomposeEssentialMatERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_", "_ZN2cv2ml3SVM14getDefaultGridEi", "Java_org_opencv_core_Core_add_11", "_ZN2cv3SVD9backSubstERKNS_11_InputArrayES3_S3_S3_RKNS_12_OutputArrayE", "_ZN2cv11VideoWriter7releaseEv", "_ZN2cv3hal5and8uEPKhmS2_mPhmiiPv", "_ZN2cv25BOWImgDescriptorExtractor13setVocabularyERKNS_3MatE", "_ZNK2cv10softdoublemlERKS0_", "_ZNK2cv7MatExpr4diagEi", "_ZNK2cv3dnn14dnn4_v201812213Net8getFLOPSEiRKNSt6__ndk16vectorIiNS3_9allocatorIiEEEE", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayES4_b", "_ZNSt6__ndk18ios_base4moveERS0_", "_ZNK2cv3dnn14dnn4_v201812215Layer13getScaleShiftERNS_3MatES4_", "_ZN2cv11RNG_MT199377uniformEii", "_ZNSt6__ndk16localeC2ERKS0_", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_12", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE11do_encodingEv", "Java_org_opencv_calib3d_Calib3d_drawFrameAxes_10", "Java_org_opencv_dnn_Layer_get_1type_10", "Java_org_opencv_photo_Photo_denoise_1TVL1_11", "cvClearND", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayES4_b", "_ZN2cv5instr21setUseInstrumentationEb", "Java_org_opencv_core_Mat_nPutS", "Java_org_opencv_core_Algorithm_clear_10", "_ZNK2cv3ocl6Device16memBaseAddrAlignEv", "_ZN2cv3ogl3ocl23initializeContextFromGLEv", "Java_org_opencv_imgproc_Imgproc_equalizeHist_10", "Java_org_opencv_core_Mat_n_1isContinuous", "_ZNK2cv9SparseMat6copyToERS0_", "_ZN2cv8Subdiv2DC2ENS_5Rect_IiEE", "WebPSafeMalloc", "cvSeqPartition", "_ZN3tbb8internal13observer_list24do_notify_exit_observersEPNS0_14observer_proxyEb", "_ZNKSt6__ndk114__codecvt_utf8IDsE11do_encodingEv", "Java_org_opencv_core_Core_useIPP_1NotExact_10", "WebPEncodeLosslessBGRA", "_ZN2cv15convertScaleAbsERKNS_11_InputArrayERKNS_12_OutputArrayEdd", "Java_org_opencv_photo_Photo_createAlignMTB_12", "Java_org_opencv_features2d_Params_set_1filterByInertia_10", "_ZN2cv8FileNodeC1EPKNS_11FileStorageEmm", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_15", "_ZNSt6__ndk19to_stringEd", "Java_org_opencv_features2d_ORB_create_18", "_ZN2cv8UMatData6unlockEv", "_ZN2cv20edgePreservingFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiff", "_ZN2cvgtERKNS_3MatEd", "_ZNKSt6__ndk114__codecvt_utf8IwE6do_outER9mbstate_tPKwS5_RS5_PcS7_RS7_", "_ZN2cv9seqRemoveEP5CvSeqi", "_ZNKSt6__ndk120__time_get_c_storageIwE3__cEv", "_ZN2cv7fisheye13stereoRectifyERKNS_11_InputArrayES3_S3_S3_RKNS_5Size_IiEES3_S3_RKNS_12_OutputArrayESA_SA_SA_SA_iS7_dd", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1Ev", "_ZN2cv9transformERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZNSt6__ndk18ios_base4initEPv", "Java_org_opencv_calib3d_Calib3d_Rodrigues_10", "_ZN2cv6divideERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "Java_org_opencv_ml_EM_trainEM_11", "_ZN2cv9solvePolyERKNS_11_InputArrayERKNS_12_OutputArrayEi", "WebPPictureInitInternal", "_ZN2cv3dnn14dnn4_v201812215Layer10initHalideERKNSt6__ndk16vectorINS_3PtrINS1_14BackendWrapperEEENS3_9allocatorIS7_EEEE", "Java_org_opencv_ml_TrainData_getCatOfs_10", "_ZNK2cv12_OutputArray13getHostMemRefEv", "Java_org_opencv_core_Mat_n_1diag__J", "_ZN2cv3dnn14dnn4_v2018122121readNetFromTensorflowERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZN2cv3dnn14dnn4_v201812213Net8setParamENS1_9DictValueEiRKNS_3MatE", "_ZNK2cv7MatExpr3mulERKNS_3MatEd", "Java_org_opencv_dnn_DictValue_getIntValue_10", "_ZN2cv15NAryMatIteratorC1Ev", "cvCreateSeqBlock", "Java_org_opencv_core_Mat_n_1elemSize1", "Java_org_opencv_photo_MergeDebevec_delete", "_Z7cvMatNDRKN2cv3MatE", "_ZNSt6__ndk115numpunct_bynameIcE6__initEPKc", "_ZN2cv18createTonemapDragoEfff", "_ZN2cv6detail17check_failed_autoEmRKNS0_12CheckContextE", "_ZN2cv11matchShapesERKNS_11_InputArrayES2_id", "_ZN2cv8Subdiv2D7newEdgeEv", "Java_org_opencv_features2d_MSER_delete", "Java_org_opencv_dnn_Dnn_imagesFromBlob_10", "Java_org_opencv_features2d_ORB_getMaxFeatures_10", "Java_org_opencv_photo_Photo_createTonemapDrago_12", "_ZN2cv3ocl13ProgramSourceC1ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_SA_", "_ZN2cv3dnn14dnn4_v201812219LSTMLayer6createERKNS1_11LayerParamsE", "_ZN2cv3dnn14dnn4_v2018122125readNetFromModelOptimizerERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "cvStopLoop", "_ZN2cv7hconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNSt13runtime_errorD2Ev", "_ZN2cv3hal6min16uEPKtmS2_mPtmiiPv", "_ZN2cv3hal6max32sEPKimS2_mPimiiPv", "_ZNSt6__ndk118__time_get_storageIcE4initERKNS_5ctypeIcEE", "Java_org_opencv_ml_DTrees_getUseSurrogates_10", "_ZNKSt6__ndk16locale9use_facetERNS0_2idE", "_ZN2cv3ocl7ContextC2Ei", "_ZN2cv11arrowedLineERKNS_17_InputOutputArrayENS_6Point_IiEES4_RKNS_7Scalar_IdEEiiid", "Java_org_opencv_core_Core_log_10", "_ZNKSt6__ndk120__time_get_c_storageIcE3__rEv", "Java_org_opencv_imgproc_Imgproc_minEnclosingTriangle_10", "_ZN2cv9Feature2D16detectAndComputeERKNS_11_InputArrayES3_RNSt6__ndk16vectorINS_8KeyPointENS4_9allocatorIS6_EEEERKNS_12_OutputArrayEb", "_ZNK2cv10softdoublermERKS0_", "_ZNSt6__ndk117declare_reachableEPv", "Java_org_opencv_core_TickMeter_reset_10", "_ZN2cv28connectedComponentsWithStatsERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_iii", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi", "Java_org_opencv_core_Core_extractChannel_10", "Java_org_opencv_core_Core_patchNaNs_11", "_ZNSt6__ndk114error_categoryD1Ev", "_ZN2cv3ocl6KernelC2EPKcRKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEPSD_", "_ZN2cv3hal5LU32fEPfmiS1_mi", "_ZN3tbb8internal17generic_scheduler10steal_taskERNS0_10arena_slotEl", "Java_org_opencv_imgproc_Imgproc_compareHist_10", "Java_org_opencv_imgproc_GeneralizedHoughBallard_setVotesThreshold_10", "WebPDecodeYUV", "_ZNK2cv3ocl6Device17hostUnifiedMemoryEv", "Java_org_opencv_core_Core_phase_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_12", "_ZNK2cv2ml6KDTree14findOrthoRangeERKNS_11_InputArrayES4_RKNS_12_OutputArrayES7_S7_", "Java_org_opencv_core_Core_getOptimalDFTSize_10", "_ZN2cv17AVIWriteContainer10writeIndexEiNS_10StreamTypeE", "_ZN2cv3ocl12PlatformInfoC2Ev", "Java_org_opencv_imgproc_GeneralizedHough_getMinDist_10", "_ZNSt6__ndk117__assoc_sub_state4copyEv", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEPPKfdb", "_ZNK3tbb14bad_last_alloc4whatEv", "_ZN2cv15NAryMatIteratorC2Ev", "_ZN2cv16TLSDataContainer7releaseEv", "Java_org_opencv_ml_LogisticRegression_delete", "_ZN2cv3PCA4readERKNS_8FileNodeE", "_ZN2cv9normalizeERKNS_9SparseMatERS0_di", "_ZN2cv4cuda16createContinuousEiiiRKNS_12_OutputArrayE", "_ZN2cv16UMatDataAutoLockD2Ev", "Java_org_opencv_features2d_KAZE_setNOctaveLayers_10", "_ZN2cv3dnn14dnn4_v2018122110BlankLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_photo_TonemapDrago_setBias_10", "_ZN2cv9HuMomentsERKNS_7MomentsERKNS_12_OutputArrayE", "cvMulSpectrums", "_ZN2cv7directx23convertToD3D10Texture2DERKNS_11_InputArrayEP15ID3D10Texture2D", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_12", "_ZN2cv3dnn14dnn4_v2018122121readNetFromTensorflowEPKcmS3_m", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS4_9allocatorIS6_EEEES3_", "Java_org_opencv_ml_TrainData_getTrainResponses_10", "_ZN2cv17CommandLineParser5aboutERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv11VideoWriterlsERKNS_4UMatE", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayES5_iii", "_ZN2cv17DescriptorMatcher6createERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZNSt16nested_exceptionC2Ev", "cvBoxPoints", "cvInitNArrayIterator", "_ZN2cvanERKNS_3MatES2_", "_ZNK2cv3ocl6Device16printfBufferSizeEv", "_ZNK2cv11_InputArray4stepEi", "_ZNSt6__ndk15ctypeIwED2Ev", "_ZN2cv21DetectionBasedTracker3runEv", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE11do_encodingEv", "cvWarpPerspective", "_ZNK2cv3ocl6Device12imageSupportEv", "_ZN2cv9patchNaNsERKNS_17_InputOutputArrayEd", "_ZNK2cv11_InputArray13getUMatVectorERNSt6__ndk16vectorINS_4UMatENS1_9allocatorIS3_EEEE", "Java_org_opencv_video_DenseOpticalFlow_calc_10", "Java_org_opencv_imgproc_Imgproc_putText_11", "Java_org_opencv_core_Core_norm_10", "Java_org_opencv_imgproc_Imgproc_cvtColor_11", "_ZNK2cv3ocl6Device22nativeVectorWidthFloatEv", "_ZNSt6__ndk16localeC2Ev", "_ZN2cv2ml6SVMSGD4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorSizeEv", "_ZN2cv3dnn14dnn4_v201812213NetD2Ev", "_ZN3tbb8internal17generic_scheduler17nested_arena_exitEv", "Java_org_opencv_features2d_Params_get_1maxCircularity_10", "_ZN2cv21DetectionBasedTracker9addObjectERKNS_5Rect_IiEE", "Java_org_opencv_features2d_KAZE_setExtended_10", "cvGetMat", "_ZNK2cv2ml6KDTree11findNearestERKNS_11_InputArrayEiiRKNS_12_OutputArrayES7_S7_S7_", "cvCalcEMD2", "_ZNK2cv4cuda10DeviceInfo16canMapHostMemoryEv", "Java_org_opencv_video_VariationalRefinement_setFixedPointIterations_10", "Java_org_opencv_videoio_VideoCapture_VideoCapture_12", "Java_org_opencv_ml_Boost_getWeightTrimRate_10", "_ZNKSt6__ndk110__time_put8__do_putEPwRS1_PK2tmcc", "Java_org_opencv_video_BackgroundSubtractorMOG2_getShadowValue_10", "_ZN2cvmiERKNS_3MatERKNS_7MatExprE", "_ZN2cv5utils7logging11setLogLevelENS1_8LogLevelE", "_ZNSt6__ndk110__time_putC1EPKc", "_ZN2cv10warpAffineERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "_ZNK2cv9Exception4whatEv", "_ZNSt6__ndk14stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "Java_org_opencv_features2d_KAZE_create_13", "_ZN2cv3hal6cmp64fEPKdmS2_mPhmiiPv", "Java_org_opencv_imgproc_Imgproc_fillPoly_13", "cvCloneSparseMat", "Java_org_opencv_ml_ANN_1MLP_getBackpropWeightScale_10", "_ZN2cv2ml5Boost4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_imgproc_Imgproc_blur_11", "_ZN2cv16UMatDataAutoLockC2EPNS_8UMatDataES2_", "_ZN2cv3ipp13getIppVersionEv", "_ZNSt6__ndk16localeC1ERKS0_PKci", "_ZNK2cv3Mat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv4UMat8copySizeERKS0_", "_ZNK2cv3Mat7reshapeEii", "_ZN2cv5flann20AutotunedIndexParamsC1Effff", "_ZN2cv8Subdiv2DC2Ev", "_ZN3tbb8internal33itt_store_pointer_with_release_v3EPvS1_", "Java_org_opencv_video_DISOpticalFlow_create_10", "_ZN2cveqERKNS_3MatES2_", "_ZN3tbb8internal17generic_scheduler25local_spawn_root_and_waitEPNS_4taskERS3_", "Java_org_opencv_calib3d_Calib3d_validateDisparity_11", "Java_org_opencv_core_Core_subtract_14", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEf", "_ZN3tbb8internal3rml19make_private_serverERNS1_10tbb_clientE", "_ZNK2cv4cuda7HostMem18createGpuMatHeaderEv", "_ZNK2cv12MatAllocator8downloadEPNS_8UMatDataEPviPKmS5_S5_S5_", "_ZN2cv8Subdiv2D10deleteEdgeEi", "Java_org_opencv_photo_AlignMTB_delete", "Java_org_opencv_imgcodecs_Imgcodecs_haveImageReader_10", "_ZNK2cv7MatExpr1tEv", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5Rect_IiEE", "_ZN2cv21getStructuringElementEiNS_5Size_IiEENS_6Point_IiEE", "_ZNSt6__ndk115__thread_structD2Ev", "Java_org_opencv_ml_SVM_getDecisionFunction_10", "_ZN2cv3hal6add32fEPKfmS2_mPfmiiPv", "_ZNK2cv4UMat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZN2cv3dnn14dnn4_v201812213Net19setPreferableTargetEi", "Java_org_opencv_calib3d_StereoSGBM_create_13", "cvSeqPopFront", "Java_org_opencv_features2d_ORB_getPatchSize_10", "Java_org_opencv_ml_SVM_trainAuto_10", "cvGetNumThreads", "Java_org_opencv_calib3d_StereoSGBM_setP2_10", "_ZN2cv9softfloatC2Ej", "_ZNK2cv8Subdiv2D10rotateEdgeEii", "Java_org_opencv_ml_DTrees_getTruncatePrunedTree_10", "_ZN2cv21DetectionBasedTrackerC1ENS_3PtrINS0_9IDetectorEEES3_RKNS0_10ParametersE", "Java_org_opencv_core_Core_setUseIPP_10", "Java_org_opencv_features2d_DescriptorMatcher_create_10", "Java_org_opencv_dnn_Net_getFLOPS_11", "Java_org_opencv_features2d_ORB_delete", "_ZNK2cv9SparseMat9convertToERNS_3MatEidd", "Java_org_opencv_core_Core_norm_13", "Java_org_opencv_ml_ANN_1MLP_setAnnealCoolingRatio_10", "Java_org_opencv_imgproc_GeneralizedHough_detect_13", "_ZN2cv17DescriptorMatcher5matchERKNS_11_InputArrayERNSt6__ndk16vectorINS_6DMatchENS4_9allocatorIS6_EEEES3_", "_ZNK2cv3ocl6Device24preferredVectorWidthLongEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_15", "_ZNKSt6__ndk112ctype_bynameIwE8do_widenEc", "_ZN2cv15calcCovarMatrixERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_17_InputOutputArrayEii", "Java_org_opencv_features2d_KAZE_create_12", "Java_org_opencv_core_Core_add_14", "Java_org_opencv_features2d_Params_set_1maxConvexity_10", "_ZN2cv8Subdiv2DC1ENS_5Rect_IiEE", "Java_org_opencv_imgproc_LineSegmentDetector_detect_12", "_ZN2cv4cuda6GpuMat9adjustROIEiiii", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_12", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_12", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_12", "Java_org_opencv_video_BackgroundSubtractorKNN_getDetectShadows_10", "Java_org_opencv_features2d_AKAZE_create_13", "_ZNK2cv7MatExprclERKNS_5RangeES3_", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_11", "_ZN2cv10HoughLinesERKNS_11_InputArrayERKNS_12_OutputArrayEddidddd", "_ZNSt6__ndk116__narrow_to_utf8ILm32EED2Ev", "Java_org_opencv_core_Mat_n_1elemSize", "_ZN2cv11randShuffleERKNS_17_InputOutputArrayEdPNS_3RNGE", "_ZN2cv3hal11cvtBGRtoLabEPKhmPhmiiiibbb", "_ZN2cv7vconcatERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv13setNumThreadsEi", "_ZNK2cv3Mat7reshapeEiiPKi", "Java_org_opencv_calib3d_Calib3d_composeRT_10", "Java_org_opencv_photo_Photo_textureFlattening_12", "Java_org_opencv_features2d_FastFeatureDetector_getType_10", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_10", "_ZN2cv11FileStorage5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi", "Java_org_opencv_videoio_VideoWriter_VideoWriter_10", "_ZN2cv8SVDecompERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_i", "Java_org_opencv_ml_StatModel_empty_10", "_ZNSt10bad_typeidD0Ev", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEPKc", "Java_org_opencv_imgproc_Imgproc_drawMarker_11", "_ZNK2cv4cuda6GpuMat7reshapeEii", "_ZN2cv3maxERKNS_3MatES2_", "Java_org_opencv_core_Core_split_10", "Java_org_opencv_ml_TrainData_getNames_10", "_ZNK2cv4UMat1tEv", "_ZN3tbb16spin_rw_mutex_v318internal_downgradeEv", "_ZNSt6__ndk16futureIvED1Ev", "Java_org_opencv_core_Core_compare_10", "_ZNSt6__ndk112system_errorC2EiRKNS_14error_categoryEPKc", "_ZN2cv4UMatC1ERKS0_RKNS_5Rect_IiEE", "_ZNSt6__ndk111timed_mutexC1Ev", "Java_org_opencv_video_Video_findTransformECC_11", "_ZN2cv7MomentsC1Edddddddddd", "_ZN2cv4cuda6StreamC1Ev", "cvReleaseMemStorage", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_12", "Java_org_opencv_imgproc_LineSegmentDetector_detect_10", "Java_org_opencv_imgproc_Imgproc_line_11", "Java_org_opencv_objdetect_HOGDescriptor_get_1histogramNormType_10", "Java_org_opencv_photo_Photo_createTonemapMantiuk_10", "Java_org_opencv_imgproc_Imgproc_rectangle_13", "WebPPictureImportBGRA", "_ZN2cv15getDerivKernelsERKNS_12_OutputArrayES2_iiibi", "_ZN2cv3ogl13unmapGLBufferERNS_4UMatE", "_ZN2cv5BRISK6createEiif", "_ZN2cv5utils11getThreadIDEv", "_ZNK2cv4cuda10DeviceInfo12majorVersionEv", "_ZNKSt6__ndk114error_category10equivalentEiRKNS_15error_conditionE", "Java_org_opencv_ml_EM_setCovarianceMatrixType_10", "cvCreateStructuringElementEx", "_ZN2cv2ml7ANN_MLP4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv3hal19cvtTwoPlaneYUVtoBGREPKhS2_mPhmiiibi", "_ZN2cv3hal3logEPKdPdi", "Java_org_opencv_core_Core_SVDecomp_11", "Java_org_opencv_imgproc_Imgproc_polylines_10", "_ZN3tbb8internal3rml14private_serverC2ERNS1_10tbb_clientE", "_ZN2cv3ogl6BufferC1Ev", "_ZNK2cv12GFTTDetector14getDefaultNameEv", "Java_org_opencv_video_FarnebackOpticalFlow_create_15", "_ZN2cv2ml6RTrees6createEv", "_ZN2cv4readERKNS_8FileNodeERii", "_ZNSt6__ndk18ios_base4swapERS0_", "_ZN2cv2ml8KNearest6createEv", "Java_org_opencv_core_Core_findFile_11", "Java_org_opencv_video_KalmanFilter_KalmanFilter_12", "cvGetSubRect", "_ZN2cv3hal8split32sEPKiPPiii", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayE", "_ZN3tbb8internal19itt_load_pointer_v3EPKv", "_ZNSt6__ndk18ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE", "_ZNK2cv5MatOp12augAssignXorERKNS_7MatExprERNS_3MatE", "_ZN2cv15calcBackProjectERKNS_11_InputArrayERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEES2_RKNS_12_OutputArrayERKNS4_IfNS5_IfEEEEd", "_ZN2cv8cubeRootEf", "Java_org_opencv_features2d_ORB_setNLevels_10", "_ZN2cv23getPerspectiveTransformERKNS_11_InputArrayES2_i", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DLinearEv", "_ZN2cv4cuda6GpuMatC1ERKS1_NS_5Rect_IiEE", "_ZN3tbb8internal6market7destroyEv", "_ZNSt16nested_exceptionD2Ev", "_ZN2cv10softdoubleC1Ei", "cvGetTickFrequency", "_ZN2cv5utils2fs8FileLock11lock_sharedEv", "Java_org_opencv_photo_Photo_seamlessClone_10", "_ZN2cv3hal13addWeighted8uEPKhmS2_mPhmiiPv", "Java_org_opencv_ml_EM_predict_12", "Java_org_opencv_imgproc_Imgproc_Laplacian_13", "_ZN3tbb8internal32itt_load_pointer_with_acquire_v3EPKv", "Java_org_opencv_core_Core_n_1minMaxLocManual", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_10", "_ZN2cv3hal10absdiff32sEPKimS2_mPimiiPv", "Java_org_opencv_ml_Boost_setBoostType_10", "Java_org_opencv_ml_TrainData_getNAllVars_10", "_ZN2cv3ocl5TimerC2ERKNS0_5QueueE", "_ZNK2cv10softdoublecvNS_9softfloatEEv", "_ZN2cv7vconcatEPKNS_3MatEmRKNS_12_OutputArrayE", "_ZN2cv6imshowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_3ogl9Texture2DE", "Java_org_opencv_calib3d_StereoSGBM_create_12", "_ZN3tbb8internal6market13arena_in_needEPNS0_5arenaE", "_ZNK2cv8FileNode5isMapEv", "cvMorphologyEx", "Java_org_opencv_calib3d_Calib3d_undistort_11", "cvCreateImage", "Java_org_opencv_photo_Photo_detailEnhance_10", "_ZN2cv25getDefaultNewCameraMatrixERKNS_11_InputArrayENS_5Size_IiEEb", "Java_org_opencv_video_Video_createBackgroundSubtractorKNN_12", "_ZN2cv3hal7split8uEPKhPPhii", "_ZN2cv3ocl6Kernel6createEPKcRKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEPSD_", "_ZN3tbb8internal3rml14private_serverD2Ev", "_ZN2cv3hal8Filter2D6createEPhmiiiiiiiidiibb", "_ZN2cv9SparseMat13resizeHashTabEm", "_ZN2cv8UMatDataD1Ev", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_id", "_ZNK2cv12_OutputArray6assignERKNS_4UMatE", "Java_org_opencv_ml_ANN_1MLP_load_10", "_ZNK2cv12_OutputArray10getUMatRefEi", "_ZN2cv3hal11cvtBGRtoHSVEPKhmPhmiiiibbb", "Java_org_opencv_calib3d_StereoBM_getROI1_10", "_ZN2cv3maxERKNS_4UMatES2_RS0_", "_ZNSt6__ndk15mutexD1Ev", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_11", "Java_org_opencv_imgproc_Imgproc_resize_13", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE5do_inER9mbstate_tPKcS5_RS5_PDsS7_RS7_", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleRange_10", "Java_org_opencv_ml_ParamGrid_get_1maxVal_10", "_ZN2cv3hal10invSqrt32fEPKfPfi", "_ZN2cv5utils2fs8FileLockD2Ev", "_ZN2cvdvEdRKNS_7MatExprE", "Java_org_opencv_imgproc_Imgproc_spatialGradient_12", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_10", "_ZNSt6__ndk18ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE", "Java_org_opencv_video_DISOpticalFlow_create_11", "Java_org_opencv_core_Mat_n_1step1__JI", "_ZNK2cv3ocl6Device17imageMaxArraySizeEv", "Java_org_opencv_calib3d_Calib3d_stereoRectify_14", "Java_org_opencv_calib3d_Calib3d_fisheye_1estimateNewCameraMatrixForUndistortRectify_13", "_ZNK2cv16MatConstIterator3posEPi", "_ZN2cv3hal11Cholesky64fEPdmiS1_mi", "Java_org_opencv_video_KalmanFilter_set_1errorCovPre_10", "_ZN2cv9BFMatcher6createEib", "_ZN2cv3dnn14dnn4_v2018122114writeTextGraphERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZN2cv15extractImageCOIEPKvRKNS_12_OutputArrayEi", "Java_org_opencv_calib3d_Calib3d_calibrateCameraRO_12", "Java_org_opencv_calib3d_Calib3d_fisheye_1initUndistortRectifyMap_10", "Java_org_opencv_features2d_Features2d_drawMatches_12", "_ZN2cv3hal11normHammingEPKhi", "_ZNSt6__ndk119__shared_weak_countD1Ev", "_ZN7cvflann17set_distance_typeENS_16flann_distance_tEi", "_ZNSt6__ndk15ctypeIcEC2EPKmbm", "_ZNSt6__ndk112ctype_bynameIwEC2EPKcm", "WebPDecodeRGBInto", "Java_org_opencv_dnn_DictValue_DictValue_12", "_Z7cvTruncRKN2cv10softdoubleE", "_ZN2cvneERKNS_3MatES2_", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_13", "Java_org_opencv_core_Core_divide_16", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEERS7_RNS4_ImNS5_ImEEEESF_", "Java_org_opencv_imgproc_Imgproc_distanceTransform_10", "_ZN2cv6ScharrERKNS_11_InputArrayERKNS_12_OutputArrayEiiiddi", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE13do_max_lengthEv", "Java_org_opencv_features2d_Params_set_1minConvexity_10", "Java_org_opencv_dnn_Layer_outputNameToIndex_10", "Java_org_opencv_core_Mat_n_1zeros__DDI", "cvGetAffineTransform", "_ZN3tbb17assertion_failureEPKciS1_S1_", "Java_org_opencv_imgproc_Imgproc_calcHist_10", "Java_org_opencv_video_VariationalRefinement_setAlpha_10", "_ZNSt6__ndk18ios_base4InitD2Ev", "_ZN2cv2ml9ParamGridC1Eddd", "_ZN2cv2ml6DTrees5SplitC1Ev", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_3MatE", "_ZN3tbb8internal6marketC2Ejjm", "Java_org_opencv_imgproc_Imgproc_getFontScaleFromHeight_10", "Java_org_opencv_photo_CalibrateRobertson_getRadiance_10", "Java_org_opencv_features2d_BRISK_setThreshold_10", "_ZN2cv8FileNodeC2EPKNS_11FileStorageEmm", "_ZN2cv12GFTTDetector6createEiddibd", "_ZNSt13exception_ptrD2Ev", "Java_org_opencv_core_Mat_n_1convertTo__JJIDD", "_ZN3tbb8internal8governor8sign_offEPNS0_17generic_schedulerE", "cvError", "Java_org_opencv_ml_TrainData_delete", "Java_org_opencv_ml_LogisticRegression_setTrainMethod_10", "_ZNK3tbb8internal32allocate_root_with_context_proxy8allocateEm", "Java_org_opencv_features2d_Params_get_1filterByArea_10", "Java_org_opencv_calib3d_Calib3d_undistortPoints_12", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setFlags_10", "_ZNSt6__ndk114collate_bynameIwEC1EPKcm", "_ZN2cv9magnitudeERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZNSt16nested_exceptionC1Ev", "Java_org_opencv_features2d_FlannBasedMatcher_delete", "Java_org_opencv_imgproc_Imgproc_arrowedLine_12", "Java_org_opencv_photo_Photo_createCalibrateRobertson_11", "_ZNK2cv5MatOp6invertERKNS_7MatExprEiRS1_", "Java_org_opencv_imgproc_LineSegmentDetector_detect_11", "Java_org_opencv_dnn_DictValue_getRealValue_11", "Java_org_opencv_core_Core_PSNR_11", "_ZN3tbb8internal17generic_scheduler16winnow_task_poolEl", "Java_org_opencv_features2d_GFTTDetector_delete", "_ZNSt14overflow_errorD1Ev", "_ZN3tbb8internal6market20lower_arena_priorityERNS0_5arenaElm", "Java_org_opencv_features2d_ORB_getNLevels_10", "_ZNK2cv2ml6KDTree9getPointsERKNS_11_InputArrayERKNS_12_OutputArrayES7_", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_17", "_ZN2cv8UMatDataC1EPKNS_12MatAllocatorE", "_ZN2cv3dnn14dnn4_v2018122113blobFromImageERKNS_11_InputArrayERKNS_12_OutputArrayEdRKNS_5Size_IiEERKNS_7Scalar_IdEEbbi", "_ZN2cv7waitKeyEi", "WebPInitDecBufferInternal", "_ZN3tbb8internal12NFS_AllocateEmmPv", "cvMulTransposed", "_ZNK2cv3dnn14dnn4_v201812213Net14getLayerShapesERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEEiRNS4_IS7_NS5_IS7_EEEESC_", "Java_org_opencv_calib3d_StereoMatcher_getSpeckleWindowSize_10", "Java_org_opencv_photo_Tonemap_delete", "_ZN2cv16BOWKMeansTrainerD0Ev", "_ZN2cv3LDAD1Ev", "Java_org_opencv_features2d_DescriptorMatcher_clear_10", "Java_org_opencv_video_VariationalRefinement_getAlpha_10", "_ZNSt14overflow_errorD2Ev", "Java_org_opencv_video_DISOpticalFlow_setPatchStride_10", "_ZN2cv23calibrationMatrixValuesERKNS_11_InputArrayENS_5Size_IiEEddRdS5_S5_RNS_6Point_IdEES5_", "Java_org_opencv_imgproc_Imgproc_Sobel_13", "_ZN2cv8FileNodeC2ERKS0_", "_ZN2cv3absERKNS_7MatExprE", "Java_org_opencv_features2d_AKAZE_setDescriptorType_10", "Java_org_opencv_features2d_Params_get_1minCircularity_10", "cvPtrND", "_ZN3tbb10interface58internal9task_base7destroyERNS_4taskE", "_ZNK3tbb8internal34allocate_additional_child_of_proxy4freeERNS_4taskE", "Java_org_opencv_core_Mat_n_1reshape_11", "Java_org_opencv_photo_Photo_edgePreservingFilter_13", "_ZNKSt6__ndk16localeeqERKS0_", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE10do_unshiftER9mbstate_tPcS4_RS4_", "_ZN2cv11namedWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi", "Java_org_opencv_ml_SVMSGD_getMarginType_10", "Java_org_opencv_core_Mat_n_1Mat__IIILjava_nio_ByteBuffer_2", "_ZN2cv7directx22getTypeFromDXGI_FORMATEi", "_ZNKSt6__ndk15ctypeIwE10do_tolowerEPwPKw", "Java_org_opencv_video_VariationalRefinement_create_10", "_ZN2cv4sortERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv9Feature2D6detectERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_8KeyPointENS4_9allocatorIS6_EEEENS7_IS9_EEEES3_", "_ZNKSt6__ndk18numpunctIcE11do_truenameEv", "Java_org_opencv_ml_TrainData_getValues_10", "_ZNK2cv4cuda10DeviceInfo14memoryBusWidthEv", "_ZNK2cv7MatExpr4sizeEv", "cvGraphRemoveEdgeByPtr", "_ZN2cv9Exception13formatMessageEv", "cvCloneMat", "Java_org_opencv_core_Core_dft_11", "cvPtr1D", "_ZNK2cv8FileNode3ptrEv", "_ZN2cv3MatC1ERKS0_RKNS_5RangeES5_", "_ZN2cv7directx20getTypeFromD3DFORMATEi", "_ZNSt6__ndk115numpunct_bynameIcED0Ev", "_ZN2cv10wrapperEMDERKNS_11_InputArrayES2_iS2_NS_3PtrIfEERKNS_12_OutputArrayE", "_ZN3tbb10interface914global_control12active_valueEi", "Java_org_opencv_calib3d_Calib3d_initUndistortRectifyMap_10", "_ZN2cv3dnn14dnn4_v201812218LRNLayer6createERKNS1_11LayerParamsE", "cvGetReal2D", "_ZNK2cv3ocl6Kernel13workGroupSizeEv", "cvTrace", "cvSetReal2D", "Java_org_opencv_features2d_GFTTDetector_create_18", "Java_org_opencv_dnn_DictValue_DictValue_10", "_ZN2cv3hal9absdiff8uEPKhmS2_mPhmiiPv", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_12", "Java_org_opencv_core_Mat_n_1ones__DDI", "_ZNK2cv2ml6KDTree4dimsEv", "_ZNSt6__ndk17codecvtIwc9mbstate_tEC2Em", "Java_org_opencv_features2d_BRISK_create_16", "_ZN3tbb8internal8governor13one_time_initEv", "Java_org_opencv_ml_Boost_delete", "_ZNK2cv3ocl6Kernel3ptrEv", "cvCornerMinEigenVal", "_ZN2cv7fisheye13projectPointsERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_7Affine3IdEES3_S3_dS6_", "_ZN2cv17startWindowThreadEv", "_ZN2cv15NAryMatIterator4initEPPKNS_3MatEPS1_PPhi", "Java_org_opencv_dnn_Dnn_readNetFromTensorflow_10", "Java_org_opencv_ml_DTrees_getCVFolds_10", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithAlgorithm_10", "Java_org_opencv_photo_CalibrateDebevec_getSamples_10", "Java_org_opencv_imgproc_Imgproc_pyrUp_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_11", "_ZN2cv5utils5trace7details6Region4ImplC1ERNS2_23TraceManagerThreadLocalEPS3_RS3_RKNS3_21LocationStaticStorageEl", "Java_org_opencv_ml_RTrees_setTermCriteria_10", "_ZN2cv3ocl12PlatformInfoC2EPv", "_ZN2cv3ocl7ContextC2Ev", "_ZN2cv11sepFilter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_S2_NS_6Point_IiEEdi", "_ZN2cv9floodFillERKNS_17_InputOutputArrayES2_NS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZN2cv4cuda6GpuMatC2EiiiPvm", "_ZN2cv16FileNodeIteratorppEv", "_ZNK2cv9SparseMat6copyToERNS_3MatE", "cvReleaseImageHeader", "_ZN2cv3hal6min32fEPKfmS2_mPfmiiPv", "_ZN3tbb8internal19PrintRMLVersionInfoEPvPKc", "_ZNSt6__ndk113shared_futureIvED1Ev", "_ZNK2cv8Subdiv2D7edgeOrgEiPNS_6Point_IfEE", "_ZN2cv3hal5div8uEPKhmS2_mPhmiiPv", "_ZN2cv12VideoCapture8retrieveERKNS_12_OutputArrayEi", "_ZN2cv20checkHardwareSupportEi", "cvClearGraph", "_ZNKSt11logic_error4whatEv", "_ZN2cv3powERKNS_9softfloatES2_", "_ZN2cv12equalizeHistERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZNK2cv10softdoubleplERKS0_", "Java_org_opencv_core_Core_normalize_15", "_ZN2cv6kmeansERKNS_11_InputArrayEiRKNS_17_InputOutputArrayENS_12TermCriteriaEiiRKNS_12_OutputArrayE", "_ZN2cv3ocl12PlatformInfoD1Ev", "_ZN2cv3ogl6Buffer8copyFromERKNS_11_InputArrayERNS_4cuda6StreamENS1_6TargetEb", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_11", "Java_org_opencv_imgproc_CLAHE_setClipLimit_10", "Java_org_opencv_calib3d_Calib3d_matMulDeriv_10", "Java_org_opencv_video_FarnebackOpticalFlow_setFlags_10", "cvCreateGraph", "Java_org_opencv_features2d_ORB_create_19", "_ZN2cv9FormatterD1Ev", "_ZN2cv15getVersionMajorEv", "_ZN2cv5flann5IndexD0Ev", "Java_org_opencv_video_KalmanFilter_set_1transitionMatrix_10", "Java_org_opencv_core_Mat_n_1copyTo__JJ", "_ZN2cv3ocl6KernelC2ERKS1_", "_ZN2cv4cuda6GpuMat6createEiii", "_ZN2cv25decomposeProjectionMatrixERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_", "_ZN2cv18getWindowImageRectERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZNSt6__ndk16futureIvEC1EPNS_17__assoc_sub_stateE", "_ZNK2cv3LDA4saveERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_fillPoly_12", "Java_org_opencv_ml_ANN_1MLP_setAnnealFinalT_10", "cvTransform", "_ZNSt6__ndk16localeD1Ev", "_ZNK2cv3PCA11backProjectERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv5flann11IndexParamsC1Ev", "Java_org_opencv_ml_TrainData_getTrainSamples_10", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE11do_encodingEv", "cvGet3D", "_ZN2cv16FileNodeIteratorC2ERKNS_8FileNodeEb", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_10", "cvEllipse2Poly", "_ZNKSt6__ndk114__codecvt_utf8IDiE10do_unshiftER9mbstate_tPcS4_RS4_", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_13", "_ZNK2cv4cuda10DeviceInfo12isCompatibleEv", "_ZNSt12length_errorD0Ev", "_ZN2cv10BOWTrainerD1Ev", "_ZN2cv19connectedComponentsERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZNSt13bad_exceptionD2Ev", "Java_org_opencv_features2d_ORB_create_10", "Java_org_opencv_imgproc_Imgproc_cornerHarris_10", "_ZN2cv11bitwise_notERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "Java_org_opencv_dnn_Layer_set_1blobs_10", "_ZNK3tbb10interface78internal15task_arena_base16internal_executeERNS1_13delegate_baseE", "_ZN3tbb8internal5arena10free_arenaEv", "_ZNSt6__ndk119__shared_weak_countD0Ev", "_ZNSt6__ndk16localeC1ERKS0_", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarInit_10", "_ZN2cv6detail17check_failed_autoEdRKNS0_12CheckContextE", "_ZN2cvltERKNS_3MatES2_", "Java_org_opencv_core_Mat_nPutI", "_ZNK2cv7MatExpr3colEi", "_ZN2cv5utils5trace7details6Region7destroyEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_10", "_ZN3tbb19task_scheduler_init27internal_blocking_terminateEb", "_ZN2cv21find4QuadCornerSubpixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEE", "_ZN2cv17setErrorVerbosityEb", "Java_org_opencv_core_Core_scaleAdd_10", "_ZN3tbb10interface78internal20isolate_within_arenaERNS1_13delegate_baseEl", "_ZN2cv4cuda6Stream9waitEventERKNS0_5EventE", "Java_org_opencv_core_Mat_n_1push_1back", "_ZN2cv14getTrackbarPosERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_", "_ZN2cv14filterSpecklesERKNS_17_InputOutputArrayEdidS2_", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_core_Core_getBuildInformation_10", "Java_org_opencv_imgproc_Imgproc_findContours_10", "Java_org_opencv_photo_MergeMertens_setSaturationWeight_10", "_ZNSt6__ndk18ios_base6xallocEv", "Java_org_opencv_core_Core_solveCubic_10", "Java_org_opencv_photo_Photo_decolor_10", "Java_org_opencv_video_KalmanFilter_set_1controlMatrix_10", "_ZN2cv5AGASTERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEEib", "Java_org_opencv_imgproc_Imgproc_minEnclosingCircle_10", "Java_org_opencv_core_Core_normalize_11", "_ZSt14get_unexpectedv", "WebPGetWorkerInterface", "Java_org_opencv_calib3d_StereoBM_setSmallerBlockSize_10", "_ZN2cv7decolorERKNS_11_InputArrayERKNS_12_OutputArrayES5_", "Java_org_opencv_ml_EM_trainEM_10", "Java_org_opencv_imgproc_Imgproc_cornerMinEigenVal_12", "_ZN3tbb8internal6market7cleanupERN3rml3jobE", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_11", "_ZN2cv10solveCubicERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_imgproc_Imgproc_fitLine_10", "Java_org_opencv_videoio_VideoCapture_release_10", "Java_org_opencv_features2d_KAZE_getExtended_10", "Java_org_opencv_ml_EM_getCovs_10", "cvWriteFrame", "_ZN2cv2ml6KDTreeC2ERKNS_11_InputArrayEb", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMin_10", "_ZN2cv10fastMallocEm", "_ZN2cv3ogl6Arrays14setVertexArrayERKNS_11_InputArrayE", "Java_org_opencv_features2d_Params_get_1filterByConvexity_10", "_ZN2cvmlEdRKNS_7MatExprE", "_ZNSt6__ndk110__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_rectangle_12", "cvPerspectiveTransform", "_ZN3tbb8internal18dynamic_unlink_allEv", "Java_org_opencv_features2d_BRISK_create_18", "_ZN2cv8clearSeqEP5CvSeq", "_ZN2cv3hal11fastAtan64fEPKdS2_Pdib", "_ZN2cv3ogl11mapGLBufferERKNS0_6BufferENS_10AccessFlagE", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_14", "_ZNSt6__ndk116__narrow_to_utf8ILm32EED1Ev", "_ZSt9terminatev", "_ZN2cv17DescriptorMatcher3addERKNS_11_InputArrayE", "Java_org_opencv_calib3d_Calib3d_solvePnP_10", "_ZN2cv4UMatD1Ev", "_ZN2cv3dnn14dnn4_v2018122110PowerLayer6createERKNS1_11LayerParamsE", "_ZN2cv3dnn14dnn4_v2018122121readNetFromTensorflowERKNSt6__ndk16vectorIhNS2_9allocatorIhEEEES8_", "Java_org_opencv_core_Core_idft_12", "_ZN2cv5flann17KDTreeIndexParamsC2Ei", "_ZNK2cv9BFMatcher5cloneEb", "_ZN3tbb8internal13handle_perrorEiPKc", "Java_org_opencv_imgproc_Imgproc_createCLAHE_11", "Java_org_opencv_photo_TonemapReinhard_setColorAdaptation_10", "_ZN3tbb8internal6market25update_arena_top_priorityERNS0_5arenaEl", "_ZN2cv17CascadeClassifierD1Ev", "_ZNSt6__ndk16localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi", "Java_org_opencv_photo_TonemapMantiuk_getScale_10", "_ZN2cv3ocl6Kernel3setEiPKvm", "_ZNK2cv11FileStorageixERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv3ocl8internal10isCLBufferERNS_4UMatE", "_ZNK2cv3ocl12PlatformInfo7versionEv", "Java_org_opencv_imgproc_Imgproc_drawContours_14", "_ZN2cvmiERKNS_7MatExprERKNS_7Scalar_IdEE", "Java_org_opencv_imgproc_Imgproc_watershed_10", "Java_org_opencv_core_Core_normalize_14", "_ZSt13get_terminatev", "_ZN3tbb8internal9schedulerD0Ev", "_ZNK2cv3ocl6Kernel29preferedWorkGroupSizeMultipleEv", "Java_org_opencv_dnn_Dnn_blobFromImages_11", "Java_org_opencv_dnn_Layer_get_1name_10", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_10", "_ZN2cv3ocl7haveSVMEv", "_ZNSt6__ndk17promiseIvED1Ev", "Java_org_opencv_features2d_Features2d_drawMatches_14", "cvReleaseStructuringElement", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayERNS_4cuda6StreamE", "_ZNK3tbb8internal20allocate_child_proxy4freeERNS_4taskE", "_ZN2cv18getCPUFeaturesLineEv", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_13", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_descriptorType_10", "_ZN2cvmiERKNS_7MatExprES2_", "Java_org_opencv_video_KalmanFilter_delete", "Java_org_opencv_video_FarnebackOpticalFlow_getPolyN_10", "_ZN2cv30createBackgroundSubtractorMOG2Eidb", "_ZNSt6__ndk118__time_get_storageIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZNKSt6__ndk112ctype_bynameIcE10do_tolowerEPcPKc", "_ZN2cv4cuda11TargetArchs17hasEqualOrLessPtxEii", "_ZN2cv9SparseMat7newNodeEPKim", "Java_org_opencv_video_DISOpticalFlow_getUseSpatialPropagation_10", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_11", "Java_org_opencv_dnn_DictValue_getIntValue_11", "_ZN2cv6detail17check_failed_autoEffRKNS0_12CheckContextE", "_ZNK2cv3ocl6Device8vendorIDEv", "_ZNK2cv3Mat5crossERKNS_11_InputArrayE", "_ZNK3tbb8internal20allocate_child_proxy8allocateEm", "Java_org_opencv_photo_Photo_createAlignMTB_11", "Java_org_opencv_features2d_MSER_create_17", "Java_org_opencv_ml_StatModel_isTrained_10", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_", "_ZN2cv17CascadeClassifierC2Ev", "Java_org_opencv_photo_CalibrateDebevec_setRandom_10", "_ZN2cv3hal5mul8sEPKamS2_mPamiiPv", "Java_org_opencv_imgproc_GeneralizedHough_getMaxBufferSize_10", "_ZN2cv3MatC2ERKS0_RKNSt6__ndk16vectorINS_5RangeENS3_9allocatorIS5_EEEE", "_Z10cvIplImageRKN2cv3MatE", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMin_10", "_ZNKSt6__ndk112ctype_bynameIwE9do_narrowEwc", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD2Ev", "_ZN2cv12VideoCapturersERNS_4UMatE", "_ZN2cv3hal9cvt16f32fEPKNS_9float16_tEPfi", "_ZN2cv7addTextERKNS_3MatERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_6Point_IiEESB_iNS_7Scalar_IdEEiii", "_ZN2cv3ocl7Program6createERKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_", "_ZN2cv4gemmERKNS_11_InputArrayES2_dS2_dRKNS_12_OutputArrayEi", "_ZN2cv8solveP3PERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_i", "Java_org_opencv_ml_TrainData_getLayout_10", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS_3MatE", "_ZNK2cv21DetectionBasedTracker10getObjectsERNSt6__ndk16vectorINS0_9ExtObjectENS1_9allocatorIS3_EEEE", "cvClone", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_11", "_ZN2cv3ogl6BufferC1ENS_5Size_IiEEijb", "Java_org_opencv_calib3d_Calib3d_Rodrigues_11", "_ZN2cv18SimpleBlobDetector6createERKNS0_6ParamsE", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_11", "Java_org_opencv_photo_CalibrateRobertson_setThreshold_10", "_ZN2cv5utils2fs9canonicalERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv17DescriptorMatcherD0Ev", "_ZN2cv3dnn14dnn4_v2018122116readNetFromCaffeERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_objdetect_CascadeClassifier_empty_10", "Java_org_opencv_core_Core_PCACompute_12", "Java_org_opencv_imgproc_Subdiv2D_Subdiv2D_10", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_ml_TrainData_getSample_10", "_ZN2cv4UMatC1ERKS0_RKNSt6__ndk16vectorINS_5RangeENS3_9allocatorIS5_EEEE", "cvOr", "_ZN2cv7directx3ocl32initializeContextFromD3D11DeviceEP12ID3D11Device", "Java_org_opencv_features2d_ORB_setPatchSize_10", "Java_org_opencv_calib3d_StereoBM_setROI1_10", "Java_org_opencv_ml_TrainData_getTestResponses_10", "_ZNSt6__ndk112__get_sp_mutEPKv", "Java_org_opencv_core_Core_batchDistance_11", "Java_org_opencv_features2d_Feature2D_getDefaultName_10", "Java_org_opencv_core_Mat_n_1Mat__IIIDDDD", "Java_org_opencv_imgproc_Imgproc_rectangle_17", "_ZN2cv16TLSDataContainerC2Ev", "Java_org_opencv_features2d_Feature2D_empty_10", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2ERKS1_", "Java_org_opencv_video_KalmanFilter_KalmanFilter_11", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE16do_always_noconvEv", "_ZN2cv23initUndistortRectifyMapERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEEiRKNS_12_OutputArrayES7_", "Java_org_opencv_ml_EM_trainEM_13", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPPhi", "_ZN2cv4cuda12getOutputMatERKNS_12_OutputArrayEiiiRNS0_6StreamE", "_ZN2cv9normalizeERKNS_11_InputArrayERKNS_17_InputOutputArrayEddiiS2_", "_ZN2cv16UMatDataAutoLockD1Ev", "_ZN2cv5utils5trace7details12TraceManagerD1Ev", "Java_org_opencv_dnn_Dnn_NMSBoxes_15", "_ZN2cv11VideoWriter6fourccEcccc", "Java_org_opencv_imgproc_Imgproc_ellipse_13", "_ZNK2cv20AgastFeatureDetector14getDefaultNameEv", "_ZN2cv16videoio_registry17getCameraBackendsEv", "Java_org_opencv_video_VariationalRefinement_getOmega_10", "cvSeqRemoveSlice", "_ZN2cv3dnn14dnn4_v201812213NetD1Ev", "_ZN2cv5CannyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEddb", "_ZNSt6__ndk15stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi", "Java_org_opencv_core_Core_add_13", "cvPolyLine", "cvReshapeMatND", "_ZN2cvneERKNS_3MatEd", "Java_org_opencv_imgproc_Imgproc_arcLength_10", "_ZNK2cv9softfloatmiERKS0_", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE9do_lengthERS1_PKcS5_m", "_ZN3tbb8internal13observer_list10remove_refEPNS0_14observer_proxyE", "Java_org_opencv_calib3d_Calib3d_calibrateCameraROExtended_12", "_ZNK2cv9softfloatleERKS0_", "_ZN2cv3hal7recip8sEPKamS2_mPamiiPv", "Java_org_opencv_photo_TonemapReinhard_setLightAdaptation_10", "Java_org_opencv_ml_StatModel_predict_12", "Java_org_opencv_imgproc_Imgproc_Laplacian_11", "_ZN2cv12VideoCaptureC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi", "_ZN2cv5flann20CompositeIndexParamsC1EiiiN7cvflann20flann_centers_init_tEf", "_ZNK2cv17CommandLineParser20getPathToApplicationEv", "_ZN2cvmlERKNS_7MatExprERKNS_3MatE", "_ZNSt6__ndk18__sp_mut6unlockEv", "cvGet1D", "Java_org_opencv_video_SparseOpticalFlow_delete", "Java_org_opencv_dnn_Dnn_blobFromImage_10", "_ZNSt6__ndk111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEE", "_ZN2cv3ocl7Program4readERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZN2cv5splitERKNS_11_InputArrayERKNS_12_OutputArrayE", "WebPDecodeBGRInto", "_ZN3tbb8internal31Scheduler_OneTimeInitializationEb", "Java_org_opencv_core_Core_kmeans_10", "Java_org_opencv_features2d_BRISK_create_15", "_ZNSt6__ndk16thread20hardware_concurrencyEv", "_ZN2cv16BOWKMeansTrainerC2EiRKNS_12TermCriteriaEii", "Java_org_opencv_photo_CalibrateRobertson_setMaxIter_10", "_ZN2cv12boundingRectERKNS_11_InputArrayE", "_ZN3tbb8internal14observer_proxyC2ERNS0_26task_scheduler_observer_v3E", "Java_org_opencv_imgproc_GeneralizedHough_setCannyLowThresh_10", "Java_org_opencv_ml_TrainData_getResponseType_10", "_ZN3tbb8internal19allocate_root_proxy8allocateEm", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_11", "_ZN2cv15getNearestPointERKNSt6__ndk16vectorINS_6Point_IfEENS0_9allocatorIS3_EEEEf", "_ZN2cv17AVIWriteContainer13initContainerERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS_5Size_IiEEb", "_ZNK3tbb8internal27allocate_continuation_proxy8allocateEm", "Java_org_opencv_ml_ParamGrid_get_1logStep_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork4stopEv", "_ZN2cv3ogl9Texture2DC1EiiNS1_6FormatEjb", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE5do_inER9mbstate_tPKcS5_RS5_PwS7_RS7_", "_ZN2cv11writeScalarERNS_11FileStorageEi", "cvSeqInsert", "_ZN2cv12approxPolyDPERKNS_11_InputArrayERKNS_12_OutputArrayEdb", "_ZN2cv14setWindowTitleERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_", "Java_org_opencv_calib3d_StereoSGBM_create_14", "Java_org_opencv_objdetect_CascadeClassifier_getOriginalWindowSize_10", "_ZN2cv6repeatERKNS_11_InputArrayEiiRKNS_12_OutputArrayE", "_ZN2cv3hal7invSqrtEPKfPfi", "_ZN2cv4flipERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv16setMouseCallbackERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPFviiiiPvES9_", "Java_org_opencv_imgproc_Imgproc_moments_10", "_ZN2cv3ocl23checkOptimalVectorWidthEPKiRKNS_11_InputArrayES5_S5_S5_S5_S5_S5_S5_S5_NS0_17OclVectorStrategyE", "Java_org_opencv_android_Utils_nBitmapToMat2", "_ZNK2cv11_InputArray12isContinuousEi", "_ZN2cv26convertPointsToHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "Java_org_opencv_ml_EM_predict2_10", "_ZN2cv7sortIdxERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZNK2cv4cuda10DeviceInfo13totalConstMemEv", "_ZN2cv4cuda11TargetArchs6hasPtxEii", "Java_org_opencv_core_Mat_n_1type", "_ZNK2cv14DefaultDeleterI9CvCaptureEclEPS1_", "_ZNK3tbb8internal34allocate_additional_child_of_proxy8allocateEm", "_ZNK2cv8Subdiv2D11getEdgeListERNSt6__ndk16vectorINS_3VecIfLi4EEENS1_9allocatorIS4_EEEE", "_ZN2cv9SparseMat5eraseEiiiPm", "_ZNSt6__ndk118__time_get_storageIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv18findFundamentalMatERKNS_11_InputArrayES2_iddRKNS_12_OutputArrayE", "_ZN2cv4sqrtERKNS_10softdoubleE", "Java_org_opencv_calib3d_Calib3d_estimateAffine3D_10", "cvGetDiag", "_ZN2cv3dnn14dnn4_v201812213Net7forwardERNSt6__ndk16vectorINS4_INS_3MatENS3_9allocatorIS5_EEEENS6_IS8_EEEERKNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISG_EEEE", "_ZN2cv2ml6DTrees6createEv", "Java_org_opencv_dnn_Net_getLayerNames_10", "_ZNKSt6__ndk120__time_get_c_storageIwE7__weeksEv", "Java_org_opencv_core_Core_flip_10", "cvResizeWindow", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_12", "cvCreateImageHeader", "_ZN2cv3ocl7ContextC2ERKS1_", "Java_org_opencv_features2d_Params_get_1maxArea_10", "Java_org_opencv_features2d_MSER_create_13", "_ZNK2cv3PCA5writeERNS_11FileStorageE", "_ZNK2cv12_OutputArray6assignERKNS_3MatE", "Java_org_opencv_features2d_ORB_getFastThreshold_10", "Java_org_opencv_imgproc_Imgproc_rectangle_11", "Java_org_opencv_imgproc_Imgproc_blur_12", "_ZN2cv3dnn14dnn4_v201812217readNetERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_", "Java_org_opencv_objdetect_HOGDescriptor_get_1cellSize_10", "_ZNK2cv12_OutputArray9fixedSizeEv", "_ZN3tbb8internal22AvailableHwConcurrencyEv", "Java_org_opencv_calib3d_Calib3d_calibrateCameraROExtended_11", "Java_org_opencv_imgproc_Imgproc_blur_10", "Java_org_opencv_ml_TrainData_getTrainSamples_11", "_ZN2cv11VideoWriter3setEid", "_ZNK2cv3dnn14dnn4_v201812213Net23getUnconnectedOutLayersEv", "_ZNSt6__ndk18ios_base7failureC1EPKcRKNS_10error_codeE", "_ZNK2cv16FileNodeIterator7equalToERKS0_", "Java_org_opencv_imgproc_Imgproc_Sobel_11", "cvNextGraphItem", "Java_org_opencv_core_Core_normalize_12", "_ZN2cv3dnn14dnn4_v2018122112ReshapeLayer6createERKNS1_11LayerParamsE", "_ZN2cv24createCalibrateRobertsonEif", "_ZN2cv3ocl12PlatformInfoC1EPv", "Java_org_opencv_ml_SVMSGD_setOptimalParameters_11", "Java_org_opencv_features2d_BOWTrainer_cluster_10", "_ZN2cv3PCAclERKNS_11_InputArrayES3_ii", "cvGetTrackbarPos", "_ZNSt6__ndk111timed_mutexC2Ev", "Java_org_opencv_objdetect_HOGDescriptor_get_1gammaCorrection_10", "_ZN2cv4readERKNS_8FileNodeERNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKS9_", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_12", "cvStartAppendToSeq", "Java_org_opencv_core_Core_eigen_11", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DLinearEv", "_ZNSt20bad_array_new_lengthD0Ev", "_ZNSt6__ndk114__shared_count16__release_sharedEv", "_ZN2cv3dnn14dnn4_v201812215Layer8finalizeERKNSt6__ndk16vectorIPNS_3MatENS3_9allocatorIS6_EEEERNS4_IS5_NS7_IS5_EEEE", "Java_org_opencv_core_Mat_n_1ones__III", "Java_org_opencv_ml_StatModel_train_10", "Java_org_opencv_calib3d_StereoMatcher_getNumDisparities_10", "_ZN2cv3hal8merge16uEPPKtPtii", "_ZN2cv10BOWTrainerD2Ev", "Java_org_opencv_ml_RTrees_setCalculateVarImportance_10", "_ZNK2cv3ocl6Device13globalMemSizeEv", "_ZN3tbb8internal17generic_scheduler13create_workerERNS0_6marketEm", "Java_org_opencv_ml_EM_setClustersNumber_10", "Java_org_opencv_features2d_KAZE_getThreshold_10", "_ZN2cv11mixChannelsERKNS_11_InputArrayERKNS_17_InputOutputArrayEPKim", "_ZNSt11logic_errorC2EPKc", "Java_org_opencv_ml_KNearest_getAlgorithmType_10", "_ZN2cv8internal15IntrinsicParams4InitERKNS_3VecIdLi2EEES5_RKNS2_IdLi4EEERKd", "Java_org_opencv_video_Video_buildOpticalFlowPyramid_11", "cvSeqPopMulti", "Java_org_opencv_ml_DTrees_getPriors_10", "Java_org_opencv_calib3d_Calib3d_convertPointsToHomogeneous_10", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_11", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getWinSize_10", "Java_org_opencv_imgproc_Subdiv2D_nextEdge_10", "_ZN2cv4cuda6StreamC2ERKNS_3PtrINS0_6GpuMat9AllocatorEEE", "_ZN2cv4cuda19setBufferPoolConfigEimi", "_ZN2cv16AVIReadContainer8skipJunkERNS_9RiffChunkE", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERKNS_11_InputArrayERNS0_6StreamE", "Java_org_opencv_ml_LogisticRegression_predict_11", "_ZN2cv12cornerHarrisERKNS_11_InputArrayERKNS_12_OutputArrayEiidi", "_ZN2cv16ParallelLoopBodyD1Ev", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoRectify_12", "_ZN2cvorERKNS_7Scalar_IdEERKNS_3MatE", "_ZNK2cv3ocl7Program5writeERNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_calib3d_StereoSGBM_setUniquenessRatio_10", "cvSeqRemove", "_ZNK2cv5MatOp15augAssignDivideERKNS_7MatExprERNS_3MatE", "_ZN2cv3dnn14dnn4_v2018122112SigmoidLayer6createERKNS1_11LayerParamsE", "_ZN2cv3SVD7computeERKNS_11_InputArrayERKNS_12_OutputArrayES6_S6_i", "_ZN2cvplERKNS_7Scalar_IdEERKNS_3MatE", "_ZNK3tbb12missing_wait4whatEv", "Java_org_opencv_ml_EM_trainE_15", "_ZNK2cv13HOGDescriptor15groupRectanglesERNSt6__ndk16vectorINS_5Rect_IiEENS1_9allocatorIS4_EEEERNS2_IdNS5_IdEEEEid", "_ZNK2cv3Mat1tEv", "_ZNK2cv8Subdiv2D9getVertexEiPi", "Java_org_opencv_calib3d_StereoMatcher_compute_10", "_ZN2cv9BFMatcherC1Eib", "_ZN2cv15NAryMatIteratorppEi", "_ZN2cveqERKNS_3MatEd", "_ZN2cvleERKNS_3MatEd", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE6do_outER9mbstate_tPKwS5_RS5_PcS7_RS7_", "_ZN2cv12updateWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN2cv3logERKNS_9softfloatE", "_ZN2cv16TLSDataContainer7cleanupEv", "Java_org_opencv_features2d_BRISK_create_13", "_ZN2cv3dnn14dnn4_v201812215Layer13unsetAttachedEv", "Java_org_opencv_features2d_GFTTDetector_getHarrisDetector_10", "Java_org_opencv_imgproc_Imgproc_moments_11", "_ZNK2cv3ocl6Device11maxSamplersEv", "Java_org_opencv_calib3d_StereoBM_getPreFilterType_10", "cvStartWindowThread", "_ZNSt6__ndk110__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_Canny_10", "_ZNSt6__ndk16futureIvE3getEv", "_ZN2cv2ml9TrainData12getSubMatrixERKNS_3MatES4_i", "cvCalcArrBackProject", "Java_org_opencv_objdetect_CascadeClassifier_CascadeClassifier_11", "Java_org_opencv_imgproc_Subdiv2D_insert_10", "WebPMemoryWriterClear", "_ZN2cv5flann16SavedIndexParamsC2ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv17FlannBasedMatcher17convertToDMatchesERKNS_17DescriptorMatcher20DescriptorCollectionERKNS_3MatES7_RNSt6__ndk16vectorINS9_INS_6DMatchENS8_9allocatorISA_EEEENSB_ISD_EEEE", "_ZN2cv18illuminationChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEff", "_ZN2cv3hal6min16sEPKsmS2_mPsmiiPv", "_ZN2cv12useOptimizedEv", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_19", "Java_org_opencv_ml_ANN_1MLP_getWeights_10", "Java_org_opencv_photo_Photo_denoise_1TVL1_10", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC1ERKS1_", "_ZNK2cv9Algorithm11writeFormatERNS_11FileStorageE", "_ZN2cv3dnn14dnn4_v2018122118readNetFromDarknetERKNSt6__ndk16vectorIhNS2_9allocatorIhEEEES8_", "Java_org_opencv_dnn_Net_getMemoryConsumption_11", "_ZN2cv18getMouseWheelDeltaEi", "_ZN2cv13HOGDescriptor24getDaimlerPeopleDetectorEv", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE16do_always_noconvEv", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_11", "_ZN2cv17CascadeClassifier16detectMultiScaleERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEERNS5_IiNS8_IiEEEEdiiNS_5Size_IiEESG_", "_ZN2cv6detail17check_failed_autoEfRKNS0_12CheckContextE", "_ZN2cv3hal9magnitudeEPKfS2_Pfi", "cvGraphRemoveEdge", "Java_org_opencv_imgproc_Imgproc_morphologyEx_13", "Java_org_opencv_video_VariationalRefinement_setSorIterations_10", "Java_org_opencv_calib3d_Calib3d_sampsonDistance_10", "WebPPictureHasTransparency", "_ZN2cv12VideoCapture4readERKNS_12_OutputArrayE", "_ZNSt13runtime_errorC1EPKc", "Java_org_opencv_core_Core_subtract_11", "Java_org_opencv_ml_EM_trainM_11", "Java_org_opencv_ml_EM_getWeights_10", "Java_org_opencv_calib3d_Calib3d_stereoCalibrate_10", "_ZN2cv15findCirclesGridERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEE", "_ZN3tbb8internal6market28mandatory_concurrency_enableEPNS0_5arenaE", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarMin_10", "_ZNK2cv17CommandLineParser5checkEv", "Java_org_opencv_core_Core_multiply_10", "Java_org_opencv_calib3d_StereoSGBM_create_111", "cvSetRemove", "cvCalcBayesianProb", "_ZN2cv9BFMatcher15radiusMatchImplERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEfS3_b", "_ZN2cv3dnn14dnn4_v201812218AbsLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_17", "_ZN2cv23estimateAffinePartial2DERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidmdm", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_9Feature2DEEERKNS1_INS_17DescriptorMatcherEEE", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE10do_unshiftER9mbstate_tPcS4_RS4_", "cvIntegral", "_ZNSt6__ndk114__shared_countD2Ev", "Java_org_opencv_core_Core_getVersionString_10", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE16do_always_noconvEv", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_core_Core_min_11", "_ZN2cv3ogl9Texture2D14setAutoReleaseEb", "_ZNSt6__ndk14stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm", "_ZN2cv9SparseMat3ptrEPKibPm", "Java_org_opencv_features2d_BRISK_getThreshold_10", "_ZNKSt6__ndk120__time_get_c_storageIwE8__monthsEv", "Java_org_opencv_imgproc_Imgproc_adaptiveThreshold_10", "_ZNK2cv3ocl6Device23preferredVectorWidthIntEv", "Java_org_opencv_videoio_VideoWriter_write_10", "Java_org_opencv_core_Core_subtract_12", "_ZN2cv3ocl7Image2DD2Ev", "Java_org_opencv_core_Mat_n_1delete", "Java_org_opencv_imgcodecs_Imgcodecs_imread_11", "_ZN2cv8imdecodeERKNS_11_InputArrayEi", "Java_org_opencv_ml_TrainData_setTrainTestSplitRatio_10", "Java_org_opencv_features2d_ORB_setFastThreshold_10", "Java_org_opencv_ml_TrainData_getSampleWeights_10", "_ZNK2cv3ocl5Queue17getProfilingQueueEv", "_ZNK11CvSparseMat15copyToSparseMatERN2cv9SparseMatE", "_ZN2cv9softfloatC2Ei", "_ZN2cveqEdRKNS_3MatE", "Java_org_opencv_ml_TrainData_getNTrainSamples_10", "_ZNK2cv3dnn14dnn4_v201812213Net8getFLOPSEiRKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEE", "Java_org_opencv_calib3d_Calib3d_fisheye_1distortPoints_10", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_11", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_12", "Java_org_opencv_features2d_MSER_getDelta_10", "_ZNSt6__ndk121recursive_timed_mutex6unlockEv", "Java_org_opencv_imgproc_Imgproc_createCLAHE_12", "_ZN2cv9waitKeyExEi", "Java_org_opencv_photo_Photo_createTonemapDrago_11", "Java_org_opencv_photo_Photo_denoise_1TVL1_12", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_10", "_ZN2cv14getGaborKernelENS_5Size_IiEEdddddi", "_ZN2cv3ocl7ContextC1Ev", "_ZNSt6__ndk14stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi", "_ZSt17__throw_bad_allocv", "cvCreateSparseMat", "_ZNK2cv3ocl6Device18imageMaxBufferSizeEv", "_ZN2cv11writeScalarERNS_11FileStorageEf", "Java_org_opencv_dnn_Net_setPreferableTarget_10", "Java_org_opencv_core_Core_transpose_10", "_ZN2cv3hal5div8sEPKamS2_mPamiiPv", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_10", "_ZN2cv3hal7normL1_EPKfS2_i", "_Z7cvFloorRKN2cv9softfloatE", "cvWatershed", "_ZN2cv3dnn14dnn4_v201812213Net8getParamENS1_9DictValueEi", "Java_org_opencv_ml_SVM_getCoef0_10", "_ZN2cv21DetectionBasedTracker15InnerParametersC2Ev", "_ZN2cv16UMatDataAutoLockC1EPNS_8UMatDataE", "_ZN2cv3PCAclERKNS_11_InputArrayES3_id", "Java_org_opencv_core_Core_subtract_15", "_ZN2cv11getTextSizeERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEidiPi", "_ZN2cv3ocl12PlatformInfoaSERKS1_", "_ZN3tbb8internal8governor17release_resourcesEv", "_ZNK2cv12_OutputArray6assignERKNSt6__ndk16vectorINS_4UMatENS1_9allocatorIS3_EEEE", "Java_org_opencv_photo_Photo_colorChange_10", "Java_org_opencv_features2d_Feature2D_detect_13", "Java_org_opencv_photo_Photo_createCalibrateDebevec_11", "Java_org_opencv_imgcodecs_Imgcodecs_imwrite_11", "_ZN2cv7directx25convertFromD3D11Texture2DEP15ID3D11Texture2DRKNS_12_OutputArrayE", "_ZN3tbb8internal6market21app_parallelism_limitEv", "Java_org_opencv_ml_SVMSGD_getSvmsgdType_10", "_ZN2cv14fillConvexPolyERKNS_17_InputOutputArrayEPKNS_6Point_IiEEiRKNS_7Scalar_IdEEii", "_ZN2cv4cbrtERKNS_9softfloatE", "Java_org_opencv_imgproc_GeneralizedHough_detect_10", "Java_org_opencv_objdetect_CascadeClassifier_convert_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1nbins_10", "Java_org_opencv_imgproc_Imgproc_logPolar_10", "_ZN2cv13mulTransposedERKNS_11_InputArrayERKNS_12_OutputArrayEbS2_di", "cvSobel", "Java_org_opencv_ml_RTrees_getActiveVarCount_10", "cvGetWindowName", "_ZN2cv7addTextERKNS_3MatERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_6Point_IiEERKNS_6QtFontE", "_ZN2cvdvERKNS_7MatExprEd", "Java_org_opencv_photo_Photo_createAlignMTB_10", "Java_org_opencv_dnn_DictValue_isReal_10", "_ZN2cv3ocl13ProgramSourceC2Ev", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_ibd", "_ZNK2cv10softdoubleeqERKS0_", "_ZN2cv3dnn14dnn4_v2018122110ReLU6Layer6createERKNS1_11LayerParamsE", "_ZNK2cv12MatAllocator6uploadEPNS_8UMatDataEPKviPKmS6_S6_S6_", "_ZN2cv15sampsonDistanceERKNS_11_InputArrayES2_S2_", "_ZNK2cv16MinProblemSolver8Function14getGradientEpsEv", "_ZNKSt6__ndk112ctype_bynameIcE10do_tolowerEc", "_ZN2cv11FileStorage5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_", "_ZN2cv16getVersionStringEv", "cvGetElemType", "_ZN2cv3hal13addRNGBias32fEPfPKfi", "_ZNK2cv3ocl6Device18globalMemCacheTypeEv", "Java_org_opencv_core_Core_norm_12", "_ZN2cv16videoio_registry11getBackendsEv", "Java_org_opencv_ml_TrainData_getTrainSampleWeights_10", "Java_org_opencv_imgproc_Imgproc_HoughCircles_11", "Java_org_opencv_calib3d_Calib3d_calibrationMatrixValues_10", "_ZNK2cv8Subdiv2D8nextEdgeEi", "_ZNSt6__ndk16futureIvED2Ev", "WebPValidateConfig", "Java_org_opencv_core_Mat_n_1submat_1rr", "_ZN3tbb10interface78internal15task_arena_base21internal_current_slotEv", "_ZNK2cv3ocl6Device13driverVersionEv", "_ZN2cv4cuda13nonLocalMeansERKNS_11_InputArrayERKNS_12_OutputArrayEfiiiRNS0_6StreamE", "Java_org_opencv_imgproc_Imgproc_polylines_11", "cvSolve", "_ZN2cv3ocl7ContextD1Ev", "_ZN2cv6divideEdRKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_ml_DTrees_setMaxCategories_10", "Java_org_opencv_ml_ANN_1MLP_getRpropDWMinus_10", "_ZNK2cv4cuda6GpuMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv13HOGDescriptor4loadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_", "_ZSt14set_unexpectedPFvvE", "Java_org_opencv_features2d_KAZE_create_16", "_ZN3tbb16spin_rw_mutex_v323internal_acquire_writerEv", "_ZNK2cv21DetectionBasedTracker31calcTrackedObjectPositionToShowEi", "cvAdaptiveThreshold", "_ZTv0_n48_N2cv22SimpleBlobDetectorImpl4readERKNS_8FileNodeE", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_10", "Java_org_opencv_imgproc_Imgproc_pyrDown_12", "_ZNSt20bad_array_new_lengthC2Ev", "Java_org_opencv_imgproc_Imgproc_line_13", "Java_org_opencv_calib3d_Calib3d_findChessboardCorners_10", "_ZN2cv17CommandLineParser4Impl11sort_paramsEv", "_ZN2cv3hal10warpAffineEiPKhmiiPhmiiPKdiiS5_", "_ZNK2cv11FileStorageixEPKc", "Java_org_opencv_video_FarnebackOpticalFlow_setPolySigma_10", "_ZNSt6__ndk17codecvtIDsc9mbstate_tED2Ev", "Java_org_opencv_imgproc_Imgproc_floodFill_12", "_ZN2cv16AVIReadContainer8skipJunkERNS_8RiffListE", "_ZN2cv10drawMarkerERKNS_17_InputOutputArrayENS_6Point_IiEERKNS_7Scalar_IdEEiiii", "Java_org_opencv_features2d_Params_set_1minThreshold_10", "Java_org_opencv_core_Core_SVBackSubst_10", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_11", "_ZN2cv12resizeWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_5Size_IiEE", "Java_org_opencv_core_Mat_nGet", "Java_org_opencv_video_BackgroundSubtractorMOG2_delete", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_11", "_ZN2cv17AVIWriteContainer14putStreamBytesEPKhi", "cvThreshold", "_ZN2cv3hal11cvtXYZtoBGREPKhmPhmiiiib", "_ZN2cv8clipLineENS_5Rect_IiEERNS_6Point_IiEES4_", "_ZN2cv3dnn14dnn4_v2018122113blobFromImageERKNS_11_InputArrayEdRKNS_5Size_IiEERKNS_7Scalar_IdEEbbi", "Java_org_opencv_features2d_GFTTDetector_getMaxFeatures_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_getNMixtures_10", "_ZN2cv3LDAC1Ei", "_ZN2cv4normERKNS_9SparseMatEi", "_ZNK2cv8FileNode4sizeEv", "_ZNK2cv3ocl6Device15maxConstantArgsEv", "_ZNSt6__ndk112ctype_bynameIcEC1EPKcm", "cvLinearPolar", "_ZNKSt6__ndk112ctype_bynameIwE10do_toupperEw", "_ZN2cv5utils31getConfigurationParameterStringEPKcS2_", "Java_org_opencv_video_BackgroundSubtractorKNN_delete", "_ZN2cv3dnn14dnn4_v2018122112LayerFactory19createLayerInstanceERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS1_11LayerParamsE", "_ZNK2cv17DescriptorMatcher20DescriptorCollection14getDescriptorsEv", "_ZN2cv3dnn14dnn4_v2018122114MaxUnpoolLayer6createERKNS1_11LayerParamsE", "_ZNSt11logic_errorD0Ev", "_ZN2cv3PCAC2ERKNS_11_InputArrayES3_id", "Java_org_opencv_imgproc_Imgproc_Scharr_13", "Java_org_opencv_calib3d_StereoBM_getSmallerBlockSize_10", "Java_org_opencv_ml_TrainData_getTrainSamples_12", "cvEndFindContours", "cvStartLoop", "_ZN2cv3dnn14dnn4_v201812213Net8getLayerENS1_9DictValueE", "Java_org_opencv_features2d_AgastFeatureDetector_setType_10", "Java_org_opencv_core_Core_Mahalanobis_10", "_ZN2cv3hal14addWeighted16sEPKsmS2_mPsmiiPv", "Java_org_opencv_ml_StatModel_calcError_10", "Java_org_opencv_video_DISOpticalFlow_delete", "_ZNK2cv7MatExpr3invEi", "_ZN2cv2ml6DTrees4NodeC1Ev", "_ZN2cv3ogl6Arrays14setNormalArrayERKNS_11_InputArrayE", "Java_org_opencv_video_BackgroundSubtractorKNN_getkNNSamples_10", "Java_org_opencv_ml_KNearest_delete", "_ZN2cv8StereoBM6createEii", "_ZN2cv3hal14addWeighted32fEPKfmS2_mPfmiiPv", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_", "Java_org_opencv_video_FarnebackOpticalFlow_create_14", "Java_org_opencv_objdetect_HOGDescriptor_get_1signedGradient_10", "_ZN3tbb8internal3rml14private_worker3runEv", "Java_org_opencv_calib3d_Calib3d_stereoRectify_13", "_ZN2cv5randuERKNS_17_InputOutputArrayERKNS_11_InputArrayES5_", "_ZN2cv3ocl5Queue6finishEv", "_ZN2cv3MatC1ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_imgproc_CLAHE_delete", "_ZN2cv11compareHistERKNS_11_InputArrayES2_i", "_ZN2cv5flann11IndexParamsD1Ev", "_ZN2cv3dnn14dnn4_v201812215LayerD1Ev", "Java_org_opencv_objdetect_HOGDescriptor_setSVMDetector_10", "Java_org_opencv_ml_TrainData_getMissing_10", "_ZN2cv5flann12SearchParamsC2Eifb", "_ZNK2cv8FileNode7isNamedEv", "_ZN2cv10meanStdDevERKNS_11_InputArrayERKNS_12_OutputArrayES5_S2_", "Java_org_opencv_imgproc_Imgproc_erode_14", "cvGetWindowHandle", "_ZN2cv11FileStorageD0Ev", "_ZN2cv4swapERNS_3MatES1_", "_ZN2cv4UMatC1ERKS0_RKNS_5RangeES5_", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_12", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_12", "_ZNK2cv4MSER14getDefaultNameEv", "Java_org_opencv_ml_TrainData_getNVars_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setHistory_10", "Java_org_opencv_imgproc_Imgproc_drawMarker_13", "WebPSafeCalloc", "_ZNSt6__ndk17promiseIvED2Ev", "_ZTv0_n24_N2cv9Feature2DD0Ev", "_ZN2cv3expERKNS_9softfloatE", "_ZNSt6__ndk16localeC2ERKS0_S2_i", "_ZNK2cv7HammingclEPKhS2_i", "cvSum", "_ZNSt6__ndk19to_stringEj", "_ZNK2cv3ocl6Device21intelSubgroupsSupportEv", "_ZNKSt6__ndk120__time_get_c_storageIwE3__XEv", "_ZNK2cv17CommandLineParser10getByIndexEibNS_5ParamEPv", "_ZN2cv9AlgorithmD2Ev", "cvWarpAffine", "_ZN2cv8Subdiv2D6VertexC2Ev", "_ZNSt13exception_ptrD1Ev", "_ZN2cv3hal15warpPerspectiveEiPKhmiiPhmiiPKdiiS5_", "_ZN2cv15KeyPointsFilter22removeDuplicatedSortedERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEE", "_ZN2cv5utils17addDataSearchPathERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_core_TickMeter_delete", "_ZN2cv3hal5sub8sEPKamS2_mPamiiPv", "Java_org_opencv_core_Core_solvePoly_10", "_ZNKSt9bad_alloc4whatEv", "_ZN3tbb8internal6market21update_arena_priorityERNS0_5arenaEl", "Java_org_opencv_features2d_MSER_detectRegions_10", "Java_org_opencv_photo_Photo_edgePreservingFilter_10", "_ZNK2cv3ocl6Device24profilingTimerResolutionEv", "Java_org_opencv_calib3d_StereoSGBM_setMode_10", "cvReleaseSparseMat", "_ZN2cv8imencodeERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayERNS0_6vectorIhNS4_IhEEEERKNSC_IiNS4_IiEEEE", "_ZNSt6__ndk15stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm", "Java_org_opencv_ml_SVM_getGamma_10", "_ZN2cv10softdoubleC1El", "_ZNSt6__ndk16localeD2Ev", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_12", "_ZN2cv21DetectionBasedTrackerD2Ev", "Java_org_opencv_core_Core_getNumberOfCPUs_10", "Java_org_opencv_objdetect_CascadeClassifier_delete", "_ZN2cv4UMatC2ERKS0_RKNS_5Rect_IiEE", "_ZN2cv5remapERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_iiRKNS_7Scalar_IdEE", "Java_org_opencv_video_BackgroundSubtractorKNN_setHistory_10", "Java_org_opencv_imgproc_Imgproc_approxPolyDP_10", "Java_org_opencv_ml_EM_predict_11", "_ZN2cv3dnn14dnn4_v201812213Net7forwardERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZNK2cv16FileNodeIteratordeEv", "_ZN2cv2ml9TrainDataD0Ev", "_ZN2cv18initCameraMatrix2DERKNS_11_InputArrayES2_NS_5Size_IiEEd", "_ZN2cv10getSeqElemEPK5CvSeqi", "Java_org_opencv_features2d_GFTTDetector_create_12", "Java_org_opencv_features2d_Params_Params_10", "_ZNSt6__ndk16locale5facetD0Ev", "Java_org_opencv_ml_RTrees_create_10", "_ZNKSt6__ndk114__codecvt_utf8IDsE9do_lengthER9mbstate_tPKcS5_m", "_ZN3tbb4task22internal_set_ref_countEi", "Java_org_opencv_core_Core_calcCovarMatrix_10", "cvCalcCovarMatrix", "_ZNK2cv3ocl12PlatformInfo4nameEv", "Java_org_opencv_features2d_Feature2D_read_10", "_ZNK2cv11_InputArray7getMat_Ei", "Java_org_opencv_core_Core_eigenNonSymmetric_10", "_ZN2cv16cvtColorTwoPlaneERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "Java_org_opencv_imgproc_Subdiv2D_getVertex_11", "_ZN3tbb8internal18concurrent_monitor14thread_context4initEv", "_ZN2cv3dnn14dnn4_v2018122114imagesFromBlobERKNS_3MatERKNS_12_OutputArrayE", "Java_org_opencv_video_DISOpticalFlow_setFinestScale_10", "_ZN3tbb18captured_exception4moveEv", "_ZN2cv4blurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IiEEi", "_ZN2cv8internal17ComputeHomographyENS_3MatES1_", "Java_org_opencv_videoio_VideoCapture_set_10", "_ZN2cv11RNG_MT19937cvfEv", "_ZN2cv9FormatterD2Ev", "Java_org_opencv_features2d_MSER_create_10", "Java_org_opencv_features2d_AKAZE_setDescriptorChannels_10", "_ZNSt6__ndk119__shared_weak_count12__add_sharedEv", "cvSolveCubic", "Java_org_opencv_ml_EM_trainE_12", "_ZN3tbb4task22spawn_and_wait_for_allERNS_9task_listE", "Java_org_opencv_calib3d_Calib3d_projectPoints_10", "Java_org_opencv_video_DISOpticalFlow_setVariationalRefinementIterations_10", "_ZNKSt16nested_exception14rethrow_nestedEv", "_ZN3tbb8internal5arena7processERNS0_17generic_schedulerE", "Java_org_opencv_ml_LogisticRegression_getTermCriteria_10", "Java_org_opencv_ml_DTrees_getMaxDepth_10", "_ZN2cv10medianBlurERKNS_11_InputArrayERKNS_12_OutputArrayEi", "Java_org_opencv_photo_Photo_illuminationChange_12", "_ZN2cv3dnn14dnn4_v2018122119getAvailableTargetsENS1_7BackendE", "cvNulDevReport", "cvConvertMaps", "cvMaxS", "Java_org_opencv_core_Core_multiply_15", "Java_org_opencv_video_FarnebackOpticalFlow_create_13", "_ZN2cv15KeyPointsFilter15runByPixelsMaskERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEERKNS_3MatE", "Java_org_opencv_imgproc_Imgproc_Canny_14", "Java_org_opencv_dnn_Dnn_resetMyriadDevice_10", "_ZN2cv3hal8split16uEPKtPPtii", "_ZN2cv5utils25addDataSearchSubDirectoryERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_calib3d_StereoBM_getTextureThreshold_10", "_ZN2cv20createMergeRobertsonEv", "Java_org_opencv_core_Core_bitwise_1or_11", "_ZN2cv3hal6div64fEPKdmS2_mPdmiiPv", "_ZN2cv3hal5add8sEPKamS2_mPamiiPv", "_ZN2cv7fisheye15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES3_S3_S3_S3_", "Java_org_opencv_videoio_VideoWriter_VideoWriter_12", "Java_org_opencv_dnn_Dnn_blobFromImages_13", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortImage_10", "_ZNK2cv3ocl6Kernel12localMemSizeEv", "Java_org_opencv_imgproc_GeneralizedHough_setMinDist_10", "Java_org_opencv_imgproc_Imgproc_createCLAHE_10", "cvPointSeqFromMat", "cvErode", "_ZNSt6__ndk18ios_base4InitD1Ev", "Java_org_opencv_core_Mat_n_1setTo__JDDDD", "_ZN2cv12VideoCaptureC1Ev", "Java_org_opencv_features2d_GFTTDetector_setK_10", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE13do_max_lengthEv", "_ZN2cv2ml6RTrees4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_features2d_ORB_create_15", "Java_org_opencv_features2d_DescriptorMatcher_clone_10", "Java_org_opencv_dnn_Dnn_blobFromImage_12", "Java_org_opencv_core_Mat_n_1checkVector__JI", "_ZN2cv3ocl9useOpenCLEv", "Java_org_opencv_imgproc_Imgproc_arrowedLine_14", "Java_org_opencv_calib3d_StereoSGBM_create_11", "_ZN2cv17CascadeClassifier16getMaskGeneratorEv", "Java_org_opencv_calib3d_Calib3d_findCirclesGrid_10", "_ZNK2cv3ocl6Device17maxClockFrequencyEv", "_ZNKSt6__ndk15ctypeIcE10do_toupperEPcPKc", "Java_org_opencv_dnn_Layer_run_10", "_ZN2cv3ocl11haveAmdBlasEv", "_ZN2cv3hal5Morph6createEiiiiiiPhmiiiiiPKdibb", "_ZN2cv6fontQtERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiNS_7Scalar_IdEEiii", "_ZN3tbb8internal17generic_scheduler13create_masterEPNS0_5arenaE", "cvGetDimSize", "_ZN2cv5mergeEPKNS_3MatEmRKNS_12_OutputArrayE", "_ZN2cv3ogl6Buffer14setAutoReleaseEb", "_ZNSt16bad_array_lengthD0Ev", "_ZNSt6__ndk16threadD2Ev", "Java_org_opencv_core_Mat_n_1zeros__III", "_ZN2cv3dnn14dnn4_v201812213Net14addLayerToPrevERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_RNS1_11LayerParamsE", "_ZNK2cv9Algorithm4saveERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZNK2cv11_InputArray8channelsEi", "_ZN2cv4cuda27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffiiRNS0_6StreamE", "_ZNK2cv4cuda10DeviceInfo16asyncEngineCountEv", "cvDilate", "_ZN2cv10cvarrToMatEPKvbbiPNS_10AutoBufferIdLm136EEE", "_ZNK2cv5BRISK14getDefaultNameEv", "_ZN2cv2ml18LogisticRegression4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZNSt6__ndk112bad_weak_ptrD1Ev", "_ZN2cv3ocl9KernelArg8ConstantERKNS_3MatE", "Java_org_opencv_video_Video_writeOpticalFlow_10", "_ZN2cv5utils2fs6getcwdEv", "_ZN2cv16MinProblemSolver8Function11getGradientEPKdPd", "_ZNK2cv8Subdiv2D6Vertex9isvirtualEv", "_ZN3tbb8internal17generic_scheduler15init_stack_infoEv", "Java_org_opencv_core_Core_bitwise_1and_10", "_ZN2cv13parallel_for_ERKNS_5RangeERKNS_16ParallelLoopBodyEd", "_ZN2cv15stereoCalibrateERKNS_11_InputArrayES2_S2_RKNS_17_InputOutputArrayES5_S5_S5_NS_5Size_IiEES5_S5_RKNS_12_OutputArrayESA_SA_iNS_12TermCriteriaE", "_ZNK2cv17CascadeClassifier18isOldFormatCascadeEv", "Java_org_opencv_core_Core_invert_10", "_ZN2cv12pencilSketchERKNS_11_InputArrayERKNS_12_OutputArrayES5_fff", "_ZN2cv7hconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayE", "_ZNKSt6__ndk17codecvtIDic9mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_", "_ZTv0_n72_NK2cv4KAZE14getDefaultNameEv", "_ZN2cv3ocl6KernelC2EPKcRKNS0_7ProgramE", "cvAvgSdv", "Java_org_opencv_ml_LogisticRegression_predict_10", "Java_org_opencv_calib3d_Calib3d_findHomography_13", "_ZN2cv3hal6div16sEPKsmS2_mPsmiiPv", "Java_org_opencv_ml_EM_load_10", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_13", "_Z17cvCreateSparseMatRKN2cv9SparseMatE", "_ZN2cv8internal15IntrinsicParamsC1Ev", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE11do_encodingEv", "Java_org_opencv_core_Mat_n_1dataAddr", "VP8GetInfo", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_13", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_13", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEERmSC_", "Java_org_opencv_ml_LogisticRegression_setLearningRate_10", "Java_org_opencv_dnn_DictValue_DictValue_11", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_12", "Java_org_opencv_video_VariationalRefinement_calcUV_10", "cvSetImageCOI", "Java_org_opencv_calib3d_Calib3d_getDefaultNewCameraMatrix_10", "_ZNK2cv4cuda10DeviceInfo19maxTexture2DLayeredEv", "_ZNSt6__ndk117__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayES4_b", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_12", "_ZN2cv8Subdiv2D11deletePointEi", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE13do_max_lengthEv", "_ZNK2cv3ocl7Context8ndevicesEv", "_ZNK2cv17CommandLineParser9getByNameERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbNS_5ParamEPv", "_ZNSt10bad_typeidC1Ev", "Java_org_opencv_ml_TrainData_getTestSamples_10", "cvCbrt", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DMipmapEv", "Java_org_opencv_imgproc_Imgproc_fillPoly_11", "_ZN2cv7hconcatEPKNS_3MatEmRKNS_12_OutputArrayE", "_ZN2cv3dnn14dnn4_v201812218NMSBoxesERKNSt6__ndk16vectorINS_5Rect_IiEENS2_9allocatorIS5_EEEERKNS3_IfNS6_IfEEEEffRNS3_IiNS6_IiEEEEfi", "_ZN2cv14QRCodeDetectorD1Ev", "cvCheckArr", "_ZN2cv3hal6sub64fEPKdmS2_mPdmiiPv", "_ZNK2cv17CommandLineParser4Impl12split_stringERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEcb", "cvSubstituteContour", "Java_org_opencv_ml_RTrees_getVotes_10", "_ZN2cv22SimpleBlobDetectorImplC1ERKNS_18SimpleBlobDetector6ParamsE", "Java_org_opencv_photo_Photo_detailEnhance_12", "_ZNK2cv11_InputArray7getUMatEi", "_ZNK2cv8FileNode6stringEv", "_ZN2cv9FormattedD1Ev", "cvBackProjectPCA", "_ZNK2cv10softdoubledvERKS0_", "_ZN3tbb18task_group_contextD1Ev", "_ZNK2cv4cuda10DeviceInfo9tccDriverEv", "_ZNSt6__ndk110__time_putD1Ev", "_ZN2cv9BFMatcherC2Eib", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_13", "_ZNK2cv11FileStorage4rootEi", "_ZN2cv3ocl6KernelD1Ev", "_ZNSt6__ndk110__time_getD2Ev", "_ZN2cv5MatOpD1Ev", "_ZNSt6__ndk16futureIvEC2EPNS_17__assoc_sub_stateE", "Java_org_opencv_photo_Photo_textureFlattening_13", "cvRandShuffle", "_ZN2cv15groupRectanglesERNSt6__ndk16vectorINS_5Rect_IiEENS0_9allocatorIS3_EEEERNS1_IiNS4_IiEEEEid", "_ZN2cv3hal7normL1_EPKhS2_i", "Java_org_opencv_ml_TrainData_create_11", "Java_org_opencv_ml_SVM_getKernelType_10", "cvMinS", "_ZNK2cv4cuda10DeviceInfo10integratedEv", "Java_org_opencv_features2d_AKAZE_getDefaultName_10", "_ZN2cv3dnn14dnn4_v2018122118readNetFromDarknetEPKcmS3_m", "_ZN2cv9polylinesERKNS_17_InputOutputArrayERKNS_11_InputArrayEbRKNS_7Scalar_IdEEiii", "Java_org_opencv_core_Core_copyMakeBorder_11", "Java_org_opencv_core_Mat_n_1reshape__JI", "_ZN3tbb8internal15NFS_GetLineSizeEv", "Java_org_opencv_features2d_FastFeatureDetector_create_12", "_ZN2cv9ExceptionD2Ev", "_ZN2cv3Mat4onesENS_5Size_IiEEi", "_ZN2cv11FileStorage20getDefaultObjectNameERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_photo_Photo_edgePreservingFilter_11", "_ZN2cv3ogl9Texture2DC1Ev", "_ZNK2cv17DescriptorMatcher5emptyEv", "_ZN2cv3ipp12getIppStatusEv", "_ZN2cv3dnn14dnn4_v2018122111RegionLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_photo_MergeMertens_setExposureWeight_10", "_ZN2cv3MatC2ERKNSt6__ndk16vectorIiNS1_9allocatorIiEEEEiPvPKm", "_ZNSt6__ndk18numpunctIcEC1Em", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE6do_outER9mbstate_tPKwS5_RS5_PcS7_RS7_", "Java_org_opencv_features2d_MSER_getDefaultName_10", "cvProjectPCA", "_ZN2cv3dnn14dnn4_v2018122111InterpLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_photo_AlignMTB_setExcludeRange_10", "Java_org_opencv_features2d_ORB_setEdgeThreshold_10", "_ZNSt6__ndk18ios_base33__set_badbit_and_consider_rethrowEv", "Java_org_opencv_ml_SVMSGD_setMarginType_10", "_ZN2cv6theRNGEv", "cvGetErrStatus", "cvGetWindowProperty", "Java_org_opencv_imgproc_GeneralizedHough_setTemplate_11", "_ZN2cv3dnn14dnn4_v2018122118CropAndResizeLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_ml_LogisticRegression_setIterations_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setDetectShadows_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_setNMixtures_10", "Java_org_opencv_video_KalmanFilter_get_1statePre_10", "_ZN2cv3dnn14dnn4_v201812215LayerC2ERKNS1_11LayerParamsE", "Java_org_opencv_ml_LogisticRegression_create_10", "Java_org_opencv_imgproc_Imgproc_rectangle_14", "_ZNK2cv4cuda10DeviceInfo12maxTexture2DEv", "Java_org_opencv_features2d_GFTTDetector_create_17", "Java_org_opencv_features2d_ORB_getFirstLevel_10", "_ZN2cv5instr10resetTraceEv", "cvUseOptimized", "_ZNSt6__ndk111timed_mutex6unlockEv", "_ZN3tbb8internal9schedulerD1Ev", "Java_org_opencv_calib3d_Calib3d_stereoCalibrateExtended_11", "_ZN2cv15groupRectanglesERNSt6__ndk16vectorINS_5Rect_IiEENS0_9allocatorIS3_EEEEid", "Java_org_opencv_imgproc_Imgproc_circle_12", "Java_org_opencv_imgproc_Imgproc_Laplacian_10", "_ZN2cv4cuda6GpuMat5setToENS_7Scalar_IdEERNS0_6StreamE", "_ZN2cv9ExceptionD0Ev", "_ZN2cv17CascadeClassifierC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Java_org_opencv_core_Core_polarToCart_11", "_ZNK2cv3dnn14dnn4_v201812213Net8getFLOPSERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEE", "Java_org_opencv_objdetect_HOGDescriptor_detect_12", "Java_org_opencv_core_Core_compare_11", "_ZN3tbb8internal18concurrent_monitor17abort_all_relaxedEv", "Java_org_opencv_android_Utils_nBitmapToMat", "Java_org_opencv_dnn_Net_getPerfProfile_10", "Java_org_opencv_ml_Boost_load_10", "_ZN2cv2ml6KDTree5buildERKNS_11_InputArrayEb", "Java_org_opencv_photo_AlignMTB_shiftMat_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_11", "Java_org_opencv_imgproc_Imgproc_HoughLines_10", "_ZNKSt6__ndk15ctypeIwE10do_toupperEw", "_ZNSt6__ndk114collate_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "Java_org_opencv_imgproc_Imgproc_intersectConvexConvex_11", "Java_org_opencv_core_Core_repeat_10", "_ZNSt16bad_array_lengthC2Ev", "Java_org_opencv_imgproc_Imgproc_EMD_10", "_ZN2cv3hal12magnitude32fEPKfS2_Pfi", "_ZN2cv3ocl7Context6createEi", "Java_org_opencv_video_KalmanFilter_set_1errorCovPost_10", "_ZN2cv3hal8recip32fEPKfmS2_mPfmiiPv", "_ZN2cv27CirclesGridFinderParametersC2Ev", "_ZNSt10bad_typeidD1Ev", "Java_org_opencv_features2d_MSER_create_11", "Java_org_opencv_core_Core_add_10", "Java_org_opencv_photo_Photo_createTonemapDrago_13", "_ZN2cv5flann17KMeansIndexParamsC1EiiN7cvflann20flann_centers_init_tEf", "Java_org_opencv_features2d_GFTTDetector_create_14", "_ZN2cv3hal10absdiff16sEPKsmS2_mPsmiiPv", "_ZNKSt6__ndk18numpunctIwE11do_groupingEv", "Java_org_opencv_core_Core_magnitude_10", "Java_org_opencv_imgproc_GeneralizedHoughBallard_setLevels_10", "Java_org_opencv_features2d_AKAZE_getDiffusivity_10", "_ZN2cv11FileStorageC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_10", "_ZNK2cv3ocl6Device16maxParameterSizeEv", "Java_org_opencv_video_DISOpticalFlow_getVariationalRefinementDelta_10", "_ZNK2cv13HOGDescriptor4saveERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_", "Java_org_opencv_imgproc_Imgproc_matchTemplate_10", "_ZN2cv5BRISK6createEiiRKNSt6__ndk16vectorIfNS1_9allocatorIfEEEERKNS2_IiNS3_IiEEEEffSB_", "Java_org_opencv_videoio_VideoWriter_open_12", "Java_org_opencv_photo_TonemapDrago_setSaturation_10", "_ZN2cv3hal6mul32sEPKimS2_mPimiiPv", "_ZNK2cv12_OutputArray15getGpuMatVecRefEv", "Java_org_opencv_objdetect_HOGDescriptor_computeGradient_12", "Java_org_opencv_photo_Photo_createMergeMertens_12", "_ZNK2cv3ocl6Device12localMemSizeEv", "Java_org_opencv_core_Algorithm_save_10", "Java_org_opencv_video_BackgroundSubtractorKNN_getDist2Threshold_10", "_ZN2cv14QRCodeDetector15detectAndDecodeERKNS_11_InputArrayERKNS_12_OutputArrayES6_", "Java_org_opencv_core_Core_divide_12", "Java_org_opencv_photo_AlignMTB_calculateShift_10", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_11", "cvSliceLength", "_ZN2cv22getFontScaleFromHeightEiii", "_ZN2cv3dnn14dnn4_v201812217readNetERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS2_6vectorIhNS6_IhEEEESF_", "Java_org_opencv_photo_MergeExposures_delete", "_ZN2cv13detailEnhanceERKNS_11_InputArrayERKNS_12_OutputArrayEff", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_12", "Java_org_opencv_core_Mat_nGetD", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionEiRKNSt6__ndk16vectorIiNS3_9allocatorIiEEEERmSA_", "_ZN2cv21DetectionBasedTrackerD0Ev", "_ZN2cv13fitEllipseAMSERKNS_11_InputArrayE", "cvPolarToCart", "_ZN2cv3ogl9Texture2D8copyFromERKNS_11_InputArrayEb", "_ZNK2cv3ocl6Device15image3DMaxDepthEv", "_ZN2cv3expERKNS_10softdoubleE", "cvCreateCameraCapture", "Java_org_opencv_imgproc_GeneralizedHough_setTemplate_13", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_17", "_ZN2cv12HoughCirclesERKNS_11_InputArrayERKNS_12_OutputArrayEiddddii", "_ZNK2cv3ocl6Device22nativeVectorWidthShortEv", "_ZNK2cv5MatOp11augAssignOrERKNS_7MatExprERNS_3MatE", "_ZN2cv3minERKNS_3MatEd", "_ZN2cv3hal11cvtBGRtoYUVEPKhmPhmiiiibb", "_ZN2cv2LUEPfmiS0_mi", "Java_org_opencv_features2d_MSER_getMinArea_10", "Java_org_opencv_core_Mat_n_1setTo__JJJ", "_ZN2cv3hal6div32sEPKimS2_mPimiiPv", "_ZN3tbb8internal6market33mandatory_concurrency_enable_implEPNS0_5arenaEPb", "_ZN3tbb8internal6market13adjust_demandERNS0_5arenaEi", "_ZN2cv3hal6div16uEPKtmS2_mPtmiiPv", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockStride_10", "_ZN2cv3Mat10deallocateEv", "_ZNK2cv8Subdiv2D7edgeDstEiPNS_6Point_IfEE", "Java_org_opencv_ml_KNearest_findNearest_10", "_ZN2cv3ocl6KernelC2Ev", "_ZN2cv15findCirclesGridERKNS_11_InputArrayENS_5Size_IiEERKNS_12_OutputArrayEiRKNS_3PtrINS_9Feature2DEEERKNS_27CirclesGridFinderParametersE", "_ZN2cv3ocl7ProgramC1ERKS1_", "_ZNK2cv12_OutputArray6neededEv", "_ZNSt9exceptionD1Ev", "Java_org_opencv_features2d_MSER_setMinArea_10", "Java_org_opencv_ml_ParamGrid_create_13", "cvGetReal1D", "_ZN2cv7MatExprC2ERKNS_3MatE", "Java_org_opencv_features2d_KAZE_create_11", "_ZNK2cv4UMat7reshapeEiiPKi", "Java_org_opencv_calib3d_Calib3d_RQDecomp3x3_11", "Java_org_opencv_ml_StatModel_isClassifier_10", "Java_org_opencv_ml_TrainData_getTestSampleWeights_10", "_ZN2cv5utils2fs17createDirectoriesERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv17FlannBasedMatcher3addERKNS_11_InputArrayE", "Java_org_opencv_photo_Photo_createMergeMertens_13", "Java_org_opencv_features2d_Params_set_1thresholdStep_10", "cvCalcArrHist", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE11do_encodingEv", "_ZN2cv7momentsERKNS_11_InputArrayEb", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_14", "cvSetSeqBlockSize", "Java_org_opencv_core_Mat_nPutD", "_ZNSt6__ndk18ios_base7failureD1Ev", "Java_org_opencv_imgproc_Subdiv2D_getVoronoiFacetList_10", "_ZN2cv3ocl5QueueC2ERKS1_", "_ZN2cv3hal6mul16sEPKsmS2_mPsmiiPv", "Java_org_opencv_photo_TonemapReinhard_getLightAdaptation_10", "_ZNK2cv4cuda10DeviceInfo12maxSurface3DEv", "Java_org_opencv_features2d_Params_get_1filterByColor_10", "_ZN2cv5flann5IndexC1Ev", "Java_org_opencv_core_Mat_n_1diag__JI", "_ZN2cv3dnn14dnn4_v2018122111ResizeLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Mat_n_1Mat__DDI", "_ZN2cv3ocl14vecopTypeToStrEi", "_ZNK2cv16TLSDataContainer10gatherDataERNSt6__ndk16vectorIPvNS1_9allocatorIS3_EEEE", "_ZSt17current_exceptionv", "_ZN2cv22SparseMatConstIteratorC2EPKNS_9SparseMatE", "Java_org_opencv_ml_ANN_1MLP_setTrainMethod_10", "_ZN2cv21BaseCascadeClassifierD1Ev", "Java_org_opencv_ml_ParamGrid_set_1minVal_10", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE11do_encodingEv", "_ZN2cv17getGaussianKernelEidi", "Java_org_opencv_video_BackgroundSubtractorKNN_setDetectShadows_10", "Java_org_opencv_video_BackgroundSubtractorMOG2_getVarMax_10", "Java_org_opencv_photo_MergeDebevec_process_11", "Java_org_opencv_core_Core_dct_11", "_ZN2cv3ogl6BufferC2Eiiijb", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_15", "_ZN2cv3Mat15getStdAllocatorEv", "_ZN2cv5instr8NodeDataC2ERS1_", "_ZN2cv3ogl6Arrays16resetVertexArrayEv", "_ZN2cv3ocl12PlatformInfoD2Ev", "_ZN2cv17destroyAllWindowsEv", "_ZN2cv18accumulateWeightedERKNS_11_InputArrayERKNS_17_InputOutputArrayEdS2_", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStatsWithAlgorithm_10", "_ZN2cv17triangulatePointsERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZN2cv4cuda18setBufferPoolUsageEb", "_ZN2cv3ogl9Texture2DC2EiiNS1_6FormatEjb", "_ZN2cv11drawMatchesERKNS_11_InputArrayERKNSt6__ndk16vectorINS_8KeyPointENS3_9allocatorIS5_EEEES2_SA_RKNS4_INS_6DMatchENS6_ISB_EEEERKNS_17_InputOutputArrayERKNS_7Scalar_IdEESM_RKNS4_IcNS6_IcEEEENS_16DrawMatchesFlagsE", "_ZN3tbb8internal8governor17create_rml_serverERNS0_3rml10tbb_clientE", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_12", "_ZNSt6__ndk18ios_base16__call_callbacksENS0_5eventE", "Java_org_opencv_imgproc_GeneralizedHoughBallard_getLevels_10", "WebPPictureImportBGR", "Java_org_opencv_features2d_BRISK_create_19", "Java_org_opencv_features2d_BOWKMeansTrainer_delete", "Java_org_opencv_imgproc_Imgproc_remap_10", "_ZN2cv11VideoWriterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiidNS_5Size_IiEEb", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_11", "_ZNK2cv12_OutputArray9getMatRefEi", "_ZNSt6__ndk110to_wstringEj", "_ZN2cv3LUTERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv3ocl6Kernel4Impl3runEiPmS3_bPlRKNS0_5QueueE", "Java_org_opencv_objdetect_HOGDescriptor_get_1blockSize_10", "_ZN2cv21DetectionBasedTracker20updateTrackedObjectsERKNSt6__ndk16vectorINS_5Rect_IiEENS1_9allocatorIS4_EEEE", "Java_org_opencv_android_Utils_nMatToBitmap2", "_ZN2cv3ogl6Buffer6createEiiiNS1_6TargetEb", "Java_org_opencv_objdetect_HOGDescriptor_detect_11", "Java_org_opencv_ml_ParamGrid_get_1minVal_10", "_ZN2cv12KalmanFilter4initEiiii", "cvCreateHist", "cvStartFindContours", "_ZN2cv25BOWImgDescriptorExtractorC2ERKNS_3PtrINS_17DescriptorMatcherEEE", "Java_org_opencv_ml_LogisticRegression_setRegularization_10", "_ZN2cv3hal6max64fEPKdmS2_mPdmiiPv", "_ZN2cv3hal6sub16sEPKsmS2_mPsmiiPv", "_ZNSt6__ndk16threadD1Ev", "_ZN2cv3ocl7ProgramC1Ev", "Java_org_opencv_objdetect_HOGDescriptor_get_1svmDetector_10", "_ZN3tbb8internal18fix_broken_rethrowEv", "Java_org_opencv_calib3d_StereoBM_getROI2_10", "_ZNK2cv3ocl6Device14doubleFPConfigEv", "Java_org_opencv_features2d_KAZE_create_10", "_ZN2cv11FileStorage14endWriteStructEv", "_ZN3tbb8internal28affinity_partitioner_base_v36resizeEj", "cvSet", "_ZN2cv4cuda5EventC1ENS1_11CreateFlagsE", "_ZNSt6__ndk117__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE", "Java_org_opencv_android_Utils_nMatToBitmap", "_ZNSt16nested_exceptionD0Ev", "Java_org_opencv_calib3d_StereoSGBM_create_10", "_ZN2cv7vconcatERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv3ocl13ProgramSourceC2ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_SA_", "_ZNK2cv4cuda10DeviceInfo17maxTextureCubemapEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_12", "_ZN2cv14createTrackbarERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_PiiPFviPvESA_", "_ZN2cv3Mat5zerosEiii", "_ZN2cv7fisheye15stereoCalibrateERKNS_11_InputArrayES3_S3_RKNS_17_InputOutputArrayES6_S6_S6_NS_5Size_IiEERKNS_12_OutputArrayESB_iNS_12TermCriteriaE", "cvFitLine", "_ZNSt6__ndk18numpunctIcED2Ev", "Java_org_opencv_photo_TonemapMantiuk_delete", "Java_org_opencv_core_Core_determinant_10", "_ZN3tbb8internal13observer_list5clearEv", "Java_org_opencv_dnn_Net_setPreferableBackend_10", "Java_org_opencv_imgproc_Imgproc_distanceTransformWithLabels_10", "_ZN2cv11setIdentityERKNS_17_InputOutputArrayERKNS_7Scalar_IdEE", "_ZNKSt6__ndk18numpunctIcE16do_decimal_pointEv", "_ZN2cv13stereoRectifyERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEES2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_idS4_PNS_5Rect_IiEESA_", "cv2DRotationMatrix", "_ZN2cv5flann5IndexC2ERKNS_11_InputArrayERKNS0_11IndexParamsEN7cvflann16flann_distance_tE", "_ZN2cv8Subdiv2D12initDelaunayENS_5Rect_IiEE", "_ZNK2cv3ocl12PlatformInfo6vendorEv", "_ZNSt13runtime_errorC2ERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "Java_org_opencv_features2d_BOWTrainer_clear_10", "WebPBlendAlpha", "_ZNK2cv3ocl12PlatformInfo9getDeviceERNS0_6DeviceEi", "_ZN2cv3ogl6Arrays16setTexCoordArrayERKNS_11_InputArrayE", "Java_org_opencv_ml_ANN_1MLP_getRpropDWPlus_10", "_ZN2cv4readERKNS_8FileNodeERdd", "_ZNSt6__ndk115recursive_mutex6unlockEv", "_ZN2cv8UMatData4lockEv", "_ZNK2cv4cuda6GpuMat8downloadERKNS_12_OutputArrayERNS0_6StreamE", "_ZNK2cv5MatOp8subtractERKNS_7MatExprES3_RS1_", "_ZNSt11logic_errorC1ERKS_", "_ZN2cv3hal11sepFilter2DEiiiPhmS1_miiiiiiS1_iS1_iiidi", "_ZN2cv3ocl5QueueD2Ev", "_ZN2cv22SparseMatConstIteratorC1EPKNS_9SparseMatE", "_ZN2cv3Mat4diagERKS0_", "_ZNK3tbb10interface78internal15task_arena_base16internal_enqueueERNS_4taskEl", "_ZNSt6__ndk16locale5facetD1Ev", "_ZN2cv9SparseMat3HdrC1EiPKii", "_ZNK2cv5MatOp4typeERKNS_7MatExprE", "_ZN2cv9HuMomentsERKNS_7MomentsEPd", "_ZN2cv11VideoWriterlsERKNS_3MatE", "Java_org_opencv_videoio_VideoWriter_delete", "Java_org_opencv_photo_MergeExposures_process_10", "_ZN2cv3hal11Cholesky32fEPfmiS1_mi", "_ZN2cv3dnn14dnn4_v2018122114blobFromImagesERKNS_11_InputArrayEdNS_5Size_IiEERKNS_7Scalar_IdEEbbi", "Java_org_opencv_ml_StatModel_train_12", "cvSetMouseCallback", "_ZNSt6__ndk115numpunct_bynameIcED1Ev", "_ZN2cv3hal8recip64fEPKdmS2_mPdmiiPv", "Java_org_opencv_core_Mat_n_1Mat__DDIDDDD", "Java_org_opencv_calib3d_Calib3d_solvePnP_11", "Java_org_opencv_dnn_Dnn_readNetFromTorch_11", "_ZN2cv3hal5cmp8uEPKhmS2_mPhmiiPv", "_ZN2cv15getCPUTickCountEv", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMin_10", "Java_org_opencv_objdetect_HOGDescriptor_getDaimlerPeopleDetector_10", "Java_org_opencv_video_FarnebackOpticalFlow_create_11", "Java_org_opencv_ml_NormalBayesClassifier_load_10", "Java_org_opencv_video_DISOpticalFlow_setUseSpatialPropagation_10", "cvCloneImage", "Java_org_opencv_core_Mat_n_1size_1i__JI", "_ZNSt6__ndk118__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE", "_ZN2cv3hal8recip32sEPKimS2_mPimiiPv", "cvGraphRemoveVtxByPtr", "_ZNK2cv3ocl7Program9getBinaryERNSt6__ndk16vectorIcNS2_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_findContours_11", "_ZN2cv3dnn14dnn4_v2018122110ReorgLayer6createERKNS1_11LayerParamsE", "_ZNK2cv7MatExpr5crossERKNS_3MatE", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayES8_d", "_ZN2cvplERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv22cornerEigenValsAndVecsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_imgproc_Imgproc_remap_12", "Java_org_opencv_ml_LogisticRegression_getRegularization_10", "_ZN2cv17AVIWriteContainer12jflushStreamEji", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE16do_always_noconvEv", "Java_org_opencv_features2d_AgastFeatureDetector_setThreshold_10", "Java_org_opencv_video_BackgroundSubtractor_getBackgroundImage_10", "Java_org_opencv_core_Core_randShuffle_12", "Java_org_opencv_core_Mat_n_1total", "cvCvtSeqToArray", "_ZN2cv2ml6DTrees4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZNSt6__ndk114collate_bynameIcED0Ev", "cvPtr2D", "_ZN2cv11VideoWriterD1Ev", "Java_org_opencv_features2d_ORB_setScoreType_10", "_ZN2cv11convertMapsERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_ib", "_ZN2cv6detail20check_failed_MatTypeEiRKNS0_12CheckContextE", "_ZN2cv17setWindowPropertyERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEid", "Java_org_opencv_features2d_Features2d_drawKeypoints_10", "Java_org_opencv_features2d_DescriptorMatcher_match_11", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_14", "_ZN2cv20initWideAngleProjMapERKNS_11_InputArrayES2_NS_5Size_IiEEiiRKNS_12_OutputArrayES7_NS_14UndistortTypesEd", "_ZNK2cv4cuda10DeviceInfo19maxSurface2DLayeredEv", "cvMinEnclosingCircle", "_ZN2cv12KalmanFilterC1Ev", "Java_org_opencv_core_Mat_n_1convertTo__JJI", "Java_org_opencv_calib3d_Calib3d_calibrateCameraRO_10", "_ZN2cv17CascadeClassifier4loadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv3dnn14dnn4_v2018122110ConstLayer6createERKNS1_11LayerParamsE", "_ZN2cv3hal11normHammingEPKhS2_ii", "cvInitMatNDHeader", "Java_org_opencv_core_Core_vconcat_10", "Java_org_opencv_objdetect_HOGDescriptor_getWinSigma_10", "Java_org_opencv_imgproc_CLAHE_setTilesGridSize_10", "_ZN2cv3ocl7Image2D17isFormatSupportedEiib", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_16", "_ZNSt6__ndk17codecvtIDic9mbstate_tED2Ev", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE10do_unshiftER9mbstate_tPcS4_RS4_", "_ZNSt6__ndk18ios_baseD1Ev", "Java_org_opencv_imgproc_Imgproc_pyrDown_10", "_ZNSt6__ndk112system_errorC1ENS_10error_codeE", "Java_org_opencv_calib3d_Calib3d_decomposeProjectionMatrix_14", "_ZN2cv17AVIWriteContainerD2Ev", "_ZN2cv8Subdiv2D6locateENS_6Point_IfEERiS3_", "_ZNSt6__ndk121__undeclare_reachableEPv", "_ZNSt6__ndk114error_categoryD0Ev", "cvPyrMeanShiftFiltering", "_ZNK2cv9Feature2D14getDefaultNameEv", "_ZN2cv5flann20CompositeIndexParamsC2EiiiN7cvflann20flann_centers_init_tEf", "cvMakeSeqHeaderForArray", "_ZN3tbb8internal6market7processERN3rml3jobE", "_ZN2cv3hal8integralEiiiPKhmPhmS3_mS3_miii", "_ZN2cv6detail14depthToString_Ei", "_ZN3tbb8internal6marketC1Ejjm", "_ZN2cv2ml9ParamGridC2Ev", "_ZNK2cv3ocl6Device25imageBaseAddressAlignmentEv", "Java_org_opencv_imgproc_Imgproc_Laplacian_14", "_ZN2cv13seamlessCloneERKNS_11_InputArrayES2_S2_NS_6Point_IiEERKNS_12_OutputArrayEi", "WebPMemoryWrite", "Java_org_opencv_calib3d_StereoBM_create_11", "_ZNK2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayES3_RNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEiS3_b", "Java_org_opencv_photo_AlignExposures_delete", "Java_org_opencv_imgcodecs_Imgcodecs_imread_10", "Java_org_opencv_videoio_VideoWriter_fourcc_10", "Java_org_opencv_ml_TrainData_getSubMatrix_10", "cvDet", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_10", "Java_org_opencv_imgproc_Imgproc_getAffineTransform_10", "cvCompareHist", "_ZN2cv5flann17KMeansIndexParamsC2EiiN7cvflann20flann_centers_init_tEf", "_ZNK2cv2ml9StatModel5emptyEv", "Java_org_opencv_calib3d_StereoSGBM_setPreFilterCap_10", "Java_org_opencv_core_Core_rotate_10", "_ZN2cv3dnn14dnn4_v201812218RNNLayer6createERKNS1_11LayerParamsE", "WebPCopyPixels", "_ZN2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEfS3_b", "_ZNKSt6__ndk114__codecvt_utf8IwE13do_max_lengthEv", "_ZN2cvdvERKNS_3MatES2_", "Java_org_opencv_imgproc_Imgproc_resize_11", "Java_org_opencv_video_DenseOpticalFlow_collectGarbage_10", "cvScaleAdd", "_ZN2cv14phaseCorrelateERKNS_11_InputArrayES2_S2_Pd", "_ZN2cv3ocl32buildOptionsAddMatrixDescriptionERNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS7_RKNS_11_InputArrayE", "_ZN2cv3Mat9push_backERKS0_", "_ZN2cv9softfloatC2Em", "Java_org_opencv_core_Mat_n_1colRange", "_ZN2cvmiERKNS_7Scalar_IdEERKNS_7MatExprE", "Java_org_opencv_features2d_DescriptorMatcher_empty_10", "Java_org_opencv_features2d_BRISK_setOctaves_10", "_ZN2cv8internal18WriteStructContextC1ERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSC_", "Java_org_opencv_dnn_Net_setInput_13", "_ZNK2cv8Subdiv2D8QuadEdge6isfreeEv", "Java_org_opencv_photo_TonemapDrago_getSaturation_10", "Java_org_opencv_calib3d_Calib3d_undistortPoints_11", "_ZNK2cv4cuda10DeviceInfo11pciDeviceIDEv", "_ZN3tbb8internal19cpu_has_speculationEv", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_13", "_ZN2cv25BOWImgDescriptorExtractorD1Ev", "Java_org_opencv_features2d_BRISK_getDefaultName_10", "Java_org_opencv_ml_ANN_1MLP_getTermCriteria_10", "Java_org_opencv_features2d_Params_set_1filterByCircularity_10", "_ZN2cv3ocl6DeviceD2Ev", "Java_org_opencv_features2d_ORB_create_13", "_ZN2cv6rotateERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv11SVBackSubstERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZN2cv12VideoCapture4openEii", "Java_org_opencv_dnn_Net_getLayerTypes_10", "Java_org_opencv_calib3d_StereoSGBM_create_15", "_ZN2cv14QRCodeDetectorC1Ev", "_ZNSt6__ndk17codecvtIwc9mbstate_tEC1EPKcm", "_ZNK2cv3ocl6Device13OpenCLVersionEv", "Java_org_opencv_features2d_AKAZE_create_11", "_ZN2cv3ocl7Image2D14canCreateAliasERKNS_4UMatE", "_ZN2cvanERKNS_3MatERKNS_7Scalar_IdEE", "_ZNKSt6__ndk114collate_bynameIwE12do_transformEPKwS3_", "Java_org_opencv_imgproc_Imgproc_phaseCorrelate_12", "_ZN2cv3ocl6KernelaSERKS1_", "cvAcc", "Java_org_opencv_imgproc_Imgproc_sqrBoxFilter_11", "_ZNKSt6__ndk18numpunctIwE11do_truenameEv", "_ZNK2cv10BOWTrainer14getDescriptorsEv", "Java_org_opencv_imgproc_Imgproc_fillConvexPoly_10", "_ZN2cv11RNG_MT199377uniformEff", "_ZNSt6__ndk19to_stringEy", "_ZN2cv5utils5trace7details12TraceManagerD2Ev", "Java_org_opencv_imgproc_Imgproc_ellipse_12", "_ZNK2cv4cuda10DeviceInfo17unifiedAddressingEv", "_ZNK2cv4cuda10DeviceInfo18maxTexture2DGatherEv", "_ZN2cv17calibrateCameraROERKNS_11_InputArrayES2_NS_5Size_IiEEiRKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_SA_iNS_12TermCriteriaE", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE16do_always_noconvEv", "Java_org_opencv_dnn_Net_getLayer_10", "Java_org_opencv_ml_SVM_trainAuto_16", "_ZNSt6__ndk114__shared_countD1Ev", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD0Ev", "_ZNK2cv4cuda10DeviceInfo12minorVersionEv", "_ZN2cv3Mat5zerosENS_5Size_IiEEi", "Java_org_opencv_core_Core_insertChannel_10", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_", "Java_org_opencv_core_Mat_nGetI", "Java_org_opencv_features2d_BRISK_create_12", "_ZN2cv4UMatD2Ev", "_ZNSt6__ndk18ios_base5iwordEi", "_ZN2cv11FileStorageC1Ev", "_ZN2cv3ogl6Buffer9mapDeviceEv", "Java_org_opencv_core_Core_solve_10", "_ZNSt6__ndk19to_stringEi", "Java_org_opencv_photo_Photo_edgePreservingFilter_12", "_ZNSt6__ndk17promiseIvE24set_value_at_thread_exitEv", "_ZNSt6__ndk121recursive_timed_mutexD2Ev", "cvClearSet", "_ZN2cv5instr8NodeDataaSERKS1_", "_ZN2cv4swapERNS_4UMatES1_", "Java_org_opencv_photo_TonemapReinhard_delete", "_ZN2cv3ogl6Arrays13setColorArrayERKNS_11_InputArrayE", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_13", "_ZNK2cv9softfloatgtERKS0_", "_ZNKSt6__ndk114__codecvt_utf8IDiE11do_encodingEv", "Java_org_opencv_photo_MergeMertens_process_11", "_ZNK2cv5MatOp3addERKNS_7MatExprERKNS_7Scalar_IdEERS1_", "_ZN2cv8internal18WriteStructContextD1Ev", "Java_org_opencv_core_Mat_n_1Mat__JIIII", "cvPyrDown", "_ZN2cv8stopLoopEv", "Java_org_opencv_features2d_BFMatcher_create_10", "_ZN2cv3SVDclERKNS_11_InputArrayEi", "_ZNK2cv8FileNodecvfEv", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_15", "_ZNK2cv3ocl7Program9getPrefixEv", "_ZN2cv3dnn14dnn4_v201812215Layer7tryFuseERNS_3PtrIS2_EE", "Java_org_opencv_imgproc_Imgproc_getGaussianKernel_10", "_ZN2cv4MSER6createEiiiddiddi", "_ZN2cv17CascadeClassifier16setMaskGeneratorERKNS_3PtrINS_21BaseCascadeClassifier13MaskGeneratorEEE", "_ZN2cv3Mat19setDefaultAllocatorEPNS_12MatAllocatorE", "Java_org_opencv_features2d_MSER_create_16", "_ZN2cv3dnn14dnn4_v201812215LayerC2Ev", "_ZNSt6__ndk112future_errorD2Ev", "_ZN2cv16videoio_registry17getWriterBackendsEv", "_ZN2cv5utils2fs4joinERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZNK2cv17AVIWriteContainer12getStreamPosEv", "_ZN2cv3expERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZNK2cv4cuda10DeviceInfo12maxSurface1DEv", "_ZNSt6__ndk17promiseIvE13set_exceptionESt13exception_ptr", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_11", "_ZN2cv11demosaicingERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvFloodFill", "_ZN2cv12VideoCaptureD2Ev", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_18", "_ZN2cv2ml2EM6createEv", "Java_org_opencv_objdetect_Objdetect_groupRectangles_11", "_ZN2cv17AVIWriteContainer15startWriteChunkEj", "_ZN2cv3LDA11reconstructERKNS_11_InputArrayE", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE13do_max_lengthEv", "_ZTv0_n40_NK2cv9Feature2D5writeERNS_11FileStorageE", "cvClipLine", "Java_org_opencv_ml_TrainData_getTrainSampleIdx_10", "_ZN2cv3Mat5zerosEiPKii", "_ZNSt6__ndk110__time_getC2EPKc", "_ZN2cv10convexHullERKNS_11_InputArrayERKNS_12_OutputArrayEbb", "_ZN2cv21invertAffineTransformERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv13batchDistanceERKNS_11_InputArrayES2_RKNS_12_OutputArrayEiS5_iiS2_ib", "_ZNK2cv3ocl6Device15image2DMaxWidthEv", "Java_org_opencv_features2d_ORB_setFirstLevel_10", "Java_org_opencv_core_Core_setIdentity_11", "Java_org_opencv_imgproc_Imgproc_cornerSubPix_10", "Java_org_opencv_calib3d_Calib3d_estimateAffinePartial2D_16", "_ZN2cv4cuda9getDeviceEv", "_ZNK2cv3ocl6Device20isExtensionSupportedERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE5do_inER9mbstate_tPKcS5_RS5_PwS7_RS7_", "_ZN2cv15isContourConvexERKNS_11_InputArrayE", "cvGetRawData", "Java_org_opencv_ml_Boost_setWeakCount_10", "Java_org_opencv_video_DenseOpticalFlow_delete", "WebPSetWorkerInterface", "_ZN9CvLevMarqC1Eii14CvTermCriteriab", "_ZNSt16invalid_argumentD0Ev", "WebPPictureFree", "Java_org_opencv_calib3d_StereoBM_getPreFilterSize_10", "_ZNKSt6__ndk15ctypeIwE9do_narrowEPKwS3_cPc", "_ZNSt6__ndk114collate_bynameIwED2Ev", "Java_org_opencv_features2d_ORB_getDefaultName_10", "_ZN2cv4cuda6Stream17waitForCompletionEv", "Java_org_opencv_imgproc_Imgproc_warpPerspective_10", "_ZN2cv3hal6mul16uEPKtmS2_mPtmiiPv", "_ZN2cv3MatC2EiPKiiPvPKm", "cvSetData", "Java_org_opencv_ml_SVM_getDegree_10", "_ZN2cv3hal6SVD32fEPfmS1_S1_mS1_miii", "_ZN2cv3hal6exp64fEPKdPdi", "_ZN2cv8CholeskyEPdmiS0_mi", "Java_org_opencv_core_Core_PCAProject_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD2Ev", "_ZN2cv9Formatter3getENS0_10FormatTypeE", "_ZNSt6__ndk14stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayERKNS_11_InputArrayE", "_ZN2cv4readERKNS_8FileNodeERNS_8KeyPointERKS3_", "_ZNSt6__ndk115numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZN2cv3hal6add64fEPKdmS2_mPdmiiPv", "_ZNK2cv3ocl6Device15maxMemAllocSizeEv", "_ZN2cv9Feature2DD0Ev", "_ZN2cv17FlannBasedMatcher5clearEv", "Java_org_opencv_imgproc_Imgproc_connectedComponents_10", "Java_org_opencv_video_VariationalRefinement_delete", "_ZNSt6__ndk17codecvtIcc9mbstate_tED0Ev", "Java_org_opencv_ml_KNearest_setIsClassifier_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1L2HysThreshold_10", "_ZN2cveoERKNS_3MatERKNS_7Scalar_IdEE", "_ZN2cv3dnn14dnn4_v2018122116shrinkCaffeModelERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RKNS2_6vectorIS8_NS6_IS8_EEEE", "_ZN2cv3ocl11kernelToStrERKNS_11_InputArrayEiPKc", "cvSetReal1D", "_ZNSt6__ndk112ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "_ZNSt6__ndk116__narrow_to_utf8ILm32EED0Ev", "_ZN2cv3LDA15subspaceProjectERKNS_11_InputArrayES3_S3_", "_ZN2cv3ocl7Context4Impl7getProgERKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERSC_", "_ZNK2cv4cuda10DeviceInfo19multiProcessorCountEv", "_ZNK2cv3ogl9Texture2D6copyToERKNS_12_OutputArrayEib", "Java_org_opencv_imgproc_Imgproc_clipLine_10", "_ZNSt6__ndk121recursive_timed_mutex8try_lockEv", "_ZN2cv3ocl7ProgramC2Ev", "_ZN2cvgtERKNS_3MatES2_", "_ZNSt6__ndk114__shared_count12__add_sharedEv", "Java_org_opencv_imgproc_GeneralizedHough_detect_12", "_ZN2cv11VideoWriterC2Ev", "Java_org_opencv_videoio_VideoCapture_open_12", "_ZN3tbb18task_group_context4initEv", "_ZN2cv16estimateAffine2DERKNS_11_InputArrayES2_RKNS_12_OutputArrayEidmdm", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoRectify_10", "_ZN2cv3ocl6Kernel3setEiRKNS0_7Image2DE", "Java_org_opencv_video_FarnebackOpticalFlow_delete", "_ZN3tbb8internal27initialize_handler_pointersEv", "_ZNK2cv3Mat3mulERKNS_11_InputArrayEd", "_ZN2cv11convertFp16ERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv7fisheye9calibrateERKNS_11_InputArrayES3_RKNS_5Size_IiEERKNS_17_InputOutputArrayESA_RKNS_12_OutputArrayESD_iNS_12TermCriteriaE", "_ZN2cv12VideoCapture4openERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi", "_ZN2cv9SparseMat10removeNodeEmmm", "WebPCleanupTransparentArea", "cvCheckTermCriteria", "Java_org_opencv_imgproc_Subdiv2D_symEdge_10", "Java_org_opencv_features2d_Feature2D_detect_10", "Java_org_opencv_core_Core_sortIdx_10", "_ZNK2cv5flann11IndexParams9getDoubleERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd", "_ZN2cv3dnn14dnn4_v201812219ReLULayer6createERKNS1_11LayerParamsE", "cvReleaseGraphScanner", "_ZN2cv9rectangleERKNS_17_InputOutputArrayENS_5Rect_IiEERKNS_7Scalar_IdEEiii", "Java_org_opencv_ml_LogisticRegression_load_10", "_ZN3tbb8internal17tbb_exception_ptr8allocateERNS_18captured_exceptionE", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE6do_outER9mbstate_tPKDiS5_RS5_PcS7_RS7_", "_ZNK2cv4cuda10DeviceInfo16textureAlignmentEv", "_ZNSt6__ndk17codecvtIwc9mbstate_tED2Ev", "_ZNKSt6__ndk115__codecvt_utf16IDiLb1EE6do_outER9mbstate_tPKDiS5_RS5_PcS7_RS7_", "cvGetThreadNum", "_ZSt13set_terminatePFvvE", "_ZN2cv2ml3SVM17getDefaultGridPtrEi", "_ZNK2cv9Feature2D5writeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv9softfloatC1Ej", "_ZNSt6__ndk118condition_variable10notify_allEv", "_ZN2cv3hal23cvtRGBAtoMultipliedRGBAEPKhmPhmii", "Java_org_opencv_imgproc_Imgproc_rectangle_10", "_ZN2cv3hal8recip16uEPKtmS2_mPtmiiPv", "_ZNSt6__ndk112system_errorC2EiRKNS_14error_categoryE", "_ZN2cv3sumERKNS_11_InputArrayE", "_ZNK2cv4cuda10DeviceInfo9clockRateEv", "Java_org_opencv_imgproc_Imgproc_getGaborKernel_12", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_12", "Java_org_opencv_photo_Photo_createAlignMTB_13", "_ZN2cv27fastNlMeansDenoisingColoredERKNS_11_InputArrayERKNS_12_OutputArrayEffii", "_ZNSt6__ndk112system_errorC2ENS_10error_codeEPKc", "Java_org_opencv_imgproc_Imgproc_pyrDown_11", "_ZN2cv3ogl6Arrays14setAutoReleaseEb", "_ZNK2cv8FileNodecvdEv", "_ZNSt6__ndk112system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Java_org_opencv_calib3d_Calib3d_getDefaultNewCameraMatrix_12", "Java_org_opencv_objdetect_HOGDescriptor_compute_10", "_ZN2cv13redirectErrorEPFiiPKcS1_S1_iPvES2_PS2_", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_10", "_ZN3tbb8internal17generic_scheduler16wait_until_emptyEv", "cvSetOpenGlDrawCallback", "_ZN2cv4cuda10BufferPool9getBufferEiii", "_ZN3tbb8internal14dynamic_unlinkEPv", "cvCopy", "Java_org_opencv_ml_RTrees_getVarImportance_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColoredMulti_12", "cvSplit", "_ZNK2cv8Subdiv2D6Vertex6isfreeEv", "_ZNK3tbb10interface78internal15task_arena_base13internal_waitEv", "_ZN2cv3hal7gemm32fEPKfmS2_mfS2_mfPfmiiii", "Java_org_opencv_ml_ANN_1MLP_setAnnealInitialT_10", "_ZN2cv11RNG_MT19937C2Ej", "_ZNK2cv3ocl6Device12localMemTypeEv", "Java_org_opencv_features2d_DescriptorMatcher_train_10", "_ZNK2cv3ogl6Arrays4bindEv", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_10", "_ZN2cv2ml6KDTreeC1ERKNS_11_InputArrayEb", "_ZNSt6__ndk112future_errorC1ENS_10error_codeE", "WebPInitDecoderConfigInternal", "Java_org_opencv_dnn_Dnn_readNet_10", "Java_org_opencv_imgproc_Imgproc_integral_11", "Java_org_opencv_calib3d_Calib3d_computeCorrespondEpilines_10", "_ZNSt9bad_allocC2Ev", "_ZNK2cv17DescriptorMatcher5matchERKNS_11_InputArrayES3_RNSt6__ndk16vectorINS_6DMatchENS4_9allocatorIS6_EEEES3_", "_ZN3tbb8internal33throw_bad_last_alloc_exception_v4Ev", "_ZN2cv8FileNode3ptrEv", "_ZN2cv4cuda6GpuMatC1EiiiPvm", "_ZNK2cv3ocl6Device16OpenCL_C_VersionEv", "Java_org_opencv_video_KalmanFilter_get_1gain_10", "Java_org_opencv_features2d_Params_get_1maxThreshold_10", "_ZNK2cv17DescriptorMatcher19getTrainDescriptorsEv", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE6do_outER9mbstate_tPKwS5_RS5_PcS7_RS7_", "Java_org_opencv_dnn_Dnn_shrinkCaffeModel_10", "_ZN2cv9composeRTERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_S5_S5_S5_S5_S5_S5_S5_S5_", "Java_org_opencv_dnn_Dnn_NMSBoxesRotated_11", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_10", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_12", "_ZN2cv4UMataSERKNS_7Scalar_IdEE", "_ZN3tbb18captured_exception5clearEv", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE9do_lengthER9mbstate_tPKcS5_m", "_ZN2cv4cuda6GpuMat20updateContinuityFlagEv", "Java_org_opencv_core_Mat_n_1create__JDDI", "cvSetImageROI", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_NS_12TermCriteriaE", "Java_org_opencv_features2d_KAZE_setDiffusivity_10", "_ZN2cv22estimateRigidTransformERKNS_11_InputArrayES2_b", "_ZN2cv6detail17check_failed_autoENS_5Size_IiEERKNS0_12CheckContextE", "Java_org_opencv_dnn_Dnn_blobFromImage_11", "Java_org_opencv_features2d_AgastFeatureDetector_create_10", "_ZN2cv5utils5trace7details6RegionC1ERKNS3_21LocationStaticStorageE", "cvClearSeq", "_ZN2cv3dnn14dnn4_v201812219TanHLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_ml_KNearest_create_10", "Java_org_opencv_imgproc_Imgproc_EMD_11", "Java_org_opencv_features2d_Params_set_1filterByArea_10", "Java_org_opencv_core_Mat_n_1row", "Java_org_opencv_core_Core_batchDistance_12", "_ZN2cv3ocl7ContextD2Ev", "cvReleasePyramid", "_ZN2cv14seqRemoveSliceEP5CvSeq7CvSlice", "Java_org_opencv_photo_MergeRobertson_process_10", "_ZN2cv14QRCodeDetector7setEpsYEd", "_ZN2cv3MatC2ERKS0_RKNS_5Rect_IiEE", "Java_org_opencv_core_Core_divide_14", "Java_org_opencv_core_Core_bitwise_1or_10", "_ZNSt9bad_allocD2Ev", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_10", "_ZNKSt9exception4whatEv", "_ZN2cv8FileNode5isSeqEi", "_ZNKSt6__ndk110error_code7messageEv", "_ZN2cv3hal11cvtYUVtoBGREPKhmPhmiiiibb", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWork13resetTrackingEv", "_ZNSt6__ndk112ctype_bynameIcED1Ev", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_18", "Java_org_opencv_features2d_GFTTDetector_create_11", "cvGetSpatialMoment", "_ZNKSt6__ndk15ctypeIwE11do_scan_notEmPKwS3_", "Java_org_opencv_features2d_GFTTDetector_getK_10", "Java_org_opencv_imgproc_Imgproc_warpPerspective_12", "Java_org_opencv_videoio_VideoCapture_getBackendName_10", "_ZN2cv8Subdiv2D6VertexC2ENS_6Point_IfEEbi", "Java_org_opencv_video_FarnebackOpticalFlow_getPyrScale_10", "_ZNSt6__ndk115future_categoryEv", "_ZN3tbb8internal20itt_set_sync_name_v3EPvPKc", "_ZN2cvgtEdRKNS_3MatE", "_ZNK2cv3dnn14dnn4_v201812213Net13getLayerNamesEv", "Java_org_opencv_features2d_Feature2D_detectAndCompute_10", "_ZNSt6__ndk19to_stringEe", "cvCreateSet", "_ZN2cv11FileStorageC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_", "cvRetrieveFrame", "Java_org_opencv_video_SparsePyrLKOpticalFlow_getMaxLevel_10", "_ZN2cv12drawContoursERKNS_17_InputOutputArrayERKNS_11_InputArrayEiRKNS_7Scalar_IdEEiiS5_iNS_6Point_IiEE", "_ZNSt8bad_castD2Ev", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_13", "cvAddS", "_ZNKSt6__ndk114__codecvt_utf8IwE16do_always_noconvEv", "_ZN2cv3ocl28predictOptimalVectorWidthMaxERKNS_11_InputArrayES3_S3_S3_S3_S3_S3_S3_S3_", "Java_org_opencv_dnn_Layer_get_1blobs_10", "Java_org_opencv_dnn_Dnn_readNetFromModelOptimizer_10", "_ZNK2cv4cuda6GpuMat6copyToERKNS_12_OutputArrayERNS0_6StreamE", "_ZN2cv7ellipseERKNS_17_InputOutputArrayENS_6Point_IiEENS_5Size_IiEEdddRKNS_7Scalar_IdEEiii", "_ZN2cv3hal8recip16sEPKsmS2_mPsmiiPv", "Java_org_opencv_features2d_KAZE_setNOctaves_10", "_ZNSt6__ndk121undeclare_no_pointersEPcm", "_ZN2cv9Feature2DD2Ev", "_ZNK2cv10softdoubleleERKS0_", "cvCrossProduct", "Java_org_opencv_dnn_Dnn_blobFromImage_13", "_ZN2cv8clipLineENS_5Size_IlEERNS_6Point_IlEES4_", "Java_org_opencv_calib3d_Calib3d_getOptimalNewCameraMatrix_11", "_ZN2cv17CommandLineParserD1Ev", "Java_org_opencv_features2d_GFTTDetector_create_13", "_ZN2cv9ExceptionC1Ev", "_ZNSt6__ndk112ctype_bynameIwED2Ev", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE16do_always_noconvEv", "_ZNSt16bad_array_lengthD2Ev", "_ZN2cv17AVIWriteContainer15jputStreamShortEi", "Java_org_opencv_ml_SVM_trainAuto_13", "_ZNSt6__ndk115numpunct_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "Java_org_opencv_core_Core_mean_10", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE5do_inER9mbstate_tPKcS5_RS5_PDsS7_RS7_", "Java_org_opencv_imgproc_Imgproc_accumulateWeighted_11", "_ZNK2cv11_InputArray12getMatVectorERNSt6__ndk16vectorINS_3MatENS1_9allocatorIS3_EEEE", "_ZN2cv16displayStatusBarERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_i", "Java_org_opencv_ml_SVM_getDefaultGridPtr_10", "_ZN2cv21BaseCascadeClassifierD0Ev", "_ZNSt8bad_castC1Ev", "Java_org_opencv_core_Mat_n_1Mat__III", "_ZN2cv8cvtColorERKNS_11_InputArrayERKNS_12_OutputArrayEii", "Java_org_opencv_dnn_Net_forward_13", "_ZN2cv3ocl12PlatformInfoC2ERKS1_", "Java_org_opencv_video_Video_findTransformECC_13", "Java_org_opencv_core_Mat_n_1checkVector__JII", "Java_org_opencv_core_Core_getIppVersion_10", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_9SparseMatERKNS_12_OutputArrayEPPKfdb", "Java_org_opencv_features2d_FastFeatureDetector_create_10", "_ZN2cv3dnn14dnn4_v2018122118NormalizeBBoxLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_core_Core_addWeighted_11", "_ZNK2cv13HOGDescriptor9detectROIERKNS_11_InputArrayERKNSt6__ndk16vectorINS_6Point_IiEENS4_9allocatorIS7_EEEERSA_RNS5_IdNS8_IdEEEEdNS_5Size_IiEESI_", "_ZN3tbb8internal6market22set_active_num_workersEj", "_ZN2cv18minEnclosingCircleERKNS_11_InputArrayERNS_6Point_IfEERf", "Java_org_opencv_photo_Photo_createCalibrateDebevec_13", "_ZN3tbb8internal17generic_scheduler26cleanup_local_context_listEv", "Java_org_opencv_ml_KNearest_getIsClassifier_10", "Java_org_opencv_imgproc_Imgproc_morphologyEx_10", "_ZN2cv9SparseMat3ptrEiibPm", "cvGraphVtxDegreeByPtr", "_ZN2cv3hal14cvtBGRtoBGR5x5EPKhmPhmiiibi", "_ZN3tbb18captured_exception8allocateEPKcS2_", "_ZN2cv17FlannBasedMatcher6createEv", "_ZNSt6__ndk112system_errorD2Ev", "Java_org_opencv_core_Core_calcCovarMatrix_11", "_ZN2cv3ocl7ContextC1Ei", "Java_org_opencv_features2d_AgastFeatureDetector_setNonmaxSuppression_10", "cvGetErrInfo", "_ZNKSt8bad_cast4whatEv", "Java_org_opencv_imgproc_Imgproc_spatialGradient_10", "_ZN2cv3Mat6resizeEm", "_ZN2cv10BOWTrainerD0Ev", "_ZN2cv17CascadeClassifierD2Ev", "Java_org_opencv_core_Core_invert_11", "_ZNSt14overflow_errorD0Ev", "_ZN3tbb8internal17generic_scheduler12reload_tasksEl", "_ZN2cv3dnn14dnn4_v2018122111ConcatLayer6createERKNS1_11LayerParamsE", "_ZN2cv3dnn14dnn4_v2018122113PriorBoxLayer6createERKNS1_11LayerParamsE", "cvInitSystem", "_ZNSt6__ndk115numpunct_bynameIcED2Ev", "Java_org_opencv_imgproc_Imgproc_bilateralFilter_11", "_ZN2cv3ocl7ProgramC2ERKNS0_13ProgramSourceERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_", "Java_org_opencv_calib3d_StereoBM_delete", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_11", "_ZNK2cv11FileStorage9getFormatEv", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDsE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_objdetect_HOGDescriptor_getDefaultPeopleDetector_10", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERNSt6__ndk16vectorINS_8KeyPointENS4_9allocatorIS6_EEEERKNS_12_OutputArrayEPNS5_INS5_IiNS7_IiEEEENS7_ISF_EEEEPNS_3MatE", "_ZN2cv10StereoSGBM6createEiiiiiiiiiii", "_ZNK2cv4cuda10DeviceInfo11l2CacheSizeEv", "_ZN2cv4cuda10BufferPoolC2ERNS0_6StreamE", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_11", "JNI_OnUnload", "_ZNSt6__ndk114collate_bynameIwEC2EPKcm", "Java_org_opencv_calib3d_Calib3d_drawFrameAxes_11", "Java_org_opencv_video_Video_meanShift_10", "_ZN2cv16AVIReadContainerC1Ev", "_ZN2cv3hal11SepFilter2D6createEiiiPhiS2_iiidi", "Java_org_opencv_calib3d_StereoBM_setROI2_10", "Java_org_opencv_core_Core_setIdentity_10", "_ZN2cv3hal15cvtGraytoBGR5x5EPKhmPhmiii", "_ZNK2cv11RotatedRect14boundingRect2fEv", "Java_org_opencv_core_Mat_n_1depth", "Java_org_opencv_core_Core_kmeans_11", "_ZN2cv13getNumThreadsEv", "Java_org_opencv_videoio_VideoCapture_delete", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE9do_lengthER9mbstate_tPKcS5_m", "_ZN2cv3hal5min8uEPKhmS2_mPhmiiPv", "Java_org_opencv_ml_LogisticRegression_getMiniBatchSize_10", "Java_org_opencv_imgproc_Imgproc_HoughLines_14", "Java_org_opencv_dnn_Layer_get_1preferableTarget_10", "_ZN2cv17DescriptorMatcher20DescriptorCollectionC2Ev", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortPoints_12", "_ZN2cvngERKNS_3MatE", "Java_org_opencv_ml_DTrees_create_10", "Java_org_opencv_calib3d_Calib3d_fisheye_1distortPoints_11", "_ZNK2cv14DefaultDeleterI7CvMatNDEclEPS1_", "_ZN2cv9SparseMatC2ERKNS_3MatE", "Java_org_opencv_core_Mat_n_1convertTo__JJID", "cvReleaseVideoWriter", "Java_org_opencv_ml_TrainData_getVarSymbolFlags_10", "Java_org_opencv_features2d_FastFeatureDetector_setNonmaxSuppression_10", "cvScalarToRawData", "Java_org_opencv_photo_Photo_pencilSketch_13", "Java_org_opencv_imgproc_Imgproc_dilate_13", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE10do_unshiftER9mbstate_tPcS4_RS4_", "Java_org_opencv_videoio_VideoWriter_VideoWriter_13", "cvAbsDiffS", "_ZN2cv3hal10absdiff32fEPKfmS2_mPfmiiPv", "_ZN2cvplERKNS_3MatERKNS_7MatExprE", "_ZN2cv3dnn14dnn4_v201812219LSTMLayer16inputNameToIndexENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZN2cvorERKNS_3MatERKNS_7Scalar_IdEE", "Java_org_opencv_core_Mat_n_1Mat__", "_ZN2cv17AVIWriteContainerC2Ev", "Java_org_opencv_features2d_Params_set_1filterByColor_10", "Java_org_opencv_features2d_DescriptorMatcher_add_10", "_ZNKSt6__ndk112ctype_bynameIwE11do_scan_notEmPKwS3_", "_ZNK2cv3dnn14dnn4_v201812213Net15getLayersShapesERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEERS7_RNS4_IS9_NS5_IS9_EEEESF_", "_ZNK2cv4cuda10DeviceInfo17sharedMemPerBlockEv", "VP8CheckSignature", "WebPPictureImportRGBA", "_ZNSt6__ndk115__thread_structD1Ev", "_ZNSt6__ndk16locale5facet16__on_zero_sharedEv", "Java_org_opencv_imgcodecs_Imgcodecs_imencode_10", "_ZN2cv15NAryMatIteratorC2EPPKNS_3MatEPS1_i", "_ZN2cv3ocl8PlatformD1Ev", "_ZNK3tbb27invalid_multiple_scheduling4whatEv", "_ZN2cv3dnn14dnn4_v2018122113readTorchBlobERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb", "_ZN2cv20loadWindowParametersERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "Java_org_opencv_objdetect_HOGDescriptor_detectMultiScale_14", "_ZN2cv21DetectionBasedTracker13setParametersERKNS0_10ParametersE", "Java_org_opencv_videoio_VideoWriter_VideoWriter_11", "_ZN2cv9FormatterD0Ev", "_ZN2cv16findTransformECCERKNS_11_InputArrayES2_RKNS_17_InputOutputArrayEiNS_12TermCriteriaES2_", "cvMixChannels", "_ZNSt6__ndk110to_wstringEy", "Java_org_opencv_ml_SVM_setP_10", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS2_6vectorINS_6DMatchENS6_ISC_EEEE", "_ZN2cv3LDA3ldaERKNS_11_InputArrayES3_", "Java_org_opencv_imgproc_Subdiv2D_edgeOrg_10", "_ZN2cv9polylinesERKNS_17_InputOutputArrayEPKPKNS_6Point_IiEEPKiibRKNS_7Scalar_IdEEiii", "Java_org_opencv_features2d_FastFeatureDetector_delete", "Java_org_opencv_ml_SVM_trainAuto_17", "_ZNSt6__ndk112bad_weak_ptrD2Ev", "_ZNK2cv8KeyPoint4hashEv", "Java_org_opencv_calib3d_Calib3d_filterHomographyDecompByVisibleRefpoints_11", "Java_org_opencv_core_Core_patchNaNs_10", "_ZN2cv40filterHomographyDecompByVisibleRefpointsERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES2_", "Java_org_opencv_features2d_DescriptorMatcher_delete", "Java_org_opencv_ml_ANN_1MLP_setActivationFunction_11", "_ZN3tbb16spin_rw_mutex_v318internal_constructEv", "Java_org_opencv_ml_SVM_setTermCriteria_10", "Java_org_opencv_imgproc_Imgproc_putText_10", "WebPPictureARGBToYUVADithered", "_ZN2cv3hal2LUEPdmiS1_mi", "cvSetOpenGlContext", "_ZNK2cv8FileNode4nameEv", "Java_org_opencv_features2d_AKAZE_create_16", "Java_org_opencv_ml_SVMSGD_setSvmsgdType_10", "_ZNSt6__ndk17promiseIvE10get_futureEv", "cvGetSize", "_ZNK2cv4cuda10DeviceInfo18maxThreadsPerBlockEv", "_ZN2cv32createFaceDetectionMaskGeneratorEv", "Java_org_opencv_imgproc_Imgproc_getPerspectiveTransform_11", "_ZN2cv8Subdiv2D8QuadEdgeC2Ei", "Java_org_opencv_features2d_GFTTDetector_getMinDistance_10", "_ZN3tbb8internal3rml14private_server25adjust_job_count_estimateEi", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE10do_unshiftER9mbstate_tPcS4_RS4_", "cvConvertScaleAbs", "_ZNSt6__ndk14stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm", "Java_org_opencv_core_Mat_n_1reshape__JII", "_ZN3tbb8internal17generic_scheduler14cleanup_workerEPvb", "_ZN2cv8internal15IntrinsicParamsC1ENS_3VecIdLi2EEES3_NS2_IdLi4EEEd", "_ZN2cv3ocl15getPlatfomsInfoERNSt6__ndk16vectorINS0_12PlatformInfoENS1_9allocatorIS3_EEEE", "Java_org_opencv_dnn_Dnn_readNet_12", "_ZNK2cv3ocl6Device21nativeVectorWidthCharEv", "cvGetRealND", "Java_org_opencv_video_DISOpticalFlow_getVariationalRefinementAlpha_10", "_ZN2cv3dnn14dnn4_v2018122110ShiftLayer6createERKNS1_11LayerParamsE", "_ZN2cv3dnn14dnn4_v201812219LSTMLayer17outputNameToIndexERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZNK2cv25BOWImgDescriptorExtractor14descriptorTypeEv", "_ZN2cv8Subdiv2D13setEdgePointsEiii", "_ZN2cv2ml2EM4loadERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "_ZNSt6__ndk16locale2id5__getEv", "_ZN2cv4cuda5Event6recordERNS0_6StreamE", "_ZNSt6__ndk117__assoc_sub_state12__make_readyEv", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale2_14", "Java_org_opencv_imgproc_Imgproc_HoughLines_11", "_ZN2cv3ocl7ProgramD2Ev", "_ZNSt6__ndk114collate_bynameIwED1Ev", "_ZN2cv10moveWindowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii", "_ZNK2cv3ocl13ProgramSource6sourceEv", "_ZN2cv3hal21cvtThreePlaneYUVtoBGREPKhmPhmiiibi", "_ZNK2cv9SparseMat9convertToERS0_id", "_ZNK2cv5MatOp3addERKNS_7MatExprES3_RS1_", "_ZNSt6__ndk112ctype_bynameIcED0Ev", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_12", "_ZNSt6__ndk119__thread_local_dataEv", "Java_org_opencv_imgproc_Imgproc_boxFilter_10", "_ZN2cv25stereoRectifyUncalibratedERKNS_11_InputArrayES2_S2_NS_5Size_IiEERKNS_12_OutputArrayES7_d", "_ZN2cv12KalmanFilter7predictERKNS_3MatE", "_ZN2cv9BFMatcher12knnMatchImplERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEiS3_b", "cvOrS", "_ZN2cv5utils12findDataFileERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbPKc", "_ZN2cv2ml6DTrees5SplitC2Ev", "_ZNK2cv3dnn14dnn4_v201812213Net5emptyEv", "_ZNK2cv4UMat9convertToERKNS_12_OutputArrayEidd", "_ZN3tbb8internal17generic_scheduler14cleanup_masterEb", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_16", "cvGetErrMode", "_ZN2cvmlERKNS_3MatES2_", "_ZN2cv3ocl7ProgramaSERKS1_", "_ZN2cv3Mat3eyeENS_5Size_IiEEi", "_ZN2cv2ml9StatModel5trainERKNS_3PtrINS0_9TrainDataEEEi", "Java_org_opencv_core_Core_setNumThreads_10", "Java_org_opencv_core_Core_copyMakeBorder_10", "_ZNK2cv13HOGDescriptor17getDescriptorSizeEv", "Java_org_opencv_core_Core_norm_11", "_ZNK2cv5MatOp8multiplyERKNS_7MatExprES3_RS1_d", "_ZNK2cv17DescriptorMatcher11radiusMatchERKNS_11_InputArrayES3_RNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEfS3_b", "Java_org_opencv_ml_KNearest_findNearest_12", "cvGetND", "Java_org_opencv_features2d_ORB_create_14", "Java_org_opencv_videoio_VideoCapture_grab_10", "Java_org_opencv_video_VariationalRefinement_setOmega_10", "_ZNK2cv17CascadeClassifier14getFeatureTypeEv", "Java_org_opencv_ml_ANN_1MLP_getAnnealCoolingRatio_10", "Java_org_opencv_imgproc_Imgproc_pointPolygonTest_10", "Java_org_opencv_core_Core_solvePoly_11", "Java_org_opencv_imgproc_Imgproc_drawMarker_14", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_16", "_ZN2cv3hal9magnitudeEPKdS2_Pdi", "_ZN2cv12countNonZeroERKNS_11_InputArrayE", "Java_org_opencv_video_FarnebackOpticalFlow_create_12", "Java_org_opencv_imgproc_Imgproc_connectedComponents_11", "_ZNK2cv3Mat4diagEi", "_ZN2cv11VideoWriter4openERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiidNS_5Size_IiEEb", "_ZNK2cv11_InputArray5totalEi", "_ZN2cv16AVIReadContainer10initStreamERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN2cv3ocl7Image2DC2Ev", "_ZNSt6__ndk15ctypeIcE13classic_tableEv", "_ZNSt13runtime_errorC2EPKc", "_ZNSt6__ndk112system_errorD0Ev", "Java_org_opencv_core_Core_findFile_10", "Java_org_opencv_ml_EM_getCovarianceMatrixType_10", "_ZN2cv17rectify3CollinearERKNS_11_InputArrayES2_S2_S2_S2_S2_S2_S2_NS_5Size_IiEES2_S2_S2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_S7_S7_dS4_PNS_5Rect_IiEESA_i", "Java_org_opencv_features2d_Params_get_1minThreshold_10", "cvSetErrMode", "_ZN9CvLevMarq9updateAltERPK5CvMatRPS0_S5_RPd", "_ZNKSt6__ndk15ctypeIcE10do_toupperEc", "_ZNSt6__ndk15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "Java_org_opencv_core_Core_bitwise_1not_11", "Java_org_opencv_imgproc_Imgproc_convertMaps_11", "_ZN2cv3dnn14dnn4_v201812213NetC2Ev", "Java_org_opencv_ml_Boost_setWeightTrimRate_10", "_ZN2cv3ocl13ProgramSourceC1EPKc", "Java_org_opencv_core_Core_absdiff_10", "TBB_runtime_interface_version", "Java_org_opencv_ml_TrainData_getResponses_10", "_ZN2cv8calcHistERKNS_11_InputArrayERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEES2_RKNS_12_OutputArrayES9_RKNS4_IfNS5_IfEEEEb", "_ZN2cv5pyrUpERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN3tbb18task_group_context19capture_fp_settingsEv", "_ZN2cv3ocl8PlatformD2Ev", "_ZNKSt6__ndk114__codecvt_utf8IDsE6do_outER9mbstate_tPKDsS5_RS5_PcS7_RS7_", "_ZN2cv11VideoWriterC1Ev", "_ZN2cv8internal15NormalizePixelsERKNS_3MatERKNS0_15IntrinsicParamsE", "Java_org_opencv_core_Core_getNumThreads_10", "Java_org_opencv_videoio_VideoCapture_open_13", "_ZNK2cv3dnn14dnn4_v201812213Net28getUnconnectedOutLayersNamesEv", "Java_org_opencv_core_Core_meanStdDev_11", "_ZN2cv4cuda6GpuMat6uploadERKNS_11_InputArrayE", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoRectify_13", "Java_org_opencv_calib3d_Calib3d_getDefaultNewCameraMatrix_11", "cvRectangleR", "_ZN2cveqERKNS_16FileNodeIteratorES2_", "_ZNSt6__ndk15mutex6unlockEv", "Java_org_opencv_imgproc_Imgproc_linearPolar_10", "Java_org_opencv_dnn_Dnn_blobFromImages_16", "Java_org_opencv_ml_TrainData_create_10", "_ZN2cv6mulAddERKNS_10softdoubleES2_S2_", "Java_org_opencv_imgproc_Imgproc_filter2D_13", "_ZN2cv10BOWTrainer5clearEv", "_ZN2cv16fitEllipseDirectERKNS_11_InputArrayE", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_13", "cvErrorFromIppStatus", "Java_org_opencv_ml_TrainData_create_12", "_ZN2cv3dnn14dnn4_v201812215Layer14supportBackendEi", "_ZN2cv11stylizationERKNS_11_InputArrayERKNS_12_OutputArrayEff", "cvSetSeqReaderPos", "Java_org_opencv_ml_SVM_getUncompressedSupportVectors_10", "Java_org_opencv_photo_CalibrateRobertson_getThreshold_10", "_ZN2cv3ocl5TimerC1ERKNS0_5QueueE", "_ZNSt6__ndk17codecvtIDsc9mbstate_tED1Ev", "_ZN2cv11RNG_MT19937clEv", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_16", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleWindowSize_10", "cvApproxChains", "_ZN2cv11imreadmultiERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS0_6vectorINS_3MatENS4_ISA_EEEEi", "_ZN2cveoERKNS_3MatES2_", "_ZNK2cv13HOGDescriptor16detectMultiScaleERKNS_11_InputArrayERNSt6__ndk16vectorINS_5Rect_IiEENS4_9allocatorIS7_EEEERNS5_IdNS8_IdEEEEdNS_5Size_IiEESG_ddb", "cvCreateData", "_ZN2cv11VideoWriter4openERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEidNS_5Size_IiEEb", "Java_org_opencv_imgproc_Imgproc_ellipse2Poly_10", "_ZNK2cv3ocl6Device17maxWriteImageArgsEv", "Java_org_opencv_photo_Photo_textureFlattening_10", "_ZN2cv8FileNode17isEmptyCollectionEi", "_ZNK2cv14DefaultDeleterI5CvMatEclEPS1_", "_ZN2cv2ml6KDTreeC1Ev", "_ZN2cv10softdoubleC1Ej", "_ZNSt6__ndk18ios_baseD0Ev", "_ZNSt6__ndk16locale6globalERKS0_", "_ZNSt6__ndk115recursive_mutexC2Ev", "Java_org_opencv_ml_EM_trainE_10", "Java_org_opencv_imgproc_Imgproc_accumulate_10", "Java_org_opencv_features2d_Params_set_1minArea_10", "Java_org_opencv_core_Mat_n_1size", "_ZN2cv14QRCodeDetectorC2Ev", "_ZN2cv3LDAC2Ei", "_ZNSt6__ndk15mutex4lockEv", "_ZNSt11logic_errorC2ERKS_", "_ZN2cv6detail17check_failed_autoEiiRKNS0_12CheckContextE", "_ZN2cv2ml9TrainDataD1Ev", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale_13", "cvAndS", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_14", "Java_org_opencv_video_FarnebackOpticalFlow_getNumIters_10", "_ZN2cv5solveERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "_ZNSt6__ndk112future_errorC2ENS_10error_codeE", "Java_org_opencv_ml_EM_getMeans_10", "Java_org_opencv_ml_KNearest_setDefaultK_10", "Java_org_opencv_photo_Photo_createTonemapMantiuk_11", "_ZN2cv15preCornerDetectERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZNSt6__ndk16locale5facetD2Ev", "Java_org_opencv_features2d_MSER_create_15", "Java_org_opencv_video_DISOpticalFlow_setVariationalRefinementGamma_10", "_ZN2cv3dnn14dnn4_v201812215LayerD2Ev", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_", "Java_org_opencv_video_FarnebackOpticalFlow_getFlags_10", "_ZN2cv14fillConvexPolyERKNS_17_InputOutputArrayERKNS_11_InputArrayERKNS_7Scalar_IdEEii", "Java_org_opencv_core_Mat_n_1dims", "Java_org_opencv_objdetect_CascadeClassifier_detectMultiScale3_10", "_ZN2cv16MatConstIterator4seekEPKib", "_ZN2cv25BOWImgDescriptorExtractorC1ERKNS_3PtrINS_17DescriptorMatcherEEE", "_ZN2cv17AVIWriteContainer10jputStreamEj", "_ZN2cv18SimpleBlobDetector6ParamsC2Ev", "Java_org_opencv_features2d_Params_set_1filterByConvexity_10", "Java_org_opencv_calib3d_Calib3d_validateDisparity_10", "Java_org_opencv_features2d_AKAZE_create_14", "Java_org_opencv_ml_ANN_1MLP_delete", "Java_org_opencv_features2d_GFTTDetector_getBlockSize_10", "_ZN2cv11VideoWriterD2Ev", "_ZN3tbb8internal3rml14private_serverC1ERNS1_10tbb_clientE", "Java_org_opencv_features2d_DescriptorMatcher_radiusMatch_11", "_ZNSt6__ndk18ios_base7failureD0Ev", "Java_org_opencv_video_DISOpticalFlow_setUseMeanNormalization_10", "Java_org_opencv_ml_TrainData_create_14", "_ZN2cv3dnn14dnn4_v201812215Layer13setActivationERKNS_3PtrINS1_15ActivationLayerEEE", "Java_org_opencv_imgproc_Imgproc_polylines_12", "_ZN2cv3ocl10haveAmdFftEv", "_ZN2cv3hal5max8uEPKhmS2_mPhmiiPv", "Java_org_opencv_core_Mat_n_1submat", "_ZNK2cv4UMat7reshapeEii", "Java_org_opencv_features2d_AKAZE_getDescriptorChannels_10", "_ZNKSt6__ndk114__codecvt_utf8IDiE6do_outER9mbstate_tPKDiS5_RS5_PcS7_RS7_", "Java_org_opencv_core_Core_cartToPolar_11", "Java_org_opencv_features2d_BRISK_create_111", "Java_org_opencv_imgproc_Imgproc_erode_10", "Java_org_opencv_objdetect_HOGDescriptor_HOGDescriptor_14", "cvGetWindowImageRect", "_ZN2cv3ipp12setIppStatusEiPKcS2_i", "Java_org_opencv_photo_TonemapDrago_delete", "_ZN3tbb8internal17tbb_exception_ptr8allocateERKNS_13tbb_exceptionE", "_ZNKSt6__ndk120__time_get_c_storageIcE8__monthsEv", "_ZNK2cv11_InputArray5depthEi", "_ZN2cv3ogl6Buffer7mapHostENS1_6AccessE", "Java_org_opencv_photo_Photo_stylization_10", "_ZN3tbb8internal6market14create_one_jobEv", "_ZNKSt6__ndk115__codecvt_utf16IwLb1EE5do_inER9mbstate_tPKcS5_RS5_PwS7_RS7_", "_Z7cvRoundRKN2cv10softdoubleE", "Java_org_opencv_ml_SVM_setClassWeights_10", "_ZN3tbb8internal3rml11tbb_factory4openEv", "_ZN2cvdvERKNS_7MatExprERKNS_3MatE", "Java_org_opencv_video_BackgroundSubtractorMOG2_setBackgroundRatio_10", "_ZN2cv17DescriptorMatcher4readERKNS_8FileNodeE", "Java_org_opencv_imgproc_Subdiv2D_rotateEdge_10", "_ZN2cv6detail24check_failed_MatChannelsEiiRKNS0_12CheckContextE", "Java_org_opencv_core_Core_getVersionMajor_10", "_ZN2cv2ml9TrainData12getSubVectorERKNS_3MatES4_", "_ZN3tbb8internal6market12create_arenaEiim", "_ZN3tbb8internal8governor19init_scheduler_weakEv", "WebPPictureARGBToYUVA", "Java_org_opencv_calib3d_Calib3d_projectPoints_11", "_ZNSt6__ndk115__thread_structC2Ev", "Java_org_opencv_imgproc_Imgproc_ellipse_11", "Java_org_opencv_photo_CalibrateRobertson_getMaxIter_10", "Java_org_opencv_video_VariationalRefinement_getFixedPointIterations_10", "cvGetCentralMoment", "_ZN2cv10softdoubleC2Ei", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEERmSA_", "_ZNKSt6__ndk15ctypeIcE9do_narrowEPKcS3_cPc", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEiS4_PPKfbb", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_11", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_12", "_ZN2cv3ocl7Program9getPrefixERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv5utils2fs8FileLockD1Ev", "_ZN2cv3ocl13ProgramSourceC2ERKS1_", "_ZNKSt6__ndk15ctypeIwE5do_isEPKwS3_Pm", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_11", "Java_org_opencv_objdetect_HOGDescriptor_save_10", "Java_org_opencv_photo_TonemapReinhard_getIntensity_10", "Java_org_opencv_ml_DTrees_getMinSampleCount_10", "_ZN2cv3hal4sqrtEPKfPfi", "Java_org_opencv_ml_StatModel_delete", "Java_org_opencv_video_SparsePyrLKOpticalFlow_delete", "Java_org_opencv_imgproc_GeneralizedHoughBallard_delete", "_ZN2cv5traceERKNS_11_InputArrayE", "Java_org_opencv_video_Video_calcOpticalFlowFarneback_10", "Java_org_opencv_core_Mat_nPutF", "_ZNK2cv3ocl6Device12endianLittleEv", "_ZN2cv9AlgorithmC1Ev", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setMaxLevel_10", "_ZNSt6__ndk112ctype_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm", "Java_org_opencv_video_SparsePyrLKOpticalFlow_create_15", "_ZN2cv5utils28dumpInputOutputArrayOfArraysERKNS_17_InputOutputArrayE", "_ZN2cv11recoverPoseERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayES5_dNS_6Point_IdEERKNS_17_InputOutputArrayE", "_ZNKSt6__ndk120__time_get_c_storageIwE3__xEv", "_ZN2cv3LDA4loadERKNS_11FileStorageE", "Java_org_opencv_dnn_Layer_finalize_10", "_ZN2cv18createMergeMertensEfff", "_ZTv0_n72_NK2cv18SimpleBlobDetector14getDefaultNameEv", "cvApproxPoly", "_ZN2cv3hal11cvtBGRtoXYZEPKhmPhmiiiib", "Java_org_opencv_features2d_MSER_getMaxArea_10", "_ZN2cv3dctERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv4cuda11TargetArchs20hasEqualOrGreaterPtxEii", "Java_org_opencv_core_Core_mulSpectrums_10", "_ZNK2cv5flann11IndexParams6getIntERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi", "_ZN3tbb4task28internal_decrement_ref_countEv", "_ZNKSt6__ndk17codecvtIDsc9mbstate_tE11do_encodingEv", "Java_org_opencv_ml_SVM_getNu_10", "_ZN3tbb8internal21PrintExtraVersionInfoEPKcS2_z", "Java_org_opencv_ml_RTrees_getTermCriteria_10", "_ZNK2cv3dnn14dnn4_v201812215Layer15getMemoryShapesERKNSt6__ndk16vectorINS4_IiNS3_9allocatorIiEEEENS5_IS7_EEEEiRS9_SC_", "Java_org_opencv_imgproc_Imgproc_integral3_11", "_ZN2cv13depthToStringEi", "_ZN2cv25computeCorrespondEpilinesERKNS_11_InputArrayEiS2_RKNS_12_OutputArrayE", "_ZN2cv15scalarToRawDataERKNS_7Scalar_IdEEPvii", "_ZN2cv16findEssentialMatERKNS_11_InputArrayES2_dNS_6Point_IdEEiddRKNS_12_OutputArrayE", "_ZNK2cv12_OutputArray6assignERKNSt6__ndk16vectorINS_3MatENS1_9allocatorIS3_EEEE", "cvDisplayStatusBar", "_ZN3tbb8internal24DoOneTimeInitializationsEv", "_ZN2cv17CascadeClassifierC1Ev", "_ZN2cv8Subdiv2D6insertERKNSt6__ndk16vectorINS_6Point_IfEENS1_9allocatorIS4_EEEE", "_ZN2cv3hal5morphEiiiPhmS1_miiiiiiiiiiiS1_miiiiiPKdib", "_ZNSt13runtime_errorC1ERKS_", "Java_org_opencv_ml_NormalBayesClassifier_create_10", "Java_org_opencv_features2d_AKAZE_setNOctaveLayers_10", "_ZN2cv3ogl6Arrays18resetTexCoordArrayEv", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE9do_lengthER9mbstate_tPKcS5_m", "_ZN2cv9warpPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IfEEdi", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZNK2cv3ocl7Context6deviceEm", "_ZN2cv5instr8NodeDataD2Ev", "_ZN2cv3dnn14dnn4_v2018122112EltwiseLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_features2d_GFTTDetector_setMaxFeatures_10", "_ZNSt20bad_array_new_lengthD1Ev", "_ZN2cv3MatC1ERKS0_PKNS_5RangeE", "Java_org_opencv_ml_TrainData_getSubVector_10", "_ZN2cv4UMat15getStdAllocatorEv", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_12", "_ZNK2cv13HOGDescriptor6detectERKNS_11_InputArrayERNSt6__ndk16vectorINS_6Point_IiEENS4_9allocatorIS7_EEEEdNS_5Size_IiEESD_RKSA_", "_ZN2cv4cuda18ensureSizeIsEnoughEiiiRKNS_12_OutputArrayE", "_ZNSt6__ndk115recursive_mutex8try_lockEv", "_ZN3tbb8internal3rml14private_worker14release_handleElb", "Java_org_opencv_videoio_VideoCapture_get_10", "_ZNSt6__ndk115numpunct_bynameIwED1Ev", "Java_org_opencv_photo_Photo_createTonemapDrago_10", "Java_org_opencv_calib3d_Calib3d_fisheye_1projectPoints_11", "Java_org_opencv_features2d_BRISK_create_14", "cvRemoveNodeFromTree", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_", "cvRedirectError", "Java_org_opencv_features2d_GFTTDetector_setHarrisDetector_10", "_ZNSt6__ndk115recursive_mutexD2Ev", "_ZN2cv17CascadeClassifierC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN3tbb8internal18concurrent_monitor11cancel_waitERNS1_14thread_contextE", "_ZN2cv3dnn14dnn4_v2018122112LayerFactory15unregisterLayerERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "_ZN2cv6detail17check_failed_autoENS_5Size_IiEES2_RKNS0_12CheckContextE", "_ZN2cv5utils29getConfigurationParameterBoolEPKcb", "_ZNSt6__ndk117moneypunct_bynameIcLb1EE4initEPKc", "_ZN2cv3hal6max32fEPKfmS2_mPfmiiPv", "_ZN2cv9useOpenVXEv", "_ZNK2cv8Subdiv2D7getEdgeEii", "_ZN2cv13applyColorMapERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv3hal7sqrt32fEPKfPfi", "cvGoodFeaturesToTrack", "_ZN2cv3hal11cvtBGRtoBGREPKhmPhmiiiiib", "_ZN2cv5utils5trace7details6Region17LocationExtraDataC1ERKNS3_21LocationStaticStorageE", "Java_org_opencv_video_KalmanFilter_get_1statePost_10", "_ZN2cv30createLMeDSPointSetRegistratorERKNS_3PtrINS_19PointSetRegistrator8CallbackEEEidi", "_ZNK2cv4UMat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv20allocSingletonBufferEm", "_ZN2cv4cuda10syncOutputERKNS0_6GpuMatERKNS_12_OutputArrayERNS0_6StreamE", "_ZN2cv3hal11cvtLabtoBGREPKhmPhmiiiibbb", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_12", "Java_org_opencv_features2d_AKAZE_create_10", "_ZN2cv3ocl6Kernel3runEiPmS2_bRKNS0_5QueueE", "Java_org_opencv_ml_SVMSGD_setOptimalParameters_12", "_ZN2cv3hal7sqrt64fEPKdPdi", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE10do_unshiftERS1_PcS4_RS4_", "WebPCopyPlane", "_ZN2cv3minERKNS_3MatES2_", "_ZN2cv4cuda7HostMem6createEiii", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoCalibrate_10", "_ZN2cv8FileNode12isCollectionEi", "cvMatchShapes", "Java_org_opencv_ml_Boost_getBoostType_10", "cvGetCaptureProperty", "_ZNK2cv3ocl6Device21nativeVectorWidthHalfEv", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_14", "_ZN2cv2ml9TrainData11loadFromCSVERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiiiSA_cc", "_ZNK2cv7MatExpr3dotERKNS_3MatE", "Java_org_opencv_ml_SVMSGD_setOptimalParameters_10", "_ZN2cv14findHomographyERKNS_11_InputArrayES2_idRKNS_12_OutputArrayEid", "_ZNK2cv3ocl6Device21executionCapabilitiesEv", "Java_org_opencv_imgproc_Imgproc_floodFill_13", "cvMahalanobis", "_ZN2cv5utils5trace7details6Region4Impl7releaseEv", "Java_org_opencv_ml_ANN_1MLP_getTrainMethod_10", "_ZN2cv14setTrackbarMinERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_i", "_ZN2cv8FileNodeC1ERKS0_", "Java_org_opencv_core_Core_reduce_11", "_ZN2cv22SimpleBlobDetectorImplC2ERKNS_18SimpleBlobDetector6ParamsE", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingMulti_16", "_ZNSt6__ndk113shared_futureIvED2Ev", "_ZN2cv3ogl6BufferC1Eiiijb", "Java_org_opencv_features2d_GFTTDetector_create_15", "_ZN3tbb8internal5arena12enqueue_taskERNS_4taskElRNS0_10FastRandomE", "_ZN2cv6circleERKNS_17_InputOutputArrayENS_6Point_IiEEiRKNS_7Scalar_IdEEiii", "WebPPictureSharpARGBToYUVA", "Java_org_opencv_imgproc_LineSegmentDetector_compareSegments_11", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoRectify_11", "Java_org_opencv_photo_CalibrateCRF_process_10", "_ZN2cvdvEdRKNS_3MatE", "Java_org_opencv_ml_SVM_getTermCriteria_10", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_10", "_ZNSt20bad_array_new_lengthD2Ev", "WebPFreeDecBuffer", "Java_org_opencv_imgproc_Subdiv2D_delete", "cvRawDataToScalar", "_ZN2cv21BaseCascadeClassifierD2Ev", "_ZNKSt6__ndk115__codecvt_utf16IDsLb1EE6do_outER9mbstate_tPKDsS5_RS5_PcS7_RS7_", "Java_org_opencv_calib3d_Calib3d_convertPointsFromHomogeneous_10", "_ZNSt6__ndk18ios_base4InitC1Ev", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE5do_inER9mbstate_tPKcS5_RS5_PDiS7_RS7_", "cvContourArea", "_ZNKSt6__ndk18numpunctIwE16do_decimal_pointEv", "Java_org_opencv_calib3d_Calib3d_calibrateCameraRO_11", "_ZN2cv16videoio_registry17getStreamBackendsEv", "_ZN2cv17CommandLineParseraSERKS0_", "Java_org_opencv_dnn_Dnn_blobFromImage_16", "_ZN2cv18HoughLinesPointSetERKNS_11_InputArrayERKNS_12_OutputArrayEiidddddd", "_ZN2cv28convertPointsFromHomogeneousERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv3dnn14dnn4_v201812215Layer8finalizeERKNSt6__ndk16vectorINS_3MatENS3_9allocatorIS5_EEEERS8_", "Java_org_opencv_ml_TrainData_setTrainTestSplit_10", "cvEigenVV", "Java_org_opencv_dnn_DictValue_getRealValue_10", "_ZN2cvgeERKNS_3MatES2_", "Java_org_opencv_ml_ParamGrid_create_12", "_ZN2cv20fastNlMeansDenoisingERKNS_11_InputArrayERKNS_12_OutputArrayEfii", "Java_org_opencv_features2d_Features2d_drawKeypoints_12", "_ZN2cv9minMaxLocERKNS_11_InputArrayEPdS3_PNS_6Point_IiEES6_S2_", "_ZN2cv3ocl7ProgramD1Ev", "WebPDecodeYUVInto", "Java_org_opencv_core_Core_getCPUTickCount_10", "Java_org_opencv_ml_SVMSGD_getShift_10", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_15", "_ZNSt6__ndk16localeC2ERKS0_PKci", "WebPEncodeLosslessBGR", "_ZNSt11range_errorD1Ev", "WebPDecodeRGBA", "_ZN3tbb8internal18concurrent_monitorD2Ev", "_ZN2cv3MatC1ERKNSt6__ndk16vectorIiNS1_9allocatorIiEEEEiPvPKm", "Java_org_opencv_imgproc_Imgproc_rectangle_15", "_ZNSt6__ndk18ios_base7failureD2Ev", "cvDiv", "_ZNSt6__ndk17codecvtIDsc9mbstate_tED0Ev", "Java_org_opencv_video_KalmanFilter_KalmanFilter_13", "_ZN2cvmiERKNS_3MatES2_", "_ZN2cv22getHardwareFeatureNameEi", "_ZN2cv8internal18WriteStructContextC2ERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSC_", "_ZNKSt6__ndk17codecvtIcc9mbstate_tE16do_always_noconvEv", "Java_org_opencv_dnn_Dnn_readNetFromCaffe_10", "_ZN2cvleERKNS_3MatES2_", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_16", "_ZNSt6__ndk119__shared_weak_countD2Ev", "_ZN2cv17CascadeClassifier7convertERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_", "Java_org_opencv_objdetect_CascadeClassifier_load_10", "Java_org_opencv_ml_RTrees_load_11", "_ZN2cv3dnn14dnn4_v2018122110SliceLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_ml_EM_getTermCriteria_10", "_ZN3tbb18task_group_context22cancel_group_executionEv", "_ZN3tbb8internal6market22insert_arena_into_listERNS0_5arenaE", "_ZNK2cv17DescriptorMatcher5writeERNS_11FileStorageE", "Java_org_opencv_imgproc_Imgproc_dilate_11", "Java_org_opencv_features2d_Params_get_1filterByCircularity_10", "_ZN2cv3ocl7Context6createEv", "_ZNKSt6__ndk15ctypeIwE5do_isEmw", "_ZNKSt6__ndk115__codecvt_utf16IDsLb0EE11do_encodingEv", "_ZN2cv10PCAComputeERKNS_11_InputArrayERKNS_17_InputOutputArrayERKNS_12_OutputArrayEd", "_ZN2cv11blendLinearERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayE", "_ZNKSt6__ndk120__time_get_c_storageIcE3__XEv", "cvSort", "_ZN2cv9softfloatC1El", "Java_org_opencv_calib3d_StereoMatcher_setNumDisparities_10", "_ZNSt6__ndk18ios_base15sync_with_stdioEb", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_10", "_ZTv0_n72_NK2cv5AKAZE14getDefaultNameEv", "cvCheckHardwareSupport", "_ZSt17rethrow_exceptionSt13exception_ptr", "_ZNK2cv11_InputArray4sizeEi", "_ZN3tbb4task12change_groupERNS_18task_group_contextE", "Java_org_opencv_dnn_Dnn_blobFromImages_14", "_ZN2cv17DescriptorMatcher20DescriptorCollection3setERKNSt6__ndk16vectorINS_3MatENS2_9allocatorIS4_EEEE", "cvCreateMat", "Java_org_opencv_calib3d_Calib3d_findChessboardCornersSB_10", "Java_org_opencv_features2d_DescriptorMatcher_getTrainDescriptors_10", "_ZN7cvflann19flann_distance_typeEv", "Java_org_opencv_features2d_MSER_create_12", "_ZN2cv4cuda14deviceSupportsENS0_10FeatureSetE", "Java_org_opencv_core_Mat_n_1isSubmatrix", "Java_org_opencv_features2d_FastFeatureDetector_getDefaultName_10", "WebPGetEncoderVersion", "_ZN3tbb8internal6market16update_allotmentEl", "WebPFree", "Java_org_opencv_core_Core_idft_11", "Java_org_opencv_ml_EM_delete", "_ZN2cv3ocl5Queue10getDefaultEv", "Java_org_opencv_dnn_Dnn_readTensorFromONNX_10", "Java_org_opencv_dnn_Net_Net_10", "_ZN2cv5CannyERKNS_11_InputArrayERKNS_12_OutputArrayEddib", "_ZN3tbb8internal8governor16assume_schedulerEPNS0_17generic_schedulerE", "_ZN2cv25BOWImgDescriptorExtractorD2Ev", "Java_org_opencv_photo_MergeMertens_getExposureWeight_10", "_ZN2cv29createGeneralizedHoughBallardEv", "_ZN2cv21DetectionBasedTracker10ParametersC2Ev", "Java_org_opencv_imgproc_Imgproc_integral2_12", "_ZN2cv3hal6log32fEPKfPfi", "_ZN2cv15haveImageWriterERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN2cv3ocl8PlatformC1ERKS1_", "Java_org_opencv_core_Core_useIPP_10", "Java_org_opencv_videoio_VideoCapture_isOpened_10", "Java_org_opencv_core_Core_batchDistance_14", "Java_org_opencv_video_KalmanFilter_set_1statePre_10", "_ZN2cv5instr8NodeDataC2EPKcS3_iPvbNS0_4TYPEENS0_4IMPLE", "_ZN2cvdvERKNS_7MatExprES2_", "_ZNK2cv11_InputArray6sizendEPii", "_ZNK2cv3Mat7getUMatENS_10AccessFlagENS_14UMatUsageFlagsE", "_ZNSt6__ndk111timed_mutex8try_lockEv", "_ZNSt13exception_ptrC1ERKS_", "_ZN2cv11mixChannelsEPKNS_3MatEmPS0_mPKim", "Java_org_opencv_photo_MergeDebevec_process_10", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_ii", "_ZNSt6__ndk112bad_weak_ptrD0Ev", "_ZN2cvleEdRKNS_3MatE", "_ZN3tbb8internal18concurrent_monitorD1Ev", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_11", "Java_org_opencv_imgcodecs_Imgcodecs_haveImageWriter_10", "Java_org_opencv_calib3d_Calib3d_fisheye_1undistortImage_11", "_ZN2cv5utils2fs13glob_relativeERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RNS2_6vectorIS8_NS6_IS8_EEEEbb", "_ZNK2cv3SVD9backSubstERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvCreateMatNDHeader", "Java_org_opencv_calib3d_StereoMatcher_setBlockSize_10", "_ZNSt6__ndk16locale8__globalEv", "_ZNK2cv4UMat11checkVectorEiib", "Java_org_opencv_ml_SVM_trainAuto_15", "cvSeqPop", "_ZN2cv4readERKNS_8FileNodeERNS_9SparseMatERKS3_", "Java_org_opencv_core_Core_convertFp16_10", "Java_org_opencv_core_Mat_nGetB", "Java_org_opencv_calib3d_Calib3d_composeRT_15", "_ZN2cv8internal15IntrinsicParamsC2Ev", "Java_org_opencv_core_Core_mean_11", "_ZN2cv3ogl6Buffer6unbindENS1_6TargetE", "_ZN2cv20FarnebackOpticalFlow6createEidbiiidi", "Java_org_opencv_calib3d_Calib3d_calibrateCamera_10", "_ZN2cv21DetectionBasedTracker21SeparateDetectionWorkD0Ev", "_ZNSt6__ndk17codecvtIwc9mbstate_tEC2EPKcm", "Java_org_opencv_features2d_BOWImgDescriptorExtractor_delete", "_ZN3tbb8internal6market16update_allotmentERNS0_14intrusive_listINS0_5arenaEEEii", "_ZN2cv21intersectConvexConvexERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "_ZSt15get_new_handlerv", "Java_org_opencv_dnn_Dnn_blobFromImages_10", "_ZN2cv3ocl5TimerD2Ev", "Java_org_opencv_calib3d_Calib3d_recoverPose_10", "_ZN3tbb18task_group_context16copy_fp_settingsERKS0_", "_ZNSt6__ndk18__sp_mut4lockEv", "_ZNSt12out_of_rangeD1Ev", "_ZN2cv17DescriptorMatcher5trainEv", "_ZNK2cv3dnn14dnn4_v201812213Net20getMemoryConsumptionERKNSt6__ndk16vectorIiNS3_9allocatorIiEEEERS7_RNS4_ImNS5_ImEEEESD_", "Java_org_opencv_video_DISOpticalFlow_setVariationalRefinementAlpha_10", "_ZNK2cv3Mat9convertToERKNS_12_OutputArrayEidd", "Java_org_opencv_imgproc_Subdiv2D_locate_10", "Java_org_opencv_features2d_FlannBasedMatcher_create_10", "_ZN9CvLevMarqC1Ev", "_ZNK2cv4UMat4diagEi", "_ZN2cv6reduceERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_calib3d_Calib3d_projectPoints_12", "Java_org_opencv_core_Core_getTickFrequency_10", "_ZNK2cv4cuda10DeviceInfo15memoryClockRateEv", "_ZN2cv3PCAC1ERKNS_11_InputArrayES3_ii", "_ZN2cv8internal18WriteStructContextD2Ev", "_ZNSt6__ndk115__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE", "Java_org_opencv_features2d_Feature2D_descriptorSize_10", "_ZN2cv12VideoCaptureC2Ev", "cvGetOptimalDFTSize", "_ZN2cv21VariationalRefinement6createEv", "cvSeqPush", "_ZN2cv5errorEiRKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcSA_i", "_ZN2cv3hal5DFT2D6createEiiiiiii", "_ZNSt6__ndk18numpunctIwED0Ev", "_ZNSt6__ndk121__throw_runtime_errorEPKc", "_ZN3tbb8internal12PrintVersionEv", "Java_org_opencv_calib3d_Calib3d_stereoRectifyUncalibrated_11", "cvRelease", "_ZN9CvLevMarqC2Ev", "cvCreateGraphScanner", "_ZN2cv3hal23cvtMultipliedRGBAtoRGBAEPKhmPhmii", "_ZNK2cv11FileStorage20getFirstTopLevelNodeEv", "_ZNK2cv9Feature2D5emptyEv", "Java_org_opencv_imgproc_CLAHE_getTilesGridSize_10", "_ZN2cv14insertImageCOIERKNS_11_InputArrayEPvi", "_ZNSt15underflow_errorD2Ev", "Java_org_opencv_features2d_ORB_setMaxFeatures_10", "cvGetDims", "_ZNKSt6__ndk18numpunctIcE16do_thousands_sepEv", "_ZN2cv16ParallelLoopBodyD0Ev", "cvSetND", "Java_org_opencv_photo_TonemapMantiuk_setSaturation_10", "_ZNKSt6__ndk15ctypeIcE10do_tolowerEc", "Java_org_opencv_imgproc_GeneralizedHough_getDp_10", "WebPPictureAlloc", "Java_org_opencv_imgproc_Imgproc_rectangle_16", "Java_org_opencv_ml_SVMSGD_create_10", "_ZN2cv3MatC1EiPKiiPvPKm", "Java_org_opencv_calib3d_StereoBM_getUniquenessRatio_10", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_10", "Java_org_opencv_imgproc_Imgproc_warpAffine_11", "_ZN2cv16AVIReadContainerC2Ev", "_ZNK2cv8FileNode6isRealEv", "Java_org_opencv_imgproc_Imgproc_ellipse_16", "Java_org_opencv_core_Core_randu_10", "_ZNK2cv16TLSDataContainer7getDataEv", "Java_org_opencv_imgproc_Imgproc_connectedComponentsWithStats_12", "Java_org_opencv_ml_TrainData_getNormCatResponses_10", "Java_org_opencv_ml_LogisticRegression_getTrainMethod_10", "Java_org_opencv_video_BackgroundSubtractorKNN_setDist2Threshold_10", "_ZN3tbb8internal17tbb_exception_ptr8allocateEv", "_ZN2cv12completeSymmERKNS_17_InputOutputArrayEb", "_ZN2cv6mulAddERKNS_9softfloatES2_S2_", "Java_org_opencv_video_FarnebackOpticalFlow_setNumIters_10", "_ZN2cv3ogl6renderERKNS0_9Texture2DENS_5Rect_IdEES5_", "_ZN2cv5flann5IndexC2Ev", "_ZN3tbb8internal15runtime_warningEPKcz", "Java_org_opencv_calib3d_StereoSGBM_getPreFilterCap_10", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_13", "_ZNK2cv21DetectionBasedTracker10getObjectsERNSt6__ndk16vectorINS_5Rect_IiEENS1_9allocatorIS4_EEEE", "_ZN2cv12GaussianBlurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv26createGeneralizedHoughGuilEv", "_ZN2cv6imreadERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi", "Java_org_opencv_core_Core_PCACompute2_11", "Java_org_opencv_features2d_AgastFeatureDetector_create_11", "Java_org_opencv_core_Core_batchDistance_15", "_ZN2cv12KalmanFilterC2Ev", "Java_org_opencv_core_Mat_n_1mul__JJ", "Java_org_opencv_core_Mat_n_1cross", "Java_org_opencv_core_Core_mixChannels_10", "Java_org_opencv_imgproc_Imgproc_drawContours_10", "cvCompleteSymm", "Java_org_opencv_video_BackgroundSubtractor_apply_11", "cvRestoreMemStoragePos", "WebPGetColorPalette", "_ZNK2cv10softdoubleneERKS0_", "_ZN2cv3LDA4loadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "cvEqualizeHist", "WebPPictureImportRGB", "_ZN2cv3dnn14dnn4_v2018122118readTensorFromONNXERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "cvSub", "_ZN2cv8Subdiv2D8newPointENS_6Point_IfEEbi", "Java_org_opencv_dnn_Net_empty_10", "Java_org_opencv_calib3d_Calib3d_recoverPose_17", "Java_org_opencv_ml_SVM_create_10", "Java_org_opencv_ml_LogisticRegression_setMiniBatchSize_10", "cvDotProduct", "_ZN2cv8Subdiv2D19getVoronoiFacetListERKNSt6__ndk16vectorIiNS1_9allocatorIiEEEERNS2_INS2_INS_6Point_IfEENS3_IS9_EEEENS3_ISB_EEEERSB_", "cvCountNonZero", "Java_org_opencv_imgproc_Imgproc_warpAffine_10", "cvCalcArrBackProjectPatch", "_ZNSt6__ndk112system_errorC1EiRKNS_14error_categoryEPKc", "_ZN2cv4cuda6GpuMatC2ERKS1_NS_5RangeES4_", "_ZN2cv3ocl14memopTypeToStrEi", "_ZNSt6__ndk117__widen_from_utf8ILm32EED1Ev", "Java_org_opencv_imgproc_Imgproc_accumulateProduct_11", "_ZNK2cv19FastFeatureDetector14getDefaultNameEv", "_ZNKSt6__ndk15ctypeIcE8do_widenEPKcS3_Pc", "_ZN2cv12getTickCountEv", "Java_org_opencv_ml_SVM_getC_10", "_ZN2cvltERKNS_3MatEd", "_ZNSt8bad_castD1Ev", "_ZN2cv5flann17LinearIndexParamsC1Ev", "Java_org_opencv_photo_AlignMTB_getMaxBits_10", "_ZN2cv25BOWImgDescriptorExtractor7computeERKNS_11_InputArrayERKNS_12_OutputArrayEPNSt6__ndk16vectorINS8_IiNS7_9allocatorIiEEEENS9_ISB_EEEE", "cvCartToPolar", "Java_org_opencv_core_Mat_n_1Mat__JII", "_ZNK2cv13HOGDescriptor5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "Java_org_opencv_ml_TrainData_getTestSampleIdx_10", "_ZNSt6__ndk121recursive_timed_mutexC2Ev", "_ZN2cv8Subdiv2D8QuadEdgeC1Ei", "_ZNSt6__ndk117iostream_categoryEv", "cvUpdateWindow", "WebPDecodeRGBAInto", "Java_org_opencv_imgproc_Imgproc_dilate_14", "_ZN2cvgeERKNS_3MatEd", "Java_org_opencv_video_SparseOpticalFlow_calc_11", "_ZN2cv8Subdiv2D8QuadEdgeC2Ev", "Java_org_opencv_calib3d_StereoSGBM_create_110", "_ZNSt6__ndk115numpunct_bynameIwED2Ev", "cvCreateMatHeader", "_ZNSt6__ndk17promiseIvE28set_exception_at_thread_exitESt13exception_ptr", "_ZN2cv12KalmanFilter7correctERKNS_3MatE", "Java_org_opencv_video_BackgroundSubtractor_apply_10", "_ZN3tbb8internal17generic_scheduler12attach_arenaEPNS0_5arenaEmb", "_ZN2cv3dnn14dnn4_v2018122112SoftmaxLayer6createERKNS1_11LayerParamsE", "Java_org_opencv_imgproc_Imgproc_drawContours_13", "Java_org_opencv_core_Core_checkRange_10", "Java_org_opencv_ml_ANN_1MLP_setAnnealItePerStep_10", "_ZN2cv20getValidDisparityROIENS_5Rect_IiEES1_iii", "_ZN2cv3Mat8copySizeERKS0_", "__dynamic_cast", "_ZN2cv5utils5trace7details12TraceManager11isActivatedEv", "_ZN2cv15setBreakOnErrorEb", "Java_org_opencv_photo_TonemapDrago_getBias_10", "_ZN3tbb19task_scheduler_init10initializeEi", "_ZN2cv25getOptimalNewCameraMatrixERKNS_11_InputArrayES2_NS_5Size_IiEEdS4_PNS_5Rect_IiEEb", "Java_org_opencv_videoio_VideoCapture_VideoCapture_10", "Java_org_opencv_features2d_KAZE_setThreshold_10", "_ZNK2cv8FileNode7rawSizeEv", "Java_org_opencv_core_Core_perspectiveTransform_10", "_ZN2cv5utils2fs8FileLockC2EPKc", "_ZN2cvplERKNS_7MatExprERKNS_3MatE", "Java_org_opencv_ml_NormalBayesClassifier_load_11", "_ZN3tbb8internal17generic_scheduler24free_nonlocal_small_taskERNS_4taskE", "_ZNSt12length_errorD2Ev", "_ZN2cv3hal7gemm64fEPKdmS2_mdS2_mdPdmiiii", "Java_org_opencv_photo_TonemapMantiuk_setScale_10", "_ZN2cv7seqPushEP5CvSeqPKv", "Java_org_opencv_ml_DTrees_load_11", "Java_org_opencv_photo_Photo_illuminationChange_10", "_ZN2cv5utils2fs11isDirectoryERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN3tbb8internal18concurrent_monitor18notify_all_relaxedEv", "_ZN2cv3ocl5Timer5startEv", "_ZNK2cv17CascadeClassifier21getOriginalWindowSizeEv", "_ZNK2cv14QRCodeDetector6detectERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv5utils5trace7details6Region4Impl11enterRegionERNS2_23TraceManagerThreadLocalE", "Java_org_opencv_features2d_Params_set_1minInertiaRatio_10", "_ZN2cv3hal5not8uEPKhmS2_mPhmiiPv", "_ZNK2cv16FileNodeIterator9remainingEv", "_ZN2cv5AKAZE6createENS0_14DescriptorTypeEiifiiNS_4KAZE15DiffusivityTypeE", "_ZN2cv3Mat3eyeEiii", "Java_org_opencv_ml_SVMSGD_setTermCriteria_10", "_ZNK2cv3ocl7Program3ptrEv", "_ZN2cv5flann11IndexParams7setBoolERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb", "Java_org_opencv_photo_AlignMTB_setMaxBits_10", "_ZN2cv3logERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv8Subdiv2D6insertENS_6Point_IfEE", "_ZN2cv19connectedComponentsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "Java_org_opencv_imgproc_Imgproc_getStructuringElement_11", "_ZN2cv3ocl8Platform10getDefaultEv", "_ZN3tbb8internal26GetBoolEnvironmentVariableEPKc", "_ZNK2cv4cuda10DeviceInfo16surfaceAlignmentEv", "_ZN2cv11FileStorage7releaseEv", "_ZN2cv14solvePnPRansacERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bifdS5_i", "_ZN2cv3hal8split64sEPKlPPlii", "cvMatchTemplate", "Java_org_opencv_features2d_BOWKMeansTrainer_cluster_11", "_ZN2cvneERKNS_16FileNodeIteratorES2_", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE9do_lengthER9mbstate_tPKcS5_m", "Java_org_opencv_imgproc_Imgproc_floodFill_10", "Java_org_opencv_ml_LogisticRegression_predict_12", "Java_org_opencv_features2d_Params_get_1minInertiaRatio_10", "_ZNK2cv11RotatedRect12boundingRectEv", "Java_org_opencv_photo_MergeMertens_getContrastWeight_10", "Java_org_opencv_dnn_Net_setInput_10", "_ZN2cv3hal11cvtHSVtoBGREPKhmPhmiiiibbb", "Java_org_opencv_videoio_VideoWriter_release_10", "cvRectangle", "_ZN2cv3ocl13ProgramSourceC1ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "Java_org_opencv_imgproc_Imgproc_warpAffine_12", "_ZN2cv3LDAD2Ev", "Java_org_opencv_photo_Photo_createTonemap_11", "cvRepeat", "_ZN2cv3absERKNS_3MatE", "Java_org_opencv_features2d_GFTTDetector_getDefaultName_10", "_ZN2cv9LaplacianERKNS_11_InputArrayERKNS_12_OutputArrayEiiddi", "_ZN2cv3ocl5QueueC1Ev", "_ZN2cv7ellipseERKNS_17_InputOutputArrayERKNS_11RotatedRectERKNS_7Scalar_IdEEii", "_ZN2cv3ogl6Buffer11unmapDeviceERNS_4cuda6StreamE", "_ZN2cv3ogl22convertFromGLTexture2DERKNS0_9Texture2DERKNS_12_OutputArrayE", "_ZSt19uncaught_exceptionsv", "_ZNKSt6__ndk114collate_bynameIcE10do_compareEPKcS3_S3_S3_", "_ZN2cv3ogl6Arrays15resetColorArrayEv", "Java_org_opencv_calib3d_Calib3d_checkChessboard_10", "Java_org_opencv_imgproc_Imgproc_circle_13", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_17", "Java_org_opencv_core_Core_convertScaleAbs_12", "Java_org_opencv_imgproc_Imgproc_filter2D_10", "Java_org_opencv_photo_Photo_illuminationChange_11", "cvNormalize", "_ZNK2cv3ocl6Device12halfFPConfigEv", "Java_org_opencv_ml_Boost_load_11", "_ZN2cv3ocl5Timer4stopEv", "_ZNSt6__ndk118__time_get_storageIwE4initERKNS_5ctypeIwEE", "_ZN2cv3ogl6Arrays16resetNormalArrayEv", "_ZN2cv8fastFreeEPv", "_ZN2cv3ocl5QueueC1ERKS1_", "Java_org_opencv_calib3d_StereoSGBM_setP1_10", "_ZN2cv15readOpticalFlowERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZNSt6__ndk19to_stringEx", "_ZNK2cv11VideoWriter3getEi", "_ZN3tbb16spin_rw_mutex_v316internal_upgradeEv", "_ZN2cv8va_intel3ocl23initializeContextFromVAEPvb", "cvGetHuMoments", "Java_org_opencv_ml_ANN_1MLP_setRpropDWMinus_10", "cvAlloc", "_ZN2cv3ocl7Context9setUseSVMEb", "_ZN2cv7MomentsC2Edddddddddd", "_ZNK2cv14DefaultDeleterI13CvVideoWriterEclEPS1_", "_ZNSt6__ndk18ios_base4InitC2Ev", "_ZN2cv17DescriptorMatcher8knnMatchERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEiS3_b", "_ZN2cv16FileNodeIterator7readRawERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPvm", "Java_org_opencv_photo_TonemapReinhard_setIntensity_10", "_ZN2cv21DetectionBasedTracker4stopEv", "_ZN2cv3dnn14dnn4_v2018122116readNetFromTorchERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbb", "_ZN2cv4cuda6GpuMatC2ENS_5Size_IiEEiPvm", "_ZN3tbb8internal13observer_list6insertEPNS0_14observer_proxyE", "_ZN2cv3powERKNS_11_InputArrayEdRKNS_12_OutputArrayE", "_ZNKSt6__ndk114error_category10equivalentERKNS_10error_codeEi", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_11", "Java_org_opencv_core_Mat_n_1t", "_ZN2cv3hal9cvt32f16fEPKfPNS_9float16_tEi", "_ZN2cv7directx25convertFromD3D10Texture2DEP15ID3D10Texture2DRKNS_12_OutputArrayE", "Java_org_opencv_calib3d_Calib3d_solvePnPRansac_14", "Java_org_opencv_features2d_BRISK_create_17", "_ZTv0_n24_N2cv9Feature2DD1Ev", "_ZNK2cv22SimpleBlobDetectorImpl9findBlobsERKNS_11_InputArrayES3_RNSt6__ndk16vectorINS0_6CenterENS4_9allocatorIS6_EEEE", "WebPDecodeBGRAInto", "_ZN2cv11RNG_MT19937cvdEv", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_11", "Java_org_opencv_video_KalmanFilter_get_1processNoiseCov_10", "_ZN2cv5utils5trace7details6Region4ImplC2ERNS2_23TraceManagerThreadLocalEPS3_RS3_RKNS3_21LocationStaticStorageEl", "_ZNK2cv17FlannBasedMatcher5writeERNS_11FileStorageE", "Java_org_opencv_photo_Tonemap_process_10", "_ZN2cv2ml9TrainDataD2Ev", "Java_org_opencv_calib3d_Calib3d_composeRT_12", "Java_org_opencv_imgproc_Imgproc_pyrMeanShiftFiltering_11", "_ZNKSt6__ndk15ctypeIcE10do_tolowerEPcPKc", "_ZN3tbb8internal28gcc_rethrow_exception_brokenEv", "_ZN2cv3Mat8pop_backEm", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_15", "Java_org_opencv_features2d_KAZE_getNOctaves_10", "_ZN2cv10BOWTrainerC2Ev", "_ZN2cv5instr8NodeDataD1Ev", "_ZTv0_n72_NK2cv9Feature2D14getDefaultNameEv", "_ZN2cv3dnn14dnn4_v201812215Layer13initInfEngineERKNSt6__ndk16vectorINS_3PtrINS1_14BackendWrapperEEENS3_9allocatorIS7_EEEE", "cvReadChainPoint", "cvSVBkSb", "_ZN3tbb8internal3rml11tbb_factory11make_serverERPNS1_10tbb_serverERNS1_10tbb_clientE", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd", "_ZNK2cv8FileNode3matEv", "_ZN2cv12denoise_TVL1ERKNSt6__ndk16vectorINS_3MatENS0_9allocatorIS2_EEEERS2_di", "_ZN2cv3ocl5QueueD1Ev", "_ZN3tbb19task_scheduler_init10initializeEim", "_ZN2cv10bitwise_orERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZNSt6__ndk114collate_bynameIcED1Ev", "Java_org_opencv_video_BackgroundSubtractorMOG2_getHistory_10", "_ZSt10unexpectedv", "_ZN2cv9Feature2D4readERKNS_8FileNodeE", "_ZNKSt6__ndk115__codecvt_utf16IDiLb0EE13do_max_lengthEv", "_Z7cvTruncRKN2cv9softfloatE", "Java_org_opencv_features2d_KAZE_delete", "_ZN2cv3dnn14dnn4_v201812218NMSBoxesERKNSt6__ndk16vectorINS_11RotatedRectENS2_9allocatorIS4_EEEERKNS3_IfNS5_IfEEEEffRNS3_IiNS5_IiEEEEfi", "Java_org_opencv_ml_SVM_getType_10", "_ZN2cv3dnn14dnn4_v201812213Net20setPreferableBackendEi", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_13", "Java_org_opencv_features2d_AKAZE_setDescriptorSize_10", "_ZN2cv10accumulateERKNS_11_InputArrayERKNS_17_InputOutputArrayES2_", "_ZN2cv16FileNodeIteratorC2ERKS0_", "Java_org_opencv_imgproc_Imgproc_putText_12", "_ZNKSt6__ndk114error_category23default_error_conditionEi", "Java_org_opencv_imgproc_Imgproc_arrowedLine_10", "Java_org_opencv_imgproc_Imgproc_invertAffineTransform_10", "WebPEncodeBGR", "_ZN2cv16AVIReadContainer10parseIndexEjRNSt6__ndk15dequeINS1_4pairImjEENS1_9allocatorIS4_EEEE", "_ZN2cv4cuda7HostMem7releaseEv", "Java_org_opencv_calib3d_StereoMatcher_setSpeckleRange_10", "_ZN2cv3ocl9KernelArgC1EiPNS_4UMatEiiPKvm", "Java_org_opencv_features2d_ORB_create_12", "Java_org_opencv_dnn_Net_getParam_11", "_ZN2cv5utils5trace7details8traceArgERKNS2_8TraceArgEl", "_ZN2cv11seqPopFrontEP5CvSeqPv", "Java_org_opencv_core_Mat_n_1setTo__JJ", "Java_org_opencv_core_Core_checkRange_12", "_ZN2cv5flann11IndexParams9setDoubleERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd", "cvGetQuadrangleSubPix", "Java_org_opencv_photo_Tonemap_setGamma_10", "_ZN2cv22decomposeHomographyMatERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_S5_", "_ZN2cv9softfloatC1Ei", "Java_org_opencv_imgproc_Imgproc_warpPolar_10", "_ZN2cv3hal6add16sEPKsmS2_mPsmiiPv", "_ZN2cv3ocl13ProgramSourceD2Ev", "_ZN2cv11VideoWriter5writeERKNS_11_InputArrayE", "_ZNK2cv3ogl6Buffer6copyToERKNS_12_OutputArrayE", "_ZNSt11logic_erroraSERKS_", "Java_org_opencv_imgproc_Imgproc_applyColorMap_11", "_ZN2cv3hal6SVD64fEPdmS1_S1_mS1_miii", "_ZNSt13runtime_errorC1ERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN2cv22createCalibrateDebevecEifb", "Java_org_opencv_photo_Photo_createTonemapReinhard_13", "Java_org_opencv_core_Core_completeSymm_11", "Java_org_opencv_imgproc_Imgproc_cornerEigenValsAndVecs_11", "_ZNK2cv3ocl6Device23nativeVectorWidthDoubleEv", "_ZNK2cv9softfloatplERKS0_", "_ZNKSt6__ndk114__codecvt_utf8IwE10do_unshiftER9mbstate_tPcS4_RS4_", "_ZNK2cv4cuda10DeviceInfo13maxThreadsDimEv", "_ZNKSt6__ndk114__codecvt_utf8IDiE16do_always_noconvEv", "Java_org_opencv_ml_DTrees_setCVFolds_10", "_ZN2cv5flann14LshIndexParamsC2Eiii", "Java_org_opencv_features2d_BOWKMeansTrainer_cluster_10", "Java_org_opencv_objdetect_HOGDescriptor_get_1winSize_10", "_ZN2cv8solvePnPERKNS_11_InputArrayES2_S2_S2_RKNS_12_OutputArrayES5_bi", "_ZN2cvplERKNS_3MatES2_", "_ZTv0_n72_NK2cv3ORB14getDefaultNameEv", "_Z6cvCeilRKN2cv9softfloatE", "_ZNK2cv16MatConstIterator3posEv", "Java_org_opencv_video_BackgroundSubtractorMOG2_apply_10", "_ZN2cv22SparsePyrLKOpticalFlow6createENS_5Size_IiEEiNS_12TermCriteriaEid", "_ZN2cv9SparseMat6createEiPKii", "cvGetMinMaxHistValue", "Java_org_opencv_objdetect_QRCodeDetector_detect_10", "cvMul", "_ZN3tbb8internal8governor18print_version_infoEv", "Java_org_opencv_core_Core_getVersionRevision_10", "_ZN2cv15calibrateCameraERKNS_11_InputArrayES2_NS_5Size_IiEERKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_SA_SA_SA_iNS_12TermCriteriaE", "_ZN2cv12VideoCaptureC1Eii", "Java_org_opencv_imgproc_Imgproc_getDerivKernels_10", "_ZN2cv8logPolarERKNS_11_InputArrayERKNS_12_OutputArrayENS_6Point_IfEEdi", "_ZNKSt6__ndk16locale9has_facetERNS0_2idE", "cvCvtColor", "_ZNK2cv4cuda10DeviceInfo17concurrentKernelsEv", "_ZN2cv3ocl8internal26isPerformanceCheckBypassedEv", "_ZNK2cv4cuda10DeviceInfo18maxTexture1DMipmapEv", "cvInRange", "_ZN2cv16AVIReadContainer5closeEv", "cvCreateButton", "_ZNK2cv4cuda10DeviceInfo8pciBusIDEv", "Java_org_opencv_calib3d_Calib3d_reprojectImageTo3D_10", "VP8LGetInfo", "_ZN2cv18reprojectImageTo3DERKNS_11_InputArrayERKNS_12_OutputArrayES2_bi", "_ZNK2cv11_InputArray11isSubmatrixEi", "_ZN3tbb8internal19allocate_root_proxy4freeERNS_4taskE", "_ZN2cv12setUseOpenVXEb", "_ZNK2cv7MatExpr3rowEi", "Java_org_opencv_imgproc_Imgproc_contourArea_11", "_ZN2cv3hal21cvtBGRtoThreePlaneYUVEPKhmPhmiiibi", "_ZN2cv29createBackgroundSubtractorKNNEidb", "Java_org_opencv_video_DISOpticalFlow_setGradientDescentIterations_10", "_ZN2cv3RNG8gaussianEd", "_ZN2cv5flann20AutotunedIndexParamsC2Effff", "_ZN2cv25groupRectangles_meanshiftERNSt6__ndk16vectorINS_5Rect_IiEENS0_9allocatorIS3_EEEERNS1_IdNS4_IdEEEESA_dNS_5Size_IiEE", "_ZNK2cv14DefaultDeleterI12CvMemStorageEclEPS1_", "_ZN2cvmlEdRKNS_3MatE", "_ZN2cv16BOWKMeansTrainerD1Ev", "_ZN2cv14ConjGradSolver6createERKNS_3PtrINS_16MinProblemSolver8FunctionEEENS_12TermCriteriaE", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_13", "Java_org_opencv_imgproc_Imgproc_sepFilter2D_11", "_ZN2cv11addWeightedERKNS_11_InputArrayEdS2_ddRKNS_12_OutputArrayEi", "Java_org_opencv_calib3d_Calib3d_calibrateCameraROExtended_10", "_ZN2cv12mulSpectrumsERKNS_11_InputArrayES2_RKNS_12_OutputArrayEib", "Java_org_opencv_ml_TrainData_getClassLabels_10", "_ZN2cv3ogl9Texture2D7releaseEv", "Java_org_opencv_photo_Photo_fastNlMeansDenoising_16", "Java_org_opencv_video_FarnebackOpticalFlow_setPolyN_10", "cvCreateTrackbar2", "_ZN2cv12findContoursERKNS_11_InputArrayERKNS_12_OutputArrayES5_iiNS_6Point_IiEE", "_ZN2cv16TLSDataContainerD0Ev", "_ZN2cv8multiplyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cv14setTrackbarMaxERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_i", "_ZN2cv3ocl12PlatformInfoC1ERKS1_", "_ZN2cv3hal6mul32fEPKfmS2_mPfmiiPv", "_ZN2cv3hal8merge32sEPPKiPiii", "Java_org_opencv_video_KalmanFilter_set_1measurementNoiseCov_10", "cvRandArr", "Java_org_opencv_video_BackgroundSubtractorKNN_getShadowThreshold_10", "Java_org_opencv_imgproc_Imgproc_integral3_12", "_ZN2cv3ogl6renderERKNS0_6ArraysEiNS_7Scalar_IdEE", "_ZN2cv28connectedComponentsWithStatsERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_ii", "Java_org_opencv_ml_ParamGrid_create_10", "cvReleaseHist", "Java_org_opencv_core_Mat_n_1eye__DDI", "Java_org_opencv_features2d_Features2d_drawMatches_11", "_ZN2cv3ocl13ProgramSource10fromBinaryERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_PKhmSA_", "_Z7cvFloorRKN2cv10softdoubleE", "_ZN2cv17DescriptorMatcher20DescriptorCollectionD1Ev", "_ZN2cv3ocl18getOpenCLAllocatorEv", "Java_org_opencv_videoio_VideoWriter_open_10", "_ZN2cv17FlannBasedMatcher4readERKNS_8FileNodeE", "_ZNK2cv3dnn14dnn4_v201812213Net13getLayerTypesERNSt6__ndk16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEE", "Java_org_opencv_calib3d_Calib3d_findEssentialMat_14", "Java_org_opencv_video_Video_calcOpticalFlowPyrLK_10", "Java_org_opencv_ml_EM_load_11", "_ZNK2cv8FileNode4keysEv", "Java_org_opencv_ml_TrainData_shuffleTrainTest_10", "Java_org_opencv_core_Mat_n_1mul__JJD", "_ZN2cv12cornerSubPixERKNS_11_InputArrayERKNS_17_InputOutputArrayENS_5Size_IiEES7_NS_12TermCriteriaE", "_ZN2cv9minMaxIdxERKNS_11_InputArrayEPdS3_PiS4_S2_", "Java_org_opencv_imgproc_Imgproc_goodFeaturesToTrack_12", "Java_org_opencv_features2d_AKAZE_create_12", "Java_org_opencv_video_DISOpticalFlow_getVariationalRefinementIterations_10", "Java_org_opencv_photo_Photo_fastNlMeansDenoisingColored_10", "cvSetErrStatus", "cvFindCornerSubPix", "_ZN3tbb8internal14__TBB_InitOnce10remove_refEv", "_ZNK2cv12_OutputArray6createEiiiibNS0_9DepthMaskE", "_ZN2cv4meanERKNS_11_InputArrayES2_", "_ZNK2cv3ocl8internal12ProgramEntrycvRNS0_13ProgramSourceEEv", "_ZN2cv3ocl5TimerD1Ev", "Java_org_opencv_photo_Photo_createCalibrateDebevec_12", "cvXor", "Java_org_opencv_calib3d_Calib3d_composeRT_17", "_ZNK2cv5MatOp6divideERKNS_7MatExprES3_RS1_d", "_ZNK2cv10softdoublegeERKS0_", "Java_org_opencv_calib3d_Calib3d_fisheye_1stereoCalibrate_12", "Java_org_opencv_core_Mat_n_1inv__JI", "_ZNK2cv3ocl6Device24preferredVectorWidthCharEv", "Java_org_opencv_ml_RTrees_getCalculateVarImportance_10", "Java_org_opencv_core_Core_setUseIPP_1NotExact_10", "Java_org_opencv_features2d_MSER_setMaxArea_10", "_ZN2cv3Mat13reserveBufferEm", "WebPEncodeRGBA", "_ZNSt6__ndk119__shared_weak_count14__release_weakEv", "_ZN2cv5writeERNS_11FileStorageERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS2_6vectorINS_8KeyPointENS6_ISC_EEEE", "_ZNSt6__ndk16locale2id6__initEv", "Java_org_opencv_photo_TonemapMantiuk_getSaturation_10", "_ZNKSt6__ndk17codecvtIwc9mbstate_tE10do_unshiftERS1_PcS4_RS4_", "Java_org_opencv_video_BackgroundSubtractorMOG2_getBackgroundRatio_10", "_ZN2cv3ocl6DeviceC2ERKS1_", "_ZN2cv3ocl7Image2DC1Ev", "Java_org_opencv_core_Core_idct_11", "_ZN2cv9selectROIERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayEbb", "_ZN2cvplERKNS_7Scalar_IdEERKNS_7MatExprE", "_ZN2cv3hal7invSqrtEPKdPdi", "Java_org_opencv_features2d_BOWKMeansTrainer_BOWKMeansTrainer_11", "cvNextTreeNode", "Java_org_opencv_core_Mat_n_1col", "Java_org_opencv_calib3d_StereoMatcher_delete", "Java_org_opencv_ml_SVM_setGamma_10", "Java_org_opencv_calib3d_Calib3d_recoverPose_16", "_ZN2cv17FlannBasedMatcher12knnMatchImplERKNS_11_InputArrayERNSt6__ndk16vectorINS5_INS_6DMatchENS4_9allocatorIS6_EEEENS7_IS9_EEEEiS3_b", "Java_org_opencv_ml_ANN_1MLP_setBackpropMomentumScale_10", "cvStartReadSeq", "_ZN2cv16FileNodeIteratorC1ERKS0_", "_ZN2cv3ocl6KernelC1ERKS1_", "Java_org_opencv_calib3d_Calib3d_findFundamentalMat_10", "cvColorToScalar", "Java_org_opencv_imgproc_Imgproc_HoughCircles_13", "_ZN2cv17calibrateCameraROERKNS_11_InputArrayES2_NS_5Size_IiEEiRKNS_17_InputOutputArrayES7_RKNS_12_OutputArrayESA_SA_SA_SA_SA_SA_iNS_12TermCriteriaE", "_ZN3tbb8internal6market12detach_arenaERNS0_5arenaE", "Java_org_opencv_features2d_Features2d_drawMatchesKnn_12", "_ZN2cv8KeyPoint7overlapERKS0_S2_", "Java_org_opencv_calib3d_StereoBM_setTextureThreshold_10", "_ZN2cv16UMatDataAutoLockC2EPNS_8UMatDataE", "Java_org_opencv_core_TickMeter_start_10", "Java_org_opencv_photo_CalibrateDebevec_getRandom_10", "Java_org_opencv_ml_NormalBayesClassifier_delete", "_ZN2cv3cosERKNS_10softdoubleE", "_ZNSt12out_of_rangeD0Ev", "Java_org_opencv_dnn_Dnn_readNetFromONNX_10", "Java_org_opencv_features2d_Params_get_1minConvexity_10", "_ZNK2cv4cuda10DeviceInfo11pciDomainIDEv", "_ZN2cv3dnn14dnn4_v201812215Layer16forward_fallbackERKNS_11_InputArrayERKNS_12_OutputArrayES8_", "_ZN2cv23buildOpticalFlowPyramidERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEibiib", "_ZN2cvmlERKNS_3MatERKNS_7MatExprE", "_ZN2cv16AVIReadContainer9parseStrlEcNS_6CodecsE", "_ZN2cv10selectROIsERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_11_InputArrayERNS0_6vectorINS_5Rect_IiEENS4_ISE_EEEEbb", "_ZNSt6__ndk112system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_ZN2cv3hal5max8sEPKamS2_mPamiiPv", "cvMerge", "Java_org_opencv_dnn_Dnn_readNet_13", "_ZN2cv17FlannBasedMatcherC2ERKNS_3PtrINS_5flann11IndexParamsEEERKNS1_INS2_12SearchParamsEEE", "Java_org_opencv_imgproc_Imgproc_matchShapes_10", "Java_org_opencv_imgproc_Imgproc_createLineSegmentDetector_15", "Java_org_opencv_ml_EM_getClustersNumber_10", "Java_org_opencv_core_Core_mulSpectrums_11", "_ZN2cv4cuda6GpuMat19setDefaultAllocatorEPNS1_9AllocatorE", "_ZNK2cv3ogl9Texture2D5texIdEv", "Java_org_opencv_ml_SVMSGD_getWeights_10", "Java_org_opencv_core_Core_eigen_10", "_ZN2cv5utils22dumpInputArrayOfArraysERKNS_11_InputArrayE", "_ZN2cv13HOGDescriptor4readERNS_8FileNodeE", "_ZN2cv9arcLengthERKNS_11_InputArrayEb", "Java_org_opencv_core_Mat_nGetF", "_ZTv0_n72_NK2cv5BRISK14getDefaultNameEv", "_ZN2cv16FileNodeIteratorC2Ev", "_ZN2cv11colorChangeERKNS_11_InputArrayES2_RKNS_12_OutputArrayEfff", "_ZSt18uncaught_exceptionv", "cvSetNumThreads", "Java_org_opencv_imgproc_Imgproc_drawContours_11", "Java_org_opencv_imgproc_Imgproc_Canny_13", "Java_org_opencv_photo_MergeMertens_getSaturationWeight_10", "Java_org_opencv_dnn_Dnn_readNetFromDarknet_10", "_ZNK2cv12MatAllocator4copyEPNS_8UMatDataES2_iPKmS4_S4_S4_S4_b", "_ZNK2cv3ocl6Device22imageFromBufferSupportEv", "Java_org_opencv_video_Video_createBackgroundSubtractorMOG2_13", "Java_org_opencv_videoio_VideoWriter_VideoWriter_14", "Java_org_opencv_videoio_VideoCapture_retrieve_10", "_ZNSt6__ndk18ios_base7copyfmtERKS0_", "_ZNSt6__ndk114collate_bynameIcED2Ev", "_ZNK2cv3ocl6Device3ptrEv", "_ZNK2cv11_InputArray8sameSizeERKS0_", "_ZNK2cv4cuda10DeviceInfo21texturePitchAlignmentEv", "Java_org_opencv_calib3d_Calib3d_composeRT_13", "Java_org_opencv_imgproc_Imgproc_HoughLinesP_11", "Java_org_opencv_video_BackgroundSubtractorMOG2_setVarInit_10", "Java_org_opencv_core_Core_borderInterpolate_10", "_ZNSt6__ndk121recursive_timed_mutexC1Ev", "_ZN2cv16ParallelLoopBodyD2Ev", "_ZN2cv10softdoubleC2El", "Java_org_opencv_calib3d_Calib3d_composeRT_11", "cvDistTransform", "_ZN2cv11createCLAHEEdNS_5Size_IiEE", "cvSeqPushMulti", "Java_org_opencv_calib3d_Calib3d_solveP3P_10", "Java_org_opencv_core_Core_cartToPolar_10", "_ZN3tbb8internal8governor14init_schedulerEimb", "_ZNK2cv3ocl7Context3ptrEv", "_ZN2cvmlERKNS_7MatExprES2_", "_ZN2cv11FileStorageD1Ev", "_ZN2cv15KeyPointsFilter10retainBestERNSt6__ndk16vectorINS_8KeyPointENS1_9allocatorIS3_EEEEi", "cvGEMM", "_ZN2cv17getWindowPropertyERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi", "_ZN2cv11FileStorage19releaseAndGetStringEv", "Java_org_opencv_video_BackgroundSubtractorKNN_getHistory_10", "Java_org_opencv_core_Core_PCACompute2_10", "Java_org_opencv_dnn_Dnn_NMSBoxes_14", "_ZN2cv4cuda24printShortCudaDeviceInfoEi", "Java_org_opencv_core_Core_hconcat_10", "_ZN2cv3LDAC2ERKNS_11_InputArrayES3_i", "Java_org_opencv_video_SparseOpticalFlow_calc_10", "_ZNK3tbb13improper_lock4whatEv", "Java_org_opencv_imgproc_Imgproc_integral2_10", "_ZN2cv5utils30getConfigurationParameterSizeTEPKcm", "Java_org_opencv_video_SparsePyrLKOpticalFlow_setWinSize_10", "Java_org_opencv_ml_LogisticRegression_getIterations_10", "_ZN2cv9ExceptionD1Ev", "Java_org_opencv_features2d_AKAZE_getNOctaveLayers_10", "_ZN2cv15calcCovarMatrixEPKNS_3MatEiRS0_S3_ii", "_ZNK2cv8FileNode7readRawERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPvm", "Java_org_opencv_features2d_DescriptorMatcher_knnMatch_14", "_ZN2cv17CascadeClassifier4readERKNS_8FileNodeE", "Java_org_opencv_features2d_KAZE_create_14", "_ZN2cv3hal5mul8uEPKhmS2_mPhmiiPv", "_ZNK2cv4cuda10DeviceInfo11maxGridSizeEv", "Java_org_opencv_calib3d_Calib3d_estimateAffine2D_13", "_ZNKSt6__ndk18numpunctIcE11do_groupingEv", "_ZNK2cv9Feature2D14descriptorSizeEv", "_ZN2cv3ocl6DeviceC1Ev", "Java_org_opencv_core_Mat_n_1checkVector__JIIZ", "Java_org_opencv_features2d_Params_set_1maxCircularity_10", "_ZNK2cv3ocl12PlatformInfo12deviceNumberEv", "cvCreateTrackbar", "Java_org_opencv_ml_SVMSGD_delete", "_ZNKSt6__ndk115__codecvt_utf16IwLb0EE16do_always_noconvEv", "Java_org_opencv_video_Video_CamShift_10", "cvInitImageHeader", "Java_org_opencv_calib3d_Calib3d_undistortPoints_10", "_ZN2cv4globENSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS0_6vectorIS6_NS4_IS6_EEEEb", "_ZN2cv3hal5DCT2D6createEiiii", "_ZN2cv5flann16SavedIndexParamsC1ERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN2cv8internal15IntrinsicParamsaSERKNS_3MatE", "_ZN3tbb18captured_exception7destroyEv", "cvFindGraphEdgeByPtr", "Java_org_opencv_dnn_Dnn_NMSBoxesRotated_10", "_ZNKSt6__ndk114__codecvt_utf8IDiE5do_inER9mbstate_tPKcS5_RS5_PDiS7_RS7_", "_ZNK2cv9softfloatmlERKS0_", "_ZNK2cv3ocl6Device20nativeVectorWidthIntEv", "_ZNK2cv12_OutputArray14createSameSizeERKNS_11_InputArrayEi", "_ZN2cv4sqrtERKNS_9softfloatE", "_ZNKSt6__ndk120__codecvt_utf8_utf16IwE13do_max_lengthEv", "Java_org_opencv_dnn_Layer_delete", "_ZN2cv3ogl6Buffer7releaseEv", "_ZN2cv17AVIWriteContainerD1Ev", "_ZN2cv10softdoubleC1Em", "_ZN2cv16MatConstIterator4seekElb", "cvFlushSeqWriter", "Java_org_opencv_imgproc_GeneralizedHough_setTemplate_12", "Java_org_opencv_ml_KNearest_getDefaultK_10", "Java_org_opencv_objdetect_HOGDescriptor_load_10", "Java_org_opencv_imgproc_Imgproc_EMD_13", "_ZNKSt6__ndk120__codecvt_utf8_utf16IDiE5do_inER9mbstate_tPKcS5_RS5_PDiS7_RS7_", "Java_org_opencv_imgcodecs_Imgcodecs_imdecode_10", "_ZNSt6__ndk112ctype_bynameIcEC2EPKcm", "_ZN2cv10PCAProjectERKNS_11_InputArrayES2_S2_RKNS_12_OutputArrayE"], "allstrings": ["Mat::n_1Mat__III()", "Mat::n_1Mat__DDI()", "Mat::n_1Mat__IIIDDDD()", "Mat::n_1Mat__DDIDDDD()", "Mat::n_1Mat__JIIII()", "Mat::n_1Mat__JII()", "Mat::n_1adjustROI()", "Mat::n_1assignTo__JJI()", "Mat::n_1assignTo__JJ()", "Mat::n_1checkVector__JIIZ()", "Mat::n_1checkVector__JII()", "Mat::n_1checkVector__JI()", "Mat::n_1clone()", "Mat::n_1col()", "Mat::n_1colRange()", "Mat::n_1convertTo__JJIDD()", "Mat::n_1convertTo__JJID()", "Mat::n_1convertTo__JJI()", "Mat::n_1copyTo__JJ()", "Mat::n_1copyTo__JJJ()", "Mat::n_1create__JIII()", "Mat::n_1create__JDDI()", "Mat::n_1cross()", "Mat::n_1diag__JI()", "Mat::n_1diag__J()", "Mat::n_1dot()", "Mat::n_1eye__III()", "Mat::n_1eye__DDI()", "Mat::n_1inv__JI()", "Mat::n_1inv__J()", "core::locateROI_10()", "Mat::n_1mul__JJD()", "Mat::n_1mul__JJ()", "Mat::n_1ones__III()", "Mat::n_1ones__DDI()", "Mat::n_1push_1back()", "Mat::n_1release()", "Mat::n_1reshape__JII()", "Mat::n_1reshape__JI()", "Mat::n_1reshape_11", "Mat::n_1row()", "Mat::n_1rowRange()", "Mat::n_1setTo__JDDDD()", "Mat::n_1setTo__JDDDDJ()", "Mat::n_1setTo__JJJ()", "Mat::n_1setTo__JJ()", "Mat::n_1size()", "Mat::n_1submat_1rr()", "Mat::n_1submat()", "Mat::n_1t()", "Mat::n_1zeros__III()", "Mat::n_1zeros__DDI()", "Mat::nPutD()", "Mat::nGet()", "Mat::nDump()", "Mat::nPutB()", "Mat::nPutS()", "Mat::nPutI()", "Mat::nPutF()", "Mat::nGetB()", "Mat::nGetS()", "Mat::nGetI()", "Mat::nGetF()", "Mat::nGetD()", "total() == 0 || data != NULL", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/mat.inl.hpp", "Step must be a multiple of esz1", "std::exception", "cv::Exception", "org/opencv/core/CvException", "java/lang/Exception", "org.opencv.core.Mat", "%s caught %s", "allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size", "java/util/ArrayList", "<init>", "(I)V", "(Ljava/lang/Object;)Z", "(I)Ljava/lang/Object;", "core::mean_10()", "core::mean_11()", "core::sumElems_10()", "core::trace_10()", "core::getBuildInformation_10()", "core::getHardwareFeatureName_10()", "core::getVersionString_10()", "core::getIppVersion_10()", "core::findFile_10()", "core::findFile_11()", "core::findFile_12()", "core::findFileOrKeep_10()", "core::findFileOrKeep_11()", "core::checkRange_10()", "core::checkRange_11()", "core::checkRange_12()", "core::checkRange_14()", "core::eigen_10()", "core::eigen_11()", "core::solve_10()", "core::solve_11()", "core::useIPP_10()", "core::useIPP_1NotExact_10()", "core::Mahalanobis_10()", "core::PSNR_10()", "core::PSNR_11()", "core::determinant_10()", "core::getTickFrequency_10()", "core::invert_10()", "core::invert_11()", "core::kmeans_10()", "core::kmeans_11()", "core::norm_10()", "core::norm_11()", "core::norm_12()", "core::norm_13()", "core::norm_14()", "core::norm_15()", "core::solvePoly_10()", "core::solvePoly_11()", "core::cubeRoot_10()", "core::fastAtan2_10()", "core::borderInterpolate_10()", "core::countNonZero_10()", "core::getNumThreads_10()", "core::getNumberOfCPUs_10()", "core::getOptimalDFTSize_10()", "core::getThreadNum_10()", "core::getVersionMajor_10()", "core::getVersionMinor_10()", "core::getVersionRevision_10()", "core::solveCubic_10()", "core::getCPUTickCount_10()", "core::getTickCount_10()", "core::LUT_10()", "core::PCABackProject_10()", "core::PCACompute2_10()", "core::PCACompute2_11()", "core::PCACompute2_12()", "core::PCACompute_10()", "core::PCACompute_11()", "core::PCACompute_12()", "core::PCAProject_10()", "core::SVBackSubst_10()", "core::SVDecomp_10()", "core::SVDecomp_11()", "core::absdiff_10()", "core::absdiff_11()", "core::add_10()", "core::add_11()", "core::add_12()", "core::add_13()", "core::add_14()", "core::add_15()", "core::addWeighted_10()", "core::addWeighted_11()", "core::batchDistance_10()", "core::batchDistance_11()", "core::batchDistance_12()", "core::batchDistance_13()", "core::batchDistance_14()", "core::batchDistance_15()", "core::bitwise_1and_10()", "core::bitwise_1and_11()", "core::bitwise_1not_10()", "core::bitwise_1not_11()", "core::bitwise_1or_10()", "core::bitwise_1or_11()", "core::bitwise_1xor_10()", "core::bitwise_1xor_11()", "core::calcCovarMatrix_10()", "core::calcCovarMatrix_11()", "core::cartToPolar_10()", "core::cartToPolar_11()", "core::compare_10()", "core::compare_11()", "core::completeSymm_10()", "core::completeSymm_11()", "core::convertFp16_10()", "core::convertScaleAbs_10()", "core::convertScaleAbs_11()", "core::convertScaleAbs_12()", "core::copyMakeBorder_10()", "core::copyMakeBorder_11()", "core::copyTo_10()", "core::dct_10()", "core::dct_11()", "core::dft_10()", "core::dft_11()", "core::dft_12()", "core::divide_10()", "core::divide_11()", "core::divide_12()", "core::divide_13()", "core::divide_14()", "core::divide_15()", "core::divide_16()", "core::divide_17()", "core::eigenNonSymmetric_10()", "core::exp_10()", "core::extractChannel_10()", "core::findNonZero_10()", "core::flip_10()", "core::gemm_10()", "core::gemm_11()", "core::hconcat_10()", "core::idct_10()", "core::idct_11()", "core::idft_10()", "core::idft_11()", "core::idft_12()", "core::inRange_10()", "core::insertChannel_10()", "core::log_10()", "core::magnitude_10()", "core::max_10()", "core::max_11()", "core::meanStdDev_10()", "core::meanStdDev_11()", "core::merge_10()", "core::min_10()", "core::min_11()", "core::mixChannels_10()", "core::mulSpectrums_10()", "core::mulSpectrums_11()", "core::mulTransposed_10()", "core::mulTransposed_11()", "core::mulTransposed_12()", "core::mulTransposed_13()", "core::multiply_10()", "core::multiply_11()", "core::multiply_12()", "core::multiply_13()", "core::multiply_14()", "core::multiply_15()", "core::normalize_10()", "core::normalize_11()", "core::normalize_12()", "core::normalize_13()", "core::normalize_14()", "core::normalize_15()", "core::patchNaNs_10()", "core::patchNaNs_11()", "core::perspectiveTransform_10()", "core::phase_10()", "core::phase_11()", "core::polarToCart_10()", "core::polarToCart_11()", "core::pow_10()", "core::randShuffle_10()", "core::randShuffle_12()", "core::randn_10()", "core::randu_10()", "core::reduce_10()", "core::reduce_11()", "core::repeat_10()", "core::rotate_10()", "core::scaleAdd_10()", "core::setErrorVerbosity_10()", "core::setIdentity_10()", "core::setIdentity_11()", "core::setNumThreads_10()", "core::setRNGSeed_10()", "core::sort_10()", "core::sortIdx_10()", "core::split_10()", "core::sqrt_10()", "core::subtract_10()", "core::subtract_11()", "core::subtract_12()", "core::subtract_13()", "core::subtract_14()", "core::subtract_15()", "core::transform_10()", "core::transpose_10()", "core::vconcat_10()", "core::setUseIPP_10()", "core::setUseIPP_1NotExact_10()", "core::addSamplesDataSearchPath_10()", "core::addSamplesDataSearchSubDirectory_10()", "core::getDefaultName_10()", "core::empty_10()", "core::clear_10()", "core::save_10()", "core::TickMeter_10()", "core::getTimeMicro_10()", "core::getTimeMilli_10()", "core::getTimeSec_10()", "core::start_10()", "core::stop_10()", "imgproc::getAffineTransform_10()", "imgproc::getGaborKernel_10()", "imgproc::getGaborKernel_11()", "imgproc::getGaborKernel_12()", "imgproc::getGaussianKernel_10()", "imgproc::getGaussianKernel_11()", "imgproc::getPerspectiveTransform_10()", "imgproc::getPerspectiveTransform_11()", "imgproc::getRotationMatrix2D_10()", "imgproc::getStructuringElement_10()", "imgproc::getStructuringElement_11()", "imgproc::moments_10()", "imgproc::moments_11()", "imgproc::phaseCorrelate_10()", "imgproc::phaseCorrelate_11()", "imgproc::phaseCorrelate_12()", "imgproc::createCLAHE_10()", "imgproc::createCLAHE_11()", "imgproc::createCLAHE_12()", "imgproc::createLineSegmentDetector_10()", "imgproc::createLineSegmentDetector_11()", "imgproc::createLineSegmentDetector_12()", "imgproc::createLineSegmentDetector_13()", "imgproc::createLineSegmentDetector_14()", "imgproc::createLineSegmentDetector_15()", "imgproc::createLineSegmentDetector_16()", "imgproc::createLineSegmentDetector_17()", "imgproc::createLineSegmentDetector_18()", "imgproc::boundingRect_10()", "imgproc::fitEllipse_10()", "imgproc::fitEllipseAMS_10()", "imgproc::fitEllipseDirect_10()", "imgproc::minAreaRect_10()", "imgproc::clipLine_10()", "imgproc::isContourConvex_10()", "imgproc::arcLength_10()", "imgproc::compareHist_10()", "imgproc::contourArea_10()", "imgproc::contourArea_11()", "imgproc::getFontScaleFromHeight_10()", "imgproc::getFontScaleFromHeight_11()", "imgproc::matchShapes_10()", "imgproc::minEnclosingTriangle_10()", "imgproc::pointPolygonTest_10()", "imgproc::threshold_10()", "imgproc::intersectConvexConvex_10()", "imgproc::intersectConvexConvex_11()", "imgproc::EMD_10()", "imgproc::EMD_11()", "imgproc::EMD_13()", "imgproc::connectedComponentsWithAlgorithm_10()", "imgproc::connectedComponents_10()", "imgproc::connectedComponents_11()", "imgproc::connectedComponents_12()", "imgproc::connectedComponentsWithStatsWithAlgorithm_10()", "imgproc::connectedComponentsWithStats_10()", "imgproc::connectedComponentsWithStats_11()", "imgproc::connectedComponentsWithStats_12()", "imgproc::floodFill_10()", "imgproc::floodFill_11()", "imgproc::floodFill_12()", "imgproc::floodFill_13()", "imgproc::floodFill_14()", "imgproc::rotatedRectangleIntersection_10()", "imgproc::Canny_10()", "imgproc::Canny_11()", "imgproc::Canny_12()", "imgproc::Canny_13()", "imgproc::Canny_14()", "imgproc::GaussianBlur_10()", "imgproc::GaussianBlur_11()", "imgproc::GaussianBlur_12()", "imgproc::HoughCircles_10()", "imgproc::HoughCircles_11()", "imgproc::HoughCircles_12()", "imgproc::HoughCircles_13()", "imgproc::HoughCircles_14()", "imgproc::HoughLines_10()", "imgproc::HoughLines_11()", "imgproc::HoughLines_12()", "imgproc::HoughLines_13()", "imgproc::HoughLines_14()", "imgproc::HoughLinesP_10()", "imgproc::HoughLinesP_11()", "imgproc::HoughLinesP_12()", "imgproc::HoughLinesPointSet_10()", "imgproc::HuMoments_10()", "imgproc::Laplacian_10()", "imgproc::Laplacian_11()", "imgproc::Laplacian_12()", "imgproc::Laplacian_13()", "imgproc::Laplacian_14()", "imgproc::Scharr_10()", "imgproc::Scharr_11()", "imgproc::Scharr_12()", "imgproc::Scharr_13()", "imgproc::Sobel_10()", "imgproc::Sobel_11()", "imgproc::Sobel_12()", "imgproc::Sobel_13()", "imgproc::Sobel_14()", "imgproc::accumulate_10()", "imgproc::accumulate_11()", "imgproc::accumulateProduct_10()", "imgproc::accumulateProduct_11()", "imgproc::accumulateSquare_10()", "imgproc::accumulateSquare_11()", "imgproc::accumulateWeighted_10()", "imgproc::accumulateWeighted_11()", "imgproc::adaptiveThreshold_10()", "imgproc::applyColorMap_10()", "imgproc::applyColorMap_11()", "imgproc::approxPolyDP_10()", "imgproc::arrowedLine_10()", "imgproc::arrowedLine_11()", "imgproc::arrowedLine_12()", "imgproc::arrowedLine_13()", "imgproc::arrowedLine_14()", "imgproc::bilateralFilter_10()", "imgproc::bilateralFilter_11()", "imgproc::blur_10()", "imgproc::blur_11()", "imgproc::blur_12()", "imgproc::boxFilter_10()", "imgproc::boxFilter_11()", "imgproc::boxFilter_12()", "imgproc::boxFilter_13()", "imgproc::boxPoints_10()", "imgproc::calcBackProject_10()", "imgproc::calcHist_10()", "imgproc::calcHist_11()", "imgproc::circle_10()", "imgproc::circle_11()", "imgproc::circle_12()", "imgproc::circle_13()", "imgproc::convertMaps_10()", "imgproc::convertMaps_11()", "imgproc::convexHull_10()", "imgproc::convexHull_12()", "imgproc::convexityDefects_10()", "imgproc::cornerEigenValsAndVecs_10()", "imgproc::cornerEigenValsAndVecs_11()", "imgproc::cornerHarris_10()", "imgproc::cornerHarris_11()", "imgproc::cornerMinEigenVal_10()", "imgproc::cornerMinEigenVal_11()", "imgproc::cornerMinEigenVal_12()", "imgproc::cornerSubPix_10()", "imgproc::createHanningWindow_10()", "imgproc::cvtColor_10()", "imgproc::cvtColor_11()", "imgproc::cvtColorTwoPlane_10()", "imgproc::demosaicing_10()", "imgproc::demosaicing_11()", "imgproc::dilate_10()", "imgproc::dilate_11()", "imgproc::dilate_12()", "imgproc::dilate_13()", "imgproc::dilate_14()", "imgproc::distanceTransformWithLabels_10()", "imgproc::distanceTransformWithLabels_11()", "imgproc::distanceTransform_10()", "imgproc::distanceTransform_11()", "imgproc::drawContours_10()", "imgproc::drawContours_11()", "imgproc::drawContours_12()", "imgproc::drawContours_13()", "imgproc::drawContours_14()", "imgproc::drawContours_15()", "imgproc::drawMarker_10()", "imgproc::drawMarker_11()", "imgproc::drawMarker_12()", "imgproc::drawMarker_13()", "imgproc::drawMarker_14()", "imgproc::ellipse_10()", "imgproc::ellipse_11()", "imgproc::ellipse_12()", "imgproc::ellipse_13()", "imgproc::ellipse_14()", "imgproc::ellipse_15()", "imgproc::ellipse_16()", "imgproc::ellipse2Poly_10()", "imgproc::equalizeHist_10()", "imgproc::erode_10()", "imgproc::erode_11()", "imgproc::erode_12()", "imgproc::erode_13()", "imgproc::erode_14()", "imgproc::fillConvexPoly_10()", "imgproc::fillConvexPoly_11()", "imgproc::fillConvexPoly_12()", "imgproc::fillPoly_10()", "imgproc::fillPoly_11()", "imgproc::fillPoly_12()", "imgproc::fillPoly_13()", "imgproc::filter2D_10()", "imgproc::filter2D_11()", "imgproc::filter2D_12()", "imgproc::filter2D_13()", "imgproc::findContours_10()", "imgproc::findContours_11()", "imgproc::fitLine_10()", "imgproc::getDerivKernels_10()", "imgproc::getDerivKernels_11()", "imgproc::getDerivKernels_12()", "imgproc::getRectSubPix_10()", "imgproc::getRectSubPix_11()", "imgproc::goodFeaturesToTrack_10()", "imgproc::goodFeaturesToTrack_11()", "imgproc::goodFeaturesToTrack_12()", "imgproc::goodFeaturesToTrack_13()", "imgproc::goodFeaturesToTrack_14()", "imgproc::goodFeaturesToTrack_15()", "imgproc::goodFeaturesToTrack_16()", "imgproc::goodFeaturesToTrack_17()", "imgproc::grabCut_10()", "imgproc::grabCut_11()", "imgproc::integral3_10()", "imgproc::integral3_11()", "imgproc::integral3_12()", "imgproc::integral2_10()", "imgproc::integral2_11()", "imgproc::integral2_12()", "imgproc::integral_10()", "imgproc::integral_11()", "imgproc::invertAffineTransform_10()", "imgproc::line_10()", "imgproc::line_11()", "imgproc::line_12()", "imgproc::line_13()", "imgproc::linearPolar_10()", "imgproc::logPolar_10()", "imgproc::matchTemplate_10()", "imgproc::matchTemplate_11()", "imgproc::medianBlur_10()", "imgproc::minEnclosingCircle_10()", "imgproc::morphologyEx_10()", "imgproc::morphologyEx_11()", "imgproc::morphologyEx_12()", "imgproc::morphologyEx_13()", "imgproc::morphologyEx_14()", "imgproc::polylines_10()", "imgproc::polylines_11()", "imgproc::polylines_12()", "imgproc::polylines_13()", "imgproc::preCornerDetect_10()", "imgproc::preCornerDetect_11()", "imgproc::putText_10()", "imgproc::putText_11()", "imgproc::putText_12()", "imgproc::putText_13()", "imgproc::pyrDown_10()", "imgproc::pyrDown_11()", "imgproc::pyrDown_12()", "imgproc::pyrMeanShiftFiltering_10()", "imgproc::pyrMeanShiftFiltering_11()", "imgproc::pyrMeanShiftFiltering_12()", "imgproc::pyrUp_10()", "imgproc::pyrUp_11()", "imgproc::pyrUp_12()", "imgproc::rectangle_10()", "imgproc::rectangle_11()", "imgproc::rectangle_12()", "imgproc::rectangle_13()", "imgproc::rectangle_14()", "imgproc::rectangle_15()", "imgproc::rectangle_16()", "imgproc::rectangle_17()", "imgproc::remap_10()", "imgproc::remap_11()", "imgproc::remap_12()", "imgproc::resize_10()", "imgproc::resize_11()", "imgproc::resize_12()", "imgproc::resize_13()", "imgproc::sepFilter2D_10()", "imgproc::sepFilter2D_11()", "imgproc::sepFilter2D_12()", "imgproc::sepFilter2D_13()", "imgproc::spatialGradient_10()", "imgproc::spatialGradient_11()", "imgproc::spatialGradient_12()", "imgproc::sqrBoxFilter_10()", "imgproc::sqrBoxFilter_11()", "imgproc::sqrBoxFilter_12()", "imgproc::sqrBoxFilter_13()", "imgproc::warpAffine_10()", "imgproc::warpAffine_11()", "imgproc::warpAffine_12()", "imgproc::warpAffine_13()", "imgproc::warpPerspective_10()", "imgproc::warpPerspective_11()", "imgproc::warpPerspective_12()", "imgproc::warpPerspective_13()", "imgproc::warpPolar_10()", "imgproc::watershed_10()", "imgproc::getTilesGridSize_10()", "imgproc::getClipLimit_10()", "imgproc::apply_10()", "imgproc::collectGarbage_10()", "imgproc::setClipLimit_10()", "imgproc::setTilesGridSize_10()", "imgproc::Subdiv2D_10()", "imgproc::Subdiv2D_11()", "imgproc::getVertex_10()", "imgproc::getVertex_11()", "imgproc::edgeDst_10()", "imgproc::edgeDst_11()", "imgproc::edgeOrg_10()", "imgproc::edgeOrg_11()", "imgproc::findNearest_10()", "imgproc::findNearest_11()", "imgproc::getEdge_10()", "imgproc::insert_10()", "imgproc::locate_10()", "imgproc::nextEdge_10()", "imgproc::rotateEdge_10()", "imgproc::symEdge_10()", "imgproc::getEdgeList_10()", "imgproc::getLeadingEdgeList_10()", "imgproc::getTriangleList_10()", "imgproc::getVoronoiFacetList_10()", "imgproc::initDelaunay_10()", "imgproc::insert_11()", "imgproc::getLevels_10()", "imgproc::getVotesThreshold_10()", "imgproc::setLevels_10()", "imgproc::setVotesThreshold_10()", "imgproc::getDp_10()", "imgproc::getMinDist_10()", "imgproc::getCannyHighThresh_10()", "imgproc::getCannyLowThresh_10()", "imgproc::getMaxBufferSize_10()", "imgproc::detect_10()", "imgproc::detect_11()", "imgproc::detect_12()", "imgproc::detect_13()", "imgproc::setCannyHighThresh_10()", "imgproc::setCannyLowThresh_10()", "imgproc::setDp_10()", "imgproc::setMaxBufferSize_10()", "imgproc::setMinDist_10()", "imgproc::setTemplate_10()", "imgproc::setTemplate_11()", "imgproc::setTemplate_12()", "imgproc::setTemplate_13()", "imgproc::compareSegments_10()", "imgproc::compareSegments_11()", "imgproc::detect_10()", "imgproc::detect_11()", "imgproc::detect_12()", "imgproc::detect_13()", "imgproc::drawSegments_10()", "ml::getMeans_10()", "ml::getWeights_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getTermCriteria_10()", "ml::predict2_10()", "ml::trainE_10()", "ml::trainE_11()", "ml::trainE_12()", "ml::trainE_13()", "ml::trainE_14()", "ml::trainE_15()", "ml::trainEM_10()", "ml::trainEM_11()", "ml::trainEM_12()", "ml::trainEM_13()", "ml::trainM_10()", "ml::trainM_11()", "ml::trainM_12()", "ml::trainM_13()", "ml::predict_10()", "ml::predict_11()", "ml::predict_12()", "ml::getClustersNumber_10()", "ml::getCovarianceMatrixType_10()", "ml::getCovs_10()", "ml::setClustersNumber_10()", "ml::setCovarianceMatrixType_10()", "ml::setTermCriteria_10()", "ml::getClassWeights_10()", "ml::getSupportVectors_10()", "ml::getUncompressedSupportVectors_10()", "ml::getDefaultGridPtr_10()", "ml::create_10()", "ml::load_10()", "ml::getTermCriteria_10()", "ml::trainAuto_10()", "ml::trainAuto_11()", "ml::trainAuto_12()", "ml::trainAuto_13()", "ml::trainAuto_14()", "ml::trainAuto_15()", "ml::trainAuto_16()", "ml::trainAuto_17()", "ml::trainAuto_18()", "ml::getC_10()", "ml::getCoef0_10()", "ml::getDecisionFunction_10()", "ml::getDegree_10()", "ml::getGamma_10()", "ml::getNu_10()", "ml::getP_10()", "ml::getKernelType_10()", "ml::getType_10()", "ml::setC_10()", "ml::setClassWeights_10()", "ml::setCoef0_10()", "ml::setDegree_10()", "ml::setGamma_10()", "ml::setKernel_10()", "ml::setNu_10()", "ml::setP_10()", "ml::setTermCriteria_10()", "ml::setType_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::predictProb_10()", "ml::predictProb_11()", "ml::getCatMap_10()", "ml::getCatOfs_10()", "ml::getClassLabels_10()", "ml::getDefaultSubstValues_10()", "ml::getMissing_10()", "ml::getNormCatResponses_10()", "ml::getResponses_10()", "ml::getSampleWeights_10()", "ml::getSamples_10()", "ml::getSubMatrix_10()", "ml::getSubVector_10()", "ml::getTestNormCatResponses_10()", "ml::getTestResponses_10()", "ml::getTestSampleIdx_10()", "ml::getTestSampleWeights_10()", "ml::getTestSamples_10()", "ml::getTrainNormCatResponses_10()", "ml::getTrainResponses_10()", "ml::getTrainSampleIdx_10()", "ml::getTrainSampleWeights_10()", "ml::getTrainSamples_10()", "ml::getTrainSamples_11()", "ml::getTrainSamples_12()", "ml::getTrainSamples_13()", "ml::getVarIdx_10()", "ml::getVarSymbolFlags_10()", "ml::getVarType_10()", "ml::create_10()", "ml::create_11()", "ml::create_12()", "ml::create_13()", "ml::create_14()", "ml::getCatCount_10()", "ml::getLayout_10()", "ml::getNAllVars_10()", "ml::getNSamples_10()", "ml::getNTestSamples_10()", "ml::getNTrainSamples_10()", "ml::getNVars_10()", "ml::getResponseType_10()", "ml::getNames_10()", "ml::getSample_10()", "ml::getValues_10()", "ml::setTrainTestSplit_10()", "ml::setTrainTestSplit_11()", "ml::setTrainTestSplitRatio_10()", "ml::setTrainTestSplitRatio_11()", "ml::shuffleTrainTest_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getWeightTrimRate_10()", "ml::getBoostType_10()", "ml::getWeakCount_10()", "ml::setBoostType_10()", "ml::setWeakCount_10()", "ml::setWeightTrimRate_10()", "ml::get_1learnt_1thetas_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getTermCriteria_10()", "ml::getLearningRate_10()", "ml::predict_10()", "ml::predict_11()", "ml::predict_12()", "ml::getIterations_10()", "ml::getMiniBatchSize_10()", "ml::getRegularization_10()", "ml::getTrainMethod_10()", "ml::setIterations_10()", "ml::setLearningRate_10()", "ml::setMiniBatchSize_10()", "ml::setRegularization_10()", "ml::setTermCriteria_10()", "ml::setTrainMethod_10()", "ml::create_10()", "ml::create_11()", "ml::create_12()", "ml::create_13()", "ml::create_10()", "ml::getIsClassifier_10()", "ml::findNearest_10()", "ml::findNearest_11()", "ml::findNearest_12()", "ml::getAlgorithmType_10()", "ml::getDefaultK_10()", "ml::getEmax_10()", "ml::setAlgorithmType_10()", "ml::setDefaultK_10()", "ml::setEmax_10()", "ml::setIsClassifier_10()", "ml::getWeights_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getTermCriteria_10()", "ml::getInitialStepSize_10()", "ml::getMarginRegularization_10()", "ml::getShift_10()", "ml::getStepDecreasingPower_10()", "ml::getMarginType_10()", "ml::getSvmsgdType_10()", "ml::setInitialStepSize_10()", "ml::setMarginRegularization_10()", "ml::setMarginType_10()", "ml::setOptimalParameters_10()", "ml::setOptimalParameters_11()", "ml::setOptimalParameters_12()", "ml::setStepDecreasingPower_10()", "ml::setSvmsgdType_10()", "ml::setTermCriteria_10()", "ml::getPriors_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getTruncatePrunedTree_10()", "ml::getUse1SERule_10()", "ml::getUseSurrogates_10()", "ml::getRegressionAccuracy_10()", "ml::getCVFolds_10()", "ml::getMaxCategories_10()", "ml::getMaxDepth_10()", "ml::getMinSampleCount_10()", "ml::setCVFolds_10()", "ml::setMaxCategories_10()", "ml::setMaxDepth_10()", "ml::setMinSampleCount_10()", "ml::setPriors_10()", "ml::setRegressionAccuracy_10()", "ml::setTruncatePrunedTree_10()", "ml::setUse1SERule_10()", "ml::setUseSurrogates_10()", "ml::getLayerSizes_10()", "ml::getWeights_10()", "ml::create_10()", "ml::load_10()", "ml::getTermCriteria_10()", "ml::getAnnealCoolingRatio_10()", "ml::getAnnealFinalT_10()", "ml::getAnnealInitialT_10()", "ml::getBackpropMomentumScale_10()", "ml::getBackpropWeightScale_10()", "ml::getRpropDW0_10()", "ml::getRpropDWMax_10()", "ml::getRpropDWMin_10()", "ml::getRpropDWMinus_10()", "ml::getRpropDWPlus_10()", "ml::getAnnealItePerStep_10()", "ml::getTrainMethod_10()", "ml::setActivationFunction_10()", "ml::setActivationFunction_11()", "ml::setActivationFunction_12()", "ml::setAnnealCoolingRatio_10()", "ml::setAnnealFinalT_10()", "ml::setAnnealInitialT_10()", "ml::setAnnealItePerStep_10()", "ml::setBackpropMomentumScale_10()", "ml::setBackpropWeightScale_10()", "ml::setLayerSizes_10()", "ml::setRpropDW0_10()", "ml::setRpropDWMax_10()", "ml::setRpropDWMin_10()", "ml::setRpropDWMinus_10()", "ml::setRpropDWPlus_10()", "ml::setTermCriteria_10()", "ml::setTrainMethod_10()", "ml::setTrainMethod_11()", "ml::setTrainMethod_12()", "ml::empty_10()", "ml::isClassifier_10()", "ml::isTrained_10()", "ml::train_10()", "ml::train_11()", "ml::train_12()", "ml::calcError_10()", "ml::predict_10()", "ml::predict_11()", "ml::predict_12()", "ml::getVarCount_10()", "ml::getVarImportance_10()", "ml::create_10()", "ml::load_10()", "ml::load_11()", "ml::getTermCriteria_10()", "ml::getCalculateVarImportance_10()", "ml::getActiveVarCount_10()", "ml::getVotes_10()", "ml::setActiveVarCount_10()", "ml::setCalculateVarImportance_10()", "ml::setTermCriteria_10()", "photo::getContrastWeight_10()", "photo::getExposureWeight_10()", "photo::getSaturationWeight_10()", "photo::process_10()", "photo::process_11()", "photo::setContrastWeight_10()", "photo::setExposureWeight_10()", "photo::setSaturationWeight_10()", "photo::getSaturation_10()", "photo::getScale_10()", "photo::setSaturation_10()", "photo::setScale_10()", "photo::getRadiance_10()", "photo::getThreshold_10()", "photo::getMaxIter_10()", "photo::setMaxIter_10()", "photo::setThreshold_10()", "photo::getRandom_10()", "photo::getLambda_10()", "photo::getSamples_10()", "photo::setLambda_10()", "photo::setRandom_10()", "photo::setSamples_10()", "photo::getColorAdaptation_10()", "photo::getIntensity_10()", "photo::getLightAdaptation_10()", "photo::setColorAdaptation_10()", "photo::setIntensity_10()", "photo::setLightAdaptation_10()", "photo::createAlignMTB_10()", "photo::createAlignMTB_11()", "photo::createAlignMTB_12()", "photo::createAlignMTB_13()", "photo::createCalibrateDebevec_10()", "photo::createCalibrateDebevec_11()", "photo::createCalibrateDebevec_12()", "photo::createCalibrateDebevec_13()", "photo::createCalibrateRobertson_10()", "photo::createCalibrateRobertson_11()", "photo::createCalibrateRobertson_12()", "photo::createMergeDebevec_10()", "photo::createMergeMertens_10()", "photo::createMergeMertens_11()", "photo::createMergeMertens_12()", "photo::createMergeMertens_13()", "photo::createMergeRobertson_10()", "photo::createTonemap_10()", "photo::createTonemap_11()", "photo::createTonemapDrago_10()", "photo::createTonemapDrago_11()", "photo::createTonemapDrago_12()", "photo::createTonemapDrago_13()", "photo::createTonemapMantiuk_10()", "photo::createTonemapMantiuk_11()", "photo::createTonemapMantiuk_12()", "photo::createTonemapMantiuk_13()", "photo::createTonemapReinhard_10()", "photo::createTonemapReinhard_11()", "photo::createTonemapReinhard_12()", "photo::createTonemapReinhard_13()", "photo::createTonemapReinhard_14()", "photo::colorChange_10()", "photo::colorChange_11()", "photo::colorChange_12()", "photo::colorChange_13()", "photo::decolor_10()", "photo::denoise_1TVL1_10()", "photo::denoise_1TVL1_11()", "photo::denoise_1TVL1_12()", "photo::detailEnhance_10()", "photo::detailEnhance_11()", "photo::detailEnhance_12()", "photo::edgePreservingFilter_10()", "photo::edgePreservingFilter_11()", "photo::edgePreservingFilter_12()", "photo::edgePreservingFilter_13()", "photo::fastNlMeansDenoising_10()", "photo::fastNlMeansDenoising_11()", "photo::fastNlMeansDenoising_12()", "photo::fastNlMeansDenoising_13()", "photo::fastNlMeansDenoising_14()", "photo::fastNlMeansDenoising_15()", "photo::fastNlMeansDenoising_16()", "photo::fastNlMeansDenoising_17()", "photo::fastNlMeansDenoisingColored_10()", "photo::fastNlMeansDenoisingColored_11()", "photo::fastNlMeansDenoisingColored_12()", "photo::fastNlMeansDenoisingColored_13()", "photo::fastNlMeansDenoisingColored_14()", "photo::fastNlMeansDenoisingColoredMulti_10()", "photo::fastNlMeansDenoisingColoredMulti_11()", "photo::fastNlMeansDenoisingColoredMulti_12()", "photo::fastNlMeansDenoisingColoredMulti_13()", "photo::fastNlMeansDenoisingColoredMulti_14()", "photo::fastNlMeansDenoisingMulti_10()", "photo::fastNlMeansDenoisingMulti_11()", "photo::fastNlMeansDenoisingMulti_12()", "photo::fastNlMeansDenoisingMulti_13()", "photo::fastNlMeansDenoisingMulti_14()", "photo::fastNlMeansDenoisingMulti_15()", "photo::fastNlMeansDenoisingMulti_16()", "photo::fastNlMeansDenoisingMulti_17()", "photo::illuminationChange_10()", "photo::illuminationChange_11()", "photo::illuminationChange_12()", "photo::inpaint_10()", "photo::pencilSketch_10()", "photo::pencilSketch_11()", "photo::pencilSketch_12()", "photo::pencilSketch_13()", "photo::seamlessClone_10()", "photo::stylization_10()", "photo::stylization_11()", "photo::stylization_12()", "photo::textureFlattening_10()", "photo::textureFlattening_11()", "photo::textureFlattening_12()", "photo::textureFlattening_13()", "photo::process_10()", "photo::process_10()", "photo::getBias_10()", "photo::getSaturation_10()", "photo::setBias_10()", "photo::setSaturation_10()", "photo::calculateShift_10()", "photo::getCut_10()", "photo::getExcludeRange_10()", "photo::getMaxBits_10()", "photo::computeBitmaps_10()", "photo::process_10()", "photo::process_11()", "photo::setCut_10()", "photo::setExcludeRange_10()", "photo::setMaxBits_10()", "photo::shiftMat_10()", "photo::process_10()", "photo::process_11()", "photo::process_10()", "photo::process_10()", "photo::process_11()", "photo::getGamma_10()", "photo::process_10()", "photo::setGamma_10()", "dnn::outputNameToIndex_10()", "dnn::finalize_10()", "dnn::run_10()", "dnn::get_1blobs_10()", "dnn::set_1blobs_10()", "dnn::get_1name_10()", "dnn::get_1type_10()", "dnn::DictValue_10()", "dnn::DictValue_11()", "dnn::DictValue_12()", "dnn::getStringValue_10()", "dnn::getStringValue_11()", "dnn::getRealValue_10()", "dnn::getRealValue_11()", "dnn::getIntValue_10()", "dnn::getIntValue_11()", "dnn::blobFromImage_10()", "dnn::blobFromImage_11()", "dnn::blobFromImage_12()", "dnn::blobFromImage_13()", "dnn::blobFromImage_14()", "dnn::blobFromImage_15()", "dnn::blobFromImage_16()", "dnn::blobFromImages_10()", "dnn::blobFromImages_11()", "dnn::blobFromImages_12()", "dnn::blobFromImages_13()", "dnn::blobFromImages_14()", "dnn::blobFromImages_15()", "dnn::blobFromImages_16()", "dnn::readTensorFromONNX_10()", "dnn::readTorchBlob_10()", "dnn::readTorchBlob_11()", "dnn::readNet_10()", "dnn::readNet_11()", "dnn::readNet_12()", "dnn::readNet_13()", "dnn::readNet_14()", "dnn::readNetFromCaffe_10()", "dnn::readNetFromCaffe_11()", "dnn::readNetFromCaffe_12()", "dnn::readNetFromCaffe_13()", "dnn::readNetFromDarknet_10()", "dnn::readNetFromDarknet_11()", "dnn::readNetFromDarknet_12()", "dnn::readNetFromDarknet_13()", "dnn::readNetFromModelOptimizer_10()", "dnn::readNetFromONNX_10()", "dnn::readNetFromTensorflow_10()", "dnn::readNetFromTensorflow_11()", "dnn::readNetFromTensorflow_12()", "dnn::readNetFromTensorflow_13()", "dnn::readNetFromTorch_10()", "dnn::readNetFromTorch_11()", "dnn::readNetFromTorch_12()", "dnn::NMSBoxes_10()", "dnn::NMSBoxes_11()", "dnn::NMSBoxes_12()", "dnn::NMSBoxes_13()", "dnn::NMSBoxes_14()", "dnn::NMSBoxes_15()", "dnn::NMSBoxesRotated_10()", "dnn::NMSBoxesRotated_11()", "dnn::NMSBoxesRotated_12()", "dnn::imagesFromBlob_10()", "dnn::resetMyriadDevice_10()", "dnn::shrinkCaffeModel_10()", "dnn::shrinkCaffeModel_11()", "dnn::writeTextGraph_10()", "dnn::Net_10()", "dnn::forward_10()", "dnn::forward_11()", "dnn::getParam_10()", "dnn::getParam_11()", "dnn::readFromModelOptimizer_10()", "dnn::getLayer_10()", "dnn::empty_10()", "dnn::getLayerId_10()", "dnn::getLayersCount_10()", "dnn::getFLOPS_10()", "dnn::getFLOPS_11()", "dnn::getFLOPS_12()", "dnn::getFLOPS_13()", "dnn::getPerfProfile_10()", "dnn::getLayerNames_10()", "dnn::getUnconnectedOutLayersNames_10()", "dnn::getUnconnectedOutLayers_10()", "dnn::connect_10()", "dnn::enableFusion_10()", "dnn::forward_12()", "dnn::forward_13()", "dnn::forward_14()", "dnn::getLayerTypes_10()", "dnn::getMemoryConsumption_10()", "dnn::getMemoryConsumption_11()", "dnn::getMemoryConsumption_12()", "dnn::setHalideScheduler_10()", "dnn::setInput_10()", "dnn::setInput_11()", "dnn::setInput_12()", "dnn::setInput_13()", "dnn::setInputsNames_10()", "dnn::setParam_10()", "dnn::setPreferableBackend_10()", "dnn::setPreferableTarget_10()", "imgcodecs::imdecode_10()", "imgcodecs::imread_10()", "imgcodecs::imread_11()", "imgcodecs::haveImageReader_10()", "imgcodecs::haveImageWriter_10()", "imgcodecs::imencode_10()", "imgcodecs::imencode_11()", "imgcodecs::imreadmulti_10()", "imgcodecs::imreadmulti_11()", "imgcodecs::imwrite_10()", "imgcodecs::imwrite_11()", "videoio::VideoWriter_10()", "videoio::VideoWriter_11()", "videoio::VideoWriter_12()", "videoio::VideoWriter_13()", "videoio::VideoWriter_14()", "videoio::getBackendName_10()", "videoio::isOpened_10()", "videoio::open_10()", "videoio::open_11()", "videoio::open_12()", "videoio::open_13()", "videoio::set_10()", "videoio::get_10()", "videoio::fourcc_10()", "videoio::release_10()", "videoio::write_10()", "videoio::getBackendName_10()", "videoio::VideoCapture_10()", "videoio::VideoCapture_11()", "videoio::VideoCapture_12()", "videoio::VideoCapture_13()", "videoio::VideoCapture_14()", "videoio::getBackendName_10()", "videoio::grab_10()", "videoio::isOpened_10()", "videoio::open_10()", "videoio::open_11()", "videoio::open_12()", "videoio::open_13()", "videoio::read_10()", "videoio::retrieve_10()", "videoio::retrieve_11()", "videoio::set_10()", "videoio::get_10()", "videoio::release_10()", "features2d::getVocabulary_10()", "features2d::descriptorSize_10()", "features2d::descriptorType_10()", "features2d::compute_10()", "features2d::setVocabulary_10()", "features2d::getType_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::getDefaultName_10()", "features2d::getNonmaxSuppression_10()", "features2d::getThreshold_10()", "features2d::setNonmaxSuppression_10()", "features2d::setThreshold_10()", "features2d::setType_10()", "features2d::getDefaultName_10()", "features2d::empty_10()", "features2d::defaultNorm_10()", "features2d::descriptorSize_10()", "features2d::descriptorType_10()", "features2d::compute_10()", "features2d::compute_11()", "features2d::detect_10()", "features2d::detect_11()", "features2d::detect_12()", "features2d::detect_13()", "features2d::detectAndCompute_10()", "features2d::detectAndCompute_11()", "features2d::read_10()", "features2d::write_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::create_17()", "features2d::create_18()", "features2d::create_19()", "features2d::create_110()", "features2d::create_111()", "features2d::getDefaultName_10()", "features2d::getOctaves_10()", "features2d::getThreshold_10()", "features2d::setOctaves_10()", "features2d::setThreshold_10()", "features2d::BFMatcher_10()", "features2d::BFMatcher_11()", "features2d::BFMatcher_12()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::getType_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::getDefaultName_10()", "features2d::getNonmaxSuppression_10()", "features2d::getThreshold_10()", "features2d::setNonmaxSuppression_10()", "features2d::setThreshold_10()", "features2d::setType_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::create_17()", "features2d::create_18()", "features2d::create_19()", "features2d::getDefaultName_10()", "features2d::getHarrisDetector_10()", "features2d::getK_10()", "features2d::getMinDistance_10()", "features2d::getQualityLevel_10()", "features2d::getBlockSize_10()", "features2d::getMaxFeatures_10()", "features2d::setBlockSize_10()", "features2d::setHarrisDetector_10()", "features2d::setK_10()", "features2d::setMaxFeatures_10()", "features2d::setMinDistance_10()", "features2d::setQualityLevel_10()", "features2d::clone_10()", "features2d::clone_11()", "features2d::create_10()", "features2d::create_11()", "features2d::empty_10()", "features2d::isMaskSupported_10()", "features2d::getTrainDescriptors_10()", "features2d::add_10()", "features2d::clear_10()", "features2d::knnMatch_10()", "features2d::knnMatch_11()", "features2d::knnMatch_12()", "features2d::knnMatch_13()", "features2d::knnMatch_14()", "features2d::knnMatch_15()", "features2d::match_10()", "features2d::match_11()", "features2d::match_12()", "features2d::match_13()", "features2d::radiusMatch_10()", "features2d::radiusMatch_11()", "features2d::radiusMatch_12()", "features2d::radiusMatch_13()", "features2d::radiusMatch_14()", "features2d::radiusMatch_15()", "features2d::read_10()", "features2d::train_10()", "features2d::write_10()", "features2d::getDiffusivity_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::getDefaultName_10()", "features2d::getExtended_10()", "features2d::getUpright_10()", "features2d::getThreshold_10()", "features2d::getNOctaveLayers_10()", "features2d::getNOctaves_10()", "features2d::setDiffusivity_10()", "features2d::setExtended_10()", "features2d::setNOctaveLayers_10()", "features2d::setNOctaves_10()", "features2d::setThreshold_10()", "features2d::setUpright_10()", "features2d::drawKeypoints_10()", "features2d::drawKeypoints_11()", "features2d::drawKeypoints_12()", "features2d::drawMatches_10()", "features2d::drawMatches_11()", "features2d::drawMatches_12()", "features2d::drawMatches_13()", "features2d::drawMatches_14()", "features2d::drawMatchesKnn_10()", "features2d::drawMatchesKnn_11()", "features2d::drawMatchesKnn_12()", "features2d::drawMatchesKnn_13()", "features2d::drawMatchesKnn_14()", "features2d::getDescriptorType_10()", "features2d::getDiffusivity_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::create_17()", "features2d::getDefaultName_10()", "features2d::getThreshold_10()", "features2d::getDescriptorChannels_10()", "features2d::getDescriptorSize_10()", "features2d::getNOctaveLayers_10()", "features2d::getNOctaves_10()", "features2d::setDescriptorChannels_10()", "features2d::setDescriptorSize_10()", "features2d::setDescriptorType_10()", "features2d::setDiffusivity_10()", "features2d::setNOctaveLayers_10()", "features2d::setNOctaves_10()", "features2d::setThreshold_10()", "features2d::Params_10()", "features2d::cluster_10()", "features2d::cluster_11()", "features2d::descriptorsCount_10()", "features2d::getDescriptors_10()", "features2d::add_10()", "features2d::clear_10()", "features2d::getScoreType_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::create_17()", "features2d::create_18()", "features2d::create_19()", "features2d::getDefaultName_10()", "features2d::getScaleFactor_10()", "features2d::getEdgeThreshold_10()", "features2d::getFastThreshold_10()", "features2d::getFirstLevel_10()", "features2d::getMaxFeatures_10()", "features2d::getNLevels_10()", "features2d::getPatchSize_10()", "features2d::getWTA_1K_10()", "features2d::setEdgeThreshold_10()", "features2d::setFastThreshold_10()", "features2d::setFirstLevel_10()", "features2d::setMaxFeatures_10()", "features2d::setNLevels_10()", "features2d::setPatchSize_10()", "features2d::setScaleFactor_10()", "features2d::setScoreType_10()", "features2d::setWTA_1K_10()", "features2d::create_10()", "features2d::create_11()", "features2d::create_12()", "features2d::create_13()", "features2d::create_14()", "features2d::create_15()", "features2d::create_16()", "features2d::create_17()", "features2d::create_18()", "features2d::create_19()", "features2d::getDefaultName_10()", "features2d::getPass2Only_10()", "features2d::getDelta_10()", "features2d::getMaxArea_10()", "features2d::getMinArea_10()", "features2d::detectRegions_10()", "features2d::setDelta_10()", "features2d::setMaxArea_10()", "features2d::setMinArea_10()", "features2d::setPass2Only_10()", "features2d::BOWKMeansTrainer_10()", "features2d::BOWKMeansTrainer_11()", "features2d::BOWKMeansTrainer_12()", "features2d::BOWKMeansTrainer_13()", "features2d::cluster_10()", "features2d::cluster_11()", "features2d::FlannBasedMatcher_10()", "features2d::create_10()", "calib3d::create_10()", "calib3d::create_11()", "calib3d::create_12()", "calib3d::create_13()", "calib3d::create_14()", "calib3d::create_15()", "calib3d::create_16()", "calib3d::create_17()", "calib3d::create_18()", "calib3d::create_19()", "calib3d::create_110()", "calib3d::create_111()", "calib3d::getMode_10()", "calib3d::getP1_10()", "calib3d::getP2_10()", "calib3d::getPreFilterCap_10()", "calib3d::getUniquenessRatio_10()", "calib3d::setMode_10()", "calib3d::setP1_10()", "calib3d::setP2_10()", "calib3d::setPreFilterCap_10()", "calib3d::setUniquenessRatio_10()", "calib3d::create_10()", "calib3d::create_11()", "calib3d::create_12()", "calib3d::getROI1_10()", "calib3d::getROI2_10()", "calib3d::getPreFilterCap_10()", "calib3d::getPreFilterSize_10()", "calib3d::getPreFilterType_10()", "calib3d::getSmallerBlockSize_10()", "calib3d::getTextureThreshold_10()", "calib3d::getUniquenessRatio_10()", "calib3d::setPreFilterCap_10()", "calib3d::setPreFilterSize_10()", "calib3d::setPreFilterType_10()", "calib3d::setROI1_10()", "calib3d::setROI2_10()", "calib3d::setSmallerBlockSize_10()", "calib3d::setTextureThreshold_10()", "calib3d::setUniquenessRatio_10()", "calib3d::getBlockSize_10()", "calib3d::getDisp12MaxDiff_10()", "calib3d::getMinDisparity_10()", "calib3d::getNumDisparities_10()", "calib3d::getSpeckleRange_10()", "calib3d::getSpeckleWindowSize_10()", "calib3d::compute_10()", "calib3d::setBlockSize_10()", "calib3d::setDisp12MaxDiff_10()", "calib3d::setMinDisparity_10()", "calib3d::setNumDisparities_10()", "calib3d::setSpeckleRange_10()", "calib3d::setSpeckleWindowSize_10()", "calib3d::estimateAffine2D_10()", "calib3d::estimateAffine2D_11()", "calib3d::estimateAffine2D_12()", "calib3d::estimateAffine2D_13()", "calib3d::estimateAffine2D_14()", "calib3d::estimateAffine2D_15()", "calib3d::estimateAffine2D_16()", "calib3d::estimateAffinePartial2D_10()", "calib3d::estimateAffinePartial2D_11()", "calib3d::estimateAffinePartial2D_12()", "calib3d::estimateAffinePartial2D_13()", "calib3d::estimateAffinePartial2D_14()", "calib3d::estimateAffinePartial2D_15()", "calib3d::estimateAffinePartial2D_16()", "calib3d::findEssentialMat_10()", "calib3d::findEssentialMat_11()", "calib3d::findEssentialMat_12()", "calib3d::findEssentialMat_13()", "calib3d::findEssentialMat_14()", "calib3d::findEssentialMat_15()", "calib3d::findEssentialMat_16()", "calib3d::findEssentialMat_17()", "calib3d::findEssentialMat_18()", "calib3d::findEssentialMat_19()", "calib3d::findEssentialMat_110()", "calib3d::findEssentialMat_111()", "calib3d::findFundamentalMat_10()", "calib3d::findFundamentalMat_11()", "calib3d::findFundamentalMat_12()", "calib3d::findFundamentalMat_13()", "calib3d::findFundamentalMat_14()", "calib3d::findHomography_10()", "calib3d::findHomography_11()", "calib3d::findHomography_12()", "calib3d::findHomography_13()", "calib3d::findHomography_14()", "calib3d::findHomography_15()", "calib3d::getDefaultNewCameraMatrix_10()", "calib3d::getDefaultNewCameraMatrix_11()", "calib3d::getDefaultNewCameraMatrix_12()", "calib3d::getOptimalNewCameraMatrix_10()", "calib3d::getOptimalNewCameraMatrix_11()", "calib3d::getOptimalNewCameraMatrix_12()", "calib3d::getOptimalNewCameraMatrix_13()", "calib3d::initCameraMatrix2D_10()", "calib3d::initCameraMatrix2D_11()", "calib3d::getValidDisparityROI_10()", "calib3d::RQDecomp3x3_10()", "calib3d::RQDecomp3x3_11()", "calib3d::RQDecomp3x3_12()", "calib3d::RQDecomp3x3_13()", "calib3d::checkChessboard_10()", "calib3d::findChessboardCorners_10()", "calib3d::findChessboardCorners_11()", "calib3d::findChessboardCornersSB_10()", "calib3d::findChessboardCornersSB_11()", "calib3d::findCirclesGrid_10()", "calib3d::findCirclesGrid_12()", "calib3d::solvePnP_10()", "calib3d::solvePnP_11()", "calib3d::solvePnP_12()", "calib3d::solvePnPRansac_10()", "calib3d::solvePnPRansac_11()", "calib3d::solvePnPRansac_12()", "calib3d::solvePnPRansac_13()", "calib3d::solvePnPRansac_14()", "calib3d::solvePnPRansac_15()", "calib3d::solvePnPRansac_16()", "calib3d::stereoRectifyUncalibrated_10()", "calib3d::stereoRectifyUncalibrated_11()", "calib3d::calibrateCameraExtended_10()", "calib3d::calibrateCameraExtended_11()", "calib3d::calibrateCameraExtended_12()", "calib3d::calibrateCamera_10()", "calib3d::calibrateCamera_11()", "calib3d::calibrateCamera_12()", "calib3d::calibrateCameraROExtended_10()", "calib3d::calibrateCameraROExtended_11()", "calib3d::calibrateCameraROExtended_12()", "calib3d::calibrateCameraRO_10()", "calib3d::calibrateCameraRO_11()", "calib3d::calibrateCameraRO_12()", "calib3d::sampsonDistance_10()", "calib3d::stereoCalibrateExtended_10()", "calib3d::stereoCalibrateExtended_11()", "calib3d::stereoCalibrateExtended_12()", "calib3d::stereoCalibrate_10()", "calib3d::stereoCalibrate_11()", "calib3d::stereoCalibrate_12()", "calib3d::fisheye_1calibrate_10()", "calib3d::fisheye_1calibrate_11()", "calib3d::fisheye_1calibrate_12()", "calib3d::fisheye_1stereoCalibrate_10()", "calib3d::fisheye_1stereoCalibrate_11()", "calib3d::fisheye_1stereoCalibrate_12()", "calib3d::rectify3Collinear_10()", "calib3d::decomposeHomographyMat_10()", "calib3d::estimateAffine3D_10()", "calib3d::estimateAffine3D_11()", "calib3d::estimateAffine3D_12()", "calib3d::recoverPose_10()", "calib3d::recoverPose_11()", "calib3d::recoverPose_12()", "calib3d::recoverPose_13()", "calib3d::recoverPose_14()", "calib3d::recoverPose_15()", "calib3d::recoverPose_16()", "calib3d::recoverPose_17()", "calib3d::recoverPose_18()", "calib3d::solveP3P_10()", "calib3d::Rodrigues_10()", "calib3d::Rodrigues_11()", "calib3d::calibrationMatrixValues_10()", "calib3d::composeRT_10()", "calib3d::composeRT_11()", "calib3d::composeRT_12()", "calib3d::composeRT_13()", "calib3d::composeRT_14()", "calib3d::composeRT_15()", "calib3d::composeRT_16()", "calib3d::composeRT_17()", "calib3d::composeRT_18()", "calib3d::computeCorrespondEpilines_10()", "calib3d::convertPointsFromHomogeneous_10()", "calib3d::convertPointsToHomogeneous_10()", "calib3d::correctMatches_10()", "calib3d::decomposeEssentialMat_10()", "calib3d::decomposeProjectionMatrix_10()", "calib3d::decomposeProjectionMatrix_11()", "calib3d::decomposeProjectionMatrix_12()", "calib3d::decomposeProjectionMatrix_13()", "calib3d::decomposeProjectionMatrix_14()", "calib3d::drawChessboardCorners_10()", "calib3d::drawFrameAxes_10()", "calib3d::drawFrameAxes_11()", "calib3d::filterHomographyDecompByVisibleRefpoints_10()", "calib3d::filterHomographyDecompByVisibleRefpoints_11()", "calib3d::filterSpeckles_10()", "calib3d::filterSpeckles_11()", "calib3d::initUndistortRectifyMap_10()", "calib3d::matMulDeriv_10()", "calib3d::projectPoints_10()", "calib3d::projectPoints_11()", "calib3d::projectPoints_12()", "calib3d::reprojectImageTo3D_10()", "calib3d::reprojectImageTo3D_11()", "calib3d::reprojectImageTo3D_12()", "calib3d::stereoRectify_10()", "calib3d::stereoRectify_11()", "calib3d::stereoRectify_12()", "calib3d::stereoRectify_13()", "calib3d::stereoRectify_14()", "calib3d::stereoRectify_15()", "calib3d::triangulatePoints_10()", "calib3d::undistort_10()", "calib3d::undistort_11()", "calib3d::undistortPointsIter_10()", "calib3d::undistortPoints_10()", "calib3d::undistortPoints_11()", "calib3d::undistortPoints_12()", "calib3d::validateDisparity_10()", "calib3d::validateDisparity_11()", "calib3d::fisheye_1distortPoints_10()", "calib3d::fisheye_1distortPoints_11()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_10()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_11()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_12()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_13()", "calib3d::fisheye_1initUndistortRectifyMap_10()", "calib3d::fisheye_1projectPoints_10()", "calib3d::fisheye_1projectPoints_11()", "calib3d::fisheye_1projectPoints_12()", "calib3d::fisheye_1stereoRectify_10()", "calib3d::fisheye_1stereoRectify_11()", "calib3d::fisheye_1stereoRectify_12()", "calib3d::fisheye_1stereoRectify_13()", "calib3d::fisheye_1undistortImage_10()", "calib3d::fisheye_1undistortImage_11()", "calib3d::fisheye_1undistortImage_12()", "calib3d::fisheye_1undistortPoints_10()", "calib3d::fisheye_1undistortPoints_11()", "calib3d::fisheye_1undistortPoints_12()", "objdetect::HOGDescriptor_10()", "objdetect::HOGDescriptor_11()", "objdetect::HOGDescriptor_12()", "objdetect::HOGDescriptor_13()", "objdetect::HOGDescriptor_14()", "objdetect::HOGDescriptor_15()", "objdetect::HOGDescriptor_16()", "objdetect::HOGDescriptor_17()", "objdetect::HOGDescriptor_18()", "objdetect::HOGDescriptor_19()", "objdetect::checkDetectorSize_10()", "objdetect::load_10()", "objdetect::load_11()", "objdetect::getWinSigma_10()", "objdetect::getDescriptorSize_10()", "objdetect::getDaimlerPeopleDetector_10()", "objdetect::getDefaultPeopleDetector_10()", "objdetect::compute_10()", "objdetect::compute_11()", "objdetect::compute_12()", "objdetect::compute_13()", "objdetect::computeGradient_10()", "objdetect::computeGradient_11()", "objdetect::computeGradient_12()", "objdetect::detect_10()", "objdetect::detect_11()", "objdetect::detect_12()", "objdetect::detect_13()", "objdetect::detect_14()", "objdetect::detectMultiScale_10()", "objdetect::detectMultiScale_11()", "objdetect::detectMultiScale_12()", "objdetect::detectMultiScale_13()", "objdetect::detectMultiScale_14()", "objdetect::detectMultiScale_15()", "objdetect::detectMultiScale_16()", "objdetect::save_10()", "objdetect::save_11()", "objdetect::setSVMDetector_10()", "objdetect::get_1winSize_10()", "objdetect::get_1blockSize_10()", "objdetect::get_1blockStride_10()", "objdetect::get_1cellSize_10()", "objdetect::get_1svmDetector_10()", "objdetect::QRCodeDetector_10()", "objdetect::detect_10()", "objdetect::setEpsX_10()", "objdetect::setEpsY_10()", "objdetect::CascadeClassifier_10()", "objdetect::CascadeClassifier_11()", "objdetect::getOriginalWindowSize_10()", "objdetect::convert_10()", "objdetect::empty_10()", "objdetect::isOldFormatCascade_10()", "objdetect::load_10()", "objdetect::getFeatureType_10()", "objdetect::detectMultiScale_10()", "objdetect::detectMultiScale_11()", "objdetect::detectMultiScale_12()", "objdetect::detectMultiScale_13()", "objdetect::detectMultiScale_14()", "objdetect::detectMultiScale_15()", "objdetect::detectMultiScale2_10()", "objdetect::detectMultiScale2_11()", "objdetect::detectMultiScale2_12()", "objdetect::detectMultiScale2_13()", "objdetect::detectMultiScale2_14()", "objdetect::detectMultiScale2_15()", "objdetect::detectMultiScale3_10()", "objdetect::detectMultiScale3_11()", "objdetect::detectMultiScale3_12()", "objdetect::detectMultiScale3_13()", "objdetect::detectMultiScale3_14()", "objdetect::detectMultiScale3_15()", "objdetect::detectMultiScale3_16()", "objdetect::groupRectangles_10()", "objdetect::groupRectangles_11()", "video::getDetectShadows_10()", "video::getBackgroundRatio_10()", "video::getComplexityReductionThreshold_10()", "video::getShadowThreshold_10()", "video::getVarInit_10()", "video::getVarMax_10()", "video::getVarMin_10()", "video::getVarThreshold_10()", "video::getVarThresholdGen_10()", "video::getHistory_10()", "video::getNMixtures_10()", "video::getShadowValue_10()", "video::apply_10()", "video::apply_11()", "video::setBackgroundRatio_10()", "video::setComplexityReductionThreshold_10()", "video::setDetectShadows_10()", "video::setHistory_10()", "video::setNMixtures_10()", "video::setShadowThreshold_10()", "video::setShadowValue_10()", "video::setVarInit_10()", "video::setVarMax_10()", "video::setVarMin_10()", "video::setVarThreshold_10()", "video::setVarThresholdGen_10()", "video::create_10()", "video::create_11()", "video::create_12()", "video::create_13()", "video::create_14()", "video::create_15()", "video::create_16()", "video::create_17()", "video::create_18()", "video::getFastPyramids_10()", "video::getPolySigma_10()", "video::getPyrScale_10()", "video::getFlags_10()", "video::getNumIters_10()", "video::getNumLevels_10()", "video::getPolyN_10()", "video::getWinSize_10()", "video::setFastPyramids_10()", "video::setFlags_10()", "video::setNumIters_10()", "video::setNumLevels_10()", "video::setPolyN_10()", "video::setPolySigma_10()", "video::setPyrScale_10()", "video::setWinSize_10()", "video::calc_10()", "video::calc_11()", "video::calc_10()", "video::collectGarbage_10()", "video::apply_10()", "video::apply_11()", "video::getBackgroundImage_10()", "video::readOpticalFlow_10()", "video::createBackgroundSubtractorKNN_10()", "video::createBackgroundSubtractorKNN_11()", "video::createBackgroundSubtractorKNN_12()", "video::createBackgroundSubtractorKNN_13()", "video::createBackgroundSubtractorMOG2_10()", "video::createBackgroundSubtractorMOG2_11()", "video::createBackgroundSubtractorMOG2_12()", "video::createBackgroundSubtractorMOG2_13()", "video::CamShift_10()", "video::writeOpticalFlow_10()", "video::findTransformECC_10()", "video::findTransformECC_11()", "video::findTransformECC_12()", "video::findTransformECC_13()", "video::buildOpticalFlowPyramid_10()", "video::buildOpticalFlowPyramid_11()", "video::buildOpticalFlowPyramid_12()", "video::buildOpticalFlowPyramid_13()", "video::buildOpticalFlowPyramid_14()", "video::meanShift_10()", "video::calcOpticalFlowFarneback_10()", "video::calcOpticalFlowPyrLK_10()", "video::calcOpticalFlowPyrLK_11()", "video::calcOpticalFlowPyrLK_12()", "video::calcOpticalFlowPyrLK_13()", "video::calcOpticalFlowPyrLK_14()", "video::calcOpticalFlowPyrLK_15()", "video::create_10()", "video::create_11()", "video::getUseMeanNormalization_10()", "video::getUseSpatialPropagation_10()", "video::getVariationalRefinementAlpha_10()", "video::getVariationalRefinementDelta_10()", "video::getVariationalRefinementGamma_10()", "video::getFinestScale_10()", "video::getGradientDescentIterations_10()", "video::getPatchSize_10()", "video::getPatchStride_10()", "video::getVariationalRefinementIterations_10()", "video::setFinestScale_10()", "video::setGradientDescentIterations_10()", "video::setPatchSize_10()", "video::setPatchStride_10()", "video::setUseMeanNormalization_10()", "video::setUseSpatialPropagation_10()", "video::setVariationalRefinementAlpha_10()", "video::setVariationalRefinementDelta_10()", "video::setVariationalRefinementGamma_10()", "video::setVariationalRefinementIterations_10()", "video::KalmanFilter_10()", "video::KalmanFilter_11()", "video::KalmanFilter_12()", "video::KalmanFilter_13()", "video::correct_10()", "video::predict_10()", "video::predict_11()", "video::get_1statePre_10()", "video::set_1statePre_10()", "video::get_1statePost_10()", "video::set_1statePost_10()", "video::get_1transitionMatrix_10()", "video::set_1transitionMatrix_10()", "video::get_1controlMatrix_10()", "video::set_1controlMatrix_10()", "video::get_1measurementMatrix_10()", "video::set_1measurementMatrix_10()", "video::get_1processNoiseCov_10()", "video::set_1processNoiseCov_10()", "video::get_1measurementNoiseCov_10()", "video::set_1measurementNoiseCov_10()", "video::get_1errorCovPre_10()", "video::set_1errorCovPre_10()", "video::get_1gain_10()", "video::set_1gain_10()", "video::get_1errorCovPost_10()", "video::set_1errorCovPost_10()", "video::create_10()", "video::create_11()", "video::create_12()", "video::create_13()", "video::create_14()", "video::create_15()", "video::getWinSize_10()", "video::getTermCriteria_10()", "video::getMinEigThreshold_10()", "video::getFlags_10()", "video::getMaxLevel_10()", "video::setFlags_10()", "video::setMaxLevel_10()", "video::setMinEigThreshold_10()", "video::setTermCriteria_10()", "video::setWinSize_10()", "video::create_10()", "video::getAlpha_10()", "video::getDelta_10()", "video::getGamma_10()", "video::getOmega_10()", "video::getFixedPointIterations_10()", "video::getSorIterations_10()", "video::calcUV_10()", "video::setAlpha_10()", "video::setDelta_10()", "video::setFixedPointIterations_10()", "video::setGamma_10()", "video::setOmega_10()", "video::setSorIterations_10()", "video::getDetectShadows_10()", "video::getDist2Threshold_10()", "video::getShadowThreshold_10()", "video::getHistory_10()", "video::getNSamples_10()", "video::getShadowValue_10()", "video::getkNNSamples_10()", "video::setDetectShadows_10()", "video::setDist2Threshold_10()", "video::setHistory_10()", "video::setNSamples_10()", "video::setShadowThreshold_10()", "video::setShadowValue_10()", "video::setkNNSamples_10()", "Unknown exception in JNI code {core::minMaxLoc()}", "Unknown exception in JNI code {core::getTextSize()}", "org.opencv.core", "org.opencv.imgproc", "org.opencv.ml", "org.opencv.photo", "org.opencv.dnn", "/build/master_pack-android/opencv/modules/dnn/include/opencv2/dnn/dnn.inl.hpp", "(idx == -1 && ps->size() == 1) || (idx >= 0 && idx < (int)ps->size())", "(idx == -1 && size() == 1) || (idx >= 0 && idx < size())", "isReal() || isInt() || isString()", "Unhandled type (%d)", "fracpart == 0.0", "isInt() || isReal() || isString()", "org.opencv.imgcodecs", "org.opencv.videoio", "org.opencv.features2d", "org.opencv.calib3d", "org.opencv.objdetect", "org.opencv.video", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann17KDTreeIndexParamsENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann12SearchParamsENS_9allocatorIS3_EEEE", "AndroidBitmap_getInfo(env, bitmap, &info) >= 0", "Java_org_opencv_android_Utils_nBitmapToMat2", "/build/master_pack-android/opencv/modules/java/generator/src/cpp/utils.cpp", "info.format == ANDROID_BITMAP_FORMAT_RGBA_8888 || info.format == ANDROID_BITMAP_FORMAT_RGB_565", "AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0", "org.opencv.android.Utils", "nBitmapToMat caught unknown exception (...)", "Unknown exception in JNI code {nBitmapToMat}", "nBitmapToMat caught cv::Exception: %s", "Java_org_opencv_android_Utils_nMatToBitmap2", "src.dims == 2 && info.height == (uint32_t)src.rows && info.width == (uint32_t)src.cols", "src.type() == CV_8UC1 || src.type() == CV_8UC3 || src.type() == CV_8UC4", "nMatToBitmap caught unknown exception (...)", "Unknown exception in JNI code {nMatToBitmap}", "nMatToBitmap caught cv::Exception: %s", "org/opencv/core/MatOfInt", "nativeObj", "org/opencv/dnn/Layer", "(J)V", "cv::Algorithm::Algorithm()", "/build/master_pack-android/opencv/modules/core/src/algorithm.cpp", "virtual cv::Algorithm::~Algorithm()", "void cv::Algorithm::write(const Ptr<cv::FileStorage> &, const cv::String &) const", "virtual void cv::Algorithm::save(const cv::String &) const", "virtual cv::String cv::Algorithm::getDefaultName() const", "my_object", "void cv::Algorithm::writeFormat(cv::FileStorage &) const", "No element name has been given", "operator<<", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/persistence.hpp", "N2cv9AlgorithmE", "Failed to allocate %llu bytes", "OutOfMemoryError", "/build/master_pack-android/opencv/modules/core/src/alloc.cpp", "/build/master_pack-android/opencv/modules/core/src/arithm.cpp", "void cv::bitwise_and(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::bitwise_or(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::bitwise_xor(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::bitwise_not(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::max(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::min(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::max(const cv::Mat &, const cv::Mat &, cv::Mat &)", "void cv::min(const cv::Mat &, const cv::Mat &, cv::Mat &)", "void cv::max(const cv::UMat &, const cv::UMat &, cv::UMat &)", "void cv::min(const cv::UMat &, const cv::UMat &, cv::UMat &)", "void cv::add(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "void cv::subtract(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "void cv::absdiff(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::copyTo(cv::InputArray, cv::OutputArray, cv::InputArray)", "void cv::multiply(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "void cv::divide(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "void cv::divide(double, cv::InputArray, cv::OutputArray, int)", "void cv::addWeighted(cv::InputArray, double, cv::InputArray, double, double, cv::OutputArray, int)", "void cv::compare(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT", "compare", "_src1.empty() == _src2.empty()", "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'", "void cv::inRange(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "! _src.empty()", "inRange", "The lower boundary is neither an array of the same size and same type as src, nor a scalar", "The upper boundary is neither an array of the same size and same type as src, nor a scalar", "lbScalar == ubScalar", "lb.type() == ub.type()", "src.size == dst.size && src.type() == dst.type()", "cvNot", "src1.size == dst.size && src1.type() == dst.type()", "cvAnd", "cvOr", "cvXor", "cvAndS", "cvOrS", "cvXorS", "src1.size == dst.size && src1.channels() == dst.channels()", "cvAdd", "cvSub", "cvAddS", "cvSubRS", "cvMul", "src2.size == dst.size && src2.channels() == dst.channels()", "cvDiv", "cvAddWeighted", "cvAbsDiff", "cvAbsDiffS", "src1.size == dst.size && dst.type() == CV_8U", "cvInRange", "cvInRangeS", "cvCmp", "cvCmpS", "cvMin", "cvMax", "cvMinS", "cvMaxS", "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'", "binary_op", "psrc1->sameSize(*psrc2) && type1 == type2", "(mtype == CV_8U || mtype == CV_8S) && _mask.sameSize(*psrc1)", "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'", "arithm_op", "type2 == CV_64F && (sz2.height == 1 || sz2.height == 4)", "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified", "(mtype == CV_8UC1 || mtype == CV_8SC1) && _mask.sameSize(*psrc1)", "/build/master_pack-android/opencv/modules/core/src/arithm.simd.hpp", "void cv::hal::cpu_baseline::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::hal::cpu_baseline::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "void cv::hal::cpu_baseline::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::cpu_baseline::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::cpu_baseline::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "void cv::hal::cpu_baseline::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::hal::cpu_baseline::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::hal::cpu_baseline::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "void cv::hal::cpu_baseline::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::cpu_baseline::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::cpu_baseline::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "void cv::hal::cpu_baseline::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::hal::cpu_baseline::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::hal::cpu_baseline::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "void cv::hal::cpu_baseline::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::cpu_baseline::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::cpu_baseline::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "void cv::hal::cpu_baseline::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::hal::cpu_baseline::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::hal::cpu_baseline::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "void cv::hal::cpu_baseline::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::cpu_baseline::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::cpu_baseline::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "void cv::hal::cpu_baseline::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "void cv::hal::cpu_baseline::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::hal::cpu_baseline::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cpu_baseline::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cpu_baseline::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip8u(const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip8s(const schar *, size_t, schar *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip16u(const ushort *, size_t, ushort *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip16s(const short *, size_t, short *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip32s(const int *, size_t, int *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip32f(const float *, size_t, float *, size_t, int, int, const double *)", "void cv::hal::cpu_baseline::recip64f(const double *, size_t, double *, size_t, int, int, const double *)", "void cv::hal::add8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "void cv::hal::recip8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "void cv::hal::recip8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "void cv::hal::recip16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "void cv::hal::recip16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::hal::recip32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "void cv::hal::recip32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::recip64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "cmpop == CMP_NE", "cmp_loop", "cvSetIPLAllocators", "/build/master_pack-android/opencv/modules/core/src/array.cpp", "Non-positive width or height", "cvCreateMatHeader", "Invalid matrix type", "cvInitMatHeader", "Non-positive cols or rows", "cvReleaseMat", "Bad CvMat header", "cvCloneMat", "NULL matrix header pointer", "cvInitMatNDHeader", "invalid array data type", "NULL <sizes> pointer", "non-positive or too large number of dimensions", "one of dimesion sizes is non-positive", "The array is too big", "cvCreateMatNDHeader", "Bad CvMatND header", "cvCloneMatND", "src->dims <= CV_MAX_DIM", "_dst.data == data0", "Incorrect number of arrays", "cvInitNArrayIterator", "Some of required array pointers is NULL", "Iterator pointer is NULL", "Iterator with mask is not supported", "COI set is not allowed here", "Number of dimensions is the same for all arrays", "Data type is not the same for all arrays", "Number of channels is not the same for all arrays", "Depth is not the same for all arrays", "Dimension sizes are the same for all arrays", "cvCreateSparseMat", "bad number of dimensions", "cvReleaseSparseMat", "Invalid sparse array header", "cvCloneSparseMat", "Invalid sparse matrix header", "cvInitSparseMatIterator", "NULL iterator pointer", "Data is already allocated", "cvCreateData", "Overflow for imageSize", "unrecognized or unsupported array type", "cvSetData", "For multidimensional array only CV_AUTOSTEP is allowed here", "cvReleaseData", "Only continuous nD arrays are supported here", "cvGetRawData", "cvGetElemType", "cvGetDims", "bad dimension index", "cvGetDimSize", "Array should be CvMat or IplImage", "cvGetSize", "cvGetSubRect", "cvGetRows", "cvGetCols", "cvGetDiag", "The number of channels must be 1, 2, 3 or 4", "cvScalarToRawData", "cvRawDataToScalar", "cvPtr1D", "cvPtr2D", "COI must be non-null in case of planar images", "((CvSparseMat*)arr)->dims == 2", "cvPtr3D", "NULL pointer to indices", "cvPtrND", "cvGet1D", "cvGet2D", "cvGetReal1D", "cvGetReal* support only single-channel arrays", "cvGetReal2D", "cvGetReal3D", "cvGetRealND", "cvSet1D", "cvSet2D", "cvSetReal1D", "cvSetReal* support only single-channel arrays", "cvSetReal2D", "cvSetReal3D", "cvSetRealND", "NULL array pointer is passed", "cvGetMat", "The matrix has NULL data pointer", "The image has NULL data pointer", "Images with planar data layout should be used with COI selected", "The image is interleaved and has over CV_CN_MAX channels", "Pixel order should be used with coi == 0", "Input array has NULL data pointer", "Unrecognized or unsupported array type", "NULL pointer to array or destination header", "cvReshapeMatND", "None of array parameters is changed: dummy call?", "Non-positive or too large number of dimensions", "New dimension sizes are not specified", "The output header should be CvMat or CvMatND", "The matrix is not continuous so the number of rows can not be changed", "The total number of matrix elements is not divisible by the new number of rows", "The total matrix width is not divisible by the new number of columns", "The output header should be CvMatND", "The input array must be CvMatND", "The last dimension full size is not divisible by new number of channels", "Simultaneous change of shape and number of channels is not supported. Do it by 2 separate calls", "Non-continuous nD arrays are not supported", "One of new dimension sizes is non-positive", "Number of elements in the original and reshaped array is different", "COI is not supported by this operation", "cvReshape", "The matrix is not continuous, thus its number of rows can not be changed", "Bad new number of rows", "The total width is not divisible by the new number of channels", "cvGetImage", "null pointer to header", "cvInitImageHeader", "Bad input roi", "Unsupported format", "Bad input origin", "Bad input align", "cvReleaseImageHeader", "cvReleaseImage", "cvSetImageROI", "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", "cvResetImageROI", "Null pointer to image", "cvGetImageROI", "cvSetImageCOI", "cvGetImageCOI", "Bad image header", "cvCloneImage", "Unknown type of term criteria", "cvCheckTermCriteria", "Iterations flag is set and maximum number of iterations is <= 0", "Accuracy flag is set and epsilon is < 0", "Neither accuracy nor maximum iterations number flags are set in criteria type", "void cv::scalarToRawData(const cv::Scalar &, void *, int, int)", "scalarToRawData", "NULL double pointer", "cvRelease", "Unknown object type", "NULL structure pointer", "cvClone", "cvGetMatND", "One of indices is out of range", "icvGetNodePtr", "icvDeleteNode", "GRAY", "BGRA", "void cv::batchDistance(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::OutputArray, int, int, cv::InputArray, int, bool)", "/build/master_pack-android/opencv/modules/core/src/batch_distance.cpp", "type == src2.type() && src1.cols == src2.cols && (type == CV_32F || type == CV_8U)", "batchDistance", "_nidx.needed() == (K > 0)", "(type == CV_8U && dtype == CV_32S) || dtype == CV_32F", "K == 1 && update == 0 && mask.empty()", "!nidx.empty()", "The combination of type=%d, dtype=%d and normType=%d is not supported", "N2cv16BatchDistInvokerE", "InputArray: noArray()", "InputArray:", " empty()=true", " empty()=false", " kind=0x%08llx", " flags=0x%08llx", " obj=NULL", " total(-1)=%lld", " dims(-1)=%d", " size(-1)=%dx%d", " type(-1)=", " ERROR: exception occured, dump is non-complete", "InputArrayOfArrays: noArray()", "InputArrayOfArrays:", " type(0)=", " dims(0)=%d", " size(0)=%dx%d", "InputOutputArray: noArray()", "InputOutputArray:", "InputOutputArrayOfArrays: noArray()", "InputOutputArrayOfArrays:", "NSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk19basic_iosIcNS_11char_traitsIcEEEE", "NSt6__ndk119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_streambufIcNS_11char_traitsIcEEEE", "void cv::mixChannels(const cv::Mat *, size_t, cv::Mat *, size_t, const int *, size_t)", "/build/master_pack-android/opencv/modules/core/src/channels.cpp", "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0", "mixChannels", "j < nsrcs && src[j].depth() == depth", "i1 >= 0 && j < ndsts && dst[j].depth() == depth", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const int *, size_t)", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const std::vector<int> &)", "fromTo.size()%2 == 0 && nsrc > 0 && ndst > 0", "void cv::extractChannel(cv::InputArray, cv::OutputArray, int)", "0 <= coi && coi < cn", "extractChannel", "void cv::insertChannel(cv::InputArray, cv::InputOutputArray, int)", "_src.sameSize(_dst) && sdepth == ddepth", "insertChannel", "0 <= coi && coi < dcn && scn == 1", "<invalid depth>", "<invalid type>", "CV_16S", "%sC%d", " (expected: '", "'), where", "    '", "' is ", "must be ", "{custom check}", "not equal to", "less than or equal to", "less than", "greater than or equal to", "greater than", "NSt6__ndk114basic_iostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_istreamIcNS_11char_traitsIcEEEE", "NSt6__ndk118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "Parameter '", "undeclared key '%s' requested", "getByName", "/build/master_pack-android/opencv/modules/core/src/command_line_parser.cpp", "Missing parameter #%d\n", "Parameter #%d: ", "undeclared position %d requested", "getByIndex", "Field KEYS could not be empty\n", "\nERRORS:\n%s\n", "Usage: %s [params] ", " (value:%s)", "\n\t\t%s\n", "error in split_range_string(", "<none>", "unknown/unsupported parameter type", "from_str", "can not convert: [%s] to [%s]", "bool", "unsigned", "unsigned long long", "unknown", "NSt6__ndk119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "_Function.empty()==false", "minimize", "/build/master_pack-android/opencv/modules/core/src/conjugate_gradient.cpp", "MIN(x_mat.rows,x_mat.cols)==1", "x_mat.type()==CV_64FC1", "(termcrit.type==(TermCriteria::MAX_ITER+TermCriteria::EPS) && termcrit.epsilon>0 && termcrit.maxCount>0) || ((termcrit.type==TermCriteria::MAX_ITER) && termcrit.maxCount>0)", "setTermCriteria", "DataType<_Tp>::channels == m.channels() || m.empty()", "operator=", "N2cv16MinProblemSolver8FunctionE", "N2cv18ConjGradSolverImplE", "N2cv14ConjGradSolverE", "N2cv16MinProblemSolverE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18ConjGradSolverImplENS_9allocatorIS2_EEEE", "void cv::Mat::convertTo(cv::OutputArray, int, double, double) const", "/build/master_pack-android/opencv/modules/core/src/convert.cpp", "convertTo", "void cv::convertFp16(cv::InputArray, cv::OutputArray)", "ddepth == CV_16S || ddepth == CV_16F", "convertFp16", "_dst.channels() == _src.channels()", "Unsupported input depth", "nz > 0", "cvSplit", "/build/master_pack-android/opencv/modules/core/src/convert_c.cpp", "dvec[j].size() == src.size()", "dvec[j].depth() == src.depth()", "dvec[j].channels() == 1", "i < src.channels()", "cvMerge", "svec[j].size == dst.size && svec[j].depth() == dst.depth() && svec[j].channels() == 1 && i < dst.channels()", "src.size == dst.size && dst.type() == CV_8UC(src.channels())", "cvConvertScaleAbs", "src.size == dst.size && src.channels() == dst.channels()", "cvConvertScale", "dst.size() == src.size() && dst.type() == CV_MAKETYPE(lut.depth(), src.channels())", "cvLUT", "dst.size() == src.size() && src.channels() == dst.channels()", "cvNormalize", "void cv::convertScaleAbs(cv::InputArray, cv::OutputArray, double, double)", "/build/master_pack-android/opencv/modules/core/src/convert_scale.cpp", "convertScaleAbs", "void cv::normalize(cv::InputArray, cv::InputOutputArray, double, double, int, int, cv::InputArray)", "Unknown/unsupported norm type", "/build/master_pack-android/opencv/modules/core/src/copy.cpp", "channels() == CV_MAT_CN(dtype)", "copyTo", "dst.u != NULL", "dims > 0 && dims < CV_MAX_DIM", "sz.width", "void cv::Mat::copyTo(cv::OutputArray, cv::InputArray) const", "mask.depth() == CV_8U && (mcn == 1 || mcn == cn)", "size() == mask.size()", "cv::Mat &cv::Mat::operator=(const cv::Scalar &)", "sz <= sizeof(scalar)", "cv::Mat &cv::Mat::setTo(cv::InputArray, cv::InputArray)", "checkScalar(value, type(), _value.kind(), _InputArray::MAT )", "setTo", "mask.empty() || (mask.depth() == CV_8U && (mcn == 1 || mcn == cn) && size == mask.size)", "void cv::flip(cv::InputArray, cv::OutputArray, int)", "flip", "rotate", "void cv::repeat(cv::InputArray, int, int, cv::OutputArray)", "_src.getObj() != _dst.getObj()", "repeat", "ny > 0 && nx > 0", "len > 0", "borderInterpolate", "Unknown/unsupported border type", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const cv::Scalar &)", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0 && _src.dims() <= 2", "copyMakeBorder", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "maskarr == 0", "cvCopy", "src.depth() == dst.depth() && src.size == dst.size", "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", "src.type() == dst.type() && src.size() == dst.size()", "cvFlip", "src.type() == dst.type() && dst.rows % src.rows == 0 && dst.cols % src.cols == 0", "cvRepeat", "int cv::countNonZero(cv::InputArray)", "/build/master_pack-android/opencv/modules/core/src/count_non_zero.cpp", "countNonZero", "void cv::findNonZero(cv::InputArray, cv::OutputArray)", "src.channels() == 1 && src.dims == 2", "findNonZero", "0 <= rowRange_.start && rowRange_.start <= rowRange_.end && rowRange_.end <= m.rows", "/build/master_pack-android/opencv/modules/core/src/cuda_gpu_mat.cpp", "0 <= colRange_.start && colRange_.start <= colRange_.end && colRange_.end <= m.cols", "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", "reshape", "The library is compiled without CUDA support", "throw_no_cuda", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/private.cuda.hpp", "/build/master_pack-android/opencv/modules/core/src/cuda_host_mem.cpp", "cvCreateChildMemStorage", "/build/master_pack-android/opencv/modules/core/src/datastructs.cpp", "cvReleaseMemStorage", "cvClearMemStorage", "cvSaveMemStoragePos", "cvRestoreMemStoragePos", "cvMemStorageAlloc", "Too large memory block is requested", "requested size is negative or too big", "cvCreateSeq", "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", "cvSetSeqBlockSize", "Storage block size is too small to fit the sequence elements", "cvSeqElemIdx", "cvCvtSeqToArray", "cvMakeSeqHeaderForArray", "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", "cvStartAppendToSeq", "cvStartWriteSeq", "cvFlushSeqWriter", "cvEndWriteSeq", "cvCreateSeqBlock", "cvStartReadSeq", "cvChangeSeqBlock", "cvGetSeqReaderPos", "cvSetSeqReaderPos", "cvSeqPush", "cvSeqPop", "cvSeqPushFront", "cvSeqPopFront", "cvSeqInsert", "cvSeqRemove", "Invalid index", "NULL sequence pointer", "cvSeqPushMulti", "number of removed elements is negative", "cvSeqPopMulti", "cvClearSeq", "Invalid sequence header", "cvSeqSlice", "Bad sequence slice", "cvSeqRemoveSlice", "start slice index is out of range", "Invalid destination sequence header", "cvSeqInsertSlice", "Source is not a sequence nor matrix", "The source array must be 1d coninuous vector", "Source and destination sequence element sizes are different.", "Bad input sequence", "cvSeqSort", "Null compare function", "cvSeqSearch", "Null element pointer", "cvSeqPartition", "cvCreateSet", "cvSetAdd", "set != NULL", "cvSetRemove", "cvCreateGraph", "cvClearGraph", "cvGraphAddVtx", "cvGraphRemoveVtxByPtr", "The vertex does not belong to the graph", "cvGraphRemoveVtx", "The vertex is not found", "cvFindGraphEdgeByPtr", "graph pointer is NULL", "cvFindGraphEdge", "cvGraphAddEdgeByPtr", "vertex pointers coincide (or set to NULL)", "cvGraphAddEdge", "cvGraphRemoveEdgeByPtr", "edge != 0", "cvGraphRemoveEdge", "cvGraphVtxDegreeByPtr", "cvGraphVtxDegree", "Null graph pointer", "cvCreateGraphScanner", "graph->storage != 0", "Null double pointer to graph scanner", "cvReleaseGraphScanner", "Null graph scanner", "cvNextGraphItem", "Invalid graph pointer", "cvCloneGraph", "cvTreeToNodeSeq", "cvInsertNodeIntoTree", "cvRemoveNodeFromTree", "frame node could not be deleted", "cvInitTreeNodeIterator", "cvNextTreeNode", "cvPrevTreeNode", "icvInitMemStorage", "icvGoNextMemBlock", "icvGrowSeq", "The sequence has NULL storage pointer", "icvSeqElemsClearFlags", "icvSeqFindNextElem", "getTypeFromDXGI_FORMAT", "/build/master_pack-android/opencv/modules/core/src/directx.cpp", "getTypeFromD3DFORMAT", "initializeContextFromD3D11Device", "initializeContextFromD3D10Device", "initializeContextFromDirect3DDevice9Ex", "initializeContextFromDirect3DDevice9", "convertToD3D11Texture2D", "convertFromD3D11Texture2D", "convertToD3D10Texture2D", "convertFromD3D10Texture2D", "convertToDirect3DSurface9", "convertFromDirect3DSurface9", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DownhillSolverImplENS_9allocatorIS2_EEEE", "N2cv18DownhillSolverImplE", "N2cv14DownhillSolverE", "termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0", "/build/master_pack-android/opencv/modules/core/src/downhill_simplex.cpp", "!_Function.empty()", "std::min(_step.cols, _step.rows) == 1 && std::max(_step.cols, _step.rows) >= 2 && _step.type() == CV_64FC1", "_Function->getDims() == ndim", "createInitialSimplex", "(x.cols == 1 && x.rows == ndim) || (x.cols == ndim && x.rows == 1)", "x.type() == CV_32F || x.type() == CV_64F", "ihi != inhi", "innerDownhillSimplex", "!cvIsNaN(res) && !cvIsInf(res)", "calc_f", "coord_sum.cols == n && coord_sum.rows == 1", "updateCoordSum", "/build/master_pack-android/opencv/modules/core/src/dxt.cpp", "void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "!((flags & DFT_COMPLEX_INPUT) && src.channels() != 2)", "void cv::idft(cv::InputArray, cv::OutputArray, int, int)", "void cv::mulSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "type == srcB.type() && srcA.size() == srcB.size()", "mulSpectrums", "void cv::dct(cv::InputArray, cv::OutputArray, int)", "type == CV_32FC1 || type == CV_64FC1", "void cv::idct(cv::InputArray, cv::OutputArray, int)", "cvDFT", "dst.data == dst0.data", "srcA.size == dst.size && srcA.type() == dst.type()", "cvMulSpectrums", "cvDCT", "apply", "c.factors[0] == c.factors[c.nf-1]", "Odd-size DCT's are not implemented", "0Y\r@:i\r", "PF SdF", " [@W:[", "N2cv16ReplacementDFT1DE", "N2cv3hal5DFT1DE", "N2cv15OcvDftBasicImplE", "N2cv16ReplacementDFT2DE", "N2cv3hal5DFT2DE", "N2cv10OcvDftImplE", "N2cv16ReplacementDCT2DE", "N2cv3hal5DCT2DE", "N2cv10OcvDctImplE", "NSt6__ndk120__shared_ptr_pointerIPN2cv15OcvDftBasicImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv15OcvDftBasicImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDftImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv10OcvDftImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDctImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv10OcvDctImplEEE", "The library is compiled without OpenGL support", "IntGetProcAddress", "/build/master_pack-android/opencv/modules/core/src/gl_core_3_1.cpp", "bool cv::utils::fs::isDirectory(const cv::String &)", "/build/master_pack-android/opencv/modules/core/src/glob.cpp", "void cv::glob(cv::String, std::vector<String> &, bool)", "could not open directory: %s", "glob_rec", "double cv::kmeans(cv::InputArray, int, cv::InputOutputArray, cv::TermCriteria, int, int, cv::OutputArray)", "/build/master_pack-android/opencv/modules/core/src/kmeans.cpp", "data0.dims <= 2 && type == CV_32F && K > 0", "kmeans", "N >= K", "(best_labels.cols == 1 || best_labels.rows == 1) && best_labels.cols*best_labels.rows == N && best_labels.type() == CV_32S && best_labels.isContinuous()", "(unsigned)_labels.at<int>(i) < (unsigned)K", "counters[k] != 0", "void cv::generateCentersPP(const cv::Mat &, cv::Mat &, int, cv::RNG &, int)", "virtual void cv::KMeansPPDistanceComputer::operator()(const cv::Range &) const", "virtual void cv::KMeansDistanceComputer<true>::operator()(const cv::Range &) const [onlyDistance = true]", "virtual void cv::KMeansDistanceComputer<false>::operator()(const cv::Range &) const [onlyDistance = false]", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerILb1EEE", "N2cv22KMeansDistanceComputerILb0EEE", "int cv::LU(float *, size_t, int, float *, size_t, int)", "/build/master_pack-android/opencv/modules/core/src/lapack.cpp", "int cv::LU(double *, size_t, int, double *, size_t, int)", "bool cv::Cholesky(float *, size_t, int, float *, size_t, int)", "bool cv::Cholesky(double *, size_t, int, double *, size_t, int)", "double cv::determinant(cv::InputArray)", "!mat.empty()", "determinant", "mat.rows == mat.cols && (type == CV_32F || type == CV_64F)", "double cv::invert(cv::InputArray, cv::OutputArray, int)", "invert", "m == n", "method == DECOMP_LU || method == DECOMP_CHOLESKY", "bool cv::solve(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "type == _src2.type() && (type == CV_32F || type == CV_64F)", "solve", "Unsupported method, see #DecompTypes", "method == DECOMP_LU || method == DECOMP_SVD || method == DECOMP_EIG || method == DECOMP_CHOLESKY || method == DECOMP_QR", "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", "The function can not solve under-determined linear systems", "bool cv::eigen(cv::InputArray, cv::OutputArray, cv::OutputArray)", "eigen", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, int)", "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", "backSubst", "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", "void cv::SVDecomp(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "void cv::SVBackSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "rows == mat->cols", "cvDet", "src.type() == dst.type() && src.rows == dst.cols && src.cols == dst.rows", "cvInvert", "A.type() == x.type() && A.cols == x.rows && x.cols == b.cols", "cvSolve", "p == evects0.ptr()", "cvEigenVV", "p == evals0.ptr()", "w.type() == type && (w.size() == cv::Size(nm,1) || w.size() == cv::Size(1, nm) || w.size() == cv::Size(nm, nm) || w.size() == cv::Size(n, m))", "cvSVD", "u.type() == type", "v.type() == type", "u.size() == svd.u.size()", "v.size() == svd.vt.size()", "cvSVBkSb", "_SVDcompute", "subspaceProject", "/build/master_pack-android/opencv/modules/core/src/lda.cpp", "Wrong mean shape for the given data matrix. Expected %d, but was %zu.", "subspaceReconstruct", "Wrong mean shape for the given eigenvector matrix. Expected %d, but was %zu.", "void cv::eigenNonSymmetric(cv::InputArray, cv::OutputArray, cv::OutputArray)", "eigenNonSymmetric", "eigenvalues64f.size() == n", "(size_t)eigenvectors64f.rows == n", "(size_t)eigenvectors64f.cols == n", "pSrc != NULL", "File can't be opened for writing!", "save", "File can't be opened for reading!", "num_components", "eigenvalues", "eigenvectors", "At least two classes are needed to perform a LDA. Reason: Only one class was given!", "The number of samples must equal the number of labels. Given %zu labels, %d samples. ", "Warning: Less observations than feature dimension given!", "Computation will probably fail.", "InputArray Datatype %d is not supported.", "void cv::EigenvalueDecomposition::compute(cv::InputArray, bool)", "Wrong shape of input matrix! Expected a matrix with one row or column.", "argsort", "cv::sortColumnsByIndices only works on integer indices!", "sortMatrixColumnsByIndices", "The data is expected as InputArray::STD_VECTOR_MAT (a std::vector<Mat>) or _InputArray::STD_VECTOR_VECTOR (a std::vector< std::vector<...> >).", "asRowMatrix", "Wrong number of elements in matrix #%d! Expected %d was %d.", "[ERROR:", "[ WARN:", "[ INFO:", "[DEBUG:", "OpenCV/4.0.1", "OPENCV_LOG_LEVEL", "WARNING", "DISABLED", "disabled", "FATAL", "fatal", "warning", "WARNINGS", "warnings", "WARN", "warn", "INFO", "debug", "VERBOSE", "verbose", "ERROR: Unexpected logging level value: ", "solveLP", "/build/master_pack-android/opencv/modules/core/src/lpsolver.cpp", "Constr_.type()==CV_64FC1 || Constr_.type()==CV_32FC1", "(Func_.rows()==1 && (Constr_.cols()-Func_.cols()==1))|| (Func_.cols()==1 && (Constr_.cols()-Func_.rows()==1))", "int cv::solveLP(cv::InputArray, cv::InputArray, cv::OutputArray)", "z_.type()", "z_.type() == CV_64FC1 || z_.type() == CV_32FC1 || z_.type() == CV_32SC1", "void cv::LUT(cv::InputArray, cv::InputArray, cv::OutputArray)", "/build/master_pack-android/opencv/modules/core/src/lut.cpp", "(lutcn == cn || lutcn == 1) && _lut.total() == 256 && _lut.isContinuous() && (depth == CV_8U || depth == CV_8S)", "N2cv15LUTParallelBodyE", "float cv::cubeRoot(float)", "/build/master_pack-android/opencv/modules/core/src/mathfuncs.cpp", "void cv::magnitude(cv::InputArray, cv::InputArray, cv::OutputArray)", "src1.size() == src2.size() && type == src2.type() && (depth == CV_32F || depth == CV_64F)", "magnitude", "void cv::phase(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "phase", "void cv::cartToPolar(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "X.size == Y.size && type == Y.type() && (depth == CV_32F || depth == CV_64F)", "cartToPolar", "void cv::polarToCart(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "(depth == CV_32F || depth == CV_64F) && (src1.empty() || src1.type() == type)", "polarToCart", "Mag.empty() || Angle.size == Mag.size", "void cv::exp(cv::InputArray, cv::OutputArray)", "void cv::log(cv::InputArray, cv::OutputArray)", "void cv::pow(cv::InputArray, double, cv::OutputArray)", "void cv::sqrt(cv::InputArray, cv::OutputArray)", "bool cv::checkRange(cv::InputArray, bool, cv::Point *, double, double)", "pt == NULL", "checkRange", "the value at (%d, %d)=%s is out of range [%f, %f)", "void cv::patchNaNs(cv::InputOutputArray, double)", "_a.depth() == CV_32F", "patchNaNs", "Mag.size() == X.size() && Mag.type() == X.type()", "cvCartToPolar", "Angle.size() == X.size() && Angle.type() == X.type()", "Mag.size() == Angle.size() && Mag.type() == Angle.type()", "cvPolarToCart", "X.size() == Angle.size() && X.type() == Angle.type()", "Y.size() == Angle.size() && Y.type() == Angle.type()", "src.type() == dst.type() && src.size == dst.size", "cvExp", "cvLog", "cvPow", "int cv::solveCubic(cv::InputArray, cv::OutputArray)", "ctype == CV_32F || ctype == CV_64F", "solveCubic", "(coeffs.size() == Size(n0, 1) || coeffs.size() == Size(n0+1, 1) || coeffs.size() == Size(1, n0) || coeffs.size() == Size(1, n0+1))", "double cv::solvePoly(cv::InputArray, cv::OutputArray, int)", "CV_MAT_DEPTH(ctype) >= CV_32F && CV_MAT_CN(ctype) <= 2", "solvePoly", "coeffs0.rows == 1 || coeffs0.cols == 1", "_roots.data == _roots0.data", "cvSolveCubic", "_r.data == _r0.data", "cvSolvePoly", "/build/master_pack-android/opencv/modules/core/src/mathfuncs_core.simd.hpp", "void cv::hal::cpu_baseline::fastAtan64f(const double *, const double *, double *, int, bool)", "void cv::hal::cpu_baseline::fastAtan2(const float *, const float *, float *, int, bool)", "void cv::hal::cpu_baseline::magnitude32f(const float *, const float *, float *, int)", "void cv::hal::cpu_baseline::magnitude64f(const double *, const double *, double *, int)", "void cv::hal::cpu_baseline::invSqrt32f(const float *, float *, int)", "void cv::hal::cpu_baseline::invSqrt64f(const double *, double *, int)", "void cv::hal::cpu_baseline::sqrt32f(const float *, float *, int)", "void cv::hal::cpu_baseline::sqrt64f(const double *, double *, int)", "void cv::hal::cpu_baseline::exp32f(const float *, float *, int)", "void cv::hal::cpu_baseline::exp64f(const double *, double *, int)", "void cv::hal::cpu_baseline::log32f(const float *, float *, int)", "void cv::hal::cpu_baseline::log64f(const double *, double *, int)", "void cv::hal::fastAtan32f(const float *, const float *, float *, int, bool)", "/build/master_pack-android/opencv/modules/core/src/mathfuncs_core.dispatch.cpp", "void cv::hal::fastAtan64f(const double *, const double *, double *, int, bool)", "void cv::hal::fastAtan2(const float *, const float *, float *, int, bool)", "void cv::hal::magnitude32f(const float *, const float *, float *, int)", "void cv::hal::magnitude64f(const double *, const double *, double *, int)", "void cv::hal::invSqrt32f(const float *, float *, int)", "void cv::hal::invSqrt64f(const double *, double *, int)", "void cv::hal::sqrt32f(const float *, float *, int)", "void cv::hal::sqrt64f(const double *, double *, int)", "void cv::hal::exp32f(const float *, float *, int)", "void cv::hal::exp64f(const double *, double *, int)", "void cv::hal::log32f(const float *, float *, int)", "void cv::hal::log64f(const double *, double *, int)", "24TegraRowOp_phase_InvokerIKffE", "28TegraRowOp_magnitude_InvokerIKffE", "type == B.type()", "gemm", "(type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "a_size.width == len", "a_size.height == len", "C.type() == type", "(((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", "void cv::transform(cv::InputArray, cv::OutputArray, cv::InputArray)", "scn == m.cols || scn + 1 == m.cols", "transform", "void cv::perspectiveTransform(cv::InputArray, cv::OutputArray, cv::InputArray)", "perspectiveTransform", "void cv::scaleAdd(cv::InputArray, double, cv::InputArray, cv::OutputArray)", "scaleAdd", "src1.size == src2.size", "void cv::calcCovarMatrix(const cv::Mat *, int, cv::Mat &, cv::Mat &, int, int)", "calcCovarMatrix", "nsamples > 0", "_mean.size() == size", "data[i].size() == size", "data[i].type() == type", "void cv::calcCovarMatrix(cv::InputArray, cv::OutputArray, cv::InputOutputArray, int, int)", "src.size() > 0", "(*each).size() == size", "(*each).type() == type", "((flags & CV_COVAR_ROWS) != 0) ^ ((flags & CV_COVAR_COLS) != 0)", "double cv::Mahalanobis(cv::InputArray, cv::InputArray, cv::InputArray)", "type == v2.type()", "Mahalanobis", "type == icovar.type()", "sz == v2.size()", "len == icovar.rows && len == icovar.cols", "void cv::mulTransposed(cv::InputArray, cv::OutputArray, bool, cv::InputArray, double, int)", "mulTransposed", "delta.channels() == 1", "(delta.rows == src.rows || delta.rows == 1)", "(delta.cols == src.cols || delta.cols == 1)", "double cv::Mat::dot(cv::InputArray) const", "mat.type() == type()", "mat.size == size", "(D.rows == ((flags & 1) == 0 ? A.rows : A.cols))", "cvGEMM", "(D.cols == ((flags & 2) == 0 ? B.cols : B.rows))", "D.type() == A.type()", "dst.depth() == src.depth()", "cvTransform", "dst.channels() == m.rows", "dst.type() == src.type()", "cvPerspectiveTransform", "dst.channels() == m.rows-1", "src1.size == dst.size", "cvScaleAdd", "vecarr != 0", "cvCalcCovarMatrix", "count >= 1", "(evals0.cols == 1 || evals0.rows == 1)", "cvCalcPCA", "ecount0 <= ecount", "evects0.cols == evects.cols", "evects0.rows == ecount0", "mean0.data == mean.data", "dst.cols <= evects.rows", "cvProjectPCA", "dst.rows == data.rows", "dst.rows <= evects.rows", "dst.cols == data.cols", "dst0.data == dst.data", "data.cols <= evects.rows", "cvBackProjectPCA", "data.rows <= evects.rows", "void cv::gemmImpl(cv::Mat, cv::Mat, double, cv::Mat, double, cv::Mat, int)", "gemmImpl", "sz[i] <= (size_t)INT_MAX", "download", "/build/master_pack-android/opencv/modules/core/src/matrix.cpp", "upload", "virtual void cv::MatAllocator::copy(cv::UMatData *, cv::UMatData *, int, const size_t *, const size_t *, const size_t *, const size_t *, const size_t *, bool) const", "0 <= _dims && _dims <= CV_MAX_DIM", "setSize", "0 <= d && d <= CV_MAX_DIM && _sizes", "u != 0", "step[dims-1] == (size_t)CV_ELEM_SIZE(flags)", "m.dims >= 2", "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", "m.dims <= 2", "ranges", "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", "(int)ranges.size() == d", "diag", "nelems <= (size_t)size.p[0]", "pop_back", "(int)nelems >= 0", "reserve", "nelems <= size_t(INT_MAX)*size_t(INT_MAX)", "reserveBuffer", "resize", "Pushed vector length is not equal to matrix row length", "push_back", "Pushed vector type is not the same as matrix type", "dims <= 2 && step[0] > 0", "locateROI", "adjustROI", "_cn >= 0 && _newndims > 0 && _newndims <= CV_MAX_DIM && _newsz", "_cn <= CV_CN_MAX", "_newsz[i] >= 0", "Copy dimension (which has zero size) is not present in source matrix", "Requested and source matrices have different count of elements", "Reshaping of n-dimensional non-continuous matrices is not supported yet", "d.cols == 1 || d.rows == 1", "cv::Size cv::getContinuousSize2D(cv::Mat &, int)", "m1.dims", "cv::Size cv::getContinuousSize2D(cv::Mat &, cv::Mat &, int)", "m2.dims", "total_sz", "m2.total()", "is_m1_vector", "getContinuousSize2D", "is_m2_vector", "m1.cols == m2.cols && m1.rows == m2.rows", "cv::Size cv::getContinuousSize2D(cv::Mat &, cv::Mat &, cv::Mat &, int)", "m3.dims", "m3.total()", "is_m3_vector", "m1.cols == m2.cols && m1.rows == m2.rows && m1.cols == m3.cols && m1.rows == m3.rows", "total <= step[i]", "u->urefcount == 0", "deallocate", "u->refcount == 0", "N2cv12MatAllocatorE", "N2cv25DummyBufferPoolControllerE", "N2cv20BufferPoolControllerE", "N2cv15StdMatAllocatorE", "cvIplImage", "/build/master_pack-android/opencv/modules/core/src/matrix_c.cpp", "COI is not supported by the function", "cvarrToMat", "total > 0 && CV_ELEM_SIZE(seq->flags) == esz", "Unknown array type", "CV_IS_IMAGE(arr)", "extractImageCOI", "insertImageCOI", "ch.size == mat.size && ch.depth() == mat.depth() && 0 <= coi && coi < mat.channels()", "src.rows == dst.cols && src.cols == dst.rows && src.type() == dst.type()", "cvTranspose", "srcA.size() == dst.size() && srcA.type() == dst.type()", "cvCrossProduct", "The reduced dimensionality index is out of range", "cvReduce", "The output array size is incorrect", "Input and output arrays must have the same number of channels", "The function only supports 32sC1 and 32fC1 datatypes", "cvRange", "src.size() == idx.size() && idx.type() == CV_32S && src.data != idx.data", "cvSort", "idx0.data == idx.data", "src.size() == dst.size() && src.type() == dst.type()", "!centers.empty()", "cvKMeans2", "centers.rows == cluster_count", "centers.cols == data.cols", "centers.depth() == data.depth()", "labels.isContinuous() && labels.type() == CV_32S && (labels.cols == 1 || labels.rows == 1) && labels.cols + labels.rows - 1 == data.rows", "img->dataOrder == IPL_DATA_ORDER_PIXEL", "iplImageToMat", "img->dataOrder == IPL_DATA_ORDER_PIXEL || img->roi->coi != 0", "/build/master_pack-android/opencv/modules/core/src/matrix_decomp.cpp", "int cv::hal::LU64f(double *, size_t, int, double *, size_t, int)", "bool cv::hal::Cholesky32f(float *, size_t, int, float *, size_t, int)", "bool cv::hal::Cholesky64f(double *, size_t, int, double *, size_t, int)", "int cv::hal::QR32f(float *, size_t, int, int, int, float *, size_t, float *)", "int cv::hal::QR64f(double *, size_t, int, int, int, double *, size_t, double *)", "/build/master_pack-android/opencv/modules/core/src/matrix_expressions.cpp", "virtual void cv::MatOp::add(const cv::MatExpr &, const cv::Scalar &, cv::MatExpr &) const", "virtual void cv::MatOp::subtract(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp::subtract(const cv::Scalar &, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp::multiply(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &, double) const", "virtual void cv::MatOp::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "virtual void cv::MatOp::divide(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &, double) const", "virtual void cv::MatOp::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp::abs(const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp::transpose(const cv::MatExpr &, cv::MatExpr &) const", "virtual int cv::MatOp::type(const cv::MatExpr &) const", "cv::MatExpr cv::min(const cv::Mat &, const cv::Mat &)", "cv::MatExpr cv::min(const cv::Mat &, double)", "cv::MatExpr cv::min(double, const cv::Mat &)", "cv::MatExpr cv::max(const cv::Mat &, const cv::Mat &)", "cv::MatExpr cv::max(const cv::Mat &, double)", "cv::MatExpr cv::max(double, const cv::Mat &)", "cv::MatExpr cv::abs(const cv::Mat &)", "cv::MatExpr cv::abs(const cv::MatExpr &)", "int cv::MatExpr::type() const", "CV_MAT_CN(_type) == e.a.channels()", "assign", "virtual void cv::MatOp_AddEx::add(const cv::MatExpr &, const cv::Scalar &, cv::MatExpr &) const", "virtual void cv::MatOp_AddEx::subtract(const cv::Scalar &, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_AddEx::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "virtual void cv::MatOp_AddEx::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_AddEx::transpose(const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_AddEx::abs(const cv::MatExpr &, cv::MatExpr &) const", "Unknown operation", "virtual void cv::MatOp_Bin::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "virtual void cv::MatOp_Bin::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_T::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "virtual void cv::MatOp_T::transpose(const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_GEMM::add(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_GEMM::subtract(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "virtual void cv::MatOp_GEMM::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "virtual void cv::MatOp_GEMM::transpose(const cv::MatExpr &, cv::MatExpr &) const", "Invalid matrix initializer type", "virtual void cv::MatOp_Initializer::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "cv::MatExpr cv::Mat::t() const", "cv::MatExpr cv::Mat::inv(int) const", "cv::MatExpr cv::Mat::mul(cv::InputArray, double) const", "static cv::MatExpr cv::Mat::zeros(int, int, int)", "static cv::MatExpr cv::Mat::zeros(cv::Size, int)", "static cv::MatExpr cv::Mat::zeros(int, const int *, int)", "static cv::MatExpr cv::Mat::ones(int, int, int)", "static cv::MatExpr cv::Mat::ones(cv::Size, int)", "static cv::MatExpr cv::Mat::ones(int, const int *, int)", "static cv::MatExpr cv::Mat::eye(int, int, int)", "static cv::MatExpr cv::Mat::eye(cv::Size, int)", "N2cv14MatOp_IdentityE", "N2cv5MatOpE", "N2cv11MatOp_AddExE", "N2cv9MatOp_BinE", "N2cv9MatOp_CmpE", "N2cv10MatOp_GEMME", "N2cv12MatOp_InvertE", "N2cv7MatOp_TE", "N2cv11MatOp_SolveE", "N2cv17MatOp_InitializerE", "_arrays && (_ptrs || _planes)", "/build/master_pack-android/opencv/modules/core/src/matrix_iterator.cpp", "narrays <= 1000", "arrays[i] != 0", "A.size == arrays[i0]->size", "A.step[d-1] == A.elemSize()", "m != 0 && _idx", "/build/master_pack-android/opencv/modules/core/src/matrix_operations.cpp", "src[i].dims <= 2 && src[i].rows == src[0].rows && src[i].type() == src[0].type()", "hconcat", "void cv::hconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::hconcat(cv::InputArray, cv::OutputArray)", "void cv::vconcat(const cv::Mat *, size_t, cv::OutputArray)", "src[i].dims <= 2 && src[i].cols == src[0].cols && src[i].type() == src[0].type()", "vconcat", "void cv::vconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::vconcat(cv::InputArray, cv::OutputArray)", "void cv::setIdentity(cv::InputOutputArray, const cv::Scalar &)", "_m.dims() <= 2", "setIdentity", "cv::Scalar cv::trace(cv::InputArray)", "void cv::transpose(cv::InputArray, cv::OutputArray)", "_src.dims() <= 2 && esz <= 32", "transpose", "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", "dst.cols == dst.rows", "void cv::completeSymm(cv::InputOutputArray, bool)", "m.dims <= 2 && m.rows == m.cols", "completeSymm", "dims <= 2 && m.dims <= 2 && size() == m.size() && tp == m.type() && ((rows == 3 && cols == 1) || (cols*channels() == 3 && rows == 1))", "cross", "void cv::reduce(cv::InputArray, cv::OutputArray, int, int, int)", "reduce", "op == CV_REDUCE_SUM || op == CV_REDUCE_MAX || op == CV_REDUCE_MIN || op == CV_REDUCE_AVG", "Unsupported combination of input and output array formats", "void cv::sort(cv::InputArray, cv::OutputArray, int)", "src.dims <= 2 && src.channels() == 1", "void cv::sortIdx(cv::InputArray, cv::OutputArray, int)", "sortIdx", "sortIdx_", "/build/master_pack-android/opencv/modules/core/src/matrix_sparse.cpp", "_sizes[i] > 0", "hdr && hdr->dims == 1", "hdr && hdr->dims == 2", "hdr && hdr->dims == 3", "erase", "double cv::norm(const cv::SparseMat &, int)", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2", "norm", "it.ptr", "Only 32f and 64f are supported", "void cv::minMaxLoc(const cv::SparseMat &, double *, double *, int *, int *)", "minMaxLoc", "void cv::normalize(const cv::SparseMat &, cv::SparseMat &, double, int)", "getConvertElem", "getConvertScaleElem", "getMat_", "/build/master_pack-android/opencv/modules/core/src/matrix_wrap.cpp", "0 <= i && i < (int)vv.size()", "0 <= i && i < (int)v.size()", "0 <= i && i < sz.height", "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", "You should explicitly call download method for cuda::GpuMat object", "Unknown/unsupported array type", "getUMat", "getMatVector", "getUMatVector", "You should explicitly call mapDevice/unmapDevice methods for ogl::Buffer object", "getGpuMat", "getGpuMat is available only for cuda::GpuMat and cuda::HostMem", "k == OPENGL_BUFFER", "getOGlBuffer", "sizend", "(flags & FIXED_TYPE) != 0", "i >= 0 && (size_t)i < vv.size()", "isContinuous", "i > 0 && i < sz.height", "isSubmatrix", "step", "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", "!fixedType() || ((Mat*)obj)->type() == mtype", "!fixedSize() || ((UMat*)obj)->size.operator()() == _sz", "!fixedType() || ((UMat*)obj)->type() == mtype", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == _sz", "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz", "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype", "!fixedSize() || ((cuda::HostMem*)obj)->size() == _sz", "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype", "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)", "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)", "!fixedType() && !fixedSize()", "CV_MAT_TYPE(mtype) == m.type()", "m.dims == d", "m.size[j] == sizes[j]", "mtype == type0 || (CV_MAT_CN(mtype) == 1 && ((1 << type0) & fixedDepthMask) != 0)", "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", "d == 2 && sz.area() == sizes[0]*sizes[1]", "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", "!fixedSize() || len == vv.size()", "mtype == type0 || (CV_MAT_CN(mtype) == CV_MAT_CN(type0) && ((1 << type0) & fixedDepthMask) != 0)", "!fixedSize() || len == ((std::vector<uchar>*)v)->size() / esz", "Vectors with element size %d are not supported. Please, modify OutputArray::create()\n", "create() called for the missing output array", "!fixedSize() || len == len0", "v[j].empty()", "release", "getMatRef", "k == STD_VECTOR_MAT || k == STD_ARRAY_MAT", "k == UMAT", "getUMatRef", "k == STD_VECTOR_UMAT", "k == CUDA_GPU_MAT", "getGpuMatRef", "k == STD_VECTOR_CUDA_GPU_MAT", "getGpuMatVecRef", "getOGlBufferRef", "k == CUDA_HOST_MEM", "getHostMemRef", "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", "this_v.size() == v.size()", "cv::Scalar cv::mean(cv::InputArray, cv::InputArray)", "/build/master_pack-android/opencv/modules/core/src/mean.cpp", "mask.empty() || mask.type() == CV_8U", "cn <= 4 && func != 0", "void cv::meanStdDev(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::InputArray)", "!_src.empty()", "meanStdDev", "_mask.empty() || _mask.type() == CV_8UC1", "dst.type() == CV_64F && dst.isContinuous() && (dst.cols == 1 || dst.rows == 1) && dcn >= cn", "/build/master_pack-android/opencv/modules/core/src/merge.cpp", "void cv::merge(const cv::Mat *, size_t, cv::OutputArray)", "mv && n > 0", "merge", "mv[i].size == mv[0].size && mv[i].depth() == depth", "0 < cn && cn <= CV_CN_MAX", "void cv::merge(cv::InputArrayOfArrays, cv::OutputArray)", "vecmerge_", "27TegraRowOp_combine2_InvokerIKllE", "27TegraRowOp_combine3_InvokerIKllE", "27TegraRowOp_combine4_InvokerIKllE", "void cv::minMaxIdx(cv::InputArray, double *, double *, int *, int *, cv::InputArray)", "/build/master_pack-android/opencv/modules/core/src/minmax.cpp", "(cn == 1 && (_mask.empty() || _mask.type() == CV_8U)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", "minMaxIdx", "void cv::minMaxLoc(cv::InputArray, double *, double *, cv::Point *, cv::Point *, cv::InputArray)", "/build/master_pack-android/opencv/modules/core/src/norm.cpp", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == CV_8U)", "double cv::norm(cv::InputArray, cv::InputArray, int, cv::InputArray)", "_src1.sameSize(_src2) && _src1.type() == _src2.type()", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src1.type() == CV_8U)", "double cv::PSNR(cv::InputArray, cv::InputArray, double)", "PSNR", "/build/master_pack-android/opencv/modules/core/src/ocl.cpp", "void cv::ocl::setUseOpenCL(bool)", "cl_khr_image2d_from_buffer", "setUseSVM", "no OpenCL platform available!", "attachContext", "getProfilingQueue", "_flags == LOCAL || _flags == CONSTANT || _m != NULL", "KernelArg", "m.isContinuous()", "_globalsize != NULL", "total > 0", "clEnqueueNDRangeKernel('%s', dims=%d, globalsize=%zux%zux%zu, localsize=%s) sync=%s", "%zux%zux%zu", "p && p->handle && !p->isInProgress", "runProfiling", "q.ptr()", "source", "p->kind_ == Impl::PROGRAM_SOURCE_CODE", "p->sourceAddr_ == NULL", "Removed method: ProgramSource::hash()", "hash", "binary", "fromBinary", "fromSPIR", "OpenCV build without OpenCL support", "Removed API", "getPrefix", "getBinary", "getProg", "convertFromBuffer", "CL_MEM_OBJECT_BUFFER == mem_type", "CL_MEM_OBJECT_IMAGE2D == mem_type", "convertFromImage", "p && d < (int)p->devices.size()", "getDevice", "uchar", "uchar2", "uchar3", "uchar4", "uchar8", "uchar16", "ushort", "ushort2", "ushort3", "ushort4", "ushort8", "ushort16", "int2", "int3", "int4", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "half", "half2", "half3", "half4", "half8", "half16", "result", "typeToStr", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "memopTypeToStr", "vecopTypeToStr", "noconvert", "convert_%s", "convert_%s%s_rte", "convert_%s_sat", "CL_SUCCESS", "CL_DEVICE_NOT_FOUND", "CL_DEVICE_NOT_AVAILABLE", "CL_COMPILER_NOT_AVAILABLE", "CL_MEM_OBJECT_ALLOCATION_FAILURE", "CL_OUT_OF_RESOURCES", "CL_OUT_OF_HOST_MEMORY", "CL_PROFILING_INFO_NOT_AVAILABLE", "CL_MEM_COPY_OVERLAP", "CL_IMAGE_FORMAT_MISMATCH", "CL_IMAGE_FORMAT_NOT_SUPPORTED", "CL_BUILD_PROGRAM_FAILURE", "CL_MAP_FAILURE", "CL_MISALIGNED_SUB_BUFFER_OFFSET", "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST", "CL_COMPILE_PROGRAM_FAILURE", "CL_LINKER_NOT_AVAILABLE", "CL_LINK_PROGRAM_FAILURE", "CL_DEVICE_PARTITION_FAILED", "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", "CL_INVALID_VALUE", "CL_INVALID_DEVICE_TYPE", "CL_INVALID_PLATFORM", "CL_INVALID_DEVICE", "CL_INVALID_CONTEXT", "CL_INVALID_QUEUE_PROPERTIES", "CL_INVALID_COMMAND_QUEUE", "CL_INVALID_HOST_PTR", "CL_INVALID_MEM_OBJECT", "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR", "CL_INVALID_IMAGE_SIZE", "CL_INVALID_SAMPLER", "CL_INVALID_BINARY", "CL_INVALID_BUILD_OPTIONS", "CL_INVALID_PROGRAM", "CL_INVALID_PROGRAM_EXECUTABLE", "CL_INVALID_KERNEL_NAME", "CL_INVALID_KERNEL_DEFINITION", "CL_INVALID_KERNEL", "CL_INVALID_ARG_INDEX", "CL_INVALID_ARG_VALUE", "CL_INVALID_ARG_SIZE", "CL_INVALID_KERNEL_ARGS", "CL_INVALID_WORK_DIMENSION", "CL_INVALID_WORK_GROUP_SIZE", "CL_INVALID_WORK_ITEM_SIZE", "CL_INVALID_GLOBAL_OFFSET", "CL_INVALID_EVENT_WAIT_LIST", "CL_INVALID_EVENT", "CL_INVALID_OPERATION", "CL_INVALID_GL_OBJECT", "CL_INVALID_BUFFER_SIZE", "CL_INVALID_MIP_LEVEL", "CL_INVALID_GLOBAL_WORK_SIZE", "CL_INVALID_PROPERTY", "CL_INVALID_IMAGE_DESCRIPTOR", "CL_INVALID_COMPILER_OPTIONS", "CL_INVALID_LINKER_OPTIONS", "CL_INVALID_DEVICE_PARTITION_COUNT", "CL_INVALID_PIPE_SIZE", "CL_INVALID_DEVICE_QUEUE", "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR", "CL_PLATFORM_NOT_FOUND_KHR", "CL_INVALID_D3D10_DEVICE_KHR", "CL_INVALID_D3D10_RESOURCE_KHR", "CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR", "CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR", "Unknown OpenCL error", "kernelToStr", " -D %s=%s", "COEFF", "vectorWidths", "checkOptimalVectorWidth", "src1.isMat() || src1.isUMat()", "src2.isMat() || src2.isUMat()", "src3.isMat() || src3.isUMat()", "src4.isMat() || src4.isUMat()", "src5.isMat() || src5.isUMat()", "src6.isMat() || src6.isUMat()", "src7.isMat() || src7.isUMat()", "src8.isMat() || src8.isUMat()", "src9.isMat() || src9.isUMat()", "-D %s_T=%s -D %s_T1=%s -D %s_CN=%d -D %s_TSIZE=%d -D %s_T1SIZE=%d -D %s_DEPTH=%d", "OPENCV_OPENCL_FORCE", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "stop", "durationNS", "cl_intel_subgroups", "Iris", "OPENCV_OPENCL_DEVICE_MAX_WORK_GROUP_SIZE", "OpenCL: using workgroup size: ", " (was ", "nu < MAX_ARRS && m.u && m.u->urefcount > 0", "addUMat", "updateHash", "!codeStr_.empty()", "Internal error", "%08jx", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "reservedEntries_.empty()", "~OpenCLBufferPoolBaseImpl", "entry.capacity_ != 0", "_releaseBufferEntry", "entry.clBuffer_ != NULL", "_allocateBufferEntry", "_findAndRemoveEntryFromAllocatedList(entry, buffer)", "u->origdata", "deallocate_", "u->mapcount == 0", "u->origdata == data", "u->originalUMatData->data == data", "u->origdata == NULL", "data == 0", "u->origdata != 0", "u->refcount == 0 && \"UMat deallocation error: some derived Mat is still alive\"", "u->handle != 0", "u && u->handle", "u->refcount == 1", "u->mapcount++ == 0", "unmap", "u->data != NULL", "u->mapcount-- == 1", "dims <= 3", "checkContinuous", "u->refcount == 0 || u->tempUMat()", "dst->refcount == 0", "HOST_ALLOC", "getBufferPoolController(): unknown BufferPool ID\n", "getBufferPoolController", "OpenCL runtime not found!", "isFormatSupported", "DIG(", "N2cv3ocl15OpenCLAllocatorE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl16OpenCLBufferPoolIP7_cl_memEE", "cn == 2 || cn == 3 || cn == 4", "setVertexArray", "/build/master_pack-android/opencv/modules/core/src/opengl.cpp", "setColorArray", "setNormalArray", "depth == CV_8S || depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "cn >= 1 && cn <= 4", "setTexCoordArray", "OpenCV was build without OpenGL support", "initializeContextFromGL", "convertToGLTexture2D", "convertFromGLTexture2D", "unmapGLBuffer", "throw_no_ogl", "N2cv9FormatterE", "[],[]", "NSt6__ndk120__shared_ptr_emplaceIN2cv16DefaultFormatterENS_9allocatorIS2_EEEE", "N2cv16DefaultFormatterE", "N2cv13FormatterBaseE", "FormattedImpl", "/build/master_pack-android/opencv/modules/core/src/out.cpp", "%%.%dg", "\n(:, :, %d) = \n", "uint8", "uint16", "float32", "float64", "array([", "], dtype='%s')", "NSt6__ndk120__shared_ptr_emplaceIN2cv13FormattedImplENS_9allocatorIS2_EEEE", "N2cv13FormattedImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv15MatlabFormatterENS_9allocatorIS2_EEEE", "N2cv15MatlabFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12CSVFormatterENS_9allocatorIS2_EEEE", "N2cv12CSVFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv15PythonFormatterENS_9allocatorIS2_EEEE", "N2cv15PythonFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14NumpyFormatterENS_9allocatorIS2_EEEE", "N2cv14NumpyFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10CFormatterENS_9allocatorIS2_EEEE", "N2cv10CFormatterE", "!flag && \"OpenVX support isn't enabled at compile time\"", "setUseOpenVX", "/build/master_pack-android/opencv/modules/core/src/ovx.cpp", "parallel_for", "/build/master_pack-android/opencv/modules/core/src/parallel.cpp", "range.start", "range.end", "nstripes", "OPENCV_FOR_THREADS_NUM", "parallel_for_body", "/sys/devices/system/cpu/possible", "%d-%d", "N2cv16ParallelLoopBodyE", "N12_GLOBAL__N_113ProxyLoopBodyE", "N12_GLOBAL__N_123ParallelLoopBodyWrapperE", "N3tbb10interface78internal18delegated_functionIN12_GLOBAL__N_113ProxyLoopBodyEvEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN12_GLOBAL__N_113ProxyLoopBodyEKNS_16auto_partitionerEEE", "N3tbb8internal9no_assignE", "N3tbb10interface78internal13delegate_baseE", "N3tbb10interface98internal9flag_taskE", "OPENCV_THREAD_POOL_ACTIVE_WAIT_PAUSE_LIMIT", "OPENCV_THREAD_POOL_ACTIVE_WAIT_WORKER", "OPENCV_THREAD_POOL_ACTIVE_WAIT_MAIN", "OPENCV_THREAD_POOL_ACTIVE_WAIT_THREADS_LIMIT", "Failed to initialize ThreadPool (pthreads)", "/build/master_pack-android/opencv/modules/core/src/parallel_impl.cpp", "j.current_task >= j.range.size()", "job->is_completed", "\t\t\t\tBUG! Job: ", "!is_completed", "execute", ": Can't create thread mutex: res = ", ": Can't create thread condition variable: res = ", ": Can't spawn new thread: res = ", "NSt6__ndk120__shared_ptr_pointerIPN2cv12WorkerThreadENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12WorkerThreadEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv11ParallelJobENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv11ParallelJobEEE", "data.channels() == 1", "operator()", "/build/master_pack-android/opencv/modules/core/src/pca.cpp", "_mean.size() == mean_sz", "fs.isOpened()", "!fn.empty()", "(String)fn[\"name\"] == \"PCA\"", "retainedVariance > 0 && retainedVariance <= 1", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && mean.cols == data.cols) || (mean.cols == 1 && mean.rows == data.rows))", "project", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && eigenvectors.rows == data.cols) || (mean.cols == 1 && eigenvectors.rows == data.rows))", "backProject", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, int)", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray, int)", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, double)", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray, double)", "void cv::PCAProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::PCABackProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "%.16e", ".Nan", "-.Inf", "%.4e", "%.8e", "%d%c", "Invalid data type specification", "decodeFormat", "/build/master_pack-android/opencv/modules/core/src/persistence.cpp", "Too long data type specification", "Too complex format for the matrix", "decodeSimpleFormat", "Invalid filename", "getDefaultObjectName", "Extra closing '%c'", "The closing '%c' does not match the opening '%c'", "!fs_impl->write_stack.empty()", "Incorrect element name %s; should start with a letter or '_'", "Invalid fs.state", "isMap()", "operator[]", "key2 < fs->p->str_hash_data.size()", "0 <= i && i < sz", "keys", "tp == STRING || tp == SEQ || tp == MAP", "rawSize", "p != 0", "setValue", "current_type == NONE || current_type == type", "Only scalar types can be dynamically assigned to a file node", "_ofs >= 0", "operator+=", "maxsz % esz == 0", "readRaw", "Unsupported type", "readRawData can only be used to read plain sequences of numbers", "depth >=0 && depth <= CV_64F", "typeSymbol", "symbolToType", "NULL or empty filename", "FileStorage::APPEND and FileStorage::MEMORY are not currently compatible", "Appending data to compressed file is not implemented", ".xml", ".xml.gz", ".json", ".json.gz", "UTF-16", "UTF-16 XML encoding is not supported! Use 8-bit encoding\n", "strlen(encoding) < 1000", "<?xml version=\"1.0\" encoding=\"%s\"?>\n", "<?xml version=\"1.0\"?>\n", "<opencv_storage>\n", "</opencv_storage>", "Could not find </opencv_storage> in the end of file.\n", "file != 0", " <!-- resumed -->", "%YAML:1.0\n---\n", "...\n---\n", "fmt == FileStorage::FORMAT_JSON", "Could not find '}' in the end of file.\n", "%YAML", "<?xml", "Input file is empty", "Unsupported file storage format", "!fs_data_ptrs.empty()", "j < maxCount - 1 && \"OpenCV persistence doesn't support very long lines\"", "gets", "sz < (size_t)(maxCount - 1) && \"OpenCV persistence doesn't support very long lines\"", "The storage is not opened", "write_mode", "startWriteStruct", "Some collection type: FileNode::SEQ or FileNode::MAP must be specified", "type_id", "endWriteStruct", "!write_stack.empty()", "</opencv_storage>\n", "writeRawData", "len % elemSize == 0", "Null data pointer", "writeComment", "nameofs < str_hash_data.size()", "getName", "blockIdx < fs_data_ptrs.size()", "getNodePtr", "ofs < fs_data_blksz[blockIdx]", "blockIdx == fs_data_ptrs.size()-1", "reserveNodeSpace", "ofs <= fs_data_blksz[blockIdx]", "ofs == fs_data_blksz[blockIdx]", "normalizeNodeOfs", "Too long string or a last string w/o newline", "written_len <= (int)buffer.size()", "resizeWriteBuffer", "ptr >= bufferstart && ptr <= bufferEnd()", "setBufferPtr", "getCurrentStruct", "type == FileNode::SEQ || type == FileNode::MAP", "convertToCollection", "type == FileNode::SEQ", "The node of type %d cannot be converted to collection", "addNode", "Map element should have a name", "Sequence element should not have name (use <_></_>)", "processSpecialDouble", "Bad format of floating-point constant", "!base64decoder.endOfStream()", "parseBase64", "ofs <= sz", "readMore", "!parser.empty() && ptr", "%s(%d): %s", "N2cv15FileStorage_APIE", "N2cv11FileStorageE", "ucwsifdh", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIhNS_9allocatorIhEEEENS2_IS4_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11FileStorage4ImplENS_9allocatorIS3_EEEE", "N2cv11FileStorage4ImplE", "?456789:;<=", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JSONEmitterENS_9allocatorIS2_EEEE", "N2cv11JSONEmitterE", "N2cv18FileStorageEmitterE", "Some collection type - FileNode::SEQ or FileNode::MAP, must be specified", "/build/master_pack-android/opencv/modules/core/src/persistence_json.cpp", "FileNode::isCollection(struct_flags)", "Null string pointer", "The written string is too long", "The key is an empty", "writeScalar", "The key is too long", "An attempt to add element without a key to a map, or add element with key to sequence", "Key must start with a letter or _", "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", "Null comment", "parse", "left-brace of top level is missing", "Unexpected End-Of-File", "skipSpaces", "Not supported escape character", "Invalid character in the stream", "Abort at parse time", "parseMap", "ptr is NULL", "'{' - left-brace of map is missing", "Unexpected character", "'}' - right-brace of map is missing", "parseKey", "Key must start with '\"'", "OpenCV persistence doesn't support very long lines", "Key must end with '\"'", "Missing ':' between key and value", "Key is empty", "parseValue", "$base64$", "base64 data is not supported", "'\\uXXXX' currently not supported", "Invalid escape character", "'\"' - right-quote of string is missing", "Invalid numeric value (inconsistent explicit type specification?)", "Value 'null' is not supported by this parser", "Unrecognized value", "parseSeq", "'[' - left-brace of seq is missing", "']' - right-brace of seq is missing", "getBase64Row", "Currently, JSON parser does not support base64 data", "NSt6__ndk120__shared_ptr_emplaceIN2cv10JSONParserENS_9allocatorIS2_EEEE", "N2cv10JSONParserE", "N2cv17FileStorageParserE", "opencv-nd-matrix", "opencv-sparse-matrix", "it.node() != 0", "/build/master_pack-android/opencv/modules/core/src/persistence_types.cpp", "!dt.empty()", "!sizes_node.empty()", "!data_node.empty()", "nelems == m.total()*m.channels()", "data.isSeq()", "n.isInt()", "idx_k >= 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv10XMLEmitterENS_9allocatorIS2_EEEE", "N2cv10XMLEmitterE", "writeTag", "/build/master_pack-android/opencv/modules/core/src/persistence_xml.cpp", "A single _ is a reserved tag name", "Closing tag should not include any attributes", "Key should start with a letter or _", "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", "nattr % 2 == 0", "apos", "quot", "#x%02x", "elements with keys can not be written to sequence", "Double hyphen '--' is not allowed in the comments", "<!-- %s -->", "<!--", "\n<!-- next stream -->\n", "Valid XML should start with '<?xml ...?>'", "opencv_storage", "<opencv_storage> tag is missing", "</opencv_storage> tag is missing", "fs->eof()", "Comments are not allowed here", "parseTag", "Unexpected end of the stream", "Tag should start with '<'", "Unknown tag type", "Name should start with a letter or underscore", "Closing tag should not contain any attributes", "Attribute name should be followed by '='", "Attribute value should be put into single or double quotes", "Unexpected end of line", "type_name.empty()", "Invalid closing tag for <?xml ...", "There should be space between attributes", "Directive tags are not allowed here", "Empty tags are not supported", "tag_type == CV_XML_OPENING_TAG", "Mismatched closing tag", "There should be space between literals", "Literal \" is not allowed within a string. Use &quot;", "Closing \" is expected", "Literal ' or > are not allowed. Use &apos; or &gt;", "Invalid numeric value in the string", "Invalid character in the symbol entity name", "Too long string literal", "NSt6__ndk120__shared_ptr_emplaceIN2cv9XMLParserENS_9allocatorIS2_EEEE", "N2cv9XMLParserE", "N2cv11YAMLEmitterE", "/build/master_pack-android/opencv/modules/core/src/persistence_yml.cpp", "!!binary |", "!!%s %c", "!!%s", "%YAML:1.", "%YAML 1.", "Unsupported YAML version (it must be 1.x)", "The YAML streams must start with '---', except the first one", "Invalid or unsupported syntax", "Only collections as YAML streams are supported by this parser", "Incorrect indentation", "Tabs are prohibited in YAML!", "Invalid character", "<tag:yaml.org,2002:", "Empty type name", "The wrong closing bracket", "Missing , between the elements", "Complex keys are not supported", "Multi-line text literals are not supported", "Block sequence elements must be preceded with '-'", "Key may not start with '-'", "Missing ':'", "An empty key", "NSt6__ndk120__shared_ptr_emplaceIN2cv10YAMLParserENS_9allocatorIS2_EEEE", "N2cv10YAMLParserE", "fill", "/build/master_pack-android/opencv/modules/core/src/rand.cpp", "_param1.channels() == 1 && (_param1.rows == 1 || _param1.cols == 1) && (_param1.rows + _param1.cols - 1 == cn || _param1.rows + _param1.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))", "_param2.channels() == 1 && (((_param2.rows == 1 || _param2.cols == 1) && (_param2.rows + _param2.cols - 1 == cn || _param2.rows + _param2.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))) || (_param2.rows == cn && _param2.cols == cn && disttype == NORMAL))", "scaleFunc != 0", "Unknown distribution type", "void cv::randu(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "void cv::randn(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "void cv::randShuffle(cv::InputOutputArray, double, cv::RNG *)", "dst.elemSize() <= 32", "randShuffle", "_arr.dims <= 2", "randShuffle_", "void cv::split(const cv::Mat &, cv::Mat *)", "split", "void cv::split(cv::InputArray, cv::OutputArrayOfArrays)", "!_mv.fixedType() || _mv.empty() || _mv.type() == m.depth()", "vecsplit_", "25TegraRowOp_split2_InvokerIKllE", "25TegraRowOp_split3_InvokerIKllE", "25TegraRowOp_split4_InvokerIKllE", "int cv::hal::normHamming(const uchar *, int)", "/build/master_pack-android/opencv/modules/core/src/stat.dispatch.cpp", "int cv::hal::normHamming(const uchar *, const uchar *, int)", "0 < coi && coi <= 4", "cvSum", "/build/master_pack-android/opencv/modules/core/src/stat_c.cpp", "cvAvg", "cvAvgSdv", "cv::Scalar cv::sum(cv::InputArray)", "/build/master_pack-android/opencv/modules/core/src/sum.cpp", "OpenCV(%s) %s:%d: error: (%d:%s) in function '%s'\n%s", "OpenCV(%s) %s:%d: error: (%d:%s) %s in function '%s'\n", "OpenCV(%s) %s:%d: error: (%d:%s) %s%s", "\nGeneral configuration for OpenCV 4.0.1 =====================================\n  Version control:               4.0.1\n\n  Platform:\n    Timestamp:                   2018-12-22T07:41:15Z\n    Host:                        Linux 4.15.0-42-generic x86_64\n    Target:                      Android 1 aarch64\n    CMake:                       3.6.0-rc2\n    CMake generator:             Ninja\n    CMake build tool:            /opt/android/android-sdk.gradle/cmake/3.6.4111459/bin/ninja\n    Configuration:               Release\n\n  CPU/HW features:\n    Baseline:                    NEON FP16\n\n  C/C++:\n    Built as dynamic libs?:      NO\n    C++ Compiler:                /opt/android/android-ndk-r18b/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++  (ver 7.0)\n    C++ flags (Release):         -isystem /opt/android/android-ndk-r18b/sysroot/usr/include/aarch64-linux-android -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -Wa,--noexecstack -Wformat -Werror=format-security -std=c++11    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Winconsistent-missing-override -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Qunused-arguments    -fvisibility=hidden -fvisibility-inlines-hidden  -O2 -DNDEBUG   -DNDEBUG\n    C++ flags (Debug):           -isystem /opt/android/android-ndk-r18b/sysroot/usr/include/aarch64-linux-android -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -Wa,--noexecstack -Wformat -Werror=format-security -std=c++11    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Winconsistent-missing-override -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Qunused-arguments    -fvisibility=hidden -fvisibility-inlines-hidden  -O0 -fno-limit-debug-info   -DDEBUG -D_DEBUG -g\n    C Compiler:                  /opt/android/android-ndk-r18b/toolchains/llvm/prebuilt/linux-x86_64/bin/clang\n    C flags (Release):           -isystem /opt/android/android-ndk-r18b/sysroot/usr/include/aarch64-linux-android -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -Wa,--noexecstack -Wformat -Werror=format-security    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Winconsistent-missing-override -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Qunused-arguments    -fvisibility=hidden -fvisibility-inlines-hidden  -O2 -DNDEBUG   -DNDEBUG\n    C flags (Debug):             -isystem /opt/android/android-ndk-r18b/sysroot/usr/include/aarch64-linux-android -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -Wa,--noexecstack -Wformat -Werror=format-security    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Winconsistent-missing-override -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-unnamed-type-template-args -Wno-comment -fdiagnostics-show-option -Qunused-arguments    -fvisibility=hidden -fvisibility-inlines-hidden  -O0 -fno-limit-debug-info   -DDEBUG -D_DEBUG -g\n    Linker flags (Release):      -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a -nostdlib++ --sysroot /opt/android/android-ndk-r18b/platforms/android-21/arch-arm64 -Wl,--build-id -Wl,--warn-shared-textrel -Wl,--fatal-warnings -L/opt/android/android-ndk-r18b/sources/cxx-stl/llvm-libc++/libs/arm64-v8a -Wl,--no-undefined -Wl,-z,noexecstack -Qunused-arguments -Wl,-z,relro -Wl,-z,now    \n    Linker flags (Debug):        -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a -nostdlib++ --sysroot /opt/android/android-ndk-r18b/platforms/android-21/arch-arm64 -Wl,--build-id -Wl,--warn-shared-textrel -Wl,--fatal-warnings -L/opt/android/android-ndk-r18b/sources/cxx-stl/llvm-libc++/libs/arm64-v8a -Wl,--no-undefined -Wl,-z,noexecstack -Qunused-arguments -Wl,-z,relro -Wl,-z,now    \n    ccache:                      YES\n    Precompiled headers:         NO\n    Extra dependencies:          z dl m log\n    3rdparty dependencies:       tbb libcpufeatures libprotobuf libjpeg-turbo libwebp libpng libtiff libjasper IlmImf quirc tegra_hal\n\n  OpenCV modules:\n    To be built:                 calib3d core dnn features2d flann highgui imgcodecs imgproc java java_bindings_generator ml objdetect photo stitching video videoio\n    Disabled:                    world\n    Disabled by dependency:      -\n    Unavailable:                 gapi js python2 python3 ts\n    Applications:                -\n    Documentation:               NO\n    Non-free algorithms:         NO\n\n  Android NDK:                   /opt/android/android-ndk-r18b (ver 18.1.5063045)\n    Android ABI:                 arm64-v8a\n    NDK toolchain:               aarch64-linux-android-clang\n    STL type:                    c++_static\n    Native API level:            21\n  Android SDK:                   /opt/android/android-sdk.gradle (tools: 26.1.1 build tools: 28.0.3)\n\n  GUI: \n\n  Media I/O: \n    ZLib:                        z (ver 1.2.7)\n    JPEG:                        build-libjpeg-turbo (ver 1.5.3-62)\n    WEBP:                        build (ver encoder: 0x020e)\n    PNG:                         build (ver 1.6.35)\n    TIFF:                        build (ver 42 - 4.0.9)\n    JPEG 2000:                   build (ver 1.900.1)\n    OpenEXR:                     build (ver 1.7.1)\n    HDR:                         YES\n    SUNRASTER:                   YES\n    PXM:                         YES\n    PFM:                         YES\n\n  Video I/O:\n\n  Parallel framework:            TBB (ver 2018.0 interface 10001)\n\n  Trace:                         YES (built-in)\n\n  Other third-party libraries:\n    Custom HAL:                  YES (carotene (ver 0.0.1))\n    Protobuf:                    build (3.5.1)\n\n  Python (for build):            /usr/bin/python2.7\n\n  Java:                          export all functions\n    ant:                         NO\n    Java wrappers:               YES\n    Java tests:                  NO\n\n  Install to:                    /build/master_pack-android/build/o4a/install\n-----------------------------------------------------------------\n\n", "len >= 0 && \"Check format string for errors\"", "/build/master_pack-android/opencv/modules/core/src/system.cpp", "OPENCV_TEMP_PATH", "/data/local/tmp/__opencv_temp.XXXXXX", "No Error", "Backtrace", "Unspecified error", "Insufficient memory", "Bad argument", "Iterations do not converge", "Autotrace call", "Incorrect size of input array", "Null pointer", "Division by zero occurred", "Image step is wrong", "Inplace operation is not supported", "Requested object was not found", "Input image depth is not supported by function", "Formats of input arguments do not match", "Sizes of input arguments do not match", "One of arguments' values is out of range", "Unsupported format or combination of formats", "Input COI is not supported", "Bad number of channels", "Bad flag (parameter or structure field)", "Bad parameter of type CvPoint", "Bad type of mask argument", "Parsing error", "The function/feature is not implemented", "Memory block has been corrupted", "Assertion failed", "No CUDA support", "Gpu API call", "No OpenGL support", "OpenGL API call", "Unknown %s code %d", "status", "pthread_key_create(&tlsKey, NULL) == 0", "pthread_key_delete(tlsKey) == 0", "~TlsAbstraction", "pthread_setspecific(tlsKey, pData) == 0", "key_ == -1", "~TLSDataContainer", "key_ != -1 && \"Can't fetch data from terminated TLS container.\"", "getData", "OPENCV_DUMP_CONFIG", "\nOpenCV build configuration is:\n%s\n", "SSE2", "SSSE3", "SSE4.1", "SSE4.2", "POPCNT", "AVX2", "FMA3", "AVX512F", "AVX512BW", "AVX512CD", "AVX512DQ", "AVX512ER", "AVX512IFMA", "AVX512PF", "AVX512VBMI", "AVX512VL", "NEON", "VSX3", "AVX512-SKX", "OPENCV_CPU_DISABLE", "feature.size() > 0", "readSettings", "OPENCV: Trying to disable baseline CPU feature: '%s'. This has very limited effect, because code optimizations for this feature are executed unconditionally in the most cases.\n", "OPENCV: Trying to disable unavailable CPU feature on the current platform: '%s'.\n", "OPENCV: Trying to disable unknown CPU feature: '%s'.\n", "Unknown feature", "OpenCV(%s) Error: %s (%s) in %s, file %s, line %d", "unknown function", "cv::error()", "tlsSlotsSize == tlsSlots.size()", "reserveSlot", "gather", "tlsSlotsSize > slotIdx", "releaseSlot", "setData", "True", "TRUE", "False", "FALSE", "Invalid value for parameter ", "N2cv9ExceptionE", "N2cv16TLSDataContainerE", "N2cv7TLSDataINS_12_GLOBAL__N_18ThreadIDEEE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "N2cv10ParseErrorE", "N2cv7TLSDataINS_5instr11NodeDataTlsEEE", "OPENCV_TRACE_DEPTH_OPENCV", "OPENCV_TRACE_MAX_CHILDREN_OPENCV", "OPENCV_TRACE_MAX_CHILDREN", "OPENCV_TRACE_LOCATION", "OpenCVTrace", "OpenCV parent region exceeds children count. Bailout", "Parent region exceeds children count. Bailout", "Region location is disabled. Bailout", "<unknown>", "%s-%03d.txt", "#thread file: %s\n", "Trace: Total events: ", "Trace: Total skipped events: ", "ctx.dummy_stack_top.region == NULL", "parallelForSetRootRegion", "/build/master_pack-android/opencv/modules/core/src/trace.cpp", "ctx.stack.empty()", "region->pImpl", "traceArg", "l,%lld,\"%s\",%d,\"%s\",0x%llX\n", "b,%d,%lld,%lld,%lld", ",parentThread=%d,parent=%lld", "e,%d,%lld,%lld,%lld,%lld", ",skip=%d", "#description: OpenCV trace file", "#version: 1.0", "getRef", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/utility.hpp", "                                                               ", "N2cv5utils5trace7details17AsyncTraceStorageE", "N2cv5utils5trace7details12TraceStorageE", "NSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_filebufIcNS_11char_traitsIcEEEE", "N2cv5utils5trace7details16SyncTraceStorageE", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details17AsyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details17AsyncTraceStorageEEE", "N2cv7TLSDataINS_5utils5trace7details23TraceManagerThreadLocalEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details16SyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details16SyncTraceStorageEEE", "/build/master_pack-android/opencv/modules/core/src/types.cpp", "keypointIndexes has element < 0. TODO: process this case", "static void cv::KeyPoint::convert(const std::vector<Point2f> &, std::vector<KeyPoint> &, float, float, int, int)", "std::fabs(vecs[0].ddot(vecs[1])) * a <= FLT_EPSILON * 9 * x * (norm(vecs[0]) * norm(vecs[1]))", "RotatedRect", "~UMatData", "/build/master_pack-android/opencv/modules/core/src/umatrix.cpp", "data == datastart", "Exception: %s\n", "u->data != 0 && \"Error mapping of UMat to host memory.\"", "getMat", "!u->deviceCopyObsolete() || u->copyOnMap()", "void cv::UMat::copyTo(cv::OutputArray) const", "dst.u", "void cv::UMat::copyTo(cv::OutputArray, cv::InputArray) const", "void cv::UMat::convertTo(cv::OutputArray, int, double, double) const", "cv::UMat &cv::UMat::setTo(cv::InputArray, cv::InputArray)", "double cv::UMat::dot(cv::InputArray) const", "m.sameSize(*this) && m.type() == type()", "usage_count == 0", "usage_count == 1", "N2cv7TLSDataINS_18UMatDataAutoLockerEEE", "OPENCV_DATA_PATH", "utils::findDataFile('%s', %s)", "... Line %d: trying open '%s'", "_HINT", "utils::findDataFile(): trying ", "_HINT=", "_HINT is specified but it is not a directory: ", "utils::findDataFile(): can't find data file via ", " configuration override: ", "/build/master_pack-android/build/o4a", "utils::findDataFile(): the current directory is build sub-directory: ", "../../opencv/", "utils::findDataFile(): <build>/", "modules/core/include/opencv2/core/version.hpp", "utils::findDataFile(): the current directory is source sub-directory: ", "utils::findDataFile(): <source>", "Detected module path: '", "utils::findDataFile(): the binary module directory is build sub-directory: ", "../../../etc", "utils::findDataFile(): trying install path (from binary path): ", "utils::findDataFile(): ... skip, not a valid directory: ", "/build/master_pack-android/build/o4a/install", "sdk/etc", "utils::findDataFile(): trying install path: ", "cv::utils::findDataFile('%s', %s, %s)", "OpenCV: Can't find required data file: %s", "findDataFile", "/build/master_pack-android/opencv/modules/core/src/utils/datafile.cpp", "[VERB", "isSubDirectory(): base: ", "  path: ", "  => result: ", "NSt6__ndk120__shared_ptr_pointerIPNS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEENS_14default_deleteIS9_EENS5_IS9_EEEE", "NSt6__ndk114default_deleteINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEE", "bool cv::utils::fs::exists(const cv::String &)", "/build/master_pack-android/opencv/modules/core/src/utils/filesystem.cpp", "Can't remove directory: ", "Can't remove file: ", "cv::String cv::utils::fs::getcwd()", "bool cv::utils::fs::createDirectory(const cv::String &)", "pImpl->lock()", "pImpl->unlock()", "unlock", "pImpl->lock_shared()", "pImpl->unlock_shared()", "unlock_shared", "Specified non-existed directory, creating OpenCV sub-directory for caching purposes: ", "Can't create OpenCV cache sub-directory: ", "cache_path.empty() || utils::fs::isDirectory(cache_path)", "getCacheDirectory", "handle != -1", "cv::samples::findFile('%s', %s)", "OPENCV_SAMPLES_DATA_PATH", "cv::samples::findFile('", "') => '", "OpenCV samples: Can't find required data file: %s", "findFile", "/build/master_pack-android/opencv/modules/core/src/utils/samples.cpp", "samples/data", "OpenCV was build without VA support (libva)", "initializeContextFromVA", "/build/master_pack-android/opencv/modules/core/src/va_intel.cpp", "convertToVASurface", "convertFromVASurface", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl16small_any_policyIjEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl14big_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N7cvflann7anyimpl21typed_base_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N7cvflann7anyimpl9empty_anyE", "[empty_any]", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "NSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk121__basic_string_commonILb1EEE", "[WARNING] The cvflann::set_distance_type function is deperecated, use cv::flann::GenericIndex<Distance> instead.", "[ERROR] cvflann::set_distance_type only provides backwards compatibility for the L1 and L2 distances. For other distance types you must use cv::flann::GenericIndex<Distance>", "branching", "iterations", "centers_init", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "multi_probe_level", "checks", "sorted", "virtual void cv::flann::Index::build(cv::InputArray, const cv::flann::IndexParams &, cvflann::flann_distance_t)", "/build/master_pack-android/opencv/modules/flann/src/miniflann.cpp", "Unknown/unsupported distance type", "build", "virtual void cv::flann::Index::release()", "virtual void cv::flann::Index::knnSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, int, const cv::flann::SearchParams &)", "knnSearch", "virtual int cv::flann::Index::radiusSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, double, int, const cv::flann::SearchParams &)", "maxResults > 0", "radiusSearch", "LSH index does not support radiusSearch operation", "virtual void cv::flann::Index::save(const cv::String &) const", "Can not open file %s for writing FLANN index\n", "Reading FLANN index error: the saved data size (%d, %d) or type (%d) is different from the passed one (%d, %d), %d\n", "Reading FLANN index error: unsupported feature type %d for the index type %d\n", "Reading FLANN index error: unsupported distance type %d\n", "Invalid index file, cannot read", "FLANN_INDEX", "Invalid index file, wrong signature", "/build/master_pack-android/opencv/modules/flann/include/opencv2/flann/general.h", "buildIndex_", "Only continuous arrays are supported", "I can only search one feature at a time for range search\n", "Missing parameter '", "' in the parameters given", "Datatype of saved index is different than of the one to be created.", "The index saved belongs to a different dataset", "Unknown index type", "Unknown algorithm for choosing initial centers.", "Branching factor must be at least 2", "Failed to allocate memory.\n", "Cannot read from file", "Invalid key_size (=%d). Valid values for your system are %d <= key_size < %d.", "initialize", "/build/master_pack-android/opencv/modules/flann/include/opencv2/flann/lsh_table.h", "leaf_max_size", "reorder", "It doesn't make any sense to use more than one tree for exact search", "Building kmeans tree...\n", "Building kdtree tree...\n", "Autotuned parameters:\n", "Search parameters:\n", "Entering autotuning, dataset size: %d, sampleSize: %d, testSampleSize: %d, target precision: %g\n", "Choosing linear, dataset too small\n", "Computing ground truth... \n", "Autotuning parameters...\n", "KMEANS, Step 1: Exploring parameter space\n", "KMeansTree using params: max_iterations=%d, branching=%d\n", "KMeansTree buildTime=%g, searchTime=%g, build_weight=%g\n", "  Nodes  Precision(%)   Time(s)   Time/vec(ms)  Mean dist\n", "---------------------------------------------------------\n", "Got as close as I can\n", "Start linear estimation\n", "No need for linear estimation\n", "matches.cols=%d, nn=%d\n", "Ground truth is not computed for as many neighbors as requested", "%8d %10.4g %10.5g %10.5g %10.5g\n", "KD-TREE, Step 1: Exploring parameter space\n", "KDTree using params: trees=%d\n", "KDTree buildTime=%g, searchTime=%g\n", "Computing ground truth\n", "Estimating number of checks\n", "KMeans algorithm, estimating cluster border factor\n", "Optimum cb_index: %g\n", "Required number of checks: %d \n", "LSH is not implemented for that type", "(size_t)knn <= index_->size()", "runKnnSearch_", "query.type() == type && indices.type() == CV_32S && dists.type() == dtype", "query.isContinuous() && indices.isContinuous() && dists.isContinuous()", "runRadiusSearch_", "1.6.10", "DataType<ElementType>::type == data.type() && data.isContinuous()", "loadIndex_", "N2cv5flann5IndexE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann5IndexINS_7HammingIhEEEE", "N7cvflann7NNIndexINS_7HammingIhEEEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann9ResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann11LinearIndexINS_7HammingIhEEEE", "N7cvflann27HierarchicalClusteringIndexINS_7HammingIhEEEE", "N7cvflann8LshIndexINS_7HammingIhEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann9ResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann12KNNResultSetIfEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "/build/master_pack-android/opencv/modules/imgproc/src/accum.cpp", "_src.sameSize(_dst) && dcn == scn", "accumulate", "_mask.empty() || (_src.sameSize(_mask) && _mask.type() == CV_8U)", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "accumulateSquare", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "_src1.sameSize(_src2) && stype == _src2.type()", "accumulateProduct", "_src1.sameSize(_dst) && dcn == scn", "_mask.empty() || (_src1.sameSize(_mask) && _mask.type() == CV_8U)", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "accumulateWeighted", "CV_IS_SEQ_CHAIN_CONTOUR( chain )", "icvApproximateChainTC89", "/build/master_pack-android/opencv/modules/imgproc/src/approx.cpp", "header_size >= (int)sizeof(CvContour)", "cvApproxChains", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "npoints >= 0 && (depth == CV_32S || depth == CV_32F)", "approxPolyDP", "Unsupported sequence type", "cvApproxPoly", "NULL storage pointer ", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "Input curves are not polygonal. Use cvApproxChains first", "Input curves have unknown type", "New header size must be non-less than sizeof(CvContour)", "Unknown approximation method", "Accuracy must be non-negative", "CV_SEQ_ELTYPE(src_seq) == CV_32SC2 || CV_SEQ_ELTYPE(src_seq) == CV_32FC2", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "/build/master_pack-android/opencv/modules/imgproc/src/bilateral_filter.cpp", "Bilateral filtering is only implemented for 8u and 32f images", "bilateralFilter", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.data != dst.data", "bilateralFilter_8u", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.data != dst.data", "bilateralFilter_32f", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "/build/master_pack-android/opencv/modules/imgproc/src/blend.cpp", "depth == CV_8U || depth == CV_32F", "blendLinear", "size == _src2.size() && size == _weights1.size() && size == _weights2.size()", "type == _src2.type() && _weights1.type() == CV_32FC1 && _weights2.type() == CV_32FC1", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "`ACV_MAT_CN(sumType) == CV_MAT_CN(srcType)", "getRowSumFilter", "/build/master_pack-android/opencv/modules/imgproc/src/box_filter.cpp", "Unsupported combination of source format (=%d), and buffer format (=%d)", "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)", "getColumnSumFilter", "Unsupported combination of sum format (=%d), and destination format (=%d)", "void cv::boxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "void cv::blur(cv::InputArray, cv::OutputArray, cv::Size, cv::Point, int)", "void cv::sqrBoxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "getSqrRowSumFilter", "sumCount == ksize-1", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIhiEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIhiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumItdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumItdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIsdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIsdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIfdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIfdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIddEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhtEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhtEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumItiEENS_9allocatorIS3_EEEE", "N2cv6RowSumItiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumItdEENS_9allocatorIS3_EEEE", "N2cv6RowSumItdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIsiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIsiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIiiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIiiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIsdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIsdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIfdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIfdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIddEENS_9allocatorIS3_EEEE", "N2cv6RowSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIihEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIihEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIthEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIthEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdhEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdhEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIitEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIitEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdtEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdtEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIisEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIisEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdsEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdsEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIiiEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIiiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIifEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIifEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdfEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdfEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIidEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIidEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIddEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12FilterEngineENS_9allocatorIS2_EEEE", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "/build/master_pack-android/opencv/modules/imgproc/src/canny.cpp", "(_dst.getObj() != _src.getObj() || _src.type() == CV_8UC1) && \"Inplace parameters are not supported\"", "Aperture size should be odd between 3 and 7", "global_hysteresis", "finalPass", "void cv::Canny(cv::InputArray, cv::InputArray, cv::OutputArray, double, double, bool)", "_dx.dims() == 2", "_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3", "_dy.type() == _dx.type()", "_dx.sameSize(_dy)", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "cvCanny", "virtual void cv::parallelCanny::operator()(const cv::Range &) const", "N2cv13parallelCannyE", "N2cv9finalPassE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_110CLAHE_ImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_110CLAHE_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEE", "N2cv5CLAHEE", "virtual void (anonymous namespace)::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "/build/master_pack-android/opencv/modules/imgproc/src/clahe.cpp", "_src.type() == CV_8UC1 || _src.type() == CV_16UC1", "cvtColorTwoPlane", "/build/master_pack-android/opencv/modules/imgproc/src/color.cpp", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "cvtColor", "src.depth() == dst.depth()", "cvCvtColor", "0Aa\u000b6;", "/build/master_pack-android/opencv/modules/imgproc/src/color_hsv.cpp", "void cv::hal::cvtHSVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "hrange == 180 || hrange == 256", "RGB2HSV_b", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2HSV_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2HSV_b]", "/build/master_pack-android/opencv/modules/imgproc/src/color.hpp", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2HSV_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2HSV_f]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2HLS_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2HLS_b]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2HLS_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2HLS_f]", "virtual void cv::CvtColorLoop_Invoker<cv::HSV2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::HSV2RGB_b]", "virtual void cv::CvtColorLoop_Invoker<cv::HSV2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::HSV2RGB_f]", "virtual void cv::CvtColorLoop_Invoker<cv::HLS2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::HLS2RGB_b]", "virtual void cv::CvtColorLoop_Invoker<cv::HLS2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::HLS2RGB_f]", "CvtHelper", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<3, -1, -1>, cv::Set<0, 5, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<3, -1, -1>, VDepth = cv::Set<0, 5, -1>, sizePolicy = cv::NONE]", "Invalid number of channels in input image", "VScn::contains(scn)", "Invalid number of channels in output image", "VDcn::contains(dcn)", "Unsupported depth of input image", "VDepth::contains(depth)", "cv::CvtHelper<cv::Set<3, -1, -1>, cv::Set<3, 4, -1>, cv::Set<0, 5, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, -1, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, 5, -1>, sizePolicy = cv::NONE]", "30TegraCvtColor_rgb2hsvf_Invoker", "29TegraCvtColor_rgb2hsv_Invoker", "30TegraCvtColor_bgr2hsvf_Invoker", "29TegraCvtColor_bgr2hsv_Invoker", "31TegraCvtColor_rgbx2hsvf_Invoker", "30TegraCvtColor_rgbx2hsv_Invoker", "31TegraCvtColor_bgrx2hsvf_Invoker", "30TegraCvtColor_bgrx2hsv_Invoker", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "/build/master_pack-android/opencv/modules/imgproc/src/color_lab.cpp", "void cv::hal::cvtXYZtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "void cv::hal::cvtBGRtoLab(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "void cv::hal::cvtLabtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "RGB2Lab_b", "c[0] >= 0 && c[1] >= 0 && c[2] >= 0 && c[0] + c[1] + c[2] < softfloat((int)LAB_CBRT_TAB_SIZE)", "RGB2Lab_f", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && softfloat(coeffs[i*3]) + softfloat(coeffs[i*3+1]) + softfloat(coeffs[i*3+2]) < softfloat(1.5f)", "RGB2Luvfloat", "whitePt[1] == softdouble::one()", "Luv2RGBfloat", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2XYZ_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2XYZ_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<ushort>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2XYZ_f<float> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_f<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::XYZ2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::XYZ2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<ushort>]", "virtual void cv::CvtColorLoop_Invoker<cv::XYZ2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_f<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Lab_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2Lab_b]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Lab_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2Lab_f]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Luv_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2Luv_b]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Luv_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2Luv_f]", "virtual void cv::CvtColorLoop_Invoker<cv::Lab2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::Lab2RGB_b]", "virtual void cv::CvtColorLoop_Invoker<cv::Lab2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::Lab2RGB_f]", "virtual void cv::CvtColorLoop_Invoker<cv::Luv2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::Luv2RGB_b]", "virtual void cv::CvtColorLoop_Invoker<cv::Luv2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::Luv2RGB_f]", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<3, -1, -1>, cv::Set<0, 2, 5>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<3, -1, -1>, VDepth = cv::Set<0, 2, 5>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<3, -1, -1>, cv::Set<3, 4, -1>, cv::Set<0, 2, 5>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, -1, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, 2, 5>, sizePolicy = cv::NONE]", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "/build/master_pack-android/opencv/modules/imgproc/src/color_rgb.cpp", "void cv::hal::cvtBGRtoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "void cv::hal::cvtBGR5x5toBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "void cv::hal::cvtBGRtoGray(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "void cv::hal::cvtGraytoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int)", "void cv::hal::cvtBGR5x5toGray(const uchar *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cvtGraytoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::cvtRGBAtoMultipliedRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "void cv::hal::cvtMultipliedRGBAtoRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "coeffs[0] + coeffs[1] + coeffs[2] == (1 << shift)", "RGB2Gray", "srccn == 3 || srccn == 4", "RGB2RGB", "dstcn == 3 || dstcn == 4", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::RGB2RGB<unsigned char>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::RGB2RGB<unsigned short>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::RGB2RGB<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::RGB2RGB5x5]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB5x52RGB>::operator()(const cv::Range &) const [Cvt = cv::RGB5x52RGB]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Gray<uchar> >::operator()(const cv::Range &) const [Cvt = cv::RGB2Gray<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Gray<ushort> >::operator()(const cv::Range &) const [Cvt = cv::RGB2Gray<ushort>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2Gray<float> >::operator()(const cv::Range &) const [Cvt = cv::RGB2Gray<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::Gray2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::Gray2RGB<unsigned char>]", "virtual void cv::CvtColorLoop_Invoker<cv::Gray2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::Gray2RGB<unsigned short>]", "virtual void cv::CvtColorLoop_Invoker<cv::Gray2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::Gray2RGB<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB5x52Gray>::operator()(const cv::Range &) const [Cvt = cv::RGB5x52Gray]", "virtual void cv::CvtColorLoop_Invoker<cv::Gray2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::Gray2RGB5x5]", "virtual void cv::CvtColorLoop_Invoker<cv::RGBA2mRGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::RGBA2mRGBA<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::mRGBA2RGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::mRGBA2RGBA<uchar>]", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<3, 4, -1>, cv::Set<0, 2, 5>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, 2, 5>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<2, -1, -1>, cv::Set<0, -1, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<2, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<2, -1, -1>, cv::Set<3, 4, -1>, cv::Set<0, -1, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<2, -1, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<1, -1, -1>, cv::Set<0, 2, 5>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<1, -1, -1>, VDepth = cv::Set<0, 2, 5>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<1, -1, -1>, cv::Set<3, 4, -1>, cv::Set<0, 2, 5>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<1, -1, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, 2, 5>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<2, -1, -1>, cv::Set<1, -1, -1>, cv::Set<0, -1, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<2, -1, -1>, VDcn = cv::Set<1, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<1, -1, -1>, cv::Set<2, -1, -1>, cv::Set<0, -1, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<1, -1, -1>, VDcn = cv::Set<2, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::NONE]", "cv::CvtHelper<cv::Set<4, -1, -1>, cv::Set<4, -1, -1>, cv::Set<0, -1, -1>, cv::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<4, -1, -1>, VDcn = cv::Set<4, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::NONE]", "29TegraCvtColor_rgb2bgr_Invoker", "30TegraCvtColor_rgb2bgrx_Invoker", "30TegraCvtColor_rgb2rgbx_Invoker", "30TegraCvtColor_rgbx2bgr_Invoker", "30TegraCvtColor_rgbx2rgb_Invoker", "31TegraCvtColor_rgbx2bgrx_Invoker", "32TegraCvtColor_rgb2bgr565_Invoker", "32TegraCvtColor_rgb2rgb565_Invoker", "33TegraCvtColor_rgbx2bgr565_Invoker", "33TegraCvtColor_rgbx2rgb565_Invoker", "30TegraCvtColor_rgb2gray_Invoker", "30TegraCvtColor_bgr2gray_Invoker", "31TegraCvtColor_rgbx2gray_Invoker", "31TegraCvtColor_bgrx2gray_Invoker", "30TegraCvtColor_gray2rgb_Invoker", "31TegraCvtColor_gray2rgbx_Invoker", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "/build/master_pack-android/opencv/modules/imgproc/src/color_yuv.cpp", "void cv::hal::cvtYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "cvtTwoPlaneYUVtoBGR", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar *, const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "void cv::hal::cvtThreePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "cvtThreePlaneYUVtoBGR", "void cv::hal::cvtBGRtoThreePlaneYUV(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "void cv::hal::cvtBGRtoTwoPlaneYUV(const uchar *, size_t, uchar *, uchar *, size_t, int, int, int, bool, int)", "void cv::hal::cvtOnePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int, int)", "cvtOnePlaneYUVtoBGR", "_src.channels() == 2 && _src.depth() == CV_8U", "cvtColorYUV2Gray_ch", "dcn == 3 || dcn == 4", "cvtColorTwoPlaneYUV2BGRpair", "ysz.width == uvs.width * 2 && ysz.height == uvs.height * 2", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2YCrCb_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::RGB2YCrCb_i<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2YCrCb_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::RGB2YCrCb_i<ushort>]", "virtual void cv::CvtColorLoop_Invoker<cv::RGB2YCrCb_f<float> >::operator()(const cv::Range &) const [Cvt = cv::RGB2YCrCb_f<float>]", "virtual void cv::CvtColorLoop_Invoker<cv::YCrCb2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::YCrCb2RGB_i<uchar>]", "virtual void cv::CvtColorLoop_Invoker<cv::YCrCb2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::YCrCb2RGB_i<ushort>]", "virtual void cv::CvtColorLoop_Invoker<cv::YCrCb2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::YCrCb2RGB_f<float>]", "cv::CvtHelper<cv::Set<3, 4, -1>, cv::Set<1, -1, -1>, cv::Set<0, -1, -1>, cv::TO_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<3, 4, -1>, VDcn = cv::Set<1, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::TO_YUV]", "sz.width % 2 == 0 && sz.height % 2 == 0", "cv::CvtHelper<cv::Set<1, -1, -1>, cv::Set<1, -1, -1>, cv::Set<0, -1, -1>, cv::FROM_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<1, -1, -1>, VDcn = cv::Set<1, -1, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::FROM_YUV]", "sz.width % 2 == 0 && sz.height % 3 == 0", "cv::CvtHelper<cv::Set<1, -1, -1>, cv::Set<3, 4, -1>, cv::Set<0, -1, -1>, cv::FROM_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::Set<1, -1, -1>, VDcn = cv::Set<3, 4, -1>, VDepth = cv::Set<0, -1, -1>, sizePolicy = cv::FROM_YUV]", "31TegraCvtColor_rgb2ycrcb_Invoker", "31TegraCvtColor_bgr2ycrcb_Invoker", "32TegraCvtColor_rgbx2ycrcb_Invoker", "32TegraCvtColor_bgrx2ycrcb_Invoker", "N2cv22RGB888toYUV420pInvokerE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "/build/master_pack-android/opencv/modules/imgproc/src/colormap.cpp", "cv::LUT only supports tables of size 256.", "cv::ColorMap only supports source images of type CV_8UC1 or CV_8UC3", "Unknown colormap id; use one of COLORMAP_*", "applyColorMap", "cv::LUT only supports tables CV_8UC1 or CV_8UC3.", "(x.type() == Y.type()) && (Y.type() == xi.type())", "interp1", "(x.cols == 1) && (x.rows == Y.rows) && (x.cols == Y.cols)", "cv::argsort only sorts 1D matrices.", "cv::sortRowsByIndices only works on integer indices!", "sortMatrixRowsByIndices", "N2cv8colormap6AutumnE", "N2cv8colormap8ColorMapE", "N2cv8colormap4BoneE", "N2cv8colormap4CoolE", "N2cv8colormap3HotE", "N2cv8colormap3HSVE", "N2cv8colormap3JetE", "N2cv8colormap5OceanE", "N2cv8colormap6ParulaE", "N2cv8colormap4PinkE", "N2cv8colormap7RainbowE", "N2cv8colormap6SpringE", "N2cv8colormap6SummerE", "N2cv8colormap6WinterE", "N2cv8colormap12UserColorMapE", "connectedComponents", "/build/master_pack-android/opencv/modules/imgproc/src/connectedcomponents.cpp", "connectedComponentsWithStats", "L.channels() == 1 && I.channels() == 1", "connectedComponents_sub1", "connectivity == 8 || connectivity == 4", "ccltype == CCL_GRANA || ccltype == CCL_WU || ccltype == CCL_DEFAULT", "iDepth == CV_8U || iDepth == CV_8S", "unsupported label/image type", "imgLabels.rows == img.rows", "imgLabels.cols == img.cols", "img.rows == imgLabels.rows", "img.cols == imgLabels.cols", "connectivity == 8", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE10SecondScanE", "cvStartReadChainPoints", "/build/master_pack-android/opencv/modules/imgproc/src/contours.cpp", "cvReadChainPoint", "cvSubstituteContour", "cvFindNextContour", "scanner->img_step >= 0", "par_info != 0", "l_cinfo", "cvEndFindContours", "void cv::findContours(cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", "findContours", "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == CV_32S)", "ci.isContinuous()", "void cv::findContours(cv::InputArray, cv::OutputArrayOfArrays, int, int, cv::Point)", "cvStartFindContours_Impl", "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", "size.height >= 1", "icvTraceContour_32s", "i3 != NULL", "icvTraceContour", "NULL double CvSeq pointer", "cvFindContours_Impl", "Nonzero offset is not supported in CV_LINK_RUNS yet", "icvFindContoursInInterval", "Contour header size must be >= sizeof(CvContour)", "Input array must be 8uC1 or 8sC1", "!_seq || _seq->elem_size == sizeof(_Tp)", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/core_c.h", "NSt6__ndk120__shared_ptr_pointerIP12CvMemStorageN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI12CvMemStorageEE", "/build/master_pack-android/opencv/modules/imgproc/src/convhull.cpp", "_points.getObj() != _hull.getObj()", "convexHull", "total >= 0 && (depth == CV_32F || depth == CV_32S)", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "npoints >= 0", "convexityDefects", "hpoints > 0", "0 <= hcurr && hcurr < npoints", "0 <= hnext && hnext < npoints", "isContourConvex", "cvConvexHull2", "The hull matrix should be continuous and have a single row or a single column", "The hull matrix size might be not enough to fit the hull", "The hull matrix must have the same type as input or 32sC1 (integers)", "Point sequence can not be empty if the output is matrix", "Input sequence is not a sequence of points", "cvConvexityDefects", "Floating-point coordinates are not supported here", "Convex hull must represented as a sequence of indices or sequence of pointers", "Convex hull is neither sequence nor matrix", "The matrix should be 1-dimensional and continuous array of int's", "Convex hull is larger than the point sequence", "hull_next != NULL && hull_cur != NULL", "Input sequence must be polygon (closed 2d curve)", "cvCheckContourConvexity", "Destination is not CvMemStorage* nor CvMat*", "isStorageOrMat", "/build/master_pack-android/opencv/modules/imgproc/src/precomp.hpp", "void cv::cornerMinEigenVal(cv::InputArray, cv::OutputArray, int, int, int)", "/build/master_pack-android/opencv/modules/imgproc/src/corner.cpp", "void cv::cornerHarris(cv::InputArray, cv::OutputArray, int, int, double, int)", "void cv::cornerEigenValsAndVecs(cv::InputArray, cv::OutputArray, int, int, int)", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "type == CV_8UC1 || type == CV_32FC1", "preCornerDetect", "src.size() == dst.size() && dst.type() == CV_32FC1", "cvCornerMinEigenVal", "cvCornerHarris", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "cvCornerEigenValsAndVecs", "cvPreCornerDetect", "src.type() == CV_8UC1 || src.type() == CV_32FC1", "cornerEigenValsVecs", "p9void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "/build/master_pack-android/opencv/modules/imgproc/src/cornersubpix.cpp", "cornerSubPix", "win.width > 0 && win.height > 0", "src.cols >= win.width*2 + 5 && src.rows >= win.height*2 + 5", "/build/master_pack-android/opencv/modules/imgproc/src/demosaicing.cpp", "depth == CV_8U || depth == CV_16U", "demosaicing", "!src.empty()", "scn == 1 && dcn == 1", "Bayer->Gray demosaicing only supports 8u and 16u types", "scn == 1 && (dcn == 3 || dcn == 4)", "Bayer->RGB demosaicing only supports 8u and 16u types", "scn == 1 && dcn == 3", "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", "Unknown / unsupported color conversion code", "N2cv18Bayer2Gray_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "/build/master_pack-android/opencv/modules/imgproc/src/deriv.cpp", "void cv::Scharr(cv::InputArray, cv::OutputArray, int, int, int, double, double, int)", "void cv::Laplacian(cv::InputArray, cv::OutputArray, int, int, double, double, int)", "src.size() == dst.size() && src.channels() == dst.channels()", "cvSobel", "cvLaplace", "getScharrKernels", "dx >= 0 && dy >= 0 && dx+dy == 1", "getSobelKernels", "The kernel size must be odd and not larger than 31", "dx >= 0 && dy >= 0 && dx+dy > 0", "ksize > order", "/build/master_pack-android/opencv/modules/imgproc/src/distransform.cpp", "distanceTransform", "labelType == DIST_LABEL_PIXEL || labelType == DIST_LABEL_CCOMP", "Mask size should be 3 or 5 or 0 (precise)", "distType == CV_DIST_C || distType == CV_DIST_L1 || distType == CV_DIST_L2", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, int, int, int)", "trueDistTrans", "src.type() == CV_8UC1 && dst.type() == CV_32FC1", "getDistanceTransformMask", "Unknown metric type", "void cv::distanceTransform_L1_8U(cv::InputArray, cv::OutputArray)", "distanceTransform_L1_8U", "src.type() == CV_8UC1 && dst.type() == CV_8UC1", "distanceATS_L1_8u", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "/build/master_pack-android/opencv/modules/imgproc/src/drawing.cpp", "bool cv::clipLine(cv::Rect, cv::Point &, cv::Point &)", "void cv::ellipse2Poly(cv::Point2d, cv::Size2d, int, int, int, int, std::vector<Point2d> &)", "void cv::line(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int)", "0 < thickness && thickness <= MAX_THICKNESS", "void cv::arrowedLine(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int, double)", "void cv::rectangle(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int)", "rectangle", "void cv::rectangle(cv::InputOutputArray, cv::Rect, const cv::Scalar &, int, int, int)", "void cv::circle(cv::InputOutputArray, cv::Point, int, const cv::Scalar &, int, int, int)", "radius >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "circle", "void cv::ellipse(cv::InputOutputArray, cv::Point, cv::Size, double, double, double, const cv::Scalar &, int, int, int)", "axes.width >= 0 && axes.height >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "void cv::ellipse(cv::InputOutputArray, const cv::RotatedRect &, const cv::Scalar &, int, int)", "box.size.width >= 0 && box.size.height >= 0 && thickness <= MAX_THICKNESS", "void cv::fillConvexPoly(cv::InputOutputArray, const cv::Point *, int, const cv::Scalar &, int, int)", "fillConvexPoly", "void cv::fillPoly(cv::InputOutputArray, const cv::Point **, const int *, int, const cv::Scalar &, int, int, cv::Point)", "pts && npts && ncontours >= 0 && 0 <= shift && shift <= XY_SHIFT", "fillPoly", "void cv::polylines(cv::InputOutputArray, const cv::Point *const *, const int *, int, bool, const cv::Scalar &, int, int, int)", "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "polylines", "void cv::putText(cv::InputOutputArray, const cv::String &, cv::Point, int, double, cv::Scalar, int, int, bool)", "void cv::fillConvexPoly(cv::InputOutputArray, cv::InputArray, const cv::Scalar &, int, int)", "points.checkVector(2, CV_32S) >= 0", "void cv::fillPoly(cv::InputOutputArray, cv::InputArrayOfArrays, const cv::Scalar &, int, int, cv::Point)", "p.checkVector(2, CV_32S) >= 0", "void cv::polylines(cv::InputOutputArray, cv::InputArrayOfArrays, bool, const cv::Scalar &, int, int, int)", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const cv::Scalar &, int, int, cv::InputArray, int, cv::Point)", "0 <= contourIdx && contourIdx < (int)last", "drawContours", "npoints > 0", "hierarchy.total() == ncontours && hierarchy.type() == CV_32SC4", "cvDrawContours", "reader.ptr != NULL", "elem_type == CV_32SC2", "pt1 && pt2", "cvClipLine", "iterator != 0", "cvInitLineIterator", "text != 0 && _font != 0", "cvPutText", "font != 0 && hscale > 0 && vscale > 0 && thickness >= 0", "cvInitFont", "cvGetTextSize", "0 <= shift && shift <= XY_SHIFT && thickness >= 0", "PolyLine", "Unknown font type", "getFontData", "cvCalcEMD2", "/build/master_pack-android/opencv/modules/imgproc/src/emd.cpp", "The array must have equal types", "The signatures must be 32fC1", "The flow matrix size does not match to the signatures' sizes", "The flow matrix must be 32fC1", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "The lower boundary can not be calculated if the cost matrix is used", "The cost matrix size does not match to the signatures' sizes", "The cost matrix must be 32fC1", "In case of user-defined distance Distance function is undefined", "Number of dimensions can be 0 only if a user-defined metric is used", "Bad or unsupported metric type", "float cv::EMD(cv::InputArray, cv::InputArray, int, cv::InputArray, float *, cv::OutputArray)", "signature1 must not contain negative weights", "icvInitEMD", "signature2 must not contain negative weights", "signature1 must contain at least one non-zero value", "signature2 must contain at least one non-zero value", "u != 0 && v != 0", "icvFindBasicVariables", "leave_x != NULL", "icvNewSolution", "cur_x", "/build/master_pack-android/opencv/modules/imgproc/src/featureselect.cpp", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "goodFeaturesToTrack", "_mask.empty() || (_mask.type() == CV_8UC1 && _mask.sameSize(_image))", "_corners && _corner_count", "cvGoodFeaturesToTrack", "/build/master_pack-android/opencv/modules/imgproc/src/filter.cpp", "rowFilter && columnFilter", "bufType == srcType", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "constVal != NULL", "wholeSize.width > 0 && wholeSize.height > 0", "proceed", "src && dst && count > 0", "srcY >= startY", "dstY <= roi.height", "virtual void cv::FilterEngine::apply(const cv::Mat &, cv::Mat &, const cv::Size &, const cv::Point &)", "src.type() == srcType && dst.type() == dstType", "_kernel.channels() == 1", "getKernelType", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "getLinearRowFilter", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "getLinearColumnFilter", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "cn == CV_MAT_CN(_dstType)", "createSeparableLinearFilter", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "preprocess2DKernel", "cn == CV_MAT_CN(dstType) && ddepth >= sdepth", "getLinearFilter", "Unsupported combination of source format (=%d), and destination format (=%d)", "createLinearFilter", "void cv::filter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, double, int)", "void cv::sepFilter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::InputArray, cv::Point, double, int)", "kernelX.type() == kernelY.type() && (kernelX.cols == 1 || kernelX.rows == 1) && (kernelY.cols == 1 || kernelY.rows == 1)", "sepFilter2D", "cvFilter2D", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "SymmColumnVec_32s8u", "SymmColumnSmallVec_32s16s", "SymmColumnSmallVec_32f", "SymmColumnVec_32f16s", "SymmColumnVec_32f", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "normalizeAnchor", "/build/master_pack-android/opencv/modules/imgproc/src/filterengine.hpp", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "SymmRowSmallFilter", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "this->ksize == 3", "SymmColumnSmallFilter", "SymmColumnFilter", "_kernel.type() == DataType<KT>::type", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18SymmRowSmallFilterIhiNS1_21SymmRowSmallVec_8u32sEEENS_9allocatorIS4_EEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18SymmRowSmallFilterIffNS1_19SymmRowSmallVec_32fEEENS_9allocatorIS4_EEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhiNS1_12RowVec_8u32sEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhfNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterItfNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterItdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIsfNS1_13RowVec_16s32fEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIsdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIffNS1_10RowVec_32fEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIfdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIddNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_13FixedPtCastExIihEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIfhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIftEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdtEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIfsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIffEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIddEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_13FixedPtCastExIihEENS1_19SymmColumnVec_32s8uEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_4CastIisEENS1_25SymmColumnSmallVec_32s16sEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_4CastIffEENS1_22SymmColumnSmallVec_32fEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_13FixedPtCastExIihEENS1_19SymmColumnVec_32s8uEEENS_9allocatorIS6_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIfhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIftEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdtEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIisEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIfsEENS1_20SymmColumnVec_32f16sEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIffEENS1_17SymmColumnVec_32fEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIddEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv12FilterEngineENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12FilterEngineEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIfhEENS1_12FilterVec_8uEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIftEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIfsEENS1_15FilterVec_8u16sEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIftEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIfsEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIfNS1_4CastIffEENS1_13FilterVec_32fEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIdNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "/build/master_pack-android/opencv/modules/imgproc/src/floodfill.cpp", "Number of channels in input image must be 1 or 3", "floodFill", "Connectivity must be 4, 0(=4) or 8", "lo_diff and up_diff must be non-negative", "Seed point is outside of image", "mask.rows == size.height+2 && mask.cols == size.width+2", "int cv::floodFill(cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect *, cv::Scalar, cv::Scalar, int)", "/build/master_pack-android/opencv/modules/imgproc/src/gabor.cpp", "/build/master_pack-android/opencv/modules/imgproc/src/generalized_hough.cpp", "cannyLowThresh_ > 0 && cannyLowThresh_ < cannyHighThresh_", "templEdges_.type() == CV_8UC1", "setTemplateImpl", "templDx_.type() == CV_32FC1 && templDx_.size() == templEdges_.size()", "templDy_.type() == templDx_.type() && templDy_.size() == templEdges_.size()", "!hasVotes || voteOutBuf_.size() == oldSize", "filterMinDist", "!hasVotes || voteOutBuf_.size() == posOutBuf_.size()", "imageEdges_.type() == CV_8UC1", "detectImpl", "imageDx_.type() == CV_32FC1 && imageDx_.size() == imageEdges_.size()", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageEdges_.size()", "levels_ > 0", "processTempl", "void (anonymous namespace)::GeneralizedHoughBallardImpl::calcHist()", "calcHist", "imageDx_.type() == CV_32FC1 && imageDx_.size() == imageSize_", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageSize_", "levels_ > 0 && r_table_.size() == static_cast<size_t>(levels_ + 1)", "dp_ > 0.0", "votesThreshold_ > 0", "findPosInHist", "buildFeatureList", "edges.type() == CV_8UC1", "getContourPoints", "dx.type() == CV_32FC1 && dx.size == edges.size", "dy.type() == dx.type() && dy.size == edges.size", "calcOrientation", "templFeatures_.size() == static_cast<size_t>(levels_ + 1)", "imageFeatures_.size() == templFeatures_.size()", "minAngle_ >= 0.0 && minAngle_ < maxAngle_ && maxAngle_ <= 360.0", "angleStep_ > 0.0 && angleStep_ < 360.0", "angleThresh_ > 0", "calcScale", "minScale_ > 0.0 && minScale_ < maxScale_", "scaleStep_ > 0.0", "scaleThresh_ > 0", "calcPosition", "posThresh_ > 0", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_127GeneralizedHoughBallardImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_127GeneralizedHoughBallardImplE", "N12_GLOBAL__N_120GeneralizedHoughBaseE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124GeneralizedHoughGuilImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_124GeneralizedHoughGuilImplE", "N2cv23GeneralizedHoughBallardE", "N2cv16GeneralizedHoughE", "N2cv20GeneralizedHoughGuilE", "cvBoxPoints", "/build/master_pack-android/opencv/modules/imgproc/src/geometry.cpp", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "total >= 0 && (depth == CV_32S || depth == CV_32F)", "pointPolygonTest", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "p1.depth() == CV_32S || p1.depth() == CV_32F", "intersectConvexConvex", "p2.depth() == CV_32S || p2.depth() == CV_32F", "n >= 0 && m >= 0", "temp.ptr<Point2f>() == dst", " |@_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "/build/master_pack-android/opencv/modules/imgproc/src/grabcut.cpp", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "totalSampleCount > 0", "endLearning", "dtrm > std::numeric_limits<double>::epsilon()", "calcInverseCovAndDeterm", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "image is empty", "grabCut", "image must have CV_8UC3 type", "mask is empty", "checkMask", "mask must have CV_8UC1 type", "mask must have as many rows and cols as img", "mask element value must be equal GC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "!bgdSamples.empty() && !fgdSamples.empty()", "initGMMs", "i>=0 && i<(int)vtcs.size()", "addTermWeights", "/build/master_pack-android/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp", "addEdges", "j>=0 && j<(int)vtcs.size()", "w>=0 && revw>=0", "i != j", "minWeight > 0", "maxFlow", "inSourceSegment", "MWRMNV RMVV PSTS", "MWOMOV OMSMUNUPSQ OQSQURUUSVOV", "MXVNTMRMPNOPOSPURVTVVU", "MWOMOV OMRMTNUPUSTURVOV", "MWOMOV OMUM OQSQ OVUV", "MVOMOV OMUM OQSQ", "MXVNTMRMPNOPOSPURVTVVUVR SRVR", "MWOMOV UMUV OQUQ", "PTRMRV", "NUSMSTRVPVOTOS", "MWOMOV UMOS QQUV", "MVOMOV OVUV", "LXNMNV NMRV VMRV VMVV", "MWOMOV OMUV UMUV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWOMOV OMSMUNUQSROR", "MXRMPNOPOSPURVSVUUVSVPUNSMRM STVW", "MWOMOV OMSMUNUQSROR RRUV", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MWRMRV NMVM", "MXOMOSPURVSVUUVSVM", "MWNMRV VMRV", "LXNMPV RMPV RMTV VMTV", "MWOMUV UMOV", "MWNMRQRV VMRQ", "MWUMOV OMUM OVUV", "MVOMOV OMUM", "MWRMNV RMVV NVVV", "MXRMPNOPOSPURVSVUUVSVPUNSMRM QQTR TQQR", "MWRMNV RMVV", "MWOMUM PQTR TQPR OVUV", "MWOMOV UMUV OMUM", "MWOMRQOV OMUM OVUV", "MWNONNOMPMQNRPRV VOVNUMTMSNRP", "LXRMRV PONPNSPTTTVSVPTOPO", "LXRMRV NOOPOSQTSTUSUPVO", "MXOVQVOROPPNRMSMUNVPVRTVVV", "MWSMMV SMUV OSTS", "MWQMNV QMTMVNVPSQPQ SQURUTTURVNV", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "MXQMNV QMUMVOVQUTTURVNV", "MVQMNV QMVM PQSQ NVSV", "MVQMNV QMVM PQSQ", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "MXQMNV WMTV PQUQ", "PUTMQV", "OVUMSSRUQVPVOUOT", "MVQMNV VMOS RQTV", "NVRMOV OVTV", "LYPMMV PMQV XMQV XMUV", "MXQMNV QMTV WMTV", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "MWQMNV QMUMVNVPUQSRPR", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM QVPUPTQSRSSTTVUWVW", "MWQMNV QMUMVNVPUQSRPR QRRUSVTVUU", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "MVSMPV PMVM", "LXPMNSNUOVRVTUUSWM", "MWOMQV WMQV", "KXNMNV SMNV SMSV XMSV", "NWQMTV WMNV", "NWQMSQQV WMSQ", "MWQMWMNVTV", "LXNMRV VMRV NMVM", "MWNLVX", "LXRONU ROVU", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "NWQPTPUQUV URQSPTPUQVSVUU", "MWOMOV OSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVSVUU", "MWUMUV USTQRPPQOSPURVTUUS", "MWOSUSTQRPPQOSPURVTV", "NVUNTMSMRNRV PPTP", "MWUPUVTXRYPY USTQRPPQOSPURVTUUS", "MWOMOV OSPQRPTQUSUV", "PTRLQMRNSMRL RPRV", "PUSLRMSNTMSL SPSXRYQYPX", "NWPMPV UPPT RSUV", "KYMPMV MSNQOPPPQQRSRV RSSQTPUPVQWSWV", "MWOPOV OSPQRPTQUSUV", "MWRPPQOSPURVTUUSTQRP", "MWOPOY OSPURVTUUSTQRPPQOS", "MWUPUY USTQRPPQOSPURVTUUS", "NVPPPV PSQQSPTP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "NVRMRUSVTVUU PPTP", "MWUPUV OPOSPURVTUUS", "NVOPRV UPRV", "LXNPPV RPPV RPTV VPTV", "MWOPUV UPOV", "MWOPRV UPRVQXPYOY", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MXNQOPQPRQRSQW VPURSTQWPY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "NWUQSPQPPQPRQS SSQSPTPUQVSVUU", "NWTMSNSOTP UPSPQQPSPUQVSWSXRYQY", "LXNQOPPPQQQSPV QSRQTPUPVQVSUVTY", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "OVRPQSQURVSVTU", "MWQPOV UPTPRQPS PSQUSVTV", "MWOMPMQNRPUV RPOV", "LYPPMY UPTSSUQVPVOUOS TSTUUVVVWU", "MWNPOPOV UPTSRUOV", "NWTMSNSOTP UPSPQQQRRSTS SSQTPUPVQWSXSYRZQZ", "MXOQQPVP QPQRPV TPTRUV", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "MXOQQPVP SPRV", "KXMQNPOPPQPUQVSVTUUSVP", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "MWOPPPQQSXTYUY UPTRPWOY", "KYTMRY MQNPOPPQPUQVTVUUVSWP", "LXOPNRNTOVQVRTRR UPVRVTUVSVRT", "LWTSSQQPOQNSOUQVSUTS UPTSTUUVVV", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "LWTSSQQPOQNSOUQVSUTS VMTSTUUVVV", "MWOSTSURUQSPRPPQOSPURVTV", "OVVMUMTNSPQVPXOYNY QPUP", "MXUSTQRPPQOSPURVTUUS VPTVSXRYPYOX", "MVQMNV OSPQQPSPTQTRSTSUTVUV", "PUSMSNTNTMSM QPRPSQSRRTRUSVTV", "OUSMSNTNTMSM QPRPSQSRRVQXPYOYNX", "NVRMOV UPTPRQPS PSQUSVTV", "OTSMQSQURVSV", "JYKPLPMQMSLV MSNQOPQPRQRSQV RSSQTPVPWQWRVTVUWVXV", "MWNPOPPQPSOV PSQQRPTPUQURTTTUUVVV", "MXNPOPPQPSNY PSQUSVUUVSUQSPQQPS", "MXUSTQRPPQOSPURVTUUS VPSY", "MVOPPPQQQSPV UQTPSPRQQS", "NVTQSPQPPQPRQSRSSTSURVPVOU", "NUSMQSQURVSV PPTP", "MWNPOPPQPROTOUPVRVSUTS UPTSTUUVVV", "MWNPOPPQPROTOUPVRVTUURUP", "KYLPMPNQNRMTMUNVPVQURSSP RSRUSVUVVUWRWP", "MWOQPPQPRQRUSVTVUU VQUPTPSQQUPVOVNU", "MWNPOPPQPROTOUPVRVSUTS UPSVRXQYOYNX", "NVUPOV PQQPSPTQ PUQVSVTU", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPRPPQOSPURVSVUU OSSS", "MWRMQNPPOSOVPWRWSVTTUQUNTMRM PRTR", "MWTMQY RPPQOSPURVSVUUVSUQSPRP", "MWUQSPQPOQOSPTRUSVSWRXQX", "KYTPTSUTVTWSWQVOUNSMQMONNOMQMSNUOVQWSWUV TQSPQPPQPSQTSTTS", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "LYPMQNQOPPOPNONNOMPMSNUNWMNV USTTTUUVVVWUWTVSUS", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWONQMSMUNUPSQ RQSQURUUSVQVOU", "MWSMSV SMNSVS", "MWPMOQQPRPTQUSTURVQVOU PMTM", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUMQV OMUM", "MWQMONOPQQSQUPUNSMQM QQOROUQVSVUUURSQ", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PURPRQSQSPRP RURVSVSURU", "PURPRQSQSPRP SVRVRUSUSWRY", "PURMRR SMSR RURVSVSURU", "NWPNRMSMUNUPRQRRSRSQUP RURVSVSURU", "PTRMRQ", "NVPMPQ TMTQ", "NVQMPNPPQQSQTPTNSMQM", "MWRKRX UNSMQMONOPQQTRUSUUSVQVOU", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "LXRNRV NRVR", "LXNPVP NTVT", "MWOOUU UOOU", "MWRORU OPUT UPOT", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "LXSOVRSU NRVR", "MXQLQY TLTY OQVQ OTVT", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LXNNOQOSNV VNUQUSVV NNQOSOVN NVQUSUVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "H\\NRMQLRMSNR VRWQXRWSVR", "H\\MPLQLRMSNSOROQNPMP MQMRNRNQMQ WPVQVRWSXSYRYQXPWP WQWRXRXQWQ", "I[KRYR", "H\\RUJPRTZPRU", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IYJWLVNVPWTZV[X[ZZ[W IYJVLUNUPVTYVZXZZY[W", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IW[W I[[[", "CaGO]OXI L[GU]U", "D`F^^^^FFFF^", "KYQVOUNSNQOOQNSNUOVQVSUUSVQV SVVS QVVQ OUUO NSSN NQQN", "H\\IR[R", "H\\IR[R IQ[Q", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZQ[O\\N^Na TTUUVWUYTZ N`O_P_S`V`W_ P_SaVaW_W^", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYPFSCSP RDRP OPVP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOEOFNFNEODQCTCVDWFVHTIQJOKNMNP TCUDVFUHTI NOONPNSOVOWN PNSPVPWNWM MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYNCNG VERLPP WCTIQP NEPCRCUE NEPDRDUEVE MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "LYPFSCSP RDRP OPVP MRXR SVSa TTTa TTM]X] QaVa", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR SVSa TTTa TTM]X] QaVa", "F^YXWZU[R[PZMXKWIWHXHZI[K[MZOWPURQTKWGYFZF[G\\H[IZH[G[FZFYFWGVHTLRPPVNZMZ OPUP", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ NJNW OJOW LJSJVKWMWNVPSQOQ SJUKVMVNUPSQ LWQW SQTRUVVWWWXV SQURVVWW", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ UKVJVNUKSJPJNKMLLOLRMUNVPWSWUVVT PJNLMOMRNUPW", "E_IM[M IR[R IW[W K[YI", "CaaOdNfLgKfKdLaN^P\\SZWX", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX ^I^G]F\\FZGXIVLTNROPO ROSQSXTZU[V[XZYY[V", "I\\MRORSQVOXMYKYHXFVFUGTISNRSQVPXNZL[J[IZIXJWLWNXQZT[V[YZ[X", "@aEMCLBJBICGEFFFHGIIIKHPGTE[ GTJLLHMGOFPFRGSISKRPQTO[ QTTLVHWGYFZF\\G]I]K\\PZWZZ[[\\[^Z_YaaF_G\\JYNVTS[", "F^NLLLKKKILGNFPFRGSISLQUQXRZT[V[XZYXYVXUVU ]I]G\\FZFXGVITLPUNXLZJ[H[GZGX", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLXMZN[P[RZTXVUWSYM [FYMVWT]RbPfNgMfMdNaP^S[VY[V", "H]ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWTTWPZN[K[JZJXKWNWPXQYR[R^QaPcNfLgKfKdLaN^Q[TYZV", "I[JFR[ ZFR[ JFZF", "G]IL[b", "E_RJIZ RJ[Z", "I[J[Z[", "I[J[Z[ZZJZJ[", "I\\XMX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "H[LFL[ LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\XFX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I[LSXSXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX", "MYWFUFSGRJR[ OMVM", "I\\XMX]W`VaTbQbOa XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "I\\MFM[ MQPNRMUMWNXQX[", "NVQFRGSFREQF RMR[", "MWRFSGTFSERF SMS^RaPbNb", "IZMFM[ WMMW QSX[", "CaGMG[ GQJNLMOMQNRQR[ RQUNWMZM\\N]Q][", "I\\MMM[ MQPNRMUMWNXQX[", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM", "H[LMLb LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "I\\XMXb XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "KXOMO[ OSPPRNTMWM", "J[XPWNTMQMNNMPNRPSUTWUXWXXWZT[Q[NZMX", "MYRFRWSZU[W[ OMVM", "I\\MMMWNZP[S[UZXW XMX[", "JZLMR[ XMR[", "G]JMN[ RMN[ RMV[ ZMV[", "J[MMX[ XMM[", "JZLMR[ XMR[P_NaLbKb", "J[XMM[ MMXM M[X[", "H]QMONMPLRKUKXLZN[P[RZUWWTYPZM QMSMTNUPWXXZY[Z[", "I\\UFSGQIOMNPMTLZKb UFWFYHYKXMWNUORO ROTPVRWTWWVYUZS[Q[OZNYMV", "I\\JPLNNMOMQNROSRSVR[ ZMYPXRR[P_Ob", "I[TMQMONMPLSLVMYNZP[R[TZVXWUWRVOTMRKQIQGRFTFVGXI", "JZWOVNTMQMONOPPRSS SSOTMVMXNZP[S[UZWX", "JYTFRGQHQIRJUKXK XKTMQONRMUMWNYP[S]T_TaSbQbP`", "H\\IQJOLMNMONOPNTL[ NTPPRNTMVMXOXRWWTb", "G\\HQIOKMMMNNNPMUMXNZO[Q[SZUWVUWRXMXJWGUFSFRHRJSMUPWRZT", "LWRMPTOXOZP[R[TYUW", "I[OMK[ YNXMWMUNQROSNS NSPTQUSZT[U[VZ", "JZKFMFOGPHX[ RML[", "H]OMIb NQMVMYO[Q[SZUXWT YMWTVXVZW[Y[[Y\\W", "I[LMOMNSMXL[ YMXPWRUURXOZL[", "JZTFRGQHQIRJUKXK UKRLPMOOOQQSTTVT TTPUNVMXMZO\\S^T_TaRbPb", "J[RMPNNPMSMVNYOZQ[S[UZWXXUXRWOVNTMRM", "G]PML[ UMVSWXX[ IPKNNM[M", "I[MSMVNYOZQ[S[UZWXXUXRWOVNTMRMPNNPMSIb", "I][MQMONMPLSLVMYNZP[R[TZVXWUWRVOUNSM", "H\\SMP[ JPLNOMZM", "H\\IQJOLMNMONOPMVMYO[Q[TZVXXTYPYM", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb", "I[KMMMOOU`WbYb ZMYOWRM]K`Jb", "F]VFNb GQHOJMLMMNMPLULXMZO[Q[TZVXXUZP[M", "F]NMLNJQITIWJZK[M[OZQW RSQWRZS[U[WZYWZTZQYNXM", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXVRUWUZV[W[YZZY\\V", "M[MVOSRNSLTITGSFQGPIOMNTNZO[P[RZTXUUURVVWWYW[V", "MXTTTSSRQROSNTMVMXNZP[S[VYXV", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXZF VRUWUZV[W[YZZY\\V", "NXOYQXRWSUSSRRQROSNUNXOZQ[S[UZVYXV", "OWOVSQUNVLWIWGVFTGSIQQNZKaJdJfKgMfNcOZP[R[TZUYWV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZTY VRTYPdOfMgLfLdMaP^S\\U[XY[V", "M\\MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "PWSMSNTNTMSM PVRRPXPZQ[R[TZUYWV", "PWSMSNTNTMSM PVRRLdKfIgHfHdIaL^O\\Q[TYWV", "M[MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUTVQV QVSWTZU[V[XZYY[V", "OWOVQSTNULVIVGUFSGRIQMPTPZQ[R[TZUYWV", "E^EVGSIRJSJTIXH[ IXJVLSNRPRQSQTPXO[ PXQVSSURWRXSXUWXWZX[Y[[Z\\Y^V", "J\\JVLSNROSOTNXM[ NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "LZRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXWXYWZV", "KZKVMSNQMUGg MUNSPRRRTSUUUWTYSZQ[ MZO[R[UZWYZV", "L[UUTSRRPRNSMTLVLXMZO[Q[SZ VRUUSZPaOdOfPgRfScS\\U[XY[V", "MZMVOSPQPSSSTTTVSYSZT[U[WZXYZV", "NYNVPSQQQSSVTXTZR[ NZP[T[VZWYYV", "OXOVQSSO VFPXPZQ[S[UZVYXV PNWN", "L[LVNRLXLZM[O[QZSXUU VRTXTZU[V[XZYY[V", "L[LVNRMWMZN[O[RZTXUUUR URVVWWYW[V", "I^LRJTIWIYJ[L[NZPX RRPXPZQ[S[UZWXXUXR XRYVZW\\W^V", "JZJVLSNRPRQSQZR[U[XYZV WSVRTRSSOZN[L[KZ", "L[LVNRLXLZM[O[QZSXUU VRPdOfMgLfLdMaP^S\\U[XY[V", "LZLVNSPRRRTTTVSXQZN[P\\Q^QaPdOfMgLfLdMaP^S\\WYZV", "J\\K[NZQXSVUSWOXKXIWGUFSGRHQJPOPTQXRZT[V[XZYY", "I[WUWRVOUNSMQMONMPLSLVMYNZP[R[TZVXWUXPXKWHVGTFRFPGNI", "JZWNUMRMPNNPMSMVNYOZQ[T[VZ MTUT", "J[TFRGPJOLNOMTMXNZO[Q[SZUWVUWRXMXIWGVFTF NPWP", "H\\VFNb QMNNLPKSKVLXNZQ[S[VZXXYUYRXPVNSMQM", "I[XOWNTMQMNNMOLQLSMUOWSZT\\T^S_Q_", "DaWNVLTKQKOLNMMOMRNTOUQVTVVUWS WKWSXUYV[V\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYY", "F^ZIJRZ[", "F^JIZRJ[", "KYOBOb OBVB ObVb", "KYUBUb NBUB NbUb", "KYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb", "KYPBSETHTJSMQOQPURQTQUSWTZT\\S_Pbb", "KYVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`Nb", "NVRBRb", "E_IR[R", "E_RIR[ IR[R", "E_IO[O IU[U", "G]KKYY YKKY", "JZRLRX MOWU WOMU", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "E_UMXP[RXTUW IR[R", "G]OFOb UFUb`Oa", ">f>RfR", "D`D``D", "RRR>Rf", "D`DD``", "D`DR`R", "F^FY^K", "KYK^YF", "KYKFY^", "F^FK^Y", "KYKRYR", "MWMWWM", "MWMMWW", "D`DOGQKSPTTTYS]Q`O", "PUUDSGQKPPPTQYS]U`", "OTODQGSKTPTTSYQ]O`", "D`DUGSKQPPTPYQ]S`U", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "JZJ]L]O\\Q[TXUVVSVOULTJSIQIPJOLNONSOVPXS[U\\X]Z]", "I]]Z]X\\U[SXPVOSNONLOJPIQISJTLUOVSVVUXT[Q\\O]L]J", "JZZGXGUHSIPLONNQNUOXPZQ[S[TZUXVUVQUNTLQIOHLGJG", "G[GJGLHOIQLTNUQVUVXUZT[S[QZPXOUNQNNOLPISHUGXGZ", "E[EPFRHTJUMVQVUUXSZP[NZLWLSMQNNPLSKVKYL\\M^", "EYETHVKWPWSVVTXQYNYLXKVKSLPNNQMTMYN\\P_", "OUQOOQOSQUSUUSUQSOQO QPPQPSQTSTTSTQSPQP RQQRRSSRRQ", "D`DRJR ORUR ZR`R", "D`DUDO`O`U", "JZRDJR RDZR", "D`DR`R JYZY P`T`", "D`DR`R DRRb `RRb", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "LXLLLXXXXLLL", "KYRJKVYVRJ", "LXRHLRR\\XRRH", "JZRIPOJOOSMYRUWYUSZOTORI", "KYRKRY KRYR", "MWMMWW WMMW", "MWRLRX MOWU WOMU", "NVQNOONQNSOUQVSVUUVSVQUOSNQN OQOS PPPT QOQU RORU SOSU TPTT UQUS", "NVNNNVVVVNNN OOOU POPU QOQU RORU SOSU TOTU UOUU", "MWRLMUWURL ROOT ROUT RRQT RRST", "LULRUWUMLR ORTU ORTO RRTS RRTQ", "MWRXWOMORX RUUP RUOP RRSP RRQP", "OXXROMOWXR URPO URPU RRPQ RRPS", "LXRLNWXPLPVWRL RRRL RRLP RRNW RRVW RRXP", "MWRLRX OOUO MUOWQXSXUWWU", "LXRLRX LQMOWOXQ PWTW", "KYMNWX WNMX OLLOKQ ULXOYQ", "I[NII[ VI[[ MM[[ WMI[ NIVI MMWM", "I[RGRV MJWP WJMP IVL\\ [VX\\ IV[V L\\X\\", "G[MJSV KPSL G\\[\\[RG\\", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "KYYPXNVLSKQKNLLNKQKSLVNXQYSYVXXVYT YPWNUMSMQNPOOQOSPUQVSWUWWVYT", "KYRJKVYVRJ RZYNKNRZ", "G]PIPGQFSFTGTI GZHXJVKTLPLKMJOIUIWJXKXPYTZV\\X]Z GZ]Z QZP[Q\\S\\T[SZ", "JZRMRS RSQ\\ RSS\\ Q\\S\\ RMQJPHNG QJNG RMSJTHVG SJVG RMNKLKJM PLLLJM RMVKXKZM TLXLZM RMPNOOOR RMPOOR RMTNUOUR RMTOUR", "JZRIRK RNRP RSRU RYQ\\ RYS\\ Q\\S\\ RGQIPJ RGSITJ PJRITJ RKPNNOMN RKTNVOWN NOPORNTOVO RPPSNTLTKRKSLT RPTSVTXTYRYSXT NTPTRSTTVT RUPXOYMZLZKYJWJYLZ RUTXUYWZXZYYZWZYXZ MZOZRYUZWZ", "JZRYQ\\ RYS\\ Q\\S\\ RYUZXZZXZUYTWTYRZOYMWLUMVJUHSGQGOHNJOMMLKMJOKRMTKTJUJXLZOZRY", "JZRYQ\\ RYS\\ Q\\S\\ RYVXVVXUXRZQZLYIXHVHTGPGNHLHKIJLJQLRLUNVNXRY", "I[IPKR LKNP RGRO XKVP [PYR", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "G]PGMHJJHMGPGTHWJZM\\P]T]W\\ZZ\\W]T]P\\MZJWHTGPG", "AcPALBJCGEEGCJBLAPATBXCZE]G_JaLbPcTcXbZa]__]aZbXcTcPbLaJ_G]EZCXBTAPA", "<hP<K=G?DAAD?G=K<P<T=Y?]A`DcGeKgPhThYg]e`cc`e]gYhThPgKeGcD`A]?Y=T<P<", "){O)I*E+@-;073370;-@+E*I)O)U*[+_-d0i3m7q;t@wEyIzO{U{[z_ydwitmqqmtiwdy_z[{U{OzIyEw@t;q7m3i0d-_+[*U)O)", ">fRAPCMDJDGCEA>H@JAMAZB]D_G`M`PaRc RATCWDZD]C_AfHdJcMcZb]`_]`W`TaRc", "AcRAPCMDJDGCEABGAKAPBTDXG\\L`Rc RATCWDZD]C_AbGcKcPbT`X]\\X`Rc BHbH", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[ LbXF", "KYRKMX RNVX RKWX OTTT KXPX TXYX", "JZNKNX OKOX LKSKVLWNVPSQ SKULVNUPSQ OQSQVRWTWUVWSXLX SQURVTVUUWSX", "KYVLWKWOVLTKQKOLNMMPMSNVOWQXTXVWWU QKOMNPNSOVQX", "JZNKNX OKOX LKSKVLWMXPXSWVVWSXLX SKULVMWPWSVVUWSX", "JYNKNX OKOX SOSS LKVKVOUK OQSQ LXVXVTUX", "JXNKNX OKOX SOSS LKVKVOUK OQSQ LXQX", "K[VLWKWOVLTKQKOLNMMPMSNVOWQXTXVW QKOMNPNSOVQX TXUWVU VSVX WSWX TSYS", "J[NKNX OKOX VKVX WKWX LKQK TKYK OQVQ LXQX TXYX", "NWRKRX SKSX PKUK PXUX", "LXSKSURWQX TKTUSWQXPXNWMUNTOUNV QKVK", "JZNKNX OKOX WKOS QQVX RQWX LKQK TKYK LXQX TXYX", "KXOKOX PKPX MKRK MXWXWTVX", "I\\MKMX NNRX NKRU WKRX WKWX XKXX KKNK WKZK KXOX UXZX", "JZNKNX OMVX OKVV VKVX LKOK TKXK LXPX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK PWPUQTSTTUUZV[W[XZ TUUXVZW[", "JZNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX SRTSUWVXWXXW SRUSVWWX", "KZVMWKWOVMULSKQKOLNMNOOPQQTRVSWT NNOOQPTQVRWSWVVWTXRXPWOVNTNXOV", "KZRKRX SKSX NKMOMKXKXOWK PXUX", "J[NKNUOWQXTXVWWUWK OKOUPWQX LKQK UKYK", "KYMKRX NKRU WKRX KKPK TKYK", "I[LKOX MKOT RKOX RKUX SKUT XKUX JKOK VKZK", "KZNKVX OKWX WKNX LKQK TKYK LXQX TXYX", "LYNKRRRX OKSR WKSRSX LKQK TKYK PXUX", "LYVKNX WKOX OKNONKWK NXWXWTVX", "KXOKOX PKPX MKWKWOVK MXRX", "KYRKLX RMWX RKXX MWVW LXXX", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK QOQT TOTT QQTQ QRTR", "KYRKMX RNVX RKWX KXPX TXYX", "JZMJLM XJWM PPOS UPTS MVLY XVWY MKWK MLWL PQTQ PRTR MWWW MXWX", "J[NKNX OKOX VKVX WKWX LKYK LXQX TXYX", "K[MKRQ NKSQMX MKWKXOVK NWWW MXWXXTVX", "KZMONLOKPKQLRORX XOWLVKUKTLSOSX MONMOLPLQMRO XOWMVLULTMSO PXUX", "KZRKRX SKSX QNNOMQMRNTQUTUWTXRXQWOTNQN QNOONQNROTQU TUVTWRWQVOTN PKUK PXUX", "J[RKRX SKSX LPMONOOSQU TUVSWOXOYP MONROTQUTUVTWRXO PKUK PXUX", "KZMVNXQXMRMONMOLQKTKVLWMXOXRTXWXXV OUNRNOOMQK TKVMWOWRVU NWPW UWWW", "KYTKKX SMTX TKUX NTTT IXNX RXWX", "JYPKLX QKMX NKUKWLWNVPSQ UKVLVNUPSQ OQRQTRUSUUTWQXJX RQTSTUSWQX", "KXVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUU RKPMOONRNVPX", "JYPKLX QKMX NKTKVLWNWQVTUVTWQXJX TKULVNVQUTTVSWQX", "JYPKLX QKMX SORS NKXKWNWK OQRQ JXTXUUSX", "JXPKLX QKMX SORS NKXKWNWK OQRQ JXOX", "KYVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUVVS RKPMOONRNVPX RXTVUS SSXS", "J[PKLX QKMX XKTX YKUX NKSK VK[K OQVQ JXOX RXWX", "NWTKPX UKQX RKWK NXSX", "LXUKRUQWPX VKSURWPXOXMWLUMTNUMV SKXK", "JZPKLX QKMX YKOR RPTX SPUX NKSK VK[K JXOX RXWX", "KXQKMX RKNX OKTK KXUXVUTX", "I\\OKKX OMPX PKQV YKPX YKUX ZKVX MKPK YK\\K IXMX SXXX", "JZPKLX PKTX QKTU XKTX NKQK VKZK JXNX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK", "JYPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR JXOX", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK OWOVPUQURVRZS[T[UZ RVSZT[", "JZPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR SRTWUXVXWW SRTSUWVX JXOX", "KZWLXLYKXNWLUKRKPLOMOOPPUSVT ONPOURVSVVUWSXPXNWMULXMWNW", "KZTKPX UKQX PKNNOKZKYNYK NXSX", "J[PKMUMWOXSXUWVUYK QKNUNWOX NKSK WK[K", "KYOKPX PKQV YKPX MKRK VK[K", "I[NKMX OKNV TKMX TKSX UKTV ZKSX LKQK XK\\K", "KZPKTX QKUX YKLX NKSK VK[K JXOX RXWX", "LYPKRQPX QKSQ YKSQQX NKSK VK[K NXSX", "LYXKLX YKMX QKONPKYK LXUXVUTX", "KZMHX\\", "JZRMLW RMXW", "LZQOPPPQOQOPQOTOVQVWWXXX TOUQUWWX URRSPTOUOWPXSXTWUU RSPUPWQX", "JYNKNX OKOX ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LKOK", "LXVQUQURVRVQUPSOQOOPNRNUOWQXSXUWVV QOPPOROUPWQX", "L[VKVX WKWX VRUPSOQOOPNRNUOWQXSXUWVU QOPPOROUPWQX TKWK VXYX", "LXOSVSVRUPSOQOOPNRNUOWQXSXUWVV USUQSO QOPPOROUPWQX", "LWTKULUMVMVLTKRKPMPX RKQMQX NOSO NXSX", "LYQOOQOSQUSUUSUQSOQO QOPQPSQU SUTSTQSO TPUOVO PTOUOXPYTYVZ OWPXTXVYV[T\\P\\N[NYPX", "J[NKNX OKOX ORPPROTOVPWRWX TOUPVRVX LKOK LXQX TXYX", "NWRKRLSLSKRK RORX SOSX POSO PXUX", "NWSKSLTLTKSK SOSZR\\ TOTZR\\P\\O[OZPZP[O[ QOTO", "JZNKNX OKOX WOOU RSVX SSWX LKOK TOYO LXQX TXYX", "NWRKRX SKSX PKSK PXUX", "F_JOJX KOKX KRLPNOPORPSRSX POQPRRRX SRTPVOXOZP[R[X XOYPZRZX HOKO HXMX PXUX XX]X", "J[NONX OOOX ORPPROTOVPWRWX TOUPVRVX LOOO LXQX TXYX", "LYQOOPNRNUOWQXTXVWWUWRVPTOQO QOPPOROUPWQX TXUWVUVRUPTO", "JYNON\\ OOO\\ ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LOOO L\\Q\\", "KYUOU\\ VOV\\ URTPROPONPMRMUNWPXRXTWUU POOPNRNUOWPX S\\X\\", "KXOOOX POPX PRQPSOUOVPVQUQUPVP MOPO MXRX", "LYTOUPUQVQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWOVPVPWQX", "LWPKPVRXTXUWUV QKQVRX NOTO", "J[NONUOWQXSXUWVU OOOUPWQX VOVX WOWX LOOO TOWO VXYX", "KYNORX OORV VORX LOQO TOXO", "I[LOOX MOOU ROOX ROUX SOUU XOUX JOOO VOZO", "KYNOUX OOVX VONX LOQO TOXO LXPX SXXX", "KYNORX OORV VORXP[N\\M\\L[LZMZM[L[ LOQO TOXO", "LXUONX VOOX OONQNOVO NXVXVVUX", "K[QOOPNQMSMUNWPXQXSWUUWRXO QOOQNSNUOWPX QOSOUPWWXX SOTPVWXXYX", "KXRKPMOOMUK\\ QLPNNTL\\ RKTKVLVNUPRQ TKULUNTPRQ RQTRUTUVTWRXQXOWNT RQSRTTTVRX", "KYLQNOPORPSSSXR\\ LQNPPPRQSS WOVRSXQ\\", "KYSOQOOPNQMSMUNWPXRXTWUVVTVRUPRNQLQKRJTJUKVM QOOQNSNVPX RXTVUTUQSO QLRKTKVM", "LXVPTOQOOPOQPRRS QOPPPQRS RSOTNUNWPXSXUW RSPTOUOWPX", "LWRKQLQMSNVNVMSNPOOPNRNTOVPWRXSYS[R\\P\\O[ SNQOPPOROTPVRX", "IYJRKPLONOOPOQMX MONPNQLX OQPPROTOVPVRS\\ TOUPURR\\", "IYJSKQLPNPOQOVPX MPNQNUOWPXQXSWTVUTVQVNULTKRKQLQNRPURWS QXSVTTUQUNTK", "NWROPVPWQXSXUWVU SOQVQWRX", "KYOOLX POMX UOVPWPVOTORQOR ORPSRWTXVWWU ORQSSWTX", "LXLKNKPLWX NKOLVX RPMX RPNX", "KZOOK\\ POL\\ NUNWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "JYNOMX OONUMX VRVOWOVRTUQWNXMX LOOO", "MXRKQLQMSNVN TNQOPPPRRSUS TNROQPQRRS SSPTOUOWQXSYTZT[S\\Q\\ SSQTPUPWQX", "KXQOOPNQMSMUNWPXRXTWUVVTVRUPSOQO QOOQNSNVPX RXTVUTUQSO", "IZPPMX PPNX TPSX TPTX KQMOXO KQMPXP", "JXSOQOOPNQMSJ\\ QOOQNSK\\ SOUPVRVTUVTWRXPXNWMU SOUQUTTVRX", "K[YOQOOPNQMSMUNWPXRXTWUVVTVRUPYP QOOQNSNVPX RXTVUTUQSO", "KZSPQX SPRX MQOOXO MQOPXP", "JXKRLPMOOOPPPROUOWPX NOOPORNUNWPXQXSWUUVRVOUOVP", "KZOPNQMSMUNWPXRXUWWUXRXPWOUOTPSRRUO\\ MUNVPWRWUVWTXR XQWPUPSR RUQXP\\", "KXMONOPPS[T\\ NOOPR[T\\U\\ VOTRNYL\\", "I[TKQ\\ UKP\\ JRKPLONOOPOVPWSWUVWT MONPNTOWPXSXUWWTXRYO", "JZNPPPPONPMQLSLUMWNXPXQWRUSR LUNWPWRU RRRWSXUXWVXTXRWPVOVPWP RUSWUWWV", "KZVOTVTWUXWXXWYU WOUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "JXOKMR PKNRNVPX NROPQOSOUPVRVTUVTWRXPXNWMUMR SOUQUTTVRX MKPK", "KXUPUQVQUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "KZWKTVTWUXWXXWYU XKUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX UKXK", "KWNURTTSURUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "MXWKXLXKVKTLSNPYO[N\\ VKULTNQYP[N\\L\\L[M\\ POVO", "KYVOTVSYR[ WOUVTYR[P\\M\\L[M[N\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "KZPKLX QKMX OQPPROTOVPVRUUUWVX TOUPURTUTWUXWXXWYU NKQK", "MWSKSLTLTKSK NROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "MWTKTLULUKTK ORPPQOSOTPTRRYQ[O\\M\\M[N\\ ROSPSRQYP[O\\", "KXPKLX QKMX VPUQVQVPUOTORQPROR ORPSQWRXTXUWVU ORQSRWSX NKQK", "NVSKPVPWQXSXTWUU TKQVQWRX QKTK", "F^GRHPIOKOLPLQJX JOKPKQIX LQMPOOQOSPSQQX QORPRQPX SQTPVOXOZPZRYUYWZX XOYPYRXUXWYX[X\\W]U", "J[KRLPMOOOPPPQNX NOOPOQMX PQQPSOUOWPWRVUVWWX UOVPVRUUUWVXXXYWZU", "JYKRLPMOOOPPPQM\\ NOOPOQL\\ PQROTOVPWRWTVVUWSXQXOVOT TOVQVTUVSX J\\O\\", "KYVOR\\ WOS\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX P\\U\\", "LXMRNPOOQORPRQPX POQPQQOX RQSPUOVOWPWQVQWP", "LYVPVQWQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWNVOVOW", "NWSKPVPWQXSXTWUU TKQVQWRX POUO", "IZJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "H\\IRJPKOMONPNRMUMWNX LOMPMRLULWNXOXQWRV TORVRWTX UOSVSWTXUXWWYUZRZOYOZP", "JZMRNPPOROSPSR QORPRRQUPWNXMXLWLVMVLW XPWQXQXPWOVOTPSRRURWSX QUQWRXTXVWWU", "IYJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVSYR[ WOUVTYR[P\\M\\L[M[N\\", "KYWOWPVQNVMWMX NQOOROUQ OPRPUQVQ NVOVRWUW OVRXUXVV", "H[RKSLSMTMTLRKOKMLLNLX OKNLMNMX XKYLYMZMZLXKVKTMTX VKUMUX JOWO JXOX RXWX", "J[UKVLWLWKQKOLNNNX QKPLONOX VOVX WOWX LOWO LXQX TXYX", "J[WKQKOLNNNX QKPLONOX UKVLVX WKWX LOVO LXQX TXYX", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX YKZL[L[KUKSLRNRX UKTLSNSX ZOZX [O[X HO[O HXMX PXUX XX]X", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX [KUKSLRNRX UKTLSNSX YKZLZX [K[X HOZO HXMX PXUX XX]X", "NWRORX SOSX POSO PXUX", "LXVPTOROPPOQNSNUOWQXSXUW ROPQOSOVQX OSSS", "LYSKQLPMOONRNUOWPXRXTWUVVTWQWNVLUKSK SKQMPOOSOVPX RXTVUTVPVMUK OQVQ", "KZTKQ\\ UKP\\ QONPMRMUNWQXTXWWXUXRWPTOQO QOOPNRNUOWQX TXVWWUWRVPTO", "LXUPVRVQUPSOQOOPNRNTOVRX QOOQOTPVRXSYS[R\\P\\", "I[VKWLXLVKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ ZK[L[KYKWLVNSYR[Q\\ YKXLWNTYS[Q\\O\\O[P\\ LOYO", "IZVKWLXLXKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ VOTVTWUXWXXWYU WOUVUWVX LOWO", "IZVKWL XKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ WKTVTWUXWXXWYU XKUVUWVX LOVO", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L\\L\\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ ZOXVXWYX[X\\W]U [OYVYWZX IO[O", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L \\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ [KXVXWYX[X\\W]U \\KYVYWZX IOZO", "MWNROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "LYQKOLNONTOWQXTXVWWTWOVLTKQK QKPLOOOTPWQX TXUWVTVOULTK", "LYPNSKSX RLRX OXVX", "LYOMONNNNMOLQKTKVLWNVPTQQROSNUNX TKULVNUPTQ NWOVPVSWVWWV PVSXVXWVWU", "LYOMONNNNMOLQKTKVLWNVPTQ TKULVNUPTQ RQTQVRWTWUVWTXQXOWNVNUOUOV TQURVTVUUWTX", "LYSMSX TKTX TKMTXT QXVX", "LYOKNQ OKVK OLSLVK NQOPQOTOVPWRWUVWTXQXOWNVNUOUOV TOUPVRVUUWTX", "LYVMVNWNWMVLTKRKPLOMNPNUOWQXTXVWWUWSVQTPQPNR RKPMOPOUPWQX TXUWVUVSUQTP", "LYNKNO VMRTPX WKTQQX NMPKRKUM NMPLRLUMVM", "LYQKOLNNOPQQTQVPWNVLTKQK QKPLONPPQQ TQUPVNULTK QQORNTNUOWQXTXVWWUWTVRTQ QQPROTOUPWQX TXUWVUVTURTQ", "LYOVOUNUNVOWQXSXUWVVWSWNVLTKQKOLNNNPORQSTSWQ SXUVVSVNULTK QKPLONOPPRQS", "NVRVQWRXSWRV", "NVSWRXQWRVSWSYQ[", "NVROQPRQSPRO RVQWRXSWRV", "NVROQPRQSPRO SWRXQWRVSWSYQ[", "NVRKQLRSSLRK RLRO RVQWRXSWRV", "LYNNONOONONNOLQKTKVLWNWOVQSRRSRTST TKVMVPUQSR RWRXSXSWRW", "OVRKRP SKRP", "LXOKOP PKOP UKUP VKUP", "MWQKPLPNQOSOTNTLSKQK", "MWRJRP OKUO UKOO", "KZXHM\\", "MWUHSJQMPPPTQWSZU\\ SJRLQPQTRXSZ", "MWOHQJSMTPTTSWQZO\\ QJRLSPSTRXQZ", "MWPHP\\ QHQ\\ PHUH P\\U\\", "MWSHS\\ THT\\ OHTH O\\T\\", "LWSHRIQKQMRORPPRRTRUQWQYR[S\\ RIQM QKRO RUQY QWR[", "MXQHRISKSMRORPTRRTRUSWSYR[Q\\ RISM SKRO RUSY SWR[", "MWTHPRT\\", "MWPHTRP\\", "OURHR\\", "MWPHP\\ THT\\", "I[LRXR", "I[RLRX LRXR", "JZRMRX MRWR MXWX", "JZRMRX MMWM MRWR", "JZMMWW WMMW", "NVRQQRRSSRRQ", "I[RLQMRNSMRL LRXR RVQWRXSWRV", "I[LPXP LTXT", "I[WLMX LPXP LTXT", "I[LNXN LRXR LVXV", "JZWLMRWX", "JZMLWRMX", "JZWKMOWS MTWT MXWX", "JZMKWOMS MTWT MXWX", "H[YUWUUTTSRPQOONNNLOKQKRLTNUOUQTRSTPUOWNYN", "JZLTLRMPOPUSWSXR LRMQOQUTWTXRXP", "JZMSRPWS MSRQWS", "NVSKPO SKTLPO", "NVQKTO QKPLTO", "LXNKOMQNSNUMVK NKONQOSOUNVK", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "JZWMQMONNOMQMSNUOVQWWW MRUR", "I[TOUPXRUTTU UPWRUT LRWR", "MWRMRX OPPORLTOUP PORMTO", "I[POOPLROTPU OPMROT MRXR", "MWRLRW OTPURXTUUT PURWTU", "KYVSUPSOQOOPNQMSMUNWPXRXTWUVVTWQWNVLTKQKPLQLRK QOOQNSNVPX RXTVUTVQVNULTK", "JZLKRX MKRV XKRX LKXK NLWL", "G[IOLORW KORX [FRX", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[ QNOONQNSOUQVSVUUVSVQUOSNQN", "H\\ZRYTWUVUTTSSQPPONNMNKOJQJRKTMUNUPTQSSPTOVNWNYOZQZR", "JZXKLX OKPLPNOOMOLNLLMKOKSLVLXK UTTUTWUXWXXWXUWTUT", "J[YPXPXQYQYPXOWOVPUTTVSWQXOXMWLVLTMSORRPSNSLRKPKOLONPQUWWXXXYW OXMVMTOR ONPPVWWX", "J[UPSOQOPQPRQTSTUS UOUSVTXTYRYQXNVLSKRKOLMNLQLRMUOWRXSXVW", "KZQHQ\\ THT\\ WLVLVMWMWLUKPKNLNNOPVSWT NNOOVRWTWVVWTXQXOWNVNUOUOVNV", "KYPKP[ TKT[ MQWQ MUWU", "LXTLSLSMTMTLSKQKPLPNQPTRUS PNQOTQUSUUSW QPOROTPVSXTY OTPUSWTYT[S\\Q\\P[PZQZQ[P[", "LXRKQLRMSLRK RMRQ RQQSRVSSRQ RVR\\ POONNOOPPOTOUNVOUPTO", "LXRMSLRKQLRMRQQRSURV RQSRQURVRZQ[R\\S[RZ POONNOOPPOTOUNVOUPTO PXOWNXOYPXTXUWVXUYTX", "LYVKVX NKVK QQVQ NXVX", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RQQRRSSRRQ", "LYQKPLPMQN TKULUMTN RNPOOQORPTRUSUUTVRVQUOSNRN RURY SUSY OWVW", "LYRKPLONOOPQRRSRUQVOVNULSKRK RRRX SRSX OUVU", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RKRY KRYR", "JYRRPQOQMRLTLUMWOXPXRWSUSTRR WMRR RMWMWR RMVNWR", "JZLLMKOKQLRNRPQRPSNT OKPLQNQQPS VKUX WKTX NTXT", "JYNKNU OKNR NROPQOSOUPVQVTTVTXUYVYWX SOUQUTTV LKOK", "LYONRKRQ VNSKSQ RQPROTOUPWRXSXUWVUVTURSQ RTRUSUSTRT", "JZRKRY MKMPNRPSTSVRWPWK LMMKNM QMRKSM VMWKXM OVUV", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXVXVUUX", "LYWKTKQLONNQNSOVQXTYWY WKTLRNQQQSRVTXWY", "JZRRPQOQMRLTLUMWOXPXRWSUSTRR SLQQ WMRR XQSS", "KYPMTW TMPW MPWT WPMT", "J[OUMULVLXMYOYPXPVNTMRMONMOLQKTKVLWMXOXRWTUVUXVYXYYXYVXUVU NMPLULWM", "J[OOMOLNLLMKOKPLPNNPMRMUNWOXQYTYVXWWXUXRWPUNULVKXKYLYNXOVO NWPXUXWW", "F^KHK\\ LHL\\ XHX\\ YHY\\ HH\\H H\\O\\ U\\\\\\", "H]KHRQJ\\ JHQQ JHYHZMXH K[X[ J\\Y\\ZWX\\", "KYVBTDRGPKOPOTPYR]T`Vb TDRHQKPPPTQYR\\T`", "KYNBPDRGTKUPUTTYR]P`Nb PDRHSKTPTTSYR\\P`", "KYOBOb PBPb OBVB ObVb", "KYTBTb UBUb NBUB NbUb", "JYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb RDQGQKRN RVQYQ]R`", "KZPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb RDSGSKRN RVSYS]R`", "KYU@RCPFOIOLPOSVTYT\\S_Ra RCQEPHPKQNTUUXU[T^RaOd", "KYO@RCTFUIULTOQVPYP\\Q_Ra RCSETHTKSNPUOXO[P^RaUd", "AXCRGRR` GSRa FSRb X:Rb", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia`Y``NFH[ NFO[ OFPY \\FO[ \\FV[ ]FW[ KFOF \\F`F E[K[ S[Z[", "F_OFI[ OFVX OIV[ \\FV[ LFOF YF_F F[L[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF", "F]OFI[ PFJ[ LFXF[G\\I\\K[NYPUQMQ XFZG[I[KZNXPUQ F[M[", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF LYLXMVOUPURVSXS_T`V`W^W] SXT^U_V_W^", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVPMP WFYGZIZKYNXOVP RPTQURVZW[Y[ZYZX URWYXZYZZY F[M[", "G^ZH[H\\F[L[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "H]UFO[ VFP[ OFLLNF]F\\L\\F L[S[", "F_NFKQJUJXKZN[R[UZWXXU\\F OFLQKUKXLZN[ KFRF YF_F", "H\\NFO[ OFPY \\FO[ LFRF XF^F", "E_MFK[ NFLY UFK[ UFS[ VFTY ]FS[ JFQF ZF`F", "G]NFU[ OFV[ \\FH[ LFRF XF^F F[L[ R[X[", "H]NFRPO[ OFSPP[ ]FSP LFRF YF_F L[S[", "G][FH[ \\FI[ OFLLNF\\F H[V[XUU[", "H\\KILKXWYYY[ LLXX KIKKLMXYY[ PPLTKVKXLZK[ KVMZ LTLVMXMZK[ SSXN VIVLWNYNYLWKVI VIWLYN", "H\\QIK[ SIY[ RIX[ MUVU I[O[ U[[[ QBOCNENGOIQJSJUIVGVEUCSBQB", "G]IB[baUbObLaK_K^L\\O[", "G]LFL[ MFM[ MPONRMTMWNXPX[ TMVNWPW[ IFMF I[P[ T[[[", "MXRFQGRHSGRF RMR[ SMS[ OMSM O[V[", "MXSFRGSHTGSF TMT_SaQbObNaN`O_P`Oa SMS_RaQb PMTM", "G\\LFL[ MFM[ WMMW RSX[ QSW[ IFMF TMZM I[P[ T[Z[", "MXRFR[ SFS[ OFSF O[V[", "BcGMG[ HMH[ HPJNMMOMRNSPS[ OMQNRPR[ SPUNXMZM]N^P^[ ZM\\N]P][ DMHM D[K[ O[V[ Z[a[", "G]LML[ MMM[ MPONRMTMWNXPX[ TMVNWPW[ IMMM I[P[ T[[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "G\\LMLb MMMb MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IMMM IbPb", "H\\WMWb XMXb WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ Tb[b", "IZNMN[ OMO[ OSPPRNTMWMXNXOWPVOWN KMOM K[R[", "J[WOXMXQWOVNTMPMNNMOMQNRPSUUWVXW MPNQPRUTWUXVXYWZU[Q[OZNYMWM[NY", "KZPFPWQZS[U[WZXX QFQWRZS[ MMUM", "G]LMLXMZP[R[UZWX MMMXNZP[ WMW[ XMX[ IMMM TMXM W[[[", "I[LMR[ MMRY XMR[ JMPM TMZM", "F^JMN[ KMNX RMN[ RMV[ SMVX ZMV[ GMNM WM]M", "H\\LMW[ MMX[ XML[ JMPM TMZM J[P[ T[Z[", "H[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "I[WML[ XMM[ MMLQLMXM L[X[XWW[", "G^QMNNLPKRJUJXKZN[P[RZUWWTYPZM QMONMPLRKUKXLZN[ QMSMUNVPXXYZZ[ SMTNUPWXXZZ[[[", "G\\TFQGOIMMLPKTJZIb TFRGPINMMPLTKZJb TFVFXGYHYKXMWNTOPO VFXHXKWMVNTO POTPVRWTWWVYUZR[P[NZMYLV POSPURVTVWUYTZR[", "H\\IPKNMMOMQNROSRSVRZOb JOLNPNRO ZMYPXRSYP^Nb YMXPWRSY", "I\\VNTMRMONMQLTLWMYNZP[R[UZWWXTXQWOSJRHRFSEUEWFYH RMPNNQMTMXNZ R[TZVWWTWPVNTKSISGTFVFYH", "I[XPVNTMPMNNNPPRSS PMONOPQRSS SSNTLVLXMZP[S[UZWX SSOTMVMXNZP[", "I[TFRGQHQIRJUKZKZJWKSMPOMRLULWMYP[S]T_TaSbQbPa ULQONRMUMWNYP[", "G]HQIOKMNMONOPNTL[ MMNNNPMTK[ NTPPRNTMVMXNYOYRXWUb VMXOXRWWTb", "F]GQHOJMMMNNNPMUMXNZO[ LMMNMPLULXMZO[Q[SZUXWUXRYMYIXGVFTFRHRJSMUPWRZT SZUWVUWRXMXIWGVF", "LXRMPTOXOZP[S[UYVW SMQTPXPZQ[", "H\\NMJ[ OMK[ XMYNZNYMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW", "H\\KFMFOGPHQJWXXZY[ MFOHPJVXWZY[Z[ RMJ[ RMK[", "F]MMGb NMHb MPLVLYN[P[RZTXVU XMUXUZV[Y[[Y\\W YMVXVZW[", "H\\NML[ OMNSMXL[ YMXQVU ZMYPXRVUTWQYOZL[ KMOM", "IZTFRGQHQIRJUKXK UKQLOMNONQPSSTVT UKRLPMOOOQQSST STOUMVLXLZN\\S^T_TaRbPb STPUNVMXMZO\\S^", "I[RMONMQLTLWMYNZP[R[UZWWXTXQWOVNTMRM RMPNNQMTMXNZ R[TZVWWTWPVN", "G]PNL[ PNM[ VNV[ VNW[ IPKNNM[M IPKONN[N", "H[LVMYNZP[R[UZWWXTXQWOVNTMRMONMQLTHb R[TZVWWTWPVN RMPNNQMTIb", "H][MQMNNLQKTKWLYMZO[Q[TZVWWTWQVOUNSM QMONMQLTLXMZ Q[SZUWVTVPUN UN[N", "H\\SNP[ SNQ[ JPLNOMZM JPLOONZN", "H\\IQJOLMOMPNPPNVNYP[ NMONOPMVMYNZP[Q[TZVXXUYRYOXMWNXOYR XUYO", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb JWLYNZQZTYWWYU ZOXNVNTPRSPYNb", "I[KMMMONPPU_VaWb MMNNOPT_UaWbYb ZMYOWRM]K`Jb", "F]UFOb VFNba XFVHUJTNRWQ[P^O`NaLbJbIaI`J_K`Ja OMYM", "H\\YMU[T^RaObLbJaI`I_J^K_J` XMT[S^QaOb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "H]PFJ[ QFK[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W MFQF", "LYUFTGUHVGUF MQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "LYVFUGVHWGVF NQOOQMTMUNUQR[Q^P`OaMbKbJaJ`K_L`Ka SMTNTQQ[P^O`Mb", "H\\PFJ[ QFK[ XNWOXPYOYNXMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW MFQF", "MYUFQTPXPZQ[T[VYWW VFRTQXQZR[ RFVF", "AbBQCOEMHMINIPHTF[ GMHNHPGTE[ HTJPLNNMPMRNSOSQP[ PMRORQO[ RTTPVNXMZM\\N]O]Q[W[Z\\[ ZM\\O\\QZWZZ[[^[`YaW", "F]GQHOJMMMNNNPMTK[ LMMNMPLTJ[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W", "G\\HQIOKMNMONOPNTJb MMNNNPMTIb NTOQQNSMUMWNXOYQYTXWVZS[Q[OZNWNT WNXPXTWWUZS[ FbMb", "H\\XMRb YMSb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ ObVb", "IZJQKOMMPMQNQPPTN[ OMPNPPOTM[ PTRPTNVMXMYNYOXPWOXN", "J[XOXPYPYOXNUMRMONNONQORVVWW NPOQVUWVWYVZS[P[MZLYLXMXMY", "KYTFPTOXOZP[S[UYVW UFQTPXPZQ[ NMWM", "F]GQHOJMMMNNNQLWLYN[ LMMNMQKWKYLZN[P[RZTXVT XMVTUXUZV[Y[[Y\\W YMWTVXVZW[", "H\\IQJOLMOMPNPQNWNYP[ NMONOQMWMYNZP[Q[TZVXXUYQYMXMYO", "C`DQEOGMJMKNKQIWIYK[ IMJNJQHWHYIZK[M[OZQXRV TMRVRYSZU[W[YZ[X\\V]R]M\\M]O UMSVSYU[", "H\\KQMNOMRMSOSR QMRORRQVPXNZL[K[JZJYKXLYKZ QVQYR[U[WZYW YNXOYPZOZNYMXMVNTPSRRVRYS[", "G\\HQIOKMNMONOQMWMYO[ MMNNNQLWLYMZO[Q[SZUXWT ZMV[U^SaPbMbKaJ`J_K^L_K` YMU[T^RaPb", "H\\YMXOVQNWLYK[ LQMOOMRMVO MOONRNVOXO LYNYRZUZWY NYR[U[WYXW", "G^VGUHVIWHWGUFRFOGMILLL[ RFPGNIMLM[ \\G[H\\I]H]G\\FZFXGWIW[ ZFYGXIX[ IM[M I[P[ T[[[", "G]WGVHWIXHWGUFRFOGMILLL[ RFPGNIMLM[ WMW[ XMX[ IMXM I[P[ T[[[", "G]VGUHVIWHWGUF XFRFOGMILLL[ RFPGNIMLM[ WHW[ XFX[ IMWM I[P[ T[[[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ ]G\\H]I^H]G[FXFUGSIRLR[ XFVGTISLS[ ]M][ ^M^[ DM^M D[K[ O[V[ Z[a[", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ \\G[H\\I]H]G[F ^FXFUGSIRLR[ XFVGTISLS[ ]H][ ^F^[ DM]M D[K[ O[V[ Z[a[", "MXRMR[ SMS[ OMSM O[V[", "IZWNUMRMONMPLSLVMYNZQ[T[VZ RMPNNPMSMVNYOZQ[ MTUT", "I\\TFQGOJNLMOLTLXMZO[Q[TZVWWUXRYMYIXGVFTF TFRGPJOLNOMTMXNZO[ Q[SZUWVUWRXMXIWGVF NPWP", "G]UFOb VFNb QMMNKPJSJVKXMZP[S[WZYXZUZRYPWNTMQM QMNNLPKSKVLXNZP[ S[VZXXYUYRXPVNTM", "I[TMVNXPXOWNTMQMNNMOLQLSMUOWSZ QMONNOMQMSNUSZT\\T^S_Q_", "G]LMKNJPJRKUOYP[ JRKTOXP[P]O`MbLbKaJ_J\\KXMTOQRNTMVMYNZPZTYXWZU[T[SZSXTWUXTY VMXNYPYTXXWZ", "E_YGXHYIZHYGWFTFQGOINKMNLRJ[I_Ha TFRGPIOKNNLWK[J^I`HaFbDbCaC`D_E`Da _G^H_I`H`G_F]F[GZHYJXMU[T_Sa ]F[HZJYNWWV[U^T`SaQbObNaN`O_P`Oa IM^M", "F^[GZH[I\\H[GXFUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea YMWTVXVZW[Z[\\Y]W ZMXTWXWZX[ JMZM", "F^YGXHYIZHZGXF \\FUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea [FWTVXVZW[Z[\\Y]W \\FXTWXWZX[ JMYM", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a `G_H`IaH`G]FZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja ^M\\T[X[Z\\[_[aYbW _M]T\\X\\Z][ DM_M", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a ^G]H^I_H_G]F aFZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja `F\\T[X[Z\\[_[aYbW ab", "KYOBVROb", "KYOBOb UBUbbDMIMRY HNR[ b:R[", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "F_\\S[UYVWVUUTTQPPONNLNJOIQISJULVNVPUQTTPUOWNYN[O\\Q\\S", "F^[FI[ NFPHPJOLMMKMIKIIJGLFNFPGSHVHYG[F WTUUTWTYV[X[ZZ[X[VYTWT", "F_[NZO[P\\O\\N[MZMYNXPVUTXRZP[M[JZIXIUJSPORMSKSIRGPFNGMIMKNNPQUXWZZ[[[\\Z\\Y M[KZJXJUKSMQ MKNMVXXZZ[", "E`WNVLTKQKOLNMMPMSNUPVSVUUVS QKOMNPNSOUPV WKVSVUXVZV\\T]Q]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYZX XKWSWUXV", "H\\PBP_ TBT_ XIWJXKYJYIWGTFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[P[MZKXKWLVMWLX", "JZUITJUKVJVIUGSFQFOGNINKOMQOVR OMTPVRWTWVVXTZ PNNPMRMTNVPXU[ NVSYU[V]V_UaSbQbOaN_N^O]P^O_", "JZRFQHRJSHRF RFRb RQQTRbSTRQ LMNNPMNLLM LMXM TMVNXMVLTM", "JZRFQHRJSHRF RFRT RPQRSVRXQVSRRP RTRb R^Q`RbS`R^ LMNNPMNLLM LMXM TMVNXMVLTM L[N\\P[NZL[ L[X[ T[V\\X[VZT[", "I\\XFX[ KFXF PPXP K[X[", "E`QFNGKIILHOHRIUKXNZQ[T[WZZX\\U]R]O\\LZIWGTFQF ROQPQQRRSRTQTPSORO RPRQSQSPRP", "J[PFNGOIQJ PFOGOI UFWGVITJ UFVGVI QJOKNLMNMQNSOTQUTUVTWSXQXNWLVKTJQJ RUR[ SUS[ NXWX", "I\\RFOGMILLLMMPORRSSSVRXPYMYLXIVGSFRF RSR[ SSS[ NWWW", "D`PFMGJIHLGOGSHVJYM[P\\T\\W[ZY\\V]S]O\\LZIWGTFPF RFR\\ GQ]Q", "G`fHfIeIdHcGcFdFfGhIiKiNhPfQdR`RUQ;Q4R/S-U,V,X-Y/Y3X6W8U;P?JCHEFHEJDNDREVGYJ[N\\R\\V[XZZW[T[PZMYKWITHPHMIKKJNJRKUMW GdGeHeHdGd U;Q?LCIFGIFKENERFVGXJ[ R\\U[WZYWZTZPYMXKVITH", "EfNSOUQVSVUUVSVQUOSNQNOONPMSMVNYP[S\\V\\Y[[Y\\W]T]P\\MZJXIUHRHOIMJKLIOHSHXI]KaMcPeTfYf]e`cba KLJNIRIXJ\\L`NbQdUeYe]d_cba POTO OPUP NQVQ NRVR NSVS OTUT PUTU aLaNcNcLaL bLbN aMcM aVaXcXcVaV bVbX aWcW", "D`H@Hd M@Md W@Wd \\@\\d MMWK MNWL MOWM MWWU MXWV MYWW", "H\\PMMNLOKQKSLUMVPWTWWVXUYSYQXOWNTMPM MNLPLSMUNVPW WVXTXQWOVNTM", "JZQCVMRTRU ULQS TITKPRRUUY W\\UYSXQXOYN[N]O_Ra W\\UZSYOYO]P_Ra SXPZN]", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLSY", "IjNQOOQNSNUOVQVSUUSVQVOUNTMQMNNKPISHWH[I^K`NaRaW`[_]]`ZcVfQiMk WHZI]K_N`R`W_[^]\\`YcTgQi POTO OPUP NQVQ NRVR NSVS OTUT PUTU eLeNgNgLeL fLfN eMgM eVeXgXgVeV fVfX eWgW", "D`H>Hf I>If M>Mf QBSBSDQDQAR?T>W>Y?[A\\D\\I[LYNWOUOSNRLQNOQNROSQVRXSVUUWUYV[X\\[\\`[cYeWfTfReQcQ`S`SbQb RBRD QCSC Y?ZA[D[IZLYN RLRNPQNRPSRVRX YVZX[[[`ZcYe R`Rb QaSa", "AcHBHb IBIb [B[b \\B\\b DB`B DbMb Wb`b", "BaGBQPFb FBPP EBPQ EB\\B^I[B Ga\\a Fb\\b^[[b", "I[X+U1R8P=OANFMNMVN^OcPgRlUsXy U1S6Q<P@OFNNNVO^PdQhSnUs", "I[L+O1R8T=UAVFWNWVV^UcTgRlOsLy O1Q6S<T@UFVNVVU^TdShQnOs", "I[M+MRMy N+NRNy M+X+ MyXy", "I[V+VRVy W+WRWy L+W+ LyWy", "H[V+R1P5O:O>PBTJTLSNROMRRUSVTXTZPbOfOjPoRsVy T.R2Q5P:P>QCRF R^QaPfPjQoRrTv", "I\\N+R1T5U:U>TBPJPLQNROWRRUQVPXPZTbUfUjToRsNy P.R2S5T:T>SCRF R^SaTfTjSoRrPv", "I[V.S1Q4O8N=NCOIPMSXT\\UbUgTlSoQs S1Q5P8O=OBPHQLTWU[VaVgUlSpQsNv", "I[N.Q1S4U8V=VCUITMQXP\\ObOgPlQoSs Q1S5T8U=UBTHSLPWO[NaNgOlQpSsVv", "7Z:RARRo @RQo ?RRr Z\"VJRr", "Ca].\\.[/[0\\1]1^0^.],[+Y+W,U.T0S3R:QJQjPsOv \\/\\0]0]/\\/ R:Rj U.T1S:SZRjQqPtOvMxKyIyGxFvFtGsHsItIuHvGv GtGuHuHtGt`RFNOKUIXGZE[C[BZBXCWDXCY RFPMOQNVNZP[ RFQJPOOVOZP[ [FWORXP[ [FYMXQWVWZY[Z[\\Z^X [FZJYOXVXZY[", "G^RFQJOPMULWJZH[F[EZEXFWGXFY RFRKSVT[ RFSKTVT[ `G_H`IaHaG```SaQaO`N_L_ XMX\\W_UaSbPbNaL_ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "H\\LFL[M[ LFMFM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMR[S[ RMSMS[", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMRbSb RMSMSb", "H[LFL[M[ LFMFM[ XMWMMW XMMX PTV[X[ QSX[", "CbGMG[H[ GMHMH[ HQKNMMPMRNSQS[ HQKOMNONQORQR[S[ SQVNXM[M]N^Q^[ SQVOXNZN\\O]Q][^[", "H\\LML[M[ LMMMM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM QNOONPMSMUNXOYQZTZVYWXXUXSWPVOTNQN", "H\\LMLbMb LMMMMb MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "H\\WMWbXb WMXMXb WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "KYOMO[P[ OMPMP[ PSQPSNUMXM PSQQSOUNXNXM", "J[XPWNTMQMNNMPNRPSUUWV VUWWWXVZ WYTZQZNY OZNXMX XPWPVN WOTNQNNO ONNPOR NQPRUTWUXWXXWZT[Q[NZMX", "MXRFR[S[ RFSFS[ OMVMVN OMONVN", "H\\LMLWMZO[R[TZWW LMMMMWNYPZRZTYWW WMW[X[ WMXMX[", "JZLMR[ LMMMRY XMWMRY XMR[", "F^IMN[ IMJMNX RMNX RPN[ RPV[ RMVX [MZMVX [MV[", "I[LMW[X[ LMMMX[ XMWML[ XMM[L[", "JZLMR[ LMMMRY XMWMRYNb XMR[ObNb", "I[VNL[ XMNZ LMXM LMLNVN NZXZX[ L[X[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRTXTZV[XZYY[V WRUXUZV[", "LZLVNSPO SFMXMZO[P[RZTXUUURVVWWXWZV TFNXNZO[", "LXTSSTTTTSSRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ ZFTXTZV[XZYY[V [FUXUZV[", "LXOYQXRWSUSSRRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "OXRRUOWLXIXGWFUGTIKdKfLgNfOcPZQ[S[UZVYXV TISNRRO[M`Kd", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "L[LVNSPO SFL[ TFM[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "NVSLRMSNTMSL QROXOZQ[SZTYVV RRPXPZQ[", "NVSLRMSNTMSL QRKd RRO[M`KdJfHgGfGdHaJ_M]Q[TYVV", "LZLVNSPO SFL[ TFM[ URUSVSURTRRTOU OURVSZT[ OUQVRZT[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[", "E^EVGSIRKSKUI[ IRJSJUH[ KUMSORPRRSRUP[ PRQSQUO[ RUTSVRWRYSYUXXXZY[ WRXSXUWXWZY[[Z\\Y^V", "I[IVKSMROSOUM[ MRNSNUL[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "KYRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXVXXWYV PRNTMVMYO[", "L[LVNSPO QLHg RLIg OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "K[UUTSRRPRNSMTLVLXMZO[Q[SZ PRNTMVMYO[ VRPdPfQgSfTcT[V[YY[V WRT[R`Pd", "LZLVNSPRRSRUP[ PRQSQUO[ RUTSVRWRVU VRVUWWXWZV", "NZNVPSQQQSTUUWUYTZR[ QSSUTWTYR[ NZP[U[XYZV", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[ PNVN", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRTXTZV[XZYY[V WRUXUZV[", "KZNRMTLWLZN[O[RZTXUUUR ORNTMWMZN[ URVVWWXWZV", "H]LRJTIWIZK[L[NZPX MRKTJWJZK[ RRPXPZR[S[UZWXXUXR SRQXQZR[ XRYVZW[W]V", "JZJVLSNRPRQSQUPXOZM[L[KZKYLYKZ WSVTWTWSVRURSSRUQXQZR[U[XYZV QSRU SSQU PXQZ QXOZ", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "LYLVNSPRRRTSTVSXPZN[ RRSSSVRXPZ N[P\\Q^QaPdNfLgKfKdLaO^R\\VYYV N[O\\P^PaOdNfbJb [B\\BJb", "KYUBSDQGOKNPNTOYQ]S`UbVb UBVBTDRGPKOPOTPYR]T`Vb", "KYNBPDRGTKUPUTTYR]P`NbOb NBOBQDSGUKVPVTUYS]Q`Ob", "JZRFQGSQRR RFRR RFSGQQRR MINIVOWO MIWO MIMJWNWO WIVINOMO WIMO WIWJMNMO", "F_JQ[Q[R JQJR[R", "F_RIRZSZ RISISZ JQ[Q[R JQJR[R", "F_JM[M[N JMJN[N JU[U[V JUJV[V", "NWSFRGRM SGRM SFTGRM", "I[NFMGMM NGMM NFOGMM WFVGVM WGVM WFXGVM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF QFNIOMSNVKUGQF SFOGNKQNUMVISF", "F^ZIJRZ[ ZIZJLRZZZ[", "F^JIZRJ[ JIJJXRJZJ[", "G^OFObPb OFPFPb UFUbVb UFVFVb JP[P[Q JPJQ[Q JW[W[X JWJX[X", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[I[ [F\\FI[ YTWTUUTWTYV[X[ZZ[X[VYT NFJGIKMMPJNF LFIIKMOLPHLF YTUUTYX[[XYT WTTWV[ZZ[VWT", "E`b", "KZZBVESHQKOONTNXO]P`Qb VESIQMPPOUOZP_Qb", "JYSBTDUGVLVPUUSYQ\\N_Jb SBTEUJUOTTSWQ[N_", "J[TFTR OIYO YIOO", "NWUFSM VFSM", "I[PFNM QFNM YFWM ZFWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "H]SFLb YFRb LQZQ KWYW", "E_^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FF[ XTVTTUSWSYU[W[YZZXZVXT", "G]LFL[ MFM[ IFYFYLXF MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "F^NFNLMTLXKZJ[ XFX[ YFY[ KF\\F G[\\[ G[Gb H[Gb [[\\b \\[\\b", "CbRFR[ SFS[ OFVF GGHHGIFHFGGFHFIGJIKMLONPWPYOZM[I\\G]F^F_G_H^I]H^G NPLQKSJXIZH[ NPMQLSKXJZI[G[FZEX WPYQZS[X\\Z][ WPXQYSZX[Z\\[^[_Z`X O[V[", "H\\LIKFKLLINGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[O[MZLYKWKVLUMVLW WQXTXWWYVZT[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[ N@N?M?M@NBPCTCVBW@", "F^KFK[ LFL[ HFOF LPSPUOVMWIXGYFZF[G[HZIYHZG SPUQVSWXXZY[ SPTQUSVXWZX[Z[[Z\\X H[O[", "E^MFMLLTKXJZI[H[GZGYHXIYHZ XFX[ YFY[ JF\\F U[\\[", "H]KFRV LFSV ZFSVQYPZN[M[LZLYMXNYMZ IFOF VF\\F", "F_RFR[ SFS[ OFVF PILJJLIOIRJULWPXUXYW[U\\R\\O[LYJUIPI PIMJKLJOJRKUMWPX UXXWZU[R[OZLXJUI O[V[", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F H[\\[ [[\\b \\[\\b", "F]KFKQLSOTRTUSWQ LFLQMSOT WFW[ XFX[ HFOF TF[F T[[[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[ `[ab a[ab", "F`PFP[ QFQ[ IFHLHFTF QPXP[Q\\R]T]W\\Y[ZX[M[ XPZQ[R\\T\\W[YZZX[", "CaHFH[ IFI[ EFLF IPPPSQTRUTUWTYSZP[E[ PPRQSRTTTWSYRZP[ [F[[ \\F\\[ XF_F X[_[", "H]MFM[ NFN[ JFQF NPUPXQYRZTZWYYXZU[J[ UPWQXRYTYWXYWZU[", "H]LIKFKLLINGQFSFVGXIYKZNZSYVXXVZS[P[MZLYKWKVLUMVLW SFUGWIXKYNYSXVWXUZS[ PPYP", "CbHFH[ IFI[ EFLF E[L[ VFSGQIPKOOORPVQXSZV[X[[Z]X^V_R_O^K]I[GXFVF VFTGRIQKPOPRQVRXTZV[ X[ZZ\\X]V^R^O]K\\IZGXF IPOP", "G]WFW[ XFX[ [FOFLGKHJJJLKNLOOPWP OFMGLHKJKLLNMOOP RPPQORLYKZJZIY PQOSMZL[J[IYIX T[[[", "H\\XFWGQINKLNKQKULXNZQ[S[VZXXYUYSXPVNSMQMNNLPKS XFWHUIQJNLLN QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "H\\MMM[ NMN[ JMUMXNYPYQXSUT UMWNXPXQWSUT NTUTXUYWYXXZU[J[ UTWUXWXXWZU[", "HZMMM[ NMN[ JMXMXRWM J[Q[", "F]NMNQMWLZK[ WMW[ XMX[ KM[M I[H`H[[[[`Z[", "E`aLbKbJaK`La JMPM TMZM", "H]RFRb SFSb OFSF RPQNPMNMLNKQKWLZN[P[QZRX NMMNLQLWMZN[ WMXNYQYWXZW[ SPTNUMWMYNZQZWYZW[U[TZSX ObVb", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[[[[`Z[", "G]LMLTMVPWRWUVWT MMMTNVPW WMW[ XMX[ IMPM TM[M T[[[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[``_[", "H]QMQ[ RMR[ LMKRKMUM RTVTYUZWZXYZV[N[ VTXUYWYXXZV[", "E_JMJ[ KMK[ GMNM KTOTRUSWSXRZO[G[ OTQURWRXQZO[ YMY[ ZMZ[ VM]M V[][", "J[OMO[ PMP[ LMSM PTTTWUXWXXWZT[L[ TTVUWWWXVZT[", "I\\MOLMLQMONNPMSMVNXPYSYUXXVZS[P[NZLXLWMVNWMX SMUNWPXSXUWXUZS[ RTXT", "Da`Y`Z^Z\\ V\\W^X_Y_ UXW]X^Y^Z]", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUPNP XHYJYLXN UFWGXIXMWOUP RPTQUSWYX[Z[[Y[W WWXYYZZZ TQURXXYYZY[X I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "H\\XIYFYLXIVGSFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[Q[NZLXKUK[LX", "H\\JFJL QFQ[ RGRZ SFS[ ZFZL JFZF N[V[ KFJL LFJI MFJH OFJG UFZG WFZH XFZI YFZL QZO[ QYP[ SYT[ SZU[", "F^KFKULXNZQ[S[VZXXYUYG LGLVMX MFMVNYOZQ[ HFPF VF\\F IFKG JFKH NFMH OFMG WFYG [FYG", "H\\KFR[ LFRXR[ MFSX YGR[ IFPF UF[F JFLH NFMH OFMG WFYG ZFYG", "F^JFN[ KFNVN[ LFOV RFOVN[ RFV[ SFVVV[ TFWV ZGWVV[ GFOF RFTF WF]F HFKG IFKH MFLH NFLG XFZG \\FZG", "H\\KFW[ LFX[ MFY[ XGLZ IFPF UF[F I[O[ T[[[ JFMH NFMH OFMG VFXG ZFXG LZJ[ LZN[ WZU[ WYV[ WYZ[", "G]JFQQQ[ KFRQRZ LFSQS[ YGSQ HFOF VF\\F N[V[ IFKG NFLG WFYG [FYG QZO[ QYP[ SYT[ SZU[", "H\\YFKFKL WFK[ XFL[ YFM[ K[Y[YU LFKL MFKI NFKH PFKG T[YZ V[YY W[YX X[YU", "I[NFN[ OGOZ PFP[ KFZFZL K[S[ LFNG MFNH QFPH RFPG UFZG WFZH XFZI YFZL NYM[ NZL[ PYQ[ PZR[", "H\\RFJ[ QIX[ RIY[ RFZ[ KYXY KZXZ J[Z[", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF OMOT UMUT OPUP OQUQ ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS", "H\\RFKZ QIW[ RIX[ RFY[ I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "G]JEJL ZEZL OMOT UMUT JUJ\\ ZUZ\\ JGZG JHZH JIZI OPUP OQUQ JXZX JYZY JZZZ JFMH ZFWH KIJK LIJJ XIZJ YIZK ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS JVKX JWLX ZWXX ZVYX MYJ[ WYZ[", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HF\\F H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "G]IFPPQQ JFQP KFRPI[ IFYFZLYIWF VFYH TFYG KYYY JZYZ I[Y[ZUYXWY", "H\\JMKILGMFOFPGQIRM LHMGOGPH JMKJMHOHPIQMQ[ RMR[ ZMYJWHUHTISMS[ XHWGUGTH ZMYIXGWFUFTGSIRM N[V[ QYP[ QZO[ SZU[ SYT[", "G]QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ OKLLKMJOJRKTLUOVUVXUYTZRZOYMXLUKOK LMKOKRLT XTYRYOXM OKMLLOLRMUOV UVWUXRXOWLUK", "F^QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ HMIMJNKQLSMTPUTUWTXSYQZN[M\\M LRKNJLILKN HMIKJKKLLPMSNTPU YN[LZLYNXR TUVTWSXPYLZK[K\\M", "G]NYKYJWK[O[MVKRJOJLKIMGPFTFWGYIZLZOYRWVU[Y[ZWYYVY LSKOKLLI XIYLYOXS O[MULPLKMHNGPF TFVGWHXKXPWUU[ KZNZ VZYZ", "H\\UFIZ SJT[ THUZ UFUHVYV[ LUTU F[L[ Q[X[ IZG[ IZK[ TZR[ TYS[ VYW[", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVP YGZIZKYNXO WFXGYIYKXNVP NPVPXQYSYUXXVZR[F[ WQXSXUWXUZ VPWRWUVXTZR[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV QHOJNLMOLSLWMY TFRGPJOLNOMSMXNZP[", "F]OFI[ PFJ[ QFK[ LFUFXGYHZKZOYSWWUYSZO[F[ WGXHYKYOXSVWTY UFWHXKXOWSUWRZO[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "F]OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[U[WV MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[ P[UZ R[UY UYWV", "F\\OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[N[ MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT QHOJNLMOLSLWMY VXWWXT TFRGPJOLNOMSMXNZP[ R[TZVWWT TT\\T UTWU VTWW ZTXV [TXU", "E_NFH[ OFI[ PFJ[ ZFT[ [FU[ \\FV[ KFSF WF_F LPXP E[M[ Q[Y[ LFOG MFNH QFOH RFOG XF[G YFZH ]F[H ^F[G IZF[ IYG[ JYK[ IZL[ UZR[ UYS[ VYW[ UZX[", "KYTFN[ UFO[ VFP[ QFYF K[S[ RFUG SFTH WFUH XFUG OZL[ OYM[ PYQ[ OZR[", "I\\WFRWQYO[ XFTSSVRX YFUSSXQZO[M[KZJXJVKULUMVMWLXKX KVKWLWLVKV TF\\F UFXG VFWH ZFXH [FXG", "F]OFI[ PFJ[ QFK[ \\GMR QOU[ ROV[ SNWZ LFTF YF_F F[N[ R[Y[ MFPG NFOH RFPH SFPG ZF\\G ^F\\G JZG[ JYH[ KYL[ JZM[ UZS[ UYT[ VYX[", "H\\QFK[ RFL[ SFM[ NFVF H[W[YU OFRG PFQH TFRH UFRG LZI[ LYJ[ MYN[ LZO[ R[WZ T[XX V[YU", "D`MFGZ MGNYN[ NFOY OFPX [FPXN[ [FU[ \\FV[ ]FW[ JFOF [F``V``F KFNG LFMH PFNI QFNG [F]G _F]G", "G]NFT[ OFU[ PFV[ [GIZ LFSF XF^F F[L[ Q[X[ MFOH QFPH RFPG YF[G ]F[G IZG[ IZK[ TZR[ TYS[ UYW[", "G]MFQPN[ NFRPO[ OFSPP[ \\GSP KFRF YF_F K[S[ LFNG PFOH QFNG ZF\\G ^F\\G OZL[ OYM[ PYQ[ OZR[", "G]ZFH[ [FI[ \\FJ[ \\FNFLL H[V[XU OFLL PFMI RFNG R[VZ T[WX U[XU", "H\\JFR[ KFRX LFSX JFZFR[ LGYG LHYH", "I]NPNOOOOQMQMONNPMTMVNWOXQXXYZZ[ VOWQWXXZ TMUNVPVXWZZ[[[ VRUSPTMULWLXMZP[S[UZVX NUMWMXNZ USQTOUNWNXOZP[", "G\\LFL[MZOZ MGMY IFNFNZ NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ JFLG KFLH", "H[WQWPVPVRXRXPVNTMQMNNLPKSKULXNZQ[S[VZXX MPLRLVMX QMONNOMRMVNYOZQ[", "H]VFV[[[ WGWZ SFXFX[ VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ TFVG UFVH XYY[ XZZ[", "H[MSXSXQWOVNSMQMNNLPKSKULXNZQ[S[VZXX WRWQVO MPLRLVMX VSVPUNSM QMONNOMRMVNYOZQ[", "KYWHWGVGVIXIXGWFTFRGQHPKP[ RHQKQZ TFSGRIR[ MMVM M[U[ PZN[ PYO[ RYS[ RZT[", "I\\XNYOZNYMXMVNUO QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM OONQNSOU UUVSVQUO QMPNOPOTPVQW SWTVUTUPTNSM NUMVLXLYM[N\\Q]U]X^Y_ N[Q\\U\\X] LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[ ObMaL_L^M\\O[", "G^LFL[ MGMZ IFNFN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JFLG KFLH LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "LXQFQHSHSFQF RFRH QGSG QMQ[ RNRZ NMSMS[ N[V[ OMQN PMQO QZO[ QYP[ SYT[ SZU[", "KXRFRHTHTFRF SFSH RGTG RMR^QaPb SNS]R` OMTMT]S`RaPbMbLaL_N_NaMaM` PMRN QMRO", "G]LFL[ MGMZ IFNFN[ WNNW RSY[ RTX[ QTW[ TM[M I[Q[ T[[[ JFLG KFLH UMWN ZMWN LZJ[ LYK[ NYO[ NZP[ WYU[ VYZ[", "LXQFQ[ RGRZ NFSFS[ N[V[ OFQG PFQH QZO[ QYP[ SYT[ SZU[", "AcFMF[ GNGZ CMHMH[ HQIOJNLMOMQNROSRS[ QORRRZ OMPNQQQ[ SQTOUNWMZM\\N]O^R^[ \\O]R]Z ZM[N\\Q\\[ C[K[ N[V[ Y[a[ DMFN EMFO FZD[ FYE[ HYI[ HZJ[ QZO[ QYP[ SYT[ SZU[ \\ZZ[ \\Y[[ ^Y_[ ^Z`[", "G^LML[ MNMZ IMNMN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JMLN KMLO LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM MPLRLVMX WXXVXRWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNSM", "G\\LMLb MNMa IMNMNb NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ IbQb JMLN KMLO LaJb L`Kb N`Ob NaPb", "H\\VNVb WOWa UNWNXMXb VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ Sb[b VaTb V`Ub X`Yb XaZbaLbJbIaI_K_KaJaJ` JMQM TMZM KMNO PMNN VMXN YMXN", "I[VML[ WMM[ XMN[ XMLMLQ L[X[XW MMLQ NMLP OMLO QMLN S[XZ U[XY V[XX W[XW", "G^[MZQYTWXUZR[P[MZKXJUJSKPMNPMRMUNVOWQYXZZ[[\\[ ZMYQXTWVUYTZR[ LXKVKRLP P[NZMYLVLRMONNPM RMTNUOVQXXYZ[[", "G\\QFNGMHLJKNKb NHMJLNLa QFOGNIMNMb QFSFVGWHXJXLWNVOSP PPTPWQXRYTYWXYWZT[Q[OZNYMW VHWJWLVN WRXTXWWY SFUGVIVMUOSP TPVQWSWXVZT[ KbMb", "F\\HRINKMMMONPOQRRYSb IOKNMNOOPP HRIPKOMOOPPQQTRYRa XMWPVRTUSWR[Qb YMWQ ZMYOWRTVSXR[ XMZM QbSb", "H\\SMQMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMPLNKMJMHNGPFSFWH MPLSLUMX WXXUXSWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNOKNJNIOHQGTGWH", "I[SMUNVOWOVNSMQMMNLOLQMRQS SSQSMTKVKXMZP[S[VZXXWXVZ NNMOMQNR MULVLXMY QMONNONQORQS QSNTMVMXNZP[", "I[QHRGRFQFPGPIQJTKXKYKYJXJUKSLPNNPMRLULWMYNZP[S\\U]V_VaUbSbRaR`S`Sa POOPNRMUMWNYOZ UKRMQNOQNTNWOYQ[S\\", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ UMVNWQWb WOXRXa NQOOPNRMUMWNXOYRYb L[N[ WbYb", "F]IMJNKPKTLWMYNZQ[S[VZWYXWYRYOXJVGTFRFPGOIOKPMSOVP[Q JMKNLPLTMWNY VYWWXRXOWJVHTG GPHNIMKMLNMPMTNXOZQ[ S[UZVXWSWNVJUHSGQGOI", "KZNMONPPPXQZS[U[WZXX OMPNQPQXRZ LPMNNMPMQNRPRXSZT[", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ SOUNWNXOXPZPZNXMVMTNQQOTNW XNYOYP PSQSWYYYZX TWWZYZ RTUZV[X[YZZX L[N[", "H\\JGKFMFOGQIXXYZZ[ OHPIWXXY MFNGOIVXXZZ[[[ RMJZJ[K[RM", "G]KMKb LNLa MMMb VMVXWZX[Z[[Z\\X WNWXXZY[ XMXXYZZ[ MXNZP[R[TZUYVW KMMM VMXM KbMb", "G]JMKNLPMTN[ KMLNMPNTOZ HPINJMLMMNNPOTPZ VVWTXQXMYMZNYQXSVVTXQZN[ XRYOYM", "JZPGSFRFPGOHOIPJSKVLWKVJSKPLNMMOMQNRPSSTVUWTVSSTOUMVLXLZM[O\\S]U^V_VaTbRbOaPaRb OMNONQOR NVMXMZN[ VKSKQLPMOOOQQSST VTSTPUOVNXNZP\\S]", "G]IQJOKNMM[M KOMNZN IQJPLO[O OONZM[LZMWOO UOVZW[XZWWUO [M[O OOMZ UOWZ", "G\\QMNNLPKTKb MPLTLa QMONNOMSMb MWNYOZQ[S[VZXXYUYSXPVNSMQM WXXVXRWP S[UZVYWVWRVOUNSM KbMb", "G]PMMNKPJSJUKXMZP[R[UZWXXUXSWPUNRM LPKRKVLX VXWVWRVP PMNNMOLRLVMYNZP[ R[TZUYVVVRUOTNRM RMZO[N[MPM RMZN", "H\\JQKOLNNMZM LONNYN JQKPMOZO ROQZR[SZRO ZMZO RORZ", "G\\JMKNLPLUMXOZQ[S[UZWXXVYRYNXMWMXPXSWWUZ KMLNMPMUNX WMXNXO HPINJMLMMNNPNVOYQ[", "G]RQQNPMNMLNKOJRJUKXMZP[T[WZYXZUZRYOXNVMTMSNRQ LOKRKULX XXYUYRXO NMMNLQLVMYNZP[ T[VZWYXVXQWNVM RQQb RQRa RQSb QbSb", "H\\LMMNNPT_VaXbZb[a NOOPU_V` INJMLMNNPPV_WaXb VSXPYMZMYOVSN\\K`JbKbL_N\\", "F]HNINJPJUKXMZP[T[VZXXYVZRZNYMXMYPYSXWVZ JNKPKULX XMYNYO GPHNIMJMKNLPLVMYNZP[ QFSb RGRa SFQb QFSF QbSb`Kb TJSMRRP[O^ XFVHUJTMSRQZP]O_MaKbIbHaH_J_JaIaI` NMYM", "H]XMT[S^QaOb YMU[S_ XMZMV[T_RaObLbJaI`I^K^K`J`J_ VTVQUNSMQMNNLQKTKVLYMZO[Q[SZTYUWVT NOMQLTLWMY QMOONQMTMWNZO[", "G]OFI[K[ PFJ[ LFQFK[ MTOPQNSMUMWNXPXSVX WNWRVVVZ WPUUUXVZW[Y[[Y\\W MFPG NFOH", "KXTFTHVHVFTF UFUH TGVG LQMOOMQMRNSPSSQX RNRRQVQZ RPPUPXQZR[T[VYWW", "KXUFUHWHWFUF VFVH UGWG MQNOPMRMSNTPTSRZQ]P_NaLbJbIaI_K_KaJaJ` SNSSQZP]O_ SPRTP[O^N`Lb", "G]OFI[K[ PFJ[ LFQFK[ YOYNXNXPZPZNYMWMUNQROS MSOSQTRUTYUZWZ QUSYTZ OSPTRZS[U[WZYW MFPG NFOH", "LXTFQQPUPXQZR[T[VYWW UFRQQUQZ QFVFRTQX RFUG SFTH", "@cAQBODMFMGNHPHSF[ GNGSE[ GPFTD[F[ HSJPLNNMPMRNSPSSQ[ RNRSP[ RPQTO[Q[ SSUPWNYM[M]N^P^S\\X ]N]R\\V\\Z ]P[U[X\\Z][_[aYbW", "F^GQHOJMLMMNNPNSL[ MNMSK[ MPLTJ[L[ NSPPRNTMVMXNYPYSWX XNXRWVWZ XPVUVXWZX[Z[\\Y]W", "H\\QMNNLQKTKVLYMZP[S[VZXWYTYRXOWNTMQM NOMQLTLWMY VYWWXTXQWO QMOONQMTMWNZP[ S[UYVWWTWQVNTM", "G]HQIOKMMMNNOPOSNWKb NNNSMWJb NPMTIb OTPQQORNTMVMXNYOZRZTYWWZT[R[PZOWOT XOYQYTXWWY VMWNXQXTWWVYT[ FbNb JaGb J`Hb K`Lb JaMb", "G\\WMQb XMRb WMYMSb UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ NbVb RaOb R`Pb S`Tb RaUb", "I[JQKOMMOMPNQPQTO[ PNPTN[ PPOTM[O[ YOYNXNXPZPZNYMWMUNSPQT", "J[XPXOWOWQYQYOXNUMRMONNONQOSQTTUVVWX ONNQ ORQSTTVU WVVZ NOOQQRTSVTWVWXVZS[P[MZLYLWNWNYMYMX", "KYTFQQPUPXQZR[T[VYWW UFRQQUQZ TFVFRTQX NMXM", "F^GQHOJMLMMNNPNSLX MNMRLVLZ MPKUKXLZN[P[RZTXVU XMVUVXWZX[Z[\\Y]W YMWUWZ XMZMXTWX", "H\\IQJOLMNMONPPPSNX ONORNVNZ OPMUMXNZP[R[TZVXXUYQYMXMXNYP", "CaDQEOGMIMJNKPKSIX JNJRIVIZ JPHUHXIZK[M[OZQXRU TMRURXSZU[W[YZ[X]U^Q^M]M]N^P UMSUSZ TMVMTTSX", "G]JQLNNMPMRNSPSR PMQNQRPVOXMZK[I[HZHXJXJZIZIY RORRQVQY ZOZNYNYP[P[NZMXMVNTPSRRVRZS[ PVPXQZS[U[WZYW", "G]HQIOKMMMNNOPOSMX NNNRMVMZ NPLULXMZO[Q[SZUXWT YMU[T^RaPb ZMV[T_ YM[MW[U_SaPbMbKaJ`J^L^L`K`K_", "H\\YMXOVQNWLYK[ XOOOMPLR VORNONNO VORMOMMOLR LYUYWXXV NYRZUZVY NYR[U[WYXV", "H\\WQVOUNSMQMNNLPKSKULXNZQ[S[VZWYXWYSYNXJWHVGSFQFNGMHNHOGQF MPLRLVMX VYWWXSXNWJVH QMONNOMRMVNYOZQ[ S[UZVXWTWMVIUGSF", "I[UMWNXOYOXNUMRMONMPLSLUMXOZR[U[XZYYXYWZU[ NPMSMUNX RMPNOONRNVOYPZR[ NTTUUTTSNT NTTT", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF LPXQ LQXP", "G]PMMNKPJSJUKXMZP[T[WZYXZUZSYPWNTMPM LPKSKULX XXYUYSXP PMNNMOLRLVMYNZP[T[VZWYXVXRWOVNTM QFSb RGRa SFQb QFSF QbSb`Ub QHPKOOOUPYQ\\ SDRFQIPOPUQ[R^S`", "KYOBQDSGUKVPVTUYS]Q`Ob SHTKUOUUTYS\\ QDRFSITOTUS[R^Q`", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[ [FI[ [FJ[ YTWTUUTWTYV[X[ZZ[X[VYT OGLFIIJLMMPJOG NFJGIK KMOLPH ZUWTTWUZX[[XZU YTUUTY V[ZZ[V H[J[", "E`bFb _B`BFb", "JZZBXCUERHPKNOMSMXN\\O_Qb SHQKOONTN\\ ZBWDTGRJQLPOOSN\\ NTO]P`Qb", "JZSBUEVHWLWQVUTYR\\O_LaJb VHVPUUSYQ\\ SBTDUGVP VHUQTUSXRZP]M`Jb", "J[TFSGUQTR TFTR TFUGSQTR OIPIXOYO OIYO OIOJYNYO YIXIPOOO YIOO YIYJONOO", "MWUFTGRM UGRM UFVGRM", "H\\PFOGMM PGMM PFQGMM ZFYGWM ZGWM ZF[GWM", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF SFPIQMUNXKWGSF UFQGPKSNWMXIUF", "G^SFKbLb SFTFLb YFQbRb YFZFRb KP\\P\\Q KPKQ\\Q IWZWZX IWIXZX", "E^^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FE[ ^FF[ ^FG[ XTVTTUSWSYU[W[YZZXZVXT PGMFJIKLNMQJPG OFKGJK LMPLQH YUVTSWTZW[ZXYU XTTUSY U[YZZV E[G[", "E`UQUNTLRKPKNLMMLPLSMUOVQVSUTTUQ OLNMMPMSNU RKPLOMNPNSOUPV VKUQUSVUXVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WKVQVSWU VKXKWQWSXUZV", "/build/master_pack-android/opencv/modules/imgproc/src/histogram.cpp", "dims > 0 && histSize", "mask.empty() || mask.type() == CV_8UC1", "void cv::calcHist(const cv::Mat *, int, const int *, cv::InputArray, cv::SparseMat &, int, const int *, const float **, bool, bool)", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int> &, cv::InputArray, cv::OutputArray, const std::vector<int> &, const std::vector<float> &, bool)", "nimages > 0 && dims > 0", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "csz == 0 || csz == dims", "void cv::calcBackProject(const cv::Mat *, int, const int *, cv::InputArray, cv::OutputArray, const float **, double, bool)", "dims > 0 && !hist.empty()", "calcBackProject", "void cv::calcBackProject(const cv::Mat *, int, const int *, const cv::SparseMat &, cv::OutputArray, const float **, double, bool)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int> &, cv::InputArray, cv::OutputArray, const std::vector<float> &, double)", "H0.isContinuous()", "nimages > 0", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "csz == 0 || csz == dims || (csz == 1 && _1d)", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "H1.type() == H2.type() && H1.depth() == CV_32F", "compareHist", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "Unknown comparison method", "double cv::compareHist(const cv::SparseMat &, const cv::SparseMat &, int)", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "H1.size(i) == H2.size(i)", "it.ptr != NULL", "Number of dimensions is out of range", "cvCreateHist", "Null <sizes> pointer", "Invalid histogram type", "Null histogram header pointer", "cvMakeHistHeaderForArray", "Only uniform bin ranges can be used here (to avoid memory allocation)", "cvReleaseHist", "Invalid histogram header", "cvClearHist", "cvThreshHist", "cvNormalizeHist", "cvGetMinMaxHistValue", "Invalid histogram header[s]", "cvCompareHist", "One of histograms is sparse and other is not", "The histograms have different numbers of dimensions", "The histograms have different sizes", "Destination double pointer is NULL", "cvCopyHist", "NULL ranges pointer", "cvSetHistBinRanges", "One of <ranges> elements is NULL", "Bin ranges should go in ascenting order", "Bad histogram pointer", "cvCalcArrHist", "Null double array pointer", "cvCalcArrBackProject", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "cvCalcArrBackProjectPatch", "Bad normalization factor (set it to 1.0 if unsure)", "The patch width and height must be positive", "Invalid number of dimensions", "Resultant image must have 32fC1 type", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "NULL histogram array pointer", "cvCalcBayesianProb", "Too small number of histograms", "The function supports dense histograms only", "scale must be positive", "cvCalcProbDensity", "Invalid histogram pointer[s]", "All histograms must have 32fC1 type", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "_src.type() == CV_8UC1", "equalizeHist", "channels != 0 || nimages == dims", "histPrepareImages", "images[j].channels() == 1", "j < nimages", "images[j].size() == imsize && images[j].depth() == depth", "mask.size() == imsize && mask.channels() == 1", "ranges[i] && ranges[i][0] < ranges[i][1]", "ranges[i][k] < ranges[i][k+1]", "Either ranges, either uniform ranges should be provided", "calcHistLookupTables_8u", "calcSparseHist_", "calcHist_", "calcBackProj_", "calcSparseBackProj_", "28EqualizeHistCalcHist_Invoker", "23EqualizeHistLut_Invoker", "/build/master_pack-android/opencv/modules/imgproc/src/hough.cpp", "Wrong type of output lines", "type == CV_32FC2 || type == CV_32FC3", "void cv::HoughLinesP(cv::InputArray, cv::OutputArray, double, double, int, double, double)", "_point.type() == CV_32FC2 || _point.type() == CV_32SC2", "HoughLinesPointSet", "lines_max must be greater than 0", "threshold must be greater than 0", "max must be greater than min", "step must be greater than 0", "NULL destination", "cvHoughLines2", "rho, theta and threshold must be positive", "The destination matrix should be continuous and have a single row or a single column", "The destination matrix data type is inappropriate, see the manual", "Unrecognized method id", "cvHoughCircles", "void cv::HoughLinesStandard(cv::InputArray, cv::OutputArray, int, float, float, int, int, double, double)", "img.type() == CV_8UC1", "HoughLinesStandard", "linesMax > 0", "max_theta must be greater than min_theta", "max_theta", "void cv::HoughLinesSDiv(cv::InputArray, cv::OutputArray, int, float, float, int, int, int, int, double, double)", "HoughLinesSDiv", "HoughLinesProbabilistic", "void cv::HoughCircles(cv::InputArray, cv::OutputArray, int, double, double, double, double, int, int, int, double)", "Wrong type of output circles", "type == CV_32FC3 || type == CV_32FC4", "!_image.empty() && _image.type() == CV_8UC1 && (_image.isMat() || _image.isUMat())", "_circles.isMat() || _circles.isVector()", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "Unrecognized method id. Actually only CV_HOUGH_GRADIENT is supported.", "kernelSize == -1 || kernelSize == 3 || kernelSize == 5 || kernelSize == 7", "HoughCirclesGradient", "HoughCircleEstimateRadiusInvoker", "N2cv24HoughCirclesAccumInvokerE", "N2cv30HoughCirclesFindCentersInvokerE", "N2cv32HoughCircleEstimateRadiusInvokerINS_11NZPointListEEE", "N2cv32HoughCircleEstimateRadiusInvokerINS_10NZPointSetEEE", "=void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const cv::Scalar &)", "/build/master_pack-android/opencv/modules/imgproc/src/imgwarp.cpp", "!_map1.empty()", "remap", "_map2.empty() || (_map2.size() == _map1.size())", "dst.cols < SHRT_MAX && dst.rows < SHRT_MAX && src.cols < SHRT_MAX && src.rows < SHRT_MAX", "nnfunc != 0", "_src.channels() <= 4", "Unknown interpolation method", "ifunc != 0", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && map2.empty()) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && m2->empty())", "convertMaps", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "Unsupported combination of input/output matrices", "warpAffine", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const cv::Scalar &)", "_src.channels() <= 4 || (interpolation != INTER_LANCZOS4 && interpolation != INTER_CUBIC)", "src.cols > 0 && src.rows > 0", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "warpPerspective", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const cv::Scalar &)", "_src.total() > 0", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "cv::Mat cv::getRotationMatrix2D(cv::Point2f, double, double)", "cv::Mat cv::getPerspectiveTransform(const cv::Point2f *, const cv::Point2f *, int)", "matM.rows == 2 && matM.cols == 3", "invertAffineTransform", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "getPerspectiveTransform", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "getAffineTransform", "cvWarpAffine", "cvWarpPerspective", "src.type() == dst.type() && dst.size() == mapx.size()", "cvRemap", "M.size() == M0.size()", "cv2DRotationMatrix", "cvGetPerspectiveTransform", "cvGetAffineTransform", "!dsize.empty()", "warpPolar", "!ssize.empty()", "cvLinearPolar", "cvLogPolar", "Unknown/unsupported interpolation type", "initInterTab2D", "initInterTab1D", "remapBilinear", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "/build/master_pack-android/opencv/modules/imgproc/src/intersection.cpp", "fabs(normL2Sqr<float>(intersection[minI] - intersection[minJ]) - minD) < 1e-6", "rotatedRectangleIntersection", "/build/master_pack-android/opencv/modules/imgproc/src/linefit.cpp", "npoints2 >= 0 || npoints3 >= 0", "fitLine", "line != 0", "cvFitLine", "Unknown distance type", "fitLine2D", "fitLine2D_wods", "Unknown distance", "fitLine3D", "fitLine3D_wods", "LineSegmentDetectorImpl", "/build/master_pack-android/opencv/modules/imgproc/src/lsd.cpp", "virtual void cv::LineSegmentDetectorImpl::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "!image.empty() && image.type() == CV_8UC1", "sum > 0", "region2rect", "!(double_equal(Ixx, 0) && double_equal(Iyy, 0) && double_equal(Ixy, 0))", "get_theta", "refine", "leftmost != NULL", "rect_nfa", "rightmost != NULL", "tailp != NULL", "virtual void cv::LineSegmentDetectorImpl::drawSegments(cv::InputOutputArray, cv::InputArray)", "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", "drawSegments", "_lines.depth() == CV_32F || _lines.depth() == CV_32S", "virtual int cv::LineSegmentDetectorImpl::compareSegments(const cv::Size &, cv::InputArray, cv::InputArray, cv::InputOutputArray)", "!sz.empty()", "compareSegments", "_lines1.depth() == CV_32F || _lines1.depth() == CV_32S", "_lines2.depth() == CV_32F || _lines2.depth() == CV_32S", "_image.channels() == 3", "img.isContinuous() && I1.isContinuous() && I2.isContinuous()", "N2cv23LineSegmentDetectorImplE", "N2cv19LineSegmentDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv23LineSegmentDetectorImplENS_9allocatorIS2_EEEE", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "/build/master_pack-android/opencv/modules/imgproc/src/matchcontours.cpp", "matchShapes", "/build/master_pack-android/opencv/modules/imgproc/src/median_blur.cpp", "(ksize % 2 == 1) && (_src0.dims() <= 2 )", "medianBlur", "src.depth() == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "cn > 0 && cn <= 4", "medianBlur_8u_Om", "medianBlur_8u_O1", "k < 16", "b < 16", "createConvexHull", "/build/master_pack-android/opencv/modules/imgproc/src/min_enclosing_triangle.cpp", "areEqualPoints(p, q) == false", "lineEquationDeterminedByPoints", "The position of the vertex C on side B could not be determined, because the considered lines do not intersect.", "findVertexCOnSideB", "The position of side B could not be determined, because gamma(b) could not be computed.", "updateSideB", "/build/master_pack-android/opencv/modules/imgproc/src/moments.cpp", "Invalid image type (must be single-channel)", "moments", "void cv::HuMoments(const cv::Moments &, double *)", "void cv::HuMoments(const cv::Moments &, cv::OutputArray)", "hu.isContinuous()", "moments != 0", "cvMoments", "cvGetSpatialMoment", "cvGetCentralMoment", "cvGetHuMoments", "contour.depth() == CV_32S || contour.depth() == CV_32F", "contourMoments", "getMorphologyRowFilter", "/build/master_pack-android/opencv/modules/imgproc/src/morph.cpp", "Unsupported data type (=%d)", "getMorphologyColumnFilter", "getMorphologyFilter", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "createMorphologyFilter", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "getStructuringElement", "void cv::erode(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "void cv::dilate(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "morphologyEx", "unknown morphological operation", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "cvCreateStructuringElementEx", "cvReleaseStructuringElement", "cvErode", "cvDilate", "cvMorphologyEx", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "_kernel.type() == CV_8U", "MorphFilter", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIhEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpItEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIsEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIfEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIdEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIhEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpItEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIsEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIfEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIdEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIhEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpItEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIsEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIfEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIdEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIhEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpItEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIsEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIfEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIdEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIhEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpItEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIsEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIfEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIdEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIhEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpItEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIsEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIfEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIdEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "cv::Point2d cv::phaseCorrelate(cv::InputArray, cv::InputArray, cv::InputArray, double *)", "/build/master_pack-android/opencv/modules/imgproc/src/phasecorr.cpp", "src1.type() == src2.type()", "phaseCorrelate", "src1.type() == CV_32FC1 || src1.type() == CV_64FC1", "src1.type() == window.type()", "src1.size == window.size", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "createHanningWindow", "winSize.width > 1 && winSize.height > 1", "magSpectrums", "divSpectrums", "dst.data != srcA.data", "dst.data != srcB.data", "weightedCentroid", "/build/master_pack-android/opencv/modules/imgproc/src/pyramids.cpp", "borderType != BORDER_CONSTANT", "pyrDown", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const cv::Size &, int)", "borderType == BORDER_DEFAULT", "pyrUp", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "buildPyramid", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "cvPyrDown", "cvPyrUp", "cvReleasePyramid", "The number of extra layers must be non negative", "cvCreatePyramid", "The buffer is too small to fit the pyramid", "pyrDown_", "ssize.width > 0 && ssize.height > 0 && std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "pyrUp_", "/build/master_pack-android/opencv/modules/imgproc/src/resize.cpp", "(dst_width > 0 && dst_height > 0) || (inv_scale_x > 0 && inv_scale_y > 0)", "func != 0 && cn <= 4", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "inv_scale_x > 0", "inv_scale_y > 0", "cvResize", "ksize <= MAX_ESIZE", "resizeGeneric_Invoker", "N2cv15resizeNNInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_23VResizeLinearVec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_23VResizeLinearVec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_22VResizeCubicVec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_22VResizeCubicVec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_25VResizeLanczos4Vec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_25VResizeLanczos4Vec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_22VResizeLanczos4Vec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_25ResizeAreaFastVec_SIMD_8uEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_26ResizeAreaFastVec_SIMD_16uEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_26ResizeAreaFastVec_SIMD_16sEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_26ResizeAreaFastVec_SIMD_32fEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N12_GLOBAL__N_122resize_bitExactInvokerIhNS_13ufixedpoint16ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIaNS_12fixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerItNS_13ufixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIsNS_12fixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIiNS_12fixedpoint64ELi2EEE", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "/build/master_pack-android/opencv/modules/imgproc/src/rotcalipers.cpp", "void cv::boxPoints(cv::RotatedRect, cv::OutputArray)", "orientation != 0", "rotatingCalipers", "/build/master_pack-android/opencv/modules/imgproc/src/samplers.cpp", "cn == 1 || cn == 3", "getRectSubPix", "Unsupported combination of input and output formats", "cvGetRectSubPix", "cvGetQuadrangleSubPix", "cvSampleLine", "void cv::watershed(cv::InputArray, cv::InputOutputArray)", "/build/master_pack-android/opencv/modules/imgproc/src/segmentation.cpp", "src.type() == CV_8UC3 && dst.type() == CV_32SC1", "watershed", "void cv::pyrMeanShiftFiltering(cv::InputArray, cv::OutputArray, double, double, int, cv::TermCriteria)", "The number of pyramid levels is too large or negative", "pyrMeanShiftFiltering", "Only 8-bit, 3-channel images are supported", "The input and output images must have the same type", "The input and output images must have the same size", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f &, float &)", "/build/master_pack-android/opencv/modules/imgproc/src/shapedescr.cpp", "count >= 0 && (depth == CV_32F || depth == CV_32S)", "minEnclosingCircle", "double cv::arcLength(cv::InputArray, bool)", "arcLength", "double cv::contourArea(cv::InputArray, bool)", "npoints >= 0 && (depth == CV_32F || depth == CV_32S)", "contourArea", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "n >= 0 && (depth == CV_32F || depth == CV_32S)", "fitEllipse", "There should be at least 5 points to fit the ellipse", "fitEllipseAMS", "fitEllipseDirect", "cv::Rect cv::boundingRect(cv::InputArray)", "cvContourArea", "Only curves with integer coordinates are supported in case of contour slice", "cvArcLength", "cvBoundingRect", "The image/matrix format is not supported by the function", "img.depth() <= CV_8S && img.channels() == 1", "maskBoundingRect", "pointSetBoundingRect", "contour != NULL && CV_IS_SEQ_POINT_SET( contour )", "icvContourSecArea", "(*buf1 != NULL || *buf2 != NULL) && *buf3 != NULL", "icvMemCopy", "/build/master_pack-android/opencv/modules/imgproc/src/smooth.cpp", "void cv::GaussianBlur(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "cvSmooth", "The destination image does not have the proper type", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "createGaussianKernels", "=N2cv18fixedSmoothInvokerIhN12_GLOBAL__N_113ufixedpoint16EEE", "void cv::spatialGradient(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "/build/master_pack-android/opencv/modules/imgproc/src/spatialgradient.cpp", "spatialGradient", "borderType == BORDER_DEFAULT || borderType == BORDER_REPLICATE", "/build/master_pack-android/opencv/modules/imgproc/src/subdivision2d.cpp", "Subdivision is empty", "int cv::Subdiv2D::insert(cv::Point2f)", "insert", "Subdiv2D::locate returned invalid location = %d", "void cv::Subdiv2D::insert(const std::vector<Point2f> &)", "void cv::Subdiv2D::initDelaunay(cv::Rect)", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f *)", "edgeDst(edge, &t) > 0", "findNearest", "edgeOrg( edge, &t ) > 0", "edgeOrg(e) == edgeOrg(o_next)", "checkSubdiv", "edgeOrg(e) == edgeOrg(o_prev)", "edgeDst(e) == edgeDst(d_next)", "edgeDst(e) == edgeDst(d_prev)", "edgeDst(o_next) == edgeOrg(d_prev)", "edgeDst(o_prev) == edgeOrg(d_next)", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "integral", "/build/master_pack-android/opencv/modules/imgproc/src/sumpixels.cpp", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int)", "void cv::integral(cv::InputArray, cv::OutputArray, int)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "cvIntegral", "crossCorr", "/build/master_pack-android/opencv/modules/imgproc/src/templmatch.cpp", "depth == tdepth || tdepth == CV_32F", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "ccn == 1 || delta == 0", "the input arrays are too big", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "(depth == CV_8U || depth == CV_32F) && type == _templ.type() && _img.dims() <= 2", "_img.size().height <= _templ.size().height && _img.size().width <= _templ.size().width", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "cvMatchTemplate", "matchTemplateMask", "sqsum.data != NULL", "common_matchTemplate", "/build/master_pack-android/opencv/modules/imgproc/src/thresh.cpp", "automatic_thresh != (CV_THRESH_OTSU | CV_THRESH_TRIANGLE)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "adaptiveThreshold", "blockSize % 2 == 1 && blockSize > 1", "Unknown/unsupported adaptive threshold method", "Unknown/unsupported threshold type", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "cvThreshold", "cvAdaptiveThreshold", "thresh_16s", "threshGeneric", "thresh_32f", "thresh_64f", "N2cv15ThresholdRunnerE", "arr != 0 && contour_header != 0 && block != 0", "cvPointSeqFromMat", "/build/master_pack-android/opencv/modules/imgproc/src/utils.cpp", "Input array is not a valid matrix", "The matrix can not be converted to point sequence because of inappropriate element type", "The matrix converted to point sequence must be 1-dimensional and continuous", "cvCopyMakeBorder", "layer_sizes", "input_scale", "inv_output_scale", "there should be at least one input and one output and every hidden layer must have more than 1 neuron", "setLayerSizes", "activation_function", "SIGMOID_SYM", "IDENTITY", "LEAKYRELU", "GAUSSIAN", "activ_func >= 0", "read_params", "activation_function_id", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "training_params", "train_method", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "ANNEAL", "initialT", "finalT", "coolingRatio", "itePerStep", "Unknown training method (should be BACKPROP or RPROP)", "term_criteria", "epsilon", "Unknown activation function", "setActivationFunction", "Unknown training method", "write_params", "opencv_ml_ann_mlp", "The network has not been created. Use method create or the appropriate constructor", "prepare_to_train", "input training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of 0-th (input) layer", "output training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of last (output) layer", "The numbers of input and output samples do not match", "Some of new output training vector components run exceed the original range too much", "calc_output_scale", "train_rprop", "weights[i].size() == Size(n2, n1+1)", "finalTemperature > 0", "simulatedAnnealingSolver", "/build/master_pack-android/opencv/modules/ml/include/opencv2/ml/ml.inl.hpp", "initialTemperature > finalTemperature", "iterationsPerStep > 0", "coolingRatio < 1.0f", "The network has not been trained or loaded", "predict", "(type == CV_32F || type == CV_64F) && inputs.cols == layer_sizes[0]", "sums.isContinuous()", "calc_activ_func", "0 <= layerIdx && layerIdx < (int)weights.size()", "getWeights", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml11ANN_MLPImplENS_9allocatorIS3_EEEE", "N2cv2ml11ANN_MLPImplE", "N2cv2ml7ANN_MLPE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "setCVFolds", "/build/master_pack-android/opencv/modules/ml/src/precomp.hpp", "tree pruning using cross-validation is not implemented.Set CVFolds to 1", "max_depth should be >= 0", "setMaxDepth", "RTrees have not been trained", "/build/master_pack-android/opencv/modules/ml/src/boost.cpp", "ntrees", "ntrees == (int)trees_node.size()", "opencv_ml_dtree", "std::abs(w->ord_responses[si]) == 1", "updateWeightsAndTrim", "Unknown boosting type", "max_categories should be >= 2", "setMaxCategories", "params.regression_accuracy should be >= 0", "setRegressionAccuracy", "boosting_type", "DiscreteAdaboost", "RealAdaboost", "LogitBoost", "GentleAdaboost", "Unknown", "weight_trimming_rate", "opencv_ml_boost", "/build/master_pack-android/opencv/modules/core/include/opencv2/core.hpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9BoostImplENS_9allocatorIS3_EEEE", "N2cv2ml9BoostImplE", "N2cv2ml5BoostE", "N2cv2ml6DTreesE", "N2cv2ml18DTreesImplForBoostE", "static cv::Mat cv::ml::TrainData::getSubMatrix(const cv::Mat &, const cv::Mat &, int)", "/build/master_pack-android/opencv/modules/ml/src/data.cpp", "type == CV_32S || type == CV_32F || type == CV_64F", "getSubMatrix", "static Ptr<cv::ml::TrainData> cv::ml::TrainData::loadFromCSV(const cv::String &, int, int, int, const cv::String &, char, char)", "static Ptr<cv::ml::TrainData> cv::ml::TrainData::create(cv::InputArray, int, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "invalid CSV format; no data found", "loadCSV", "ridx1 > ridx0", "nvars == (int)rowvals.size()", "(!varTypesSet && vtypes[i] == rowtypes[i]) || (varTypesSet && (vtypes[i] == rowtypes[i] || rowtypes[i] == VAR_ORDERED))", "vsymbolflags[i] == sflag || rowtypes[i] == VAR_MISSED", "If responses are vector values, not scalars, they must be marked as ordered responses", "type spec is not correct; it should have format \"cat\", \"ord\" or \"ord[n1,n2-n3,n4-n5,...]cat[m1-m2,m3,m4-m5,...]\", where n's and m's are 0-based variable indices", "setVarTypes", "0 <= b1 && b1 < nvars", "0 <= b1 && b1 <= b2 && b2 < nvars", "type of some variables is not specified", "_layout == ROW_SAMPLE || _layout == COL_SAMPLE", "samples.type() == CV_32F || samples.type() == CV_32S", "(sampleIdx.checkVector(1, CV_32S, true) > 0 && checkRange(sampleIdx, true, 0, 0, nsamples)) || sampleIdx.checkVector(1, CV_8U, true) == nsamples", "sampleWeights.checkVector(1, CV_32F, true) == nsamples", "(varIdx.checkVector(1, CV_32S, true) > 0 && checkRange(varIdx, true, 0, 0, ninputvars)) || varIdx.checkVector(1, CV_8U, true) == ninputvars", "responses.type() == CV_32F || responses.type() == CV_32S", "(layout == ROW_SAMPLE && responses.rows == nsamples) || (layout == COL_SAMPLE && responses.cols == nsamples)", "varType.checkVector(1, CV_8U, true) == nvars && checkRange(varType, true, 0, VAR_ORDERED, VAR_CATEGORICAL+1)", "varType.at<uchar>(ninputvars + i) == VAR_ORDERED", "missing.size() == samples.size() && missing.type() == CV_8U", "(data.cols == 1 || data.rows == 1) && (data.type() == CV_32S || data.type() == CV_32F)", "preprocessCategorical", "(float)idata[i] == fdata[i*istep]", "cv::Mat cv::ml::getSubMatrixImpl(const cv::Mat &, const cv::Mat &, int) [T = int]", "Bad idx", "Bad idx or layout", "cv::Mat cv::ml::getSubMatrixImpl(const cv::Mat &, const cv::Mat &, int) [T = double]", "buf != 0 && 0 <= sidx && sidx < getNSamples()", "getSample", "n >= 0", "0 <= j && j < nvars", "0 <= vi && vi < getNAllVars()", "getValues", "0 <= j && j < nsamples", "getNormCatValues", "cmap[idx] == val", "0 <= vi && vi < n", "getCatCount", "0 <= count && count < nsamples", "setTrainTestSplit", "0. <= ratio && ratio <= 1.", "setTrainTestSplitRatio", "a < ntest", "shuffleTrainTest", "b < ntest", "label > 0 && label <= (int)n", "getNames", "N2cv2ml9TrainDataE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13TrainDataImplENS_9allocatorIS3_EEEE", "N2cv2ml13TrainDataImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml6EMImplENS_9allocatorIS3_EEEE", "N2cv2ml6EMImplE", "N2cv2ml2EME", "covs", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "unknown_%d", "covMatType >= 0", "/build/master_pack-android/opencv/modules/ml/src/em.cpp", "!covs.empty()", "decomposeCovs", "!covs[clusterIndex].empty()", "!covsEigenValues.empty()", "computeLogWeightDivDet", "opencv_ml_em", "!means.empty()", "computeProbabilities", "(stype == CV_32F || stype == CV_64F) && (ptype == CV_32F || ptype == CV_64F)", "sample.size() == Size(means.cols, 1)", "expDiffSum > 0", "nclusters >= 1", "setClustersNumber", "covMatType == COV_MAT_SPHERICAL || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_GENERIC", "setCovarianceMatrixType", "isTrained()", "predict2", "!sample.empty()", "!samples.empty()", "checkTrainData", "samples.channels() == 1", "nclusters > 0", "nclusters <= nsamples", "startStep == START_AUTO_STEP || startStep == START_E_STEP || startStep == START_M_STEP", "covMatType == COV_MAT_GENERIC || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_SPHERICAL", "!probs || (!probs->empty() && probs->rows == nsamples && probs->cols == nclusters && (probs->type() == CV_32FC1 || probs->type() == CV_64FC1))", "!weights || (!weights->empty() && (weights->cols == 1 || weights->rows == 1) && static_cast<int>(weights->total()) == nclusters && (weights->type() == CV_32FC1 || weights->type() == CV_64FC1))", "!means || (!means->empty() && means->rows == nclusters && means->cols == dim && means->channels() == 1)", "!covs || (!covs->empty() && static_cast<int>(covs->size()) == nclusters)", "!m.empty() && m.size() == covSize && (m.channels() == 1)", "probs", "weights.empty()", "doTrain", "invCovsEigenValues.empty()", "meansFlt.type() == CV_32FC1", "clusterTrainSamples", "!clusterSamples.empty()", "/build/master_pack-android/opencv/modules/ml/src/inner_functions.cpp", "virtual bool cv::ml::StatModel::train(const Ptr<cv::ml::TrainData> &, int)", "virtual bool cv::ml::StatModel::train(cv::InputArray, int, cv::InputArray)", "virtual float cv::ml::StatModel::calcError(const Ptr<cv::ml::TrainData> &, bool, cv::OutputArray) const", "void cv::ml::randMVNormal(cv::InputArray, cv::InputArray, int, cv::OutputArray)", "mean.rows == 1 || mean.cols == 1", "randMVNormal", "cov.rows == dim && cov.cols == dim", "virtual void cv::ml::ParallelCalcError::operator()(const cv::Range &) const", "void cv::ml::Cholesky(const cv::Mat &, cv::Mat &)", "A.type() == CV_32F", "Cholesky", "N2cv2ml9StatModelE", "N2cv2ml17ParallelCalcErrorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9ParamGridENS_9allocatorIS3_EEEE", "_points.type() == CV_32F && !_points.empty()", "/build/master_pack-android/opencv/modules/ml/src/kdtree.cpp", "nlabels == n", "vecmat.isContinuous() && vecmat.type() == CV_32F && vecmat.total() == (size_t)points.cols", "K > 0 && (normType == NORM_L2 || normType == NORM_L1)", "lowerBound.size == upperBound.size && lowerBound.isContinuous() && upperBound.isContinuous() && lowerBound.type() == upperBound.type() && lowerBound.type() == CV_32F && lowerBound.total() == (size_t)ptdims", "findOrthoRange", "idxmat.isContinuous() && idxmat.type() == CV_32S && (idxmat.cols == 1 || idxmat.rows == 1)", "getPoints", "labelsmat.isContinuous()", "(unsigned)k < (unsigned)points.rows", "(unsigned)ptidx < (unsigned)points.rows", "getPoint", "vals[ofs[k]] <= pivot", "medianPartition", "vals[ofs[k]] >= pivot", "std::abs(more - less) <= 1", "opencv_ml_knn", "opencv_ml_knn_kd", "0 < k", "/build/master_pack-android/opencv/modules/ml/src/knearest.cpp", "test_samples.type() == CV_32F && test_samples.cols == samples.cols", "is_classifier", "default_k", "new_samples.type() == CV_32F", "new_samples.cols == samples.cols && new_responses.cols == responses.cols", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml12KNearestImplENS_9allocatorIS3_EEEE", "N2cv2ml12KNearestImplE", "N2cv2ml8KNearestE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml14BruteForceImplENS_9allocatorIS3_EEEE", "N2cv2ml14BruteForceImplE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10KDTreeImplENS_9allocatorIS3_EEEE", "N2cv2ml10KDTreeImplE", "virtual bool cv::ml::LogisticRegressionImpl::train(const Ptr<cv::ml::TrainData> &, int)", "/build/master_pack-android/opencv/modules/ml/src/lr.cpp", "!_labels_i.empty() && !_data_i.empty()", "labels should be a column matrix", "data and labels must be a floating point matrix", "number of rows in data and labels should be equal", "data should have atleast 2 classes", "check training parameters. Invalid training classifier", "classifier should be trained first", "thetas.rows > 0", "data must be of floating type", "data_t.cols == thetas.cols", "temp_pred.cols==1", "cv::Mat cv::ml::LogisticRegressionImpl::calc_sigmoid(const cv::Mat &) const", "double cv::ml::LogisticRegressionImpl::compute_cost(const cv::Mat &, const cv::Mat &, const cv::Mat &)", "compute_cost", "void cv::ml::LogisticRegressionImpl::compute_gradient(const cv::Mat &, const cv::Mat &, const cv::Mat &, const double, cv::Mat &)", "_gradient.rows == _theta.rows && _gradient.cols == _theta.cols", "compute_gradient", "cv::Mat cv::ml::LogisticRegressionImpl::batch_gradient_descent(const cv::Mat &, const cv::Mat &, const cv::Mat &)", "check training parameters (learning rate) for the classifier", "number of iterations cannot be zero or a negative number", "check training parameters for the classifier", "mini_batch_gradient_descent", "!lmap.empty()", "remap_labels", "val != lmap.end()", "file can't open. Check file path", "Logistic Regression Classifier", "alpha", "mini_batch_size", "learnt_thetas", "n_labels", "o_labels", "empty FileNode object", "opencv_ml_lr", "traits::Type<_Tp>::value == type() && cols == 1", "N2cv2ml22LogisticRegressionImplE", "N2cv2ml18LogisticRegressionE", "N2cv2ml43LogisticRegressionImpl_ComputeDradient_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml22LogisticRegressionImplENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml25NormalBayesClassifierImplENS_9allocatorIS3_EEEE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv2ml21NormalBayesClassifierE", "var_all", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "The field \"var_count\" of NBayes classifier is missing or non-positive", "/build/master_pack-android/opencv/modules/ml/src/nbayes.cpp", "No or invalid \"cls_labels\" in NBayes classifier", "opencv_ml_nbayes", "The new training data is inconsistent with the original training data; varIdx and the class labels should be the same", "The input samples must be 32f matrix with the number of columns = nallvars", "predictProb", "When the number of input samples is >1, the output vector of results must be passed", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "cv::ml::RTreeParams::RTreeParams()", "/build/master_pack-android/opencv/modules/ml/src/rtrees.cpp", "cv::ml::RTreeParams::RTreeParams(bool, int, cv::TermCriteria)", "static Ptr<cv::ml::RTrees> cv::ml::RTrees::create()", "static Ptr<cv::ml::RTrees> cv::ml::RTrees::load(const cv::String &, const cv::String &)", "cv::ml::DTreesImplForRTrees::DTreesImplForRTrees()", "virtual void cv::ml::DTreesImplForRTrees::clear()", "virtual void cv::ml::DTreesImplForRTrees::write(cv::FileStorage &) const", "oob_error", "var_importance", "virtual void cv::ml::DTreesImplForRTrees::read(const cv::FileNode &)", "virtual bool cv::ml::DTreesImplForRTrees::train(const Ptr<cv::ml::TrainData> &, int)", "fabs(max_response) > 0", "virtual void cv::ml::DTreesImplForRTrees::startTraining(const Ptr<cv::ml::TrainData> &, int)", "virtual void cv::ml::DTreesImplForRTrees::endTraining()", "virtual const vector<int> &cv::ml::DTreesImplForRTrees::getActiveVars()", "virtual void cv::ml::DTreesImplForRTrees::writeTrainingParams(cv::FileStorage &) const", "nactive_vars", "virtual void cv::ml::DTreesImplForRTrees::readParams(const cv::FileNode &)", "virtual void cv::ml::RTreesImpl::write(cv::FileStorage &) const", "virtual void cv::ml::RTreesImpl::read(const cv::FileNode &)", "opencv_ml_rtrees", "virtual bool cv::ml::RTreesImpl::train(const Ptr<cv::ml::TrainData> &, int)", "Cross validation for RTrees is not implemented", "virtual float cv::ml::RTreesImpl::predict(cv::InputArray, cv::OutputArray, int) const", "void cv::ml::DTreesImplForRTrees::getVotes(cv::InputArray, cv::OutputArray, int) const", "!roots.empty()", "getVotes", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10RTreesImplENS_9allocatorIS3_EEEE", "N2cv2ml10RTreesImplE", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "Invalid type of parameter (use one of SVM::C, SVM::GAMMA et al.)", "/build/master_pack-android/opencv/modules/ml/src/svm.cpp", "class_count", "SVM model data is invalid, check sv_count, var_* and class_count tags", "class_labels", "class_weights", "Array of class labels is missing or invalid", "(int)sv_node.size() == sv_total", "uncompressed_support_vectors", "(int)uncompressed_sv_node.size() == uncompressed_sv_total", "decision_functions", "(int)df_node.size() == df_count", "sv_count", "optimize_linear", "svm_type", "svmType", "C_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "Missing or invalid SVM type", "kernel", "SVM kernel tag is not found", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "Invalid SVM kernel type (or custom kernel)", "degree", "coef0", "Unknown/unsupported kernel type", "checkParams", "gamma parameter of the kernel must be positive", "The kernel parameter <coef0> must be positive or zero", "The kernel parameter <degree> must be positive", "Custom kernel is not set", "Unknown/unsupported SVM type", "The parameter C must be positive", "The parameter nu must be between 0 and 1", "The parameter p must be positive", "Unknown kernel type", "calc", "sv_count == sv_total", "Unknown_%d", "opencv_ml_svm", "in the case of classification problem the responses must be categorical; either specify varType when creating TrainData, or pass integer responses", "do_train", "sv_count != 0", "svmType == C_SVC || svmType == NU_SVC", "params.class_weights must be 1d floating-point vector containing as many elements as the number of classes", "While cross-validation one or more of the classes have been fell out of the sample. Try to reduce <Params::k_fold>", "sv_tab[df_index[i]] > 0", "select_working_set_func != 0", "calc_rho_func != 0", "get_row_func != 0", "(int)_yf.size() == sample_count", "solve_eps_svr", "solve_nu_svr", "_responses.isContinuous() && _responses.checkVector(1, CV_32S) == nsamples", "sortSamplesByClasses", "samples.cols == var_count && samples.type() == CV_32F", "nsamples == 1", "INTERNAL ERROR: Unknown SVM type, the SVM structure is probably corrupted", "k_fold >= 2", "trainAuto", "Lower bound of the grid must be less then the upper one", "checkParamGrid", "Lower bound of the grid must be positive", "Grid step must greater then 1", "0 <= i && i < (int)decision_func.size()", "getDecisionFunction", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13SVMKernelImplENS_9allocatorIS3_EEEE", "N2cv2ml13SVMKernelImplE", "N2cv2ml3SVM6KernelE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml7SVMImplENS_9allocatorIS3_EEEE", "N2cv2ml7SVMImplE", "N2cv2ml3SVME", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImpl13TrainAutoBodyE", "average.type() == CV_32FC1", "normalizeSamples", "/build/master_pack-android/opencv/modules/ml/src/svmsgd.cpp", "trainResponses.type() == CV_32FC1", "calcShift", "isClassifier()", "trainResponses.rows == trainSamples.rows", "params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS", "(params.marginType == SOFT_MARGIN || params.marginType == HARD_MARGIN) && (extendedWeights.type() == CV_32FC1)", "samples.cols == weights_.cols && samples.type() == CV_32FC1", "nSamples == 1", "SVMSGD model data is invalid, it hasn't been trained", "shift", "ASGD", "svmsgdType", "SOFT_MARGIN", "HARD_MARGIN", "marginType", "marginRegularization", "initialStepSize", "stepDecreasingPower", "Missing or invalid SVMSGD type", "readParams", "Missing or invalid margin type", "fn[\"marginRegularization\"].isReal()", "fn[\"initialStepSize\"].isReal()", "fn[\"stepDecreasingPower\"].isReal()", "!tcnode.empty()", "(params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS)", "SVMSGD model data is invalid", "setOptimalParameters", "opencv_ml_svmsgd", "N2cv2ml10SVMSGDImplE", "N2cv2ml6SVMSGDE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10SVMSGDImplENS_9allocatorIS3_EEEE", "createConcentricSpheresTestSet", "/build/master_pack-android/opencv/modules/ml/src/testset.cpp", "num_features parameter must be positive", "num_classes parameter must be positive", "startTraining", "/build/master_pack-android/opencv/modules/ml/src/tree.cpp", "(int)w->sample_weights.size() == nsamples", "0 <= ci && ci < nclasses", "0 <= vi && vi < nallvars && vi > prevIdx", "initCompVarIdx", "w->wnodes[w_pidx].right == w_nidx", "addTree", "w_nidx >= 0", "surrogate splits are not implemented yet", "addNodeAndTrySplit", "w->wnodes[nidx].left > 0 && w->wnodes[nidx].right > 0", "compVarIdx[best_split.varIdx] >= 0 && best_vi >= 0", "findBestSplit", "fabs(sumw) > 0", "calcValue", "findSplitCatClass", "(int)_sleft.size() < n && (int)_sright.size() < n", "calcDir", "sample.type() == CV_32F", "predictTrees", "one of input categorical variable is not an integer", "cmap != NULL", "c >= 0 && ival == cmap[c]", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "ord_var_count", "cat_var_count", "global_var_idx", "var_type", "cat_ofs", "cat_map", "missing_subst", "quality", "not_in", "norm_class_idx", "splits", "cat_count", "0 <= vi && vi <= (int)varType.size()", "readSplit", "!fnodes.empty()", "(remaining % cn) == 0", "N2cv2ml10DTreesImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImpl8WorkDataENS_9allocatorIS4_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImplENS_9allocatorIS3_EEEE", "max_bits", "exclude_range", "n.isString() && String(n) == name", "/build/master_pack-android/opencv/modules/photo/src/align.cpp", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<Mat> &, cv::InputArray, cv::InputArray)", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<Mat> &)", "virtual cv::Point cv::AlignMTBImpl::calculateShift(cv::InputArray, cv::InputArray)", "img0.channels() == 1 && img0.type() == img1.type()", "calculateShift", "img0.size() == img1.size()", "virtual void cv::AlignMTBImpl::shiftMat(cv::InputArray, cv::OutputArray, const cv::Point)", "virtual void cv::AlignMTBImpl::computeBitmaps(cv::InputArray, cv::OutputArray, cv::OutputArray)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12AlignMTBImplENS_9allocatorIS2_EEEE", "N2cv12AlignMTBImplE", "N2cv8AlignMTBE", "N2cv14AlignExposuresE", "CalibrateDebevec", "random", "/build/master_pack-android/opencv/modules/photo/src/calibrate.cpp", "virtual void cv::CalibrateDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "images.size() == times.total()", "process", "images[0].depth() == CV_8U", "times.type() == CV_32FC1", "0 < x_points && x_points <= cols", "0 < y_points && y_points <= rows", "CalibrateRobertson", "max_iter", "virtual void cv::CalibrateRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "channels >= 1 && channels <= 3", "NSt6__ndk120__shared_ptr_emplaceIN2cv20CalibrateDebevecImplENS_9allocatorIS2_EEEE", "N2cv20CalibrateDebevecImplE", "N2cv16CalibrateDebevecE", "N2cv12CalibrateCRFE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22CalibrateRobertsonImplENS_9allocatorIS2_EEEE", "N2cv22CalibrateRobertsonImplE", "N2cv18CalibrateRobertsonE", "/build/master_pack-android/opencv/modules/photo/src/contrast_preserve.cpp", "!I.empty() && (I.channels()==3)", "decolor", "denoise_TVL1", "/build/master_pack-android/opencv/modules/photo/src/denoise_tvl1.cpp", "observations[i].rows==rows && observations[i].cols==cols", "/build/master_pack-android/opencv/modules/photo/src/denoising.cpp", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, const std::vector<float> &, int, int, int)", "fastNlMeansDenoising", "hn == 1 || hn == cn", "Unsupported depth! Only CV_8U is supported for NORM_L2", "Unsupported depth! Only CV_8U and CV_16U are supported for NORM_L1", "Unsupported norm type! Only NORM_L2 and NORM_L1 are supported", "void cv::fastNlMeansDenoisingColored(cv::InputArray, cv::OutputArray, float, float, int, int)", "Type of input image should be CV_8UC3 or CV_8UC4!", "fastNlMeansDenoisingColored", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, int, int)", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, const std::vector<float> &, int, int, int)", "fastNlMeansDenoisingMulti", "void cv::fastNlMeansDenoisingColoredMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, float, int, int)", "Type of input images should be CV_8UC3!", "fastNlMeansDenoisingColoredMulti", "Input images vector should not be empty!", "fastNlMeansDenoisingMultiCheckPreconditions", "All windows sizes should be odd!", "imgToDenoiseIndex and temporalWindowSize should be chosen corresponding srcImgs size!", "Input images should have the same size and type!", "Unsupported number of channels! Only 1, 2, 3, and 4 are supported", "fastNlMeansDenoising_", "src.channels() == pixelInfo<T>::channels", "FastNlMeansDenoisingInvoker", "/build/master_pack-android/opencv/modules/photo/src/fast_nlmeans_denoising_invoker.hpp", "template_window_size_ <= 46340", "Unsupported image format! Only CV_8U, CV_8UC2, CV_8UC3 and CV_8UC4 are supported", "fastNlMeansDenoisingMulti_", "srcImgs.size() > 0", "FastNlMeansMultiDenoisingInvoker", "/build/master_pack-android/opencv/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp", "srcImgs[0].channels() == pixelInfo<T>::channels", "27FastNlMeansDenoisingInvokerIhij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerIhij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "27FastNlMeansDenoisingInvokerItlm7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsNS1_IiLi3EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsiE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "32FastNlMeansMultiDenoisingInvokerIhlm7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsNS1_IiLi2EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsNS1_IiLi3EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsiE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsNS1_IiLi4EEEE", "checkImageDimensions", "/build/master_pack-android/opencv/modules/photo/src/hdr_common.cpp", "images[i].cols == width && images[i].rows == height", "images[i].type() == type", "/build/master_pack-android/opencv/modules/photo/src/inpaint.cpp", "All the input and output images must have the same size", "icvInpaint", "8-bit, 16-bit unsigned or 32-bit float 1-channel and 8-bit 3-channel input/output images are supported", "The mask must be 8-bit 1-channel image", "Unsupportedformat of the input image", "Unsupported format of the input image", "The flags argument must be one of CV_INPAINT_TELEA or CV_INPAINT_NS", "NSt6__ndk120__shared_ptr_pointerIP5CvMatN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI5CvMatEE", "NSt6__ndk120__shared_ptr_pointerIP14_IplConvKernelN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI14_IplConvKernelEE", "NSt6__ndk120__shared_ptr_emplaceI20CvPriorityQueueFloatNS_9allocatorIS1_EEEE", "MergeDebevec", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "/build/master_pack-android/opencv/modules/photo/src/merge.cpp", "log_response.rows == LDR_SIZE && log_response.cols == 1 && log_response.channels() == channels", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "MergeMertens", "contrast_weight", "saturation_weight", "exposure_weight", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::InputArray, cv::InputArray)", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArray)", "channels == 1 || channels == 3", "MergeRobertson", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "response.rows == LDR_SIZE && response.cols == 1 && response.channels() == channels", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "N2cv16MergeDebevecImplE", "N2cv12MergeDebevecE", "N2cv14MergeExposuresE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16MergeMertensImplENS_9allocatorIS2_EEEE", "N2cv16MergeMertensImplE", "N2cv12MergeMertensE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18MergeRobertsonImplENS_9allocatorIS2_EEEE", "N2cv18MergeRobertsonImplE", "N2cv14MergeRobertsonE", "/build/master_pack-android/opencv/modules/photo/src/npr.cpp", "void cv::detailEnhance(cv::InputArray, cv::OutputArray, float, float)", "void cv::pencilSketch(cv::InputArray, cv::OutputArray, cv::OutputArray, float, float, float)", "void cv::stylization(cv::InputArray, cv::OutputArray, float, float)", "void cv::seamlessClone(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point, cv::OutputArray, int)", "/build/master_pack-android/opencv/modules/photo/src/seamless_cloning.cpp", "void cv::colorChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, float)", "void cv::illuminationChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float)", "void cv::textureFlattening(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, int)", "void cv::Cloning::illuminationChange(cv::Mat &, cv::Mat &, cv::Mat &, cv::Mat &, float, float)", "/build/master_pack-android/opencv/modules/photo/src/seamless_cloning_impl.cpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TonemapImplENS_9allocatorIS2_EEEE", "Tonemap", "/build/master_pack-android/opencv/modules/photo/src/tonemap.cpp", "virtual void cv::TonemapImpl::process(cv::InputArray, cv::OutputArray)", "TonemapDrago", "saturation", "virtual void cv::TonemapDragoImpl::process(cv::InputArray, cv::OutputArray)", "max > 0", "TonemapReinhard", "intensity", "light_adapt", "color_adapt", "virtual void cv::TonemapReinhardImpl::process(cv::InputArray, cv::OutputArray)", "TonemapMantiuk", "virtual void cv::TonemapMantiukImpl::process(cv::InputArray, cv::OutputArray)", "fabs(dprod) > 0", "fabs(rr) > 0", "N2cv11TonemapImplE", "N2cv7TonemapE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16TonemapDragoImplENS_9allocatorIS2_EEEE", "N2cv16TonemapDragoImplE", "N2cv12TonemapDragoE", "NSt6__ndk120__shared_ptr_emplaceIN2cv19TonemapReinhardImplENS_9allocatorIS2_EEEE", "N2cv19TonemapReinhardImplE", "N2cv15TonemapReinhardE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18TonemapMantiukImplENS_9allocatorIS2_EEEE", "N2cv18TonemapMantiukImplE", "N2cv14TonemapMantiukE", "attr_value.proto", "opencv_tensorflow.AttrValue.placeholder", "opencv_tensorflow.NameAttrList.name", "opencv_tensorflow.NameAttrList.AttrEntry.key", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map_field.h", "Protocol Buffer map usage error:\n", "MapKey::GetStringValue", " type does not match\n", "  Expected : ", "  Actual   : ", "MapKey::type MapKey is not initialized. ", "Call set methods to initialize MapKey.", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map_field_inl.h", "CHECK failed: this->MapFieldBase::repeated_field_ != NULL: ", "N17opencv_tensorflow19AttrValue_ListValueE", "N17opencv_tensorflow9AttrValueE", "N17opencv_tensorflow12NameAttrListE", "N17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEEE", "N6google8protobuf16RepeatedPtrFieldINS0_7MessageEEE", "N6google8protobuf8internal20RepeatedPtrFieldBaseE", "N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE", "N6google8protobuf3MapINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEE8InnerMapE", "N6google8protobuf4hashINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "function.proto", "opencv_tensorflow.FunctionDef.Node.ret", "opencv_tensorflow.FunctionDef.Node.op", "opencv_tensorflow.FunctionDef.Node.arg", "opencv_tensorflow.FunctionDef.Node.dep", "opencv_tensorflow.FunctionDef.Node.AttrEntry.key", "opencv_tensorflow.GradientDef.function_name", "opencv_tensorflow.GradientDef.gradient_func", "N17opencv_tensorflow18FunctionDefLibraryE", "N17opencv_tensorflow16FunctionDef_NodeE", "N17opencv_tensorflow11FunctionDefE", "N17opencv_tensorflow11GradientDefE", "N17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "graph.proto", "opencv_tensorflow.NodeDef.name", "opencv_tensorflow.NodeDef.op", "opencv_tensorflow.NodeDef.input", "opencv_tensorflow.NodeDef.device", "opencv_tensorflow.NodeDef.AttrEntry.key", "N17opencv_tensorflow8GraphDefE", "N17opencv_tensorflow7NodeDefE", "N17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "op_def.proto", "opencv_tensorflow.OpDef.ArgDef.name", "opencv_tensorflow.OpDef.ArgDef.description", "opencv_tensorflow.OpDef.ArgDef.type_attr", "opencv_tensorflow.OpDef.ArgDef.number_attr", "opencv_tensorflow.OpDef.ArgDef.type_list_attr", "opencv_tensorflow.OpDef.AttrDef.name", "opencv_tensorflow.OpDef.AttrDef.type", "opencv_tensorflow.OpDef.AttrDef.description", "opencv_tensorflow.OpDef.name", "opencv_tensorflow.OpDef.summary", "opencv_tensorflow.OpDef.description", "opencv_tensorflow.OpDeprecation.explanation", "N17opencv_tensorflow12OpDef_ArgDefE", "N17opencv_tensorflow13OpDef_AttrDefE", "N17opencv_tensorflow5OpDefE", "N17opencv_tensorflow13OpDeprecationE", "N17opencv_tensorflow6OpListE", "tensor.proto", "N17opencv_tensorflow11TensorProtoE", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/tensor_shape.pb.cc", "tensor_shape.proto", "opencv_tensorflow.TensorShapeProto.Dim.name", "N17opencv_tensorflow20TensorShapeProto_DimE", "N17opencv_tensorflow16TensorShapeProtoE", "types.proto", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/versions.pb.cc", "versions.proto", "N17opencv_tensorflow10VersionDefE", "opencv-caffe.proto", "N12opencv_caffe9BlobShapeE", "N12opencv_caffe9BlobProtoE", "N12opencv_caffe15BlobProtoVectorE", "N12opencv_caffe16PermuteParameterE", "N12opencv_caffe22NormalizeBBoxParameterE", "N12opencv_caffe17PriorBoxParameterE", "N12opencv_caffe24DetectionOutputParameterE", "N12opencv_caffe5DatumE", "N12opencv_caffe15FillerParameterE", "N12opencv_caffe12NetParameterE", "N12opencv_caffe15SolverParameterE", "N12opencv_caffe11SolverStateE", "N12opencv_caffe8NetStateE", "N12opencv_caffe12NetStateRuleE", "N12opencv_caffe9ParamSpecE", "N12opencv_caffe14LayerParameterE", "N12opencv_caffe23TransformationParameterE", "N12opencv_caffe13LossParameterE", "N12opencv_caffe17AccuracyParameterE", "N12opencv_caffe15ArgMaxParameterE", "N12opencv_caffe15ConcatParameterE", "N12opencv_caffe18BatchNormParameterE", "N12opencv_caffe13BiasParameterE", "N12opencv_caffe24ContrastiveLossParameterE", "N12opencv_caffe20ConvolutionParameterE", "N12opencv_caffe13CropParameterE", "N12opencv_caffe13DataParameterE", "N12opencv_caffe30NonMaximumSuppressionParameterE", "N12opencv_caffe19SaveOutputParameterE", "N12opencv_caffe16DropoutParameterE", "N12opencv_caffe18DummyDataParameterE", "N12opencv_caffe16EltwiseParameterE", "N12opencv_caffe12ELUParameterE", "N12opencv_caffe14EmbedParameterE", "N12opencv_caffe12ExpParameterE", "N12opencv_caffe16FlattenParameterE", "N12opencv_caffe17HDF5DataParameterE", "N12opencv_caffe19HDF5OutputParameterE", "N12opencv_caffe18HingeLossParameterE", "N12opencv_caffe18ImageDataParameterE", "N12opencv_caffe21InfogainLossParameterE", "N12opencv_caffe21InnerProductParameterE", "N12opencv_caffe14InputParameterE", "N12opencv_caffe12LogParameterE", "N12opencv_caffe12LRNParameterE", "N12opencv_caffe19MemoryDataParameterE", "N12opencv_caffe12MVNParameterE", "N12opencv_caffe18ParameterParameterE", "N12opencv_caffe16PoolingParameterE", "N12opencv_caffe14PowerParameterE", "N12opencv_caffe15PythonParameterE", "N12opencv_caffe18RecurrentParameterE", "N12opencv_caffe18ReductionParameterE", "N12opencv_caffe13ReLUParameterE", "N12opencv_caffe16ReshapeParameterE", "N12opencv_caffe14ScaleParameterE", "N12opencv_caffe16SigmoidParameterE", "N12opencv_caffe14SliceParameterE", "N12opencv_caffe16SoftmaxParameterE", "N12opencv_caffe13TanHParameterE", "N12opencv_caffe13TileParameterE", "N12opencv_caffe18ThresholdParameterE", "N12opencv_caffe19WindowDataParameterE", "N12opencv_caffe12SPPParameterE", "N12opencv_caffe16V1LayerParameterE", "N12opencv_caffe16V0LayerParameterE", "N12opencv_caffe14PReLUParameterE", "N12opencv_caffe14NormalizedBBoxE", "N12opencv_caffe19ROIPoolingParameterE", "N12opencv_caffe17ProposalParameterE", "N12opencv_caffe21PSROIPoolingParameterE", "opencv-onnx.proto", "N11opencv_onnx14AttributeProtoE", "N11opencv_onnx14ValueInfoProtoE", "N11opencv_onnx9NodeProtoE", "N11opencv_onnx10ModelProtoE", "N11opencv_onnx22StringStringEntryProtoE", "N11opencv_onnx10GraphProtoE", "N11opencv_onnx19TensorProto_SegmentE", "N11opencv_onnx11TensorProtoE", "N11opencv_onnx26TensorShapeProto_DimensionE", "N11opencv_onnx16TensorShapeProtoE", "N11opencv_onnx16TypeProto_TensorE", "N11opencv_onnx9TypeProtoE", "N11opencv_onnx18OperatorSetIdProtoE", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_importer.cpp", "void cv::dnn::dnn4_v20181221::(anonymous namespace)::CaffeImporter::populateNet(cv::dnn::dnn4_v20181221::Net)", "use_global_stats", "layer.bottom_size() == 1", "populateNet", "layer.top_size() == 1", "/mvn", "ConvolutionDepthwise", "_param", "field.type() == google::protobuf::UnknownField::TYPE_GROUP", "extractCustomParams", "Unknown type \"", "\" in prototxt", "addParam", "numBlobs == binLayer->blobs().ClearedCount()", "extractBinaryLayerParams", "pbBlob.data_size() == (int)dstBlob.total()", "blobFromProto", "pbBlob.raw_data_type() == caffe::FLOAT16", "raw_data.size() / 2 == (int)dstBlob.total()", "Duplicate blobs produced by multiple sources", "addOutput", "Can't find output blob \"", "addInput", "cv::dnn::dnn4_v20181221::(anonymous namespace)::CaffeImporter::CaffeImporter(const char *, size_t, const char *, size_t)", "N6google8protobuf8internal16FunctionClosure1IPKNS0_15FieldDescriptorEEE", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_io.cpp", "UpgradeV0PaddingLayers", "Unknown blob input ", " to layer ", "CHECK", "(layer_param.type() == \"conv\") || (layer_param.type() == \"pool\")", "conv", "Padding layer input to non-convolutional / non-pooling layer type ", "layer_connection.bottom_size()=1", "Conv Layer takes a single blob as input.", "source_layer.bottom_size()=1", "Padding Layer takes a single blob as input.", "source_layer.top_size()=1", "Padding Layer produces a single blob as output.", "v0_layer_connection_ != NULL", "UpgradeV0LayerParameter", "innerproduct", "Unknown parameter num_output for layer type ", "Unknown parameter biasterm for layer type ", "Unknown parameter weight_filler for layer type ", "Unknown parameter bias_filler for layer type ", "Unknown parameter pad for layer type ", "Unknown parameter kernelsize for layer type ", "Unknown parameter group for layer type ", "Unknown parameter stride for layer type ", "Unknown pool method ", "Unknown parameter pool for layer type ", "dropout", "Unknown parameter dropout_ratio for layer type ", "Unknown parameter local_size for layer type ", "Unknown parameter alpha for layer type ", "Unknown parameter beta for layer type ", "Unknown parameter k for layer type ", "hdf5_data", "window_data", "infogain_loss", "Unknown parameter source for layer type ", "Unknown parameter batchsize for layer type ", "Unknown parameter rand_skip for layer type ", "Unknown parameter shuffle for layer type ", "Unknown parameter new_height for layer type ", "Unknown parameter new_width for layer type ", "Unknown parameter concat_dim for layer type ", "Unknown parameter det_fg_threshold for layer type ", "Unknown parameter det_bg_threshold for layer type ", "Unknown parameter det_fg_fraction for layer type ", "Unknown parameter det_context_pad for layer type ", "Unknown parameter det_crop_mode for layer type ", "hdf5_output", "Unknown parameter hdf5_output_param for layer type ", "bnll", "euclidean_loss", "im2col", "multinomial_logistic_loss", "relu", "sigmoid", "softmax_loss", "tanh", "UpgradeV0LayerType", "Unknown layer name: ", "UpgradeNetAsNeeded", "Attempting to upgrade input file specified using deprecated ", "V0LayerParameter: ", "Warning: had one or more problems upgrading ", "V0NetParameter to NetParameter (see above); continuing anyway.", "Successfully upgraded file specified using deprecated ", "Note that future Caffe releases will not support ", "V0NetParameter; use ./build/tools/upgrade_net_proto_text for ", "prototxt and ./build/tools/upgrade_net_proto_binary for model ", "weights upgrade this and any other net protos to the new format.", "transformation parameters: ", "data transformation parameters.", "Note that future Caffe releases will only support ", "transform_param messages for transformation fields.", "V1LayerParameter: ", "V1LayerParameter (see above); continuing anyway.", "Attempting to upgrade batch norm layers using deprecated ", "params: ", "Successfully upgraded batch norm layers using deprecated ", "params.", "net_param != NULL", "UpgradeV1Net", "Input NetParameter to be upgraded already specifies 'layer' ", "fields; these will be ignored for the upgrade.", "Upgrade of input layer ", "v1_layer_param_ != NULL", "UpgradeV1LayerParameter", "Unknown blob_share_mode: ", "Unknown blob_share_mode: %d", "Input NetParameter has V0 layer -- ignoring.", "AbsVal", "ArgMax", "BNLL", "ContrastiveLoss", "Deconvolution", "DummyData", "EuclideanLoss", "Eltwise", "Flatten", "HDF5Data", "HDF5Output", "HingeLoss", "Im2col", "ImageData", "InfogainLoss", "InnerProduct", "MemoryData", "MultinomialLogisticLoss", "Sigmoid", "SigmoidCrossEntropyLoss", "Silence", "SoftmaxWithLoss", "TanH", "WindowData", "UpgradeV1LayerType", "Unknown V1LayerParameter layer type: ", "ReadProtoFromTextFile", "fs.is_open()", "Can't open \"", "ReadProtoFromBinaryFile", "ReadNetParamsFromTextFileOrDie", "ReadProtoFromTextFile(param_file, param)", "Failed to parse NetParameter file: ", "ReadNetParamsFromTextBufferOrDie", "ReadProtoFromTextBuffer(data, len, param)", "Failed to parse NetParameter buffer", "memory buffer", "ReadNetParamsFromBinaryFileOrDie", "ReadProtoFromBinaryFile(param_file, param)", "ReadNetParamsFromBinaryBufferOrDie", "ReadProtoFromBinaryBuffer(data, len, param)", "FAILED: ", "NSt6__ndk114basic_ifstreamIcNS_11char_traitsIcEEEE", "void cv::dnn::dnn4_v20181221::shrinkCaffeModel(const cv::String &, const cv::String &, const std::vector<String> &)", "/build/master_pack-android/opencv/modules/dnn/src/caffe/caffe_shrinker.cpp", "blob->data_size() != 0", "shrinkCaffeModel", "readNetFromDarknet", "/build/master_pack-android/opencv/modules/dnn/src/darknet/darknet_importer.cpp", "cv::dnn::dnn4_v20181221::(anonymous namespace)::DarknetImporter::DarknetImporter(std::istream &, std::istream &)", "void cv::dnn::dnn4_v20181221::(anonymous namespace)::DarknetImporter::populateNet(cv::dnn::dnn4_v20181221::Net)", "cv::dnn::dnn4_v20181221::(anonymous namespace)::DarknetImporter::DarknetImporter(std::istream &)", "N2cv3dnn14dnn4_v2018122112BufferStreamE", "layer_type_size < line.size()", "ReadDarknetFromCfgStream", "/build/master_pack-android/opencv/modules/dnn/src/darknet/darknet_io.cpp", "separator_index < line.size()", "net->width > 0 && net->height > 0 && net->channels > 0", "convolutional", "filters", "activation", "batch_normalize", "leaky", "Unsupported activation: ", "flipped", "Transpose the convolutional weights is not implemented", "kernel_size > 0 && filters > 0", "current_channels > 0", "maxpool", "avgpool", "Softmax from Darknet with groups != 1", "route", "layers", "!bottom_layers.empty()", "reorg", "coords", "!anchors_values.empty()", "classes > 0 && num_of_anchors > 0 && (num_of_anchors * 2) == anchors_vec.size()", "shortcut", "!bottom_layer.empty()", "upsample", "yolo", "!mask_values.empty()", "Unknown layer type: ", "Transpose the weights (except for convolutional) is not implemented", "ReadDarknetFromWeightsStream", "weightsBlob.isContinuous()", "conv_%d", "bias_term", "BatchNorm-name", "has_weight", "bn_%d", "negative_slope", "ReLU-name", "relu_%d", "Convolution-name", "kernel_size", "num_output", "Pooling-name", "global_pooling", "avgpool_%d", "Softmax-name", "softmax_%d", "Identity-name", "identity_%d", "Concat-name", "concat_%d", "Reorg-name", "Reorg", "reorg_stride", "reorg_%d", "Permute-name", "Permute", "permute_%d", "Region-name", "softmax_tree", "detection_out", "Shortcut-name", "shortcut_%d", "Upsample-name", "zoom_factor", "interpolation", "nearest", "upsample_%d", "yolo_%d", "OPENCV_DNN_BACKEND_DEFAULT", "OPENCV_DNN_CHECK_NAN_INF", "OPENCV_DNN_CHECK_NAN_INF_DUMP", "OPENCV_DNN_CHECK_NAN_INF_RAISE_ERROR", "cv::Mat cv::dnn::dnn4_v20181221::blobFromImage(cv::InputArray, double, const cv::Size &, const cv::Scalar &, bool, bool, int)", "/build/master_pack-android/opencv/modules/dnn/src/dnn.cpp", "void cv::dnn::dnn4_v20181221::blobFromImage(cv::InputArray, cv::OutputArray, double, const cv::Size &, const cv::Scalar &, bool, bool, int)", "cv::Mat cv::dnn::dnn4_v20181221::blobFromImages(cv::InputArrayOfArrays, double, cv::Size, const cv::Scalar &, bool, bool, int)", "void cv::dnn::dnn4_v20181221::blobFromImages(cv::InputArrayOfArrays, cv::OutputArray, double, cv::Size, const cv::Scalar &, bool, bool, int)", "Blob depth should be CV_32F or CV_8U", "ddepth == CV_32F || ddepth == CV_8U", "Scaling is not supported for CV_8U blob depth", "scalefactor", "mean_ == Scalar() && \"Mean subtraction is not supported for CV_8U blob depth\"", "blobFromImages", "image0.dims == 2", "image.depth() == blob_.depth()", "image.dims == 2 && (nch == 3 || nch == 4)", "image.size() == image0.size()", "image.dims == 2 && (nch == 1)", "void cv::dnn::dnn4_v20181221::imagesFromBlob(const cv::Mat &, cv::OutputArrayOfArrays)", "blob_.depth() == CV_32F", "imagesFromBlob", "blob_.dims == 4", "Build OpenCV with Inference Engine to enable loading models from Model Optimizer.", "readFromModelOptimizer", "int cv::dnn::dnn4_v20181221::Net::addLayer(const cv::String &, const cv::String &, cv::dnn::dnn4_v20181221::LayerParams &)", "Layer \"", "\" already into net", "addLayer", "int cv::dnn::dnn4_v20181221::Net::addLayerToPrev(const cv::String &, const cv::String &, cv::dnn::dnn4_v20181221::LayerParams &)", "void cv::dnn::dnn4_v20181221::Net::connect(int, int, int, int)", "void cv::dnn::dnn4_v20181221::Net::connect(cv::String, cv::String)", "outPin.valid() && inpPin.valid()", "connect", "cv::Mat cv::dnn::dnn4_v20181221::Net::forward(const cv::String &)", "void cv::dnn::dnn4_v20181221::Net::forward(cv::OutputArrayOfArrays, const cv::String &)", "!ld.outputBlobsWrappers[i].empty()", "forward", "void cv::dnn::dnn4_v20181221::Net::forward(cv::OutputArrayOfArrays, const std::vector<String> &)", "void cv::dnn::dnn4_v20181221::Net::forward(std::vector<std::vector<Mat> > &, const std::vector<String> &)", "void cv::dnn::dnn4_v20181221::Net::setPreferableBackend(int)", "backendId", "void cv::dnn::dnn4_v20181221::Net::setPreferableTarget(int)", "targetId", "void cv::dnn::dnn4_v20181221::Net::setInputsNames(const std::vector<String> &)", "void cv::dnn::dnn4_v20181221::Net::setInput(cv::InputArray, const cv::String &, double, const cv::Scalar &)", "Requested blob \"", "\" not found", "setInput", "numParam < (int)layerBlobs.size()", "getParam", "setParam", "Requested layer \"%s\" was not initialized", "getLayerInputs", "int64 cv::dnn::dnn4_v20181221::Net::getFLOPS(const std::vector<MatShape> &) const", "inShapes.size() == outShapes.size()", "getFLOPS", "inShapes.size() == ids.size()", "layer != impl->layers.end()", "void cv::dnn::dnn4_v20181221::Net::getMemoryConsumption(const int, const std::vector<MatShape> &, size_t &, size_t &) const", "getMemoryConsumption", "void cv::dnn::dnn4_v20181221::Net::getMemoryConsumption(const std::vector<MatShape> &, size_t &, size_t &) const", "void cv::dnn::dnn4_v20181221::Net::getMemoryConsumption(const std::vector<MatShape> &, std::vector<int> &, std::vector<size_t> &, std::vector<size_t> &) const", "void cv::dnn::dnn4_v20181221::Net::setHalideScheduler(const cv::String &)", "VkCom pipeline of ", " layers is not defined.", "initVkCom", "Halide pipeline of ", "initHalide", "Inference Engine pipeline of ", "initInfEngine", "void cv::dnn::dnn4_v20181221::Layer::finalize(const std::vector<Mat> &, std::vector<Mat> &)", "virtual void cv::dnn::dnn4_v20181221::Layer::finalize(cv::InputArrayOfArrays, cv::OutputArrayOfArrays)", "std::vector<Mat> cv::dnn::dnn4_v20181221::Layer::finalize(const std::vector<Mat> &)", "virtual void cv::dnn::dnn4_v20181221::Layer::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "void cv::dnn::dnn4_v20181221::Layer::forward_fallback(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "void cv::dnn::dnn4_v20181221::Layer::run(const std::vector<Mat> &, std::vector<Mat> &, std::vector<Mat> &)", "getMemoryShapes", "static void cv::dnn::dnn4_v20181221::LayerFactory::registerLayer(const cv::String &, cv::dnn::dnn4_v20181221::LayerFactory::Constructor)", "\" already was registered", "registerLayer", "static void cv::dnn::dnn4_v20181221::LayerFactory::unregisterLayer(const cv::String &)", "static Ptr<cv::dnn::dnn4_v20181221::Layer> cv::dnn::dnn4_v20181221::LayerFactory::createLayerInstance(const cv::String &, cv::dnn::dnn4_v20181221::LayerParams &)", "!it->second.empty()", "createLayerInstance", "Constructor of backend wrapper must be implemented", "caffe", "caffemodel", "tensorflow", "pbtxt", "darknet", "dldt", "onnx", "Cannot determine an origin framework of files: ", "readNet", "Reading Torch models from buffers", "Reading Intel's Model Optimizer models from buffers", "Cannot determine an origin framework with a name ", "m.dims > 2", "getPlane", "/build/master_pack-android/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp", "_input", "__NetInputLayer__", "outputs.size() == scaleFactors.size()", "finalize", "outputs.size() == means.size()", "inputsData.size() == outputs.size()", "virtual void cv::dnn::dnn4_v20181221::DataLayer::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "mean == Scalar() || inputsData[i].size[1] <= 4", "outputs[i].type()", "inputs.size() == requiredOutputs", "cv::dnn::dnn4_v20181221::LayerData::LayerData(int, const cv::String &, const cv::String &, cv::dnn::dnn4_v20181221::LayerParams &)", "outLayerId < inLayerId", "Input #%d of layer \"%s\" already was connected", "addLayerInput", "void cv::dnn::dnn4_v20181221::Net::Impl::setUpNet(const std::vector<LayerPin> &)", "preferableBackend != DNN_BACKEND_OPENCV || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL || preferableTarget == DNN_TARGET_OPENCL_FP16", "setUpNet", "preferableBackend != DNN_BACKEND_HALIDE || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL", "preferableBackend != DNN_BACKEND_INFERENCE_ENGINE || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL || preferableTarget == DNN_TARGET_OPENCL_FP16 || preferableTarget == DNN_TARGET_MYRIAD || preferableTarget == DNN_TARGET_FPGA", "preferableBackend != DNN_BACKEND_VKCOM || preferableTarget == DNN_TARGET_VULKAN", "DNN: OpenCL target is not available in this OpenCV build, switching to CPU.", "it != layers.end()", "preferableBackend != DNN_BACKEND_HALIDE", "void cv::dnn::dnn4_v20181221::Net::Impl::allocateLayers(const std::vector<LayerPin> &)", "!layers[0].outputBlobs.empty()", "allocateLayers", "inp.total()", "void cv::dnn::dnn4_v20181221::BlobManager::reset()", "void cv::dnn::dnn4_v20181221::Net::Impl::allocateLayer(int, const cv::dnn::dnn4_v20181221::Net::Impl::LayersShapesMap &)", "from.valid()", "allocateLayer", "layerShapesIt != layersShapes.end()", "wrap", "haveHalide()", "Unknown backend identifier", "!base.empty()", "OpenCLBackendWrapper", "Unknown target identifier", "wrapMat", "haveInfEngine()", "haveVulkan()", "void cv::dnn::dnn4_v20181221::BlobManager::allocateBlobsForLayer(cv::dnn::dnn4_v20181221::LayerData &, const cv::dnn::dnn4_v20181221::(anonymous namespace)::LayerShapes &, std::vector<LayerPin> &, bool)", "ld.requiredOutputs.size() <= outShapes.size()", "allocateBlobsForLayer", "ld.inputBlobs[0]->total() == total(shapes[index])", "mapIt != reuseMap.end()", "numReferences", "refIt != refCounter.end()", "reuseMap.find(user) == reuseMap.end()", "reuse", "reuseMap.find(host) != reuseMap.end()", "memHosts.find(lp) == memHosts.end()", "addHost", "releaseReference", "refIt->second > 0", "void cv::dnn::dnn4_v20181221::Net::Impl::fuseLayers(const std::vector<LayerPin> &)", "ChannelsPReLU", "ReLU6", "fuseLayers", "biasLayerData", "biasLayerData->outputBlobsWrappers.size() == 1", "ld.inputBlobsWrappers.size() == 1", "ld.outputBlobs.size() == 1", "ld.outputBlobsWrappers.size() == 1", "output_slice.isContinuous() && output_slice.size == curr_output.size", "curr_output.data == output_slice.data", "wrappers.size() == umats.size()", "update", "!umatWrapper.empty()", "void cv::dnn::dnn4_v20181221::Net::Impl::initBackend()", "preferableTarget == DNN_TARGET_CPU || IS_DNN_OPENCL_TARGET(preferableTarget)", "initBackend", "void cv::dnn::dnn4_v20181221::Net::Impl::initHalideBackend()", "preferableBackend == DNN_BACKEND_HALIDE", "initHalideBackend", "!ldBot.backendNodes[preferableBackend].empty()", "void cv::dnn::dnn4_v20181221::Net::Impl::initInfEngineBackend()", "preferableBackend == DNN_BACKEND_INFERENCE_ENGINE", "initInfEngineBackend", "void cv::dnn::dnn4_v20181221::Net::Impl::initVkComBackend()", "preferableBackend == DNN_BACKEND_VKCOM", "initVkComBackend", "void cv::dnn::dnn4_v20181221::Net::Impl::forwardToLayer(cv::dnn::dnn4_v20181221::LayerData &, bool)", "void cv::dnn::dnn4_v20181221::Net::Impl::forwardLayer(cv::dnn::dnn4_v20181221::LayerData &)", "WARNING: NaN detected in layer output: id=", " name=", "output id=", " output shape=", "WARNING: Inf detected in layer output: id=", "INPUT ", "OUTPUT ", "INTERNAL ", "!fail", "forwardLayer", "forwardVkCom failed, fallback to CPU implementation. ", "Requested layer \"", "getLayerData", "Layer with requested id=%d not found", "cv::Mat cv::dnn::dnn4_v20181221::Net::Impl::getBlob(const cv::dnn::dnn4_v20181221::LayerPin &)", "Requested blob not found", "getBlob", "Layer \"%s\" produce only %zu outputs, the #%d was requested", "!ld.outputBlobsWrappers.empty() && !ld.outputBlobsWrappers[pin.oid].empty()", "void cv::dnn::dnn4_v20181221::Net::Impl::clear()", "layerDesc.isInt() || layerDesc.isString()", "Ptr<cv::dnn::dnn4_v20181221::Layer> cv::dnn::dnn4_v20181221::LayerData::getLayerInstance()", "Can't create layer \"", "\" of type \"", "getLayerInstance", "start <= (int)shape.size() && end <= (int)shape.size() && start <= end", "N2cv3dnn14dnn4_v201812215LayerE", "N2cv3dnn14dnn4_v2018122111BackendNodeE", "N2cv3dnn14dnn4_v2018122114BackendWrapperE", "N2cv3dnn14dnn4_v201812219DataLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201812219DataLayerENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201812219DataLayerEEE", "N2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperEEE", "N2cv3dnn14dnn4_v2018122115ActivationLayerE", "N2cv3dnn14dnn4_v2018122112EltwiseLayerE", "N2cv3dnn14dnn4_v2018122112PoolingLayerE", "N2cv3dnn14dnn4_v2018122111ConcatLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201812213Net4ImplENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201812213Net4ImplEEE", "void cv::dnn::dnn4_v20181221::initializeLayerFactory()", "/build/master_pack-android/opencv/modules/dnn/src/init.cpp", "Interp", "CropAndResize", "PSROIPooling", "MaxUnpool", "Const", "ShuffleChannel", "PriorBoxClustered", "DetectionOutput", "NormalizeBBox", "blobs.size() >= 2", "BatchNormLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/batch_norm_layer.cpp", "scale_bias", "blobs[1].total() == n && blobs[0].isContinuous() && blobs[1].isContinuous() && blobs[0].type() == CV_32F && blobs[1].type() == CV_32F", "blobs.size() == 3", "cv::dnn::BatchNormLayerImpl::BatchNormLayerImpl(const cv::dnn::dnn4_v20181221::LayerParams &)", "blobs[2].type()", "(size_t)weightsBlobIndex < blobs.size()", "w.isContinuous() && w.type() == CV_32F && w.total() == (size_t)n", "(size_t)biasBlobIndex < blobs.size()", "b.isContinuous() && b.type() == CV_32F && b.total() == (size_t)n", "virtual void cv::dnn::BatchNormLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() == 1", "inpBlob.dims == 2 || inpBlob.dims == 4", "Batch normalization in training mode with batch size > 1", "N2cv3dnn18BatchNormLayerImplE", "N2cv3dnn14dnn4_v2018122114BatchNormLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18BatchNormLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn18BatchNormLayerImplEEE", "scale_train", "dropout_ratio", "scale > 0", "/build/master_pack-android/opencv/modules/dnn/src/layers/blank_layer.cpp", "virtual void cv::dnn::BlankLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn14BlankLayerImplE", "N2cv3dnn14dnn4_v2018122110BlankLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14BlankLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14BlankLayerImplEEE", "/build/master_pack-android/opencv/modules/dnn/src/layers/concat_layer.cpp", "inp.isContinuous() && (inp.type() == CV_32F || inp.type() == CV_16S) && inp.dims == 4 && inp.size[0] == output.size[0] && inp.size[2] == output.size[2] && inp.size[3] == output.size[3]", "nchannels == output.size[1]", "output.isContinuous() && (output.type() == CV_32F || output.type() == CV_16S)", "inputs.size() > 0", "curShape.size() == outputs[0].size()", "Inconsistent shape for ConcatLayer", "N2cv3dnn15ConcatLayerImplE", "N2cv3dnn15ConcatLayerImpl20ChannelConcatInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ConcatLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15ConcatLayerImplEEE", "ConstLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/const_layer.cpp", "virtual void cv::dnn::ConstLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn14ConstLayerImplE", "N2cv3dnn14dnn4_v2018122110ConstLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ConstLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ConstLayerImplEEE", "N2cv3dnn20ConvolutionLayerImplE", "N2cv3dnn24BaseConvolutionLayerImplE", "N2cv3dnn14dnn4_v2018122116ConvolutionLayerE", "N2cv3dnn14dnn4_v2018122120BaseConvolutionLayerE", "Unsupported asymmetric padding in convolution layer", "BaseConvolutionLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/convolution_layer.cpp", "adj_h", "adj_w", "numOutput % ngroups == 0", "adjustPad.width < stride.width && adjustPad.height < stride.height", "Required argument \"", "\" not found into dictionary", "blobs.size() >= 1 && blobs.size() <= 2", "blobs[0].dims == 4 && blobs[0].size[3] == kernel.width && blobs[0].size[2] == kernel.height", "input.dims == 4 && (input.type() == CV_32F || input.type() == CV_64F || input.type() == CV_16S)", "inputs[i].type() == input.type()", "inputs[i].dims == 4 && inputs[i].size[1] == input.size[1]", "inputs[i].size[2] == input.size[2] && inputs[i].size[3] == input.size[3]", "!blobs.empty()", "virtual void cv::dnn::ConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() == (size_t)1", "inputs[0].size[1] % blobs[0].size[1] == 0", "inputs[0].data != outputs[0].data", "outputs[0].size[1] % ngroups == 0", "m.isContinuous() && m.type() == CV_32F && (int)m.total() == outCn", "input.dims == 4 && output.dims == 4", "input.size[0] == output.size[0]", "weights.rows == output.size[1]", "weights.cols == (input.size[1]/ngroups)*kernel.width*kernel.height", "input.type() == output.type()", "input.type() == weights.type()", "input.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "input.isContinuous()", "output.isContinuous()", "biasvec.size() == (size_t)output.size[1]+2", "!weightsMat.empty()", "fuseWeights", "biasvec.size() == outCn + 2", "w.empty() || outCn == w.total()", "b.empty() || outCn == b.total()", "blobs.size() != 0", "!hasBias() || blobs[1].total() == (size_t)blobs[0].size[0]", "ngroups > 0 && inpCn % ngroups == 0 && outCn % ngroups == 0", "inputs.size() == outputs.size()", "virtual void cv::dnn::DeConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "!hasBias() || blobs[1].total() == (size_t)numOutput", "inputs.size() != 0", "VALID", "SAME", "Unsupported padding mode ", "outCn % blobs[0].size[1] == 0", "blobs[0].size[0] == inpCn", "N2cv3dnn14dnn4_v201812219ReLULayerE", "N2cv3dnn14dnn4_v2018122118ChannelsPReLULayerE", "N2cv3dnn20ConvolutionLayerImpl12ParallelConvE", "N2cv3dnn22DeConvolutionLayerImplE", "N2cv3dnn22DeConvolutionLayerImpl13MatMulInvokerE", "N2cv3dnn22DeConvolutionLayerImpl13Col2ImInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn20ConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn20ConvolutionLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22DeConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22DeConvolutionLayerImplEEE", "params.has(\"width\")", "CropAndResizeLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/crop_and_resize_layer.cpp", "params.has(\"height\")", "virtual void cv::dnn::CropAndResizeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inp.isContinuous()", "N2cv3dnn22CropAndResizeLayerImplE", "N2cv3dnn14dnn4_v2018122118CropAndResizeLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22CropAndResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22CropAndResizeLayerImplEEE", "2 == inputs.size()", "/build/master_pack-android/opencv/modules/dnn/src/layers/crop_layer.cpp", "number of offset values specified must be equal to the number of dimensions following axis.", "invalid crop parameters or blob sizes", "virtual void cv::dnn::CropLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn13CropLayerImplE", "N2cv3dnn14dnn4_v201812219CropLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13CropLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn13CropLayerImplEEE", "share_location", "background_label_id", "variance_encoded_in_target", "keep_top_k", "confidence_threshold", "loc_pred_transposed", "normalized_bbox", "group_by_classes", "nms_threshold", "_nmsThreshold > 0.", "DetectionOutputLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/detection_output_layer.cpp", " layer parameter does not contain ", " parameter.", "getParameter", "code_type", "center_size", "CENTER_SIZE", "CORNER", "virtual void cv::dnn::DetectionOutputLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "_bboxesNormalized || inputs.size() >= 4", "inputs[3].dims == 4", "count == numKept", "numLocClasses == 1", "GetLocPredictions", "all_loc_preds.size() == num", "DecodeBBoxesAll", "Could not find location predictions for label %d", "prior_bboxes.size() == prior_variances.size()", "DecodeBBoxes", "prior_bboxes.size() == bboxes.size()", "num_bboxes == 0 || prior_variances[0].size() == 4", "prior_width > 0", "DecodeBBox", "prior_height > 0", "Unknown type.", "Could not find confidence predictions for label %d", "processDetections_", "idx < scores.size()", "bboxes.size() == scores.size()", "NMSFast_", "/build/master_pack-android/opencv/modules/dnn/src/layers/../nms.inl.hpp", "outputDetections_", "inputs.size() >= 3", "inputs[0][0] == inputs[1][0]", "(numPriors * _numLocClasses * 4) == total(inputs[0], 1)", "int(numPriors * _numClasses) == total(inputs[1], 1)", "inputs[2][1] == 1 + (int)(!_varianceEncodedInTarget)", "N2cv3dnn24DetectionOutputLayerImplE", "N2cv3dnn14dnn4_v2018122120DetectionOutputLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn24DetectionOutputLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn24DetectionOutputLayerImplEEE", "min_value", "max_value", "power", "params.blobs.size() == 1", "/build/master_pack-android/opencv/modules/dnn/src/layers/elementwise_layers.cpp", "minValue <= maxValue", "ReLU6Functor", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ReLUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ReLUFunctor]", "src.size == dst.size && src.type() == dst.type() && src.isContinuous() && dst.isContinuous() && src.type() == CV_32F", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ReLU6Functor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ReLU6Functor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::TanHFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::TanHFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::SigmoidFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::SigmoidFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ELUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ELUFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::AbsValFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::AbsValFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::BNLLFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::BNLLFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::PowerFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::PowerFunctor]", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ChannelsPReLUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ChannelsPReLUFunctor]", "scale.isContinuous() && scale.type() == CV_32F", "0 <= cn0 && cn0 < cn1 && cn1 <= (int)scale.total()", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEEE", "N2cv3dnn14dnn4_v2018122110ReLU6LayerE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEEE", "N2cv3dnn14dnn4_v201812219TanHLayerE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEEE", "N2cv3dnn14dnn4_v2018122112SigmoidLayerE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEEE", "N2cv3dnn14dnn4_v201812218ELULayerE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEEE", "N2cv3dnn14dnn4_v201812218AbsLayerE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEEE", "N2cv3dnn14dnn4_v201812219BNLLLayerE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEEE", "N2cv3dnn14dnn4_v2018122110PowerLayerE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEEEE", "prod", "Unknown operation type \"", "EltwiseLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/eltwise_layer.cpp", "coeff", "virtual void cv::dnn::EltwiseLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "static void cv::dnn::EltwiseLayerImpl::EltwiseInvoker::run(const cv::Mat *, int, cv::Mat &, const std::vector<float> &, cv::dnn::EltwiseLayerImpl::EltwiseOp, const cv::dnn::dnn4_v20181221::ActivationLayer *, int)", "dst.dims", "1 < dst.dims && dst.dims <= 4", "coeffs.empty() || coeffs.size() == (size_t)nsrcs", "srcs[i].size == dst.size && srcs[i].type() == dst.type() && srcs[i].isContinuous()", "dst.total() == dst.size[0] * p.channels * p.planeSize", "inputs.size() >= 2", "coeffs.size() == 0 || coeffs.size() == inputs.size()", "op == SUM || coeffs.size() == 0", "inputs[0] == inputs[i]", "N2cv3dnn16EltwiseLayerImplE", "N2cv3dnn16EltwiseLayerImpl14EltwiseInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16EltwiseLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16EltwiseLayerImplEEE", "N2cv3dnn16FlattenLayerImplE", "N2cv3dnn14dnn4_v2018122112FlattenLayerE", "virtual void cv::dnn::FlattenLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "/build/master_pack-android/opencv/modules/dnn/src/layers/flatten_layer.cpp", "inputs[i] == inputs[0]", "startAxis >= 0", "endAxis >= startAxis && endAxis < (int)numAxes", "outputShapeVec.size() <= 4", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16FlattenLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16FlattenLayerImplEEE", "1 <= blobs.size() && blobs.size() <= 2", "FullyConnectedLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/fully_connected_layer.cpp", "blobs[0].dims >= 2 && (size_t)(innerSize * numOutput) == blobs[0].total()", "!bias || (blobs.size() == 2 && (size_t)numOutput == blobs[1].total())", "virtual void cv::dnn::FullyConnectedLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "0 <= startDim && startDim <= endDim", "srcMat.dims == 2 && srcMat.cols == weights.cols && dstMat.rows == srcMat.rows && dstMat.cols == weights.rows && srcMat.type() == weights.type() && weights.type() == dstMat.type() && srcMat.type() == CV_32F && (biasMat.empty() || (biasMat.type() == srcMat.type() && biasMat.isContinuous() && (int)biasMat.total() == dstMat.cols))", "!bias || (size_t)numOutput == blobs[1].total()", "N2cv3dnn23FullyConnectedLayerImplE", "N2cv3dnn14dnn4_v2018122117InnerProductLayerE", "N2cv3dnn23FullyConnectedLayerImpl14FullyConnectedE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23FullyConnectedLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn23FullyConnectedLayerImplEEE", "kernel_size (or kernel_h and kernel_w) not specified", "getKernelSize", "/build/master_pack-android/opencv/modules/dnn/src/layers/layers_common.cpp", "kernelH > 0 && kernelW > 0", "pad_l", "pad_t", "padT >= 0 && padL >= 0 && padB >= 0 && padR >= 0 && strideH > 0 && strideW > 0", "getStrideAndPadding", "In global_pooling mode, kernel_size (or kernel_h and kernel_w) cannot be specified", "getPoolingKernelParams", "In global_pooling mode, pads must be = 0, and stride_h and stride_w must be = 1", "dilationH > 0 && dilationW > 0", "getConvolutionKernelParams", "Unsupported padding mode", "getConvPoolOutParams", "norm_region", "ACROSS_CHANNELS", "WITHIN_CHANNEL", "Unknown region type \"", "LRNLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/lrn_layer.cpp", "LRN layer supports only positive odd values for local_size", "norm_by_size", "virtual void cv::dnn::LRNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs_arr.total() == outputs_arr.total()", "inputs[i].dims == 4", "Unimplemented mode of LRN layer", "N2cv3dnn12LRNLayerImplE", "N2cv3dnn14dnn4_v201812218LRNLayerE", "N2cv3dnn12LRNLayerImpl10ChannelLRNE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12LRNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12LRNLayerImplEEE", "pool_pad_w", "pool_pad_h", "pool_stride_w", "pool_stride_h", "virtual void cv::dnn::MaxUnpoolLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "/build/master_pack-android/opencv/modules/dnn/src/layers/max_unpooling_layer.cpp", "input.total() == indices.total()", "input.size[0] == 1", "input.size[1] == outBlob.size[1]", "i_n=", "i_c=", "i_wh=", "maxval=", "outPlaneTotal=", "input.size=", "indices.size=", "outBlob=", "0 <= index && index < outPlaneTotal", "total(inputs[0]) == total(inputs[1])", "N2cv3dnn18MaxUnpoolLayerImplE", "N2cv3dnn14dnn4_v2018122114MaxUnpoolLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18MaxUnpoolLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn18MaxUnpoolLayerImplEEE", "across_channels", "virtual void cv::dnn::MVNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "/build/master_pack-android/opencv/modules/dnn/src/layers/mvn_layer.cpp", "N2cv3dnn12MVNLayerImplE", "N2cv3dnn14dnn4_v201812218MVNLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12MVNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12MVNLayerImplEEE", "start_axis", "!params.has(\"across_spatial\") || !params.has(\"end_axis\")", "NormalizeBBoxLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/normalize_bbox_layer.cpp", "pnorm > 0", "virtual void cv::dnn::NormalizeBBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() == 1 && outputs.size() == 1", "inputs[0].total() == outputs[0].total()", "num * numPlanes != 0", "scale.total() == numPlanes", "N2cv3dnn22NormalizeBBoxLayerImplE", "N2cv3dnn14dnn4_v2018122118NormalizeBBoxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22NormalizeBBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22NormalizeBBoxLayerImplEEE", "input_dims", "params.has(\"paddings\")", "PaddingLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/padding_layer.cpp", "(paddingsParam.size() & 1) == 0", "paddings[i].first >= 0", "paddings[i].second >= 0", "virtual void cv::dnn::PaddingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "reflect", "inputs[0].dims == 4", "outputs[0].dims == 4", "Only spatial reflection padding is supported.", "padTop", "inpHeight", "padBottom", "padLeft", "inpWidth", "padRight", "Unknown padding type: ", "inpShape.size() >= paddings.size()", "inputDims == -1 || inpShape.size() == inputDims || inpShape.size() > paddings.size()", "N2cv3dnn16PaddingLayerImplE", "N2cv3dnn14dnn4_v2018122112PaddingLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PaddingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PaddingLayerImplEEE", "Orders of dimensions in Permute layer parametermust be in [0...%zu]", "PermuteLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/permute_layer.cpp", "Permute layer parameter contains duplicated orders.", "(int)_numAxes == inp0.dims", "virtual void cv::dnn::PermuteLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "outputs[k].total() == inputs[k].total()", "inp.dims == numAxes && inp.size == inputs[0].size", "out.dims == numAxes && out.size == outputs[0].size", "inp.isContinuous() && out.isContinuous()", "inp.type() == CV_32F && out.type() == CV_32F", "out.size[0] == inp.size[order[0]] && out.size[1] == inp.size[order[1]] && out.size[2] == inp.size[order[2]] && out.size[3] == inp.size[order[3]]", "(int)_numAxes == inputs[0].size()", "total(inputs[i]) == total(shapeAfter)", "N2cv3dnn16PermuteLayerImplE", "N2cv3dnn14dnn4_v2018122112PermuteLayerE", "N2cv3dnn16PermuteLayerImpl14PermuteInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PermuteLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PermuteLayerImplEEE", "Unknown pooling type \"", "PoolingLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/pooling_layer.cpp", "output_dim", "group_size", "Cannot determine pooling type", "ceil_mode", "spatial_scale", "ave_pool_padded_area", "!inputs.empty()", "virtual void cv::dnn::PoolingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "!computeMaxIdx || outputs.size() == 2", "Not implemented", "src.isContinuous()", "src.type() == 5", "src.dims == 4", "dst.dims == 4", "(((poolingType == ROI || poolingType == PSROI) && dst.size[0] == rois.size[0]) || src.size[0] == dst.size[0])", "poolingType == PSROI || src.size[1] == dst.size[1]", "(mask.empty() || (mask.type() == src.type() && mask.size == dst.size))", "ofsbuf should be initialized in this mode", "roisData[0] < src->size[0]", "(out.height - 1) * stride.height < in.height + pad_b", "(out.width - 1) * stride.width < in.width + pad_r", "psRoiOutChannels * pooledSize.width * pooledSize.height == inputs[0][1]", "numOutputs == 1 || (numOutputs == 2 && type == MAX)", "N2cv3dnn16PoolingLayerImplE", "N2cv3dnn16PoolingLayerImpl14PoolingInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PoolingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PoolingLayerImplEEE", "_maxSize > _minSize", "PriorBoxLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/prior_box_layer.cpp", "widths.size() == heights.size()", "_aspectRatios.empty()", "!params.has(\"min_size\")", "!params.has(\"max_size\")", "_minSize > 0", "_boxWidths.size() == _boxHeights.size()", "step_h", "step_w", "!params.has(\"step\")", "_stepY > 0.", "_stepX > 0.", "!params.has(\"offset\")", "params.has(\"offset_h\")", "params.has(\"offset_w\")", "_offsetsX.size() == _offsetsY.size()", "aspect_ratio", "varianceParameterRetrieved", "getVariance", "varianceSize == 4", "variance > 0", "virtual void cv::dnn::PriorBoxLayerImpl::finalize(cv::InputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs[0].dims", "inputs[1].dims", "virtual void cv::dnn::PriorBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv3dnn17PriorBoxLayerImplE", "N2cv3dnn14dnn4_v2018122113PriorBoxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17PriorBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn17PriorBoxLayerImplEEE", "base_size", "pre_nms_topn", "post_nms_topn", "nms_thresh", "bboxDeltas.dims == 4", "/build/master_pack-android/opencv/modules/dnn/src/layers/proposal_layer.cpp", "m.dims == 4", "getObjectScores", "m.size[0] == 1", "(channels & 1) == 0", "virtual void cv::dnn::ProposalLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() == 3", "internals.size() == 3", "imInfo.total() >= 2", "numDets <= keepTopAfterNMS", "layerOutputs.size() == 1", "layerInternals.empty()", "scores.size() == 4", "(scores[1] & 1) == 0", "N2cv3dnn17ProposalLayerImplE", "N2cv3dnn14dnn4_v2018122113ProposalLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17ProposalLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn17ProposalLayerImplEEE", "N2cv3dnn14dnn4_v201812219LSTMLayerE", "blobs.size() >= 3", "LSTMLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/recurrent_layers.cpp", "Wh.dims == 2 && Wx.dims == 2", "Wh.rows == Wx.rows", "Wh.rows == 4*Wh.cols", "Wh.rows == (int)bias.total()", "Wh.type() == Wx.type() && Wx.type() == bias.type()", "blobs.size() == 6", "blobs[i].rows == N && blobs[i].cols == N", "blobs[i].type() == bias.type()", "use_timestamp_dim", "produce_cell_output", "forget_bias", "use_cell_clip", "use_peephole", "(!usePeephole && blobs.size() == 3) || (usePeephole && blobs.size() == 6)", "input.size() == 1", "total(outTailShape) == numOut", "inp0.dims >= 2 && (int)inp0.total(2) == numInp", "inp0.dims >= 2 && (int)inp0.total(1) == numInp", "virtual void cv::dnn::LSTMLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "Function supports only floating point types", "total(outTailShape_) == _numOut", "inp0.size() >= 2 && total(inp0, 2) == _numInp", "inp0.size() >= 2 && total(inp0, 1) == _numInp", "setWeights", "!allocated || total(outTailShape) == total(outTailShape_)", "setOutShape", "!allocated", "setUseTimstampsDim", "setProduceCellOutput", "input.size() >= 1 && input.size() <= 2", "inp0.dims >= 2", "inp0.total(2) == numX", "inp0.type() == dtype", "virtual void cv::dnn::RNNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() >= 1 && inputs.size() <= 2", "W_hh.dims == 2 && W_xh.dims == 2", "W_hh.size[0] == W_xh.size[0] && W_hh.size[0] == W_hh.size[1] && (int)b_h.total() == W_xh.size[0]", "W_ho.size[0] == (int)b_o.total()", "W_ho.size[1] == W_hh.size[1]", "N2cv3dnn13LSTMLayerImplE", "N2cv3dnn12RNNLayerImplE", "N2cv3dnn14dnn4_v201812218RNNLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13LSTMLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn13LSTMLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12RNNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12RNNLayerImplEEE", "RegionLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/region_layer.cpp", "nmsThreshold >= 0.", "coords == 4", "classes >= 1", "anchors >= 1", "useLogistic || useSoftmax", "Yolo9000 is not implemented", "virtual void cv::dnn::RegionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs.size() >= 1", "sample_size*batch_size == inpBlob.total()", "sample_size*batch_size == outBlob.total()", "inputs.size() < 2 || inputs[1].dims == 4", "inputs[0][3] == (1 + coords + classes)*anchors", "N2cv3dnn15RegionLayerImplE", "N2cv3dnn14dnn4_v2018122111RegionLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15RegionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15RegionLayerImplEEE", "reorgStride > 0", "ReorgLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/reorg_layer.cpp", "virtual void cv::dnn::ReorgLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "outputs[0][0] > 0 && outputs[0][1] > 0 && outputs[0][2] > 0 && outputs[0][3] > 0", "total(outputs[0]) == total(inputs[0])", "N2cv3dnn14ReorgLayerImplE", "N2cv3dnn14dnn4_v2018122110ReorgLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ReorgLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ReorgLayerImplEEE", "numAxes >= -1", "ReshapeLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/reshape_layer.cpp", "virtual void cv::dnn::ReshapeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "total(srcShape, srcRange.start, srcRange.end) == maskTotal", "computeShapeByReshapeMask", "0 <= srcRange.start && srcRange.start <= srcRange.end && srcRange.end <= srcShapeSize", "Copy dim[%d] (which has zero size) is out of the source shape bounds", "Duplicate of inferred dim (which is denoted by -1)", "maskShape[i] >= -1", "Can't infer a dim denoted by -1", "srcTotal == dstTotal", "N2cv3dnn16ReshapeLayerImplE", "N2cv3dnn14dnn4_v2018122112ReshapeLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ReshapeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ReshapeLayerImplEEE", "bilinear", "zoom_factor_x", "zoom_factor_y", "!params.has(\"zoom_factor_x\") && !params.has(\"zoom_factor_y\")", "/build/master_pack-android/opencv/modules/dnn/src/layers/resize_layer.cpp", "params.has(\"zoom_factor_x\") && params.has(\"zoom_factor_y\")", "interpolation == \"nearest\" || interpolation == \"bilinear\"", "align_corners", "virtual void cv::dnn::ResizeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "Unknown interpolation: ", "N2cv3dnn15ResizeLayerImplE", "N2cv3dnn14dnn4_v2018122111ResizeLayerE", "N2cv3dnn15InterpLayerImplE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15ResizeLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15InterpLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15InterpLayerImplEEE", "(inputs.size() == 2 && blobs.empty()) || blobs.size() == (int)hasWeights + (int)hasBias", "/build/master_pack-android/opencv/modules/dnn/src/layers/scale_layer.cpp", "virtual void cv::dnn::ScaleLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "!blobs.empty() || inputs.size() == 2", "numWeights != 0", "Incompatible weights/bias blobs", "weights.total()", "total(inpShape, axis, endAxis) == numWeights", "!hasBias || numWeights == bias.total()", "inpBlob.type()", "outBlob.type()", "N2cv3dnn14ScaleLayerImplE", "N2cv3dnn14dnn4_v2018122110ScaleLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ScaleLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ScaleLayerImplEEE", "virtual void cv::dnn::ShuffleChannelLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "/build/master_pack-android/opencv/modules/dnn/src/layers/shuffle_channel_layer.cpp", "inputs.size() == 1 && inputs[0].size() == 4", "inputs[0][1] % group == 0", "N2cv3dnn23ShuffleChannelLayerImplE", "N2cv3dnn14dnn4_v2018122119ShuffleChannelLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23ShuffleChannelLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn23ShuffleChannelLayerImplEEE", "slice_point", "begin", "!params.has(\"begin\") && !params.has(\"size\") && !params.has(\"end\")", "SliceLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/slice_layer.cpp", "params.has(\"size\") ^ params.has(\"end\")", "begins.size() == sizesOrEnds.size()", "start >= 0", "size == -1 || size > 0", "end < 0 || end > start", "outputs.size() == sliceRanges.size()", "sliceRanges[i].size() <= inpShape.dims()", "clamped.start < clamped.end", "clamp", "clamped.end <= axisSize", "virtual void cv::dnn::SliceLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "sliceRanges[i].size() <= inpShape.size()", "0 <= axis && axis < inpShape.size()", "requiredOutputs > 0 && inpShape[axis] % requiredOutputs == 0", "N2cv3dnn14SliceLayerImplE", "N2cv3dnn14dnn4_v2018122110SliceLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SliceLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14SliceLayerImplEEE", "virtual void cv::dnn::SoftMaxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "/build/master_pack-android/opencv/modules/dnn/src/layers/softmax_layer.cpp", "src.isContinuous() && dst.isContinuous()", "N2cv3dnn16SoftMaxLayerImplE", "N2cv3dnn14dnn4_v2018122112SoftmaxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16SoftMaxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16SoftMaxLayerImplEEE", "top_count", "outputsCount >= 0", "SplitLayerImpl", "/build/master_pack-android/opencv/modules/dnn/src/layers/split_layer.cpp", "virtual void cv::dnn::SplitLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "inputs[0].total() == outputs[i].total()", "N2cv3dnn14SplitLayerImplE", "N2cv3dnn14dnn4_v2018122110SplitLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SplitLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14SplitLayerImplEEE", "NMSBoxes", "/build/master_pack-android/opencv/modules/dnn/src/nms.cpp", "score_threshold >= 0", "nms_threshold >= 0", "eta > 0", "/build/master_pack-android/opencv/modules/dnn/src/nms.inl.hpp", "getMatFromTensor", "/build/master_pack-android/opencv/modules/dnn/src/onnx/onnx_importer.cpp", "!field.empty()", "Unsupported data type: ", "Mixed input data types.", "runLayer", "kernel_shape", "attribute_proto.ints_size() == 2", "getLayerParams", "pads", "attribute_proto.ints_size() % 2 == 0", "attribute_proto.ints_size() == 4", "auto_pad", "SAME_UPPER", "SAME_LOWER", "dilations", "dilation_h", "dilation_w", "Input is out of OpenCV 32S range", "Unexpected attribute type", "Unsupported attribute type", "index < node_proto.input_size()", "Blob ", " not found in const blobs", "model_proto.has_graph()", "valueInfoProto.has_type()", "typeProto.has_tensor_type()", "tensor.has_shape()", "node_proto.output_size() >= 1", "MaxPool", "pytorch", "GlobalAveragePool", "blob.type() == 5", "blob.total()", "node_proto.input_size() == 0", "layerParams.blobs.size() == 1", "ImageScaler", "LeakyRelu", "Expected input, scale, bias, mean and var", "Gemm", "node_proto.input_size() >= 2", "transB", "MatMul", "node_proto.input_size() == 2", "Conv", "ConvTranspose", "Unsqueeze", "node_proto.input_size() == 1", "axes.getIntValue(axes.size()-1) <= dims.size()", "node_proto.input_size() == 2 || layerParams.has(\"shape\")", "blob.type() == CV_32SC1", "shapeIt != outShapes.end()", "Gather", "layerParams.has(\"axis\")", "indexMat.type() == 4", "indexMat.total() == 1", "concatenated.size() == 1", "!layerOutShapes.empty()", "Failed to parse data", "readTensorFromONNX", "Failed to parse onnx model", "ONNXImporter", "convertInt64ToInt32", "NSt6__ndk113basic_fstreamIcNS_11char_traitsIcEEEE", "dims == 2 || dims == 4", "getCanonicalSize", "/build/master_pack-android/opencv/modules/dnn/src/op_halide.cpp", "forwardInfEngine", "/build/master_pack-android/opencv/modules/dnn/src/op_inf_engine.cpp", "/build/master_pack-android/opencv/modules/dnn/src/tensorflow/tf_graph_simplifier.cpp", "!content.empty()", "Tensor's data type is not supported", "nodesMapIt != nodesMap.end()", "sortByExecutionOrder", "RefMerge", "permIds.size() == net.node_size()", "Rsqrt", "FusedBatchNorm", "inputs_[i] < (int)nodes.size()", "addNodeToMatch", "nodeInputs[i] < (int)nodes.size()", "setFusedNode", "inpId < node.input_size()", "getInputNode", "Input node with name ", "virtual void cv::dnn::dnn4_v20181221::BatchNormSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "epsMat.total()", "epsMat.type()", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/map.h", "CHECK failed: it != end(): ", "key not found: ", "virtual void cv::dnn::dnn4_v20181221::BatchNormNoGammaSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "/gamma", "StridedSlice", "RealDiv", "Minimum", "Maximum", "Relu6", "L2Normalize", "Conv2DBackpropInput", "padMode == \"VALID\"", "kernelShape.dim_size() == 4", "padMode == \"SAME\"", "strides.i_size() == 4", "ResizeBilinear", "ResizeNearestNeighbor", "virtual void cv::dnn::dnn4_v20181221::UpsamplingKerasSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "factorsMat.total()", "(size_t)2", "factorsMat.type()", "/factor_y", "node.input_size() == inpIndices.size()", "replace", "!inpName.empty()", "N2cv3dnn14dnn4_v2018122117BatchNormSubgraphE", "N2cv3dnn14dnn4_v201812218SubgraphE", "N2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphE", "N2cv3dnn14dnn4_v2018122115FlattenSubgraphE", "N2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphE", "N2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphE", "N2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphE", "N2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphE", "N2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphE", "N2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphE", "N2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphE", "N2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphE", "N2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphE", "N2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122117BatchNormSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122117BatchNormSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122115FlattenSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122115FlattenSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphEEE", "writeTextGraph", "/build/master_pack-android/opencv/modules/dnn/src/tensorflow/tf_importer.cpp", "Conv2D", "SpaceToBatchND", "DepthwiseConv2dNative", "dilation.size() == 2", "next_layers.size() == 1", "paddings.type() == CV_32SC1", "BiasAdd", "numWeights % 4 == 0", "!locPredTransposed", "BatchToSpaceND", "!haveConst || layer.input_size() == 2", "values.type() == CV_32FC1", "Input layer not found: ", "layerParams.blobs[0].dims == 2", "/nchw", "layer_id.find(permName) == layer_id.end()", "Squeeze", "squeeze_dims", "hasLayerAttr(layer, \"squeeze_dims\")", "Unsupported squeeze configuration", "perm.type() == CV_32SC1", "Only NHWC <-> NCHW permutations are allowed.", "depth_radius", "ConcatV2", "!lp.blobs[0].empty()", "lp.blobs[0].type() == 5", "AvgPool", "Placeholder", "!begins.empty()", "!sizes.empty()", "void cv::dnn::dnn4_v20181221::(anonymous namespace)::TFImporter::populateNet(cv::dnn::dnn4_v20181221::Net)", "begins.type()", "sizes.type()", "scaleMat.type() == CV_32FC1", "net.node(maximumLayerIdx).input_size() == 2", "Expected gamma, beta, mean and std", "is_training", "Cannot determine number of parameters for batch normalization layer.", "/MVN", "layer_id.find(mvnName) == layer_id.end()", "Expected output shape, weights and input nodes", "BlockLSTM", "Unexpected number of input nodes", "outSize.type()", "outSize.total()", "factorHeight.type()", "factorHeight.total()", "factorWidth.type()", "factorWidth.total()", "layer.input_size() == 2 || layer.input_size() == 3", "reductionIndices.type() == CV_32SC1", "reductionIndices.at<int>(i) == reductionIndices.at<int>(i - 1) + 1", "reductionIndices.at<int>(i) * reductionIndices.at<int>(i - 1) >= 0", "PriorBox", "cropSize.type()", "cropSize.total()", "Mean", "indices.type() == CV_32SC1", "Unsupported mode of reduce_mean operation.", "keep_dims", "/flatten", "layer_id.find(flattenName) == layer_id.end()", "ClipByValue", "minValue.total()", "minValue.type()", "maxValue.total()", "maxValue.type()", "Tanh", "data_format", "NHWC", "channels_last", "channels_first", "Unknown data_format value: ", "getDataLayout", "Dequantize", "addConstNodes", "const_layers.find(layer.input(i)) != const_layers.end()", "MIN_FIRST", "hasLayerAttr(layer, \"mode\") && getLayerAttr(layer, \"mode\").s() == \"MIN_FIRST\"", "tensor->dtype() == tensorflow::DT_QUINT8", "qMin.total() == 1", "qMin.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "qMax.total() == 1", "qMax.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "rangeScale >= 0", "const_layers.insert(std::make_pair(name, tensorId)).second", "const_layers.insert(std::make_pair(name, li)).second", "it != data_layouts.end()", "predictOutputDataLayout", "tensor.dtype() == tensorflow::DT_INT32", "parseDims", "values.type() == CV_32SC1", "Unknown shape of input tensor", "blobShapeFromTensor", "More than one input is Const op", "getConstBlob", "Const input blob for weights not found", "Input [", "] for node [", "] not found", "Unsupported kernel input", "nodeIdx < netTxt.node_size()", "netTxt.node(nodeIdx).name() == kernel_inp.name", "map::at:  key not found", "size == (int)dstBlob.total()", "parseTensor", "dst_i < total", "src_i < total", "blobFromTensor", "tensor.dtype() == tensorflow::DT_FLOAT || tensor.dtype() == tensorflow::DT_HALF", "kernelFromTensor", "Unsupported strides", "setStrides", "-4 <= idx && idx < 4", "toNCHW", "Unsupported ksize", "setKSize", "/build/master_pack-android/opencv/modules/dnn/src/tensorflow/tf_io.cpp", "ReadTFNetParamsFromBinaryFileOrDie", "Failed to parse GraphDef file: ", "ReadTFNetParamsFromBinaryBufferOrDie", "Failed to parse GraphDef buffer", "ReadTFNetParamsFromTextFileOrDie", "ReadTFNetParamsFromTextBufferOrDie", "dfself->handle != __null", "THDiskFile_nativeEndianEncoding", "/build/master_pack-android/opencv/modules/dnn/src/torch/THDiskFile.cpp", "THDiskFile_littleEndianEncoding", "THDiskFile_bigEndianEncoding", "THDiskFile_longSize", "size == 0 || size == 4 || size == 8", "THDiskFile_noBuffer", "error: cannot disable buffer", "THDiskFile_mode(mode, &isReadable, &isWritable)", "THDiskFile_new", "isReadable && !isWritable", "cannot open <%s> in mode %c%c", "cannot allocate memory for self", "THDiskFile_readByte", "dfself->file.isReadable", "read error: read %ld blocks instead of %ld", "THDiskFile_readChar", "THDiskFile_readShort", "THDiskFile_readInt", "%d\n\r", "THDiskFile_readLong", "can not allocate buffer", "THDiskFile_readFloat", "THDiskFile_readDouble", "THDiskFile_readString", "(strlen(format) >= 2 ? (format[0] == '*') && (format[1] == 'a' || format[1] == 'l') : 0)", "read error: failed to allocate buffer", "read error: read 0 blocks instead of 1", "THDiskFile_seek", "unable to seek at position %ld", "THDiskFile_seekEnd", "unable to seek at end of file", "THDiskFile_position", "unable to obtain disk file offset (maybe a long overflow occurred)", "THDiskFile_close", "readTorchBlob", "/build/master_pack-android/opencv/modules/dnn/src/torch/torch_importer.cpp", "cv::dnn::dnn4_v20181221::Net cv::dnn::dnn4_v20181221::readNetFromTorch(const cv::String &, bool, bool)", "cv::dnn::dnn4_v20181221::TorchImporter::TorchImporter(cv::String, bool, bool)", "file && THFile_isOpened(file)", "TorchImporter", "Unsupported Lua type", "readObject", "torch_index", "Sequential", "Parallel", "ConcatTable", "JoinTable", "DepthConcat", "Inception", "inputDimension", "outputDimension", "dimension", "SpatialConvolution", "SpatialConvolutionMM", "tensorParams.count(\"weight\")", "readTorchObject", "nOutputPlane", "SpatialLPPooling", "SpatialMaxPooling", "SpatialAveragePooling", "indices_blob_id", "count_include_pad", "scalarParams.has(\"ceil_mode\")", "scalarParams.has(\"size\")", "batchMode", "SpatialBatchNormalization", "InstanceNormalization", "scalarParams.has(\"eps\")", "running_mean", "scalarParams.has(\"nOutput\")", "running_var", "running_std", "tensorParams[\"weight\"].second.total() == outputChannels", "tensorParams[\"weight\"].second.total() == 1", "SpatialDropout", "scalarParams.has(\"p\")", "TotalVariation", "scalarParams.has(\"pad\") && scalarParams.has(\"dim\")", "Padding with offset is not implemented", "nInputDim", "SpatialDilatedConvolution", "dilationW", "dilationH", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"dilationW\")&& scalarParams.has(\"dilationH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "SpatialFullConvolution", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"adjW\")&& scalarParams.has(\"adjH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "SpatialMaxUnpooling", "tensorParams.count(\"indices\")", "LogSoftMax", "SpatialCrossMapLRN", "scalarParams.has(\"alpha\")", "scalarParams.has(\"beta\")", "scalarParams.has(\"k\")", "Sqrt", "MulConstant", "constant_scalar", "scalarParams.has(\"constant_scalar\")", "SpatialZeroPadding", "SpatialReflectionPadding", "scalarParams.has(\"pad_l\")", "scalarParams.has(\"pad_r\")", "scalarParams.has(\"pad_t\")", "scalarParams.has(\"pad_b\")", "SpatialZeroPadding in cropping mode is not implemented", "ShaveImage", "SpatialUpSamplingNearest", "scale_factor", "scalarParams.has(\"scale_factor\")", "Unsupported Torch class \"", "torch.", "Cuda", "\" of torch class \"", "parseTorchType", "typeidx == TYPE_TORCH || (typeidx == TYPE_NIL && ndims == 0)", "readTorchTensor", "typeStorage >= 0 && typeTensor == typeStorage", "Storage has insufficient number of elements for requested Tensor", "readTorchStorage", "cudnn.", "fbcunn.", "luaType == TYPE_TABLE && readedIndexes.count(index) == 0", "readTorchTable", "void cv::dnn::dnn4_v20181221::TorchImporter::populateNet(cv::dnn::dnn4_v20181221::Net)", "rootModule == NULL", "torchMerge", "torchSplit", "torchReshape", "!numUnconnectedLayers.empty()", "numInputs <= ids.size()", "torchCAddTable", "module->params.has(\"indices_blob_id\")", "torchMaxUnpooling", "poolingLayer.first != -1", "Unexpected torch container: ", "NSt6__ndk120__shared_ptr_pointerIPN2TH8THFile__EPFvS3_ENS_9allocatorIS2_EEEE", "PFvPN2TH8THFile__EE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleENS_9allocatorIS5_EEEE", "GLSL.std.450", "main", "main", "global_size", "gl_NumWorkGroups", "gl_GlobalInvocationID", "index", "pushBlock", "channels", "in_h", "in_w", "out_h", "out_w", "padding_h", "padding_w", "filter_h", "filter_w", "stride_h", "stride_w", "total", "padded_area", "hstart", "wstart", "hend", "wend", "pool_size", "aveval", "Input0", "in_buffer", "Output", "out_buffer", "GLSL.std.450", "main", "main", "index", "gl_GlobalInvocationID", "pushBlock", "out_concat_axis", "accumulated_concat_axis", "concat_size", "total_concat_size", "thread_num", "concat_num", "concat_index", "out_index", "Output", "data", "Input0", "data", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "pushBlock", "in_h", "in_w", "out_h", "out_w", "stride_h", "stride_w", "pad_h", "pad_w", "filter_h", "filter_w", "dilation_h", "dilation_w", "channels", "batch", "has_bias", "output_y", "output_x", "org_y", "org_x", "weight_off", "input_off", "Input0", "image_data", "Input3", "weight_data", "offset", "Input1", "bias_data", "Output", "convolved_image_data", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "pushBlock", "in_h", "in_w", "out_h", "out_w", "stride_h", "stride_w", "pad_h", "pad_w", "filter_h", "filter_w", "dilation_h", "dilation_w", "channels", "batch", "has_bias", "org_y", "org_x", "weight_off", "input_off", "Input0", "in_buffer", "Input3", "weight_data", "offset", "Output", "out_buffer", "Input1", "bias_data", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "gl_NumWorkGroups", "index", "pushBlock", "thread_num", "channels", "height", "width", "filter_len", "radius", "alpha", "bias", "negative_beta", "offset", "channel_off", "head", "accum_scale", "min_val", "Input0", "in_buffer", "scale_val", "Output", "dst_buffer", "GLSL.std.450", "main", "main", "global_size", "gl_NumWorkGroups", "gl_GlobalInvocationID", "index", "pushBlock", "channels", "in_h", "in_w", "out_h", "out_w", "padding_h", "padding_w", "filter_h", "filter_w", "stride_h", "stride_w", "total", "need_mask", "hstart", "wstart", "hend", "wend", "maxval", "maxidx", "Input0", "in_buffer", "Output", "out_buffer", "Mask", "mask_buffer", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "pushBlock", "nthreads", "num_axes", "global_size", "old_pos", "new_pos", "order", "Input1", "permute_order", "Input3", "new_stride", "Input2", "old_stride", "Output", "out_buffer", "Input0", "in_buffer", "GLSL.std.450", "main", "main", "index", "gl_GlobalInvocationID", "pushBlock", "global_size", "nthreads", "step_x", "step_y", "offset_x_size", "width_size", "layer_w", "image_h", "image_w", "clip", "variance_off", "output_offset", "box_w", "Input2", "widths", "box_h", "Input3", "heights", "center_x", "Input0", "offset_x", "center_y", "Input1", "offset_y", "outer", "start", "Output", "out_buffer", "Input4", "variance", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "pushBlock", "total", "slope", "in_val", "inbuf", "in_buffer", "outbuf", "out_buffer", "gl_NumWorkGroups", "GLSL.std.450", "main", "main", "gl_GlobalInvocationID", "pushBlock", "channel_size", "outer_size", "channels", "logsoftmax", "global_off", "reduced_buffer_off", "index", "buf1", "max_buffer", "buf0", "input_buffer", "buf2", "sum_buffer", "exp_val", "buf3", "output_buffer", "OPENCV_IO_MAX_IMAGE_WIDTH", "OPENCV_IO_MAX_IMAGE_HEIGHT", "OPENCV_IO_MAX_IMAGE_PIXELS", "cv::Mat cv::imread(const cv::String &, int)", "/build/master_pack-android/opencv/modules/imgcodecs/src/loadsave.cpp", "bool cv::imreadmulti(const cv::String &, std::vector<Mat> &, int)", "bool cv::imwrite(const cv::String &, cv::InputArray, const std::vector<int> &)", "!img_vec.empty()", "imwrite", "cv::Mat cv::imdecode(cv::InputArray, int)", "cv::Mat cv::imdecode(cv::InputArray, int, cv::Mat *)", "bool cv::imencode(const cv::String &, cv::InputArray, std::vector<uchar> &, const std::vector<int> &)", "channels == 1 || channels == 3 || channels == 4", "imencode", "could not find encoder for the specified extension", "encoder->isFormatSupported(CV_8U)", "f != 0", "imread_('", "'): can't read header: unknown exception", "'): can't read header: ", "'): can't read data: unknown exception", "'): can't read data: ", "size.width > 0", "validateInputImageSize", "static_cast<size_t>(size.width) <= CV_IO_MAX_IMAGE_WIDTH", "size.height > 0", "static_cast<size_t>(size.height) <= CV_IO_MAX_IMAGE_HEIGHT", "pixels <= CV_IO_MAX_IMAGE_PIXELS", "imreadmulti_('", "could not find a writer for the specified extension", "imwrite_", "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", "params.size() <= CV_IO_MAX_IMAGE_PARAMS*2", "imwrite_('", "'): can't write data: unknown exception", "'): can't write data: ", "!buf.empty() && buf.isContinuous()", "imdecode_", "failed to write image data to temporary file", "imdecode_('", "unable to remove temporary file:", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrEncoderENS_9allocatorIS2_EEEE", "N2cv12_GLOBAL__N_116ByteStreamBufferE", "(size_t)valueInt == sz", "validateToInt", "/build/master_pack-android/opencv/modules/imgcodecs/src/utils.cpp", "Raw image encoder error: ", "throwOnEror", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_base.cpp", "N2cv16BaseImageDecoderE", "N2cv16BaseImageEncoderE", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_bmp.cpp", "clrused >= 0 && clrused <= 256", "(size_t)sz < _src.size()", "readData", "Invalid/unsupported mode", "Windows bitmap (*.bmp;*.dib)", "N2cv10BmpDecoderE", "N2cv10BmpEncoderE", "OpenEXR Image files (*.exr)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_exr.cpp", "channels == 3 || channels == 1", "IMWRITE_EXR_TYPE is invalid or not supported", "N2cv10ExrDecoderE", "N2cv10ExrEncoderE", "#?RGBE", "#?RADIANCE", "Radiance HDR (*.hdr;*.pic)", "input_img.channels() == 3 || input_img.channels() == 1", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_hdr.cpp", "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", "N2cv10HdrDecoderE", "N2cv10HdrEncoderE", "JPEG files (*.jpeg;*.jpg;*.jpe)", "N2cv11JpegDecoderE", "N2cv11JpegEncoderE", "\fjP 0 == (jas_image_tlx(image)) && \"not supported\"", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_jpeg2000.cpp", "0 == (jas_image_tly(image)) && \"not supported\"", "depth == 0 || depth == depth_i", "sgnd == 0 && \"not supported\"", "xstart == 0 && \"not supported\"", "ystart == 0 && \"not supported\"", "xstep == 1 && \"not supported\"", "ystep == 1 && \"not supported\"", "xend == m_width", "yend == m_height", "depth == 8 || depth == 16", "cntcmpts == 1 || cntcmpts == 3", "JPEG 2000 LOADER ERROR: cannot convert colorspace", "JPEG 2000 LOADER ERROR: unable to create colorspace", "result == true", "JPEG-2000 files (*.jp2)", "N2cv13Jpeg2KDecoderE", "N2cv13Jpeg2KEncoderE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13Jpeg2KDecoderEPFvS3_ENS_9allocatorIS2_EEEE", "PFvPN2cv13Jpeg2KDecoderEE", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_pam.cpp", "Portable arbitrary format (*.pam)", "WIDTH %d\n", "HEIGHT %d\n", "DEPTH %d\n", "MAXVAL %d\n", "TUPLTYPE %s\n", "basic_conversion", "N2cv24RBS_BAD_HEADER_ExceptionE", "N2cv10PAMDecoderE", "N2cv10PAMEncoderE", "ENDHDR", "HEIGHT", "WIDTH", "DEPTH", "MAXVAL", "TUPLTYPE", "Unexpected file type (expected P)", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_pfm.cpp", "Unexpected file type (expected `f` or `F`)", "Unexpected header format (expected line break)", "Unexpected status in data stream", "fabs(m_scale_factor) > 0.0f", "Portable image format - float (*.pfm)", "Expected 1 or 3 channel image.", "intc >= -128 && intc < 128", "read_number", "N2cv10PFMDecoderE", "N2cv10PFMEncoderE", "decoder", "readDataFromBuf", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_png.cpp", "PNG input buffer is incomplete", "1.6.35", "Portable Network Graphics files (*.png)", "encoder && encoder->m_buf", "writeDataToBuf", "N2cv10PngDecoderE", "N2cv10PngEncoderE", "PXM::readHeader(): unknown C++ exception", "m_maxval < 256 && m_maxval > 0", "CV_MAT_DEPTH(m_type) == CV_8U", "m_bpp is not supported", "PXM::readData(): unknown exception", "Portable image format - auto (*.pnm)", "Portable image format - monochrome (*.pbm)", "Portable image format - gray (*.pgm)", "Portable image format - color (*.ppm)", "PxMEncoder", "Portable bitmap(.pgm) expects gray image", "Portable bitmap(.ppm) expects BGR image", "For portable bitmap(.pbm) type must be CV_8UC1", "# Generated by OpenCV 4.0.1\n", "P%c\n%s%d %d\n", "header_sz > 0", "depth == 8", "% 4d", "% 6d", "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", "ReadNumber", "val <= INT_MAX && \"PXM: ReadNumber(): result is too large\"", "N2cv10PxMDecoderE", "N2cv10PxMEncoderE", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_sunras.cpp", "Sun raster files (*.sr;*.ras)", "N2cv16SunRasterDecoderE", "N2cv16SunRasterEncoderE", "N2cv11TiffDecoderE", "N2cv11TiffEncoderE", "Invalid bitsperpixel value read from TIFF header! Must be 1, 8, 16, 32 or 64.", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_tiff.cpp", "TIFF Files (*.tiff;*.tif)", "OPENCV_IMGCODECS_WEBP_MAX_FILE_SIZE", "fs && \"File stream error\"", "/build/master_pack-android/opencv/modules/imgcodecs/src/grfmt_webp.cpp", "virtual bool cv::WebPDecoder::readHeader()", "File is too small", "fs_size", "WEBP_HEADER_SIZE", "File is too large. Increase OPENCV_IMGCODECS_WEBP_MAX_FILE_SIZE parameter if you want to process large files", "param_maxFileSize", "fs && \"Can't read WEBP_HEADER_SIZE bytes\"", "Buffer is too small", "m_buf.total()", "virtual bool cv::WebPDecoder::readData(cv::Mat &)", "fs && \"Can't read file data\"", "data.type() == CV_8UC1", "data.rows == 1", "img.type() == CV_8UC1 || img.type() == CV_8UC3 || img.type() == CV_8UC4", "read_img.type()", "WebP files (*.webp)", "virtual bool cv::WebPEncoder::write(const cv::Mat &, const std::vector<int> &)", "WebP codec supports 8U images only", "img.depth()", "N2cv11WebPDecoderE", "N2cv11WebPEncoderE", "NSt6__ndk120__shared_ptr_pointerIPhPFvPvENS_9allocatorIhEEEE", "PFvPvE", "Unexpected end of input stream", "readBlock", "/build/master_pack-android/opencv/modules/imgcodecs/src/bitstrm.cpp", "isOpened() && pos >= 0", "setPos", "getPos", "pos >= m_block_pos", "bytes >= 0", "skip", "current < m_end", "getByte", "getBytes", "writeBlock", "data && m_current && count >= 0", "putBytes", "N2cv23RBS_THROW_EOS_ExceptionE", "N2cv11RBaseStreamE", "N2cv12RLByteStreamE", "N2cv12RMByteStreamE", "N2cv11WBaseStreamE", "N2cv12WLByteStreamE", "N2cv12WMByteStreamE", "GAMMA=%g\n", "EXPOSURE=%g\n", "FORMAT=32-bit_rle_rgbe\n\n", "-Y %d +X %d\n", "FORMAT=32-bit_rle_rgbe\n", "GAMMA=%g", "EXPOSURE=%g", "missing blank line after FORMAT specifier", "missing FORMAT specifier", "-Y %d +X %d", "missing image size specifier", "wrong scanline width", "unable to allocate buffer space", "bad scanline data", "RGBE read error", "rgbe_error", "/build/master_pack-android/opencv/modules/imgcodecs/src/rgbe.cpp", "RGBE write error", "RGBE bad file format: ", "RGBE error: \n", "OPENCV_VIDEOCAPTURE_DEBUG", "OPENCV_VIDEOWRITER_DEBUG", "CAP_ANY", "UnknownVideoAPI(%d)", "VideoCapture(index=", ") was built without support of requested backendID=", "VideoCapture(filename=", "VIDEOIO(%s): trying ...\n", "createFileCapture_Images(filename)", "VIDEOIO(%s): result=%p isOpened=%d ...\n", "VIDEOIO(%s): raised unknown C++ exception!\n\n", "VIDEOIO(%s): raised C++ exception:\n\n%s\n", "VIDEOIO(%s): raised OpenCV exception:\n\n%s\n", "createMotionJpegCapture(filename)", "Unknown VideoWriter backend (check getBuildInformation()): ", "createMotionJpegWriter(filename, fourcc, fps, frameSize, isColor)", "VIDEOIO(%s): result=%p  isOpened=%d...\n", "cvCreateVideoWriter_Images(filename.c_str())", "VIDEOIO(%s): result=%p...\n", "VIDEOIO: Updated backends priorities: ", "OPENCV_VIDEOIO_PRIORITY_%s", "param_priority == (size_t)(int)param_priority", "VideoBackendRegistry", "/build/master_pack-android/opencv/modules/videoio/src/videoio_registry.cpp", "VIDEOIO: Disable backend: ", "VIDEOIO: Enabled backends(", ", sorted by priority): ", "OPENCV_VIDEOIO_PRIORITY_LIST", "VIDEOIO: Configured priority list (OPENCV_VIDEOIO_PRIORITY_LIST): ", "VIDEOIO: Can't prioritize unknown/unavailable backend: '", "CV_IMAGES", "CV_MJPEG", "cvCreateFileCaptureWithPreference: backend ", " doesn't support legacy API anymore.", "cvCreateVideoWriter: backend ", "cv::VideoCapture::VideoCapture(const cv::String &, int)", "/build/master_pack-android/opencv/modules/videoio/src/cap.cpp", "cv::VideoCapture::VideoCapture(int, int)", "virtual cv::VideoCapture::~VideoCapture()", "virtual bool cv::VideoCapture::open(const cv::String &, int)", "virtual bool cv::VideoCapture::open(int, int)", "getBackendName", "virtual void cv::VideoCapture::release()", "virtual bool cv::VideoCapture::grab()", "virtual bool cv::VideoCapture::retrieve(cv::OutputArray, int)", "virtual bool cv::VideoCapture::read(cv::OutputArray)", "virtual cv::VideoCapture &cv::VideoCapture::operator>>(cv::UMat &)", "virtual bool cv::VideoCapture::set(int, double)", "Can't set read-only property", "propId", "(int)CAP_PROP_BACKEND", "bool cv::VideoWriter::open(const cv::String &, int, int, double, cv::Size, bool)", "virtual bool cv::VideoWriter::set(int, double)", "virtual void cv::VideoWriter::write(cv::InputArray)", "virtual cv::VideoWriter &cv::VideoWriter::operator<<(const cv::Mat &)", "virtual cv::VideoWriter &cv::VideoWriter::operator<<(const cv::UMat &)", "N2cv12VideoCaptureE", "N2cv11VideoWriterE", "NSt6__ndk120__shared_ptr_pointerIP9CvCaptureN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI9CvCaptureEE", "NSt6__ndk120__shared_ptr_pointerIP13CvVideoWriterN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI13CvVideoWriterEE", "N2cv16CvCapture_ImagesE", "20CvVideoWriter_Images", "N2cv13IVideoCaptureE", "13CvVideoWriter", "NSt6__ndk120__shared_ptr_pointerIPN2cv16CvCapture_ImagesENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv16CvCapture_ImagesEEE", "writeFrameData", "/build/master_pack-android/opencv/modules/videoio/src/cap_mjpeg_encoder.cpp", "too big maximum Huffman code size", "createEncodeHuffmanTable", "len >=0 && len < 32", "put_bits", ".avi", ".AVI", ".Avi", "imgWidth == frameWidth && imgHeight == frameHeight", "imgWidth == frameWidth && imgHeight == frameHeight && channels == 3", "imgWidth == frameWidth && imgHeight == frameHeight*3", "Invalid combination of specified video colorspace and the input image colorspace", "N2cv5mjpeg12MjpegEncoderE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5mjpeg16MotionJpegWriterENS_9allocatorIS3_EEEE", "N2cv5mjpeg16MotionJpegWriterE", "N2cv12IVideoWriterE", "N2cv17MotionJpegCaptureE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16AVIReadContainerENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv17MotionJpegCaptureENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv17MotionJpegCaptureEEE", "wb%c%c%c%c", "Failed to seek in AVI file: position is out of range", "Frame offset points outside movi section.\n", "More than one video stream found within AVI/AVIX list. Stream %c%cdc would be ignored\n", "number_of_streams < 0xFF", "parseHdrlList", "/build/master_pack-android/opencv/modules/videoio/src/container_avi.cpp", "Failed to parse avi: index was not found\n", "chunk.m_size <= 67108864", "readFrame", "Unexpected end of file while searching for %s list\n", "Unexpected element. Expected: %s. Got: %s.\n", "Unexpected list type. Expected: %s. Got: %s.\n", "Unexpected end of file while searching for %s chunk\n", "Failed to determine AVI bufer position: value is out of range", "Failed to seek in AVI buffer: value is out of range", "delta < m_current - m_start", "patchInt", "Failed to seek in AVI file: value is out of range", "fourcc != 0", "startWriteChunk", "currpos > 4", "endWriteChunk", "currpos >= pospos", "Failed to write AVI file: chunk size is out of bounds", "Failed to write AVI file: number of frames is too large", "Can not convert integer values (%s -> %s), value 0x%jx is out of range", "safe_int_cast", "NSt6__ndk120__shared_ptr_emplaceIN2cv16VideoInputStreamENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BitStreamENS_9allocatorIS2_EEEE", "cv::Rect cv::getWindowImageRect(const cv::String &)", "/build/master_pack-android/opencv/modules/highgui/src/window.cpp", "void cv::namedWindow(const cv::String &, int)", "void cv::destroyWindow(const cv::String &)", "void cv::destroyAllWindows()", "void cv::resizeWindow(const cv::String &, int, int)", "void cv::resizeWindow(const cv::String &, const cv::Size &)", "void cv::moveWindow(const cv::String &, int, int)", "void cv::setWindowProperty(const cv::String &, int, double)", "double cv::getWindowProperty(const cv::String &, int)", "int cv::waitKeyEx(int)", "int cv::waitKey(int)", "OPENCV_LEGACY_WAITKEY", "int cv::createTrackbar(const cv::String &, const cv::String &, int *, int, cv::TrackbarCallback, void *)", "void cv::setTrackbarPos(const cv::String &, const cv::String &, int)", "void cv::setTrackbarMax(const cv::String &, const cv::String &, int)", "void cv::setTrackbarMin(const cv::String &, const cv::String &, int)", "int cv::getTrackbarPos(const cv::String &, const cv::String &)", "void cv::setMouseCallback(const cv::String &, cv::MouseCallback, void *)", "int cv::getMouseWheelDelta(int)", "int cv::startWindowThread()", "void cv::setOpenGlDrawCallback(const cv::String &, cv::OpenGlDrawCallback, void *)", "void cv::setOpenGlContext(const cv::String &)", "void cv::updateWindow(const cv::String &)", "void cv::imshow(const cv::String &, cv::InputArray)", "size.width>0 && size.height>0", "imshow", "void cv::imshow(const cv::String &, const ogl::Texture2D &)", "cvSetOpenGlDrawCallback", "cvSetOpenGlContext", "cvUpdateWindow", "fontQt", "addText", "displayStatusBar", "displayOverlay", "startLoop", "stopLoop", "saveWindowParameters", "loadWindowParameters", "createButton", "The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script", "setWindowTitle", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvSetTrackbarMin", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "The library is compiled without QT support", "ROI selector", "Select a ROI and then press SPACE or ENTER button!", "Cancel the selection process by pressing c button!", "Finish the selection process by pressing ESC button!", "/build/master_pack-android/opencv/modules/features2d/src/agast.cpp", "void cv::AGAST(cv::InputArray, std::vector<KeyPoint> &, int, bool, AgastFeatureDetector::DetectorType)", ".AgastFeatureDetector", "virtual void cv::AgastFeatureDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "N2cv20AgastFeatureDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25AgastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "N2cv25AgastFeatureDetector_ImplE", "pixel && offsets", "makeAgastOffsets", "/build/master_pack-android/opencv/modules/features2d/src/agast_score.cpp", "descriptor", "descriptor_channels", "descriptor_size", "octaves", "sublevels", "virtual void cv::AKAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "/build/master_pack-android/opencv/modules/features2d/src/akaze.cpp", "! image.empty()", "detectAndCompute", "(descriptors.empty() || descriptors.cols() == descriptorSize())", "(descriptors.empty() || (descriptors.type() == descriptorType()))", "N2cv5AKAZEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10AKAZE_ImplENS_9allocatorIS2_EEEE", "N2cv10AKAZE_ImplE", "!_descriptors.empty()", "/build/master_pack-android/opencv/modules/features2d/src/bagofwords.cpp", "descriptors[0].cols == _descriptors.cols", "descriptors[0].type() == _descriptors.type()", "virtual cv::Mat cv::BOWKMeansTrainer::cluster() const", "!descriptors.empty()", "cluster", "virtual cv::Mat cv::BOWKMeansTrainer::cluster(const cv::Mat &) const", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, std::vector<std::vector<int> > *, cv::Mat *)", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, cv::OutputArray, std::vector<std::vector<int> > *)", "!vocabulary.empty()", "!keypointDescriptors.empty()", "queryIdx == (int)i", "N2cv10BOWTrainerE", "N2cv16BOWKMeansTrainerE", "N2cv25BOWImgDescriptorExtractorE", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "virtual void cv::SimpleBlobDetectorImpl::findBlobs(cv::InputArray, cv::InputArray, std::vector<Center> &) const", "/build/master_pack-android/opencv/modules/features2d/src/blobdetector.cpp", "virtual void cv::SimpleBlobDetectorImpl::detect(cv::InputArray, std::vector<cv::KeyPoint> &, cv::InputArray)", "params.minRepeatability != 0", "Blob detector only supports 8-bit images!", ".SimpleBlobDetector", "N2cv18SimpleBlobDetectorE", "N2cv22SimpleBlobDetectorImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22SimpleBlobDetectorImplENS_9allocatorIS2_EEEE", "@AN2cv5BRISKE", "N2cv10BRISK_ImplE", "radiusList.size() != 0 && radiusList.size() == numberList.size()", "generateKernel", "/build/master_pack-android/opencv/modules/features2d/src/brisk.cpp", "noShortPairs_ < indSize", "iter->i < points_ && iter->j < points_", "computeDescriptorsAndOrOrientation", ".BRISK", "scaling2 != 0", "smoothedIntensity", "layer + 1 < layers_", "getScoreMaxAbove", "layer > 0", "getScoreMaxBelow", "srcimg.cols / 2 == dstimg.cols", "halfsample", "srcimg.rows / 2 == dstimg.rows", "(srcimg.cols / 3) * 2 == dstimg.cols", "twothirdsample", "(srcimg.rows / 3) * 2 == dstimg.rows", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BRISK_ImplENS_9allocatorIS2_EEEE", "void cv::drawKeypoints(cv::InputArray, const std::vector<KeyPoint> &, cv::InputOutputArray, const cv::Scalar &, cv::DrawMatchesFlags)", "/build/master_pack-android/opencv/modules/features2d/src/draw.cpp", "Incorrect type of input image.\n", "drawKeypoints", "!outImage.empty()", "matchesMask must have the same size as matches1to2", "drawMatches", "i1 >= 0 && i1 < static_cast<int>(keypoints1.size())", "i2 >= 0 && i2 < static_cast<int>(keypoints2.size())", "!img.empty()", "_drawKeypoint", "outImg has size less than need to draw img1 and img2 together", "_prepareImgAndDrawKeypoints", "/build/master_pack-android/opencv/modules/features2d/src/evaluation.cpp", "static void EllipticKeyPoint::convert(const std::vector<EllipticKeyPoint> &, std::vector<KeyPoint> &)", "!H.empty() && H.cols == 3 && H.rows == 3", "calcProjection", "void cv::evaluateFeatureDetector(const cv::Mat &, const cv::Mat &, const cv::Mat &, std::vector<KeyPoint> *, std::vector<KeyPoint> *, float &, int &, const Ptr<cv::FeatureDetector> &)", "fdetector must not be empty when keypoints1 or keypoints2 is empty", "evaluateFeatureDetector", "void cv::computeRecallPrecisionCurve(const std::vector<std::vector<DMatch> > &, const std::vector<std::vector<uchar> > &, std::vector<Point2f> &)", "matches1to2.size() == correctMatches1to2Mask.size()", "computeRecallPrecisionCurve", "float cv::getRecall(const std::vector<Point2f> &, float)", "int cv::getNearestPoint(const std::vector<Point2f> &, float)", "miny < maxy", "dr > FLT_EPSILON", "void cv::FAST(cv::InputArray, std::vector<KeyPoint> &, int, bool, FastFeatureDetector::DetectorType)", "/build/master_pack-android/opencv/modules/features2d/src/fast.cpp", "void cv::FAST(cv::InputArray, std::vector<KeyPoint> &, int, bool)", ".FastFeatureDetector", "virtual void cv::FastFeatureDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "N2cv19FastFeatureDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv24FastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "N2cv24FastFeatureDetector_ImplE", "makeOffsets", "/build/master_pack-android/opencv/modules/features2d/src/fast_score.cpp", "virtual void cv::Feature2D::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "/build/master_pack-android/opencv/modules/features2d/src/feature2d.cpp", "virtual void cv::Feature2D::detect(cv::InputArrayOfArrays, std::vector<std::vector<KeyPoint> > &, cv::InputArrayOfArrays)", "masks.total() == (size_t)nimages", "virtual void cv::Feature2D::compute(cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray)", "virtual void cv::Feature2D::compute(cv::InputArrayOfArrays, std::vector<std::vector<KeyPoint> > &, cv::OutputArrayOfArrays)", "keypoints.size() == (size_t)nimages", "descriptors must be vector<Mat> or vector<UMat>", "virtual void cv::Feature2D::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "Feature2D", "N2cv9Feature2DE", ".GFTTDetector", "virtual void cv::GFTTDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "/build/master_pack-android/opencv/modules/features2d/src/gftt.cpp", "N2cv12GFTTDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17GFTTDetector_ImplENS_9allocatorIS2_EEEE", "N2cv17GFTTDetector_ImplE", "extended", "upright", "virtual void cv::KAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "/build/master_pack-android/opencv/modules/features2d/src/kaze.cpp", "! img1_32.empty()", "(!desc.rows || desc.cols == descriptorSize())", "(!desc.rows || (desc.type() == descriptorType()))", "N2cv4KAZEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9KAZE_ImplENS_9allocatorIS2_EEEE", "N2cv9KAZE_ImplE", "/build/master_pack-android/opencv/modules/features2d/src/kaze/AKAZEFeatures.cpp", "void cv::AKAZEFeatures::Feature_Detection(std::vector<KeyPoint> &)", "void cv::AKAZEFeatures::Find_Scale_Space_Extrema(std::vector<Mat> &)", "void cv::AKAZEFeatures::Do_Subpixel_Refinement(std::vector<Mat> &, std::vector<KeyPoint> &)", "void cv::AKAZEFeatures::Compute_Descriptors(std::vector<KeyPoint> &, cv::OutputArray)", "0 <= kpts[i].class_id && kpts[i].class_id < static_cast<int>(evolution_.size())", "Compute_Descriptors", "void cv::AKAZEFeatures::Compute_Keypoints_Orientation(std::vector<KeyPoint> &) const", "desc_size == dsize", "Get_MSURF_Upright_Descriptor_64", "Get_MSURF_Descriptor_64", "options.descriptor_channels <= max_channels", "Get_Upright_MLDB_Full_Descriptor", "(pattern_size & 1) == 0", "dcount1 <= desc_size*8", "divUp(dcount1, 8) == desc_size", "size == Lx.size()", "MLDB_Fill_Values", "size == Ly.size()", "options_->descriptor_channels <= max_channels", "Get_MLDB_Full_Descriptor", "dpos == 486", "divUp(dpos, 8) == desc_size", "Get_MLDB_Descriptor_Subset", "coords[0] >= 0 && coords[0] < 3", "divUp(descriptorBits_.rows, 8) == desc_size", "Get_Upright_MLDB_Descriptor_Subset", "generateDescriptorSubsample", "nbits <= ssz && \"Descriptor size can't be bigger than full descriptor (486 = 162*3 - 3 channels)\"", "x0 - 6 * scale >= 0 && x0 + 6 * scale < Lx.cols", "Sample_Derivative_Response_Radius6", "y0 - 6 * scale >= 0 && y0 + 6 * scale < Lx.rows", "k < 109", "gtable", "cum[nkeys] == n", "quantized_counting_sort", "evolution.size() > 0", "create_nonlinear_scale_space", "void cv::compute_determinant(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, float)", "float cv::compute_kcontrast(cv::InputArray, cv::InputArray, float, int)", "nbins > 2", "compute_kcontrast", "!Lx_.empty()", "void cv::compute_diffusivity(cv::InputArray, cv::InputArray, cv::OutputArray, float, KAZE::DiffusivityType)", "Diffusivity is not supported: %d", "compute_diffusivity", "void cv::non_linear_diffusion_step(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "void cv::nld_step_scalar_one_lane(const cv::Mat &, const cv::Mat &, cv::Mat &, float, int, int)", "void cv::create_nonlinear_scale_space(cv::InputArray, const cv::AKAZEOptions &, const std::vector<std::vector<float> > &, std::vector<Evolution<MatType> > &) [MatType = cv::Mat]", "void cv::Compute_Determinant_Hessian_Response(cv::Pyramid &)", "N2cv22FindKeypointsSameScaleE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "N2cv26ComputeKeypointOrientationE", "N2cv28NonLinearScalarDiffusionStepE", "N2cv26DeterminantHessianResponseINS_3MatEEE", "Create_Nonlinear_Scale_Space", "/build/master_pack-android/opencv/modules/features2d/src/kaze/KAZEFeatures.cpp", "Feature_Description", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "/build/master_pack-android/opencv/modules/features2d/src/kaze/nldiffusion_functions.cpp", "float cv::compute_k_percentile(const cv::Mat &, float, float, int, int, int)", "void cv::compute_derivative_kernels(cv::OutputArray, cv::OutputArray, int, int, int)", "void cv::nld_step_scalar(cv::Mat &, const cv::Mat &, cv::Mat &, float)", "src.cols / 2 == dst.cols", "halfsample_image", "src.rows / 2 == dst.rows", "N2cv23Nld_Step_Scalar_InvokerE", "runByKeypointSize", "/build/master_pack-android/opencv/modules/features2d/src/keypoint.cpp", "maxSize >= 0", "minSize <= maxSize", "static void cv::KeyPointsFilter::runByPixelsMask(std::vector<KeyPoint> &, const cv::Mat &)", "/build/master_pack-android/opencv/modules/features2d/src/matchers.cpp", "dim > 0", "descriptors[i].cols == dim && descriptors[i].type() == type", "imgIdx < (int)startIdxs.size()", "getDescriptor", "globalIdx < (int)size()", "globalDescIdx < size()", "(globalDescIdx>=0) && (globalDescIdx < size())", "getLocalIdx", "_descriptors.isUMat() || _descriptors.isUMatVector() || _descriptors.isMat() || _descriptors.isMatVector()", "void cv::DescriptorMatcher::match(cv::InputArray, cv::InputArray, std::vector<DMatch> &, cv::InputArray) const", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArray, bool) const", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArray, bool) const", "void cv::DescriptorMatcher::match(cv::InputArray, std::vector<DMatch> &, cv::InputArrayOfArrays)", "masks.size() == imageCount", "checkMasks", "masks[i].rows == queryDescriptorsCount && masks[i].cols == rows && masks[i].type() == CV_8UC1", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArrayOfArrays, bool)", "knn > 0", "knnMatch", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArrayOfArrays, bool)", "maxDistance > std::numeric_limits<float>::epsilon()", "radiusMatch", "_queryDescriptors.type() == trainDescType", "knnMatchImpl", "(int64)imgCount*IMGIDX_ONE < INT_MAX", "trainDescCollection[iIdx].rows < IMGIDX_ONE", "radiusMatchImpl", "FlannBased", "BruteForce", "BruteForce-SL2", "BruteForce-L1", "BruteForce-Hamming", "BruteForce-HammingLUT", "BruteForce-Hamming(2)", "Unknown matcher name", "Specified descriptor matcher type is not supported.", "_indexParams", "FlannBasedMatcher", "_searchParams", "virtual void cv::FlannBasedMatcher::train()", "trainDescCollection.size() == 0", "ip.type() == FileNode::SEQ", "ip[i].type() == FileNode::MAP", "virtual void cv::FlannBasedMatcher::read(const cv::FileNode &)", "(int)type", "(int)LAST_VALUE_FLANN_INDEX_TYPE", "sp.type() == FileNode::SEQ", "sp[i].type() == FileNode::MAP", "typename", "deep clone functionality is not implemented, because Flann::Index has not copy constructor or clone method ", "clone", "virtual void cv::FlannBasedMatcher::knnMatchImpl(cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArrayOfArrays, bool)", "virtual void cv::FlannBasedMatcher::radiusMatchImpl(cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArrayOfArrays, bool)", "knnMatches[i].size() <= 1", "convertMatches", "N2cv9BFMatcherE", "N2cv17DescriptorMatcherE", "N2cv17DescriptorMatcher20DescriptorCollectionE", "N2cv17FlannBasedMatcherE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BFMatcherENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17FlannBasedMatcherENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann5IndexENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann11IndexParamsENS_9allocatorIS3_EEEE", "/build/master_pack-android/opencv/modules/features2d/src/mser.cpp", "Input image is too small. Expected at least 3x3", "detectRegions", "virtual void cv::MSER_Impl::detect(cv::InputArray, vector<cv::KeyPoint> &, cv::InputArray)", ".MSER", "ptrofs != 0", "pass", "h != NULL", "growHistory", "N2cv4MSERE", "N2cv9MSER_ImplE", "virtual void cv::ORB_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "/build/master_pack-android/opencv/modules/features2d/src/orb.cpp", "patchSize >= 2", "level >= 0", "0 <= level", "wta_k == 2 || wta_k == 3 || wta_k == 4", "firstLevel >= 0", ".ORB", "img.type() == CV_8UC1 && blockSize*blockSize <= 2048", "HarrisResponses", "Wrong wta_k. It can be only 2, 3 or 4.", "computeOrbDescriptors", "firstLevel_ >= 0", "setFirstLevel", "N2cv3ORBE", "N2cv8ORB_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8ORB_ImplENS_9allocatorIS2_EEEE", "/build/master_pack-android/opencv/modules/calib3d/src/ap3p.cpp", "int cv::ap3p::solve(std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &, const cv::Mat &)", "/build/master_pack-android/opencv/modules/calib3d/src/calibinit.cpp", "Only 8-bit grayscale or color images are supported", "depth == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "Both width and height of the pattern should have bigger than 2", "findChessboardCorners", "Null pointer to corners", "orderFoundConnectedQuads", "q->corners[i]", "q.corners[j]", "self_idx >= 0", "removeQuadFromGroup", "findConnectedQuads", "closest_quad", "findQuadNeighbors", "void cv::drawChessboardCorners(cv::InputOutputArray, cv::Size, cv::InputArray, bool)", "Number of channels must be 1, 3 or 4", "cn == 1 || cn == 3 || cn == 4", "Only 8-bit, 16-bit or floating-point 32-bit images are supported", "depth == CV_8U || depth == CV_16U || depth == CV_32F", "drawChessboardCorners", "bool cv::findCirclesGrid(cv::InputArray, cv::Size, cv::OutputArray, int, const Ptr<cv::FeatureDetector> &, const cv::CirclesGridFinderParameters &)", "isAsymmetricGrid ^ isSymmetricGrid", "findCirclesGrid", "Unknown pattern type", "img.channels() == 1 && img.depth() == CV_8U", "icvBinarizationHistogramBased", "\r@BB ", "cvCalcMatMulDeriv", "/build/master_pack-android/opencv/modules/calib3d/src/calibration.cpp", "CV_ARE_TYPES_EQ(A, B) && (CV_MAT_TYPE(A->type) == CV_32F || CV_MAT_TYPE(A->type) == CV_64F)", "A->cols == B->rows", "CV_ARE_TYPES_EQ(A, dABdA) && dABdA->rows == A->rows*B->cols && dABdA->cols == A->rows*A->cols", "CV_ARE_TYPES_EQ(A, dABdB) && dABdB->rows == A->rows*B->cols && dABdB->cols == B->rows*B->cols", "CV_IS_MAT(_rvec1) && CV_IS_MAT(_rvec2)", "cvComposeRT", "CV_MAT_TYPE(_rvec1->type) == CV_32F || CV_MAT_TYPE(_rvec1->type) == CV_64F", "_rvec1->rows == 3 && _rvec1->cols == 1 && CV_ARE_SIZES_EQ(_rvec1, _rvec2)", "CV_IS_MAT(_tvec1) && CV_IS_MAT(_tvec2)", "CV_ARE_SIZES_EQ(_tvec1, _tvec2) && CV_ARE_SIZES_EQ(_tvec1, _rvec1)", "Input argument is not a valid matrix", "cvRodrigues2", "The first output argument is not a valid matrix", "The matrices must have 32f or 64f data type", "All the matrices must have the same data type", "Jacobian is not a valid matrix", "Jacobian must have 32fC1 or 64fC1 datatype", "Jacobian must be 3x9 or 9x3", "Input matrix must be 1x3, 3x1 or 3x3", "Output matrix must be 3x3, single-channel floating point matrix", "Output matrix must be 1x3 or 3x1", "CV_IS_MAT(objectPoints) && CV_IS_MAT(imagePoints) && CV_IS_MAT(A) && CV_IS_MAT(rvec) && CV_IS_MAT(tvec)", "cvFindExtrinsicCameraParams2", "(CV_MAT_DEPTH(rvec->type) == CV_64F || CV_MAT_DEPTH(rvec->type) == CV_32F) && (rvec->rows == 1 || rvec->cols == 1) && rvec->rows*rvec->cols*CV_MAT_CN(rvec->type) == 3", "(CV_MAT_DEPTH(tvec->type) == CV_64F || CV_MAT_DEPTH(tvec->type) == CV_32F) && (tvec->rows == 1 || tvec->cols == 1) && tvec->rows*tvec->cols*CV_MAT_CN(tvec->type) == 3", "(count >= 4) || (count == 3 && useExtrinsicGuess)", "fabs(sc) > DBL_EPSILON", "Both object points and image points must be 2D", "cvInitIntrinsicParams2D", "object points and image points must be a single-row matrices", "npoints is not a valid matrix", "cvCalibrateCamera4", "the array of point counters must be 1-dimensional integer vector", "objectPoints is not a valid matrix", "All objectPoints[i].size() should be equal when object-releasing method is requested.", "All objectPoints[i] should be identical when object-releasing method is requested.", "Some of parameters is a NULL pointer!", "cvCalibrationMatrixValues", "Input parameters must be a matrices!", "fabs(nt) > 0", "cvStereoRectify", "fabs(nw) > 0", "CV_IS_MAT(_points1) && CV_IS_MAT(_points2) && CV_ARE_SIZES_EQ(_points1, _points2)", "cvStereoRectifyUncalibrated", "void cv::reprojectImageTo3D(cv::InputArray, cv::OutputArray, cv::InputArray, bool, int)", "stype == CV_8UC1 || stype == CV_16SC1 || stype == CV_32SC1 || stype == CV_32FC1", "reprojectImageTo3D", "Q.size() == Size(4,4)", "dtype == -1 || dtype == dtype_", "dtype == CV_16SC3 || dtype == CV_32SC3 || dtype == CV_32FC3", "cols >= 0", "disp.size() == _3dimg.size()", "cvReprojectImageTo3D", "CV_IS_MAT(matrixM) && CV_IS_MAT(matrixR) && CV_IS_MAT(matrixQ) && matrixM->cols == 3 && matrixM->rows == 3 && CV_ARE_SIZES_EQ(matrixM, matrixR) && CV_ARE_SIZES_EQ(matrixM, matrixQ)", "cvRQDecomp3x3", "cvDecomposeProjectionMatrix", "Size of projection matrix must be 3x4!", "Size of calibration and rotation matrices must be 3x3!", "Size of position vector must be 4x1!", "cvDet(&tmpMatrixM) != 0.0", "void cv::Rodrigues(cv::InputArray, cv::OutputArray, cv::OutputArray)", "void cv::matMulDeriv(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "npoints >= 0 && (depth == CV_32F || depth == CV_64F)", "projectPoints", "_ipoints.needed()", "cv::Mat cv::initCameraMatrix2D(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, double)", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "double cv::calibrateCameraRO(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, int, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, int, cv::TermCriteria)", "double cv::calibrateCameraRO(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, int, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "_cameraMatrix.needed()", "calibrateCameraRO", "_distCoeffs.needed()", "void cv::calibrationMatrixValues(cv::InputArray, cv::Size, double, double, double &, double &, double &, cv::Point2d &, double &)", "Size of cameraMatrix must be 3x3!", "calibrationMatrixValues", "stereoCalibrate does not support CALIB_USE_EXTRINSIC_GUESS.", "stereoCalibrate", "bool cv::stereoRectifyUncalibrated(cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, cv::OutputArray, cv::OutputArray, double)", "cv::Mat cv::getOptimalNewCameraMatrix(cv::InputArray, cv::InputArray, cv::Size, double, cv::Size, cv::Rect *, bool)", "cv::Vec3d cv::RQDecomp3x3(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "void cv::decomposeProjectionMatrix(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "rectify3Collinear", "One of required arguments is not a valid matrix", "cvProjectPoints2Internal", "Homogeneous coordinates are not supported", "Rotation must be represented by 1x3 or 3x1 floating-point rotation vector, or 3x3 rotation matrix", "Translation vector must be 1x3 or 3x1 floating-point vector", "Instrinsic parameters must be 3x3 floating-point matrix", "dp/drot must be 2Nx3 floating-point matrix", "dp/dT must be 2Nx3 floating-point matrix", "dp/df must be 2Nx2 floating-point matrix", "dp/dc must be 2Nx2 floating-point matrix", "dp/df must be 2Nx14, 2Nx12, 2Nx8, 2Nx5, 2Nx4 or 2Nx2 floating-point matrix", "distCoeffs is NULL while dpdk is not", "dp/do must be 2Nx3N floating-point matrix", "Distortion coefficients must be 1x4, 4x1, 1x5, 5x1, 1x8, 8x1, 1x12, 12x1, 1x14 or 14x1 floating-point vector", "One of required vector arguments is not a valid matrix", "cvCalibrateCamera2Internal", "image width and height must be positive", "The tilted sensor model must have 14 parameters in the distortion matrix", "Thin prism model must have 12 parameters in the distortion matrix", "the output array of rotation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 or nx9 array, where n is the number of views", "the output array of translation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of views", "the output array of standard deviations vectors must be 1-channel 1x(n*6 + NINTRINSIC) or (n*6 + NINTRINSIC)x1 array, where n is the number of views, NINTRINSIC = 18", "Intrinsic parameters must be 3x3 floating-point matrix", "The number of points in the view #%d is < 4", "the output array of refined object points must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of object points per view", "the output array of standard deviations vectors must be 1-channel 1x(n*6 + NINTRINSIC + m*3) or (n*6 + NINTRINSIC + m*3)x1 array, where n is the number of views, NINTRINSIC = 18, m is the number of object points per view", "Focal length (fx and fy) must be positive", "Principal point must be within the image", "Non-zero skew is not supported by the function", "The intrinsic matrix must have [fx 0 cx; 0 fy cy; 0 0 1] shape", "The specified aspect ratio (= cameraMatrix[0][0] / cameraMatrix[1][1]) is incorrect", "For non-planar calibration rigs the initial intrinsic matrix must be specified", "CV_IS_MAT(_imagePoints1) && CV_IS_MAT(_imagePoints2) && CV_IS_MAT(_objectPoints) && CV_IS_MAT(_npoints) && CV_IS_MAT(matR) && CV_IS_MAT(matT)", "cvStereoCalibrateImpl", "CV_ARE_TYPES_EQ(_imagePoints1, _imagePoints2) && CV_ARE_DEPTHS_EQ(_imagePoints1, _objectPoints)", "(_npoints->cols == 1 || _npoints->rows == 1) && CV_MAT_TYPE(_npoints->type) == CV_32SC1", "(CV_MAT_DEPTH(_imagePoints1->type) == CV_32F || CV_MAT_DEPTH(_imagePoints1->type) == CV_64F) && ((_imagePoints1->rows == pointsTotal && _imagePoints1->cols*cn == 2) || (_imagePoints1->rows == 1 && _imagePoints1->cols == pointsTotal && cn == 2))", "CALIB_USE_INTRINSIC_GUESS flag is set, but the camera matrix is not 3x3", "prepareCameraMatrix", "(int)distCoeffs0.total() <= outputSize", "prepareDistCoeffs", "nimages > 0 && nimages == (int)imagePoints1.total() && (!imgPtMat2 || nimages == (int)imagePoints2.total())", "collectCalibrationData", "objectPoints should contain vector of vectors of points of type Point3f", "imagePoints1 should contain vector of vectors of points of type Point2f", "ni == ni1", "ni == ni2", "ni1 > 0 && ni1 == ni3", "adjust3rdMatrix", "data && dims <= 2 && rows == m && cols == n && channels() == 1", "operator Matx", "_w.data == (uchar*)&w.val[0] && _u.data == (uchar*)&u.val[0] && _vt.data == (uchar*)&vt.val[0]", "/build/master_pack-android/opencv/modules/core/include/opencv2/core/operations.hpp", "/build/master_pack-android/opencv/modules/calib3d/src/checkchessboard.cpp", "checkChessboardBinary", "/build/master_pack-android/opencv/modules/calib3d/src/chessboard.cpp", "invalid scale", "para.min_scale", "para.min_scale >= 0 && para.min_scale <= para.max_scale", "no rotation images", "calcFeatureMap", "void cv::details::FastX::calcFeatureMap(const cv::Mat &, cv::Mat &) const", "image must be continuous", "no rotated images", "calcAngles", "empty rotated images", "rotated images must have at least four channels", "no rotated image for requested keypoint octave", "void cv::details::FastX::findKeyPoints(const std::vector<cv::Mat> &, std::vector<KeyPoint> &, const cv::Mat &) const", "missing feature maps", "int(feature_maps.size())", "num_scales", "wrong mask type", "_mask.type()", "wrong mask type or size", "_mask.size()", "feature_maps.front().size()", "Mask is not supported", "void cv::details::FastX::detectImpl(const cv::Mat &, std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &) const", "Unsupported image type", "_gray_image.type()", "checkCorner", "left", "bottom", "operator*", "size mismatch", "Board", "at least 3 rows and cols are needed to initialize the board", "getCellCenters: Chessboard must be at least consist of 3 rows and cols to calcualte the cell centers", "bool cv::details::Chessboard::Board::estimatePose(const cv::Size2f &, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "wrong K type", "K.type()", "wrong K size", "K.size()", "Size(3, 3)", "internal error", "estimatePose", "static float cv::details::Chessboard::Board::findMaxPoint(cv::flann::Index &, const cv::Mat &, const cv::details::Ellipse &, float, float, cv::Point2f &)", "4-cols flann data is expected", "exact nine points are expected to initialize the board", "out of bound", "getCorner", "cannot find corner", "getCell", "growLeft", "growLeft: Board is empty", "growTop", "growRight", "growBottom", "wrong number of points", "addColumnLeft", "addRowTop", "addColumnRight", "addRowBottom", "cannot retrieve contour", "getContour", "grow", "std::vector<cv::KeyPoint> cv::details::Chessboard::getInitialPoints(cv::flann::Index &, const cv::Mat &, const cv::KeyPoint &, float, float, float) const", "Unsupported source type", "data.type()", "wrong data format", "getInitialPoints", "Chessboard::Board cv::details::Chessboard::detectImpl(const cv::Mat &, std::vector<cv::Mat> &, const cv::Mat &) const", "gray.type()", "bool cv::findChessboardCornersSB(cv::InputArray, cv::Size, cv::OutputArray, int)", "depth == CV_8U && (cn == 1 || cn == 3)", "findChessboardCornersSB", "Invalid remaing flags %d", "npoints == nypoints && npoints >= order+1", "polyfit", "cv::Mat cv::details::findHomography1D(cv::InputArray, cv::InputArray)", "src.rows", "data with only one channel are supported", "src and dst must have the same type", "at least three point pairs are needed", "src.rows >= 3", "unsupported type", "findHomography1D", "fabs(scale) > DBL_EPSILON", "void cv::details::normalizePoints1D(cv::InputArray, cv::OutputArray, cv::OutputArray)", "points must have only one channel", "points.channels()", "all given points are identical", "normalizePoints1D", "unsupported point type", "N2cv7details5FastXE", "N2cv7details10Chessboard5BoardE", "N2cv7details10ChessboardE", "NSt6__ndk110__function6__funcIZNK2cv7details5FastX10detectImplERKNS2_3MatERNS_6vectorIS5_NS_9allocatorIS5_EEEESC_S7_E3$_0NS9_ISD_EEFvRKNS2_5RangeEEEE", "ZNK2cv7details5FastX10detectImplERKNS_3MatERNSt6__ndk16vectorIS2_NS5_9allocatorIS2_EEEESA_S4_E3$_0", "NSt6__ndk110__function6__funcIZNK2cv7details10Chessboard10detectImplERKNS2_3MatERNS_6vectorIS5_NS_9allocatorIS5_EEEES7_E3$_1NS9_ISD_EEFvRKNS2_5RangeEEEE", "ZNK2cv7details10Chessboard10detectImplERKNS_3MatERNSt6__ndk16vectorIS2_NS5_9allocatorIS2_EEEES4_E3$_1", "N2cv29ParallelLoopBodyLambdaWrapperE", "NSt6__ndk117bad_function_callE", "NSt6__ndk110__function6__baseIFvRKN2cv5RangeEEEE", "findCorners", "/build/master_pack-android/opencv/modules/calib3d/src/circlesgrid.cpp", "sortedIndices.cols == 1", "!corners.empty()", "findOutsideCorners", "!doesVertexExist( id )", "addVertex", "doesVertexExist( id1 )", "addEdge", "doesVertexExist( id2 )", "removeEdge", "it != vertices.end()", "areVerticesAdjacent", "getDegree", "it1->first != *it2", "floydWarshall", "getNeighbors", "_patternSize.height >= 0 && _patternSize.width >= 0", "CirclesGridFinder", "findHoles", "isDetectionCorrect", "rectifyGrid", "line.size() == seeds.size()", "findCandidateLine", "below.size() == above.size()", "findCandidateHoles", "belowSeeds.size() == aboveSeeds.size()", "below.size() == belowSeeds.size()", "Centers are not new", "insertWinner", "points.size() == seeds.size()", "computeGraphConfidence", "basisGraphs[0].getVerticesCount() == basisGraphs[1].getVerticesCount()", "samples is empty", "filterOutliersByDensity", "filteredSamples is empty", "centers.type() == CV_32FC1", "findBasis", "Basis size is not 2", "degenerate basis", "Number of basis graphs is not 2", "dm.type() == CV_32SC1", "computePredecessorMatrix", "maxLoc.x >= 0 && maxLoc.y >= 0", "findLongestPath", "largeHoles != 0 && smallHoles != 0", "getAsymmetricHoles", "h >= 2 && w >= 2", "getCornerSegments", "largeSegments.size() == cornersCount", "getFirstCorner", "/build/master_pack-android/opencv/modules/calib3d/src/compat_ptsetreg.cpp", "FM0.cols == 3 && FM0.rows % 3 == 0 && FM.cols == 3 && FM.rows % 3 == 0 && FM.channels() == 1", "cvFindFundamentalMat", "lines.rows == lines0.cols && lines.cols == lines0.rows", "cvComputeCorrespondEpilines", "lines.size() == lines0.size()", "dst.rows == dst0.cols && dst.cols == dst0.rows", "cvConvertPointsHomogeneous", "dst.size() == dst0.size()", "!pp.empty() && N > 0", "build_coeff_matrix", "/build/master_pack-android/opencv/modules/calib3d/src/dls.cpp", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, const cv::Affine3d &, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "/build/master_pack-android/opencv/modules/calib3d/src/fisheye.cpp", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3", "_rvec.total() * _rvec.channels() == 3 && (_rvec.depth() == CV_32F || _rvec.depth() == CV_64F)", "_tvec.total() * _tvec.channels() == 3 && (_tvec.depth() == CV_32F || _tvec.depth() == CV_64F)", "_tvec.getMat().isContinuous() && _rvec.getMat().isContinuous()", "_K.size() == Size(3,3) && (_K.type() == CV_32F || _K.type() == CV_64F) && _D.type() == _K.type() && _D.total() == 4", "void cv::fisheye::distortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, double)", "undistorted.type() == CV_32FC2 || undistorted.type() == CV_64FC2", "K.size() == Size(3,3) && (K.type() == CV_32F || K.type() == CV_64F) && D.total() == 4", "void cv::fisheye::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "distorted.type() == CV_32FC2 || distorted.type() == CV_64FC2", "undistortPoints", "P.empty() || P.size() == Size(3, 3) || P.size() == Size(4, 3)", "R.empty() || R.size() == Size(3, 3) || R.total() * R.channels() == 3", "D.total() == 4 && K.size() == Size(3, 3) && (K.depth() == CV_32F || K.depth() == CV_64F)", "void cv::fisheye::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &, int, cv::OutputArray, cv::OutputArray)", "m1type == CV_16SC2 || m1type == CV_32F || m1type <=0", "initUndistortRectifyMap", "(K.depth() == CV_32F || K.depth() == CV_64F) && (D.depth() == CV_32F || D.depth() == CV_64F)", "(P.empty() || P.depth() == CV_32F || P.depth() == CV_64F) && (R.empty() || R.depth() == CV_32F || R.depth() == CV_64F)", "K.size() == Size(3, 3) && (D.empty() || D.total() == 4)", "void cv::fisheye::undistortImage(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &)", "void cv::fisheye::estimateNewCameraMatrixForUndistortRectify(cv::InputArray, cv::InputArray, const cv::Size &, cv::InputArray, cv::OutputArray, double, const cv::Size &, double)", "estimateNewCameraMatrixForUndistortRectify", "D.empty() || ((D.total() == 4) && (D.depth() == CV_32F || D.depth() == CV_64F))", "void cv::fisheye::stereoRectify(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, const cv::Size &, double, double)", "(_R.size() == Size(3, 3) || _R.total() * _R.channels() == 3) && (_R.depth() == CV_32F || _R.depth() == CV_64F)", "stereoRectify", "double cv::fisheye::calibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::Size &, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "!objectPoints.empty() && !imagePoints.empty() && objectPoints.total() == imagePoints.total()", "calibrate", "imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2", "K.empty() || (K.size() == Size(3,3))", "D.empty() || (D.total() == 4)", "rvecs.empty() || (rvecs.channels() == 3)", "tvecs.empty() || (tvecs.channels() == 3)", "(!K.empty() && !D.empty()) || !(flags & CALIB_USE_INTRINSIC_GUESS)", "double cv::fisheye::stereoCalibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "!objectPoints.empty() && !imagePoints1.empty() && !imagePoints2.empty()", "objectPoints.total() == imagePoints1.total() || imagePoints1.total() == imagePoints2.total()", "imagePoints1.type() == CV_32FC2 || imagePoints1.type() == CV_64FC2", "imagePoints2.type() == CV_32FC2 || imagePoints2.type() == CV_64FC2", "K1.empty() || (K1.size() == Size(3,3))", "D1.empty() || (D1.total() == 4)", "K2.empty() || (K1.size() == Size(3,3))", "D2.empty() || (D1.total() == 4)", "(!K1.empty() && !K2.empty() && !D1.empty() && !D2.empty()) || !(flags & CALIB_FIX_INTRINSIC)", "abs_max < threshold", "a.type() == CV_64FC1", "operator+", "void cv::internal::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, const cv::internal::IntrinsicParams &, cv::OutputArray)", "!objectPoints.empty() && (objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3)", "!objectPoints.empty() && objectPoints.type() == CV_64FC3", "ComputeExtrinsicRefine", "!imagePoints.empty() && imagePoints.type() == CV_64FC2", "rvec.total() > 2 && tvec.total() > 2", "cv::Mat cv::internal::ComputeHomography(cv::Mat, cv::Mat)", "cv::Mat cv::internal::NormalizePixels(const cv::Mat &, const cv::internal::IntrinsicParams &)", "NormalizePixels", "!_objectPoints.empty() && _objectPoints.type() == CV_64FC3", "InitExtrinsics", "!_imagePoints.empty() && _imagePoints.type() == CV_64FC2", "fabs(norm_u1) > 0", "fabs(norm_u2) > 0", "CalibrateExtrinsics", "!imagePoints.empty() && (imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2)", "omc.type() == CV_64FC3 || Tc.type() == CV_64FC3", "CALIB_CHECK_COND - Ill-conditioned matrix for input array %d", "ComputeJacobians", "!omc.empty() && omc.type() == CV_64FC3", "!Tc.empty() && Tc.type() == CV_64FC3", "svd.w.at<double>(0) / svd.w.at<double>(svd.w.rows - 1) < thresh_cond", "EstimateUncertainties", "A.getMat().cols == B.getMat().rows", "A.type() == CV_64FC1 && B.type() == CV_64FC1", "row.type() == CV_64FC1", "median", "!row.empty() && row.rows == 1", "m.depth() == CV_64F && m.getMat().rows == 1", "median3d", "subMatrix", "data && dims <= 2 && (rows == 1 || cols == 1) && rows + cols - 1 == n && channels() == 1", "operator Vec", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "/build/master_pack-android/opencv/modules/calib3d/src/five-point.cpp", "npoints >= 0 && points2.checkVector(2) == npoints && points1.type() == points2.type()", "findEssentialMat", "cameraMatrix.rows == 3 && cameraMatrix.cols == 3 && cameraMatrix.channels() == 1", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, double, cv::Point2d, int, double, double, cv::OutputArray)", "int cv::recoverPose(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, cv::InputOutputArray, cv::OutputArray)", "recoverPose", "mask.size() == mask1.size()", "_R.needed() && _t.needed()", "void cv::decomposeEssentialMat(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "E.cols == 3 && E.rows == 3", "decomposeEssentialMat", "NSt6__ndk120__shared_ptr_emplaceIN2cv19EMEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv19EMEstimatorCallbackE", "N2cv19PointSetRegistrator8CallbackE", "cv::Mat cv::findHomography(cv::InputArray, cv::InputArray, int, double, cv::OutputArray, const int, const double)", "/build/master_pack-android/opencv/modules/calib3d/src/fundam.cpp", "The input arrays should be 2D or 3D point sets", "findHomography", "src.checkVector(2) == dst.checkVector(2)", "Unknown estimation method", "cv::Mat cv::findFundamentalMat(cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "findFundamentalMat", "m1.checkVector(2) == m2.checkVector(2)", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == npoints", "void cv::computeCorrespondEpilines(cv::InputArray, int, cv::InputArray, cv::OutputArray)", "The input should be a 2D or 3D point set", "computeCorrespondEpilines", "depth == CV_32F || depth == CV_32S || depth == CV_64F", "F.size() == Size(3,3)", "lines.isContinuous()", "void cv::convertPointsFromHomogeneous(cv::InputArray, cv::OutputArray)", "convertPointsFromHomogeneous", "npoints >= 0 && (depth == CV_32S || depth == CV_32F || depth == CV_64F)", "void cv::convertPointsToHomogeneous(cv::InputArray, cv::OutputArray)", "convertPointsToHomogeneous", "void cv::convertPointsHomogeneous(cv::InputArray, cv::OutputArray)", "_dst.fixedType()", "convertPointsHomogeneous", "double cv::sampsonDistance(cv::InputArray, cv::InputArray, cv::InputArray)", "_pt1.type() == CV_64F && _pt2.type() == CV_64F && _F.type() == CV_64F", "sampsonDistance", "J.isContinuous() && J.cols == 8", "(_m1.cols == 1 || _m1.rows == 1) && _m1.size() == _m2.size()", "run8Point", "NSt6__ndk120__shared_ptr_emplaceIN2cv27HomographyEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv27HomographyEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv24HomographyRefineCallbackENS_9allocatorIS2_EEEE", "N2cv24HomographyRefineCallbackE", "N2cv8LMSolver8CallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv19FMEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv19FMEstimatorCallbackE", "W.total() > 2 && Vt.total() > 7", "decompose", "/build/master_pack-android/opencv/modules/calib3d/src/homography_decomp.cpp", "decomposeHomographyMat", "K.cols == 3 && K.rows == 3", "_beforeRectifiedPoints.type() == CV_32FC2 && _afterRectifiedPoints.type() == CV_32FC2", "filterHomographyDecompByVisibleRefpoints", "_pointsMask.empty() || _pointsMask.type() == CV_8U", "pointsMask.empty() || pointsMask.checkVector(1, CV_8U) == npoints", "normals[i].total() == 3", "rotnorm[i].total() == 3", "N2cv23HomographyDecomposition16HomographyDecompE", "N2cv23HomographyDecomposition21HomographyDecompZhangE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "NSt6__ndk120__shared_ptr_pointerIPN2cv23HomographyDecomposition21HomographyDecompInriaENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv23HomographyDecomposition21HomographyDecompInriaEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LMSolverImplENS_9allocatorIS2_EEEE", "N2cv12LMSolverImplE", "N2cv8LMSolverE", "(param0.cols == 1 || param0.rows == 1) && (ptype == CV_32F || ptype == CV_64F)", "/build/master_pack-android/opencv/modules/calib3d/src/levmarq.cpp", "A.type() == CV_64F && A.rows == lx", "%c%10d %10d %15.4e %16.4e %17.4e %16.4e %17.4e\n", "iters > 0", "setMaxIters", "\titr\tnfJ\t\tSUM(r^2)\t\tx\t\tdx\t\tl\t\tlc", "************************************************************************************", "bool p3p::solve(cv::Mat &, cv::Mat &, const cv::Mat &, const cv::Mat &)", "/build/master_pack-android/opencv/modules/calib3d/src/p3p.cpp", "int p3p::solve(std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &, const cv::Mat &)", "cvCreatePOSITObject", "/build/master_pack-android/opencv/modules/calib3d/src/posit.cpp", "(icvPOSIT( pObject, imagePoints,(float) focalLength, criteria, rotation, translation )) >= 0", "cvPOSIT", "RANSACUpdateNumIters", "/build/master_pack-android/opencv/modules/calib3d/src/ptsetreg.cpp", "int cv::estimateAffine3D(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, double)", "count >= 0 && to.checkVector(3) == count", "estimateAffine3D", "count >= 0 && to.checkVector(2) == count", "estimateAffine2D", "Unknown or unsupported robust estimation method", "estimateAffinePartial2D", "confidence > 0 && confidence < 1", "count >= 0 && count2 == count", "(bestMask.cols == 1 || bestMask.rows == 1) && (int)bestMask.total() == count", "model.rows % nmodels == 0", "count >= modelPoints && count == count2", "getSubset", "(esz1 % sizeof(int)) == 0 && (esz2 % sizeof(int)) == 0", "err.isContinuous() && err.type() == CV_32F && mask.isContinuous() && mask.type() == CV_8U", "findInliers", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == count", "errf.isContinuous() && errf.type() == CV_32F && (int)errf.total() == count", "computeError", "count <= msi->rows", "checkSubset", "J.isContinuous() && J.cols == 6", "J.isContinuous() && J.cols == 4", "N2cv25RANSACPointSetRegistratorE", "N2cv19PointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "NSt6__ndk120__shared_ptr_pointerIPN2cv25RANSACPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv25RANSACPointSetRegistratorEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv24LMeDSPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv24LMeDSPointSetRegistratorEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine3DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv25Affine3DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine2DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv25Affine2DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22Affine2DRefineCallbackENS_9allocatorIS2_EEEE", "N2cv22Affine2DRefineCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv32AffinePartial2DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv32AffinePartial2DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv29AffinePartial2DRefineCallbackENS_9allocatorIS2_EEEE", "N2cv29AffinePartial2DRefineCallbackE", "/build/master_pack-android/opencv/modules/calib3d/src/quadsubpix.cpp", "ncorners >= 0", "find4QuadCornerSubpix", "min_idx >= 0", "findCorner", "N2cv13RHO_HEST_REFCE", "N2cv8RHO_HESTE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13RHO_HEST_REFCENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv13RHO_HEST_REFCEEE", "/build/master_pack-android/opencv/modules/calib3d/src/solvepnp.cpp", "image.getMat().total() > 0", "drawFrameAxes", "length > 0", "bool cv::solvePnP(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int)", "( (npoints >= 4) || (npoints == 3 && flags == SOLVEPNP_ITERATIVE && useExtrinsicGuess) ) && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "solvePnP", "(rtype == CV_32F || rtype == CV_64F) && (ttype == CV_32F || ttype == CV_64F)", "(rsize == Size(1, 3) || rsize == Size(3, 1)) && (tsize == Size(1, 3) || tsize == Size(3, 1))", "npoints == 4", "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_EPNP or SOLVEPNP_DLS", "bool cv::solvePnPRansac(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int, float, double, cv::OutputArray, int)", "npoints >= 4 && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "solvePnPRansac", "opoints.isContinuous()", "opoints.depth() == CV_32F || opoints.depth() == CV_64F", "(opoints.rows == 1 && opoints.channels() == 3) || opoints.cols*opoints.channels() == 3", "ipoints.isContinuous()", "ipoints.depth() == CV_32F || ipoints.depth() == CV_64F", "(ipoints.rows == 1 && ipoints.channels() == 2) || ipoints.cols*ipoints.channels() == 2", "int cv::solveP3P(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int)", "npoints == 3 && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "solveP3P", "flags == SOLVEPNP_P3P || flags == SOLVEPNP_AP3P", "NSt6__ndk120__shared_ptr_emplaceIN2cv17PnPRansacCallbackENS_9allocatorIS2_EEEE", "N2cv17PnPRansacCallbackE", "StereoMatcher.BM", "minDisparity", "numDisparities", "blockSize", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "n.isString() && String(n) == name_", "/build/master_pack-android/opencv/modules/calib3d/src/stereobm.cpp", "virtual void cv::StereoBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "All the images must have the same size", "Both input images must have CV_8UC1", "Disparity image must have CV_16SC1 or CV_32FC1 format", "preFilterType must be = CV_STEREO_BM_NORMALIZED_RESPONSE", "preFilterSize must be odd and be within 5..255", "preFilterCap must be within 1..63", "SADWindowSize must be odd, be within 5..255 and be not larger than image width or height", "numDisparities must be positive and divisble by 16", "texture threshold must be non-negative", "uniqueness ratio must be non-negative", "_disp.type() == CV_16S || _disp.type() == CV_32S", "FindStereoCorrespInvoker", "ndisp % 8 == 0", "findStereoCorrespondenceBM", "NSt6__ndk120__shared_ptr_emplaceIN2cv12StereoBMImplENS_9allocatorIS2_EEEE", "N2cv12StereoBMImplE", "N2cv8StereoBME", "N2cv13StereoMatcherE", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "D % 16 == 0", "SGBM3WayMainLoop", "/build/master_pack-android/opencv/modules/calib3d/src/stereosgbm.cpp", "StereoMatcher.SGBM", "void cv::filterSpeckles(cv::InputOutputArray, double, int, double, cv::InputOutputArray)", "type == CV_8UC1 || type == CV_16SC1", "filterSpeckles", "void cv::validateDisparity(cv::InputOutputArray, cv::InputArray, int, int, int)", "numberOfDisparities > 0 && disp.type() == CV_16S && (costType == CV_16S || costType == CV_32S) && disp.size() == cost.size()", "validateDisparity", "virtual void cv::StereoSGBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "left.size() == right.size() && left.type() == right.type() && left.depth() == CV_8U", "computeDisparitySGBM_HH4", "computeDisparitySGBM", "N2cv16SGBM3WayMainLoopE", "N2cv14StereoSGBMImplE", "N2cv10StereoSGBME", "N2cv16CalcVerticalSumsE", "N2cv18CalcHorizontalSumsE", "NSt6__ndk120__shared_ptr_pointerIPN2cv14StereoSGBMImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv14StereoSGBMImplEEE", "void cv::triangulatePoints(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "/build/master_pack-android/opencv/modules/calib3d/src/triangulate.cpp", "void cv::correctMatches(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "icvTriangulatePoints", "Input parameters must be matrices", "Number of points must be the same", "Number of proj points coordinates must be == 2", "Number of world points coordinates must be == 4", "Size of projection matrices must be 3x4", "icvCorrectMatches", "The fundamental matrix must be a 3x3 matrix", "The fundamental matrix must be a single-channel matrix", "The point-matrices must have one row, and an equal number of columns", "The first set of points must contain two channels; one for x and one for y", "The second set of points must contain two channels; one for x and one for y", "CV_IS_MAT(new_points1)", "The first output matrix must have the same dimensions as the input matrices", "The first output matrix must have two channels; one for x and one for y", "CV_IS_MAT(new_points2)", "The second output matrix must have the same dimensions as the input matrices", "The second output matrix must have two channels; one for x and one for y", "/build/master_pack-android/opencv/modules/calib3d/src/undistort.cpp", "A.size() == Size(3,3) && A.size() == R.size()", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1) || distCoeffs.size() == Size(1, 12) || distCoeffs.size() == Size(12, 1) || distCoeffs.size() == Size(1, 14) || distCoeffs.size() == Size(14, 1)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "dst.data != src.data", "undistort", "cvUndistort2", "mapx0.data == mapx.data && mapy0.data == mapy.data", "cvInitUndistortMap", "cvInitUndistortRectifyMap", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8 || ndcoeffs == 12 || ndcoeffs == 14)", "initWideAngleProjMap", "cameraMatrix0.size() == Size(3,3)", "m1 != NULL && m2 != NULL", "m1f != NULL && m2f != NULL", "m1 != NULL", "criteria.isValid()", "cvUndistortPointsInternal", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8 || _distCoeffs->rows*_distCoeffs->cols == 12 || _distCoeffs->rows*_distCoeffs->cols == 14)", "CV_IS_MAT(matR) && matR->rows == 3 && matR->cols == 3", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "Unknown projection type", "mapPointSpherical", "31initUndistortRectifyMapComputer", "H7void cv::groupRectangles(std::vector<Rect> &, int, double, std::vector<int> *, std::vector<double> *)", "/build/master_pack-android/opencv/modules/objdetect/src/cascadedetect.cpp", "void cv::groupRectangles(std::vector<Rect> &, int, double)", "void cv::groupRectangles(std::vector<Rect> &, std::vector<int> &, int, double)", "void cv::groupRectangles(std::vector<Rect> &, std::vector<int> &, std::vector<double> &, int, double)", "void cv::groupRectangles_meanshift(std::vector<Rect> &, std::vector<double> &, std::vector<double> &, double, cv::Size)", "virtual bool cv::FeatureEvaluator::setImage(cv::InputArray, const std::vector<float> &)", "rects", "tilted", "virtual void cv::HaarEvaluator::computeChannels(int, cv::InputArray)", "sqsum.u == u && sqsum.size() == s.szi && sqsum.type()==CV_32S", "computeChannels", "virtual void cv::HaarEvaluator::computeOptFeatures()", "0 <= scaleIdx && scaleIdx < (int)scaleData->size()", "setWindow", "int cv::CascadeClassifierImpl::runAt(Ptr<cv::FeatureEvaluator> &, cv::Point, int, double &)", "void cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, cv::Size, cv::Size, bool)", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, int, int, cv::Size, cv::Size, bool)", "scaleFactor > 1 && _image.depth() == CV_8U", "detectMultiScale", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, int, int, cv::Size, cv::Size)", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, double, int, int, cv::Size, cv::Size)", "scaleFactor > 1 && image.depth() == CV_8U", "stageType", "BOOST", "featureType", "HAAR", "HOG cascade is not supported in 3.0", "origWinSize.height > 0 && origWinSize.width > 0", "featureParams", "maxCatCount", "stages", "stageThreshold", "weakClassifiers", "internalNodes", "leafValues", "features", "a->size() == n", "clipObjects", "b->size() == n", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, int, int, cv::Size, cv::Size)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, double, int, int, cv::Size, cv::Size)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, int, int, cv::Size, cv::Size, bool)", "isOldFormatCascade", "getOriginalWindowSize", "getFeatureType", "getOldCascade", "setMaskGenerator", "getMaskGenerator", "getScaleData", "/build/master_pack-android/opencv/modules/objdetect/src/cascadedetect.hpp", "virtual void cv::CascadeClassifierInvoker::operator()(const cv::Range &) const", "nodes[root][PARENT] < 0", "partition", "int cv::predictOrderedStump(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::HaarEvaluator]", "!cascade.data.stumps.empty()", "predictOrderedStump", "int cv::predictCategoricalStump(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::LBPEvaluator]", "predictCategoricalStump", "int cv::predictOrdered(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::HaarEvaluator]", "int cv::predictCategorical(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::LBPEvaluator]", "N2cv16FeatureEvaluatorE", "N2cv13HaarEvaluatorE", "N2cv12LBPEvaluatorE", "N2cv21BaseCascadeClassifierE", "N2cv21CascadeClassifierImplE", "N2cv24CascadeClassifierInvokerE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv16FeatureEvaluator9ScaleDataENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13HaarEvaluatorENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LBPEvaluatorENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13HaarEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv13HaarEvaluatorEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv12LBPEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12LBPEvaluatorEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21CascadeClassifierImplENS_9allocatorIS2_EEEE", "stage_threshold", "left_val", "left_node", "right_val", "right_node", "cascade", "{:opencv-cascade-classifier", "stageParams", "maxWeakCount", "stageNum", "SeparateDetectionWork", "/build/master_pack-android/opencv/modules/objdetect/src/detection_based_tracker.cpp", "OBJECT_DETECTOR", "\n %s: ERROR: UNKNOWN Exception caught\n\n", "workcycleObjectDetectorFunction", "\n %s: ERROR: Exception caught: \n'%s'\n\n", "\n %s: ERROR: OpenCV Exception caught: \n'%s'\n\n", "DetectionBasedTracker: workcycleObjectDetectorFunction: ERROR concerning pointer, received as the function parameter", "stateThread==STATE_THREAD_WORKING_SLEEPING", "workcycleObjectDetector", "(params.maxTrackLifetime >= 0) && trackingDetector", "DetectionBasedTracker", "virtual void cv::DetectionBasedTracker::process(const cv::Mat &)", "imageGray.type()==CV_8UC1", "numpositions > 0", "updateTrackedObjects", "numpos > 0", "thread constructor failed", "unique_lock::unlock: not locked", "unique_lock::lock: references null mutex", "unique_lock::lock: already locked", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "N2cv21DetectionBasedTrackerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv21DetectionBasedTracker21SeparateDetectionWorkENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv21DetectionBasedTracker21SeparateDetectionWorkEEE", "blockSize.width % cellSize.width == 0 && blockSize.height % cellSize.height == 0", "getDescriptorSize", "/build/master_pack-android/opencv/modules/objdetect/src/hog.cpp", "(winSize.width - blockSize.width) % blockStride.width == 0 && (winSize.height - blockSize.height) % blockStride.height == 0", "checkDetectorSize()", "setSVMDetector", "winSize", "!obj[\"winSize\"].empty()", "blockStride", "cellSize", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "{opencv-object-detector-hog", "virtual void cv::HOGDescriptor::computeGradient(cv::InputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::Size) const", "computeGradient", "img.type() == CV_8U || img.type() == CV_8UC3", "(unsigned)hidx < (unsigned)nbins", "pt.x % cacheStride.width == 0 && pt.y % cacheStride.height == 0", "getBlock", "virtual void cv::HOGDescriptor::compute(cv::InputArray, std::vector<float> &, cv::Size, cv::Size, const std::vector<Point> &) const", "virtual void cv::HOGDescriptor::detect(cv::InputArray, std::vector<Point> &, std::vector<double> &, double, cv::Size, cv::Size, const std::vector<Point> &) const", "pt0.x % cacheStride.width == 0 && pt0.y % cacheStride.height == 0", "virtual void cv::HOGDescriptor::detect(cv::InputArray, std::vector<Point> &, double, cv::Size, cv::Size, const std::vector<Point> &) const", "virtual void cv::HOGDescriptor::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<double> &, double, cv::Size, cv::Size, double, double, bool) const", "virtual void cv::HOGDescriptor::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, cv::Size, cv::Size, double, double, bool) const", "virtual void cv::HOGDescriptor::detectROI(cv::InputArray, const std::vector<cv::Point> &, std::vector<cv::Point> &, std::vector<double> &, double, cv::Size, cv::Size) const", "virtual void cv::HOGDescriptor::detectMultiScaleROI(cv::InputArray, std::vector<cv::Rect> &, std::vector<DetectionROI> &, double, int) const", "void cv::HOGDescriptor::groupRectangles(std::vector<cv::Rect> &, std::vector<double> &, int, double) const", "rectList.size() == weights.size()", "groupRectangles", "virtual void cv::HOGConfInvoker::operator()(const cv::Range &) const", "N2cv13HOGDescriptorE", "N2cv8HOGCacheE", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "/build/master_pack-android/opencv/modules/objdetect/src/qrcode.cpp", "vector<cv::Vec3d> cv::QRDetect::searchHorizontalLines()", "vector<cv::Point2f> cv::QRDetect::separateVerticalLines(const vector<cv::Vec3d> &)", "separateVerticalLines", "void cv::QRDetect::fixationPoints(vector<cv::Point2f> &)", "bool cv::QRDetect::localization()", "bool cv::QRDetect::computeTransformationPoints()", "bool cv::QRDetect::testBypassRoute(vector<cv::Point2f>, int, int)", "vector<cv::Point2f> cv::QRDetect::getQuadrilateral(vector<cv::Point2f>)", "!inarr.empty()", "inarr.depth() == CV_8U", "void cv::QRDecode::init(const cv::Mat &, const vector<cv::Point2f> &)", "bool cv::QRDecode::updatePerspective()", "bool cv::QRDecode::versionDefinition()", "bool cv::QRDecode::samplingForVersion()", "decode", "points.isVector()", "src_points.size() == 4", "std::string cv::QRCodeDetector::decode(cv::InputArray, cv::InputArray, cv::OutputArray)", "Invalid QR code source points", "contourArea(src_points)", "detectAndDecode", "NSt6__ndk120__shared_ptr_pointerIPN2cv14QRCodeDetector4ImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv14QRCodeDetector4ImplEEE", "/build/master_pack-android/opencv/modules/video/src/bgfg_KNN.cpp", "learningRate >= 0", "virtual void cv::BackgroundSubtractorKNNImpl::getBackgroundImage(cv::OutputArray) const", "getBackgroundImage", "nchannels <= CV_CN_MAX", "history", "nKNN", "dist2Threshold", "detectShadows", "shadowValue", "shadowThreshold", "(String)fn[\"name\"] == name_", "BackgroundSubtractor.KNN", "N2cv27BackgroundSubtractorKNNImplE", "N2cv23BackgroundSubtractorKNNE", "N2cv20BackgroundSubtractorE", "N2cv10KNNInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv27BackgroundSubtractorKNNImplENS_9allocatorIS2_EEEE", "/build/master_pack-android/opencv/modules/video/src/bgfg_gaussmix2.cpp", "frameType == CV_8UC1 || frameType == CV_8UC3 || frameType == CV_32FC1 || frameType == CV_32FC3", "nmixtures <= 255", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = unsigned char, CN = 1]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = unsigned char, CN = 3]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = float, CN = 1]", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = float, CN = 3]", "BackgroundSubtractor.MOG2", "N2cv28BackgroundSubtractorMOG2ImplE", "N2cv24BackgroundSubtractorMOG2E", "N2cv11MOG2InvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv28BackgroundSubtractorMOG2ImplENS_9allocatorIS2_EEEE", "int cv::meanShift(cv::InputArray, cv::Rect &, cv::TermCriteria)", "/build/master_pack-android/opencv/modules/video/src/camshift.cpp", "meanShift", "Input window has non-positive sizes", "cv::RotatedRect cv::CamShift(cv::InputArray, cv::Rect &, cv::TermCriteria)", "/build/master_pack-android/opencv/modules/video/src/dis_flow.cpp", "!I1.empty() && I1.depth() == CV_8U && I1.channels() == 1", "I0.sameSize(I1)", "I0.isContinuous()", "I1.isContinuous()", "N2cv18DISOpticalFlowImplE", "N2cv18DISOpticalFlowImpl26PatchInverseSearch_ParBodyE", "N2cv18DISOpticalFlowImpl21Densification_ParBodyE", "N2cv14DISOpticalFlowE", "N2cv16DenseOpticalFlowE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DISOpticalFlowImplENS_9allocatorIS2_EEEE", "/build/master_pack-android/opencv/modules/video/src/ecc.cpp", "!dst.empty()", "Both input images must have the same data type", "Images must have 8uC1 or 32fC1 type", "warpMatrix must be single-channel floating-point matrix", "map.cols == 3", "map.rows == 2 || map.rows ==3", "motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY || motionType == MOTION_EUCLIDEAN || motionType == MOTION_TRANSLATION", "criteria.type & TermCriteria::COUNT || criteria.type & TermCriteria::EPS", "NaN encountered.", "The algorithm stopped before its convergence. The correlation is going to be minimized. Images may be uncorrelated or non-overlapped", "src1.size() == src2.size()", "image_jacobian_affine_ECC", "src1.size() == src3.size()", "src1.size() == src4.size()", "src1.rows == dst.rows", "dst.cols == (6*src1.cols)", "image_jacobian_homo_ECC", "dst.cols == (src1.cols*8)", "src5.isContinuous()", "src1.size()==src2.size()", "image_jacobian_translation_ECC", "dst.cols == (src1.cols*2)", "image_jacobian_euclidean_ECC", "src1.size()==src3.size()", "src1.size()==src4.size()", "dst.cols == (src1.cols*3)", "src1.rows == src2.rows", "project_onto_jacobian_ECC", "(src1.cols % src2.cols) == 0", "map_matrix.type() == CV_32FC1", "update_warping_matrix_ECC", "update.type() == CV_32FC1", "motionType == MOTION_TRANSLATION || motionType == MOTION_EUCLIDEAN || motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY", "map_matrix.rows == 3 && update.rows == 8", "map_matrix.rows == 2 && update.rows == 6", "map_matrix.rows == 2 && update.rows == 3", "map_matrix.rows == 2 && update.rows == 2", "update.cols == 1", "map_matrix.isContinuous()", "update.isContinuous()", "DP > 0 && MP > 0", "/build/master_pack-android/opencv/modules/video/src/kalman.cpp", "const cv::Mat &cv::KalmanFilter::predict(const cv::Mat &)", "const cv::Mat &cv::KalmanFilter::correct(const cv::Mat &)", "virtual void cv::detail::LKTrackerInvoker::operator()(const cv::Range &) const", "/build/master_pack-android/opencv/modules/video/src/lkpyramid.cpp", "status != NULL", "int cv::buildOpticalFlowPyramid(cv::InputArray, cv::OutputArrayOfArrays, cv::Size, int, bool, int, int, bool)", "img.depth() == CV_8U && winSize.width > 2 && winSize.height > 2", "buildOpticalFlowPyramid", "cv::Mat cv::estimateRigidTransform(cv::InputArray, cv::InputArray, bool)", "Both input images must have the same size", "estimateRigidTransform", "Both input images must have either 8uC1 or 8uC3 type", "calcSharrDeriv", "virtual void cv::(anonymous namespace)::SparsePyrLKOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray)", "maxLevel >= 0 && winSize.width > 2 && winSize.height > 2", "(npoints = prevPtsMat.checkVector(2, CV_32F, true)) >= 0", "nextPtsMat.checkVector(2, CV_32F, true) == npoints", "statusMat.isContinuous()", "errMat.isContinuous()", "levels1 >= 0", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height", "levels2 >= 0", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height", "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()", "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()", "N2cv6detail16LKTrackerInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplENS_9allocatorIS3_EEEE", "N2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplE", "N2cv22SparsePyrLKOpticalFlowE", "N2cv17SparseOpticalFlowE", "void cv::calcOpticalFlowFarneback(cv::InputArray, cv::InputArray, cv::InputOutputArray, double, int, int, int, int, double, int)", "/build/master_pack-android/opencv/modules/video/src/optflowgf.cpp", "virtual void cv::(anonymous namespace)::FarnebackOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputOutputArray)", "prev0.size() == next0.size() && prev0.channels() == next0.channels() && prev0.channels() == 1 && pyrScale_ < 1", "FarnebackPolyExp", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_124FarnebackOpticalFlowImplENS_9allocatorIS3_EEEE", "N2cv12_GLOBAL__N_124FarnebackOpticalFlowImplE", "N2cv20FarnebackOpticalFlowE", "PIEHPIEH", " A!I0.empty() && I0.channels() == 1", "/build/master_pack-android/opencv/modules/video/src/variational_refinement.cpp", "!I1.empty() && I1.channels() == 1", "(I0.depth() == CV_8U && I1.depth() == CV_8U) || (I0.depth() == CV_32F && I1.depth() == CV_32F)", "!flow.empty() && flow.depth() == CV_32F && flow.channels() == 2", "I0.sameSize(flow)", "calcUV", "!flow_u.empty() && flow_u.depth() == CV_32F && flow_u.channels() == 1", "!flow_v.empty() && flow_v.depth() == CV_32F && flow_v.channels() == 1", "I0.sameSize(flow_u)", "flow_u.sameSize(flow_v)", "N2cv25VariationalRefinementImplE", "N2cv25VariationalRefinementImpl18ParallelOp_ParBodyE", "N2cv25VariationalRefinementImpl23ComputeDataTerm_ParBodyE", "N2cv25VariationalRefinementImpl36ComputeSmoothnessTermHorPass_ParBodyE", "N2cv25VariationalRefinementImpl37ComputeSmoothnessTermVertPass_ParBodyE", "N2cv25VariationalRefinementImpl19RedBlackSOR_ParBodyE", "N2cv21VariationalRefinementE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25VariationalRefinementImplENS_9allocatorIS2_EEEE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/arena.cc", "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kHeaderSize): ", "Not implemented field number ", " with type ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", "A protocol message was rejected because it was too big (more than ", " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.", "CHECK failed: (buffer_size) >= (0): ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", "CHECK failed: (last_returned_size_) > (0): ", "BackUp() can only be called after a successful Next().", "CHECK failed: (count) <= (last_returned_size_): ", "CHECK failed: (count) >= (0): ", "CHECK failed: target_ != NULL: ", "Cannot allocate buffer larger than kint32max for ", "StringOutputStream.", "CHECK failed: (count) <= (target_->size()): ", "CHECK failed: backup_bytes_ == 0 && buffer_.get() != NULL: ", " BackUp() can only be called after Next().", "CHECK failed: (count) <= (buffer_used_): ", " Can't back up over more bytes than were returned by the last call to Next().", " Parameter to BackUp() can't be negative.", "CHECK failed: (backup_bytes_) == (0): ", "CHECK failed: (buffer_used_) == (buffer_size_): ", "N6google8protobuf2io18CopyingInputStreamE", "N6google8protobuf2io16ArrayInputStreamE", "N6google8protobuf2io17ArrayOutputStreamE", "N6google8protobuf2io18StringOutputStreamE", "N6google8protobuf2io25CopyingInputStreamAdaptorE", "N6google8protobuf2io26CopyingOutputStreamAdaptorE", "N6google8protobuf2io19ZeroCopyInputStreamE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/message_lite.cc", "Exceeded maximum protobuf size of 2GB: ", "CHECK failed: !coded_out.HadError(): ", "Can't ", " message of type \"", "\" because it is missing required fields: ", "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ", " was modified concurrently during serialization.", "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ", "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ", "This shouldn't be called if all the sizes are equal.", "N6google8protobuf11MessageLiteE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/common.cc", "This program requires version ", " of the Protocol Buffer runtime library, but the installed version is ", ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "This program was compiled against version ", " of the Protocol Buffer runtime library, which is not compatible with the installed version (", ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "%d.%d.%d", "pthread_mutex_lock: ", "pthread_mutex_unlock: ", "[libprotobuf ", "libprotobuf-native", "terminating.\n", "N6google8protobuf14FatalExceptionE", "N6google8protobuf7ClosureE", "N6google8protobuf8internal16FunctionClosure0E", "Division or mod by zero: dividend.hi=", ", lo=", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "UNAVAILABLE", "DATA_LOSS", "N6google8protobuf8internal12FieldSkipperE", "N6google8protobuf8internal29CodedOutputStreamFieldSkipperE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/wire_format_lite.cc", "CHECK failed: (value.size()) <= (kint32max): ", "parsing", "serializing", "String field", " contains invalid ", "UTF-8 data when ", " a protocol ", "buffer. Use the 'bytes' type if you intend to send raw ", "bytes. ", "N6google8protobuf14DescriptorPool14ErrorCollectorE", "N6google8protobuf12_GLOBAL__N_123AggregateErrorCollectorE", "uint64", "message", "uint32", "enum", "sfixed32", "sfixed64", "sint32", "sint64", "optional", "required", "repeated", "proto2", "proto3", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.cc", "can't reach here.", "CHECK failed: generated_database_->Add(encoded_file_descriptor, size): ", "CHECK failed: has_default_value(): ", "No default value", "Messages can't have default values!", "Can't get here: failed to get default value as string", "Cannot copy json_name to a proto of a different size.", "syntax = \"$0\";\n\n", "import public \"$0\";\n", "import weak \"$0\";\n", "import \"$0\";\n", "package $0;\n\n", "extend .$0 {\n", "$0message $1", "$0  extensions $1 to $2;\n", "$0  }\n", "$0  extend .$1 {\n", "$0  reserved ", "$0, ", "$0 to $1, ", "\"$0\", ", "$0}\n", "map<$0, $1>", "$0$1$2 $3 = $4", " [default = $0", "json_name = \"", " { ... };\n", "$0oneof $1 {", " ... }\n", "$0enum $1 {\n", "$0$1 = $2", " [$0]", "service $0 {\n", "$0rpc $1($4.$2) returns ($5.$3)", "stream ", " {\n$0$1}\n", "'out_location' must not be NULL", "CHECK failed: fallback_database_ == NULL: ", "Cannot call BuildFile on a DescriptorPool that uses a DescriptorDatabase.  You must instead find a way to get your file into the underlying database.", "CHECK failed: mutex_ == NULL: ", "Invalid proto descriptor for file \"", "\" is not defined.", "\" seems to be defined in \"", "\", which is not imported by \"", "\".  To use it here, please add the necessary import.", "\" is resolved to \"", "\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \".", "\") to start from the outermost scope.", ".placeholder.proto", ".PLACEHOLDER_VALUE", "\" not previously defined in symbols_by_name_, but was defined in symbols_by_parent_; this shouldn't be possible.", "\" is already defined.", "\" is already defined in \"", "\" is already defined in file \"", "\" is already defined (as something other than a package) in file \"", "Missing name.", "\" is not a valid identifier.", ".dummy", "File recursively imports itself: ", " -> ", "Import \"", "\" was listed twice.", "\" has not been loaded.", "\" was not found or had errors.", "Missing field: FileDescriptorProto.name.", "Unrecognized syntax: ", "A file with this name is already in the pool.", "Invalid public dependency index.", "Invalid weak dependency index.", "Reserved range $0 to $1 overlaps with already-defined range $2 to $3.", "Field name \"$0\" is reserved multiple times.", "Extension range $0 to $1 includes field \"$2\" ($3).", "Field \"$0\" uses reserved number $1.", "Field name \"$0\" is reserved.", "Extension range $0 to $1 overlaps with reserved range $2 to $3.", "Extension range $0 to $1 overlaps with already-defined range $2 to $3.", "Message extensions cannot have required fields.", "Repeated fields can't have default values.", "-inf", "Boolean default must be true or false.", "Messages can't have default values.", "Couldn't parse default value \"", "Field numbers must be positive integers.", "Field numbers cannot be greater than $0.", "Field numbers $0 through $1 are reserved for the protocol buffer library implementation.", "FieldDescriptorProto.extendee not set for extension field.", "FieldDescriptorProto.oneof_index should not be set for extensions.", "FieldDescriptorProto.extendee set for non-extension field.", "FieldDescriptorProto.oneof_index $0 is out of range for type \"$1\".", "Extension numbers must be positive integers.", "Extension range end number must be greater than start number.", "Reserved numbers must be positive integers.", "Reserved range end number must be greater than start number.", "When enum name is stripped and label is PascalCased (", "), this value label conflicts with ", ". This will make the proto fail to compile for some languages, such as C#.", "Enums must contain at least one value.", "Enum value \"$0\" is reserved multiple times.", "Enum value \"$0\" uses reserved number $1.", "Enum value \"$0\" is reserved.", "the global scope", "Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, not children of it.  Therefore, \"", "\" must be unique within ", ", not just within \"", "Fields in the same oneof must be defined consecutively. \"$0\" cannot be defined before the completion of the \"$1\" oneof definition.", "Oneof must have at least one field.", "\" is not a message type.", "\"$0\" does not declare $1 as an extension number.", "Fields of oneofs must themselves have label LABEL_OPTIONAL.", "google.protobuf.Empty", "\" is not a type.", "\" is not an enum type.", "Default value for an enum field must be an identifier.", "Enum type \"", "\" has no value named \"", "Field with primitive type has type_name.", "Field with message or enum type missing type_name.", "Extension number $0 has already been used in \"$1\" by extension \"$2\".", "Field number $0 has already been used in \"$1\" by field \"$2\".", "Extension number $0 has already been used in \"$1\" by extension \"$2\" defined in $3.", "Files that do not use optimize_for = LITE_RUNTIME cannot import files which do use this option.  This file is not lite, but it imports \"", "\" which is.", "Extension ranges are not allowed in proto3.", "MessageSet is not supported in proto3.", "The JSON camel-case name of field \"", "\" conflicts with field \"", "\". This is not ", "Extensions in proto3 are only allowed for defining options.", "Required fields are not allowed in proto3.", "Explicit default values are not allowed in proto3.", "\" is not a proto3 enum, but is used in \"", "\" which is a proto3 message type.", "Groups are not supported in proto3 syntax.", "The first enum value must be zero in proto3.", "Extension numbers cannot be greater than $0.", "[lazy = true] can only be specified for submessage fields.", "[packed = true] can only be specified for repeated primitive fields.", "Extensions of MessageSets must be optional messages.", "MessageSets cannot have fields, only extensions.", "Extensions to non-lite types can only be declared in non-lite files.  Note that you cannot extend a non-lite type to contain a lite type, but the reverse is allowed.", "map_entry should not be set explicitly. Use map<KeyType, ValueType> instead.", "\" uses the same enum value as \"", "\". If this is intended, set 'option allow_alias = true;' to the enum definition.", "Files with optimize_for = LITE_RUNTIME cannot define services unless you set both options cc_generic_services and java_generic_sevices to false.", "Key in map fields cannot be enum types.", "Key in map fields cannot be float/double, bytes or message types.", "Enum value in map must define 0 as the first value.", "Expanded map entry type ", " conflicts with an existing nested message type.", " conflicts with an existing field.", " conflicts with an existing enum type.", " conflicts with an existing oneof type.", "Illegal jstype for int64, uint64, sint64, fixed64 or sfixed64 field: ", "jstype is only allowed on int64, uint64, sint64, fixed64 or sfixed64 fields.", "CHECK failed: builder_: ", "Option must have a name.", "uninterpreted_option", "Option must not use reserved name \"uninterpreted_option\".", "CHECK failed: options_descriptor: ", "Option \"", "\" is resolved to \"(", ")\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \"(.", "\" unknown.", "Option field \"", "\" is not a field or extension of message \"", "\" is an atomic type, not a message.", "\" is a repeated message. Repeated message options must be initialized using an aggregate value.", "CHECK failed: !out.HadError(): ", "Unexpected failure while serializing option submessage ", "Invalid wire type for CPPTYPE_MESSAGE: ", "CHECK failed: field != NULL: ", "\" was already set.", "Value out of range for int32 option \"", "Value must be integer for int32 option \"", "Value out of range for int64 option \"", "Value must be integer for int64 option \"", "Value out of range for uint32 option \"", "Value must be non-negative integer for uint32 option \"", "Value must be non-negative integer for uint64 option \"", "Value must be number for float option \"", "Value must be number for double option \"", "Value must be identifier for boolean option \"", "Value must be \"true\" or \"false\" for boolean option \"", "Value must be identifier for enum-valued option \"", "\" for option \"", "\". This appears to be a value from a sibling type.", "Value must be quoted string for string option \"", "\" is a message. To set the entire message, use syntax like \"", " = { <proto text format> }\". To set fields within it, use syntax like \"", ".foo = value\".", "CHECK failed: dynamic.get() != NULL: ", "Could not create an instance of ", "Error while parsing option value for \"", "CHECK failed: (option_field->type()) == (FieldDescriptor::TYPE_GROUP): ", "Invalid wire type for CPPTYPE_INT32: ", "Invalid wire type for CPPTYPE_INT64: ", "Invalid wire type for CPPTYPE_UINT32: ", "Invalid wire type for CPPTYPE_UINT64: ", "google.protobuf.MessageOptions", "google.protobuf.FileOptions", "google.protobuf.FieldOptions", "google.protobuf.EnumOptions", "google.protobuf.EnumValueOptions", "google.protobuf.ServiceOptions", "google.protobuf.MethodOptions", "google.protobuf.StreamOptions", "Import ", " but not used.", "CHECK failed: file()->finished_building_ == true: ", "CHECK failed: enum_type_->value_count(): ", "CHECK failed: finished_building_ == true: ", "CHECK failed: !name_: ", "CHECK failed: !once_: ", "CHECK failed: !file_: ", "CHECK failed: !descriptor_: ", "CHECK failed: file && file->pool_: ", "CHECK failed: file->pool_->lazily_build_dependencies_: ", "CHECK failed: !file->finished_building_: ", "CHECK failed: file_->finished_building_: ", "UNKNOWN_ENUM_VALUE_%s_%d", "$0// $1\n", "$0option $1;\n", "Found invalid proto option data for: ", "OneofOptions", "google.protobuf.", "CHECK failed: uninterpreted_options_field != NULL: ", "No field named \"uninterpreted_option\" in the Options proto.", "CHECK failed: original_uninterpreted_options_field != NULL: ", "CHECK failed: options->AppendPartialToString(&buf): ", "Protocol message could not be serialized.", "CHECK failed: options->ParsePartialFromString(buf): ", "Protocol message serialized itself in invalid fashion.", "Options could not be fully parsed using the proto descriptors compiled into this binary. Missing required fields: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/logging.h", "N6google8protobuf8internal16FunctionClosure1IPKNS0_20FileDescriptorTablesEEE", "N6google8protobuf17DescriptorBuilder17OptionInterpreter21AggregateOptionFinderE", "N6google8protobuf8internal16FunctionClosure1IPNSt6__ndk14pairIPKNS0_20FileDescriptorTablesEPKNS0_14SourceCodeInfoEEEEE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_14FileDescriptorEEE", "N6google8protobuf8internal16FunctionClosure1IPNS1_14LazyDescriptorEEE", "google/protobuf/descriptor.proto", "N6google8protobuf17FileDescriptorSetE", "N6google8protobuf19FileDescriptorProtoE", "N6google8protobuf30DescriptorProto_ExtensionRangeE", "N6google8protobuf29DescriptorProto_ReservedRangeE", "N6google8protobuf15DescriptorProtoE", "N6google8protobuf21ExtensionRangeOptionsE", "N6google8protobuf20FieldDescriptorProtoE", "N6google8protobuf20OneofDescriptorProtoE", "N6google8protobuf37EnumDescriptorProto_EnumReservedRangeE", "N6google8protobuf19EnumDescriptorProtoE", "N6google8protobuf24EnumValueDescriptorProtoE", "N6google8protobuf22ServiceDescriptorProtoE", "N6google8protobuf21MethodDescriptorProtoE", "N6google8protobuf11FileOptionsE", "N6google8protobuf14MessageOptionsE", "N6google8protobuf12FieldOptionsE", "N6google8protobuf12OneofOptionsE", "N6google8protobuf11EnumOptionsE", "N6google8protobuf16EnumValueOptionsE", "N6google8protobuf14ServiceOptionsE", "N6google8protobuf13MethodOptionsE", "N6google8protobuf28UninterpretedOption_NamePartE", "N6google8protobuf19UninterpretedOptionE", "N6google8protobuf23SourceCodeInfo_LocationE", "N6google8protobuf14SourceCodeInfoE", "N6google8protobuf28GeneratedCodeInfo_AnnotationE", "N6google8protobuf17GeneratedCodeInfoE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/descriptor_database.cc", "Invalid file descriptor data passed to EncodedDescriptorDatabase::Add().", "File already exists in database: ", "Invalid symbol name: ", "Symbol name \"", "\" conflicts with the existing symbol \"", "Extension conflicts with extension already in database: extend ", "N6google8protobuf18DescriptorDatabaseE", "N6google8protobuf24SimpleDescriptorDatabaseE", "N6google8protobuf25EncodedDescriptorDatabaseE", "N6google8protobuf22DescriptorPoolDatabaseE", "N6google8protobuf24MergedDescriptorDatabaseE", "CHECK failed: is_prototype(): ", "Can't get here.", "N6google8protobuf14DynamicMessageE", "N6google8protobuf21DynamicMessageFactoryE", "CHECK failed: prototype != NULL: ", "CHECK failed: output->message_prototype != NULL: ", "Extension factory's GetPrototype() returned NULL for extension: ", "Non-primitive types can't be packed.", "Invalid message set extension.", "N6google8protobuf8internal22MessageSetFieldSkipperE", "N6google8protobuf8internal29DescriptorPoolExtensionFinderE", "N6google8protobuf16RepeatedPtrFieldINS0_11MessageLiteEEE", "Unimplemented type: ", "CHECK failed: (message1->GetReflection()) == (this): ", "First argument to Swap() (of type \"", "\") is not compatible with this reflection object (which is for type \"", "\").  Note that the exact same class is required; not just the same descriptor.", "CHECK failed: (message2->GetReflection()) == (this): ", "Second argument to Swap() (of type \"", "First argument to SwapFields() (of type \"", "Second argument to SwapFields() (of type \"", "HasField", "Field does not match message type.", "Field is repeated; the method requires a singular field.", "FieldSize", "Field is singular; the method requires a repeated field.", "ClearField", "RemoveLast", "ReleaseLast", "Swap", "GetInt32", "SetInt32", "GetRepeatedInt32", "SetRepeatedInt32", "AddInt32", "GetInt64", "SetInt64", "GetRepeatedInt64", "SetRepeatedInt64", "AddInt64", "GetUInt32", "SetUInt32", "GetRepeatedUInt32", "SetRepeatedUInt32", "AddUInt32", "GetUInt64", "SetUInt64", "GetRepeatedUInt64", "SetRepeatedUInt64", "AddUInt64", "GetFloat", "SetFloat", "GetRepeatedFloat", "SetRepeatedFloat", "AddFloat", "GetDouble", "SetDouble", "GetRepeatedDouble", "SetRepeatedDouble", "AddDouble", "GetBool", "SetBool", "GetRepeatedBool", "SetRepeatedBool", "AddBool", "GetString", "GetStringReference", "SetString", "GetRepeatedString", "GetRepeatedStringReference", "SetRepeatedString", "AddString", "SetEnum", "SetEnumValue", "SetEnumValue accepts only valid integer values: value ", " unexpected for field ", "GetRepeatedEnumValue", "SetRepeatedEnum", "SetRepeatedEnumValue accepts only valid integer values: ", "AddEnum", "AddEnumValue accepts only valid integer values: value ", "GetMessage", "MutableMessage", "SetAllocatedMessage", "ReleaseMessage", "GetRepeatedMessage", "MutableRepeatedMessage", "AddMessage", "AddAllocatedMessage", "\"MutableRawRepeatedField\"", "MutableRawRepeatedField", "CHECK failed: (field->options().ctype()) == (ctype): ", "subtype mismatch", "CHECK failed: (field->message_type()) == (desc): ", "wrong submessage type", "\"GetRawRepeatedField\"", "GetRawRepeatedField", "\"LookupMapValue\"", "Field is not a map field.", "\"InsertOrLookupMapValue\"", "\"DeleteMapValue\"", "\"MapBegin\"", "\"MapEnd\"", "\"MapSize\"", "CHECK failed: field->is_repeated(): ", "CHECK failed: field->cpp_type() == cpp_type || (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM && cpp_type == FieldDescriptor::CPPTYPE_INT32): ", "The type parameter T in RepeatedFieldRef<T> API doesn't match ", "the actual field type (for enums T should be the generated enum ", "type or int32).", "CHECK failed: (message_type) == (field->message_type()): ", "\"GetMapData\"", "CHECK failed: file != NULL: ", "Protocol Buffer reflection usage error:\n  Method      : google::protobuf::Reflection::", "\n  Message type: ", "\n  Field       : ", "\n  Problem     : ", "\n  Problem     : Field is not the right type for this message:\n    Expected  : ", "\n    Field type: ", "INVALID_CPPTYPE", "CPPTYPE_INT32", "CPPTYPE_INT64", "CPPTYPE_UINT32", "CPPTYPE_UINT64", "CPPTYPE_DOUBLE", "CPPTYPE_FLOAT", "CPPTYPE_BOOL", "CPPTYPE_ENUM", "CPPTYPE_STRING", "\n  Problem     : Enum value did not match field type:\n    Expected  : ", "\n    Actual    : ", "Reached impossible case in HasBit().", "N6google8protobuf8internal26GeneratedMessageReflectionE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/strtod.cc", "CHECK failed: (temp[0]) == ('1'): ", "CHECK failed: (temp[size-1]) == ('5'): ", "CHECK failed: (size) <= (6): ", "String literals cannot cross line boundaries.", "Expected hex digits for escape sequence.", "Expected four hex digits for \\u escape sequence.", "Expected eight hex digits up to 10ffff for \\U escape sequence", "Invalid escape sequence in string literal.", "\"0x\" must be followed by hex digits.", "Numbers starting with leading zero must be in octal.", "\"e\" must be followed by exponent.", "Need space between number and identifier.", "Already saw decimal point or exponent; can't have another one.", "Hex and octal numbers must be integers.", "\"/*\" inside block comment.  Block comments cannot be nested.", "End-of-file inside block comment.", "  Comment started here.", "Invalid control characters encountered in text.", "Need space between identifier and decimal point.", "Interpreting non ascii codepoint %d.", "Proto file starts with 0xEF but not UTF-8 BOM. Only UTF-8 is accepted for proto file.", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/tokenizer.cc", " Tokenizer::ParseFloat() passed text that could not have been tokenized as a float: ", " Tokenizer::ParseStringAppend() passed text that could not have been tokenized as a string: ", "\\U%08x", "N6google8protobuf2io14ErrorCollectorE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", "close() failed: ", "CHECK failed: !is_closed_: ", "Can't BackUp() after failed Next().", "N6google8protobuf2io15FileInputStreamE", "N6google8protobuf2io15FileInputStream22CopyingFileInputStreamE", "N6google8protobuf2io16FileOutputStreamE", "N6google8protobuf2io16FileOutputStream23CopyingFileOutputStreamE", "N6google8protobuf2io18IstreamInputStreamE", "N6google8protobuf2io18IstreamInputStream25CopyingIstreamInputStreamE", "N6google8protobuf2io19OstreamOutputStreamE", "N6google8protobuf2io19OstreamOutputStream26CopyingOstreamOutputStreamE", "N6google8protobuf2io24ConcatenatingInputStreamE", "N6google8protobuf2io19LimitingInputStreamE", "N6google8protobuf2io19CopyingOutputStreamE", "Unsupported", "MapKey::GetInt64Value", "MapKey::GetInt32Value", "MapKey::GetUInt64Value", "MapKey::GetUInt32Value", "MapKey::GetBoolValue", "MapValueRef::GetStringValue", "MapValueRef::GetInt64Value", "MapValueRef::GetInt32Value", "MapValueRef::GetUInt64Value", "MapValueRef::GetUInt32Value", "MapValueRef::GetBoolValue", "MapValueRef::GetDoubleValue", "MapValueRef::GetFloatValue", "MapValueRef::GetEnumValue", "MapValueRef::GetMessageValue", "MapValueRef::type MapValueRef is not initialized.", "Unsupported: type mismatch", "N6google8protobuf8internal12MapFieldBaseE", "N6google8protobuf8internal15DynamicMapFieldE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINS0_6MapKeyENS0_11MapValueRefEEE", "N6google8protobuf3MapINS0_6MapKeyENS0_11MapValueRefEE8InnerMapE", "N6google8protobuf4hashINS0_6MapKeyEEE", "CHECK failed: (from.GetDescriptor()) == (descriptor): ", ": Tried to merge from a message with a different type.  to: ", ", from: ", ": Tried to copy from a message with a different type. to: ", "CHECK failed: IsInitialized(): ", "Message of type \"", "\" is missing required fields: ", "Message class \"", "\" implements neither SetCachedSize() nor ByteSize().  Must implement one or the other.", "Unimplemented Map Reflection API.", "Not implemented.", "Should not reach here.", "File appears to be in generated pool but wasn't registered: ", "Type appears to be in generated pool but wasn't ", "File is already registered: ", "Type is already registered: ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/reflection_internal.h", "CHECK failed: this == other_mutator: ", "N6google8protobuf7MessageE", "N6google8protobuf10ReflectionE", "N6google8protobuf14MessageFactoryE", "N6google8protobuf8internal21RepeatedFieldAccessorE", "N6google8protobuf12_GLOBAL__N_123GeneratedMessageFactoryE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIiEE", "N6google8protobuf8internal20RepeatedFieldWrapperIiEE", "N6google8protobuf8internal33RandomAccessRepeatedFieldAccessorE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIjEE", "N6google8protobuf8internal20RepeatedFieldWrapperIjEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIlEE", "N6google8protobuf8internal20RepeatedFieldWrapperIlEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorImEE", "N6google8protobuf8internal20RepeatedFieldWrapperImEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIfEE", "N6google8protobuf8internal20RepeatedFieldWrapperIfEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIdEE", "N6google8protobuf8internal20RepeatedFieldWrapperIdEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIbEE", "N6google8protobuf8internal20RepeatedFieldWrapperIbEE", "N6google8protobuf8internal30RepeatedPtrFieldStringAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE", "N6google8protobuf8internal16MapFieldAccessorE", "N6google8protobuf8internal31RepeatedPtrFieldMessageAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINS0_7MessageEEE", "CHECK failed: (&from) != (to): ", "CHECK failed: (to->GetDescriptor()) == (descriptor): ", "Tried to merge messages of different types ", "(merge ", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/substitute.cc", "strings::Substitute format string invalid: asked for \"$", "\", but only ", " args were given.  Full format string was: \"", "Invalid strings::Substitute() format string: \"", "Index must be in range of repeated field values. ", "Field: ", "Index must be -1 for singular fields.", "Message missing required fields: ", "Proto type ", ": failed to parse contents", "...<truncated>...", ": 0x", "Warning parsing text-format ", "Non-repeated Any specified multiple times.", "Extension \"", "\" is not defined or is not an extension of \"", "Message type \"", "\" has no field named \"", "CHECK failed: allow_unknown_field_ || reserved_field: ", "Non-repeated field \"", "\" is specified multiple times.", "Field \"", "\" is specified along with field \"", "\", another member of oneof \"", "text format contains deprecated field \"", "TextFormat::Parser for Any supports only type.googleapis.com and type.googleprod.com, but found \"", "Expected \"", "\", found \"", "Could not find type \"", "\" stored in google.protobuf.Any.", "Value of type \"", "\" stored in google.protobuf.Any has missing required fields", "Expected identifier, got: ", "infinity", "Invalid float number: ", "Expected string, got: ", "Invalid value for boolean field \"", "\". Value: \"", "Expected integer or identifier, got: ", "Unknown enumeration value of \"", "\" for field \"", "Reached an unintended state: CPPTYPE_MESSAGE", "Expected integer, got: ", "Integer out of range (", "Expected double, got: ", "Expect a decimal number, got: ", "Error parsing text-format ", " Outdent() without matching Indent().", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/dynamic_message.h", "Invalid key for map field.", "N6google8protobuf10TextFormat17BaseTextGeneratorE", "N6google8protobuf10TextFormat6FinderE", "N6google8protobuf10TextFormat17FieldValuePrinterE", "N6google8protobuf10TextFormat21FastFieldValuePrinterE", "N6google8protobuf12_GLOBAL__N_123StringBaseTextGeneratorE", "N6google8protobuf12_GLOBAL__N_133FastFieldValuePrinterUtf8EscapingE", "N6google8protobuf12_GLOBAL__N_124FieldValuePrinterWrapperE", "N6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorE", "N6google8protobuf10TextFormat7Printer13TextGeneratorE", "CHECK failed: (output->ByteCount()) == (expected_endpoint): ", ": Protocol message serialized to a size different from what was originally expected.  Perhaps it was modified by another thread during serialization?", "Cannot get here", "N6google8protobuf8internal27UnknownFieldSetFieldSkipperE", "CHECK failed: (type) != (WireFormatLite::TYPE_ENUM): ", "CHECK failed: (type) != (WireFormatLite::TYPE_MESSAGE): ", "CHECK failed: (type) != (WireFormatLite::TYPE_GROUP): ", "CHECK failed: (type) == (WireFormatLite::TYPE_ENUM): ", "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ", "Don't lookup extension types if they aren't present (1). ", "Don't lookup extension types if they aren't present (2). ", "CHECK failed: iter != extensions_.end(): ", "Index out-of-bounds (field is empty).", "CHECK failed: iter == extensions_.end(): ", "Extension not found.", "Multiple extension registrations for type \"", "\", field number ", "N6google8protobuf8internal15ExtensionFinderE", "N6google8protobuf8internal24GeneratedExtensionFinderE", "N6google8protobuf13RepeatedFieldIiEE", "N6google8protobuf13RepeatedFieldIlEE", "N6google8protobuf13RepeatedFieldIjEE", "N6google8protobuf13RepeatedFieldImEE", "N6google8protobuf13RepeatedFieldIfEE", "N6google8protobuf13RepeatedFieldIdEE", "N6google8protobuf13RepeatedFieldIbEE", "N6google8protobuf16RepeatedPtrFieldINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.", "N6google8protobuf2io20ZeroCopyOutputStreamE", "/build/master_pack-android/opencv/3rdparty/protobuf/src/google/protobuf/stubs/stringprintf.cc", "CHECK failed: (v.size()) <= (kStringPrintfVectorMaxArgs): ", "StringPrintfVector currently only supports up to ", " arguments. ", "Feel free to add support for more if you need it.", "CHECK failed: dest: ", "\\x%02x", "\\%03o", "CHECK failed: i >= 0: ", "FastHexToBuffer() wants non-negative integers, not ", "%.*g", "CHECK failed: value != NULL: ", "NULL output boolean given.", "0123456789abcdef", "CHECK failed: s != NULL: ", "This can't happen; base64 decoder state = ", "Logic problem? szsrc = ", "CHECK failed: result != NULL: ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", "type.googleapis.com/", "type.googleprod.com/", "N3tbb10interface78internal18delegated_functionINS_4flow11interface105graph13spawn_functorEvEE", "N3tbb10empty_taskE", "N3tbb10interface78internal14delegated_taskE", "N3tbb10interface78internal9wait_taskE", "N3tbb8internal13function_taskINS_4flow11interface105graph13spawn_functorEEE", "libtbbmalloc.so", "ALLOCATOR", "scalable_malloc", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "TBB failed to initialize task scheduler TLS\n", "failed to destroy task scheduler TLS: %s", "rml::tbb_factory::make_server failed with status %x, falling back on private rml", "private", "/build/master_pack-android/build/o4a/3rdparty/tbb/tbb-2018_U1/src/tbb/governor.cpp", "!my_scheduler", "task_scheduler_init already initialized", "number_of_threads==automatic || number_of_threads > 0", "number_of_threads for task_scheduler_init must be automatic or positive", "!thread_stack_size", "deferred initialization ignores stack size setting", "task_scheduler_init::terminate without corresponding task_scheduler_init::initialize()", "The number of workers is currently limited to %u. The request for %u workers is ignored. Further requests for more workers will be silently ignored until the limit changes.\n", "Thread stack size has been already set to %u. The request for larger stack (%u) cannot be satisfied.\n", "RML might limit the number of workers to %u while %u is requested.\n", "N3tbb8internal6marketE", "N3tbb8internal7no_copyE", "N3tbb8internal3rml10tbb_clientE", "N3rml6clientE", "N3rml16versioned_objectE", "pthread_join", "pthread_detach", "thread_monitor %s in %s\n", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "pthread_attr_destroy", "N3tbb8internal3rml14private_serverE", "N3tbb8internal3rml10tbb_serverE", "N3rml6serverE", "N3tbb8internal17generic_schedulerE", "N3tbb8internal9schedulerE", "N3rml3jobE", "N3tbb8internal19intrusive_list_nodeE", "N3tbb8internal15scheduler_stateE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb13tbb_exceptionE", "Unidentified exception", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb4taskE", "N3tbb10interface58internal9task_baseE", "N3tbb18captured_exceptionE", "TBB_VERSION", "Tools support", "/build/master_pack-android/build/o4a/3rdparty/tbb/tbb-2018_U1/src/tbb/tbb_main.cpp", "my_param < global_control::parameter_max", "N3tbb8internal27allowed_parallelism_controlE", "N3tbb8internal6paddedINS0_15control_storageELm128EEE", "N3tbb8internal11padded_baseINS0_15control_storageELm128ELm32EEE", "N3tbb8internal15control_storageE", "N3tbb8internal18stack_size_controlE", "Detailed description: %s\n", "TBB Warning: %s\n", "bad allocation in previous or concurrent attempt", "attempted recursive lock on critical section or non-recursive mutex", "User-initiated abort has terminated this operation", "The same task_handle object cannot be executed more than once", "wait() was not called on the structured_task_group", "Step must be positive", "Index out of requested size range", "Index out of allocated segment slots", "Index is not allocated", "Resource deadlock would occur", "Operation not permitted", "Wait on condition variable failed", "Invalid hash load factor", "[backward compatibility] Invalid number of buckets", "swap() is invalid on non-equal allocators", "reservation size exceeds permitted max size", "invalid key", "Illegal tagged_msg cast", "Blocking terminate failed", "TBB: %s\t%s\n", "N3tbb14bad_last_allocE", "N3tbb12missing_waitE", "N3tbb27invalid_multiple_schedulingE", "N3tbb13improper_lockE", "N3tbb10user_abortE", "TBB: VERSION\t\t2018.0\nTBB: INTERFACE VERSION\t10001\nTBB: BUILD_DATE\t\tDec 22 201807:41:39\nTBB: BUILD_PACKAGE\tOpenCV 4.0.1\nTBB: BUILD_HOST \tLinux 4.15.0-42-generic x86_64\nTBB: BUILD_TARGET\tAndroid 1 aarch64\nTBB: BUILD_COMPILER\t/opt/android/android-ndk-r18b/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ (ver 7.0)\nTBB: BUILD_COMMAND\tuse cv::getBuildInformation() for details\nTBB: TBB_USE_DEBUG\t0\nTBB: TBB_USE_ASSERT\t0\n", "/sys/devices/system/cpu/present", "%u-%u", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "__TBB_call_with_my_server_info", "libirml.so.1", "OpenCV version 1.5.3 (build opencv-4.0.1-libjpeg-turbo)", "Bogus message code %d", "Sorry, arithmetic coding is not implemented", "ALIGN_TYPE is wrong, please fix", "MAX_ALLOC_CHUNK is wrong, please fix", "Bogus buffer control mode", "Invalid component ID %d in SOS", "DCT coefficient out of range", "IDCT output block size %d not supported", "Bogus Huffman table definition", "Bogus input colorspace", "Bogus JPEG colorspace", "Bogus marker length", "Wrong JPEG library version: library is %d, caller expects %d", "Sampling factors too large for interleaved scan", "Invalid memory pool code %d", "Unsupported JPEG data precision %d", "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d", "Invalid progressive parameters at scan script entry %d", "Bogus sampling factors", "Invalid scan script at entry %d", "Improper call to JPEG library in state %d", "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u", "Bogus virtual array access", "Buffer passed to JPEG library is too small", "Suspension not allowed here", "CCIR601 sampling not implemented yet", "Too many color components: %d, max %d", "Unsupported color conversion request", "Bogus DAC index %d", "Bogus DAC value 0x%x", "Bogus DHT index %d", "Bogus DQT index %d", "Empty JPEG image (DNL not supported)", "Read from EMS failed", "Write to EMS failed", "Didn't expect more than one scan", "Input file read error", "Output file write error --- out of disk space?", "Fractional sampling not implemented yet", "Huffman code size table overflow", "Missing Huffman code table entry", "Maximum supported image dimension is %u pixels", "Empty input file", "Premature end of input file", "Cannot transcode due to multiple use of quantization table %d", "Scan script does not transmit all data", "Invalid color quantization mode change", "Not implemented yet", "Requested feature was omitted at compile time", "Backing store not supported", "Huffman table 0x%02x was not defined", "JPEG datastream contains no image", "Quantization table 0x%02x was not defined", "Not a JPEG file: starts with 0x%02x 0x%02x", "Insufficient memory (case %d)", "Cannot quantize more than %d color components", "Cannot quantize to fewer than %d colors", "Cannot quantize to more than %d colors", "Invalid JPEG file structure: two SOF markers", "Invalid JPEG file structure: missing SOS marker", "Unsupported JPEG process: SOF type 0x%02x", "Invalid JPEG file structure: two SOI markers", "Invalid JPEG file structure: SOS before SOF", "Failed to create temporary file %s", "Read failed on temporary file", "Seek failed on temporary file", "Write failed on temporary file --- out of disk space?", "Application transferred too few scanlines", "Unsupported marker type 0x%02x", "Virtual array controller messed up", "Image too wide for this implementation", "Read from XMS failed", "Write to XMS failed", "Copyright (C) 1991-2017 The libjpeg-turbo Project and many others", "6b  27-Mar-1998", "Caution: quantization tables are too coarse for baseline JPEG", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "Unknown APP0 marker (not JFIF), length %u", "Unknown APP14 marker (not Adobe), length %u", "Define Arithmetic Table 0x%02x: 0x%02x", "Define Huffman Table 0x%02x", "Define Quantization Table %d  precision %d", "Define Restart Interval %u", "Freed EMS handle %u", "Obtained EMS handle %u", "End Of Image", "        %3d %3d %3d %3d %3d %3d %3d %3d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", "Warning: thumbnail image size does not match data length %u", "JFIF extension marker: type 0x%02x, length %u", "    with %d x %d thumbnail image", "Miscellaneous marker 0x%02x, length %u", "Unexpected marker 0x%02x", "        %4u %4u %4u %4u %4u %4u %4u %4u", "Quantizing to %d = %d*%d*%d colors", "Quantizing to %d colors", "Selected %d colors for quantization", "At marker 0x%02x, recovery action %d", "Smoothing not supported with nonstandard sampling ratios", "Start Of Frame 0x%02x: width=%u, height=%u, components=%d", "    Component %d: %dhx%dv q=%d", "Start of Image", "Start Of Scan: %d components", "    Component %d: dc=%d ac=%d", "  Ss=%d, Se=%d, Ah=%d, Al=%d", "Closed temporary file %s", "Opened temporary file %s", "JFIF extension marker: JPEG-compressed thumbnail image, length %u", "JFIF extension marker: palette thumbnail image, length %u", "JFIF extension marker: RGB thumbnail image, length %u", "Unrecognized component IDs %d %d %d, assuming YCbCr", "Freed XMS handle %u", "Obtained XMS handle %u", "Unknown Adobe color transform code %d", "Inconsistent progression sequence for component %d coefficient %d", "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x", "Corrupt JPEG data: premature end of data segment", "Corrupt JPEG data: bad Huffman code", "Warning: unknown JFIF revision number %d.%02d", "Premature end of JPEG file", "Corrupt JPEG data: found marker 0x%02x instead of RST%d", "Invalid SOS parameters for sequential JPEG", "Application transferred too many scanlines", "Invalid crop request", "Arithmetic table 0x%02x was not defined", "Corrupt JPEG data: bad arithmetic code", "JPEGMEM", "%ld%c", "@&LH", "A'\r:", "QC,A", "TF<)", "VGy#", "KNQ\r", "M0@\n", "a\\\">", "c]$8", "eaFO", "hd=<", "c]^7", "if1R", "kh9F", "gc^A", "okOP", "pm\"U", "ALPH", "RIFF", "WEBP", "VP8X", "VP8 ", "VP8L", "Could not decode alpha data.", "thread initialization failed.", "no memory during frame initialization.", "null VP8Io passed to VP8GetHeaders()", "Truncated header.", "Incorrect keyframe parameters.", "Frame not displayable.", "cannot parse picture header", "Bad code word", "bad partition length", "cannot parse segment header", "cannot parse filter header", "cannot parse partitions", "Not a key frame.", "NULL VP8Io parameter in VP8Decode().", "Premature end-of-partition0 encountered.", "Premature end-of-file encountered.", "Output aborted.", "RIFF", "WEBPVP8X", "WEBPVP8L", "Potential overflow in png_zalloc()", "Application built with libpng-", " but running with ", "Unknown freer parameter in png_data_freer", " +0000", "Ignoring invalid time value", "\nlibpng version 1.6.35 - July 15, 2018\nCopyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson\nCopyright (c) 1996-1997 Andreas Dilger\nCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n", " libpng version 1.6.35 - July 15, 2018\n\n", "unexpected zlib return code", "unexpected end of LZ stream", "missing LZ dictionary", "zlib IO error", "bad parameters to zlib", "damaged LZ stream", "insufficient memory", "unsupported zlib version", "unexpected zlib return", "gamma value out of range", "duplicate", "invalid chromaticities", "internal error checking chromaticities", "invalid end points", "invalid sRGB rendering intent", "inconsistent rendering intents", "duplicate sRGB information ignored", "cHRM chunk does not match sRGB", "exceeds application limits", "length does not match profile", "invalid length", "tag count too large", "invalid rendering intent", "intent outside defined range", "invalid signature", "PCS illuminant is not D50", "RGB color space not permitted on grayscale PNG", "Gray color space not permitted on RGB PNG", "invalid ICC profile color space", "invalid embedded Abstract ICC profile", "unexpected DeviceLink ICC profile class", "unexpected NamedColor ICC profile class", "unrecognized ICC profile class", "unexpected ICC PCS encoding", "ICC profile tag outside profile", "ICC profile tag start not a multiple of 4", "internal error handling cHRM coefficients", "internal error handling cHRM->XYZ", "Image width is zero in IHDR", "Invalid image width in IHDR", "Image width exceeds user limit in IHDR", "Image height is zero in IHDR", "Invalid image height in IHDR", "Image height exceeds user limit in IHDR", "Invalid bit depth in IHDR", "Invalid color type in IHDR", "Invalid color type/bit depth combination in IHDR", "Unknown interlace method in IHDR", "Unknown compression method in IHDR", "MNG features are not allowed in a PNG datastream", "Unknown filter method in IHDR", "Invalid filter method in IHDR", "Invalid IHDR data", "ASCII conversion buffer too small", "fixed point overflow ignored", "gamma table being rebuilt", "gamma value does not match sRGB", "gamma value does not match libpng estimate", "inconsistent chromaticities", "profile '", "known incorrect sRGB profile", "out-of-date sRGB profile with no signature", "Not recognizing known sRGB profile that has been edited", "bad long0123456789ABCDEF", "fixed point overflow in ", "Libpng jmp_buf still allocated", "Application jmp_buf size changed", "libpng error: %s", "libpng warning: %s", "0123456789ABCDEF", "internal error: array alloc", "internal error: array realloc", "Out of memory", "Out of Memory", "Missing PLTE before IDAT", "png_read_update_info/png_start_read_image: duplicate call", "png_start_read_image/png_read_update_info: duplicate call", "Invalid attempt to read row data", "bad adaptive filter value", "sequential row overflow", "internal sequential row size calculation error", "Interlace handling should be turned on when using png_read_image", "Read palette index exceeding num_palette", "..Too many IDATs found", "Image is too high to process with png_read_png()", "png_image_begin_read_from_stdio: invalid argument", "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_file: invalid argument", "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_memory: invalid argument", "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION", "png_image_finish_read[color-map]: no color-map", "png_image_finish_read: image too large", "png_image_finish_read: invalid argument", "png_image_finish_read: row_stride too large", "png_image_finish_read: damaged PNG_IMAGE_VERSION", "png_image_read: out of memory", "png_image_read: opaque pointer not NULL", "read beyond end of data", "invalid memory read", "background color must be supplied to remove alpha/transparency", "gray[8] color-map: too few entries", "gray[16] color-map: too few entries", "gray+alpha color-map: too few entries", "gray-alpha color-map: too few entries", "ga-alpha color-map: too few entries", "rgb[ga] color-map: too few entries", "rgb[gray] color-map: too few entries", "rgb+alpha color-map: too few entries", "rgb-alpha color-map: too few entries", "rgb color-map: too few entries", "palette color-map: too few entries", "invalid PNG color type", "bad data option (internal error)", "color map overflow (BAD internal error)", "bad processing option (internal error)", "bad background index (internal error)", "color-map index out of range", "bad encoding (internal error)", "unexpected encoding (internal error)", "bad color-map processing (internal error)", "unknown interlace type", "png_read_image: unsupported transformation", "png_image_read: alpha channel lost", "unexpected alpha swap transformation", "png_read_image: invalid transformations", "lost rgb to gray", "unexpected compose", "lost/gained channels", "unexpected 8-bit transformation", "unexpected bit depth", "bKGD", "cHRM", "gAMA", "iCCP", "sBIT", "sRGB", "Call to NULL read function", "Read Error", "Can't set both read_data_fn and write_data_fn in the same structure", "Application must supply a known background gamma", "png_set_background", "output gamma out of expected range", "invalid alpha mode", "conflicting calls to set alpha mode and background", "invalid file gamma in png_set_gamma", "invalid screen gamma in png_set_gamma", "invalid error action to rgb_to_gray", "ignoring out of range rgb_to_gray coefficients", "rgb to gray red coefficient", "rgb to gray green coefficient", "libpng does not support gamma+background+rgb_to_gray", "invalid background gamma type", "Palette is NULL in indexed image", "NULL row buffer", "Uninitialized row", "png_do_rgb_to_gray found nongray pixel", "png_do_quantize returned rowbytes=0", "invalid after png_start_read_image or png_read_update_info", "invalid before the PNG header has been read", "gamma value", "png_do_encode_alpha: unexpected call", "PNG unsigned integer out of range", "Not a PNG file", "PNG file corrupted by ASCII conversion", "invalid window size (libpng)", "out of place", "missing IHDR", "ignored in grayscale PNG", "tRNS must be after", "hIST must be after", "bKGD must be after", "invalid values", "too many profiles", "extra compressed data", "bad compression method", "bad keyword", "No space in chunk cache for sPLT", "malformed sPLT chunk", "sPLT chunk has bad length", "sPLT chunk requires too much memory", "invalid with alpha channel", "invalid index", "invalid gray level", "invalid color", "incorrect byte-order specifier", "invalid parameter count", "unrecognized equation type", "invalid data", "invalid unit", "bad width format", "non-positive width", "bad height format", "non-positive height", "no space in chunk cache", "Insufficient memory to process text chunk", "unknown compression type", "Read failure in png_handle_zTXt", "bad compression info", "error in user chunk", "Saving unknown chunk:", "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks", "unhandled critical chunk", "invalid chunk type", "chunk data is too large", "internal row logic error", "internal row size calculation error", "internal row width error", "invalid user transform pixel depth", "Not enough image data", "Extra compressed data", "Too much image data", "Row has too many bytes to allocate in memory", " using zstream", "1.2.7", "zstream unclaimed", "insufficient memory to read chunk", "unknown chunk exceeds memory limits", "cHRM White Y", "cHRM Red X", "cHRM Red Y", "cHRM Green X", "cHRM Green Y", "cHRM Blue X", "cHRM Blue Y", "cHRM Red Z", "cHRM Green Z", "cHRM Blue Z", "png_set_eXIf does not work; use png_set_eXIf_1", "Insufficient memory for eXIf chunk data", "png_set_gAMA", "Invalid palette size, hIST allocation skipped", "Insufficient memory for hIST chunk data", "Invalid pCAL equation type", "Invalid pCAL parameter count", "Invalid format for pCAL parameter", "Insufficient memory for pCAL purpose", "Insufficient memory for pCAL units", "Insufficient memory for pCAL params", "Insufficient memory for pCAL parameter", "Invalid sCAL unit", "Invalid sCAL width", "Invalid sCAL height", "Memory allocation failed while processing sCAL", "Invalid sCAL width ignored", "Invalid sCAL height ignored", "Invalid palette length", "Invalid palette", "Invalid iCCP compression method", "Insufficient memory to process iCCP chunk", "Insufficient memory to process iCCP profile", "Insufficient memory to store text", "too many text chunks", "text compression mode is out of range", "text chunk: out of memory", "tRNS chunk has out-of-range samples for bit_depth", "too many sPLT chunks", "png_set_sPLT: invalid sPLT", "sPLT out of memory", "too many unknown chunks", "unknown chunk: out of memory", "invalid unknown chunk location", "png_set_keep_unknown_chunks: invalid keep", "png_set_keep_unknown_chunks: no chunk list", "png_set_keep_unknown_chunks: too many chunks", "invalid compression buffer size", "Compression buffer size cannot be changed because it is in use", "Compression buffer size cannot be reduced below 6", "keyword truncated", "keyword \"@1\": bad character '0x@2'", "png_set_unknown_chunks now expects a valid location", "invalid location in png_set_unknown_chunks", "bKGD", "cHRM", "eXIf", "gAMA", "hIST", "iCCP", "iTXt", "oFFs", "pCAL", "pHYs", "sBIT", "sCAL", "sPLT", "sTER", "sRGB", "tEXt", "tIME", "zTXt", "png_set_filler: inappropriate color type", "info change after png_start_read_image or png_read_update_info", "Write Error", "Valid palette required for paletted images", "No IDATs written into file", "Wrote palette index exceeding num_palette", "png_write_info was never called before png_write_row", "internal write transform logic error", "Unknown row filter for method 0", "png_set_filter: UP/AVG/PAETH cannot be added after start", "Unknown custom filter method", "Only compression windows <= 32k supported by PNG", "Only compression windows >= 256 supported by PNG", "Only compression method 8 is supported by PNG", "no rows for png_write_image to write", "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported", "png_image_write_to_memory: invalid argument", "png_image_write_to_memory: incorrect PNG_IMAGE_VERSION", "png_image_write_to_stdio: invalid argument", "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION", "png_image_write_to_file: invalid argument", "png_image_write_to_file: incorrect PNG_IMAGE_VERSION", "Writing zero-length unknown chunk", "png_image_write_: out of memory", "png_image_write_to_memory: PNG too big", "memory image too large", "supplied row stride too small", "image row stride too large", "no color-map for color-mapped image", "png_write_image: unsupported transformation", "png_write_image: internal call error", "\rIHDR", " cHRM", "\toFFs", "\tpHYs", "Invalid bit depth for RGB image", "Invalid bit depth for paletted image", "Invalid bit depth for grayscale+alpha image", "Invalid bit depth for RGBA image", "Invalid image color type specified", "Invalid compression type specified", "Invalid filter type specified", "Invalid interlace type specified", "Invalid number of colors in palette", "Ignoring request to write a PLTE chunk in grayscale PNG", "Z_OK on Z_FINISH with output space", "Invalid sRGB rendering intent specified", "No profile for iCCP chunk", "ICC profile too short", "ICC profile length invalid (not a multiple of 4)", "iCCP: invalid keyword", "sPLT: invalid keyword", "Invalid sBIT depth specified", "Invalid number of transparent colors specified", "Ignoring attempt to write tRNS chunk out-of-range for bit_depth", "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8", "Can't write tRNS with an alpha channel", "Invalid background palette index", "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8", "Ignoring attempt to write bKGD chunk out-of-range for bit_depth", "Invalid number of histogram entries specified", "tEXt: invalid keyword", "tEXt: text too long", "zTXt: invalid compression type", "zTXt: invalid keyword", "iTXt: invalid keyword", "iTXt: invalid compression", "iTXt: uncompressed text too long", "Unrecognized unit type for oFFs chunk", "Unrecognized equation type for pCAL chunk", "pCAL: invalid keyword", "Can't write sCAL (buffer too small)", "Unrecognized unit type for pHYs chunk", "Invalid time specified for tIME chunk", "length exceeds PNG maximum", "deflateEnd failed (ignored)", "compressed data too long", "error writing ancillary chunked compressed data", "TIFFUnlinkDirectory", "_TIFFVSetField", "TIFFAdvanceDirectory", "Directory count exceeded 65535 limit, giving up on counting.", "Can not unlink directory in read-only file", "Directory %d does not exist", "Error writing directory link", "TIFFSetField", "%s: Unknown %stag %u", "pseudo-", "%s: Cannot modify tag \"%s\" while writing", "SamplesPerPixel tag value is changing, but SMinSampleValue tag was read with a different value. Cancelling it", "SamplesPerPixel tag value is changing, but SMaxSampleValue tag was read with a different value. Cancelling it", "Nonstandard tile width %d, convert file", "Nonstandard tile length %d, convert file", "%s: Sorry, cannot nest SubIFDs", "%s: Invalid %stag \"%s\" (not supported by codec)", "%s: Failed to allocate space for list of custom values", "%s: Bad field type %d for \"%s\"", "%s: Null count for \"%s\" (type %d, writecount %d, passcount %d)", "custom tag binary object", "DotRange", "%s: Bad value %u for \"%s\" tag", "%s: Bad value %f for \"%s\" tag", "%s: Invalid InkNames value; expecting %d names, found %d", "_TIFFVGetField", "Truncating NumberOfInks from %u to %u", "Sanity check on directory count failed", "%s: Error fetching directory count", "%s: Error fetching directory link", "Setting up field info failed", "Failed to allocate fields array", "%s: \n", "field[%2d] %5lu, %2d, %2d, %d, %2d, %5s, %5s, %s\n", "TIFFFieldWithTag", "Internal error, unknown tag 0x%x", "TIFFFieldWithName", "Internal error, unknown tag %s", "Tag %d", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "StripOffsets", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "CFARepeatPatternDim", "CFAPattern", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "ICC Profile", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "Indexed", "GlobalParametersIFD", "ProfileType", "FaxProfile", "CodingMethods", "VersionYear", "ModeNumber", "ImageBaseColor", "T82Options", "StripRowCounts", "ImageLayer", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "_TIFFMergeFields", "for fields array", "TIFFMergeFieldInfo", "for fields array", "TIFFReadCustomDirectory", "TIFFReadDirectoryCheckOrder", "EstimateStripByteCounts", "MissingRequired", "TIFFFetchDirectory", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFFetchSubjectDistance", "Failed to read directory at offset %lu", "Unknown field with tag %d (0x%x) encountered", "Registering anonymous field with tag %d (0x%x) failed", "Planarconfig tag value assumed incorrect, assuming data is contig instead of chunky", "Cannot handle zero number of %s", "strips", "unknown tagname", "tif->tif_dir.td_stripoffset is already allocated. Likely duplicated StripOffsets/TileOffsets tag", "tif->tif_dir.td_stripbytecount is already allocated. Likely duplicated StripByteCounts/TileByteCounts tag", "Ignoring %s since BitsPerSample tag not found", "Ignoring %s because BitsPerSample=%d>24", "Photometric tag is missing, assuming data is YCbCr", "Photometric tag value assumed incorrect, assuming data is YCbCr instead of RGB", "BitsPerSample tag is missing, assuming 8 bits per sample", "SamplesPerPixel tag is missing, assuming correct SamplesPerPixel value is 3", "SamplesPerPixel tag is missing, applying correct SamplesPerPixel value of 3", "Colormap", "TIFF directory is missing required \"StripByteCounts\" field, calculating from imagelength", "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength", "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength", "Cannot handle zero scanline size", "Cannot handle zero tile size", "Cannot handle zero strip size", "Failed to read custom directory at offset %lu", "Wrong data type %d for \"%s\"; tag ignored", "Incorrect count for \"%s\"", "Incompatible type for \"%s\"", "IO error during reading of \"%s\"", "Incorrect value for \"%s\"", "Cannot handle different values per sample for \"%s\"", "Sanity check on size of \"%s\" value failed", "Out of memory reading of \"%s\"", "Incorrect count for \"%s\"; tag ignored", "Incompatible type for \"%s\"; tag ignored", "IO error during reading of \"%s\"; tag ignored", "Incorrect value for \"%s\"; tag ignored", "Cannot handle different values per sample for \"%s\"; tag ignored", "Sanity check on size of \"%s\" value failed; tag ignored", "Out of memory reading of \"%s\"; tag ignored", "Failed to allocate memory for %s (%ld elements of %ld bytes each)", "TIFFReadDirEntryArray", "Invalid TIFF directory; tags are not sorted in ascending order", "for \"StripByteCounts\" array", "Cannot determine size of unknown tag type %d", "TIFF directory is missing required \"%s\" field", "TIFFCheckDirOffset", "Cannot handle more than 65535 TIFF directories", "for IFD list", "incorrect count for field \"%s\" (%lu, expecting %u); tag ignored", "incorrect count for field \"%s\" (%lu, expecting %u); tag trimmed", "%s: Seek error accessing TIFF directory", "%s: Can not read TIFF directory count", "Sanity check on directory count failed, this is probably not a valid IFD offset", "to read TIFF directory", "%.100s: Can not read TIFF directory", "Sanity check on directory count failed, zero tag directories not supported", "No definition found for tag %d", "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations", "ASCII value for tag \"%s\" does not end in null byte", "incorrect count for field \"%s\", expected 2, got %d", "incorrect count for field \"%s\", expected %d, got %d", "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null", "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT", "for strip array", "for chopped \"StripByteCounts\" array", "for chopped \"StripOffsets\" array", "TIFFResetField", "TIFFWriteDirectorySec", "TIFFWriteDirectoryTagData", "TIFFWriteDirectoryTagCheckedRational", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFLinkDirectory", "Error updating TIFF header", "Sanity check on tag count failed, likely corrupt TIFF", "Memory mapped files not currently supported for this operation.", "Attempt to reset field on directory not already on disk.", "%s: Can not read TIFF directory entry.", "%s: Could not find tag %d.", "for field buffer.", "Value exceeds 32bit range of output type.", "%s: Can not write TIFF directory entry.", "Error post-encoding before directory write", "Error flushing data before directory write", "Maximum TIFF file size exceeded", "Cannot find SubIFD tag", "IO error writing directory", "IO error writing tag data", "Negative value is illegal", "Not-a-number value is illegal", "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file.", "TIFFWriteDirectoryTagCheckedLong8Array", "Illegal value for SubIFD tag", "TIFFWriteDirectoryTagCheckedSlong8Array", "SLONG8 not allowed for ClassicTIFF", "Error writing SubIFD directory link", "Error writing TIFF header", "Sorry, can not handle images with %d-bit samples", "Sorry, can not handle images with IEEE floating-point samples", "Missing needed %s tag", "Sorry, can not handle contiguous data with %s=%d, and %s=%d and Bits/Sample=%d", "Samples/pixel", "Sorry, can not handle RGB image with %s=%d", "Color channels", "Sorry, can not handle separated image with %s=%d", "Sorry, LogL data must have %s=%d", "Sorry, LogLuv data must have %s=%d or %d", "Sorry, can not handle LogLuv images with %s=%d", "Planarconfiguration", "Sorry, can not handle image with %s=%d, %s=%d", "colorchannels", "Sorry, can not handle image with %s=%d, %s=%d and %s=%d", "Bits/sample", "Sorry, can not handle image with %s=%d", "Missing required \"Colormap\" tag", "Out of memory for colormap copy", "Sorry, can not handle image", "No \"get\" routine setup", "No \"put\" routine setupl; probably can not handle image format", "Can't use TIFFReadRGBAStrip() with tiled file.", "Row passed to TIFFReadRGBAStrip() must be first in a strip.", "Can't use TIFFReadRGBATile() with stripped file.", "Row/col passed to TIFFReadRGBATile() must be topleft corner of a tile.", "No space for tile buffer", "Invalid vertical YCbCr subsampling", "Assuming 8-bit colormap", "No space for photometric conversion table", "No space for B&W mapping table", "No space for Palette mapping table", "No space for YCbCr->RGB conversion state", "Invalid values for YCbCrCoefficients tag", "Invalid values for ReferenceBlackWhite tag", "Invalid value for WhitePoint tag.", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "Integer overflow in %s", "gtTileSeparate", "gtStripSeparate", "PhotometricInterpretation", "BuildMapUaToAa", "BuildMapBitdepth16To8", "initYCbCrConversion", "initCIELabConversion", "%s: Out of memory (TIFF structure)", "One of the client procedures is NULL pointer.", "Cannot read TIFF header", "Not a TIFF or MDI file, bad magic number %d (0x%x)", "Not a TIFF file, bad version number %d (0x%x)", "Not a TIFF file, bad BigTIFF offsetsize %d (0x%x)", "Not a TIFF file, bad BigTIFF unused %d (0x%x)", "TIFFClientOpen", "TIFFReadEncodedStrip", "TIFFReadRawStrip", "TIFFFillStrip", "TIFFReadEncodedTile", "_TIFFReadEncodedTileAndAllocBuffer", "TIFFReadRawTile", "TIFFFillTile", "TIFFReadBufferSetup", "TIFFFillStripPartial", "TIFFReadEncodedStrip", "TIFFStartTile", "No space for strip buffer", "%lu: Strip out of range, max %lu", "Compression scheme does not support access to raw uncompressed data", "%llu: Invalid strip byte count, strip %lu", "Invalid strip byte count %llu, strip %lu", "Too large strip byte count %llu, strip %lu. Limiting to %llu", "Read error on strip %lu; got %llu bytes, expected %llu", "Data buffer too small to hold strip %lu", "%lu: Tile out of range, max %lu", "%llu: Invalid tile byte count, tile %lu", "Too large tile byte count %llu, tile %lu. Limiting to %llu", "Data buffer too small to hold tile %lu", "Invalid buffer size", "No space for data buffer at scanline %lu", "%lu: Row out of range, max %lu", "%lu: Sample out of range, max %lu", "Data buffer too small to hold part of strip %lu", "Seek error at scanline %lu, strip %lu", "Read error at scanline %lu; got %llu bytes, expected %llu", "Read error at row %lu, col %lu, tile %lu; got %llu bytes, expected %llu", "Read error at scanline %lu, strip %lu; got %llu bytes, expected %llu", "Seek error at row %lu, col %lu, tile %lu", "Read error at row %lu, col %lu; got %llu bytes, expected %llu", "Zero tiles", "File not open for reading", "Can not read tiles from a stripped image", "Can not read scanlines from a tiled image", "TIFFComputeStrip", "TIFFVStripSize64", "TIFFRawStripSize64", "TIFFScanlineSize64", "TIFFRasterScanlineSize64", "TIFFNumberOfStrips", "Invalid td_samplesperpixel value", "Invalid YCbCr subsampling (%dx%d)", "Invalid YCbCr subsampling", "Computed scanline size is zero", "%lu: Depth out of range, max %lu", "TIFFNumberOfTiles", "Tile length is zero", "Tile width is zero", "TIFFTileRowSize", "Samples per pixel is zero", "Computed tile row size is zero", "TIFFTileRowSize64", "TIFFVTileSize64", "TIFFWriteScanline", "TIFFWriteEncodedStrip", "TIFFWriteRawStrip", "TIFFWriteEncodedTile", "TIFFWriteRawTile", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "Can not change \"ImageLength\" when using separate planes", "Zero strips per image", "Can not grow image by strips when using separate planes", "Tile %lu out of range, max %lu", "File not open for writing", "Can not write tiles to a stripped image", "Can not write scanlines to a tiled image", "Must set \"ImageWidth\" before writing data", "Must set \"PlanarConfiguration\" before writing data", "No space for %s arrays", "strip", "No space for output buffer", "No space to expand strip arrays", "Seek error at scanline %lu", "Write error at scanline %lu", "TIFFOpen", "%s: Cannot open", "%s: ", "Warning, ", "?@Cannot get \"Predictor\" tag as plugin is not configured", "No space for \"TransferFunction\" tag", "Compression algorithm does not support random access", "TIFFRegisterCODEC", "No space to register compression scheme %s", "TIFFUnRegisterCODEC", "Cannot remove compression scheme %s; not registered", "%s %s encoding is not implemented", "Compression scheme %u %s encoding is not implemented", "%s %s decoding is not implemented", "Compression scheme %u %s decoding is not implemented", "TIFFInitJPEG", "Merging JPEG codec-specific tags failed", "No space for JPEG state block", "Failed to allocate memory for JPEG tables", "JPEGLib", "  JPEG Tables: (%lu bytes)\n", "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped", "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped", "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed", "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]", "JPEGSetupDecode", "Bogus JPEGTables field", "Improper JPEG strip/tile size, expected %dx%d, got %dx%d", "JPEG strip size exceeds expected dimensions, expected %dx%d, got %dx%d", "JPEG strip/tile size exceeds expected dimensions, expected %dx%d, got %dx%d", "Improper JPEG component count", "Improper JPEG data precision", "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC", "Reading this strip would require libjpeg to allocate at least %u bytes. This is disabled since above the %u threshold. You may override this restriction by defining the LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC environment variable, or recompile libtiff by defining the TIFF_LIBJPEG_LARGEST_MEM_ALLOC macro to a value greater than %u", "Improper JPEG sampling factors %d,%d\nApparently should be %d,%d.", "Improper JPEG sampling factors", "TIFFReadScanline", "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB.", "JPEGDecodeRaw", "application buffer not large enough for all data.", "application buffer not large enough for all data, possible subsampling issue", "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER", "TIFFjpeg_progress_monitor", "Scan number %d exceeds maximum scans (%d). This limit can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER environment variable.", "fractional scanline not read", "Invalig horizontal/vertical sampling value", "BitsPerSample %d not allowed for JPEG", "PhotometricInterpretation %d not allowed for JPEG", "JPEG tile height must be multiple of %d", "JPEG tile width must be multiple of %d", "RowsPerStrip must be multiple of %d for JPEG", "TIFFjpeg_tables_dest", "No space for JPEGTables", "Strip/tile too large for JPEG", "fractional scanline discarded", "JPEGEncode", "Failed to allocate memory", "JPEGFixupTagsSubsamplingSec", "JPEGPreDecode", "JPEGSetupEncode", "JPEGPreEncode", "None", "PackBits", "ThunderScan", "NeXT", "Old-style JPEG", "CCITT RLE", "CCITT RLE/W", "CCITT Group 3", "CCITT Group 4", "ISO JBIG", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "%s compression support is not configured", "DumpModeDecode", "Not enough data for scanline %lu, expected a request for at most %lld bytes, got a request for %lld bytes", "Fax3SetupState", "Fax3Decode2D", "Fax3Decode1D", "Fax3Encode", "Fax4Decode", "Fax4Encode", "Fax3DecodeRLE", "TIFFInitCCITTFax3", "Merging CCITT Fax 3 codec-specific tags failed", "TIFFInitCCITTFax4", "Merging CCITT Fax 4 codec-specific tags failed", "Merging common CCITT Fax codec-specific tags failed", "No space for state block", "FaxMode", "FaxFillFunc", "CleanFaxData", "ConsecutiveBadFaxLines", "  Group 4 Options:", "%suncompressed data", "  Group 3 Options:", "%s2-d encoding", "%sEOL padding", " (%lu = 0x%lx)\n", "  Fax Data:", " clean", " receiver regenerated", " uncorrected errors", " (%u = 0x%x)\n", "  Bad Fax Lines: %lu\n", "  Consecutive Bad Fax Lines: %lu\n", "Bits/sample must be 1 for Group 3/4 encoding/decoding", "Row pixels integer overflow (rowpixels %u)", "for Group 3/4 run arrays", "No space for Group 3/4 reference line", "Fractional scanlines cannot be read", "Bad code word at line %u of %s %u (x %u)", "Premature EOF at line %u of %s %u (x %u)", "%s at line %u of %s %u (got %u, expected %u)", "Premature EOL", "Line length mismatch", "Uncompressed data (not supported) at line %u of %s %u (x %u)", "Fractional scanlines cannot be written", "Group3Options", "Group4Options", "LogLuvSetupDecode", "LogLuvInitState", "LogLuvDecode24", "LogLuvDecode32", "LogL16InitState", "LogL16Decode", "LogLuvSetupEncode", "LogLuvEncode24", "LogLuvEncode32", "LogL16Encode", "LogLuvVSetField", "Merging SGILog codec-specific tags failed", "%s: No space for LogLuv state block", "SGILogDataFmt", "SGILogEncode", "Inappropriate photometric interpretation %d for SGILog compression; %s", "must be either LogLUV or LogL", "SGILog compression cannot handle non-contiguous data", "No support for converting user data format to LogLuv", "No space for SGILog translation buffer", "Translation buffer too short", "Not enough data at row %lu (short %llu pixels)", "Sorry, can not handle LogL image with %s=%d", "No support for converting user data format to LogL", "SGILog compression supported only for %s, or raw data", "Y, L", "XYZ, Luv", "Unknown data format %d for LogLuv compression", "Unknown encoding %d for LogLuv compression", "TIFFInitLZW", "LZWSetupDecode", "LZWPreDecode", "LZWDecodeCompat", "LZWDecode", "LZWSetupEncode", "No space for LZW state block", "No space for LZW code table", "Old-style LZW codes, convert file", "LZWDecode: Strip %d not terminated with EOI code", "LZWDecode: Corrupted LZW table at scanline %d", "Wrong length of decoded string: data probably corrupted at scanline %d", "Not enough data at scanline %d (short %llu bytes)", "Bogus encoding, loop in the code table; scanline %d", "No space for LZW hash table", "NeXTPreDecode", "NeXTDecode", "Unsupported BitsPerSample = %d", "Invalid data for scanline %ld", "Not enough data for scanline %ld", "PackBitsDecode", "Discarding %lu bytes to avoid buffer overrun", "Terminating PackBitsDecode due to lack of data.", "Not enough data for scanline %lu", "Merging Predictor codec-specific tags failed", "Predictor", "  Predictor: ", "none ", "horizontal differencing ", "floating point predictor ", "%d (0x%x)\n", "Horizontal differencing \"Predictor\" not supported with %d-bit samples", "Floating point \"Predictor\" not supported with %d data format", "Floating point \"Predictor\" not supported with %d-bit samples", "\"Predictor\" value %d not supported", "horAcc8", "(cc%stride)!=0", "horAcc16", "horAcc32", "PredictorDecodeTile", "occ0%rowsize != 0", "fpAcc", "horDiff8", "(cc%(2*stride))!=0", "horDiff32", "(cc%(4*stride))!=0", "Out of memory allocating %ld byte temp buffer.", "(cc0%rowsize)!=0", "fpDiff", "(cc%(bps*stride))!=0", "PredictorSetup", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecodeRow", "ThunderDecode", "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample.", "%s data at scanline %lu (%llu != %llu)", "Not enough", "Too much", "ZIPVSetField", "ZIPSetupDecode", "ZIPPreDecode", "ZIPDecode", "ZIPSetupEncode", "ZIPPreEncode", "ZIPPostEncode", "ZIPEncode", "Merging Deflate codec-specific tags failed", "No space for ZIP state block", "ZLib error: %s", "ZLib cannot deal with buffers this size", "Decoding error at scanline %lu, %s", "Not enough data at scanline %lu (short %lu bytes)", "Encoder error: %s", "cannot get header\n", "cannot get tab table\n", "numattrs=%d\n", "attrno=%d; attrname=\"%s\"(0x%08x); attrtype=\"%s\"(0x%08x)\n", "refcnt = %d; type = 0x%08x %s\n", "(%f, %f, %f)\n", "number of entires = %d\n", "gamma = %f\n", "entry[%d] = %f\n", "ascii = \"%s\"\n", "uclangcode = %d; uclen = %d\n", "sccode = %d\n", "maclen = %d\n", "string = \"%s\"\n", "numinchans=%d, numoutchans=%d, clutlen=%d\n", "e[%d][%d]=%f ", "numintabents=%d, numouttabents=%d\n", "prec=%d, sgnd=%d, cmpttype=%d\n", " f(%d,%d)=%ld", "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", "%d %d", "%s%4ld", "/tmp/", "%08x:", " %02x", "error: cannot get box\n", "error: expecting signature box\n", "incorrect magic number\n", "expecting file type box\n", "box type %s\n", "error: no code stream found\n", "error: cannot decode code stream\n", "error: missing IHDR box\n", "warning: number of components mismatch\n", "error: no components\n", "warning: component data type mismatch\n", "error: unsupported compression type\n", "warning: superfluous BPCC box\n", "error: no COLR box\n", "ICC Profile CS %08x\n", "warning: missing PCLR box or superfluous CMAP box\n", "warning: missing CMAP box or superfluous PCLR box\n", "error: invalid component number in CMAP box\n", "error: invalid CMAP LUT index\n", "error: no memory\n", " 2pj", " 2pj", "%s\n_jp2overhead=%lu\n", "warning: trailing garbage in marker segment (%ld bytes)\n", "type = 0x%04x (%s);", " len = %d;", "tileno = %d; len = %d; partno = %d; numparts = %d\n", "caps = 0x%02x;\n", "width = %d; height = %d; xoff = %d; yoff = %d;\n", "tilewidth = %d; tileheight = %d; tilexoff = %d; tileyoff = %d;\n", "prec[%d] = %d; sgnd[%d] = %d; hsamp[%d] = %d; vsamp[%d] = %d\n", "csty = 0x%02x;\n", "numdlvls = %d; qmfbid = %d; mctrans = %d\n", "prg = %d; numlyrs = %d;\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x;\n", "prcwidth[%d] = %d, prcheight[%d] = %d\n", "compno = %d; csty = 0x%02x; numdlvls = %d;\n", "cblkwidthval = %d; cblkheightval = %d; cblksty = 0x%02x; qmfbid = %d;\n", "compno = %d; roisty = %d; roishift = %d\n", "expn[%d] = 0x%04x; mant[%d] = 0x%04x;\n", "compno = %d; qntsty = %d; numguard = %d; numstepsizes = %d\n", "po[%d] = %d; ", "cs[%d] = %d; ce[%d] = %d; ", "rs[%d] = %d; re[%d] = %d; ", "le[%d] = %d\n", "ind=%d; len = %d;\n", "data =\n", "seqno = %d;\n", "hoff[%d] = %d; voff[%d] = %d\n", "regid = %d;\n", "data = ", "%02x ", "maxlyrs", "maxpkts", "warning: ignoring invalid option %s\n", "cannot get marker segment\n", "unexpected marker segment type\n", "invalid tile number in SOT marker segment\n", "jpc_dec_decodepkts failed\n", "warning: ignoring trailing garbage (%lu bytes)\n", "read error\n", "warning: not enough tile data (%lu bytes)\n", "RESOLUTION LEVEL %d\n", "xs =%d, ys = %d, xe = %d, ye = %d, w = %d, h = %d\n", "BAND %d\n", "CODE BLOCK GROUP %d\n", "CODE BLOCK %d\n", "jpc_dec_decodecblks failed\n", "write component failed\n", "warning: possibly corrupt code stream\n", "invalid component number in COC marker segment\n", "invalid component number in RGN marker segment\n", "invalid component number in QCC marker segment\n", "warning: ignoring unknown marker segment\n", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "ilyrrates", "_jp2overhead", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "real", "invalid JP encoder options\n", "cannot write EOI marker\n", "start=%d end=%d type=%d term=%d lyrno=%d firstchar=%02x size=%ld pos=%ld\n", "lyrno = %02d\n", "lyrno=%02d cmptno=%02d rlvlno=%02d bandno=%02d prcno=%02d cblkno=%03d passno=%03d\n", "min rdslope = %f max rdslope = %f\n", "maxlen=%08ld actuallen=%08ld thresh=%f\n", "warning: empty layer generated\n", "success %d goodthresh %f\n", "  tcmpt %5d %5d %5d %5d\n", "    rlvl %5d %5d %5d %5d\n", "      band %5d %5d %5d %5d\n", "        prc %5d %5d %5d %5d (%5d %5d)\n", "         cblk %5d %5d %5d %5d\n", "unsupported image type\n", "ignoring invalid mode %s\n", "ignoring invalid progression order %s\n", "warning: invalid intermediate layer rates specifier ignored (%s)\n", "warning: overriding imgareatlx value\n", "warning: overriding imgareatly value\n", "warning: color space apparently not RGB\n", "invalid tile width %lu\n", "invalid tile height %lu\n", "invalid tile grid offset (%lu, %lu)\n", "cannot use real mode for lossless coding\n", "invalid precinct width\n", "invalid precinct height\n", "invalid code block width %d\n", "invalid code block height %d\n", "code block size too large\n", "too many layers\n", "must be at least one resolution level\n", "invalid number of guard bits\n", "warning: specified rate is unreasonably large (%lu > %lu)\n", "intermediate layer rates must increase monotonically\n", "warning: intermediate layer rates must be less than overall rate\n", "cannot write SOC marker\n", "cannot write SIZ marker\n", "Creator: JasPer Version %s", "cannot write COM marker\n", "cannot write COD marker\n", "error: too few guard bits (need at least %d)\n", "cannot open tmp file\n", "cannot write SOT marker\n", "cannot write SOD marker\n", "dotile failed\n", "MQDEC A = %08lx, C = %08lx, CT=%08lx, ", "CTX = %d, ", "IND %d, MPS %d, QEVAL %x\n", "AREG = %08x, CREG = %08x, CTREG = %d\n", "IND = %02d, MPS = %d, QEVAL = %04x\n", "coding pass failed passtype=%d segtype=%d\n", "warning: bad termination pattern detected\n", "warning: bad segmentation symbol\n", "packet offset=%08ld prg=%d cmptno=%02d rlvlno=%02d prcno=%03d lyrno=%02d\n", "missing SOP marker segment\n", "alignment failed\n", "hdrlen=%lu bodylen=%lu \n", "cannot get (EPH) marker segment\n", "missing EPH marker segment\n", "packet body offset=%06ld\n", "node %p, parent %p, value %d, lower %d, known %d\n", "%04x:", "1.900.1", "FTYP", "JP2H", "BPCC", "COLR", "PCLR", "CMAP", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "warning: cannot handle large 64-bit box length\n", "cannot copy box data\n", "cannot parse box data\n", "JP2 box: ", "type=%c%s%c (0x%08x); length=%d\n", "method=%d; pri=%d; approx=%d\n", "csid=%d\n", "channo=%d; type=%d; assoc=%d\n", "numchans = %d\n", "cmptno=%d; map=%d; pcol=%d\n", "numents=%d; numchans=%d\n", "LUT[%d][%d]=%d\n", "Image channel name cannot be an empty string.", "Cannot find image channel \"", "N3Iex6ArgExcE", "Cannot invert singular matrix.", "N5Imath13SingMatrixExcE", "Frame buffer slice name cannot be an empty string.", "Cannot find frame buffer slice \"", "Cannot assign a value of type \"", "\" to image attribute \"", "Cannot find image attribute \"", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "lineOrder", "preview", "Invalid display window in image header.", "Invalid data window in image header.", "The width of the data window exceeds the maximum width of ", "pixels.", "Invalid pixel aspect ratio in image header.", "Invalid screen window width in image header.", "Tiled image has no tile description attribute.", "Invalid tile size in image header.", "The width of the tiles exceeds the maximum width of ", "Invalid level mode in image header.", "Invalid level rounding mode in image header.", "Invalid line order in image header.", "Unknown compression type in image header.", "Pixel type of \"", "\" image channel is invalid.", "The x subsampling factor for the \"", "\" channel is not 1.", "The y subsampling factor for the \"", "\" channel is invalid.", "The minimum x coordinate of the image's data window is not a multiple of the x subsampling factor of the \"", "\" channel.", "The minimum y coordinate of the image's data window is not a multiple of the y subsampling factor of the \"", "Number of pixels per row in the image's data window is not a multiple of the x subsampling factor of the \"", "Number of pixels per column in the image's data window is not a multiple of the y subsampling factor of the \"", "File is not an image file.", "Cannot read version ", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", "attribute name", "attribute type name", "Unexpected type for image attribute \"", "Unexpected attribute type.", "Invalid ", ": it is more than ", " characters long.", "N3Iex7TypeExcE", "N3Iex8InputExcE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE", "N3Imf14TypedAttributeINSt6__ndk16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "Attempt to perform a memory-mapped read on a file that is not memory mapped.", "N3Imf7IStreamE", "N3Imf7OStreamE", "Cannot read image file \"", "Unknown pixel data type.", "Tried to read a raw scanline from a tiled image.", "Error reading pixel data from image file \"", "Tried to read a raw tile from a scanline-based image.", "Error reading tile data from image file \"", "Cannot get a TiledInputFile pointer from an InputFile that is not tiled.", "Tried to read scan line outside the image file's data window.", "N3Imf9InputFile4DataE", "N3Imf9InputFileE", "Invalid key code film manufacturer code (must be between 0 and 99).", "Invalid key code film type (must be between 0 and 99).", "Invalid key code prefix (must be between 0 and 999999).", "Invalid key code count (must be between 0 and 9999).", "Invalid key code perforation offset (must be between 0 and 119).", "Invalid key code number of perforations per frame (must be between 1 and 15).", "Invalid key code number of perforations per count (must be between 20 and 120).", "keycode", "m33f", "m33d", "m44f", "m44d", "Unknown pixel type.", "N3Imf15OpaqueAttributeE", "Cannot copy the value of an image file attribute of type \"", "\" to an attribute of type \"", "Cannot open image file \"", "\" channel of output file \"", "\" is not compatible with the frame buffer's pixel type.", "X and/or y subsampling factors of \"", "\" are not compatible with the frame buffer's subsampling factors.", "No frame buffer specified as pixel data source.", "Tried to write more scan lines than specified by the data window.", "Failed to write pixel data to image file \"", "Cannot copy pixels from image file \"", "\" to image file \"", "\". The input file is tiled, but the output file is not. Try using TiledOutputFile::copyPixels instead.", "\". The files have different data windows.", "Quick pixel copy from image file \"", "\" failed. The files have different line orders.", "\" failed. The files use different compression methods.", "\" failed.  The files have different channel lists.", "\" failed. \"", "\" already contains pixel data.", "Cannot update preview image pixels. File \"", "\" does not contain a preview image.", "Cannot update preview image pixels for file \"", "Cannot overwrite scan line ", ". The scan line has not yet been stored in file \"", "Cannot determine current file position (%T).", "unrecognized exception", "N3Iex5IoExcE", "N3Iex8LogicExcE", "N3Imf10OutputFile4DataE", "N3Imf10OutputFileE", "N3Imf12_GLOBAL__N_114LineBufferTaskE", "Integer multiplication overflow.", "N3Iex11OverflowExcE", "rational", "\" channel of input file \"", "No frame buffer specified as pixel data destination.", "Scan line ", "Unexpected data block y coordinate.", "Unexpected data block length.", "N3Imf17ScanLineInputFile4DataE", "N3Imf17ScanLineInputFileE", "N3Imf12_GLOBAL__N_114LineBufferTaskE", "whiteLuminance", "adoptedNeutral", "renderingTransform", "lookModTransform", "xDensity", "owner", "capDate", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "wrapmodes", "framesPerSecond", "multiView", "worldToCamera", "worldToNDC", "Unexpected end of file.", "(string)", "Early end of file: read ", " out of ", " requested bytes.", "File output failed.", "N3Imf11StdIFStreamE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Iex8ErrnoExcE", "stringvector", "tiledesc", "Expected a tiled file but the file is not tiled.", "Tile (", ") is not a valid tile.", "Tried to read a tile outside the image file's data window.", "Error calling numLevels() on image file \"", "\" (numLevels() is not defined for files with RIPMAP level mode).", "Error calling levelWidth() on image file \"", "Error calling levelHeight() on image file \"", "Error calling numXTiles() on image file \"", "\" (Argument is not in valid range).", "Error calling numYTiles() on image file \"", "Error calling dataWindowForLevel() on image file \"", "Arguments not in valid range.", "Error calling dataWindowForTile() on image file \"", ") is missing.", "Unexpected tile x coordinate.", "Unexpected tile y coordinate.", "Unexpected tile x level number coordinate.", "Unexpected tile y level number coordinate.", "Unexpected tile block length.", "N3Imf14TiledInputFile4DataE", "N3Imf14TiledInputFileE", "N3Imf12_GLOBAL__N_114TileBufferTaskE", "Argument not in valid range.", "Unknown LevelMode format.", "Cannot set hours field in time code. New value is out of range.", "Cannot set minutes field in time code. New value is out of range.", "Cannot set seconds field in time code. New value is out of range.", "Cannot set frame field in time code. New value is out of range.", "Cannot extract binary group from time code user data.  Group number is out of range.", "timecode", "N3Iex7BaseExcE", "N3Iex8EpermExcE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "Cannot initialize mutex (%T).", "Cannot lock mutex (%T).", "Cannot unlock mutex (%T).", "N9IlmThread5MutexE", "Attempt to set the number of threads in a thread pool to a negative value.", "N9IlmThread4TaskE", "N9IlmThread10ThreadPoolE", "N9IlmThread12_GLOBAL__N_112WorkerThreadE", "Cannot create new thread (%T).", "N9IlmThread6ThreadE", "Cannot initialize semaphore (%T).", "Post operation on semaphore failed (%T).", "Cannot read semaphore value (%T).", "N9IlmThread9SemaphoreE", "Cannot register image file attribute type \"", "\". The type has already been registered.", "Cannot create image file attribute of unknown type \"", "N3Imf9AttributeE", "box2i", "box2f", "chlist", "channel name", "N3Imf10CompressorE", "Integer addition overflow.", "N3Imf13PizCompressorE", "Data compression (zlib) failed.", "Data decompression (zlib) failed.", "Error decompressing data (input data are shorter than expected).", "Error decompressing data (input data are longer than expected).", "N3Imf15Pxr24CompressorE", "Data decoding (rle) failed.", "N3Imf13RleCompressorE", "N3Imf13ZipCompressorE", "N3Imf13B44CompressorE", "Error in Huffman-encoded data (invalid code table size).", "Error in Huffman-encoded data (unexpected end of code table data).", "Error in Huffman-encoded data (code table is longer than expected).", "Error in header for Huffman-encoded data (invalid number of bits).", "Error in Huffman-encoded data (invalid code table entry).", "Error in Huffman-encoded data (decoded data are longer than expected).", "Error in Huffman-encoded data (invalid code).", "condition_variable::wait: mutex not locked", "condition_variable wait failed", "condition_variable::timed wait: mutex not locked", "condition_variable timed_wait failed", "St16nested_exception", "__next_prime overflow", "unspecified iostream_category error", "ios_base::clear", "NSt6__ndk18ios_base7failureE", "NSt6__ndk18ios_baseE", "NSt6__ndk19basic_iosIwNS_11char_traitsIwEEEE", "NSt6__ndk115basic_streambufIwNS_11char_traitsIwEEEE", "NSt6__ndk113basic_istreamIwNS_11char_traitsIwEEEE", "NSt6__ndk113basic_ostreamIwNS_11char_traitsIwEEEE", "NSt6__ndk119__iostream_categoryE", "NSt6__ndk110__stdinbufIcEE", "unsupported locale for standard input", "NSt6__ndk110__stdinbufIwEE", "NSt6__ndk111__stdoutbufIcEE", "NSt6__ndk111__stdoutbufIwEE", "money_get error", "0123456789", "%.0Lf", "locale constructed with null", "collate_byname<char>::collate_byname failed to construct for ", "collate_byname<wchar_t>::collate_byname(size_t refs) failed to construct for ", "ctype_byname<char>::ctype_byname failed to construct for ", "ctype_byname<wchar_t>::ctype_byname failed to construct for ", "codecvt_byname<wchar_t, char, mbstate_t>::codecvt_byname failed to construct for ", "numpunct_byname<char>::numpunct_byname failed to construct for ", "numpunct_byname<wchar_t>::numpunct_byname failed to construct for ", "%a %b %d %H:%M:%S %Y", "%I:%M:%S %p", "time_get_byname failed to construct for ", "locale not supported", "time_put_byname failed to construct for ", "moneypunct_byname failed to construct for ", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "%I:%M:%S %p%H:%M", "NSt6__ndk16locale5facetE", "NSt6__ndk15ctypeIwEE", "NSt6__ndk110ctype_baseE", "NSt6__ndk17codecvtIcc9mbstate_tEE", "NSt6__ndk112codecvt_baseE", "NSt6__ndk17codecvtIDsc9mbstate_tEE", "NSt6__ndk17codecvtIDic9mbstate_tEE", "NSt6__ndk116__narrow_to_utf8ILm16EEE", "NSt6__ndk116__narrow_to_utf8ILm32EEE", "NSt6__ndk117__widen_from_utf8ILm16EEE", "NSt6__ndk117__widen_from_utf8ILm32EEE", "NSt6__ndk114__codecvt_utf8IwEE", "NSt6__ndk17codecvtIwc9mbstate_tEE", "NSt6__ndk114__codecvt_utf8IDsEE", "NSt6__ndk114__codecvt_utf8IDiEE", "NSt6__ndk115__codecvt_utf16IwLb0EEE", "NSt6__ndk115__codecvt_utf16IwLb1EEE", "NSt6__ndk115__codecvt_utf16IDsLb0EEE", "NSt6__ndk115__codecvt_utf16IDsLb1EEE", "NSt6__ndk115__codecvt_utf16IDiLb0EEE", "NSt6__ndk115__codecvt_utf16IDiLb1EEE", "NSt6__ndk120__codecvt_utf8_utf16IwEE", "NSt6__ndk120__codecvt_utf8_utf16IDiEE", "NSt6__ndk120__codecvt_utf8_utf16IDsEE", "NSt6__ndk16locale5__impE", "NSt6__ndk114collate_bynameIcEE", "NSt6__ndk17collateIcEE", "NSt6__ndk114collate_bynameIwEE", "NSt6__ndk17collateIwEE", "NSt6__ndk15ctypeIcEE", "NSt6__ndk112ctype_bynameIcEE", "NSt6__ndk112ctype_bynameIwEE", "NSt6__ndk18numpunctIcEE", "NSt6__ndk18numpunctIwEE", "NSt6__ndk115numpunct_bynameIcEE", "NSt6__ndk115numpunct_bynameIwEE", "NSt6__ndk17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19__num_getIcEE", "NSt6__ndk114__num_get_baseE", "NSt6__ndk17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk19__num_getIwEE", "NSt6__ndk17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19__num_putIcEE", "NSt6__ndk114__num_put_baseE", "NSt6__ndk17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk19__num_putIwEE", "NSt6__ndk18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19time_baseE", "NSt6__ndk120__time_get_c_storageIcEE", "NSt6__ndk18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk120__time_get_c_storageIwEE", "NSt6__ndk115time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk118__time_get_storageIcEE", "NSt6__ndk110__time_getE", "NSt6__ndk115time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk118__time_get_storageIwEE", "NSt6__ndk18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk110__time_putE", "NSt6__ndk18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk115time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk115time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk110moneypunctIcLb0EEE", "NSt6__ndk110money_baseE", "NSt6__ndk110moneypunctIcLb1EEE", "NSt6__ndk110moneypunctIwLb0EEE", "NSt6__ndk110moneypunctIwLb1EEE", "NSt6__ndk117moneypunct_bynameIcLb0EEE", "NSt6__ndk117moneypunct_bynameIcLb1EEE", "NSt6__ndk117moneypunct_bynameIwLb0EEE", "NSt6__ndk117moneypunct_bynameIwLb1EEE", "NSt6__ndk19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk111__money_getIcEE", "NSt6__ndk19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk111__money_getIwEE", "NSt6__ndk19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk111__money_putIcEE", "NSt6__ndk19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk111__money_putIwEE", "NSt6__ndk18messagesIcEE", "NSt6__ndk113messages_baseE", "NSt6__ndk18messagesIwEE", "NSt6__ndk115messages_bynameIcEE", "NSt6__ndk115messages_bynameIwEE", "NSt6__ndk114codecvt_bynameIcc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIwc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIDsc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIDic9mbstate_tEE", "NSt6__ndk115__time_get_tempIcEE", "NSt6__ndk115__time_get_tempIwEE", "bad_weak_ptr", "NSt6__ndk112bad_weak_ptrE", "NSt6__ndk114__shared_countE", "NSt6__ndk119__shared_weak_countE", "recursive_mutex constructor failed", "recursive_mutex lock failed", "recursive_timed_mutex lock limit reached", "stoul", "stoll", "stoull", "stold", ": no conversion", ": out of range", "string_view::substr", "unspecified generic_category error", "system", "unspecified system_category error", "Unknown error %d", "NSt6__ndk112system_errorE", "NSt6__ndk114error_categoryE", "NSt6__ndk112__do_messageE", "NSt6__ndk124__generic_error_categoryE", "NSt6__ndk123__system_error_categoryE", "thread::join failed", "thread::detach failed", "__thread_specific_ptr construction failed", "The associated promise has been destructed prior to the associated state becoming ready.", "The future has already been retrieved from the promise or packaged_task.", "The state of the promise has already been set.", "Operation not permitted on an object without an associated state.", "unspecified future_errc value\n", "NSt6__ndk112future_errorE", "NSt6__ndk117__assoc_sub_stateE", "NSt6__ndk123__future_error_categoryE", "cannot allocate __cxa_eh_globals", "std::__libcpp_tls_set failure in __cxa_get_globals()", "execute once failure in __cxa_get_globals_fast()", "cannot create thread specific key for __cxa_get_globals()", "cannot zero out thread value for __cxa_get_globals()", "__cxa_guard_acquire failed to acquire mutex", "__cxa_guard_acquire condition variable wait failed", "__cxa_guard_acquire failed to release mutex", "__cxa_guard_release failed to acquire mutex", "__cxa_guard_release failed to release mutex", "__cxa_guard_release failed to broadcast condition variable", "__cxa_guard_abort failed to acquire mutex", "__cxa_guard_abort failed to release mutex", "__cxa_guard_abort failed to broadcast condition variable", "unexpected_handler unexpectedly returned", "terminate_handler unexpectedly returned", "terminate_handler unexpectedly threw an exception", "Pure virtual function called!", "Deleted virtual function called!", "N10__cxxabiv116__shim_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv117__pbase_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "N10__cxxabiv120__function_type_infoE", "N10__cxxabiv129__pointer_to_member_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDn", "PKDh", "PKDs", "PKDi", "N10__cxxabiv117__array_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv121__vmi_class_type_infoE", "std::bad_exception", "std::bad_alloc", "bad_array_new_length", "bad_array_length", "St9exception", "St13bad_exception", "St16bad_array_length", "St9bad_alloc", "St20bad_array_new_length", "St12domain_error", "St11logic_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St11range_error", "St13runtime_error", "St14overflow_error", "St15underflow_error", "std::bad_cast", "std::bad_typeid", "St9type_info", "St8bad_cast", "St10bad_typeid", "libc++abi", "terminating with %s exception of type %s: %s", "terminating with %s exception of type %s", "terminating with %s foreign exception", "terminating", "uncaught", "unexpected", "VTT for ", "typeinfo for ", "typeinfo name for ", "covariant return thunk to ", "thread-local wrapper routine for ", "thread-local initialization routine for ", "non-virtual thunk to ", "guard variable for ", "reference temporary for ", "construction vtable for ", "auto", "decltype(", "alignof (", "const_cast", "dynamic_cast", "noexcept (", "reinterpret_cast", "static_cast", "sizeof (", "sizeof... (", "typeid (", "throw", "wchar_t", "unsigned char", "unsigned short", "unsigned __int128", "%LaL", "(anonymous namespace)", "operator&&", "operator&", "operator&=", "operator,", "operator~", "operator delete[]", "operator delete", "operator/", "operator/=", "operator^", "operator^=", "operator==", "operator>=", "operator>", "operator<=", "operator<<=", "operator<", "operator-", "operator-=", "operator*=", "operator--", "operator new[]", "operator!=", "operator!", "operator new", "operator||", "operator|", "operator|=", "operator->*", "operator++", "operator->", "operator?", "operator%", "operator%=", "operator>>", "operator>>=", "operator<=>", "operator\"\" ", " ... ", "::operator ", ") ? (", ") : (", "sizeof...(", "throw ", "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", "std::basic_istream<char, std::char_traits<char> >", "std::basic_ostream<char, std::char_traits<char> >", "std::basic_iostream<char, std::char_traits<char> >", "basic_istream", "basic_ostream", "basic_iostream", "[abi:", "'lambda", "std::allocator", "std::basic_string", "std::string", "std::istream", "std::ostream", "std::iostream", "std::", " [enable_if:", " volatile", " restrict", "void", "unsigned int", "unsigned long", "long double", "__float128", "decimal64", "decimal128", "decimal32", "decimal16", "char32_t", "char16_t", "decltype(auto)", "std::nullptr_t", " complex", " imaginary", "noexcept", "noexcept(", "throw(", "pixel vector[", "union", "objc_object", "N12_GLOBAL__N_111SpecialNameE", "N12_GLOBAL__N_14NodeE", "N12_GLOBAL__N_121CtorVtableSpecialNameE", "N12_GLOBAL__N_18NameTypeE", "N12_GLOBAL__N_124ForwardTemplateReferenceE", "N12_GLOBAL__N_110NestedNameE", "N12_GLOBAL__N_111IntegerExprE", "N12_GLOBAL__N_14ExprE", "N12_GLOBAL__N_18BoolExprE", "N12_GLOBAL__N_19FloatExprIfEE", "N12_GLOBAL__N_19FloatExprIdEE", "N12_GLOBAL__N_19FloatExprIeEE", "N12_GLOBAL__N_115IntegerCastExprE", "N12_GLOBAL__N_113FunctionParamE", "N12_GLOBAL__N_18FoldExprE", "N12_GLOBAL__N_122ParameterPackExpansionE", "N12_GLOBAL__N_110BinaryExprE", "N12_GLOBAL__N_110PrefixExprE", "N12_GLOBAL__N_18CastExprE", "N12_GLOBAL__N_18CallExprE", "N12_GLOBAL__N_114ConversionExprE", "N12_GLOBAL__N_110DeleteExprE", "N12_GLOBAL__N_113QualifiedNameE", "N12_GLOBAL__N_18DtorNameE", "N12_GLOBAL__N_122ConversionOperatorTypeE", "N12_GLOBAL__N_115LiteralOperatorE", "N12_GLOBAL__N_119GlobalQualifiedNameE", "N12_GLOBAL__N_110MemberExprE", "N12_GLOBAL__N_118ArraySubscriptExprE", "N12_GLOBAL__N_110BracedExprE", "N12_GLOBAL__N_115BracedRangeExprE", "N12_GLOBAL__N_112InitListExprE", "N12_GLOBAL__N_111PostfixExprE", "N12_GLOBAL__N_17NewExprE", "N12_GLOBAL__N_113EnclosingExprE", "N12_GLOBAL__N_115ConditionalExprE", "N12_GLOBAL__N_119SizeofParamPackExprE", "N12_GLOBAL__N_113NodeArrayNodeE", "N12_GLOBAL__N_19ThrowExprE", "N12_GLOBAL__N_127ExpandedSpecialSubstitutionE", "N12_GLOBAL__N_112CtorDtorNameE", "N12_GLOBAL__N_110AbiTagAttrE", "N12_GLOBAL__N_115UnnamedTypeNameE", "N12_GLOBAL__N_115ClosureTypeNameE", "N12_GLOBAL__N_121StructuredBindingNameE", "N12_GLOBAL__N_19LocalNameE", "N12_GLOBAL__N_119SpecialSubstitutionE", "N12_GLOBAL__N_113ParameterPackE", "N12_GLOBAL__N_112TemplateArgsE", "N12_GLOBAL__N_120NameWithTemplateArgsE", "N12_GLOBAL__N_116StdQualifiedNameE", "N12_GLOBAL__N_120TemplateArgumentPackE", "N12_GLOBAL__N_112EnableIfAttrE", "N12_GLOBAL__N_116FunctionEncodingE", "N12_GLOBAL__N_19DotSuffixE", "N12_GLOBAL__N_112NoexceptSpecE", "N12_GLOBAL__N_120DynamicExceptionSpecE", "N12_GLOBAL__N_112FunctionTypeE", "N12_GLOBAL__N_113ObjCProtoNameE", "N12_GLOBAL__N_117VendorExtQualTypeE", "N12_GLOBAL__N_18QualTypeE", "N12_GLOBAL__N_110VectorTypeE", "N12_GLOBAL__N_19ArrayTypeE", "N12_GLOBAL__N_119PointerToMemberTypeE", "N12_GLOBAL__N_122ElaboratedTypeSpefTypeE", "N12_GLOBAL__N_111PointerTypeE", "N12_GLOBAL__N_119LValueReferenceTypeE", "N12_GLOBAL__N_119RValueReferenceTypeE", "N12_GLOBAL__N_120PostfixQualifiedTypeE"], "stringidentifiers": ["Mat::n_1reshape_11", "std::exception", "cv::Exception", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann17KDTreeIndexParamsENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann12SearchParamsENS_9allocatorIS3_EEEE", "Java_org_opencv_android_Utils_nBitmapToMat2", "Java_org_opencv_android_Utils_nMatToBitmap2", "nativeObj", "my_object", "N2cv9AlgorithmE", "OutOfMemoryError", "compare", "inRange", "cvNot", "cvAnd", "cvOr", "cvXor", "cvAndS", "cvOrS", "cvXorS", "cvAdd", "cvSub", "cvAddS", "cvSubRS", "cvMul", "cvDiv", "cvAddWeighted", "cvAbsDiff", "cvAbsDiffS", "cvInRange", "cvInRangeS", "cvCmp", "cvCmpS", "cvMin", "cvMax", "cvMinS", "cvMaxS", "binary_op", "arithm_op", "cmp_loop", "cvSetIPLAllocators", "cvCreateMatHeader", "cvInitMatHeader", "cvReleaseMat", "cvCloneMat", "cvInitMatNDHeader", "cvCreateMatNDHeader", "cvCloneMatND", "cvInitNArrayIterator", "cvCreateSparseMat", "cvReleaseSparseMat", "cvCloneSparseMat", "cvInitSparseMatIterator", "cvCreateData", "cvSetData", "cvReleaseData", "cvGetRawData", "cvGetElemType", "cvGetDims", "cvGetDimSize", "cvGetSize", "cvGetSubRect", "cvGetRows", "cvGetCols", "cvGetDiag", "cvScalarToRawData", "cvRawDataToScalar", "cvPtr1D", "cvPtr2D", "cvPtr3D", "cvPtrND", "cvGet1D", "cvGet2D", "cvGetReal1D", "cvGetReal2D", "cvGetReal3D", "cvGetRealND", "cvSet1D", "cvSet2D", "cvSetReal1D", "cvSetReal2D", "cvSetReal3D", "cvSetRealND", "cvGetMat", "cvReshapeMatND", "cvReshape", "cvGetImage", "cvInitImageHeader", "cvReleaseImageHeader", "cvReleaseImage", "cvSetImageROI", "cvResetImageROI", "cvGetImageROI", "cvSetImageCOI", "cvGetImageCOI", "cvCloneImage", "cvCheckTermCriteria", "scalarToRawData", "cvRelease", "cvClone", "cvGetMatND", "icvGetNodePtr", "icvDeleteNode", "GRAY", "BGRA", "batchDistance", "N2cv16BatchDistInvokerE", "NSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk19basic_iosIcNS_11char_traitsIcEEEE", "NSt6__ndk119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_streambufIcNS_11char_traitsIcEEEE", "mixChannels", "extractChannel", "insertChannel", "CV_16S", "NSt6__ndk114basic_iostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_istreamIcNS_11char_traitsIcEEEE", "NSt6__ndk118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "getByName", "getByIndex", "from_str", "bool", "unsigned", "unknown", "NSt6__ndk119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "minimize", "setTermCriteria", "N2cv16MinProblemSolver8FunctionE", "N2cv18ConjGradSolverImplE", "N2cv14ConjGradSolverE", "N2cv16MinProblemSolverE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18ConjGradSolverImplENS_9allocatorIS2_EEEE", "convertTo", "convertFp16", "cvSplit", "cvMerge", "cvConvertScaleAbs", "cvConvertScale", "cvLUT", "cvNormalize", "convertScaleAbs", "copyTo", "setTo", "flip", "rotate", "repeat", "borderInterpolate", "copyMakeBorder", "cvCopy", "cvFlip", "cvRepeat", "countNonZero", "findNonZero", "reshape", "throw_no_cuda", "cvCreateChildMemStorage", "cvReleaseMemStorage", "cvClearMemStorage", "cvSaveMemStoragePos", "cvRestoreMemStoragePos", "cvMemStorageAlloc", "cvCreateSeq", "cvSetSeqBlockSize", "cvSeqElemIdx", "cvCvtSeqToArray", "cvMakeSeqHeaderForArray", "cvStartAppendToSeq", "cvStartWriteSeq", "cvFlushSeqWriter", "cvEndWriteSeq", "cvCreateSeqBlock", "cvStartReadSeq", "cvChangeSeqBlock", "cvGetSeqReaderPos", "cvSetSeqReaderPos", "cvSeqPush", "cvSeqPop", "cvSeqPushFront", "cvSeqPopFront", "cvSeqInsert", "cvSeqRemove", "cvSeqPushMulti", "cvSeqPopMulti", "cvClearSeq", "cvSeqSlice", "cvSeqRemoveSlice", "cvSeqInsertSlice", "cvSeqSort", "cvSeqSearch", "cvSeqPartition", "cvCreateSet", "cvSetAdd", "cvSetRemove", "cvCreateGraph", "cvClearGraph", "cvGraphAddVtx", "cvGraphRemoveVtxByPtr", "cvGraphRemoveVtx", "cvFindGraphEdgeByPtr", "cvFindGraphEdge", "cvGraphAddEdgeByPtr", "cvGraphAddEdge", "cvGraphRemoveEdgeByPtr", "cvGraphRemoveEdge", "cvGraphVtxDegreeByPtr", "cvGraphVtxDegree", "cvCreateGraphScanner", "cvReleaseGraphScanner", "cvNextGraphItem", "cvCloneGraph", "cvTreeToNodeSeq", "cvInsertNodeIntoTree", "cvRemoveNodeFromTree", "cvInitTreeNodeIterator", "cvNextTreeNode", "cvPrevTreeNode", "icvInitMemStorage", "icvGoNextMemBlock", "icvGrowSeq", "icvSeqElemsClearFlags", "icvSeqFindNextElem", "getTypeFromDXGI_FORMAT", "getTypeFromD3DFORMAT", "initializeContextFromD3D11Device", "initializeContextFromD3D10Device", "initializeContextFromDirect3DDevice9Ex", "initializeContextFromDirect3DDevice9", "convertToD3D11Texture2D", "convertFromD3D11Texture2D", "convertToD3D10Texture2D", "convertFromD3D10Texture2D", "convertToDirect3DSurface9", "convertFromDirect3DSurface9", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DownhillSolverImplENS_9allocatorIS2_EEEE", "N2cv18DownhillSolverImplE", "N2cv14DownhillSolverE", "createInitialSimplex", "innerDownhillSimplex", "calc_f", "updateCoordSum", "mulSpectrums", "cvDFT", "cvMulSpectrums", "cvDCT", "apply", "N2cv16ReplacementDFT1DE", "N2cv3hal5DFT1DE", "N2cv15OcvDftBasicImplE", "N2cv16ReplacementDFT2DE", "N2cv3hal5DFT2DE", "N2cv10OcvDftImplE", "N2cv16ReplacementDCT2DE", "N2cv3hal5DCT2DE", "N2cv10OcvDctImplE", "NSt6__ndk120__shared_ptr_pointerIPN2cv15OcvDftBasicImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv15OcvDftBasicImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDftImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv10OcvDftImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDctImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv10OcvDctImplEEE", "IntGetProcAddress", "glob_rec", "kmeans", "N2cv24KMeansPPDistanceComputerE", "N2cv22KMeansDistanceComputerILb1EEE", "N2cv22KMeansDistanceComputerILb0EEE", "determinant", "invert", "solve", "eigen", "backSubst", "cvDet", "cvInvert", "cvSolve", "cvEigenVV", "cvSVD", "cvSVBkSb", "_SVDcompute", "subspaceProject", "subspaceReconstruct", "eigenNonSymmetric", "save", "num_components", "eigenvalues", "eigenvectors", "argsort", "sortMatrixColumnsByIndices", "asRowMatrix", "OPENCV_LOG_LEVEL", "WARNING", "DISABLED", "disabled", "FATAL", "fatal", "warning", "WARNINGS", "warnings", "WARN", "warn", "INFO", "debug", "VERBOSE", "verbose", "solveLP", "N2cv15LUTParallelBodyE", "magnitude", "phase", "cartToPolar", "polarToCart", "checkRange", "patchNaNs", "cvCartToPolar", "cvPolarToCart", "cvExp", "cvLog", "cvPow", "solveCubic", "solvePoly", "cvSolveCubic", "cvSolvePoly", "gemm", "transform", "perspectiveTransform", "scaleAdd", "calcCovarMatrix", "Mahalanobis", "mulTransposed", "cvGEMM", "cvTransform", "cvPerspectiveTransform", "cvScaleAdd", "cvCalcCovarMatrix", "cvCalcPCA", "cvProjectPCA", "cvBackProjectPCA", "gemmImpl", "download", "upload", "setSize", "ranges", "diag", "pop_back", "reserve", "reserveBuffer", "resize", "push_back", "locateROI", "adjustROI", "total_sz", "is_m1_vector", "getContinuousSize2D", "is_m2_vector", "is_m3_vector", "deallocate", "N2cv12MatAllocatorE", "N2cv25DummyBufferPoolControllerE", "N2cv20BufferPoolControllerE", "N2cv15StdMatAllocatorE", "cvIplImage", "cvarrToMat", "extractImageCOI", "insertImageCOI", "cvTranspose", "cvCrossProduct", "cvReduce", "cvRange", "cvSort", "cvKMeans2", "iplImageToMat", "assign", "N2cv14MatOp_IdentityE", "N2cv5MatOpE", "N2cv11MatOp_AddExE", "N2cv9MatOp_BinE", "N2cv9MatOp_CmpE", "N2cv10MatOp_GEMME", "N2cv12MatOp_InvertE", "N2cv7MatOp_TE", "N2cv11MatOp_SolveE", "N2cv17MatOp_InitializerE", "hconcat", "vconcat", "setIdentity", "transpose", "completeSymm", "cross", "reduce", "sortIdx", "sortIdx_", "erase", "norm", "minMaxLoc", "getConvertElem", "getConvertScaleElem", "getMat_", "getUMat", "getMatVector", "getUMatVector", "getGpuMat", "getOGlBuffer", "sizend", "isContinuous", "isSubmatrix", "step", "release", "getMatRef", "getUMatRef", "getGpuMatRef", "getGpuMatVecRef", "getOGlBufferRef", "getHostMemRef", "meanStdDev", "merge", "vecmerge_", "minMaxIdx", "PSNR", "cl_khr_image2d_from_buffer", "setUseSVM", "attachContext", "getProfilingQueue", "KernelArg", "runProfiling", "source", "hash", "binary", "fromBinary", "fromSPIR", "getPrefix", "getBinary", "getProg", "convertFromBuffer", "convertFromImage", "getDevice", "uchar", "uchar2", "uchar3", "uchar4", "uchar8", "uchar16", "ushort", "ushort2", "ushort3", "ushort4", "ushort8", "ushort16", "int2", "int3", "int4", "float2", "float3", "float4", "float8", "float16", "double2", "double3", "double4", "double8", "double16", "half", "half2", "half3", "half4", "half8", "half16", "result", "typeToStr", "ulong", "ulong2", "ulong3", "ulong4", "ulong8", "ulong16", "memopTypeToStr", "vecopTypeToStr", "noconvert", "CL_SUCCESS", "CL_DEVICE_NOT_FOUND", "CL_DEVICE_NOT_AVAILABLE", "CL_COMPILER_NOT_AVAILABLE", "CL_MEM_OBJECT_ALLOCATION_FAILURE", "CL_OUT_OF_RESOURCES", "CL_OUT_OF_HOST_MEMORY", "CL_PROFILING_INFO_NOT_AVAILABLE", "CL_MEM_COPY_OVERLAP", "CL_IMAGE_FORMAT_MISMATCH", "CL_IMAGE_FORMAT_NOT_SUPPORTED", "CL_BUILD_PROGRAM_FAILURE", "CL_MAP_FAILURE", "CL_MISALIGNED_SUB_BUFFER_OFFSET", "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST", "CL_COMPILE_PROGRAM_FAILURE", "CL_LINKER_NOT_AVAILABLE", "CL_LINK_PROGRAM_FAILURE", "CL_DEVICE_PARTITION_FAILED", "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", "CL_INVALID_VALUE", "CL_INVALID_DEVICE_TYPE", "CL_INVALID_PLATFORM", "CL_INVALID_DEVICE", "CL_INVALID_CONTEXT", "CL_INVALID_QUEUE_PROPERTIES", "CL_INVALID_COMMAND_QUEUE", "CL_INVALID_HOST_PTR", "CL_INVALID_MEM_OBJECT", "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR", "CL_INVALID_IMAGE_SIZE", "CL_INVALID_SAMPLER", "CL_INVALID_BINARY", "CL_INVALID_BUILD_OPTIONS", "CL_INVALID_PROGRAM", "CL_INVALID_PROGRAM_EXECUTABLE", "CL_INVALID_KERNEL_NAME", "CL_INVALID_KERNEL_DEFINITION", "CL_INVALID_KERNEL", "CL_INVALID_ARG_INDEX", "CL_INVALID_ARG_VALUE", "CL_INVALID_ARG_SIZE", "CL_INVALID_KERNEL_ARGS", "CL_INVALID_WORK_DIMENSION", "CL_INVALID_WORK_GROUP_SIZE", "CL_INVALID_WORK_ITEM_SIZE", "CL_INVALID_GLOBAL_OFFSET", "CL_INVALID_EVENT_WAIT_LIST", "CL_INVALID_EVENT", "CL_INVALID_OPERATION", "CL_INVALID_GL_OBJECT", "CL_INVALID_BUFFER_SIZE", "CL_INVALID_MIP_LEVEL", "CL_INVALID_GLOBAL_WORK_SIZE", "CL_INVALID_PROPERTY", "CL_INVALID_IMAGE_DESCRIPTOR", "CL_INVALID_COMPILER_OPTIONS", "CL_INVALID_LINKER_OPTIONS", "CL_INVALID_DEVICE_PARTITION_COUNT", "CL_INVALID_PIPE_SIZE", "CL_INVALID_DEVICE_QUEUE", "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR", "CL_PLATFORM_NOT_FOUND_KHR", "CL_INVALID_D3D10_DEVICE_KHR", "CL_INVALID_D3D10_RESOURCE_KHR", "CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR", "CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR", "kernelToStr", "COEFF", "vectorWidths", "checkOptimalVectorWidth", "OPENCV_OPENCL_FORCE", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "stop", "durationNS", "cl_intel_subgroups", "Iris", "OPENCV_OPENCL_DEVICE_MAX_WORK_GROUP_SIZE", "addUMat", "updateHash", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "_releaseBufferEntry", "_allocateBufferEntry", "deallocate_", "unmap", "checkContinuous", "HOST_ALLOC", "getBufferPoolController", "isFormatSupported", "N2cv3ocl15OpenCLAllocatorE", "N2cv3ocl20OpenCLBufferPoolImplE", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "N2cv3ocl16OpenCLBufferPoolIP7_cl_memEE", "setVertexArray", "setColorArray", "setNormalArray", "setTexCoordArray", "initializeContextFromGL", "convertToGLTexture2D", "convertFromGLTexture2D", "unmapGLBuffer", "throw_no_ogl", "N2cv9FormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16DefaultFormatterENS_9allocatorIS2_EEEE", "N2cv16DefaultFormatterE", "N2cv13FormatterBaseE", "FormattedImpl", "uint8", "uint16", "float32", "float64", "NSt6__ndk120__shared_ptr_emplaceIN2cv13FormattedImplENS_9allocatorIS2_EEEE", "N2cv13FormattedImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv15MatlabFormatterENS_9allocatorIS2_EEEE", "N2cv15MatlabFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12CSVFormatterENS_9allocatorIS2_EEEE", "N2cv12CSVFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv15PythonFormatterENS_9allocatorIS2_EEEE", "N2cv15PythonFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14NumpyFormatterENS_9allocatorIS2_EEEE", "N2cv14NumpyFormatterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10CFormatterENS_9allocatorIS2_EEEE", "N2cv10CFormatterE", "setUseOpenVX", "parallel_for", "nstripes", "OPENCV_FOR_THREADS_NUM", "parallel_for_body", "N2cv16ParallelLoopBodyE", "N12_GLOBAL__N_113ProxyLoopBodyE", "N12_GLOBAL__N_123ParallelLoopBodyWrapperE", "N3tbb10interface78internal18delegated_functionIN12_GLOBAL__N_113ProxyLoopBodyEvEE", "N3tbb10interface98internal9start_forINS_13blocked_rangeIiEEN12_GLOBAL__N_113ProxyLoopBodyEKNS_16auto_partitionerEEE", "N3tbb8internal9no_assignE", "N3tbb10interface78internal13delegate_baseE", "N3tbb10interface98internal9flag_taskE", "OPENCV_THREAD_POOL_ACTIVE_WAIT_PAUSE_LIMIT", "OPENCV_THREAD_POOL_ACTIVE_WAIT_WORKER", "OPENCV_THREAD_POOL_ACTIVE_WAIT_MAIN", "OPENCV_THREAD_POOL_ACTIVE_WAIT_THREADS_LIMIT", "execute", "NSt6__ndk120__shared_ptr_pointerIPN2cv12WorkerThreadENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12WorkerThreadEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv11ParallelJobENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv11ParallelJobEEE", "project", "backProject", "decodeFormat", "decodeSimpleFormat", "getDefaultObjectName", "keys", "rawSize", "setValue", "readRaw", "typeSymbol", "symbolToType", "gets", "write_mode", "startWriteStruct", "type_id", "endWriteStruct", "writeRawData", "writeComment", "getName", "getNodePtr", "reserveNodeSpace", "normalizeNodeOfs", "resizeWriteBuffer", "setBufferPtr", "getCurrentStruct", "convertToCollection", "addNode", "processSpecialDouble", "parseBase64", "readMore", "N2cv15FileStorage_APIE", "N2cv11FileStorageE", "ucwsifdh", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIhNS_9allocatorIhEEEENS2_IS4_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11FileStorage4ImplENS_9allocatorIS3_EEEE", "N2cv11FileStorage4ImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JSONEmitterENS_9allocatorIS2_EEEE", "N2cv11JSONEmitterE", "N2cv18FileStorageEmitterE", "writeScalar", "parse", "skipSpaces", "parseMap", "parseKey", "parseValue", "parseSeq", "getBase64Row", "NSt6__ndk120__shared_ptr_emplaceIN2cv10JSONParserENS_9allocatorIS2_EEEE", "N2cv10JSONParserE", "N2cv17FileStorageParserE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10XMLEmitterENS_9allocatorIS2_EEEE", "N2cv10XMLEmitterE", "writeTag", "apos", "quot", "opencv_storage", "parseTag", "NSt6__ndk120__shared_ptr_emplaceIN2cv9XMLParserENS_9allocatorIS2_EEEE", "N2cv9XMLParserE", "N2cv11YAMLEmitterE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10YAMLParserENS_9allocatorIS2_EEEE", "N2cv10YAMLParserE", "fill", "randShuffle", "randShuffle_", "split", "vecsplit_", "cvSum", "cvAvg", "cvAvgSdv", "OPENCV_TEMP_PATH", "Backtrace", "status", "getData", "OPENCV_DUMP_CONFIG", "SSE2", "SSSE3", "POPCNT", "AVX2", "FMA3", "AVX512F", "AVX512BW", "AVX512CD", "AVX512DQ", "AVX512ER", "AVX512IFMA", "AVX512PF", "AVX512VBMI", "AVX512VL", "NEON", "VSX3", "OPENCV_CPU_DISABLE", "readSettings", "reserveSlot", "gather", "releaseSlot", "setData", "True", "TRUE", "False", "FALSE", "N2cv9ExceptionE", "N2cv16TLSDataContainerE", "N2cv7TLSDataINS_12_GLOBAL__N_18ThreadIDEEE", "N2cv7TLSDataINS_11CoreTLSDataEEE", "N2cv10ParseErrorE", "N2cv7TLSDataINS_5instr11NodeDataTlsEEE", "OPENCV_TRACE_DEPTH_OPENCV", "OPENCV_TRACE_MAX_CHILDREN_OPENCV", "OPENCV_TRACE_MAX_CHILDREN", "OPENCV_TRACE_LOCATION", "OpenCVTrace", "parallelForSetRootRegion", "traceArg", "getRef", "N2cv5utils5trace7details17AsyncTraceStorageE", "N2cv5utils5trace7details12TraceStorageE", "NSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_filebufIcNS_11char_traitsIcEEEE", "N2cv5utils5trace7details16SyncTraceStorageE", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details17AsyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details17AsyncTraceStorageEEE", "N2cv7TLSDataINS_5utils5trace7details23TraceManagerThreadLocalEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details16SyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details16SyncTraceStorageEEE", "RotatedRect", "getMat", "N2cv7TLSDataINS_18UMatDataAutoLockerEEE", "OPENCV_DATA_PATH", "_HINT", "findDataFile", "NSt6__ndk120__shared_ptr_pointerIPNS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEENS_14default_deleteIS9_EENS5_IS9_EEEE", "NSt6__ndk114default_deleteINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEE", "unlock", "unlock_shared", "getCacheDirectory", "OPENCV_SAMPLES_DATA_PATH", "findFile", "initializeContextFromVA", "convertToVASurface", "convertFromVASurface", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "N7cvflann7anyimpl15base_any_policyE", "N7cvflann7anyimpl16small_any_policyIPKcEE", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "N7cvflann7anyimpl16small_any_policyIiEE", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N7cvflann7anyimpl16small_any_policyIfEE", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "N7cvflann7anyimpl16small_any_policyIbEE", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "N7cvflann7anyimpl16small_any_policyIjEE", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N7cvflann7anyimpl14big_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N7cvflann7anyimpl21typed_base_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N7cvflann7anyimpl9empty_anyE", "N7cvflann17flann_algorithm_tE", "N7cvflann20flann_centers_init_tE", "NSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk121__basic_string_commonILb1EEE", "branching", "iterations", "centers_init", "target_precision", "build_weight", "memory_weight", "sample_fraction", "leaf_size", "table_number", "multi_probe_level", "checks", "sorted", "build", "knnSearch", "radiusSearch", "FLANN_INDEX", "buildIndex_", "initialize", "leaf_max_size", "reorder", "runKnnSearch_", "runRadiusSearch_", "loadIndex_", "N2cv5flann5IndexE", "N7cvflann7anyimpl14big_any_policyIdEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "N7cvflann14FLANNExceptionE", "N7cvflann7anyimpl12bad_any_castE", "N7cvflann5IndexINS_7HammingIhEEEE", "N7cvflann7NNIndexINS_7HammingIhEEEE", "N7cvflann18KNNUniqueResultSetIiEE", "N7cvflann15UniqueResultSetIiEE", "N7cvflann9ResultSetIiEE", "N7cvflann21RadiusUniqueResultSetIiEE", "N7cvflann11LinearIndexINS_7HammingIhEEEE", "N7cvflann27HierarchicalClusteringIndexINS_7HammingIhEEEE", "N7cvflann8LshIndexINS_7HammingIhEEEE", "N7cvflann5IndexINS_2L2IfEEEE", "N7cvflann7NNIndexINS_2L2IfEEEE", "N7cvflann18KNNUniqueResultSetIfEE", "N7cvflann15UniqueResultSetIfEE", "N7cvflann9ResultSetIfEE", "N7cvflann21RadiusUniqueResultSetIfEE", "N7cvflann11LinearIndexINS_2L2IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "N7cvflann18KNNSimpleResultSetIfEE", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "N7cvflann12KNNResultSetIfEE", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "N7cvflann8LshIndexINS_2L2IfEEEE", "N7cvflann5IndexINS_2L1IfEEEE", "N7cvflann7NNIndexINS_2L1IfEEEE", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "N7cvflann8LshIndexINS_2L1IfEEEE", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "accumulate", "accumulateSquare", "accumulateProduct", "accumulateWeighted", "icvApproximateChainTC89", "cvApproxChains", "approxPolyDP", "cvApproxPoly", "bilateralFilter", "bilateralFilter_8u", "bilateralFilter_32f", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "blendLinear", "N2cv18BlendLinearInvokerIhEE", "N2cv18BlendLinearInvokerIfEE", "getRowSumFilter", "getColumnSumFilter", "getSqrRowSumFilter", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIhiEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIhiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumItdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumItdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIsdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIsdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIfdEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIfdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9SqrRowSumIddEENS_9allocatorIS3_EEEE", "N2cv9SqrRowSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhtEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhtEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIhdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIhdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumItiEENS_9allocatorIS3_EEEE", "N2cv6RowSumItiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumItdEENS_9allocatorIS3_EEEE", "N2cv6RowSumItdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIsiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIsiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIiiEENS_9allocatorIS3_EEEE", "N2cv6RowSumIiiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIsdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIsdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIfdEENS_9allocatorIS3_EEEE", "N2cv6RowSumIfdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv6RowSumIddEENS_9allocatorIS3_EEEE", "N2cv6RowSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIihEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIihEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIthEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIthEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdhEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdhEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIitEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIitEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdtEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdtEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIisEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIisEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdsEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdsEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIiiEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIiiEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIifEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIifEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIdfEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIdfEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIidEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIidEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9ColumnSumIddEENS_9allocatorIS3_EEEE", "N2cv9ColumnSumIddEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12FilterEngineENS_9allocatorIS2_EEEE", "global_hysteresis", "finalPass", "cvCanny", "N2cv13parallelCannyE", "N2cv9finalPassE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_110CLAHE_ImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_110CLAHE_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEENS_9allocatorIS3_EEEE", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEE", "N2cv5CLAHEE", "cvtColorTwoPlane", "cvtColor", "cvCvtColor", "RGB2HSV_b", "CvtHelper", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "RGB2Lab_b", "RGB2Lab_f", "RGB2Luvfloat", "Luv2RGBfloat", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "RGB2Gray", "RGB2RGB", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "cvtTwoPlaneYUVtoBGR", "cvtThreePlaneYUVtoBGR", "cvtOnePlaneYUVtoBGR", "cvtColorYUV2Gray_ch", "cvtColorTwoPlaneYUV2BGRpair", "N2cv22RGB888toYUV420pInvokerE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "applyColorMap", "interp1", "sortMatrixRowsByIndices", "N2cv8colormap6AutumnE", "N2cv8colormap8ColorMapE", "N2cv8colormap4BoneE", "N2cv8colormap4CoolE", "N2cv8colormap3HotE", "N2cv8colormap3HSVE", "N2cv8colormap3JetE", "N2cv8colormap5OceanE", "N2cv8colormap6ParulaE", "N2cv8colormap4PinkE", "N2cv8colormap7RainbowE", "N2cv8colormap6SpringE", "N2cv8colormap6SummerE", "N2cv8colormap6WinterE", "N2cv8colormap12UserColorMapE", "connectedComponents", "connectedComponentsWithStats", "connectedComponents_sub1", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE10SecondScanE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan8ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan4ConnectivityE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE10SecondScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE9FirstScanE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE10SecondScanE", "cvStartReadChainPoints", "cvReadChainPoint", "cvSubstituteContour", "cvFindNextContour", "l_cinfo", "cvEndFindContours", "findContours", "cvStartFindContours_Impl", "icvTraceContour_32s", "icvTraceContour", "cvFindContours_Impl", "icvFindContoursInInterval", "NSt6__ndk120__shared_ptr_pointerIP12CvMemStorageN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI12CvMemStorageEE", "convexHull", "convexityDefects", "isContourConvex", "cvConvexHull2", "cvConvexityDefects", "cvCheckContourConvexity", "isStorageOrMat", "preCornerDetect", "cvCornerMinEigenVal", "cvCornerHarris", "cvCornerEigenValsAndVecs", "cvPreCornerDetect", "cornerEigenValsVecs", "cornerSubPix", "demosaicing", "N2cv18Bayer2Gray_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "cvSobel", "cvLaplace", "getScharrKernels", "getSobelKernels", "distanceTransform", "trueDistTrans", "getDistanceTransformMask", "distanceTransform_L1_8U", "distanceATS_L1_8u", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "rectangle", "circle", "fillConvexPoly", "fillPoly", "polylines", "drawContours", "cvDrawContours", "cvClipLine", "cvInitLineIterator", "cvPutText", "cvInitFont", "cvGetTextSize", "PolyLine", "getFontData", "cvCalcEMD2", "icvInitEMD", "icvFindBasicVariables", "icvNewSolution", "cur_x", "goodFeaturesToTrack", "cvGoodFeaturesToTrack", "proceed", "getKernelType", "getLinearRowFilter", "getLinearColumnFilter", "createSeparableLinearFilter", "preprocess2DKernel", "getLinearFilter", "createLinearFilter", "sepFilter2D", "cvFilter2D", "SymmColumnVec_32s8u", "SymmColumnSmallVec_32s16s", "SymmColumnSmallVec_32f", "SymmColumnVec_32f16s", "SymmColumnVec_32f", "normalizeAnchor", "SymmRowSmallFilter", "SymmColumnSmallFilter", "SymmColumnFilter", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18SymmRowSmallFilterIhiNS1_21SymmRowSmallVec_8u32sEEENS_9allocatorIS4_EEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18SymmRowSmallFilterIffNS1_19SymmRowSmallVec_32fEEENS_9allocatorIS4_EEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhiNS1_12RowVec_8u32sEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhfNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIhdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterItfNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterItdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIsfNS1_13RowVec_16s32fEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIsdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIffNS1_10RowVec_32fEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIfdNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9RowFilterIddNS1_8RowNoVecEEENS_9allocatorIS4_EEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_13FixedPtCastExIihEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIfhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIftEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdtEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIfsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIdsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIffEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12ColumnFilterINS1_4CastIddEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_13FixedPtCastExIihEENS1_19SymmColumnVec_32s8uEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_4CastIisEENS1_25SymmColumnSmallVec_32s16sEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21SymmColumnSmallFilterINS1_4CastIffEENS1_22SymmColumnSmallVec_32fEEENS_9allocatorIS6_EEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_13FixedPtCastExIihEENS1_19SymmColumnVec_32s8uEEENS_9allocatorIS6_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIfhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdhEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIftEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdtEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIisEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIfsEENS1_20SymmColumnVec_32f16sEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIdsEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIffEENS1_17SymmColumnVec_32fEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SymmColumnFilterINS1_4CastIddEENS1_11ColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv12FilterEngineENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12FilterEngineEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIfhEENS1_12FilterVec_8uEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIftEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIfsEENS1_15FilterVec_8u16sEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIhNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIftEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DItNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIfsEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIffEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIsNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIfNS1_4CastIffEENS1_13FilterVec_32fEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8Filter2DIdNS1_4CastIddEENS1_11FilterNoVecEEENS_9allocatorIS6_EEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "floodFill", "setTemplateImpl", "filterMinDist", "detectImpl", "processTempl", "calcHist", "findPosInHist", "buildFeatureList", "getContourPoints", "calcOrientation", "calcScale", "calcPosition", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_127GeneralizedHoughBallardImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_127GeneralizedHoughBallardImplE", "N12_GLOBAL__N_120GeneralizedHoughBaseE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124GeneralizedHoughGuilImplENS_9allocatorIS2_EEEE", "N12_GLOBAL__N_124GeneralizedHoughGuilImplE", "N2cv23GeneralizedHoughBallardE", "N2cv16GeneralizedHoughE", "N2cv20GeneralizedHoughGuilE", "cvBoxPoints", "pointPolygonTest", "intersectConvexConvex", "endLearning", "calcInverseCovAndDeterm", "grabCut", "checkMask", "initGMMs", "addTermWeights", "addEdges", "maxFlow", "inSourceSegment", "MXVNTMRMPNOPOSPURVTVVU", "PTRMRV", "NUSMSTRVPVOTOS", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "MWUNSMQMONOOPPTRUSUUSVQVOU", "MXOMOSPURVSVUUVSVM", "MXOVQVOROPPNRMSMUNVPVRTVVV", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "PUTMQV", "OVUMSSRUQVPVOUOT", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "LXPMNSNUOVRVTUUSWM", "MWQMWMNVTV", "MWNLVX", "MWNVVV", "PVRMUQ", "MWMMOKQKTMVMWK", "MWUQSPRPPQOSPURVSVUU", "MWOSUSTQRPPQOSPURVTV", "MWRPPQOSPURVTUUSTQRP", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "MWOPUPOVUV", "MXVPUSTURVPUOSPQRPTQUUVV", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "OVRPQSQURVSVTU", "MWOSPURVTUUSTQRPPQOSNY", "MXVPRPPQOSPURVTUUSTQRP", "KXMQNPOPPQPUQVSVTUUSVP", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "MWQMOSPURVTUUSTQRPPQOS", "MWUQSPRPPQOSPURVTV", "MWOSTSURUQSPRPPQOSPURVTV", "OTSMQSQURVSV", "NVTQSPQPPQPRQSRSSTSURVPVOU", "MWNPOPPQPROTOUPVRVTUURUP", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWUQSPQPOQOSPTRUSVSWRXQX", "MWUNORUV", "MWONUROV", "OUTKQKQYTY", "OUPKSKSYPY", "OUTKSLRNROSQQRSSRURVSXTY", "OUPKQLRNROQQSRQSRURVQXPY", "MWRMPNOPOSPURVTUUSUPTNRM", "MWPORMRV", "MWONQMSMUNUPTROVUV", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "PURURVSVSURU", "PUSVRVRUSUSWRY", "PTRMRQ", "NVQMPNPPQQSQTPTNSMQM", "MWVLNX", "OUTKRNQQQSRVTY", "OUPKRNSQSSRVPY", "PTRKRY", "LXNRVR", "PURQRRSRSQRQ", "PUSMRORQSQSPRP", "PUSNRNRMSMSORQ", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "NVRFRM", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "NVRBRb", "MWRQQRRSSRRQ", "MWSFRGQIQKRLSKRJ", "MWRHQGRFSGSIRKQL", "MWWRWQVOUNSMQMONNOMQMR", "MWMRMSNUOVQWSWUVVUWSWR", "LXLPNRQSSSVRXP", "RURUTTURTPRO", "RVRRUPVNVLUKTK", "NRRROPNNNLOKPK", "KYKRYR", "MWMWWM", "MWMMWW", "KYRJYNKVRZ", "JZJRNKVYZR", "KYKVKNYVYN", "JZLXJPZTXL", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "LXLLLXXXXLLL", "KYRJKVYVRJ", "JZRIPOJOOSMYRUWYUSZOTORI", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "QSRQQRRSSRRQ", "PTQPPQPSQTSTTSTQSPQP", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "NVRVQWRXSWRV", "MWQKPLPNQOSOTNTLSKQK", "NVRQQRRSSRRQ", "JZWLMRWX", "JZMLWRMX", "NVSLRMQLRKSLSNQP", "NVSKQMQORPSORNQO", "NVQLRMSLRKQLQNSP", "NVQKSMSORPQORNSO", "JZWMQMONNOMQMSNUOVQWWW", "JZMMMSNUOVQWSWUVVUWSWM", "JZMMSMUNVOWQWSVUUVSWMW", "JZMWMQNOONQMSMUNVOWQWW", "KYUBNRUb", "KYOBVROb", "MWRHSGRFQGQIRKSL", "MWQFRGSISKRLQKRJ", "MXVFTHSJSKTLUKTJ", "MXUHTGUFVGVHUJSL", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "calcBackProject", "compareHist", "cvCreateHist", "cvMakeHistHeaderForArray", "cvReleaseHist", "cvClearHist", "cvThreshHist", "cvNormalizeHist", "cvGetMinMaxHistValue", "cvCompareHist", "cvCopyHist", "cvSetHistBinRanges", "cvCalcArrHist", "cvCalcArrBackProject", "cvCalcArrBackProjectPatch", "cvCalcBayesianProb", "cvCalcProbDensity", "equalizeHist", "histPrepareImages", "calcHistLookupTables_8u", "calcSparseHist_", "calcHist_", "calcBackProj_", "calcSparseBackProj_", "HoughLinesPointSet", "cvHoughLines2", "cvHoughCircles", "HoughLinesStandard", "max_theta", "HoughLinesSDiv", "HoughLinesProbabilistic", "HoughCirclesGradient", "HoughCircleEstimateRadiusInvoker", "N2cv24HoughCirclesAccumInvokerE", "N2cv30HoughCirclesFindCentersInvokerE", "N2cv32HoughCircleEstimateRadiusInvokerINS_11NZPointListEEE", "N2cv32HoughCircleEstimateRadiusInvokerINS_10NZPointSetEEE", "remap", "convertMaps", "warpAffine", "warpPerspective", "invertAffineTransform", "getPerspectiveTransform", "getAffineTransform", "cvWarpAffine", "cvWarpPerspective", "cvRemap", "cv2DRotationMatrix", "cvGetPerspectiveTransform", "cvGetAffineTransform", "warpPolar", "cvLinearPolar", "cvLogPolar", "initInterTab2D", "initInterTab1D", "remapBilinear", "N2cv12RemapInvokerE", "N2cv17WarpAffineInvokerE", "N2cv22WarpPerspectiveInvokerE", "rotatedRectangleIntersection", "fitLine", "cvFitLine", "fitLine2D", "fitLine2D_wods", "fitLine3D", "fitLine3D_wods", "LineSegmentDetectorImpl", "region2rect", "get_theta", "refine", "rect_nfa", "drawSegments", "compareSegments", "N2cv23LineSegmentDetectorImplE", "N2cv19LineSegmentDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv23LineSegmentDetectorImplENS_9allocatorIS2_EEEE", "matchShapes", "medianBlur", "medianBlur_8u_Om", "medianBlur_8u_O1", "createConvexHull", "lineEquationDeterminedByPoints", "findVertexCOnSideB", "updateSideB", "moments", "cvMoments", "cvGetSpatialMoment", "cvGetCentralMoment", "cvGetHuMoments", "contourMoments", "getMorphologyRowFilter", "getMorphologyColumnFilter", "getMorphologyFilter", "createMorphologyFilter", "getStructuringElement", "morphologyEx", "cvCreateStructuringElementEx", "cvReleaseStructuringElement", "cvErode", "cvDilate", "cvMorphologyEx", "MorphFilter", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIhEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpItEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIsEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIfEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MinOpIdEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIhEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpItEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIsEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIfEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14MorphRowFilterINS1_5MaxOpIdEENS1_13MorphRowNoVecEEENS_9allocatorIS6_EEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIhEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpItEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIsEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIfEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MinOpIdEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIhEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpItEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIsEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIfEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17MorphColumnFilterINS1_5MaxOpIdEENS1_16MorphColumnNoVecEEENS_9allocatorIS6_EEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIhEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpItEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIsEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIfEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MinOpIdEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIhEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpItEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIsEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIfEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11MorphFilterINS1_5MaxOpIdEENS1_10MorphNoVecEEENS_9allocatorIS6_EEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "phaseCorrelate", "createHanningWindow", "magSpectrums", "divSpectrums", "weightedCentroid", "pyrDown", "pyrUp", "buildPyramid", "cvPyrDown", "cvPyrUp", "cvReleasePyramid", "cvCreatePyramid", "pyrDown_", "pyrUp_", "cvResize", "resizeGeneric_Invoker", "N2cv15resizeNNInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_23VResizeLinearVec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_23VResizeLinearVec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_22VResizeCubicVec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_22VResizeCubicVec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_25VResizeLanczos4Vec_32f16uEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_25VResizeLanczos4Vec_32f16sEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_22VResizeLanczos4Vec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_25ResizeAreaFastVec_SIMD_8uEEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_26ResizeAreaFastVec_SIMD_16uEEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_26ResizeAreaFastVec_SIMD_16sEEEEE", "N2cv22resizeAreaFast_InvokerIffNS_26ResizeAreaFastVec_SIMD_32fEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N12_GLOBAL__N_122resize_bitExactInvokerIhNS_13ufixedpoint16ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIaNS_12fixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerItNS_13ufixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIsNS_12fixedpoint32ELi2EEE", "N12_GLOBAL__N_122resize_bitExactInvokerIiNS_12fixedpoint64ELi2EEE", "rotatingCalipers", "getRectSubPix", "cvGetRectSubPix", "cvGetQuadrangleSubPix", "cvSampleLine", "watershed", "pyrMeanShiftFiltering", "minEnclosingCircle", "arcLength", "contourArea", "fitEllipse", "fitEllipseAMS", "fitEllipseDirect", "cvContourArea", "cvArcLength", "cvBoundingRect", "maskBoundingRect", "pointSetBoundingRect", "icvContourSecArea", "icvMemCopy", "cvSmooth", "createGaussianKernels", "spatialGradient", "insert", "findNearest", "checkSubdiv", "integral", "cvIntegral", "crossCorr", "cvMatchTemplate", "matchTemplateMask", "common_matchTemplate", "adaptiveThreshold", "cvThreshold", "cvAdaptiveThreshold", "thresh_16s", "threshGeneric", "thresh_32f", "thresh_64f", "N2cv15ThresholdRunnerE", "cvPointSeqFromMat", "cvCopyMakeBorder", "layer_sizes", "input_scale", "inv_output_scale", "setLayerSizes", "activation_function", "SIGMOID_SYM", "IDENTITY", "LEAKYRELU", "GAUSSIAN", "read_params", "activation_function_id", "f_param1", "f_param2", "min_val", "max_val", "min_val1", "max_val1", "training_params", "train_method", "BACKPROP", "dw_scale", "moment_scale", "RPROP", "dw_plus", "dw_minus", "dw_min", "dw_max", "ANNEAL", "initialT", "finalT", "coolingRatio", "itePerStep", "term_criteria", "epsilon", "setActivationFunction", "write_params", "opencv_ml_ann_mlp", "prepare_to_train", "calc_output_scale", "train_rprop", "simulatedAnnealingSolver", "predict", "calc_activ_func", "getWeights", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml11ANN_MLPImplENS_9allocatorIS3_EEEE", "N2cv2ml11ANN_MLPImplE", "N2cv2ml7ANN_MLPE", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "setCVFolds", "setMaxDepth", "ntrees", "opencv_ml_dtree", "updateWeightsAndTrim", "setMaxCategories", "setRegressionAccuracy", "boosting_type", "DiscreteAdaboost", "RealAdaboost", "LogitBoost", "GentleAdaboost", "Unknown", "weight_trimming_rate", "opencv_ml_boost", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9BoostImplENS_9allocatorIS3_EEEE", "N2cv2ml9BoostImplE", "N2cv2ml5BoostE", "N2cv2ml6DTreesE", "N2cv2ml18DTreesImplForBoostE", "getSubMatrix", "loadCSV", "setVarTypes", "preprocessCategorical", "getSample", "getValues", "getNormCatValues", "getCatCount", "setTrainTestSplit", "setTrainTestSplitRatio", "shuffleTrainTest", "getNames", "N2cv2ml9TrainDataE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13TrainDataImplENS_9allocatorIS3_EEEE", "N2cv2ml13TrainDataImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml6EMImplENS_9allocatorIS3_EEEE", "N2cv2ml6EMImplE", "N2cv2ml2EME", "covs", "nclusters", "cov_mat_type", "spherical", "diagonal", "generic", "decomposeCovs", "computeLogWeightDivDet", "opencv_ml_em", "computeProbabilities", "setClustersNumber", "setCovarianceMatrixType", "predict2", "checkTrainData", "probs", "doTrain", "clusterTrainSamples", "randMVNormal", "Cholesky", "N2cv2ml9StatModelE", "N2cv2ml17ParallelCalcErrorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9ParamGridENS_9allocatorIS3_EEEE", "findOrthoRange", "getPoints", "getPoint", "medianPartition", "opencv_ml_knn", "opencv_ml_knn_kd", "is_classifier", "default_k", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml12KNearestImplENS_9allocatorIS3_EEEE", "N2cv2ml12KNearestImplE", "N2cv2ml8KNearestE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml14BruteForceImplENS_9allocatorIS3_EEEE", "N2cv2ml14BruteForceImplE", "N2cv2ml4ImplE", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10KDTreeImplENS_9allocatorIS3_EEEE", "N2cv2ml10KDTreeImplE", "compute_cost", "compute_gradient", "mini_batch_gradient_descent", "remap_labels", "alpha", "mini_batch_size", "learnt_thetas", "n_labels", "o_labels", "opencv_ml_lr", "N2cv2ml22LogisticRegressionImplE", "N2cv2ml18LogisticRegressionE", "N2cv2ml43LogisticRegressionImpl_ComputeDradient_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml22LogisticRegressionImplENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml25NormalBayesClassifierImplENS_9allocatorIS3_EEEE", "N2cv2ml25NormalBayesClassifierImplE", "N2cv2ml21NormalBayesClassifierE", "var_all", "cls_labels", "productsum", "inv_eigen_values", "cov_rotate_mats", "opencv_ml_nbayes", "predictProb", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "oob_error", "var_importance", "nactive_vars", "opencv_ml_rtrees", "getVotes", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10RTreesImplENS_9allocatorIS3_EEEE", "N2cv2ml10RTreesImplE", "N2cv2ml6RTreesE", "N2cv2ml19DTreesImplForRTreesE", "class_count", "class_labels", "class_weights", "uncompressed_support_vectors", "decision_functions", "sv_count", "optimize_linear", "svm_type", "svmType", "C_SVC", "ONE_CLASS", "EPS_SVR", "NU_SVR", "kernel", "LINEAR", "POLY", "SIGMOID", "CHI2", "INTER", "degree", "coef0", "checkParams", "calc", "opencv_ml_svm", "do_train", "solve_eps_svr", "solve_nu_svr", "sortSamplesByClasses", "trainAuto", "checkParamGrid", "getDecisionFunction", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13SVMKernelImplENS_9allocatorIS3_EEEE", "N2cv2ml13SVMKernelImplE", "N2cv2ml3SVM6KernelE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml7SVMImplENS_9allocatorIS3_EEEE", "N2cv2ml7SVMImplE", "N2cv2ml3SVME", "N2cv2ml7SVMImpl11PredictBodyE", "N2cv2ml7SVMImpl13TrainAutoBodyE", "normalizeSamples", "calcShift", "shift", "ASGD", "svmsgdType", "SOFT_MARGIN", "HARD_MARGIN", "marginType", "marginRegularization", "initialStepSize", "stepDecreasingPower", "readParams", "setOptimalParameters", "opencv_ml_svmsgd", "N2cv2ml10SVMSGDImplE", "N2cv2ml6SVMSGDE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10SVMSGDImplENS_9allocatorIS3_EEEE", "createConcentricSpheresTestSet", "startTraining", "initCompVarIdx", "addTree", "addNodeAndTrySplit", "findBestSplit", "calcValue", "findSplitCatClass", "calcDir", "predictTrees", "use_surrogates", "max_categories", "regression_accuracy", "max_depth", "min_sample_count", "cross_validation_folds", "use_1se_rule", "priors", "ord_var_count", "cat_var_count", "global_var_idx", "var_type", "cat_ofs", "cat_map", "missing_subst", "quality", "not_in", "norm_class_idx", "splits", "cat_count", "readSplit", "N2cv2ml10DTreesImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImpl8WorkDataENS_9allocatorIS4_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImplENS_9allocatorIS3_EEEE", "max_bits", "exclude_range", "calculateShift", "NSt6__ndk120__shared_ptr_emplaceIN2cv12AlignMTBImplENS_9allocatorIS2_EEEE", "N2cv12AlignMTBImplE", "N2cv8AlignMTBE", "N2cv14AlignExposuresE", "CalibrateDebevec", "random", "process", "CalibrateRobertson", "max_iter", "NSt6__ndk120__shared_ptr_emplaceIN2cv20CalibrateDebevecImplENS_9allocatorIS2_EEEE", "N2cv20CalibrateDebevecImplE", "N2cv16CalibrateDebevecE", "N2cv12CalibrateCRFE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22CalibrateRobertsonImplENS_9allocatorIS2_EEEE", "N2cv22CalibrateRobertsonImplE", "N2cv18CalibrateRobertsonE", "decolor", "denoise_TVL1", "fastNlMeansDenoising", "fastNlMeansDenoisingColored", "fastNlMeansDenoisingMulti", "fastNlMeansDenoisingColoredMulti", "fastNlMeansDenoisingMultiCheckPreconditions", "fastNlMeansDenoising_", "FastNlMeansDenoisingInvoker", "fastNlMeansDenoisingMulti_", "FastNlMeansMultiDenoisingInvoker", "checkImageDimensions", "icvInpaint", "NSt6__ndk120__shared_ptr_pointerIP5CvMatN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI5CvMatEE", "NSt6__ndk120__shared_ptr_pointerIP14_IplConvKernelN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI14_IplConvKernelEE", "NSt6__ndk120__shared_ptr_emplaceI20CvPriorityQueueFloatNS_9allocatorIS1_EEEE", "MergeDebevec", "MergeMertens", "contrast_weight", "saturation_weight", "exposure_weight", "MergeRobertson", "N2cv16MergeDebevecImplE", "N2cv12MergeDebevecE", "N2cv14MergeExposuresE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16MergeMertensImplENS_9allocatorIS2_EEEE", "N2cv16MergeMertensImplE", "N2cv12MergeMertensE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18MergeRobertsonImplENS_9allocatorIS2_EEEE", "N2cv18MergeRobertsonImplE", "N2cv14MergeRobertsonE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TonemapImplENS_9allocatorIS2_EEEE", "Tonemap", "TonemapDrago", "saturation", "TonemapReinhard", "intensity", "light_adapt", "color_adapt", "TonemapMantiuk", "N2cv11TonemapImplE", "N2cv7TonemapE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16TonemapDragoImplENS_9allocatorIS2_EEEE", "N2cv16TonemapDragoImplE", "N2cv12TonemapDragoE", "NSt6__ndk120__shared_ptr_emplaceIN2cv19TonemapReinhardImplENS_9allocatorIS2_EEEE", "N2cv19TonemapReinhardImplE", "N2cv15TonemapReinhardE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18TonemapMantiukImplENS_9allocatorIS2_EEEE", "N2cv18TonemapMantiukImplE", "N2cv14TonemapMantiukE", "MapKey::GetStringValue", "N17opencv_tensorflow19AttrValue_ListValueE", "N17opencv_tensorflow9AttrValueE", "N17opencv_tensorflow12NameAttrListE", "N17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEEE", "N6google8protobuf16RepeatedPtrFieldINS0_7MessageEEE", "N6google8protobuf8internal20RepeatedPtrFieldBaseE", "N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE", "N6google8protobuf3MapINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEE8InnerMapE", "N6google8protobuf4hashINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "N17opencv_tensorflow18FunctionDefLibraryE", "N17opencv_tensorflow16FunctionDef_NodeE", "N17opencv_tensorflow11FunctionDefE", "N17opencv_tensorflow11GradientDefE", "N17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "N17opencv_tensorflow8GraphDefE", "N17opencv_tensorflow7NodeDefE", "N17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "N17opencv_tensorflow12OpDef_ArgDefE", "N17opencv_tensorflow13OpDef_AttrDefE", "N17opencv_tensorflow5OpDefE", "N17opencv_tensorflow13OpDeprecationE", "N17opencv_tensorflow6OpListE", "N17opencv_tensorflow11TensorProtoE", "N17opencv_tensorflow20TensorShapeProto_DimE", "N17opencv_tensorflow16TensorShapeProtoE", "N17opencv_tensorflow10VersionDefE", "N12opencv_caffe9BlobShapeE", "N12opencv_caffe9BlobProtoE", "N12opencv_caffe15BlobProtoVectorE", "N12opencv_caffe16PermuteParameterE", "N12opencv_caffe22NormalizeBBoxParameterE", "N12opencv_caffe17PriorBoxParameterE", "N12opencv_caffe24DetectionOutputParameterE", "N12opencv_caffe5DatumE", "N12opencv_caffe15FillerParameterE", "N12opencv_caffe12NetParameterE", "N12opencv_caffe15SolverParameterE", "N12opencv_caffe11SolverStateE", "N12opencv_caffe8NetStateE", "N12opencv_caffe12NetStateRuleE", "N12opencv_caffe9ParamSpecE", "N12opencv_caffe14LayerParameterE", "N12opencv_caffe23TransformationParameterE", "N12opencv_caffe13LossParameterE", "N12opencv_caffe17AccuracyParameterE", "N12opencv_caffe15ArgMaxParameterE", "N12opencv_caffe15ConcatParameterE", "N12opencv_caffe18BatchNormParameterE", "N12opencv_caffe13BiasParameterE", "N12opencv_caffe24ContrastiveLossParameterE", "N12opencv_caffe20ConvolutionParameterE", "N12opencv_caffe13CropParameterE", "N12opencv_caffe13DataParameterE", "N12opencv_caffe30NonMaximumSuppressionParameterE", "N12opencv_caffe19SaveOutputParameterE", "N12opencv_caffe16DropoutParameterE", "N12opencv_caffe18DummyDataParameterE", "N12opencv_caffe16EltwiseParameterE", "N12opencv_caffe12ELUParameterE", "N12opencv_caffe14EmbedParameterE", "N12opencv_caffe12ExpParameterE", "N12opencv_caffe16FlattenParameterE", "N12opencv_caffe17HDF5DataParameterE", "N12opencv_caffe19HDF5OutputParameterE", "N12opencv_caffe18HingeLossParameterE", "N12opencv_caffe18ImageDataParameterE", "N12opencv_caffe21InfogainLossParameterE", "N12opencv_caffe21InnerProductParameterE", "N12opencv_caffe14InputParameterE", "N12opencv_caffe12LogParameterE", "N12opencv_caffe12LRNParameterE", "N12opencv_caffe19MemoryDataParameterE", "N12opencv_caffe12MVNParameterE", "N12opencv_caffe18ParameterParameterE", "N12opencv_caffe16PoolingParameterE", "N12opencv_caffe14PowerParameterE", "N12opencv_caffe15PythonParameterE", "N12opencv_caffe18RecurrentParameterE", "N12opencv_caffe18ReductionParameterE", "N12opencv_caffe13ReLUParameterE", "N12opencv_caffe16ReshapeParameterE", "N12opencv_caffe14ScaleParameterE", "N12opencv_caffe16SigmoidParameterE", "N12opencv_caffe14SliceParameterE", "N12opencv_caffe16SoftmaxParameterE", "N12opencv_caffe13TanHParameterE", "N12opencv_caffe13TileParameterE", "N12opencv_caffe18ThresholdParameterE", "N12opencv_caffe19WindowDataParameterE", "N12opencv_caffe12SPPParameterE", "N12opencv_caffe16V1LayerParameterE", "N12opencv_caffe16V0LayerParameterE", "N12opencv_caffe14PReLUParameterE", "N12opencv_caffe14NormalizedBBoxE", "N12opencv_caffe19ROIPoolingParameterE", "N12opencv_caffe17ProposalParameterE", "N12opencv_caffe21PSROIPoolingParameterE", "N11opencv_onnx14AttributeProtoE", "N11opencv_onnx14ValueInfoProtoE", "N11opencv_onnx9NodeProtoE", "N11opencv_onnx10ModelProtoE", "N11opencv_onnx22StringStringEntryProtoE", "N11opencv_onnx10GraphProtoE", "N11opencv_onnx19TensorProto_SegmentE", "N11opencv_onnx11TensorProtoE", "N11opencv_onnx26TensorShapeProto_DimensionE", "N11opencv_onnx16TensorShapeProtoE", "N11opencv_onnx16TypeProto_TensorE", "N11opencv_onnx9TypeProtoE", "N11opencv_onnx18OperatorSetIdProtoE", "use_global_stats", "populateNet", "ConvolutionDepthwise", "_param", "extractCustomParams", "addParam", "extractBinaryLayerParams", "blobFromProto", "addOutput", "addInput", "N6google8protobuf8internal16FunctionClosure1IPKNS0_15FieldDescriptorEEE", "UpgradeV0PaddingLayers", "CHECK", "conv", "UpgradeV0LayerParameter", "innerproduct", "dropout", "hdf5_data", "window_data", "infogain_loss", "hdf5_output", "bnll", "euclidean_loss", "im2col", "multinomial_logistic_loss", "relu", "sigmoid", "softmax_loss", "tanh", "UpgradeV0LayerType", "UpgradeNetAsNeeded", "UpgradeV1Net", "UpgradeV1LayerParameter", "AbsVal", "ArgMax", "BNLL", "ContrastiveLoss", "Deconvolution", "DummyData", "EuclideanLoss", "Eltwise", "Flatten", "HDF5Data", "HDF5Output", "HingeLoss", "Im2col", "ImageData", "InfogainLoss", "InnerProduct", "MemoryData", "MultinomialLogisticLoss", "Sigmoid", "SigmoidCrossEntropyLoss", "Silence", "SoftmaxWithLoss", "TanH", "WindowData", "UpgradeV1LayerType", "ReadProtoFromTextFile", "ReadProtoFromBinaryFile", "ReadNetParamsFromTextFileOrDie", "ReadNetParamsFromTextBufferOrDie", "ReadNetParamsFromBinaryFileOrDie", "ReadNetParamsFromBinaryBufferOrDie", "NSt6__ndk114basic_ifstreamIcNS_11char_traitsIcEEEE", "shrinkCaffeModel", "readNetFromDarknet", "N2cv3dnn14dnn4_v2018122112BufferStreamE", "ReadDarknetFromCfgStream", "convolutional", "filters", "activation", "batch_normalize", "leaky", "flipped", "maxpool", "avgpool", "route", "layers", "reorg", "coords", "shortcut", "upsample", "yolo", "ReadDarknetFromWeightsStream", "bias_term", "has_weight", "negative_slope", "kernel_size", "num_output", "global_pooling", "Reorg", "reorg_stride", "Permute", "softmax_tree", "detection_out", "zoom_factor", "interpolation", "nearest", "OPENCV_DNN_BACKEND_DEFAULT", "OPENCV_DNN_CHECK_NAN_INF", "OPENCV_DNN_CHECK_NAN_INF_DUMP", "OPENCV_DNN_CHECK_NAN_INF_RAISE_ERROR", "scalefactor", "blobFromImages", "imagesFromBlob", "readFromModelOptimizer", "addLayer", "connect", "forward", "backendId", "targetId", "setInput", "getParam", "setParam", "getLayerInputs", "getFLOPS", "getMemoryConsumption", "initVkCom", "initHalide", "initInfEngine", "getMemoryShapes", "registerLayer", "createLayerInstance", "caffe", "caffemodel", "tensorflow", "pbtxt", "darknet", "dldt", "onnx", "readNet", "getPlane", "_input", "__NetInputLayer__", "finalize", "addLayerInput", "setUpNet", "allocateLayers", "allocateLayer", "wrap", "OpenCLBackendWrapper", "wrapMat", "allocateBlobsForLayer", "numReferences", "reuse", "addHost", "releaseReference", "ChannelsPReLU", "ReLU6", "fuseLayers", "biasLayerData", "update", "initBackend", "initHalideBackend", "initInfEngineBackend", "initVkComBackend", "forwardLayer", "getLayerData", "getBlob", "getLayerInstance", "N2cv3dnn14dnn4_v201812215LayerE", "N2cv3dnn14dnn4_v2018122111BackendNodeE", "N2cv3dnn14dnn4_v2018122114BackendWrapperE", "N2cv3dnn14dnn4_v201812219DataLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201812219DataLayerENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201812219DataLayerEEE", "N2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120OpenCLBackendWrapperEEE", "N2cv3dnn14dnn4_v2018122115ActivationLayerE", "N2cv3dnn14dnn4_v2018122112EltwiseLayerE", "N2cv3dnn14dnn4_v2018122112PoolingLayerE", "N2cv3dnn14dnn4_v2018122111ConcatLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201812213Net4ImplENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201812213Net4ImplEEE", "Interp", "CropAndResize", "PSROIPooling", "MaxUnpool", "Const", "ShuffleChannel", "PriorBoxClustered", "DetectionOutput", "NormalizeBBox", "BatchNormLayerImpl", "scale_bias", "N2cv3dnn18BatchNormLayerImplE", "N2cv3dnn14dnn4_v2018122114BatchNormLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18BatchNormLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn18BatchNormLayerImplEEE", "scale_train", "dropout_ratio", "N2cv3dnn14BlankLayerImplE", "N2cv3dnn14dnn4_v2018122110BlankLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14BlankLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14BlankLayerImplEEE", "N2cv3dnn15ConcatLayerImplE", "N2cv3dnn15ConcatLayerImpl20ChannelConcatInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ConcatLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15ConcatLayerImplEEE", "ConstLayerImpl", "N2cv3dnn14ConstLayerImplE", "N2cv3dnn14dnn4_v2018122110ConstLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ConstLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ConstLayerImplEEE", "N2cv3dnn20ConvolutionLayerImplE", "N2cv3dnn24BaseConvolutionLayerImplE", "N2cv3dnn14dnn4_v2018122116ConvolutionLayerE", "N2cv3dnn14dnn4_v2018122120BaseConvolutionLayerE", "BaseConvolutionLayerImpl", "adj_h", "adj_w", "fuseWeights", "VALID", "SAME", "N2cv3dnn14dnn4_v201812219ReLULayerE", "N2cv3dnn14dnn4_v2018122118ChannelsPReLULayerE", "N2cv3dnn20ConvolutionLayerImpl12ParallelConvE", "N2cv3dnn22DeConvolutionLayerImplE", "N2cv3dnn22DeConvolutionLayerImpl13MatMulInvokerE", "N2cv3dnn22DeConvolutionLayerImpl13Col2ImInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn20ConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn20ConvolutionLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22DeConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22DeConvolutionLayerImplEEE", "CropAndResizeLayerImpl", "N2cv3dnn22CropAndResizeLayerImplE", "N2cv3dnn14dnn4_v2018122118CropAndResizeLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22CropAndResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22CropAndResizeLayerImplEEE", "N2cv3dnn13CropLayerImplE", "N2cv3dnn14dnn4_v201812219CropLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13CropLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn13CropLayerImplEEE", "share_location", "background_label_id", "variance_encoded_in_target", "keep_top_k", "confidence_threshold", "loc_pred_transposed", "normalized_bbox", "group_by_classes", "nms_threshold", "DetectionOutputLayerImpl", "getParameter", "code_type", "center_size", "CENTER_SIZE", "CORNER", "GetLocPredictions", "DecodeBBoxesAll", "DecodeBBoxes", "DecodeBBox", "processDetections_", "NMSFast_", "outputDetections_", "N2cv3dnn24DetectionOutputLayerImplE", "N2cv3dnn14dnn4_v2018122120DetectionOutputLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn24DetectionOutputLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn24DetectionOutputLayerImplEEE", "min_value", "max_value", "power", "ReLU6Functor", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEEE", "N2cv3dnn14dnn4_v2018122110ReLU6LayerE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEEE", "N2cv3dnn14dnn4_v201812219TanHLayerE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEEE", "N2cv3dnn14dnn4_v2018122112SigmoidLayerE", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEEE", "N2cv3dnn14dnn4_v201812218ELULayerE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEEE", "N2cv3dnn14dnn4_v201812218AbsLayerE", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEEE", "N2cv3dnn14dnn4_v201812219BNLLLayerE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEEE", "N2cv3dnn14dnn4_v2018122110PowerLayerE", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEEE", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEE5PBodyE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEEEE", "prod", "EltwiseLayerImpl", "coeff", "N2cv3dnn16EltwiseLayerImplE", "N2cv3dnn16EltwiseLayerImpl14EltwiseInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16EltwiseLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16EltwiseLayerImplEEE", "N2cv3dnn16FlattenLayerImplE", "N2cv3dnn14dnn4_v2018122112FlattenLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16FlattenLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16FlattenLayerImplEEE", "FullyConnectedLayerImpl", "N2cv3dnn23FullyConnectedLayerImplE", "N2cv3dnn14dnn4_v2018122117InnerProductLayerE", "N2cv3dnn23FullyConnectedLayerImpl14FullyConnectedE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23FullyConnectedLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn23FullyConnectedLayerImplEEE", "getKernelSize", "pad_l", "pad_t", "getStrideAndPadding", "getPoolingKernelParams", "getConvolutionKernelParams", "getConvPoolOutParams", "norm_region", "ACROSS_CHANNELS", "WITHIN_CHANNEL", "LRNLayerImpl", "norm_by_size", "N2cv3dnn12LRNLayerImplE", "N2cv3dnn14dnn4_v201812218LRNLayerE", "N2cv3dnn12LRNLayerImpl10ChannelLRNE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12LRNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12LRNLayerImplEEE", "pool_pad_w", "pool_pad_h", "pool_stride_w", "pool_stride_h", "N2cv3dnn18MaxUnpoolLayerImplE", "N2cv3dnn14dnn4_v2018122114MaxUnpoolLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18MaxUnpoolLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn18MaxUnpoolLayerImplEEE", "across_channels", "N2cv3dnn12MVNLayerImplE", "N2cv3dnn14dnn4_v201812218MVNLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12MVNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12MVNLayerImplEEE", "start_axis", "NormalizeBBoxLayerImpl", "N2cv3dnn22NormalizeBBoxLayerImplE", "N2cv3dnn14dnn4_v2018122118NormalizeBBoxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22NormalizeBBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn22NormalizeBBoxLayerImplEEE", "input_dims", "PaddingLayerImpl", "reflect", "padTop", "inpHeight", "padBottom", "padLeft", "inpWidth", "padRight", "N2cv3dnn16PaddingLayerImplE", "N2cv3dnn14dnn4_v2018122112PaddingLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PaddingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PaddingLayerImplEEE", "PermuteLayerImpl", "N2cv3dnn16PermuteLayerImplE", "N2cv3dnn14dnn4_v2018122112PermuteLayerE", "N2cv3dnn16PermuteLayerImpl14PermuteInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PermuteLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PermuteLayerImplEEE", "PoolingLayerImpl", "output_dim", "group_size", "ceil_mode", "spatial_scale", "ave_pool_padded_area", "N2cv3dnn16PoolingLayerImplE", "N2cv3dnn16PoolingLayerImpl14PoolingInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PoolingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PoolingLayerImplEEE", "PriorBoxLayerImpl", "step_h", "step_w", "aspect_ratio", "varianceParameterRetrieved", "getVariance", "N2cv3dnn17PriorBoxLayerImplE", "N2cv3dnn14dnn4_v2018122113PriorBoxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17PriorBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn17PriorBoxLayerImplEEE", "base_size", "pre_nms_topn", "post_nms_topn", "nms_thresh", "getObjectScores", "N2cv3dnn17ProposalLayerImplE", "N2cv3dnn14dnn4_v2018122113ProposalLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17ProposalLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn17ProposalLayerImplEEE", "N2cv3dnn14dnn4_v201812219LSTMLayerE", "LSTMLayerImpl", "use_timestamp_dim", "produce_cell_output", "forget_bias", "use_cell_clip", "use_peephole", "setWeights", "setOutShape", "setUseTimstampsDim", "setProduceCellOutput", "N2cv3dnn13LSTMLayerImplE", "N2cv3dnn12RNNLayerImplE", "N2cv3dnn14dnn4_v201812218RNNLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13LSTMLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn13LSTMLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12RNNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn12RNNLayerImplEEE", "RegionLayerImpl", "N2cv3dnn15RegionLayerImplE", "N2cv3dnn14dnn4_v2018122111RegionLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15RegionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15RegionLayerImplEEE", "ReorgLayerImpl", "N2cv3dnn14ReorgLayerImplE", "N2cv3dnn14dnn4_v2018122110ReorgLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ReorgLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ReorgLayerImplEEE", "ReshapeLayerImpl", "computeShapeByReshapeMask", "N2cv3dnn16ReshapeLayerImplE", "N2cv3dnn14dnn4_v2018122112ReshapeLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ReshapeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16ReshapeLayerImplEEE", "bilinear", "zoom_factor_x", "zoom_factor_y", "align_corners", "N2cv3dnn15ResizeLayerImplE", "N2cv3dnn14dnn4_v2018122111ResizeLayerE", "N2cv3dnn15InterpLayerImplE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15ResizeLayerImplEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15InterpLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15InterpLayerImplEEE", "N2cv3dnn14ScaleLayerImplE", "N2cv3dnn14dnn4_v2018122110ScaleLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ScaleLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14ScaleLayerImplEEE", "N2cv3dnn23ShuffleChannelLayerImplE", "N2cv3dnn14dnn4_v2018122119ShuffleChannelLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23ShuffleChannelLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn23ShuffleChannelLayerImplEEE", "slice_point", "begin", "SliceLayerImpl", "clamp", "N2cv3dnn14SliceLayerImplE", "N2cv3dnn14dnn4_v2018122110SliceLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SliceLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14SliceLayerImplEEE", "N2cv3dnn16SoftMaxLayerImplE", "N2cv3dnn14dnn4_v2018122112SoftmaxLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16SoftMaxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn16SoftMaxLayerImplEEE", "top_count", "SplitLayerImpl", "N2cv3dnn14SplitLayerImplE", "N2cv3dnn14dnn4_v2018122110SplitLayerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SplitLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14SplitLayerImplEEE", "NMSBoxes", "getMatFromTensor", "runLayer", "kernel_shape", "getLayerParams", "pads", "auto_pad", "SAME_UPPER", "SAME_LOWER", "dilations", "dilation_h", "dilation_w", "MaxPool", "pytorch", "GlobalAveragePool", "ImageScaler", "LeakyRelu", "Gemm", "transB", "MatMul", "Conv", "ConvTranspose", "Unsqueeze", "Gather", "readTensorFromONNX", "ONNXImporter", "convertInt64ToInt32", "NSt6__ndk113basic_fstreamIcNS_11char_traitsIcEEEE", "getCanonicalSize", "forwardInfEngine", "sortByExecutionOrder", "RefMerge", "Rsqrt", "FusedBatchNorm", "addNodeToMatch", "setFusedNode", "getInputNode", "StridedSlice", "RealDiv", "Minimum", "Maximum", "Relu6", "L2Normalize", "Conv2DBackpropInput", "ResizeBilinear", "ResizeNearestNeighbor", "replace", "N2cv3dnn14dnn4_v2018122117BatchNormSubgraphE", "N2cv3dnn14dnn4_v201812218SubgraphE", "N2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphE", "N2cv3dnn14dnn4_v2018122115FlattenSubgraphE", "N2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphE", "N2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphE", "N2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphE", "N2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphE", "N2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphE", "N2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphE", "N2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphE", "N2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphE", "N2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphE", "N2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122117BatchNormSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122117BatchNormSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122124BatchNormNoGammaSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122115FlattenSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122115FlattenSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120FlattenShapeSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120SoftMaxKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122118ReLU6KerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122120ReshapeKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122119L2NormalizeSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122131DeconvolutionValidKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122130DeconvolutionSameKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122122ResizeBilinearSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122123UpsamplingKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122122ReshapeAsShapeSubgraphEEE", "writeTextGraph", "Conv2D", "SpaceToBatchND", "DepthwiseConv2dNative", "BiasAdd", "BatchToSpaceND", "Squeeze", "squeeze_dims", "depth_radius", "ConcatV2", "AvgPool", "Placeholder", "is_training", "BlockLSTM", "PriorBox", "Mean", "keep_dims", "ClipByValue", "Tanh", "data_format", "NHWC", "channels_last", "channels_first", "getDataLayout", "Dequantize", "addConstNodes", "MIN_FIRST", "predictOutputDataLayout", "parseDims", "blobShapeFromTensor", "getConstBlob", "parseTensor", "blobFromTensor", "kernelFromTensor", "setStrides", "toNCHW", "setKSize", "ReadTFNetParamsFromBinaryFileOrDie", "ReadTFNetParamsFromBinaryBufferOrDie", "ReadTFNetParamsFromTextFileOrDie", "ReadTFNetParamsFromTextBufferOrDie", "THDiskFile_nativeEndianEncoding", "THDiskFile_littleEndianEncoding", "THDiskFile_bigEndianEncoding", "THDiskFile_longSize", "THDiskFile_noBuffer", "THDiskFile_new", "THDiskFile_readByte", "THDiskFile_readChar", "THDiskFile_readShort", "THDiskFile_readInt", "THDiskFile_readLong", "THDiskFile_readFloat", "THDiskFile_readDouble", "THDiskFile_readString", "THDiskFile_seek", "THDiskFile_seekEnd", "THDiskFile_position", "THDiskFile_close", "readTorchBlob", "TorchImporter", "readObject", "torch_index", "Sequential", "Parallel", "ConcatTable", "JoinTable", "DepthConcat", "Inception", "inputDimension", "outputDimension", "dimension", "SpatialConvolution", "SpatialConvolutionMM", "readTorchObject", "nOutputPlane", "SpatialLPPooling", "SpatialMaxPooling", "SpatialAveragePooling", "indices_blob_id", "count_include_pad", "batchMode", "SpatialBatchNormalization", "InstanceNormalization", "running_mean", "running_var", "running_std", "SpatialDropout", "TotalVariation", "nInputDim", "SpatialDilatedConvolution", "dilationW", "dilationH", "SpatialFullConvolution", "SpatialMaxUnpooling", "LogSoftMax", "SpatialCrossMapLRN", "Sqrt", "MulConstant", "constant_scalar", "SpatialZeroPadding", "SpatialReflectionPadding", "ShaveImage", "SpatialUpSamplingNearest", "scale_factor", "Cuda", "parseTorchType", "readTorchTensor", "readTorchStorage", "readTorchTable", "torchMerge", "torchSplit", "torchReshape", "torchCAddTable", "torchMaxUnpooling", "NSt6__ndk120__shared_ptr_pointerIPN2TH8THFile__EPFvS3_ENS_9allocatorIS2_EEEE", "PFvPN2TH8THFile__EE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv3dnn14dnn4_v2018122113TorchImporter6ModuleENS_9allocatorIS5_EEEE", "main", "main", "global_size", "gl_NumWorkGroups", "gl_GlobalInvocationID", "index", "pushBlock", "channels", "in_h", "in_w", "out_h", "out_w", "padding_h", "padding_w", "filter_h", "filter_w", "stride_h", "stride_w", "total", "padded_area", "hstart", "wstart", "hend", "wend", "pool_size", "aveval", "Input0", "in_buffer", "Output", "out_buffer", "main", "main", "index", "gl_GlobalInvocationID", "pushBlock", "out_concat_axis", "accumulated_concat_axis", "concat_size", "total_concat_size", "thread_num", "concat_num", "concat_index", "out_index", "Output", "data", "Input0", "data", "main", "main", "gl_GlobalInvocationID", "pushBlock", "in_h", "in_w", "out_h", "out_w", "stride_h", "stride_w", "pad_h", "pad_w", "filter_h", "filter_w", "dilation_h", "dilation_w", "channels", "batch", "has_bias", "output_y", "output_x", "org_y", "org_x", "weight_off", "input_off", "Input0", "image_data", "Input3", "weight_data", "offset", "Input1", "bias_data", "Output", "convolved_image_data", "main", "main", "gl_GlobalInvocationID", "pushBlock", "in_h", "in_w", "out_h", "out_w", "stride_h", "stride_w", "pad_h", "pad_w", "filter_h", "filter_w", "dilation_h", "dilation_w", "channels", "batch", "has_bias", "org_y", "org_x", "weight_off", "input_off", "Input0", "in_buffer", "Input3", "weight_data", "offset", "Output", "out_buffer", "Input1", "bias_data", "main", "main", "gl_GlobalInvocationID", "gl_NumWorkGroups", "index", "pushBlock", "thread_num", "channels", "height", "width", "filter_len", "radius", "alpha", "bias", "negative_beta", "offset", "channel_off", "head", "accum_scale", "min_val", "Input0", "in_buffer", "scale_val", "Output", "dst_buffer", "main", "main", "global_size", "gl_NumWorkGroups", "gl_GlobalInvocationID", "index", "pushBlock", "channels", "in_h", "in_w", "out_h", "out_w", "padding_h", "padding_w", "filter_h", "filter_w", "stride_h", "stride_w", "total", "need_mask", "hstart", "wstart", "hend", "wend", "maxval", "maxidx", "Input0", "in_buffer", "Output", "out_buffer", "Mask", "mask_buffer", "main", "main", "gl_GlobalInvocationID", "pushBlock", "nthreads", "num_axes", "global_size", "old_pos", "new_pos", "order", "Input1", "permute_order", "Input3", "new_stride", "Input2", "old_stride", "Output", "out_buffer", "Input0", "in_buffer", "main", "main", "index", "gl_GlobalInvocationID", "pushBlock", "global_size", "nthreads", "step_x", "step_y", "offset_x_size", "width_size", "layer_w", "image_h", "image_w", "clip", "variance_off", "output_offset", "box_w", "Input2", "widths", "box_h", "Input3", "heights", "center_x", "Input0", "offset_x", "center_y", "Input1", "offset_y", "outer", "start", "Output", "out_buffer", "Input4", "variance", "main", "main", "gl_GlobalInvocationID", "pushBlock", "total", "slope", "in_val", "inbuf", "in_buffer", "outbuf", "out_buffer", "gl_NumWorkGroups", "main", "main", "gl_GlobalInvocationID", "pushBlock", "channel_size", "outer_size", "channels", "logsoftmax", "global_off", "reduced_buffer_off", "index", "buf1", "max_buffer", "buf0", "input_buffer", "buf2", "sum_buffer", "exp_val", "buf3", "output_buffer", "OPENCV_IO_MAX_IMAGE_WIDTH", "OPENCV_IO_MAX_IMAGE_HEIGHT", "OPENCV_IO_MAX_IMAGE_PIXELS", "imwrite", "imencode", "validateInputImageSize", "imwrite_", "imdecode_", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrDecoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrEncoderENS_9allocatorIS2_EEEE", "N2cv12_GLOBAL__N_116ByteStreamBufferE", "validateToInt", "throwOnEror", "N2cv16BaseImageDecoderE", "N2cv16BaseImageEncoderE", "readData", "N2cv10BmpDecoderE", "N2cv10BmpEncoderE", "N2cv10ExrDecoderE", "N2cv10ExrEncoderE", "N2cv10HdrDecoderE", "N2cv10HdrEncoderE", "N2cv11JpegDecoderE", "N2cv11JpegEncoderE", "N2cv13Jpeg2KDecoderE", "N2cv13Jpeg2KEncoderE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13Jpeg2KDecoderEPFvS3_ENS_9allocatorIS2_EEEE", "PFvPN2cv13Jpeg2KDecoderEE", "basic_conversion", "N2cv24RBS_BAD_HEADER_ExceptionE", "N2cv10PAMDecoderE", "N2cv10PAMEncoderE", "ENDHDR", "HEIGHT", "WIDTH", "DEPTH", "MAXVAL", "TUPLTYPE", "read_number", "N2cv10PFMDecoderE", "N2cv10PFMEncoderE", "decoder", "readDataFromBuf", "writeDataToBuf", "N2cv10PngDecoderE", "N2cv10PngEncoderE", "PxMEncoder", "ReadNumber", "N2cv10PxMDecoderE", "N2cv10PxMEncoderE", "N2cv16SunRasterDecoderE", "N2cv16SunRasterEncoderE", "N2cv11TiffDecoderE", "N2cv11TiffEncoderE", "OPENCV_IMGCODECS_WEBP_MAX_FILE_SIZE", "fs_size", "WEBP_HEADER_SIZE", "param_maxFileSize", "N2cv11WebPDecoderE", "N2cv11WebPEncoderE", "NSt6__ndk120__shared_ptr_pointerIPhPFvPvENS_9allocatorIhEEEE", "PFvPvE", "readBlock", "setPos", "getPos", "skip", "getByte", "getBytes", "writeBlock", "putBytes", "N2cv23RBS_THROW_EOS_ExceptionE", "N2cv11RBaseStreamE", "N2cv12RLByteStreamE", "N2cv12RMByteStreamE", "N2cv11WBaseStreamE", "N2cv12WLByteStreamE", "N2cv12WMByteStreamE", "rgbe_error", "OPENCV_VIDEOCAPTURE_DEBUG", "OPENCV_VIDEOWRITER_DEBUG", "CAP_ANY", "VideoBackendRegistry", "OPENCV_VIDEOIO_PRIORITY_LIST", "CV_IMAGES", "CV_MJPEG", "getBackendName", "propId", "N2cv12VideoCaptureE", "N2cv11VideoWriterE", "NSt6__ndk120__shared_ptr_pointerIP9CvCaptureN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI9CvCaptureEE", "NSt6__ndk120__shared_ptr_pointerIP13CvVideoWriterN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "N2cv14DefaultDeleterI13CvVideoWriterEE", "N2cv16CvCapture_ImagesE", "N2cv13IVideoCaptureE", "NSt6__ndk120__shared_ptr_pointerIPN2cv16CvCapture_ImagesENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv16CvCapture_ImagesEEE", "writeFrameData", "createEncodeHuffmanTable", "put_bits", "N2cv5mjpeg12MjpegEncoderE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5mjpeg16MotionJpegWriterENS_9allocatorIS3_EEEE", "N2cv5mjpeg16MotionJpegWriterE", "N2cv12IVideoWriterE", "N2cv17MotionJpegCaptureE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16AVIReadContainerENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv17MotionJpegCaptureENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv17MotionJpegCaptureEEE", "parseHdrlList", "readFrame", "patchInt", "startWriteChunk", "endWriteChunk", "safe_int_cast", "NSt6__ndk120__shared_ptr_emplaceIN2cv16VideoInputStreamENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BitStreamENS_9allocatorIS2_EEEE", "OPENCV_LEGACY_WAITKEY", "imshow", "cvSetOpenGlDrawCallback", "cvSetOpenGlContext", "cvUpdateWindow", "fontQt", "addText", "displayStatusBar", "displayOverlay", "startLoop", "stopLoop", "saveWindowParameters", "loadWindowParameters", "createButton", "setWindowTitle", "cvNamedWindow", "cvDestroyWindow", "cvDestroyAllWindows", "cvShowImage", "cvResizeWindow", "cvMoveWindow", "cvCreateTrackbar", "cvCreateTrackbar2", "cvSetMouseCallback", "cvGetTrackbarPos", "cvSetTrackbarPos", "cvSetTrackbarMax", "cvSetTrackbarMin", "cvGetWindowHandle", "cvGetWindowName", "cvWaitKey", "cvInitSystem", "cvStartWindowThread", "cvAddText", "cvDisplayStatusBar", "cvStartLoop", "cvStopLoop", "cvSaveWindowParameters", "cvCreateButton", "N2cv20AgastFeatureDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25AgastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "N2cv25AgastFeatureDetector_ImplE", "makeAgastOffsets", "descriptor", "descriptor_channels", "descriptor_size", "octaves", "sublevels", "detectAndCompute", "N2cv5AKAZEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10AKAZE_ImplENS_9allocatorIS2_EEEE", "N2cv10AKAZE_ImplE", "cluster", "N2cv10BOWTrainerE", "N2cv16BOWKMeansTrainerE", "N2cv25BOWImgDescriptorExtractorE", "minThreshold", "maxThreshold", "minRepeatability", "minDistBetweenBlobs", "filterByColor", "blobColor", "filterByArea", "minArea", "maxArea", "filterByCircularity", "minCircularity", "maxCircularity", "filterByInertia", "minInertiaRatio", "maxInertiaRatio", "filterByConvexity", "minConvexity", "maxConvexity", "N2cv18SimpleBlobDetectorE", "N2cv22SimpleBlobDetectorImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22SimpleBlobDetectorImplENS_9allocatorIS2_EEEE", "N2cv10BRISK_ImplE", "generateKernel", "computeDescriptorsAndOrOrientation", "smoothedIntensity", "getScoreMaxAbove", "getScoreMaxBelow", "halfsample", "twothirdsample", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BRISK_ImplENS_9allocatorIS2_EEEE", "drawKeypoints", "drawMatches", "_drawKeypoint", "_prepareImgAndDrawKeypoints", "calcProjection", "evaluateFeatureDetector", "computeRecallPrecisionCurve", "N2cv19FastFeatureDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv24FastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "N2cv24FastFeatureDetector_ImplE", "makeOffsets", "Feature2D", "N2cv9Feature2DE", "N2cv12GFTTDetectorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17GFTTDetector_ImplENS_9allocatorIS2_EEEE", "N2cv17GFTTDetector_ImplE", "extended", "upright", "N2cv4KAZEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9KAZE_ImplENS_9allocatorIS2_EEEE", "N2cv9KAZE_ImplE", "Compute_Descriptors", "Get_MSURF_Upright_Descriptor_64", "Get_MSURF_Descriptor_64", "Get_Upright_MLDB_Full_Descriptor", "MLDB_Fill_Values", "Get_MLDB_Full_Descriptor", "Get_MLDB_Descriptor_Subset", "Get_Upright_MLDB_Descriptor_Subset", "generateDescriptorSubsample", "Sample_Derivative_Response_Radius6", "gtable", "quantized_counting_sort", "create_nonlinear_scale_space", "compute_kcontrast", "compute_diffusivity", "N2cv22FindKeypointsSameScaleE", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv27MSURF_Descriptor_64_InvokerE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "N2cv28MLDB_Full_Descriptor_InvokerE", "N2cv30MLDB_Descriptor_Subset_InvokerE", "N2cv26ComputeKeypointOrientationE", "N2cv28NonLinearScalarDiffusionStepE", "N2cv26DeterminantHessianResponseINS_3MatEEE", "Create_Nonlinear_Scale_Space", "Feature_Description", "N2cv32MultiscaleDerivativesKAZEInvokerE", "N2cv23FindExtremumKAZEInvokerE", "N2cv23KAZE_Descriptor_InvokerE", "halfsample_image", "N2cv23Nld_Step_Scalar_InvokerE", "runByKeypointSize", "getDescriptor", "getLocalIdx", "checkMasks", "knnMatch", "radiusMatch", "knnMatchImpl", "radiusMatchImpl", "FlannBased", "BruteForce", "_indexParams", "FlannBasedMatcher", "_searchParams", "typename", "clone", "convertMatches", "N2cv9BFMatcherE", "N2cv17DescriptorMatcherE", "N2cv17DescriptorMatcher20DescriptorCollectionE", "N2cv17FlannBasedMatcherE", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BFMatcherENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv17FlannBasedMatcherENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann5IndexENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann11IndexParamsENS_9allocatorIS3_EEEE", "detectRegions", "pass", "growHistory", "N2cv4MSERE", "N2cv9MSER_ImplE", "HarrisResponses", "computeOrbDescriptors", "setFirstLevel", "N2cv3ORBE", "N2cv8ORB_ImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8ORB_ImplENS_9allocatorIS2_EEEE", "findChessboardCorners", "orderFoundConnectedQuads", "removeQuadFromGroup", "findConnectedQuads", "closest_quad", "findQuadNeighbors", "drawChessboardCorners", "findCirclesGrid", "icvBinarizationHistogramBased", "cvCalcMatMulDeriv", "cvComposeRT", "cvRodrigues2", "cvFindExtrinsicCameraParams2", "cvInitIntrinsicParams2D", "cvCalibrateCamera4", "cvCalibrationMatrixValues", "cvStereoRectify", "cvStereoRectifyUncalibrated", "reprojectImageTo3D", "cvReprojectImageTo3D", "cvRQDecomp3x3", "cvDecomposeProjectionMatrix", "projectPoints", "calibrateCameraRO", "calibrationMatrixValues", "stereoCalibrate", "rectify3Collinear", "cvProjectPoints2Internal", "cvCalibrateCamera2Internal", "cvStereoCalibrateImpl", "prepareCameraMatrix", "prepareDistCoeffs", "collectCalibrationData", "adjust3rdMatrix", "checkChessboardBinary", "calcFeatureMap", "calcAngles", "num_scales", "checkCorner", "left", "bottom", "Board", "estimatePose", "getCorner", "getCell", "growLeft", "growTop", "growRight", "growBottom", "addColumnLeft", "addRowTop", "addColumnRight", "addRowBottom", "getContour", "grow", "getInitialPoints", "findChessboardCornersSB", "polyfit", "findHomography1D", "normalizePoints1D", "N2cv7details5FastXE", "N2cv7details10Chessboard5BoardE", "N2cv7details10ChessboardE", "N2cv29ParallelLoopBodyLambdaWrapperE", "NSt6__ndk117bad_function_callE", "NSt6__ndk110__function6__baseIFvRKN2cv5RangeEEEE", "findCorners", "findOutsideCorners", "addVertex", "addEdge", "removeEdge", "areVerticesAdjacent", "getDegree", "floydWarshall", "getNeighbors", "CirclesGridFinder", "findHoles", "isDetectionCorrect", "rectifyGrid", "findCandidateLine", "findCandidateHoles", "insertWinner", "computeGraphConfidence", "filterOutliersByDensity", "findBasis", "computePredecessorMatrix", "findLongestPath", "getAsymmetricHoles", "getCornerSegments", "getFirstCorner", "cvFindFundamentalMat", "cvComputeCorrespondEpilines", "cvConvertPointsHomogeneous", "build_coeff_matrix", "undistortPoints", "initUndistortRectifyMap", "estimateNewCameraMatrixForUndistortRectify", "stereoRectify", "calibrate", "ComputeExtrinsicRefine", "NormalizePixels", "InitExtrinsics", "CalibrateExtrinsics", "ComputeJacobians", "EstimateUncertainties", "median", "median3d", "subMatrix", "findEssentialMat", "recoverPose", "decomposeEssentialMat", "NSt6__ndk120__shared_ptr_emplaceIN2cv19EMEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv19EMEstimatorCallbackE", "N2cv19PointSetRegistrator8CallbackE", "findHomography", "findFundamentalMat", "computeCorrespondEpilines", "convertPointsFromHomogeneous", "convertPointsToHomogeneous", "convertPointsHomogeneous", "sampsonDistance", "run8Point", "NSt6__ndk120__shared_ptr_emplaceIN2cv27HomographyEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv27HomographyEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv24HomographyRefineCallbackENS_9allocatorIS2_EEEE", "N2cv24HomographyRefineCallbackE", "N2cv8LMSolver8CallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv19FMEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv19FMEstimatorCallbackE", "decompose", "decomposeHomographyMat", "filterHomographyDecompByVisibleRefpoints", "N2cv23HomographyDecomposition16HomographyDecompE", "N2cv23HomographyDecomposition21HomographyDecompZhangE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "NSt6__ndk120__shared_ptr_pointerIPN2cv23HomographyDecomposition21HomographyDecompInriaENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv23HomographyDecomposition21HomographyDecompInriaEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LMSolverImplENS_9allocatorIS2_EEEE", "N2cv12LMSolverImplE", "N2cv8LMSolverE", "setMaxIters", "cvCreatePOSITObject", "cvPOSIT", "RANSACUpdateNumIters", "estimateAffine3D", "estimateAffine2D", "estimateAffinePartial2D", "getSubset", "findInliers", "computeError", "checkSubset", "N2cv25RANSACPointSetRegistratorE", "N2cv19PointSetRegistratorE", "N2cv24LMeDSPointSetRegistratorE", "NSt6__ndk120__shared_ptr_pointerIPN2cv25RANSACPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv25RANSACPointSetRegistratorEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv24LMeDSPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv24LMeDSPointSetRegistratorEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine3DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv25Affine3DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine2DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv25Affine2DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22Affine2DRefineCallbackENS_9allocatorIS2_EEEE", "N2cv22Affine2DRefineCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv32AffinePartial2DEstimatorCallbackENS_9allocatorIS2_EEEE", "N2cv32AffinePartial2DEstimatorCallbackE", "NSt6__ndk120__shared_ptr_emplaceIN2cv29AffinePartial2DRefineCallbackENS_9allocatorIS2_EEEE", "N2cv29AffinePartial2DRefineCallbackE", "find4QuadCornerSubpix", "findCorner", "N2cv13RHO_HEST_REFCE", "N2cv8RHO_HESTE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13RHO_HEST_REFCENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv13RHO_HEST_REFCEEE", "drawFrameAxes", "solvePnP", "solvePnPRansac", "solveP3P", "NSt6__ndk120__shared_ptr_emplaceIN2cv17PnPRansacCallbackENS_9allocatorIS2_EEEE", "N2cv17PnPRansacCallbackE", "minDisparity", "numDisparities", "blockSize", "speckleWindowSize", "speckleRange", "disp12MaxDiff", "preFilterType", "preFilterSize", "preFilterCap", "textureThreshold", "uniquenessRatio", "FindStereoCorrespInvoker", "findStereoCorrespondenceBM", "NSt6__ndk120__shared_ptr_emplaceIN2cv12StereoBMImplENS_9allocatorIS2_EEEE", "N2cv12StereoBMImplE", "N2cv8StereoBME", "N2cv13StereoMatcherE", "N2cv16PrefilterInvokerE", "N2cv24FindStereoCorrespInvokerE", "SGBM3WayMainLoop", "filterSpeckles", "validateDisparity", "computeDisparitySGBM_HH4", "computeDisparitySGBM", "N2cv16SGBM3WayMainLoopE", "N2cv14StereoSGBMImplE", "N2cv10StereoSGBME", "N2cv16CalcVerticalSumsE", "N2cv18CalcHorizontalSumsE", "NSt6__ndk120__shared_ptr_pointerIPN2cv14StereoSGBMImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv14StereoSGBMImplEEE", "icvTriangulatePoints", "icvCorrectMatches", "undistort", "cvUndistort2", "cvInitUndistortMap", "cvInitUndistortRectifyMap", "initWideAngleProjMap", "cvUndistortPointsInternal", "mapPointSpherical", "rects", "tilted", "computeChannels", "setWindow", "detectMultiScale", "stageType", "BOOST", "featureType", "HAAR", "featureParams", "maxCatCount", "stages", "stageThreshold", "weakClassifiers", "internalNodes", "leafValues", "features", "clipObjects", "isOldFormatCascade", "getOriginalWindowSize", "getFeatureType", "getOldCascade", "setMaskGenerator", "getMaskGenerator", "getScaleData", "partition", "predictOrderedStump", "predictCategoricalStump", "N2cv16FeatureEvaluatorE", "N2cv13HaarEvaluatorE", "N2cv12LBPEvaluatorE", "N2cv21BaseCascadeClassifierE", "N2cv21CascadeClassifierImplE", "N2cv24CascadeClassifierInvokerE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv16FeatureEvaluator9ScaleDataENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13HaarEvaluatorENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LBPEvaluatorENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv13HaarEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv13HaarEvaluatorEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv12LBPEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv12LBPEvaluatorEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv21CascadeClassifierImplENS_9allocatorIS2_EEEE", "stage_threshold", "left_val", "left_node", "right_val", "right_node", "cascade", "stageParams", "maxWeakCount", "stageNum", "SeparateDetectionWork", "OBJECT_DETECTOR", "workcycleObjectDetectorFunction", "workcycleObjectDetector", "DetectionBasedTracker", "updateTrackedObjects", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "N2cv21DetectionBasedTrackerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv21DetectionBasedTracker21SeparateDetectionWorkENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv21DetectionBasedTracker21SeparateDetectionWorkEEE", "getDescriptorSize", "setSVMDetector", "winSize", "blockStride", "cellSize", "derivAperture", "winSigma", "histogramNormType", "L2HysThreshold", "gammaCorrection", "nlevels", "signedGradient", "computeGradient", "getBlock", "groupRectangles", "N2cv13HOGDescriptorE", "N2cv8HOGCacheE", "N2cv10HOGInvokerE", "N2cv14HOGConfInvokerE", "separateVerticalLines", "decode", "detectAndDecode", "NSt6__ndk120__shared_ptr_pointerIPN2cv14QRCodeDetector4ImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN2cv14QRCodeDetector4ImplEEE", "getBackgroundImage", "history", "nKNN", "dist2Threshold", "detectShadows", "shadowValue", "shadowThreshold", "N2cv27BackgroundSubtractorKNNImplE", "N2cv23BackgroundSubtractorKNNE", "N2cv20BackgroundSubtractorE", "N2cv10KNNInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv27BackgroundSubtractorKNNImplENS_9allocatorIS2_EEEE", "nmixtures", "backgroundRatio", "varThreshold", "varThresholdGen", "varInit", "varMin", "varMax", "complexityReductionThreshold", "N2cv28BackgroundSubtractorMOG2ImplE", "N2cv24BackgroundSubtractorMOG2E", "N2cv11MOG2InvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv28BackgroundSubtractorMOG2ImplENS_9allocatorIS2_EEEE", "meanShift", "N2cv18DISOpticalFlowImplE", "N2cv18DISOpticalFlowImpl26PatchInverseSearch_ParBodyE", "N2cv18DISOpticalFlowImpl21Densification_ParBodyE", "N2cv14DISOpticalFlowE", "N2cv16DenseOpticalFlowE", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DISOpticalFlowImplENS_9allocatorIS2_EEEE", "image_jacobian_affine_ECC", "image_jacobian_homo_ECC", "image_jacobian_translation_ECC", "image_jacobian_euclidean_ECC", "project_onto_jacobian_ECC", "update_warping_matrix_ECC", "buildOpticalFlowPyramid", "estimateRigidTransform", "calcSharrDeriv", "N2cv6detail16LKTrackerInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplENS_9allocatorIS3_EEEE", "N2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplE", "N2cv22SparsePyrLKOpticalFlowE", "N2cv17SparseOpticalFlowE", "FarnebackPolyExp", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_124FarnebackOpticalFlowImplENS_9allocatorIS3_EEEE", "N2cv12_GLOBAL__N_124FarnebackOpticalFlowImplE", "N2cv20FarnebackOpticalFlowE", "PIEHPIEH", "calcUV", "N2cv25VariationalRefinementImplE", "N2cv25VariationalRefinementImpl18ParallelOp_ParBodyE", "N2cv25VariationalRefinementImpl23ComputeDataTerm_ParBodyE", "N2cv25VariationalRefinementImpl36ComputeSmoothnessTermHorPass_ParBodyE", "N2cv25VariationalRefinementImpl37ComputeSmoothnessTermVertPass_ParBodyE", "N2cv25VariationalRefinementImpl19RedBlackSOR_ParBodyE", "N2cv21VariationalRefinementE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25VariationalRefinementImplENS_9allocatorIS2_EEEE", "N6google8protobuf2io18CopyingInputStreamE", "N6google8protobuf2io16ArrayInputStreamE", "N6google8protobuf2io17ArrayOutputStreamE", "N6google8protobuf2io18StringOutputStreamE", "N6google8protobuf2io25CopyingInputStreamAdaptorE", "N6google8protobuf2io26CopyingOutputStreamAdaptorE", "N6google8protobuf2io19ZeroCopyInputStreamE", "N6google8protobuf11MessageLiteE", "N6google8protobuf14FatalExceptionE", "N6google8protobuf7ClosureE", "N6google8protobuf8internal16FunctionClosure0E", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "UNAVAILABLE", "DATA_LOSS", "N6google8protobuf8internal12FieldSkipperE", "N6google8protobuf8internal29CodedOutputStreamFieldSkipperE", "parsing", "serializing", "N6google8protobuf14DescriptorPool14ErrorCollectorE", "N6google8protobuf12_GLOBAL__N_123AggregateErrorCollectorE", "uint64", "message", "uint32", "enum", "sfixed32", "sfixed64", "sint32", "sint64", "optional", "required", "repeated", "proto2", "proto3", "uninterpreted_option", "OneofOptions", "N6google8protobuf8internal16FunctionClosure1IPKNS0_20FileDescriptorTablesEEE", "N6google8protobuf17DescriptorBuilder17OptionInterpreter21AggregateOptionFinderE", "N6google8protobuf8internal16FunctionClosure1IPNSt6__ndk14pairIPKNS0_20FileDescriptorTablesEPKNS0_14SourceCodeInfoEEEEE", "N6google8protobuf8internal16FunctionClosure1IPKNS0_14FileDescriptorEEE", "N6google8protobuf8internal16FunctionClosure1IPNS1_14LazyDescriptorEEE", "N6google8protobuf17FileDescriptorSetE", "N6google8protobuf19FileDescriptorProtoE", "N6google8protobuf30DescriptorProto_ExtensionRangeE", "N6google8protobuf29DescriptorProto_ReservedRangeE", "N6google8protobuf15DescriptorProtoE", "N6google8protobuf21ExtensionRangeOptionsE", "N6google8protobuf20FieldDescriptorProtoE", "N6google8protobuf20OneofDescriptorProtoE", "N6google8protobuf37EnumDescriptorProto_EnumReservedRangeE", "N6google8protobuf19EnumDescriptorProtoE", "N6google8protobuf24EnumValueDescriptorProtoE", "N6google8protobuf22ServiceDescriptorProtoE", "N6google8protobuf21MethodDescriptorProtoE", "N6google8protobuf11FileOptionsE", "N6google8protobuf14MessageOptionsE", "N6google8protobuf12FieldOptionsE", "N6google8protobuf12OneofOptionsE", "N6google8protobuf11EnumOptionsE", "N6google8protobuf16EnumValueOptionsE", "N6google8protobuf14ServiceOptionsE", "N6google8protobuf13MethodOptionsE", "N6google8protobuf28UninterpretedOption_NamePartE", "N6google8protobuf19UninterpretedOptionE", "N6google8protobuf23SourceCodeInfo_LocationE", "N6google8protobuf14SourceCodeInfoE", "N6google8protobuf28GeneratedCodeInfo_AnnotationE", "N6google8protobuf17GeneratedCodeInfoE", "N6google8protobuf18DescriptorDatabaseE", "N6google8protobuf24SimpleDescriptorDatabaseE", "N6google8protobuf25EncodedDescriptorDatabaseE", "N6google8protobuf22DescriptorPoolDatabaseE", "N6google8protobuf24MergedDescriptorDatabaseE", "N6google8protobuf14DynamicMessageE", "N6google8protobuf21DynamicMessageFactoryE", "N6google8protobuf8internal22MessageSetFieldSkipperE", "N6google8protobuf8internal29DescriptorPoolExtensionFinderE", "N6google8protobuf16RepeatedPtrFieldINS0_11MessageLiteEEE", "HasField", "FieldSize", "ClearField", "RemoveLast", "ReleaseLast", "Swap", "GetInt32", "SetInt32", "GetRepeatedInt32", "SetRepeatedInt32", "AddInt32", "GetInt64", "SetInt64", "GetRepeatedInt64", "SetRepeatedInt64", "AddInt64", "GetUInt32", "SetUInt32", "GetRepeatedUInt32", "SetRepeatedUInt32", "AddUInt32", "GetUInt64", "SetUInt64", "GetRepeatedUInt64", "SetRepeatedUInt64", "AddUInt64", "GetFloat", "SetFloat", "GetRepeatedFloat", "SetRepeatedFloat", "AddFloat", "GetDouble", "SetDouble", "GetRepeatedDouble", "SetRepeatedDouble", "AddDouble", "GetBool", "SetBool", "GetRepeatedBool", "SetRepeatedBool", "AddBool", "GetString", "GetStringReference", "SetString", "GetRepeatedString", "GetRepeatedStringReference", "SetRepeatedString", "AddString", "SetEnum", "SetEnumValue", "GetRepeatedEnumValue", "SetRepeatedEnum", "AddEnum", "GetMessage", "MutableMessage", "SetAllocatedMessage", "ReleaseMessage", "GetRepeatedMessage", "MutableRepeatedMessage", "AddMessage", "AddAllocatedMessage", "MutableRawRepeatedField", "GetRawRepeatedField", "INVALID_CPPTYPE", "CPPTYPE_INT32", "CPPTYPE_INT64", "CPPTYPE_UINT32", "CPPTYPE_UINT64", "CPPTYPE_DOUBLE", "CPPTYPE_FLOAT", "CPPTYPE_BOOL", "CPPTYPE_ENUM", "CPPTYPE_STRING", "N6google8protobuf8internal26GeneratedMessageReflectionE", "N6google8protobuf2io14ErrorCollectorE", "N6google8protobuf2io15FileInputStreamE", "N6google8protobuf2io15FileInputStream22CopyingFileInputStreamE", "N6google8protobuf2io16FileOutputStreamE", "N6google8protobuf2io16FileOutputStream23CopyingFileOutputStreamE", "N6google8protobuf2io18IstreamInputStreamE", "N6google8protobuf2io18IstreamInputStream25CopyingIstreamInputStreamE", "N6google8protobuf2io19OstreamOutputStreamE", "N6google8protobuf2io19OstreamOutputStream26CopyingOstreamOutputStreamE", "N6google8protobuf2io24ConcatenatingInputStreamE", "N6google8protobuf2io19LimitingInputStreamE", "N6google8protobuf2io19CopyingOutputStreamE", "Unsupported", "MapKey::GetInt64Value", "MapKey::GetInt32Value", "MapKey::GetUInt64Value", "MapKey::GetUInt32Value", "MapKey::GetBoolValue", "MapValueRef::GetStringValue", "MapValueRef::GetInt64Value", "MapValueRef::GetInt32Value", "MapValueRef::GetUInt64Value", "MapValueRef::GetUInt32Value", "MapValueRef::GetBoolValue", "MapValueRef::GetDoubleValue", "MapValueRef::GetFloatValue", "MapValueRef::GetEnumValue", "MapValueRef::GetMessageValue", "N6google8protobuf8internal12MapFieldBaseE", "N6google8protobuf8internal15DynamicMapFieldE", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINS0_6MapKeyENS0_11MapValueRefEEE", "N6google8protobuf3MapINS0_6MapKeyENS0_11MapValueRefEE8InnerMapE", "N6google8protobuf4hashINS0_6MapKeyEEE", "N6google8protobuf7MessageE", "N6google8protobuf10ReflectionE", "N6google8protobuf14MessageFactoryE", "N6google8protobuf8internal21RepeatedFieldAccessorE", "N6google8protobuf12_GLOBAL__N_123GeneratedMessageFactoryE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIiEE", "N6google8protobuf8internal20RepeatedFieldWrapperIiEE", "N6google8protobuf8internal33RandomAccessRepeatedFieldAccessorE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIjEE", "N6google8protobuf8internal20RepeatedFieldWrapperIjEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIlEE", "N6google8protobuf8internal20RepeatedFieldWrapperIlEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorImEE", "N6google8protobuf8internal20RepeatedFieldWrapperImEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIfEE", "N6google8protobuf8internal20RepeatedFieldWrapperIfEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIdEE", "N6google8protobuf8internal20RepeatedFieldWrapperIdEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIbEE", "N6google8protobuf8internal20RepeatedFieldWrapperIbEE", "N6google8protobuf8internal30RepeatedPtrFieldStringAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE", "N6google8protobuf8internal16MapFieldAccessorE", "N6google8protobuf8internal31RepeatedPtrFieldMessageAccessorE", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINS0_7MessageEEE", "infinity", "N6google8protobuf10TextFormat17BaseTextGeneratorE", "N6google8protobuf10TextFormat6FinderE", "N6google8protobuf10TextFormat17FieldValuePrinterE", "N6google8protobuf10TextFormat21FastFieldValuePrinterE", "N6google8protobuf12_GLOBAL__N_123StringBaseTextGeneratorE", "N6google8protobuf12_GLOBAL__N_133FastFieldValuePrinterUtf8EscapingE", "N6google8protobuf12_GLOBAL__N_124FieldValuePrinterWrapperE", "N6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorE", "N6google8protobuf10TextFormat7Printer13TextGeneratorE", "N6google8protobuf8internal27UnknownFieldSetFieldSkipperE", "N6google8protobuf8internal15ExtensionFinderE", "N6google8protobuf8internal24GeneratedExtensionFinderE", "N6google8protobuf13RepeatedFieldIiEE", "N6google8protobuf13RepeatedFieldIlEE", "N6google8protobuf13RepeatedFieldIjEE", "N6google8protobuf13RepeatedFieldImEE", "N6google8protobuf13RepeatedFieldIfEE", "N6google8protobuf13RepeatedFieldIdEE", "N6google8protobuf13RepeatedFieldIbEE", "N6google8protobuf16RepeatedPtrFieldINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N6google8protobuf2io20ZeroCopyOutputStreamE", "N3tbb10interface78internal18delegated_functionINS_4flow11interface105graph13spawn_functorEvEE", "N3tbb10empty_taskE", "N3tbb10interface78internal14delegated_taskE", "N3tbb10interface78internal9wait_taskE", "N3tbb8internal13function_taskINS_4flow11interface105graph13spawn_functorEEE", "ALLOCATOR", "scalable_malloc", "scalable_free", "scalable_aligned_malloc", "scalable_aligned_free", "private", "N3tbb8internal6marketE", "N3tbb8internal7no_copyE", "N3tbb8internal3rml10tbb_clientE", "N3rml6clientE", "N3rml16versioned_objectE", "pthread_join", "pthread_detach", "pthread_attr_init", "pthread_attr_setstack_size", "pthread_create", "pthread_attr_destroy", "N3tbb8internal3rml14private_serverE", "N3tbb8internal3rml10tbb_serverE", "N3rml6serverE", "N3tbb8internal17generic_schedulerE", "N3tbb8internal9schedulerE", "N3rml3jobE", "N3tbb8internal19intrusive_list_nodeE", "N3tbb8internal15scheduler_stateE", "N3tbb8internal16custom_schedulerINS0_22DefaultSchedulerTraitsEEE", "N3tbb13tbb_exceptionE", "N3tbb8internal16custom_schedulerINS0_20IntelSchedulerTraitsEEE", "N3tbb4taskE", "N3tbb10interface58internal9task_baseE", "N3tbb18captured_exceptionE", "TBB_VERSION", "N3tbb8internal27allowed_parallelism_controlE", "N3tbb8internal6paddedINS0_15control_storageELm128EEE", "N3tbb8internal11padded_baseINS0_15control_storageELm128ELm32EEE", "N3tbb8internal15control_storageE", "N3tbb8internal18stack_size_controlE", "N3tbb14bad_last_allocE", "N3tbb12missing_waitE", "N3tbb27invalid_multiple_schedulingE", "N3tbb13improper_lockE", "N3tbb10user_abortE", "__RML_open_factory", "__TBB_make_rml_server", "__RML_close_factory", "__TBB_call_with_my_server_info", "JPEGMEM", "eaFO", "if1R", "kh9F", "okOP", "ALPH", "RIFF", "WEBP", "VP8X", "VP8L", "RIFF", "WEBPVP8X", "WEBPVP8L", "duplicate", "bKGD", "cHRM", "gAMA", "iCCP", "sBIT", "sRGB", "png_set_background", "png_set_gAMA", "bKGD", "cHRM", "eXIf", "gAMA", "hIST", "iCCP", "iTXt", "oFFs", "pCAL", "pHYs", "sBIT", "sCAL", "sPLT", "sTER", "sRGB", "tEXt", "tIME", "zTXt", "TIFFUnlinkDirectory", "_TIFFVSetField", "TIFFAdvanceDirectory", "TIFFSetField", "DotRange", "_TIFFVGetField", "TIFFFieldWithTag", "TIFFFieldWithName", "OldSubfileType", "ImageWidth", "ImageLength", "BitsPerSample", "Compression", "PhotometricInterpretation", "Threshholding", "CellWidth", "CellLength", "FillOrder", "DocumentName", "ImageDescription", "Make", "StripOffsets", "SamplesPerPixel", "RowsPerStrip", "StripByteCounts", "PlanarConfiguration", "PageName", "XPosition", "YPosition", "FreeOffsets", "FreeByteCounts", "GrayResponseUnit", "GrayResponseCurve", "PageNumber", "ColorResponseUnit", "TransferFunction", "Software", "DateTime", "Artist", "HostComputer", "WhitePoint", "PrimaryChromaticities", "HalftoneHints", "TileWidth", "TileLength", "TileOffsets", "TileByteCounts", "SubIFD", "InkSet", "InkNames", "NumberOfInks", "TargetPrinter", "ExtraSamples", "SampleFormat", "SMinSampleValue", "SMaxSampleValue", "ClipPath", "XClipPathUnits", "YClipPathUnits", "YCbCrCoefficients", "YCbCrSubsampling", "YCbCrPositioning", "ReferenceBlackWhite", "XMLPacket", "Matteing", "DataType", "ImageDepth", "TileDepth", "ImageFullWidth", "ImageFullLength", "TextureFormat", "TextureWrapModes", "FieldOfViewCotangent", "MatrixWorldToScreen", "MatrixWorldToCamera", "CFARepeatPatternDim", "CFAPattern", "Copyright", "RichTIFFIPTC", "Photoshop", "EXIFIFDOffset", "GPSIFDOffset", "FaxRecvParams", "FaxSubAddress", "FaxRecvTime", "FaxDcs", "StoNits", "InteroperabilityIFDOffset", "DNGVersion", "DNGBackwardVersion", "UniqueCameraModel", "LocalizedCameraModel", "CFAPlaneColor", "CFALayout", "LinearizationTable", "BlackLevelRepeatDim", "BlackLevel", "BlackLevelDeltaH", "BlackLevelDeltaV", "WhiteLevel", "DefaultScale", "BestQualityScale", "DefaultCropOrigin", "DefaultCropSize", "ColorMatrix1", "ColorMatrix2", "CameraCalibration1", "CameraCalibration2", "ReductionMatrix1", "ReductionMatrix2", "AnalogBalance", "AsShotNeutral", "AsShotWhiteXY", "BaselineExposure", "BaselineNoise", "BaselineSharpness", "BayerGreenSplit", "LinearResponseLimit", "CameraSerialNumber", "LensInfo", "ChromaBlurRadius", "AntiAliasStrength", "ShadowScale", "DNGPrivateData", "MakerNoteSafety", "CalibrationIlluminant1", "CalibrationIlluminant2", "RawDataUniqueID", "OriginalRawFileName", "OriginalRawFileData", "ActiveArea", "MaskedAreas", "AsShotICCProfile", "AsShotPreProfileMatrix", "CurrentICCProfile", "CurrentPreProfileMatrix", "Indexed", "GlobalParametersIFD", "ProfileType", "FaxProfile", "CodingMethods", "VersionYear", "ModeNumber", "ImageBaseColor", "T82Options", "StripRowCounts", "ImageLayer", "ExposureTime", "FNumber", "ExposureProgram", "SpectralSensitivity", "ISOSpeedRatings", "OptoelectricConversionFactor", "ExifVersion", "DateTimeOriginal", "DateTimeDigitized", "ComponentsConfiguration", "CompressedBitsPerPixel", "ShutterSpeedValue", "BrightnessValue", "ExposureBiasValue", "MaxApertureValue", "SubjectDistance", "MeteringMode", "LightSource", "Flash", "FocalLength", "SubjectArea", "MakerNote", "UserComment", "SubSecTime", "SubSecTimeOriginal", "SubSecTimeDigitized", "FlashpixVersion", "ColorSpace", "PixelXDimension", "PixelYDimension", "RelatedSoundFile", "FlashEnergy", "SpatialFrequencyResponse", "FocalPlaneXResolution", "FocalPlaneYResolution", "FocalPlaneResolutionUnit", "SubjectLocation", "ExposureIndex", "SensingMethod", "FileSource", "SceneType", "CustomRendered", "ExposureMode", "WhiteBalance", "DigitalZoomRatio", "FocalLengthIn35mmFilm", "SceneCaptureType", "GainControl", "Contrast", "Saturation", "DeviceSettingDescription", "SubjectDistanceRange", "ImageUniqueID", "_TIFFMergeFields", "TIFFMergeFieldInfo", "TIFFReadCustomDirectory", "TIFFReadDirectoryCheckOrder", "EstimateStripByteCounts", "MissingRequired", "TIFFFetchDirectory", "TIFFFetchNormalTag", "TIFFFetchStripThing", "TIFFFetchSubjectDistance", "strips", "Colormap", "TIFFReadDirEntryArray", "TIFFCheckDirOffset", "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT", "TIFFResetField", "TIFFWriteDirectorySec", "TIFFWriteDirectoryTagData", "TIFFWriteDirectoryTagCheckedRational", "TIFFWriteDirectoryTagShortPerSample", "TIFFWriteDirectoryTagLongLong8Array", "TIFFWriteDirectoryTagColormap", "TIFFWriteDirectoryTagSampleformatArray", "TIFFWriteDirectoryTagCheckedRationalArray", "TIFFWriteDirectoryTagTransferfunction", "TIFFWriteDirectoryTagSubifd", "TIFFWriteDirectoryTagCheckedSrationalArray", "TIFFWriteDirectoryTagIfdIfd8Array", "TIFFLinkDirectory", "TIFFWriteDirectoryTagCheckedLong8Array", "TIFFWriteDirectoryTagCheckedSlong8Array", "Planarconfiguration", "colorchannels", "gtTileSeparate", "gtStripSeparate", "PhotometricInterpretation", "BuildMapUaToAa", "BuildMapBitdepth16To8", "initYCbCrConversion", "initCIELabConversion", "TIFFClientOpen", "TIFFReadEncodedStrip", "TIFFReadRawStrip", "TIFFFillStrip", "TIFFReadEncodedTile", "_TIFFReadEncodedTileAndAllocBuffer", "TIFFReadRawTile", "TIFFFillTile", "TIFFReadBufferSetup", "TIFFFillStripPartial", "TIFFReadEncodedStrip", "TIFFStartTile", "TIFFComputeStrip", "TIFFVStripSize64", "TIFFRawStripSize64", "TIFFScanlineSize64", "TIFFRasterScanlineSize64", "TIFFNumberOfStrips", "TIFFNumberOfTiles", "TIFFTileRowSize", "TIFFTileRowSize64", "TIFFVTileSize64", "TIFFWriteScanline", "TIFFWriteEncodedStrip", "TIFFWriteRawStrip", "TIFFWriteEncodedTile", "TIFFWriteRawTile", "TIFFWriteBufferSetup", "TIFFAppendToStrip", "strip", "TIFFOpen", "TIFFRegisterCODEC", "TIFFUnRegisterCODEC", "TIFFInitJPEG", "JPEGLib", "JPEGSetupDecode", "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC", "TIFFReadScanline", "JPEGDecodeRaw", "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER", "TIFFjpeg_progress_monitor", "TIFFjpeg_tables_dest", "JPEGEncode", "JPEGFixupTagsSubsamplingSec", "JPEGPreDecode", "JPEGSetupEncode", "JPEGPreEncode", "None", "PackBits", "ThunderScan", "NeXT", "AdobeDeflate", "PixarLog", "SGILog", "SGILog24", "LZMA", "DumpModeDecode", "Fax3SetupState", "Fax3Decode2D", "Fax3Decode1D", "Fax3Encode", "Fax4Decode", "Fax4Encode", "Fax3DecodeRLE", "TIFFInitCCITTFax3", "TIFFInitCCITTFax4", "FaxMode", "FaxFillFunc", "CleanFaxData", "ConsecutiveBadFaxLines", "Group3Options", "Group4Options", "LogLuvSetupDecode", "LogLuvInitState", "LogLuvDecode24", "LogLuvDecode32", "LogL16InitState", "LogL16Decode", "LogLuvSetupEncode", "LogLuvEncode24", "LogLuvEncode32", "LogL16Encode", "LogLuvVSetField", "SGILogDataFmt", "SGILogEncode", "TIFFInitLZW", "LZWSetupDecode", "LZWPreDecode", "LZWDecodeCompat", "LZWDecode", "LZWSetupEncode", "NeXTPreDecode", "NeXTDecode", "PackBitsDecode", "Predictor", "horAcc8", "horAcc16", "horAcc32", "PredictorDecodeTile", "fpAcc", "horDiff8", "horDiff32", "fpDiff", "PredictorSetup", "PredictorEncodeTile", "ThunderSetupDecode", "ThunderDecodeRow", "ThunderDecode", "ZIPVSetField", "ZIPSetupDecode", "ZIPPreDecode", "ZIPDecode", "ZIPSetupEncode", "ZIPPreEncode", "ZIPPostEncode", "ZIPEncode", "maxlyrs", "maxpkts", "imgareatly", "tilegrdtlx", "tilegrdtly", "tilewidth", "tileheight", "prcwidth", "prcheight", "cblkwidth", "cblkheight", "nomct", "numrlvls", "lazy", "termall", "segsym", "vcausal", "pterm", "resetprob", "numgbits", "ilyrrates", "_jp2overhead", "lrcp", "rlcp", "rpcl", "pcrl", "cprl", "real", "FTYP", "JP2H", "BPCC", "COLR", "PCLR", "CMAP", "RESC", "RESD", "JP2C", "JP2I", "UUID", "UINF", "ULST", "N3Iex6ArgExcE", "N5Imath13SingMatrixExcE", "displayWindow", "dataWindow", "pixelAspectRatio", "screenWindowCenter", "screenWindowWidth", "lineOrder", "preview", "N3Iex7TypeExcE", "N3Iex8InputExcE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "N3Imf14TypedAttributeIfEE", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "N3Imf14TypedAttributeINS_9LineOrderEEE", "N3Imf14TypedAttributeINS_11CompressionEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "N3Imf14TypedAttributeIdEE", "N3Imf14TypedAttributeINS_6EnvmapEEE", "N3Imf14TypedAttributeIiEE", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "N3Imf14TypedAttributeINS_8RationalEEE", "N3Imf14TypedAttributeINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE", "N3Imf14TypedAttributeINSt6__ndk16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEEE", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "N3Imf7IStreamE", "N3Imf7OStreamE", "N3Imf9InputFile4DataE", "N3Imf9InputFileE", "keycode", "m33f", "m33d", "m44f", "m44d", "N3Imf15OpaqueAttributeE", "N3Iex5IoExcE", "N3Iex8LogicExcE", "N3Imf10OutputFile4DataE", "N3Imf10OutputFileE", "N3Imf12_GLOBAL__N_114LineBufferTaskE", "N3Iex11OverflowExcE", "rational", "N3Imf17ScanLineInputFile4DataE", "N3Imf17ScanLineInputFileE", "N3Imf12_GLOBAL__N_114LineBufferTaskE", "whiteLuminance", "adoptedNeutral", "renderingTransform", "lookModTransform", "xDensity", "owner", "capDate", "utcOffset", "longitude", "latitude", "altitude", "focus", "expTime", "aperture", "isoSpeed", "envmap", "keyCode", "timeCode", "wrapmodes", "framesPerSecond", "multiView", "worldToCamera", "worldToNDC", "N3Imf11StdIFStreamE", "N3Imf11StdOFStreamE", "N3Imf11StdOSStreamE", "N3Iex8ErrnoExcE", "stringvector", "tiledesc", "N3Imf14TiledInputFile4DataE", "N3Imf14TiledInputFileE", "N3Imf12_GLOBAL__N_114TileBufferTaskE", "timecode", "N3Iex7BaseExcE", "N3Iex8EpermExcE", "N3Iex9EnoentExcE", "N3Iex8EsrchExcE", "N3Iex8EintrExcE", "N3Iex6EioExcE", "N3Iex8EnxioExcE", "N3Iex8E2bigExcE", "N3Iex10EnoexecExcE", "N3Iex8EbadfExcE", "N3Iex9EchildExcE", "N3Iex9EagainExcE", "N3Iex9EnomemExcE", "N3Iex9EaccesExcE", "N3Iex9EfaultExcE", "N3Iex10EnotblkExcE", "N3Iex8EbusyExcE", "N3Iex9EexistExcE", "N3Iex8ExdevExcE", "N3Iex9EnodevExcE", "N3Iex10EnotdirExcE", "N3Iex9EisdirExcE", "N3Iex9EinvalExcE", "N3Iex9EnfileExcE", "N3Iex9EmfileExcE", "N3Iex9EnottyExcE", "N3Iex10EtxtbsyExcE", "N3Iex8EfbigExcE", "N3Iex9EnospcExcE", "N3Iex9EspipeExcE", "N3Iex8ErofsExcE", "N3Iex9EmlinkExcE", "N3Iex8EpipeExcE", "N3Iex7EdomExcE", "N3Iex9ErangeExcE", "N3Iex9EnomsgExcE", "N3Iex8EidrmExcE", "N3Iex9EchrngExcE", "N3Iex11El2nsyncExcE", "N3Iex9El3hltExcE", "N3Iex9El3rstExcE", "N3Iex9ElnrngExcE", "N3Iex10EunatchExcE", "N3Iex9El2hltExcE", "N3Iex10EdeadlkExcE", "N3Iex9EnolckExcE", "N3Iex8EbadeExcE", "N3Iex8EbadrExcE", "N3Iex9ExfullExcE", "N3Iex9EnoanoExcE", "N3Iex10EbadrqcExcE", "N3Iex10EbadsltExcE", "N3Iex9EbfontExcE", "N3Iex9EnostrExcE", "N3Iex10EnodataExcE", "N3Iex8EtimeExcE", "N3Iex8EnosrExcE", "N3Iex9EnonetExcE", "N3Iex9EnopkgExcE", "N3Iex10EremoteExcE", "N3Iex10EnolinkExcE", "N3Iex7EadvExcE", "N3Iex9EsrmntExcE", "N3Iex8EcommExcE", "N3Iex9EprotoExcE", "N3Iex12EmultihopExcE", "N3Iex10EbadmsgExcE", "N3Iex15EnametoolongExcE", "N3Iex12EoverflowExcE", "N3Iex11EnotuniqExcE", "N3Iex9EbadfdExcE", "N3Iex10EremchgExcE", "N3Iex10ElibaccExcE", "N3Iex10ElibbadExcE", "N3Iex10ElibscnExcE", "N3Iex10ElibmaxExcE", "N3Iex11ElibexecExcE", "N3Iex9EilseqExcE", "N3Iex9EnosysExcE", "N3Iex8EloopExcE", "N3Iex11ErestartExcE", "N3Iex11EstrpipeExcE", "N3Iex12EnotemptyExcE", "N3Iex9EusersExcE", "N3Iex11EnotsockExcE", "N3Iex15EdestaddrreqExcE", "N3Iex11EmsgsizeExcE", "N3Iex13EprototypeExcE", "N3Iex14EnoprotooptExcE", "N3Iex18EprotonosupportExcE", "N3Iex18EsocktnosupportExcE", "N3Iex13EopnotsuppExcE", "N3Iex15EpfnosupportExcE", "N3Iex15EafnosupportExcE", "N3Iex13EaddrinuseExcE", "N3Iex16EaddrnotavailExcE", "N3Iex11EnetdownExcE", "N3Iex14EnetunreachExcE", "N3Iex12EnetresetExcE", "N3Iex15EconnabortedExcE", "N3Iex13EconnresetExcE", "N3Iex10EnobufsExcE", "N3Iex10EisconnExcE", "N3Iex11EnotconnExcE", "N3Iex12EshutdownExcE", "N3Iex15EtoomanyrefsExcE", "N3Iex12EtimedoutExcE", "N3Iex15EconnrefusedExcE", "N3Iex12EhostdownExcE", "N3Iex15EhostunreachExcE", "N3Iex11EalreadyExcE", "N3Iex14EinprogressExcE", "N3Iex9EstaleExcE", "N3Iex10EucleanExcE", "N3Iex10EnotnamExcE", "N3Iex10EnavailExcE", "N3Iex9EisnamExcE", "N3Iex12EremoteioExcE", "N3Iex12EcanceledExcE", "N3Iex9EdquotExcE", "N9IlmThread5MutexE", "N9IlmThread4TaskE", "N9IlmThread10ThreadPoolE", "N9IlmThread12_GLOBAL__N_112WorkerThreadE", "N9IlmThread6ThreadE", "N9IlmThread9SemaphoreE", "N3Imf9AttributeE", "box2i", "box2f", "chlist", "N3Imf10CompressorE", "N3Imf13PizCompressorE", "N3Imf15Pxr24CompressorE", "N3Imf13RleCompressorE", "N3Imf13ZipCompressorE", "N3Imf13B44CompressorE", "St16nested_exception", "ios_base::clear", "NSt6__ndk18ios_base7failureE", "NSt6__ndk18ios_baseE", "NSt6__ndk19basic_iosIwNS_11char_traitsIwEEEE", "NSt6__ndk115basic_streambufIwNS_11char_traitsIwEEEE", "NSt6__ndk113basic_istreamIwNS_11char_traitsIwEEEE", "NSt6__ndk113basic_ostreamIwNS_11char_traitsIwEEEE", "NSt6__ndk119__iostream_categoryE", "NSt6__ndk110__stdinbufIcEE", "NSt6__ndk110__stdinbufIwEE", "NSt6__ndk111__stdoutbufIcEE", "NSt6__ndk111__stdoutbufIwEE", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "NSt6__ndk16locale5facetE", "NSt6__ndk15ctypeIwEE", "NSt6__ndk110ctype_baseE", "NSt6__ndk17codecvtIcc9mbstate_tEE", "NSt6__ndk112codecvt_baseE", "NSt6__ndk17codecvtIDsc9mbstate_tEE", "NSt6__ndk17codecvtIDic9mbstate_tEE", "NSt6__ndk116__narrow_to_utf8ILm16EEE", "NSt6__ndk116__narrow_to_utf8ILm32EEE", "NSt6__ndk117__widen_from_utf8ILm16EEE", "NSt6__ndk117__widen_from_utf8ILm32EEE", "NSt6__ndk114__codecvt_utf8IwEE", "NSt6__ndk17codecvtIwc9mbstate_tEE", "NSt6__ndk114__codecvt_utf8IDsEE", "NSt6__ndk114__codecvt_utf8IDiEE", "NSt6__ndk115__codecvt_utf16IwLb0EEE", "NSt6__ndk115__codecvt_utf16IwLb1EEE", "NSt6__ndk115__codecvt_utf16IDsLb0EEE", "NSt6__ndk115__codecvt_utf16IDsLb1EEE", "NSt6__ndk115__codecvt_utf16IDiLb0EEE", "NSt6__ndk115__codecvt_utf16IDiLb1EEE", "NSt6__ndk120__codecvt_utf8_utf16IwEE", "NSt6__ndk120__codecvt_utf8_utf16IDiEE", "NSt6__ndk120__codecvt_utf8_utf16IDsEE", "NSt6__ndk16locale5__impE", "NSt6__ndk114collate_bynameIcEE", "NSt6__ndk17collateIcEE", "NSt6__ndk114collate_bynameIwEE", "NSt6__ndk17collateIwEE", "NSt6__ndk15ctypeIcEE", "NSt6__ndk112ctype_bynameIcEE", "NSt6__ndk112ctype_bynameIwEE", "NSt6__ndk18numpunctIcEE", "NSt6__ndk18numpunctIwEE", "NSt6__ndk115numpunct_bynameIcEE", "NSt6__ndk115numpunct_bynameIwEE", "NSt6__ndk17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19__num_getIcEE", "NSt6__ndk114__num_get_baseE", "NSt6__ndk17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk19__num_getIwEE", "NSt6__ndk17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19__num_putIcEE", "NSt6__ndk114__num_put_baseE", "NSt6__ndk17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk19__num_putIwEE", "NSt6__ndk18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk19time_baseE", "NSt6__ndk120__time_get_c_storageIcEE", "NSt6__ndk18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk120__time_get_c_storageIwEE", "NSt6__ndk115time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk118__time_get_storageIcEE", "NSt6__ndk110__time_getE", "NSt6__ndk115time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk118__time_get_storageIwEE", "NSt6__ndk18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk110__time_putE", "NSt6__ndk18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk115time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk115time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk110moneypunctIcLb0EEE", "NSt6__ndk110money_baseE", "NSt6__ndk110moneypunctIcLb1EEE", "NSt6__ndk110moneypunctIwLb0EEE", "NSt6__ndk110moneypunctIwLb1EEE", "NSt6__ndk117moneypunct_bynameIcLb0EEE", "NSt6__ndk117moneypunct_bynameIcLb1EEE", "NSt6__ndk117moneypunct_bynameIwLb0EEE", "NSt6__ndk117moneypunct_bynameIwLb1EEE", "NSt6__ndk19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk111__money_getIcEE", "NSt6__ndk19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk111__money_getIwEE", "NSt6__ndk19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "NSt6__ndk111__money_putIcEE", "NSt6__ndk19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk111__money_putIwEE", "NSt6__ndk18messagesIcEE", "NSt6__ndk113messages_baseE", "NSt6__ndk18messagesIwEE", "NSt6__ndk115messages_bynameIcEE", "NSt6__ndk115messages_bynameIwEE", "NSt6__ndk114codecvt_bynameIcc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIwc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIDsc9mbstate_tEE", "NSt6__ndk114codecvt_bynameIDic9mbstate_tEE", "NSt6__ndk115__time_get_tempIcEE", "NSt6__ndk115__time_get_tempIwEE", "bad_weak_ptr", "NSt6__ndk112bad_weak_ptrE", "NSt6__ndk114__shared_countE", "NSt6__ndk119__shared_weak_countE", "stoul", "stoll", "stoull", "stold", "string_view::substr", "system", "NSt6__ndk112system_errorE", "NSt6__ndk114error_categoryE", "NSt6__ndk112__do_messageE", "NSt6__ndk124__generic_error_categoryE", "NSt6__ndk123__system_error_categoryE", "NSt6__ndk112future_errorE", "NSt6__ndk117__assoc_sub_stateE", "NSt6__ndk123__future_error_categoryE", "N10__cxxabiv116__shim_type_infoE", "N10__cxxabiv117__class_type_infoE", "N10__cxxabiv117__pbase_type_infoE", "N10__cxxabiv119__pointer_type_infoE", "N10__cxxabiv120__function_type_infoE", "N10__cxxabiv129__pointer_to_member_type_infoE", "N10__cxxabiv123__fundamental_type_infoE", "PKDn", "PKDh", "PKDs", "PKDi", "N10__cxxabiv117__array_type_infoE", "N10__cxxabiv116__enum_type_infoE", "N10__cxxabiv120__si_class_type_infoE", "N10__cxxabiv121__vmi_class_type_infoE", "std::bad_exception", "std::bad_alloc", "bad_array_new_length", "bad_array_length", "St9exception", "St13bad_exception", "St16bad_array_length", "St9bad_alloc", "St20bad_array_new_length", "St12domain_error", "St11logic_error", "St16invalid_argument", "St12length_error", "St12out_of_range", "St11range_error", "St13runtime_error", "St14overflow_error", "St15underflow_error", "std::bad_cast", "std::bad_typeid", "St9type_info", "St8bad_cast", "St10bad_typeid", "terminating", "uncaught", "unexpected", "auto", "const_cast", "dynamic_cast", "reinterpret_cast", "static_cast", "throw", "wchar_t", "basic_istream", "basic_ostream", "basic_iostream", "std::allocator", "std::basic_string", "std::string", "std::istream", "std::ostream", "std::iostream", "void", "__float128", "decimal64", "decimal128", "decimal32", "decimal16", "char32_t", "char16_t", "std::nullptr_t", "noexcept", "union", "objc_object", "N12_GLOBAL__N_111SpecialNameE", "N12_GLOBAL__N_14NodeE", "N12_GLOBAL__N_121CtorVtableSpecialNameE", "N12_GLOBAL__N_18NameTypeE", "N12_GLOBAL__N_124ForwardTemplateReferenceE", "N12_GLOBAL__N_110NestedNameE", "N12_GLOBAL__N_111IntegerExprE", "N12_GLOBAL__N_14ExprE", "N12_GLOBAL__N_18BoolExprE", "N12_GLOBAL__N_19FloatExprIfEE", "N12_GLOBAL__N_19FloatExprIdEE", "N12_GLOBAL__N_19FloatExprIeEE", "N12_GLOBAL__N_115IntegerCastExprE", "N12_GLOBAL__N_113FunctionParamE", "N12_GLOBAL__N_18FoldExprE", "N12_GLOBAL__N_122ParameterPackExpansionE", "N12_GLOBAL__N_110BinaryExprE", "N12_GLOBAL__N_110PrefixExprE", "N12_GLOBAL__N_18CastExprE", "N12_GLOBAL__N_18CallExprE", "N12_GLOBAL__N_114ConversionExprE", "N12_GLOBAL__N_110DeleteExprE", "N12_GLOBAL__N_113QualifiedNameE", "N12_GLOBAL__N_18DtorNameE", "N12_GLOBAL__N_122ConversionOperatorTypeE", "N12_GLOBAL__N_115LiteralOperatorE", "N12_GLOBAL__N_119GlobalQualifiedNameE", "N12_GLOBAL__N_110MemberExprE", "N12_GLOBAL__N_118ArraySubscriptExprE", "N12_GLOBAL__N_110BracedExprE", "N12_GLOBAL__N_115BracedRangeExprE", "N12_GLOBAL__N_112InitListExprE", "N12_GLOBAL__N_111PostfixExprE", "N12_GLOBAL__N_17NewExprE", "N12_GLOBAL__N_113EnclosingExprE", "N12_GLOBAL__N_115ConditionalExprE", "N12_GLOBAL__N_119SizeofParamPackExprE", "N12_GLOBAL__N_113NodeArrayNodeE", "N12_GLOBAL__N_19ThrowExprE", "N12_GLOBAL__N_127ExpandedSpecialSubstitutionE", "N12_GLOBAL__N_112CtorDtorNameE", "N12_GLOBAL__N_110AbiTagAttrE", "N12_GLOBAL__N_115UnnamedTypeNameE", "N12_GLOBAL__N_115ClosureTypeNameE", "N12_GLOBAL__N_121StructuredBindingNameE", "N12_GLOBAL__N_19LocalNameE", "N12_GLOBAL__N_119SpecialSubstitutionE", "N12_GLOBAL__N_113ParameterPackE", "N12_GLOBAL__N_112TemplateArgsE", "N12_GLOBAL__N_120NameWithTemplateArgsE", "N12_GLOBAL__N_116StdQualifiedNameE", "N12_GLOBAL__N_120TemplateArgumentPackE", "N12_GLOBAL__N_112EnableIfAttrE", "N12_GLOBAL__N_116FunctionEncodingE", "N12_GLOBAL__N_19DotSuffixE", "N12_GLOBAL__N_112NoexceptSpecE", "N12_GLOBAL__N_120DynamicExceptionSpecE", "N12_GLOBAL__N_112FunctionTypeE", "N12_GLOBAL__N_113ObjCProtoNameE", "N12_GLOBAL__N_117VendorExtQualTypeE", "N12_GLOBAL__N_18QualTypeE", "N12_GLOBAL__N_110VectorTypeE", "N12_GLOBAL__N_19ArrayTypeE", "N12_GLOBAL__N_119PointerToMemberTypeE", "N12_GLOBAL__N_122ElaboratedTypeSpefTypeE", "N12_GLOBAL__N_111PointerTypeE", "N12_GLOBAL__N_119LValueReferenceTypeE", "N12_GLOBAL__N_119RValueReferenceTypeE", "N12_GLOBAL__N_120PostfixQualifiedTypeE"], "debugstrings": ["core::getVersionString_10()", "core::getIppVersion_10()", "core::getVersionMajor_10()", "core::getVersionMinor_10()", "core::getVersionRevision_10()", "<?xml version=\"1.0\" encoding=\"%s\"?>\n", "<?xml version=\"1.0\"?>\n", "Unsupported YAML version (it must be 1.x)", "#version: 1.0", "modules/core/include/opencv2/core/version.hpp", "Unknown / unsupported color conversion code", "/build/master_pack-android/opencv/modules/dnn/misc/tensorflow/versions.pb.cc", "versions.proto", "N17opencv_tensorflow10VersionDefE", "basic_conversion", "bool cv::QRDecode::versionDefinition()", "bool cv::QRDecode::samplingForVersion()", "This program requires version ", " of the Protocol Buffer runtime library, but the installed version is ", "This program was compiled against version ", " of the Protocol Buffer runtime library, which is not compatible with the installed version (", "N3rml16versioned_objectE", "TBB_VERSION", "OpenCV version 1.5.3 (build opencv-4.0.1-libjpeg-turbo)", "Wrong JPEG library version: library is %d, caller expects %d", "Unsupported color conversion request", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", " libpng version 1.6.35 - July 15, 2018\n\n", "unsupported zlib version", "ASCII conversion buffer too small", "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION", "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION", "png_image_finish_read: damaged PNG_IMAGE_VERSION", "PNG file corrupted by ASCII conversion", "png_image_write_to_memory: incorrect PNG_IMAGE_VERSION", "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION", "png_image_write_to_file: incorrect PNG_IMAGE_VERSION", "DNGVersion", "DNGBackwardVersion", "VersionYear", "OptoelectricConversionFactor", "ExifVersion", "FlashpixVersion", "No space for photometric conversion table", "No space for YCbCr->RGB conversion state", "No space for CIE L*a*b*->RGB conversion state.", "Failed to initialize CIE L*a*b*->RGB conversion state.", "initYCbCrConversion", "initCIELabConversion", "Not a TIFF file, bad version number %d (0x%x)", "Creator: JasPer Version %s", "Cannot read version ", " image files.  Current file format version is ", "The file format version number's flag field contains unrecognized flags.", ": no conversion", "N12_GLOBAL__N_114ConversionExprE", "N12_GLOBAL__N_122ConversionOperatorTypeE", "Android (4751641 based on r328903) clang version 7.0.2 (https://android.googlesource.com/toolchain/clang 003100370607242ddd5815e4a043907ea9004281) (https://android.googlesource.com/toolchain/llvm 1d739ffb0366421d383e04ff80ec2ee591315116) (based on LLVM 7.0.2svn)", "GCC: (GNU) 4.9.x 20150123 (prerelease)"], "localsymbols": [""], "dependencies": ["libc.so", "libz.so", "libjnigraphics.so", "libdl.so", "liblog.so", "libm.so"], "elfname": "libopencv_java4.so"}