{"globalvars": ["ff_pcm_f64le_demuxer", "rgb32to15", "ff_ac3_channels_tab", "ff_vf_edgedetect", "channelMappingTableWAV", "ff_h263_intra_MCBPC_bits", "FDKaacEnc_tnsCoeff4Borders", "ff_pcm_u16le_encoder", "FDKaacEnc_huff_ltabscf", "rgb24to15", "ff_sine_8192", "av_md5_size", "ff_h263_loop_filter_strength", "BitMask", "ff_ue_golomb_vlc_code", "ff_fc_4pulses_8bits_tracks_13", "ff_tns_max_bands_512", "ff_eac3_default_chmap", "ff_swb_offset_480", "ff_af_chorus", "ff_vsrc_mandelbrot", "ff_cos_512", "ff_vf_histogram", "ff_vf_fieldmatch", "ff_vf_vaguedenoiser", "ff_cos_16384", "ff_af_aecho", "ff_pcm_s8_planar_decoder", "ff_avf_showspectrumpic", "aBookPsIidTimeDecode", "ff_image_png_pipe_demuxer", "FDKaacEnc_huff_ctab1", "ff_pcm_s32be_muxer", "ff_mpeg12_vlc_dc_lum_code", "ff_pcm_u16be_encoder", "ff_vsink_nullsink", "rgb24to16", "x264_lambda2_tab", "KBDWindow128", "avpriv_pix_fmt_bps_mov", "v_Huff_envelopeLevelC10T", "ff_rl_mpeg2", "ff_mp3on4float_decoder", "RotVectorReal60", "FDKaacEnc_huff_ctabscf", "ff_sine_128_fixed", "ff_interleaved_golomb_vlc_len", "yv12touyvy", "ff_mpeg1_aspect", "x264_last_coeff_flag_offset_8x8", "ff_aanscales", "ff_png_pass_ymask", "quantizedIIDsFine", "ff_rawvideo_demuxer", "ff_vf_deshake", "ff_mpeg4_c_dc_scale_table", "ff_vf_framestep", "ff_flac_blocksize_table", "ff_id3v2_4_metadata_conv", "FDKaacEnc_huff_ctab8", "MantissaTable", "ff_image_pictor_pipe_demuxer", "aaFractDelayPhaseFactorImQmf", "aaFractDelayPhaseFactorSerImSubQmf20", "ff_http_protocol", "FDK_sbrDecoder_sbr_start_freq_24", "ff_vf_pp7", "ff_sine_windows", "ff_vf_threshold", "FDKaacEnc_huff_ltab9_10", "aStateConstant2State", "ff_avf_showwavespic", "ff_vsrc_allyuv", "ff_gif_demuxer", "ff_pcm_s24le_demuxer", "ff_pcm_u32le_demuxer", "p_FDKaacEnc_22050_short_128", "yv12toyuy2", "ff_avio_class", "ff_image2_demuxer", "p_FDKaacEnc_96000_long_1024", "ff_pcm_s32le_planar_decoder", "ff_hls_protocol", "ff_mpeg4_intra_run", "ff_tcp_protocol", "AACcodeBookDescriptionSCL", "x264_cache_mvd_func_table", "ff_sine_1024_fixed", "ff_raw_pix_fmt_tags", "x264_lambda_tab", "ff_pcm_s24be_demuxer", "x264_cache_ref_func_table", "p_FDKaacEnc_44100_short_128", "yuyvtoyuv422", "ff_vf_sidedata", "elementsTab", "ff_vf_maskedmerge", "ff_vf_delogo", "ff_cos_8192", "FDKaacEnc_huff_ctab9", "p_FDKaacEnc_11025_long_1024", "ff_alternate_horizontal_scan", "v_Huff_envelopeLevelC11T", "ff_aac_codebook_vector_idx", "ff_vsrc_testsrc", "ff_af_astats", "ff_pcm_s16le_decoder", "bins2groupMap20", "rgb32tobgr15", "ff_mpeg2_dc_scale_table", "ff_pcm_f64be_decoder", "ff_mpeg12_vlc_dc_chroma_code", "ff_af_compensationdelay", "ff_rvlc_rl_intra", "ff_ue_golomb_len", "KBDWindow960", "ff_cos_64", "ff_mpeg4_default_intra_matrix", "ff_vf_showinfo", "qmf_phaseshift_cos32_cldfb", "ff_af_firequalizer", "ff_vf_hqdn3d", "FDK_sbrDecoder_sbr_frame_info4_15", "ff_vf_readeia608", "ff_amrnb_decoder", "x264_decimate_table4", "ff_mpeg1_default_non_intra_matrix", "ff_asink_anullsink", "SineWindow512", "FDK_sbrDecoder_sbr_start_freq_32", "ff_vf_midequalizer", "ff_mpeg1_default_intra_matrix", "x264_cabac_range_lps", "ff_af_treble", "ff_pcm_alaw_muxer", "avpriv_mpeg4audio_sample_rates", "ff_sin_32768", "ff_af_asetnsamples", "ff_fft_offsets_lut", "ff_mp3_decoder", "ff_cos_16_fixed", "ff_libfdk_aac_decoder", "ff_zigzag_scan", "ff_pcm_f64be_demuxer", "ff_mp3on4_decoder", "ff_sine_256", "ff_h263_intra_MCBPC_code", "ff_mba_max", "x264_coeff_abs_level_m1_offset", "bookSbrEnvBalanceC10T", "FDK_sbrDecoder_sbr_start_freq_16", "ff_vf_setpts", "ff_af_asettb", "ff_gif_decoder", "ff_vf_crop", "ff_af_allpass", "ff_vf_fifo", "ELDAnalysis512", "rgb32tobgr24", "ff_wmv1_encoder", "ff_af_stereowiden", "ff_vf_rotate", "ff_vf_thumbnail", "ff_vf_pad", "ff_cfhp_protocol", "ff_cos_1024", "ff_vf_codecview", "ff_vf_lut2", "x264_hpel_ref0", "rgb16to32", "ff_avf_ahistogram", "FDK_sbrDecoder_sbr_start_freq_48", "ff_aac_codebook_vectors", "ff_vf_curves", "ff_vf_removelogo", "ff_aac_eld_window_512_fixed", "ff_vf_sendcmd", "ff_scc_muxer", "av_cast5_size", "ff_pcm_s32le_muxer", "aDimCb", "ff_image_j2k_pipe_demuxer", "FDKaacEnc_quantTableQ", "ff_vf_super2xsai", "ff_ac3_floor_tab", "FDKaacEnc_tnsEncCoeff4", "psTuningTable", "ff_h261_parser", "ff_vf_mergeplanes", "FDK_sbrDecoder_sbr_limGains_m", "ff_pcm_u8_demuxer", "ff_sine_2048", "ff_id3v2_mime_tags", "ff_vf_selectivecolor", "ff_pcm_u16be_decoder", "ff_pcm_lxf_decoder", "ff_image2_muxer", "ff_cos_65536", "ff_pcm_s16be_demuxer", "ff_vf_hflip", "ff_vf_avgblur", "ff_aac_adtstoasc_bsf", "ff_aac_parser", "ff_async_protocol", "ff_vf_maskedclamp", "ff_af_channelmap", "ff_vf_stereo3d", "ff_pcm_u24le_muxer", "ff_af_ametadata", "ff_image_ppm_pipe_demuxer", "av_ripemd_size", "p_FDKaacEnc_88200_long_1024", "rgb32tobgr16", "qmf_phaseshift_cos64_cldfb", "ff_zigzag_direct", "ff_af_agate", "ff_sine_256_fixed", "ff_ac3_hearing_threshold_tab", "av_tree_node_size", "ff_png_parser", "FDKaacEnc_huff_ctab3", "tns_max_bands_tbl_480", "ff_vf_erosion", "ff_pcm_u24le_demuxer", "sqrt_tab", "aQuantTable", "ff_pcm_s64be_decoder", "rgb32to16", "ff_pcm_s24be_decoder", "ff_vf_null", "ff_vf_select", "ff_add_pixels_clamped", "ff_swb_offset_1024", "ff_vsink_buffer", "ff_pcm_u16be_demuxer", "ff_pcm_s16be_planar_decoder", "ff_rgb24toyv12", "ff_h264_golomb_to_intra4x4_cbp", "ff_ffrtmphttp_protocol", "ff_vf_geq", "randomSign", "ff_cos_32768", "ff_h263_inter_MCBPC_vlc", "ff_hevc_epel_filters", "ff_mpeg4audio_channels", "ff_ac3_rematrix_band_tab", "FDKaacEnc_huff_ltab1_2", "ff_aac_spectral_codes", "ff_pcm_u32le_muxer", "ff_pcm_s24be_muxer", "InverseQuantTable", "ff_mpeg12_frame_rate_tab", "min_weight_sum", "ff_mp3adufloat_decoder", "qmf_cldfb_320", "ff_mpeg1_dc_scale_table", "ff_pow_0_7", "ff_vf_interleave", "v_Huff_envelopeLevelL10T", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10T", "FDKaacEnc_specExpMantTableCombElc", "ff_mpeg4_unpack_bframes_bsf", "ff_mpv_generic_options", "LowDelaySynthesis480", "rgb15to32", "ff_pcm_s16le_encoder", "ff_h264_cabac_tables", "FDKaacDec_tnsCoeff4", "SineWindow120", "av_filter_ffversion", "ff_vf_eq", "ff_af_crystalizer", "ff_vf_sab", "ff_af_aloop", "ff_vf_telecine", "ff_hevc_demuxer", "ff_image_dpx_pipe_demuxer", "ff_sine_32", "ff_pcm_s64le_decoder", "ff_vf_hwdownload", "ff_vf_palettegen", "ff_dc_lum_vlc", "ff_swb_offset_128", "ff_concat_demuxer", "ff_mp4_muxer", "ff_h263_pixel_aspect", "ff_af_asendcmd", "ff_vf_drawgrid", "ff_mpegvideo_demuxer", "ff_cos_131072_fixed", "ff_vf_pullup", "ff_pcm_s8_demuxer", "ff_mpeg2_frame_rate_tab", "ff_ac3_slow_gain_tab", "ff_sbr_noise_table", "ff_h264_dequant8_coeff_init_scan", "ff_mpeg4_DCtab_lum", "uyvytoyuv420", "p_FDKaacEnc_11025_short_128", "p_FDKaacEnc_12000_long_1024", "ff_pcm_f64le_decoder", "ff_af_acompressor", "shuffle_bytes_0321", "x264_significant_coeff_flag_offset", "ff_af_sidechaincompress", "x264_significant_coeff_flag_offset_8x8", "ff_af_channelsplit", "p_FDKaacEnc_12000_short_128", "ff_mpeg12_vlc_dc_chroma_bits", "ff_pcm_u32le_decoder", "ff_vf_sobel", "ff_af_asetpts", "ExponentTable", "FDKaacEnc_mTab_4_3Elc", "ff_af_areverse", "ff_vf_dejudder", "ff_vf_framepack", "FDKaacEnc_huff_ltab11", "ff_vf_tblend", "ff_vf_shuffleframes", "ff_libfdk_aac_encoder", "aCbPriority", "ff_mb_type_b_tab", "ff_af_ainterleave", "ff_h263_intra_MCBPC_vlc", "ff_rtmpe_protocol", "ff_af_bandpass", "ff_cos_2048_fixed", "ff_pcm_mulaw_decoder", "ff_png_decoder", "ff_aac_codebook_vector_vals", "sbrTuningTable", "ff_b60_sinc", "ff_pcm_zork_decoder", "ff_af_extrastereo", "ff_af_silenceremove", "ff_vf_mcdeint", "p_id", "ff_vf_showpalette", "aMinOfCbPair", "ff_aac_kbd_long_1024_fixed", "ff_vsrc_color", "sfbOffsetTables", "ff_fifo_muxer", "ff_pcm_s24daud_decoder", "ff_aac_num_swb_128", "ff_hevc_decoder", "ff_pcm_u24be_muxer", "x264_hpel_ref1", "ff_cos_4096_fixed", "ff_codec_movaudio_tags", "ff_vf_colormatrix", "ff_square_tab", "ff_pow_0_55", "ff_vf_lutrgb", "AACcodeBookDescriptionTable", "VP8GetCPUInfo", "ff_cos_4096", "aaFractDelayPhaseFactorReSubQmf20", "RotVectorReal240", "ff_dc_chroma_vlc", "ff_vf_deband", "ff_af_volumedetect", "ff_codec_bmp_tags", "p_FDKaacEnc_16000_long_1024", "ff_mjpeg_encoder", "ff_mp3_header_decompress_bsf", "ff_vf_displace", "ff_vf_decimate", "ff_sin_2048", "ff_cbpc_b_tab", "avpriv_mjpeg_bits_dc_chrominance", "ff_vf_setfield", "ff_cnhp_protocol", "ff_mpa_quant_steps", "ff_h264_dequant4_coeff_init", "shuffle_bytes_2103", "ff_fc_2pulses_9bits_track1_gray", "FDK_sbrDecoder_sbr_frame_info1_16", "FDK_sbrDecoder_sbr_whFactorsIndex", "ff_vf_alphaextract", "ff_mbincr_vlc", "ff_rawvideo_decoder", "ff_vf_trim", "FDKaacEnc_huff_ctab11", "delayIndexQmf", "ff_cos_256", "ff_ac3_enc_channel_map", "ff_h264_dequant8_coeff_init", "uyvytoyuv422", "aSignCb", "ff_pcm_f32be_muxer", "ff_md5_protocol", "avpriv_mjpeg_bits_ac_luminance", "ff_image_pam_pipe_demuxer", "ff_hevc_diag_scan8x8_y", "p_FDKaacEnc_8000_long_1024", "ff_hevc_qpel_filters", "ff_cos_65536_fixed", "ff_vf_negate", "x264_cabac_transition", "ff_aac_spectral_bits", "ff_hlsc_protocol", "ff_vf_bbox", "SineWindow32", "ff_asrc_sine", "ff_ijktcphook_protocol", "ff_image_jpeg_pipe_demuxer", "ff_asink_abuffer", "ff_aac_pred_sfb_max", "ff_mpeg4_intra_vlc", "ff_h264_golomb_to_inter_cbp", "ff_vf_realtime", "ff_image_tiff_pipe_demuxer", "ff_pcm_f64le_muxer", "KBDWindow1024", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11T", "ff_id3v2_picture_types", "ff_tns_max_bands_128", "sbrTuningTableSize", "ff_inv_aanscales", "ff_default_chroma_qscale_table", "ff_vf_owdenoise", "ff_rtmpt_protocol", "ff_vf_pixdesctest", "ff_pcm_u16le_demuxer", "x264_iter_kludge", "ff_data_demuxer", "ff_rtmpte_protocol", "FDK_sbrDecoder_invTable", "ff_vp9_superframe_bsf", "bookSbrEnvBalanceC11T", "ff_mp3float_decoder", "ff_codec_movsubtitle_tags", "ff_vf_hue", "deinterleaveBytes", "ff_avf_avectorscope", "ff_h264_chroma_qp", "ff_vf_fftfilt", "ff_vf_vectorscope", "ff_log2_tab", "ff_aac_num_swb_512", "ff_rvlc_rl_inter", "rgb24tobgr16", "RotVectorReal480", "ff_af_dynaudnorm", "ff_h264_parser", "ff_af_afftfilt", "x264_cache_mv_func_table", "ff_dither_8x8_220", "swri_resampler", "ff_ac3_bap_tab", "ff_image_sgi_pipe_demuxer", "ff_af_sidechaingate", "ff_hls_demuxer", "x264_coeff_flag_offset_chroma_422_dc", "ff_pcm_s32le_decoder", "RotVectorImag60", "ff_yuv2rgb_coeffs", "RotVectorImag480", "harmonicPhaseX", "FDKaacEnc_mTab_3_4", "ff_flv_demuxer", "SineWindow64", "ff_hevc_diag_scan4x4_x", "ff_pcm_f32le_decoder", "ff_pcm_f16le_decoder", "ff_vf_blackdetect", "ff_aac_latm_parser", "ff_interleaved_se_golomb_vlc_code", "ff_vf_colorkey", "ff_vf_spp", "ff_vsrc_cellauto", "ff_fc_2pulses_9bits_track1", "ff_asrc_anullsrc", "ff_ac3_fast_decay_tab", "FDK_sbrDecoder_sbr_randomPhase", "ff_mpeg12_vlc_dc_lum_bits", "x264_log2_lz_lut", "ff_id3v2_34_metadata_conv", "aDimCbShift", "ff_webp_muxer", "ff_h264_decoder", "ff_vf_lenscorrection", "p_FDKaacEnc_32000_short_128", "FDK_sbrDecoder_aNoIidBins", "ff_vf_loop", "ff_vsrc_smptehdbars", "ff_ijksegment_protocol", "ff_amrwb_decoder", "ScaleFactorsFine", "ff_sin_4096", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11F", "ff_id3v2_3_tags", "ff_avf_showvolume", "ff_af_loudnorm", "ff_mba_length", "SineTable512", "v_Huff_envelopeLevelC11F", "p_FDKaacEnc_48000_long_1024", "qmf_phaseshift_sin32_cldfb", "ff_vf_vignette", "ff_interleaved_dirac_golomb_vlc_code", "ff_mpegps_demuxer", "ff_af_pan", "ff_dither_4x4_16", "ff_apng_encoder", "aMaxOfCbPair", "invCount", "ff_vf_boxblur", "ff_cos_16384_fixed", "ff_vaf_spectrumsynth", "ff_image_webp_pipe_demuxer", "ff_list_bsf", "ff_h263_cbpy_tab", "ff_af_aeval", "ff_aac_eld_window_480", "ff_af_earwax", "avpriv_mjpeg_val_dc", "ff_h263p_encoder", "ff_af_ashowinfo", "ff_image_psd_pipe_demuxer", "ff_sprite_trajectory_tab", "ff_gif_muxer", "ff_inter_run", "ff_h264_golomb_to_pict_type", "ff_h263_rl_inter", "av_util_ffversion", "ff_framehash_muxer", "ff_crop_tab", "ff_codec_movvideo_tags", "x264_run_before", "ff_hevc_mp4toannexb_bsf", "ff_lzw_encode_state_size", "ff_libwebp_encoder", "ff_af_asplit", "rgb16to15", "p_FDKaacEnc_24000_long_1024", "ff_fc_4pulses_8bits_track_4", "ff_pcm_s16le_planar_decoder", "ff_codec_wav_tags", "ff_vf_bench", "ff_inverse", "ff_cos_512_fixed", "ff_network_inited_globally", "quantizedIIDs", "ff_af_atempo", "ff_pcm_u32be_muxer", "ff_live_flv_demuxer", "FDK_sbrDecoder_sbr_huffBook_NoiseLevel11T", "p_FDKaacEnc_16000_short_128", "x264_count_cat_m1", "FDKaacEnc_huff_ltab3_4", "ff_aac_kbd_short_128", "bookSbrEnvBalanceL10T", "ff_vf_blackframe", "yuv422ptoyuy2", "ff_vf_hwupload", "ff_mpegvideo_parser", "ff_vf_deflate", "ff_aac_kbd_short_128_fixed", "p_FDKaacEnc_64000_long_1024", "ff_vf_signalstats", "ff_pcm_u16le_muxer", "rgb16tobgr24", "x264_coeff0_token", "ff_dither_8x8_32", "ff_pow_0_75", "FDK_sbrDecoder_aNoIccBins", "p_FDKaacEnc_64000_short_128", "ff_sin_8192", "qmf_64", "x264_levels", "qmf_cldfb_640", "ff_id3v1_genre_str", "x264_cabac_size_unary", "ff_sine_128", "bookSbrEnvBalanceL10F", "ff_ac3_db_per_bit_tab", "ff_vf_zoompan", "ff_vf_field", "ff_ijklongurl_protocol", "ff_cos_64_fixed", "ff_vf_detelecine", "Alphas", "ff_aac_eld_window_512", "groupBorders20", "ff_avsrc_movie", "v_Huff_envelopeLevelC10F", "ff_vf_chromakey", "ff_vf_dctdnoiz", "FDKaacEnc_huff_ctab2", "groupBorders34", "ff_vf_split", "ff_aac_num_swb_480", "x264_total_zeros", "ff_ac3_log_add_tab", "ff_vf_bwdif", "ff_vf_datascope", "FDK_sbrDecoder_sbr_frame_info2_15", "ff_mov_muxer", "ff_h264_i_mb_type_info", "ff_rtmp_protocol", "ff_alternate_vertical_scan", "ff_img_options", "ff_vf_fps", "ff_vf_mpdecimate", "ff_vf_xbr", "ff_vf_hqx", "ff_vf_shuffleplanes", "x264_last_coeff_flag_offset", "ff_pcm_s16be_muxer", "x264_total_zeros_2x2_dc", "ff_vf_setsar", "rgb24tobgr24", "ff_mpeg12_static_rl_table_store", "ff_fc_2pulses_9bits_track2_gray", "FDKaacEnc_huff_ctab4", "ff_aac_num_swb_1024", "ff_af_amix", "ff_vf_format", "ff_af_highpass", "ff_pcm_u24be_demuxer", "ff_file_protocol", "p2_13_20", "p_FDKaacEnc_8000_short_128", "ff_h264_quant_rem6", "bookSbrEnvBalanceL11F", "ff_vf_ciescope", "ff_vf_colorchannelmixer", "ff_vf_nnedi", "FDK_sbrDecoder_sbr_limiterBandsPerOctaveDiv4", "ff_vf_premultiply", "ff_h264_p_sub_mb_type_info", "x264_weight_none", "SineTable480", "ff_asrc_aevalsrc", "ff_image_pcx_pipe_demuxer", "ff_ipod_muxer", "bookSbrEnvBalanceC11F", "x264_dct8_weight2_tab", "ff_ac3_dec_channel_map", "ff_af_afifo", "av_aes_size", "yuv422ptouyvy", "ff_mpeg12_mbPatTable", "ff_inter_vlc", "vu9_to_vu12", "ff_vf_readvitc", "ff_mov_demuxer", "ff_mpa_alloc_tables", "ff_xma_parser", "ff_mpeg4_decoder", "ff_vf_lut3d", "ff_vf_find_rect", "ff_mp3_demuxer", "FDKaacEnc_huff_ltab7_8", "ff_pcm_u16be_muxer", "ff_cos_128_fixed", "p_FDKaacEnc_24000_short_128", "rgb24tobgr15", "yuyvtoyuv420", "ff_image_xpm_pipe_demuxer", "tns_max_bands_tbl", "FDK_sbrDecoder_envelopeTable_16", "aaFractDelayPhaseFactorReQmf", "ff_mpegaudio_parser", "ff_vf_framerate", "p_FDKaacEnc_88200_short_128", "ff_vf_dilation", "qmf_phaseshift_sin64", "ff_vsrc_testsrc2", "bookSbrEnvBalanceL11T", "ff_image_jpegls_pipe_demuxer", "ff_vsrc_nullsrc", "ff_aac_kbd_long_1024", "ff_af_bass", "ff_af_anull", "ff_vf_copy", "ff_cfhps_protocol", "ff_vsrc_rgbtestsrc", "ff_pcm_f32be_decoder", "ff_rl_mpeg1", "FDKaacEnc_sideInfoTabLong", "ff_af_resample", "ff_flv_muxer", "ff_subfile_protocol", "ff_vf_tile", "ff_sine_512", "ff_golomb_vlc_len", "avfilter_all_channel_layouts", "ff_vf_ssim", "ff_af_aselect", "ff_pcm_f32be_demuxer", "ff_vf_fieldhint", "ff_mpeg2_aspect", "FDK_sbrDecoder_sbr_start_freq_22", "ff_sine_64", "ff_af_abench", "ff_hevc_pel_weight", "ff_vsrc_haldclutsrc", "ff_pcm_u32be_decoder", "ff_mp3_muxer", "FDKaacEnc_specExpTableComb", "ff_h263_static_rl_table_store", "ff_cos_32768_fixed", "ff_h263_cbpy_vlc", "ff_vsrc_mptestsrc", "ff_mp4_obj_type", "ff_pcm_s8_decoder", "ff_vf_removegrain", "FDKaacEnc_tnsCoeff3Borders", "FDK_sbrDecoder_sbr_start_freq_40", "ff_h264_chroma_dc_scan", "ff_af_biquad", "ff_pcm_f64be_muxer", "ff_image_pgmyuv_pipe_demuxer", "ff_vf_inflate", "ff_vf_gradfun", "aAllpassLinkDelaySer", "ff_rtmps_protocol", "x264_cabac_entropy", "ff_ijkmediadatasource_protocol", "ff_pcm_s32be_demuxer", "ff_cos_1024_fixed", "ff_vf_alphamerge", "ff_mpeg4_rl_intra", "FDK_sbrDecoder_sbr_limGains_e", "ff_dvaudio_parser", "ff_vf_reverse", "av_camellia_size", "ff_vf_paletteuse", "ff_aac_scalefactor_code", "ff_h263p_decoder", "x264_exp2_lut", "avpriv_mjpeg_val_ac_chrominance", "ff_extract_extradata_bsf", "ff_vf_w3fdif", "ff_avf_abitscope", "ff_avf_concat", "aCodebook2StartInt", "ff_vf_repeatfields", "FDK_sbrDecoder_sbr_smoothFilter", "ff_af_lowpass", "FDKaacEnc_quantTableE", "ff_af_flanger", "ff_avf_adrawgraph", "ff_flac_sample_rate_table", "aHuffTable", "FDK_sbrDecoder_sbr_start_freq_64", "ff_vf_fspp", "avpriv_mpa_bitrate_tab", "ff_vf_cover_rect", "ff_vsrc_allrgb", "ff_vf_psnr", "ff_af_alimiter", "ff_ac3_sample_rate_tab", "ff_rawvideo_options", "rgb15to16", "ff_vf_swaprect", "ff_vf_hstack", "KBDWindow120", "ff_udplite_protocol", "ff_aac_latm_decoder", "ff_mpegtsraw_demuxer", "aHuffTreeRvlCodewds", "aBookPsIidFreqDecode", "p_FDKaacEnc_44100_long_1024", "ff_ijkio_protocol", "ff_cos_2048", "FDK_sbrDecoder_sbr_start_freq_88", "ff_vf_noise", "ff_avf_showfreqs", "ff_mpa_sblimit_table", "av_format_ffversion", "ff_dither_2x2_4", "aaFractDelayPhaseFactorImSubQmf20", "ff_id3v2_tags", "ff_pcm_f32le_demuxer", "ff_sine_4096", "x264_cabac_renorm_shift", "ff_msmpeg4v3_encoder", "FDK_sbrDecoder_sbr_start_freq_44", "ff_udp_protocol", "ff_vf_scale", "ff_sine_8192_fixed", "ff_h264_p_mb_type_info", "ff_w_tab_sr", "aaFractDelayPhaseFactorSerReQmf", "ff_vf_perms", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11F", "FDKaacEnc_tnsEncCoeff3", "tns_max_bands_tbl_512", "ff_vf_extractplanes", "ff_vf_kerndeint", "ff_sin_64", "ff_crhps_protocol", "ff_sln_demuxer", "ff_ac3_bitrate_tab", "ff_h263_hwaccel_pixfmt_list_420", "ff_af_hdcd", "ff_aac_scalefactor_bits", "ff_png_encoder", "ff_avf_showspectrum", "ff_cos_131072", "ff_ijkhttphook_protocol", "ff_hevc_diag_scan4x4_y", "ff_flac_decoder", "ff_mdct_win_fixed", "FDK_sbrDecoder_sbr_frame_info1_15", "SineWindow128", "ff_id3v2_4_tags", "ff_image_pbm_pipe_demuxer", "ff_hevc_diag_scan8x8_x", "ff_mpeg12_mbMotionVectorTable", "ff_sin_16", "ff_flv_decoder", "ff_vf_overlay", "x264_bit_depth", "ff_mvtab", "qmf_phaseshift_cos_downsamp32", "av_codec_ffversion", "ff_pcm_s16le_muxer", "ff_vf_interlace", "ff_mpa_synth_window_float", "ff_dca_core_bsf", "ff_pcm_s16be_encoder", "ff_gif_encoder", "ff_rtmpts_protocol", "ff_vf_colorspace", "ff_af_dcshift", "ff_mb_btype_vlc", "ff_mv_vlc", "x264_coeff_token", "ff_ac3_fast_gain_tab", "avpriv_cga_font", "ff_vf_convolution", "ff_cos_16", "aMaxCwLen", "ff_mb_ptype_vlc", "ff_hevc_parser", "SineWindow960", "ff_eac3_default_cpl_band_struct", "ff_pcm_s24le_planar_decoder", "ff_vf_phase", "ff_mdct_win_float", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11T", "ff_vf_haldclut", "ff_vf_vstack", "FDKSEEK_CUR", "ff_put_pixels_clamped", "ff_dither_8x8_73", "ff_tns_max_bands_1024", "ff_vf_setdar", "ff_vf_bitplanenoise", "ff_image_exr_pipe_demuxer", "ff_ac3_frame_size_tab", "ff_crhp_protocol", "ff_vf_hwmap", "ff_af_join", "ff_af_astreamselect", "ff_h263_format", "FDK_sbrDecoder_sbr_limiterBandsPerOctaveDiv4_DBL", "x264_cabac_contexts", "ff_log2_run", "p_FDKaacEnc_32000_long_1024", "ff_vf_idet", "p8_13_20", "channelMappingTablePassthrough", "ff_vsrc_buffer", "ff_httpproxy_protocol", "ff_pcm_u8_muxer", "ff_acelp_interp_filter", "ff_vf_blend", "ff_h263_encoder", "v_Huff_NoiseLevelL11T", "ff_mpeg12_mbAddrIncrTable", "ff_af_aresample", "ff_mpeg4video_parser", "ff_msmpeg4v2_encoder", "aaFractDelayPhaseFactorSerImQmf", "FDK_sbrDecoder_sbr_huffBook_NoiseBalance11T", "ff_vf_separatefields", "ff_h263_chroma_qscale_table", "ff_af_arealtime", "ff_vf_signature", "ff_vf_transpose", "ff_image_bmp_pipe_demuxer", "avpriv_mjpeg_val_ac_luminance", "ff_pcm_mulaw_muxer", "rgb15tobgr24", "ff_mpeg4_y_dc_scale_table", "ff_h264_b_sub_mb_type_info", "FDKaacEnc_huff_ctab5", "ff_pcm_alaw_demuxer", "ff_sin_16384", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10T", "av_sha_size", "ff_asrc_anoisesrc", "ff_vsrc_smptebars", "FDK_sbrDecoder_sbr_whFactorsTable", "FDKSEEK_END", "ff_sin_128", "aBookPsIccTimeDecode", "ff_vf_settb", "ff_mpeg4_intra_level", "ff_h263_decoder", "ff_h263i_decoder", "ff_mpeg4_DCtab_chrom", "ff_aac_decoder", "ff_af_atrim", "ff_vf_prewitt", "ff_vf_swapuv", "FDK_sbrDecoder_envelopeTable_8", "x264_dct8_weight_tab", "ff_pcm_s24le_muxer", "ff_mpeg4_resync_prefix", "ffurl_context_class", "ff_reverse", "ff_af_acrusher", "ff_vf_tinterlace", "ff_aic_dc_scale_table", "FDK_sbrDecoder_aFixNoEnvDecode", "ff_vf_colorbalance", "ff_avf_showwaves", "ff_cos_tabs", "ff_mb_pat_vlc", "bookSbrNoiseBalanceC11T", "ff_vf_minterpolate", "ff_af_equalizer", "ff_aac_eld_window_480_fixed", "ff_image_qdraw_pipe_demuxer", "ff_sin_1024", "ff_af_acrossfade", "ff_h263_inter_MCBPC_bits", "av_sha512_size", "ff_ac3_window", "bookSbrEnvBalanceC10F", "SineWindow1024", "ff_prompeg_protocol", "ff_pcm_u8_decoder", "ff_sin_32", "ff_mpa_quant_bits", "avpriv_mjpeg_bits_dc_luminance", "ff_vf_perspective", "ff_h264_demuxer", "ff_image_sunrast_pipe_demuxer", "ff_vf_histeq", "ff_vf_qp", "ff_sqrt_tab", "qmf_phaseshift_sin64_cldfb", "x264_dct4_weight_tab", "FDKaacEnc_huff_ctab10", "FDKaacEnc_sideInfoTabShort", "x264_log2_lut", "ff_vf_mestimate", "ff_af_afade", "ff_vf_remap", "ff_hevc_muxer", "qmf_phaseshift_sin32", "ff_pcm_bluray_decoder", "ff_vf_weave", "ff_avcodec_locked", "x264_dct4_weight2_tab", "aHuffTreeRvlcEscape", "aBookPsIidFineFreqDecode", "ff_h264_muxer", "av_tea_size", "aLargestAbsoluteValue", "ff_modified_quant_tab", "ff_aac_pow34sf_tab", "ff_pcm_s24le_decoder", "ff_af_aphaser", "FDK_sbrDecoder_envelopeTable_15", "ff_pcm_s16be_decoder", "qmf_phaseshift_sin_downsamp32", "ff_h263_parser", "ff_mpeg4_default_non_intra_matrix", "ff_sws_context_class", "ff_pcm_mulaw_demuxer", "ff_avf_aphasemeter", "ff_vf_fade", "v_Huff_envelopeLevelL11F", "ff_interleaved_ue_golomb_vlc_code", "p_FDKaacEnc_48000_short_128", "ff_dither_2x2_8", "ff_pcm_u24be_decoder", "ff_vf_streamselect", "ff_pcm_f24le_decoder", "ff_codec_wav_guids", "RotVectorImag240", "ff_pcm_s32be_decoder", "ff_sipr_parser", "ff_cos_32_fixed", "ff_af_anequalizer", "FDKaacEnc_huff_ltab5_6", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10F", "aBookPsIccFreqDecode", "ff_vf_uspp", "ff_pcm_u32be_demuxer", "ff_sine_2048_fixed", "ff_pcm_f32le_muxer", "x264_cpu_names", "ff_mjpeg_parser", "ff_vf_cropdetect", "yvu9_to_yuy2", "qmf_phaseshift_cos64", "ff_pcm_u24le_decoder", "ff_pcm_dvd_decoder", "ff_vf_drawgraph", "ff_af_aformat", "ff_sine_1024", "v_Huff_envelopeLevelL10F", "ff_cnhps_protocol", "ff_aac_demuxer", "ff_cos_tabs_fixed", "ff_sin_512", "x264_level_token", "ff_dither_8x8_128", "ff_inter_level", "ff_vf_lut", "qmf_phaseshift_cos32", "swr_ffversion", "ff_af_replaygain", "aaFractDelayPhaseFactorSerReSubQmf20", "ff_swb_offset_512", "ff_pcm_s16le_demuxer", "ff_mp3adu_decoder", "ff_vf_random", "ff_pcm_s32le_demuxer", "ff_vf_unsharp", "ff_af_apad", "bookSbrNoiseBalanceL11T", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10F", "ff_vsrc_life", "ff_vf_il", "ff_image_dds_pipe_demuxer", "ff_h264_b_mb_type_info", "avpriv_mpa_freq_tab", "ff_vf_hysteresis", "aBookPsIidFineTimeDecode", "v_Huff_NoiseLevelC11T", "decayScaleFactTable", "ff_mpeg4_dc_threshold", "ff_vf_gblur", "ff_image_pgm_pipe_demuxer", "ff_mpeg4_static_rl_table_store", "ff_ac3_slow_decay_tab", "ff_pcm_alaw_decoder", "ff_vf_fieldorder", "ff_af_apulsator", "ff_sine_4096_fixed", "avpriv_pix_fmt_bps_avi", "ff_af_compand", "avpriv_mjpeg_bits_ac_chrominance", "FDK_sbrDecoder_sbr_frame_info2_16", "FDKaacEnc_huff_ctab6", "ff_se_golomb_vlc_code", "ff_af_adelay", "ff_sin_65536", "interleaveBytes", "ff_aac_spectral_sizes", "FDKaacEnc_huff_ctab7", "ff_vf_drawbox", "FDKSEEK_SET", "x264_total_zeros_2x4_dc", "p_FDKaacEnc_96000_short_128", "av_twofish_size", "ff_mpa_enwindow", "ff_af_bandreject", "ff_sine_512_fixed", "ff_h264_chroma422_dc_scan", "FDK_sbrDecoder_sbr_frame_info4_16", "ff_pipe_protocol", "ff_vf_scale2ref", "ff_cos_8192_fixed", "ff_pcm_s8_muxer", "ff_vsrc_yuvtestsrc", "ff_mpegts_demuxer", "ff_mpa_synth_window_fixed", "x264_chroma_format", "ff_pcm_u16le_decoder", "rgb24tobgr32", "ff_h264_mp4toannexb_bsf", "SineWindow480", "ff_sine_64_fixed", "ELDAnalysis480", "ff_af_amerge", "ff_h264_quant_div6", "ff_h264_mb_sizes", "ff_cos_32", "ff_af_asidedata", "ff_h263_inter_MCBPC_code", "ff_mpeg2_non_linear_qscale", "ff_af_ebur128", "ff_vf_lutyuv", "sin_twiddle_L64", "FDKaacDec_tnsCoeff3", "ScaleFactors", "ff_vf_elbg", "ff_libx264_encoder", "ff_wav_muxer", "ff_af_tremolo", "ff_img_tags", "x264_decimate_table8", "ff_vf_atadenoise", "ff_wav_demuxer", "ff_sine_32_fixed", "ff_vf_yadif", "ff_vf_vflip", "ff_cbrt_tab", "LowDelaySynthesis512", "ff_vf_metadata", "avpriv_ac3_channel_layout_tab", "ff_vf_noformat", "ff_vf_nlmeans", "ff_af_volume", "windowSlopes", "ff_vf_waveform", "ff_aac_pow2sf_tab", "ff_af_aperms", "ff_af_vibrato", "ff_af_stereotools", "ff_af_asetrate", "ff_h263_mbtype_b_tab", "planar2x", "ff_riff_info_conv", "ff_avsrc_amovie", "ff_cos_256_fixed", "ff_clfp_protocol", "ff_vf_colorlevels", "aAllpassLinkDecaySer", "ff_tns_max_bands_480", "p_FDKaacEnc_22050_long_1024", "ff_sine_windows_fixed", "yuy2toyv12", "ff_cos_128", "avpriv_vga16_font", "v_Huff_envelopeLevelL11T", "ff_af_aemphasis", "ff_af_silencedetect", "ff_sin_256", "ff_rl_intra_aic", "ff_vf_smartblur", "x264_cabac_transition_unary", "ff_asrc_abuffer", "ff_avf_showcqt"], "importedglobals": ["__stack_chk_guard", "__sF"], "importedfunctions": ["asin", "fputs", "fprintf", "strtoull", "clock_gettime", "strncpy", "unlink", "memmem", "atan2f", "lrint", "inet_ntop", "fseek", "memcpy", "read", "bind", "getsockname", "clock", "mmap", "dlclose", "pthread_once", "calloc", "lseek64", "strspn", "sinh", "pipe", "strerror_r", "cosf", "rmdir", "realloc", "zlibCompileFlags", "gmtime_r", "pow", "strtok", "pthread_cond_destroy", "mktime", "__isfinite", "log10", "logf", "strftime", "getc", "mkstemp", "strcmp", "isatty", "atanf", "fopen", "shutdown", "strcpy", "strncasecmp", "inflateInit_", "fcntl", "lround", "setsockopt", "cosh", "sysconf", "cos", "strpbrk", "uncompress", "pthread_cond_wait", "strtoll", "llrint", "pthread_mutex_destroy", "strchr", "arc4random", "dlerror", "cbrtf", "deflateReset", "fstat", "access", "sin", "getenv", "fmod", "fabs", "listen", "sqrt", "fwrite", "llrintf", "strrchr", "getpeername", "rint", "pthread_mutex_init", "vsprintf", "fdopen", "fread", "ldexp", "sscanf", "exp2", "atol", "frexp", "pthread_attr_init", "stat", "log10f", "inflateEnd", "open", "memcmp", "cbrt", "pthread_join", "pthread_cond_init", "acos", "erf", "gettimeofday", "__isinf", "readdir", "memchr", "truncf", "ceil", "dlsym", "round", "pthread_mutex_unlock", "fgets", "strlen", "pthread_exit", "freeaddrinfo", "fputc", "nanosleep", "memalign", "rewind", "ftell", "sendto", "inflateInit2_", "deflateEnd", "__assert2", "exp", "pthread_create", "memmove", "nice", "truncate", "socket", "snprintf", "__stack_chk_fail", "deflateBound", "dlopen", "tan", "write", "pthread_cond_signal", "strcspn", "atan", "time", "isnanf", "close", "bsearch", "opendir", "deflate", "strtod", "pthread_self", "poll", "floor", "log", "tanh", "fflush", "strtol", "getsockopt", "strtok_r", "inet_aton", "ftello", "lrintf", "accept", "vfprintf", "qsort", "recv", "abort", "pthread_cond_broadcast", "select", "sprintf", "roundf", "powf", "deflateInit2_", "fclose", "__errno", "lstat", "getaddrinfo", "pthread_mutex_lock", "trunc", "modf", "inflate", "raise", "send", "atoi", "pthread_attr_setdetachstate", "floorf", "gai_strerror", "memset", "strcasecmp", "rename", "sinf", "getnameinfo", "closedir", "vsnprintf", "vprintf", "expf", "strdup", "hypot", "ceilf", "fseeko", "malloc", "strncmp", "munmap", "connect", "strtoul", "__isinff", "strstr", "localtime_r", "free", "pthread_cond_timedwait", "atan2"], "exportedfunctions": ["av_thread_message_flush", "x264_predict_16x16_h_c", "_Z41FDKsbrEnc_InitSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORiiiiiiij", "av_vbprintf", "ff_get_wav_header", "x264_ratecontrol_mb", "av_frame_get_buffer", "_Z10GetDrcInfoi", "_Z23CAacDecoder_AncDataInitP8CAncDataPhi", "ff_mpeg4_decode_picture_header", "x264_opencl_close_library", "x264_cpu_num_processors", "ff_fft_calc_vfp", "av_get_bits_per_sample", "x264_prefetch_fenc", "avio_flush", "av_sha512_alloc", "_Z22transportEnc_LatmWriteP11LATM_STREAMP13FDK_BITSTREAMiiP13CSTpCallBacks", "av_packet_free_side_data", "ff_mov_init_hinting", "x264_sps_init_reconfigurable", "sbrDecoder_drcFeedChannel", "av_frame_get_color_range", "av_write_frame", "av_grow_packet", "ff_pred16x16_left_dc_neon", "ff_pred16x16_plane_neon", "ff_idctdsp_init_arm", "ff_get_format", "av_guess_frame_rate", "ff_avg_h264_qpel8_mc33_neon", "x264_predict_16x16_p_c", "ijkav_register_ijkhttphook_protocol", "_Z24transportEnc_CrcStartRegP12TRANSPORTENCi", "_Z24FDKaacEnc_CodePnsChanneliP10PNS_CONFIGPiPlS1_S2_", "_Z31GetRequiredMemRam_Sbr_guideScfbv", "ff_h264_idct_add_10_c", "av_xiphlacing", "avfilter_link_free", "x264_rdo_init", "sbrEncoder_UpdateBuffers", "av_opt_freep_ranges", "av_fifo_generic_peek_at", "ff_hevc_reset_sei", "ff_side_data_set_encoder_stats", "FDKfgets", "shuffle_bytes_3210", "av_frame_set_pkt_size", "__ledf2", "avio_open_dyn_buf", "avresample_config", "x264_threadpool_init", "FDKaacEnc_AacInitDefaultConfig", "avio_find_protocol_name", "ff_h263_show_pict_info", "av_strcasecmp", "ff_put_pixels8_x2_no_rnd_neon", "av_frame_get_side_data", "_Z34FDKsbrEnc_sbrNoiseFloorEstimateQmfP24SBR_NOISE_FLOOR_ESTIMATEPK14SBR_FRAME_INFOPlPS4_PaiijiP9INVF_MODEj", "ff_pcm_read_seek", "ff_hevc_prev_intra_luma_pred_flag_decode", "avpriv_set_systematic_pal2", "av_write_uncoded_frame", "ff_put_pixels8_x2_arm", "av_buffersrc_add_frame_flags", "ff_nv21_to_abgr_neon", "ff_mdct15_uninit", "_Z22FreeRam_Sbr_v_k_masterPPh", "ff_h264_idct_add16_9_c", "sws_normalizeVec", "av_sdp_create", "_Z22adtsWrite_EncodeHeaderP11STRUCT_ADTSP13FDK_BITSTREAMii", "_Z28transportEnc_WriteAccessUnitP12TRANSPORTENCiii", "av_opt_set_sample_fmt", "ff_frame_thread_init", "ff_hevc_get_ref_list", "_Z10imdct_gainPlPii", "ff_hevc_pcm_flag_decode", "ffurl_read_complete", "rgb48tobgr48_nobswap", "ff_put_h264_qpel8_mc11_neon", "ff_resample_common_apply_filter_x8_s16_neon", "ff_h264_idct8_add_12_c", "ff_pred8x8_dc_neon", "av_reallocp_array", "_Z20CJointStereo_ApplyISPP22CAacDecoderChannelInfoPKsPKhiij", "_Z11imdct_drainP6mdct_tPli", "av_fft_end", "_Z25sbrDecoder_drcInitChannelP18SBRDEC_DRC_CHANNEL", "ff_hevc_put_qpel_uw_h1v3_neon_8", "avio_skip", "_Z36GetRequiredMemRam_aacEnc_ElementBitsv", "ff_faanidct", "av_packet_merge_side_data", "av_image_get_linesize", "x264_frame_push_unused", "ff_hevc_no_residual_syntax_flag_decode", "ff_h263_decode_init_vlc", "x264_threads_merge_ratecontrol", "ff_draw_rectangle", "x264_predict_8x16c_dc_c", "av_aes_ctr_get_iv", "_Z28GetRequiredMemAACdynamic_RAMv", "ff_startcode_find_candidate_armv6", "ff_fdct_ifast", "av_audio_resample_init", "avcodec_version", "avio_seek_time", "av_bsf_free", "ff_celp_math_init", "av_hwdevice_ctx_init", "av_murmur3_alloc", "ff_mpv_decode_init", "ff_get_unscaled_swscale", "avcodec_default_execute2", "ff_put_no_rnd_qpel8_mc31_old_c", "_Z24qmfAnalysisFilteringSlotP15QMF_FILTER_BANKPlS1_PKsiS1_", "av_display_rotation_get", "av_picture_pad", "ff_libwebp_error_to_averror", "ff_fdct248_islow_10", "av_bprint_escape", "ff_sdp_write_media", "ff_hevc_skip_flag_decode", "avformat_new_stream", "av_fast_malloc", "x264_threadslice_cond_broadcast", "_Z35GetRequiredMemRam_SbrDecWorkBuffer2v", "_Z10fixp_atan2ll", "ff_simple_idct44_add", "x264_quant_chroma_dc_trellis", "avcodec_receive_packet", "av_tree_insert", "_Z32GetRequiredMemRam_Sbr_v_k_masterv", "av_base64_encode", "av_image_copy_to_buffer", "ff_h264_pred_init", "_Z25transportDec_GetBitstreamP12TRANSPORTDECj", "x264_frame_expand_border", "FDKfloor", "av_memdup", "ff_h264_v_loop_filter_luma_neon", "av_register_output_format", "ff_mov_get_channel_layout_tag", "ff_hevc_ref_idx_lx_decode", "avresample_build_matrix", "avio_get_str16be", "av_opt_set_dict2", "ff_hevc_put_qpel_neon_wrapper", "x264_intra_sad_x3_16x16_neon", "_Z21transportEnc_writePCEP13FDK_BITSTREAM12CHANNEL_MODEiiiiij", "ff_ebur128_loudness_window", "_Z21sbrdecDownSampleLoResPhhS_h", "sws_getDefaultFilter", "av_hash_names", "_Z16sbrGetHeaderDataP15SBR_HEADER_DATAP13FDK_BITSTREAMji", "ff_h264_get_slice_type", "avfilter_graph_dump", "_Z28FDKaacEnc_InitBlockSwitchingP23BLOCK_SWITCHING_CONTROLi", "av_codec_set_codec_descriptor", "sbrDecoder_GetDelay", "ff_avg_h264_qpel8_mc23_neon", "_Z21GetRam_Sbr_envYBufferiPh", "ff_put_qpel8_mc11_old_c", "WebPCleanupTransparentArea", "av_parser_close", "swri_audio_convert_alloc", "ff_png_zalloc", "x264_macroblock_cache_allocate", "x264_predict_lossless_16x16", "ff_mpa_synth_init_float", "ff_read_riff_info", "av_get_audio_frame_duration2", "ff_avfilter_link_set_in_status", "av_hwdevice_hwconfig_alloc", "ff_put_pixels8_y2_armv6", "ff_sbr_qmf_pre_shuffle_neon", "_Z20resetSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "ff_hevc_add_residual_32x32_neon_8", "FDKfopen", "ff_acelp_lspd2lpc", "ff_ebur128_add_frames_int", "ff_generate_wave_table", "__popcountsi2", "avresample_set_channel_mapping", "_Z39GetRequiredMemRam_Sbr_QmfStatesAnalysisv", "ff_raw_write_packet", "_Z25qmfInitAnalysisFilterBankP15QMF_FILTER_BANKPsiiiii", "ff_sample_fmt_is_planar", "av_d2str", "_Z31GetRequiredMemRam_SbrDecElementv", "ff_mdct15_init", "_Z19aacDecoder_drcApplyP8CDrcInfoPvP22CAacDecoderChannelInfoP15CDrcChannelDataPliii", "_Z12CRvlc_DecodeP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoP13FDK_BITSTREAM", "_Z22CConcealment_GetMethodP14CConcealParams", "av_memcpy_backptr", "av_xtea_init", "ff_sbr_hf_apply_noise_1_neon", "av_add_i", "_Z18GetWorkBufferCore2i", "x264_slurp_file", "_Z22transportDec_CrcEndRegP12TRANSPORTDECi", "avio_enum_protocols", "av_q2intfloat", "WebPEncodeBGRA", "av_audio_fifo_free", "_Z18CConcealment_ApplyP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoPK16SamplingRateInfoihij", "ff_draw_init", "x264_mb_mc_8x8", "x264_predict_8x8_h_c", "ff_hevc_part_mode_decode", "_Z16FreeRam_PsEncodePP11T_PS_ENCODE", "ff_dither_free", "FDKstrlen", "ff_subtitles_queue_seek", "ff_mpv_common_init_arm", "ff_all_formats", "ff_flacdsp_init_arm", "ff_socket_nonblock", "av_int_list_length_for_size", "ff_avg_h264_qpel16_mc10_neon", "x264_predict_8x8c_h_c", "x264_opencl_slicetype_prep", "swr_convert", "ff_hevc_put_qpel_uw_h2_neon_8", "ff_ps_init", "swri_oldapi_conv_fltp_to_s16_2ch_neon", "_Z7HcrInitP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "x264_opencl_precalculate_frame_cost", "_Z26sbrGetSingleChannelElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAMP6PS_DECji", "ff_crc04C11DB7_update", "x264_weight_scale_plane", "ff_put_pixels8_neon", "ff_frame_pool_get_audio_config", "WebPPictureInitInternal", "rgb16tobgr16", "x264_macroblock_analyse", "av_twofish_crypt", "_Z42FDKsbrEnc_PSEnc_ParametricStereoProcessingP19T_PARAMETRIC_STEREOPPsjPP15QMF_FILTER_BANKPPlS7_S1_S4_Pai", "_Z29FDKsbrEnc_initInvFiltDetectorP16SBR_INV_FILT_ESTPiij", "ff_h264_field_end", "av_register_all", "ff_id3v2_read", "swri_oldapi_conv_flt_to_s16_neon", "ff_formats_changeref", "ff_h264_direct_dist_scale_factor", "av_log_format_line", "_Z30FreeRam_aacEnc_AdjustThresholdPP13ADJ_THR_STATE", "_Z29FreeRam_aacEnc_PsyOutElementsPP15PSY_OUT_ELEMENT", "avio_rb64", "avcodec_dct_alloc", "FDKsbrEnc_WritePSBitstream", "ff_hevc_put_pixels_w16_neon_8", "ff_h264_idct8_dc_add_neon", "__muldf3", "ff_fft_permute_neon", "av_opt_set_dict", "__adddf3", "av_buffer_ref", "av_read_pause", "x264_mc_init_arm", "FDKpow", "ff_sbr_autocorrelate_neon", "avio_alloc_context", "x264_macroblock_encode_p4x4", "avcodec_align_dimensions2", "ff_hevc_inter_pred_idc_decode", "av_hash_final", "_Z21transportEnc_writeASCP13FDK_BITSTREAMP12CODER_CONFIGP13CSTpCallBacks", "ff_colorspacedsp_init", "av_match_ext", "_Z29Hcr_State_BODY_SIGN_ESC__SIGNP13FDK_BITSTREAMPv", "_Z32FDKsbrEnc_InitExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiiiiimiPhj", "ff_hevc_put_qpel_h1v3_neon_8", "FDKatan", "_Z30FDKaacEnc_InitPsyConfigurationiiiiiiP17PSY_CONFIGURATION7FB_TYPE", "ff_mpv_common_init", "_Z10CTns_ResetP8CTnsData", "_Z18CRvlc_ElementCheckPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoji", "avformat_alloc_context", "x264_analyse_init_costs", "av_format_set_control_message_cb", "av_stereo3d_create_side_data", "av_guess_sample_aspect_ratio", "ff_vector_fmul_scalar_neon", "av_format_set_metadata_header_padding", "_Z34GetRequiredMemRam_aacEnc_QCelementv", "av_frame_set_color_range", "ff_merge_channel_layouts", "av_color_transfer_name", "ff_audio_resample", "avcodec_get_edge_width", "ff_avg_qpel16_mc13_old_c", "_Z30FDKsbrEnc_FindStartAndStopBandiiiiiPiS_", "ff_kbd_window_init", "ff_celp_circ_addf", "FDK_get", "ff_hevc_rem_intra_luma_pred_mode_decode", "_Z40FDKsbrEnc_SbrMissingHarmonicsDetectorQmfP30SBR_MISSING_HARMONICS_DETECTORPPlPPiPaPK14SBR_FRAME_INFOPKhS3_PhSA_iSB_S1_", "ff_pred8x8_left_dc_neon", "ff_pred8x8_l00_dc_neon", "ff_framequeue_add", "ff_audio_resample_init_arm", "av_pkt_dump_log2", "sbrDecoder_Apply", "av_opt_set_channel_layout", "ff_mjpeg_encode_mb", "ff_mpeg4_decode_video_packet_header", "av_interleaved_write_frame", "ffio_init_context", "av_frame_clone", "ff_h263dsp_init", "av_codec_set_lowres", "ff_get_audio_buffer", "_Z25transportEnc_GetBitstreamP12TRANSPORTENC", "aacDecoder_AncDataGet", "av_buffersink_get_h", "av_log_set_flags", "_Z24FDKsbrEnc_CreatePSEncodePP11T_PS_ENCODE", "ff_put_pixels8_y2_no_rnd_armv6", "ff_avg_h264_qpel16_mc31_neon", "x264_cavlc_init", "_Z15GetRam_PsEncodei", "ff_put_h264_qpel16_mc02_neon", "sws_shiftVec", "_Z17FDKaacEnc_psyMainiP11PSY_ELEMENTP11PSY_DYNAMICP17PSY_CONFIGURATIONP15PSY_OUT_ELEMENTPsPii", "av_stream_new_side_data", "sws_init_context", "x264_threadpool_wait", "ff_ebur128_add_frames_planar_int", "av_fifo_size", "ff_getaddrinfo_a_init", "ff_h264_get_profile", "ff_h264_idct_add_neon", "ff_raw_read_partial_packet", "x264_deblock_init", "_Z23CAacDecoder_SyncQmfModeP20AAC_DECODER_INSTANCE", "ff_h264_ps_uninit", "av_format_get_data_codec", "av_timecode_check_frame_rate", "ff_h264_luma_dc_dequant_idct_12_c", "FDK_CreateBitBuffer", "avio_r8", "ff_avg_pixels16_y2_no_rnd_neon", "ffio_open2_wrapper", "ff_put_pixels8_xy2_arm", "pcmDmx_GetLibInfo", "_Z28FDKaacEnc_DetermineBandWidthPiii19AACENC_BITRATE_MODEiiP15CHANNEL_MAPPING12CHANNEL_MODE", "av_hwframe_ctx_alloc", "ff_rtmp_packet_write", "avpriv_solve_lls", "ff_audio_data_set_channels", "av_mdct_calc", "_Z4fPowliliPi", "avfilter_register_all", "ff_thread_get_buffer", "mov_get_ctts", "ff_udp_get_local_port", "avfilter_make_format64_list", "avpriv_mpegts_parse_packet", "_Z10CPns_ApplyPK8CPnsDataPK8CIcsInfoPlPKsS7_PK16SamplingRateInfoii", "ff_h2645_packet_split", "ff_vector_fmul_window_vfp", "avresample_close", "ff_filter_graph_run_once", "FDKaacEnc_Initialize", "av_register_codec_parser", "FDKfree_L", "_Unwind_GetCFA", "_Z19createLppTransposerP13SBR_LPP_TRANSP19TRANSPOSER_SETTINGSiPhiiiiS3_ijii", "avfilter_sub_matrix", "av_get_default_channel_layout", "ff_h264_sei_decode", "sws_freeContext", "_Z30GetAacDecoderStaticChannelInfoi", "ff_mpeg4_get_video_packet_prefix_length", "ff_vector_fmul_neon", "WebPPictureImportBGRX", "ff_text_init_buf", "x264_frame_push_blank_unused", "audio_resample_close", "avio_wl64", "_Z24FreeRam_aacEnc_PsyStaticPP10PSY_STATIC", "ff_hex_to_data", "ffurl_open_whitelist", "ff_mpeg12_common_init", "av_opt_find2", "av_application_alloc", "av_ll", "ff_inlink_evaluate_timeline_at_frame", "ff_mpeg4video_split", "FDKprintf", "swresample_version", "ff_merge_formats", "ff_mdct_fixed_calcw_neon", "av_hmac_alloc", "av_tea_init", "ff_default_get_video_buffer", "ff_h264_update_thread_context", "avfilter_license", "av_application_will_http_seek", "avio_free_directory_entry", "av_bitstream_filter_filter", "av_get_colorspace_name", "ff_init_ff_sine_windows", "ff_id3v2_write_apic", "ff_h264_check_intra4x4_pred_mode", "ff_frame_thread_free", "swr_alloc_set_opts", "aacEncoder_GetParam", "__gnu_Unwind_Save_VFP_D_16_to_31", "ff_put_v", "_Z34FDKsbrEnc_CreateExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiPh", "ff_hevc_put_qpel_h1_neon_8", "_Z21FDKaacEnc_dynBitCountP13BITCNTR_STATEPKsPKjPKiiiiiS6_P12SECTION_DATAS6_S6_S6_j", "ff_mjpeg_encode_picture_header", "FDKaalloc_L", "_Z24CBlock_ScaleSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "av_filter_next", "ff_mpeg4_find_frame_end", "av_bsf_get_by_name", "ff_imdct_calc_neon", "ff_h264_idct_add8_14_c", "ff_set_cmp", "x264_encoder_reconfig_apply", "_Z7IcsReadP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfoj", "av_get_pcm_codec", "_Z32FDKsbrEnc_LSI_divide_scale_fractlll", "av_display_rotation_set", "av_rc4_init", "_Z29GetRequiredMemWorkBufferCore1v", "ff_hevc_split_transform_flag_decode", "ff_tilt_compensation", "_Z11resetSbrDecP7SBR_DECP15SBR_HEADER_DATAP19SBR_PREV_FRAME_DATAii", "_Z12invSqrtNorm2lPi", "x264_sei_write", "ff_null_get_video_buffer", "getLimiterDelay", "av_stereo3d_from_name", "av_bsf_send_packet", "ff_nv21_to_bgra_neon", "av_seek_frame", "ff_hevc_cbf_cb_cr_decode", "av_log_default_callback", "_Z21FDKaacEnc_countValuesPsii", "av_log_missing_feature", "ff_h264qpel_init", "avpriv_mpegts_parse_close", "ff_dct_unquantize_h263_intra_neon", "ff_yuv2rgb_get_func_ptr", "ff_hevc_sao_eo_class_decode", "_Z23FDKaacEnc_peCalculationP7PE_DATAPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELP9TOOLSINFOP11ATS_ELEMENTi", "__eqsf2", "_Z17GetRam_SbrChanneli", "ff_lzw_decode", "ff_amf_read_bool", "av_packet_add_side_data", "pcmDmx_SetParam", "ff_http_match_no_proxy", "ff_hevc_put_pixels_w64_neon_8", "av_frame_set_decode_error_flags", "x264_macroblock_probe_skip", "setLimiterAttack", "avfilter_pad_get_name", "av_dirac_parse_sequence_header", "ff_put_h264_qpel8_mc02_neon", "ff_put_signed_pixels_clamped_neon", "x264_rd_cost_part", "ff_replaygain_export", "ff_hevc_hls_filters", "_Z22CProgramConfig_IsValidPK14CProgramConfig", "ff_hevc_luma_mv_merge_mode", "swr_next_pts", "x264_encoder_delayed_frames", "ff_dualinput_request_frame", "avfilter_graph_config", "avpriv_frame_get_metadatap", "ff_h264_idct_add16_10_c", "ff_hevc_put_qpel_h1v1_neon_8", "ff_pcm_read_packet", "ff_kbd_window_init_fixed", "_Z24GetRam_aacEnc_PsyElementi", "av_stereo3d_type_name", "av_parse_color", "avio_rl64", "av_opt_copy", "ff_fix_long_p_mvs", "ff_get_qtpalette", "ff_add_format", "ff_inlink_consume_frame", "FDKstrstr", "avfilter_config_links", "ff_rtmp_packet_dump", "x264_predict_8x8c_init_arm", "_Z27FDKsbrEnc_getSbrStopFreqRAWii", "av_codec_get_codec_properties", "_Z19FDKaacEnc_PnsDetectP10PNS_CONFIGP8PNS_DATAiiiPlPKiS3_PiPsiiiS3_S6_", "_Z25FreeAacDecoderChannelInfoPP22CAacDecoderChannelInfo", "ff_me_init_context", "_Z38GetRequiredMemRam_aacEnc_PsyOutChannelv", "__gnu_Unwind_Restore_VFP", "ff_set_common_samplerates", "rgbx_to_nv12_neon_16", "av_pix_fmt_desc_get", "av_application_did_io_tcp_read", "avcodec_register", "ff_h264_idct_add8_422_12_c", "av_bitstream_filter_init", "WebPPictureImportBGR", "ff_ebur128_add_frames_short", "av_nearer_q", "av_parse_ratio", "ff_put_h264_qpel16_mc21_neon", "ff_put_bmp_header", "_Z15FDKaacEnc_BCNewPP13BITCNTR_STATEPh", "ff_avg_h264_qpel8_mc00_neon", "x264_slicetype_decide", "x264_opencl_lookahead_delete", "WebPMemoryWrite", "ff_network_close", "ff_vector_fmul_add_neon", "av_bsf_list_append", "WebPPictureAlloc", "ff_hscale_8_to_15_neon", "_Z28FreeRam_PsQmfStatesSynthesisPPl", "_Z27transportDec_GetAuBitsTotalP12TRANSPORTDECj", "_Z21FDKaacEnc_AdjThrClosePP13ADJ_THR_STATE", "av_mul_q", "ff_codec_open2_recursive", "x264_cabac_mb_skip", "_Z24GetRequiredMemRam_ps_decv", "x264_intra_sa8d_x3_8x8", "_Z17CJointStereo_ReadP13FDK_BITSTREAMP16CJointStereoDataiij", "_Z33FreeRam_aacEnc_AdjThrStateElementPP11ATS_ELEMENT", "swr_init", "ff_flac_parse_streaminfo", "ff_sine_window_init_fixed", "avcodec_find_encoder", "_Z21FreeRam_Sbr_guideScfbPPh", "_Z19fillHybridDelayLinePPlS0_S_S_S_S_P6HYBRID", "ff_hevc_put_qpel_v3_neon_8", "_Z20FDKaacEnc_DownsampleP11DOWNSAMPLERPsiiS1_Pii", "ff_frame_pool_get", "x264_pixel_init", "ff_isom_write_vpcc", "av_format_get_audio_codec", "ff_opencl_register_filter_kernel_code_all", "ff_thread_video_encode_frame", "android_setCpu", "ff_acelp_lsf2lsp", "x264_ratecontrol_new", "_Z21aacDecoder_drcGetInfoP8CDrcInfoPaS1_", "WebPPictureARGBToYUVADithered", "ff_h264_luma_dc_dequant_idct_8_c", "ff_mdct_end_fixed", "aacDecoder_GetLibInfo", "ff_hevc_annexb2mp4", "_Z37GetRequiredMemRam_Sbr_guideVectorDiffv", "ff_thread_decode_frame", "ff_id3v1_read", "_Z8fDivNormllPi", "ff_bswapdsp_init", "avpriv_report_missing_feature", "av_file_map", "avfilter_open", "x264_macroblock_write_cabac", "ff_interleaved_peek", "sws_getContext", "WebPPictureImportRGBA", "_Z19ToggleReadDirectionh", "FDKtan", "_Z13PSEnc_DestroyPP19T_PARAMETRIC_STEREO", "ff_hevcdsp_init_arm", "ff_log2_q15", "ff_raw_audio_read_header", "x264_sps_init", "avformat_get_riff_audio_tags", "_Z9shellsortPhh", "av_mod_i", "x264_malloc", "_Z35transportEnc_LatmAdjustSubframeBitsP11LATM_STREAMPi", "x264_mb_encode_chroma", "ff_get_codec_guid", "FDKsin", "ff_lzw_encode", "ff_hevc_parse_sps", "x264_macroblock_write_cavlc", "_Z12deleteSbrDecP11SBR_CHANNEL", "_Z35GetRam_Sbr_prevEnvelopeCompensationi", "ff_dct_end", "ff_h264_luma_dc_dequant_idct_10_c", "___Unwind_ForcedUnwind", "x264_lookahead_is_empty", "ff_blend_init", "av_md5_final", "ff_hevc_sao_merge_flag_decode", "ff_butterflies_float_vfp", "WebPFree", "ff_exp2", "ff_h263_pred_motion", "_Z24FDKaacEnc_PreEchoControlPliiisS_iPi", "ff_hevc_frame_nb_refs", "ff_avg_pixels8_armv6", "_Z25FreeRam_SbrDecWorkBuffer2PPl", "avformat_version", "avcodec_default_get_buffer2", "ff_rtmp_packet_create", "av_aes_ctr_free", "av_camellia_alloc", "rgb64to48_nobswap", "x264_frame_shift", "avformat_init_output", "ff_ape_write_tag", "_Unwind_ForcedUnwind", "avformat_free_context", "av_des_mac", "ff_simple_idct_armv6", "ff_avg_pixels16_armv6", "_Z38GetRequiredMemRam_Sbr_detectionVectorsv", "ff_h264_chroma422_dc_dequant_idct_10_c", "avcodec_close", "ff_parse_close", "ff_put_pixels8_armv6", "ff_sbr_hf_apply_noise_3_neon", "_Unwind_GetTextRelBase", "ff_biweight_h264_pixels_8_neon", "av_codec_is_encoder", "_Z38FDKsbrEnc_InitSbrFastTransientDetectorP18FAST_TRAN_DETECTORiiii", "FDKstrncpy", "av_opt_get_pixel_fmt", "ff_hevc_put_qpel_uw_pixels_w24_neon_8", "avio_check", "ff_alloc_extradata", "av_get_random_seed", "avfilter_pad_get_type", "_Z25FreeRam_SbrDecWorkBuffer1PPl", "_Z21GetRam_SbrDynamic_RAMi", "ff_add_index_entry", "av_stream_get_parser", "av_gettime_relative_is_monotonic", "ff_h264_hl_decode_mb", "avcodec_get_pix_fmt_loss", "avcodec_find_decoder", "av_get_profile_name", "x264_me_refine_bidir_satd", "_Z13decodeSbrDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAS2_S4_", "ff_save_host_addr", "av_mastering_display_metadata_create_side_data", "ff_query_formats_all_layouts", "swr_get_delay", "ff_put_h264_qpel8_mc01_neon", "av_sha_alloc", "x264_cpu_detect", "av_file_unmap", "ff_set_min_dist_lsf", "_Z5f2Powli", "ff_amf_write_string", "ff_hevc_set_qPy", "ff_alloc_dir_entry", "_Z24FDKaacEnc_Transform_RealPKsPliiPiiS2_iS1_", "ff_hevc_hls_filter", "__cmpdf2", "ff_aac_sbr_init", "av_application_on_io_control", "ff_fdctdsp_init", "av_frame_copy_props", "_Z21FDKsbrEnc_UpdateHiResPhPiS_iS0_", "ff_sws_init_output_funcs", "av_application_on_tcp_did_open", "__fixunssfdi", "avcodec_find_best_pix_fmt_of_list", "_Z29GetRam_aacEnc_MergeGainLookUpiPh", "x264_macroblock_tree_read", "ff_pred8x8_hor_neon", "ff_avg_pixels16_y2_neon", "av_get_pix_fmt", "ff_j_rev_dct4", "ff_hevc_put_qpel_uw_pixels_w12_neon_8", "_Z8dit_ifftPliPK8FIXP_SPKi", "av_picture_crop", "ff_all_channel_layouts", "ff_add_channel_layout", "ff_avg_qpel8_mc12_old_c", "ff_idctdsp_init_neon", "_Z38FDKsbrEnc_WriteEnvSingleChannelElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAP11COMMON_DATAj", "ff_imdct_half_c_fixed", "_Z8fixp_cosli", "ff_subtitles_queue_finalize", "ff_avg_h264_chroma_mc8_neon", "_Z21adtsWrite_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ff_set_qscale", "av_image_check_size2", "av_get_time_base_q", "ff_get_pcm_codec_id", "_Z20InitHybridFilterBankP6HYBRIDaaPKh", "FDKsbrEnc_EncodeIcc", "x264_opencl_finalize_cost", "_Unwind_GetDataRelBase", "x264_reduce_fraction", "x264_threadpool_run", "av_log_ask_for_sample", "ffurl_shutdown", "av_fatal_set_callback", "__gnu_Unwind_Save_WMMXC", "x264_picture_alloc", "av_add_index_entry", "ff_mpeg4_pred_ac", "ff_bsf_get_packet_ref", "ff_put_pixels16_armv6", "pcmDmx_ApplyFrame", "av_opt_get_q", "ff_conv_fltp_to_s16_2ch_neon", "__powisf2", "av_hwaccel_next", "avfilter_inout_free", "_Z9CPns_ReadP8CPnsDataP13FDK_BITSTREAMPK19CodeBookDescriptionPshii", "avfilter_graph_create_filter", "_Z20FDKaacEnc_codeValuesPsiiP13FDK_BITSTREAM", "av_crc", "_Z24FDKsbrEnc_EnvEncodeFrameP11SBR_ENCODERiPsjPjPhi", "ff_adaptive_gain_control", "ff_free_stream", "FDKcos", "ff_avc_parse_nal_units_buf", "av_timecode_adjust_ntsc_framenum2", "avcodec_get_context_defaults3", "ff_audio_mix_set_matrix", "_Z22imdct_adapt_parametersP6mdct_tPiS1_iPK8FIXP_SPKi", "_Z26FreeRam_aacEnc_ElementBitsPP12ELEMENT_BITS", "rgbx_to_nv12_neon_32", "ff_filter_activate", "avpriv_unlock_avformat", "_Z25qmfSynthesisFilteringSlotP15QMF_FILTER_BANKPKlS2_iiPsiPl", "ff_unlock_avcodec", "av_get_sample_fmt_string", "ff_avg_qpel8_mc31_old_c", "_Z21GetRam_Sbr_signMatrixi", "ff_hevc_frame_rps", "x264_intra_satd_x3_16x16", "ff_print_debug_info", "av_find_best_stream", "ff_generate_avci_extradata", "avfilter_init_dict", "ijkav_register_ijkmediadatasource_protocol", "ff_h264_decode_mb_cavlc", "av_default_item_name", "x264_zigzag_init", "__gnu_ldivmod_helper", "ff_avg_h264_chroma_mc2_neon", "ff_j_rev_dct1", "ff_metadata_conv", "ff_acelp_decode_8bit_to_1st_delay3", "ff_put_no_rnd_qpel8_mc33_old_c", "av_fifo_free", "_Z39GetRequiredMemRam_aacEnc_PsyOutElementsv", "ff_alloc_picture", "x264_intra_satd_x3_16x16_neon", "ffio_read_partial", "ff_yuv422p_to_bgra_neon", "_Z26GetRam_Sbr_freqBandTableLOi", "WebPConfigLosslessPreset", "ff_h264_idct_add8_422_14_c", "avio_close_dyn_buf", "ff_udp_set_remote_url", "avcodec_find_encoder_by_name", "x264_analyse_weight_frame", "x264_cabac_encode_flush", "sbrDecoder_Header", "ff_hevc_put_qpel_h2v1_neon_8", "ff_http_auth_handle_header", "av_frame_move_ref", "ff_put_h264_qpel16_mc20_neon", "ff_all_channel_counts", "ff_h264_idct8_dc_add_14_c", "ff_hevc_unref_frame", "ff_avg_h264_qpel16_mc30_neon", "x264_threadslice_cond_wait", "ff_avg_qpel16_mc11_old_c", "_Z15DecodeHuffmanCWPA2_KaP13FDK_BITSTREAM", "ff_psdsp_init", "sbrEncoder_GetInputDataDelay", "avcodec_parameters_to_context", "ff_framequeue_skip_samples", "ffurl_seek", "x264_sync_frame_list_push", "ff_flac_is_extradata_valid", "av_opt_get_video_rate", "av_logx", "_Z6fLdPowlili", "av_opt_eval_double", "ff_mov_write_packet", "_Z30FDKaacEnc_InitTnsConfigurationiiiiiiiP10TNS_CONFIGP17PSY_CONFIGURATIONii", "x264_plane_copy_c", "av_buffersrc_parameters_set", "ff_put_h264_qpel16_mc30_neon", "ff_channel_layouts_ref", "ff_put_h264_qpel8_mc23_neon", "ff_mpv_decode_defaults", "ff_avg_pixels16_xy2_neon", "avfilter_get_by_name", "sbrEncoder_LimitBitRate", "ff_mpa_l2_select_table", "_Z17aliasingReductionPlP13ENV_CALC_NRGSPii", "av_get_media_type_string", "ff_acelp_apply_order_2_transfer_function", "av_cpb_properties_alloc", "ff_pred8x8_128_dc_neon", "av_opt_find", "_Z25FDKsbrEnc_transientDetectP22SBR_TRANSIENT_DETECTORPPlPiPhiiii", "ff_simple_idct_put_12", "ff_h263_resync", "_Z18FDKaacEnc_QCOutNewPP6QC_OUTiiiPh", "ff_h264_idct_dc_add_12_c", "x264_intra_satd_x3_8x8c_neon", "ff_avg_pixels16_neon", "av_demuxer_open", "ff_thread_await_progress", "avfilter_graph_free", "av_vorbis_parse_free", "ff_init_cabac_decoder", "_Z24CTns_ReadDataPresentFlagP13FDK_BITSTREAMP8CTnsData", "ff_parse_key_value", "_Z22CBlock_FrequencyToTimeP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssiiPl", "ff_ebur128_add_frames_planar_double", "ff_psdsp_init_arm", "av_bsf_list_parse_str", "av_tree_destroy", "_Z23qmfSynPrototypeFirSlot2P15QMF_FILTER_BANKPlS1_Psi", "FDKfree", "av_buffersink_get_type", "ff_acelp_lsp2lpc", "ff_acelp_decode_6bit_to_2nd_delay6", "ff_audio_data_copy", "av_timecode_make_smpte_tc_string", "ff_imdct_half_vfp", "ff_acelp_vectors_init", "av_opt_set_int", "ff_lzw_decode_tail", "_Z22FDKaacEnc_SpreadingMaxiPKlS0_Pl", "FDKsprintf", "_Z17drmRead_CrcEndRegP10STRUCT_DRMP13FDK_BITSTREAMi", "__gnu_Unwind_Save_VFP", "ff_amf_tag_size", "ff_is_multicast_address", "av_buffersink_params_alloc", "ff_line_noise_avg_c", "__lesf2", "av_frame_get_channels", "x264_frame_pop_blank_unused", "ff_avfilter_link_set_out_status", "av_opt_is_set_to_default_by_name", "av_div_q", "ff_acelp_decode_5_6_bit_to_2nd_delay3", "av_d3d11va_alloc_context", "av_packet_move_ref", "x264_me_refine_qpel_rd", "x264_sei_recovery_point_write", "_Z9fMultNormllPi", "av_program_add_stream_index", "ffurl_closep", "avcodec_chroma_pos_to_enum", "ff_jpeg_fdct_islow_8", "_Z20CJointStereo_ApplyMSPP22CAacDecoderChannelInfoPKsPKhiii", "_Z25FDKaacEnc_InitElementBitsP8QC_STATEP15CHANNEL_MAPPINGiii", "_Z28FDKaacEnc_AdaptThresholdsVBRPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELP11ATS_ELEMENTP9TOOLSINFOP7PE_DATAi", "av_pix_fmt_swap_endianness", "av_hwdevice_ctx_alloc", "ff_rgb24toyv12_c", "ff_h264_idct_dc_add_neon", "_Z30FDKsbrEnc_InitSbrHuffmanTablesP12SBR_ENV_DATAP17SBR_CODE_ENVELOPES2_7AMP_RES", "_Z23GetRam_aacEnc_BitLookUpiPh", "ff_hevc_slice_rpl", "ff_rtmp_calc_digest", "avfilter_mul_matrix", "av_ripemd_init", "av_frame_set_colorspace", "sws_convVec", "x264_macroblock_thread_allocate", "x264_predict_lossless_8x8", "ff_hpeldsp_init", "av_expr_free", "_Z31FDKsbrEnc_ResetTonCorrParamExtrP16SBR_TON_CORR_ESTiiPhiiPS1_Pii", "FDKstrcpy", "ff_fdct_ifast248", "ff_celp_convolve_circ", "ff_nv21_to_rgba_neon", "ff_mpadsp_apply_window_float", "av_buffer_make_writable", "rgb64tobgr48_bswap", "ff_rdft_calc_neon", "_Z21FDKhybridAnalysisInitP18FDK_ANA_HYB_FILTER15FDK_HYBRID_MODEiii", "ff_blockdsp_init_neon", "WebPEncodeLosslessBGR", "swri_oldapi_conv_fltp_to_s16_nch_neon", "ff_h264_idct8_dc_add_9_c", "x264_predict_lossless_chroma", "_Z21FDKsbrEnc_UpdateLoResPhPiS_i", "ff_faanidct_put", "_Z26transportDec_EndAccessUnitP12TRANSPORTDEC", "av_opt_eval_float", "ff_get_cpu_flags_arm", "_Z21deleteSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "av_set_options_string", "swri_audio_convert_free", "ff_mpv_common_defaults", "_Z19FreeRam_ParamStereoPP19T_PARAMETRIC_STEREO", "av_bprint_clear", "_Z27FreeRam_Sbr_guideVectorOrigPPl", "_Z5f2PowliPi", "av_opt_set_pixel_fmt", "ff_put_h264_qpel16_mc33_neon", "pcmDmx_GetParam", "aacDecoder_Fill", "avfilter_register", "ff_sbr_hf_apply_noise_0_neon", "avio_printf", "av_buffer_create", "x264_macroblock_deblock_strength", "avio_seek", "ff_check_pixfmt_descriptors", "av_sub_q", "ff_set_common_formats", "av_resample_init", "avcodec_string", "ff_simple_idct_neon", "av_application_will_http_open", "av_read_play", "av_stream_get_side_data", "WebPEncode", "av_get_sample_fmt_name", "ff_pix_abs8_armv6", "x264_rc_analyse_slice", "swri_rematrix_free", "av_probe_input_buffer2", "_Z39GetRequiredMemRam_aacEnc_PsyInputBufferv", "_Z17ResetLimiterBandsPhS_S_iPK11PATCH_PARAMii", "avcodec_fill_audio_frame", "ff_rl_init_vlc", "av_downmix_info_update_side_data", "ff_mpeg1_decode_block_intra", "ff_put_h264_chroma_mc8_neon", "av_aes_crypt", "avpicture_alloc", "av_log_fatal", "_Z32GetRequiredMemRam_Sbr_signMatrixv", "av_buffersink_get_time_base", "_Z30FDKaacEnc_codeScalefactorDeltaiP13FDK_BITSTREAM", "avcodec_encode_audio2", "ff_reduce_index", "_Z36FDKsbrEnc_CountSbrChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "av_get_pix_fmt_loss", "ff_convert_dither", "av_pkt_dump2", "__gnu_Unwind_Restore_WMMXC", "av_rdft_end", "av_buffer_realloc", "ff_audio_data_realloc", "x264_param_default", "ff_me_search_hexbs", "ff_url_join", "avpriv_put_string", "av_hash_init", "ff_check_alignment", "_Z30FDKaacEnc_getChannelAssignment12CHANNEL_MODE13CHANNEL_ORDER", "ff_mpeg4_workaround_bugs", "ff_subtitles_queue_clean", "av_hash_final_bin", "ff_mdct_end", "av_vorbis_parse_reset", "ff_put_pixels8x8_c", "_Unwind_Backtrace", "av_buffer_pool_init2", "_Z13GetRam_ps_deci", "swr_is_initialized", "av_dv_frame_profile", "av_frame_side_data_name", "_Z22transportEnc_CrcEndRegP12TRANSPORTENCi", "av_url_split_hostname", "ff_h264_idct8_dc_add_10_c", "av_copy_packet_side_data", "av_hwframe_constraints_free", "ff_sbrdsp_init", "FDKatof", "ff_crcA001_update", "_Z19GetRam_aacEnc_QCouti", "av_add_q", "url_feof", "av_buffer_unref", "av_buffersink_get_w", "av_buffersink_get_hw_frames_ctx", "avcodec_copy_context", "ff_dot_productf", "_Z11SbrCrcCheckP13FDK_BITSTREAMl", "ff_mov_cenc_free", "ff_rtmp_packet_destroy", "x264_ratecontrol_mb_qp", "sws_getIdentityVec", "av_buffer_alloc", "av_get_channel_layout_string", "avpriv_open", "FDKfseek", "x264_pixel_ssd_nv12", "FDK_Fetch", "_Z10HcrInitRomP10CErHcrInfo", "_Z24GetRam_sbr_OverlapBufferi", "_Z23GetRam_TransportDecoderi", "x264_plane_copy_swap_c", "ffio_get_checksum", "ff_init_vlc_sparse", "_Z23GetRam_aacEnc_QCelementi", "x264_intra_sa8d_x3_8x8_neon", "ff_hevc_put_qpel_uw_pixels_w16_neon_8", "ff_mpeg_framesize_alloc", "ff_lock_avcodec", "av_strtok", "ff_sbr_apply", "ff_init_ff_cos_tabs_fixed_32", "av_buffer_allocz", "ff_hevc_transform_8x8_neon_8", "avpriv_copy_pce_data", "av_buffer_pool_get", "av_log2_i", "WebPPictureSharpARGBToYUVA", "ff_ebur128_loudness_shortterm", "av_image_copy_uc_from", "ff_init_buffer_info", "ff_h264_ref_picture", "avresample_alloc_context", "av_opt_set_from_string", "swr_get_out_samples", "ff_mov_get_channel_layout", "avfilter_graph_get_filter", "avpriv_float_dsp_alloc", "ff_avg_h264_qpel16_mc12_neon", "av_bsf_receive_packet", "av_register_hwaccel", "ff_init_mpadsp_tabs_fixed", "_Z25CAacDecoder_GetStreamInfoP20AAC_DECODER_INSTANCE", "av_resample_close", "x264_intra_sad_x3_8x16c_neon", "ff_parse_creation_time_metadata", "ff_resample_linear_flt_neon", "_Z25Hcr_State_BODY_SIGN__SIGNP13FDK_BITSTREAMPv", "swscale_license", "_Z25aacDecoder_drcMarkPayloadP8CDrcInfoP13FDK_BITSTREAM23AACDEC_DRC_PAYLOAD_TYPE", "ff_hevc_put_qpel_uw_v1_neon_8", "av_frame_get_pkt_pos", "aacDecoder_Open", "avcodec_find_decoder_by_name", "av_codec_get_lowres", "avio_read_to_bprint", "avfilter_version", "_Z19FDKaacEnc_TnsDetectP8TNS_DATAPK10TNS_CONFIGP8TNS_INFOiPlii", "av_packet_side_data_name", "ff_framequeue_init", "ff_h264_idct8_add_9_c", "ff_me_cmp_init", "ff_hevc_add_residual_4x4_neon_8", "ff_biweight_h264_pixels_4_neon", "x264_encoder_maximum_delayed_frames", "WebPEncodeLosslessRGB", "_Z23FDKsbrEnc_Shellsort_intPii", "FDK_Copy", "x264_ratecontrol_slice_type", "ffio_read_varlen", "x264_macroblock_cache_load_interlaced", "ff_h264_decode_ref_pic_list_reordering", "x264_predict_4x4_dc_c", "av_timecode_init", "ff_id3v2_start", "x264_field_vsad", "ff_framesync_add_frame", "ff_avg_pixels16_xy2_no_rnd_neon", "ff_yuv420p_to_bgra_neon", "_Z28GetRequiredMemRam_SbrElementv", "_Z28FDKsbrEnc_initPsBandNrgScaleP11T_PS_ENCODE", "ff_imdct_calc_c_fixed_32", "ff_mpeg_flush", "_Z27CConcealment_InitCommonDataP14CConcealParams", "ff_put_wav_header", "avio_close", "ff_free_picture_tables", "ff_put_h264_qpel8_mc10_neon", "av_fmt_ctx_get_duration_estimation_method", "ff_mov_write_chan", "av_force_cpu_flags", "x264_ratecontrol_start", "ff_framequeue_global_init", "_Z21CarryBitToBranchValuehjPjS_", "ff_put_h264_qpel8_mc20_neon", "ff_set_common_channel_layouts", "ff_biweight_h264_pixels_16_neon", "av_frame_get_best_effort_timestamp", "av_blowfish_crypt", "av_opt_get_dict_val", "ff_interleave_add_packet", "ff_set_dimensions", "av_image_fill_linesizes", "avcodec_parameters_copy", "av_opt_get_image_size", "av_hwframe_map", "av_probe_input_format2", "av_cmp_i", "ff_seek_frame_binary", "ff_put_pixels8_y2_arm", "FDK_get32", "ff_put_pixels8_x2_armv6", "swresample_configuration", "swr_drop_output", "ff_mpegvideodsp_init", "ff_celp_lp_synthesis_filterf", "_Z35FDKaacEnc_IntensityStereoProcessingPlS_S_S_S_S_S_S_S_S_S_PiS0_iiiPKiiS0_S0_PP8PNS_DATA", "ffio_limit", "av_imdct_calc", "ff_mpa_synth_filter_float", "av_codec_get_id", "av_opt_set_video_rate", "ff_h264_idct8_add4_12_c", "ff_put_pixels8_arm", "_Z28FDKsbrEnc_frameInfoGeneratorP18SBR_ENVELOPE_FRAMEPhS1_iPKi", "avpriv_align_put_bits", "ff_hevc_put_qpel_v2_neon_8", "ff_pred16x16_top_dc_neon", "av_bsf_list_free", "avfilter_graph_parse", "ff_sbr_hf_gen_neon", "avformat_get_mov_video_tags", "ff_startcode_find_candidate_c", "ff_h264_alloc_tables", "av_aes_ctr_init", "ff_mov_close_hinting", "_Z30FreeRam_TransportDecoderBufferPPh", "_Z21transportDec_CrcCheckP12TRANSPORTDEC", "ff_dct32_fixed", "ff_h264_decode_seq_parameter_set", "ff_put_qpel8_mc12_old_c", "av_image_alloc", "av_thread_message_queue_set_free_func", "av_adler32_update", "ff_libwebp_encode_init_common", "ff_inlink_check_available_frame", "avcodec_align_dimensions", "ff_h264_init_cabac_states", "ff_decode_10_pulses_35bits", "ff_http_init_auth_state", "av_murmur3_update", "x264_intra_satd_x3_8x16c_neon", "FDK_put", "_Z32GetRequiredMemRam_aacEnc_QCstatev", "_Z29FDKsbrEnc_fastTransientDetectP18FAST_TRAN_DETECTORPKPKlPKiiPh", "av_samples_alloc_array_and_samples", "ff_mpeg4_set_direct_mv", "ff_hevc_put_qpel_uw_h3_neon_8", "ff_get_line", "av_stristr", "ff_ps_mul_pair_single_neon", "av_codec_set_chroma_intra_matrix", "av_log_get_flags", "av_read_frame", "_Z35GetRequiredMemRam_aacEnc_PsyElementv", "ff_hevc_put_qpel_h2v3_neon_8", "ff_nv12_to_rgba_neon", "ff_avg_qpel8_mc11_old_c", "ff_yuv420p_to_argb_neon", "_Z7sbr_decP7SBR_DECPsS1_S0_S1_iiP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAiP6PS_DECji", "__extendsfdf2", "av_dct_init", "_Z36FDKsbrEnc_resetSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEPKhi", "ff_h264_idct_add16intra_14_c", "ff_h264_decode_extradata", "ff_choose_chroma_location", "WebPPictureImportRGBX", "av_sample_fmt_is_planar", "x264_intra_sad_x3_8x8c_neon", "ff_videodsp_init_armv5te", "ff_fft_init_fixed", "av_packet_ref", "avcodec_free_context", "av_bsf_get_class", "avio_wb64", "av_resample_compensate", "av_opt_get_key_value", "_Z31FreeAacDecoderStaticChannelInfoPP28CAacDecoderStaticChannelInfo", "av_buffersink_get_frame", "_Z20FDKsbrEnc_AddVecLeftPiS_S_i", "ijkav_register_ijkio_protocol", "ffurl_get_multi_file_handle", "_Z20imdct_copy_ov_and_nrP6mdct_tPli", "ff_simple_idct_10", "_Z24FDKaacEnc_CalcFormFactorPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELi", "ff_hevc_output_frame", "av_jni_get_java_vm", "avio_rb32", "ff_h264_idct_add16_neon", "ff_h2645_packet_uninit", "FDK_DeleteBitBuffer", "x264_predict_8x16c_v_c", "ff_brktimegm", "_Z22FDK_DRC_Generator_OpenPP8DRC_COMP", "av_bsf_list_finalize", "ff_h264_idct_add8_8_c", "av_opt_set_double", "ff_blockdsp_init", "_Z24GetRam_SbrDecWorkBuffer1i", "ffio_open_whitelist", "FDK_pushForward", "ff_celp_lp_synthesis_filter", "ff_h264_v_loop_filter_chroma_neon", "av_vorbis_parse_frame_flags", "x264_intra_sad_x3_8x8", "ff_img_read_packet", "_Z8DecodePsP6PS_DECh", "ff_mjpeg_encode_picture_trailer", "FDKfprintf", "av_bprint_finalize", "avcodec_find_best_pix_fmt_of_2", "ff_ps_hybrid_analysis_neon", "ff_mdct_calc_c_fixed", "_Z22FDKhybridAnalysisCloseP18FDK_ANA_HYB_FILTER", "av_malloc", "ff_vbv_update", "sws_subVec", "ff_rtp_get_codec_info", "ff_nv21_to_argb_neon", "ff_hevc_idct_16x16_dc_neon_8", "ff_mpv_encode_init", "ff_hevc_split_coding_unit_flag_decode", "_Z18GetRam_ParamStereoi", "_Unwind_GetLanguageSpecificData", "_Z23GetRam_aacEnc_PsyStatici", "avformat_flush", "_Z17FDKaacEnc_QCClosePP8QC_STATEPP6QC_OUT", "ff_put_pixels16_y2_neon", "ff_put_pixels16_xy2_neon", "ff_mov_cenc_init", "avpriv_dict_set_timestamp", "av_aes_ctr_alloc", "ff_h264_luma_dc_dequant_idct_14_c", "av_hwframe_transfer_data", "ff_avg_h264_qpel8_mc02_neon", "ff_simple_idct_put_armv5te", "_Z26FDKsbrEnc_TonCorrParamExtrP16SBR_TON_CORR_ESTP9INVF_MODEPlPiPhS5_PK14SBR_FRAME_INFOS5_S5_i9XPOS_MODEj", "ff_codec_guid_get_id", "ff_h264_idct_add_9_c", "ff_framesync_drop", "ff_id3v2_match", "av_gettime_relative", "_Z42FDKsbrEnc_ResetSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "rgb64to48_bswap", "WebPPictureARGBToYUVA", "x264_frame_expand_border_chroma", "ff_resample_one_s16_neon", "ff_h264_idct8_add_neon", "WebPEncodeRGBA", "ff_acelp_reorder_lsf", "__gnu_unwind_frame", "ff_mpadsp_init", "av_mdct_end", "ff_mpeg_er_init", "avpriv_request_sample", "ff_dither_alloc", "ff_put_qpel8_mc31_old_c", "av_small_strptime", "ff_avg_pixels16_x2_no_rnd_neon", "av_hmac_update", "avcodec_decode_video2", "ff_draw_supported_pixel_formats", "ff_hevc_put_pixels_w24_neon_8", "ff_isom_write_avcc", "av_format_get_metadata_header_padding", "avpriv_init_elbg", "_Unwind_GetRegionStart", "avformat_write_header", "avsubtitle_free", "ff_subtitles_read_text_chunk", "_Unwind_VRS_Set", "_Z21HcrMuteErroneousLinesP10CErHcrInfo", "av_frame_get_colorspace", "avpicture_get_size", "aacDecoder_SetParam", "_Z26DrmRawSdcAudioConfig_ParseP21CSAudioSpecificConfigP13FDK_BITSTREAM", "av_usleep", "ff_mpeg_ref_picture", "av_codec_get_seek_preroll", "ff_scale_eval_dimensions", "ff_hevc_deblocking_boundary_strengths", "ff_http_averror", "av_application_on_async_read_speed", "ff_mpeg_unref_picture", "ff_sws_rgb2rgb_init", "avformat_configuration", "FDKfwrite_EL", "__gnu_unwind_execute", "ff_getaddrinfo_a_result", "av_rescale_q_rnd", "_Z22CChannelElement_DecodePP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoP16SamplingRateInfoji", "_Z24sbrGetChannelPairElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAS2_P13FDK_BITSTREAMji", "av_codec_next", "av_get_pix_fmt_string", "ffurl_alloc", "_Z10getHcrTypeP10CErHcrInfo", "WebPMemoryWriterInit", "__gnu_Unwind_Restore_VFP_D_16_to_31", "x264_picture_clean", "ff_get_extradata", "av_samples_set_silence", "_Z19FDKaacEnc_calcSfbPeP15PE_CHANNEL_DATAPKlS2_iiiPKiS4_", "ff_avg_h264_qpel16_mc33_neon", "x264_sei_buffering_period_write", "ff_float_dsp_init_neon", "_Z23transportDec_GetLibInfoP8LIB_INFO", "_Z17decodeRVLCodewordP13FDK_BITSTREAMP11CErRvlcInfo", "__ctzdi2", "av_frame_set_channels", "_Z27FDKaacEnc_GetMonoStereoMode12CHANNEL_MODE", "ff_audio_mix_set_func", "av_opt_set", "_Z28GetRam_Sbr_QmfStatesAnalysisi", "ff_put_qpel16_mc13_old_c", "_Z16CAacDecoder_Open14TRANSPORT_TYPE", "ff_h264_parse_ref_count", "ff_side_data_update_matrix_encoding", "_Z29FreeRam_aacEnc_PsyInputBufferPPs", "_Z25FDKsbrEnc_Shellsort_fractPli", "av_application_on_tcp_will_open", "_Z23FDKaacEnc_QCMainPrepareP12ELEMENT_INFOP11ATS_ELEMENTP15PSY_OUT_ELEMENTP14QC_OUT_ELEMENT17AUDIO_OBJECT_TYPEja", "av_audio_convert_free", "swr_set_channel_mapping", "av_codec_is_decoder", "x264_filler_write", "av_get_audio_frame_duration", "FDK_toolsGetLibInfo", "ff_mpv_reallocate_putbitbuffer", "ff_jref_idct_add", "av_format_get_opaque", "_Z24slotBasedHybridSynthesisPlS_S_S_P6HYBRID", "ff_me_cmp_init_static", "ff_mpv_frame_start", "avpriv_mpegts_parse_open", "_Z34CLatmDemux_GetOtherDataPresentFlagP10CLatmDemux", "ff_socket", "av_fifo_grow", "av_thread_message_queue_set_err_recv", "avresample_free", "ff_me_cmp_sad", "avio_rl16", "avpriv_codec_get_cap_skip_frame_fill_param", "_Z21createSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAij", "ff_replaygain_export_raw", "sbrDecoder_InitElement", "ff_fft_init_arm", "avcodec_send_frame", "x264_thread_sync_ratecontrol", "_Z26GetRequiredMemRam_PsEncodev", "ff_parse_time_base", "x264_opencl_lookahead_init", "avpriv_do_elbg", "ffio_fdopen", "__nesf2", "ff_mov_lang_to_iso639", "_Z24rvlcReadBitFromBitstreamP13FDK_BITSTREAMPth", "ff_estimate_p_frame_motion", "ff_hevc_put_qpel_uw_v3_neon_8", "FDKmemset", "_Z22CProgramConfig_ComparePK14CProgramConfigS1_", "FDKatol", "_Z37FDKsbrEnc_deleteSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATE", "ff_pix_abs16_x2_armv6", "av_aes_ctr_increment_iv", "ff_riff_write_info_tag", "ff_mpeg1_clean_buffers", "ff_imdct_calc_c", "sbrEncoder_Open", "_Z29FDKsbrEnc_extractSbrEnvelope1P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP18SBR_BITSTREAM_DATAP11ENV_CHANNELP11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATA", "ff_rtmp_packet_read", "av_read_image_line", "avresample_version", "ff_hevc_cu_qp_delta_abs", "av_audio_convert_alloc", "_Z34FDKaacEnc_PreProcessPnsChannelPairiPlS_S_S_S_P10PNS_CONFIGP8PNS_DATAS3_", "ff_sbrdsp_init_arm", "av_dup_packet", "ff_hevc_hls_mvd_coding", "av_frame_is_writable", "av_find_input_format", "av_get_picture_type_char", "swri_noise_shaping_float", "_Z17GetRam_SbrElementi", "av_packet_clone", "_Z31FreeRam_Sbr_guideVectorDetectedPPh", "av_sha512_init", "ff_h264_build_ref_list", "ff_h264_init_poc", "ff_put_qpel16_mc31_old_c", "sws_alloc_set_opts", "_Z19aacEncDefaultConfigP13AACENC_CONFIGP10USER_PARAM", "_Z23FDK_MetadataEnc_ProcessP20FDK_METADATA_ENCODERPsiPK15AACENC_MetaDataPP18AACENC_EXT_PAYLOADPjPi", "av_neighbor_key_timestamp", "_Z21FreeRam_SbrDecElementPP19SBR_DECODER_ELEMENT", "__ashrdi3", "x264_mb_predict_mv_pskip", "av_format_set_data_codec", "av_tree_enumerate", "av_buffersink_get_samples", "av_buffersink_get_frame_flags", "x264_ratecontrol_set_weights", "avformat_close_input", "av_frame_get_metadata", "ff_rtmp_calc_digest_pos", "ff_avc_mp4_find_startcode", "_Z12fixp_cos_sinliPlS_", "ff_imdct_half_neon", "ff_hevc_put_qpel_v1_neon_8", "_Unwind_VRS_Pop", "av_frame_get_pkt_duration", "ff_put_pixels16_y2_no_rnd_neon", "x264_frame_cond_wait", "FDK_pushBack", "WebPMemoryWriterClear", "_Z23GetRam_TransportEncoderi", "x264_cqm_delete", "_Z6dct_IVPliPi", "_Z24FDKaacEnc_DistributeBitsP13ADJ_THR_STATEP11ATS_ELEMENTPP15PSY_OUT_CHANNELP7PE_DATAPiS8_iiiiili", "WebPSafeMalloc", "av_add_stable", "_Z11ApplyPsSlotP6PS_DECPPlS2_S1_S1_", "_Z21rescaleSubbandSamplesPPlS0_iiiii", "ff_avg_pixels8_y2_neon", "sbrEncoder_GetInBufferSize", "swri_audio_convert", "av_strerror", "FDK_byteAlign", "av_vorbis_parse_frame", "_Z35FDKsbrEnc_InitSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEiPKhiiiij", "ff_ebur128_relative_threshold", "ff_h263_decode_mba", "ff_wav_codec_get_id", "avformat_query_codec", "ff_lzw_encode_flush", "_Z21transportDec_FillDataP12TRANSPORTDECPhjPji", "ff_mdct_end_fixed_32", "ff_h264_idct8_dc_add_8_c", "ff_mpa_synth_init_fixed", "ff_mpv_frame_end", "ff_h264_h_loop_filter_chroma_neon", "x264_intra_sad_x3_8x8c", "avio_read_dir", "ff_avg_pixels8_neon", "sws_scale", "ff_hevc_put_qpel_h2v2_neon_8", "av_buffersink_get_frame_rate", "ff_amf_get_string", "_Z20adtsRead_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ff_h264_chroma422_dc_dequant_idct_9_c", "ff_fill_rgba_map", "ff_rotate_slice", "avpriv_split_xiph_headers", "ff_h263_find_frame_end", "ff_h264chroma_init", "ff_mjpeg_encode_huffman_init", "av_filename_number_test", "av_frame_set_metadata", "av_write_trailer", "__gnu_Unwind_Backtrace", "ff_simple_idct_armv5te", "x264_ratecontrol_zone_init", "_Z16getChannelConfig12CHANNEL_MODE", "ff_ps_apply", "_Z26FreeRam_aacEnc_PsyInternalPP12PSY_INTERNAL", "av_frame_get_sample_rate", "ff_hevc_add_residual_8x8_neon_8", "_Z23adtsWrite_GetHeaderBitsP11STRUCT_ADTS", "ff_simple_idct_put_armv6", "av_codec_get_codec_descriptor", "x264_predict_4x4_v_c", "_Z26GetRam_Sbr_guideVectorOrigi", "_Z8CalcLog2liPi", "ffio_read_indirect", "ffio_open_dyn_packet_buf", "_Z28FreeRam_Sbr_detectionVectorsPPh", "avio_wl16", "_Z10ResetPsDecP6PS_DEC", "swr_alloc", "_Z12createSbrDecP11SBR_CHANNELP15SBR_HEADER_DATAP19TRANSPOSER_SETTINGSijjii", "ff_fft_fixed_init_arm", "_Z28GetRequiredMemRam_SbrEncoderv", "_Z20GetRam_SbrDecElementi", "WebPEncodeBGR", "ff_color_frame", "_Z35GetRequiredMemRam_sbr_OverlapBufferv", "av_frame_set_channel_layout", "x264_predict_8x16c_h_c", "av_bprint_channel_layout", "FDKlog", "ff_init_desc_cfmt_convert", "_Z26CBlock_ReadScaleFactorDataP22CAacDecoderChannelInfoP13FDK_BITSTREAMj", "_Z26FDKaacEnc_AdjustThresholdsPP11ATS_ELEMENTPP14QC_OUT_ELEMENTP6QC_OUTPP15PSY_OUT_ELEMENTiiP15CHANNEL_MAPPING", "__divdf3", "x264_macroblock_cache_load_progressive", "ff_hevc_pred_init", "ff_framesync_configure", "ff_hevc_cbf_luma_decode", "_Z18GetWorkBufferCore1i", "ff_vector_fmul_window_neon", "ffio_init_checksum", "sws_freeFilter", "x264_reduce_fraction64", "x264_dct_init", "ff_parse_sample_rate", "av_expr_parse", "ff_idet_filter_line_c", "ijkav_register_ijksegment_protocol", "ff_mp4_read_dec_config_descr", "pcmDmx_Open", "avfilter_graph_alloc_filter", "__divsf3", "___Unwind_Resume_or_Rethrow", "av_fast_realloc", "av_max_alloc", "_Z18FDKsbrEnc_PSEncodeP11T_PS_ENCODEP8T_PS_OUTPhjPA2_A2_Plii", "_Z29FreeRam_Sbr_QmfStatesAnalysisPPs", "ff_add_png_paeth_prediction", "_Z16CopyAlignedBlockP10FDK_BITBUFPhj", "av_image_copy_plane", "ff_copy_rectangle2", "av_bsf_next", "avfilter_pad_count", "ff_hevc_put_qpel_h1v2_neon_8", "_Z23FDK_DRC_Generator_ClosePP8DRC_COMP", "ff_avg_qpel8_mc13_old_c", "swr_set_compensation", "av_opt_set_image_size", "ff_ps_hybrid_synthesis_deint_neon", "avcodec_set_dimensions", "ff_avg_h264_qpel16_mc23_neon", "sbrEncoder_GetHeader", "ff_h264_idct8_add_14_c", "ff_id3v2_write_simple", "_Z21FDKsbrEnc_AddVecRightPiS_S_i", "_Z24FDKaacEnc_updateFillBitsP15CHANNEL_MAPPINGP8QC_STATEPP12ELEMENT_BITSPP6QC_OUT", "_Z20transportEnc_GetConfP12TRANSPORTENCP12CODER_CONFIGP13FDK_BITSTREAMPj", "ff_text_pos", "_Z22FreeRam_Sbr_envYBufferPPl", "x264_sync_frame_list_pop", "ff_put_no_rnd_qpel16_mc33_old_c", "ff_free_filters", "_Z16GetOverlapBufferi", "ff_bprint_to_codecpar_extradata", "ff_update_duplicate_context", "av_mediacodec_default_free", "WebPValidateConfig", "ff_copy_rectangle", "av_color_primaries_name", "av_packet_unpack_dictionary", "ff_pngdsp_init", "ff_resample_common_apply_filter_x8_float_neon", "av_hash_final_b64", "x264_me_refine_qpel_refdupe", "ff_parse_mpeg2_descriptor", "_Z37GetRequiredMemRam_Sbr_freqBandTableLOv", "FDKmemclear", "ff_put_no_rnd_qpel8_mc12_old_c", "ff_ebur128_destroy", "avio_write", "av_frame_unref", "ff_h264_idct_add8_422_10_c", "ff_scale_image", "ff_sws_init_swscale_arm", "ff_stream_encode_params_copy", "_Z30FDKsbrEnc_resetInvFiltDetectorP16SBR_INV_FILT_ESTPii", "ff_simple_idct_add_10", "x264_pixel_ssd_wxh", "ff_cbrt_tableinit", "avfilter_graph_parse_ptr", "sbrDecoder_Open", "av_init_packet", "ff_init_block_index", "ff_hevc_put_qpel_h3v1_neon_8", "sws_convertPalette8ToPacked24", "ff_amf_write_field_name", "x264_picture_init", "av_lfg_init", "ff_sws_init_input_funcs", "swr_config_frame", "x264_predict_16x16_dc_c", "av_fifo_reset", "ff_frame_thread_encoder_free", "ff_mpv_common_end", "swri_noise_shaping_int32", "av_get_padded_bits_per_pixel", "swri_audio_convert_init_arm", "ff_h264_idct8_add_10_c", "ff_combine_frame", "x264_threadpool_delete", "ff_ps_add_squares_neon", "x264_opencl_lowres_init", "__gnu_Unwind_Restore_VFP_D", "av_rescale_delta", "av_dynarray2_add", "ff_audio_resample_init", "x264_cabac_encode_ue_bypass", "av_get_channel_layout_channel_index", "ff_rtp_enc_name", "av_get_standard_channel_layout", "_Z15mul_dbl_sgl_rndls", "__fixdfsi", "avio_close_dir", "_Z26qmfInitSynthesisFilterBankP15QMF_FILTER_BANKPliiiii", "x264_predict_8x8_v_c", "x264_lookahead_delete", "_Z21GetRam_aacEnc_QCstatei", "ff_fill_rectangle", "av_get_packed_sample_fmt", "ff_af_queue_add", "_Z27transportEnc_GetChannelModei", "av_find_default_stream_index", "avfilter_init_str", "_Z31GetRequiredMemRam_SbrDecChannelv", "ff_mov_cenc_write_packet", "ff_avg_h264_qpel8_mc10_neon", "ff_mpadsp_apply_window_fixed_armv6", "av_buffersrc_write_frame", "ff_reset_entries", "av_rescale_q", "_Z25FreeRam_sbr_OverlapBufferPPl", "x264_opencl_flush", "_Z18FreeRam_SbrElementPP11SBR_ELEMENT", "avcodec_get_frame_class", "x264_opencl_load_library", "aacDecoder_AncDataInit", "ff_init_qscale_tab", "pcmDmx_Close", "ff_idet_filter_line_c_16bit", "avresample_license", "_Z33FDKaacEnc_CalcBandEnergyOptimLongPKlPiPKiiPlS4_", "ff_dv_frame_profile", "ff_mov_cenc_write_sinf_tag", "ff_http_do_new_request", "ff_convert_matrix", "av_bmg_get", "setLimiterNChannels", "_Z17transportDec_Open14TRANSPORT_TYPEj", "avcodec_descriptor_get_by_name", "aacDecoder_ConfigRaw", "_Z27FDKsbrEnc_PSEnc_WritePSDataP19T_PARAMETRIC_STEREOP13FDK_BITSTREAM", "_Z9CalcLdInti", "_Z17FreeOverlapBufferPPl", "_Z27GetRam_aacEnc_PsyOutChanneli", "ff_init_scantable", "av_buffer_default_free", "x264_frame_expand_border_lowres", "ff_hevc_decode_nal_vps", "x264_cabac_block_residual_rd_c", "ff_parse_pixel_format", "ff_avg_pixels8_xy2_neon", "ff_hevc_cu_qp_delta_sign_flag", "_Z19getSamplingRateInfoP16SamplingRateInfojjj", "av_iformat_next", "av_escape", "av_get_token", "ff_network_init", "_Z14adtsWrite_InitP11STRUCT_ADTSP12CODER_CONFIG", "_Z28FDKaacEnc_MsStereoProcessingPP8PSY_DATAPP15PSY_OUT_CHANNELPKiPiS7_iiiS6_", "x264_encoder_headers", "_Z25AudioSpecificConfig_ParseP21CSAudioSpecificConfigP13FDK_BITSTREAMiP13CSTpCallBacks", "sws_getCoefficients", "ff_text_init_avio", "ff_hevc_put_qpel_bi_neon_wrapper", "ff_h264_execute_decode_slices", "ff_tlog_link", "ff_http_auth_create_response", "_Z9mdct_initP6mdct_tPli", "x264_sps_write", "x264_bitstream_init", "ff_find_stream_index", "ff_er_frame_end", "_Z30FDKsbrEnc_AssembleSbrBitstreamP11COMMON_DATAP11FDK_CRCINFOij", "_Z22GetRam_Sbr_quotaMatrixi", "__fixunsdfdi", "ff_avc_find_startcode", "avio_w8", "_Z12FDKcrcEndRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "ff_end_tag", "av_reallocp", "av_image_check_sar", "ff_h264_chroma_dc_dequant_idct_14_c", "av_fifo_generic_peek", "_Z38GetRequiredMemRam_PsQmfStatesSynthesisv", "ff_llvidencdsp_init", "ff_ebur128_loudness_global", "_Z23qmfChangeOutScalefactorP15QMF_FILTER_BANKi", "av_application_closep", "ff_hpeldsp_init_neon", "rgb16tobgr32", "ff_print_debug_info2", "ff_decode_frame_props", "av_timecode_get_smpte_from_framenum", "ff_simple_idct_8", "aacDecoder_Close", "_Z22FDKaacEnc_prepareSfbPeP15PE_CHANNEL_DATAPKlS2_S2_PKiiii", "ff_avg_h264_qpel16_mc02_neon", "av_expr_parse_and_eval", "x264_predict_16x16_init", "ff_me_cmp_init_arm", "av_hwdevice_ctx_create", "ff_put_pixels8_y2_neon", "av_buffersink_get_sample_rate", "ff_vector_fmul_reverse_vfp", "_Z22FDKhybridAnalysisApplyP18FDK_ANA_HYB_FILTERPKlS2_PlS3_", "avpriv_strtod", "ff_simple_idct84_add", "ff_h264_set_erpic", "_Z14initHeaderDataP15SBR_HEADER_DATAiiij", "_Z34GetRequiredMemRam_TransportEncoderv", "ff_clear_block_neon", "_Z22qmfAnaPrototypeFirSlotPliPKsiPs", "_Z34GetRequiredMemRam_aacEnc_PsyStaticv", "av_strtod", "av_mastering_display_metadata_alloc", "avio_wb16", "FDKexp", "ff_me_search_ds", "av_get_extended_channel_layout", "ff_metadata_conv_ctx", "av_dct_end", "ff_h264_execute_ref_pic_marking", "avcodec_get_chroma_sub_sample", "ff_fetch_timestamp", "ff_audio_resample_free", "ff_framesync_init", "av_index_search_timestamp", "av_crc_get_table", "ff_write_quant_matrix", "av_opt_get_sample_fmt", "_Z23FDKaacEnc_AdjustBitrateP8QC_STATEP15CHANNEL_MAPPINGPiiii", "_Z23FreeRam_Sbr_quotaMatrixPPl", "_Z23HcrGetABitFromBitstreamP13FDK_BITSTREAMPtS1_h", "__gnu_Unwind_Resume_or_Rethrow", "FDKceil", "av_fft_init", "avcodec_descriptor_next", "ff_ps_ctx_init", "avfilter_configuration", "av_bprint_init_for_buffer", "ff_put_h264_qpel16_mc32_neon", "ff_rtp_codec_id", "_Z19adtsWrite_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "__gnu_Unwind_RaiseException", "avio_open", "ff_hevc_decode_short_term_rps", "ff_thread_finish_setup", "ff_vector_fmul_reverse_neon", "_Z28FDKaacEnc_SyncBlockSwitchingP23BLOCK_SWITCHING_CONTROLS0_ii", "_Z25FreeRam_aacEnc_AacEncoderPP7AAC_ENC", "av_des_alloc", "ff_mdct_calc_neon", "ff_mpeg4videodec_static_init", "x264_opencl_motionsearch", "_Z29FDKsbrEnc_extractSbrEnvelope2P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP11ENV_CHANNELS8_P11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATAi", "ff_h264_idct_add16_14_c", "x264_sync_frame_list_delete", "ff_dct_encode_init", "ff_init_vscale", "av_buffersink_get_sample_aspect_ratio", "avio_feof", "ff_er_frame_start", "ff_reshuffle_raw_rgb", "ff_nv12_to_bgra_neon", "_Z23PredictiveInterpolationP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "ff_avg_h264_qpel8_mc11_neon", "ff_alloc_a53_sei", "av_bsf_init", "avformat_network_deinit", "FDKmemmove", "x264_cabac_encode_init", "avformat_queue_attached_pictures", "ff_formats_unref", "avpriv_get_raw_pix_fmt_tags", "_Z32FDKaacEnc_FinalizeBitConsumptionP15CHANNEL_MAPPINGP8QC_STATEP6QC_OUTPP14QC_OUT_ELEMENTP12TRANSPORTENC17AUDIO_OBJECT_TYPEja", "avfilter_free", "ff_rfps_calculate", "_Z28FDK_DRC_Generator_InitializeP8DRC_COMP11DRC_PROFILES1_ij12CHANNEL_MODE13CHANNEL_ORDERh", "ff_amf_match_string", "avutil_configuration", "ff_hevc_put_qpel_uni_neon_wrapper", "sbrEncoder_Init", "ff_sbr_sum_square_neon", "av_get_bits_per_pixel", "av_tea_alloc", "avformat_network_init", "ff_ebur128_loudness_range_multiple", "avpriv_mpa_decode_header2", "av_append_packet", "sws_isSupportedInput", "_Z17FDKaacEnc_TnsSyncP8TNS_DATAPKS_P8TNS_INFOS4_iiPK10TNS_CONFIG", "x264_ratecontrol_delete", "ff_hevc_idct_32x32_dc_neon_8", "_Z30CLatmDemux_ReadStreamMuxConfigP13FDK_BITSTREAMP10CLatmDemuxP13CSTpCallBacksP21CSAudioSpecificConfigPi", "ff_get_unscaled_swscale_arm", "ff_h264_idct8_add_8_c", "ff_sbr_qmf_post_shuffle_neon", "av_samples_alloc", "FDKstrncmp", "ff_put_no_rnd_qpel16_mc11_old_c", "_Z9CHcr_ReadP13FDK_BITSTREAMP22CAacDecoderChannelInfo", "_Z24FDKsbrEnc_GetEnvEstDelayP20SBR_EXTRACT_ENVELOPE", "av_hwframe_get_buffer", "x264_encoder_reconfig", "ff_match_2uint16", "ff_simple_idct_arm", "av_get_channel_name", "ff_gen_search", "av_qsv_alloc_context", "_Z13lppTransposerP13SBR_LPP_TRANSP16QMF_SCALE_FACTORPPlS3_S4_iiiiiP9INVF_MODES6_", "ff_read_frame_flush", "av_interleaved_write_uncoded_frame", "FDK_getFreeBits", "avfilter_link_set_closed", "swri_noise_shaping_double", "rgb15to24", "ff_weight_h264_pixels_16_neon", "av_timecode_init_from_string", "_Z21GetRam_Sbr_v_k_masteri", "avcodec_dct_get_class", "ff_audio_data_add_to_fifo", "ff_pix_abs16_y2_armv6", "ff_init_me", "av_spherical_alloc", "ff_isom_write_hvcc", "ff_fft_end_fixed_32", "sws_cloneVec", "ff_hevc_put_qpel_uw_h2v3_neon_8", "ff_h264qpel_init_arm", "x264_cabac_init", "ff_ape_parse_tag", "av_frame_set_sample_rate", "_Z20qmfAnalysisFilteringP15QMF_FILTER_BANKPPlS2_P16QMF_SCALE_FACTORPKsiS1_", "av_image_check_size", "av_get_known_color_name", "x264_frame_delete_list", "avfilter_get_matrix", "av_append_path_component", "_Z10FDKcrcInitP11FDK_CRCINFOjjj", "_Z12LdDataVectorPlS_i", "restore_core_regs", "ff_mpv_encode_end", "sbrEncoder_GetEstimateBitrate", "_Z26transportEnc_GetStaticBitsP12TRANSPORTENCi", "ff_hevc_pred_mode_decode", "__ashldi3", "av_buffersink_get_channels", "ff_hevc_put_qpel_uw_h3v1_neon_8", "_Z29transportDec_GetNrOfSubFramesP12TRANSPORTDEC", "av_guess_codec", "ff_getaddrinfo_a_start", "ff_hevc_cu_chroma_qp_offset_idx", "ff_get_buffer", "ff_put_pixels16_arm", "rgb16to24", "x264_sei_dec_ref_pic_marking_write", "pcmDmx_SetMatrixMixdownFromPce", "ffio_set_buf_size", "x264_encoder_intra_refresh", "_Z26GetRam_Sbr_freqBandTableHIi", "ff_read_packet", "_Z27GetRam_Sbr_detectionVectorsi", "ff_h264_sei_uninit", "ff_thread_await_progress2", "av_opt_is_set_to_default", "av_picture_copy", "av_pix_fmt_get_chroma_sub_sample", "ff_write_pass1_stats", "ff_find_last_ts", "ff_avg_qpel16_mc33_old_c", "avcodec_parameters_free", "x264_mb_predict_mv_ref16x16", "ff_put_qpel16_mc33_old_c", "sbrDecoder_SetParam", "ff_fft_end_fixed", "_Z30FDKaacEnc_InitPnsConfigurationP10PNS_CONFIGiiiiPKiii", "av_free_packet", "ff_thread_flush", "FDKprintfErr", "ff_h264_luma_dc_dequant_idct_9_c", "av_tree_find", "ff_hevc_put_qpel_h2_neon_8", "ff_h264_idct8_add4_neon", "__gtdf2", "av_cast5_crypt2", "ff_estimate_b_frame_motion", "ff_nv12_to_argb_neon", "av_opt_get_int", "FDKfread_EL", "av_format_get_control_message_cb", "av_new_program", "_Z14FreeAacDecoderPP20AAC_DECODER_INSTANCE", "_Z29GetRam_aacEnc_AdjustThresholdi", "_Z28GetRequiredMemRam_SbrChannelv", "ff_simple_idct48_add", "ff_fill_line_with_color", "_Z30GetRam_Sbr_guideVectorDetectedi", "av_log_set_level", "av_log_set_callback", "av_audio_fifo_space", "x264_intra_satd_x3_4x4", "FDKaacEnc_EncodeFrame", "_Z40GetRequiredMemRam_aacEnc_AdjustThresholdv", "_Z36FDKsbrEnc_WriteEnvChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "_Z19resetFreqBandTablesP15SBR_HEADER_DATAj", "ff_put_qpel16_mc11_old_c", "av_buffersink_set_frame_size", "pcmDmx_Reset", "av_codec_get_chroma_intra_matrix", "ff_format_io_close", "av_hmac_calc", "_Z16CPulseData_ApplyP10CPulseDataPKsPl", "av_frame_copy", "_Z18FreeAACdynamic_RAMPPl", "ff_tls_init", "ff_framehash_write_header", "av_stream_get_r_frame_rate", "av_bsf_list_alloc", "av_parse_time", "_Z21transportEnc_GetFrameP12TRANSPORTENCPi", "av_thread_message_queue_set_err_send", "ff_gmc_c", "ff_pix_sum_armv6", "x264_predict_16x16_v_c", "FDKstrcmp", "ff_init_ff_cos_tabs", "sbrDecoder_drcDisable", "x264_intra_satd_x3_8x8c", "_Z19CProgramConfig_InitP14CProgramConfig", "ff_inlink_make_frame_writable", "ff_put_pixels8_xy2_no_rnd_neon", "ff_smil_get_attr_ptr", "ff_request_frame", "av_gcd", "ff_pred16x16_dc_neon", "_Z16autoCorr2nd_cplxP11ACORR_COEFSPKlS2_i", "__lshrdi3", "x264_pps_init", "ff_xvid_idct", "x264_frame_unshift", "_Z10CalcLdDatal", "_Z38transportDec_GetMissingAccessUnitCountPiP12TRANSPORTDEC", "x264_encoder_parameters", "avfilter_inout_alloc", "ff_celp_filter_init", "_Z26FDKsbrEnc_InitSbrBitstreamP11COMMON_DATAPhiP11FDK_CRCINFOj", "ff_jref_idct_put", "av_resample", "swri_rematrix", "ff_acelp_interpolate", "ff_hevc_compute_poc", "ff_faandct248", "x264_intra_satd_x3_8x16c", "__powidf2", "av_match_list", "_Z27sbrDecoder_drcUpdateChannelP18SBRDEC_DRC_CHANNEL", "ffio_free_dyn_buf", "av_buffersrc_parameters_alloc", "_Z34CBlock_InverseQuantizeSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "_Z21transportDec_SetParamP12TRANSPORTDEC11TPDEC_PARAMi", "ff_mov_cenc_write_stbl_atoms", "av_cast5_crypt", "av_buffer_is_writable", "av_hmac_init", "ff_af_queue_remove", "WebPPictureHasTransparency", "ff_h264_chroma_dc_dequant_idct_8_c", "ff_simple_idct_add_neon", "x264_predict_lossless_4x4", "_Z17transportEnc_OpenPP12TRANSPORTENC", "_Z15CLatmDemux_ReadP13FDK_BITSTREAMP10CLatmDemux14TRANSPORT_TYPEP13CSTpCallBacksP21CSAudioSpecificConfigPii", "ff_h264_chroma422_dc_dequant_idct_8_c", "avio_put_str16be", "ff_hevc_log2_res_scale_abs", "_Z37GetRequiredMemRam_aacEnc_BitCntrStatev", "ff_blend_rectangle", "avutil_version", "avio_rb24", "x264_macroblock_deblock", "ff_hevc_h_loop_filter_luma_neon", "avcodec_receive_frame", "x264_macroblock_thread_init", "ff_h264_idct_add16_8_c", "av_shrink_packet", "av_blowfish_init", "ff_dct_unquantize_h263_armv5te", "ff_mov_cenc_avc_parse_nal_units", "ff_ps_stereo_interpolate_neon", "ff_mjpeg_encode_dc", "avpriv_find_start_code", "av_fifo_generic_write", "ff_mpv_encode_picture", "ff_copy_whiteblacklists", "WebPPictureSmartARGBToYUVA", "FDKstrchr", "av_fft_permute", "av_format_get_open_cb", "_Z20CChannelElement_ReadP13FDK_BITSTREAMPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfo17AUDIO_OBJECT_TYPEPK16SamplingRateInfojjhaP12TRANSPORTDEC", "av_buffer_pool_uninit", "avcodec_send_packet", "ff_hevc_put_qpel_uw_h2v1_neon_8", "_Z6fLdPowliliPi", "avcodec_license", "av_strdup", "ff_audio_mix_free", "avpriv_set_pts_info", "avio_get_str16le", "ff_subtitles_queue_insert", "ff_put_no_rnd_qpel8_mc11_old_c", "avio_accept", "av_guess_format", "av_packet_rescale_ts", "ff_conv_flt_to_s16_neon", "_Z16FDKaacEnc_QCMainP8QC_STATEPP7PSY_OUTPP6QC_OUTiP15CHANNEL_MAPPING17AUDIO_OBJECT_TYPEja", "ff_h264_idct_add16_12_c", "ff_h263_decode_frame", "ff_put_pixels16_x2_armv6", "avresample_convert_frame", "_Z10PSEnc_InitP19T_PARAMETRIC_STEREOP14T_PSENC_CONFIGiiPh", "sbrEncoder_EncodeFrame", "av_div_i", "_Z27transportDec_ReadAccessUnitP12TRANSPORTDECj", "ff_put_no_rnd_qpel8_mc32_old_c", "x264_ratecontrol_summary", "avpriv_h264_has_num_reorder_frames", "_Z32CLatmDemux_ReadPayloadLengthInfoP13FDK_BITSTREAMP10CLatmDemux", "av_log_format_line2", "FDK_ResetBitBuffer", "ff_rl_init", "av_get_packet", "ff_weight_h264_pixels_4_neon", "ff_flv_decode_picture_header", "_Z22transportDec_GetFormatP12TRANSPORTDEC", "ff_accept", "_Z18transportDec_ClosePP12TRANSPORTDEC", "_Z24FreeRam_TransportEncoderPP12TRANSPORTENC", "ff_id3v2_tag_len", "x264_log", "av_murmur3_init_seeded", "ff_simple_idct_put_8", "ff_avg_h264_chroma_mc4_neon", "av_pix_fmt_count_planes", "av_sha_init", "av_register_input_format", "av_asprintf", "av_opt_eval_int", "ff_init_gamma_convert", "ff_flac_lpc_16_arm", "WebPSetWorkerInterface", "ff_update_picture_tables", "av_opt_flag_is_set", "ff_put_h264_qpel16_mc01_neon", "rgb48tobgr48_bswap", "ff_hevc_put_qpel_uw_v2_neon_8", "ff_clear_blocks_neon", "swr_free", "ff_acelp_filter_init", "ff_h264_idct8_dc_add_12_c", "av_des_init", "ff_avc_write_annexb_extradata", "ff_put_pixels16_x2_no_rnd_armv6", "ff_pred8x8_plane_neon", "sws_getColorspaceDetails", "av_parser_next", "ff_put_h264_qpel8_mc30_neon", "_Z27GetRequiredMemOverlapBufferv", "avcodec_profile_name", "av_audio_fifo_peek", "ff_hevc_put_qpel_uw_h1_neon_8", "setLimiterThreshold", "x264_me_refine_bidir_rd", "av_default_get_category", "av_find_program_from_stream", "avformat_match_stream_specifier", "_Z40GetRequiredMemRam_sbr_QmfStatesSynthesisv", "ff_init_vscale_pfn", "_Z52BidirectionalEstimation_UseScfOfPrevFrameAsReferenceP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "ff_decode_sbr_extension", "av_dynarray_add_nofree", "_Z13DecodeNonPCWsP13FDK_BITSTREAMP10CErHcrInfo", "x264_frame_init_lowres", "av_stream_get_recommended_encoder_configuration", "ff_put_pixels8_y2_no_rnd_neon", "FDKatoi", "__udivsi3", "ff_hevc_annexb2mp4_buf", "av_fifo_alloc", "_Z30CAacDecoder_SignalInterruptionP20AAC_DECODER_INSTANCE", "avfilter_graph_send_command", "ff_fft_init_fixed_32", "av_dct_calc", "ff_thread_can_start_frame", "android_getCpuFeatures", "ff_mpeg4audio_get_config_gb", "ff_frame_thread_encoder_init", "avpriv_mpa_decode_header", "ff_hevc_put_qpel_uw_h1v2_neon_8", "ffurl_get_short_seek", "av_application_on_io_traffic", "x264_expand_border_mbpair", "x264_opencl_slicetype_end", "sws_setColorspaceDetails", "_Z6dst_IVPliPi", "avformat_open_input", "_Z40GetRequiredMemRam_TransportDecoderBufferv", "av_gettime", "_Z35GetRequiredMemRam_SbrDecWorkBuffer1v", "_Z46GetRequiredMemRam_Sbr_prevEnvelopeCompensationv", "_Z17FDKsbrEnc_AddLeftPiS_i", "av_buffersink_get_format", "avio_size", "x264_mb_predict_mv_direct16x16", "ff_hpeldsp_init_armv6", "ff_amf_get_field_value", "av_compare_ts", "av_opt_set_q", "pcmDmx_ReadDvbAncData", "av_opt_set_dict_val", "_Z15drmRead_CrcInitP10STRUCT_DRM", "av_ripemd_update", "FDKaacEnc_Close", "av_parser_change", "ff_ebur128_loudness_momentary", "ff_videodsp_init", "ff_line_noise_c", "ff_framesync_get_frame", "_Z23CBlock_ReadSpectralDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "ff_subtitles_read_line", "x264_sei_pic_timing_write", "_Z27FreeRam_aacEnc_BitCntrStatePP13BITCNTR_STATE", "_Z32FDK_DRC_Generator_getCompProfileP8DRC_COMP", "av_version_info", "__gnu_uldivmod_helper", "_Z32CLatmDemux_ReadAuChunkLengthInfoP13FDK_BITSTREAM", "swr_get_class", "av_hwdevice_get_hwframe_constraints", "ff_me_search_tss", "avresample_get_matrix", "avformat_get_class", "avpriv_io_delete", "avpriv_alloc_fixed_dsp", "av_opt_set_bin", "x264_cqm_init", "sbrDecoder_Close", "av_blowfish_crypt_ecb", "ff_avg_h264_qpel16_mc03_neon", "av_oformat_next", "FDKaacEnc_Open", "resetLimiter", "_Z28GetRam_aacEnc_PsyInputBufferi", "ff_hevc_put_pixels_w6_neon_8", "av_fifo_generic_read", "_Z16adtsRead_CrcInitP11STRUCT_ADTS", "avpriv_io_move", "av_samples_get_buffer_size", "ff_put_qpel8_mc33_old_c", "_Z8fixp_sinli", "_Z18adtsRead_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ff_butterflies_float_neon", "av_packet_new_side_data", "FDKafree_L", "avpriv_get_trc_function_from_trc", "aacEncOpen", "ff_codec_get_id", "ffurl_handshake", "x264_frame_filter", "ff_inlink_acknowledge_status", "av_sha512_final", "ff_audio_mix_alloc", "ff_guess_coded_bitrate", "WebPGetEncoderVersion", "ff_init_filters", "ff_avg_pixels16x16_c", "avformat_get_mov_audio_tags", "ff_put_h264_qpel16_mc22_neon", "sbrEncoder_GetLibInfo", "av_dict_set_int", "avpriv_new_chapter", "av_compare_mod", "ff_avg_h264_qpel8_mc30_neon", "x264_validate_levels", "av_hwframe_ctx_init", "___Unwind_Resume", "ff_text_peek_r8", "av_parse_video_size", "_Z27FreeRam_Sbr_freqBandTableHIPPh", "_Z23getBitstreamElementList17AUDIO_OBJECT_TYPEahh", "FDKsbrEnc_EncodeOpd", "_Z12CPns_InitPnsP8CPnsDataP20CPnsInterChannelDataPiS3_", "rgb16tobgr15", "ff_update_cur_dts", "ff_put_pixels16_xy2_no_rnd_neon", "ff_rtp_get_payload_type", "avresample_get_class", "x264_cabac_block_residual_c", "ff_h264_decode_init_vlc", "x264_encoder_open_148", "ff_standardize_creation_time", "av_url_split", "_Z24FDKaacEnc_groupShortDataPlP13SFB_THRESHOLDP10SFB_ENERGYS3_S3_iiPKiPKlPiS8_S_iS5_i", "ff_free_vlc", "_Z15CPulseData_ReadP13FDK_BITSTREAMP10CPulseDataPKsPKvs", "swri_resample_dsp_init", "av_freep", "FDKftell", "avio_closep", "_Z21GetRam_Sbr_envIBufferiPh", "_Z13IcsReadMaxSfbP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfo", "_Z31transportDec_GetAuBitsRemainingP12TRANSPORTDECj", "ff_h264_decode_init", "ff_simple_idct_add_8", "ff_put_pixels8_x2_no_rnd_armv6", "ff_mdct_calcw_c", "ff_make_format_list", "x264_param2string", "x264_plane_copy_interleave_c", "sws_getCachedContext", "x264_cabac_context_init", "_Z26GetRam_aacEnc_BitCntrStatei", "WebPGetColorPalette", "ff_h264_idct_add16intra_neon", "ff_mpv_report_decode_progress", "ff_sbr_qmf_deint_bfly_neon", "ff_amf_write_null", "av_vlog", "av_get_exact_bits_per_sample", "av_audio_convert", "avcodec_parameters_alloc", "av_write_uncoded_frame_query", "ff_yuv2planeX_8_neon", "ff_h263_decode_end", "av_strlcpy", "ff_ebur128_loudness_global_multiple", "ff_sbr_neg_odd_64_neon", "ff_init_scantable_permutation", "ff_put_no_rnd_qpel16_mc13_old_c", "_Z19FreeRam_bsOutbufferPPh", "_Z31FDKaacEnc_CalculateFullTonalityPlPiS_PsiPKii", "_Z11DeletePsDecPP6PS_DEC", "_Z21sbrdecUpdateFreqScalePhS_jP15SBR_HEADER_DATAj", "ff_draw_round_to_sub", "ff_put_h264_chroma_mc2_neon", "ff_raw_video_read_header", "av_probe_input_buffer", "_Z31FDKaacEnc_CalculateChaosMeasurePliS_", "av_thread_message_queue_alloc", "avresample_configuration", "WebPEncodeRGB", "sws_printVec2", "rgb15tobgr16", "rgb64tobgr48_nobswap", "x264_predict_8x8_init", "x264_predict_8x16c_init_arm", "ff_mpegvideoencdsp_init", "ff_init_mpadsp_tabs_float", "ff_format_output_open", "ff_hevc_idct_8x8_dc_neon_8", "ff_hevc_add_residual_16x16_neon_8", "ff_make_absolute_url", "av_opt_get", "ff_avg_h264_qpel16_mc01_neon", "av_tempfile", "_Z17FDKaacEnc_psyInitP12PSY_INTERNALPP7PSY_OUTii17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPING", "ff_dualinput_filter_frame", "ff_avg_h264_qpel8_mc32_neon", "_Z16FDKaacEnc_PsyNewPP12PSY_INTERNALiiPh", "_Z28CConcealment_InitChannelDataP16CConcealmentInfoP14CConcealParamsi", "FDKmemcpy", "av_calloc", "ff_audio_convert_free", "WebPPictureImportRGB", "_Z21adtsRead_DecodeHeaderP11STRUCT_ADTSP21CSAudioSpecificConfigP13FDK_BITSTREAMi", "av_md5_init", "x264_predict_8x8c_dc_c", "ff_mjpeg_encode_close", "ff_getaddrinfo_a_free", "av_vorbis_parse_init", "_Z11FDKcrcResetP11FDK_CRCINFO", "ff_frame_pool_uninit", "ff_hevc_put_qpel_h3v3_neon_8", "__ltdf2", "_Z19Hcr_State_BODY_ONLYP13FDK_BITSTREAMPv", "ff_put_no_rnd_pixels8_x2_arm", "_Z22FDKsbrEnc_codeEnvelopePaPK8FREQ_RESP17SBR_CODE_ENVELOPEPiiiii", "av_fifo_realloc2", "avio_open_dir", "ff_audio_data_alloc", "ff_af_queue_init", "_Z26FDKaacEnc_QuantizeSpectrumiiiPiPliS_Psi", "avcodec_descriptor_get", "av_packet_unref", "x264_adaptive_quant_frame", "ff_get_2pass_fcode", "__fixsfsi", "ffio_read_size", "ff_me_search_fss", "ff_yuv420p_to_rgba_neon", "ff_audio_data_drain", "ff_avg_h264_qpel8_mc01_neon", "ff_lzw_decode_close", "av_format_inject_global_side_data", "av_mediacodec_alloc_context", "ff_h264_idct_add16intra_10_c", "ff_blend_mask", "FDKcalloc", "ff_put_h264_qpel16_mc13_neon", "av_pix_fmt_desc_next", "ff_prores_idct", "_Z34FDKaacEnc_CalcBandEnergyOptimShortPKlPiPKiiPl", "ff_vector_fmac_scalar_neon", "swscale_version", "ff_thread_report_progress", "av_buffer_get_ref_count", "_Z28transportDec_OutOfBandConfigP12TRANSPORTDECPhjj", "av_spherical_projection_name", "ff_init_cabac_encoder", "ff_hevc_idct_4x4_dc_neon_8", "_Z16qmfChangeOutGainP15QMF_FILTER_BANKl", "av_codec_get_pkt_timebase", "swri_realloc_audio", "ff_init_ff_cos_tabs_fixed", "ff_h264_idct_add8_neon", "_Z14CPns_ResetDataP8CPnsDataP20CPnsInterChannelData", "x264_cqm_parse_file", "ff_hevc_res_scale_sign_flag", "av_fast_padded_mallocz", "ff_mov_iso639_to_lang", "av_packet_free", "av_bsf_list_append2", "ff_hevc_cu_transquant_bypass_flag_decode", "av_frame_set_pkt_duration", "_Z29FDKaacEnc_CalcSfbMaxScaleSpecPKlPKiPii", "ff_init_uni_ac_vlc", "__cmpsf2", "_Z24FreeRam_aacEnc_QCelementPP14QC_OUT_ELEMENT", "ff_h263_decode_picture_header", "av_get_channel_description", "ff_fix_long_mvs", "av_opt_eval_flags", "ff_get_bmp_header", "avpicture_free", "avio_pause", "x264_mc_init", "_Z30CProgramConfig_GetElementTablePK14CProgramConfigP14MP4_ELEMENT_IDiPh", "ff_h264_slice_context_init", "ff_idctdsp_init", "av_frame_alloc", "ff_sbr_qmf_deint_neg_neon", "ff_png_get_nb_channels", "_Z22rescalFilterBankValuesP6PS_DECPPlS2_ii", "_Z31GetRequiredMemRam_aacEnc_PsyOutv", "ff_rtp_chain_mux_open", "ff_put_no_rnd_pixels8_y2_arm", "ffurl_accept", "_Z29GetRam_TransportDecoderBufferi", "ffio_rewind_with_probe_data", "avio_get_str", "ff_mpadsp_init_arm", "ff_fft_calc_neon", "av_get_bytes_per_sample", "avcodec_get_name", "_Z15FDKaacEnc_QCNewPP8QC_STATEiPh", "ff_fft_fixed_calc_neon", "ff_parse_specific_params", "ff_amf_write_string2", "ff_sse16_armv6", "av_aes_ctr_set_iv", "ff_listen_connect", "_Z25GetRequiredMem_AacEncoderv", "_Z21GetRam_Sbr_envRBufferiPh", "ff_avg_qpel16_mc32_old_c", "ff_diff_pixels_armv6", "av_stream_get_codec_timebase", "av_codec_get_tag2", "ff_rfps_add_frame", "ff_put_h264_qpel8_mc22_neon", "_Z18aacDecoder_drcInitP8CDrcInfo", "ff_h263_decode_motion", "WebPCopyPlane", "av_reduce", "_Z19FreeWorkBufferCore1PP16CWorkBufferCore1", "WebPCopyPixels", "ff_mpv_idct_init", "ff_filter_set_ready", "ff_mpeg_draw_horiz_band", "_Z27CConcealment_SetAttenuationP14CConcealParamsPsS1_", "ff_mov_read_esds", "ff_init_desc_no_chr", "ff_hevc_merge_idx_decode", "ff_acelp_lsf2lspd", "ff_put_h264_qpel8_mc12_neon", "ff_hevc_hls_residual_coding", "av_spherical_tile_bounds", "sws_getGaussianVec", "ff_simple_idct_put_neon", "ff_hevc_bump_frame", "x264_quant_8x8_trellis", "FDKgetchar", "ff_h264_idct_dc_add_8_c", "avfilter_add_matrix", "avresample_set_compensation", "x264_encoder_encode", "x264_opencl_frame_delete", "ff_avg_h264_qpel8_mc13_neon", "ff_h264_remove_all_refs", "_Z28CProgramConfig_LookupElementP14CProgramConfigjjjPhP18AUDIO_CHANNEL_TYPES1_S1_P14MP4_ELEMENT_IDS4_", "ff_get_v_length", "ff_put_qpel8_mc32_old_c", "av_timecode_make_string", "ff_network_log_callback", "x264_mb_mc", "WebPGetWorkerInterface", "ff_put_h264_qpel8_mc13_neon", "ff_yuv2rgb_c_init_tables", "ffurl_open", "avcodec_decode_audio4", "ff_thread_get_format", "av_audio_fifo_size", "ff_imdct_calc_c_fixed", "_Z49BidirectionalEstimation_UseLowerScfOfCurrentFrameP22CAacDecoderChannelInfo", "ff_h264_direct_ref_list_init", "av_format_get_probe_score", "av_opt_set_defaults2", "ff_hevc_sao_offset_sign_decode", "tcp_get_ip_addr", "ff_put_h264_chroma_mc4_neon", "av_audio_fifo_reset", "_Z14FDKcrcStartRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "_Z21FDKaacEnc_calcSfbDistPlPsiii", "av_fifo_space", "ff_add_pixels_clamped_neon", "ff_dct_unquantize_h263_inter_neon", "avcodec_find_best_pix_fmt2", "x264_frame_expand_border_mod16", "_Z43FDKsbrEnc_DeleteSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTOR", "av_frame_get_decode_error_flags", "ff_hevc_set_neighbour_available", "avresample_set_matrix", "ff_put_h264_qpel8_mc03_neon", "_Z27CLatmDemux_GetNrOfSubFramesP10CLatmDemux", "ff_add_param_change", "av_i2int", "_Z24transportDec_CrcStartRegP12TRANSPORTDECi", "_Z19CPns_SetCorrelationP8CPnsDataiii", "av_probe_input_format", "av_basename", "pcmDmx_Parse", "ff_rtmp_check_alloc_array", "_Z19CProgramConfig_ReadP14CProgramConfigP13FDK_BITSTREAMj", "ff_getSwsFunc", "avcodec_encode_video2", "avfilter_graph_set_auto_convert", "sbrEncoder_Close", "_Z26CConcealment_GetFadeFactorP16CConcealmentInfoi", "avcodec_get_class", "_Z25adtsWrite_EndRawDataBlockP11STRUCT_ADTSP13FDK_BITSTREAMPi", "ff_put_pixels8_l2_8", "_Z35FDKaacEnc_calcSfbQuantEnergyAndDistPlPsiiS_S_", "_Z17GetRam_SbrDecoderi", "ff_hevc_save_states", "x264_reference_build_list_optimal", "_Z28FDKaacEnc_InitPreEchoControlPlPiiS_S0_", "av_log_get_level", "_Z30FDKaacEnc_DetermineEncoderModeP12CHANNEL_MODEi", "av_opt_free", "_Z19FDKaacEnc_AdjThrNewPP13ADJ_THR_STATEi", "ffurl_write", "ff_put_h264_qpel16_mc11_neon", "ff_videodsp_init_arm", "__fixdfdi", "swri_dither_init", "av_codec_set_pkt_timebase", "ff_vector_fmul_vfp", "x264_frame_expand_border_filtered", "x264_weights_analyse", "_Z14InitInvSqrtTabv", "_Z16FDKaacEnc_QCInitP8QC_STATEP7QC_INIT", "_Z30FreeRam_sbr_QmfStatesSynthesisPPl", "FDKaacEnc_CalcBitrate", "_Z17GetAACdynamic_RAMi", "ff_float_dsp_init_vfp", "sws_freeVec", "_Z26CChannel_CodebookTableInitP22CAacDecoderChannelInfo", "ff_sort_nearly_sorted_floats", "av_opt_get_channel_layout", "_Z23CAacDecoder_DecodeFrameP20AAC_DECODER_INSTANCEjPsii", "ff_h264_chroma422_dc_dequant_idct_12_c", "ff_filter_frame", "avio_rl24", "_Z10setHcrTypeP10CErHcrInfo14MP4_ELEMENT_ID", "ff_dualinput_uninit", "av_d2q", "av_application_did_http_open", "avfilter_transform", "_Z41GetRequiredMemRam_Sbr_guideVectorDetectedv", "__subsf3", "av_mul_i", "_Z29GetRequiredMemRam_bsOutbufferv", "ff_hevc_put_qpel_uw_h3v3_neon_8", "ff_data_to_hex", "ff_hevc_put_qpel_uw_pixels_w48_neon_8", "avformat_transfer_internal_stream_timing_info", "av_buffer_get_opaque", "ff_start_tag", "av_format_set_audio_codec", "avformat_seek_file", "ff_audio_data_combine", "av_opt_eval_q", "av_expr_eval", "av_dump_format", "ff_audio_mix", "_Z9CTns_ReadP13FDK_BITSTREAMP8CTnsDataPK8CIcsInfoj", "ff_pred16x16_128_dc_neon", "FDK_InitBitBuffer", "__subdf3", "__gtsf2", "_Z29FDKaacEnc_ChannelElementWriteP12TRANSPORTENCP12ELEMENT_INFOPP14QC_OUT_CHANNELP15PSY_OUT_ELEMENTPP15PSY_OUT_CHANNELj17AUDIO_OBJECT_TYPEaPih", "ff_hevc_transform_luma_4x4_neon_8", "_Z30FDKaacEnc_CheckBandEnergyOptimPKlPiPKiiPlS4_i", "ff_amrwb_lsp2lpc", "_Z33GetRequiredMemRam_Sbr_quotaMatrixv", "_Z10ReadPsDataP6PS_DECP13FDK_BITSTREAMi", "ff_h264_chroma_dc_dequant_idct_10_c", "ff_h263_decode_init", "ff_frame_pool_get_video_config", "swr_convert_frame", "ff_hevc_put_qpel_uw_pixels_w32_neon_8", "ff_qpeldsp_init", "av_parser_parse2", "av_hex_dump_log", "_Z19FDKaacEnc_QCOutInitPP6QC_OUTiPK15CHANNEL_MAPPING", "ff_add_cpb_side_data", "ff_j_rev_dct", "avio_put_str", "_Z17FDKgetWindowSlopeii", "_Z25GetRam_aacEnc_PsyInternali", "x264_param_apply_fastfirstpass", "FDKsbrEnc_EncodeIid", "swri_noise_shaping_int16", "av_twofish_init", "_Z11FreeDrcInfoPP8CDrcInfo", "ff_ebur128_add_frames_planar_short", "av_get_pix_fmt_name", "ff_h263_pred_acdc", "x264_frame_pop", "x264_pixel_ssim_wxh", "ff_aac_ac3_parse", "ff_acelp_decode_4bit_to_2nd_delay3", "_Z20GetRam_Sbr_guideScfbi", "ff_acelp_interpolatef", "av_image_fill_pointers", "av_packet_from_data", "ff_filter_graph_remove_filter", "ff_ntp_time", "_Z27CConcealment_GetLastFrameOkP16CConcealmentInfoi", "ff_h263_update_motion_val", "_Z32transportDec_RegisterAscCallbackP12TRANSPORTDECPFiPvPK21CSAudioSpecificConfigES1_", "ff_lsp2polyf", "av_frame_remove_side_data", "ff_put_h264_qpel8_mc21_neon", "_Z22transportEnc_Latm_InitP11LATM_STREAMP13FDK_BITSTREAMP12CODER_CONFIGj14TRANSPORT_TYPEP13CSTpCallBacks", "ff_h264_idct_add8_10_c", "_Z24FDKaacEnc_WriteBitstreamP12TRANSPORTENCP15CHANNEL_MAPPINGP6QC_OUTP7PSY_OUTP8QC_STATE17AUDIO_OBJECT_TYPEja", "_Z16autoCorr2nd_realP11ACORR_COEFSPKli", "x264_quant_luma_dc_trellis", "ff_amr_set_fixed_gain", "ff_h264_filter_mb", "ff_generate_window_func", "ff_scale_vector_to_given_sum_of_squares", "ff_png_zfree", "ff_hevc_sao_type_idx_decode", "_Z32FDKsbrEnc_DeleteTonCorrParamExtrP16SBR_TON_CORR_EST", "av_cast5_init", "_Z21FDKaacEnc_GetPnsParamP11NOISEPARAMSiiiPKiPiii", "ff_er_add_slice", "ff_filter_get_nb_threads", "ff_idctdsp_init_armv6", "ff_formats_ref", "ff_framesync_request_frame", "ff_get_best_fcode", "_Z18FreeRam_SbrChannelPP11SBR_CHANNEL", "ff_text_eof", "FDKaacEnc_GetVBRBitrate", "_Z26FDKaacEnc_CalcBandNrgMSOptPKlS0_PiS1_PKiiPlS4_iS4_S4_", "_Z20GetRam_aacEnc_PsyOuti", "ff_subtitles_queue_read_packet", "ff_hevc_put_pixels_w2_neon_8", "ff_hevc_set_new_ref", "_Z20calculateSbrEnvelopeP16QMF_SCALE_FACTORP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAP14SBR_FRAME_DATAPPlS8_iS7_ji", "ff_mjpeg_encode_huffman_close", "ffio_close_null_buf", "ff_simple_idct248_put", "ff_fft_lut_init", "ff_amf_read_null", "x264_intra_satd_x3_4x4_neon", "av_bprint_init", "__mulsf3", "ff_ebur128_init", "FDK_getBwd", "x264_predict_4x4_h_c", "_Z25FDKaacEnc_InitDownsamplerP11DOWNSAMPLERii", "_Z20aacDecoder_drcEpilogP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "av_mdct_init", "ff_text_read", "avcodec_encode_subtitle", "av_audio_fifo_read", "ff_tlog_ref", "ff_h264_idct_add8_12_c", "_Z23sbrDecoder_drcApplySlotP18SBRDEC_DRC_CHANNELPlS1_iii", "x264_predict_8x8_init_arm", "ff_mpv_motion", "ff_subtitles_read_chunk", "av_rc4_alloc", "_Z27FreeRam_Sbr_freqBandTableLOPPh", "_Z21FDKaacEnc_psyMainInitP12PSY_INTERNAL17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPINGiiiiiiijm", "WebPPictureFree", "av_fopen_utf8", "ff_rate_control_uninit", "_Z28FDKaacEnc_InitChannelMapping12CHANNEL_MODE13CHANNEL_ORDERP15CHANNEL_MAPPING", "android_getCpuFamily", "FDKmalloc", "ff_h264_free_tables", "ff_hevc_put_pixels_w32_neon_8", "android_getCpuIdArm", "av_dict_free", "ff_acelp_update_past_gain", "av_format_set_video_codec", "ff_faanidct_add", "av_xtea_alloc", "ff_aac_sbr_ctx_init", "ff_imdct36_blocks_fixed", "avcodec_pix_fmt_to_codec_tag", "ff_h264_check_intra_pred_mode", "ff_lzw_encode_init", "ff_h264_idct_add16intra_12_c", "ff_amf_write_object_end", "av_opt_child_next", "ff_avg_h264_qpel8_mc31_neon", "av_buffersink_get_channel_layout", "ff_h264_idct_add16intra_9_c", "ff_hevc_merge_flag_decode", "ff_calculate_bounding_box", "_Z14FreeRam_ps_decPP6PS_DEC", "_Z27FreeRam_Sbr_guideVectorDiffPPl", "_Z29GetRequiredMemRam_ParamStereov", "ff_dualinput_init", "avresample_read", "ff_faandct", "ff_me_search_tdls", "ff_avg_h264_qpel16_mc13_neon", "_Z21CConcealment_GetStateP16CConcealmentInfo", "ff_pred16x16_vert_neon", "_Z21CreateStreamMuxConfigP11LATM_STREAMP13FDK_BITSTREAMiP13CSTpCallBacks", "ff_mdct_calc_c", "_Z12ResetPsDeCorP6PS_DEC", "ff_stream_add_bitstream_filter", "ff_slice_thread_free", "FDKmemcmp", "android_getCpuCount", "_Z22FreeRam_SbrDynamic_RAMPPl", "ff_acelp_decode_gain_code", "av_image_copy", "_Z29aacDecoder_drcInitChannelDataP15CDrcChannelData", "x264_macroblock_cache_save", "av_aes_ctr_set_random_iv", "x264_macroblock_bipred_init", "avresample_open", "ff_imdct_half_c", "av_fifo_alloc_array", "ff_idctdsp_init_armv5te", "avpriv_aac_parse_header", "av_rdft_calc", "avpriv_mpegaudio_decode_header", "x264_predict_8x8c_v_c", "rgb24to32", "_Z22FDKaacEnc_lookUpPnsUseiiii", "av_mediacodec_default_init", "av_buffersrc_get_nb_failed_requests", "FDK_Feed", "_Unwind_VRS_Get", "avcodec_get_subtitle_rect_class", "av_find_info_tag", "_Z28FDKsbrEnc_getSbrStartFreqRAWii", "_Z30CBlock_FrequencyToTimeLowDelayP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssc", "av_frame_get_pkt_size", "x264_frame_new_slice", "__fixunsdfsi", "_Z24GetRam_aacEnc_PsyDynamiciPh", "av_stereo3d_alloc", "av_channel_layout_extract_channel", "av_bprint_strftime", "ff_h264_idct_add_8_c", "av_twofish_alloc", "ff_rtmp_packet_read_internal", "ff_audio_convert_alloc", "_Z7dct_IIIPlS_iPi", "ff_hevc_decode_nal_sei", "av_color_range_name", "ff_fmt_is_in", "swr_set_matrix", "ff_h263_pred_dc", "ff_put_pixels16x16_c", "av_codec_get_max_lowres", "avresample_convert", "ff_h264_filter_mb_fast", "x264_sei_avcintra_umid_write", "applyLimiter", "av_rescale_rnd", "avpriv_copy_bits", "av_sha_final", "av_spherical_from_name", "avcodec_enum_to_chroma_pos", "_Z35GetRequiredMemAacDecoderChannelInfov", "__gedf2", "av_opt_child_class_next", "_Z28FDKhybridAnalysisScaleStatesP18FDK_ANA_HYB_FILTERi", "_Z34FDKsbrEnc_deleteExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPE", "sbrDecoder_Parse", "ff_acelp_weighted_vector_sum", "_Z18CConcealment_StoreP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "__eqdf2", "ff_hevc_put_qpel_h3v2_neon_8", "avcodec_configuration", "ff_hevc_put_pixels_w12_neon_8", "_Z20scalFilterBankValuesP6PS_DECPPlS2_iiiPaS3_iPii", "avfilter_graph_add_filter", "x264_predict_4x4_init", "ff_audio_convert", "ff_h264_idct_add_14_c", "ff_inet_aton", "av_thread_message_queue_send", "_Z22CAacDecoder_AncDataGetP8CAncDataiPPhPi", "ff_channel_layouts_changeref", "ff_yuv420p_to_abgr_neon", "av_parse_cpu_flags", "ff_amf_read_string", "ff_h264_draw_horiz_band", "ff_flac_get_max_frame_size", "ff_imdct36_blocks_float", "av_bprintf", "ff_framesync_uninit", "ff_yuv422p_to_abgr_neon", "x264_predict_8x16c_init", "_Z32FDKsbrEnc_CreateTonCorrParamExtrP16SBR_TON_CORR_ESTi", "swri_resample_dsp_arm_init", "_Z13CalcInvLdDatal", "_Z19FreeWorkBufferCore2PPl", "_Z30GetRequiredMemRam_aacEnc_QCoutv", "ff_avg_h264_qpel8_mc12_neon", "ff_put_qpel16_mc12_old_c", "ff_framequeue_peek", "av_base64_decode", "ff_framesync_next", "_Z21CConcealment_GetDelayP14CConcealParams", "_Z11imdct_blockP6mdct_tPlS1_PKsiiiPK8FIXP_SPKiS6_il", "ff_resample_one_s32_neon", "ff_inlink_consume_samples", "x264_me_search_ref", "_Z10ApplyToolsPP22CAacDecoderChannelInfoPK16SamplingRateInfoji", "av_jni_set_java_vm", "av_sha512_update", "ff_draw_color", "_Z8fDivNormll", "ff_rate_control_init", "_Unwind_RaiseException", "av_murmur3_final", "ff_lzw_decode_init", "ff_bsf_child_class_next", "ff_put_h264_qpel16_mc00_neon", "ff_h264_chroma_dc_dequant_idct_9_c", "ff_emulated_edge_mc_16", "_Z16CAacDecoder_InitP20AAC_DECODER_INSTANCEPK21CSAudioSpecificConfig", "av_codec_set_seek_preroll", "FDK_putBwd", "_Z10HcrDecoderP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "ff_jpeg_fdct_islow_10", "ff_acelp_high_pass_filter", "FDK_setBitCnt", "x264_intra_sad_x3_4x4_neon", "avio_read", "ff_default_get_audio_buffer", "ff_avg_h264_qpel8_mc20_neon", "ff_init_2d_vlc_rl", "ff_framesync_process_frame", "ff_mov_read_chan", "_Z28GetRequiredMemRam_SbrDecoderv", "_Z31CLatmDemux_GetFrameLengthInBitsP10CLatmDemux", "ff_amf_write_bool", "x264_lookahead_put_frame", "ffio_fill", "x264_frame_delete", "setLimiterRelease", "av_timecode_make_mpeg_tc_string", "ffurl_read", "ff_pixblockdsp_init_arm", "_Z35FDKaacEnc_PostProcessPnsChannelPairiP10PNS_CONFIGP8PNS_DATAS2_PiS3_", "ff_png_pass_row_size", "ffurl_connect", "av_fourcc_make_string", "_Z17GetRam_SbrEncoderi", "shuffle_bytes_1230", "_Z18FreeRam_SbrEncoderPP11SBR_ENCODER", "ff_pre_estimate_p_frame_motion", "ff_inlink_check_available_samples", "ff_listen_bind", "_Z29FDKsbrEnc_InitSbrCodeEnvelopeP17SBR_CODE_ENVELOPEPiill", "ff_gradfun_filter_line_c", "av_dv_codec_profile", "ff_avc_parse_nal_units", "ffurl_get_protocols", "av_fft_calc", "av_mallocz", "ff_prefetch_arm", "av_bsf_alloc", "avio_write_marker", "av_get_channel_layout_nb_channels", "ff_pred8x8_top_dc_neon", "ff_gradfun_blur_line_c", "avcodec_alloc_context3", "av_parse_video_rate", "ff_hevc_put_qpel_uw_h3v2_neon_8", "_Unwind_DeleteException", "_Z10CTns_ApplyP8CTnsDataPK8CIcsInfoPlPK16SamplingRateInfoi", "ff_crcEDB88320_update", "_Z32transportDec_RegisterSbrCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "avfilter_link", "ff_hevcdsp_init_neon", "avio_recved", "ff_inlink_process_commands", "av_audio_fifo_write", "av_bprint_chars", "av_write_image_line", "av_thread_message_queue_recv", "av_match_name", "avpriv_find_pix_fmt", "ffurl_get_file_handle", "sws_convertPalette8ToPacked32", "ff_check_interrupt", "_Z42transportEnc_LatmCountTotalBitDemandHeaderP11LATM_STREAMj", "ff_getfreedisksapce", "_Z5fLog2li", "_Z13GetAacDecoderi", "ff_h264_idct_dc_add_9_c", "ff_make_formatu64_list", "ff_network_wait_fd", "ff_fft_end", "ff_get_video_buffer", "_Unwind_Resume", "_Z23FDKsbrEnc_frameSplitterPPlPiP22SBR_TRANSIENT_DETECTORPhS4_iiiiiS_", "WebPEncodeLosslessBGRA", "av_get_sample_fmt", "ff_dct_unquantize_h263_neon", "_Z10CRvlc_ReadP22CAacDecoderChannelInfoP13FDK_BITSTREAM", "avio_handshake", "WebPSafeCalloc", "x264_intra_sad_x3_16x16", "ff_mov_read_stsd_entries", "ff_avg_h264_qpel8_mc21_neon", "ff_sws_alphablendaway", "ff_put_h264_qpel16_mc31_neon", "_Z21FDKaacEnc_noiseDetectPlPiiPKiPsP11NOISEPARAMSS3_", "ff_put_h264_qpel8_mc33_neon", "av_aes_alloc", "ffurl_size", "av_int2i", "x264_cabac_encode_terminal_c", "av_strndup", "ff_amf_write_number", "setLimiterSampleRate", "av_hwframe_ctx_create_derived", "ff_avg_h264_qpel16_mc32_neon", "_Z35Hcr_State_BODY_SIGN_ESC__ESC_PREFIXP13FDK_BITSTREAMPv", "ff_alloc_packet2", "ff_simple_idct_add_armv5te", "_Z21qmfSynthesisFilteringP15QMF_FILTER_BANKPPlS2_PK16QMF_SCALE_FACTORiPsiS1_", "FDKacos", "ff_mpv_export_qp_table", "av_fifo_freep", "x264_macroblock_slice_init", "av_get_frame_filename", "ff_filter_alloc", "ff_h264_pred_weight_table", "_Z21FreeRam_SbrDecChannelPP11SBR_CHANNEL", "av_dict_set", "ff_mdct_init", "_Z6dct_IIPlS_iPi", "_Z24GetRam_aacEnc_AacEncoderi", "_Z32transportEnc_RegisterSbrCallbackP12TRANSPORTENCPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "ff_float_dsp_init_arm", "ff_ebur128_add_frames_double", "ff_default_query_formats", "avutil_license", "ff_id3v2_read_dict", "_Z32transportDec_RegisterSscCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAM17AUDIO_OBJECT_TYPEiiiES1_", "av_get_planar_sample_fmt", "_Z4ifftiPlPi", "_Z25GetRam_aacEnc_ElementBitsi", "swri_rematrix_init", "av_dirname", "ff_mov_add_hinted_packet", "av_dict_get", "av_stream_set_recommended_encoder_configuration", "ff_id3v2_parse_apic", "x264_param_apply_profile", "ff_ebur128_add_frames_planar_float", "av_audio_fifo_drain", "av_get_cpu_flags", "av_hash_get_name", "ff_getutilctx_a_init", "ff_avg_qpel16_mc12_old_c", "ff_hevc_put_pixels_w48_neon_8", "av_pixelutils_get_sad_fn", "x264_cabac_block_residual_8x8_rd_c", "ff_put_no_rnd_qpel8_mc13_old_c", "ff_avg_pixels8x8_c", "_Z36FreeRam_Sbr_prevEnvelopeCompensationPPh", "_Z7dit_fftPliPK8FIXP_SPKi", "sws_isSupportedEndiannessConversion", "ff_hpeldsp_init_arm", "ff_h264_sei_stereo_mode", "ff_mov_get_lpcm_codec_id", "ff_img_read_header", "av_frame_get_qp_table", "ff_put_no_rnd_qpel16_mc31_old_c", "ff_codec_get_tag", "_Z12PSEnc_CreatePP19T_PARAMETRIC_STEREO", "ff_mp4_read_descr_len", "WebPPictureImportBGRA", "__udivdi3", "ff_clear_fixed_vector", "av_strlcat", "_Z20FDK_MetadataEnc_OpenPP20FDK_METADATA_ENCODER", "ffio_open_null_buf", "x264_predict_8x8c_p_c", "av_get_codec_tag_string", "ff_ebur128_sample_peak", "av_sha_update", "_Z18FDKaacEnc_bitCountPKsiiPi", "ff_pixblockdsp_init", "ff_h264dsp_init_arm", "av_frame_make_writable", "ff_reget_buffer", "ff_sbr_sum64x5_neon", "av_strstart", "ff_avg_h264_qpel8_mc03_neon", "_Z21FDK_MetadataEnc_ClosePP20FDK_METADATA_ENCODER", "___Unwind_Backtrace", "av_rescale", "av_fifo_drain", "ff_mpv_common_init_armv5te", "ff_mjpeg_escape_FF", "av_tree_node_alloc", "av_application_did_http_seek", "av_find_best_pix_fmt_of_2", "x264_frame_push", "ff_put_pixels16_y2_no_rnd_armv6", "_Z23transportEnc_GetPCEBits12CHANNEL_MODEii", "FDKfclose", "ff_sbr_hf_apply_noise_2_neon", "av_bsf_get_null_filter", "ff_acelp_decode_9bit_to_1st_delay6", "ff_poll_frame", "_Z32FDKaacEnc_FreqToBandWithRoundingiiiPKi", "ff_blockdsp_init_arm", "ff_avg_pixels16_x2_neon", "__truncdfsf2", "av_dynarray_add", "x264_macroblock_encode", "ff_resample_common_apply_filter_x4_float_neon", "_Z31FDK_DRC_Generator_setDrcProfileP8DRC_COMP11DRC_PROFILES1_", "avcodec_is_open", "av_apply_bitstream_filters", "av_application_on_async_statistic", "_Z26transportEnc_EndAccessUnitP12TRANSPORTENCPi", "av_sub_i", "_Z20CProgramConfig_ResetP14CProgramConfig", "av_bitstream_filter_close", "_Z37FDKsbrEnc_qmfInverseFilteringDetectorP16SBR_INV_FILT_ESTPPlS1_PaiiiP9INVF_MODE", "avcodec_default_get_format", "ff_put_pixels16_y2_armv6", "ff_simple_idct_put_10", "ff_hevc_put_pixels_w8_neon_8", "av_opt_serialize", "_Z28FDKaacEnc_writeExtensionDataP12TRANSPORTENCP16QC_OUT_EXTENSIONijj17AUDIO_OBJECT_TYPEa", "ff_put_h264_qpel16_mc03_neon", "_Z19sbrDecoder_drcApplyP18SBRDEC_DRC_CHANNELPPlS2_iPi", "_Z36GetRequiredMemRam_aacEnc_PsyInternalv", "avfilter_uninit", "avfilter_graph_alloc", "av_samples_copy", "_Z20FreeRam_aacEnc_QCoutPP6QC_OUT", "ff_scalarproduct_float_neon", "_Z20FDKaacEnc_AdjThrInitP13ADJ_THR_STATEiPP12ELEMENT_BITSiiiiili", "__gesf2", "ff_tls_deinit", "ff_aac_sbr_ctx_close", "ff_mjpeg_encode_picture_frame", "ff_emulated_edge_mc_8", "FDKabs", "_Z22FDKsbrEnc_InitPSEncodeP11T_PS_ENCODE8PS_BANDSl", "avfilter_graph_parse2", "ff_init_desc_hscale", "ff_hevc_v_loop_filter_chroma_neon", "rgb15tobgr32", "av_application_close", "av_packet_split_side_data", "av_cast5_alloc", "x264_macroblock_cache_free", "_Z29CLatmDemux_GetOtherDataLengthP10CLatmDemux", "ff_framesync_filter_frame", "av_opt_eval_int64", "_Z37GetRequiredMemRam_Sbr_guideVectorOrigv", "ff_smil_extract_next_text_chunk", "FDKsbrEnc_EncodeIpd", "ijkav_register_ijktcphook_protocol", "__gnu_Unwind_Resume", "ff_weighted_vector_sumf", "av_tea_crypt", "ff_mpeg4_decode_partitions", "ff_pred8x8_vert_neon", "ff_h264_idct_add8_422_8_c", "ff_h264_pred_init_arm", "ff_put_qpel16_mc32_old_c", "av_frame_ref", "avcodec_default_execute", "ffio_ensure_seekback", "_Z19FDKaacEnc_PsyOutNewPP7PSY_OUTiiiPh", "ff_hevc_mvp_lx_flag_decode", "ff_mpeg12_init_vlcs", "sbrDecoder_GetLibInfo", "_Z9fixp_atanl", "av_packet_pack_dictionary", "_Z29GetRam_sbr_QmfStatesSynthesisi", "ff_find_unused_picture", "x264_lookahead_get_frames", "av_lockmgr_register", "_Z24GetRequiredMemAacDecoderv", "ff_hevc_flush_dpb", "_Z37FDKaacEnc_GetChannelModeConfiguration12CHANNEL_MODE", "_Z22aacDecoder_drcSetParamP8CDrcInfo16AACDEC_DRC_PARAMi", "ff_avg_pixels8_x2_neon", "FDKaalloc", "ff_thread_init", "ff_text_r8", "av_assert0_fpu", "ff_hevc_transform_4x4_neon_8", "x264_param_parse", "_Z18resetLppTransposerP13SBR_LPP_TRANShPhhS1_hhj", "av_new_packet", "ff_channel_layouts_unref", "avio_wl32", "av_free", "avfilter_insert_filter", "avio_rb16", "av_aes_ctr_crypt", "ff_h264_chroma_dc_dequant_idct_12_c", "_Z21FreeRam_aacEnc_PsyOutPP7PSY_OUT", "av_md5_update", "av_opt_set_defaults", "av_get_channel_layout", "_Z9schur_divlli", "ff_avfilter_graph_update_heap", "av_hash_update", "av_xtea_le_init", "ff_dct32_float", "WebPPictureYUVAToARGB", "ff_mdct_init_fixed", "ff_resample_one_flt_neon", "_Z18FDKaacEnc_PsyClosePP12PSY_INTERNALPP7PSY_OUT", "av_md5_alloc", "ff_h263_decode_mb", "_Z20initSbrPrevFrameDataP19SBR_PREV_FRAME_DATAi", "ff_set_fixed_vector", "ff_hevc_put_qpel_uw_pixels_w64_neon_8", "ff_fft16_vfp", "avformat_license", "_Z24GetAacDecoderChannelInfoi", "_Z21adifRead_DecodeHeaderP11CAdifHeaderP14CProgramConfigP13FDK_BITSTREAM", "__gnu_Unwind_Save_VFP_D", "x264_frame_pop_unused", "av_lfg_init_from_data", "av_samples_fill_arrays", "ff_decode_pitch_lag", "ff_j_rev_dct_arm", "ffurl_close", "av_audio_fifo_alloc", "ff_compute_frame_duration", "av_audio_fifo_peek_at", "av_hwframe_transfer_get_formats", "ff_mpegvideoencdsp_init_arm", "aacEncoder_SetParam", "ff_framequeue_take", "ff_slice_thread_init", "avio_open2", "ff_h264_idct_add8_9_c", "rgb12to15", "av_get_alt_sample_fmt", "ff_flac_decode_frame_header", "ff_block_permute", "ff_me_search_epzs", "_Z21StatisticalEstimationP22CAacDecoderChannelInfo", "__divsi3", "_Z43FDKsbrEnc_CreateSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "av_ripemd_alloc", "aacEncEncode", "avfilter_get_class", "x264_nal_encode", "__addsf3", "av_rdft_init", "av_register_bitstream_filter", "av_packet_copy_props", "ff_put_h264_qpel8_mc32_neon", "ff_avg_h264_qpel8_mc22_neon", "_Z22FDKaacEnc_updateBitresP15CHANNEL_MAPPINGP8QC_STATEPP6QC_OUT", "avcodec_parameters_from_context", "ff_flacdsp_init", "av_get_frame_filename2", "ff_hevc_sao_offset_abs_decode", "ff_get_mb_score", "ff_inlink_request_frame", "ff_mpadsp_apply_window_fixed", "av_application_open", "ff_update_link_current_pts", "av_md5_sum", "ff_me_search_esa", "ff_ebur128_loudness_range", "ff_listen", "_Z26GetRam_Sbr_guideVectorDiffi", "av_parser_init", "_Z21FDKhybridAnalysisOpenP18FDK_ANA_HYB_FILTERPljS1_j", "avfilter_process_command", "aacEncInfo", "rgb12tobgr12", "ff_put_h264_qpel8_mc00_neon", "x264_cabac_encode_bypass_c", "ff_init_ff_sine_windows_fixed", "ff_libwebp_get_frame", "x264_lookahead_init", "_Z33Hcr_State_BODY_SIGN_ESC__ESC_WORDP13FDK_BITSTREAMPv", "ff_dct_init", "ff_celp_lp_zero_synthesis_filterf", "___Unwind_RaiseException", "av_bprint_get_buffer", "ff_put_guid", "av_opt_get_double", "avpriv_get_gamma_from_trc", "x264_hrd_fullness", "_Z15Free_AacEncoderPP10AACENCODER", "ff_pred8x8_0lt_dc_neon", "_Z30transportDec_GetBufferFullnessP12TRANSPORTDEC", "ff_me_search_ntss", "avfilter_init_filter", "_Z37GetRequiredMemRam_Sbr_freqBandTableHIv", "ff_thread_free", "x264_sync_frame_list_init", "av_buffersrc_add_frame", "av_dict_copy", "_Z25Hcr_State_BODY_SIGN__BODYP13FDK_BITSTREAMPv", "ff_configure_buffers_for_index", "ff_rdft_end", "av_dict_parse_string", "av_frame_set_qp_table", "av_opt_ptr", "rgb32to24", "x264_threads_distribute_ratecontrol", "ff_acelp_fc_pulse_per_track", "x264_pps_write", "ff_init_slice_from_src", "av_image_get_buffer_size", "swr_close", "_Z32GetRequiredMemRam_Sbr_envYBufferv", "ff_hevc_cabac_init", "av_codec_get_tag", "ff_frame_pool_audio_init", "avformat_getaddrinfo_a_init", "ff_hevc_put_qpel_uw_pixels_w8_neon_8", "av_hmac_free", "ff_h264_idct_dc_add_10_c", "av_frame_new_side_data", "_Z21initSlotBasedRotationP6PS_DECii", "ff_hevc_cu_chroma_qp_offset_flag", "av_fast_padded_malloc", "av_chroma_location_name", "ff_init_desc_chscale", "av_format_set_subtitle_codec", "createLimiter", "ff_load_image", "ff_planar_sample_fmts", "av_frame_set_pkt_pos", "x264_noise_reduction_update", "ff_hevc_sao_band_position_decode", "_Z16maxSubbandSamplePPlS0_iiii", "__restore_core_regs", "ff_interleave_packet_per_dts", "sws_allocVec", "ff_pix_abs16_armv6", "av_strlcatf", "ff_simple_idct_add_12", "av_hash_get_size", "_Z28InvMdctTransformLowDelay_fdkPliPsS_ii", "ff_imdct_half_c_fixed_32", "av_camellia_init", "av_utf8_decode", "av_display_matrix_flip", "ff_put_pixels16_x2_no_rnd_neon", "av_probe_input_format3", "ff_h264_idct_add_12_c", "ff_ebur128_add_frames_float", "_Z34FDKsbrEnc_InitSbrTransientDetectorP22SBR_TRANSIENT_DETECTORjiiP16sbrConfigurationiiiiiii", "ff_put_pixels8_xy2_neon", "_Z24FreeRam_TransportDecoderPP12TRANSPORTDEC", "av_buffer_pool_init", "_Z25FDKsbrEnc_DestroyPSEncodePP11T_PS_ENCODE", "android_setCpuArm", "av_color_space_name", "swscale_configuration", "ff_thread_report_progress2", "av_hex_dump", "ff_put_h264_qpel16_mc12_neon", "aacDecoder_DecodeFrame", "av_opt_query_ranges", "__ltsf2", "ff_mpv_common_frame_size_change", "ff_choose_timebase", "av_format_set_opaque", "ff_add_pixels_clamped_armv6", "av_log2_16bit", "sws_get_class", "ff_fft_init", "ff_h2645_extract_rbsp", "av_find_nearest_q_idx", "ff_lzw_decode_open", "ff_thread_release_buffer", "ff_pred8x8_0l0_dc_neon", "ff_id3v2_free_extra_meta", "ff_write_chained", "_Z17CAacDecoder_CloseP20AAC_DECODER_INSTANCE", "ff_avg_qpel8_mc32_old_c", "x264_analyse_free_costs", "_Z30FDKaacEnc_EstimateScaleFactorsPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELiii", "av_des_crypt", "swr_inject_silence", "ff_thread_ref_frame", "_Z12FDKcrcGetCRCP11FDK_CRCINFO", "ff_hevc_put_qpel_uw_h1v1_neon_8", "av_frame_free", "avfilter_link_get_channels", "ff_pred16x16_hor_neon", "ff_avg_h264_qpel16_mc21_neon", "_Z21GetRequiredMemDrcInfov", "av_cpu_count", "av_opt_query_ranges_default", "ff_mpa_synth_filter_fixed", "_Z21GetRam_Sbr_envYBufferi", "av_xtea_crypt", "ff_put_pixels16_x2_neon", "x264_copy_column8", "ff_put_no_rnd_qpel16_mc12_old_c", "_Z25FDKsbrEnc_UpdateFreqScalePhPiiiii", "avio_shutdown", "ff_mdct_fixed_calc_neon", "ff_id3v2_finish", "_Z22FreeRam_Sbr_signMatrixPPi", "ff_simple_idct_12", "av_packet_get_side_data", "_Z35GetRequiredMemRam_aacEnc_AacEncoderv", "_Z24GetRam_SbrDecWorkBuffer2i", "ff_h264_idct8_add4_14_c", "ff_merge_samplerates", "FDKfflush", "ff_audio_convert_set_func", "x264_cabac_encode_init_core", "av_format_get_video_codec", "ff_rl_free", "avformat_get_riff_video_tags", "av_hmac_final", "_Z32GetRequiredMemRam_SbrDynamic_RAMv", "av_bprint_append_data", "x264_predict_16x16_init_arm", "_Z23FDKhybridSynthesisApplyP18FDK_SYN_HYB_FILTERPKlS2_PlS3_", "av_audio_fifo_realloc", "_Z28GetRam_aacEnc_PsyOutElementsi", "av_get_output_timestamp", "x264_ratecontrol_init_reconfigurable", "ff_command_queue_pop", "avformat_find_stream_info", "x264_sei_avcintra_vanc_write", "_Z30adtsRead_GetRawDataBlockLengthP11STRUCT_ADTSi", "ff_null_get_audio_buffer", "_Z17adtsRead_CrcCheckP11STRUCT_ADTS", "x264_mb_predict_mv", "avresample_get_out_samples", "ff_flac_set_channel_layout", "FDKaacEnc_CalcBitsPerFrame", "ff_hevc_end_of_slice_flag_decode", "_Z23GetRam_aacEnc_QCchanneliPh", "_Z17FDKaacEnc_BCClosePP13BITCNTR_STATE", "ff_h264_idct_add8_422_9_c", "ff_avg_h264_qpel16_mc11_neon", "_Z19FDKaacEnc_TnsEncodeP8TNS_INFOP8TNS_DATAiPK10TNS_CONFIGiPlii", "x264_predict_4x4_init_arm", "x264_frame_deblock_row", "ff_mov_cenc_avc_write_nal_units", "ff_mjpeg_encode_init", "_Z23FDKaacEnc_psyInitStatesP12PSY_INTERNALP10PSY_STATIC17AUDIO_OBJECT_TYPE", "_Z30FDKsbrEnc_InitTonCorrParamExtriP16SBR_TON_CORR_ESTP15SBR_CONFIG_DATAiiiiij", "ff_network_wait_fd_timeout", "avresample_get_delay", "_Z18FDKsbrEnc_AddRightPiS_i", "ff_ps_read_data", "sws_alloc_context", "ff_insert_pad", "ff_conv_fltp_to_s16_neon", "x264_slicetype_analyse", "_Z17transportEnc_InitP12TRANSPORTENCPhi14TRANSPORT_TYPEP12CODER_CONFIGj", "_Z43GetRequiredMemRam_aacEnc_AdjThrStateElementv", "av_stream_set_r_frame_rate", "__divdi3", "ff_h264chroma_init_arm", "av_mediacodec_release_buffer", "shuffle_bytes_3012", "_Z31FDK_DRC_Generator_getDrcProfileP8DRC_COMP", "ff_rate_estimate_qscale", "ff_h264_queue_decode_slice", "ff_rdft_init", "ff_hevc_put_qpel_uw_h2v2_neon_8", "_Z33FDKsbrEnc_CalculateTonalityQuotasP16SBR_TON_CORR_ESTPPlS2_ii", "ff_graph_thread_free", "ff_frame_pool_video_init", "ff_hevc_intra_chroma_pred_mode_decode", "ff_mpeg1_find_frame_end", "av_format_get_subtitle_codec", "_Z19drmRead_CrcStartRegP10STRUCT_DRMP13FDK_BITSTREAMi", "ff_alloc_packet", "_Z16drmRead_CrcCheckP10STRUCT_DRM", "ff_mdct_init_fixed_32", "sws_scaleVec", "_Z22FDK_DRC_Generator_CalcP8DRC_COMPPKsiiillPiS3_", "ff_pred8x8_l0t_dc_neon", "av_copy_packet", "_Z14Get_AacEncoderi", "avpriv_mpeg4audio_get_config", "ff_audio_convert_init_arm", "ff_amf_write_object_start", "avio_wb32", "av_hash_final_hex", "ff_yuv422p_to_rgba_neon", "_Z3fftiPlPi", "x264_mb_predict_mv_16x16", "ff_set_sar", "av_application_on_http_event", "x264_quant_4x4_trellis", "__gnu_Unwind_Restore_WMMXD", "av_hash_freep", "_Z29Hcr_State_BODY_SIGN_ESC__BODYP13FDK_BITSTREAMPv", "ff_h264_decode_mb_cabac", "ff_put_h264_qpel16_mc23_neon", "x264_predict_8x8_dc_c", "ff_h264_pred_direct_motion", "_Z14CPns_IsPnsUsedPK8CPnsDataii", "av_aes_init", "av_imdct_half", "av_realloc", "ff_all_samplerates", "_Z28FreeRam_aacEnc_PsyOutChannelPP15PSY_OUT_CHANNEL", "ff_put_pixels16_neon", "_Z8sqrtFixpl", "ff_hevc_decode_nal_sps", "avpriv_toupper4", "avcodec_get_type", "ff_clean_intra_table_entries", "_Z27GetRam_PsQmfStatesSynthesisi", "_Z25CProgramConfig_GetDefaultP14CProgramConfigj", "WebPConfigInitInternal", "ff_h264_idct_add16intra_8_c", "ff_mpeg4_clean_buffers", "ff_avg_h264_qpel16_mc22_neon", "_Z25FreeRam_aacEnc_PsyElementPP11PSY_ELEMENT", "avio_rl32", "ff_hwframe_map_create", "ff_avg_h264_qpel16_mc00_neon", "_Z20aacDecoder_drcPrologP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "aacDecoder_GetFreeBytes", "_Z23adifWrite_GetHeaderBitsP9ADIF_INFO", "ff_draw_horiz_band", "ff_avg_qpel16_mc31_old_c", "x264_frame_copy_picture", "ff_parse_channel_layout", "ff_hyscale_fast_c", "ff_yuv422p_to_argb_neon", "ff_hevc_decode_nal_pps", "_Unwind_Resume_or_Rethrow", "avpriv_lock_avformat", "avio_get_dyn_buf", "av_strnstr", "av_pix_fmt_desc_get_id", "_Z24AudioSpecificConfig_InitP21CSAudioSpecificConfig", "av_parse_cpu_caps", "avfilter_next", "_Z22CBlock_ReadSectionDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "avpicture_fill", "ff_mpeg_update_thread_context", "av_stream_get_end_pts", "ff_sine_window_init", "avpriv_init_lls", "ff_dct_quantize_c", "ff_get_guid", "ff_mpa_decode_header", "ff_mjpeg_init_hvsample", "av_crc_init", "ff_add_pixels_clamped_arm", "av_packet_shrink_side_data", "ff_amf_read_number", "ff_h264_unref_picture", "FDKaacEnc_LimitBitrate", "ff_raw_data_read_header", "av_realloc_f", "FDK_getBitCnt", "ff_hevc_clear_refs", "sbrEncoder_IsSingleRatePossible", "ff_riff_write_info", "ff_hevc_h_loop_filter_chroma_neon", "_Z24FDKaacEnc_BlockSwitchingP23BLOCK_SWITCHING_CONTROLiiPKs", "_Z24sbrGetSyntheticCodedDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAM", "destroyLimiter", "WebPSafeFree", "ff_framequeue_free", "ff_audio_data_init", "_Z22adifWrite_EncodeHeaderP9ADIF_INFOP13FDK_BITSTREAMi", "ff_dot_product", "av_stristart", "ff_urlcontext_child_class_next", "ff_parse_sample_format", "_Z34GetRequiredMemRam_TransportDecoderv", "_Z16fDivNormHighPrecllPi", "ff_sbr_hf_g_filt_neon", "ff_id3v2_write_metadata", "ff_avg_qpel8_mc33_old_c", "ff_mp4_parse_es_descr", "avpriv_scalarproduct_float_c", "sws_isSupportedOutput", "ff_audio_mix_get_matrix", "__gnu_Unwind_Save_WMMXD", "FDKprintDisclaimer", "avcodec_decode_subtitle2", "avcodec_flush_buffers", "_Z29GetRequiredMemWorkBufferCore2v", "aacEncGetLibInfo", "_Z20GetRam_SbrDecChanneli", "av_xtea_le_crypt", "_Z18FreeRam_SbrDecoderPP20SBR_DECODER_INSTANCE", "avpriv_tempfile", "ff_mpeg_er_frame_start", "ff_af_queue_close", "av_stream_add_side_data", "x264_quant_init", "av_format_set_open_cb", "ff_xvid_idct_init", "ff_audio_data_read_from_fifo", "_Z18GetRam_bsOutbufferi", "ff_h264_flush_change", "ff_resample_common_apply_filter_x4_s16_neon", "ff_mpv_decode_mb", "ff_mpeg4_frame_end", "av_dict_get_string", "av_frame_set_best_effort_timestamp", "_Z9InitLdIntv", "ff_put_no_rnd_qpel16_mc32_old_c", "_Z32FDKsbrEnc_initFrameInfoGeneratorP18SBR_ENVELOPE_FRAMEiiiiPK8FREQ_REShi", "x264_sei_version_write", "swri_get_dither", "ff_graph_thread_init", "FDK_getValidBits", "x264_sei_frame_packing_write", "ijkav_register_ijklongurl_protocol", "ff_nv12_to_abgr_neon", "WebPBlendAlpha", "avio_put_str16le", "aacDecoder_GetStreamInfo", "ff_hevc_mpm_idx_decode", "ff_simple_idct_add_armv6", "ff_h264_decode_picture_parameter_set", "_Z22CConcealment_SetParamsP14CConcealParamsiiiii", "_Z23transportEnc_GetLibInfoP8LIB_INFO", "FDKcalloc_L", "avfilter_graph_request_oldest", "sws_addVec", "ff_guess_image2_codec", "avcodec_dct_init", "av_log2", "FDKfeof", "x264_param_default_preset", "ff_mpeg4_init_direct_mv", "av_realloc_array", "ff_h264_h_loop_filter_luma_neon", "ff_put_pixels8_x2_neon", "_Z22FDKhybridSynthesisInitP18FDK_SYN_HYB_FILTER15FDK_HYBRID_MODEii", "_Z25transportEnc_LatmGetFrameP11LATM_STREAMP13FDK_BITSTREAMPi", "x264_ratecontrol_qp", "aacEncClose", "ff_ebur128_set_channel", "_Z22FreeRam_aacEnc_QCstatePP8QC_STATE", "x264_cabac_encode_decision_c", "ff_urldecode", "FDKafree", "FDKfread", "ff_intel_h263_decode_picture_header", "ff_mdct_calc_c_fixed_32", "_Z7fPowIntliiPi", "x264_macroblock_thread_free", "FDKfwrite", "ff_hcscale_fast_c", "ff_h264_decode_ref_pic_marking", "_Z11CreatePsDecPP6PS_DECi", "ff_put_h264_qpel16_mc10_neon", "avformat_alloc_output_context2", "ff_hevc_put_qpel_uw_pixels_neon_8", "avcodec_register_all", "av_image_fill_arrays", "_Z41GetRequiredMemAacDecoderStaticChannelInfov", "FDKrewind", "avio_wl24", "ff_sws_init_range_convert", "avfilter_graph_queue_command", "av_hash_alloc", "_Z24FDK_MetadataEnc_GetDelayP20FDK_METADATA_ENCODER", "__nedf2", "av_opt_show2", "swresample_license", "WebPEncodeLosslessRGBA", "x264_predict_8x8c_init", "_Z23slotBasedHybridAnalysisPlS_S_S_P6HYBRID", "ff_h263_loop_filter", "av_ripemd_final", "rgb15tobgr15", "av_dv_codec_profile2", "av_timegm", "av_shr_i", "ff_hevc_luma_mv_mvp_mode", "avresample_is_open", "av_set_cpu_flags_mask", "ff_h264dsp_init", "ff_j_rev_dct2", "av_image_fill_max_pixsteps", "FDKatan2", "swr_build_matrix", "x264_frame_cond_broadcast", "audio_resample", "av_bitstream_filter_next", "avpriv_bprint_to_extradata", "ff_index_search_timestamp", "ff_get_pixels_armv6", "x264_encoder_close", "FDKfabs", "ff_get_packet_palette", "av_fast_mallocz", "ff_audio_data_free", "av_blowfish_alloc", "_Z16CBlock_GetEscapeP13FDK_BITSTREAMl", "ff_me_search_umh", "FDKsqrt", "x264_predict_8x16c_p_c", "av_abuffersink_params_alloc", "ff_mjpegenc_huffman_compute_bits", "ff_pix_norm1_armv6", "ff_epzs_motion_search", "av_frame_get_plane_buffer", "av_opt_next", "x264_ratecontrol_end", "av_thread_message_queue_free", "_Z20FDK_MetadataEnc_InitP20FDK_METADATA_ENCODERiiijjj12CHANNEL_MODE13CHANNEL_ORDER", "ff_put_h264_qpel8_mc31_neon", "avpicture_layout", "_Z22FDKaacEnc_reduceMinSnrP15CHANNEL_MAPPINGPP14QC_OUT_ELEMENTPP15PSY_OUT_ELEMENTPA2_A60_hiPiii", "ff_fdct248_islow_8", "av_frame_get_channel_layout", "ff_hevc_put_pixels_w4_neon_8", "ff_h264_idct_dc_add_14_c", "ff_put_pixels_clamped_neon", "x264_macroblock_encode_p8x8", "av_strncasecmp", "ff_put_no_rnd_pixels8_xy2_arm", "avio_wb24", "ff_mp4_read_descr", "sws_getConstVec", "x264_encoder_invalidate_reference", "ff_h264_idct8_add4_8_c", "_Z32GetRam_aacEnc_AdjThrStateElementi", "av_packet_alloc", "x264_free", "ff_hevc_v_loop_filter_luma_neon", "_Z18transportEnc_ClosePP12TRANSPORTENC", "x264_me_refine_qpel", "av_rc4_crypt", "ff_acelp_lp_decode", "ff_hevc_put_qpel_uw_pixels_w4_neon_8", "ff_h264_idct8_add4_9_c", "avcodec_open2", "ff_weight_h264_pixels_8_neon", "x264_intra_sad_x3_8x16c", "ff_mjpeg_encode_stuffing", "_Z5fLog2liPi", "ff_avg_h264_qpel16_mc20_neon", "ff_hevc_dsp_init", "x264_intra_sad_x3_8x8_neon", "ff_rdft_init_arm", "av_murmur3_init", "av_dict_count", "ff_hevc_put_qpel_h3_neon_8", "ff_alloc_entries", "av_camellia_crypt", "x264_intra_sad_x3_4x4", "ff_bsf_get_packet", "ff_support_getaddrinfo_a", "_Unwind_Complete", "ff_put_qpel8_mc13_old_c", "ff_mjpeg_build_huffman_codes", "ff_h264_idct8_add4_10_c", "ff_init_desc_fmt_convert", "ff_h264_chroma422_dc_dequant_idct_14_c", "avresample_available"], "allstrings": ["+infinity", "+inf", "-infinity", "-inf", "+nan", "-nan", "infinity", "libavcodec/put_bits.h", "Internal error, put_bits buffer too small\n", "libavcodec/aac_adtstoasc_bsf.c", "Error parsing AudioSpecificConfig extradata!\n", "Assertion %s failed at %s:%d\n", "s->buf_ptr < s->buf_end", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "Input packet too small\n", "aac_adtstoasc", "libavcodec/aacdec_template.c", "Reserved bit set.\n", "AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found.\n", "Invalid Predictor Reset Group.\n", "Prediction is not allowed in AAC-LC.\n", "LTP in ER AAC LD not yet implemented.\n", "Number of scalefactor bands in group (%d) exceeds limit (%d).\n", "TNS filter order %d is greater than maximum %d.\n", "libavcodec/aacdec.c", "Dependent coupling is not supported together with LTP\n", "Too large remapped id", "Too many channels\n", "invalid default channel configuration (%d)\n", "Assuming an incorrectly encoded 7.1 channel layout instead of a spec-compliant 7.1(wide) layout, use -strict %d to decode according to the specification instead.\n", "mono with CPE\n", "stereo with SCE\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to LFE[0]\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to SCE[1]\n", "ChannelElement %d.%d missing \n", "Sample rate index in program config element does not match the sample rate index configured by the container.\n", "decode_pce: Input buffer exhausted before END element found\n", "960/120 MDCT window", "AAC data resilience (flags %x)", "epConfig %d", "SBR+", "invalid sampling rate index %d\n", "invalid low delay sampling rate index %d\n", "Low Delay SBR", "Input buffer exhausted before END element found\n", "Audio object type %s%d", "audio config changed\n", "initializing latmctx\n", "Audio specific config size is invalid\n", "invalid band type\n", "decode_band_types: Input buffer exhausted before END element found\n", "Number of bands (%d) exceeds limit (%d).\n", "If you heard an audible artifact, there may be a bug in the decoder. Clipped intensity stereo position (%d -> %d)", "If you heard an audible artifact, there may be a bug in the decoder. Clipped noise gain (%d -> %d)", "Scalefactor (%d) out of range.\n", "Pulse tool not allowed in eight short sequence.\n", "error in spectral data, ESC overflow\n", "Pulse data corrupt or invalid.\n", "ms_present = 3 is reserved.\n", "Unknown ER channel configuration %d", "channel element %d.%d is not allocated\n", "no frame data found\n", "More than one AAC RDB per ADTS frame", "Error decoding AAC frame header.\n", "Elem type:%x id:%x\n", "skip_data_stream_element: Input buffer exhausted before END element found\n", "Not evaluating a further program_config_element as this construct is dubious at best.\n", "TYPE_FIL: Input buffer exhausted before END element found\n", "extension type: %d len:%d\n", "SBR was found before the first channel element.\n", "SBR signaled to be not-present but was found in the bitstream.\n", "Implicit SBR was found with a first occurrence after the first frame.\n", "FILL:%s\n", "libfaac %d.%d", "Multiple programs", "Multiple layers", "no decoder config found\n", "incomplete frame\n", "frame length mismatch %d << %d\n", "ADTS header detected, probably as result of configuration misparsing\n", "aac_latm", "AAC decoder", "dual_mono_mode", "Select the channel to decode for dual mono", "auto", "autoselection", "main", "Select Main/Left channel", "Select Sub/Right channel", "both", "Select both channels", "libavcodec/aacps.c", "iid_mode %d is reserved.\n", "icc_mode %d is reserved.\n", "illegal iid\n", "illegal icc\n", "ps extension overflow %d\n", "iid_par invalid\n", "icc_par invalid\n", "Expected to read %d PS bits actually read %d.\n", "libavcodec/aacsbr_template.c", "Invalid n_master: %d\n", "Invalid bitstream, crossover band index beyond array bounds: %d\n", "env_facs_q %d is invalid\n", "noise_facs_q %d is invalid\n", "Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n", "Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n", "bs_pointer >= 0", "Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n", "Not strictly monotone time borders\n", "Unsupported sample rate for SBR: %d\n", "Invalid bs_stop_freq: %d\n", "Invalid bitstream, too many QMF subbands: %d\n", "Invalid num_bands_0: %d\n", "Invalid vDk0[%d]: %d\n", "Invalid vDk1[%d]: %d\n", "Stop frequency border too high: %d\n", "Start frequency border too high: %d\n", "Too many noise floor scale factors: %d\n", "patch construction failed\n", "Too many patches: %d\n", "Invalid bitstream - cannot apply SBR to element type %d\n", "Parametric Stereo signaled to be not-present but was found in the bitstream.\n", "Reserved SBR extensions", "SBR Extension over read.\n", "Expected to read %d SBR bytes actually read %d.\n", "SBR reset failed. Switching SBR to pure upsampling mode.\n", "element type mismatch %d != %d\n", "No quantized data read for sbr_dequant.\n", "libavcodec/aacsbr.c", "envelope scalefactor overflow in dequant\n", "temp1 <= 1E20", "sbr->data[ch].bs_num_env > 0", "ERROR : no subband found for frequency %d\n", "kx != f_table{high,low}[0]. Derived frequency tables were not regenerated.\n", "libavcodec/acelp_filters.c", "overflow that would need clipping in ff_acelp_interpolate()\n", "libavcodec/acelp_vectors.c", "x < size", "multi-channel AMR", "libavcodec/amrnbdec.c", "Corrupt bitstream\n", "dtx mode", "Note: libopencore_amrnb supports dtx\n", "The file is corrupted, pitch_lag = 0 is not allowed\n", "amrnb", "libavcodec/amrwbdec.c", "Invalid mode %d\n", "Frame too small (%d bytes). Truncated file?\n", "Encountered a bad or corrupted frame\n", "SID mode", "amrwb", "libavcodec/audio_frame_queue.c", "%d frames left in the queue on closing\n", "Queue input is backward in time\n", "Trying to remove %d samples, but the queue is empty\n", "!afq->frame_count", "afq->remaining_samples == afq->remaining_delay", "Trying to remove %d more samples than there are in the queue\n", "AVDCT", "DCT algorithm", "autoselect a good one", "fastint", "fast integer (experimental / for debugging)", "accurate integer", "experimental / for debugging", "altivec", "faan", "floating point AAN DCT (experimental / for debugging)", "idct", "select IDCT implementation", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "floating point AAN IDCT (experimental / for debugging)", "simpleauto", "bits_per_sample", "libavcodec/avpacket.c", "(unsigned)pkt->size <= 2147483647 - 32", "Palette", "New Extradata", "Param Change", "H263 MB Info", "Replay Gain", "Display Matrix", "Stereo 3D", "Audio Service Type", "Skip Samples", "JP Dual Mono", "Strings Metadata", "Subtitle Position", "Matroska BlockAdditional", "WebVTT ID", "WebVTT Settings", "Metadata Update", "MPEGTS Stream ID", "Mastering display metadata", "Spherical Mapping", "size<=2147483647 - 5 && p - pkt->data >= size", "p-pkt->data == pkt->size", "private_spspps_buf", "libavcodec/bitstream.c", "incorrect codes\n", "length <= put_bits_left(pb)", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code %x for %d in init_vlc\n", "needed %d had %d\n", "ret >= 0", "null", "bsf_list(", "unknown", "libavcodec/bsf.c", "Codec '%s' (%d) is not supported by the bitstream filter '%s'. Supported codecs are: ", "%s (%d) ", "pkt->data || pkt->side_data", "A non-NULL packet sent after an EOF.\n", "bsf_list", "AVBSFContext", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpeg", "mjpegb", "mpeg4", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "cyuv", "h264", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "8bps", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "ulti", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "012v", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "targa", "tdsc", "tiff", "vc1image", "webp", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "qdmc", "celt", "g723_1", "dss_sp", "g729", "8svx_exp", "8svx_fib", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "text", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "application/octet-stream", "application/vnd.ms-opentype", "application/x-truetype-font", "application/x-font", "image/png", "image/x-xwindowdump", "image/x-xpixmap", "image/x-xbitmap", "image/webp", "image/tiff", "image/x-targa", "image/x-tga", "image/x-pcx", "image/x-portable-pixmap", "image/gif", "image/jp2", "image/x-ms-bmp", "image/jpeg", "libavcodec/bytestream.h", "buf_size >= 0", "dca_core", "libavcodec/error_resilience.c", "s->quarter_sample", "guess_dc() is out of memory\n", "internal error, slice end before start\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "next_blocklist_length <= mb_height * mb_width", "extract_extradata", "remove", "remove the extradata from the bitstream", "libavcodec/flacdec.c", "s->flac_stream_info.max_blocksize", "illegal residual coding method %d\n", "invalid rice order: %i blocksize %i\n", "invalid predictor order: %i > %i\n", "invalid residual\n", "skipping flac header packet 1\n", "skipping vorbis comment\n", "invalid frame header\n", "bps not found in STREAMINFO or frame header\n", "switching bps mid-stream is not supported\n", "blocksize %d > %d\n", "sample rate not found in STREAMINFO or frame header\n", "  Max Blocksize: %d\n", "  Max Framesize: %d\n", "  Samplerate: %d\n", "  Channels: %d\n", "  Bits: %d\n", "invalid subframe padding\n", "Invalid number of wasted bits > available bits (%d) - left=%d\n", "Decorrelated bit depth > 32", "illegal pred order %d\n", "invalid coeff precision\n", "qlevel %d not supported, maybe buggy stream\n", "invalid coding type\n", "decode_frame() failed\n", "CRC error at PTS %lld\n", "overread: %d\n", "underread: %d orig size: %d\n", "invalid header\n", "FLAC decoder", "use_buggy_lpc", "emulate old buggy lavc behavior", "libavcodec/flac.c", "invalid sync code\n", "invalid channel mode: %d\n", "invalid sample size code (%d)\n", "broken stream, invalid padding\n", "sample/frame number invalid; utf8 fscked\n", "reserved blocksize code: 0\n", "illegal sample rate code %d\n", "header crc mismatch\n", "extradata NULL or too small.\n", "extradata contains %d bytes too many.\n", "extradata too small.\n", "invalid max blocksize: %d\n", "invalid bps: %d\n", "libavcodec/flvdec.c", "Bad picture start code\n", "Bad picture format\n", "%c esc_type:%d, qp:%d num:%d\n", "libavcodec/frame_thread_encoder.c", "Forcing thread count to 1 for MJPEG encoding, use -thread_type slice or a constant quantizer if you want to use multiple cpu cores\n", "MJPEG CBR encoding works badly with frame multi-threading, consider using -threads 1, -thread_type slice or a constant quantizer.\n", "context", "non_deterministic", "!avctx->internal->frame_thread_encoder", "threads", "!thread_avctx->internal->frame_thread_encoder", "ff_frame_thread_encoder_init failed\n", "Forcing thread count to 1 for huffyuv encoding with first pass or context 1\n", "libavcodec/gifdec.c", "cannot decode frame without keyframe\n", "code=%02x '%c'\n", "picture doesn't have either global or local palette.\n", "Invalid image width.\n", "Invalid image height.\n", "Image too wide by %d, truncating.\n", "Image too high by %d, truncating.\n", "LZW init failed\n", "LZW decode failed\n", "gif decoder", "trans_color", "color value (ARGB) that is used instead of transparent color", "libavcodec/gif.c", "%dx%d image at pos (%d;%d) [area:%dx%d]\n", "No available color, can not use transparency\n", "GIF does not support resolutions above 65535x65535\n", "avctx->pix_fmt == AV_PIX_FMT_PAL8", "GIF encoder", "gifflags", "set GIF flags", "flags", "offsetting", "enable picture offsetting", "transdiff", "enable transparency detection between frames", "libavcodec/h263dec.c", "Unsupported codec %d\n", "L263", "S263", "Slice mismatch at MB: %d\n", "Error at MB: %d\n", "discarding %d junk bits at end, next would be %X\n", "overreading %d bits\n", "slice end not reached but screenspace end (%d left %06X, score= %d)\n", "this codec does not support truncated bitstreams\n", "Discarding excessive bitstream in packed xvid\n", "Reverting picture dimensions change due to header decoding failure\n", "header damaged\n", "format change not supported\n", "GEOV", "GEOX", "libavcodec/h2645_parse.c", "nal->skipped_bytes_pos_size >= nal->skipped_bytes", "libavcodec/h2645_parse.h", "Invalid NAL unit size (%d > %d).\n", "Exceeded next NALFF position, re-syncing.\n", "No start code is found.\n", "NALFF: Consumed only %d bytes instead of %d\n", "Invalid NAL unit %d, skipping.\n", "libavcodec/h264_cabac.c", "overflow in decode_cabac_mb_mvd\n", "Reference %d >= %d\n", "gray chroma\n", "cabac decode of qscale diff failed at %d %d\n", "libavcodec/golomb.h", "Invalid UE golomb code\n", "libavcodec/h264_cavlc.c", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "offset == (sizeof(coeff_token_vlc_tables) / sizeof((coeff_token_vlc_tables)[0]))", "mb_type %d in %c slice too large at %d %d\n", "Not enough data for an intra PCM block.\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "dquant out of range (%d) at %d %d\n", "libavcodec/h264dec.c", "Reference not available for error concealing\n", "Reference invalid\n", "Duplicating field %d to fill missing\n", "stereo_mode", "Error splitting the input into NAL units.\n", "Invalid zero-sized VCL NAL unit\n", "Invalid inter IDR frame\n", "invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n", "data partitioning", "Green Metadata Info SEI message\n", "  green_metadata_type: %d\n", "  green_metadata_period_type: %d\n", "  green_metadata_num_seconds: %d\n", "  green_metadata_num_pictures: %d\n", "  SEI GREEN Complexity Metrics: %f %f %f %f\n", "  xsd_metric_type: %d\n", "  xsd_metric_value: %f\n", "SPS decoding failure, trying again with the complete NAL\n", "Unknown NAL code: %d (%d bits)\n", "decode_slice_header error\n", "Q264", "no frame!\n", "pict->buf[0] || !*got_frame", "Cannot allocate memory.\n", "pthread_once has failed.", "Error resilience with slice threads is enabled. It is unsafe and unsupported and may crash. Use it at your own risk\n", "H264 Decoder", "is_avc", "is avc", "nal_length_size", "enable_er", "Enable error resilience on damaged frames (unsafe)", "pocdiff overflow\n", "libavcodec/h264_direct.c", "pocdiff0 overflow\n", "cur->mbaff == (h)->mb_aff_frame", "co located POCs unavailable\n", "libavcodec/h264dsp.c", "bit_depth<=8", "libavcodec/h264_mp4toannexb_bsf.c", "SPS not present in the stream, nor in AVCC, stream may be unreadable\n", "PPS not present in the stream, nor in AVCC, stream may be unreadable\n", "The input looks like it is Annex B already\n", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "Invalid extradata size: %d\n", "h264_mp4toannexb", "libavcodec/h264_parse.c", "Ignoring NAL type %d in extradata\n", "SPS decoding failure, trying again after escaping the NAL\n", "luma_log2_weight_denom %d is out of range\n", "chroma_log2_weight_denom %d is out of range\n", "Out of range weight\n", "top block unavailable for requested intra mode %d\n", "left block unavailable for requested intra4x4 mode %d\n", "out of range intra chroma pred mode\n", "top block unavailable for requested intra mode\n", "left block unavailable for requested intra mode\n", "reference overflow %u > %u or %u > %u\n", "avcC %d too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "libavcodec/h264_parser.c", "AVC-parser: nal length size invalid\n", "AVC-parser: nal size %d remaining %d\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count %d overflow\n", "illegal memory management control operation %d\n", "pps_id %u out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "libavcodec/h264_picture.c", "!dst->f->buf[0]", "src->f->buf[0]", "src->tf.f == src->f", "hardware accelerator failed to decode picture\n", "libavcodec/h264pred.c", "libavcodec/h264_ps.c", "delta scale %d is invalid\n", "cpb_count %d invalid\n", "PIC-AFF", "MB-AFF", "Truncating likely oversized SPS\n", "sps_id %u out of range\n", "chroma_format_idc %u", "separate color planes are not supported\n", "Different chroma and luma bit depth", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %d\n", "illegal POC type %d\n", "too many reference frames %d\n", "height overflow\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%d r:%d t:%d b:%d\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n", "Clipping illegal num_reorder_frames %d\n", "Overread %s by %d bits\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %d/%d b%d reo:%d\n", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "8x8DCT", "Truncating likely oversized PPS (%zu > %zu)\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d", "FMO not supported\n", "reference overflow (pps)\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n", "libavcodec/h264_refs.c", "%d %d %p\n", "short term list:\n", "%u fn:%d poc:%d %p\n", "long term list:\n", "remove short %d count %d\n", "index < def_len", "len <= 32", "abs_diff_pic_num overflow\n", "long_term_pic_idx overflow\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(sl->ref_list[list][index].parent->f->buf[0]) > 0", "Discarding mismatching reference\n", "reference picture missing during reorder\n", "reference count overflow\n", "illegal modification_of_pic_nums_idc %u\n", "no mmco here\n", "mmco:%d %d %d\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to short and long at the same time\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "illegal short term buffer state detected\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "illegal long ref in memory management control operation %d\n", "libavcodec/h264_sei.c", "SEI type %d size %d truncated at %d\n", "SPS unavailable in decode_picture_timing\n", "ct_type:%X pic_struct:%d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "non-existing SPS %d referenced in buffering period\n", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "libavcodec/h264_slice.c", "Could not allocate memory\n", "VDPAU decoding does not support video colorspace.\n", "Unsupported bit depth %d\n", "context_init() failed.\n", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3)", "Slice overlaps with next at %d\n", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream %td\n", "error while decoding MB %d %d\n", "Attempt to start a frame outside SETUP state\n", "!pic->f->data[0]", "!pic->hwaccel_picture_private", "no frame buffer available\n", "h264_slice_header_init() failed", "context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height", " fix", " IDR", "TEMP", "SPAT", "!h->setup_finished", "slice type %d too large at %d\n", "A non-intra slice in an IDR NAL unit.\n", "Frame num change from %d to %d\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "cabac_init_idc %u overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "Too many fields\n", "Broken frame packetizing\n", "sl == h->slice_ctx", "PPS changed between slices\n", "SPS changed in the middle of the frame\n", "sps->crop_right + sps->crop_left < (unsigned)h->width", "sps->crop_top + sps->crop_bottom < (unsigned)h->height", "changing width %d -> %d / height %d -> %d on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "h->cur_pic_ptr", "h->cur_pic_ptr->f->buf[0]", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "no picture %s\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on slice %d\n", "Invalid mix of IDR and non-IDR slices\n", "first_mb_in_slice overflow\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", "libavcodec/hevc_cabac.c", "CABAC_MAX_BIN : %d\n", "libavcodec/hevcdec.c", "%02x", "The cu_qp_delta %d is outside the valid range [%d, %d].\n", "cu_chroma_qp_offset_idx not yet tested.\n", "PPS id out of range: %d\n", "PPS changed between slices.\n", "Invalid slice segment address: %u.\n", "Unknown slice type: %d.\n", "Inter slices in an IRAP frame.\n", "Ignoring POC change between slices: %d -> %d\n", "No ref lists in the SPS.\n", "Too many refs: %d/%d.\n", "Zero refs for a frame with P or B slices.\n", "Invalid collocated_ref_idx: %d.\n", "luma_log2_weight_denom %d is invalid\n", "Invalid number of merging MVP candidates: %d.\n", "Independent slice segment missing.\n", "num_entry_point_offsets %d is invalid\n", "offset_len %d is invalid\n", "Failed to allocate memory\n", "too many slice_header_extension_data_bytes\n", "The slice_qp %d is outside the valid range [%d, 51].\n", "Impossible slice segment.\n", "Overread slice header by %d bits\n", "Error constructing the frame RPS.\n", "Mastering Display Metadata:\n", "r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f)\n", "min_luminance=%f, max_luminance=%f\n", "First slice in a frame missing.\n", "Non-matching NAL types of the VCL NALUs: %d %d\n", "Error constructing the reference lists for the current slice.\n", "WPP ctb addresses are wrong (%d %d %d %d)\n", "entry_point_offset table is corrupted\n", "Skipping NAL unit %d\n", "Error parsing NAL unit #%d.\n", "Invalid long term RPS.\n", "Invalid NAL unit size in extradata.\n", "Decoding nal unit %d %d from hvcC failed\n", "Verifying checksum for frame with POC %d: ", "plane %d - correct ", "mismatching checksum of plane %d - ", " != ", "Impossible initial tile.\n", "Previous slice segment missing\n", "HEVC decoder", "apply_defdispwin", "Apply default display window from VUI", "strict-displaywin", "stricly apply default display window size", "libavcodec/hevc_mp4toannexb_bsf.c", "Invalid NAL unit type in extradata: %d\n", "No parameter sets in the extradata\n", "hevc_mp4toannexb", "libavcodec/hevc_parser.c", "Invalid NAL unit: %d\n", "SPS id out of range: %d\n", "missing picture in access unit\n", "libavcodec/hevc_ps.c", "Main profile bitstream\n", "Main 10 profile bitstream\n", "Main Still Picture profile bitstream\n", "Range Extension profile bitstream\n", "Unknown HEVC profile: %d\n", "PTL information too short\n", "PTL information for sublayer %i too short\n", "Not enough data for sublayer %i level_idc\n", "Invalid delta in scaling list data: %d.\n", "!(s->sps_list[id] && s->sps == (HEVCSPS*)s->sps_list[id]->data)", "nb_cpb %d invalid\n", "Invalid value of delta_idx in slice header RPS: %d > %d.\n", "Invalid value of abs_delta_rps: %d\n", "Invalid num_delta_pocs: %d\n", "Too many refs in a short term RPS.\n", "Decoding VPS\n", "Truncating likely oversized VPS (%td > %zu)\n", "VPS id out of range: %d\n", "vps_reserved_three_2bits is not three\n", "vps_reserved_ffff_16bits is not 0xffff\n", "vps_max_sub_layers out of range: %d\n", "vps_max_dec_pic_buffering_minus1 out of range: %d\n", "vps_max_num_reorder_pics out of range: %d\n", "too many layer_id_included_flags\n", "vps_num_hrd_parameters %d is invalid\n", "Overread VPS by %d bits\n", "VPS %d does not exist\n", "sps_max_sub_layers out of range: %d\n", "chroma_format_idc %d is invalid\n", "discarding sps conformance window, original values are l:%u r:%u t:%u b:%u\n", "Luma bit depth (%d) is different from chroma bit depth (%d), this is unsupported.\n", "The following bit-depths are currently specified: 8, 9, 10 and 12 bits, chroma_format_idc is %d, depth is %d\n", "log2_max_pic_order_cnt_lsb_minus4 out range: %d\n", "sps_max_dec_pic_buffering_minus1 out of range: %d\n", "sps_max_num_reorder_pics out of range: %d\n", "Invalid value %d for log2_min_cb_size", "Invalid value %d for log2_diff_max_min_coding_block_size", "Invalid value for log2_min_tb_size", "Invalid value %d for log2_diff_max_min_transform_block_size", "PCM bit depth (%d) is greater than normal bit depth (%d)\n", "Too many short term RPS: %d.\n", "num_long_term_ref_pics_sps %d is out of range.\n", "Decoding VUI\n", "Unknown SAR index: %u.\n", "Invalid default display window\n", "discarding vui default display window, original values are l:%u r:%u t:%u b:%u\n", "Strange VUI timing information, retrying...\n", "Retry got %u/%u fps\n", "extended_precision_processing_flag not yet implemented\n", "high_precision_offsets_enabled_flag not yet implemented\n", "cabac_bypass_alignment_enabled_flag not yet implemented\n", "Reducing left output window to %d chroma samples to preserve alignment.\n", "Invalid visible frame dimensions: %dx%d.\n", "Displaying the whole video surface.\n", "CTB size out of range: 2^%d\n", "log2_ctb_size %d differs from the bounds of any known profile\n", "log2_ctb_size %d", "Invalid coded frame dimensions.\n", "max_transform_hierarchy_depth_inter out of range: %d\n", "max_transform_hierarchy_depth_intra out of range: %d\n", "max transform block size out of range: %d\n", "Overread SPS by %d bits\n", "Decoding SPS\n", "Truncating likely oversized SPS (%td > %zu)\n", "Parsed SPS: id %d; coded wxh: %dx%d; cropped wxh: %dx%d; pix_fmt: %s.\n", "Decoding PPS\n", "Truncating likely oversized PPS (%td > %zu)\n", "SPS %u does not exist.\n", "diff_cu_qp_delta_depth %d is invalid\n", "pps_cb_qp_offset out of range: %d\n", "pps_cr_qp_offset out of range: %d\n", "num_tile_columns_minus1 out of range: %d\n", "num_tile_rows_minus1 out of range: %d\n", "Invalid tile widths.\n", "Invalid tile heights.\n", "pps_beta_offset_div2 out of range: %d\n", "pps_tc_offset_div2 out of range: %d\n", "log2_parallel_merge_level_minus2 out of range: %d\n", "chroma_qp_offset_list_len_minus1 shall be in the range [0, 5].\n", "cb_qp_offset_list not tested yet.\n", "Overread PPS by %d bits\n", "libavcodec/hevc_refs.c", "Could not find ref with POC %d\n", "!frame->hwaccel_picture_private", "Error allocating frame, DPB full.\n", "Duplicate POC in a sequence: %d.\n", "Zero refs in the frame RPS.\n", "Invalid reference index.\n", "libavcodec/hevc_sei.c", "Decoding SEI\n", "BOTTOM Field\n", "TOP Field\n", "Skipped PREFIX SEI %d\n", "num_sps_ids_minus1 %d invalid\n", "active_parameter_set_id %d invalid\n", "Skipped SUFFIX SEI %d\n", "libavcodec/idctdsp.c", "Internal error, IDCT permutation not set\n", "libavcodec/imgconvert.c", "desc", "libavcodec/intelh263dec.c", "libavcodec/get_bits.h", "Marker bit missing at %d of %d %s\n", "after picture_number", "Bad H.263 id\n", "Intel H.263 free format not supported\n", "SAC not supported\n", "Wrong Intel H.263 format\n", "Bad value for reserved field\n", "Invalid marker\n", "in dimensions", "Invalid aspect ratio.\n", "libavcodec/ituh263dec.c", "illegal dc %d at %d %d\n", "illegal ac vlc code at %dx%d\n", "run overflow at %dx%d i:%d\n", "Huge DMV", " UMV", " LONG", " AIC", " AIV", " LOOP", "qp:%d %c size:%d rnd:%d%s%s%s%s%s%s%s%s%s %d/%d\n", "before MBA", "after SQUANT", "after MBA", "cbpc damaged at %d %d\n", "cbpy damaged at %d %d\n", "b mb_type damaged at %d %d\n", "b cbpy damaged at %d %d\n", "I cbpc damaged at %d %d\n", "I cbpy damaged at %d %d\n", "U263", "Header looks like RTP instead of H.263\n", "in PTYPE", "H.263 SAC not supported\n", "Syntax-based Arithmetic Coding (SAC) not supported\n", "Reference Picture Selection not supported\n", "Independent Segment Decoding not supported\n", "Bad UFEP type (%d)\n", "zero framerate\n", "rectangular slices not supported\n", "unordered slices not supported\n", "SEPB1", "SEPB2", " %5d", "ZYGO", "libavcodec/kbdwin.c", "n <= 1024", "libavcodec/libfdk-aacdec.c", "aacDecoder_Fill() failed: %x\n", "aacDecoder_DecodeFrame() failed: %x\n", "Unable to get stream info\n", "Stream info not initialized\n", "unknown channel type\n", "%d channels - front:%d side:%d back:%d lfe:%d top:%d\n", "unsupported number of front channels: %d\n", "unsupported number of side channels: %d\n", "unsupported number of back channels: %d\n", "unsupported number of LFE channels: %d\n", "unsupported channel configuration\n", "Error opening decoder\n", "Unable to set extradata\n", "Unable to set error concealment method\n", "Invalid request_channel_layout\n", "Unable to set output channels in the decoder\n", "Unable to allocate ancillary buffer for the decoder\n", "Unable to register downmix ancillary buffer in the decoder\n", "Unable to set DRC boost factor in the decoder\n", "Unable to set DRC attenuation factor in the decoder\n", "Unable to set DRC reference level in the decoder\n", "Unable to set DRC heavy compression in the decoder\n", "Unable to set in signal level limiting in the decoder\n", "failed to clear buffer when flushing\n", "libfdk_aac", "libfdk-aac decoder", "conceal", "Error concealment method", "spectral", "Spectral muting", "noise", "Noise Substitution", "energy", "Energy Interpolation", "drc_boost", "Dynamic Range Control: boost, where [0] is none and [127] is max boost", "drc_cut", "Dynamic Range Control: attenuation factor, where [0] is none and [127] is max compression", "drc_level", "Dynamic Range Control: reference level, quantized to 0.25dB steps where [0] is 0dB and [127] is -31.75dB", "drc_heavy", "Dynamic Range Control: heavy compression, where [1] is on (RF mode) and [0] is off", "level_limit", "Signal level limiting", "No error", "Invalid handle", "Memory allocation error", "Unsupported parameter", "Invalid config", "Initialization error", "AAC library initialization error", "SBR library initialization error", "Transport library initialization error", "Metadata library initialization error", "Encoding error", "End of file", "Unknown error", "libavcodec/libfdk-aacenc.c", "Unable to encode frame: %s\n", "Unable to open the encoder: %s\n", "Unable to set the AOT %d: %s\n", "Unable to enable SBR for ELD: %s\n", "Unable to set the sample rate %d: %s\n", "Unsupported number of channels %d\n", "Unable to set channel mode %d: %s\n", "Unable to set wav channel order %d: %s\n", "VBR quality %d out of range, should be 1-5\n", "Note, the VBR setting is unsupported and only works with some parameter combinations\n", "Unable to set the VBR bitrate mode %d: %s\n", "Unable to set the bitrate %lld: %s\n", "Unable to set the transmux format: %s\n", "Unable to set header period: %s\n", "Unable to set signaling mode %d: %s\n", "Unable to set afterburner to %d: %s\n", "cutoff valid range is %d-20000\n", "Unable to set the encoder bandwidth to %d: %s\n", "Unable to initialize the encoder: %s\n", "Unable to get encoder info: %s\n", "HE-AAC", "HE-AACv2", "afterburner", "Afterburner (improved quality)", "eld_sbr", "Enable SBR for ELD (for SBR in other configurations, use the -profile parameter)", "signaling", "SBR/PS signaling style", "default", "Choose signaling implicitly (explicit hierarchical by default, implicit if global header is disabled)", "implicit", "Implicit backwards compatible signaling", "explicit_sbr", "Explicit SBR, implicit PS signaling", "explicit_hierarchical", "Explicit hierarchical signaling", "latm", "Output LATM/LOAS encapsulated data", "header_period", "StreamMuxConfig and PCE repetition period (in frames)", "VBR mode (1-5)", "Lossless", "Lossy", "libavcodec/libwebpenc_common.c", "invalid compression level: %d\n", "%s - quality=%.1f method=%d\n", "Picture size is too large. Max is %dx%d.\n", "Using libwebp for RGB-to-YUV conversion. You may want to consider passing in YUV instead for lossy encoding.\n", "Copying frame due to differing chroma linesizes.\n", "Using libwebp for YUV-to-RGB conversion. You may want to consider passing in RGB instead for lossless encoding.\n", "libavcodec/libwebpenc.c", "WebPEncode() failed with error: %d\n", "libwebp", "compression_level", "global_quality", "lossless", "Use lossless mode", "preset", "Configuration preset", "none", "do not use a preset", "default preset", "picture", "digital picture, like portrait, inner shot", "photo", "outdoor photograph, with natural lighting", "drawing", "hand or line drawing, with high-contrast details", "icon", "small-sized colorful images", "text-like", "cr_threshold", "Conditional replenishment threshold", "cr_size", "Conditional replenishment block size", "quality", "Quality", "libavcodec/libx264.c", "Ignoring unsupported inverted stereo value %d\n", "Not enough memory for closed captions, skipping\n", "Error: nal buffer is too small\n", "-qscale is ignored, -crf is recommended.\n", "Error setting preset/tune %s/%s.\n", "Possible presets:", "Possible tunes:", "weightp", "Error parsing option '%s' with value '%s'.\n", "level", "Failed to parse level\n", "psy-rd", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "Error setting profile %s.\n", "Possible profiles:", "%4095[^:=]=%4095[^:]", "bad option '%s': '%s'\n", "bad value for '%s': '%s'\n", "Error parsing option '%s = %s'.\n", "libx264", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "+cgop", "rc_init_occupancy", "Set the encoding preset (cf. x264 --fullhelp)", "medium", "tune", "Tune the encoding params (cf. x264 --fullhelp)", "profile", "Set profile restrictions (cf. x264 --fullhelp) ", "fastfirstpass", "Use fast settings when encoding first pass", "Specify level (as defined by Annex A)", "passlogfile", "Filename for 2 pass stats", "wpredp", "Weighted prediction for P-frames", "a53cc", "Use A53 Closed Captions (if available)", "x264opts", "x264 options", "Select the quality for constant quality mode", "crf_max", "In CRF mode, prevents VBV from lowering quality beyond this point.", "Constant quantization parameter rate control method", "aq-mode", "AQ method", "aq_mode", "variance", "Variance AQ (complexity mask)", "autovariance", "Auto-variance AQ", "autovariance-biased", "Auto-variance AQ with bias to dark scenes", "aq-strength", "AQ strength. Reduces blocking and blurring in flat and textured areas.", "Use psychovisual optimizations.", "Strength of psychovisual optimization, in <psy-rd>:<psy-trellis> format.", "rc-lookahead", "Number of frames to look ahead for frametype and ratecontrol", "weightb", "Weighted prediction for B-frames.", "Weighted prediction analysis method.", "smart", "ssim", "Calculate and print SSIM stats.", "intra-refresh", "Use Periodic Intra Refresh instead of IDR frames.", "bluray-compat", "Bluray compatibility workarounds.", "b-bias", "Influences how often B-frames are used", "b-pyramid", "Keep some B-frames as references.", "b_pyramid", "strict", "Strictly hierarchical pyramid", "normal", "Non-strict (not Blu-ray compatible)", "mixed-refs", "One reference per partition, as opposed to one reference per macroblock", "8x8dct", "High profile 8x8 transform.", "fast-pskip", "Use access unit delimiters.", "mbtree", "Use macroblock tree ratecontrol.", "Loop filter parameters, in <alpha:beta> form.", "cplxblur", "Reduce fluctuations in QP (before curve compression)", "A comma-separated list of partitions to consider. Possible values: p8x8, p4x4, b8x8, i8x8, i4x4, none, all", "direct-pred", "Direct MV prediction mode", "spatial", "temporal", "slice-max-size", "Limit the size of each slice in bytes", "nal-hrd", "Signal HRD information (requires vbv-bufsize; cbr not allowed in .mp4)", "avcintra-class", "AVC-Intra class 50/100/200", "motion-est", "Set motion estimation method", "tesa", "forced-idr", "If forcing keyframes, force them as IDR frames.", "Coder type", "cavlc", "cabac", "Strategy to choose between I/P/B-frames", "chromaoffset", "QP difference between chroma and luma", "Scene change threshold", "noise_reduction", "Noise reduction", "x264-params", "Override the x264 configuration using a :-separated list of key=value parameters", "film", "animation", "grain", "stillimage", "psnr", "fastdecode", "zerolatency", "ultrafast", "superfast", "veryfast", "faster", "fast", "slow", "slower", "veryslow", "placebo", "libavcodec/lzwenc.c", "s->maxbits >= 9 && s->maxbits <= 12", "libavcodec/me_cmp.c", "internal error in cmp function selection\n", "libavcodec/mjpegenc_common.c", "Cannot store exact aspect ratio %d:%d\n", "JFIF", "Lavc57.89.100", "CS=ITU601", "avctx->codec->priv_data_size == sizeof(MpegEncContext)", "n <= s->buf_end - s->buf_ptr", "Buffer reallocation failed\n", "libavcodec/mjpegenc_huffman.c", "max_length > 0", "nval <= max_nval", "libavcodec/mjpegenc.c", "run == 0", "s->slice_context_count == 1", "JPEG does not support resolutions above 65500x65500\n", "mjpeg encoder", "Sum of absolute differences, fast", "cmp_func", "Sum of squared errors", "satd", "Sum of absolute Hadamard transformed differences", "Sum of absolute DCT transformed differences", "Sum of squared quantization errors, low quality", "Number of bits needed for the block", "Rate distortion optimal, slow", "zero", "Zero", "vsad", "Sum of absolute vertical differences", "vsse", "Sum of squared vertical differences", "nsse", "Noise preserving sum of squared differences", "dct264", "dctmax", "chroma", "msad", "Sum of absolute differences, median predicted", "mpv_flags", "Flags common for all mpegvideo-based encoders.", "skip_rd", "RD optimal MB level residual skipping", "strict_gop", "Strictly enforce gop size", "qp_rd", "Use rate distortion optimization for qp selection", "cbp_rd", "use rate distortion optimization for CBP", "normalize adaptive quantization", "always try a mb with mv=<0,0>", "luma_elim_threshold", "single coefficient elimination threshold for luminance (negative values also consider dc coefficient)", "chroma_elim_threshold", "single coefficient elimination threshold for chrominance (negative values also consider dc coefficient)", "quantizer_noise_shaping", "error_rate", "Simulate errors in the bitstream to test error concealment.", "qsquish", "how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)", "rc_qmod_amp", "experimental quantizer modulation", "rc_qmod_freq", "rc_eq", "Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.", "rc_init_cplx", "initial complexity for 1-pass encoding", "rc_buf_aggressivity", "currently useless", "border_mask", "increase the quantizer for macroblocks close to borders", "lmin", "minimum Lagrange factor (VBR)", "lmax", "maximum Lagrange factor (VBR)", "ibias", "intra quant bias", "pbias", "inter quant bias", "rc_strategy", "ratecontrol method", "ffmpeg", "default native rate control", "libxvid (2 pass only)", "motion_est", "motion estimation algorithm", "epzs", "xone", "force_duplicated_matrix", "Always write luma and chroma matrix for mjpeg, useful for rtp streaming.", "b_sensitivity", "Adjust sensitivity of b_frame_strategy 1", "brd_scale", "Downscale frames for dynamic B-frame decision", "skip_threshold", "Frame skip threshold", "skip_factor", "Frame skip factor", "skip_exp", "Frame skip exponent", "skip_cmp", "Frame skip compare function", "mpeg_quant", "Use MPEG quantizers instead of H.263", "RTP payload size in bytes", "mepc", "Motion estimation bitrate penalty compensation (1.0 = 256)", "mepre", "pre motion estimation", "pred", "Prediction method", "left", "plane", "median", "huffman", "Huffman table strategy", "optimal", "libavcodec/motion_est.c", "ME_MAP size is too small for SAB diamond\n", "me_method is only allowed to be set to zero and epzs; for hex,umh,full and others see dia_size\n", "ME_MAP size may be a little small for the selected diamond size\n", "s->quarter_sample==0 || s->quarter_sample==1", "s->linesize == c->stride", "s->uvlinesize == c->uvstride", "s->pict_type==AV_PICTURE_TYPE_P", "range <= 16 || !s->msmpeg4_version", "range <=256 || !(s->codec_id == AV_CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= 0)", "FFCMP3 0.0", "libavcodec/mp3_header_decompress_bsf.c", "Extradata invalid %d\n", "Could not find bitrate_index.\n", "mp3decomp", "libavcodec/mpeg12.c", "static_size <= (sizeof(table) / sizeof((table)[0]))", "libavcodec/mpeg12.h", "invalid dc code at\n", "libavcodec/mpeg4audio.c", "Invalid sample rate %d\n", "libavcodec/mpeg4_unpack_bframes_bsf.c", "Updating DivX userdata (remove trailing 'p') in extradata.\n", "Found %d VOP startcode(s) in this packet.\n", "Missing one N-VOP packet, discarding one B-frame.\n", "Found %d VOP headers in one packet, only unpacking one.\n", "Skipping N-VOP.\n", "Updating DivX userdata (remove trailing 'p').\n", "mpeg4_unpack_bframes", "DivX%dBuild%d%c", "DivX%db%d%c", "FFmpe%*[^b]b%d", "FFmpeg v%d.%d.%d / libavcodec build: %d", "Lavc%d.%d.%d", "XviD%d", "after new_pred", "before sprite_trajectory", "after sprite_trajectory", "Too large sprite shift or offset", "Overflow on sprite points", "libavcodec/mpeg4video.h", "dc<0 at %dx%d\n", "dc overflow at %dx%d\n", "libavcodec/mpeg4videodec.c", "illegal dc vlc\n", "dc marker bit missing\n", "1. marker bit missing in rvlc esc\n", "2. marker bit missing in rvlc esc\n", "reverse esc missing\n", "1. marker bit missing in 3. esc\n", "2. marker bit missing in 3. esc\n", "|level| overflow in 3. esc, qp=%d\n", "ac-tex damaged at %d %d\n", "mcbpc damaged at %d %d\n", "P cbpy damaged at %d %d\n", "illegal MB_type\n", "texture corrupted at %d %d %d\n", "marker does not match f_code\n", "illegal mb_num in video packet (%d %d) \n", "before time_increment in video packed header", "before vop_coding_type in video packed header", "untested\n", "Error, video packet header damaged (f_code=0)\n", "Error, video packet header damaged (b_code=0)\n", "mcbpc corrupted at %d %d\n", "DC corrupted at %d %d\n", "slice below monitor ...\n", "marker missing after first I partition at %d %d\n", "marker missing after first P partition at %d %d\n", "cbpy corrupted at %d %d\n", "I cbpy corrupted at %d %d\n", "P cbpy corrupted at %d %d\n", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "scalability ", "qpel ", "partition ", "rvlc ", " VOLC", "frame skip %d\n", "startcode: %3X ", "Video Object Start", "Video Object Layer Start", "Reserved", "FGS bp start", "Visual Object Seq Start", "Visual Object Seq End", "User Data", "Group of VOP start", "Video Session Error", "Visual Object Start", "Video Object Plane start", "slice start", "extension start", "fgs start", "FBA Object start", "FBA Object Plane start", "Mesh Object start", "Mesh Object Plane start", "Still Texture Object start", "Texture Spatial Layer start", "Texture SNR Layer start", "Texture Tile start", "Texture Shape Layer start", "stuffing start", "reserved", "System start", " at %d\n", "Multiple VOL headers", "illegal chroma format\n", "after first_half_bitrate", "after latter_half_bitrate", "after first_half_vbv_buffer_size", "after first_half_vbv_occupancy", "after latter_half_vbv_occupancy", "only rectangular vol supported\n", "Gray shape not supported\n", "before time_increment_resolution", "framerate==0\n", "before fixed_vop_rate", "before width", "before height", "after height", "MPEG-4 OBMC not supported (very likely buggy encoder)\n", "Static Sprites not supported\n", "after sprite_width", "after sprite_height", "after sprite_left", "after sprite_top", "%d sprite_warping_points\n", "N-bit not supported\n", "quant precision %d\n", "insufficient data for custom matrix\n", "VOL Header truncated\n", "in complexity estimation part 1", "in complexity estimation part 2", "Invalid Complexity estimation method %d\n", "new pred not supported\n", "reduced resolution VOP not supported\n", "scalability not supported\n", "tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d, low_delay:%d  %s%s%s%s\n", "GOP header invalid\n", "in gop_header", "low_delay flag set incorrectly, clearing it\n", "before time_increment", "time_increment_bits %d is invalid in relation to the current bitstream, this is likely caused by a missing VOL header\n", "time_increment_bits set to %d bits, based on bitstream analysis\n", "before vop_coded", "vop not coded\n", "after width", "after hor_spat_ref", "Header truncated\n", "sprite_brightness_change not supported\n", "static sprite not supported\n", "Error, header damaged or not MPEG-4 header (qscale=0)\n", "Error, header damaged or not MPEG-4 header (f_code=0)\n", "Error, header damaged or not MPEG4 header (b_code=0)\n", "qp:%d fc:%d,%d %s size:%d pro:%d alt:%d top:%d %spel part:%d resync:%d w:%d a:%d rnd:%d vot:%d%s dc:%d ce:%d/%d/%d time:%lld tincr:%d\n", "load backward shape isn't supported\n", "looks like this file was encoded with (divx4/(old)xvid/opendivx) -> forcing low_delay flag\n", "WV1F", "QMP4", "MP4S", "Video uses a non-standard and wasteful way to store B-frames ('packed B-frames'). Consider using the mpeg4_unpack_bframes bitstream filter without encoding but stream copy to fix it.\n", "MPEG4 Video Decoder", "quarter_sample", "1/4 subpel MC", "divx_packed", "divx style packed b frames", "libavcodec/mpeg4video_parser.c", "Failed to parse extradata\n", "libavcodec/mpegaudiodec_template.c", "offset == (sizeof(huff_vlc_tables) / sizeof((huff_vlc_tables)[0]))", "Codec extradata missing or too short.\n", "Invalid channel config number.\n", "big_values too big\n", "invalid block type\n", "switch point in 8khz", "overread, skip %d enddists: %d %d\n", "bits_left=%d\n", "invalid old backstep %d\n", "invalid new backstep %d\n", "s->frame", "discarding ID3 tag\n", "Header missing\n", "incorrect frame size - multiple frames in buffer?\n", "Error while decoding MPEG audio frame.\n", "Packet is too small\n", "Invalid frame header\n", "Frame size smaller than header size\n", "Bad header, discard block\n", "frame channel count exceeds codec channel count\n", "failed to decode channel %d\n", "failed to decode all channels\n", "mp3on4float", "mp3adufloat", "mp3float", "MP3ADU full parser", "libavcodec/mpeg_er.c", "Interlaced error concealment is not fully implemented\n", "libavcodec/mpegpicture.c", "Image too small, temporary buffers cannot function\n", "pic->f->data[0]", "!pic->f->buf[0]", "get_buffer() failed (%d %p)\n", "alloc_frame_buffer() failed (hwaccel private data allocation)\n", "get_buffer() failed (stride changed)\n", "get_buffer() failed (uv stride mismatch)\n", "get_buffer() failed to allocate context scratch buffers.\n", "Error allocating a picture.\n", "Internal error, picture buffer overflow\n", "libavcodec/mpegvideo_enc.c", "warning, clipping %d dct coefficients to %d..%d\n", "s->linesize >= 32", "Warning, QMAT_SHIFT is larger than %d, overflows possible\n", "Invalid pts (%lld) <= last (%lld)\n", "Warning: AVFrame.pts=? trying to guess (%lld)\n", "scale >= 0 && scale <= 3", "warning, too many B-frames in a row\n", "s->pb.buf == avctx->internal->byte_buffer", "reencoding frame due to VBV\n", "s->avctx->rc_max_rate", "stuffing too large\n", "vbv buffer overflow\n", "Internal error, negative bits\n", "vbv_delay < 0xFFFF", "only YUV420 and YUV422 are supported\n", "only YUV420 is supported\n", "keyframe interval too large!, reducing it from %d to %d\n", "Too many B-frames requested, maximum is %d.\n", "intra dc precision must be positive, note some applications use 0 and some 8 as base meaning 8bit, the value must not be smaller than that\n", "intra dc precision too large\n", "Automatically choosing VBV buffer size of %d kbyte\n", "Either both buffer size and max rate or neither must be specified\n", "Warning min_rate > 0 but min_rate != max_rate isn't recommended!\n", "bitrate below min bitrate\n", "bitrate above max bitrate\n", "impossible bitrate constraints, this will fail\n", "VBV buffer too small for bitrate\n", "bitrate tolerance %d too small for bitrate %lld, overriding\n", "Warning vbv_delay will be set to 0xFFFF (=VBR) as the specified vbv buffer is too large for the given bitrate!\n", "4MV not supported by codec\n", "OBMC is only supported with simple mb decision\n", "qpel not supported by codec\n", "B-frames not supported by codec\n", "max b frames must be 0 or positive for mpegvideo based encoders\n", "Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n", "H.263 does not support resolutions above 2048x1152\n", "w/h must be a multiple of 4\n", "MPEG-1 does not support resolutions above 4095x4095\n", "MPEG-2 does not support resolutions above 16383x16383\n", "width and height must be a multiple of 16\n", "width and height must be a multiple of 4\n", "width must be multiple of 2\n", "interlacing not supported by codec\n", "mpeg2 style quantization not supported by codec\n", "CBP RD needs trellis quant\n", "QP RD needs mbd=2\n", "QP RD is no longer compatible with MJPEG or AMV\n", "closed gop with scene change detection are not supported yet, set threshold to 1000000000\n", "low delay forcing is only available for mpeg2\n", "B-frames cannot be used with low delay\n", "non linear quant only supports qmax <= 28 currently\n", "Multiple slices are not supported by this codec\n", "multi threaded encoding not supported by codec\n", "automatic thread number detection not supported by codec, patch welcome\n", "framerate not set\n", "notice: b_frame_strategy only affects the first pass\n", "removing common factors from framerate\n", "qmin and or qmax are invalid, they must be 0 < min <= max\n", "intra_quant_bias = %d inter_quant_bias = %d\n", "timebase %d/%d not supported by MPEG 4 standard, the maximum admitted value for the timebase denominator is %d\n", "Xvid ratecontrol requires libavcodec compiled with Xvid support.\n", "colorspace not supported in jpeg\n", "Cannot reallocate putbit buffer\n", "8*buffer_size > s->size_in_bits", "encoded frame too large\n", "encoded partitioned frame too large\n", "illegal MB type\n", "wmv1 encoder", "msmpeg4", "msmpeg4v3 encoder", "msmpeg4v2 encoder", "H.263p encoder", "Use unlimited motion vectors.", "Use alternative inter VLC.", "obmc", "use overlapped block motion compensation.", "structured_slices", "Write slice start position at every GOB header instead of just GOB number.", "H.263 encoder", "mb_info", "emit macroblock info for RFC 2190 packetization, the parameter value is the maximum payload size", "libavcodec/mpegvideo_motion.c", "MPEG motion vector out of boundary (%d %d)\n", "libavcodec/mpegvideo.c", "VCR2", "failed to allocate context scratch buffers.\n", "decoding to AV_PIX_FMT_NONE is not supported.\n", "too many threads/slices (%d), reducing to %d\n", "s != s1", "!s->picture || s->picture != s1->picture", "Failed to allocate context scratch buffers.\n", "Context scratch buffers could not be allocated due to unknown size.\n", "allocating dummy last picture for B frame\n", "warning: first frame is no keyframe\n", "allocate dummy last picture for field based first keyframe\n", "s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr && s->last_picture_ptr->f->buf[0])", "Adding %d MVs info to frame %d\n", "New frame, type: %c\n", "ref->size >= offset + s->mb_stride * ((f->height+15)/16)", "DCT coeffs of MB at %dx%d:\n", "libavcodec/mpegvideo_parser.c", "Failed to set dimensions\n", "NULL", "libavcodec/options.c", "Tried to copy AVCodecContext %p into already-initialized %p\n", "dest->subtitle_header_size == src->subtitle_header_size", "AVSubtitleRect", "type", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "channel_layout", "sample_rate", "AVCodecContext", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "qpel", "use 1/4-pel motion compensation", "loop", "use loop filter", "qscale", "use fixed qscale", "use gmc", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "pass2", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "error[?] variables will be set during encoding", "truncated", "Input bitstream might be randomly truncated", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "bitexact", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "cgop", "closed GOP", "output_corrupt", "Output even potentially corrupted frames", "allow non-spec-compliant speedup tricks", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "chunks", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "export_mvs", "export motion vectors through frame side data", "skip_manual", "do not skip samples and export skip information as frame side data", "ass_ro_flush_noop", "do not reset ASS ReadOrder field on flush", "set motion estimation method", "zero motion estimation (fastest)", "full", "full motion estimation (slowest)", "EPZS motion estimation", "esa motion estimation (alias for full)", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter", "iter motion estimation", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "cutoff", "set cutoff bandwidth", "frame_size", "frame_number", "delay", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "video quantizer scale blur (VBR)", "minimum video quantizer scale (VBR)", "maximum video quantizer scale (VBR)", "maximum difference between the quantizer scales (VBR)", "set maximum number of B-frames between non-B-frames", "QP factor between P- and B-frames", "strategy to choose between I/P/B-frames", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "work around not autodetected encoder bugs", "autodetect", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "iedge", "how strictly to follow the standards", "very", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "unofficial", "allow unofficial extensions", "experimental", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "err_detect", "set error detection flags", "crccheck", "verify embedded CRCs", "bitstream", "detect bitstream specification deviations", "buffer", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "ignore_err", "ignore errors", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "use MPEG quantizers instead of H.263", "deprecated, use encoder private options instead", "rc_override_count", "maxrate", "maximum bitrate (in bits/s). Used for VBV together with bufsize.", "minrate", "minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "bufsize", "set ratecontrol buffer size (in bits)", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "fast integer", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "deprecated, for compatibility only", "floating point AAN IDCT", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "use strong deblock filter for damaged MBs", "favor_inter", "favor predicting from the previous frame", "bits_per_coded_sample", "prediction method", "aspect", "sample aspect ratio", "debug", "print specific debug info", "pict", "picture info", "rate control", "mb_type", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "green_metadata", "skip", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "bugs", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "buffers", "picture buffer allocations", "thread_ops", "threading operations", "nomc", "skip motion compensation", "vismv", "visualize motion vectors (MVs) (deprecated)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "subcmp", "sub-pel ME compare function", "mbcmp", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "dia_size", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast", "sum of squared errors", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "sum of absolute vertical differences", "sum of squared vertical differences", "noise preserving sum of squared differences", "sum of absolute differences, median predicted", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "sub-pel motion estimation quality", "dtg_active_format", "limit motion vectors range (1023 for DivX player)", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate", "deflate-based coder", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp", "bits", "use fewest bits", "use best rate distortion", "stream_codec_tag", "scene change threshold", "noise reduction", "number of bits which should be loaded into the rc buffer before decoding starts", "error", "set the number of threads", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "frame skip threshold", "frame skip factor", "frame skip exponent", "skipcmp", "frame skip compare function", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "discard no frame", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "nointra", "discard all frames except I frames", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "downscale frames for dynamic B-frame decision", "minimum interval between IDR-frames", "reference frames to consider for motion compensation", "chroma QP offset from luma", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "adjust sensitivity of b_frame_strategy 1", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color primaries", "color_primaries_type", "bt709", "BT.709", "Unspecified", "bt470m", "BT.470 M", "bt470bg", "BT.470 BG", "smpte170m", "SMPTE 170 M", "smpte240m", "SMPTE 240 M", "Film", "bt2020", "BT.2020", "smpte428", "SMPTE 428-1", "smpte428_1", "smpte431", "SMPTE 431-2", "smpte432", "SMPTE 422-1", "jedec-p22", "JEDEC P22", "unspecified", "color_trc", "color transfer characteristics", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log100", "log316", "Log square root", "iec61966-2-4", "IEC 61966-2-4", "bt1361e", "BT.1361", "iec61966-2-1", "IEC 61966-2-1", "bt2020-10", "BT.2020 - 10 bit", "bt2020-12", "BT.2020 - 12 bit", "smpte2084", "SMPTE 2084", "arib-std-b67", "ARIB STD-B67", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "color space", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "BT.2020 NCL", "bt2020c", "BT.2020 CL", "smpte2085", "SMPTE 2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color range", "color_range_type", "MPEG (219*2^(n-8))", "JPEG (2^n-1)", "mpeg", "jpeg", "chroma_sample_location", "chroma sample location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "Top-left", "bottomleft", "Bottom-left", "bottom", "Bottom", "log_level_offset", "set the log level offset", "slices", "set the number of slices, used in parallelized encoding", "select multithreading type", "slice", "frame", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Dialogue", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "sub_text_format", "set decoded text subtitle format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "dump_separator", "set information dump field separator", "codec_whitelist", "List of decoders that are allowed to be used", "pixel_format", "set pixel format", "video_size", "set video size", "max_pixels", "Maximum number of pixels", "aptr", "set app ptr", "libavcodec/parser.c", "index > -0x20000000", "Failed to reallocate parser buffer to %d\n", "libavcodec/pcm-bluray.c", "PCM packet too small\n", "unsupported sample depth (%d)\n", "reserved sample rate (%d)\n", "reserved channel configuration (%d)\n", "libavcodec/pcm-dvd.c", "pcm_dvd_parse_header: header = %02x%02x%02x\n", "PCM DVD unsupported sample depth %i\n", "block_size has changed %d != %d\n", "libavcodec/pcm.c", "Invalid sample_size\n", "Invalid number of channels\n", "codec ids mismatch\n", "Invalid PCM packet, data has size %d but at least a size of %d was expected\n", "PCM channels out of bounds\n", "1.2.3", "libavcodec/pngdec.c", "Invalid PNG signature 0x%08llX.\n", "inflateInit returned error %d\n", "%d bytes left\n", "chunk too big\n", "png: tag=%s length=%u\n", "IHDR after IDAT\n", "Multiple IHDR\n", "Invalid image size\n", "Invalid bit depth\n", "width=%d height=%d depth=%d color_type=%d compression_type=%d filter_type=%d interlace_type=%d\n", "pHYs after IDAT\n", "IDAT without IHDR\n", "unsupported bit depth %d and color type %d\n", "bit depth %d and color type %d with TRNS", "inflate returned error %d\n", "%d undecompressed bytes left in buffer\n", "trns before IHDR\n", "trns after IDAT\n", "Broken tEXt chunk\n", "Broken zTXt chunk\n", "Unknown value in sTER chunk (%d)\n", "IEND without all image\n", "s->bit_depth > 1", "MPNG", "libavcodec/pngenc.c", "Only side-by-side stereo3d flag can be defined within sTER chunk\n", "Only one of 'dpi' or 'dpm' options should be set\n", "bpp || !pred", "Input contains more than one unique palette. APNG does not support multiple palettes.\n", "APNG encoder", "PNG encoder", "Set image resolution (in dots per inch)", "Set image resolution (in dots per meter)", "paeth", "mixed", "libavcodec/pthread_frame.c", "fctx->async_lock", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "av_packet_ref() failed in submit_packet()\n", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "!p->hwaccel_serializing", "A frame threaded decoder did not free the frame on failure. This is a bug, please report it.\n", "Final thread update failed\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "libavcodec/pthread.c", "Application has requested %d threads. Using a thread count greater than %d is not recommended.\n", "libavcodec/pthread_slice.c", "p->thread_count == avctx->thread_count", "libavcodec/ratecontrol.c", "bits<0.9\n", "qp<=0.0\n", "qmin <= qmax", "limiting QP %f -> %f\n", "in:%d out:%d type:%d q:%d itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%lld var:%lld icount:%d skipcount:%d hbits:%d;\n", "rc buffer underflow\n", "max bitrate possibly too small or try trellis with large lmax or increase qmax\n", "stuffing %d bytes\n", "tex^qComp", "Error parsing rc_eq \"%s\"\n", " in:%d ", "picture_number >= 0", "picture_number < rcc->num_entries", " in:%*d out:%*d type:%d q:%f itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%lld var:%lld icount:%d skipcount:%d hbits:%d", "statistics are damaged at line %d, parser out=%d\n", "requested bitrate is too low\n", "filter_size % 2 == 1", "toobig <= 40", "[lavc rc] requested bitrate: %lld bps  expected bitrate: %lld bps\n", "[lavc rc] estimated target average qp: %.3f\n", "[lavc rc] Using all of requested bitrate is not necessary for this video with these parameters.\n", "[lavc rc] Error: bitrate too low for this video with these parameters.\n", "[lavc rc] Error: 2pass curve failed to converge\n", "qblur too large\n", "Input is longer than 2-pass log file\n", "pict_type == rce->new_pict_type", "q > 0.0", "%c qp:%d<%2.1f<%d %d want:%d total:%d comp:%f st_q:%2.2f size:%d var:%lld/%lld br:%lld fps:%d\n", "bits2qp", "qp2bits", "iTex", "pTex", "fCode", "iCount", "mcVar", "avgQP", "qComp", "avgIITex", "avgPITex", "avgPPTex", "avgBPTex", "avgTex", "libavcodec/rawdec.c", "Invalid pixel format.\n", "BottomUp", "yuv2", "width is not set\n", "height is not set\n", "PACKET SIZE: %d, STRIDE: %d\n", "Packet too small (%d)\n", "avctx->bits_per_coded_sample == 1", "Invalid buffer size, packet size %d < expected frame_size %d\n", "Palette size %d is wrong\n", "I420", "b64a", "rawdec", "top field first", "audioresample", "libavcodec/resample.c", "Resampling with input channels greater than %d is unsupported.\n", "Unsupported audio resampling. Allowed output channels for %d input channel%s", "Can't allocate memory for resample context.\n", "Cannot convert %s sample format to s16 sample format\n", "Cannot convert s16 sample format to %s sample format\n", "Could not allocate buffer\n", "Audio sample format conversion failed\n", "ReSampleContext", "libavcodec/rl.c", "9:59:59.99,", "%d:%02d:%02d.%02d,", "./libavutil/mem_internal.h", "val || !min_size", "libavcodec/utils.c", "Failed to set dimensions %d %d\n", "This decoder does not support parameter changes, but PARAM_CHANGE side data was sent to it.\n", "Invalid channel count", "Invalid sample rate", "PARAM_CHANGE side data too small.\n", "Error applying parameter changes.\n", "ignoring invalid SAR: %d/%d\n", "desc->flags & (1 << 4)", "pic->data[*]!=NULL in avcodec_default_get_buffer\n", "Unable to get pixel format descriptor for format %s\n", "default_get_buffer called on pic %p\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "ignoring invalid SAR: %u/%u\n", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "video_get_buffer: image parameters invalid\n", "pic->data[*]!=NULL in get_buffer_internal\n", "frame->data[i]", "Buffer returned by get_buffer2() did not zero unused plane pointers\n", "get_buffer() failed\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "reget_buffer() failed\n", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %lld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %lld)\n", "Failed to allocate packet of size %lld\n", "This encoder requires using the avcodec_send_frame() API.\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "avctx->codec->encode2", "Provided packet is too small, needs to be %d\n", "AVFrame.format is not set\n", "AVFrame.width or height is not set\n", "ret <= 0", "!avctx->internal->buffer_pkt->data || avctx->internal->buffer_pkt->buf", "start_display_time must be 0.\n", "Invalid media type for video\n", "This decoder requires using the avcodec_send_packet() API.\n", "!picture->extended_data || picture->extended_data == picture->data", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "ret <= tmp.size", "skip %d / discard %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "ret <= avpkt->size", "Multiple frames in a packet.\n", "!avctx->internal->buffer_frame->buf[0]", "avctx->internal->buffer_frame->buf[0]", "Invalid media type for subtitles\n", "requesting subtitles recoding without iconv", "Dialogue: ", "Dialogue: %ld,", "%s\r\n", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "unknown_codec", "Codec 0x%x is not in the full list.\n", "[%d]", "--arch=arm --cpu=cortex-a8 --enable-neon --enable-thumb --enable-openssl --enable-gpl --enable-encoder=libx264 --enable-libx264 --enable-gpl --enable-encoder=libfdk_aac --enable-libfdk_aac --enable-small --enable-runtime-cpudetect --disable-gray --enable-stripping --enable-logging --disable-indevs --disable-outdevs --enable-openssl --disable-symver --enable-asm --enable-gpl --enable-version3 --enable-nonfree --enable-zlib --disable-programs --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --disable-avdevice --enable-avcodec --enable-avformat --enable-avutil --enable-swresample --enable-swscale --disable-postproc --enable-avfilter --enable-avresample --enable-pthreads --enable-network --enable-fft --enable-rdft --disable-decoders --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=flv --enable-decoder=h264 --enable-decoder=mpeg4 --enable-decoder='mp3*' --enable-decoder=flac --enable-decoder=rawvideo --enable-decoder='pcm*' --enable-decoder=hevc --enable-decoder=libfdk_aac --enable-decoder=png --enable-decoder=gif --disable-d3d11va --disable-dxva2 --disable-vaapi --disable-vda --disable-vdpau --disable-videotoolbox --disable-encoders --enable-hwaccels --enable-encoder=pcm_s16be --enable-encoder=pcm_s16le --enable-encoder=pcm_u16be --enable-encoder=pcm_u16le --enable-encoder=png --enable-encoder=gif --enable-encoder=libx264 --enable-encoder=libfdk_aac --enable-libfdk_aac --enable-libx264 --disable-muxers --enable-muxer=mp4 --enable-muxer=mov --enable-muxer=flv --enable-muxer=pcm_s16le --enable-muxer=wav --enable-muxer=fifo --enable-muxer=framehash --enable-muxer=h264 --enable-muxer=hevc --enable-muxer=mp3 --enable-muxer=scc --enable-muxer=image2 --enable-muxer=gif --enable-muxer=ipod --disable-demuxers --enable-demuxer=aac --enable-demuxer=concat --enable-demuxer=data --enable-demuxer=flv --enable-demuxer=hls --enable-demuxer=live_flv --enable-demuxer=mov --enable-demuxer=mpegps --enable-demuxer=mpegts --enable-demuxer=mpegvideo --enable-demuxer=mpegtsraw --enable-demuxer=rawvideo --enable-demuxer=wav --enable-demuxer=gif --enable-demuxer=h264 --enable-demuxer=hevc --enable-demuxer=flac --enable-demuxer='pcm*' --enable-demuxer=mp3 --enable-demuxer=image2 --enable-parsers --disable-parser=ac3 --disable-parser=cavsvideo --disable-parser=dca --disable-parser=dirac --disable-parser=dnxhd --disable-parser=dvbsub --disable-parser=dvdsub --disable-parser=flac --disable-parser=mlp --disable-parser=pnm --disable-parser=vc1 --disable-parser=vp3 --disable-parser=vp8 --disable-parser=gsm --disable-parser=rv30 --disable-parser=rv40 --disable-parser=cook --disable-parser=vorbis --disable-parser=adx --disable-parser=dpx --disable-parser=g729 --disable-parser=vp9 --disable-parser=tak --disable-parser=opus --disable-parser=dvd_nav --disable-parser=bmp --enable-bsfs --disable-bsf=text2movsub --disable-bsf=mjpeg2jpeg --disable-bsf=mjpega_dump_header --disable-bsf=mov2textsub --disable-bsf=imx_dump_header --disable-bsf=chomp --disable-bsf=noise --disable-bsf=dump_extradata --disable-bsf=remove_extradata --disable-protocols --enable-protocol=async --enable-protocol=rtmp --enable-protocol=rtmpt --enable-protocol=file --enable-protocol=md5 --enable-protocol=pipe --enable-protocol=hls --enable-protocol=http --enable-protocol=hls --enable-protocol=hlsc --enable-protocol=httpproxy --enable-protocol=md5 --enable-protocol=tcp --enable-protocol=udp --enable-protocol=clfp --enable-protocol=cnhp --enable-protocol=cfhp --enable-protocol=crhp --enable-protocol=subfile --enable-protocol=prompeg --disable-devices --enable-filters --enable-decoder=h263 --enable-decoder=mpeg4 --enable-decoder=amrnb --enable-decoder=amrwb --enable-encoder=mjpeg --disable-iconv --disable-audiotoolbox --disable-videotoolbox --enable-libwebp --enable-libwebp_extra_static --enable-encoder=libwebp --enable-muxer=webp --prefix=/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/ffmpeg-armv7a/output --cross-prefix=arm-linux-androideabi- --enable-cross-compile --target-os=android --enable-pic --enable-asm --enable-inline-asm --enable-optimizations --enable-debug --enable-small --extra-cflags='-O3 -Wall -pipe -std=c99 -ffast-math -fstrict-aliasing -Werror=strict-aliasing -Wno-psabi -Wa,--noexecstack -DANDROID -DNDEBUG -I/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/openssl-armv7a/output/include -I/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/x264-armv7a/output/include -I/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/fdk-aac-armv7a/output/include -I/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/libwebp-armv7a/output/include -march=armv7-a -mcpu=cortex-a8 -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb' --extra-ldflags=' -L/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/openssl-armv7a/output/lib -lssl -lcrypto -L/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/x264-armv7a/output/lib -lx264 -L/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/fdk-aac-armv7a/output/lib -lfdk-aac -L/data00/tiger/android/jenkins2/workspace/TTFFmpeg/android/contrib/build/libwebp-armv7a/output/lib -lwebp -lwebpmux -limagedec -limageenc -lwebpdecoder_static -limageio_util -lcpufeatures -Wl,--fix-cortex-a8'", "libavcodec license: nonfree and unredistributable", "top first", "bottom first", "top coded first (swapped)", "bottom coded first (swapped)", "%s: %s", " (%s)", ", %d reference frame%s", " (%s / 0x%04X)", "%d bpc, ", "%s, ", "%s/%s/%s, ", "%dx%d", " (%dx%d)", " [SAR %d:%d DAR %d:%d]", ", %d/%d", ", q=%d-%d", ", Closed Captions", ", lossless", "%d Hz, ", ", %s", " (%d bit)", ", delay %d", ", padding %d", ", %dx%d", ", pass 1", ", pass 2", ", %lld kb/s", ", max. %lld kb/s", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "n >= 1", "Format returned from get_buffer() does not match the format of provided AVHWFramesContext\n", "Ignoring experimental hwaccel: %s\n", "choices[n] != AV_PIX_FMT_NONE", "Could not find an AVHWAccel for the pixel format: %s", "ff_avcodec_locked", "Insufficient thread locking. At least %d threads are calling avcodec_open2() at the same time right now.\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "!dst->progress", "encoder", "decoder", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Codec (%s) not on whitelist '%s'\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The maximum value for lowres supported by the decoder is %d\n", "The 'vismv' option is deprecated, see the codecview filter instead.\n", "The encoder timebase is not set.\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Specified sample rate %d is not supported\n", "Channel layout not specified\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "Specified number of channels %d is not supported\n", "Specified bit depth %d not possible with the specified pixel formats depth %d\n", "dimensions not set\n", "Bitrate %lld is extremely low, maybe you mean %lldk\n", "ticks_per_frame %d too large for the timebase %d/%d.", "Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n", "Mismatching AVCodecContext.sw_pix_fmt (%s) and AVHWFramesContext.sw_format (%s)\n", "gray decoding requested but not enabled at configuration time\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "*(const AVClass **)avctx->priv_data == codec->priv_class", "Specified channel layout '%s' is not supported\n", "p <= end", "libavcodec/vorbis_parser.c", "Invalid packet\n", "Invalid mode in packet\n", "Extradata corrupt.\n", "Id header is too short\n", "Wrong packet type in Id header\n", "Invalid packet signature in Id header\n", "Invalid framing bit in Id header\n", "Setup header is too short\n", "Wrong packet type in Setup header\n", "Invalid packet signature in Setup header\n", "Out of memory\n", "Invalid Setup header\n", "%d modes (either a false positive or a sample from an unknown encoder)", "Unsupported mode count: %d\n", "Vorbis parser", "libavcodec/vp9_superframe_bsf.c", "Mixing of superframe syntax and naked VP9 frames not supported", "Too many invisible frames", "s->n_cache > 0", "ptr == &out->data[out->size]", "vp9_superframe", "libavfilter/aeval.c", "Channels expressions list is empty\n", "aeval", "Mismatch between the specified number of channel expressions '%d' and the number of expected output channels '%d' for the specified channel layout\n", "same", "Invalid number of channels '%d' provided\n", "sample_rate:%d chlayout:%s duration:%lld\n", "exprs", "set the '|'-separated list of channels expressions", "set channel layout", "aevalsrc", "nb_samples", "set the number of samples per requested frame", "set the sample rate", "44100", "duration", "set audio duration", "nb_in_channels", "nb_out_channels", "acrusher", "level_in", "set level in", "level_out", "set level out", "set bit reduction", "set mix", "mode", "set mode", "logarithmic", "set DC", "set anti-aliasing", "samples", "set sample reduction", "enable LFO", "lforange", "set LFO depth", "lforate", "set LFO rate", "%d%c", "libavfilter/af_adelay.c", "Delay must be non negative number.\n", "At least one delay >0 must be specified.\n", "adelay", "delays", "set list of delays for each channel", "libavfilter/af_aecho.c", "Nothing to echo - missing delay samples.\n", "out_gain %f can cause saturation of output\n", "Missing delays and/or decays.\n", "Number of delays %d differs from number of decays %d.\n", "At least one decay & delay must be set.\n", "delay[%d]: %f is out of allowed range: (0, 90000]\n", "decay[%d]: %f is out of allowed range: (0, 1]\n", "nb_echoes:%d\n", "aecho", "in_gain", "set signal input gain", "out_gain", "set signal output gain", "set list of signal delays", "1000", "decays", "set list of signal decays", "aemphasis", "set input gain", "set output gain", "set filter mode", "reproduction", "production", "set filter type", "Columbia", "BSI (78RPM)", "riaa", "RIAA", "Compact Disc (CD)", "50fm", "75fm", "50kf", "75kf", "libavfilter/af_afade.c", "Inputs must have the same sample rate %d for in0 vs %d for in1\n", "acrossfade", "crossfade0", "crossfade1", "set number of samples for cross fade duration", "set cross fade duration", "overlap", "overlap 1st stream end with 2nd stream start", "curve1", "set fade curve type for 1st stream", "curve", "linear slope", "qsin", "quarter of sine wave", "esin", "exponential sine wave", "hsin", "half of sine wave", "ipar", "inverted parabola", "quadratic", "cubic", "square root", "cubic root", "parabola", "exponential", "iqsin", "inverted quarter of sine wave", "ihsin", "inverted half of sine wave", "dese", "double-exponential seat", "desi", "double-exponential sigmoid", "curve2", "set fade curve type for 2nd stream", "afade", "set the fade direction", "fade-in", "fade-out", "start_sample", "set number of first sample to start fading", "set number of samples for fade duration", "start_time", "set time to start fading", "set fade duration", "set fade curve type", "afftfilt", "real", "set channels real expressions", "imag", "set channels imaginary expressions", "win_size", "set window size", "w128", "w256", "w512", "w1024", "w2048", "w4096", "w8192", "w16384", "w32768", "w65536", "w131072", "win_func", "set window function", "rect", "Rectangular", "bartlett", "Bartlett", "hann", "Hann", "hanning", "Hanning", "hamming", "Hamming", "sine", "Sine", "set window overlap", "libavfilter/af_aformat.c", "This syntax is deprecated, use '|' to separate %s.\n", "sample format", "Error parsing sample format: %s.\n", "sample rate", "Error parsing sample rate: %s.\n", "channel layout", "Error parsing channel layout: %s.\n", "aformat", "sample_fmts", "A '|'-separated list of sample formats.", "sample_rates", "A '|'-separated list of sample rates.", "channel_layouts", "A '|'-separated list of channel layouts.", "libavfilter/af_agate.c", "No channel layout for input 1\n", "i < 2", "sidechaingate", "sidechain", "agate", "set input level", "range", "set max gain reduction", "threshold", "set threshold", "ratio", "set ratio", "attack", "set attack", "release", "set release", "makeup", "set makeup gain", "knee", "set knee", "detection", "set detection", "peak", "link", "set link", "average", "maximum", "level_sc", "set sidechain gain", "alimiter", "set output level", "limit", "set limit", "enable asc", "asc_level", "set asc level", "auto level", "libavfilter/af_amerge.c", "No channel layout for input %d\n", "Using \"%s\" for input %d\n", "Too many channels (max %d)\n", "Input channel layouts overlap: output layout will be determined by the number of distinct input channels\n", "in%d", "Inputs must have the same sample rate %d for in%d vs %d\n", "%sin%d:", " -> out:", "libavfilter/bufferqueue.h", "queue->available", "Buffer queue overflow, dropping.\n", "amerge", "inputs", "specify the number of inputs", "input%d", "libavfilter/af_amix.c", "inputs:%d fmt:%s srate:%d cl:%s\n", "info", "unknown input link\n", "frame_list->end", "s->nb_inputs > 1", "s->frame_list->nb_frames > 0", "amix", "Number of inputs.", "How to determine the end-of-stream.", "longest", "Duration of longest input.", "shortest", "Duration of shortest input.", "first", "Duration of first input.", "dropout_transition", "Transition time, in seconds, for volume renormalization when an input stream ends.", "change", "%d|f=%lf|w=%lf|g=%lf", "c%d f=%lf w=%lf g=%lf t=%d", "c%d f=%lf w=%lf g=%lf", "out0", "out1", "anequalizer", "params", "curves", "draw frequency response curves", "size", "hd720", "mgain", "set max gain", "fscale", "set frequency scale", "colors", "set channels curves colors", "red|green|blue|yellow|orange|lime|pink|magenta|brown", "anull", "libavfilter/af_apad.c", "padding n_out:%d pad_len_left:%lld\n", "outsamplesref->sample_rate == outlink->sample_rate", "outsamplesref->nb_samples == n_out", "n_out:%d whole_len_left:%lld\n", "Both whole and pad length are set, this is not possible\n", "apad", "packet_size", "set silence packet size", "pad_len", "set number of samples of silence to add", "whole_len", "set minimum target number of samples in the audio stream", "libavfilter/af_aphaser.c", "channels > 0", "in_gain may cause clipping\n", "out_gain may cause clipping\n", "delay is too small\n", "aphaser", "set delay in milliseconds", "decay", "set decay", "speed", "set modulation speed", "set modulation type", "triangular", "sinusoidal", "libavfilter/af_apulsator.c", "apulsator", "triangle", "square", "sawup", "sawdown", "amount", "set modulation", "offset_l", "set offset L", "offset_r", "set offset R", "set pulse width", "timing", "set timing", "set BPM", "set ms", "set frequency", "libavfilter/af_aresample.c", "outlink->sample_rate == out_rate", "outlink->channel_layout == out_layout || !outlink->channel_layout", "outlink->format == out_format", "ch:%d chl:%s fmt:%s r:%dHz -> ch:%d chl:%s fmt:%s r:%dHz\n", "aresample", "libavfilter/af_asetnsamples.c", "nb_out_samples:%d pad:%d\n", "No space for %d samples, stretching audio fifo\n", "Stretching audio fifo failed, discarded %d samples\n", "asetnsamples", "nb_out_samples", "set the number of per-frame output samples", "pad last frame with zeros", "libavfilter/af_asetrate.c", "Time base is inaccurate\n", "asetrate", "libavfilter/af_ashowinfo.c", "%s - ", "NOPTS", "%lld", "%.6g", "n:%lld pts:%s pts_time:%s pos:%lld fmt:%s channels:%d chlayout:%s rate:%d nb_samples:%d checksum:%08X ", "plane_checksums: [ ", "%08X ", "  side data - ", "matrix encoding: ", "invalid data", "Dolby Surround", "Dolby Pro Logic II", "Dolby Pro Logic IIx", "Dolby Pro Logic IIz", "Dolby EX", "Dolby Headphone", "downmix: ", "preferred downmix type - ", "Lo/Ro", "Lt/Rt", " Mix levels: center %f (%f ltrt) - surround %f (%f ltrt) - lfe %f", "replaygain: ", "track gain", "track peak", "album gain", "album peak", "audio service type: ", "unknown side data type: %d, size %d bytes", "ashowinfo", "libavfilter/af_astats.c", "Channel: %d\n", "DC offset: %f\n", "Min level: %f\n", "Max level: %f\n", "Min difference: %f\n", "Max difference: %f\n", "Mean difference: %f\n", "Peak level dB: %f\n", "RMS level dB: %f\n", "RMS peak dB: %f\n", "RMS trough dB: %f\n", "Crest factor: %f\n", "Flat factor: %f\n", "Peak count: %lld\n", "Bit depth: %u/%u\n", "Overall\n", "Peak count: %f\n", "Number of samples: %lld\n", "lavfi.astats.%d.%s", "lavfi.astats.%s", "DC_offset", "Min_level", "Max_level", "Min_difference", "Max_difference", "Mean_difference", "Peak_level", "RMS_level", "RMS_peak", "RMS_trough", "Crest_factor", "Flat_factor", "Peak_count", "Bit_depth", "Bit_depth2", "Overall.DC_offset", "Overall.Min_level", "Overall.Max_level", "Overall.Min_difference", "Overall.Max_difference", "Overall.Mean_difference", "Overall.Peak_level", "Overall.RMS_level", "Overall.RMS_peak", "Overall.RMS_trough", "Overall.Flat_factor", "Overall.Peak_count", "Overall.Bit_depth", "Overall.Bit_depth2", "Overall.Number_of_samples", "astats", "length", "set the window length", "metadata", "inject metadata in the filtergraph", "reset", "recalculate stats after this many frames", "tempo", "libavfilter/af_atempo.c", "Invalid tempo value '%s'\n", "Tempo value %f exceeds [0.5, 2.0] range\n", "start_here <= stop_here && frag->position[1] <= start_here && overlap <= frag->nsamples", "read_size <= atempo->ring", "atempo->position[0] <= stop_here", "zeros != nsamples", "nsamples <= zeros + na + nb", "start_here <= stop_here && frag->position[1] <= start_here", "pot <= atempo->window", "atempo", "set tempo scale factor", "libavfilter/af_biquads.c", "Invalid frequency %f and/or width %f <= 0\n", "Invalid frequency %f. Frequency must be less than half the sample-rate %d.\n", "clipping %d times. Please reduce gain.\n", "biquad", "allpass", "frequency", "set central frequency", "width_type", "set filter-width type", "Q-Factor", "octave", "slope", "set filter-width", "highpass", "set width", "poles", "set number of poles", "lowpass", "bandreject", "set band-width", "bandpass", "use constant skirt gain", "treble", "set shelf transition steep", "gain", "set gain", "bass", "equalizer", "libavfilter/af_channelmap.c", "input channel '%s' not available from input layout '%s'\n", "input channel #%d not available from input layout '%s'\n", "%d%n", "This syntax is deprecated, use '|' to separate the mappings.\n", "Too many channels mapped: '%d'.\n", "Error parsing channel layout: '%s'.\n", "Output channel layout '%s' does not match the list of channel mapped: '%s'.\n", "Output channel layout %s does not match the number of channels mapped %d.\n", "Output channel layout is not set and cannot be guessed from the maps.\n", "channelmap", "A comma-separated list of input channel numbers in output order.", "Output channel layout.", "libavfilter/af_channelsplit.c", "Error parsing channel layout '%s'.\n", "channelsplit", "Input channel layout.", "stereo", "libavfilter/af_chorus.c", "Both delays & decays & speeds & depths must be set.\n", "Number of delays & decays & speeds & depths given must be same.\n", "At least one delay & decay & speed & depth must be set.\n", "output gain can cause saturation or clipping of output\n", "chorus", "set delays", "set decays", "speeds", "set speeds", "depths", "set depths", "libavfilter/af_compand.c", "Invalid number of channels: %d\n", "Number of attacks/decays bigger than number of channels.\n", "Number of attacks %d differs from number of decays %d.\n", "%lf/%lf", "Invalid and/or missing input/output value.\n", "Transfer function input values must be increasing.\n", "%d: x=%f y=%f\n", "compand", "attacks", "set time over which increase of volume is determined", "set time over which decrease of volume is determined", "points", "set points of transfer function", "-70/-70|-60/-20", "soft-knee", "set soft-knee", "volume", "set initial volume", "set delay for samples before sending them to volume adjuster", "compensationdelay", "set mm distance", "set cm distance", "set meter distance", "set dry amount", "set wet amount", "temp", "crystalizer", "set intensity", "enable clipping", "dcshift", "shift", "set DC shift", "limitergain", "set limiter gain", "libavfilter/af_dynaudnorm.c", "filter size %d is invalid. Must be an odd value.\n", "./libavfilter/bufferqueue.h", "cqueue_size(s->gain_history_original[channel]) == s->filter_size", "cqueue_size(s->gain_history_minimum[channel]) == s->filter_size", "frame len %d\n", "dynaudnorm", "set the frame length in msec", "set the filter size", "set the peak value", "set the max amplification", "set the target RMS", "set channel coupling", "set DC correction", "set alternative boundary mode", "set the compress factor", "earwax", "extrastereo", "set the difference coefficient", "libavfilter/af_firequalizer.c", "entry table overflow.\n", "unsorted frequency (%g, %g).\n", "entry", "nb_gain_entry = %d.\n", "dumping failed.\n", "filter kernel contains nan or infinity.\n", "# time[%d] (time amplitude)\n", "%15.10f %15.10f\n", "\n\n# freq[%d] (frequency desired_gain actual_gain)\n", "%17.10f %17.10f %17.10f\n", "equal gain, do not rebuild.\n", "gain_entry", "equal gain_entry, do not rebuild.\n", "sample_rate = %d, channels = %d, analysis_rdft_len = %d, rdft_len = %d, fir_len = %d, nsamples_max = %d.\n", "too large delay, please decrease it.\n", "too small accuracy, please increase it.\n", "gain_interpolate", "cubic_interpolate", "firequalizer", "chid", "chlayout", "set gain curve", "gain_interpolate(f)", "set gain entry", "set delay", "accuracy", "set accuracy", "wfunc", "rectangular", "rectangular window", "hann window", "hamming window", "blackman", "blackman window", "nuttall3", "3-term nuttall window", "mnuttall3", "minimum 3-term nuttall window", "nuttall", "nuttall window", "bnuttall", "blackman-nuttall window", "bharris", "blackman-harris window", "tukey", "tukey window", "fixed", "set fixed frame samples", "multi", "set multi channels mode", "zero_phase", "set zero phase mode", "scale", "set gain scale", "linlin", "linear-freq linear-gain", "linlog", "linear-freq logarithmic-gain", "loglin", "logarithmic-freq linear-gain", "loglog", "logarithmic-freq logarithmic-gain", "dumpfile", "set dump file", "dumpscale", "set dump scale", "fft2", "set 2-channels fft", "flanger", "base delay in milliseconds", "depth", "added swept delay in milliseconds", "regen", "percentage regeneration (delayed signal feedback)", "percentage of delayed signal mixed with original", "sweeps per second (Hz)", "shape", "swept wave shape", "phase", "swept wave percentage phase-shift for multi-channel", "interp", "delay-line interpolation", "itype", "detected", "not detected", " (try -v verbose)", " (bad_config)", "libavfilter/af_hdcd.c", "Channel %d: counter A: %d, B: %d, C: %d\n", "Channel %d: pe: %d, tf: %d, almost_A: %d, checkfail_B: %d, unmatched_C: %d, cdt_expired: %d\n", "Channel %d: tg %0.1f: %d\n", "Packets: type: %s, total: %d\n", "HDCD detected: yes, peak_extend: %s, max_gain_adj: %0.1f dB, transient_filter: %s, detectable errors: %d%s%s\n", "HDCD detected: no%s\n", "disabled", "enabled", "process stereo channels together", "process each channel separately", "Auto-convert: %s\n", "bits_per_sample %d does not fit into sample format %s, falling back to 16\n", "Looking for %d-bit HDCD in sample format %s\n", "20 and 24-bit HDCD decoding is experimental\n", "HDCD decoding for sample rates other than 44100 is experimental\n", "CDT period: %dms (%u samples @44100Hz)\n", "process_stereo disabled (channels = %d)\n", "Process mode: %s\n", "Force PE: %s\n", "Analyze mode: [%d] %s\n", "samples == samples_end", "asample <= max_asample", "Disabling automatic format conversion.\n", "hdcd error: Control A almost: 0x%02x near %d\n", "hdcd error: Control B check failed: 0x%04x (0x%02x vs 0x%02x) near %d\n", "hdcd error: Unmatched target_gain near %d: tg0: %0.1f, tg1: %0.1f, lvg: %0.1f\n", "samples + lead * stride + stride * (count - lead) <= samples_end", "samples + envelope_run * stride <= samples_end", "samples + lead * stride <= samples_end", "hdcd", "disable_autoconvert", "Disable any format conversion or resampling in the filter graph.", "process_stereo", "Process stereo channels together. Only apply target_gain when both channels match.", "cdt_ms", "Code detect timer period in ms.", "force_pe", "Always extend peaks above -3dBFS even when PE is not signaled.", "analyze_mode", "Replace audio with solid tone and signal some processing aspect in the amplitude.", "gain adjustment level at each sample", "samples where peak extend occurs", "samples where the code detect timer is active", "samples where the target gain does not match between channels", "Valid bits per sample (location of the true LSB).", "16-bit (in s32 or s16)", "20-bit (in s32)", "24-bit (in s32)", "never enabled", "enabled intermittently", "enabled permanently", "libavfilter/af_join.c", "Missing separator '-' in channel map '%s'\n", "Invalid output channel: %s.\n", "Channel map describes more than one output channel.\n", "Output channel '%s' is not present in requested channel layout.\n", "Multiple maps for output channel '%s'.\n", "Invalid input stream index: %d.\n", "Invalid input channel: %s.\n", "Channel map describes more than one input channel.\n", "Requested channel %s is not present in input stream #%d.\n", "Could not find input channel for output channel '%s'.\n", "mappings: ", "%d.%s => %s ", "No channels are used from input stream %d.\n", "i < ctx->nb_inputs", "!s->input_frames[i]", "join", "Number of input streams.", "Channel layout of the output stream.", "A comma-separated list of channels maps in the format 'input_stream.input_channel-output_channel.", "dynamic", "Dynamic", "libavfilter/af_loudnorm.c", "\n{\n\t\"input_i\" : \"%.2f\",\n\t\"input_tp\" : \"%.2f\",\n\t\"input_lra\" : \"%.2f\",\n\t\"input_thresh\" : \"%.2f\",\n\t\"output_i\" : \"%.2f\",\n\t\"output_tp\" : \"%+.2f\",\n\t\"output_lra\" : \"%.2f\",\n\t\"output_thresh\" : \"%.2f\",\n\t\"normalization_type\" : \"%s\",\n\t\"target_offset\" : \"%.2f\"\n}\n", "\nInput Integrated:   %+6.1f LUFS\nInput True Peak:    %+6.1f dBTP\nInput LRA:          %6.1f LU\nInput Threshold:    %+6.1f LUFS\n\nOutput Integrated:  %+6.1f LUFS\nOutput True Peak:   %+6.1f dBTP\nOutput LRA:         %6.1f LU\nOutput Threshold:   %+6.1f LUFS\n\nNormalization Type:   %s\nTarget Offset:      %+6.1f LU\n", "loudnorm", "set integrated loudness target", "set loudness range target", "set maximum true peak", "measured_I", "measured IL of input file", "measured_i", "measured_LRA", "measured LRA of input file", "measured_lra", "measured_TP", "measured true peak of input file", "measured_tp", "measured_thresh", "measured threshold of input file", "offset", "set offset gain", "normalize linearly if possible", "dual_mono", "treat mono input as dual-mono", "print_format", "set print format for stats", "json", "summary", "%7[A-Z]%n", "c%d%n", "libavfilter/af_pan.c", "pan filter needs a channel layout and a set of channel definitions as parameter\n", "Expected out channel name, got \"%.8s\"\n", "Channel \"%.8s\" does not exist in the chosen layout\n", "Invalid out channel name \"%.8s\"\n", "Syntax error after channel name in \"%.8s\"\n", "%lf%n *%n", "Expected in channel name, got \"%.8s\"\n", "Can not mix named and numbered channels\n", "Syntax error near \"%.8s\"\n", "af_pan supports a maximum of %d channels. Feel free to ask for a higher limit.\n", "Degenerate coefficients while renormalizing\n", "%s%.3g i%d", "o%d = %s\n", "Pure channel mapping detected:", "args", "libavfilter/af_replaygain.c", "track_gain = %+.2f dB\n", "track_peak = %.6f\n", "i < (sizeof(freqinfos) / sizeof((freqinfos)[0]))", "replaygain", "in_channel_layout", "out_channel_layout", "in_sample_fmt", "out_sample_fmt", "in_sample_rate", "out_sample_rate", "libavfilter/af_resample.c", "lavr option: %s=%s\n", "force_resampling", "fmt:%s srate:%d cl:%s -> fmt:%s srate:%d cl:%s\n", "!avresample_available(s->avr)", "First timestamp is missing, assuming 0.\n", "resample", "libavfilter/af_sidechaincompress.c", "acompressor", "sidechaincompress", "set make up gain", "set link type", "lavfi.silence_start", "libavfilter/af_silencedetect.c", "silence_start: %s\n", "lavfi.silence_end", "lavfi.silence_duration", "silence_end: %s | silence_duration: %s\n", "silencedetect", "set noise tolerance", "set minimum duration in seconds", "silenceremove", "start_periods", "start_duration", "start_threshold", "stop_periods", "stop_duration", "stop_threshold", "leave_silence", "window", "libavfilter/af_stereotools.c", "sample rate is too small\n", "stereotools", "balance_in", "set balance in", "balance_out", "set balance out", "softclip", "enable softclip", "mutel", "mute L", "muter", "mute R", "phasel", "phase L", "phaser", "phase R", "set stereo mode", "lr>lr", "lr>ms", "ms>lr", "lr>ll", "lr>rr", "lr>l+r", "lr>rl", "slev", "set side level", "sbal", "set side balance", "mlev", "set middle level", "mpan", "set middle pan", "base", "set stereo base", "sclevel", "set S/C level", "set stereo phase", "stereowiden", "set delay time", "feedback", "set feedback gain", "crossfeed", "set cross feed", "drymix", "set dry-mix", "tremolo", "set frequency in hertz", "set depth as percentage", "vibrato", "libavfilter/af_volumedetect.c", "n_samples: %lld\n", "power <= 0x8000 * 0x8000", "mean_volume: %.1f dB\n", "max_volume: %.1f dB\n", "histogram_%ddb: %lld\n", "volumedetect", "libavfilter/af_volume.c", "Error when evaluating the volume expression '%s'\n", "n:%f t:%f pts:%f precision:%s ", "volume_i:%d/255 ", "volume:%f volume_dB:%f\n", "tb:%f sample_rate:%f nb_channels:%f\n", "Both ReplayGain gain values are unknown.\n", "Using gain %f dB from replaygain side data.\n", "set volume adjustment expression", "precision", "select mathematical precision", "select 8-bit fixed-point", "float", "select 32-bit floating-point", "double", "select 64-bit floating-point", "eval", "specify when to evaluate expressions", "once", "eval volume expression once", "eval volume expression per-frame", "Apply replaygain side data when present", "drop", "replaygain side data is dropped", "ignore", "replaygain side data is ignored", "track", "track gain is preferred", "album", "album gain is preferred", "replaygain_preamp", "Apply replaygain pre-amplification", "replaygain_noclip", "Apply replaygain clipping prevention", "nb_channels", "nb_consumed_samples", "startpts", "startt", "anullsink", "anoisesrc", "set sample rate", "amplitude", "set amplitude", "set duration", "color", "set noise color", "colour", "white", "pink", "brown", "seed", "set random seed", "libavfilter/asrc_anullsrc.c", "sample_rate:%d channel_layout:'%s' nb_samples:%d\n", "anullsrc", "set channel_layout", "libavfilter/asrc_sine.c", "nb samples expression evaluated to %d, defaulting to 1024\n", "set the sine frequency", "beep_factor", "set the beep frequency factor", "set the audio duration", "samples_per_frame", "set the number of samples per frame", "1024", "libavfilter/audio.c", "channels == av_get_channel_layout_nb_channels(link->channel_layout) || !av_get_channel_layout_nb_channels(link->channel_layout)", "abitscope", "rate", "set video rate", "1024x256", "set channels colors", "libavfilter/avf_ahistogram.c", "ahistogram", "dmode", "set method to display channels", "single", "all channels use single histogram", "separate", "each channel have own histogram", "set display scale", "sqrt", "cbrt", "rlog", "reverse logarithmic", "ascale", "set amplitude scale", "acount", "how much frames to accumulate", "rheight", "set histogram ratio of window height", "slide", "set sonogram sliding", "replace", "replace old rows with new", "scroll", "scroll from top to bottom", "lavfi.aphasemeter.phase", "aphasemeter", "800x400", "set red contrast", "set green contrast", "set blue contrast", "set median phase color", "video", "set video output", "avectorscope", "lissajous", "lissajous_xy", "polar", "400x400", "set alpha contrast", "set red fade", "set green fade", "set blue fade", "set alpha fade", "zoom", "set zoom factor", "draw", "set draw mode", "line", "set amplitude scale mode", "cube root", "libavfilter/avf_concat.c", "Input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding output link %s parameters (%dx%d, SAR %d:%d)\n", "EOF on %s, %d streams left in segment.\n", "Frame after EOF on input %s\n", "in%d:%c%d", "out:%c%d", "Segment finished at pts=%lld\n", "concat", "specify the number of segments", "specify the number of video streams", "specify the number of audio streams", "unsafe", "enable unsafe mode", "libavfilter/avfiltergraph.c", "index >= 0", "picking %s out of %d ref:%s alpha:%d\n", "picking %s out of %d ref:%s\n", "Cannot select sample rate for the link between filters %s and %s.\n", "Cannot select channel layout for the link between filters %s and %s.\n", "Unknown channel layouts not supported, try specifying a channel layout using 'aformat=channel_layouts=something'.\n", "All layouts set on non-empty list\n", "All counts without all layouts\n", "Query format failed for '%s': %s\n", "Error initializing threading.\n", "The filters '%s' and '%s' do not have a common format and automatic conversion is disabled.\n", "'scale' filter not present, cannot convert pixel formats.\n", "auto_scaler_%d", "'aresample' filter not present, cannot convert audio formats.\n", "auto_resampler_%d", "inlink-> in_formats->refcount > 0", "inlink->out_formats->refcount > 0", "outlink-> in_formats->refcount > 0", "outlink->out_formats->refcount > 0", "inlink-> in_samplerates->refcount > 0", "inlink->out_samplerates->refcount > 0", "outlink-> in_samplerates->refcount > 0", "outlink->out_samplerates->refcount > 0", "inlink-> in_channel_layouts->refcount > 0", "inlink->out_channel_layouts->refcount > 0", "outlink-> in_channel_layouts->refcount > 0", "outlink->out_channel_layouts->refcount > 0", "Impossible to convert between the formats supported by the filter '%s' and the filter '%s'\n", "query_formats: %d queried, %d merged, %d already done, %d delayed\n", "%s%s", "The following filters could not choose their formats: %s\nConsider inserting the (a)format filter near their input or output.\n", "Input pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any source\n", "Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n", "fifo", "afifo", "auto_fifo_%d", "query_formats not finished\n", "best_idx >= 0", "diff < 2147483647", "n == sink_links_count", "graph->nb_filters", "EOF on sink link %s:%s.\n", "AVFilterGraph", "Allowed thread types", "Maximum number of threads", "scale_sws_opts", "default scale filter options", "aresample_swr_opts", "default aresample filter options", "libavfilter/avfilter.c", "Timeline ('enable' option) not supported with filter '%s'\n", "Error when evaluating the expression '%s' for enable\n", "No option name near '%s'\n", "Unable to parse '%s': %s\n", "Setting '%s' to value '%s'\n", "Option '%s' not found\n", "libavfilter license: nonfree and unredistributable", "src->graph", "dst->graph", "src->graph == dst->graph", "Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\n", "!link->status_in", "auto-inserting filter '%s' between the filter '%s' and the filter '%s'\n", "Not all input and output are properly linked (%d).\n", "circular filter chain detected\n", "Source filters and filters with more than one input must set config_props() callbacks on all outputs\n", "Failed to configure output pad on %s\n", "Video source filters must set their output link's width and height\n", "!link->hw_frames_ctx && \"should not be set by non-hwframe-aware filter\"", "Failed to configure input pad on %s\n", "!link->frame_wanted_out", "!link->status_out", "ping", "pong from:%s %s\n", "enable", "(filter->flags & ((1 << 16) | (1 << 17))) != ((1 << 16) | (1 << 17))", "Error applying generic filter options.\n", "Error applying options to the filter.\n", "This filter does not take any options, but options were provided: %s.\n", "noformat", "frei0r", "frei0r_src", "This syntax is deprecated. Use '|' to separate the list items.\n", "compat: called with args=[%s]\n", "No such option: %s.\n", "Format change is not supported\n", "Channel count change is not supported\n", "Channel layout change is not supported\n", "Sample rate change is not supported\n", "Copying data in avfilter.\n", "!\"reached\"", "Processing command time:%f command:%s arg:%s\n", "AVFilter", "set enable expression", "Allowed number of threads", "libavfilter/avf_showcqt.c", "fft_time         = %16.3f s.\n", "cqt_time         = %16.3f s.\n", "process_cqt_time = %16.3f s.\n", "update_sono_time = %16.3f s.\n", "alloc_time       = %16.3f s.\n", "bar_time         = %16.3f s.\n", "axis_time        = %16.3f s.\n", "sono_time        = %16.3f s.\n", "plot_time        = %16.3f s.\n", "fullhd option is deprecated, use size/s option instead.\n", "fullhd set to 0 but with custom dimension.\n", "invalid dimension.\n", "unsupported colorspace, setting it to unspecified.\n", " %f | %f | %f | %f | %f | %f %1s", "invalid cscheme.\n", "[%d] %s is too low (%g), setting it to %g.\n", "[%d] %s it too high (%g), setting it to %g.\n", "changing pts from %lld (%.3f) to %lld (%.3f).\n", "freetype is not available, ignoring fontfile option.\n", "fontconfig is not available, ignoring font option.\n", "EF G A BC D ", "font axis rendering is not implemented in non-default frequency range, please use axisfile option instead.\n", "video: %dx%d %s %d/%d fps, bar_h = %d, axis_h = %d, sono_h = %d.\n", "sono_v", "bar_v", "fft_len = %d, cqt_len = %d.\n", "tlength", "nb_cqt_coeffs = %d.\n", "loading axis image failed, fallback to font rendering.\n", "loading axis font failed, disable text drawing.\n", "audio: %d Hz, step = %d + %d/%d.\n", "fractional step.\n", "audio: %d Hz, step = %d.\n", "midi", "timeclamp", "freq", "a_weighting", "b_weighting", "c_weighting", "showcqt", "1920x1080", "bar_h", "set bargraph height", "axis_h", "set axis height", "sono_h", "set sonogram height", "fullhd", "set fullhd size", "set sonogram volume", "set bargraph volume", "volume2", "sono_g", "set sonogram gamma", "gamma", "bar_g", "set bargraph gamma", "gamma2", "bar_t", "set bar transparency", "set timeclamp", "basefreq", "set base frequency", "endfreq", "set end frequency", "coeffclamp", "set coeffclamp", "set tlength", "384*tc/(384+tc*f)", "count", "set transform count", "fcount", "set frequency count", "fontfile", "set axis font file", "font", "set axis font", "fontcolor", "set font color", "st(0, (midi(f)-59.5)/12);st(1, if(between(ld(0),0,1), 0.5-0.5*cos(2*PI*ld(0)), 0));r(1-ld(1)) + b(ld(1))", "axisfile", "set axis image", "axis", "draw axis", "set color space", "bt2020ncl", "cscheme", "set color scheme", "1|0.5|0|0|0.5|1", "libavfilter/avf_showfreqs.c", "Unable to create FFT context. The window size might be too high.\n", "overlap %f too big\n", "showfreqs", "1024x512", "set display mode", "show lines", "show bars", "show dots", "Blackman", "welch", "Welch", "flattop", "Flat-top", "Blackman-Harris", "Blackman-Nuttall", "bhann", "Bartlett-Hann", "Nuttall", "lanczos", "Lanczos", "gauss", "Gauss", "Tukey", "dolph", "Dolph-Chebyshev", "cauchy", "Cauchy", "parzen", "Parzen", "poisson", "Poisson", "averaging", "set time averaging", "cmode", "set channel mode", "combined", "show all channels in same window", "show each channel in own window", "minamp", "set minimum amplitude", "showspectrumpic", "libavfilter/avf_showspectrum.c", "s:%dx%d FFT window size:%d\n", "fin->nb_samples == s->win_size", "CREATED BY LIBAVFILTER", "%.2f", "%.2fh", "%.2fm", "%.2fs", "TIME", "FREQUENCY (Hz)", "%.0f dB", "4096x2048", "set channel display mode", "combined mode", "separate mode", "set channel coloring", "channel", "separate color for each channel", "intensity", "intensity based coloring", "rainbow", "rainbow based coloring", "moreland", "moreland based coloring", "nebulae", "nebulae based coloring", "fire", "fire based coloring", "fiery", "fiery based coloring", "fruit", "fruit based coloring", "cool", "cool based coloring", "4thrt", "4th root", "5thrt", "5th root", "saturation", "color saturation multiplier", "orientation", "set orientation", "vertical", "horizontal", "set scale gain", "legend", "draw legend", "rotation", "color rotation", "showspectrum", "640x512", "set sliding mode", "replace old columns with new", "scroll from right to left", "fullframe", "return full frames", "rscroll", "scroll from left to right", "data", "set data mode", "magnitude", "showvolume", "set border width", "set channel width", "set channel height", "set fade", "set volume color expression", "PEAK*255+floor((1-PEAK)*255)*256+0xff000000", "display channel names", "display volume value", "set step size", "VOLUME", "CHANNEL", "PEAK", "showwavespic", "libavfilter/avf_showwaves.c", "Too few samples\n", "Create frame averaging %lld samples per column\n", "col < outlink->w", "Could not allocate showwaves buffer\n", "s:%dx%d r:%f n:%d\n", "600x240", "split_channels", "draw channels separately", "showwaves", "select display mode", "point", "draw a point for each sample", "draw a line for each sample", "draw a line between samples", "cline", "draw a centered line for each sample", "set how many samples to show in the same point", "libavfilter/buffersink.c", "%d buffers queued in %s, something may be wrong.\n", "pix_fmts", "Invalid size for pixel_fmts: %d, should be multiple of %d\n", "channel_counts", "all_channel_counts", "Invalid size for sample_fmts: %d, should be multiple of %d\n", "Invalid size for sample_rates: %d, should be multiple of %d\n", "Invalid size for channel_layouts: %d, should be multiple of %d\n", "Invalid size for channel_counts: %d, should be multiple of %d\n", "Conflicting all_channel_counts and list in options\n", "ctx->filter->activate == activate", "abuffersink", "buffersink", "set the supported sample formats", "set the supported sample rates", "set the supported channel layouts", "set the supported channel counts", "accept all channel counts", "set the supported pixel formats", "libavfilter/buffersrc.c", "Invalid parameters provided.\n", "w:%d h:%d pixfmt:%s tb:%d/%d fr:%d/%d sar:%d/%d sws_param:%s\n", "Sample format was not set or was invalid\n", "Invalid channel layout %s.\n", "Mismatching channel count %d and layout '%s' (%d channels)\n", "Neither number of channels nor channel layout specified\n", "tb:%d/%d samplefmt:%s samplerate:%d chlayout:%s\n", "Changing frame properties on the fly is not supported by all filters.\n", "Changing frame properties on the fly is not supported.\n", "Layout indicates a different number of channels than actually present\n", "abuffer", "sample_fmt", "channels", "pix_fmt", "time_base_num", "deprecated, do not use", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "libavfilter/drawutils.c", "pix_desc", "Color conversion not implemented for %s\n", "libavfilter/dualinput.c", "mainpic", "lavfi.bench.start_time", "libavfilter/f_bench.c", "t:%f avg:%f max:%f min:%f\n", "abench", "action", "set action", "start", "start timer", "stop", "stop timer", "bench", "libavfilter/f_drawgraph.c", "max is same or lower than min\n", "adrawgraph", "drawgraph", "set 1st metadata key", "set 1st foreground color expression", "0xffff0000", "set 2nd metadata key", "set 2nd foreground color expression", "0xff00ff00", "set 3rd metadata key", "set 3rd foreground color expression", "0xffff00ff", "set 4th metadata key", "set 4th foreground color expression", "0xffffff00", "set background color", "set minimal value", "set maximal value", "set graph mode", "draw bars", "draw dots", "draw lines", "set slide mode", "draw new frames", "display graph in single frame", "set graph size", "900x256", "libavfilter/f_ebur128.c", "Summary:\n\n  Integrated loudness:\n    I:         %5.1f LUFS\n    Threshold: %5.1f LUFS\n\n  Loudness range:\n    LRA:       %5.1f LU\n    Threshold: %5.1f LUFS\n    LRA low:   %5.1f LUFS\n    LRA high:  %5.1f LUFS", "\n\n  Sample peak:\n    Peak:      %5.1f dBFS", "\n\n  True peak:\n    Peak:      %5.1f dBFS", "Video size %dx%d is too small, minimum size is 640x480\n", "%c%d", "M:%6.1f S:%6.1f     I:%6.1f LUFS     LRA:%6.1f LU     ", "%.3f", "lavfi.r128.M", "lavfi.r128.S", "lavfi.r128.I", "lavfi.r128.LRA", "lavfi.r128.LRA.low", "lavfi.r128.LRA.high", "lavfi.r128.sample_peaks_ch%d", "lavfi.r128.true_peaks_ch%d", "t: %-10s M:%6.1f S:%6.1f     I:%6.1f LUFS     LRA:%6.1f LU", "  SPK:", " %5.1f", " dBFS", "  FTPK:", "  TPK:", "out%d", "EBU +%d scale\n", "ebur128", "640x480", "meter", "set scale meter (+9 to +18)", "framelog", "force frame logging level", "information logging level", "verbose", "verbose logging level", "set peak mode", "disable any peak mode", "sample", "enable peak-sample mode", "true", "enable true-peak mode", "dualmono", "treat mono input files as dual-mono", "panlaw", "set a specific pan law for dual-mono files", "libavfilter/fifo.c", "frame->nb_samples > offset", "request_samples changed before the buffer was returned.\n", "libavfilter/f_interleave.c", "Parameters for input link %s (size %dx%d, SAR %d:%d) do not match the corresponding output link parameters (%dx%d, SAR %d:%d)\n", "queue:%d -> frame time:%f\n", "NOPTS value for input frame cannot be accepted, frame discarded\n", "frame pts:%f -> queue idx:%d available:%d\n", "ainterleave", "nb_inputs", "set number of inputs", "interleave", "number of loops", "max number of frames to loop", "set the loop start frame", "aloop", "max number of samples to loop", "set the loop start sample", "libavfilter/f_metadata.c", "Metadata key must be set\n", "Missing metadata value\n", "expr option not set\n", "Error while parsing expression '%s'\n", "pipe:1", "Could not open %s: %s\n", "frame:%-4lld pts:%-7s pts_time:%-7s\n", "%s=%s\n", "set a mode of operation", "select", "select frame", "add new metadata", "modify", "modify metadata", "delete", "delete metadata", "print", "print metadata", "set metadata key", "value", "set metadata value", "function", "function for comparing values", "same_str", "starts_with", "less", "equal", "greater", "expr", "set expression for expr function", "file", "set file where to print metadata information", "ametadata", "VALUE1", "VALUE2", "libavfilter/formats.c", "Duplicate formats in avfilter_merge_formats() detected\n", "Invalid pixel format '%s'\n", "Invalid sample format '%s'\n", "Invalid time base '%s'\n", "Invalid sample rate '%s'\n", "Deprecated channel count specification '%s'. This will stop working in releases made in 2018 and after.\n", "Invalid channel layout '%s'\n", "Unknown channel layout '%s' is not supported.\n", "libavfilter/f_perms.c", "random seed: 0x%08x\n", " (no-op)", "%s -> %s%s\n", "perms", "aperms", "select permissions mode", "do nothing", "set all output frames read-only", "set all output frames writable", "toggle", "switch permissions", "random", "set permissions randomly", "set the seed for the random mode", "libavfilter/framepool.c", "pool->type == AVMEDIA_TYPE_VIDEO", "pool->type == AVMEDIA_TYPE_AUDIO", "frame->data[1] != ((void *)0)", "framesync", "libavfilter/framesync.c", "level <= fs->sync_level", "Sync level %u\n", "!fs->in[in].have_next", "Impossible to set time base\n", "Selected %d/%d time base\n", "!fs->frame_ready", "fs->on_event", "libavfilter/f_realtime.c", "time discontinuity detected: %lli us, resetting\n", "sleeping %lli us\n", "arealtime", "realtime", "sleep time limit", "areverse", "reverse", "lavf.concatdec.start_time", "lavf.concatdec.duration", "lavfi.scene_score", "libavfilter/f_select.c", "n:%f pts:%f t:%f key:%d", " interlace_type:%c pict_type:%c scene:%f", " samples_n:%d consumed_samples_n:%f", " -> select:%f select_out:%d\n", "scene", "output%d", "Scene detection is ignored in aselect filter\n", "set an expression to use for selecting frames", "outputs", "set the number of outputs", "aselect", "start_pts", "prev_pts", "prev_selected_pts", "start_t", "prev_t", "prev_selected_t", "pict_type", "PICT_TYPE_I", "PICT_TYPE_P", "PICT_TYPE_B", "PICT_TYPE_S", "PICT_TYPE_SI", "PICT_TYPE_SP", "PICT_TYPE_BI", "interlace_type", "PROGRESSIVE", "TOPFIRST", "BOTTOMFIRST", "consumed_samples_n", "samples_n", "selected_n", "prev_selected_n", "concatdec_select", "enter", "leave", "libavfilter/f_sendcmd.c", "One and only one of the filename or commands options must be specified\n", " \f\t\n\r", " \f\t\n\r,;", "Invalid interval specification '%s' in interval #%d\n", "Invalid start time specification '%s' in interval #%d\n", "Invalid end time specification '%s' in interval #%d\n", "Invalid end time '%s' in interval #%d: cannot be lesser than start time '%s'\n", "Unknown flag '%s' in interval #%d, command #%d\n", "Invalid flags char '%c' in interval #%d, command #%d\n", "Missing flag terminator or extraneous data found at the end of flags in interval #%d, command #%d\n", "No target specified in interval #%d, command #%d\n", "No command specified in interval #%d, command #%d\n", "Could not (re)allocate command array\n", "Missing separator or extraneous data found at the end of interval #%d, in command #%d\n", "Command was parsed as: flags:[%s] target:%s command:%s arg:%s\n", "No interval specified for interval #%d\n", "Missing terminator or extraneous data found at the end of interval #%d\n", "Could not (re)allocate intervals array\n", "No commands were specified\n", "Parsed commands:\n", "start_time:%f end_time:%f index:%d\n", "    [%s] target:%s command:%s arg:%s index:%d\n", "[%s] interval #%d start_ts:%f end_ts:%f ts:%f\n", "Processing command #%d target:%s command:%s arg:%s\n", "Command reply for command #%d: ret:%s res:%s\n", "asendcmd", "sendcmd", "commands", "set commands", "filename", "set commands file", "libavfilter/f_sidedata.c", "Side data type must be set\n", "sidedata", "delete side data", "set side data type", "PANSCAN", "A53_CC", "STEREO3D", "MATRIXENCODING", "DOWNMIX_INFO", "REPLAYGAIN", "DISPLAYMATRIX", "MOTION_VECTORS", "SKIP_SAMPLES", "AUDIO_SERVICE_TYPE", "MASTERING_DISPLAY_METADATA", "GOP_TIMECODE", "asidedata", "libavfilter/f_streamselect.c", "mapping definition is not set\n", "n=%d map=%p p=%p\n", "Unable to map more than the %d input pads available\n", "Input stream index %d doesn't exist (there is only %d input streams defined)\n", "Map input stream %d to output stream %d\n", "invalid mapping\n", "%d map set\n", "config output link %d with settings from input link %d\n", "%sput%d", "Add %s pad %s\n", "astreamselect", "Configured with %d inpad and %d outpad\n", "streamselect", "number of input streams", "input indexes to remap to outputs", "libavfilter/generate_wave_table.c", "[%dx%d %d:%d %s]", "[%dHz %s:%s]", "%s:%s", "%*s%-*s", "%*s(%s)%*s", "sws_flags=", "libavfilter/graphparser.c", "sws_flags not terminated with ';'.\n", "Bad (empty?) label found in the following: \"%s\".\n", "Mismatched '[' found in the following: \"%s\".\n", " \n\t\r", "=,;[", "[],;", "Parsed_%s_%d", "No such filter: '%s'\n", "Error creating filter '%s'\n", "Error initializing filter '%s'", " with args '%s'", "No output pad can be associated to link label '%s'.\n", "Cannot create the link %s:%d -> %s:%d\n", "Too many inputs specified for the \"%s\" filter.\n", "Unable to parse graph description substring: \"%s\"\n", "Not enough inputs specified for the \"%s\" filter.\n", "Invalid filterchain containing an unlabelled output pad: \"%s\"\n", "[in]", "[out]", "image2", "libavfilter/lavfutils.c", "Failed to open input file '%s'\n", "Find stream info failed\n", "Failed to find codec\n", "Failed to open codec\n", "Failed to alloc frame\n", "Failed to read frame from file\n", "Failed to decode image from file\n", "Error loading image file '%s'\n", "libavfilter/lswsutils.c", "Impossible to create scale context for the conversion fmt:%s s:%dx%d -> fmt:%s s:%dx%d\n", "libavfilter/scale.c", "Error when evaluating the expression '%s'.\nMaybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n", "in_w", "in_h", "out_w", "out_h", "hsub", "vsub", "ohsub", "ovsub", "libavfilter/setpts.c", "TB:%f FRAME_RATE:%f SAMPLE_RATE:%f\n", "N:%lld PTS:%s T:%f POS:%s", " INTERLACED:%lld", " NB_SAMPLES:%lld NB_CONSUMED_SAMPLES:%lld", " -> PTS:%s T:%f\n", "asetpts", "setpts", "Expression determining the frame timestamp", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "libavfilter/settb.c", "Invalid expression '%s' for timebase.\n", "Invalid non-positive values for the timebase num:%d or den:%d.\n", "tb:%d/%d -> tb:%d/%d\n", "tb:%d/%d pts:%lld -> tb:%d/%d pts:%lld\n", "asettb", "set expression determining the output timebase", "intb", "settb", "AVTB", "asplit", "split", "set number of outputs", "seek", "%i|%lli|%i %1s", "get_duration", "libavfilter/src_movie.c", "Unable to loop: %s\n", "Stream finished, looping.\n", "Decode error: %s\n", "Discontinuity in stream:%d diff:%lld\n", "Format changed %s -> %s, discarding frame\n", "matched only already used streams", "did not match any stream", "No filename provided!\n", "amovie", "d%c%d", "Loop with several streams is currently unsupported\n", "Failed to avformat_open_input '%s'\n", "Failed to find stream info\n", "%s: seek value overflow with start_time:%lld seek_point:%lld\n", "%s: could not seek to position %lld\n", "d%1[av]%d%c", "No %s stream with index '%d' found\n", "Invalid stream specifier \"%s\"\n", "Ambiguous stream specifier \"%s\", using #%d\n", "Stream specifier \"%s\" %s\n", "Stream specifier \"%s\" matched a %s stream,currently unsupported by libavfilter\n", "Channel layout is not set in stream %d, and could not be guessed from the number of channels (%d)\n", "Channel layout is not set in output stream %d, guessed channel layout is '%s'\n", "Failed to find any codec\n", "seek_point:%lli format_name:%s file_name:%s stream_index:%d\n", "movie", "format_name", "set format name", "stream_index", "set stream index", "seek_point", "set seekpoint (seconds)", "streams", "set streams", "set loop count", "discontinuity", "set discontinuity threshold", "libavfilter/trim.c", "start_sample < end_sample || (start_sample == end_sample && !frame->nb_samples)", "atrim", "Timestamp of the first frame that should be passed", "starti", "Timestamp of the first frame that should be dropped again", "endi", "Timestamp of the first frame that should be  passed", "end_pts", "Maximum duration of the output", "durationi", "Number of the first audio sample that should be passed to the output", "end_sample", "Number of the first audio sample that should be dropped again", "trim", "start_frame", "Number of the first frame that should be passed to the output", "end_frame", "Number of the first frame that should be dropped again", "libavfilter/vaf_spectrumsynth.c", "Magnitude and Phase sizes differ (%dx%d vs %dx%d).\n", "Magnitude and Phase time bases differ (%d/%d vs %d/%d).\n", "Magnitude and Phase framerates differ (%d/%d vs %d/%d).\n", "spectrumsynth", "set channels", "set input amplitude scale", "set input sliding mode", "consume old columns with new", "consume only most right column", "consume full frames", "consume only most left column", "libavfilter/vf_alphamerge.c", "Input frame sizes do not match (%dx%d vs %dx%d).\n", "alphamerge", "alpha", "libavfilter/vf_aspect.c", "num:den syntax is deprecated, please use num/den or named options instead\n", "Unable to parse ratio numerator \"%s\"\n", "Error when evaluating the expression '%s'\n", "Invalid string '%s' for aspect ratio\n", "w:%d h:%d dar:%d/%d sar:%d/%d -> dar:%d/%d sar:%d/%d\n", "w:%d h:%d sar:%d/%d dar:%d/%d -> sar:%d/%d dar:%d/%d\n", "setsar", "set sample (pixel) aspect ratio", "set max value for nominator or denominator in the ratio", "setdar", "set display aspect ratio", "dar_den", "libavfilter/vf_atadenoise.c", "size %d is invalid. Must be an odd value.\n", "atadenoise", "set threshold A for 1st plane", "set threshold B for 1st plane", "set threshold A for 2nd plane", "set threshold B for 2nd plane", "set threshold A for 3rd plane", "set threshold B for 3rd plane", "set how many frames to use", "set what planes to filter", "avgblur", "sizeX", "set horizontal size", "planes", "set planes to filter", "sizeY", "set vertical size", "libavfilter/vf_bbox.c", "n:%lld pts:%s pts_time:%s", "lavfi.bbox.x1", "lavfi.bbox.x2", "lavfi.bbox.y1", "lavfi.bbox.y2", "lavfi.bbox.w", "lavfi.bbox.h", " x1:%d x2:%d y1:%d y2:%d w:%d h:%d crop=%d:%d:%d:%d drawbox=%d:%d:%d:%d", "bbox", "min_val", "set minimum luminance value for bounding box", "lavfi.bitplanenoise.%d.%d", "bitplanenoise", "bitplane", "set bit plane to use for measuring noise", "filter", "show noisy pixels", "libavfilter/vf_blackdetect.c", "black_start:%s black_end:%s black_duration:%s\n", "black_min_duration:%s pixel_black_th:%f pixel_black_th_i:%d picture_black_ratio_th:%f\n", "frame:%lld picture_black_ratio:%f pts:%s t:%s type:%c\n", "lavfi.black_start", "lavfi.black_end", "blackdetect", "set minimum detected black duration in seconds", "black_min_duration", "picture_black_ratio_th", "set the picture black ratio threshold", "pic_th", "pixel_black_th", "set the pixel black threshold", "pix_th", "libavfilter/vf_blackframe.c", "frame:%u pblack:%u pts:%lld t:%f type:%c last_keyframe:%d\n", "lavfi.blackframe.pblack", "blackframe", "percentage of the pixels that have to be below the threshold for the frame to be considered black", "threshold below which a pixel value is considered black", "thresh", "tblend", "libavfilter/vf_blend.c", "inputs must be of same pixel format\n", "First input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding second input link %s parameters (%dx%d, SAR %d:%d)\n", "c0_mode", "set component #0 blend mode", "c1_mode", "set component #1 blend mode", "c2_mode", "set component #2 blend mode", "c3_mode", "set component #3 blend mode", "all_mode", "set blend mode for all components", "addition", "addition128", "burn", "darken", "difference", "difference128", "divide", "dodge", "exclusion", "freeze", "glow", "hardlight", "hardmix", "heat", "lighten", "linearlight", "multiply", "multiply128", "negation", "overlay", "phoenix", "pinlight", "reflect", "screen", "softlight", "subtract", "vividlight", "c0_expr", "set color component #0 expression", "c1_expr", "set color component #1 expression", "c2_expr", "set color component #2 expression", "c3_expr", "set color component #3 expression", "all_expr", "set expression for all color components", "c0_opacity", "set color component #0 opacity", "c1_opacity", "set color component #1 opacity", "c2_opacity", "set color component #2 opacity", "c3_opacity", "set color component #3 opacity", "all_opacity", "set opacity for all color components", "blend", "force termination when the shortest input terminates", "repeatlast", "repeat last bottom frame", "BOTTOM", "libavfilter/vf_boxblur.c", "Error when evaluating luma radius expression '%s'\n", "Error when evaluating chroma radius expression '%s'\n", "Error when evaluating alpha radius expression '%s'\n", "luma_radius:%d luma_power:%d chroma_radius:%d chroma_power:%d alpha_radius:%d alpha_power:%d w:%d chroma_w:%d h:%d chroma_h:%d\n", "Invalid luma radius value %d, must be >= 0 and <= %d\n", "Invalid chroma radius value %d, must be >= 0 and <= %d\n", "Invalid alpha radius value %d, must be >= 0 and <= %d\n", "Luma radius expression is not set.\n", "boxblur", "luma_radius", "Radius of the luma blurring box", "luma_power", "How many times should the boxblur be applied to luma", "chroma_radius", "Radius of the chroma blurring box", "chroma_power", "How many times should the boxblur be applied to chroma", "alpha_radius", "Radius of the alpha blurring box", "alpha_power", "How many times should the boxblur be applied to alpha", "libavfilter/vf_bwdif.c", "Video of less than 3 columns or lines is not supported\n", "Failed to reallocate frame\n", "Reallocating frame due to differing stride\n", "bwdif", "specify the interlacing mode", "send_frame", "send one frame for each frame", "send_field", "send one frame for each field", "parity", "specify the assumed picture field parity", "assume top field first", "assume bottom field first", "auto detect parity", "deint", "specify which frames to deinterlace", "deinterlace all frames", "interlaced", "only deinterlace frames marked as interlaced", "chromakey", "set the chromakey key color", "black", "similarity", "set the chromakey similarity value", "set the chromakey key blend value", "color parameter is in yuv instead of rgb", "libavfilter/vf_ciescope.c", "ciescope", "system", "set color system", "ntsc", "NTSC 1953 Y'I'O' (ITU-R BT.470 System M)", "470m", "EBU Y'U'V' (PAL/SECAM) (ITU-R BT.470 System B, G)", "470bg", "smpte", "SMPTE-C RGB", "240m", "SMPTE-240M Y'PbPr", "apple", "Apple RGB", "widergb", "Adobe Wide Gamut RGB", "cie1931", "CIE 1931 RGB", "hdtv", "ITU.BT-709 Y'CbCr", "rec709", "uhdtv", "ITU-R.BT-2020", "rec2020", "set cie system", "CIE 1931 xyY", "CIE 1960 UCS", "CIE 1976 Luv", "gamuts", "set what gamuts to draw", "set ciescope size", "set ciescope intensity", "contrast", "corrgamma", "showwhite", "codecview", "set motion vectors to visualize", "mv_type", "set motion vectors type", "forward predicted MVs", "backward predicted MVs", "frame_type", "set frame types to visualize motion vectors of", "I-frames", "P-frames", "B-frames", "colorbalance", "set red shadows", "set green shadows", "set blue shadows", "set red midtones", "set green midtones", "set blue midtones", "set red highlights", "set green highlights", "set blue highlights", "colorchannelmixer", "set the red gain for the red channel", "set the green gain for the red channel", "set the blue gain for the red channel", "set the alpha gain for the red channel", "set the red gain for the green channel", "set the green gain for the green channel", "set the blue gain for the green channel", "set the alpha gain for the green channel", "set the red gain for the blue channel", "set the green gain for the blue channel", "set the blue gain for the blue channel", "set the alpha gain for the blue channel", "set the red gain for the alpha channel", "set the green gain for the alpha channel", "set the blue gain for the alpha channel", "set the alpha gain for the alpha channel", "colorkey", "set the colorkey key color", "set the colorkey similarity value", "set the colorkey key blend value", "colorlevels", "rimin", "set input red black point", "gimin", "set input green black point", "bimin", "set input blue black point", "aimin", "set input alpha black point", "rimax", "set input red white point", "gimax", "set input green white point", "bimax", "set input blue white point", "aimax", "set input alpha white point", "romin", "set output red black point", "gomin", "set output green black point", "bomin", "set output blue black point", "aomin", "set output alpha black point", "romax", "set output red white point", "gomax", "set output green white point", "bomax", "set output blue white point", "aomax", "set output alpha white point", "libavfilter/vf_colormatrix.c", "error calculating conversion coefficients\n", "%s -> %s\n", "Input frame does not specify a supported colorspace, and none has been specified as source either\n", "Unspecified destination color space\n", "Source and destination color space must not be identical\n", "colormatrix", "bt601", "set source color matrix", "color_mode", "set destination color matrix", "set BT.709 colorspace", "set FCC colorspace   ", "set BT.601 colorspace", "bt470", "set BT.470 colorspace", "set SMTPE-170M colorspace", "set SMPTE-240M colorspace", "set BT.2020 colorspace", "libavfilter/vf_colorspace.c", "Invalid odd size (%dx%d)\n", "Input range not set, assuming tv/mpeg\n", "Unsupported input format %d (%s) or bitdepth (%d)\n", "Unsupported output format %d (%s) or bitdepth (%d)\n", "Unsupported input primaries %d (%s)\n", "Please specify output primaries\n", "Unsupported output color property %d\n", "Unsupported output primaries %d (%s)\n", "Unsupported input transfer characteristics %d (%s)\n", "Please specify output transfer characteristics\n", "Unsupported output transfer characteristics %d (%s)\n", "Unsupported input colorspace %d (%s)\n", "Unsupported input color range %d (%s)\n", "Unsupported output color range %d (%s)\n", "Set all color properties together", "bt601-6-525", "bt601-6-625", "space", "Output colorspace", "Output color range", "primaries", "Output color primaries", "Output transfer characteristics", "srgb", "xvycc", "Output pixel format", "yuv420p", "yuv420p10", "yuv420p12", "yuv422p", "yuv422p10", "yuv422p12", "yuv444p", "yuv444p10", "yuv444p12", "Ignore primary chromaticity and gamma correction", "dither", "Dithering mode", "wpadapt", "Whitepoint adaptation method", "bradford", "vonkries", "identity", "iall", "Set all input color properties together", "ispace", "Input colorspace", "irange", "Input color range", "iprimaries", "Input color primaries", "itrc", "Input transfer characteristics", "convolution", "prewitt", "sobel", "set scale", "delta", "set delta", "set matrix for 1st plane", "0 0 0 0 1 0 0 0 0", "set matrix for 2nd plane", "set matrix for 3rd plane", "set matrix for 4th plane", "0rdiv", "set rdiv for 1st plane", "1rdiv", "set rdiv for 2nd plane", "2rdiv", "set rdiv for 3rd plane", "3rdiv", "set rdiv for 4th plane", "0bias", "set bias for 1st plane", "1bias", "set bias for 2nd plane", "2bias", "set bias for 3rd plane", "3bias", "set bias for 4th plane", "copy", "libavfilter/vf_cover_rect.c", "cover filename not set\n", "cover image is not a YUV420 image\n", "lavfi.rect.x", "lavfi.rect.y", "lavfi.rect.w", "lavfi.rect.h", "cover_rect", "cover", "cover bitmap filename", "set removal mode", "cover area with bitmap", "blur", "blur area", "libavfilter/vf_cropdetect.c", "limit:%f round:%d reset_count:%d\n", "total:%d\n", "lavfi.cropdetect.x1", "lavfi.cropdetect.x2", "lavfi.cropdetect.y1", "lavfi.cropdetect.y2", "lavfi.cropdetect.w", "lavfi.cropdetect.h", "lavfi.cropdetect.x", "lavfi.cropdetect.y", "x1:%d x2:%d y1:%d y2:%d w:%d h:%d x:%d y:%d pts:%lld t:%f crop=%d:%d:%d:%d\n", "cropdetect", "Threshold below which the pixel is considered black", "round", "Value by which the width/height should be divisible", "Recalculate the crop area after this many frames", "reset_count", "max_outliers", "Threshold count of outliers", "libavfilter/vf_crop.c", "Too big value or invalid expression for out_w/ow or out_h/oh. Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n", "w:%d h:%d sar:%d/%d -> w:%d h:%d sar:%d/%d\n", "Invalid too big or non positive size for width '%d' or height '%d'\n", "n:%d t:%f pos:%f x:%d y:%d x+w:%d y+h:%d\n", "crop", "set the width crop area expression", "set the height crop area expression", "set the x crop area expression", "(in_w-out_w)/2", "set the y crop area expression", "(in_h-out_h)/2", "keep_aspect", "keep aspect ratio", "exact", "do exact cropping", "%f/%f ", "libavfilter/vf_curves.c", "curves %d (intid=%d) [%d points]: [%s]\n", "plot ", "Cannot open file '%s' for writing: %s\n", "set xtics 0.1\n", "set ytics 0.1\n", "set size square\n", "set grid\n", "%s'-' using 1:2 with lines lc '%s' title ''", ", '-' using 1:2 with points pointtype 3 lc '%s' title ''", "%f %f\n", "point->next", "x_start >= 0 && x_start < lut_size && x_end >= 0 && x_end < lut_size", "f(%f)=%f -> y[%d]=%d\n", "Invalid key point coordinates (%f;%f), x and y must be in the [0;1] range.\n", "Key point coordinates (%f;%f) and (%f;%f) are too close from each other or not strictly increasing on the x-axis\n", "Only one point (at (%f;%f)) is defined, this is unlikely to behave as you expect. You probably wantat least 2 points.", "#%d points:", " (%f;%f)", "green", "blue", "#404040", "0.129/1 0.466/0.498 0.725/0", "0.109/1 0.301/0.498 0.517/0", "0.098/1 0.235/0.498 0.423/0", "0/0 0.25/0.156 0.501/0.501 0.686/0.745 1/1", "0/0 0.25/0.188 0.38/0.501 0.745/0.815 1/0.815", "0/0 0.231/0.094 0.709/0.874 1/1", "0/0 0.5/0.4 1/1", "0/0 0.149/0.066 0.831/0.905 0.905/0.98 1/1", "0/0 0.4/0.5 1/1", "0/0 0.305/0.286 0.694/0.713 1/1", "0/0 0.286/0.219 0.639/0.643 1/1", "0/1 1/0", "0/0 0.301/0.196 0.592/0.6 0.686/0.737 1/1", "0/0.11 0.42/0.51 1/0.95", "0/0 0.50/0.48 1/1", "0/0.22 0.49/0.44 1/0.8", "select a color curves preset", "preset_name", "color_negative", "cross_process", "darker", "increase_contrast", "lighter", "linear_contrast", "medium_contrast", "negative", "strong_contrast", "vintage", "master", "set master points coordinates", "set red points coordinates", "set green points coordinates", "set blue points coordinates", "set points coordinates for all components", "psfile", "set Photoshop curves file name", "plot", "save Gnuplot script of the curves in specified file", "%02X\n", "%04X\n", "datascope", "set output size", "set x offset", "set y offset", "set scope mode", "color2", "draw column/row numbers", "opacity", "set background opacity", "libavfilter/vf_dctdnoiz.c", "Overlap value can not except %d with a block size of %dx%d\n", "The last %d horizontal pixels won't be denoised\n", "The last %d vertical pixels won't be denoised\n", "threads: [max=%d hmax=%d user=%d] => %d\n", "dctdnoiz", "sigma", "set noise sigma constant", "set number of block overlapping pixels", "set coefficient factor expression", "set the block size, expressed in bits", "deband", "1thr", "set 1st plane threshold", "2thr", "set 2nd plane threshold", "3thr", "set 3rd plane threshold", "4thr", "set 4th plane threshold", "set range", "direction", "set direction", "set blur", "coupling", "set plane coupling", " dup", " lowest", " [DROP]", "libavfilter/vf_decimate.c", "1/%d frame drop:\n", "  #%d: totdiff=%08llx maxbdiff=%08llx%s%s%s%s\n", "The input needs a constant frame rate; current rate of %d/%d is invalid\n", "FPS: %d/%d -> %d/%d\n", "clean_src", "blockx and blocky settings must be power of two\n", "decimate", "cycle", "set the number of frame from which one will be dropped", "dupthresh", "set duplicate threshold", "scthresh", "set scene change threshold", "blockx", "set the size of the x-axis blocks used during metric calculations", "blocky", "set the size of the y-axis blocks used during metric calculations", "ppsrc", "mark main input as a pre-processed input and activate clean source input stream", "set whether or not chroma is considered in the metric calculations", "libavfilter/vf_dejudder.c", "cycle:%d\n", "%lld\t", "next=%lld, new=%lld\n", "dejudder", "set the length of the cycle to use for dejuddering", "libavfilter/vf_delogo.c", "Option %s was not set.\n", "Note: default band value was changed from 4 to 1.\n", "Option band is deprecated.\n", "x:%d y:%d, w:%d h:%d band:%d show:%d\n", "Logo area is outside of the frame.\n", "delogo", "set logo x position", "set logo y position", "set logo width", "set logo height", "band", "set delogo area band size", "show", "show delogo area", "libavfilter/vf_deshake.c", "rx must be a multiple of 16\n", "Ori x, Avg x, Fin x, Ori y, Avg y, Fin y, Ori angle, Avg angle, Fin angle, Ori zoom, Avg zoom, Fin zoom\n", "OpenCL support was not enabled in this build, cannot be selected\n", "cx: %d, cy: %d, cw: %d, ch: %d, rx: %d, ry: %d, edge: %d blocksize: %d contrast: %d search: %d\n", "%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", "deshake", "set x for the rectangular search area", "set y for the rectangular search area", "set width for the rectangular search area", "set height for the rectangular search area", "set edge mode", "blank", "fill zeroes at blank locations", "original", "original image at blank locations", "clamp", "extruded edge value at blank locations", "mirror", "mirrored edge at blank locations", "blocksize", "set motion search blocksize", "set contrast threshold for blocks", "search", "set search strategy", "smode", "exhaustive", "exhaustive search", "less exhaustive search", "set motion search detailed log file name", "opencl", "use OpenCL filtering capabilities", "libavfilter/vf_detelecine.c", "No pattern provided.\n", "Provided pattern includes non-numeric characters.\n", "Provided start_frame is too big.\n", "Detelecine pattern %s removes up to %d frames per frame, pts advance factor: %d/%d\n", "TB: %d/%d -> %d/%d\n", "detelecine", "first_field", "select first field", "field", "select top field first", "select bottom field first", "pattern", "pattern that describe for how many fields a frame is to be displayed", "position of first frame with respect to the pattern if stream is cut", "libavfilter/vf_displace.c", "First input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding second input link %s parameters (%dx%d, SAR %d:%d) and/or third input link %s parameters (%dx%d, SAR %d:%d)\n", "displace", "source", "xmap", "ymap", "smear", "wrap", "invert", "libavfilter/vf_drawbox.c", "Size values less than 0 are not acceptable.\n", "x:%d y:%d w:%d h:%d color:0x%02X%02X%02X%02X\n", "Error when evaluating the expression '%s'.\n", "drawgrid", "set horizontal offset", "set vertical offset", "set width of grid cell", "set height of grid cell", "set color of the grid", "thickness", "set grid line thickness", "drawbox", "set horizontal position of the left box edge", "set vertical position of the top box edge", "set width of the box", "set height of the box", "set color of the box", "set the box thickness", "libavfilter/vf_edgedetect.c", "edgedetect", "set high threshold", "set low threshold", "wires", "white/gray wires on black", "colormix", "mix colors", "libavfilter/vf_elbg.c", "pal8 output allows max 256 codebook length.\n", "elbg", "codebook_length", "set codebook length", "nb_steps", "set max number of steps used to compute the mapping", "set the random seed", "pal8", "set the pal8 output", "libavfilter/vf_eq.c", "Error when parsing the expression '%s' for %s\n", "brightness", "gamma_r", "gamma_g", "gamma_b", "gamma_weight", "set the contrast adjustment, negative values give a negative image", "set the brightness adjustment", "set the saturation adjustment", "set the initial gamma value", "gamma value for red", "gamma value for green", "gamma value for blue", "set the gamma weight which reduces the effect of gamma on bright areas", "init", "eval expressions once during initialization", "eval expressions per-frame", "libavfilter/vf_extractplanes.c", "Requested planes not available.\n", "alphaextract", "extractplanes", "set planes", "set luma plane", "set u plane", "set v plane", "set red plane", "set green plane", "set blue plane", "set alpha plane", "libavfilter/vf_fade.c", "type:%s start_frame:%d nb_frames:%d alpha:%d\n", "type:%s start_time:%f duration:%f alpha:%d\n", "fade", "'in' or 'out' for fade-in/fade-out", "Number of the first frame to which to apply the effect.", "nb_frames", "Number of frames to which the effect should be applied.", "fade alpha if it is available on the input", "Number of seconds of the beginning of the effect.", "Duration of the effect in seconds.", "set color", "weight_Y", "weight_U", "weight_V", "fftfilt", "dc_Y", "adjust gain in Y plane", "dc_U", "adjust gain in U plane", "dc_V", "adjust gain in V plane", "set luminance expression in Y plane", "set chrominance expression in U plane", "set chrominance expression in V plane", "%lld,%lld %c", "%lld,%lld", "libavfilter/vf_fieldhint.c", "Invalid entry at line %lld.\n", "Out of range frames %lld and/or %lld on line %lld for %lld. input frame.\n", "Out of range %lld and/or %lld on line %lld for %lld. input frame.\n", "Missing entry for %lld. input frame.\n", "Invalid hint: %c.\n", "Hint file must be set.\n", "%s: %s\n", "fieldhint", "hint", "set hint file", "set hint mode", "absolute", "relative", "libavfilter/vf_fieldmatch.c", "Combed pixel should not be larger than blockx x blocky\n", "fm->prv && fm->src && fm->nxt", "fm->prv2 && fm->src2 && fm->nxt2", "order == 0 || order == 1 || field == 0 || field == 1", "COMBS: %3d %3d %3d %3d %3d\n", "Frame #%lld at %s is still interlaced\n", "SC:%d | COMBS: %3d %3d %3d %3d %3d (combpel=%d) match=%d combed=%s\n", "fieldmatch", "order", "specify the assumed field order", "set the matching mode or strategy to use", "2-way match (p/c)", "pc_n", "2-way match + 3rd match on combed (p/c + u)", "pc_u", "2-way match + 3rd match (same order) on combed (p/c + u)", "pc_n_ub", "2-way match + 3rd match on combed + 4th/5th matches if still combed (p/c + u + u/b)", "3-way match (p/c/n)", "pcn_ub", "3-way match + 4th/5th matches on combed (p/c/n + u/b)", "set the field to match from", "automatic (same value as 'order')", "bottom field", "top field", "mchroma", "set whether or not chroma is included during the match comparisons", "define an exclusion band which excludes the lines between y0 and y1 from the field matching decision", "set scene change detection threshold", "combmatch", "set combmatching mode", "combmatching", "disable combmatching", "enable combmatching only on scene change", "enable combmatching all the time", "combdbg", "enable comb debug", "dbglvl", "no forced calculation", "calculate p/c/n", "pcnub", "calculate p/c/n/u/b", "cthresh", "set the area combing threshold used for combed frame detection", "set whether or not chroma is considered in the combed frame decision", "set the x-axis size of the window used during combed frame detection", "set the y-axis size of the window used during combed frame detection", "combpel", "set the number of combed pixels inside any of the blocky by blockx size blocks on the frame for the frame to be detected as combed", "libavfilter/vf_field.c", "w:%d h:%d type:%s -> w:%d h:%d\n", "set field type (top or bottom)", "field_type", "select top field", "select bottom field", "frame with same field order", "progressive frame", "down", "libavfilter/vf_fieldorder.c", "Skipping %s.\n", "picture will move %s one line\n", "fieldorder", "output field order", "bottom field first", "libavfilter/vf_find_rect.c", "object filename not set\n", "object image is not a grayscale image\n", "score != 0", "Found at %d %d score %f\n", "find_rect", "object", "object bitmap filename", "mipmaps", "set mipmaps", "xmin", "ymin", "xmax", "ymax", "libavfilter/vf_format.c", "Empty output format string.\n", "A '|'-separated list of pixel formats", "libavfilter/vf_fps.c", "%d frames in, %d frames out; %d frames dropped, %d frames duplicated.\n", "fps=%d/%d\n", "Set first pts to (in:%lld out:%lld)\n", "Discarding initial frame(s) with no timestamp.\n", "Dropping %d frame(s).\n", "Duplicating frame.\n", "A string describing desired output framerate", "Assume the first PTS should be this value.", "set rounding method for timestamps", "round towards 0", "round away from 0", "round towards -infty", "round towards +infty", "near", "round to nearest", "libavfilter/vf_framepack.c", "Left and right sizes differ (%dx%d vs %dx%d).\n", "Left and right time bases differ (%d/%d vs %d/%d).\n", "Left and right framerates differ (%d/%d vs %d/%d).\n", "Unknown packing mode.", "framepack", "packed", "right", "Frame pack output format", "Views are packed next to each other", "Views are packed on top of each other", "frameseq", "Views are one after the other", "lines", "Views are interleaved by lines", "columns", "Views are interleaved by columns", "libavfilter/vf_framerate.c", "next_source()\n", "next_source() unlink %d\n", "next_source() copy %d to %d\n", "next_source() make %d null\n", "config_output()\n", "config_output() input time base:%u/%u (%f)\n", "time base:%u/%u -> %u/%u exact:%d\n", "Timebase conversion is not exact\n", "config_output() output time base:%u/%u (%f) w:%d h:%d\n", "fps -> fps:%u/%u scene score:%f interpolate start:%d end:%d\n", "set_srce_frame_output_pts()\n", "set_work_frame_pts()\n", "s->srce[s->next]", "s->srce[s->crnt]", "set_work_frame_pts() srce crnt pts:%lld\n", "set_work_frame_pts() srce next pts:%lld\n", "set_work_frame_pts() srce prev pts:%lld\n", "set_work_frame_pts() initial average srce pts:%lld\n", "set_work_frame_pts() average srce pts:%lld\n", "set_work_frame_pts() average srce pts:%lld at dest time base:%u/%u\n", "set_work_frame_pts() average dest pts delta:%lld\n", "set_work_frame_pts() calculated pts:%lld at dest time base:%u/%u\n", "process_work_frame()\n", "process_work_frame() pending_input_frames %d\n", "process_work_frame() srce prev pts:%lld\n", "process_work_frame() srce crnt pts:%lld\n", "process_work_frame() srce next pts:%lld\n", "process_work_frame() no current frame cached: move on to next frame, do not output a frame\n", "process_work_frame() work crnt pts:%lld\n", "process_work_frame() work next pts:%lld\n", "process_work_frame() srce prev pts:%lld at dest time base:%u/%u\n", "process_work_frame() srce crnt pts:%lld at dest time base:%u/%u\n", "process_work_frame() srce next pts:%lld at dest time base:%u/%u\n", "process_work_frame() work crnt pts >= srce next pts: SKIP FRAME, move on to next frame, do not output a frame\n", "process_work_frame() interpolate:%f/256\n", "process_work_frame() source is:NEXT\n", "process_work_frame() source is:PREV\n", "process_work_frame() interpolate source is:NEXT\n", "process_work_frame() interpolate source is:PREV\n", "process_work_frame() CUT - DON'T INTERPOLATE\n", "process_work_frame() COPY to the work frame\n", "process_work_frame() REPEAT FRAME\n", "process_work_frame() CONSUME FRAME, move to next frame\n", "process_work_frame() output a frame\n", "request_frame()\n", "request_frame() REPEAT or FLUSH\n", "request_frame() nothing else to do, return:EOF\n", "request_frame() FLUSH\n", "request_frame() copy:%d to:%d\n", "request_frame() call source's request_frame()\n", "request_frame() source's request_frame() returned error:%d\n", "request_frame() source's request_frame() returned:%d\n", "Interlaced frame found - the output will not be correct.\n", "get_scene_score16()\n", "get_scene_score16() process\n", "get_scene_score16() result is:%f\n", "blend_frames16() interpolate scene score:%f\n", "blend_frames16() INTERPOLATE to create work frame\n", "get_scene_score()\n", "get_scene_score() process\n", "get_scene_score() result is:%f\n", "blend_frames8() interpolate scene score:%f\n", "blend_frames8() INTERPOLATE to create work frame\n", "framerate", "required output frames per second rate", "interp_start", "point to start linear interpolation", "interp_end", "point to end linear interpolation", "scene change level", "set flags", "scene_change_detect", "enable scene change detection", "libavfilter/vf_framestep.c", "step:%d frame_rate:%d/%d(%f) -> frame_rate:%d/%d(%f)\n", "framestep", "step", "set frame step", "libavfilter/vf_fspp.c", "w * h <= fspp->non_b_qp_alloc_size", "fspp", "set quality", "force a constant quantizer parameter", "strength", "set filter strength", "use_bframe_qp", "use B-frames' QP", "gblur", "set sigma", "steps", "set number of steps", "sigmaV", "set vertical sigma", "libavfilter/vf_geq.c", "A luminance or RGB expression is mandatory\n", "Either YCbCr or RGB but not both must be specified\n", "g(X,Y)", "b(X,Y)", "r(X,Y)", "lum_expr", "set luminance expression", "cb_expr", "set chroma blue expression", "cr_expr", "set chroma red expression", "alpha_expr", "set alpha expression", "red_expr", "set red expression", "green_expr", "set green expression", "blue_expr", "set blue expression", "libavfilter/vf_gradfun.c", "threshold:%.2f radius:%d\n", "gradfun", "The maximum amount by which the filter will change any one pixel.", "radius", "The neighborhood to fit the gradient to.", "hflip", "libavfilter/vf_histeq.c", "strength:%0.3f intensity:%0.3f antibanding:%d\n", "histeq", "set the strength", "set the intensity", "antibanding", "set the antibanding level", "apply no antibanding", "weak", "apply weak antibanding", "strong", "apply strong antibanding", "histogram", "level_height", "set level height", "scale_height", "set scale height", "display_mode", "parade", "levels_mode", "set levels mode", "components", "set color components to display", "fgopacity", "set foreground opacity", "bgopacity", "libavfilter/vf_hqdn3d.c", "ls:%f cs:%f lt:%f ct:%f\n", "hqdn3d", "luma_spatial", "spatial luma strength", "chroma_spatial", "spatial chroma strength", "luma_tmp", "temporal luma strength", "chroma_tmp", "temporal chroma strength", "libavfilter/vf_hqx.c", "fmt:%s size:%dx%d -> size:%dx%d\n", "set scale factor", "libavfilter/vf_hue.c", "Error when evaluating the expression '%s' for %s\n", "H and h options are incompatible and cannot be specified at the same time\n", "H_expr:%s h_deg_expr:%s s_expr:%s b_expr:%s\n", "Saturation value not in range [%d,%d]: clipping value to %0.1f\n", "Brightness value not in range [%d,%d]: clipping value to %0.1f\n", "H:%0.1f*PI h:%0.1f s:%0.1f b:%0.f t:%0.1f n:%d\n", "set the hue angle degrees expression", "set the saturation expression", "set the hue angle radians expression", "set the brightness expression", "libavfilter/vf_hwdownload.c", "Invalid output format %s for hwframe download.\n", "The input must have a hardware frame reference.\n", "Input frames must have hardware context.\n", "Input frame is not the in the configured hwframe context.\n", "Failed to download frame: %d.\n", "hwdownload", "libavfilter/vf_hwmap.c", "Configure hwmap %s -> %s.\n", "Unsupported formats for hwmap: from %s (%s) to %s.\n", "Failed to create frame context for backward mapping: %d.\n", "Mapping requires a hardware context (a device, or frames on input).\n", "Filter input: %s, %ux%u (%lld).\n", "Failed to map frame: %d.\n", "Filter output: %s, %ux%u (%lld).\n", "Failed to allocate source frame for software mapping.\n", "Failed to map frame to software: %d.\n", "hwmap", "Frame mapping mode", "read", "Mapping should be readable", "write", "Mapping should be writeable", "overwrite", "Mapping will always overwrite the entire frame", "direct", "Mapping should not involve any copying", "libavfilter/vf_hwupload.c", "A hardware device reference is required to upload frames to.\n", "No input hwframe context.\n", "Surface format is %s.\n", "Failed to allocate frame to upload to.\n", "Failed to upload frame: %d.\n", "hwupload", "libavfilter/vf_hysteresis.c", "hysteresis", "undetermined", "auto-inserted", "libavfilter/vf_idet.c", "Repeated Fields: Neither:%6lld Top:%6lld Bottom:%6lld\n", "Single frame detection: TFF:%6lld BFF:%6lld Progressive:%6lld Undetermined:%6lld\n", "Multi frame detection: TFF:%6lld BFF:%6lld Progressive:%6lld Undetermined:%6lld\n", "%lld.%0*lld", "neither", "Repeated Field:%12s, Single frame:%12s, Multi frame:%12s\n", "lavfi.idet.repeated.current_frame", "lavfi.idet.repeated.neither", "lavfi.idet.repeated.top", "lavfi.idet.repeated.bottom", "lavfi.idet.single.current_frame", "lavfi.idet.single.tff", "lavfi.idet.single.bff", "lavfi.idet.single.progressive", "lavfi.idet.single.undetermined", "lavfi.idet.multiple.current_frame", "lavfi.idet.multiple.tff", "lavfi.idet.multiple.bff", "lavfi.idet.multiple.progressive", "lavfi.idet.multiple.undetermined", "Final flag accuracy %d\n", "idet", "intl_thres", "set interlacing threshold", "prog_thres", "set progressive threshold", "rep_thres", "set repeat threshold", "half_life", "half life of cumulative statistics", "analyze_interlaced_flag", "set number of frames to use to determine if the interlace flag is accurate", "luma_mode", "select luma mode", "deinterleave", "chroma_mode", "select chroma mode", "alpha_mode", "select alpha mode", "luma_swap", "swap luma fields", "chroma_swap", "swap chroma fields", "alpha_swap", "swap alpha fields", "with", "without", "libavfilter/vf_interlace.c", "input video height is too small\n", "Lowpass filter is disabled, the resulting video will be aliased rather than interlaced.\n", "%s interlacing %s lowpass filter\n", "cols >= 0 || lines >= 0", "video is already interlaced, adjusting framerate only\n", "interlace", "scan", "scanning mode", "set vertical low-pass filter", "kerndeint", "set the threshold", "set the map", "set the order", "sharp", "set sharpening", "twoway", "set twoway", "lenscorrection", "set relative center x", "set relative center y", "set quadratic distortion factor", "set double quadratic distortion factor", "libavfilter/vf_lut2.c", "Error when parsing the expression '%s' for the component %d.\n", "lut2", "srcx", "srcy", "set component #0 expression", "set component #1 expression", "set component #2 expression", "set component #3 expression", "libavfilter/vf_lut3d.c", "Padding on the right (%dpx) of the Hald CLUT will be ignored\n", "Padding at the bottom (%dpx) of the Hald CLUT will be ignored\n", "The Hald CLUT width does not match the level\n", "Too large Hald CLUT (maximum level is %d, or %dx%d CLUT)\n", "Unexpected EOF\n", "%d %d %d", "LUT_3D_SIZE ", "Too large or invalid 3D LUT size\n", "DOMAIN_", "MIN ", "MAX ", "%f %f %f", "min: %f %f %f | max: %f %f %f\n", "values", "in and out must be defined\n", "invalid in (%d) or out (%d)\n", "Unable to guess the format from the extension\n", "3DLUTSIZE ", "cube", "Unrecognized '.%s' file type\n", "3D LUT is empty\n", "haldclut", "clut", "continue applying the last clut after eos", "select interpolation mode", "interp_mode", "nearest", "use values from the nearest defined points", "trilinear", "interpolate values using the 8 points defining a cube", "tetrahedral", "interpolate values using a tetrahedron", "lut3d", "set 3D LUT file name", "libavfilter/vf_lut.c", "Error when parsing the expression '%s' for the component %d and color %d.\n", "val[%d][%d] = %d\n", "negval", "negate_alpha:%d\n", "negate", "negate_alpha", "lutrgb", "lutyuv", "clip", "gammaval", "gammaval709", "clipval", "set Y expression", "set U expression", "set V expression", "set R expression", "set G expression", "set B expression", "set A expression", "maxval", "minval", "libavfilter/vf_maskedclamp.c", "maskedclamp", "dark", "bright", "undershoot", "set undershoot", "overshoot", "set overshoot", "libavfilter/vf_maskedmerge.c", "maskedmerge", "mask", "libavfilter/vf_mcdeint.c", "Snow encoder is not enabled in libavcodec\n", "memc_only", "no_bitstream", "mcdeint", "extra_slow", "set the assumed picture field parity", "set qp", "libavfilter/vf_mergeplanes.c", "input #%d link %s SAR %d:%d does not match output link %s SAR %d:%d\n", "input %d does not have %d plane\n", "output plane %d depth %d does not match input %d plane %d depth %d\n", "output plane %d width %d does not match input %d plane %d width %d\n", "output plane %d height %d does not match input %d plane %d height %d\n", "Only planar formats with more than one component are supported.\n", "Mapping with out of range input and/or plane number.\n", "s->nb_inputs && s->nb_inputs <= 4", "mergeplanes", "mapping", "set input to output plane mapping", "set output pixel format", "mestimate", "method", "motion estimation method", "three step search", "tdls", "two dimensional logarithmic search", "ntss", "new three step search", "four step search", "diamond search", "hexbs", "hexagon-based search", "enhanced predictive zonal search", "uneven multi-hexagon search", "mb_size", "macroblock size", "search_param", "search parameter", "libavfilter/vf_midequalizer.c", "midequalizer", "libavfilter/vf_minterpolate.c", "Initializing out pts from input pts %lld\n", "minterpolate", "output's frame rate", "mi_mode", "motion interpolation mode", "duplicate frames", "blend frames", "motion compensated interpolation", "mc_mode", "motion compensation mode", "overlapped block motion compensation", "aobmc", "adaptive overlapped block motion compensation", "me_mode", "motion estimation mode", "bidirectional motion estimation", "bilat", "bilateral motion estimation", "vsbmc", "variable-size block motion compensation", "scene change detection method", "disable detection", "fdiff", "frame difference", "scd_threshold", "libavfilter/vf_mpdecimate.c", "max_drop_count:%d hi:%d lo:%d frac:%f\n", "keep", "%d>=hi ", "lo:%d>=%d ", "lo:%d<%d ", "%s pts:%s pts_time:%s drop_count:%d\n", "mpdecimate", "set the maximum number of consecutive dropped frames (positive), or the minimum interval between dropped frames (negative)", "set high dropping threshold", "set low dropping threshold", "frac", "set fraction dropping threshold", "erosion", "dilation", "inflate", "threshold0", "set threshold for 1st plane", "threshold1", "set threshold for 2nd plane", "threshold2", "set threshold for 3rd plane", "threshold3", "set threshold for 4th plane", "coordinates", "set coordinates", "libavfilter/vf_nlmeans.c", "(s->max_meaningful_diff - 1) * s->pdiff_lut_scale < (sizeof(s->weight_lut) / sizeof((s->weight_lut)[0]))", "Luma research window size must be odd, setting it to %d\n", "Luma patch size must be odd, setting it to %d\n", "Chroma research window size must be odd, setting it to %d\n", "Chroma patch size must be odd, setting it to %d\n", "Research window: %dx%d / %dx%d, patch size: %dx%d / %dx%d\n", "nlmeans", "denoising strength", "patch size", "patch size for chroma planes", "research window", "research window for chroma planes", "libavfilter/vf_nnedi.c", "No weights file provided, aborting!\n", "Couldn't seek to the end of weights file.\n", "Couldn't get size of weights file.\n", "Unexpected weights file size.\n", "Couldn't seek to the start of weights file.\n", "Couldn't read weights file.\n", "nnedi", "weights", "set weights file", "nnedi3_weights.bin", "set which frames to deinterlace", "set mode of operation", "use frame flags, both fields", "use frame flags, single field", "use top field only", "use bottom field only", "use both fields, top first", "use both fields, bottom first", "set which planes to process", "nsize", "set size of local neighborhood around each pixel, used by the predictor neural network", "s8x6", "s16x6", "s32x6", "s48x6", "s8x4", "s16x4", "s32x4", "set number of neurons in predictor neural network", "n128", "n256", "qual", "etype", "set which set of weights to use in the predictor", "weights trained to minimize absolute error", "weights trained to minimize squared error", "pscrn", "set prescreening", "fapprox", "all_seed", "set component #0 noise seed", "all_strength", "set component #0 strength", "alls", "all_flags", "set component #0 flags", "allf", "averaged noise", "(semi)regular pattern", "temporal noise", "uniform noise", "c0_seed", "c0_strength", "c0_flags", "c1_seed", "set component #1 noise seed", "c1_strength", "set component #1 strength", "c1_flags", "set component #1 flags", "c2_seed", "set component #2 noise seed", "c2_strength", "set component #2 strength", "c2_flags", "set component #2 flags", "c3_seed", "set component #3 noise seed", "c3_strength", "set component #3 strength", "c3_flags", "set component #3 flags", "libavfilter/vf_overlay.c", "The rgb option is deprecated and is overriding the format option, use format instead\n", "Incoming frame (time:%s) from link #%d\n", "x:%f xi:%d y:%f yi:%d\n", "n:%f t:%f pos:%f x:%f xi:%d y:%f yi:%d\n", "main w:%d h:%d fmt:%s overlay w:%d h:%d fmt:%s eof_action:%s\n", "set the x expression", "set the y expression", "eof_action", "Action to take when encountering EOF from secondary input ", "repeat", "Repeat the previous frame.", "endall", "End both streams.", "pass", "Pass through the main input.", "force packed RGB in input and output (deprecated)", "set output format", "yuv420", "yuv422", "yuv444", "gbrp", "repeat overlay of the last overlay frame", "main_w", "main_h", "overlay_w", "overlay_h", "owdenoise", "set depth", "luma_strength", "set luma strength", "chroma_strength", "set chroma strength", "libavfilter/vf_pad.c", "Negative values are not acceptable.\n", "w:%d h:%d -> w:%d h:%d x:%d y:%d color:0x%02X%02X%02X%02X\n", "Input area %d:%d:%d:%d not within the padded area 0:0:%d:%d or zero-sized\n", "Direct padding impossible allocating new frame\n", "set the pad area width expression", "set the pad area height expression", "set the x offset expression for the input image position", "set the y offset expression for the input image position", "set the color of the padded area border", "eval expressions during initialization and per-frame", "(+1)", "libavfilter/vf_palettegen.c", "Unable to allocate references for %d different colors\n", "box->len >= 1", "new_box->len >= 1", "lavfi.color_quant_ratio", "%d%s colors generated out of %d colors; ratio=%f\n", "Dupped color: %08X\n", "s->nb_boxes < 256", "palettegen", "max_colors", "set the maximum number of colors to use in the palette", "reserve_transparent", "reserve a palette entry for transparency", "stats_mode", "set statistics mode", "compute full frame histograms", "diff", "compute histograms only for the part that differs from previous frame", "compute new histogram for each frame", "libavfilter/vf_paletteuse.c", "Palette input must contain exactly %d pixels. Specified input has %dx%d=%d pixels\n", "%*cnode%d [label=\"%c%02X%c%02X%c%02X%c\" fillcolor=\"#%02x%02x%02x\" fontcolor=\"#%06X\"]\n", "%*cnode%d -> node%d\n", "digraph {\n", "    node [style=filled fontsize=10 shape=box]\n", "/!\\ %02X%02X%02X: %d ! %d (%06X ! %06X) / dist: %d ! %d\n", "Accuracy check passed\n", "MEP:%.3f TotalMEP:%.3f\n", "paletteuse", "palette", "select dithering mode", "dithering_mode", "bayer", "ordered 8x8 bayer dithering (deterministic)", "heckbert", "dithering as defined by Paul Heckbert in 1982 (simple error diffusion)", "floyd_steinberg", "Floyd and Steingberg dithering (error diffusion)", "sierra2", "Frankie Sierra dithering v2 (error diffusion)", "sierra2_4a", "Frankie Sierra dithering v2 \"Lite\" (error diffusion)", "bayer_scale", "set scale for bayer dithering", "diff_mode", "set frame difference mode", "rectangle", "process smallest different rectangle", "debug_kdtree", "save Graphviz graph of the kdtree in specified file", "color_search", "set reverse colormap color search method", "nns_iterative", "iterative search", "nns_recursive", "recursive search", "bruteforce", "brute-force into the palette", "mean_err", "compute and print mean error", "debug_accuracy", "test color search accuracy", "take new palette for each output frame", "libavfilter/vf_perspective.c", "perspective", "set top left x coordinate", "set top left y coordinate", "set top right x coordinate", "set top right y coordinate", "set bottom left x coordinate", "set bottom left y coordinate", "set bottom right x coordinate", "set bottom right y coordinate", "interpolation", "set interpolation", "sense", "specify the sense of the coordinates", "specify locations in source to send to corners in destination", "destination", "specify locations in destination to send corners of source", "libavfilter/vf_phase.c", "mode=%c tdiff=%f bdiff=%f pdiff=%f\n", "set phase mode", "top first analyze", "bottom first analyze", "analyze", "full analyze", "auto analyze", "pixdesctest", "set thresholding mode", "hard", "hard thresholding", "soft", "soft thresholding", "medium thresholding", "libavfilter/vf_premultiply.c", "First input link %s parameters (size %dx%d) do not match the corresponding second input link %s parameters (%dx%d) ", "premultiply", "libavfilter/vf_psnr.c", "stats_add_max was specified but stats_version < 2.\n", "Could not open stats file %s: %s\n", "%0.2f", "%s%c", "Width and height of input videos must be same.\n", "Inputs must be of same pixel format.\n", " %c:%f", "PSNR%s average:%f min:%f max:%f\n", "lavfi.psnr.mse.", "lavfi.psnr.psnr.", "lavfi.psnr.mse_avg", "lavfi.psnr.psnr_avg", "psnr_log_version:2 fields:n", ",mse_avg", ",mse_%c", ",psnr_avg", ",psnr_%c", ",max_avg", ",max_%c", "n:%lld mse_avg:%0.2f ", "mse_%c:%0.2f ", "psnr_avg:%0.2f ", "psnr_%c:%0.2f ", "max_avg:%d ", "max_%c:%d ", "reference", "stats_file", "Set file where to store per-frame difference information", "stats_version", "Set the format version for the stats file.", "output_max", "Add raw stats (max values) to the output log.", "libavfilter/vf_pullup.c", "input format does not have such plane\n", "w: %d h: %d\n", "offset: %d length: %d\n", "Could not get buffer!\n", "pullup", "set left junk size", "set right junk size", "set top junk size", "set bottom junk size", "set strict breaks", "set metric plane", "luma", "chroma blue", "chroma red", "known", "set qp expression", "frames", "set number of frames in cache", "set the seed", "libavfilter/vf_readeia608.c", "Last line to scan too large, clipping.\n", "Invalid range.\n", "lavfi.readeia608.%d.cc", "0x%02X%02X", "lavfi.readeia608.%d.line", "readeia608", "scan_min", "set from which line to scan for codes", "scan_max", "set to which line to scan for codes", "set minimal acceptable amplitude change for sync codes detection", "set ratio of width reserved for sync code detection", "set max peaks height difference for sync code detection", "set max peaks period difference for sync code detection", "set first two max start code bits differences", "set min ratio of bits height compared to 3rd start code bit", "th_w", "set white color threshold", "th_b", "set black color threshold", "check and apply parity bit", "libavfilter/vf_readvitc.c", "Black color threshold is higher than white color threshold (%g > %g)\n", "threshold_black:%d threshold_white:%d threshold_gray:%d\n", "w:%d h:%d grp_width:%d scan_max:%d\n", "lavfi.readvitc.found", "%02u:%02u:%02u%c%02u", "lavfi.readvitc.tc_str", "readvitc", "maximum line numbers to scan for VITC data", "thr_b", "black color threshold", "thr_w", "white color threshold", "libavfilter/vf_remap.c", "Second input link %s parameters (size %dx%d) do not match the corresponding third input link %s parameters (%dx%d)\n", "remap", "removegrain", "set mode for 1st plane", "set mode for 2nd plane", "set mode for 3rd plane", "set mode for 4th plane", "libavfilter/vf_removelogo.c", "Mask image size %dx%d does not match with the input video size %dx%d\n", "The bitmap file name is mandatory\n", "full x1:%d x2:%d y1:%d y2:%d max_mask_size:%d\n", "half x1:%d x2:%d y1:%d y2:%d max_mask_size:%d\n", "removelogo", "set bitmap filename", "libavfilter/vf_repeatfields.c", "Unexpected field flags: state=%d top_field_first=%d repeat_first_field=%d\n", "repeatfields", "angle", "libavfilter/vf_rotate.c", "Error when parsing the expression '%s' for angle command\n", "Error occurred parsing angle expression '%s'\n", "Error parsing or evaluating expression for option %s: invalid expression '%s' or non-positive or indefinite value %f\n", "n:%f time:%f angle:%f/PI\n", "rotate", "rotw", "roth", "set angle (in radians)", "set output width expression", "set output height expression", "fillcolor", "set background fill color", "bilinear", "use bilinear interpolation", "libavfilter/vf_sab.c", "luma_radius:%f luma_pre_filter_radius::%f luma_strength:%f chroma_radius:%f chroma_pre_filter_radius:%f chroma_strength:%f\n", "set luma radius", "luma_pre_filter_radius", "set luma pre-filter radius", "lpfr", "set chroma radius", "chroma_pre_filter_radius", "set chroma pre-filter radius", "cpfr", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "libavfilter/vf_scale.c", "w:%d h:%d fmt:%s sar:%d/%d -> w:%d h:%d fmt:%s sar:%d/%d flags:0x%0x\n", "Size and width/height expressions cannot be set at the same time.\n", "Invalid size '%s'\n", "w:%s h:%s flags:'%s' interl:%d\n", "Detected unsupported YCgCo colorspace.\n", "scale2ref", "Output video width", "Output video height", "Flags to pass to libswscale", "interl", "set interlacing", "in_color_matrix", "set input YCbCr type", "out_color_matrix", "set output YCbCr type", "in_range", "set input color range", "out_range", "set output color range", "in_v_chr_pos", "input vertical chroma position in luma grid/256", "in_h_chr_pos", "input horizontal chroma position in luma grid/256", "out_v_chr_pos", "output vertical chroma position in luma grid/256", "out_h_chr_pos", "output horizontal chroma position in luma grid/256", "force_original_aspect_ratio", "decrease or increase w/h if necessary to keep the original AR", "force_oar", "disable", "decrease", "increase", "Scaler param 0", "Scaler param 1", "nb_slices", "set the number of slices (debug purpose only)", "libavfilter/vf_selectivecolor.c", "Invalid %s adjustments (%g %g %g %g). Settings must be set in [-1;1] range\n", " none", "Unsupported selective color file version %d, the settings might not be loaded properly\n", "%c value of first CMYK entry is not 0 but %d\n", "CMYK", "%f %f %f %f", "Adjustments:%s\n", "%8ss: C=%6g M=%6g Y=%6g K=%6g\n", "selectivecolor", "correction_method", "select correction method", "reds", "adjust red regions", "yellows", "adjust yellow regions", "greens", "adjust green regions", "cyans", "adjust cyan regions", "blues", "adjust blue regions", "magentas", "adjust magenta regions", "whites", "adjust white regions", "neutrals", "adjust neutral regions", "blacks", "adjust black regions", "set Photoshop selectivecolor file name", "yellow", "cyan", "magenta", "neutral", "libavfilter/vf_separatefields.c", "height must be even\n", "separatefields", "setfield", "select interlace mode", "keep the same input field", "mark as bottom-field-first", "mark as top-field-first", "prog", "mark as progressive", "libavfilter/vf_showinfo.c", "config %s time_base: %d/%d, frame_rate: %d/%d\n", "n:%4lld pts:%7s pts_time:%-7s pos:%9lld fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c checksum:%08X plane_checksum:[%08X", " %08X", "] mean:[", "%lld ", "%3.1f ", "pan/scan", "A/53 closed captions (%d bytes)", "stereoscopic information: ", "type - ", "side by side", "top and bottom", "frame alternate", "checkerboard", "interleaved lines", "interleaved columns", "side by side (quincunx subsampling)", " (inverted)", "displaymatrix: rotation of %.2f degrees", "afd: value of %u", "unknown side data type %d (%d bytes)", "showinfo", "showpalette", "set pixel box size", "libavfilter/vf_shuffleframes.c", "Index out of range.\n", "shuffleframes", "set destination indexes of input frames", "libavfilter/vf_shuffleplanes.c", "Non-existing input plane #%d mapped to output plane #%d.\n", "Cannot map between a subsampled chroma plane and a luma or alpha plane.\n", "Cannot map between a palette plane and a data plane.\n", "shuffleplanes", "map0", "Index of the input plane to be used as the first output plane ", "map1", "Index of the input plane to be used as the second output plane ", "map2", "Index of the input plane to be used as the third output plane ", "map3", "Index of the input plane to be used as the fourth output plane ", "lavfi.signalstats.YMIN", "lavfi.signalstats.YLOW", "lavfi.signalstats.YAVG", "lavfi.signalstats.YHIGH", "lavfi.signalstats.YMAX", "lavfi.signalstats.UMIN", "lavfi.signalstats.ULOW", "lavfi.signalstats.UAVG", "lavfi.signalstats.UHIGH", "lavfi.signalstats.UMAX", "lavfi.signalstats.VMIN", "lavfi.signalstats.VLOW", "lavfi.signalstats.VAVG", "lavfi.signalstats.VHIGH", "lavfi.signalstats.VMAX", "lavfi.signalstats.SATMIN", "lavfi.signalstats.SATLOW", "lavfi.signalstats.SATAVG", "lavfi.signalstats.SATHIGH", "lavfi.signalstats.SATMAX", "lavfi.signalstats.HUEMED", "lavfi.signalstats.HUEAVG", "lavfi.signalstats.YDIF", "lavfi.signalstats.UDIF", "lavfi.signalstats.VDIF", "lavfi.signalstats.YBITDEPTH", "lavfi.signalstats.UBITDEPTH", "lavfi.signalstats.VBITDEPTH", "lavfi.signalstats.%s", "signalstats", "Generate statistics from video analysis.", "TOUT", "VREP", "BRNG", "stat", "set statistics filters", "filters", "tout", "analyze pixels for temporal outliers", "vrep", "analyze video lines for vertical line repetition", "brng", "analyze for pixels outside of broadcast range", "set video filter", "highlight pixels that depict temporal outliers", "highlight video lines that depict vertical line repetition", "highlight pixels that are outside of broadcast range", "set highlight color", "libavfilter/vf_signature.c", "Input dimension too high for precise calculation, numbers will be rounded.\n", "./libavcodec/put_bits.h", "The filename must contain %%d or %%0nd, if you have more than one input.\n", "libavfilter/signature_lookup.c", "Could not allocate memory", "av_get_frame_filename(filename, sizeof(filename), sic->filename, input) == 0", "cannot open xml file %s: %s\n", "<?xml version='1.0' encoding='ASCII' ?>\n", "<Mpeg7 xmlns=\"urn:mpeg:mpeg7:schema:2001\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:mpeg:mpeg7:schema:2001 schema/Mpeg7-2001.xsd\">\n", "  <DescriptionUnit xsi:type=\"DescriptorCollectionType\">\n", "    <Descriptor xsi:type=\"VideoSignatureType\">\n", "      <VideoSignatureRegion>\n", "        <VideoSignatureSpatialRegion>\n", "          <Pixel>0 0 </Pixel>\n", "          <Pixel>%d %d </Pixel>\n", "        </VideoSignatureSpatialRegion>\n", "        <StartFrameOfSpatialRegion>0</StartFrameOfSpatialRegion>\n", "        <MediaTimeUnit>%d</MediaTimeUnit>\n", "        <MediaTimeOfSpatialRegion>\n", "          <StartMediaTimeOfSpatialRegion>0</StartMediaTimeOfSpatialRegion>\n", "          <EndMediaTimeOfSpatialRegion>%llu</EndMediaTimeOfSpatialRegion>\n", "        </MediaTimeOfSpatialRegion>\n", "        <VSVideoSegment>\n", "          <StartFrameOfSegment>%u</StartFrameOfSegment>\n", "          <EndFrameOfSegment>%u</EndFrameOfSegment>\n", "          <MediaTimeOfSegment>\n", "            <StartMediaTimeOfSegment>%llu</StartMediaTimeOfSegment>\n", "            <EndMediaTimeOfSegment>%llu</EndMediaTimeOfSegment>\n", "          </MediaTimeOfSegment>\n", "          <BagOfWords>", "%d  %d  %d  %d  %d  %d  %d  %d  ", "%d  %d  %d ", "</BagOfWords>\n", "        </VSVideoSegment>\n", "        <VideoFrame>\n", "          <MediaTimeOfFrame>%llu</MediaTimeOfFrame>\n", "          <FrameConfidence>%d</FrameConfidence>\n", "          <Word>", "</Word>\n", "          <FrameSignature>", " %d ", "</FrameSignature>\n", "        </VideoFrame>\n", "      </VideoSignatureRegion>\n", "    </Descriptor>\n", "  </DescriptionUnit>\n", "</Mpeg7>\n", "cannot open file %s: %s\n", "Stage 1: got coarsesignature pair. indices of first frame: %u and %u\n", "Stage 2: calculate matching parameters\n", "Stage 3: evaluate\n", "Stage 2: matching pair at %u and %u, ratio %f, offset %d\n", "Stage 3: best matching pair at %u and %u, ratio %f, offset %d, score %d, %d frames matching\n", "matching of video %d at %f and %d at %f, %d frames matching\n", "whole video matching\n", "no matching of video %d and %d\n", "input %d, confidence: %d\n", "words:", " %d:", "framesignature:", "signature", "detectmode", "set the detectmode", "number of inputs", "filename for output files", "binary", "th_d", "threshold to detect one word as similar", "th_dc", "threshold to detect all words as similar", "th_xh", "threshold to detect frames as similar", "th_di", "minimum length of matching sequence in frames", "th_it", "threshold for relation of good to all frames", "libavfilter/vf_smartblur.c", "luma_radius:%f luma_strength:%f luma_threshold:%d chroma_radius:%f chroma_strength:%f chroma_threshold:%d\n", "smartblur", "luma_threshold", "set luma threshold", "chroma_threshold", "set chroma threshold", "libavfilter/vf_spp.c", "w * h <= s->non_b_qp_alloc_size", "libavfilter/vf_ssim.c", "lavfi.ssim.", "lavfi.ssim.All", "lavfi.ssim.dB", "n:%lld ", "%c:%f ", "All:%f (%f)\n", " %c:%f (%f)", "SSIM%s All:%f (%f)\n", "libavfilter/vf_stack.c", "Input %d width %d does not match input %d width %d.\n", "Input %d height %d does not match input %d height %d.\n", "vstack", "hstack", "libavfilter/vf_stereo3d.c", "width must be even\n", "input format %d is not supported\n", "Only 720 and 1080 height supported\n", "output format %d is not supported\n", "stereo3d", "set input format", "ab2l", "above below half height left first", "ab2r", "above below half height right first", "above below left first", "above below right first", "alternating frames left first", "alternating frames right first", "sbs2l", "side by side half width left first", "sbs2r", "side by side half width right first", "sbsl", "side by side left first", "sbsr", "side by side right first", "interleave rows left first", "interleave rows right first", "interleave columns left first", "interleave columns right first", "agmc", "anaglyph green magenta color", "agmd", "anaglyph green magenta dubois", "agmg", "anaglyph green magenta gray", "agmh", "anaglyph green magenta half color", "arbg", "anaglyph red blue gray", "arcc", "anaglyph red cyan color", "arcd", "anaglyph red cyan dubois", "arcg", "anaglyph red cyan gray", "arch", "anaglyph red cyan half color", "argg", "anaglyph red green gray", "aybc", "anaglyph yellow blue color", "aybd", "anaglyph yellow blue dubois", "aybg", "anaglyph yellow blue gray", "aybh", "anaglyph yellow blue half color", "mono left", "mono right", "checkerboard left first", "checkerboard right first", "hdmi", "HDMI frame pack", "libavfilter/vf_super2xsai.c", "super2xsai", "swaprect", "set rect width", "set rect height", "set 1st rect x top left coordinate", "set 1st rect y top left coordinate", "set 2nd rect x top left coordinate", "set 2nd rect y top left coordinate", "swapuv", "libavfilter/vf_telecine.c", "Telecine pattern %s yields up to %d frames per frame, pts advance factor: %d/%d\n", "telecine", "libavfilter/vf_threshold.c", "First input link %s parameters (size %dx%d) do not match the corresponding second input link %s parameters (%dx%d) and/or third input link %s parameters (%dx%d) and/or fourth input link %s parameters (%dx%d)\n", "libavfilter/vf_thumbnail.c", "frame id #%d (pts_time=%f) selected from a set of %d images\n", "Allocation failure, try to lower the number of frames\n", "batch size: %d frames\n", "thumbnail", "set the frames batch size", "libavfilter/vf_tile.c", "Tile size %ux%u is insane.\n", "nb_frames must be less than or equal to %dx%d=%d\n", "Total width %ux%u is too much.\n", "Total height %ux%u is too much.\n", "tile", "layout", "set grid size", "set maximum number of frame to render", "margin", "set outer border margin in pixels", "padding", "set inner border thickness in pixels", "set the color of the unused area", "libavfilter/vf_tinterlace.c", "low_pass_filter flag ignored with mode %d\n", "mode:%d filter:%s h:%d -> h:%d\n", "tinterlace", "merge", "merge fields", "drop_even", "drop even fields", "drop_odd", "drop odd fields", "pad alternate lines with black", "interleave_top", "interleave top and bottom fields", "interleave_bottom", "interleave bottom and top fields", "interlacex2", "interlace fields from two consecutive frames", "mergex2", "merge fields keeping same frame rate", "low_pass_filter", "enable vertical low-pass filter", "vlpf", "exact_tb", "force a timebase which can represent timestamps exactly", "counterclockwise", "clockwise", "libavfilter/vf_transpose.c", "dir values greater than 3 are deprecated, use the passthrough option instead\n", "w:%d h:%d -> w:%d h:%d (passthrough mode)\n", "w:%d h:%d dir:%d -> w:%d h:%d rotation:%s vflip:%d\n", "transpose", "set transpose direction", "cclock_flip", "rotate counter-clockwise with vertical flip", "clock", "rotate clockwise", "cclock", "rotate counter-clockwise", "clock_flip", "rotate clockwise with vertical flip", "passthrough", "do not apply transposition if the input matches the specified geometry", "always apply transposition", "portrait", "preserve portrait geometry", "landscape", "preserve landscape geometry", "sharpen", "libavfilter/vf_unsharp.c", "Invalid even size for %s matrix size %dx%d\n", "effect:%s type:%s msize_x:%d msize_y:%d amount:%0.2f\n", "luma or chroma matrix size too big\n", "unsharp", "luma_msize_x", "set luma matrix horizontal size", "luma_msize_y", "set luma matrix vertical size", "luma_amount", "set luma effect strength", "chroma_msize_x", "set chroma matrix horizontal size", "chroma_msize_y", "set chroma matrix vertical size", "chroma_amount", "set chroma effect strength", "libavfilter/vf_uspp.c", "w * h <= uspp->non_b_qp_alloc_size", "Encoding failed\n", "SNOW encoder not found.\n", "avctx_enc->codec", "uspp", "vaguedenoiser", "set filtering strength", "set filtering method", "garrote", "garotte thresholding", "nsteps", "percent", "set percent of full denoising", "libavfilter/vf_vectorscope.c", "low threshold should be less than high threshold\n", "vectorscope", "set vectorscope mode", "color3", "color4", "color5", "set color component on X axis", "set color component on Y axis", "envelope", "set envelope", "instant", "peak+instant", "graticule", "set graticule", "set graticule opacity", "set graticule flags", "draw white point", "draw black point", "name", "draw point name", "lthreshold", "hthreshold", "set colorspace", "vflip", "libavfilter/vf_vignette.c", "Unable to parse expression for 'angle'\n", "Unable to parse expression for 'x0'\n", "Unable to parse expression for 'y0'\n", "xscale=%f yscale=%f dmax=%f\n", "vignette", "set lens angle", "PI/5", "set circle center position on x-axis", "set circle center position on y-axis", "set forward/backward mode", "forward", "backward", "eval expressions for each frame", "set dithering", "set aspect ratio", "w3fdif", "specify the filter", "complex", "waveform", "1600", "2400", "3200", "4000", "2048", "3760", "3840", "4095", "1023", "column", "set mirroring", "display", "stack", "set components to display", "set envelope to display", "set filter", "flat", "aflat", "acolor", "numbers", "draw numbers", "dots", "draw dots instead of lines", "digital", "millivolts", "weave", "set first field", "set top field first", "set bottom field first", "libavfilter/vf_yadif.c", "yadif", "send_frame_nospatial", "send one frame for each frame, but skip spatial interlacing check", "send_field_nospatial", "send one frame for each field, but skip spatial interlacing check", "libavfilter/vf_zoompan.c", "s->in == ((void *)0)", "zoompan", "set the zoom expression", "set the duration expression", "set the output image size", "set the output framerate", "pduration", "time", "pzoom", "nullsink", "libavfilter/vsrc_cellauto.c", "w:%d\n", "The specified width is %d which cannot contain the provided string width of %d\n", "%d %c\n", "320x518", "Only one of the filename or pattern options can be used\n", "s:%dx%d r:%d/%d rule:%d stitch:%d scroll:%d full:%d seed:%u\n", "cellauto", "read initial pattern from file", "set initial pattern", "rule", "set rule", "random_fill_ratio", "set fill ratio for filling initial grid randomly", "random_seed", "set the seed for filling the initial grid randomly", "scroll pattern downward", "start_full", "start filling the whole video", "stitch", "stitch boundaries", "320x240", "bBsS", "libavfilter/vsrc_life.c", "Invalid rule code '%s' provided\n", "Mold color is set while mold isn't, ignoring the color.\n", "h:%d max_w:%d\n", "The specified size is %dx%d which cannot contain the provided file size of %dx%d\n", "%d:%d %c\n", "s:%dx%d r:%d/%d rule:%s stay_rule:%d born_rule:%d stitch:%d seed:%u\n", "life", "set source file", "B3/S23", "mold", "set mold speed for dead cells", "life_color", "set life color", "death_color", "set death color", "mold_color", "set mold color", "libavfilter/vsrc_mandelbrot.c", "Mandelbrot cache is too small!\n", "mandelbrot", "set frame size", "set frame rate", "maxiter", "set max iterations number", "start_x", "set the initial x position", "start_y", "set the initial y position", "start_scale", "set the initial scale value", "end_scale", "set the terminal scale value", "set the terminal pts value", "bailout", "set the bailout value", "morphxf", "set morph x frequency", "morphyf", "set morph y frequency", "morphamp", "set morph amplitude", "outer", "set outer coloring mode", "iteration_count", "set iteration count mode", "normalized_iteration_count", "set normalized iteration count mode", "set white mode", "outz", "set outz mode", "inner", "set inner coloring mode", "set black mode", "period", "set period mode", "convergence", "show time until convergence", "mincol", "color based on point closest to the origin of the iterations", "libavfilter/vsrc_mptestsrc.c", "rate:%d/%d duration:%f\n", "mptestsrc", "set video duration", "test", "set test to perform", "dc_luma", "dc_chroma", "freq_luma", "freq_chroma", "amp_luma", "amp_chroma", "ring1", "ring2", "libavfilter/vsrc_testsrc.c", "size:%dx%d rate:%d/%d duration:%f sar:%d/%d\n", "ff_draw_init(&s->draw, inlink->format, 0) >= 0", "w == h && w == level*level*level", "x + w <= test->w", "y + h <= test->h", "%02d:%02d:%02d.%03d\n%12lli", "allrgb", "set video sample aspect ratio", "allyuv", "smptehdbars", "smptebars", "yuvtestsrc", "rgbtestsrc", "testsrc2", "testsrc", "decimals", "set number of decimals to show", "nullsrc", "haldclutsrc", "set level", "libavfilter/window_func.c", "audio/aac,audio/aacp,audio/x-aac", "libavformat/apetag.c", "Invalid APE tag key '%s'.\n", "APE tag size too large.\n", "Skipping binary tag '%s'.\n", "Error reading cover art.\n", "APETAGEX", "Unsupported tag version. (>=%d)\n", "Tag size is way too big\n", "Invalid tag size %u.\n", "Too many tag fields (%u)\n", "APE Tag is a header\n", "Non ASCII keys are not allowed\n", "libavformat/async.c", "pthread_join(): %s\n", "async:", "ffurl_open failed : %s, %s\n", "pthread_mutex_init failed : %s\n", "pthread_cond_init failed : %s\n", "pthread_create failed : %s\n", "async_seek: AVSEEK_SIZE: %lld\n", "async_seek: %lld\n", "async_seek: fask_seek %lld from %d dist:%d/%d\n", "async", "Async", "libavformat/aviobuf.c", "Invalid UTF8 sequence in avio_put_str16%s\n", "!s->write_flag", "Failed to decrease buffer size\n", "len >= s->orig_buffer_size", "Statistics: %d seeks, %d writeouts\n", "Statistics: %lld bytes read, %d seeks\n", "err:%d", "AVIOContext", "protocol_whitelist", "List of protocols that are allowed to be used", "set aptr", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.", "subfile,", "libavformat/avio.c", "AVERROR(EBADF)", "AVERROR(EIO)", "Impossible to open the '%s' protocol for reading\n", "Impossible to open the '%s' protocol for writing\n", "AVERROR(ENOMEM)", "subfile", "AVERROR(EINVAL)", "AVERROR_OPTION_NOT_FOUND", "Key '%s' not found.\n", "Error parsing options string %s\n", "https:", "https protocol not found, recompile FFmpeg with openssl, gnutls or securetransport enabled.\n", "AVERROR(ENOSYS)", "!(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || (uc->protocol_whitelist && !strcmp(uc->protocol_whitelist, e->value))", "protocol_blacklist", "!(e=av_dict_get(*options, \"protocol_blacklist\", ((void *)0), 0)) || (uc->protocol_blacklist && !strcmp(uc->protocol_blacklist, e->value))", "Protocol '%s' not on whitelist '%s'!\n", "Protocol '%s' on blacklist '%s'!\n", "Setting default whitelist '%s'\n", "No default whitelist set\n", "ret:%d", "!whitelist || !(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || !strcmp(whitelist, e->value)", "!blacklist || !(e=av_dict_get(*options, \"protocol_blacklist\", ((void *)0), 0)) || !strcmp(blacklist, e->value)", "URLContext", "List of protocols that are not allowed to be used", "rw_timeout", "Timeout for IO operations (in microseconds)", "libavformat/clfp.c", "seek is AVERROR(EINVAL)", "set file size:%lld", "set file pos:%lld", "node null file seek:%lld cache miss", "file seek:%lld cache miss,node pos:%lld, fill:%lld", "file seek:%lld hit", "for pos :%lld no cache", "for pos :%lld, cache end is:%lld", "read file fail node is null pos:%lld,ret:%d", "node illegalpos:%lld,node pos:%lld,fill:%lld", "read file suc,pos:%lld,ret:%d", "file path is null.", "file path%s", "file size:%ld", "open file fail", "open fail.rSize:%d,head size:%d,head key:%x", "open fail.rSize:%d,box.length:%d,box.head:%x", "open fail.rSize:%d,head size:%d,key:%x,entry_buf_size:%d", "entry_buf_size:%d,box.crc:%d,rSize:%d", "open fail", "new node, pos:%lld, fill:%lld", "c->cache_file_key:%s", "input filekey size:%dnot equal read file_key size:%d", "read cache_file_key:%s", "cache_file_key not equal open fail", "open file suc!", "open file fail!", "open file fail,create file!", "open and create file fail!", "clfp open suc,file size:%lld, sum_entry:%d!", "disk is not enough,free is %lld,min is %lld", "seek in cache failed\n", "write suc pos:%lld,ret:%d,size:%d", "write in cache failed\n", "=======inser node,create head:%lld,fill:%lld", "$$$$$$inser node,for prev:%lld,fill:%lld", "======inser node for newpos:%lld,fill:%lld", "******inser node,for next:%lld,fill:%lld", "======before write, node is pos:%lld,fill:%lld", "######after write, node is pos:%lld,fill:%lld buf end:%lld", "clfp close", "node num:%d", "file_size is:%lld", "save node pos:%lld,fill:%lld,end:%lld", "clfp", "set log handle for log", "cache_file_open_mode", "open local file", "cache_file_path", "set cache file path", "cache_file_key", "set cache file key", "min_disk_free_space", "min free disk free space", "libavformat/cnhp.c", "---->stop thread wait join", "=====stop thread join ok", "cnhp close finish", "pos:%lld, filesize:%lld not need open net", "open async open thread fail\n", "-----thread create ok", "cache is null or flag is not open", "seek pos:%lld,next cache pos:%lld, net pos:%lld", "start open pos:%lld", "net not null, not need open", "net open finish,ret:%d", "async open finish, pos:%lld", "wait timeout is:%lld", "check errcode,code:%d,errstr:%s", "err still need try", "err not need try", "wait and try open", "reconnect", "reconnect_delay_max", "first not null pos is:%lld", "cache miss, pos:%lld,whence:%d", "wait 5ms......", "seek, ret:%lld", "seek reconnect:%d delay_time:%d", "seek retry interrupt", "seek is AVERROR(ENOSYS)", "check in cache", "pos:%lld, filesize:%lld not need seek net", "async seek finish, pos:%lld", "check before read", "cache miss", "wait check is null, need open", "read net fail net pos:%lld,off:%lld", "cache context is null", "crhps", "cfhps", "cnhps", "crhp", "cfhp", "cnhp", "is_save_file", "is save buffer to the file", "auto reconnect after disconnect before EOF", "reconnect_count", "reconnect count", "async_open_flag", "async open flag", "max reconnect delay in seconds after which to give up", "first_frame_size", "size to ensure first frame", "libavformat/concatdec.c", "Match slave stream #%d with stream #%d id 0x%x\n", "Auto-inserting h264_mp4toannexb bitstream filter\n", "h264_mp4toannexb bitstream filter required for H.264 streams\n", "cur_file_no", "skip-calc-frame-rate", "Impossible to open '%s'\n", "ffconcat version 1.0", " \t\r\n", "Line %d: filename required\n", "inpoint", "outpoint", "Line %d: %s without file\n", "Line %d: invalid %s '%s'\n", "file_packet_metadata", "Line %d: packet metadata required\n", "Line %d: failed to parse metadata string\n", "stream", "exact_stream_id", "Line %d: exact_stream_id without stream\n", "ffconcat", "version", "Line %d: invalid version\n", "Line %d: unknown keyword '%s'\n", "Unsafe file name '%s'\n", "pkt2.buf", "open_next_file() failed (%d)\n", "file:%d stream:%d pts:%s pts_time:%s dts:%s dts_time:%s", " -> pts:%s pts_time:%s dts:%s dts_time:%s\n", "concat demuxer", "safe", "enable safe mode", "auto_convert", "automatically convert bitstream format", "segment_time_metadata", "output file segment start time and duration as packet metadata", "libavformat/dump.c", "%08x ", " %02x", "stream #%d:\n", "  keyframe=%d\n", "  duration=%0.3f\n", "  dts=", "%0.3f", "  pts=", "  size=%d\n", "%1.4f %s", "%3.2f %s", "%1.0f %s", "%1.0fk %s", "%sMetadata:\n", "language", "%s  %-16s: ", "\n%s  %-16s: ", "fps, ", "tbr, ", "tbn, ", "    Stream #%d:%d", "[0x%x]", "(%s)", ", %d, %d/%d", ": %s", ", SAR %d:%d DAR %d:%d", " (default)", " (dub)", " (original)", " (comment)", " (lyrics)", " (karaoke)", " (forced)", " (hearing impaired)", " (visual impaired)", " (clean effects)", "    ", "%sSide data:\n", "%s  ", "new extradata", "paramchange: ", "channel count %u, ", "channel layout: %s, ", "sample_rate %u, ", "width %u height %u", "unknown param", "H.263 macroblock info", "stereo3d: ", "effects", "visually impaired", "hearing impaired", "dialogue", "comentary", "emergency", "voice over", "karaoke", "quality factor: %d, pict_type: %c", "cpb: ", "bitrate max/min/avg: %d/%d/%d buffer size: %d vbv_delay: %lld", "Mastering Display Metadata, has_primaries:%d has_luminance:%d r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f) min_luminance=%f, max_luminance=%f", "spherical: ", "(%f/%f/%f) ", "[%zu, %zu, %zu, %zu] ", "[pad %u] ", "Output", "Input", "from", "%s #%d, %s, %s '%s':\n", "  Duration: ", "%02d:%02d:%02d.%02d", ", start: ", "%s%d.%06d", ", bitrate: ", "%lld kb/s", "    Chapter #%d:%d: ", "start %f, ", "end %f\n", "  Program %d %s\n", "  No Program\n", "libavformat/fifo.c", "recovery_wait_streamtime can be turned on only when drop_pkts_on_overflow is also turned on\n", "Could not parse format options list '%s'\n", "pthread join error: %s\n", "FIFO queue full\n", "Failed to start thread: %s\n", "Error opening %s: %s\n", "Unknown option '%s'\n", "Keyframe received, recovering...\n", "Dropping non-keyframe packet\n", "Recovery attempt #%d/%d\n", "Recovery attempt #%d\n", "Recovery failed: %s\n", "Packet does not contain presentation timestamp, recovery will be attempted immediately", "Maximal number of %d recovery attempts reached.\n", "Recovery successful\n", "FIFO queue flushed\n", "Fifo muxer", "fifo_format", "Target muxer", "queue_size", "Size of fifo queue", "format_opts", "Options to be passed to underlying muxer", "drop_pkts_on_overflow", "Drop packets on fifo queue overflow not to block encoder", "restart_with_keyframe", "Wait for keyframe when restarting output", "attempt_recovery", "Attempt recovery in case of failure", "max_recovery_attempts", "Maximal number of recovery attempts", "recovery_wait_time", "Waiting time between recovery attempts", "recovery_wait_streamtime", "Use stream time instead of real time while waiting for recovery", "recover_any_error", "Attempt recovery regardless of type of the error", "file:", "pipe:", "pipe", "crypto", "file,crypto", "set I/O operation maximum block size", "truncate", "truncate existing files on write", "follow", "Follow a file as it is being written", "libavformat/flvdec.c", "Found invalid index entries, clearing the index.\n", "Read FLV header error, input file is not a standard flv format, first PreviousTagSize0 always is 0\n", "keyframe stream hasn't been created\n", "flv->last_keyframe_stream_index <= s->nb_streams", "keyframe filepositions = %lld times = %lld\n", "Skipping duplicate index\n", "Video codec (%x)", "Changing the codec id midstream", "NGINX RTMP", "Audio codec (%x)", "false", "AMF_DATA_TYPE_STRING parsing failed\n", "keyframes", "keyframes have been paresed\n", "!flv->keyframe_times", "!flv->keyframe_filepositions", "times", "filepositions", "Invalid keyframes object, skipping.\n", "Keyframe index parsing failed\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_OBJECT\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_MIXEDARRAY, found %d\n", "unsupported amf type %d\n", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "Open Broadcaster Software v0.%d", "metadatacreator", "MEGA", "filesize", "type:%d, size:%d, last:%d, dts:%lld pos:%lld\n", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Unknown type %s\n", "Adjusting next position due to index mismatch\n", "OnTextData packet", "Skipping flv packet: type %d, size %d, flags %d.\n", "%d %X %d \n", "Negative cts, previous timestamps might be wrong.\n", "invalid timestamps %lld %lld\n", "Omnia A/XE", "Packet mismatch %d %d %d\n", "Encoder", "live_flv", "live_flvdec", "flvdec", "flv_metadata", "Allocate streams according to the onMetaData array", "missing_streams", "datasize", "lasttimestamp", "totalframes", "hasAudio", "hasVideo", "hasCuePoints", "hasMetadata", "hasKeyframes", "libavformat/flvenc.c", "Ignoring metadata for %s\n", "canSeekToEnd", "videosize", "audiosize", "lastkeyframetimestamp", "lastkeyframelocation", "FLV only supports wideband (16kHz) Speex audio\n", "FLV only supports mono Speex audio\n", "FLV does not support sample rate %d, choose from (44100, 22050, 11025)\n", "Audio codec '%s' not compatible with FLV\n", "%s codec %s not compatible with flv\n", "AAC sequence header: %02x %02x.\n", "Packets are not in the proper order with respect to DTS\n", "Malformed AAC bitstream detected: use the audio bitstream filter 'aac_adtstoasc' to fix it ('-bsf:a aac_adtstoasc' option with ffmpeg)\n", "aac bitstream error\n", "Warning: Speex stream has more than 8 frames per packet. Adobe Flash Player cannot handle this!\n", "Too large packet with size %u >= %u\n", "Text", "no mem for add keyframe index!\n", "par->codec_type is type = [%d]\n", "at most one video stream is supported in flv\n", "Video", "Codec %s is not supported in the official FLV specification,\n", "use vstrict=-1 / -strict -1 to use it anyway.\n", "Muxing VP6 in flv will produce flipped video on playback.\n", "at most one audio stream is supported in flv\n", "Audio", "16-bit big-endian audio in flv is valid but most likely unplayable (hardware dependent); use s16le\n", "Data", "Subtitle codec '%s' for stream %d is not compatible with FLV\n", "Codec type '%s' for stream %d is not compatible with FLV\n", "Unable to re-open %s output file for the second pass (add_keyframe_index)\n", "FLV no sequence end mode open\n", "Failed to update header with correct duration.\n", "Failed to update header with correct filesize.\n", "video/x-flv", "flv muxer", "flvflags", "FLV muxer flags", "aac_seq_header_detect", "Put AAC sequence header based on stream data", "no_sequence_end", "disable sequence end for FLV", "no_metadata", "disable metadata for FLV", "no_duration_filesize", "disable duration and filesize zero value metadata for FLV", "add_keyframe_index", "Add keyframe index metadata", "segment", "ssegment", "image2pipe", "libavformat/format.c", "Probing %s score:%d size:%d\n", "Probing %s score:%d increased to %d due to MIME type\n", "Specified probe size value %u cannot be < %u\n", "mime_type", "Format %s detected only with low score of %d, misdetection possible!\n", "Format %s probed with size=%d and score=%d\n", "#software: %s\n", "Lavf57.71.100", "#tb %d: %d/%d\n", "#media_type %d: %s\n", "#codec_id %d: %s\n", "#sample_rate %d: %d\n", "#channel_layout %d: %llx\n", "#channel_layout_name %d: %s\n", "#dimensions %d: %dx%d\n", "#sar %d: %d/%d\n", "libavformat/gifdec.c", "Graphic Control Extension block's size less than 4.\n", "lzw minimum code size must be >= 1\n", "invalid block label\n", "GIF demuxer", "min_delay", "minimum valid delay between frames (in hundredths of second)", "max_gif_delay", "maximum valid delay between frames (in hundredths of seconds)", "default_delay", "default delay between frames (in hundredths of second)", "ignore_loop", "ignore loop setting (netscape extension)", "NETSCAPE2.0", "libavformat/gif.c", "GIF muxer supports only a single video GIF stream.\n", "video_par->format == AV_PIX_FMT_PAL8", "Invalid palette extradata\n", "PAL8 packet is missing palette in extradata\n", "GIF muxer", "Number of times to loop the output: -1 - no loop, 0 - infinite loop", "final_delay", "Force delay (in centiseconds) after the last frame", "h26l,h264,264,avc", "h264 demuxer", "%d, %10lld, %10lld, %8lld, %8d, ", ", S=%d", ", %8d, ", "#format: frame checksums\n", "#version: %d\n", "#hash: %s\n", "#extradata %d, %31d, ", "#stream#, dts,        pts, duration,     size, hash\n", "framehash", "frame hash encoder class", "hash", "set hash to use", "sha256", "format_version", "file format version", "hevc,h265,265", "hevc demuxer", "libavformat/hevc.c", "configurationVersion:                %u\n", "general_profile_space:               %u\n", "general_tier_flag:                   %u\n", "general_profile_idc:                 %u\n", "general_profile_compatibility_flags: 0x%08x\n", "general_constraint_indicator_flags:  0x%012llx\n", "general_level_idc:                   %u\n", "min_spatial_segmentation_idc:        %u\n", "parallelismType:                     %u\n", "chromaFormat:                        %u\n", "bitDepthLumaMinus8:                  %u\n", "bitDepthChromaMinus8:                %u\n", "avgFrameRate:                        %u\n", "constantFrameRate:                   %u\n", "numTemporalLayers:                   %u\n", "temporalIdNested:                    %u\n", "lengthSizeMinusOne:                  %u\n", "numOfArrays:                         %u\n", "array_completeness[%u]:               %u\n", "NAL_unit_type[%u]:                    %u\n", "numNalus[%u]:                         %u\n", "nalUnitLength[%u][%u]:                 %u\n", "libavformat/hlsc.c", "%s%s%d", "hlsc.c", "percent:%lld,s->filesize:%lld", "%d%b%Y%H%M%S", "expires", "AVERROR_EOF", "Stream ends prematurely at %lld, should be %lld\n", "text/plain", "Internal server error", "Not Found", "Bad Request", "Forbidden", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nContent-Length: %zu\r\n\r\n%03d %s\r\n", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nTransfer-Encoding: chunked\r\n\r\n", "HTTP reply header: \n%s----\n", "when insert, the node found is NULL!", "start reply msg.", "end reply msg.", ">>>>>>>>>>>start post message.tid:%u", "post message error, result:%d", "post message is id:%d,what:%d,code:%d,parameter:%d", "---->h is null", "---->start close", "---->start send exit message.", "---->end send exit message.", "msg_fd[0]:%d,msg_fd[1]:%d", "post RequestDownload message focus", "write_pos:%lld,filesize:%lld", "prev_loadtime:%lld,time_data:%lld", "post RequestDownload message", "0\r\n\r\n", "processs stopdownload message successfully! ", "processs stopdownload message failed! ", "start send message.tid:%u", "user interrupt,post message failed", "wait msg reply.", "msg reply ok.", "create pipe error.tid:%u,s[0]:%d,s[1]:%d,result:%d,errno:%d", "tid:%u,s[0]:%d,s[1]:%d,result:%d,errno:%d", "open thread error.", "send kSeekHttp message, position of seek: %lld", "seek success, new position: %lld", "seek_error_result:%d,try_seek_count:%d", "seek_error quit:%d,try_seek_count:%d", "shut down start", "POST", "header='%s'\n", "header='%s'", "Received method: %s\n", "Received and expected HTTP method do not match. (%s expected, %s received)\n", "Autodetected %s HTTP method\n", "Received and autodetected HTTP method did not match (%s autodetected %s received)\n", "Requested resource: %s\n", "HTTP/", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "http_code=%d\n", "HTTP error %d %s\n", "Location", "\r\nHost:", "Host: ", "hostname %s", "new_header=%s", "Content-Length", "content length filesize:%lld", "Content-Range", "bytes ", "file size is: %lld", "Accept-Ranges", "bytes", "Transfer-Encoding", "chunked", "WWW-Authenticate", "Authentication-Info", "Proxy-Authenticate", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "Content-Type", "Set-Cookie", "Unable to parse '%s'\n", "Icy-MetaInt", "Icy-", "Content-Encoding", "gzip", "Error during zlib initialisation: %s\n", "Your zlib was compiled without gzip support.\n", "Unknown content coding: %s\n", "%s%s\n", "Transfer-Encoding: chunked\r\n", "Proxy-", "http_proxy", "no_proxy", "http://", "https", "saved hostname is used %s", "\r\nUser-Agent: ", "User-Agent: %s\r\n", "\r\nAccept: ", "Accept: */*\r\n", "\r\nRange: ", "Range: bytes=%lld-%lld", "Range: bytes=%lld-%lld\r\n", "Range: bytes=%lld-", "Range: bytes=%lld-\r\n", "\r\nExpect: ", "Expect: 100-continue\r\n", "Connection: keep-alive\r\n", "\r\nHost: ", "Host: %s\r\n", "\r\nContent-Length: ", "Content-Length: %d\r\n", "\r\nContent-Type: ", "Content-Type: %s\r\n", "\r\nCookie: ", "domain", "path", "%s=%s", "%s; %s=%s", "Cookie: %s\r\n", "\r\nIcy-MetaData: ", "Icy-MetaData: %d\r\n", "%s %s HTTP/1.1\r\n%s%s%s%s%s\r\n", "request111: %s\n", "request: %s\n", "overlong headers\n", "error: %d\n", "Content-Type:", "http error", "get host ip is:%s", "the old_connection failed cost time:%f!", "old_connection is used cost time:%f!", "create new_connection cost time:%f!", "hlsc_process_seek_internal success!", "hlsc_process_seek_internal failed:%d!", "dispath_message: kRequestNextNode: create load_node NULL error, message.parameter is :%lld!", "receive requestnextnode message but not need currently! ", "seek2: requestnextnode not need download!", "seek next node request success,request position: %lld!", "seek next node request failed,request position: %lld!", "node is null", "position is not right", "write_error,min_size is: %d,errno is: ", "request next node!", "all next node is full,close connection!", "data is enough and close the connection!write_pos:%lld,read_pos:%lld,per:%lld", "post RequestDownload message,write_pos:%d", "Chunked encoding data size: %lld'\n", "inflate return value: %d, %s\n", "AVERRR(EIO)", "Will reconnect at %lld error=%s.\n", "Failed to reconnect at %lld.\n", "uri:%s", "tid:%u,size of message is : %d", "only msg add selected:res:%d", "tryreopen:post RequestDownload message", "break to recv data", "process_data:read error,exit!", "receive message what:%d code:%d parameter:%lld", "receive exithlsc message", "to open uri:%s", "input cache_file_key s->cache_file_key:%s", "input cache_file_key null", "open fail.rSize:%d,head size:%d,key:%x,node_buf_size:%d", "node_buf_size:%d,box.crc:%d,rSize:%d", "s->cache_file_key:%s", "input filekey size:%d not equal read file_key size:%d", "r_handle:%d,w_handle:%d", "open file success", "data can ensure play first", "notify download", "open local file fail", "No trailing CRLF found in HTTP header.\n", "listen", "Lower protocol\n", "Read headers\n", "Reply code: %d\n", "create new_connection cost time:%f ret:%d!", "open_ret:%d %ld %ld", "open fail.disk size:%d,context->filesize:%d", "filesize: %ld", "media path:%s,cache_file_open_mode:%d,cache_file_path:%s\n", "fail", "sucess", "write file error:open fail", "hlsc_process_seek_http insert node failed: %lld", "seek1:null node seek!", "seek1:all node is finish!!", "seek1: node not equal loadnode,post message of requestnextnode,id of need_download:%d!", "seek1: node equal loadnode and is loading", "seek1: node equal loadnode, not loading need download", "seek1: node equal loadnode, not loading and not need download", "hlsc_process_nextnode_request insert node failed: %lld", "processs requestdownload message successfully! ", "request download failed,request position: %lld!", "processs requestdownload message:ignore:fill_size:%lld,node_size:%lld,gap_size:%lld", "receive requestdownload message but not need currently!", "kStopDownload is call ????????????????", "process_data thread exit !", "create file fail!", "AVERROR_INVALIDDATA", "icy_metadata_packet", "store_icy < 0", "read file eof!", "interrupted.", "read file error: %d!", "post kCloseHttp message", "request error:%d", "notify download when waiting!", "read timeout,wait_times:%d", "wait_times:%d", "wait_time:%lld", "error_code:%d,try_connect_count:%d,sum_size:%d,need_size:%d", "try connect:%d,try_connect_count:%d,sum_size:%d,need_size:%d", "read eof", "read fail", "hlsc", "hlsc,http,rtp,tcp,udp,crypto,httpproxy", "seekable", "control seekability of connection", "chunked_post", "use chunked transfer-encoding for posts", "set HTTP proxy to tunnel through", "headers", "set custom HTTP headers, can override built in default headers", "content_type", "set a specific content type for the POST messages", "user_agent", "override User-Agent header", "Lavf/57.71.100", "user-agent", "multiple_requests", "use persistent connections", "post_data", "set custom HTTP post data", "export the MIME type", "cookies", "set cookies to be sent in applicable future requests, use newline delimited Set-Cookie HTTP field value syntax", "request ICY metadata", "icy_metadata_headers", "return ICY metadata headers", "return current ICY metadata packet", "metadata read from the bitstream", "auth_type", "HTTP authentication type", "No auth method set, autodetect", "basic", "HTTP basic authentication", "send_expect_100", "Force sending an Expect: 100-continue header for POST", "location", "The actual location of the data received", "initial byte offset", "end_offset", "try to limit the request to bytes preceding this offset", "Override the HTTP method or set the expected HTTP method from a client", "reconnect_at_eof", "auto reconnect at EOF", "reconnect_streamed", "auto reconnect streamed / non seekable streams", "listen on HTTP", "resource", "The resource requested by a client", "reply_code", "The http status code to return to a client", "valid_http_content_type", "valid http content type", "is_redirect", "is auto redirect", "is_tcp_free", "set initial tcp status", "load_per_percent", "set per load file percent", "read_wait_timeout", "set timeout of read wait", "min_play_size", "set min data size to play video", "file_max_cache_size", "set max cache size", "range_end", "set initial request range", "libavformat/hls.c", "A HLS playlist item '%s' referred to an external file '%s'. Opening this file was forbidden for security reasons\n", "URI=", "BYTERANGE=", "TYPE=", "GROUP-ID=", "LANGUAGE=", "ASSOC-LANGUAGE=", "NAME=", "DEFAULT=", "FORCED=", "CHARACTERISTICS=", "METHOD=", "BANDWIDTH=", "AUDIO=", "VIDEO=", "SUBTITLES=", "Could not read complete segment.\n", "#EXTM3U", "#EXT-X-STREAM-INF:", "#EXT-X-TARGETDURATION:", "#EXT-X-MEDIA-SEQUENCE:", "file,", "http", "HLS request for url '%s', offset %lld, playlist %d\n", "Unable to read key file %s\n", "Unable to open key file %s\n", "crypto+%s", "crypto:%s", "SAMPLE-AES encryption is not supported yet\n", "Unable to seek to offset %lld of HLS segment '%s'\n", "comment", "variant_bitrate", "#EXT-X-KEY:", "AES-128", "SAMPLE-AES", "#EXT-X-MEDIA:", "AUDIO", "VIDEO", "SUBTITLES", "public.accessibility.describes-music-and-sound", "public.accessibility.describes-video", "#EXT-X-PLAYLIST-TYPE:", "EVENT", "#EXT-X-MAP:", "#EXT-X-ENDLIST", "#EXT-X-DISCONTINUITY", "#EXTINF:", "#EXT-X-BYTERANGE:", "Empty playlist\n", "Error when loading first segment '%s'\n", "No expected HTTP requests have been made\n", "No longer receiving playlist %d\n", "Failed to reload playlist %d\n", "skipping %d segments ahead, expired from playlists\n", "Failed to open an initialization section in playlist %d\n", "Downloading an initialization section of size %lld\n", "Failed to open segment of playlist %d\n", "Too large HLS ID3 tag (%d > %lld bytes)\n", "Stripped %d HLS ID3 bytes\n", "Stripped additional %d HLS ID3 bytes\n", "PRIV", "HLS ID3 audio timestamp %lld\n", "Invalid HLS ID3 audio timestamp %lld\n", "APIC", "!pls->id3_deferred_extra", "Changing ID3 metadata in HLS audio elementary stream", "Now receiving playlist %d, segment %d\n", "stream index inconsistency: index %d, %d main streams, %d subdemuxer streams\n", "hls,applehttp", "live_start_index", "segment index to start live streams at (negative values are from the end)", "allowed_extensions", "List of file extensions that hls is allowed to access", "3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav", "set app ptr for ffmpeg", "libavformat/hlsproto.c", "skipping %d segments ahead, expired from playlist\n", "opening %s\n", "Unable to open %s\n", "hls+", "Using the hls protocol is discouraged, please try using the hls demuxer instead. The hls demuxer should be more complete and work as well as the protocol implementation. (If not, please report it.) To use the demuxer, simply use %s as url.\n", "hls://", "No nested protocol specified. Specify e.g. hls+http://%s\n", "Unsupported url %s\n", "nextnonce=", "realm=", "nonce=", "opaque=", "algorithm=", "qop=", "stale=", "Basic ", "Digest ", "auth", "Authorization: Basic ", "%08x", "MD5-sess", "auth-int", "Authorization: Digest ", "username=\"%s\"", ", realm=\"%s\"", ", nonce=\"%s\"", ", uri=\"%s\"", ", response=\"%s\"", ", algorithm=\"%s\"", ", opaque=\"%s\"", ", qop=\"%s\"", ", cnonce=\"%s\"", ", nc=%s", "%x\r\n", "libavformat/http.c", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nContent-Length: %zu\r\n%s\r\n%03d %s\r\n", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nTransfer-Encoding: chunked\r\n%s\r\n", "Chunked encoding data size: %llu'\n", "Invalid chunk size %llu\n", "Stream ends prematurely at %llu, should be %llu\n", "s->chunksize >= len", "sc->listen", "ijkapplication", "ttplayer(default)57.71.100", "the user-agent option is deprecated, please use user_agent option\n", "Range: bytes=%llu-", "\r\nConnection: ", "Connection: close\r\n", "try to fix missing 'Content-Range' at server side (%lld,%lld) => (%lld,%lld)", "reconnect:%d delay_time:%d", "reconnect:%d delay_time:%d,fail:%d", "Will reconnect at %llu error=%s.\n", "Failed to reconnect at %llu.\n", "CONNECT", "CONNECT %s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n%s%s\r\n", "httpproxy", "http,https,tls,rtp,tcp,udp,crypto,httpproxy", "http-tcp-hook", "hook protocol on tcp", "AVApplicationContext", "title", "artist", "date", "genre", "Blues", "Classic Rock", "Country", "Dance", "Disco", "Funk", "Grunge", "Hip-Hop", "Jazz", "Metal", "New Age", "Oldies", "Other", "Reggae", "Rock", "Techno", "Industrial", "Alternative", "Death Metal", "Pranks", "Soundtrack", "Euro-Techno", "Ambient", "Trip-Hop", "Vocal", "Jazz+Funk", "Fusion", "Trance", "Classical", "Instrumental", "Acid", "House", "Game", "Sound Clip", "Gospel", "Noise", "AlternRock", "Bass", "Soul", "Punk", "Space", "Meditative", "Instrumental Pop", "Instrumental Rock", "Ethnic", "Gothic", "Darkwave", "Techno-Industrial", "Electronic", "Pop-Folk", "Eurodance", "Dream", "Southern Rock", "Comedy", "Cult", "Gangsta", "Top 40", "Christian Rap", "Pop/Funk", "Jungle", "Native American", "Cabaret", "New Wave", "Psychadelic", "Rave", "Showtunes", "Trailer", "Lo-Fi", "Tribal", "Acid Punk", "Acid Jazz", "Polka", "Retro", "Musical", "Rock & Roll", "Hard Rock", "Folk", "Folk-Rock", "National Folk", "Swing", "Fast Fusion", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Gothic Rock", "Progressive Rock", "Psychedelic Rock", "Symphonic Rock", "Slow Rock", "Big Band", "Chorus", "Easy Listening", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Chamber Music", "Sonata", "Symphony", "Booty Bass", "Primus", "Porn Groove", "Satire", "Slow Jam", "Club", "Tango", "Samba", "Folklore", "Ballad", "Power Ballad", "Rhythmic Soul", "Freestyle", "Duet", "Punk Rock", "Drum Solo", "A capella", "Euro-House", "Dance Hall", "Drum & Bass", "Club-House", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Polsk Punk", "Beat", "Christian Gangsta", "Heavy Metal", "Black Metal", "Crossover", "Contemporary Christian", "Christian Rock", "Merengue", "Salsa", "Thrash Metal", "Anime", "JPop", "SynthPop", "TYER", "%.2s%.2s", "TDAT", "ch%d", "libavformat/id3v2enc.c", "No mimetype is known for stream %d, cannot write an attached picture.\n", "libavformat/id3v2.c", "Error opening memory stream\n", "Cannot read BOM value, input too short\n", "Incorrect BOM value\n", "Unknown encoding\n", "Failed to alloc %zu bytes\n", "Failed to alloc %d bytes\n", "Error reading GEOB frame, data truncated.\n", "GEOB", "Error reading frame %s, skipped\n", "Unknown attached picture mimetype: %s, skipping.\n", "Unknown attached picture type %d.\n", "Error decoding attached picture description.\n", "TCON", "(%d)", "TXXX", "No AVFormatContext, skipped ID3 chapter data\n", "COMM", "encrypted", "encrypted and compressed", "extended header too long.", "invalid extended header length", "compression", "id3v2 ver:%d flags:%02X len:%d\n", "Invalid empty frame %s, skipping.\n", "Skipping %s ID3v2 frame %s.\n", "USLT", "Compresssed frame %s tlen=%d dlen=%ld\n", "Failed to alloc %ld bytes\n", "Failed to read compressed tag\n", "Failed to uncompress tag: %d\n", "lyrics-%s%s%s", "Error reading comment frame, skipped\n", "invalid frame id, assuming padding\n", "-%.2s-%.2s", " %.2s:%.2s", "Error reading lyrics, skipped\n", "ID3v2.%d tag skipped, cannot handle %s\n", "CHAP", "32x32 pixels 'file icon'", "Other file icon", "Cover (front)", "Cover (back)", "Leaflet page", "Media (e.g. label side of CD)", "Lead artist/lead performer/soloist", "Artist/performer", "Conductor", "Band/Orchestra", "Composer", "Lyricist/text writer", "Recording Location", "During recording", "During performance", "Movie/video screen capture", "A bright coloured fish", "Illustration", "Band/artist logotype", "Publisher/Studio logotype", "compilation", "encoded_by", "album_artist", "performer", "TCMP", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "album-sort", "TSOP", "artist-sort", "TSOT", "title-sort", "TALB", "TCOM", "composer", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "libavformat/ijkutils.c", "ijkav_register_##x##_protocol: ABI mismatch.\n", "ijkio", "ijktcphook", "ijksegment", "ijklongurl", "ijkhttphook", "ijkmediadatasource", "SDPX", "XPDS", "libavformat/img2dec.c", "No such pixel format: %s.\n", "POSIX.1-2008 not supported, nanosecond file timestamps unavailable\n", "Could find no file with path '%s' and index in the range %d-%d\n", "Pattern type 'glob' was selected but globbing is not supported by this libavformat build\n", "Unknown value '%d' for pattern_type option\n", "Could not open file : %s\n", "xpm_pipe", "xpm demuxer", "webp_pipe", "webp demuxer", "tiff_pipe", "tiff demuxer", "sunrast_pipe", "sunrast demuxer", "sgi_pipe", "sgi demuxer", "qdraw_pipe", "qdraw demuxer", "psd_pipe", "psd demuxer", "ppm_pipe", "ppm demuxer", "png_pipe", "png demuxer", "pictor_pipe", "pictor demuxer", "pgmyuv_pipe", "pgmyuv demuxer", "pgm_pipe", "pgm demuxer", "pcx_pipe", "pcx demuxer", "pbm_pipe", "pbm demuxer", "pam_pipe", "pam demuxer", "jpegls_pipe", "jpegls demuxer", "jpeg_pipe", "jpeg demuxer", "j2k_pipe", "j2k demuxer", "exr_pipe", "exr demuxer", "dpx_pipe", "dpx demuxer", "dds_pipe", "dds demuxer", "bmp_pipe", "bmp demuxer", "image2 demuxer", "set the video framerate", "force loop over input file sequence", "pattern_type", "set pattern type", "glob_sequence", "select glob/sequence pattern type", "glob", "select glob pattern type", "sequence", "select sequence pattern type", "disable pattern matching", "set video pixel format", "start_number", "set first number in the sequence", "start_number_range", "set range for looking at the first sequence number", "force frame size in bytes", "ts_from_file", "set frame timestamp from file's one", "ts_type", "second precision", "nano second precision", "libavformat/img2enc.c", "Could not get frame filename with strftime\n", "Could not get frame filename number %d from pattern '%s' (either set updatefirst or use a pattern like %%03d within the filename pattern)\n", "%s.tmp", "UVAx", "libavformat/internal.h", "failed to rename file %s to %s\n", "bmp,dpx,jls,jpeg,jpg,ljpg,pam,pbm,pcx,pgm,pgmyuv,png,ppm,sgi,tga,tif,tiff,jp2,j2c,j2k,xwd,sun,ras,rs,im1,im8,im24,sunras,xbm,xface,pix,y", "image2 muxer", "updatefirst", "continuously overwrite one file", "update", "strftime", "use strftime for filename", "atomic_writing", "write files atomically (using temporary files and renames)", "ljpg", "mpg1-img", "mpg2-img", "mpg4-img", "im24", "im32", "sunras", "yuv10", "libavformat/isom.c", "MPEG-4 description: tag=0x%02x len=%d\n", "esds object type id 0x%02x\n", "Specific MPEG-4 header len=%d\n", "mp4a config channels %d obj %d ext obj %d sample rate %d ext sample rate %d\n", "md5:", "libavformat/mov_chan.c", "chan: layout=%u bitmap=%u num_descr=%u\n", "reached EOF while reading channel layout\n", "libavformat/movenccenc.c", "CENC-AVC: remaining size %d smaller than nal length+type %d\n", "CENC-AVC: nal size %d remaining %d\n", "libavformat/movenchint.c", "Unable to initialize hinting of stream %d\n", "rtpo", "libavformat/movenc.c", "Application provided duration: %lld / timestamp: %lld is out of range for mov/mp4 format\n", "Application provided duration: %lld is invalid\n", "timecode: tbc=%d/%d invalid, fallback on %d/%d\n", "stss", "stps", "next_dts >= 0", "next_dts <= 2147483647", "a=control:streamid=%d\r\n", "Non-consecutive fragments, writing incorrect sidx\n", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "HintHandler", "tmcd", "TimeCodeHandler", "url ", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "Unknown hldr_type for %s, writing dummy values\n", "handler", "Lucida Grande", "3gp6", "3gp4", "3g2b", "3g2a", "M4V ", "M4A ", "PSP mode need one video and one audio stream\n", "Frame rate %f outside supported range\n", "malformed location metadata\n", "earth", "disk", "trkn", "<param name=\"%s\" value=\"%s\" valuetype=\"data\"/>\n", "CodecPrivateData", "timecode", "ipod", "ismv", "Empty MOOV enabled; disabling automatic bitstream filtering\n", "No meaningful edit list will be written when using empty_moov without delay_moov\n", "Sample interleaving in fragments is mutually exclusive with omit_tfhd_offset and separate_moof\n", "muxer does not support non seekable output\n", "You requested a copy of the original timecode track so timecode metadata are now ignored\n", "cenc-aes-ctr", "Invalid encryption key len %d expected %d\n", "Invalid encryption kid len %d expected %d\n", "unsupported encryption scheme %s\n", "Warning, extension is not .m4a, .m4v nor  .m4b Quicktime/Ipod might not play the file\n", "unsupported height for dv codec\n", "%s rawvideo cannot be written to mov, output file will be unreadable\n", "Using MS style video codec tag, the file may be unplayable!\n", "Using MS style audio codec tag, the file may be unplayable!\n", "Could not find tag for codec %s in stream #%d, codec not currently supported in container\n", "D-10/IMX must use 720x608 or 720x512 video resolution\n", "Resolution %dx%d too large for mov/mp4\n", "WARNING codec timebase is very high. If duration is too long,\nfile may not be playable by quicktime. Specify a shorter timebase\nor choose different container.\n", "VP9 only supported in MP4.\n", "VP9 in MP4 support is experimental, add '-strict %d' if you want to use it.\n", "track %d: codec frame size is not set\n", "track %d: codec block align is not set for adpcm\n", "track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n", "track %d: muxing mp3 at %dhz is not standard in MP4\n", "FLAC only supported in MP4.\n", "FLAC in MP4 support is experimental, add '-strict %d' if you want to use it.\n", "yrrc", "albm", "not writing 'chan' tag due to lack of channel information\n", "lpcm", "Lavf", "XDCAM", " HD422", " %d%c", "Could not locate DNxHD bit stream in vos_data\n", "Could not locate DNxHD bit stream, vos_data too small\n", "moov atom written before any packets, unable to write correct dvc1 atom. Set the delay_moov flag to fix this.\n", "DpxE", "gamma value %g\n", "writing gama value %d\n", "track->mode == 0x02", "gamma value unknown, unable to write gama atom\n", "Not writing 'gama' atom. Format is not MOV.\n", "color primaries unspecified, assuming bt709\n", "color primaries unspecified, assuming bt470bg\n", "color primaries unspecified, assuming smpte170\n", "color primaries unspecified, unable to assume anything\n", "track->mode == 0x02 || track->mode == 0x01", "Not writing 'colr' atom. Format is not MOV or MP4.\n", "Unsupported stereo_3d flags %x. st3d not written.\n", "Unsupported stereo_3d type %s. st3d not written.\n", "Unsupported projection %d. sv3d not written.\n", "fps %d is too large\n", "reel_name", "reel_name length %llu is too large\n", "track width is too large\n", "track height is too large\n", "EDTS using dts:%lld cts:%d instead of dts:%lld cts:%lld tid:%d\n", "av_rescale_rnd(start_dts, 1000, track->timescale, AV_ROUND_DOWN) <= 0", "Not writing any edit list even though one would have been required\n", "FATAL error, file duration too long for timebase, this file will not be\nplayable with quicktime. Choose a different timebase or a different\ncontainer format\n", "2006/04/01 11:11:11", "perf", "titl", "author", "gnre", "dscp", "cprt", "make", "model", "aART", "encoding_tool", "grouping", "description", "ldes", "synopsis", "tvsh", "tven", "episode_id", "tvnn", "network", "tves", "episode_sort", "tvsn", "season_number", "stik", "media_type", "hdvd", "hd_video", "pgap", "gapless_playback", "cpil", "tmpo", "Unable to re-open %s output file for the second pass (faststart)\n", "Estimating the duration of the last packet in a fragment, consider setting the duration field in AVPacket instead.\n", "fatal error, input is not a single packet, implement a AVParser for it\n", "Track %d starts with a nonzero dts %lld, while the moov already has been written. Set the delay_moov flag to handle this case.\n", "pts has no value\n", "Starting second pass: moving the moov atom to the beginning of the file\n", "reserved_moov_size is too small, needed %lld additional\n", "Starting second pass: inserting sidx atoms\n", "wide", "free", "audio", "palette:", "%06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x", "size:", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n", "<head>\n", "<meta name=\"creator\" content=\"%s\" />\n", "</head>\n", "<body>\n", "<switch>\n", "<%s systemBitrate=\"%lld\">\n", "<param name=\"%s\" value=\"%d\" valuetype=\"data\"/>\n", "systemBitrate", "trackID", "systemLanguage", "trackName", "FourCC", "H264", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "</%s>\n", "</switch>\n", "</body>\n", "</smil>\n", "video/mp4", "m4v,m4a", "ipod muxer", "mp4 muxer", "mov muxer", "movflags", "MOV muxer flags", "rtphint", "Add RTP hint tracks", "moov_size", "maximum moov size so it can be placed at the begin", "empty_moov", "Make the initial moov atom empty", "frag_keyframe", "Fragment at video keyframes", "separate_moof", "Write separate moof/mdat atoms for each track", "frag_custom", "Flush fragments on caller requests", "isml", "Create a live smooth streaming feed (for pushing to a publishing point)", "faststart", "Run a second pass to put the index (moov atom) at the beginning of the file", "omit_tfhd_offset", "Omit the base data offset in tfhd atoms", "disable_chpl", "Disable Nero chapter atom", "default_base_moof", "Set the default-base-is-moof flag in tfhd atoms", "dash", "Write DASH compatible fragmented MP4", "frag_discont", "Signal that the next fragment is discontinuous from earlier ones", "delay_moov", "Delay writing the initial moov until the first fragment is cut, or until the first fragment flush", "global_sidx", "Write a global sidx index at the start of the file", "write_colr", "Write colr atom (Experimental, may be renamed or changed, do not use from scripts)", "write_gama", "Write deprecated gama atom", "use_metadata_tags", "Use mdta atom for metadata.", "skip_trailer", "Skip writing the mfra/tfra/mfro trailer for fragmented files", "rtpflags", "RTP muxer flags", "Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC", "rfc2190", "Use RFC 2190 packetization instead of RFC 4629 for H.263", "skip_rtcp", "Don't send RTCP sender reports", "h264_mode0", "Use mode 0 for H.264 in RTP", "send_bye", "Send RTCP BYE packets when finishing", "skip_iods", "Skip writing iods atom.", "iods_audio_profile", "iods audio profile atom.", "iods_video_profile", "iods video profile atom.", "frag_duration", "Maximum fragment duration", "min_frag_duration", "Minimum fragment duration", "frag_size", "Maximum fragment size", "ism_lookahead", "Number of lookahead entries for ISM files", "video_track_timescale", "set timescale of all video tracks", "brand", "Override major brand", "use_editlist", "use edit list", "fragment_index", "Fragment number of the next fragment", "mov_gamma", "gamma value for gama atom", "frag_interleave", "Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead)", "encryption_scheme", "Configures the encryption scheme, allowed values are none, cenc-aes-ctr", "encryption_key", "The media encryption key (hex)", "encryption_kid", "The media encryption key identifier (hex)", "use_stream_ids_as_track_ids", "use stream ids as track ids", "write_tmcd", "force or disable writing tmcd", "libavformat/mov.c", "enda %d\n", "Found media data tag MPEG indicating this is a MOV-packed MPEG-PS.\n", "Unknown MOV field order 0x%04x\n", "ret=%d", "Duplicated STPS atom\n", "Atoms too deeply nested\n", "Detected moov in a free atom.\n", "Broken file, trak/mdat not at top-level\n", "type:'%s' parent:'%s' sz: %lld %lld %lld\n", "overread end of atom '%.4s' by %lld bytes\n", "ignoring multiple glbl\n", "Found duplicated MOOV Atom. Skipped it\n", "root atom offset 0x%llx: partial file\n", "read fragments, offset 0x%llx\n", "root", "%d/%d", "STREAMINFO must be first FLACMetadataBlock\n", "non-STREAMINFO FLACMetadataBlock(s) ignored\n", "duplicate saiz atom\n", "saiz atom auxiliary_info_sizes size %lld invalid\n", "failed to read the auxiliary info sizes", "Duplicated SBGP atom\n", "found fragment index for track %u\n", "found fragment index entry for track %u and moof_offset %lld\n", "track %u has a fragment index but it doesn't have an (in-order) entry for moof_offset %lld\n", "frag flags 0x%x\n", "could not find corresponding trex\n", "could not find corresponding track id %u\n", "track[%u].stts.entries = %u\n", "Duplicated STTS atom\n", "Invalid sample_count=%d\n", "sample_count=%d, sample_duration=%d\n", "keyframe_count = %u\n", "Duplicated STSS atom\n", "track[%u].stsc.entries = %u\n", "Duplicated STSC atom\n", "Duplicated ELST atom\n", "track[%u].edit_count = %i\n", "duration=%lld time=%lld rate=%f\n", "Track %d, edit %d: Invalid edit list media time=%lld\n", "AVERROR(AVERROR_INVALIDDATA)", "Duplicated STCO atom\n", "ctype=%s\n", "stype=%s\n", "handler_name", "iTunSMPB", "%*X %X %X %X", "cdec", "Unhandled or malformed custom metadata of size %lld\n", "qt  ", "ISO: File Type Major Brand: %.4s\n", "major_brand", "minor_version", "compatible_brands", "Empty spherical video box\n", "Missing spherical video header\n", "Missing projection box\n", "Missing projection header box\n", "Unsupported cubemap layout %d\n", "Invalid bounding rectangle coordinates %u,%u,%u,%u\n", "Unknown projection type\n", "Empty stereoscopic video box\n", "Unknown st3d mode value %d\n", "duplicate senc atom\n", "senc atom size %lld invalid\n", "failed to read the auxiliary info", "systemBitrate=\"", "<GSpherical:StitchingSoftware>", "<GSpherical:Spherical>", "<GSpherical:Stitched>", "<GSpherical:ProjectionType>", "equirectangular", "<GSpherical:StereoMode>", "left-right", "top-bottom", "<GSpherical:InitialViewHeadingDegrees>", "<GSpherical:InitialViewPitchDegrees>", "<GSpherical:InitialViewRollDegrees>", "Invalid spherical metadata found\n", "unknown compression for cmov atom !\n", "free_and_return", "get_wav_header failed\n", "AVERROR(ENOENT)", "sample aspect ratio already set to %d:%d, ignoring 'pasp' atom (%d:%d)\n", "stream %d, sample %d, dts %lld\n", "size: %dx%d\n", "palette: ", "%06x%s", "Reference with mismatching origin, %s not tried for security reasons, set demuxer option use_absolute_path to allow it anyway\n", "Using absolute path on user request, this is a possible security issue\n", "Absolute path %s not tried for security reasons, set demuxer option use_absolute_path to allow absolute paths\n", "stream has moof boxes, will look for a mfra\n", "doesn't look like mfra (unreasonable size)\n", "doesn't look like mfra (size mismatch)\n", "doesn't look like mfra (tag mismatch)\n", "stream has mfra\n", "found tfra\n", "failed to seek back after looking for mfra\n", "found a moof box but failed to read the mfra (may be a live ismv)\n", "found a moof box but stream is not seekable, can not look for mfra\n", "moof offset %llx\n", "[aax] file checksum == ", "[aax] activation_bytes option is missing!\n", "[aax] activation_bytes value needs to be 4 bytes!\n", "[aax] audible_fixed_key value needs to be 16 bytes!\n", "[aax] mismatch in checksums!\n", "[aax] error in drm blob decryption!\n", "volume %s, len %d\n", "filename %s, len %d\n", "nlvl from %d, nlvl to %d\n", "type %d, len %d\n", "path %s\n", "dir %s\n", "Unknown dref type 0x%08x size %u\n", "nclx", "nclc", "unsupported color_parameter_type %s\n", "%s: pri %d trc %d matrix %d", " full %u", "ignoring 'frma' atom of '%.4s', stream has codec id %d\n", "ignoring 'frma' atom of '%.4s', stream format is '%.4s'\n", "The 'keys' atom with the invalid key count: %u\n", "The key# %u in meta has invalid size:%u\n", "premiere_version", "quicktime_version", "account_type", "account_id", "category", "episode_uid", "firmware", "keywords", "podcast", "purchase_date", "rating", "sort_album_artist", "sort_album", "sort_artist", "sort_composer", "sort_name", "sort_show", "spherical", "producer", "chapter", "director", "disclaimer", "edit_date", "original_format", "host_computer", "original_artist", "performers", "playback_requirements", "original_source", "subtitle", "warning", "loci too short\n", "place name too long\n", "loci too short (%u bytes left, need at least %d)\n", "%+08.4f%+09.4f", "%s-%s", "Unknown cover type: 0x%x.\n", "Error parsing cover art.\n", "The index of 'data' is out of range: %d < 1 or >= %d.\n", "UDTA parsing failed retrying raw\n", "%.4s", "Failed to store the number (%d) in string.\n", "Failed to store the number (%u) in string.\n", "Failed to store the float32 number (%f) in string.\n", "HandBrake %d.%d.%d", "err=%d", "truncated extradata\n", "ignored unknown aclr value (%d)\n", "aclr not decoded - incomplete atom\n", "aclr not decoded - unable to add atom to extradata\n", "aclr not decoded - unexpected size %lld\n", "end_index >= 0 && end_index <= st->nb_index_entries", "creation_time is not representable\n", "Invalid mvhd time scale %d, defaulting to 1\n", "time scale = %i\n", "Multiple mdhd?\n", "Version %d", "AVERROR_PATCHWELCOME", "Invalid mdhd time scale %d, defaulting to 1\n", "sample_size = %u sample_count = %u\n", "Invalid sample field size %u\n", "Duplicated STSZ atom\n", "sidx version %u", "Invalid sidx timescale 1/%d\n", "sidx reference_type 1", "could not find corresponding track id %d\n", "Unsupported DTS audio channel layout", "track[%u].ctts.entries = %u\n", "ignoring CTTS entry with count=%d duration=%d\n", "count=%d, duration=%d\n", "CTTS invalid\n", "mov_update_dts_shift(): dts_shift set to %d\n", "dts shift %d\n", "flags 0x%x entries %u\n", "first sample flags 0x%x\n", "found frag time %lld sc->dts_shift %d ctts.duration %d sc->time_offset %lld flags & MOV_TRUN_SAMPLE_CTS %d\n", "calculated into dts %lld\n", "found frag time %lld, using it for dts\n", "Failed to add index entry\n", "AVIndex stream %d, sample %u, offset %llx, dts %lld, size %u, distance %d, keyframe %d\n", "Invalid decryption key len %d expected %d\n", "error reading header\n", "moov atom not found\n", "on_parse_exit_offset=%lld\n", "Failed to retrieve first frame\n", "ignoring stream duration which is shorter than chapters\n", "Chapter %d not found in file\n", "%02d:%02d:%02d%c%02d", "stream %d, timescale not set\n", "Forcing full parsing for mp3 stream\n", "Overflow during bit rate calculation %lld * 8 * %d\n", "add side data error", "err: stereo3d is null", "err:add side data error", "Referenced QT chapter track not found\n", "rtmd", "stream %d, timestamp %lld, sample %d\n", "stream %d, found sample %d\n", "sample=%d", "stream %d, offset 0x%llx: partial file\n", "Nonkey frame from stream %d discarded due to AVDISCARD_NONKEY\n", "Cannot append palette to packet\n", "current sample %lld greater than the number of auxiliary info sample sizes %zu\n", "auxiliary info offset %zu greater than auxiliary info size %zu\n", "failed to read iv from the auxiliary info\n", "failed to read subsample count from the auxiliary info\n", "failed to read subsample from the auxiliary info\n", "subsample size exceeds the packet size left\n", "leftover packet bytes after subsample processing\n", "stream %d, missing mandatory atoms, broken header\n", "multiple edit list entries, Use -advanced_editlist to correctly decode otherwise a/v desync might occur\n", "STSZ sample size %d invalid (too large), ignoring\n", "STSZ sample size %d invalid (too small), ignoring\n", "wrong sample count\n", "Sample size %u is too large\n", "AVIndex stream %d, sample %u, offset %llx, dts %lld, size %u, distance %u, keyframe %d\n", "Invalid SampleDelta %d in STTS, at %d st:%d\n", "error unaligned chunk\n", "chunk count %u\n", "Zero bytes per frame, but %d samples per frame", "wrong chunk count %u\n", "AVIndex stream %d, chunk %u, offset %llx, dts %lld, size %u, duration %u\n", "Cannot allocate index ranges buffer\n", "Offset DTS by ctts[%d].duration: %d\n", "st: %d edit list: %lld Missing key frame while searching for timestamp: %lld\n", "st: %d edit list %lld Cannot find an index entry before timestamp: %lld.\nRounding edit list media time to zero.\n", "skip %d audio samples from curr_cts: %lld\n", "drop a frame at curr_cts: %lld @ %lld\n", "Cannot reallocate frame duration buffer\n", "Cannot add index entry\n", "Support for mvhd.timescale = 0 with editlists", "Processing st: %d, edit list %lld - media time: %lld, duration: %lld\n", "stream %d, error opening alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d\n", "Skipped opening external track: stream %d, alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d.Set enable_drefs to allow this.\n", "Cannot add CTTS entry %lld - {%lld, %d}\n", "invalid size %lld in stsd\n", "multiple fourcc not supported\n", "size=%lld 4CC=%s codec_type=%d\n", "Planar Y'CbCr 8-bit 4:2:0", "Sorenson H263", "audio channels %d\n", "version =%d, isom =%d\n", "stsd", "AV1x", "AVup", "apcn", "apch", "dvpp", "dvcp", "mp4s", "invalid STSD entries %d\n", "Duplicate STSD\n", "mov,mp4,m4a,3gp,3g2,mj2", "use_absolute_path", "allow using absolute path when opening alias, this is a possible security issue", "seek_streams_individually", "Seek each stream individually to the to the closest point", "ignore_editlist", "Ignore the edit list atom.", "advanced_editlist", "Modify the AVIndex according to the editlists. Use this option to decode in the order specified by the edits.", "ignore_chapters", "use_mfra_for", "use mfra for fragment timestamps", "export_all", "Export unrecognized metadata entries", "export_xmp", "Export full XMP metadata", "activation_bytes", "Secret bytes for Audible AAX files", "audible_fixed_key", "Fixed key used for handling Audible AAX files", "77214d4b196a87cd520045fd20a51d67", "decryption_key", "The media decryption key (hex)", "enable_drefs", "Enable external track support.", "ugc_performance", "skip some logics for ugc mov start playback performance", "libavformat/mp3dec.c", "Using MP3 TOC to seek; may be imprecise.\n", "Using scaling to seek VBR MP3; may be imprecise.\n", "Could not seek to %lld.\n", "invalid concatenated file detected - using bitrate for duration\n", "filesize and duration do not match (growing file?)\n", "Cannot determine file size, skipping TOC table.\n", "pad %d %d\n", "Skipping %d bytes of junk at %lld.\n", "Invalid frame size (%d): Could not seek to %lld.\n", "Failed to read frame size: Could not seek to %lld.\n", "mp2,mp3,m2a,mpa", "usetoc", "use table of contents", "libavformat/mp3enc.c", "Unsupported sample rate, not writing Xing header.\n", "Unsupported number of channels, not writing Xing header.\n", "best_bitrate_idx >= 0", "Lavc libmp3lame", "Lavf lame", "Invalid ID3v2 version requested: %d. Only 3, 4 or 0 (disabled) are allowed.\n", "Invalid audio stream. Exactly one MP3 audio stream is required.\n", "Only audio streams and pictures are allowed in MP3.\n", "No audio stream present.\n", "Attached pictures were requested, but the ID3v2 header is disabled.\n", "Audio packet of size %d (starting with %08X...) is invalid, writing it anyway.\n", "Not enough memory to buffer audio. Skipping picture streams\n", "Got more than one picture in stream %d, ignoring.\n", "No packets were sent for some of the attached pictures.\n", "Too many samples of initial padding.\n", "Too many samples of trailing padding.\n", "audio/mpeg", "MP3 muxer", "id3v2_version", "Select ID3v2 version to write. Currently 3 and 4 are supported.", "write_id3v1", "Enable ID3v1 writing. ID3v1 tags are written in UTF-8 which may not be supported by most software.", "write_xing", "Write the Xing header containing file duration.", "IMKH", "Sofdec", "ofdec", "libavformat/mpeg.c", "Further flags set but no bytes left\n", "pes_ext %X is invalid\n", "none (ret=%d)\n", "pos=0x%llx dts=0x%llx %0.3f\n", "%d: pts=%0.3f dts=%0.3f size=%d\n", "libavformat/mpegts.c", "cannot set stream info, internal codec is open\n", "stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n", "HDMV", "HDPR", "changing packet size to %d\n", "max resync size reached, could not find sync byte\n", "Filter: pid=0x%x type=%d\n", "Unable to seek back to the start\n", "Tag %x length violation new length %d bytes remaining %d\n", "Maximum MP4 descriptor level exceeded\n", "Found tag %x expected %x\n", "Predefined SLConfigDescriptor", "Continuity check failed for pid %d expected %d got %d\n", "pos >= 188", "All programs have pmt, headers found\n", "Skipping after seek\n", "Failed to allocate buffers for seekback\n", "score: %d, dvhs_score: %d, fec_score: %d \n", "Could not detect TS packet size, defaulting to non-FEC/DVHS\n", "tuning done\n", "invalid pcr pair %lld >= %lld\n", "start=%0.3f pcr=%0.3f incr=%d\n", "PES packet size mismatch\n", "pid=%x pes_code=%#x\n", "pid=%x stream_type=%x probing\n", "pid %x is not PES\n", "PAT:\n", "sid=0x%x pid=0x%x\n", "SDT:\n", "tag: 0x%02x len=%d\n", "service_name", "service_provider", "language_count <= sizeof(language) / 4", "DVB subtitles with multiple languages", "reg_desc=%.4s\n", "Opus in MPEG-TS - channel_config_code > 0x8", "PMT: len %i\n", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "pcr_pid=0x%x\n", "program tag: 0x%02x len=%d\n", "CUEI", "mpegtsraw", "mpegts", "mpegtsraw demuxer", "resync_size", "set size limit for looking up a new synchronization", "compute_pcr", "compute exact PCR for each transport stream packet", "ts_packetsize", "output option carrying the raw packet size", "mpegts demuxer", "fix_teletext_pts", "try to fix pts values of dvb teletext streams", "scan_all_pmts", "scan and combine all PMTs", "skip_changes", "skip changing / adding streams / programs", "skip_clear", "skip clearing programs", "mpegvideo", "mpegvideo demuxer", "libavformat/mux.c", "Invalid packet stream index: %d\n", "Received a packet for an attachment stream.\n", "Failed to split side data before bitstream filter\n", "Failed to send packet to filter %s for stream %d\n", "failed to avoid negative pts %s in stream %d.\nTry -avoid_negative_ts 1 as a possible workaround.\n", "Packets poorly interleaved, failed to avoid negative timestamp %s in stream %d.\nTry -max_interleave_delta 0 as a possible workaround.\n", "pkt->size == ((-2147483647 - 1) / 3 * 2 + (int)sizeof(AVFrame))", "Timestamps are unset in a packet for stream %d. This is deprecated and will stop working in the future. Fix your code to set the timestamps properly\n", "compute_muxer_pkt_fields: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n", "Packet with invalid duration %lld in stream %d\n", "Encoder did not produce proper pts, making some up.\n", "Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n", "pts (%s) < dts (%s) in stream %d\n", "av_write_frame: pts2:%s dts2:%s\n", "Requested output format '%s' is not a suitable output format\n", "Unable to find a suitable output format for '%s'\n", "Setting the AVFormatContext to bitexact mode, because the AVCodecContext is in that mode. This behavior will change in the future. To keep the current behavior, set AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n", "No streams to mux were specified\n", "Using AVStream.codec.time_base as a timebase hint to the muxer is deprecated. Set AVStream.time_base instead.\n", "Using AVStream.codec to pass codec parameters to muxers is deprecated, use AVStream.codecpar instead.\n", "sample rate not set\n", "Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\n", "Tag %s incompatible with output codec id '%d' (%s)\n", "encoder-", "((AVFrame *)pkt->data)->buf", "Delay between the first packet and last packet in the muxing queue is %lld > %lld: forcing output\n", "av_interleaved_write_frame size:%d dts:%s pts:%s\n", "av_interleaved_write_frame FLUSH\n", "s->oformat", "libavformat/network.c", "Using network protocols without global network initialization. Please use avformat_network_init(), this will become mandatory later.\n", "Failed to set close on exec\n", "setsockopt(SO_REUSEADDR) failed\n", "ff_socket_nonblock failed\n", "ret:%d neterrno:%d ff_poll_interrupt error", "ret:%d neterrno:%d getsockop error", "Connection to %s failed (%s), trying next address\n", "ret:%d neterrno:%d Connection to %s failed: %s\n", "ret:%d neterrno:%d default error", "writing", "reading", "libavformat/options.c", "Opening '%s' for %s\n", "AVFormatContext", "avioflags", "reduce buffering", "probesize", "set probing size", "formatprobesize", "number of bytes to probe file format", "packetsize", "set packet size", "fflags", "flush_packets", "reduce the latency by flushing out packets immediately", "ignidx", "ignore index", "genpts", "generate pts", "nofillin", "do not fill in missing values that can be exactly calculated", "noparse", "disable AVParsers, this needs nofillin too", "igndts", "ignore dts", "discardcorrupt", "discard corrupted frames", "sortdts", "try to interleave outputted packets by dts", "keepside", "don't merge side data", "fastseek", "fast but inaccurate seeks", "enable RTP MP4A-LATM payload", "nobuffer", "reduce the latency introduced by optional buffering", "seek2any", "allow seeking to non-keyframes on demuxer level when supported", "do not write random/volatile data", "stop muxing with the shortest stream", "autobsf", "add needed bsfs automatically (delays header until each stream's first packet is written)", "analyzeduration", "specify how many microseconds are analyzed to probe the input", "cryptokey", "decryption key", "indexmem", "max memory used for timestamp index (per stream)", "rtbufsize", "max memory used for buffering real-time frames", "fdebug", "max_delay", "maximum muxing or demuxing delay in microseconds", "start_time_realtime", "wall-clock time when stream begins (PTS==0)", "fpsprobesize", "number of frames used to probe fps", "audio_preload", "microseconds by which audio packets should be interleaved earlier", "chunk_duration", "microseconds for each chunk", "chunk_size", "size in bytes for each chunk", "f_err_detect", "set error detection flags (deprecated; use err_detect, save via avconv)", "consider things that a sane encoder shouldn't do as an error", "use_wallclock_as_timestamps", "use wallclock as timestamps", "skip_initial_bytes", "set number of bytes to skip before reading header and frames", "correct_ts_overflow", "correct single timestamp overflows", "enable flushing of the I/O context after each packet", "metadata_header_padding", "set number of bytes to be written as padding in a metadata header", "output_ts_offset", "set output timestamp offset", "max_interleave_delta", "maximum buffering duration for interleaving", "f_strict", "how strictly to follow the standards (deprecated; use strict, save via avconv)", "allow non-standardized experimental variants", "max_ts_probe", "maximum number of packets to read while waiting for the first timestamp", "avoid_negative_ts", "shift timestamps so they start at 0", "enabled when required by target format", "do not change timestamps", "make_non_negative", "shift timestamps so they are non negative", "make_zero", "format_whitelist", "List of demuxers that are allowed to be used", "max_streams", "maximum number of streams", " rate=%d", " channels=%d", "libavformat/pcmdec.c", "Invalid sample_rate found in mime_type \"%s\"\n", "st->codecpar->bits_per_coded_sample > 0", "sln demuxer", "mulaw", "mulaw demuxer", "alaw", "alaw demuxer", "u8 demuxer", "u16le", "u16le demuxer", "u16be", "u16be demuxer", "u24le", "u24le demuxer", "u24be", "u24be demuxer", "u32le", "u32le demuxer", "u32be", "u32be demuxer", "s8 demuxer", "s16le", "audio/L16", "s16le demuxer", "s16be", "s16be demuxer", "s24le", "s24le demuxer", "s24be", "s24be demuxer", "s32le", "s32le demuxer", "s32be", "s32be demuxer", "f32le", "f32le demuxer", "f32be", "f32be demuxer", "f64le", "f64le demuxer", "f64be", "f64be demuxer", "libavformat/prompeg.c", "L * D must be <= 100\n", "Invalid RTP base port %d\n", "ProMPEG CoP#3-R2 FEC L=%d D=%d\n", "Invalid RTP packet size\n", "Failed to allocate the FEC buffer\n", "Unsupported stream format (expected MPEG-TS over RTP)\n", "The RTP packet size must be constant (set pkt_size)\n", "Failed to allocate the bitstring buffer\n", "prompeg", "Time to live (in milliseconds, multicast only)", "FEC L", "FEC D", "libavformat/rawenc.c", "%s files have exactly one stream\n", "h264,264", "libavformat/rawvideodec.c", "yuv,cif,qcif,rgb", "rawvideo demuxer", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "wav header size < 14", "WAVEFORMATEX support for RIFX files", "libavformat/riffdec.c", "unknown subformat:%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x {%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x}\n", "Invalid sample rate: %d\n", "INFO subchunk truncated\n", "too big INFO subchunk\n", "truncated file\n", "out of memory, unable to read INFO tag\n", "premature end of file while reading INFO tag\n", "libavformat/riffenc.c", "(start&1) == 0", "LIST", "requested bits_per_coded_sample (%d) and actually stored (%d) differ\n", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "/%s/%s/%d", "send", "idle", "/open/1", "Cache-Control: no-cache\r\nContent-type: application/x-fcs\r\nUser-Agent: Shockwave Flash\r\n", "ffrtmphttp", "https,http,tcp,tls", "ffrtmphttp_tls", "Use a HTTPS tunneling connection (RTMPTS).", "libavformat/rtmppkt.c", "Unable to read as many bytes as AMF string signaled\n", "RTMP packet size mismatch %d != %d\n", " number %g\n", " bool %d\n", " string '%s'\n", " NULL\n", "  %s: ", "chunk size", "bytes read", "server bandwidth", "client bandwidth", "audio packet", "video packet", "Flex shared stream", "Flex shared object", "Flex shared message", "notification", "shared object", "invoke", "RTMP packet type '%s'(%d) for channel %d, timestamp %d, extra field %d size %d\n", "Server BW = %d\n", "Client BW = %d\n", " %02X", "libavformat/rtmpproto.c", "Client bandwidth report packet is less than 4 bytes long (%d)\n", "Incorrect client bandwidth %d\n", "Client bandwidth = %d\n", "Too short server bandwidth report packet (%d)\n", "Incorrect server bandwidth %d\n", "Server bandwidth = %d\n", "Too short chunk size change packet (%d)\n", "Incorrect chunk size %d\n", "New incoming chunk size = %d\n", "Unable to create response packet\n", "./libavcodec/bytestream.h", "Seek on stream index %d at timestamp %lld with flags %08x\n", "Sending seek command for timestamp %lld\n", "Unable to send seek command on stream index %d at timestamp %lld with flags %08x\n", "Pause at timestamp %d\n", "Sending pause command for timestamp %d\n", "pause", "Unable to send pause command at timestamp %d\n", "_result", "FCSubscribe", "onStatus", "status", "code", "%s is now published", "details", "Erroneous Message size %d not following standard\n", "received bytes read report\n", "Too short ping packet (%d)\n", "Sending SWF verification...\n", "Ignoring SWFVerification request.\n", "_error", "_checkbw", "releaseStream", "FCPublish", "getStreamLength", "connect", "authmod=adobe", "authmod=llnw", "Unknown connect error (unsupported authentication method?)\n", "No credentials set\n", "?reason=authfailed", "Incorrect username/password\n", "?reason=nosuchuser", "Incorrect username\n", "Authentication failed\n", "code=403 need auth", "?authmod=%s&user=%s", "?reason=needauth", "No auth parameters found\n", "user", "salt", "opaque", "challenge", "nonce", "Ignoring unsupported var %s\n", "Variable %s has NULL value\n", "adobe", "?authmod=%s&user=%s&challenge=%s&response=%s", "&opaque=%s", "live", "publish", "/_definst_", "00000001", "?authmod=%s&user=%s&nonce=%s&cnonce=%s&nc=%s&response=%s", "llnw", "Server error: %s\n", "Releasing stream...\n", "FCPublish stream...\n", "Creating stream...\n", "createStream", "Unexpected reply on connect()\n", "Sending publish command for '%s'\n", "Sending play command for '%s'\n", "play", "Unexpected reply on getStreamLength()\n", "NetStream.Play.Start", "onBWDone", "Error in PT_INVOKE\n", "Unable to parse stream name - name too long?\n", "Unable to parse stream name\n", "Unable to find / in url %s, bad format\n", "Unexpected stream %s, expecting %s\n", "onFCPublish", "NetStream.Publish.Start", "Unknown packet type received 0x%02X\n", "NetStream.Play.Stop", "NetStream.Play.UnpublishNotify", "NetStream.Seek.Notify", "|RtmpSampleAccess", "@setDataFrame", "Unable to write answer\n", "Sending bytes read report\n", "Incomplete flv packets in RTMP_PT_METADATA packet\n", "UnPublishing stream...\n", "FCUnpublish", "Deleting stream...\n", "deleteStream", "timeout", "Detected librtmp style URL parameters, these aren't supported by the libavformat internal RTMP handler currently enabled. See the documentation for the correct way to pass parameters.\n", "rtmp", "rtmp_listen not available for %s\n", "rtmpt", "rtmpts", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "?listen&listen_timeout=%d", "Cannot open connection %s\n", "Cannot open connection %s.\n", "Genuine Adobe Flash Player 001", "rtmp_swfhash", "Handshaking...\n", "Cannot write RTMP handshake request\n", "Cannot read RTMP handshake response\n", "Type answer %d\n", "Server version %d.%d.%d.%d\n", "Server response validating failed\n", "Hash of the decompressed SWF file is not 32 bytes long.\n", "Signature mismatch\n", "Unable to read handshake\n", "RTMP protocol version mismatch\n", "Unable to write answer - RTMP S0\n", "RTMP Handshake C1 Error\n", "RTMP Handshake S1 Error\n", "RTMP Handshake S2 Error\n", "RTMP Handshake C2 Error\n", "Erroneous C2 Message epoch does not match up with C1 epoch\n", "Erroneous C2 Message random does not match up\n", "slist=", "/ondemand/", "ondemand", ".f4v", ".mp4", "mp4:", ".flv", "%s %d,%d,%d,%d", "FMLE/3.0 (compatible; %s)", "Proto = %s, path = %s, app = %s, fname = %s\n", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "Invalid AMF parameter: %s\n", "received abort message\n", "received acknowledgement\n", "Unknown control message type (%d)\n", "Unable to read command string\n", "Expecting connect, got %s\n", "SeqNum not found\n", "App field not found in connect\n", "App field don't match up: %s <-> %s\n", "fmsVer", "FMS/3,0,1,123", "NetConnection.Connect.Success", "Connection succeeded.", "objectEncoding", "rtmp_app", "Name of application to connect to on the RTMP server", "rtmp_buffer", "Set buffer time in milliseconds. The default is 3000.", "rtmp_conn", "Append arbitrary AMF data to the Connect message", "rtmp_flashver", "Version of the Flash plugin used to run the SWF player.", "rtmp_flush_interval", "Number of packets flushed in the same request (RTMPT only).", "rtmp_live", "Specify that the media is a live stream.", "live stream", "recorded", "recorded stream", "rtmp_pageurl", "URL of the web page in which the media was embedded. By default no value will be sent.", "rtmp_playpath", "Stream identifier to play or to publish", "rtmp_subscribe", "Name of live stream to subscribe to. Defaults to rtmp_playpath.", "SHA256 hash of the decompressed SWF file (32 bytes).", "rtmp_swfsize", "Size of the decompressed SWF file, required for SWFVerification.", "rtmp_swfurl", "URL of the SWF player. By default no value will be sent", "rtmp_swfverify", "URL to player swf file, compute hash/size automatically.", "rtmp_tcurl", "URL of the target stream. Defaults to proto://host[:port]/app.", "rtmp_listen", "Listen for incoming rtmp connections", "Maximum timeout (in seconds) to wait for incoming connections. -1 is infinite. Implies -rtmp_listen 1", "payload_type", "libavformat/sccenc.c", "Insufficient timestamps.\n", "\n%02d:%02d:%02d:%02d\t", "%02x%02x", "SCC supports only a single subtitles stream.\n", "Unsupported subtitles codec: %s\n", "Scenarist_SCC V1.0\n", "libavformat/subfile.c", "Impossible to seek in file: %s\n", "end before start\n", "subfile:", "start offset", "end offset", "libavformat/subtitles.c", "UTF16 is automatically converted to UTF8, do not specify a character encoding\n", "Dropping %d duplicated subtitle events\n", "libavformat/tcp.c", "ret:%d neterrno:%d network wait timeout", "ret:%d neterrno:%d socket send failed", "ret:%d neterrno:%d socket revc data failed", "ret:%d neterrno:%d ff_accept failed", "%d proto is not tcp", "%d invalid port", "listen_timeout", "%d Failed to resolve hostname. %s\n", "neterrno:%d Failed to resolve hostname.ctx is null.", "neterrno:%d Failed to resolve hostname,error:%s\n", "%d Failed to resolve hostname %s.", "%d Failed to resolve hostname time out.", "ret:%d neterrno:%d Failed to resolve hostname.", "neterrno:%d ff_socket failed", "ret:%d neterrno:%d ff_listen failed", "ret:%d neterrno:%d ff_listen_bind failed", "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN", "ret:%d neterrno:%d ff_listen_connect failed", "terminated by application in AVAPP_CTRL_DID_TCP_OPEN", "Listen for incoming connections", "set timeout (in microseconds) of socket I/O operations", "connect_timeout", "set connect timeout (in microseconds) of socket", "Connection awaiting timeout (in milliseconds)", "send_buffer_size", "Socket send buffer size (in bytes)", "recv_buffer_size", "Socket receive buffer size (in bytes)", "is_first_packet", "Mark data is first packet or not", "libavformat/udp.c", "setsockopt(IP_DROP_MEMBERSHIP)", "getaddrinfo(%s, %s): %s\n", "socket", "setsockopt(MCAST_JOIN_SOURCE_GROUP)", "setsockopt(MCAST_BLOCK_SOURCE)", "reuse", "overrun_nonfatal", "'overrun_nonfatal' option was set but it is not supported on this build (pthread support is required)\n", "udplite_coverage", "localport", "buffer_size", "fifo_size", "'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)\n", "bitrate", "'bitrate' option was set but it is not supported on this build (pthread support is required)\n", "burst_bits", "localaddr", "sources", "block", "socket option UDPLITE_SEND_CSCOV not available", "socket option UDPLITE_RECV_CSCOV not available", "bind failed", "getnameinfo: %s\n", "setsockopt(IP_MULTICAST_TTL)", "Simultaneously including and excluding multicast sources is not supported\n", "setsockopt(IP_ADD_MEMBERSHIP)", "setsockopt(SO_SNDBUF)", "setsockopt(SO_RECVBUF)", "getsockopt(SO_RCVBUF)", "end receive buffer size reported is %d\n", "attempted to set receive buffer to size %d but it only ended up set as %d", "broadcast", "udplite", "System data size (in bytes)", "Bits to send per second", "Max length of bursts in bits (when using bitrate)", "Local port", "local_port", "Local address", "choose UDPLite head size which should be validated by checksum", "Maximum UDP packet size", "explicitly allow reusing UDP sockets", "reuse_socket", "explicitly allow or disallow broadcast destination", "Time to live (multicast only)", "set if connect() should be called on socket", "set the UDP receiving circular buffer size, expressed as a number of packets with size of 188 bytes", "survive in case of UDP receiving circular buffer overrun", "set raise error timeout (only in read mode)", "Source list", "Block list", "%s://", "libavformat/utils.c", "unknown codec", "unspecified frame size", "unspecified sample format", "unspecified sample rate", "unspecified number of channels", "no decodable DTS frames", "unspecified size", "unspecified pixel format", "no frame in rv30/40 and no sar", "mp4v", "*pkt_buffer", "probing stream %d pp:%d\n", "Failed to reallocate probe buffer for stream %d\n", "nothing to probe for stream %d\n", "Probe with size=%d, packets=%d detected %s with score=%d\n", "probed stream %d\n", "probed stream %d failed\n", "libavformat license: nonfree and unredistributable", "!dst->codec_whitelist && !dst->format_whitelist && !dst->protocol_whitelist && !dst->protocol_blacklist", "Failed to duplicate black/whitelist\n", "Truncating packet of size %d to %lld\n", "Format not on whitelist '%s'\n", "Attached picture on stream %d has invalid size, ignoring\n", "st->internal->avctx->ticks_per_frame", "s->iformat", "DTS %lli < %lli out of order\n", "invalid dts/pts combination %lli\n", "first_dts %s not matching first dts %s (pts %s, duration %lld) in the queue\n", "IN delayed:%d pts:%s, dts:%s cur_dts:%s st:%d pc:%p duration:%lld delay:%d onein_oneout:%d\n", "OUTdelayed:%d/%d pts:%s, dts:%s cur_dts:%s\n", "first_dts %s but no packet with dts in the queue\n", "index == 0 || ie[-1].timestamp < timestamp", "Protocol name not provided, cannot determine if input is local or a network protocol, buffers and access patterns cannot be configured optimally without knowing the protocol\n", "cache", "Reconfiguring buffers to size %lld\n", "tmp_pos > pos_max", "gen_seek: %d %s\n", "ts_min < ts_max", "pos_min=0x%llx pos_max=0x%llx dts_min=%s dts_max=%s\n", "pos_limit <= pos_max", "%lld %lld %lld / %s %s %s target:%s limit:%lld start:%lld noc:%d\n", "read_timestamp() failed in the middle\n", "read_seek: %d %s\n", "using cached pos_min=0x%llx dts_min=%s\n", "index < st->nb_index_entries", "using cached pos_max=0x%llx pos_limit=0x%llx dts_max=%s\n", "Failed to read extradata of size %d\n", "rfps: %f %f\n", "Setting avg frame rate based on r frame rate\n", "st->request_probe <= 0", "Dropped corrupted packet (stream = %d)\n", "Invalid stream index %d\n", "Demuxer context update while decoder is open, closing and trying to re-open\n", "Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\n", "ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%lld, flags=%d\n", "parser not found for codec %s, packets or times may be invalid.\n", "demuxer injecting skip %d / discard %d\n", "Could not inject global side data\n", "read_frame_internal stream=%d, pts=%s, dts=%s, size=%d, duration=%lld, flags=%d\n", "st->index_entries", "seek_frame_generic failed as this stream seems to contain no keyframes after the target timestamp, %d non keyframes found\n", "Ignoring outlier non primary stream starttime %f\n", "Ignoring outlier non primary stream endtime %f\n", "Before avformat_find_stream_info() pos: %lld bytes read:%lld seeks:%d nb_streams:%d\n", "Failed to open codec in %s\n", "interrupted\n", "All info found\n", "Probe buffer size limit of %lld bytes reached\n", "Stream #%d: not enough frames to estimate rate; consider increasing probesize\n", "Non-increasing DTS in stream %d: packet %d with DTS %lld, packet %d with DTS %lld\n", "DTS discontinuity in stream %d: packet %d with DTS %lld, packet %d with DTS %lld\n", "max_analyze_duration %lld reached at %lld microseconds st:%d\n", "decoding for stream %d failed\n", "start time for stream %d is not set in estimate_timings_from_pts\n", "stream %d : no PTS found at end of file, duration not set\n", "stream %d : no TS found at start of file, duration not set\n", "Estimating duration from bitrate, this may be inaccurate\n", "stream %d: start_time: %0.3f duration: %0.3f\n", "format: start_time: %0.3f duration: %0.3f bitrate=%lld kb/s\n", "Could not find codec parameters for stream %d (%s): %s\nConsider increasing the value for the 'analyzeduration' and 'probesize' options\n", "After avformat_find_stream_info() pos: %lld bytes read:%lld seeks:%d frames:%d\n", "AVERROR_DECODER_NOT_FOUND", "AVERROR", "s->nb_streams>0", "s->streams[ s->nb_streams - 1 ] == st", "new_program: id=0x%04x\n", "Chapter end time %lld before start %lld\n", "stream index %d is not valid\n", "%0*d", "Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\n", "Custom AVIOContext makes no sense and will be ignored with AVFMT_NOFILE format.\n", "Discarding ID3 tags because more suitable tags were found.\n", "demuxer does not support additional id3 data, skipping\n", "st:%d removing common factor %d from timebase\n", "st:%d has too large timebase, reducing\n", "Ignoring attempt to set invalid timebase %d/%d for st:%d\n", "Number of streams exceeds max_streams parameter (%d), see the documentation if you wish to increase it\n", "Invalid stream specifier: %s.\n", "Unknown bitstream filter '%s'\n", "Automatically inserted bitstream filter '%s'; args='%s'\n", "Failed to open bitstream filter %s for stream %d with codec %s", "Failed to parse creation_time %s\n", "Invalid palette side data\n", "mov,mp4,3gp,3g2,psp,ipod,ismv,f4v", "dvbsub", "dvbtxt", "loas", "mjpeg_2000", "libavformat/vpcc.c", "Unsupported pixel format (%d)\n", "Unsupported color space (%d)\n", "libavformat/wavdec.c", "length <= sizeof(temp)", "invalid start code %s in RIFF header\n", "invalid format in RIFF header\n", "negative data_size and/or sample_count in ds64: data_size = %lld, sample_count = %lld\n", "found more than one 'fmt ' tag\n", "found more than one 'XMA2' tag\n", "found no 'fmt ' tag before the 'data' tag\n", "Ignoring maximum wav data size, file may be invalid\n", "originator", "originator_reference", "origination_date", "origination_time", "%llu", "time_reference", "0x%016llX%016llX%016llX%016llX", "0x%016llX%016llX%016llX%016llX%016llX%016llX%016llX%016llX", "umid", "coding_history", "found no 'fmt ' tag before the 'SMV0' tag\n", "Unknown SMV version found\n", "Found SMV data\n", "Could not allocate extradata.\n", "too many frames per jpeg\n", "too short LIST tag\n", "no 'fmt ' or 'XMA2' tag found\n", "no 'data' tag found\n", "Data size %lld is too large\n", "ignoring wrong sample_count %lld\n", "WAVE", "RIFF", "RIFX", "RF64", "ds64", "WAV demuxer", "ignore_length", "Ignore length", "libavformat/wavenc.c", "No memory for peak data\n", "wav_write_packet: NOPTS\n", "levl", "Writing local time and date to Peak Envelope Chunk\n", "%Y:%m:%d:%H:%M:%S:", "%03d", "Failed to write timestamp\n", "Filesize %lld invalid for wav, output file will be broken\n", "JUNK", "NONE", "WAVE files have exactly one stream\n", "fmt ", "%s codec not supported in WAVE format\n", "fact", "bext", "%s codec not supported for Peak Chunk\n", "Writing 16 bit peak for 8 bit audio does not make sense\n", "audio/x-wav", "WAV muxer", "write_bext", "Write BEXT chunk.", "write_peak", "Write Peak Envelope chunk.", "Do not write peak chunk.", "Append peak chunk after wav data.", "only", "Write only peak chunk, omit wav data.", "rf64", "Use RF64 header rather than RIFF for large files.", "Write RF64 header if file grows large enough.", "always", "Always write RF64 header regardless of file size.", "never", "Never write RF64 header regardless of file size.", "peak_block_size", "Number of audio samples used to generate each peak frame.", "peak_format", "The format of the peak envelope data (1: uint8, 2: uint16).", "peak_ppv", "Number of peak points per peak value (1 or 2).", "VP8X", "ANIM", "ANMF", "libavformat/webpenc.c", "Only exactly 1 stream is supported\n", "Only WebP is supported\n", "WebP muxer", "Number of times to loop the output: 0 - infinite loop", "libavutil/avstring.c", "tail_len <= 5", "'\\''", "%d channels", "3.0(back)", "quad", "quad(side)", "5.0(side)", "5.1(side)", "6.0(front)", "hexagonal", "6.1(back)", "6.1(front)", "7.0(front)", "7.1(wide)", "7.1(wide-side)", "octagonal", "hexadecagonal", "downmix", "front left", "front right", "front center", "low frequency", "back left", "back right", "front left-of-center", "front right-of-center", "back center", "side left", "side right", "top center", "top front left", "top front center", "top front right", "top back left", "top back center", "top back right", "downmix left", "downmix right", "wide left", "wide right", "surround direct left", "surround direct right", "LFE2", "low frequency 2", "libavutil/cpu.c", "MMX implied by specified flags\n", "detected %d logical cores\n", "armv5te", "armv6", "armv6t2", "vfp_vm", "vfpv3", "neon", "setend", "cpuflags", "%Y-%m-%dT%H:%M:%S", ".%06dZ", "Error number %d occurred", "BSF_NOT_FOUND", "Bitstream filter not found", "Internal bug, should not have happened", "BUG2", "BUFFER_TOO_SMALL", "Buffer too small", "DECODER_NOT_FOUND", "Decoder not found", "DEMUXER_NOT_FOUND", "Demuxer not found", "ENCODER_NOT_FOUND", "Encoder not found", "EXIT", "Immediate exit requested", "EXTERNAL", "Generic error in an external library", "FILTER_NOT_FOUND", "Filter not found", "INPUT_CHANGED", "Input changed", "INVALIDDATA", "Invalid data found when processing input", "MUXER_NOT_FOUND", "Muxer not found", "OPTION_NOT_FOUND", "Option not found", "OUTPUT_CHANGED", "Output changed", "PATCHWELCOME", "Not yet implemented in FFmpeg, patches welcome", "PROTOCOL_NOT_FOUND", "Protocol not found", "STREAM_NOT_FOUND", "Stream not found", "UNKNOWN", "Unknown error occurred", "EXPERIMENTAL", "Experimental feature", "INPUT_AND_OUTPUT_CHANGED", "Input and output changed", "HTTP_BAD_REQUEST", "Server returned 400 Bad Request", "HTTP_UNAUTHORIZED", "Server returned 401 Unauthorized (authorization failed)", "HTTP_FORBIDDEN", "Server returned 403 Forbidden (access denied)", "HTTP_NOT_FOUND", "Server returned 404 Not Found", "HTTP_OTHER_4XX", "Server returned 4XX Client Error, but not one of 40{0,1,3,4}", "HTTP_SERVER_ERROR", "Server returned 5XX Server Error reply", "libavutil/eval.c", "Undefined constant or missing '(' in '%s'\n", "Missing ')' in '%s'\n", "Missing ')' or too many args in '%s'\n", "sinh", "cosh", "tanh", "atan", "asin", "acos", "squish", "isnan", "isinf", "while", "taylor", "floor", "ceil", "hypot", "ifnot", "bitand", "bitor", "between", "atan2", "Unknown function in '%s'\n", "Invalid chars '%s' at the end of expression '%s'\n", "QP2LAMBDA", "Eval", "libavutil/file.c", "Cannot read file '%s': %s\n", "Error occurred in fstat(): %s\n", "Error occurred in mmap(): %s\n", "FILE", "libavutil/file_open.c", "ff_tempfile: Cannot allocate file name\n", "/tmp/%sXXXXXX", "./%sXXXXXX", "ff_tempfile: Cannot open temporary file %s\n", "TEMPFILE", "AVPanScan", "ATSC A53 Part 4 Closed Captions", "Stereoscopic 3d metadata", "AVMatrixEncoding", "Metadata relevant to a downmix procedure", "AVReplayGain", "3x3 displaymatrix", "Active format description", "Motion vectors", "Skip samples", "Audio service type", "GOP timecode", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA512/224", "SHA512/256", "SHA384", "SHA512", "CRC32", "adler32", "libavutil/hwcontext.c", "Invalid mapping found when attempting unmap.\n", "Failed to map frame into derived frame context: %d.\n", "The hardware pixel format '%s' is not supported by the device type '%s'\n", "AVHWFramesContext", "libavutil/imgutils.c", "abs(src_linesize) >= bytewidth", "abs(dst_linesize) >= bytewidth", "av_image_get_linesize failed\n", "Picture size %ux%u is invalid\n", "Picture size %ux%u exceeds specified max pixel count %lld, see the documentation if you wish to increase it\n", "Formats with a palette require a minimum alignment of 4\n", "IMGUTILS", "quiet", "fatal", "panic", "[%s @ %p] ", "[%s] ", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "256color", "%s%s%s%s", "    Last message repeated %d times\r", "    Last message repeated %d times\n", "<%s %s %d> %s", "<%s,%s,%d>%s\n", "libavutil/log.c", " is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "libavutil/mathematics.c", "in_ts != ((int64_t)0x8000000000000000ULL)", "duration >= 0", "libavutil/mem_internal.h", "libavutil/opt.c", "Unable to parse option value \"%s\" as %s\n", "Value %d for parameter '%s' out of %s format range [%d - %d]\n", "Value %f for parameter '%s' out of range [%g - %g]\n", "Value %f for parameter '%s' is not a valid set of 32bit integer flags\n", "size >= 25", "INT64_MAX", "INT64_MIN", "%lld:%02d:%02d.%06d", "%d:%02d.%06d", "%d.%06d", "Unable to parse option value \"%s\" as image size\n", "Unable to parse option value \"%s\" as color\n", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "FLT_MAX", "FLT_MIN", "-FLT_MAX", "-FLT_MIN", "DBL_MAX", "DBL_MIN", "-DBL_MAX", "-DBL_MIN", "Unable to parse option value \"%s\" as video rate\n", "AVOption type %d of option %s not implemented yet\n", "The value set by option '%s' is not an image size.\n", "Invalid negative size value %dx%d for size '%s'\n", "The value set by option '%s' is not a video rate.\n", "The value set by option '%s' is not a %s format", "pixel", "The value set by option '%s' is not a channel layout.\n", "0x%08X", "%02X", "0x%02x%02x%02x%02x", "0x%llx", "The value for option '%s' is not an image size.\n", "The value for option '%s' is not a %s format.\n", "The value for option '%s' is not a channel layout.\n", "%d%*1[:/]%d%c", "const_values array too small for %s\n", "Unable to parse option value \"%s\"\n", "true,y,yes,enable,enabled,on", "false,n,no,disable,disabled,off", "Unable to parse option value \"%s\" as boolean\n", "pixel format", "Unable to parse option value \"%s\" as duration\n", "Unable to parse option value \"%s\" as channel layout\n", "Invalid option type.\n", "Missing key or no key/value separator found after key '%s'\n", "Setting entry with key '%s' to value '%s'\n", "Error setting option %s to value %s.\n", "     %-15s ", "  %s%-17s ", "%-12s ", "<flags>", "<int>", "<int64>", "<uint64>", "<double>", "<float>", "<string>", "<rational>", "<binary>", "<image_size>", "<video_rate>", "<pix_fmt>", "<sample_fmt>", "<duration>", "<color>", "<channel_layout>", "<boolean>", " (from ", " to ", " (default ", "%llX", "\"%s\"", "%s AVOptions:\n", "Not supported option type: %d, option name: %s\n", "Invalid separator(s) found.", "%d:%d%c", "bikeshed", "0123456789ABCDEFabcdef", "libavutil/parseutils.c", "Invalid 0xRRGGBB[AA] color string: '%s'\n", "Cannot find color '%s'\n", "Invalid alpha value specifier '%s' in '%s'\n", "%H:%M:%S", "%Y - %m - %d", "%Y%m%d", "%H%M%S", "%J:%M:%S", "%M:%S", "%H:%M", "%H%M", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "Snow", "SpringGreen", "SteelBlue", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen", "january", "february", "march", "april", "june", "july", "august", "september", "october", "november", "december", "qntsc", "qpal", "sntsc", "spal", "ntsc-film", "sqcif", "qcif", "4cif", "16cif", "qqvga", "qvga", "svga", "uxga", "qxga", "sxga", "qsxga", "hsxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd1080", "2kdci", "2kflat", "2kscope", "4kdci", "4kflat", "4kscope", "hqvga", "wqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "yuvj", "bgra", "rgba", "rgb32", "bgr32", "vaapi", "name nb_components nb_bits", "%-11s %7d %10d", "libavutil/pixdesc.c", "d->log2_chroma_w <= 3", "d->log2_chroma_h <= 3", "d->nb_components <= 4", "d->name && d->name[0]", "(d->nb_components==4 || d->nb_components==2) == !!(d->flags & (1 << 7))", "!c->plane && !c->step && !c->offset && !c->shift && !c->depth", "c->step >= c->depth", "8*c->step >= c->depth", "tmp[0] == 0 && tmp[1] == 0", "yuyv422", "rgb24", "bgr24", "yuv410p", "yuv411p", "gray8,y8", "monow", "monob", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "y16be", "gray16le", "y16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "0rgb", "rgb0", "0bgr", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "mediacodec", "gray12be", "y12be", "gray12le", "y12le", "gray10be", "y10be", "gray10le", "y10le", "p016le", "p016be", "name   depth", "%-6s   %2d ", "cubemap", "tiled equirectangular", "libavutil/timecode.c", "Timecode frame rate must be specified\n", "Drop frame is only allowed with 30000/1001 or 60000/1001 FPS\n", "Using non-standard frame rate %d/%d\n", "%s%02d:%02d:%02d%c%02d", "%d:%d:%d%c%d", "Unable to parse timecode, syntax: hh:mm:ss[:;.]ff\n", "3.3.2", "libavutil/utils.c", "Libavutil has been built with a broken binutils, please upgrade binutils and rebuild\n", "libavutil license: nonfree and unredistributable", "attachment", "!\"valid element size\"", ". -_", "libswresample/audioconvert.c", "ctx->channels == out->ch_count", "libswresample/dither.c", "s->dither.method < SWR_DITHER_NB", "Requested noise shaping dither not available at this sampling rate, using triangular hp dither\n", "SWResampler", "set input channel count", "in_channel_count", "set output channel count", "out_channel_count", "set used channel count", "used_channel_count", "set input sample rate", "set output sample rate", "set input sample format", "set output sample format", "set internal sample format", "internal_sample_fmt", "set input channel layout", "set output channel layout", "clev", "set center mix level", "center_mix_level", "set surround mix level", "surround_mix_level", "set surround mix Level", "lfe_mix_level", "set LFE mix level", "rmvol", "set rematrix volume", "rematrix_volume", "rematrix_maxval", "set rematrix maxval", "swr_flags", "force resampling", "dither_scale", "set dither scale", "dither_method", "set dither method", "select rectangular dither", "select triangular dither", "triangular_hp", "select triangular dither with high pass", "lipshitz", "select Lipshitz noise shaping dither", "shibata", "select Shibata noise shaping dither", "low_shibata", "select low Shibata noise shaping dither", "high_shibata", "select high Shibata noise shaping dither", "f_weighted", "select f-weighted noise shaping dither", "modified_e_weighted", "select modified-e-weighted noise shaping dither", "improved_e_weighted", "select improved-e-weighted noise shaping dither", "filter_size", "set swr resampling filter size", "phase_shift", "set swr resampling phase shift", "linear_interp", "enable linear interpolation", "exact_rational", "enable exact rational", "set cutoff frequency ratio", "resample_cutoff", "resampler", "set resampling Engine", "select SW Resampler", "soxr", "select SoX Resampler", "set soxr resampling precision (in bits)", "cheby", "enable soxr Chebyshev passband & higher-precision irrational ratio approximation", "min_comp", "set minimum difference between timestamps and audio data (in seconds) below which no timestamp compensation of either kind is applied", "min_hard_comp", "set minimum difference between timestamps and audio data (in seconds) to trigger padding/trimming the data.", "comp_duration", "set duration (in seconds) over which data is stretched/squeezed to make it match the timestamps.", "max_soft_comp", "set maximum factor by which data is stretched/squeezed to make it match the timestamps.", "simplified 1 parameter audio timestamp matching, 0(disabled), 1(filling and trimming), >1(maximum stretch/squeeze in samples per second)", "first_pts", "Assume the first pts should be this value (in samples).", "matrix_encoding", "set matrixed stereo encoding", "select none", "dolby", "select Dolby", "dplii", "select Dolby Pro Logic II", "filter_type", "select swr filter type", "select cubic", "blackman_nuttall", "select Blackman Nuttall windowed sinc", "kaiser", "select Kaiser windowed sinc", "kaiser_beta", "set swr Kaiser window beta", "output_sample_bits", "set swr number of output sample bits", "libswresample/rematrix.c", "Treating %s as mono\n", "Input channel layout '%s' is not supported\n", "Output channel layout '%s' is not supported\n", "Matrix coefficients:\n", "%s: ", "%s:%f ", "!s->out_ch_layout || out->ch_count == av_get_channel_layout_nb_channels(s->out_ch_layout)", "!s-> in_ch_layout || in ->ch_count == av_get_channel_layout_nb_channels(s-> in_ch_layout)", "libswresample/resample.c", "a->planar", "tap_count == 1 || tap_count % 2 == 0", "!c->frac && !c->dst_incr_mod", "Unsupported sample format\n", "Filter length too large\n", "libswresample/swresample_frame.c", "Failed to set option\n", "libswresample/swresample.c", "out->planar == in->planar", "out->bps == in->bps", "out->ch_count == in->ch_count", "libswresample license: nonfree and unredistributable", "Requested input sample format %d is invalid\n", "Requested output sample format %d is invalid\n", "Input channel layout 0x%llx is invalid or unsupported.\n", "Output channel layout 0x%llx is invalid or unsupported.\n", "Requested resampling engine is unavailable\n", "Input channel layout has a different number of channels than the number of used channels, ignoring layout\n", "Using %s internally between filters\n", "Requested sample format %s is not supported internally, S16/S32/S64/FLT/DBL is supported\n", "Failed to initialize resampler\n", "Resampling only supported with internal s16/s32/flt/dbl\n", "!s->in_ch_layout", "Input channel count and layout are unset\n", "Output channel layout %s mismatches specified channel count %d\n", "Input channel layout %s mismatches specified channel count %d\n", "Rematrix is needed between %s and %s but there is not enough information to do it\n", "s->used_ch_count", "s->out.ch_count", "!s->preout.count", "a->bps", "a->ch_count", "s->midbuf.ch_count == s->used_ch_count", "s->midbuf.ch_count == s->out.ch_count", "s->in.planar", "s->dither.noise.ch_count == preout->ch_count", "!s->resample", "Context has not been initialized\n", "s->drop_output", "discarding %d audio samples\n", "adding %d audio samples of silence\n", "s->out_sample_rate == s->in_sample_rate", "Failed to compensate for timestamp delta of %f\n", "compensating audio timestamp drift:%f compensation:%d in:%d\n", "libswscale/swscale_internal.h", "libswscale/alphablend.c", "plane_count == nb_components - 1", "swscaler", "SWScaler", "scaler flags", "fast_bilinear", "fast bilinear", "bicubic", "neighbor", "nearest neighbor", "area", "averaging area", "bicublin", "luma bicubic, chroma bilinear", "Gaussian", "sinc", "spline", "natural bicubic spline", "print_info", "print info", "accurate_rnd", "accurate rounding", "full_chroma_int", "full chroma interpolation", "full_chroma_inp", "full chroma input", "error_diffusion", "error diffusion dither", "source width", "source height", "destination width", "destination height", "source format", "destination format", "source is full range", "destination is full range", "scaler param 0", "scaler param 1", "source vertical chroma position in luma grid/256", "source horizontal chroma position in luma grid/256", "destination vertical chroma position in luma grid/256", "destination horizontal chroma position in luma grid/256", "sws_dither", "set dithering algorithm", "leave choice to sws", "bayer dither", "error diffusion", "a_dither", "arithmetic addition dither", "x_dither", "arithmetic xor dither", "gamma correct scaling", "alphablend", "mode for alpha -> non alpha", "ignore alpha", "uniform_color", "blend onto a uniform color", "blend onto a checkerboard", "libswscale/output.c", "libswscale/slice.c", "n == s->plane[ii].available_lines", "libswscale/swscale.c", "Warning: dstStride is not aligned!\n         ->cannot do aligned memory accesses anymore\n", "(lastLumSrcY - firstLumSrcY + 1) <= hout_slice->plane[0].available_lines", "(lastChrSrcY - firstChrSrcY + 1) <= hout_slice->plane[1].available_lines", "One of the input parameters to sws_scale() is NULL, please check the calling code\n", "Slice parameters %d, %d are invalid\n", "Slices start in the middle!\n", "dstY >= ret", "c->dstH >= dstY", "bad src image pointers\n", "bad dst image pointers\n", "libswscale/swscale_unscaled.c", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "srcSliceH > 1", "!(dstStride[0] % 2 || dstStride[1] % 2)", "!(srcStride[0] % 2 || srcStride[1] % 2 || srcStride[2] % 2 || dstStride[0] % 2 || dstStride[1] % 2)", "internal error %s -> %s converter\n", "unsupported bayer conversion\n", "libswscale/utils.c", "sizeFactor > 0", "filter2Size > 0", "minFilterSize > 0", "filterSize > 0", "SwScaler: reducing / aligning filtersize %d -> %d\n", "(*filterPos)[i] >= 0", "(*filterPos)[i] < srcW", "(*filterPos)[i] + j < srcW || !filter[i * filterSize + j]", "SwScaler: zero vector in scaling\n", "sws: initFilter failed\n", "libswscale license: nonfree and unredistributable", "%1.3f ", "ehh flags invalid?!", "dithered ", "deprecated pixel format used, make sure you did set range correctly\n", "%s is not supported as input pixel format\n", "%s is not supported as output pixel format\n", "Exactly one scaler algorithm must be chosen, got %X\n", "%dx%d -> %dx%d is invalid scaling dimension\n", "Forcing full internal H chroma due to odd output size\n", "Forcing full internal H chroma due to input having non subsampled chroma\n", "Desired dithering only supported in full chroma interpolation for destination format '%s'\n", "Ordered dither is not supported in full chroma interpolation for destination format '%s'\n", "%s output is not supported with half chroma resolution, switching to full\n", "full chroma interpolation for destination format '%s' not yet implemented\n", "c->chrDstH <= dstH", "%s scaler, from %s to %s%s ", "using %s\n", "%dx%d -> %dx%d\n", "lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "using alpha blendaway %s -> %s special converter\n", "using unscaled %s -> %s special converter\n", "YUV color matrix differs for YUV->YUV, using intermediate RGB to convert\n", "area averaging", "luma bicubic / chroma bilinear", "nearest neighbor / point", "bicubic spline", "libswscale/vscale.c", "Optimized 2 tap filter code cannot be used\n", "libswscale/yuv2rgb.c", "No accelerated colorspace conversion found from %s to %s.\n", "%ibpp not supported by yuv2rgb\n", "libavresample/audio_convert.c", "audio_convert: found function: %-4s to %-4s (%s)\n", "%d samples - audio_convert: %s to %s (dithered)\n", "%d samples - audio_convert: %s to %s (%s)\n", "cannot remap packed format during conversion\n", "{no name}", "libavresample/audio_data.c", "invalid channel count: %d\n", "invalid sample format\n", "invalid NULL pointer for src[%d]\n", "cannot remap packed format during copy\n", "sample format mismatch\n", "offset out-of-bounds: src=%d dst=%d\n", "dst is read-only\n", "error reallocating dst\n", "AudioData", "[%d to %d] ", "[%d to any] ", "[any to %d] ", "[any to any] ", "libavresample/audio_mix.c", "audio_mix: found function: [fmt=%s] [c=%s] %s(%s)\n", "audio_mix: %d samples - %d to %d channels (%s)\n", "Invalid channel counts\n", "matrix is not set\n", "Invalid mix coeff type\n", "audio_mix: NO FUNCTION FOUND: [fmt=%s] [c=%s] [%d to %d]\n", "  (ZERO)", "  (SKIP)", "  %0.3f ", "audio_mix: %s to %s\n", "matrix size: %d x %d\n", "Unsupported internal format for mixing: %s\n", "error setting mix matrix\n", "libavresample/dither.c", "dithering %s to %s is not supported\n", "sample rate must be 48000 or 44100 Hz for triangular_ns dither. using triangular_hp instead.\n", "dither s16 buffer", "dither flt buffer", "AVAudioResampleContext", "Input Channel Layout", "Input Sample Format", "Input Sample Rate", "Output Channel Layout", "Output Sample Format", "Output Sample Rate", "Internal Sample Format", "8-bit unsigned integer", "16-bit signed integer", "32-bit signed integer", "32-bit float", "64-bit double", "8-bit unsigned integer planar", "s16p", "16-bit signed integer planar", "s32p", "32-bit signed integer planar", "fltp", "32-bit float planar", "dblp", "64-bit double planar", "mix_coeff_type", "Mixing Coefficient Type", "16-bit 8.8 Fixed-Point", "32-bit 17.15 Fixed-Point", "Floating-Point", "Center Mix Level", "Surround Mix Level", "LFE Mix Level", "normalize_mix_level", "Normalize Mix Level", "Force Resampling", "Resampling Filter Size", "Resampling Phase Shift", "Use Linear Interpolation", "Cutoff Frequency Ratio", "Matrixed Stereo Encoding", "None", "Dolby", "Filter Type", "Cubic", "Blackman Nuttall Windowed Sinc", "Kaiser Windowed Sinc", "Kaiser Window Beta", "Dither Method", "No Dithering", "Rectangular Dither", "Triangular Dither", "Triangular Dither With High Pass", "triangular_ns", "Triangular Dither With Noise Shaping", "libavresample/resample.c", "Unsupported internal format for resampling: %s\n", "resample buffer", "resample: %s from %d Hz to %d Hz\n", "Unable to set resampling compensation\n", "Error reallocating resampling buffer\n", "error reallocating output\n", "error during resampling\n", "resampled %d in + %d leftover to %d out + %d leftover\n", "libavresample/utils.c", "[FIFO] add %s to out_fifo\n", "[FIFO] read from out_fifo to output\n", "[end conversion]\n", "[copy] %s to output\n", "The resampling context is already open.\n", "Invalid input channel layout: %llu\n", "Invalid output channel layout: %llu\n", "Using %s as internal sample format\n", "remap channels during in_copy\n", "remap channels during in_convert\n", "remap channels during out_convert\n", "remap channels during out_copy\n", "in_buffer", "resample_out_buffer", "out_buffer", "[start conversion]\n", "output", "input", "[copy] %s to out_buffer\n", "[convert] %s to in_buffer\n", "[copy] %s to in_buffer\n", "[downmix] in_buffer\n", "[resample] %s to %s\n", "[upmix] %s\n", "[convert] %s to output\n", "[convert] %s to out_buffer\n", "Invalid channel layouts\n", "Invalid input channel layout\n", "Invalid channel map\n", "libavresample license: nonfree and unredistributable", "/proc/self/auxv", "/proc/cpuinfo", "Features", " edsp ", " tls ", " thumbee ", " vfp ", " vfpv3 ", " neon ", " asimd ", " fp ", "NEON", "libc.so", "getauxval", "/sys/devices/system/cpu/present", "/sys/devices/system/cpu/possible", "CPU architecture", "(v6l)", "vfpv3d16", "vfpv4", "idiva", "idivt", "idiv", "iwmmxt", "Hardware", "Goldfish", "Processor", "CPU implementer", "CPU variant", "CPU part", "CPU revision", "put_bits", "aac_adtstoasc_init", "flush_put_bits", "aac_adtstoasc_filter", "decode_prediction", "decode_tns", "apply_dependent_coupling", "che_configure", "decode_channel_map", "get_che", "spectral_to_sample", "decode_pce", "decode_audio_specific_config_gb", "decode_eld_specific_config", "latm_decode_audio_specific_config", "decode_audio_specific_config", "aac_decode_init", "decode_band_types", "decode_scalefactors", "decode_ics", "decode_spectrum_and_dequant", "decode_cpe", "aac_decode_er_frame", "aac_decode_frame_int", "@skip_data_stream_element", "decode_extension_payload", "decode_fill", "read_audio_mux_element", "latm_decode_frame", "ff_ps_read_data", "read_iid_data", "read_icc_data", "read_sbr_envelope", "read_sbr_noise", "read_sbr_grid", "sbr_hf_calc_npatches", "read_sbr_data", "read_sbr_extension", "ff_decode_sbr_extension", "sbr_reset", "ff_sbr_apply", "sbr_mapping", "6<5?", "))/113//+++((", "ff_set_fixed_vector", "ff_af_queue_close", "ff_af_queue_add", "ff_af_queue_remove", "av_grow_packet", "av_packet_split_side_data", "av_packet_merge_side_data", "put_bits", "build_table", "avpriv_copy_bits", "ff_init_vlc_sparse", "av_bsf_send_packet", "bytestream2_init", "set_mv_strides", "guess_dc", "ff_er_add_slice", "ff_er_frame_end", "guess_mv", "allocate_buffers", "decode_residuals", "flac_decode_frame", "decode_frame", "dump_headers", "decode_subframe", "decode_subframe_fixed", "decode_subframe_lpc", "ff_flac_decode_frame_header", "ff_flac_is_extradata_valid", "ff_flac_parse_streaminfo", "ff_flv_decode_picture_header", "bytestream2_init", "GIF87aGIF89agif_decode_frame", "gif_parse_next_image", "gif_read_image", "put_bits", "gif_image_write_image", "gif_encode_init", "flush_put_bits", "ff_h263_decode_init", "decode_slice", "ff_h263_decode_frame", "get_nalsize", "ff_h2645_packet_split", "ff_h264_decode_mb_cabac", "get_ue_golomb", "decode_residual", "ff_h264_decode_mb_cavlc", "h264_er_decode_mb", "finalize_frame", "decode_nal_units", "get_last_needed_nal", "debug_green_metadata", "h264_decode_frame", "ff_h264_alloc_tables", "ff_h264_slice_context_init", "ff_h264_decode_init", "ff_h264_direct_ref_list_init", "(Pff_h264dsp_init", "h264_mp4toannexb_filter", "h264_mp4toannexb_init", "h264_extradata_to_annexb", "decode_extradata_ps", "get_ue_golomb", "decode_extradata_ps_mp4", "bytestream2_init", "bytestream2_init_writer", "ff_h264_pred_weight_table", "ff_h264_check_intra4x4_pred_mode", "ff_h264_check_intra_pred_mode", "ff_h264_decode_extradata", "get_ue_golomb", "h264_find_frame_end", "scan_mmco_reset", "get_nalsize", "parse_nal_units", "ff_h264_ref_picture", "ff_h264_field_end", "ff_h264_pred_init", "decode_scaling_list", "decode_hrd_parameters", "ff_h264_decode_seq_parameter_set", "decode_vui_parameters", "Gray", "ff_h264_decode_picture_parameter_set", "more_rbsp_data_in_pps", "find_short", "print_short_term", "print_long_term", "remove_short", "build_def_list", "h264_initialise_ref_list", "ff_h264_build_ref_list", "ff_h264_decode_ref_pic_list_reordering", "ff_h264_execute_ref_pic_marking", "ff_h264_decode_ref_pic_marking", "ff_h264_sei_decode", "decode_picture_timing", "decode_buffering_period", "h264_slice_header_init", "get_pixel_format", "decode_slice", "get_ue_golomb", "h264_frame_start", "alloc_picture", "(Pff_h264_update_thread_context", "ff_h264_execute_decode_slices", "h264_slice_header_parse", "ff_h264_queue_decode_slice", "init_dimensions", "h264_init_ps", "h264_field_start", "h264_select_output_frame", "h264_slice_init", "ff_hevc_cu_qp_delta_abs", "(-39@H", "mvd_decode", "hls_transform_unit", "decode_nal_units", "hls_slice_header", "pred_weight_table", "hevc_frame_start", "set_side_data", "decode_nal_unit", "hls_slice_data_wpp", "bytestream2_init", "hevc_decode_extradata", "hevc_decode_frame", "verify_md5", "hls_decode_entry", "bytestream2_init", "hevc_mp4toannexb_init", "hevc_extradata_to_annexb", "parse_nal_units", "scaling_list_data", "remove_sps", "decode_hrd", "ff_hevc_decode_short_term_rps", "ff_hevc_decode_nal_vps", "ff_hevc_parse_sps", "map_pixel_format", "decode_vui", "ff_hevc_decode_nal_sps", "ff_hevc_decode_nal_pps", "pps_range_extensions", "find_ref_idx", "alloc_frame", "ff_hevc_set_new_ref", "ff_hevc_slice_rpl", "decode_nal_sei_message", "decode_pic_timing", "decode_nal_sei_prefix", "active_parameter_sets", "decode_nal_sei_suffix", "ff_init_scantable_permutation", "avcodec_get_chroma_sub_sample", "ff_intel_h263_decode_picture_header", "check_marker", "check_marker", "ff_h263_show_pict_info", "ff_h263_decode_mb", "ff_h263_decode_picture_header", "ff_kbd_window_init", "fdk_aac_decode_frame", "get_stream_info", "fdk_aac_decode_init", "fdk_aac_decode_flush", "aac_encode_frame", "aac_encode_init", "ff_libwebp_encode_init_common", "ff_libwebp_get_frame", "libwebp_encode_frame", "X264_frame", "encode_nals", "ff_lzw_encode_init", "bytestream2_init", "put_bits", "flush_put_bits", "jpeg_put_comments", "ff_mjpeg_encode_picture_header", "skip_put_bytes", "ff_mjpeg_encode_stuffing", "ff_mjpegenc_huffman_compute_bits", "ff_mjpeg_encode_huffman_close", "put_bits", "ff_mjpeg_encode_coef", "ff_mjpeg_encode_init", "alloc_huffman", "ff_estimate_p_frame_motion", "ff_pre_estimate_p_frame_motion", "mp3_header_decompress", "ff_init_2d_vlc_rl", "put_bits", "parse_config_ALS", "mpeg4_unpack_bframes_init", "mpeg4_unpack_bframes_filter", "check_marker", "ff_mpeg4_pred_dc", "mpeg4_decode_dc", "mpeg4_decode_block", "mpeg4_decode_mb", "mpeg4_decode_partitioned_mb", "ff_mpeg4_decode_video_packet_header", "mpeg4_decode_partition_a", "mpeg4_decode_partition_b", "ff_mpeg4_decode_picture_header", "decode_vol_header", "mpeg4_decode_gop_header", "decode_vop_header", "ff_mpeg4_frame_end", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "mpeg_er_decode_mb", "ff_mpeg_framesize_alloc", "ff_alloc_picture", "alloc_frame_buffer", "ff_mpeg_ref_picture", "find_unused_picture", "put_bits", "clip_coeffs", "flush_put_bits", "encode_mb_hq", "ff_convert_matrix", "load_input_picture", "estimate_best_b_count", "select_input_picture", "ff_mpv_encode_picture", "ff_mpv_encode_init", "ff_mpv_reallocate_putbitbuffer", "rebase_put_bits", "encode_thread", "mpeg_motion_internal", "init_duplicate_context", "init_context_frame", "ff_mpv_common_init", "ff_mpeg_update_thread_context", "ff_mpv_frame_start", "ff_print_debug_info2", "ff_mpv_export_qp_table", "mpv_decode_mb_internal", "mpegvideo_extract_headers", "init_context_defaults", "avcodec_copy_context", "av_parser_parse2", "ff_combine_frame", "pcm_bluray_decode_frame", "pcm_dvd_decode_frame", "pcm_dvd_parse_header", "pcm_decode_init", "decode_frame_png", "decode_frame_common", "decode_ihdr_chunk", "decode_phys_chunk", "decode_idat_chunk", "png_decode_idat", "encode_headers", "png_enc_init", "png_choose_filter", "encode_apng", "release_delayed_buffers", "submit_packet", "ff_thread_report_progress", "ff_thread_await_progress", "ff_thread_finish_setup", "frame_worker_thread", "ff_frame_thread_free", "ff_thread_get_format", "thread_get_buffer_internal", "ff_thread_get_buffer", "ff_thread_release_buffer", "validate_thread_parameters", "ff_alloc_entries", "bits2qp", "qp2bits", "get_qminmax", "modify_qscale", "ff_vbv_update", "ff_rate_control_init", "init_pass2", "ff_rate_estimate_qscale", "raw_init_decoder", "raw_decode", "I420", "IYUV", "yv12", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "YUYVw", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "\fRGBt", "RBA@v", "BRA@s", "@RBAu", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "Y3\u000b\tE", "\t\u000b3YP", "Y3\n\tO", "\t\n3YL", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "XYZ$o", "DVOO.", "L555,", "L565+", "b16g)", "b48rs", "I422!", "I444\f", "J420\r", "J422\"", "J444Z", "YUVA#", "I40AY", "RGB2.", "RV15,", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "I4AB:", "I4FL;", "I4FB,", "av_audio_resample_init", "ff_rl_init_vlc", "ff_fast_malloc", "avcodec_set_dimensions", "apply_param_change", "ff_set_sar", "ff_color_frame", "update_frame_pool", "video_get_buffer", "audio_get_buffer", "ff_init_buffer_info", "get_buffer_internal", "validate_avframe_allocation", "ff_get_buffer", "reget_buffer_internal", "ff_reget_buffer", "ff_alloc_packet2", "avcodec_encode_audio2", "avcodec_encode_video2", "do_encode", "avcodec_encode_subtitle", "avcodec_decode_video2", "avcodec_decode_audio4", "do_decode", "avcodec_decode_subtitle2", "recode_subtitle", "avcodec_get_name", "av_log_ask_for_sample", "av_log_missing_feature", "ff_get_format", "setup_hwaccel", "ff_unlock_avcodec", "ff_lock_avcodec", "ff_thread_ref_frame", "avcodec_open2", "avpriv_find_start_code", "FFmpeg version 3.3.2", "av_vorbis_parse_frame_flags", "vorbis_parse_init", "parse_id_header", "parse_setup_header", "vp9_superframe_filter", "merge_superframe", "init", "config_props", "scquery_formats", "scfilter_frame", "ff_bufqueue_get", "ff_bufqueue_add", "config_output", "frame_list_remove_samples", "filter_frame", "frame_list_add_frame", "request_samples", "request_frame", "request_frame", "filter_frame", "init", "phaser_s32p", "phaser_s16p", "phaser_fltp", "phaser_dblp", "config_output", "config_input", "lfo_get_value", "config_output", "init", "filter_frame", "config_props", "print_gain", "print_peak", "filter_frame", "dump_matrixenc", "dump_downmix", "dump_replaygain", "dump_audio_service_type", "dump_unknown", "print_stats", "yae_overlap_add", "yae_load_data", "yae_load_frag", "yae_reset", "init", "config_output", "filter_frame", "channelmap_init", "Failed to parse channel map\n", "init", "init", "config_output", "config_output", "update_gain_history", "ff_bufqueue_add", "config_input", "entry_func", "gain_interpolate_func", "cubic_interpolate_func", "generate_kernel", "process_command", "config_input", "hdcd_analyze", "hdcd_envelope", "init", "hdcd_integrate", "hdcd_process_stereo", "hdcd_process", "join_init", "parse_maps", "join_config_output", "filter_frame", "init", "config_props", "config_input", "config_output", "filter_frame", "query_formats", "set_expr", "set_volume", "config_output", "filter_frame", "ff_default_get_audio_buffer", "config_output", "close_input", "process_frame", "ff_bufqueue_add", "ff_bufqueue_get", "flush_segment", "heap_bubble_down", "pick_format", "sanitize_channel_layouts", "filter_query_formats", "avfilter_graph_alloc_filter", "query_formats", "graph_check_validity", "graph_config_formats", "swap_sample_fmts_on_filter", "swap_samplerates_on_filter", "swap_channel_layouts_on_filter", "graph_config_pointers", "heap_bubble_up", "ff_filter_graph_run_once", "avfilter_graph_request_oldest", "set_enable_expr", "process_options", "avfilter_link", "ff_avfilter_link_set_in_status", "avfilter_insert_filter", "avfilter_config_links", "ff_avfilter_link_set_out_status", "avfilter_process_command", "avfilter_register", "avfilter_init_dict", "avfilter_init_str", "ff_filter_frame", "ff_inlink_make_frame_writable", "ff_inlink_process_commands", "FFmpeg version 3.3.2", "init", "init_colormatrix", "init_cscheme", "clip_with_log", "filter_frame", "render_freetype", "render_fontconfig", "init_axis_color", "config_output", "init_cqt", "plot_freq", "color_range", "plot_channel", "filter_frame", "config_output", "vsink_query_formats", "asink_query_formats", "av_buffersink_get_time_base", "av_buffersink_get_format", "av_buffersink_get_frame_rate", "av_buffersink_get_w", "av_buffersink_get_h", "av_buffersink_get_sample_aspect_ratio", "av_buffersink_get_channels", "av_buffersink_get_channel_layout", "av_buffersink_get_sample_rate", "av_buffersink_get_hw_frames_ctx", "init_video", "init_audio", "av_buffersrc_add_frame_internal", "av_buffersrc_add_frame_flags", "ff_fill_line_with_color", "ff_draw_color", "process_frame", "filter_frame", "config_video_output", "init", "buffer_offset", "return_audio_frame", "config_output", "init", "ff_bufqueue_get", "push_frame", "filter_frame", "ff_bufqueue_add", "init", "filter_frame", "ff_merge_formats", "ff_merge_samplerates", "ff_parse_pixel_format", "ff_parse_sample_format", "ff_parse_time_base", "ff_parse_sample_rate", "ff_parse_channel_layout", "filter_frame", "ff_frame_pool_get_video_config", "ff_frame_pool_get_audio_config", "ff_frame_pool_get", "framesync_sync_level_update", "framesync_inject_frame", "ff_bufqueue_get", "ff_framesync_configure", "ff_bufqueue_add", "ff_framesync_next", "ff_framesync_process_frame", "filter_frame", "select_frame", "aselect_init", "init", "parse_interval", "parse_command", "parse_commands", "parse_intervals", "filter_frame", "filter_frame", "init", "parse_mapping", "config_output", "parse_definition", "init", "ff_generate_wave_table", "parse_sws_flags", "parse_link_name", "create_filter", "parse_outputs", "link_filter", "link_filter_inouts", "avfilter_graph_parse2", "avfilter_graph_parse", "avfilter_graph_parse_ptr", "ff_load_image", "ff_scale_image", "init", "config_input", "filter_frame", "config_output_props", "filter_frame", "rewind_file", "movie_push_frame", "movie_common_init", "find_stream", "guess_channel_layout", "open_stream", "atrim_filter_frame", "read8_fft_bin", "try_push_frames", "config_output", "ff_bufqueue_get", "ff_bufqueue_add", "init", "get_aspect_ratio", "setdar_config_props", "setsar_config_props", "ff_bufqueue_add", "ff_bufqueue_get", "filter_frame", "config_input", "init", "config_props", "filter_frame", "config_input", "monochrome_color_location", "fill_in_tongue", "plot_white_point", "plot_gamuts", "config_input", "filter_frame", "init", "create_filtergraph", "checkline", "filter_frame", "config_input", "filter_frame", "parse_psfile", "dump_curves", "interpolate", "parse_points_str", "config_input", "config_input", "config_output", "decimate_init", "config_out_props", "filter_frame", "config_input", "init", "config_output", "set_expr", "init", "create_weave_frame", "config_props_output", "filter_frame", "search", "filter_frame", "init", "uninit", "init", "filter_frame", "config_output", "set_srce_frame_dest_pts", "set_work_frame_pts", "process_work_frame", "request_frame", "filter_frame", "get_scene_score16", "blend_frames16", "get_scene_score", "blend_frames8", "config_output_props", "filter_frame", "geq_config_props", "set_expr", "filter_frame", "hwdownload_config_output", "hwdownload_config_input", "hwdownload_filter_frame", "hwmap_config_output", "hwmap_filter_frame", "hwmap_get_buffer", "hwupload_query_formats", "hwupload_config_output", "hwupload_filter_frame", "filter", "filter_frame", "copy_picture_field", "filter_frame", "config_clut", "parse_3dl", "parse_m3d", "lut3d_init", "parse_dat", "negate_init", "config_output", "init", "diff_planes", "filter_frame", "init", "init", "set_expr", "process_command", "do_blend", "config_input_overlay", "config_input", "split_box", "write_palette", "disp_tree", "debug_accuracy", "load_colormap", "debug_mean_error", "config_input_ref", "uninit", "filter_frame", "config_props", "init", "filter_frame", "process_command", "filter_frame", "config_props", "init_dict", "filter_frame", "parse_psfile", "config_input", "config_props_output", "config_props", "filter_frame", "dump_stereo3d", "shuffleplanes_config_input", "put_bits", "init", "get_matching_parameters", "export", "xml_export", "binary_export", "flush_put_bits", "lookup_signatures", "request_frame", "config_input_ref", "uninit", "config_output", "filter_frame", "init", "config_output", "init", "init", "config_props", "filter_frame", "config_props_output", "init", "config_input", "vectorscope16", "vectorscope8", "config_props", "config_props", "filter_frame", "init_pattern_from_string", "init", "parse_rule", "init", "init_pattern_from_file", "draw_mandelbrot", "init", "init", "haldclutsrc_fill_picture", "draw_bar", "ff_generate_window_func", "ape_tag_read_field", "ff_ape_parse_tag", "ff_ape_write_tag", "async_close", "async_open", "async_seek", "put_str16", "ffio_ensure_seekback", "fill_buffer", "avio_close", "ffio_open_whitelist", "ffurl_accept", "url_alloc_for_protocol", "ffurl_alloc", "ffurl_seek", "ffurl_connect", "ffurl_open_whitelist", "avpriv_io_move", "avpriv_io_delete", "avio_open_dir", "avio_close_dir", "ffurl_get_multi_file_handle", "retry_transfer_wrapper", "ffurl_read", "ffurl_read_complete", "ffurl_write", "clfp_seek", "clfp_read", "open_file", "read_cacheentry_info", "clfp_open", "clfp_write", "add_buf", "insert_node", "clfp_close", "save_file", "save_node_info", "cnhp_close", "async_open", "check_net", "open_net", "async_open_internal", "cnhp_wait_timeout", "check_err_code", "open_net_retry", "cnhp_open", "seek_net", "wait_async_open", "cnhp_seek", "async_seek_internal", "read_cache", "read_net", "write_cache", "match_streams_exact_id", "detect_stream_specific", "open_file", "concat_read_header", "add_file", "filter_packet", "concat_read_packet", "hex_dump_internal", "pkt_dump_internal", "print_fps", "print_peak", "print_gain", "dump_metadata", "dump_stream_format", "dump_sidedata", "dump_paramchange", "dump_replaygain", "dump_stereo3d", "dump_audioservicetype", "dump_cpb", "dump_mastering_display_metadata", "dump_spherical", "av_dump_format", "fifo_init", "fifo_write_trailer", "fifo_write_packet", "fifo_write_header", "fifo_thread_write_header", "fifo_thread_dispatch_message", "fifo_thread_write_packet", "fifo_thread_attempt_recovery", "fifo_thread_process_recovery_failure", "fifo_consumer_thread", "clear_index_entries", "flv_read_header", "add_keyframes_index", "amf_parse_object", "parse_keyframes_index", "flv_read_packet", "flv_read_metabody", "put_bits", "write_metadata", "get_audio_flags", "unsupported_codec", "flush_put_bits", "flv_write_codec_header", "flv_write_packet", "flv_append_keyframe_info", "flv_write_header", "shift_data", "flv_write_trailer", "av_probe_input_format3", "av_probe_input_buffer2", "GIF87aGIF89agif_read_ext", "gif_read_packet", "gif_write_header", "flush_packet", "gif_write_packet", "hlsc_get_percent_size", "parse_cookie", "http_getc", "http_buf_read", "http_write_reply", "hlsc_insert_node", "hlsc_reply_message", "hlsc_post_message", "hlsc_close", "hlsc_close_socketpair", "hlsc_notify_download", "hlsc_process_request_stop", "hlsc_send_message", "hlsc_open", "hlsc_seek", "hlsc_shutdown", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_range", "parse_content_encoding", "cookie_string", "http_open_cnx_internal", "http_connect", "get_cookies", "http_open_cnx", "hlsc_save_tcp_hostname_of_ip", "hlsc_seek_internal", "hlsc_process_seek_internal", "hlsc_process_nextnode_request", "hlsc_write_file", "hlsc_process_node_load_finish", "hlsc_check_data_is_enough", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "hlsc_process_data", "hlsc_read_buffer", "hlsc_open_cnx", "hlsc_open_file", "http_open", "http_listen", "http_handshake", "hlsc_create_file", "hlsc_process_seek_http", "hlsc_process_request_download", "hlsc_dispath_message", "store_icy", "hlsc_read", "check_err_code", "nested_io_open", "read_from_url", "open_input", "hls_read_header", "read_data", "update_init_section", "intercept_id3", "com.apple.streaming.transportStreamTimestamp", "parse_id3", "handle_id3", "recheck_discard_flags", "hls_read_packet", "hls_read", "hls_open", "http_write_reply", "parse_cookie", "http_getc", "http_buf_read", "http_accept", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_encoding", "cookie_string", "http_connect", "get_cookies", "http_handshake", "http_listen", "http_open_cnx", "ff_http_do_new_request", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "store_icy", "http_open", "http_proxy_open", "ff_id3v2_write_apic", "decode_str", "read_geobtag", "read_apic", "read_ttag", "read_chapter", "id3v2_parse", "read_comment", "read_uslt", "image/gif", "image/jpeg", "image/jpg", "image/png", "image/tiff", "image/bmp", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "ijkav_register_ijkmediadatasource_protocol", "ijkav_register_ijkhttphook_protocol", "ijkav_register_ijklongurl_protocol", "ijkav_register_ijksegment_protocol", "ijkav_register_ijktcphook_protocol", "ijkav_register_ijkio_protocol", "ff_img_read_header", "ff_img_read_packet", "write_packet", "ff_rename", "ff_mp4_read_descr", "ff_mp4_read_dec_config_descr", "c608", "sac3", "alac", ".mp1", "twos", "lpcm", "lpcm\r", "in24\f", "in24\t", "fLaC", "v410", "dmb1\t", "SVQ3\r", "mp4v\r", "DIVX\r", "XVID\r", "VP31+", "rpza,", "cvid1", "8BPS2", "smc 8", "rle1.", "WRLE;", "mp2vY", "mjp2^", "tga a", "tiffb", "gif >", "png >", "MNG G", "vc-1X", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "pxlt", "ff_mov_read_chan", "ff_mov_cenc_avc_write_nal_units", "ff_mov_init_hinting", "check_pkt", "put_bits", "find_fps", "get_cluster_duration", "mov_write_sidx_tag", "mov_write_hdlr_tag", "mov_write_identification", "mov_write_uuidprof_tag", "flush_put_bits", "mov_init", "avc1\r", "text", "ipod_get_codec_tag", "avc1\r", "mp4a", "tx3g", "avc1k", "VP6A]", "VP6F", "mov_get_dv_codec_tag", "yuv2", "yuvs", "2vuy", "raw  ", "BGRA ", "RGBA ", "ABGR ", "b48r0", "mov_get_rawvideo_codec_tag", "mov_get_codec_tag", "\u000b\t\u000b\tmov_write_chan_tag", "mov_write_avid_tag", "mov_write_dvc1_structs", "mov_write_video_tag", "mov_write_colr_tag", "mov_write_st3d_tag", "mov_write_sv3d_tag", "mov_write_tmcd_tag", "mov_write_source_reference_tag", "mov_write_tkhd_tag", "mov_write_edts_tag", "mov_write_trak_tag", "mov_write_mdhd_tag", "shift_data", "mov_flush_fragment", "ff_mov_write_packet", "\fencd", "mov_write_trailer", "mov_read_enda", "mov_probe", "mov_read_tmcd", "mov_read_fiel", "mov_read_strf", "mov_read_stps", "mov_read_default", "mov_read_glbl", "mov_read_moov", "mov_switch_root", "mov_read_dfla", "mov_read_saiz", "mov_read_sbgp", "mov_read_tfhd", "mov_read_tfdt", "mov_read_stts", "mov_read_stss", "mov_read_stsc", "mov_read_elst", "mov_read_stco", "mov_read_hdlr", "mov_read_custom", "mov_read_ftyp", "mov_read_sv3d", "mov_read_st3d", "mov_read_senc", "mov_read_uuid", "mov_read_wfex", "mov_read_dec3", "mov_read_dac3", "mov_read_wave", "mov_read_pasp", "mov_find_next_sample", "mov_rewrite_dvd_sub_extradata", "mov_open_dref", "mov_read_tkhd", "mov_read_moof", "mov_read_mfra", "read_tfra", "mov_read_adrm", "mov_read_dref", "mov_read_colr", "mov_read_frma", "mov_read_free", "mov_read_keys", "mov_metadata_loci", "mov_read_covr", "mov_read_udta_string", "mov_realloc_extradata", "mov_read_atom_into_extradata", "mov_read_aclr", "mov_read_trex", "fix_index_entry_timestamps", "mov_metadata_creation_time", "mov_read_mvhd", "mov_read_mdhd", "mov_read_stsz", "mov_read_sidx", "mov_read_ddts", "mov_read_ctts", "mov_update_dts_shift", "mov_read_trun", "mov_read_header", "mov_read_chapters", "fix_timescale", "mov_seek_stream", "mov_read_seek", "mov_read_packet", "mov_seek_auxiliary_info", "cenc_filter", "mov_read_trak", "mov_build_index", "mov_fix_index", "ff_mov_read_stsd_entries", "mov_skip_multiple_stsd", "mov_parse_stsd_audio", "mov_parse_stsd_data", "mov_read_stsd", "mp3_seek", "mp3_sync", "mp3_parse_info_tag", "read_xing_toc", "mp3_read_header", "mp3_write_xing", "mp3_write_header", "mp3_write_audio_packet", "mp3_write_packet", "mp3_write_trailer", "mp3_update_xing", "mpegps_read_pes_header", "mpegps_read_dts", "mpegts_set_stream_info", "reanalyze", "mpegts_resync", "mpegts_open_filter", "seek_back", "parse_mp4_descr", "handle_packet", "handle_packets", "mpegts_read_header", "get_packet_size", "new_pes_packet", "mpegts_push_data", "m4sl_cb", "pat_cb", "sdt_cb", "ff_parse_mpeg2_descriptor", "drac", "HEVC", "VC-1", "check_packet", "do_packet_auto_bsf", "write_packet", "compute_muxer_pkt_fields", "avformat_alloc_output_context2", "init_muxer", "ff_interleave_add_packet", "ff_interleave_packet_per_dts", "av_interleaved_write_frame", "av_write_uncoded_frame_internal", "av_write_uncoded_frame_query", "ff_network_init", "ff_socket", "ff_listen", "ff_accept", "ff_listen_connect", "io_open_default", "pcm_read_header", "prompeg_open", "prompeg_init", "prompeg_create_bitstring", "force_one_stream", "rawvideo_read_header", "ff_get_wav_header", "ff_read_riff_info", "ff_end_tag", "IARL", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "ff_put_wav_header", "VSM4\r", "FMP4\r", "DIVX\r", "DX50\r", "XVID\r", "MP4S\r", "M4S2\r", "ZMP4\r", "DIV1\r", "BLZ0\r", "mp4v\r", "UMP4\r", "WV1F\r", "SEDG\r", "RMP4\r", "3IV2\r", "WAWV\r", "FFDS\r", "FVFW\r", "DCOD\r", "MVXM\r", "PM4V\r", "SMP4\r", "DXGM\r", "VIDM\r", "M4T3\r", "GEOX\r", "G264\r", "HDX4\r", "DM4V\r", "DMK2\r", "DYM4\r", "DIGI\r", "EPHV\r", "EM4A\r", "M4CC\r", "SN40\r", "VSPX\r", "ULDX\r", "GEOV\r", "SIPP\r", "SM4V\r", "XVIX\r", "DreX\r", "QMP4\r", "PLV1\r", "GLV4\r", "GMP4\r", "MNM4\r", "JR24\n", "JPGL\f", "MJLS\f", "HFYUD", "IV32p", "IV41q", "VP30[", "VP50\\", "VP60\\", "VP61\\", "VP62k", "VP6A]", "VP6F]", "VP90 ", "ASV1!", "ASV2$", "VCR1\"", "FFV1*", "Xxanr", "LM20.", "mrle.", "MSVC/", "msvc/", "CRAM/", "cram/", "WHAM/", "wham,", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "SNOW#", "S263W", "svq19", "tscc:", "ULTI<", "VIXL=", "QPEG=", "Q1.0=", "Q1.1H", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "VMnc^", "tga >", "MPNG>", "PNG1>", "png %", "CLJRu", "drac+", "azpr+", "RPZA+", "rpza\u000b", "SP54|", "AURA}", "LAGSl", "ZECO", "Y41P3", "CUVCF", "AV01", "ff_amf_get_string", "rtmp_packet_read_one_chunk", "amf_tag_contents", "ff_rtmp_packet_dump", "handle_client_bw", "handle_server_bw", "handle_chunk_size", "write_begin", "bytestream2_init_writer", "bytestream2_init", "rtmp_seek", "gen_seek", "rtmp_pause", "gen_pause", "write_status", "rtmp_receive_hs_packet", "rtmp_parse_result", "handle_ping", "gen_pong", "gen_swf_verification", "handle_connect_error", "handle_invoke_error", "gen_release_stream", "gen_fcpublish_stream", "gen_create_stream", "handle_invoke_result", "gen_publish", "gen_play", "handle_invoke_status", "send_invoke_response", "rtmp_send_hs_packet", "get_packet", "handle_metadata", "gen_fcunpublish_stream", "gen_delete_stream", "rtmp_calc_swfhash", "rtmp_handshake", "rtmp_server_handshake", "rtmp_write_amf_data", "read_connect", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "scc_write_header", "slave_seek", "subfile_open", "ff_text_init_avio", "drop_dups", "tcp_write", "tcp_read", "tcp_accept", "tcp_open", "log_net_error", "udp_resolve_host", "udp_open", "udp_port", "add_to_pktbuf", "read_from_packet_buffer", "probe_codec", "set_codec_from_probe_data", "try_decode_frame", "ff_copy_whiteblacklists", "ffio_limit", "av_demuxer_open", "avformat_queue_attached_pictures", "ff_compute_frame_duration", "compute_pkt_fields", "update_initial_durations", "ff_add_index_entry", "ff_configure_buffers_for_index", "ff_find_last_ts", "ff_gen_search", "ff_seek_frame_binary", "ff_alloc_extradata", "ff_get_extradata", "ff_rfps_add_frame", "ff_rfps_calculate", "ff_read_packet", "read_frame_internal", "seek_frame_generic", "avformat_seek_file", "update_stream_timings", "avformat_find_stream_info", "estimate_timings_from_pts", "estimate_timings_from_bit_rate", "estimate_timings", "av_find_best_stream", "av_read_play", "av_read_pause", "ff_free_stream", "av_new_program", "avpriv_new_chapter", "av_program_add_stream_index", "avformat_open_input", "init_input", "0123456789abcdef0123456789ABCDEFavpriv_set_pts_info", "avformat_new_stream", "avformat_query_codec", "avformat_network_init", "ff_add_param_change", "avformat_match_stream_specifier", "ff_stream_add_bitstream_filter", "av_apply_bitstream_filters", "ff_parse_creation_time_metadata", "ff_get_packet_palette", "FFmpeg version 3.3.2", "get_bit_depth", "get_vpx_color_space", "get_vpx_chroma_subsampling", "wav_parse_bext_string", "wav_read_header", "peak_write_frame", "wav_write_packet", "peak_write_chunk", "wav_write_trailer", "wav_write_header", "peak_init_writer", "RIFF", "WEBP", "webp_write_header", "av_cpu_count", "parse_primary", "av_expr_parse", "av_file_map", "avpriv_open", "avpriv_tempfile", "av_hwframe_map", "av_hwframe_get_buffer", "av_hwframe_ctx_init", "image_copy_plane", "image_copy", "av_image_check_size2", "av_image_alloc", "av_image_copy_to_buffer", "missing_feature_sample", "av_rescale_delta", "ff_fast_malloc", "set_string_fmt", "write_number", "format_duration", "set_string_image_size", "set_string_color", "log_value", "set_string_video_rate", "av_opt_set_defaults2", "av_opt_set_image_size", "av_opt_set_video_rate", "set_format", "av_opt_set_channel_layout", "av_opt_get_image_size", "get_format", "av_opt_get_channel_layout", "set_string_number", "set_string_bool", "av_opt_set", "parse_key_value_pair", "av_opt_set_from_string", "av_opt_set_dict2", "opt_list", "av_opt_show2", "av_opt_is_set_to_default", "av_opt_serialize", "av_parse_color", "ff_check_pixfmt_descriptors", "s16p", "s32p", "fltp", "dblp", "s64p", "check_timecode", "av_timecode_init_from_string", "avutil_version", "IPBSipbav_int_list_length_for_size", "FFmpeg version 3.3.2", "<fBBf<", "fffffff", "fff$", "000`", "<00000000<", "<\f\f\f\f\f\f\f\f<", "<ll>", "8ll8", "8ll8", "|||||||", "<fBBf<", "0xx00", "x00000x", "x`````x", "p000x", "p00000x", "p000x", "p000x", "p000x", "<ll>", "8ll8", "8ll8", "<<<<", "swri_audio_convert", "swri_get_dither", "swri_dither_init", "swr_build_matrix", "swri_rematrix_init", "swri_rematrix", "resample_flush", "build_filter", "resample_init", "swr_config_frame", "copy", "swr_alloc_set_opts", "swr_init", "swri_realloc_audio", "swr_convert_internal", "swr_convert", "swr_drop_output", "swr_inject_silence", "swr_get_out_samples", "swr_next_pts", "FFmpeg version 3.3.2", "isGray", "ff_sws_alphablendaway", "isBE", "isALPHA", "isBE", "is16BPS", "isNBPS", "isBE", "is16BPS", "isNBPS", "ff_sws_init_output_funcs", "alloc_lines", "isPlanarYUV", "isYUV", "isGray", "usePal", "isALPHA", "isPlanar", "usePal", "isAnyRGB", "isNBPS", "is16BPS", "isPacked", "swscale", "@@@@@@@@isBE", "isGray", "isBayer", "sws_scale", "Rgb16ToPlanarRgb16Wrapper", "bayer_to_yv12_wrapper", "bayer_to_rgb24_wrapper", "planar8ToP01xleWrapper", "planarToP010Wrapper", "is16BPS", "isNBPS", "isBE", "palToRgbWrapper", "rgbToPlanarRgbWrapper", "planarRgbToRgbWrapper", "rgbToRgbWrapper", "isAnyRGB", "isPlanar", "isPackedRGB", "isBayer", "ff_get_unscaled_swscale", "isPlanarYUV", "isYUV", "isGray", "isPacked", "initFilter", "sws_init_context", "isAnyRGB", "isPlanarRGB", "isBayer", "isALPHA", "isYUV", "isGray", "sws_setColorspaceDetails", "isNBPS", "is16BPS", "isPlanarYUV", "isYUV", "isGray", "isALPHA", "ff_yuv2rgb_get_func_ptr", "isALPHA", "isPlanar", "ff_yuv2rgb_c_init_tables", "ff_audio_convert_set_func", "ff_audio_convert", "ff_audio_data_init", "ff_audio_data_copy", "ff_audio_data_combine", "ff_audio_mix_set_func", "ff_audio_mix", "ff_audio_mix_get_matrix", "ff_audio_mix_set_matrix", "mix_function_init", "ff_audio_mix_alloc", "ff_dither_alloc", "avresample_set_compensation", "ff_audio_resample", "handle_buffered_output", "avresample_open", "avresample_convert", "avresample_get_matrix", "avresample_set_matrix", "avresample_set_channel_mapping", "error", "warning", "info", "debug", "unknown", "x264 [%s]: ", "true", "false", "x264_2pass.log", "auto", "threads", "lookahead-threads", "sliced-threads", "sync-lookahead", "deterministic", "n-deterministic", "cpu-independent", "level", "level-idc", "bluray-compat", "avcintra-class", "%d:%d", "%d/%d", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "%u/%u", "frameref", "dpb-size", "keyint", "infinite", "min-keyint", "keyint-min", "scenecut", "intra-refresh", "bframes", "b-adapt", "b-bias", "b-pyramid", "open-gop", "filter", "deblock", "%d,%d", "slice-max-size", "slice-max-mbs", "slice-min-mbs", "slices", "slices-max", "cabac", "cabac-idc", "interlaced", "constrained-intra", "flat", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "dump-yuv", "analyse", "partitions", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "8x8dct", "weightb", "weight-b", "weightp", "direct", "direct-pred", "chroma-qp-offset", "merange", "me-range", "mvrange", "mv-range", "mvrange-thread", "mv-range-thread", "subme", "subq", "psy-rd", "%f:%f", "%f,%f", "%f|%f", "chroma-me", "mixed-refs", "trellis", "fast-pskip", "dct-decimate", "deadzone-inter", "deadzone-intra", "bitrate", "qp_constant", "crf-max", "rc-lookahead", "qpmin", "qp-min", "qpmax", "qp-max", "qpstep", "qp-step", "ratetol", "vbv-maxrate", "vbv-bufsize", "vbv-init", "ipratio", "ip-factor", "pbratio", "pb-factor", "aq-mode", "aq-strength", "pass", "stats", "qcomp", "mbtree", "qblur", "cplxblur", "cplx-blur", "zones", "crop-rect", "%u,%u,%u,%u", "psnr", "ssim", "sps-id", "global-header", "repeat-headers", "annexb", "force-cfr", "nal-hrd", "filler", "pic-struct", "fake-interlaced", "frame-packing", "stitchable", "opencl", "opencl-clbin", "opencl-device", "baseline", "main", "high", "high10", "high422", "high444", "%s profile doesn't support lossless\n", "%s profile doesn't support 4:4:4\n", "%s profile doesn't support 4:2:2\n", "baseline profile doesn't support interlacing\n", "baseline profile doesn't support fake interlacing\n", "invalid profile: %s\n", "malloc of size %d failed\n", "ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo", "invalid preset '%s'\n", ",./-+", "film", "animation", "grain", "stillimage", "fastdecode", "zerolatency", "touhou", "invalid tune '%s'\n", "only 1 psy tuning can be used: ignoring tune %s\n", "fake", "2pass", "%dx%d ", "fps=%u/%u ", "timebase=%u/%u ", "bitdepth=%d ", "opencl=%d ", "cabac=%d", " ref=%d", " deblock=%d:%d:%d", " analyse=%#x:%#x", " me=%s", " subme=%d", " psy=%d", " psy_rd=%.2f:%.2f", " mixed_ref=%d", " me_range=%d", " chroma_me=%d", " trellis=%d", " 8x8dct=%d", " cqm=%d", " deadzone=%d,%d", " fast_pskip=%d", " chroma_qp_offset=%d", " threads=%d", " lookahead_threads=%d", " sliced_threads=%d", " slices=%d", " slices_max=%d", " slice_max_size=%d", " slice_max_mbs=%d", " slice_min_mbs=%d", " nr=%d", " decimate=%d", " interlaced=%s", " bluray_compat=%d", " stitchable=%d", " constrained_intra=%d", " bframes=%d", " b_pyramid=%d b_adapt=%d b_bias=%d direct=%d weightb=%d open_gop=%d", " weightp=%d", " keyint=infinite", " keyint=%d", " keyint_min=%d scenecut=%d intra_refresh=%d", " rc_lookahead=%d", " rc=%s mbtree=%d", " crf=%.1f", " bitrate=%d ratetol=%.1f", " qcomp=%.2f qpmin=%d qpmax=%d qpstep=%d", " cplxblur=%.1f qblur=%.1f", " vbv_maxrate=%d vbv_bufsize=%d", " crf_max=%.1f", " qp=%d", " nal_hrd=%s filler=%d", " crop_rect=%u,%u,%u,%u", " frame-packing=%d", " ip_ratio=%.2f", " pb_ratio=%.2f", " aq=%d", ":%.2f", " zones=%s", " zones", "none", "bt709", "undef", "bt470bg", "smpte170m", "smpte240m", "YCgCo", "bt2020nc", "bt2020c", "smpte2085", "bt470m", "linear", "log100", "log316", "iec61966-2-4", "bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-12", "smpte2084", "smpte428", "bt2020", "smpte431", "smpte432", "component", "ntsc", "secam", "show", "crop", "strict", "normal", "tesa", "spatial", "temporal", "x264 - core %d%s - H.264/MPEG-4 AVC codec - Copy%s 2003-2017 - http://www.videolan.org/x264.html - options: %s", " r2800 2cb792a", "left", "AVC-Intra SEI is too large (%d)\n", "frame MB size (%dx%d) > level limit (%d)\n", "DPB size (%d frames, %d mbs) > level limit (%d frames, %d mbs)\n", "VBV bitrate (%lld) > level limit (%d)\n", "VBV buffer (%lld) > level limit (%d)\n", "MV range (%lld) > level limit (%d)\n", "interlaced (%lld) > level limit (%d)\n", "fake interlaced (%lld) > level limit (%d)\n", "MB rate (%lld) > level limit (%d)\n", "pf_log not set! did you forget to call x264_param_default?\n", "invalid width x height (%dx%d)\n", "invalid CSP (only I420/YV12/NV12/NV21/I422/YV16/NV16/I444/YV24/BGR/BGRA/RGB supported)\n", "width not divisible by %d (%dx%d)\n", "height not divisible by %d (%dx%d)\n", "invalid crop-rect %u,%u,%u,%u\n", "crop-rect %u,%u,%u,%u not divisible by %dx%d\n", "OpenCL: frame size is too small, disabling opencl\n", "OpenCL: device id and device skip count configured; dropping skip\n", "ignoring unknown frame packing value\n", "cropped resolution %dx%d not compatible with tile format frame packing\n", "broken ffmpeg default settings detected\n", "use an encoding preset (e.g. -vpre medium)\n", "preset usage: -vpre <speed> -vpre <profile>\n", "speed presets are listed in x264 --help\n", "profile is optional; x264 defaults to high\n", "no ratecontrol method specified\n", "%2d-bit AVC-Intra is not widely compatible\n", "10-bit x264 is required to encode AVC-Intra\n", "bitrate not specified\n", "VBV is incompatible with constant QP, ignored.\n", "VBV maxrate unspecified, assuming CBR\n", "VBV bufsize set but maxrate unspecified, ignored\n", "max bitrate less than average bitrate, assuming CBR\n", "VBV maxrate specified, but no bufsize, ignored\n", "interlace + slice-min-mbs is not implemented\n", "slice-min-mbs > row mb size (%d) not implemented\n", "subme=0 + direct=temporal is not supported\n", "b-pyramid normal + intra-refresh is not supported\n", "ref > 1 + intra-refresh is not supported\n", "intra-refresh is not compatible with open-gop\n", "lookaheadless mb-tree requires intra refresh or infinite keyint\n", "--%s used with psy on: results will be invalid!\n", "--ssim used with AQ off: results will be invalid!\n", "--psnr used with AQ on: results will be invalid!\n", "interlace + me=esa is not implemented\n", "interlace + weightp is not implemented\n", "using mv_range_thread = %d\n", "NAL HRD parameters require VBV parameters\n", "CBR HRD requires constant bitrate\n", "--tune %s should be used if attempting to benchmark %s!\n", "invalid level_idc: %d\n", "invalid DTS: PTS is less than DTS\n", " PSNR Y:%5.2f U:%5.2f V:%5.2f", " SSIM Y:%.5f", "frame=%4d QP=%.2f NAL=%d Slice:%c Poc:%-3d I:%-4d P:%-4d SKIP:%-4d size=%d bytes%s\n", "slice-max-size violated (frame %d, cause: slice-min-mbs)\n", "Main", "Constrained Baseline", "High", "High 4:4:4 Predictive", "High 10", "High 4:2:2", "High 4:4:4 Intra", "High 4:2:2 Intra", "High 10 Intra", "Effective timebase denominator %u exceeds H.264 maximum\n", "cannot create valid sample aspect ratio\n", "using SAR=%d/%d\n", "using cpu capabilities:", "SSE2", "SSE3", "SSE4.1", "BMI1", " none!", "MV cost test failed: x264 has been miscompiled!\n", "CLZ test failed: x264 has been miscompiled!\n", "failed to load OpenCL\n", "HRD bitrate: %i bits/sec\n", "CPB size: %i bits\n", "dump_yuv: can't write to %s\n", "dump_yuv: incompatible with non-regular file %s\n", "%d.%d", "profile %s, level %s\n", "profile %s, level %s, %s %d-bit\n", "x264_encoder_invalidate_reference is not supported with B-frames enabled\n", "x264_encoder_invalidate_reference is not supported with intra refresh enabled\n", "lookahead thread is already stopped\n", "non-strictly-monotonic PTS\n", "uvDC", "uvAC", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f  PSNR Mean Y:%5.2f U:%5.2f V:%5.2f Avg:%5.2f Global:%5.2f\n", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f\n", "consecutive B-frames:%s\n", " %4.1f%%", "mb I  %s\n", "mb P  %s  P16..4: %4.1f%% %4.1f%% %4.1f%% %4.1f%% %4.1f%%    skip:%4.1f%%\n", "  B16..8: %4.1f%% %4.1f%% %4.1f%%  direct:%4.1f%%  skip:%4.1f%%", "  L0:%4.1f%% L1:%4.1f%% BI:%4.1f%%", "mb B  %s\n", " inter:%.1f%%", " skip:%.1f%%", "field mbs: intra: %.1f%%%s\n", "8x8 transform intra:%.1f%%%s\n", "direct mvs  spatial:%.1f%% temporal:%.1f%%\n", " inter: %.1f%% %.1f%% %.1f%%", "coded y,%s,%s intra: %.1f%% %.1f%% %.1f%%%s\n", "i16 v,h,dc,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i%d v,h,dc,ddl,ddr,vr,hd,vl,hu: %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i8c dc,h,v,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "Weighted P-Frames: Y:%.1f%% UV:%.1f%%\n", "ref %c L%d:%s\n", "SSIM Mean Y:%.7f (%6.3fdb)\n", "PSNR Mean Y:%6.3f U:%6.3f V:%6.3f Avg:%6.3f Global:%6.3f kb/s:%.2f\n", "kb/s:%.2f\n", "I16..4%s: %4.1f%% %4.1f%% %4.1f%%", "..PCM", "4:0:0", "4:2:0", "4:2:2", "4:4:4", "OpenCL: %s\n", "OpenCL: fatal error, aborting encode\n", "libOpenCL.so", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "(SI)", "-DVECTORIZE=1", "OpenCL: Unable to query installed platforms\n", "OpenCL: malloc of installed platforms buffer failed\n", "OpenCL: %s does not support required image formats\n", "x264_lookahead.clbin", "OpenCL: Unable to find a compatible device\n", "Advanced Micro Devices, Inc.", "libatiadlxx.so", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "OpenCL acceleration disabled, switchable graphics detected\n", "OpenCL acceleration enabled with %s %s %s\n", "Compiling OpenCL kernels...\n", "OpenCL: unable to create program\n", "OpenCL: unable to open clbin file for write\n", "OpenCL: Unable to query program binary size, no cache file generated\n", "OpenCL: Unable to query program binary, no cache file generated\n", "OpenCL: Compilation failed, unable to query build log\n", "OpenCL: Compilation failed, unable to alloc build log\n", "OpenCL: Compilation failed, unable to get build log\n", "x264_kernel_build_log.txt", "OpenCL: Compilation failed, unable to create file x264_kernel_build_log.txt\n", "OpenCL: kernel build errors written to x264_kernel_build_log.txt\n", "OpenCL: Unable to compile kernel '%s' (%d)\n", "OpenCL: Unable to allocate page-locked buffer, error '%d'\n", "OpenCL: Unable to map page-locked buffer, error '%d'\n", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "Invalid input colorspace\n", "This build of x264 requires 8-bit input. Rebuild to support high depth input.\n", "v210 input is only compatible with bit-depth of 10 bits\n", "forced frame type (%d) at %d is unknown\n", "Input picture width (%d) is greater than stride (%d)\n", "Impossible QP constraints for CQM (min=%d, max=%d)\n", "can't open file '%s'\n", "INTRA4X4_LUMA", "bad coefficient in list '%s'\n", " \t\n,", "not enough coefficients in list '%s'\n", "0123456789", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", "internal error P_L0 and partition=%d\n", "internal error\n", "internal error (invalid MB type)\n", "internal error (!8x8 && !4x4)\n", "scene cut at %d Icost:%d Pcost:%d ratio:%.4f bias:%.4f gop:%d (imb:%d pmb:%d)\n", "forced frame type (%d) at %d was changed to frame type (%d)\n", "B-ref at frame %d incompatible with B-pyramid %s \n", "B-ref at frame %d incompatible with B-pyramid %s and %d reference frames\n", "specified frame type (%d) at %d is not compatible with keyframe interval\n", "specified frame type is not compatible with max B-frames\n", "slice=%c but 2pass stats say %c\n", "MB-tree frametype %d doesn't match actual frametype %d.\n", "Incomplete MB-tree stats file.\n", "VBV buffer size cannot be smaller than one frame, using %d kbit\n", "VBV parameters cannot be changed when NAL HRD is in use\n", "CRF max must be greater than CRF\n", "constant rate-factor is incompatible with 2pass.\n", "HRD with very large timescale and bufsize not supported\n", "bitrate tolerance too small, using .01\n", "%d,%d,q=%d%n", "%d,%d,b=%f%n", "%d,%d%n", "invalid zone: \"%s\"\n", "invalid zone param: %s = %s\n", "invalid zone: start=%d end=%d\n", "invalid zone: bitrate_factor=%f\n", "encoder/ratecontrol.c", "h->param.rc.psz_stat_in", "ratecontrol_init: can't open stats file\n", ".mbtree", "ratecontrol_init: can't open mbtree stats file\n", "#options:", "options list in stats file not valid\n", "#options: %dx%d", "resolution specified in stats file not valid\n", "timebase=", "timebase specified in stats file not valid\n", "timebase=%u/%u", "timebase mismatch with 1st pass (%u/%u vs %u/%u)\n", "bitdepth=", "bitdepth=%d", "different bitdepth setting than first pass (%d vs %d)\n", "weightp=", "weightp=%d", "different weightp setting than first pass (%d vs %d)\n", "bframes=", "bframes=%d", "different bframes setting than first pass (%d vs %d)\n", "b_pyramid=", "b_pyramid=%d", "different b_pyramid setting than first pass (%d vs %d)\n", "intra_refresh=", "intra_refresh=%d", "different intra_refresh setting than first pass (%d vs %d)\n", "open_gop=", "open_gop=%d", "different open_gop setting than first pass (%d vs %d)\n", "bluray_compat=", "bluray_compat=%d", "different bluray_compat setting than first pass (%d vs %d)\n", "interlaced=", "interlaced=%4s", "different interlaced setting than first pass (%s vs %s)\n", "keyint=", "different keyint setting than first pass (%.*s vs %.*s)\n", "qp=0", "1st pass was lossless, bitrate prediction will be inaccurate\n", "direct=3", "direct=auto not used on the first pass\n", "b_adapt=", "b_adapt=%d", "b_adapt method specified in stats file not valid\n", "rc_lookahead=", "rc_lookahead=%d", "empty stats file\n", "2nd pass has fewer frames than 1st pass (%d vs %d)\n", "2nd pass has more frames than 1st pass (%d vs %d)\n", " in:%d out:%d ", "bad frame number (%d) at stats line %d\n", "bad frame output number (%d) at stats line %d\n", " in:%*d out:%*d type:%c dur:%lld cpbdur:%lld q:%f aq:%f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c", "ref:", "w:%hd,%hd,%hd,%hd,%hd,%hd,%hd,%hd", "statistics are damaged at line %d, parser out=%d\n", "requested bitrate is too low. estimated minimum is %d kbps\n", "qscale[i] >= 0", "rce->new_qscale >= 0", "vbv-maxrate issue, qpmax or vbv-maxrate too low\n", "Error: 2pass curve failed to converge\n", "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", "try reducing target bitrate or reducing qp_min (currently %d)\n", "try reducing target bitrate\n", "try increasing target bitrate or increasing qp_max (currently %d)\n", "try increasing target bitrate\n", ".temp", "#options: %s\n", ".mbtree.temp", "failed to parse zones\n", "final ratefactor: %.2f\n", "failed to rename \"%s\" to \"%s\"\n", "frame >= 0 && frame < rc->num_entries", "2nd pass has more frames than 1st pass (%d)\n", "continuing anyway, at constant QP=%d\n", "disabling adaptive B-frames\n", "in:%d out:%d type:%c dur:%lld cpbdur:%lld q:%.2f aq:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c ref:", "w:%d,%d,%d", ",%d,%d,%d,%d,%d ", "VBV underflow due to CRF-max (frame %d, %.0f bits)\n", "VBV underflow (frame %d, %.0f bits)\n", "ratecontrol_end: stats file could not be written to\n", "underflow", "overflow", "CPB %s: %.0f bits in a %.0f-bit buffer\n", "clCreateImage2D error '%d'\n", "clCreateBuffer error '%d'\n", "clEnqueueWriteBuffer error '%d'\n", "clSetKernelArg error '%d'\n", "clEnqueueNDRangeKernel error '%d'\n", "clEnqueueReadBuffer error '%d'\n", "clEnqueueCopyBuffer error '%d'\n", "%d.%d.%d", "AAC Decoder Lib", "AAC Encoder", "MPEG Transport", "SBR Decoder", "SBR Encoder", "PCM Downmix Lib", "FDK Tools", "This program is protected by copyright law and international treaties.\nAny reproduction or distribution of this program, or any portion\nof it, may result in severe civil and criminal penalties, and will be\nprosecuted to the maximum extent possible under law.\n\n", "da61701177db765ccd237bb630593f2a", "#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable\nconstant sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;\n/* 7.18.1.1  Exact-width integer types */\ntypedef signed char int8_t;\ntypedef unsigned char   uint8_t;\ntypedef short  int16_t;\ntypedef unsigned short  uint16_t;\ntypedef int  int32_t;\ntypedef unsigned   uint32_t;\ntypedef uint8_t  pixel;\ntypedef uint16_t sum_t;\ntypedef uint32_t sum2_t;\n#define LOWRES_COST_MASK ((1<<14)-1)\n#define LOWRES_COST_SHIFT 14\n#define COST_MAX (1<<28)\n#define PIXEL_MAX 255\n#define BITS_PER_SUM (8 * sizeof(sum_t))\n/* Constants for offsets into frame statistics buffer */\n#define COST_EST    0\n#define COST_EST_AQ 1\n#define INTRA_MBS   2\n#define COPY2_IF_LT( x, y, a, b )\\\nif( (y) < (x) )\\\n{\\\n(x) = (y);\\\n(a) = (b);\\\n}\nconstant int2 dia_offs[4] =\n{\n{0, -1}, {-1, 0}, {1, 0}, {0, 1},\n};\ninline pixel x264_clip_pixel( int x )\n{\nreturn (pixel) clamp( x, (int) 0, (int) PIXEL_MAX );\n}\ninline int2 x264_median_mv( short2 a, short2 b, short2 c )\n{\nshort2 t1 = min(a, b);\nshort2 t2 = min(max(a, b), c);\nreturn convert_int2(max(t1, t2));\n}\ninline sum2_t abs2( sum2_t a )\n{\nsum2_t s = ((a >> (BITS_PER_SUM - 1)) & (((sum2_t)1 << BITS_PER_SUM) + 1)) * ((sum_t)-1);\nreturn (a + s) ^ s;\n}\n#define HADAMARD4( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nsum2_t t0 = s0 + s1;\\\nsum2_t t1 = s0 - s1;\\\nsum2_t t2 = s2 + s3;\\\nsum2_t t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define HADAMARD4V( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nint2 t0 = s0 + s1;\\\nint2 t1 = s0 - s1;\\\nint2 t2 = s2 + s3;\\\nint2 t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define SATD_C_8x4_Q( name, q1, q2 )\\\nint name( q1 pixel *pix1, int i_pix1, q2 pixel *pix2, int i_pix2 )\\\n{\\\nsum2_t tmp[4][4];\\\nsum2_t a0, a1, a2, a3;\\\nsum2_t sum = 0;\\\nfor( int i = 0; i < 4; i++, pix1 += i_pix1, pix2 += i_pix2 )\\\n{\\\na0 = (pix1[0] - pix2[0]) + ((sum2_t)(pix1[4] - pix2[4]) << BITS_PER_SUM);\\\na1 = (pix1[1] - pix2[1]) + ((sum2_t)(pix1[5] - pix2[5]) << BITS_PER_SUM);\\\na2 = (pix1[2] - pix2[2]) + ((sum2_t)(pix1[6] - pix2[6]) << BITS_PER_SUM);\\\na3 = (pix1[3] - pix2[3]) + ((sum2_t)(pix1[7] - pix2[7]) << BITS_PER_SUM);\\\nHADAMARD4( tmp[i][0], tmp[i][1], tmp[i][2], tmp[i][3], a0, a1, a2, a3 );\\\n}\\\nfor( int i = 0; i < 4; i++ )\\\n{\\\nHADAMARD4( a0, a1, a2, a3, tmp[0][i], tmp[1][i], tmp[2][i], tmp[3][i] );\\\nsum += abs2( a0 ) + abs2( a1 ) + abs2( a2 ) + abs2( a3 );\\\n}\\\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\\\n}\n/*\n* Utility function to perform a parallel sum reduction of an array of integers\n*/\nint parallel_sum( int value, int x, volatile local int *array )\n{\narray[x] = value;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint dim = get_local_size( 0 );\nwhile( dim > 1 )\n{\ndim >>= 1;\nif( x < dim )\narray[x] += array[x + dim];\nif( dim > 32 )\nbarrier( CLK_LOCAL_MEM_FENCE );\n}\nreturn array[0];\n}\nint mv_cost( uint2 mvd )\n{\nfloat2 mvdf = (float2)(mvd.x, mvd.y) + 1.0f;\nfloat2 cost = round( log2(mvdf) * 2.0f + 0.718f + (float2)(!!mvd.x, !!mvd.y) );\nreturn (int) (cost.x + cost.y);\n}\n/* Hierarchical (iterative) OpenCL lowres motion search */\ninline int find_downscale_mb_xy( int x, int y, int mb_width, int mb_height )\n{\n/* edge macroblocks might not have a direct descendant, use nearest */\nx = select( x >> 1, (x - (mb_width&1)) >> 1, x == mb_width-1 );\ny = select( y >> 1, (y - (mb_height&1)) >> 1, y == mb_height-1 );\nreturn (mb_width>>1) * y + x;\n}\n/* Four threads calculate an 8x8 SAD.  Each does two rows */\nint sad_8x8_ii_coop4( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos, int idx, local int16_t *costs )\n{\nfrefpos.y += idx << 1;\nfencpos.y += idx << 1;\nint cost = 0;\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge.  The GPU clamps reads from\n* (-1, 0) to (0,0), so you get pixels [0, 1, 2, 3] when what you really\n* want are [0, 0, 1, 2]\n*/\nfor( int y = 0; y < 2; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\npixel ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\n}\nelse\n{\nuint4 enc, ref, costs = 0;\nenc = read_imageui( fenc, sampler, fencpos );\nref = read_imageui( fref, sampler, frefpos );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 0) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 0) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(0, 1) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 1) );\ncosts += abs_diff( enc, ref );\ncost = costs.s0 + costs.s1 + costs.s2 + costs.s3;\n}\ncosts[idx] = cost;\nreturn costs[0] + costs[1] + costs[2] + costs[3];\n}\n/* One thread performs 8x8 SAD */\nint sad_8x8_ii( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos )\n{\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge */\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\nuint ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost;\n}\nelse\n{\nuint4 enc, ref, cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x += 4 )\n{\nenc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) );\nref = read_imageui( fref, sampler, frefpos + (int2)(x, y) );\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost.s0 + cost.s1 + cost.s2 + cost.s3;\n}\n}\n/*\n* hierarchical motion estimation\n*\n* Each kernel launch is a single iteration\n*\n* MB per work group is determined by lclx / 4 * lcly\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*/\nkernel void hierarchical_motion( read_only image2d_t  fenc,\nread_only image2d_t  fref,\nconst global short2 *in_mvs,\nglobal short2       *out_mvs,\nglobal int16_t      *out_mv_costs,\nglobal short2       *mvp_buffer,\nlocal int16_t       *cost_local,\nlocal short2        *mvc_local,\nint                  mb_width,\nint                  lambda,\nint                  me_range,\nint                  scale,\nint                  b_shift_index,\nint                  b_first_iteration,\nint                  b_reverse_references )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\nconst int mb_size = 8;\nint2 coord = (int2)(mb_x, mb_y) * mb_size;\nconst int mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += 4 * mb_in_group;\nint i_mvc = 0;\nmvc_local += 4 * mb_in_group;\nmvc_local[mb_i] = 0;\nint2 mvp =0;\nif( !b_first_iteration )\n{\n#define MVC( DX, DY )\\\n{\\\nint px = mb_x + DX;\\\nint py = mb_y + DY;\\\nmvc_local[i_mvc] = b_shift_index ? in_mvs[find_downscale_mb_xy( px, py, mb_width, mb_height )] : \\\nin_mvs[mb_width * py + px];\\\nmvc_local[i_mvc] >>= (short) scale;\\\ni_mvc++;\\\n}\n/* Find MVP from median of MVCs */\nif( b_reverse_references )\n{\n/* odd iterations: derive MVP from down and right */\nif( mb_x < mb_width - 1 )\nMVC( 1, 0 );\nif( mb_y < mb_height - 1 )\n{\nMVC( 0, 1 );\nif( mb_x > b_shift_index )\nMVC( -1, 1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, 1 );\n}\n}\nelse\n{\n/* even iterations: derive MVP from up and left */\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > b_shift_index )\nMVC( -1, -1 );\n}\n}\n#undef MVC\nmvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\n}\n/* current mvp matches the previous mvp and we have not changed scale.  We know\n* we're going to arrive at the same MV again, so just copy the previous\n* result to our output. */\nif( !b_shift_index && mvp.x == mvp_buffer[mb_xy].x && mvp.y == mvp_buffer[mb_xy].y )\n{\nout_mvs[mb_xy] = in_mvs[mb_xy];\nreturn;\n}\nmvp_buffer[mb_xy] = convert_short2_sat(mvp);\nint2 mv_min = -mb_size * (int2)(mb_x, mb_y) - 4;\nint2 mv_max = mb_size * ((int2)(mb_width, mb_height) - (int2)(mb_x, mb_y) - 1) + 4;\nint2 bestmv = clamp(mvp, mv_min, mv_max);\nint2 refcrd = coord + bestmv;\n/* measure cost at bestmv */\nint bcost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\nlambda * mv_cost( abs_diff( bestmv, mvp ) << (2 + scale) );\ndo\n{\n/* measure costs at offsets from bestmv */\nrefcrd = coord + bestmv + dia_offs[mb_i];\nint2 trymv = bestmv + dia_offs[mb_i];\nint cost = sad_8x8_ii( fenc, coord, fref, refcrd ) +\nlambda * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\ncost_local[mb_i] = (cost<<2) | mb_i;\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\nif( (cost >> 2) >= bcost )\nbreak;\nbestmv += dia_offs[cost&3];\nbcost = cost>>2;\nif( bestmv.x >= mv_max.x || bestmv.x <= mv_min.x || bestmv.y >= mv_max.y || bestmv.y <= mv_min.y )\nbreak;\n}\nwhile( --me_range > 0 );\nint2 trymv = 0, diff = 0;\n#define COST_MV_NO_PAD( L )\\\ntrymv = clamp( trymv, mv_min, mv_max );\\\ndiff = convert_int2_sat(abs_diff( mvp, trymv ));\\\nif( diff.x > 1 || diff.y > 1 ) {\\\nint2 refcrd = coord + trymv;\\\nint cost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\\\nL * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\\\nif( cost < bcost ) { bcost = cost; bestmv = trymv; } }\nCOST_MV_NO_PAD( 0 );\nif( !b_first_iteration )\n{\n/* try cost at previous iteration's MV, if MVP was too far away */\nint2 prevmv = b_shift_index ? convert_int2_sat(in_mvs[find_downscale_mb_xy( mb_x, mb_y, mb_width, mb_height )]) : convert_int2_sat(in_mvs[mb_xy]);\nprevmv >>= scale;\ntrymv = prevmv;\nCOST_MV_NO_PAD( lambda );\n}\nfor( int i = 0; i < i_mvc; i++ )\n{\n/* try cost at each candidate MV, if MVP was too far away */\ntrymv = convert_int2_sat( mvc_local[i] );\nCOST_MV_NO_PAD( lambda );\n}\nif( mb_i == 0 )\n{\nbestmv <<= scale;\nout_mvs[mb_xy] = convert_short2_sat(bestmv);\nout_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n}\n/* Mode selection routines, select the least SATD cost mode for each lowres\n* macroblock.  When measuring B slices, this includes measuring the cost of\n* three bidir modes.  */\n/* Four threads cooperatively measure 8x8 BIDIR cost with SATD */\nint bidir_satd_8x8_ii_coop4( read_only image2d_t fenc_lowres,\nint2 fencpos,\nread_only image2d_t fref0_planes,\nint2 qpos0,\nread_only image2d_t fref1_planes,\nint2 qpos1,\nint weight,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nsum2_t sum = 0;\nint2 fref0Apos = (int2)(qpos0.x>>2, qpos0.y>>2);\nint hpel0A = ((qpos0.x&2)>>1) + (qpos0.y&2);\nint2 qpos0B = (int2)qpos0 + (int2)(((qpos0.x&1)<<1), ((qpos0.y&1)<<1));\nint2 fref0Bpos = (int2)(qpos0B.x>>2, qpos0B.y>>2);\nint hpel0B = ((qpos0B.x&2)>>1) + (qpos0B.y&2);\nint2 fref1Apos = (int2)(qpos1.x>>2, qpos1.y>>2);\nint hpel1A = ((qpos1.x&2)>>1) + (qpos1.y&2);\nint2 qpos1B = (int2)qpos1 + (int2)(((qpos1.x&1)<<1), ((qpos1.y&1)<<1));\nint2 fref1Bpos = (int2)(qpos1B.x>>2, qpos1B.y>>2);\nint hpel1B = ((qpos1B.x&2)>>1) + (qpos1B.y&2);\nuint mask_shift0A = 8 * hpel0A, mask_shift0B = 8 * hpel0B;\nuint mask_shift1A = 8 * hpel1A, mask_shift1B = 8 * hpel1B;\nuint vA, vB;\nuint enc, ref0, ref1;\nuint a0, a1;\nconst int weight2 = 64 - weight;\n#define READ_BIDIR_DIFF( OUT, X )\\\nenc = read_imageui( fenc_lowres, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref0_planes, sampler, fref0Apos + (int2)(X, idx) ).s0 >> mask_shift0A) & 0xFF;\\\nvB = (read_imageui( fref0_planes, sampler, fref0Bpos + (int2)(X, idx) ).s0 >> mask_shift0B) & 0xFF;\\\nref0 = rhadd( vA, vB );\\\nvA = (read_imageui( fref1_planes, sampler, fref1Apos + (int2)(X, idx) ).s0 >> mask_shift1A) & 0xFF;\\\nvB = (read_imageui( fref1_planes, sampler, fref1Bpos + (int2)(X, idx) ).s0 >> mask_shift1B) & 0xFF;\\\nref1 = rhadd( vA, vB );\\\nOUT = enc - ((ref0 * weight + ref1 * weight2 + (1 << 5)) >> 6);\n#define READ_DIFF_EX( OUT, a, b )\\\nREAD_BIDIR_DIFF( a0, a );\\\nREAD_BIDIR_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\n#define ROW_8x4_SATD( a, b, c )\\\nfencpos.y += a;\\\nfref0Apos.y += b;\\\nfref0Bpos.y += b;\\\nfref1Apos.y += c;\\\nfref1Bpos.y += c;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\nROW_8x4_SATD( 0, 0, 0 );\nROW_8x4_SATD( 4, 4, 4 );\n#undef READ_BIDIR_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\n/*\n* mode selection - pick the least cost partition type for each 8x8 macroblock.\n* Intra, list0 or list1.  When measuring a B slice, also test three bidir\n* possibilities.\n*\n* fenc_lowres_mvs[0|1] and fenc_lowres_mv_costs[0|1] are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors:\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs0[(b - p0 - 1) * mb_count]\n*\n* global launch dimensions for P slice estimate:  [mb_width, mb_height]\n* global launch dimensions for B slice estimate:  [mb_width * 4, mb_height]\n*/\nkernel void mode_selection( read_only image2d_t   fenc_lowres,\nread_only image2d_t   fref0_planes,\nread_only image2d_t   fref1_planes,\nconst global short2  *fenc_lowres_mvs0,\nconst global short2  *fenc_lowres_mvs1,\nconst global short2  *fref1_lowres_mvs0,\nconst global int16_t *fenc_lowres_mv_costs0,\nconst global int16_t *fenc_lowres_mv_costs1,\nconst global uint16_t *fenc_intra_cost,\nglobal uint16_t      *lowres_costs,\nglobal int           *frame_stats,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nint                   mb_width,\nint                   bipred_weight,\nint                   dist_scale_factor,\nint                   b,\nint                   p0,\nint                   p1,\nint                   lambda )\n{\nint mb_x = get_global_id( 0 );\nint b_bidir = b < p1;\nif( b_bidir )\n{\n/* when mode_selection is run for B frames, it must perform BIDIR SATD\n* measurements, so it is launched with four times as many threads in\n* order to spread the work around more of the GPU.  And it can add\n* padding threads in the X direction. */\nmb_x >>= 2;\nif( mb_x >= mb_width )\nreturn;\n}\nint mb_y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint mb_count = mb_width * mb_height;\nint mb_xy = mb_x + mb_y * mb_width;\n/* Initialize int frame_stats[4] for next kernel (sum_inter_cost) */\nif( mb_x < 4 && mb_y == 0 )\nframe_stats[mb_x] = 0;\nint bcost = COST_MAX;\nint list_used = 0;\nif( !b_bidir )\n{\nint icost = fenc_intra_cost[mb_xy];\nCOPY2_IF_LT( bcost, icost, list_used, 0 );\n}\nif( b != p0 )\n{\nint mv_cost0 = fenc_lowres_mv_costs0[(b - p0 - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost0, list_used, 1 );\n}\nif( b != p1 )\n{\nint mv_cost1 = fenc_lowres_mv_costs1[(p1 - b - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost1, list_used, 2 );\n}\nif( b_bidir )\n{\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint mb_i = get_global_id( 0 ) & 3;\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\n#define TRY_BIDIR( mv0, mv1, penalty )\\\n{\\\nint2 qpos0 = (int2)((coord.x<<2) + mv0.x, (coord.y<<2) + mv0.y);\\\nint2 qpos1 = (int2)((coord.x<<2) + mv1.x, (coord.y<<2) + mv1.y);\\\ncost_local[mb_i] = bidir_satd_8x8_ii_coop4( fenc_lowres, coord, fref0_planes, qpos0, fref1_planes, qpos1, bipred_weight, satd_local, mb_i );\\\nint cost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\\\nCOPY2_IF_LT( bcost, penalty * lambda + cost, list_used, 3 );\\\n}\n/* temporal prediction */\nshort2 dmv0, dmv1;\nshort2 mvr = fref1_lowres_mvs0[mb_xy];\ndmv0 = (mvr * (short) dist_scale_factor + (short) 128) >> (short) 8;\ndmv1 = dmv0 - mvr;\nTRY_BIDIR( dmv0, dmv1, 0 )\nif( as_uint( dmv0 ) || as_uint( dmv1 ) )\n{\n/* B-direct prediction */\ndmv0 = 0; dmv1 = 0;\nTRY_BIDIR( dmv0, dmv1, 0 );\n}\n/* L0+L1 prediction */\ndmv0 = fenc_lowres_mvs0[(b - p0 - 1) * mb_count + mb_xy];\ndmv1 = fenc_lowres_mvs1[(p1 - b - 1) * mb_count + mb_xy];\nTRY_BIDIR( dmv0, dmv1, 5 );\n#undef TRY_BIDIR\n}\nlowres_costs[mb_xy] = min( bcost, LOWRES_COST_MASK ) + (list_used << LOWRES_COST_SHIFT);\n}\n/*\n* parallel sum inter costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_inter_cost( const global uint16_t *fenc_lowres_costs,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width,\nint                   bframe_bias,\nint                   b,\nint                   p0,\nint                   p1 )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nint intra_mbs = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_lowres_costs[mb_xy] & LOWRES_COST_MASK;\nint list = fenc_lowres_costs[mb_xy] >> LOWRES_COST_SHIFT;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nif( list == 0 && b_frame_score_mb )\nintra_mbs++;\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nintra_mbs   = parallel_sum( intra_mbs, x, buffer );\nif( b != p1 )\ncost_est = (int)((float)cost_est * 100.0f / (120.0f + (float)bframe_bias));\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST, cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\natomic_add( frame_stats + INTRA_MBS, intra_mbs );\n}\n}\n/* OpenCL lowres subpel Refine */\n/* Each thread performs 8x8 SAD.  4 threads per MB, so the 4 DIA HPEL offsets are\n* calculated simultaneously */\nint sad_8x8_ii_hpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefpos = qpos >> 2;\nint hpel_idx = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nuint mask_shift = 8 * hpel_idx;\nuint4 cost4 = 0;\nfor( int y = 0; y < 8; y++ )\n{\nuint4 enc, val4;\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(0, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(1, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(2, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(3, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(4, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(5, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(6, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(7, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\n}\nreturn cost4.s0 + cost4.s1 + cost4.s2 + cost4.s3;\n}\n/* One thread measures 8x8 SAD cost at a QPEL offset into an HPEL plane */\nint sad_8x8_ii_qpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nint2 qposB = qpos + ((qpos & 1) << 1);\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x & 2) >> 1) + (qposB.y & 2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y)).s0;\nuint vA = (read_imageui( fref_planes, sampler, frefApos + (int2)(x, y)).s0 >> mask_shift0) & 0xFF;\nuint vB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(x, y)).s0 >> mask_shift1) & 0xFF;\ncost += abs_diff( enc, rhadd( vA, vB ) );\n}\n}\nreturn cost;\n}\n/* Four threads measure 8x8 SATD cost at a QPEL offset into an HPEL plane\n*\n* Each thread collects 1/4 of the rows of diffs and processes one quarter of\n* the transforms\n*/\nint satd_8x8_ii_qpel_coop4( read_only image2d_t fenc,\nint2 fencpos,\nread_only image2d_t fref_planes,\nint2 qpos,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x&2)>>1) + (qpos.y&2);\nint2 qposB = qpos + (int2)(((qpos.x&1)<<1), ((qpos.y&1)<<1));\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x&2)>>1) + (qposB.y&2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nuint vA, vB;\nuint a0, a1;\nuint enc;\nsum2_t sum = 0;\n#define READ_DIFF( OUT, X )\\\nenc = read_imageui( fenc, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref_planes, sampler, frefApos + (int2)(X, idx) ).s0 >> mask_shift0) & 0xFF;\\\nvB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(X, idx) ).s0 >> mask_shift1) & 0xFF;\\\nOUT = enc - rhadd( vA, vB );\n#define READ_DIFF_EX( OUT, a, b )\\\n{\\\nREAD_DIFF( a0, a );\\\nREAD_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\\\n}\n#define ROW_8x4_SATD( a, b )\\\n{\\\nfencpos.y += a;\\\nfrefApos.y += b;\\\nfrefBpos.y += b;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\\\n}\nROW_8x4_SATD( 0, 0 );\nROW_8x4_SATD( 4, 4 );\n#undef READ_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\nconstant int2 hpoffs[4] =\n{\n{0, -2}, {-2, 0}, {2, 0}, {0, 2}\n};\n/* sub pixel refinement of motion vectors, output MVs and costs are moved from\n* temporary buffers into final per-frame buffer\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*\n* With X being the source 16x16 pixels, F is the lowres pixel used by the\n* motion search.  We will now utilize the H V and C pixels (stored in separate\n* planes) to search at half-pel increments.\n*\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*  V C V C V\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*\n* The YX HPEL bits of the motion vector selects the plane we search in.  The\n* four planes are packed in the fref_planes 2D image buffer.  Each sample\n* returns:  s0 = F, s1 = H, s2 = V, s3 = C */\nkernel void subpel_refine( read_only image2d_t   fenc,\nread_only image2d_t   fref_planes,\nconst global short2  *in_mvs,\nconst global int16_t *in_sad_mv_costs,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nlocal short2         *mvc_local,\nglobal short2        *fenc_lowres_mv,\nglobal int16_t       *fenc_lowres_mv_costs,\nint                   mb_width,\nint                   lambda,\nint                   b,\nint                   ref,\nint                   b_islist1 )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\n/* fenc_lowres_mv and fenc_lowres_mv_costs are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors.  The kernel will be passed the correct\n* directional buffer for the direction of the search: list1 or list0\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs[(b - p0 - 1) * mb_count] */\nfenc_lowres_mv +=       (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\nfenc_lowres_mv_costs += (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\n/* Adjust pointers into local memory buffers for this thread's data */\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\nmvc_local += mb_in_group * 4;\nint i_mvc = 0;\nmvc_local[0] = mvc_local[1] = mvc_local[2] = mvc_local[3] = 0;\n#define MVC( DX, DY ) mvc_local[i_mvc++] = in_mvs[mb_width * (mb_y + DY) + (mb_x + DX)];\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > 0 )\nMVC( -1, -1 );\n}\n#undef MVC\nint2 mvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\nint bcost =  in_sad_mv_costs[mb_xy];\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint2 bmv = convert_int2_sat( in_mvs[mb_xy] );\n/* Make mvp and bmv QPEL MV */\nmvp <<= 2; bmv <<= 2;\n#define HPEL_QPEL( ARR, FUNC )\\\n{\\\nint2 trymv = bmv + ARR[mb_i];\\\nint2 qpos = (coord << 2) + trymv;\\\nint cost = FUNC( fenc, coord, fref_planes, qpos ) + lambda * mv_cost( abs_diff( trymv, mvp ) );\\\ncost_local[mb_i] = (cost<<2) + mb_i;\\\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\\\nif( (cost>>2) < bcost )\\\n{\\\nbmv += ARR[cost&3];\\\nbcost = cost>>2;\\\n}\\\n}\nHPEL_QPEL( hpoffs, sad_8x8_ii_hpel );\nHPEL_QPEL( dia_offs, sad_8x8_ii_qpel );\nfenc_lowres_mv[mb_xy] = convert_short2_sat( bmv );\n/* remeasure cost of bmv using SATD */\nint2 qpos = (coord << 2) + bmv;\ncost_local[mb_i] = satd_8x8_ii_qpel_coop4( fenc, coord, fref_planes, qpos, satd_local, mb_i );\nbcost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\nbcost += lambda * mv_cost( abs_diff( bmv, mvp ) );\nfenc_lowres_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n/* Lookahead lowres intra analysis\n*\n* Each intra analysis function has been implemented twice, once for scalar GPUs\n* (NV) and once for vectorized GPUs (AMD pre-Southern Islands).  x264 detects\n* the GPU type and sets the -DVECTORIZE compile flag accordingly.\n*\n* All the intra analysis functions were based on their C versions in pixel.c\n* and produce the exact same results.\n*/\n/* force all clamp arguments and return value to int, prevent ambiguous types */\n#define clamp_int( X, MIN, MAX ) (int) clamp( (int)(X), (int)(MIN), (int)(MAX) )\n#if VECTORIZE\nint satd_8x4_intra_lr( const local pixel *data, int data_stride, int8 pr0, int8 pr1, int8 pr2, int8 pr3 )\n{\nint8 a_v, d_v;\nint2 tmp00, tmp01, tmp02, tmp03, tmp10, tmp11, tmp12, tmp13;\nint2 tmp20, tmp21, tmp22, tmp23, tmp30, tmp31, tmp32, tmp33;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr0).s04152637;\nHADAMARD4V( tmp00, tmp01, tmp02, tmp03, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr1).s04152637;\nHADAMARD4V( tmp10, tmp11, tmp12, tmp13, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr2).s04152637;\nHADAMARD4V( tmp20, tmp21, tmp22, tmp23, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr3).s04152637;\nHADAMARD4V( tmp30, tmp31, tmp32, tmp33, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\nuint8 sum_v;\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp00, tmp10, tmp20, tmp30 );\nsum_v = abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp01, tmp11, tmp21, tmp31 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp02, tmp12, tmp22, tmp32 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp03, tmp13, tmp23, tmp33 );\nsum_v += abs( a_v );\nuint4 sum2 = sum_v.hi + sum_v.lo;\nuint2 sum3 = sum2.hi + sum2.lo;\nreturn ( sum3.hi + sum3.lo ) >> 1;\n}\n#else\nSATD_C_8x4_Q( satd_8x4_lp, const local, private )\n#endif\n/****************************************************************************\n* 8x8 prediction for intra luma block\n****************************************************************************/\n#define F1            rhadd\n#define F2( a, b, c ) ( a+2*b+c+2 )>>2\n#if VECTORIZE\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = ( 2 + top[0] + 2*top[1] + top[2] ) >> 2;\npr0.s1 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr0.s2 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr0.s3 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr0.s4 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s5 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s6 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s7 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s0 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr1.s1 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr1.s2 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr1.s3 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr1.s4 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s5 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s6 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s7 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s0 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr2.s1 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr2.s2 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr2.s3 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr2.s4 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s5 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s6 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s7 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s0 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr3.s1 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr3.s2 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr3.s3 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr3.s4 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s5 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s6 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s7 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s1 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s2 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s3 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr0.s4 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr0.s5 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr0.s6 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr0.s7 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s0 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s1 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s2 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s3 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr1.s4 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr1.s5 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr1.s6 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s7 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s0 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s1 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s2 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s3 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr2.s4 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr2.s5 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr2.s6 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s7 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s0 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s1 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s2 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s3 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr3.s4 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr3.s5 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr3.s6 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s7 = ( 2 + top[14] + 3*top[15] ) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr3.s0 = F2( left[1], left[2], left[3] );\npr2.s0 = pr3.s1 = F2( left[0], left[1], left[2] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[1], left[0], left_top );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( top[3], top[4], top[5] );\npr0.s6 = pr1.s7 = F2( top[4], top[5], top[6] );\npr0.s7 = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr3.s0 = F2( left[5], left[6], left[7] );\npr2.s0 = pr3.s1 = F2( left[4], left[5], left[6] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[3], left[4], left[5] );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[2], left[3], left[4] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left[1], left[2], left[3] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( left[0], left[1], left[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( left[1], left[0], left_top );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( left[0], left_top, top[0] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( left_top, top[0], top[1] );\npr0.s6 = pr1.s7 = F2( top[0], top[1], top[2] );\npr0.s7 = F2( top[1], top[2], top[3] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr2.s0 = F2( left[1], left[0], left_top );\npr3.s0 = F2( left[2], left[1], left[0] );\npr1.s0 = pr3.s1 = F2( left[0], left_top, top[0] );\npr0.s0 = pr2.s1 = F1( left_top, top[0] );\npr1.s1 = pr3.s2 = F2( left_top, top[0], top[1] );\npr0.s1 = pr2.s2 = F1( top[0], top[1] );\npr1.s2 = pr3.s3 = F2( top[0], top[1], top[2] );\npr0.s2 = pr2.s3 = F1( top[1], top[2] );\npr1.s3 = pr3.s4 = F2( top[1], top[2], top[3] );\npr0.s3 = pr2.s4 = F1( top[2], top[3] );\npr1.s4 = pr3.s5 = F2( top[2], top[3], top[4] );\npr0.s4 = pr2.s5 = F1( top[3], top[4] );\npr1.s5 = pr3.s6 = F2( top[3], top[4], top[5] );\npr0.s5 = pr2.s6 = F1( top[4], top[5] );\npr1.s6 = pr3.s7 = F2( top[4], top[5], top[6] );\npr0.s6 = pr2.s7 = F1( top[5], top[6] );\npr1.s7 = F2( top[5], top[6], top[7] );\npr0.s7 = F1( top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr2.s0 = F2( left[5], left[4], left[3] );\npr3.s0 = F2( left[6], left[5], left[4] );\npr0.s0 = pr2.s1 = F2( left[3], left[2], left[1] );\npr1.s0 = pr3.s1 = F2( left[4], left[3], left[2] );\npr0.s1 = pr2.s2 = F2( left[1], left[0], left_top );\npr1.s1 = pr3.s2 = F2( left[2], left[1], left[0] );\npr1.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s2 = pr2.s3 = F1( left_top, top[0] );\npr1.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s3 = pr2.s4 = F1( top[0], top[1] );\npr1.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s4 = pr2.s5 = F1( top[1], top[2] );\npr1.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s5 = pr2.s6 = F1( top[2], top[3] );\npr1.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s6 = pr2.s7 = F1( top[3], top[4] );\npr1.s7 = F2( top[3], top[4], top[5] );\npr0.s7 = F1( top[4], top[5] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n#undef PRED\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left_top, left[0] ); pr0.s1 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr0.s2 = F2( top[1], top[0], left_top ); pr0.s3 = F2( top[2], top[1], top[0] );\npr0.s4 = F2( top[3], top[2], top[1] ); pr0.s5 = F2( top[4], top[3], top[2] );\npr0.s6 = F2( top[5], top[4], top[3] ); pr0.s7 = F2( top[6], top[5], top[4] );\npr1.s0 = F1( left[0], left[1] ); pr1.s1 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s2 = F1( left_top, left[0] ); pr1.s3 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr1.s4 = F2( top[1], top[0], left_top ); pr1.s5 = F2( top[2], top[1], top[0] );\npr1.s6 = F2( top[3], top[2], top[1] ); pr1.s7 = F2( top[4], top[3], top[2] );\npr2.s0 = F1( left[1], left[2] ); pr2.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s2 = F1( left[0], left[1] ); pr2.s3 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr2.s4 = F1( left_top, left[0] ); pr2.s5 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr2.s6 = F2( top[1], top[0], left_top ); pr2.s7 = F2( top[2], top[1], top[0] );\npr3.s0 = F1( left[2], left[3] ); pr3.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s2 = F1( left[1], left[2] ); pr3.s3 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr3.s4 = F1( left[0], left[1] ); pr3.s5 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr3.s6 = F1( left_top, left[0] ); pr3.s7 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[3], left[4] ); pr0.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s2 = F1( left[2], left[3] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[1], left[2] ); pr0.s5 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s6 = F1( left[0], left[1] ); pr0.s7 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s0 = F1( left[4], left[5] ); pr1.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s2 = F1( left[3], left[4] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[2], left[3] ); pr1.s5 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s6 = F1( left[1], left[2] ); pr1.s7 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s0 = F1( left[5], left[6] ); pr2.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s2 = F1( left[4], left[5] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[3], left[4] ); pr2.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s6 = F1( left[2], left[3] ); pr2.s7 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s0 = F1( left[6], left[7] ); pr3.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s2 = F1( left[5], left[6] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[4], left[5] ); pr3.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s6 = F1( left[3], left[4] ); pr3.s7 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( top[0], top[1] );\npr1.s0 = F2( top[0], top[1], top[2] );\npr2.s0 = pr0.s1 = F1( top[1], top[2] );\npr3.s0 = pr1.s1 = F2( top[1], top[2], top[3] );\npr2.s1 = pr0.s2 = F1( top[2], top[3] );\npr3.s1 = pr1.s2 = F2( top[2], top[3], top[4] );\npr2.s2 = pr0.s3 = F1( top[3], top[4] );\npr3.s2 = pr1.s3 = F2( top[3], top[4], top[5] );\npr2.s3 = pr0.s4 = F1( top[4], top[5] );\npr3.s3 = pr1.s4 = F2( top[4], top[5], top[6] );\npr2.s4 = pr0.s5 = F1( top[5], top[6] );\npr3.s4 = pr1.s5 = F2( top[5], top[6], top[7] );\npr2.s5 = pr0.s6 = F1( top[6], top[7] );\npr3.s5 = pr1.s6 = F2( top[6], top[7], top[8] );\npr2.s6 = pr0.s7 = F1( top[7], top[8] );\npr3.s6 = pr1.s7 = F2( top[7], top[8], top[9] );\npr2.s7 = F1( top[8], top[9] );\npr3.s7 = F2( top[8], top[9], top[10] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( top[2], top[3] );\npr1.s0 = F2( top[2], top[3], top[4] );\npr2.s0 = pr0.s1 = F1( top[3], top[4] );\npr3.s0 = pr1.s1 = F2( top[3], top[4], top[5] );\npr2.s1 = pr0.s2 = F1( top[4], top[5] );\npr3.s1 = pr1.s2 = F2( top[4], top[5], top[6] );\npr2.s2 = pr0.s3 = F1( top[5], top[6] );\npr3.s2 = pr1.s3 = F2( top[5], top[6], top[7] );\npr2.s3 = pr0.s4 = F1( top[6], top[7] );\npr3.s3 = pr1.s4 = F2( top[6], top[7], top[8] );\npr2.s4 = pr0.s5 = F1( top[7], top[8] );\npr3.s4 = pr1.s5 = F2( top[7], top[8], top[9] );\npr2.s5 = pr0.s6 = F1( top[8], top[9] );\npr3.s5 = pr1.s6 = F2( top[8], top[9], top[10] );\npr2.s6 = pr0.s7 = F1( top[9], top[10] );\npr3.s6 = pr1.s7 = F2( top[9], top[10], top[11] );\npr2.s7 = F1( top[10], top[11] );\npr3.s7 = F2( top[10], top[11], top[12] );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left[0], left[1] ); pr0.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s2 = F1( left[1], left[2] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[2], left[3] ); pr0.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s6 = F1( left[3], left[4] ); pr0.s7 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s0 = F1( left[1], left[2] ); pr1.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s2 = F1( left[2], left[3] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[3], left[4] ); pr1.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s6 = F1( left[4], left[5] ); pr1.s7 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s0 = F1( left[2], left[3] ); pr2.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s2 = F1( left[3], left[4] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[4], left[5] ); pr2.s5 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s6 = F1( left[5], left[6] ); pr2.s7 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s0 = F1( left[3], left[4] ); pr3.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s2 = F1( left[4], left[5] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[5], left[6] ); pr3.s5 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s6 = F1( left[6], left[7] ); pr3.s7 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[4], left[5] ); pr0.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr0.s2 = F1( left[5], left[6] ); pr0.s3 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr0.s4 = F1( left[6], left[7] ); pr0.s5 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr0.s6 = left[7]; pr0.s7 = left[7];\npr1.s0 = F1( left[5], left[6] ); pr1.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr1.s2 = F1( left[6], left[7] ); pr1.s3 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr1.s4 = left[7]; pr1.s5 = left[7];\npr1.s6 = left[7]; pr1.s7 = left[7];\npr2.s0 = F1( left[6], left[7] ); pr2.s1 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr2.s2 = left[7]; pr2.s3 = left[7];\npr2.s4 = left[7]; pr2.s5 = left[7];\npr2.s6 = left[7]; pr2.s7 = left[7];\npr3 = (int8)left[7];\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nconst local pixel *src_l = src;\nint8 pr0, pr1, pr2, pr3;\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1]; src += src_stride;\nint satd = satd_8x4_intra_lr( src_l, src_stride, pr0, pr1, pr2, pr3 );\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1];\nreturn satd + satd_8x4_intra_lr( src_l + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nint8 pred = convert_int8( vload8( 0, &src[-src_stride] ));\nreturn satd_8x4_intra_lr( src, src_stride, pred, pred, pred, pred ) +\nsatd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pred, pred, pred, pred );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nint pix = i00;\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npix = i00;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nint8 dc0;\ndc0.lo = (int4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (int4)( (s1 + 2) >> 2 );\nint satd = satd_8x4_intra_lr( src, src_stride, dc0, dc0, dc0, dc0 );\ndc0.lo = (int4)( (s3 + 2) >> 2 );\ndc0.hi = (int4)( (s1 + s3 + 4) >> 3 );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, dc0, dc0, dc0, dc0 );\n}\n#else  /* not vectorized: private is cheap registers are scarce */\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nfor( int y = 0; y < 4; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + y*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 4; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + ( y - 4 )*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\npred[31] = ( 2 + top[14] + 3*top[15] ) >> 2;\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[1], left[0], left_top );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( top[3], top[4], top[5] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 7, 0 ) = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 3 ) = F2( left[5], left[6], left[7] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[4], left[5], left[6] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[3], left[4], left[5] );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[2], left[3], left[4] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( left[1], left[0], left_top );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( left_top, top[0], top[1] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 7, 0 ) = F2( top[1], top[2], top[3] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 2 ) = F2( left[1], left[0], left_top );\nPRED( 0, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F1( left_top, top[0] );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F1( top[0], top[1] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( top[1], top[2] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[2], top[3] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[3], top[4] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[3], top[4], top[5] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[4], top[5] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[4], top[5], top[6] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[5], top[6] );\nPRED( 7, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 7, 0 ) = F1( top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 2 ) = F2( left[5], left[4], left[3] );\nPRED( 0, 3 ) = F2( left[6], left[5], left[4] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F2( left[3], left[2], left[1] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[4], left[3], left[2] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F2( left[1], left[0], left_top );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( left_top, top[0] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[0], top[1] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[1], top[2] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[2], top[3] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[3], top[4] );\nPRED( 7, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 7, 0 ) = F1( top[4], top[5] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\ninline uint32_t pack16to32( uint32_t a, uint32_t b )\n{\nreturn a + (b << 16);\n}\ninline uint32_t pack8to16( uint32_t a, uint32_t b )\n{\nreturn a + (b << 8);\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\nint satd;\nint p1 =  pack8to16( (F1( left[6], left[7] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p2 =  pack8to16( (F1( left[5], left[6] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p3 =  pack8to16( (F1( left[4], left[5] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p4 =  pack8to16( (F1( left[3], left[4] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p5 =  pack8to16( (F1( left[2], left[3] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p6 =  pack8to16( (F1( left[1], left[2] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p7 =  pack8to16( (F1( left[0], left[1] )), ((left_top + 2 * left[0] + left[1] + 2) >> 2) );\nint p8 =  pack8to16( (F1( left_top, left[0] )), ((left[0] + 2 * left_top + top[0] + 2) >> 2) );\nint p9 =  pack8to16( (F2( top[1], top[0], left_top )), (F2( top[2], top[1], top[0] )) );\nint p10 =  pack8to16( (F2( top[3], top[2], top[1] )), (F2( top[4], top[3], top[2] )) );\nint p11 =  pack8to16( (F2( top[5], top[4], top[3] )), (F2( top[6], top[5], top[4] )) );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p10, p11 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p9, p10 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[4 + 3 * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[4 + 3 * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nint satd;\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 0 ) = F1( top[0], top[1] );\nPRED( 0, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[1], top[2] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[1], top[2], top[3] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[2], top[3] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[3], top[4] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[4], top[5] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[5], top[6] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[6], top[7] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[7], top[8] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 7, 2 ) = F1( top[8], top[9] );\nPRED( 7, 3 ) = F2( top[8], top[9], top[10] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 0 ) = F1( top[2], top[3] );\nPRED( 0, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[3], top[4] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[4], top[5] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[5], top[6] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[6], top[7] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[7], top[8] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[8], top[9] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[8], top[9], top[10] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[9], top[10] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[9], top[10], top[11] );\nPRED( 7, 2 ) = F1( top[10], top[11] );\nPRED( 7, 3 ) = F2( top[10], top[11], top[12] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nprivate pixel pred[32];\nint satd;\nint p1 = pack8to16( (F1( left[0], left[1] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p2 = pack8to16( (F1( left[1], left[2] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p3 = pack8to16( (F1( left[2], left[3] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p4 = pack8to16( (F1( left[3], left[4] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p5 = pack8to16( (F1( left[4], left[5] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p6 = pack8to16( (F1( left[5], left[6] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p7 = pack8to16( (F1( left[6], left[7] )), ((left[6] + 2 * left[7] + left[7] + 2) >> 2) );\nint p8 = pack8to16( left[7], left[7] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nconst local pixel *src_l = src;\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred ); src += src_stride;\nint satd = satd_8x4_lp( src_l, src_stride, pred, 8 );\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred );\nreturn satd + satd_8x4_lp( src_l + ( src_stride << 2 ), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nuchar16 v16;\nv16.lo = vload8( 0, &src[-src_stride] );\nv16.hi = vload8( 0, &src[-src_stride] );\nvstore16( v16, 0, pred );\nvstore16( v16, 1, pred );\nreturn satd_8x4_lp( src, src_stride, pred, 8 ) +\nsatd_8x4_lp( src + (src_stride << 2), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nprivate pixel pred[32];\nint satd;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nuchar8 dc0;\ndc0.lo = (uchar4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (uchar4)( (s1 + 2) >> 2 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\ndc0.lo = (uchar4)( (s3 + 2) >> 2 );\ndc0.hi = (uchar4)( (s1 + s3 + 4) >> 3 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nreturn satd + satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\n}\n#endif\n/* Find the least cost intra mode for 32 8x8 macroblocks per workgroup\n*\n* Loads 33 macroblocks plus the pixels directly above them into local memory,\n* padding where necessary with edge pixels.  It then cooperatively calculates\n* smoothed top and left pixels for use in some of the analysis.\n*\n* Then groups of 32 threads each calculate a single intra mode for each 8x8\n* block.  Since consecutive threads are calculating the same intra mode there\n* is no code-path divergence.  8 intra costs are calculated simultaneously.  If\n* the \"slow\" argument is not zero, the final two (least likely) intra modes are\n* tested in a second pass.  The slow mode is only enabled for presets slow,\n* slower, and placebo.\n*\n* This allows all of the pixels functions to read pixels from local memory, and\n* avoids re-fetching edge pixels from global memory.  And it allows us to\n* calculate all of the intra mode costs simultaneously without branch divergence.\n*\n* Local dimension:    [ 32, 8 ]\n* Global dimensions:  [ paddedWidth, height ] */\nkernel void mb_intra_cost_satd_8x8( read_only image2d_t  fenc,\nglobal uint16_t     *fenc_intra_cost,\nglobal int          *frame_stats,\nint                  lambda,\nint                  mb_width,\nint                  slow )\n{\n#define CACHE_STRIDE 265\n#define BLOCK_OFFSET 266\nlocal pixel cache[2385];\nlocal int cost_buf[32];\nlocal pixel top[32 * 16];\nlocal pixel left[32 * 8];\nlocal pixel left_top[32];\nint lx = get_local_id( 0 );\nint ly = get_local_id( 1 );\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nint gidx = get_group_id( 0 );\nint gidy = get_group_id( 1 );\nint linear_id = ly * get_local_size( 0 ) + lx;\nint satd = COST_MAX;\nint basex = gidx << 8;\nint basey = (gidy << 3) - 1;\n/* Load 33 8x8 macroblocks and the pixels above them into local cache */\nfor( int y = 0; y < 9 && linear_id < (33<<3)>>2; y++ )\n{\nint x = linear_id << 2;\nuint4 data = read_imageui( fenc, sampler, (int2)(x + basex, y + basey) );\ncache[y * CACHE_STRIDE + 1 + x] = data.s0;\ncache[y * CACHE_STRIDE + 1 + x + 1] = data.s1;\ncache[y * CACHE_STRIDE + 1 + x + 2] = data.s2;\ncache[y * CACHE_STRIDE + 1 + x + 3] = data.s3;\n}\n/* load pixels on left edge */\nif( linear_id < 9 )\ncache[linear_id * CACHE_STRIDE] = read_imageui( fenc, sampler, (int2)( basex - 1, linear_id + basey) ).s0;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint j = ly;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nj += 8;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nleft[lx*8 + ly] = ( cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*(ly - 1)] +\n2*cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*ly] +\ncache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*clamp((ly + 1), 0, 7 )] + 2 ) >> 2;\nif( 0 == ly )\n{\nleft_top[lx] = ( cache[BLOCK_OFFSET + 8*lx - 1] + 2*cache[BLOCK_OFFSET + 8*lx - 1 - CACHE_STRIDE] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE] + 2 ) >> 2;\ncost_buf[lx] = COST_MAX;\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nswitch( ly )\n{\ncase 0:\nsatd = x264_predict_8x8c_h( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 1:\nsatd = x264_predict_8x8c_v( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 2:\nsatd = x264_predict_8x8c_dc( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 3:\nsatd = x264_predict_8x8c_p( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 4:\nsatd = x264_predict_8x8_ddr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 5:\nsatd = x264_predict_8x8_vr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 6:\nsatd = x264_predict_8x8_hd( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 7:\nsatd = x264_predict_8x8_hu( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &left[8*lx] );\nbreak;\ndefault:\nbreak;\n}\natom_min( &cost_buf[lx], satd );\nif( slow )\n{\nswitch( ly )\n{\ncase 0: // DDL\nsatd = x264_predict_8x8_ddl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ncase 1: // VL\nsatd = x264_predict_8x8_vl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ndefault:\nbreak;\n}\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nif( (0 == ly) && (gx < mb_width) )\nfenc_intra_cost[gidy * mb_width + gx] = cost_buf[lx]+ 5*lambda;\nif( gx < 2 && gy == 0 )\nframe_stats[gx] = 0;\n#undef CACHE_STRIDE\n#undef BLOCK_OFFSET\n}\n/*\n* parallel sum intra costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_intra_cost( const global uint16_t *fenc_intra_cost,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_intra_cost[mb_xy];\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST,    cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\n}\n}\n/* Weightp filter a downscaled image into a temporary output buffer.\n* This kernel is launched once for each scale.\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_scaled_images( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint4 input_val;\nuint4 output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy));\noutput_val = (uint4)(offset) + ( ( ((uint4)(scale)) * input_val ) >> ((uint4)(denom)) );\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n/* Weightp filter for the half-pel interpolated image\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_hpel( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint input_val;\nuint output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy)).s0;\nuint4 temp;\ntemp.s0 = input_val & 0x00ff; temp.s1 = (input_val >> 8) & 0x00ff;\ntemp.s2 = (input_val >> 16) & 0x00ff; temp.s3 = (input_val >> 24) & 0x00ff;\ntemp = (uint4)(offset) + ( ( ((uint4)(scale)) * temp ) >> ((uint4)(denom)) );\noutput_val = temp.s0 | (temp.s1 << 8) | (temp.s2 << 16) | (temp.s3 << 24);\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n/*\n* downscale lowres luma: full-res buffer to down scale image, and to packed hpel image\n*\n* --\n*\n* fenc_img is an output image (area of memory referenced through a texture\n* cache). A read of any pixel location (x,y) returns four pixel values:\n*\n* val.s0 = P(x,y)\n* val.s1 = P(x+1,y)\n* val.s2 = P(x+2,y)\n* val.s3 = P(x+3,y)\n*\n* This is a 4x replication of the lowres pixels, a trade-off between memory\n* size and read latency.\n*\n* --\n*\n* hpel_planes is an output image that contains the four HPEL planes used for\n* subpel refinement. A read of any pixel location (x,y) returns a UInt32 with\n* the four planar values C | V | H | F\n*\n* launch dimensions:  [lowres-width, lowres-height]\n*/\nkernel void downscale_hpel( const global pixel *fenc,\nwrite_only image2d_t fenc_img,\nwrite_only image2d_t hpel_planes,\nint stride )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nuint4 values;\nfenc += y * stride * 2;\nconst global pixel *src1 = fenc + stride;\nconst global pixel *src2 = (y == get_global_size( 1 )-1) ? src1 : src1 + stride;\nint2 pos = (int2)(x, y);\npixel right, left;\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s0 = rhadd( right, left );           // F\nright = rhadd( fenc[2*x+1], src1[2*x+1] );\nleft  = rhadd( fenc[2*x+2], src1[2*x+2] );\nvalues.s1 = rhadd( right, left );           // H\nright = rhadd( src1[2*x], src2[2*x] );\nleft  = rhadd( src1[2*x+1], src2[2*x+1] );\nvalues.s2 = rhadd( right, left );           // V\nright = rhadd( src1[2*x+1], src2[2*x+1] );\nleft  = rhadd( src1[2*x+2], src2[2*x+2] );\nvalues.s3 = rhadd( right, left );           // C\nuint4 val = (uint4) ((values.s3 & 0xff) << 24) | ((values.s2 & 0xff) << 16) | ((values.s1 & 0xff) << 8) | (values.s0 & 0xff);\nwrite_imageui( hpel_planes, pos, val );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s1 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s2 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s3 = rhadd( right, left );\nwrite_imageui( fenc_img, pos, values );\n}\n/*\n* downscale lowres hierarchical motion search image, copy from one image to\n* another decimated image.  This kernel is called iteratively to generate all\n* of the downscales.\n*\n* launch dimensions:  [lower_res width, lower_res height]\n*/\nkernel void downscale1( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\n/* these select statements appear redundant, and they should be, but tests break when\n* they are not here.  I believe this was caused by a driver bug\n*/\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/*\n* Second copy of downscale kernel, no differences. This is a (no perf loss)\n* workaround for a scheduling bug in current Tahiti drivers.  This bug has\n* theoretically been fixed in the July 2012 driver release from AMD.\n*/\nkernel void downscale2( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/* OpenCL 1.2 finally added a memset command, but we're not targeting 1.2 */\nkernel void memset_int16( global int16_t *buf, int16_t value )\n{\nbuf[get_global_id( 0 )] = value;\n}\n", "ARMv6", "NEON", "FastNeonMRC", "infinite ", "init_pass2", "x264_ratecontrol_start", "_{fI", "{NFE", "RIFF", "WEBPVP8L", "{NFE"], "stringidentifiers": ["infinity", "aac_adtstoasc", "aac_latm", "dual_mono_mode", "auto", "autoselection", "main", "both", "amrnb", "amrwb", "AVDCT", "fastint", "altivec", "faan", "idct", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "simpleauto", "bits_per_sample", "Palette", "private_spspps_buf", "null", "unknown", "bsf_list", "AVBSFContext", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpeg", "mjpegb", "mpeg4", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "cyuv", "h264", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "ulti", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "targa", "tdsc", "tiff", "vc1image", "webp", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "qdmc", "celt", "g723_1", "dss_sp", "g729", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "text", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "dca_core", "extract_extradata", "remove", "use_buggy_lpc", "context", "non_deterministic", "threads", "trans_color", "gifflags", "flags", "offsetting", "transdiff", "L263", "S263", "GEOV", "GEOX", "stereo_mode", "Q264", "is_avc", "nal_length_size", "enable_er", "h264_mp4toannexb", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "TEMP", "SPAT", "apply_defdispwin", "hevc_mp4toannexb", "desc", "U263", "SEPB1", "SEPB2", "ZYGO", "libfdk_aac", "conceal", "spectral", "noise", "energy", "drc_boost", "drc_cut", "drc_level", "drc_heavy", "level_limit", "afterburner", "eld_sbr", "signaling", "default", "implicit", "explicit_sbr", "explicit_hierarchical", "latm", "header_period", "Lossless", "Lossy", "libwebp", "compression_level", "global_quality", "lossless", "preset", "none", "picture", "photo", "drawing", "icon", "cr_threshold", "cr_size", "quality", "Quality", "weightp", "level", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "libx264", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "rc_init_occupancy", "medium", "tune", "profile", "fastfirstpass", "passlogfile", "wpredp", "a53cc", "x264opts", "crf_max", "aq_mode", "variance", "autovariance", "weightb", "smart", "ssim", "b_pyramid", "strict", "normal", "mbtree", "cplxblur", "spatial", "temporal", "tesa", "cavlc", "cabac", "chromaoffset", "noise_reduction", "film", "animation", "grain", "stillimage", "psnr", "fastdecode", "zerolatency", "ultrafast", "superfast", "veryfast", "faster", "fast", "slow", "slower", "veryslow", "placebo", "JFIF", "cmp_func", "satd", "zero", "Zero", "vsad", "vsse", "nsse", "dct264", "dctmax", "chroma", "msad", "mpv_flags", "skip_rd", "strict_gop", "qp_rd", "cbp_rd", "luma_elim_threshold", "chroma_elim_threshold", "quantizer_noise_shaping", "error_rate", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_eq", "rc_init_cplx", "rc_buf_aggressivity", "border_mask", "lmin", "lmax", "ibias", "pbias", "rc_strategy", "ffmpeg", "motion_est", "epzs", "xone", "force_duplicated_matrix", "b_sensitivity", "brd_scale", "skip_threshold", "skip_factor", "skip_exp", "skip_cmp", "mpeg_quant", "mepc", "mepre", "pred", "left", "plane", "median", "huffman", "optimal", "mp3decomp", "mpeg4_unpack_bframes", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "Reserved", "reserved", "WV1F", "QMP4", "MP4S", "quarter_sample", "divx_packed", "mp3on4float", "mp3adufloat", "mp3float", "msmpeg4", "obmc", "structured_slices", "mb_info", "VCR2", "NULL", "AVSubtitleRect", "type", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "channel_layout", "sample_rate", "AVCodecContext", "unaligned", "qpel", "loop", "qscale", "input_preserved", "pass1", "pass2", "gray", "emu_edge", "truncated", "ildct", "low_delay", "global_header", "bitexact", "ilme", "cgop", "output_corrupt", "noout", "ignorecrop", "local_header", "chunks", "showall", "export_mvs", "skip_manual", "ass_ro_flush_noop", "full", "phods", "iter", "time_base", "cutoff", "frame_size", "frame_number", "delay", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "autodetect", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "edge", "hpel_chroma", "dc_clip", "trunc", "iedge", "very", "unofficial", "experimental", "b_qoffset", "err_detect", "crccheck", "bitstream", "buffer", "explode", "ignore_err", "careful", "compliant", "aggressive", "has_b_frames", "block_align", "rc_override_count", "maxrate", "minrate", "bufsize", "i_qoffset", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "slice_count", "guess_mvs", "favor_inter", "bits_per_coded_sample", "aspect", "debug", "pict", "mb_type", "dct_coeff", "green_metadata", "skip", "startcode", "mmco", "bugs", "vis_qp", "vis_mb_type", "buffers", "thread_ops", "nomc", "vismv", "debug_mv", "subcmp", "mbcmp", "ildctcmp", "dia_size", "last_pred", "preme", "precmp", "pre_dia_size", "dtg_active_format", "deflate", "slice_flags", "xvmc_acceleration", "bits", "stream_codec_tag", "error", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "skipcmp", "mblmin", "mblmax", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "noref", "bidir", "nokey", "nointra", "bidir_refine", "sc_factor", "mv0_threshold", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color_primaries_type", "bt709", "Unspecified", "bt470m", "bt470bg", "smpte170m", "smpte240m", "Film", "bt2020", "smpte428", "smpte428_1", "smpte431", "smpte432", "unspecified", "color_trc", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log100", "log316", "bt1361e", "smpte2084", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "bt2020c", "smpte2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color_range_type", "mpeg", "jpeg", "chroma_sample_location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "bottomleft", "bottom", "Bottom", "log_level_offset", "slices", "slice", "frame", "audio_service_type", "Effects", "Dialogue", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "sub_text_format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "field_order", "progressive", "dump_separator", "codec_whitelist", "pixel_format", "video_size", "max_pixels", "aptr", "MPNG", "paeth", "mixed", "bits2qp", "qp2bits", "iTex", "pTex", "fCode", "iCount", "mcVar", "avgQP", "qComp", "avgIITex", "avgPITex", "avgPPTex", "avgBPTex", "avgTex", "BottomUp", "yuv2", "I420", "b64a", "rawdec", "audioresample", "ReSampleContext", "unknown_codec", "ff_avcodec_locked", "encoder", "decoder", "vp9_superframe", "aeval", "same", "exprs", "aevalsrc", "nb_samples", "duration", "nb_in_channels", "nb_out_channels", "acrusher", "level_in", "level_out", "mode", "logarithmic", "samples", "lforange", "lforate", "adelay", "delays", "aecho", "in_gain", "out_gain", "decays", "aemphasis", "reproduction", "production", "Columbia", "riaa", "RIAA", "acrossfade", "crossfade0", "crossfade1", "overlap", "curve1", "curve", "qsin", "esin", "hsin", "ipar", "quadratic", "cubic", "parabola", "exponential", "iqsin", "ihsin", "dese", "desi", "curve2", "afade", "start_sample", "start_time", "afftfilt", "real", "imag", "win_size", "w128", "w256", "w512", "w1024", "w2048", "w4096", "w8192", "w16384", "w32768", "w65536", "w131072", "win_func", "rect", "Rectangular", "bartlett", "Bartlett", "hann", "Hann", "hanning", "Hanning", "hamming", "Hamming", "sine", "Sine", "aformat", "sample_fmts", "sample_rates", "channel_layouts", "sidechaingate", "sidechain", "agate", "range", "threshold", "ratio", "attack", "release", "makeup", "knee", "detection", "peak", "link", "average", "maximum", "level_sc", "alimiter", "limit", "asc_level", "amerge", "inputs", "info", "amix", "longest", "shortest", "first", "dropout_transition", "change", "out0", "out1", "anequalizer", "params", "curves", "size", "hd720", "mgain", "fscale", "colors", "anull", "apad", "packet_size", "pad_len", "whole_len", "aphaser", "decay", "speed", "triangular", "sinusoidal", "apulsator", "triangle", "square", "sawup", "sawdown", "amount", "offset_l", "offset_r", "timing", "aresample", "asetnsamples", "nb_out_samples", "asetrate", "NOPTS", "ashowinfo", "DC_offset", "Min_level", "Max_level", "Min_difference", "Max_difference", "Mean_difference", "Peak_level", "RMS_level", "RMS_peak", "RMS_trough", "Crest_factor", "Flat_factor", "Peak_count", "Bit_depth", "Bit_depth2", "astats", "length", "metadata", "reset", "tempo", "atempo", "biquad", "allpass", "frequency", "width_type", "octave", "slope", "highpass", "poles", "lowpass", "bandreject", "bandpass", "treble", "gain", "bass", "equalizer", "channelmap", "channelsplit", "stereo", "chorus", "speeds", "depths", "compand", "attacks", "points", "volume", "compensationdelay", "temp", "crystalizer", "dcshift", "shift", "limitergain", "dynaudnorm", "earwax", "extrastereo", "entry", "gain_entry", "gain_interpolate", "cubic_interpolate", "firequalizer", "chid", "chlayout", "accuracy", "wfunc", "rectangular", "blackman", "nuttall3", "mnuttall3", "nuttall", "bnuttall", "bharris", "tukey", "fixed", "multi", "zero_phase", "scale", "linlin", "linlog", "loglin", "loglog", "dumpfile", "dumpscale", "fft2", "flanger", "depth", "regen", "shape", "phase", "interp", "itype", "detected", "disabled", "enabled", "hdcd", "disable_autoconvert", "process_stereo", "cdt_ms", "force_pe", "analyze_mode", "join", "dynamic", "Dynamic", "loudnorm", "measured_I", "measured_i", "measured_LRA", "measured_lra", "measured_TP", "measured_tp", "measured_thresh", "offset", "dual_mono", "print_format", "json", "summary", "args", "replaygain", "in_channel_layout", "out_channel_layout", "in_sample_fmt", "out_sample_fmt", "in_sample_rate", "out_sample_rate", "force_resampling", "resample", "acompressor", "sidechaincompress", "silencedetect", "silenceremove", "start_periods", "start_duration", "start_threshold", "stop_periods", "stop_duration", "stop_threshold", "leave_silence", "window", "stereotools", "balance_in", "balance_out", "softclip", "mutel", "muter", "phasel", "phaser", "slev", "sbal", "mlev", "mpan", "base", "sclevel", "stereowiden", "feedback", "crossfeed", "drymix", "tremolo", "vibrato", "volumedetect", "precision", "float", "double", "eval", "once", "drop", "ignore", "track", "album", "replaygain_preamp", "replaygain_noclip", "nb_channels", "nb_consumed_samples", "startpts", "startt", "anullsink", "anoisesrc", "amplitude", "color", "colour", "white", "pink", "brown", "seed", "anullsrc", "beep_factor", "samples_per_frame", "abitscope", "rate", "ahistogram", "dmode", "single", "separate", "sqrt", "cbrt", "rlog", "ascale", "acount", "rheight", "slide", "replace", "scroll", "aphasemeter", "video", "avectorscope", "lissajous", "lissajous_xy", "polar", "zoom", "draw", "line", "concat", "unsafe", "fifo", "afifo", "AVFilterGraph", "scale_sws_opts", "aresample_swr_opts", "ping", "enable", "noformat", "frei0r", "frei0r_src", "AVFilter", "sono_v", "bar_v", "tlength", "midi", "timeclamp", "freq", "a_weighting", "b_weighting", "c_weighting", "showcqt", "bar_h", "axis_h", "sono_h", "fullhd", "volume2", "sono_g", "gamma", "bar_g", "gamma2", "bar_t", "basefreq", "endfreq", "coeffclamp", "count", "fcount", "fontfile", "font", "fontcolor", "axisfile", "axis", "bt2020ncl", "cscheme", "showfreqs", "Blackman", "welch", "Welch", "flattop", "bhann", "Nuttall", "lanczos", "Lanczos", "gauss", "Gauss", "Tukey", "dolph", "cauchy", "Cauchy", "parzen", "Parzen", "poisson", "Poisson", "averaging", "cmode", "combined", "minamp", "showspectrumpic", "TIME", "channel", "intensity", "rainbow", "moreland", "nebulae", "fire", "fiery", "fruit", "cool", "saturation", "orientation", "vertical", "horizontal", "legend", "rotation", "showspectrum", "fullframe", "rscroll", "data", "magnitude", "showvolume", "VOLUME", "CHANNEL", "PEAK", "showwavespic", "split_channels", "showwaves", "point", "cline", "pix_fmts", "channel_counts", "all_channel_counts", "abuffersink", "buffersink", "abuffer", "sample_fmt", "channels", "pix_fmt", "time_base_num", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "pix_desc", "mainpic", "abench", "action", "start", "stop", "bench", "adrawgraph", "drawgraph", "ebur128", "meter", "framelog", "verbose", "sample", "true", "dualmono", "panlaw", "ainterleave", "nb_inputs", "interleave", "aloop", "select", "modify", "delete", "print", "value", "function", "same_str", "starts_with", "less", "equal", "greater", "expr", "file", "ametadata", "VALUE1", "VALUE2", "perms", "aperms", "toggle", "random", "framesync", "arealtime", "realtime", "areverse", "reverse", "scene", "outputs", "aselect", "start_pts", "prev_pts", "prev_selected_pts", "start_t", "prev_t", "prev_selected_t", "pict_type", "PICT_TYPE_I", "PICT_TYPE_P", "PICT_TYPE_B", "PICT_TYPE_S", "PICT_TYPE_SI", "PICT_TYPE_SP", "PICT_TYPE_BI", "interlace_type", "PROGRESSIVE", "TOPFIRST", "BOTTOMFIRST", "consumed_samples_n", "samples_n", "selected_n", "prev_selected_n", "concatdec_select", "enter", "leave", "asendcmd", "sendcmd", "commands", "filename", "sidedata", "PANSCAN", "A53_CC", "STEREO3D", "MATRIXENCODING", "DOWNMIX_INFO", "REPLAYGAIN", "DISPLAYMATRIX", "MOTION_VECTORS", "SKIP_SAMPLES", "AUDIO_SERVICE_TYPE", "MASTERING_DISPLAY_METADATA", "GOP_TIMECODE", "asidedata", "astreamselect", "streamselect", "image2", "in_w", "in_h", "out_w", "out_h", "hsub", "vsub", "ohsub", "ovsub", "asetpts", "setpts", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "asettb", "intb", "settb", "AVTB", "asplit", "split", "seek", "get_duration", "amovie", "movie", "format_name", "stream_index", "seek_point", "streams", "discontinuity", "atrim", "starti", "endi", "end_pts", "durationi", "end_sample", "trim", "start_frame", "end_frame", "spectrumsynth", "alphamerge", "alpha", "setsar", "setdar", "dar_den", "atadenoise", "avgblur", "sizeX", "planes", "sizeY", "bbox", "min_val", "bitplanenoise", "bitplane", "filter", "blackdetect", "black_min_duration", "picture_black_ratio_th", "pic_th", "pixel_black_th", "pix_th", "blackframe", "thresh", "tblend", "c0_mode", "c1_mode", "c2_mode", "c3_mode", "all_mode", "addition", "addition128", "burn", "darken", "difference", "difference128", "divide", "dodge", "exclusion", "freeze", "glow", "hardlight", "hardmix", "heat", "lighten", "linearlight", "multiply", "multiply128", "negation", "overlay", "phoenix", "pinlight", "reflect", "screen", "softlight", "subtract", "vividlight", "c0_expr", "c1_expr", "c2_expr", "c3_expr", "all_expr", "c0_opacity", "c1_opacity", "c2_opacity", "c3_opacity", "all_opacity", "blend", "repeatlast", "BOTTOM", "boxblur", "luma_radius", "luma_power", "chroma_radius", "chroma_power", "alpha_radius", "alpha_power", "bwdif", "send_frame", "send_field", "parity", "deint", "interlaced", "chromakey", "black", "similarity", "ciescope", "system", "ntsc", "smpte", "apple", "widergb", "cie1931", "hdtv", "rec709", "uhdtv", "rec2020", "gamuts", "contrast", "corrgamma", "showwhite", "codecview", "mv_type", "frame_type", "colorbalance", "colorchannelmixer", "colorkey", "colorlevels", "rimin", "gimin", "bimin", "aimin", "rimax", "gimax", "bimax", "aimax", "romin", "gomin", "bomin", "aomin", "romax", "gomax", "bomax", "aomax", "colormatrix", "bt601", "color_mode", "bt470", "space", "primaries", "srgb", "xvycc", "yuv420p", "yuv420p10", "yuv420p12", "yuv422p", "yuv422p10", "yuv422p12", "yuv444p", "yuv444p10", "yuv444p12", "dither", "wpadapt", "bradford", "vonkries", "identity", "iall", "ispace", "irange", "iprimaries", "itrc", "convolution", "prewitt", "sobel", "delta", "copy", "cover_rect", "cover", "blur", "cropdetect", "round", "reset_count", "max_outliers", "crop", "keep_aspect", "exact", "green", "blue", "preset_name", "color_negative", "cross_process", "darker", "increase_contrast", "lighter", "linear_contrast", "medium_contrast", "negative", "strong_contrast", "vintage", "master", "psfile", "plot", "datascope", "color2", "opacity", "dctdnoiz", "sigma", "deband", "direction", "coupling", "clean_src", "decimate", "cycle", "dupthresh", "scthresh", "blockx", "blocky", "ppsrc", "dejudder", "delogo", "band", "show", "deshake", "blank", "original", "clamp", "mirror", "blocksize", "search", "smode", "exhaustive", "opencl", "detelecine", "first_field", "field", "pattern", "displace", "source", "xmap", "ymap", "smear", "wrap", "invert", "drawgrid", "thickness", "drawbox", "edgedetect", "wires", "colormix", "elbg", "codebook_length", "nb_steps", "pal8", "brightness", "gamma_r", "gamma_g", "gamma_b", "gamma_weight", "init", "alphaextract", "extractplanes", "fade", "nb_frames", "weight_Y", "weight_U", "weight_V", "fftfilt", "dc_Y", "dc_U", "dc_V", "fieldhint", "hint", "absolute", "relative", "fieldmatch", "order", "pc_n", "pc_u", "pc_n_ub", "pcn_ub", "mchroma", "combmatch", "combmatching", "combdbg", "dbglvl", "pcnub", "cthresh", "combpel", "field_type", "down", "fieldorder", "find_rect", "object", "mipmaps", "xmin", "ymin", "xmax", "ymax", "near", "framepack", "packed", "right", "frameseq", "lines", "columns", "framerate", "interp_start", "interp_end", "scene_change_detect", "framestep", "step", "fspp", "strength", "use_bframe_qp", "gblur", "steps", "sigmaV", "lum_expr", "cb_expr", "cr_expr", "alpha_expr", "red_expr", "green_expr", "blue_expr", "gradfun", "radius", "hflip", "histeq", "antibanding", "weak", "strong", "histogram", "level_height", "scale_height", "display_mode", "parade", "levels_mode", "components", "fgopacity", "bgopacity", "hqdn3d", "luma_spatial", "chroma_spatial", "luma_tmp", "chroma_tmp", "hwdownload", "hwmap", "read", "write", "overwrite", "direct", "hwupload", "hysteresis", "undetermined", "neither", "idet", "intl_thres", "prog_thres", "rep_thres", "half_life", "analyze_interlaced_flag", "luma_mode", "deinterleave", "chroma_mode", "alpha_mode", "luma_swap", "chroma_swap", "alpha_swap", "with", "without", "interlace", "scan", "kerndeint", "sharp", "twoway", "lenscorrection", "lut2", "srcx", "srcy", "DOMAIN_", "values", "cube", "haldclut", "clut", "interp_mode", "nearest", "trilinear", "tetrahedral", "lut3d", "negval", "negate", "negate_alpha", "lutrgb", "lutyuv", "clip", "gammaval", "gammaval709", "clipval", "maxval", "minval", "maskedclamp", "dark", "bright", "undershoot", "overshoot", "maskedmerge", "mask", "memc_only", "no_bitstream", "mcdeint", "extra_slow", "mergeplanes", "mapping", "mestimate", "method", "tdls", "ntss", "hexbs", "mb_size", "search_param", "midequalizer", "minterpolate", "mi_mode", "mc_mode", "aobmc", "me_mode", "bilat", "vsbmc", "fdiff", "scd_threshold", "keep", "mpdecimate", "frac", "erosion", "dilation", "inflate", "threshold0", "threshold1", "threshold2", "threshold3", "coordinates", "nlmeans", "nnedi", "weights", "nsize", "s8x6", "s16x6", "s32x6", "s48x6", "s8x4", "s16x4", "s32x4", "n128", "n256", "qual", "etype", "pscrn", "fapprox", "all_seed", "all_strength", "alls", "all_flags", "allf", "c0_seed", "c0_strength", "c0_flags", "c1_seed", "c1_strength", "c1_flags", "c2_seed", "c2_strength", "c2_flags", "c3_seed", "c3_strength", "c3_flags", "eof_action", "repeat", "endall", "pass", "yuv420", "yuv422", "yuv444", "gbrp", "main_w", "main_h", "overlay_w", "overlay_h", "owdenoise", "luma_strength", "chroma_strength", "palettegen", "max_colors", "reserve_transparent", "stats_mode", "diff", "paletteuse", "palette", "dithering_mode", "bayer", "heckbert", "floyd_steinberg", "sierra2", "sierra2_4a", "bayer_scale", "diff_mode", "rectangle", "debug_kdtree", "color_search", "nns_iterative", "nns_recursive", "bruteforce", "mean_err", "debug_accuracy", "perspective", "interpolation", "sense", "destination", "analyze", "pixdesctest", "hard", "soft", "premultiply", "reference", "stats_file", "stats_version", "output_max", "pullup", "luma", "known", "frames", "readeia608", "scan_min", "scan_max", "th_w", "th_b", "readvitc", "thr_b", "thr_w", "remap", "removegrain", "removelogo", "repeatfields", "angle", "rotate", "rotw", "roth", "fillcolor", "bilinear", "luma_pre_filter_radius", "lpfr", "chroma_pre_filter_radius", "cpfr", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "scale2ref", "interl", "in_color_matrix", "out_color_matrix", "in_range", "out_range", "in_v_chr_pos", "in_h_chr_pos", "out_v_chr_pos", "out_h_chr_pos", "force_original_aspect_ratio", "force_oar", "disable", "decrease", "increase", "nb_slices", "CMYK", "selectivecolor", "correction_method", "reds", "yellows", "greens", "cyans", "blues", "magentas", "whites", "neutrals", "blacks", "yellow", "cyan", "magenta", "neutral", "separatefields", "setfield", "prog", "checkerboard", "showinfo", "showpalette", "shuffleframes", "shuffleplanes", "map0", "map1", "map2", "map3", "signalstats", "TOUT", "VREP", "BRNG", "stat", "filters", "tout", "vrep", "brng", "signature", "detectmode", "binary", "th_d", "th_dc", "th_xh", "th_di", "th_it", "smartblur", "luma_threshold", "chroma_threshold", "vstack", "hstack", "stereo3d", "ab2l", "ab2r", "sbs2l", "sbs2r", "sbsl", "sbsr", "agmc", "agmd", "agmg", "agmh", "arbg", "arcc", "arcd", "arcg", "arch", "argg", "aybc", "aybd", "aybg", "aybh", "hdmi", "super2xsai", "swaprect", "swapuv", "telecine", "thumbnail", "tile", "layout", "margin", "padding", "tinterlace", "merge", "drop_even", "drop_odd", "interleave_top", "interleave_bottom", "interlacex2", "mergex2", "low_pass_filter", "vlpf", "exact_tb", "counterclockwise", "clockwise", "transpose", "cclock_flip", "clock", "cclock", "clock_flip", "passthrough", "portrait", "landscape", "sharpen", "unsharp", "luma_msize_x", "luma_msize_y", "luma_amount", "chroma_msize_x", "chroma_msize_y", "chroma_amount", "uspp", "vaguedenoiser", "garrote", "nsteps", "percent", "vectorscope", "color3", "color4", "color5", "envelope", "instant", "graticule", "name", "lthreshold", "hthreshold", "vflip", "vignette", "forward", "backward", "w3fdif", "complex", "waveform", "column", "display", "stack", "flat", "aflat", "acolor", "numbers", "dots", "digital", "millivolts", "weave", "yadif", "send_frame_nospatial", "send_field_nospatial", "zoompan", "pduration", "time", "pzoom", "nullsink", "cellauto", "rule", "random_fill_ratio", "random_seed", "start_full", "stitch", "bBsS", "life", "mold", "life_color", "death_color", "mold_color", "mandelbrot", "maxiter", "start_x", "start_y", "start_scale", "end_scale", "bailout", "morphxf", "morphyf", "morphamp", "outer", "iteration_count", "normalized_iteration_count", "outz", "inner", "period", "convergence", "mincol", "mptestsrc", "test", "dc_luma", "dc_chroma", "freq_luma", "freq_chroma", "amp_luma", "amp_chroma", "ring1", "ring2", "allrgb", "allyuv", "smptehdbars", "smptebars", "yuvtestsrc", "rgbtestsrc", "testsrc2", "testsrc", "decimals", "nullsrc", "haldclutsrc", "APETAGEX", "async", "Async", "AVIOContext", "protocol_whitelist", "subfile", "AVERROR_OPTION_NOT_FOUND", "protocol_blacklist", "URLContext", "rw_timeout", "clfp", "cache_file_open_mode", "cache_file_path", "cache_file_key", "min_disk_free_space", "reconnect", "reconnect_delay_max", "crhps", "cfhps", "cnhps", "crhp", "cfhp", "cnhp", "is_save_file", "reconnect_count", "async_open_flag", "first_frame_size", "cur_file_no", "inpoint", "outpoint", "file_packet_metadata", "stream", "exact_stream_id", "ffconcat", "version", "safe", "auto_convert", "segment_time_metadata", "language", "effects", "dialogue", "comentary", "emergency", "karaoke", "Output", "Input", "from", "fifo_format", "queue_size", "format_opts", "drop_pkts_on_overflow", "restart_with_keyframe", "attempt_recovery", "max_recovery_attempts", "recovery_wait_time", "recovery_wait_streamtime", "recover_any_error", "pipe", "crypto", "truncate", "follow", "false", "keyframes", "times", "filepositions", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "metadatacreator", "MEGA", "filesize", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Encoder", "live_flv", "live_flvdec", "flvdec", "flv_metadata", "missing_streams", "datasize", "lasttimestamp", "totalframes", "hasAudio", "hasVideo", "hasCuePoints", "hasMetadata", "hasKeyframes", "canSeekToEnd", "videosize", "audiosize", "lastkeyframetimestamp", "lastkeyframelocation", "Text", "Video", "Audio", "Data", "flvflags", "aac_seq_header_detect", "no_sequence_end", "no_metadata", "no_duration_filesize", "add_keyframe_index", "segment", "ssegment", "image2pipe", "mime_type", "min_delay", "max_gif_delay", "default_delay", "ignore_loop", "final_delay", "framehash", "hash", "sha256", "format_version", "expires", "AVERROR_EOF", "Forbidden", "POST", "Location", "bytes", "chunked", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "gzip", "http_proxy", "no_proxy", "https", "domain", "path", "listen", "fail", "sucess", "AVERROR_INVALIDDATA", "icy_metadata_packet", "hlsc", "seekable", "chunked_post", "headers", "content_type", "user_agent", "multiple_requests", "post_data", "cookies", "icy_metadata_headers", "auth_type", "basic", "send_expect_100", "location", "end_offset", "reconnect_at_eof", "reconnect_streamed", "resource", "reply_code", "valid_http_content_type", "is_redirect", "is_tcp_free", "load_per_percent", "read_wait_timeout", "min_play_size", "file_max_cache_size", "range_end", "http", "comment", "variant_bitrate", "AUDIO", "VIDEO", "SUBTITLES", "EVENT", "PRIV", "APIC", "live_start_index", "allowed_extensions", "auth", "ijkapplication", "CONNECT", "httpproxy", "AVApplicationContext", "title", "artist", "date", "genre", "Blues", "Country", "Dance", "Disco", "Funk", "Grunge", "Jazz", "Metal", "Oldies", "Other", "Reggae", "Rock", "Techno", "Industrial", "Alternative", "Pranks", "Soundtrack", "Ambient", "Vocal", "Fusion", "Trance", "Classical", "Instrumental", "Acid", "House", "Game", "Gospel", "Noise", "AlternRock", "Bass", "Soul", "Punk", "Space", "Meditative", "Ethnic", "Gothic", "Darkwave", "Electronic", "Eurodance", "Dream", "Comedy", "Cult", "Gangsta", "Jungle", "Cabaret", "Psychadelic", "Rave", "Showtunes", "Trailer", "Tribal", "Polka", "Retro", "Musical", "Folk", "Swing", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Chorus", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Sonata", "Symphony", "Primus", "Satire", "Club", "Tango", "Samba", "Folklore", "Ballad", "Freestyle", "Duet", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Beat", "Crossover", "Merengue", "Salsa", "Anime", "JPop", "SynthPop", "TYER", "TDAT", "GEOB", "TCON", "TXXX", "COMM", "encrypted", "compression", "USLT", "CHAP", "Conductor", "Composer", "Illustration", "compilation", "encoded_by", "album_artist", "performer", "TCMP", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "TSOP", "TSOT", "TALB", "TCOM", "composer", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "ijkio", "ijktcphook", "ijksegment", "ijklongurl", "ijkhttphook", "ijkmediadatasource", "SDPX", "XPDS", "xpm_pipe", "webp_pipe", "tiff_pipe", "sunrast_pipe", "sgi_pipe", "qdraw_pipe", "psd_pipe", "ppm_pipe", "png_pipe", "pictor_pipe", "pgmyuv_pipe", "pgm_pipe", "pcx_pipe", "pbm_pipe", "pam_pipe", "jpegls_pipe", "jpeg_pipe", "j2k_pipe", "exr_pipe", "dpx_pipe", "dds_pipe", "bmp_pipe", "pattern_type", "glob_sequence", "glob", "sequence", "start_number", "start_number_range", "ts_from_file", "ts_type", "UVAx", "updatefirst", "update", "strftime", "atomic_writing", "ljpg", "im24", "im32", "sunras", "yuv10", "rtpo", "stss", "stps", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "HintHandler", "tmcd", "TimeCodeHandler", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "handler", "earth", "disk", "trkn", "CodecPrivateData", "timecode", "ipod", "ismv", "yrrc", "albm", "lpcm", "Lavf", "XDCAM", "DpxE", "reel_name", "perf", "titl", "author", "gnre", "dscp", "cprt", "make", "model", "aART", "encoding_tool", "grouping", "description", "ldes", "synopsis", "tvsh", "tven", "episode_id", "tvnn", "network", "tves", "episode_sort", "tvsn", "season_number", "stik", "media_type", "hdvd", "hd_video", "pgap", "gapless_playback", "cpil", "tmpo", "wide", "free", "audio", "systemBitrate", "trackID", "systemLanguage", "trackName", "FourCC", "H264", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "movflags", "rtphint", "moov_size", "empty_moov", "frag_keyframe", "separate_moof", "frag_custom", "isml", "faststart", "omit_tfhd_offset", "disable_chpl", "default_base_moof", "dash", "frag_discont", "delay_moov", "global_sidx", "write_colr", "write_gama", "use_metadata_tags", "skip_trailer", "rtpflags", "rfc2190", "skip_rtcp", "h264_mode0", "send_bye", "skip_iods", "iods_audio_profile", "iods_video_profile", "frag_duration", "min_frag_duration", "frag_size", "ism_lookahead", "video_track_timescale", "brand", "use_editlist", "fragment_index", "mov_gamma", "frag_interleave", "encryption_scheme", "encryption_key", "encryption_kid", "use_stream_ids_as_track_ids", "write_tmcd", "root", "handler_name", "iTunSMPB", "cdec", "major_brand", "minor_version", "compatible_brands", "equirectangular", "free_and_return", "nclx", "nclc", "premiere_version", "quicktime_version", "account_type", "account_id", "category", "episode_uid", "firmware", "keywords", "podcast", "purchase_date", "rating", "sort_album_artist", "sort_album", "sort_artist", "sort_composer", "sort_name", "sort_show", "spherical", "producer", "chapter", "director", "disclaimer", "edit_date", "original_format", "host_computer", "original_artist", "performers", "playback_requirements", "original_source", "subtitle", "warning", "AVERROR_PATCHWELCOME", "rtmd", "stsd", "AV1x", "AVup", "apcn", "apch", "dvpp", "dvcp", "mp4s", "use_absolute_path", "seek_streams_individually", "ignore_editlist", "advanced_editlist", "ignore_chapters", "use_mfra_for", "export_all", "export_xmp", "activation_bytes", "audible_fixed_key", "decryption_key", "enable_drefs", "ugc_performance", "usetoc", "id3v2_version", "write_id3v1", "write_xing", "IMKH", "Sofdec", "ofdec", "HDMV", "HDPR", "service_name", "service_provider", "CUEI", "mpegtsraw", "mpegts", "resync_size", "compute_pcr", "ts_packetsize", "fix_teletext_pts", "scan_all_pmts", "skip_changes", "skip_clear", "mpegvideo", "writing", "reading", "AVFormatContext", "avioflags", "probesize", "formatprobesize", "packetsize", "fflags", "flush_packets", "ignidx", "genpts", "nofillin", "noparse", "igndts", "discardcorrupt", "sortdts", "keepside", "fastseek", "nobuffer", "seek2any", "autobsf", "analyzeduration", "cryptokey", "indexmem", "rtbufsize", "fdebug", "max_delay", "start_time_realtime", "fpsprobesize", "audio_preload", "chunk_duration", "chunk_size", "f_err_detect", "use_wallclock_as_timestamps", "skip_initial_bytes", "correct_ts_overflow", "metadata_header_padding", "output_ts_offset", "max_interleave_delta", "f_strict", "max_ts_probe", "avoid_negative_ts", "make_non_negative", "make_zero", "format_whitelist", "max_streams", "mulaw", "alaw", "u16le", "u16be", "u24le", "u24be", "u32le", "u32be", "s16le", "s16be", "s24le", "s24be", "s32le", "s32be", "f32le", "f32be", "f64le", "f64be", "prompeg", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "LIST", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "send", "idle", "ffrtmphttp", "ffrtmphttp_tls", "notification", "invoke", "pause", "_result", "FCSubscribe", "onStatus", "status", "code", "details", "_error", "_checkbw", "releaseStream", "FCPublish", "getStreamLength", "connect", "user", "salt", "opaque", "challenge", "nonce", "adobe", "live", "publish", "llnw", "createStream", "play", "onBWDone", "onFCPublish", "FCUnpublish", "deleteStream", "timeout", "rtmp", "rtmpt", "rtmpts", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "rtmp_swfhash", "ondemand", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "fmsVer", "objectEncoding", "rtmp_app", "rtmp_buffer", "rtmp_conn", "rtmp_flashver", "rtmp_flush_interval", "rtmp_live", "recorded", "rtmp_pageurl", "rtmp_playpath", "rtmp_subscribe", "rtmp_swfsize", "rtmp_swfurl", "rtmp_swfverify", "rtmp_tcurl", "rtmp_listen", "payload_type", "listen_timeout", "connect_timeout", "send_buffer_size", "recv_buffer_size", "is_first_packet", "socket", "reuse", "overrun_nonfatal", "udplite_coverage", "localport", "buffer_size", "fifo_size", "bitrate", "burst_bits", "localaddr", "sources", "block", "broadcast", "udplite", "local_port", "reuse_socket", "mp4v", "cache", "AVERROR_DECODER_NOT_FOUND", "AVERROR", "dvbsub", "dvbtxt", "loas", "mjpeg_2000", "originator", "originator_reference", "origination_date", "origination_time", "time_reference", "umid", "coding_history", "WAVE", "RIFF", "RIFX", "RF64", "ds64", "ignore_length", "levl", "JUNK", "NONE", "fact", "bext", "write_bext", "write_peak", "only", "rf64", "always", "never", "peak_block_size", "peak_format", "peak_ppv", "VP8X", "ANIM", "ANMF", "quad", "hexagonal", "octagonal", "hexadecagonal", "downmix", "LFE2", "armv5te", "armv6", "armv6t2", "vfp_vm", "vfpv3", "neon", "setend", "cpuflags", "BSF_NOT_FOUND", "BUG2", "BUFFER_TOO_SMALL", "DECODER_NOT_FOUND", "DEMUXER_NOT_FOUND", "ENCODER_NOT_FOUND", "EXIT", "EXTERNAL", "FILTER_NOT_FOUND", "INPUT_CHANGED", "INVALIDDATA", "MUXER_NOT_FOUND", "OPTION_NOT_FOUND", "OUTPUT_CHANGED", "PATCHWELCOME", "PROTOCOL_NOT_FOUND", "STREAM_NOT_FOUND", "UNKNOWN", "EXPERIMENTAL", "INPUT_AND_OUTPUT_CHANGED", "HTTP_BAD_REQUEST", "HTTP_UNAUTHORIZED", "HTTP_FORBIDDEN", "HTTP_NOT_FOUND", "HTTP_OTHER_4XX", "HTTP_SERVER_ERROR", "sinh", "cosh", "tanh", "atan", "asin", "acos", "squish", "isnan", "isinf", "while", "taylor", "floor", "ceil", "hypot", "ifnot", "bitand", "bitor", "between", "atan2", "QP2LAMBDA", "Eval", "FILE", "TEMPFILE", "AVPanScan", "AVMatrixEncoding", "AVReplayGain", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA384", "SHA512", "CRC32", "adler32", "AVHWFramesContext", "IMGUTILS", "quiet", "fatal", "panic", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "INT64_MAX", "INT64_MIN", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "FLT_MAX", "FLT_MIN", "DBL_MAX", "DBL_MIN", "pixel", "bikeshed", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "Snow", "SpringGreen", "SteelBlue", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen", "january", "february", "march", "april", "june", "july", "august", "september", "october", "november", "december", "qntsc", "qpal", "sntsc", "spal", "sqcif", "qcif", "qqvga", "qvga", "svga", "uxga", "qxga", "sxga", "qsxga", "hsxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd1080", "hqvga", "wqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "yuvj", "bgra", "rgba", "rgb32", "bgr32", "vaapi", "yuyv422", "rgb24", "bgr24", "yuv410p", "yuv411p", "monow", "monob", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "y16be", "gray16le", "y16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "rgb0", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "mediacodec", "gray12be", "y12be", "gray12le", "y12le", "gray10be", "y10be", "gray10le", "y10le", "p016le", "p016be", "cubemap", "attachment", "SWResampler", "in_channel_count", "out_channel_count", "used_channel_count", "internal_sample_fmt", "clev", "center_mix_level", "surround_mix_level", "lfe_mix_level", "rmvol", "rematrix_volume", "rematrix_maxval", "swr_flags", "dither_scale", "dither_method", "triangular_hp", "lipshitz", "shibata", "low_shibata", "high_shibata", "f_weighted", "modified_e_weighted", "improved_e_weighted", "filter_size", "phase_shift", "linear_interp", "exact_rational", "resample_cutoff", "resampler", "soxr", "cheby", "min_comp", "min_hard_comp", "comp_duration", "max_soft_comp", "first_pts", "matrix_encoding", "dolby", "dplii", "filter_type", "blackman_nuttall", "kaiser", "kaiser_beta", "output_sample_bits", "swscaler", "SWScaler", "fast_bilinear", "bicubic", "neighbor", "area", "bicublin", "Gaussian", "sinc", "spline", "print_info", "accurate_rnd", "full_chroma_int", "full_chroma_inp", "error_diffusion", "sws_dither", "a_dither", "x_dither", "alphablend", "uniform_color", "AudioData", "AVAudioResampleContext", "s16p", "s32p", "fltp", "dblp", "mix_coeff_type", "normalize_mix_level", "None", "Dolby", "Cubic", "triangular_ns", "in_buffer", "resample_out_buffer", "out_buffer", "output", "input", "Features", "NEON", "getauxval", "vfpv3d16", "vfpv4", "idiva", "idivt", "idiv", "iwmmxt", "Hardware", "Goldfish", "Processor", "put_bits", "aac_adtstoasc_init", "flush_put_bits", "aac_adtstoasc_filter", "decode_prediction", "decode_tns", "apply_dependent_coupling", "che_configure", "decode_channel_map", "get_che", "spectral_to_sample", "decode_pce", "decode_audio_specific_config_gb", "decode_eld_specific_config", "latm_decode_audio_specific_config", "decode_audio_specific_config", "aac_decode_init", "decode_band_types", "decode_scalefactors", "decode_ics", "decode_spectrum_and_dequant", "decode_cpe", "aac_decode_er_frame", "aac_decode_frame_int", "decode_extension_payload", "decode_fill", "read_audio_mux_element", "latm_decode_frame", "ff_ps_read_data", "read_iid_data", "read_icc_data", "read_sbr_envelope", "read_sbr_noise", "read_sbr_grid", "sbr_hf_calc_npatches", "read_sbr_data", "read_sbr_extension", "ff_decode_sbr_extension", "sbr_reset", "ff_sbr_apply", "sbr_mapping", "ff_set_fixed_vector", "ff_af_queue_close", "ff_af_queue_add", "ff_af_queue_remove", "av_grow_packet", "av_packet_split_side_data", "av_packet_merge_side_data", "put_bits", "build_table", "avpriv_copy_bits", "ff_init_vlc_sparse", "av_bsf_send_packet", "bytestream2_init", "set_mv_strides", "guess_dc", "ff_er_add_slice", "ff_er_frame_end", "guess_mv", "allocate_buffers", "decode_residuals", "flac_decode_frame", "decode_frame", "dump_headers", "decode_subframe", "decode_subframe_fixed", "decode_subframe_lpc", "ff_flac_decode_frame_header", "ff_flac_is_extradata_valid", "ff_flac_parse_streaminfo", "ff_flv_decode_picture_header", "bytestream2_init", "GIF87aGIF89agif_decode_frame", "gif_parse_next_image", "gif_read_image", "put_bits", "gif_image_write_image", "gif_encode_init", "flush_put_bits", "ff_h263_decode_init", "decode_slice", "ff_h263_decode_frame", "get_nalsize", "ff_h2645_packet_split", "ff_h264_decode_mb_cabac", "get_ue_golomb", "decode_residual", "ff_h264_decode_mb_cavlc", "h264_er_decode_mb", "finalize_frame", "decode_nal_units", "get_last_needed_nal", "debug_green_metadata", "h264_decode_frame", "ff_h264_alloc_tables", "ff_h264_slice_context_init", "ff_h264_decode_init", "ff_h264_direct_ref_list_init", "h264_mp4toannexb_filter", "h264_mp4toannexb_init", "h264_extradata_to_annexb", "decode_extradata_ps", "get_ue_golomb", "decode_extradata_ps_mp4", "bytestream2_init", "bytestream2_init_writer", "ff_h264_pred_weight_table", "ff_h264_check_intra4x4_pred_mode", "ff_h264_check_intra_pred_mode", "ff_h264_decode_extradata", "get_ue_golomb", "h264_find_frame_end", "scan_mmco_reset", "get_nalsize", "parse_nal_units", "ff_h264_ref_picture", "ff_h264_field_end", "ff_h264_pred_init", "decode_scaling_list", "decode_hrd_parameters", "ff_h264_decode_seq_parameter_set", "decode_vui_parameters", "Gray", "ff_h264_decode_picture_parameter_set", "more_rbsp_data_in_pps", "find_short", "print_short_term", "print_long_term", "remove_short", "build_def_list", "h264_initialise_ref_list", "ff_h264_build_ref_list", "ff_h264_decode_ref_pic_list_reordering", "ff_h264_execute_ref_pic_marking", "ff_h264_decode_ref_pic_marking", "ff_h264_sei_decode", "decode_picture_timing", "decode_buffering_period", "h264_slice_header_init", "get_pixel_format", "decode_slice", "get_ue_golomb", "h264_frame_start", "alloc_picture", "ff_h264_execute_decode_slices", "h264_slice_header_parse", "ff_h264_queue_decode_slice", "init_dimensions", "h264_init_ps", "h264_field_start", "h264_select_output_frame", "h264_slice_init", "ff_hevc_cu_qp_delta_abs", "mvd_decode", "hls_transform_unit", "decode_nal_units", "hls_slice_header", "pred_weight_table", "hevc_frame_start", "set_side_data", "decode_nal_unit", "hls_slice_data_wpp", "bytestream2_init", "hevc_decode_extradata", "hevc_decode_frame", "verify_md5", "hls_decode_entry", "bytestream2_init", "hevc_mp4toannexb_init", "hevc_extradata_to_annexb", "parse_nal_units", "scaling_list_data", "remove_sps", "decode_hrd", "ff_hevc_decode_short_term_rps", "ff_hevc_decode_nal_vps", "ff_hevc_parse_sps", "map_pixel_format", "decode_vui", "ff_hevc_decode_nal_sps", "ff_hevc_decode_nal_pps", "pps_range_extensions", "find_ref_idx", "alloc_frame", "ff_hevc_set_new_ref", "ff_hevc_slice_rpl", "decode_nal_sei_message", "decode_pic_timing", "decode_nal_sei_prefix", "active_parameter_sets", "decode_nal_sei_suffix", "ff_init_scantable_permutation", "avcodec_get_chroma_sub_sample", "ff_intel_h263_decode_picture_header", "check_marker", "check_marker", "ff_h263_show_pict_info", "ff_h263_decode_mb", "ff_h263_decode_picture_header", "ff_kbd_window_init", "fdk_aac_decode_frame", "get_stream_info", "fdk_aac_decode_init", "fdk_aac_decode_flush", "aac_encode_frame", "aac_encode_init", "ff_libwebp_encode_init_common", "ff_libwebp_get_frame", "libwebp_encode_frame", "X264_frame", "encode_nals", "ff_lzw_encode_init", "bytestream2_init", "put_bits", "flush_put_bits", "jpeg_put_comments", "ff_mjpeg_encode_picture_header", "skip_put_bytes", "ff_mjpeg_encode_stuffing", "ff_mjpegenc_huffman_compute_bits", "ff_mjpeg_encode_huffman_close", "put_bits", "ff_mjpeg_encode_coef", "ff_mjpeg_encode_init", "alloc_huffman", "ff_estimate_p_frame_motion", "ff_pre_estimate_p_frame_motion", "mp3_header_decompress", "ff_init_2d_vlc_rl", "put_bits", "parse_config_ALS", "mpeg4_unpack_bframes_init", "mpeg4_unpack_bframes_filter", "check_marker", "ff_mpeg4_pred_dc", "mpeg4_decode_dc", "mpeg4_decode_block", "mpeg4_decode_mb", "mpeg4_decode_partitioned_mb", "ff_mpeg4_decode_video_packet_header", "mpeg4_decode_partition_a", "mpeg4_decode_partition_b", "ff_mpeg4_decode_picture_header", "decode_vol_header", "mpeg4_decode_gop_header", "decode_vop_header", "ff_mpeg4_frame_end", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "mpeg_er_decode_mb", "ff_mpeg_framesize_alloc", "ff_alloc_picture", "alloc_frame_buffer", "ff_mpeg_ref_picture", "find_unused_picture", "put_bits", "clip_coeffs", "flush_put_bits", "encode_mb_hq", "ff_convert_matrix", "load_input_picture", "estimate_best_b_count", "select_input_picture", "ff_mpv_encode_picture", "ff_mpv_encode_init", "ff_mpv_reallocate_putbitbuffer", "rebase_put_bits", "encode_thread", "mpeg_motion_internal", "init_duplicate_context", "init_context_frame", "ff_mpv_common_init", "ff_mpeg_update_thread_context", "ff_mpv_frame_start", "ff_print_debug_info2", "ff_mpv_export_qp_table", "mpv_decode_mb_internal", "mpegvideo_extract_headers", "init_context_defaults", "avcodec_copy_context", "av_parser_parse2", "ff_combine_frame", "pcm_bluray_decode_frame", "pcm_dvd_decode_frame", "pcm_dvd_parse_header", "pcm_decode_init", "decode_frame_png", "decode_frame_common", "decode_ihdr_chunk", "decode_phys_chunk", "decode_idat_chunk", "png_decode_idat", "encode_headers", "png_enc_init", "png_choose_filter", "encode_apng", "release_delayed_buffers", "submit_packet", "ff_thread_report_progress", "ff_thread_await_progress", "ff_thread_finish_setup", "frame_worker_thread", "ff_frame_thread_free", "ff_thread_get_format", "thread_get_buffer_internal", "ff_thread_get_buffer", "ff_thread_release_buffer", "validate_thread_parameters", "ff_alloc_entries", "bits2qp", "qp2bits", "get_qminmax", "modify_qscale", "ff_vbv_update", "ff_rate_control_init", "init_pass2", "ff_rate_estimate_qscale", "raw_init_decoder", "raw_decode", "I420", "IYUV", "yv12", "YUYVw", "BGR0C", "b48rs", "J444Z", "I40AY", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "av_audio_resample_init", "ff_rl_init_vlc", "ff_fast_malloc", "avcodec_set_dimensions", "apply_param_change", "ff_set_sar", "ff_color_frame", "update_frame_pool", "video_get_buffer", "audio_get_buffer", "ff_init_buffer_info", "get_buffer_internal", "validate_avframe_allocation", "ff_get_buffer", "reget_buffer_internal", "ff_reget_buffer", "ff_alloc_packet2", "avcodec_encode_audio2", "avcodec_encode_video2", "do_encode", "avcodec_encode_subtitle", "avcodec_decode_video2", "avcodec_decode_audio4", "do_decode", "avcodec_decode_subtitle2", "recode_subtitle", "avcodec_get_name", "av_log_ask_for_sample", "av_log_missing_feature", "ff_get_format", "setup_hwaccel", "ff_unlock_avcodec", "ff_lock_avcodec", "ff_thread_ref_frame", "avcodec_open2", "avpriv_find_start_code", "av_vorbis_parse_frame_flags", "vorbis_parse_init", "parse_id_header", "parse_setup_header", "vp9_superframe_filter", "merge_superframe", "init", "config_props", "scquery_formats", "scfilter_frame", "ff_bufqueue_get", "ff_bufqueue_add", "config_output", "frame_list_remove_samples", "filter_frame", "frame_list_add_frame", "request_samples", "request_frame", "request_frame", "filter_frame", "init", "phaser_s32p", "phaser_s16p", "phaser_fltp", "phaser_dblp", "config_output", "config_input", "lfo_get_value", "config_output", "init", "filter_frame", "config_props", "print_gain", "print_peak", "filter_frame", "dump_matrixenc", "dump_downmix", "dump_replaygain", "dump_audio_service_type", "dump_unknown", "print_stats", "yae_overlap_add", "yae_load_data", "yae_load_frag", "yae_reset", "init", "config_output", "filter_frame", "channelmap_init", "init", "init", "config_output", "config_output", "update_gain_history", "ff_bufqueue_add", "config_input", "entry_func", "gain_interpolate_func", "cubic_interpolate_func", "generate_kernel", "process_command", "config_input", "hdcd_analyze", "hdcd_envelope", "init", "hdcd_integrate", "hdcd_process_stereo", "hdcd_process", "join_init", "parse_maps", "join_config_output", "filter_frame", "init", "config_props", "config_input", "config_output", "filter_frame", "query_formats", "set_expr", "set_volume", "config_output", "filter_frame", "ff_default_get_audio_buffer", "config_output", "close_input", "process_frame", "ff_bufqueue_add", "ff_bufqueue_get", "flush_segment", "heap_bubble_down", "pick_format", "sanitize_channel_layouts", "filter_query_formats", "avfilter_graph_alloc_filter", "query_formats", "graph_check_validity", "graph_config_formats", "swap_sample_fmts_on_filter", "swap_samplerates_on_filter", "swap_channel_layouts_on_filter", "graph_config_pointers", "heap_bubble_up", "ff_filter_graph_run_once", "avfilter_graph_request_oldest", "set_enable_expr", "process_options", "avfilter_link", "ff_avfilter_link_set_in_status", "avfilter_insert_filter", "avfilter_config_links", "ff_avfilter_link_set_out_status", "avfilter_process_command", "avfilter_register", "avfilter_init_dict", "avfilter_init_str", "ff_filter_frame", "ff_inlink_make_frame_writable", "ff_inlink_process_commands", "init", "init_colormatrix", "init_cscheme", "clip_with_log", "filter_frame", "render_freetype", "render_fontconfig", "init_axis_color", "config_output", "init_cqt", "plot_freq", "color_range", "plot_channel", "filter_frame", "config_output", "vsink_query_formats", "asink_query_formats", "av_buffersink_get_time_base", "av_buffersink_get_format", "av_buffersink_get_frame_rate", "av_buffersink_get_w", "av_buffersink_get_h", "av_buffersink_get_sample_aspect_ratio", "av_buffersink_get_channels", "av_buffersink_get_channel_layout", "av_buffersink_get_sample_rate", "av_buffersink_get_hw_frames_ctx", "init_video", "init_audio", "av_buffersrc_add_frame_internal", "av_buffersrc_add_frame_flags", "ff_fill_line_with_color", "ff_draw_color", "process_frame", "filter_frame", "config_video_output", "init", "buffer_offset", "return_audio_frame", "config_output", "init", "ff_bufqueue_get", "push_frame", "filter_frame", "ff_bufqueue_add", "init", "filter_frame", "ff_merge_formats", "ff_merge_samplerates", "ff_parse_pixel_format", "ff_parse_sample_format", "ff_parse_time_base", "ff_parse_sample_rate", "ff_parse_channel_layout", "filter_frame", "ff_frame_pool_get_video_config", "ff_frame_pool_get_audio_config", "ff_frame_pool_get", "framesync_sync_level_update", "framesync_inject_frame", "ff_bufqueue_get", "ff_framesync_configure", "ff_bufqueue_add", "ff_framesync_next", "ff_framesync_process_frame", "filter_frame", "select_frame", "aselect_init", "init", "parse_interval", "parse_command", "parse_commands", "parse_intervals", "filter_frame", "filter_frame", "init", "parse_mapping", "config_output", "parse_definition", "init", "ff_generate_wave_table", "parse_sws_flags", "parse_link_name", "create_filter", "parse_outputs", "link_filter", "link_filter_inouts", "avfilter_graph_parse2", "avfilter_graph_parse", "avfilter_graph_parse_ptr", "ff_load_image", "ff_scale_image", "init", "config_input", "filter_frame", "config_output_props", "filter_frame", "rewind_file", "movie_push_frame", "movie_common_init", "find_stream", "guess_channel_layout", "open_stream", "atrim_filter_frame", "read8_fft_bin", "try_push_frames", "config_output", "ff_bufqueue_get", "ff_bufqueue_add", "init", "get_aspect_ratio", "setdar_config_props", "setsar_config_props", "ff_bufqueue_add", "ff_bufqueue_get", "filter_frame", "config_input", "init", "config_props", "filter_frame", "config_input", "monochrome_color_location", "fill_in_tongue", "plot_white_point", "plot_gamuts", "config_input", "filter_frame", "init", "create_filtergraph", "checkline", "filter_frame", "config_input", "filter_frame", "parse_psfile", "dump_curves", "interpolate", "parse_points_str", "config_input", "config_input", "config_output", "decimate_init", "config_out_props", "filter_frame", "config_input", "init", "config_output", "set_expr", "init", "create_weave_frame", "config_props_output", "filter_frame", "search", "filter_frame", "init", "uninit", "init", "filter_frame", "config_output", "set_srce_frame_dest_pts", "set_work_frame_pts", "process_work_frame", "request_frame", "filter_frame", "get_scene_score16", "blend_frames16", "get_scene_score", "blend_frames8", "config_output_props", "filter_frame", "geq_config_props", "set_expr", "filter_frame", "hwdownload_config_output", "hwdownload_config_input", "hwdownload_filter_frame", "hwmap_config_output", "hwmap_filter_frame", "hwmap_get_buffer", "hwupload_query_formats", "hwupload_config_output", "hwupload_filter_frame", "filter", "filter_frame", "copy_picture_field", "filter_frame", "config_clut", "parse_3dl", "parse_m3d", "lut3d_init", "parse_dat", "negate_init", "config_output", "init", "diff_planes", "filter_frame", "init", "init", "set_expr", "process_command", "do_blend", "config_input_overlay", "config_input", "split_box", "write_palette", "disp_tree", "debug_accuracy", "load_colormap", "debug_mean_error", "config_input_ref", "uninit", "filter_frame", "config_props", "init", "filter_frame", "process_command", "filter_frame", "config_props", "init_dict", "filter_frame", "parse_psfile", "config_input", "config_props_output", "config_props", "filter_frame", "dump_stereo3d", "shuffleplanes_config_input", "put_bits", "init", "get_matching_parameters", "export", "xml_export", "binary_export", "flush_put_bits", "lookup_signatures", "request_frame", "config_input_ref", "uninit", "config_output", "filter_frame", "init", "config_output", "init", "init", "config_props", "filter_frame", "config_props_output", "init", "config_input", "vectorscope16", "vectorscope8", "config_props", "config_props", "filter_frame", "init_pattern_from_string", "init", "parse_rule", "init", "init_pattern_from_file", "draw_mandelbrot", "init", "init", "haldclutsrc_fill_picture", "draw_bar", "ff_generate_window_func", "ape_tag_read_field", "ff_ape_parse_tag", "ff_ape_write_tag", "async_close", "async_open", "async_seek", "put_str16", "ffio_ensure_seekback", "fill_buffer", "avio_close", "ffio_open_whitelist", "ffurl_accept", "url_alloc_for_protocol", "ffurl_alloc", "ffurl_seek", "ffurl_connect", "ffurl_open_whitelist", "avpriv_io_move", "avpriv_io_delete", "avio_open_dir", "avio_close_dir", "ffurl_get_multi_file_handle", "retry_transfer_wrapper", "ffurl_read", "ffurl_read_complete", "ffurl_write", "clfp_seek", "clfp_read", "open_file", "read_cacheentry_info", "clfp_open", "clfp_write", "add_buf", "insert_node", "clfp_close", "save_file", "save_node_info", "cnhp_close", "async_open", "check_net", "open_net", "async_open_internal", "cnhp_wait_timeout", "check_err_code", "open_net_retry", "cnhp_open", "seek_net", "wait_async_open", "cnhp_seek", "async_seek_internal", "read_cache", "read_net", "write_cache", "match_streams_exact_id", "detect_stream_specific", "open_file", "concat_read_header", "add_file", "filter_packet", "concat_read_packet", "hex_dump_internal", "pkt_dump_internal", "print_fps", "print_peak", "print_gain", "dump_metadata", "dump_stream_format", "dump_sidedata", "dump_paramchange", "dump_replaygain", "dump_stereo3d", "dump_audioservicetype", "dump_cpb", "dump_mastering_display_metadata", "dump_spherical", "av_dump_format", "fifo_init", "fifo_write_trailer", "fifo_write_packet", "fifo_write_header", "fifo_thread_write_header", "fifo_thread_dispatch_message", "fifo_thread_write_packet", "fifo_thread_attempt_recovery", "fifo_thread_process_recovery_failure", "fifo_consumer_thread", "clear_index_entries", "flv_read_header", "add_keyframes_index", "amf_parse_object", "parse_keyframes_index", "flv_read_packet", "flv_read_metabody", "put_bits", "write_metadata", "get_audio_flags", "unsupported_codec", "flush_put_bits", "flv_write_codec_header", "flv_write_packet", "flv_append_keyframe_info", "flv_write_header", "shift_data", "flv_write_trailer", "av_probe_input_format3", "av_probe_input_buffer2", "GIF87aGIF89agif_read_ext", "gif_read_packet", "gif_write_header", "flush_packet", "gif_write_packet", "hlsc_get_percent_size", "parse_cookie", "http_getc", "http_buf_read", "http_write_reply", "hlsc_insert_node", "hlsc_reply_message", "hlsc_post_message", "hlsc_close", "hlsc_close_socketpair", "hlsc_notify_download", "hlsc_process_request_stop", "hlsc_send_message", "hlsc_open", "hlsc_seek", "hlsc_shutdown", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_range", "parse_content_encoding", "cookie_string", "http_open_cnx_internal", "http_connect", "get_cookies", "http_open_cnx", "hlsc_save_tcp_hostname_of_ip", "hlsc_seek_internal", "hlsc_process_seek_internal", "hlsc_process_nextnode_request", "hlsc_write_file", "hlsc_process_node_load_finish", "hlsc_check_data_is_enough", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "hlsc_process_data", "hlsc_read_buffer", "hlsc_open_cnx", "hlsc_open_file", "http_open", "http_listen", "http_handshake", "hlsc_create_file", "hlsc_process_seek_http", "hlsc_process_request_download", "hlsc_dispath_message", "store_icy", "hlsc_read", "check_err_code", "nested_io_open", "read_from_url", "open_input", "hls_read_header", "read_data", "update_init_section", "intercept_id3", "parse_id3", "handle_id3", "recheck_discard_flags", "hls_read_packet", "hls_read", "hls_open", "http_write_reply", "parse_cookie", "http_getc", "http_buf_read", "http_accept", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_encoding", "cookie_string", "http_connect", "get_cookies", "http_handshake", "http_listen", "http_open_cnx", "ff_http_do_new_request", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "store_icy", "http_open", "http_proxy_open", "ff_id3v2_write_apic", "decode_str", "read_geobtag", "read_apic", "read_ttag", "read_chapter", "id3v2_parse", "read_comment", "read_uslt", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "ijkav_register_ijkmediadatasource_protocol", "ijkav_register_ijkhttphook_protocol", "ijkav_register_ijklongurl_protocol", "ijkav_register_ijksegment_protocol", "ijkav_register_ijktcphook_protocol", "ijkav_register_ijkio_protocol", "ff_img_read_header", "ff_img_read_packet", "write_packet", "ff_rename", "ff_mp4_read_descr", "ff_mp4_read_dec_config_descr", "c608", "sac3", "alac", "twos", "lpcm", "fLaC", "v410", "cvid1", "mp2vY", "tiffb", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "pxlt", "ff_mov_read_chan", "ff_mov_cenc_avc_write_nal_units", "ff_mov_init_hinting", "check_pkt", "put_bits", "find_fps", "get_cluster_duration", "mov_write_sidx_tag", "mov_write_hdlr_tag", "mov_write_identification", "mov_write_uuidprof_tag", "flush_put_bits", "mov_init", "text", "ipod_get_codec_tag", "mp4a", "tx3g", "avc1k", "VP6F", "mov_get_dv_codec_tag", "yuv2", "yuvs", "b48r0", "mov_get_rawvideo_codec_tag", "mov_get_codec_tag", "mov_write_avid_tag", "mov_write_dvc1_structs", "mov_write_video_tag", "mov_write_colr_tag", "mov_write_st3d_tag", "mov_write_sv3d_tag", "mov_write_tmcd_tag", "mov_write_source_reference_tag", "mov_write_tkhd_tag", "mov_write_edts_tag", "mov_write_trak_tag", "mov_write_mdhd_tag", "shift_data", "mov_flush_fragment", "ff_mov_write_packet", "mov_write_trailer", "mov_read_enda", "mov_probe", "mov_read_tmcd", "mov_read_fiel", "mov_read_strf", "mov_read_stps", "mov_read_default", "mov_read_glbl", "mov_read_moov", "mov_switch_root", "mov_read_dfla", "mov_read_saiz", "mov_read_sbgp", "mov_read_tfhd", "mov_read_tfdt", "mov_read_stts", "mov_read_stss", "mov_read_stsc", "mov_read_elst", "mov_read_stco", "mov_read_hdlr", "mov_read_custom", "mov_read_ftyp", "mov_read_sv3d", "mov_read_st3d", "mov_read_senc", "mov_read_uuid", "mov_read_wfex", "mov_read_dec3", "mov_read_dac3", "mov_read_wave", "mov_read_pasp", "mov_find_next_sample", "mov_rewrite_dvd_sub_extradata", "mov_open_dref", "mov_read_tkhd", "mov_read_moof", "mov_read_mfra", "read_tfra", "mov_read_adrm", "mov_read_dref", "mov_read_colr", "mov_read_frma", "mov_read_free", "mov_read_keys", "mov_metadata_loci", "mov_read_covr", "mov_read_udta_string", "mov_realloc_extradata", "mov_read_atom_into_extradata", "mov_read_aclr", "mov_read_trex", "fix_index_entry_timestamps", "mov_metadata_creation_time", "mov_read_mvhd", "mov_read_mdhd", "mov_read_stsz", "mov_read_sidx", "mov_read_ddts", "mov_read_ctts", "mov_update_dts_shift", "mov_read_trun", "mov_read_header", "mov_read_chapters", "fix_timescale", "mov_seek_stream", "mov_read_seek", "mov_read_packet", "mov_seek_auxiliary_info", "cenc_filter", "mov_read_trak", "mov_build_index", "mov_fix_index", "ff_mov_read_stsd_entries", "mov_skip_multiple_stsd", "mov_parse_stsd_audio", "mov_parse_stsd_data", "mov_read_stsd", "mp3_seek", "mp3_sync", "mp3_parse_info_tag", "read_xing_toc", "mp3_read_header", "mp3_write_xing", "mp3_write_header", "mp3_write_audio_packet", "mp3_write_packet", "mp3_write_trailer", "mp3_update_xing", "mpegps_read_pes_header", "mpegps_read_dts", "mpegts_set_stream_info", "reanalyze", "mpegts_resync", "mpegts_open_filter", "seek_back", "parse_mp4_descr", "handle_packet", "handle_packets", "mpegts_read_header", "get_packet_size", "new_pes_packet", "mpegts_push_data", "m4sl_cb", "pat_cb", "sdt_cb", "ff_parse_mpeg2_descriptor", "drac", "HEVC", "check_packet", "do_packet_auto_bsf", "write_packet", "compute_muxer_pkt_fields", "avformat_alloc_output_context2", "init_muxer", "ff_interleave_add_packet", "ff_interleave_packet_per_dts", "av_interleaved_write_frame", "av_write_uncoded_frame_internal", "av_write_uncoded_frame_query", "ff_network_init", "ff_socket", "ff_listen", "ff_accept", "ff_listen_connect", "io_open_default", "pcm_read_header", "prompeg_open", "prompeg_init", "prompeg_create_bitstring", "force_one_stream", "rawvideo_read_header", "ff_get_wav_header", "ff_read_riff_info", "ff_end_tag", "IARL", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "ff_put_wav_header", "HFYUD", "IV32p", "IV41q", "VP62k", "Xxanr", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "S263W", "svq19", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "CLJRu", "LAGSl", "ZECO", "Y41P3", "CUVCF", "AV01", "ff_amf_get_string", "rtmp_packet_read_one_chunk", "amf_tag_contents", "ff_rtmp_packet_dump", "handle_client_bw", "handle_server_bw", "handle_chunk_size", "write_begin", "bytestream2_init_writer", "bytestream2_init", "rtmp_seek", "gen_seek", "rtmp_pause", "gen_pause", "write_status", "rtmp_receive_hs_packet", "rtmp_parse_result", "handle_ping", "gen_pong", "gen_swf_verification", "handle_connect_error", "handle_invoke_error", "gen_release_stream", "gen_fcpublish_stream", "gen_create_stream", "handle_invoke_result", "gen_publish", "gen_play", "handle_invoke_status", "send_invoke_response", "rtmp_send_hs_packet", "get_packet", "handle_metadata", "gen_fcunpublish_stream", "gen_delete_stream", "rtmp_calc_swfhash", "rtmp_handshake", "rtmp_server_handshake", "rtmp_write_amf_data", "read_connect", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "scc_write_header", "slave_seek", "subfile_open", "ff_text_init_avio", "drop_dups", "tcp_write", "tcp_read", "tcp_accept", "tcp_open", "log_net_error", "udp_resolve_host", "udp_open", "udp_port", "add_to_pktbuf", "read_from_packet_buffer", "probe_codec", "set_codec_from_probe_data", "try_decode_frame", "ff_copy_whiteblacklists", "ffio_limit", "av_demuxer_open", "avformat_queue_attached_pictures", "ff_compute_frame_duration", "compute_pkt_fields", "update_initial_durations", "ff_add_index_entry", "ff_configure_buffers_for_index", "ff_find_last_ts", "ff_gen_search", "ff_seek_frame_binary", "ff_alloc_extradata", "ff_get_extradata", "ff_rfps_add_frame", "ff_rfps_calculate", "ff_read_packet", "read_frame_internal", "seek_frame_generic", "avformat_seek_file", "update_stream_timings", "avformat_find_stream_info", "estimate_timings_from_pts", "estimate_timings_from_bit_rate", "estimate_timings", "av_find_best_stream", "av_read_play", "av_read_pause", "ff_free_stream", "av_new_program", "avpriv_new_chapter", "av_program_add_stream_index", "avformat_open_input", "init_input", "avformat_new_stream", "avformat_query_codec", "avformat_network_init", "ff_add_param_change", "avformat_match_stream_specifier", "ff_stream_add_bitstream_filter", "av_apply_bitstream_filters", "ff_parse_creation_time_metadata", "ff_get_packet_palette", "get_bit_depth", "get_vpx_color_space", "get_vpx_chroma_subsampling", "wav_parse_bext_string", "wav_read_header", "peak_write_frame", "wav_write_packet", "peak_write_chunk", "wav_write_trailer", "wav_write_header", "peak_init_writer", "RIFF", "WEBP", "webp_write_header", "av_cpu_count", "parse_primary", "av_expr_parse", "av_file_map", "avpriv_open", "avpriv_tempfile", "av_hwframe_map", "av_hwframe_get_buffer", "av_hwframe_ctx_init", "image_copy_plane", "image_copy", "av_image_check_size2", "av_image_alloc", "av_image_copy_to_buffer", "missing_feature_sample", "av_rescale_delta", "ff_fast_malloc", "set_string_fmt", "write_number", "format_duration", "set_string_image_size", "set_string_color", "log_value", "set_string_video_rate", "av_opt_set_defaults2", "av_opt_set_image_size", "av_opt_set_video_rate", "set_format", "av_opt_set_channel_layout", "av_opt_get_image_size", "get_format", "av_opt_get_channel_layout", "set_string_number", "set_string_bool", "av_opt_set", "parse_key_value_pair", "av_opt_set_from_string", "av_opt_set_dict2", "opt_list", "av_opt_show2", "av_opt_is_set_to_default", "av_opt_serialize", "av_parse_color", "ff_check_pixfmt_descriptors", "s16p", "s32p", "fltp", "dblp", "s64p", "check_timecode", "av_timecode_init_from_string", "avutil_version", "IPBSipbav_int_list_length_for_size", "fffffff", "x00000x", "p000x", "p00000x", "p000x", "p000x", "p000x", "swri_audio_convert", "swri_get_dither", "swri_dither_init", "swr_build_matrix", "swri_rematrix_init", "swri_rematrix", "resample_flush", "build_filter", "resample_init", "swr_config_frame", "copy", "swr_alloc_set_opts", "swr_init", "swri_realloc_audio", "swr_convert_internal", "swr_convert", "swr_drop_output", "swr_inject_silence", "swr_get_out_samples", "swr_next_pts", "isGray", "ff_sws_alphablendaway", "isBE", "isALPHA", "isBE", "is16BPS", "isNBPS", "isBE", "is16BPS", "isNBPS", "ff_sws_init_output_funcs", "alloc_lines", "isPlanarYUV", "isYUV", "isGray", "usePal", "isALPHA", "isPlanar", "usePal", "isAnyRGB", "isNBPS", "is16BPS", "isPacked", "swscale", "isGray", "isBayer", "sws_scale", "Rgb16ToPlanarRgb16Wrapper", "bayer_to_yv12_wrapper", "bayer_to_rgb24_wrapper", "planar8ToP01xleWrapper", "planarToP010Wrapper", "is16BPS", "isNBPS", "isBE", "palToRgbWrapper", "rgbToPlanarRgbWrapper", "planarRgbToRgbWrapper", "rgbToRgbWrapper", "isAnyRGB", "isPlanar", "isPackedRGB", "isBayer", "ff_get_unscaled_swscale", "isPlanarYUV", "isYUV", "isGray", "isPacked", "initFilter", "sws_init_context", "isAnyRGB", "isPlanarRGB", "isBayer", "isALPHA", "isYUV", "isGray", "sws_setColorspaceDetails", "isNBPS", "is16BPS", "isPlanarYUV", "isYUV", "isGray", "isALPHA", "ff_yuv2rgb_get_func_ptr", "isALPHA", "isPlanar", "ff_yuv2rgb_c_init_tables", "ff_audio_convert_set_func", "ff_audio_convert", "ff_audio_data_init", "ff_audio_data_copy", "ff_audio_data_combine", "ff_audio_mix_set_func", "ff_audio_mix", "ff_audio_mix_get_matrix", "ff_audio_mix_set_matrix", "mix_function_init", "ff_audio_mix_alloc", "ff_dither_alloc", "avresample_set_compensation", "ff_audio_resample", "handle_buffered_output", "avresample_open", "avresample_convert", "avresample_get_matrix", "avresample_set_matrix", "avresample_set_channel_mapping", "error", "warning", "info", "debug", "unknown", "true", "false", "auto", "threads", "deterministic", "level", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "frameref", "keyint", "infinite", "scenecut", "bframes", "filter", "deblock", "slices", "cabac", "interlaced", "flat", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "analyse", "partitions", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "weightb", "weightp", "direct", "merange", "mvrange", "subme", "subq", "trellis", "bitrate", "qp_constant", "qpmin", "qpmax", "qpstep", "ratetol", "ipratio", "pbratio", "pass", "stats", "qcomp", "mbtree", "qblur", "cplxblur", "zones", "psnr", "ssim", "annexb", "filler", "stitchable", "opencl", "baseline", "main", "high", "high10", "high422", "high444", "ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo", "film", "animation", "grain", "stillimage", "fastdecode", "zerolatency", "touhou", "fake", "none", "bt709", "undef", "bt470bg", "smpte170m", "smpte240m", "YCgCo", "bt2020nc", "bt2020c", "smpte2085", "bt470m", "linear", "log100", "log316", "bt1361e", "smpte2084", "smpte428", "bt2020", "smpte431", "smpte432", "component", "ntsc", "secam", "show", "crop", "strict", "normal", "tesa", "spatial", "temporal", "left", "Main", "High", "SSE2", "SSE3", "BMI1", "uvDC", "uvAC", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", "underflow", "overflow", "da61701177db765ccd237bb630593f2a", "ARMv6", "NEON", "FastNeonMRC", "init_pass2", "x264_ratecontrol_start", "RIFF", "WEBPVP8L"], "debugstrings": ["Using libwebp for RGB-to-YUV conversion. You may want to consider passing in YUV instead for lossy encoding.\n", "Using libwebp for YUV-to-RGB conversion. You may want to consider passing in RGB instead for lossless encoding.\n", "range <= 16 || !s->msmpeg4_version", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "strictly conform to a older more strict version of the spec or reference software", "Audio sample format conversion failed\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "Disabling automatic format conversion.\n", "Disable any format conversion or resampling in the filter graph.", "The filters '%s' and '%s' do not have a common format and automatic conversion is disabled.\n", "Color conversion not implemented for %s\n", "Impossible to create scale context for the conversion fmt:%s s:%dx%d -> fmt:%s s:%dx%d\n", "error calculating conversion coefficients\n", "Timebase conversion is not exact\n", "stats_add_max was specified but stats_version < 2.\n", "psnr_log_version:2 fields:n", "stats_version", "Set the format version for the stats file.", "Unsupported selective color file version %d, the settings might not be loaded properly\n", "<?xml version='1.0' encoding='ASCII' ?>\n", "Unsupported tag version. (>=%d)\n", "ffconcat version 1.0", "version", "Line %d: invalid version\n", "#version: %d\n", "format_version", "file format version", "configurationVersion:                %u\n", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "minor_version", "premiere_version", "quicktime_version", "Version %d", "sidx version %u", "version =%d, isom =%d\n", "Invalid ID3v2 version requested: %d. Only 3, 4 or 0 (disabled) are allowed.\n", "id3v2_version", "Select ID3v2 version to write. Currently 3 and 4 are supported.", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "Server version %d.%d.%d.%d\n", "RTMP protocol version mismatch\n", "Version of the Flash plugin used to run the SWF player.", "Unknown SMV version found\n", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "unsupported bayer conversion\n", "No accelerated colorspace conversion found from %s to %s.\n", "cannot remap packed format during conversion\n", "[end conversion]\n", "[start conversion]\n", "FFmpeg version 3.3.2", "FFmpeg version 3.3.2", "FFmpeg version 3.3.2", "avutil_version", "FFmpeg version 3.3.2", "FFmpeg version 3.3.2", "GCC: (GNU) 4.8", "GCC: (GNU) 4.9 20140827 (prerelease)"], "localsymbols": [""], "dependencies": ["libdl.so", "libc.so", "libm.so", "libz.so"], "elfname": "libttffmpeg.so"}