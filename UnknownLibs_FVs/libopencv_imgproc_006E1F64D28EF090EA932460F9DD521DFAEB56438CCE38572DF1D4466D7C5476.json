{"globalvars": ["_ZTVN2cv13BaseRowFilterE", "_ZTIN2cv13BaseRowFilterE", "_ZTIN2cv12FilterEngineE", "_ZTIN2cv16GeneralizedHoughE", "icv8x32fSqrTab", "icv8x32fTab_cv", "_ZTIN2cv16BaseColumnFilterE", "_ZTVN2cv12FilterEngineE", "icvSaturate8u_cv", "hist_type", "_ZTSN2cv10BaseFilterE", "_ZTVN2cv16BaseColumnFilterE", "_ZTSN2cv16GeneralizedHoughE", "_ZTIN2cv10BaseFilterE", "_ZTSN2cv12FilterEngineE", "_ZTVN2cv16GeneralizedHoughE", "_ZTVN2cv10BaseFilterE", "_ZTSN2cv16BaseColumnFilterE", "_ZTSN2cv13BaseRowFilterE"], "importedglobals": ["_ZTISt9bad_alloc", "_ZTIN2cv16ParallelLoopBodyE", "_ZTISt9exception", "_ctype_", "_ZTVSt8bad_cast", "_ZTISt8bad_cast", "__sF", "_ZTIN2cv9AlgorithmE", "_ZTVSt13bad_exception", "_ZTIN10__cxxabiv115__forced_unwindE", "_ZTVN2cv11_InputArrayE", "_ZTVSt9bad_alloc", "_ZTVN10__cxxabiv120__si_class_type_infoE", "_ZTVN2cv12_OutputArrayE", "_ZTVN10__cxxabiv117__class_type_infoE", "_ZTVN10__cxxabiv121__vmi_class_type_infoE", "_ZTISt13bad_exception"], "importedfunctions": ["ungetc", "_ZN2cv9ExceptionC1EiRKSsS2_S2_i", "cvSetIdentity", "_ZN2cv12mulSpectrumsERKNS_11_InputArrayES2_RKNS_12_OutputArrayEib", "_ZN2cv15NAryMatIteratorppEv", "__dynamic_cast", "_ZN2cv5errorERKNS_9ExceptionE", "cvScalarToRawData", "_ZN2cv13parallel_for_ERKNS_5RangeERKNS_16ParallelLoopBodyEd", "cvSetData", "_ZNK2cv3Mat7reshapeEii", "strftime", "_ZN2cv3Mat8copySizeERKS0_", "expf", "fseek", "_ZNK2cv13AlgorithmInfo4nameEv", "cvPtrND", "cvGetSeqElem", "_ZSt9terminatev", "strtod", "cvConvertScale", "_ZNSt8bad_castD1Ev", "_ZdlPv", "_ZNSt9bad_allocD1Ev", "_ZNK2cv3Mat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "_ZN2cv4flipERKNS_11_InputArrayERKNS_12_OutputArrayEi", "sqrtf", "_ZNK2cv3Mat11checkVectorEiib", "cvWrite", "_ZN2cv13AlgorithmInfo8addParamERNS_9AlgorithmEPKcRibMS1_FivEMS1_FviERKSs", "lrint", "_ZN2cv3dftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv13AlgorithmInfoC1ERKSsPFPNS_9AlgorithmEvE", "cvStartReadRawData", "cvGEMM", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi", "_ZN2cv9fastAtan2Eff", "_ZN2cv6formatEPKcz", "_ZN2cv11mixChannelsEPKNS_3MatEjPS0_jPKij", "cvEndWriteSeq", "cvReadRawDataSlice", "_ZN2cv5splitERKNS_3MatERSt6vectorIS0_SaIS0_EE", "_ZN2cv5mergeERKSt6vectorINS_3MatESaIS1_EERKNS_12_OutputArrayE", "cvCreateMatHeader", "_ZNK2cv3Mat1tEv", "getc", "cvRead", "_ZN10__cxxabiv111__terminateEPFvvE", "cvInsertNodeIntoTree", "asin", "_ZN2cv5MutexC1Ev", "_ZNK2cv7MatExpr3invEi", "_ZN2cv11_InputArrayC1ERKNS_3MatE", "_ZN2cv12_OutputArrayC1Ev", "_Unwind_GetDataRelBase", "cvTreeToNodeSeq", "_ZN2cv8multiplyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "pow", "fflush", "strcoll", "pthread_mutex_unlock", "sscanf", "_ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "memset", "_ZN6CvTypeD1Ev", "_ZN2cv3MatC1EiPKiiPvPKj", "cvSaveMemStoragePos", "_Unwind_VRS_Set", "_ZN2cv13AlgorithmInfo8addParamERNS_9AlgorithmEPKcRdbMS1_FdvEMS1_FvdERKSs", "_ZN2cv3PtrI12CvMemStorageE10delete_objEv", "cvCreateSparseMat", "cvSum", "_ZN2cv9SparseMatC1EPK11CvSparseMat", "_ZN2cv12_OutputArrayC1ERKNS_3MatE", "_Unwind_GetRegionStart", "wmemset", "cvSeqPopMulti", "cvStartReadSeq", "getwc", "_ZN2cv9AlgorithmC2Ev", "cvChangeSeqBlock", "_ZN2cv10fastMallocEj", "cvSeqElemIdx", "cvAlloc", "_ZN2cv4idftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvGetFileNodeByName", "atan2", "cvInitLineIterator", "cvNextNArraySlice", "cvCreateSet", "cvGetImage", "_ZSt10unexpectedv", "wcrtomb", "_ZN2cv3MatC1EPK7CvMatNDb", "printf", "_ZN2cv3MatC1ERKS0_RKNS_5RangeES5_", "wmemchr", "_ZN2cv3PtrI5CvMatE10delete_objEv", "_ZN2cv15scalarToRawDataERKNS_7Scalar_IdEEPvii", "_ZN2cv5MutexD1Ev", "cvReleaseSparseMat", "cvWriteRawData", "_Unwind_GetTextRelBase", "putc", "_ZN2cv3addERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "memmove", "cvSeqPop", "cvDrawContours", "_Znwj", "_ZN2cv4normERKNS_11_InputArrayES2_iS2_", "fwrite", "cvMakeSeqHeaderForArray", "cvReleaseMemStorage", "_Znaj", "cvSliceLength", "cvSolve", "cvClearSeq", "ftell", "wctob", "_ZN2cvmlERKNS_3MatES2_", "memcpy", "wcscoll", "log", "_ZNSt9exceptionD2Ev", "ungetwc", "fread", "strerror", "cvSeqPush", "cvReleaseData", "cvMemStorageAlloc", "strcmp", "_ZN2cv3Mat5setToERKNS_11_InputArrayES3_", "_ZN2cv4sqrtERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvCvtSeqToArray", "_ZN2cv4meanERKNS_11_InputArrayES2_", "cvCreateMat", "_Unwind_VRS_Get", "cvFlushSeqWriter", "cvSetZero", "memcmp", "wmemcpy", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayE", "_ZN2cv9patchNaNsERKNS_12_OutputArrayEd", "exp", "iswctype", "_ZN2cv22SparseMatConstIteratorC2EPKNS_9SparseMatE", "_ZN2cv9AlgorithmD2Ev", "cvAdd", "_ZN2cv8fastFreeEPv", "cvSetAdd", "_ZN2cv9ExceptionD1Ev", "mbrtowc", "_ZN2cv17getOptimalDFTSizeEi", "_ZN2cv5mergeEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZN2cv6invertERKNS_11_InputArrayERKNS_12_OutputArrayEi", "sin", "wcsxfrm", "cvEndWriteStruct", "wmemmove", "cvFree_", "cvMinMaxLoc", "cvEigenVV", "_ZN2cv13AlgorithmInfoD1Ev", "_ZN2cv3Mat6createEiPKii", "_ZNK2cv9Algorithm5writeERNS_11FileStorageE", "_ZN2cv22SparseMatConstIteratorC1EPKNS_9SparseMatE", "log10", "_ZN2cv5Mutex4lockEv", "cvCartToPolar", "_ZN10__cxxabiv112__unexpectedEPFvvE", "_ZN2cv5solveERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "cvReleaseMat", "cvLog", "_ZN2cv8subtractERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "acos", "abort", "_ZN2cv3MatC1ERKS0_RKNS_5Rect_IiEE", "_ZN2cv7compareERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "_ZNK2cv11RotatedRect6pointsEPNS_6Point_IfEE", "cvCreateMemStorage", "_ZN2cv5splitERKNS_3MatEPS0_", "cvClearMemStorage", "wcslen", "cvGetMat", "_ZN2cv12_OutputArrayC1ERNS_3MatE", "cvGetSeqReaderPos", "_ZN2cv6kmeansERKNS_11_InputArrayEiRKNS_12_OutputArrayENS_12TermCriteriaEiiS5_", "cvReshape", "_ZN2cv3MataSERKNS_7Scalar_IdEE", "cvInitNArrayIterator", "towupper", "cvStartWriteStruct", "sqrt", "wctype", "_Unwind_GetLanguageSpecificData", "setlocale", "cvCreateChildMemStorage", "cvCbrt", "cvCmpS", "cvCopy", "pthread_once", "cos", "cvRestoreMemStoragePos", "cvInitSparseMatIterator", "_ZN2cv9Algorithm4readERKNS_8FileNodeE", "_ZN2cv12countNonZeroERKNS_11_InputArrayE", "cvSeqPushMulti", "_ZN2cv3MatC1EPK5CvMatb", "cvCreateSeqBlock", "cvStartAppendToSeq", "strlen", "_ZN2cv22SparseMatConstIteratorppEv", "_ZNSt13bad_exceptionD1Ev", "_ZN2cv9minMaxLocERKNS_11_InputArrayEPdS3_PNS_6Point_IiEES6_S2_", "_ZN2cv20checkHardwareSupportEi", "_ZNK2cv3Mat7reshapeEiiPKi", "wcsftime", "putwc", "_ZN2cv9SparseMat3ptrEPKibPj", "cvFastArctan", "_ZN2cv5Mutex6unlockEv", "cvCreateSeq", "_ZN2cv3Mat9adjustROIEiiii", "_ZNK2cv3Mat9convertToERKNS_12_OutputArrayEidd", "powf", "_ZN2cv3Mat3eyeEiii", "_ZNK2cv12_OutputArray6createEiiiibi", "_ZdaPv", "cvGetDims", "_ZNK2cv11_InputArray6getMatEi", "pthread_mutex_lock", "cvDiv", "btowc", "cvPow", "_ZN2cv10cvarrToMatEPKvbbi", "_ZN2cv14extractChannelERKNS_11_InputArrayERKNS_12_OutputArrayEi", "cvGetCols", "__gnu_unwind_frame", "_ZN2cv11_InputArrayC1ERKd", "cvStartWriteSeq", "_ZN2cv16ParallelLoopBodyD2Ev", "cvInitMatNDHeader", "strxfrm", "vsprintf", "_ZN2cv7noArrayEv", "_ZN2cv9SparseMat6createEiPKii", "cvMul", "cvSetSeqReaderPos", "_ZN2cv3Mat10deallocateEv", "_ZN2cv10meanStdDevERKNS_11_InputArrayERKNS_12_OutputArrayES5_S2_", "memchr", "towlower", "cvCreateData", "_ZN2cvmiERKNS_3MatES2_", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i", "cvWriteInt"], "exportedfunctions": ["cvConvexHull2", "_ZN2cv16GeneralizedHoughD2Ev", "_ZN2cv16GeneralizedHough11setTemplateERKNS_11_InputArrayEiNS_6Point_IiEE", "_ZN3GMMC2ERN2cv3MatE", "_Z24icvGetRectSubPix_32f_C1RPKfi6CvSizePfiS1_12CvPoint2D32f", "_ZN2cv21pyrMeanShiftFilteringERKNS_11_InputArrayERKNS_12_OutputArrayEddiNS_12TermCriteriaE", "_ZN2cv12FilterEngineC2ERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2D10deleteEdgeEi", "_ZNK2cv8Subdiv2D11checkSubdivEv", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayEi", "cvMatchShapes", "_ZN2cv8Subdiv2D6spliceEii", "cvGetCentralMoment", "_ZN2cv8Subdiv2D6insertENS_6Point_IfEE", "_ZN2cv9thresholdERKNS_11_InputArrayERKNS_12_OutputArrayEddi", "_ZNK2cv8Subdiv2D7edgeOrgEiPNS_6Point_IfEE", "_ZN2cv12FilterEngine4initERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv13BaseRowFilterD1Ev", "_ZN2cv9HuMomentsERKNS_7MomentsEPd", "_ZN2cv8Subdiv2D12initDelaunayENS_5Rect_IiEE", "cvSquareAcc", "cvReadChainPoint", "cvSobel", "cvPreCornerDetect", "cvCalcArrBackProjectPatch", "cvBoxPoints", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_i", "_ZN2cv8filter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEdi", "cvCalcArrBackProject", "cvGetSpatialMoment", "_ZN2cv23getPerspectiveTransformEPKNS_6Point_IfEES3_", "cvReleasePyramid", "_ZN2cv8Subdiv2D6VertexC1Ev", "_ZN2cv14copyMakeBorderERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiiRKNS_7Scalar_IdEE", "cvPyrUp", "cvClearHist", "cvCornerHarris", "cvMakeHistHeaderForArray", "_ZN2cv11matchShapesERKNS_11_InputArrayES2_id", "_ZNK2cv8Subdiv2D8nextEdgeEi", "cvSubstituteContour", "cvEndFindContours", "_ZN2cv12FilterEngine5applyERKNS_3MatERS1_RKNS_5Rect_IiEENS_6Point_IiEEb", "_ZN2cv9LaplacianERKNS_11_InputArrayERKNS_12_OutputArrayEiiddi", "_ZN2cv21getStructuringElementEiNS_5Size_IiEENS_6Point_IiEE", "_ZN2cv12FilterEngineD2Ev", "_ZN2cv8Subdiv2D9swapEdgesEi", "cv2DRotationMatrix", "_ZN2cv21invertAffineTransformERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvConvexityDefects", "_ZN2cv18getAffineTransformEPKNS_6Point_IfEES3_", "cvGetAffineTransform", "cvGoodFeaturesToTrack", "cvCopyHist", "cvReleaseStructuringElement", "_ZN2cv4blurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IiEEi", "_ZN2cv3PtrI11CvHistogramE10delete_objEv", "_ZN2cv3EMDERKNS_11_InputArrayES2_iS2_PfRKNS_12_OutputArrayE", "cvCalcEMD2", "_ZN2cv7fitLineERKNS_11_InputArrayERKNS_12_OutputArrayEiddd", "_ZN3GMM9addSampleEiN2cv3VecIdLi3EEE", "cvPyrDown", "_ZN2cv16BaseColumnFilterD1Ev", "cvGetPerspectiveTransform", "cvIntegral", "cvFilter2D", "_ZN2cv5SobelERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiddi", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEPPKfdb", "_ZN2cv15bilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiddi", "_ZN2cv21getLinearColumnFilterEiiRKNS_11_InputArrayEiidi", "_ZN3GMM11endLearningEv", "_ZNK2cv8Subdiv2D10rotateEdgeEii", "_ZNK2cv8Subdiv2D9getVertexEiPi", "cvHoughCircles", "cvPointPolygonTest", "cvDilate", "_ZN2cv10BaseFilterD1Ev", "_ZN2cv17phaseCorrelateResERKNS_11_InputArrayES2_S2_Pd", "_ZN2cv10BaseFilterC2Ev", "_ZN2cv20createGaussianFilterEiNS_5Size_IiEEddi", "_ZN2cv8Subdiv2D6VertexC2Ev", "_ZNK2cv8Subdiv2D15getTriangleListERSt6vectorINS_3VecIfLi6EEESaIS3_EE", "cvCreateStructuringElementEx", "_ZN2cv13BaseRowFilterC1Ev", "cvConvertMaps", "_ZN2cv16convexityDefectsERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv18accumulateWeightedERKNS_11_InputArrayERKNS_12_OutputArrayEdS2_", "cvCvtColor", "_ZN2cv11sepFilter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_S2_NS_6Point_IiEEdi", "cvWarpPerspective", "_ZN2cv8Subdiv2D6insertERKSt6vectorINS_6Point_IfEESaIS3_EE", "_ZN2cv17accumulateProductERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZN2cv12boundingRectERKNS_11_InputArrayE", "_ZN2cv15preCornerDetectERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv12findContoursERKNS_12_OutputArrayES2_S2_iiNS_6Point_IiEE", "cvReleaseHist", "cvSetHistBinRanges", "_ZNK2cv8Subdiv2D8QuadEdge6isfreeEv", "_ZN2cv19getRotationMatrix2DENS_6Point_IfEEdd", "_Z29icvGetQuadrangleSubPix_8u_C1RPKhi6CvSizePhiS1_PKf", "_ZNK2cv8Subdiv2D7getEdgeEii", "_ZN2cv11createCLAHEEdNS_5Size_IiEE", "_ZN2cv12FilterEngineC2Ev", "_ZN2cv7MomentsC1Ev", "cvWatershed", "cvFindNextContour", "cvPyrMeanShiftFiltering", "cvFloodFill", "_ZN2cv5CannyERKNS_11_InputArrayERKNS_12_OutputArrayEddib", "_ZN2cv12FilterEngine7proceedEPKhiiPhi", "cvStartReadChainPoints", "_ZNK2cv8Subdiv2D6Vertex9isvirtualEv", "_ZN2cv12equalizeHistERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv7MomentsC2Ev", "cvResize", "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv10warpAffineERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv16GeneralizedHough7releaseEv", "cvLogPolar", "_ZN2cv10BaseFilterD0Ev", "cvFitLine", "_Z23icvApproximateChainTC89P7CvChainiP12CvMemStoragei", "_ZN2cv15getDerivKernelsERKNS_12_OutputArrayES2_iiibi", "_ZN2cv12FilterEngineD1Ev", "_ZN2cv17getGaussianKernelEidi", "cvMatchTemplate", "_ZN2cv8Subdiv2D7newEdgeEv", "_ZN2cv9arcLengthERKNS_11_InputArrayEb", "_ZN2cv11contourAreaERKNS_11_InputArrayEb", "_ZN2cv19getMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEE", "_ZN2cv16BaseColumnFilterD2Ev", "cvFindContours", "_ZN2cv25getMorphologyColumnFilterEiiii", "_ZN2cv11HoughLinesPERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "_Z30icvGetQuadrangleSubPix_32f_C1RPKfi6CvSizePfiS1_S0_", "_ZN2cv8Subdiv2D12clearVoronoiEv", "_ZN2cv23initUndistortRectifyMapERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEEiRKNS_12_OutputArrayES7_", "cvThreshHist", "_ZN2cv12drawContoursERKNS_12_OutputArrayERKNS_11_InputArrayEiRKNS_7Scalar_IdEEiiS5_iNS_6Point_IiEE", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvArcLength", "_ZN2cv18preprocess2DKernelERKNS_3MatERSt6vectorINS_6Point_IiEESaIS5_EERS3_IhSaIhEE", "cvCompareHist", "cvAcc", "_ZN2cv22cornerEigenValsAndVecsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv18getAffineTransformERKNS_11_InputArrayES2_", "_ZN2cv15calcBackProjectERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayERKS3_IfSaIfEEd", "_ZN2cv16accumulateSquareERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv8Subdiv2DC2ENS_5Rect_IiEE", "_ZN2cv12cornerSubPixERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEES7_NS_12TermCriteriaE", "_ZNK2cv7Momentscv9CvMomentsEv", "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_9SparseMatERKNS_12_OutputArrayEPPKfdb", "cvMinEnclosingCircle", "_ZN2cv10fitEllipseERKNS_11_InputArrayE", "_ZN2cv8Subdiv2D13setEdgePointsEiii", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_ibd", "_ZN2cv10accumulateERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv8Subdiv2DC2Ev", "_Z26icvGetRectSubPix_8u32f_C1RPKhi6CvSizePfiS1_12CvPoint2D32f", "_ZN2cv12FilterEngine5startENS_5Size_IiEENS_5Rect_IiEEi", "_ZN2cv12GaussianBlurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv7MomentsC2Edddddddddd", "_ZN2cv12HoughCirclesERKNS_11_InputArrayERKNS_12_OutputArrayEiddddii", "cvRemap", "cvApproxPoly", "_ZN2cv13BaseRowFilterD0Ev", "_ZN2cv8Subdiv2D8newPointENS_6Point_IfEEbi", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_i", "cvPointSeqFromMat", "cvContourArea", "_Z23icvGetRectSubPix_8u_C1RPKhi6CvSizePhiS1_12CvPoint2D32f", "_ZN2cv8Subdiv2D11calcVoronoiEv", "_ZN2cv23adaptiveBilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddNS_6Point_IiEEi", "cvThreshold", "_ZN2cv18getLinearRowFilterEiiRKNS_11_InputArrayEii", "_ZN3GMM12initLearningEv", "cvCornerEigenValsAndVecs", "_ZN2cv13BaseRowFilterC2Ev", "_ZN2cv6dilateERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv15warpPerspectiveERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv15isContourConvexERKNS_11_InputArrayE", "_ZNK2cv12FilterEngine19remainingOutputRowsEv", "_ZN2cv12FilterEngineC1Ev", "cvCornerMinEigenVal", "_ZN2cv14phaseCorrelateERKNS_11_InputArrayES2_S2_", "_ZN2cv10medianBlurERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv9crossCorrERKNS_3MatES2_RS0_NS_5Size_IiEEiNS_6Point_IiEEdi", "_Z17icvIntersectLinesddddddddPd", "_ZN2cv8Subdiv2D11deletePointEi", "_ZN2cv13getKernelTypeERKNS_11_InputArrayENS_6Point_IiEE", "_ZN2cv27createSeparableLinearFilterEiiRKNS_11_InputArrayES2_NS_6Point_IiEEdiiRKNS_7Scalar_IdEE", "_ZN2cv9floodFillERKNS_12_OutputArrayENS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZN2cv15createBoxFilterEiiNS_5Size_IiEENS_6Point_IiEEbi", "cvUndistortPoints", "_ZN2cv20initWideAngleProjMapERKNS_11_InputArrayES2_NS_5Size_IiEEiiRKNS_12_OutputArrayES7_id", "_ZN2cv12approxPolyDPERKNS_11_InputArrayERKNS_12_OutputArrayEdb", "_ZN2cv12morphologyExERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv17cornerMinEigenValERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv8Subdiv2D8QuadEdgeC2Ei", "_Z27VResizeLinearVec_32s8u_avx2PPKhPhS0_i", "cvCreatePyramid", "_ZN2cv12findContoursERKNS_12_OutputArrayES2_iiNS_6Point_IiEE", "_Z32icvGetQuadrangleSubPix_8u32f_C1RPKhi6CvSizePfiS1_PKf", "_ZN2cv8Subdiv2DC1Ev", "_ZN2cv8Subdiv2D8QuadEdgeC1Ei", "cvMinAreaRect2", "_ZN2cv8Subdiv2D11findNearestENS_6Point_IfEEPS2_", "cvHoughLines2", "_ZN2cv11compareHistERKNS_11_InputArrayES2_i", "_ZN2cv7pyrDownERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "cvGetQuadrangleSubPix", "_Z26VResizeCubicVec_32s8u_avx2PPKhPhS0_i", "_ZN2cv16BaseColumnFilter5resetEv", "_ZN2cv16GeneralizedHough6detectERKNS_11_InputArrayERKNS_12_OutputArrayES6_i", "_ZN2cv10BaseFilterC1Ev", "_ZN2cv21intersectConvexConvexERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "cvStartFindContours", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_", "_ZN2cv6ScharrERKNS_11_InputArrayERKNS_12_OutputArrayEiiiddi", "cvCalcProbDensity", "_ZN2cv7MomentsC1Edddddddddd", "cvGetRectSubPix", "_ZN2cv14getGaborKernelENS_5Size_IiEEdddddi", "_ZN2cv8Subdiv2DC1ENS_5Rect_IiEE", "cvBoundingRect", "_ZN2cv8cvtColorERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayES5_iii", "_ZN2cv9floodFillERKNS_12_OutputArrayES2_NS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "cvGetHuMoments", "_ZNK3GMM14whichComponentEN2cv3VecIdLi3EEE", "_ZNK2cv8Subdiv2D7edgeDstEiPNS_6Point_IfEE", "cvFindCornerSubPix", "cvDistTransform", "_ZN2cv8Subdiv2D8QuadEdgeC1Ev", "cvCalcBayesianProb", "cvEqualizeHist", "_ZN2cv7MomentsC2ERK9CvMoments", "_ZN2cv8Subdiv2D12connectEdgesEii", "_ZN2cv9undistortERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_", "_Z20icvSepConvSmall3_32fPfiS_i6CvSizePKfS2_S_", "cvCopyMakeBorder", "_ZNK2cv8Subdiv2D9isRightOfENS_6Point_IfEEi", "_ZN2cv17adaptiveThresholdERKNS_11_InputArrayERKNS_12_OutputArrayEdiiid", "_ZN2cv13matchTemplateERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "cvMorphologyEx", "cvLinearPolar", "cvErode", "_ZN2cv16BaseColumnFilterC2Ev", "cvMoments", "_ZN2cv9boxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "cvFitEllipse2", "_ZN2cv7grabCutERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Rect_IiEES5_S5_ii", "_ZNK3GMMclEN2cv3VecIdLi3EEE", "_ZN2cv12FilterEngine5startERKNS_3MatERKNS_5Rect_IiEEbi", "cvInitUndistortRectifyMap", "cvWarpAffine", "_ZN2cv22getMorphologyRowFilterEiiii", "cvInitUndistortMap", "_ZN2cv12buildPyramidERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv23getPerspectiveTransformERKNS_11_InputArrayES2_", "_ZN2cv18getColumnSumFilterEiiiid", "_ZN2cv15getLinearFilterEiiRKNS_11_InputArrayENS_6Point_IiEEdi", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERNS_9SparseMatEiS4_PPKfbb", "_ZN2cv17borderInterpolateEiii", "_ZN2cv9watershedERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv18createLinearFilterEiiRKNS_11_InputArrayENS_6Point_IiEEdiiRKNS_7Scalar_IdEE", "_ZN2cv19createHanningWindowERKNS_12_OutputArrayENS_5Size_IiEEi", "_ZN2cv8Subdiv2D6VertexC2ENS_6Point_IfEEbi", "_ZN2cv16GeneralizedHoughD1Ev", "cvRunningAvg", "_ZN2cv16BaseColumnFilterD0Ev", "_Z18icvIntersectLines3PdS_S_S_S_S_P12CvPoint2D32f", "_ZN2cv11minAreaRectERKNS_11_InputArrayE", "_Z24VResizeLinearVec_32f_avxPPKhPhS0_i", "cvCreateHist", "_ZN3GMM23calcInverseCovAndDetermEi", "_ZNK3GMMclEiN2cv3VecIdLi3EEE", "_ZN2cv11compareHistERKNS_9SparseMatES2_i", "_ZN2cv16GeneralizedHoughD0Ev", "_ZN2cv16GeneralizedHough11setTemplateERKNS_11_InputArrayES3_S3_NS_6Point_IiEE", "_ZN2cv22createMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv17createDerivFilterEiiiiii", "cvGetMinMaxHistValue", "_ZN2cv10BaseFilter5resetEv", "_ZN2cv7MomentsC1ERK9CvMoments", "cvSampleLine", "_Z23VResizeCubicVec_32f_avxPPKhPhS0_i", "_ZN2cv16GeneralizedHough6detectERKNS_11_InputArrayES3_S3_RKNS_12_OutputArrayES6_", "_ZN3GMMC1ERN2cv3MatE", "_ZN2cv6resizeERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv15getRowSumFilterEiiii", "_ZN2cv18minEnclosingCircleERKNS_11_InputArrayERNS_6Point_IfEERf", "cvAdaptiveThreshold", "cvCalcArrHist", "_ZN2cv13BaseRowFilterD2Ev", "_ZN2cv8eigen2x2EPKfPfi", "_ZN2cv16BaseColumnFilterC1Ev", "_ZN2cv5remapERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_iiRKNS_7Scalar_IdEE", "_ZN2cv25getDefaultNewCameraMatrixERKNS_11_InputArrayENS_5Size_IiEEb", "_ZN2cv12FilterEngineD0Ev", "cvMaxRect", "cvCheckContourConvexity", "cvCanny", "_ZN2cv5erodeERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv16pointPolygonTestERKNS_11_InputArrayENS_6Point_IfEEb", "cvApproxChains", "_ZN2cv10HoughLinesERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "_ZN2cv4PSNRERKNS_11_InputArrayES2_", "cvMultiplyAcc", "_ZN2cv8calcHistERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayES7_RKS3_IfSaIfEEb", "_ZNK2cv8Subdiv2D11getEdgeListERSt6vectorINS_3VecIfLi4EEESaIS3_EE", "_ZN2cv5pyrUpERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEiS4_PPKfbb", "_ZN2cv12cornerHarrisERKNS_11_InputArrayERKNS_12_OutputArrayEiidi", "_ZN2cv7momentsERKNS_11_InputArrayEb", "cvGetNormalizedCentralMoment", "_ZN2cv12FilterEngineC1ERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv13getRectSubPixERKNS_11_InputArrayENS_5Size_IiEENS_6Point_IfEERKNS_12_OutputArrayEi", "cvNormalizeHist", "_ZN2cv8Subdiv2D19getVoronoiFacetListERKSt6vectorIiSaIiEERS1_IS1_INS_6Point_IfEESaIS7_EESaIS9_EERS9_", "_ZN2cv11convertMapsERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_ib", "_ZN2cv9HuMomentsERKNS_7MomentsERKNS_12_OutputArrayE", "_ZN2cv8Subdiv2D6VertexC1ENS_6Point_IfEEbi", "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKPi", "cvSmooth", "_ZNK2cv8Subdiv2D7symEdgeEi", "_ZN2cv10BaseFilterD2Ev", "_ZNK2cv8Subdiv2D6Vertex6isfreeEv", "cvUndistort2", "_ZN2cv8Subdiv2D8QuadEdgeC2Ev", "_ZNK2cv12FilterEngine18remainingInputRowsEv", "cvLaplace", "_ZN2cv16GeneralizedHough6createEi", "_ZN2cv8Subdiv2D6locateENS_6Point_IfEERiS3_", "_ZN2cv10convexHullERKNS_11_InputArrayERKNS_12_OutputArrayEbb", "_ZN2cv3PtrI14_IplConvKernelE10delete_objEv"], "allstrings": ["void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "dst.size == src.size && dst.channels() == cn", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/accum.cpp", "mask.empty() || (mask.size == src.size && mask.type() == CV_8U)", "func != 0", "dst.size == src1.size && dst.channels() == cn", "mask.empty() || (mask.size == src1.size && mask.type() == CV_8U)", "src2.size && src1.size && src2.type() == src1.type()", "CV_IS_SEQ_CHAIN_CONTOUR( chain )", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/approx.cpp", "header_size >= (int)sizeof(CvContour)", "Unsupported sequence type", "NULL storage pointer ", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "Input curves are not polygonal. Use cvApproxChains first", "Input curves have uknown type", "New header size must be non-less than sizeof(CvContour)", "Unknown approximation method", "Accuracy must be non-negative", "Invalid approximation method", "vector::_M_fill_insert", "src.depth() == CV_8U", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/canny.cpp", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "CLAHE", "clipLimit", "tilesX", "tilesY", "src.type() == CV_8UC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/clahe.cpp", "hrange == 180 || hrange == 256", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/color.cpp", "coeffs[i] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "coeffs[j] >= 0 && coeffs[j + 1] >= 0 && coeffs[j + 2] >= 0 && coeffs[j] + coeffs[j + 1] + coeffs[j + 2] < 1.5f*LabCbrtTabScale", "whitept[1] == 1.f", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 1.5f", "depth == CV_8U || depth == CV_16U || depth == CV_32F", "scn == 3 || scn == 4", "(scn == 3 || scn == 4) && depth == CV_8U", "(dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U", "scn == 2 && depth == CV_8U", "scn == 1 && (dcn == 3 || dcn == 4)", "scn == 1 && depth == CV_8U", "scn == 3 && (dcn == 3 || dcn == 4)", "(scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F)", "scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F)", "scn == 1 && dcn == 1", "Bayer->Gray demosaicing only supports 8u and 16u types", "scn == 1 && dcn == 3", "Bayer->RGB demosaicing only supports 8u and 16u types", "depth == CV_8U", "dcn == 3 || dcn == 4", "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U", "Unknown/unsupported color conversion code", "dcn == 1", "sz.width % 2 == 0 && sz.height % 2 == 0", "scn == 4 && dcn == 4", "Unsupported image depth", "src.depth() == dst.depth()", "dst.data == dst0.data", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/contours.cpp", "[Start]FindContours support only 8uC1 and 32sC1 images", "NULL double CvSeq pointer", "Nonzero offset is not supported in CV_LINK_RUNS yet", "NULL storage pointer", "Contour header size must be >= sizeof(CvContour)", "Input array must be 8uC1 or 8sC1", "!_seq || _seq->elem_size == sizeof(_Tp)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/core/include/opencv2/core/operations.hpp", "ci.isContinuous()", "0 <= contourIdx && contourIdx < (int)last", "npoints > 0", "hierarchy.total() == ncontours && hierarchy.type() == CV_32SC4", "npoints >= 0 && (depth == CV_32S || depth == CV_32F)", "curve.checkVector(2) >= 0 && (curve.depth() == CV_32F || curve.depth() == CV_32S)", "points.checkVector(2) >= 0 && (points.depth() == CV_32F || points.depth() == CV_32S)", "contour.checkVector(2) >= 0 && (contour.depth() == CV_32F || contour.depth() == CV_32S)", "contour1.checkVector(2) >= 0 && contour2.checkVector(2) >= 0 && (contour1.depth() == CV_32F || contour1.depth() == CV_32S) && contour1.depth() == contour2.depth()", "nelems >= 0 && (depth == CV_32F || depth == CV_32S)", "ptnum > 3", "hull.checkVector(1, CV_32S) > 2", "0 <= idx0 && idx0 < ptnum", "0 <= idx1 && idx1 < ptnum", "0 <= idx2 && idx2 < ptnum", "d.depth >= 0", "l.isContinuous()", "(is2d || is3d) && (points.depth() == CV_32F || points.depth() == CV_32S)", "Internal error", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/convhull.cpp", "Destination must be valid memory storage or matrix", "The hull matrix should be continuous and have a single row or a single column", "The hull matrix size might be not enough to fit the hull", "The hull matrix must have the same type as input or 32sC1 (integers)", "Point sequence can not be empty if the output is matrix", "Input sequence is not a sequence of points", "Floating-point coordinates are not supported here", "Convex hull must represented as a sequence of indices or sequence of pointers", "Convex hull is neither sequence nor matrix", "The matrix should be 1-dimensional and continuous array of int's", "Convex hull is larger than the point sequence", "Input sequence must be polygon (closed 2d curve)", "CV_SEQ_ELTYPE(contour) == CV_32FC2", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/corner.cpp", "src.type() == CV_8UC1 || src.type() == CV_32FC1", "src.size() == dst.size() && dst.type() == CV_32FC1", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "The source image must be 8-bit single-channel (CV_8UC1)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/cornersubpix.cpp", "(icvGetRectSubPix_8u32f_C1R( (uchar*)src->data.ptr, src->step, size, src_buffer, (win_w + 2) * sizeof( src_buffer[0] ), cvSize( win_w + 2, win_h + 2 ), cI )) >= 0", "ncorners >= 0 && corners.depth() == CV_32F", "ktype == CV_32F || ktype == CV_64F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/deriv.cpp", "dx >= 0 && dy >= 0 && dx+dy == 1", "The kernel size must be odd and not larger than 31", "dx >= 0 && dy >= 0 && dx+dy > 0", "ksize > order", "src.size() == dst.size() && src.channels() == dst.channels()", "source image must be 8uC1 and the distance map must be 32fC1 (or 8uC1 in case of simple L1 distance transform)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/distransform.cpp", "the source and the destination images must be of the same size", "Mask size should be 3 or 5 or 0 (presize)", "The input image must have 8uC1 type and the output one must have 32fC1 type", "the output array of labels must be 32sC1", "the array of labels has a different size", "3x3 mask can not be used for \"labeled\" distance transform. Use 5x5 mask", "CV_IS_MASK_ARR( src ) && CV_MAT_TYPE( dst->type ) == CV_8UC1", "CV_ARE_SIZES_EQ( src, dst )", "The arrays must have equal number of columns (which is number of dimensions but 1)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/emd.cpp", "The array must have equal types", "The signatures must be 32fC1", "The flow matrix size does not match to the signatures' sizes", "The flow matrix must be 32fC1", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "The lower boundary can not be calculated if the cost matrix is used", "The cost matrix size does not match to the signatures' sizes", "The cost matrix must be 32fC1", "In case of user-defined distance Distance function is undefined", "Number of dimensions can be 0 only if a user-defined metric is used", "Bad or unsupported metric type", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/featureselect.cpp", "mask.empty() || (mask.type() == CV_8UC1 && mask.size() == image.size())", "_corners && _corner_count", "Unknown/unsupported border type", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/filter.cpp", "columnBorderType != BORDER_WRAP", "bufType == srcType", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "!rowFilter.empty() && !columnFilter.empty()", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows", "wholeSize.width > 0 && wholeSize.height > 0", "src && dst && count > 0", "srcY >= startY", "dstY <= roi.height", "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows", "src.type() == srcType && dst.type() == dstType", "_kernel.channels() == 1", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/precomp.hpp", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "_kernel.type() == DataType<KT>::type", "cn == CV_MAT_CN(dstType) && ddepth >= sdepth", "Unsupported combination of source format (=%d), and destination format (=%d)", "cn == CV_MAT_CN(_dstType)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "this->ksize == 3", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "Unsupported combination of source format (=%d), and buffer format (=%d)", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "Number of channels in input image must be 1 or 3", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/floodfill.cpp", "Connectivity must be 4, 0(=4) or 8", "lo_diff and up_diff must be non-negative", "Seed point is outside of image", "mask must be 2 pixel wider and 2 pixel taller than filled image", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/gabor.cpp", "GeneralizedHough.POSITION_SCALE", "GeneralizedHough.POSITION_SCALE_ROTATION", "vector::reserve", "GeneralizedHough.POSITION", "GeneralizedHough.POSITION_ROTATION", "Minimum distance between the centers of the detected objects.", "minDist", "Maximal size of inner buffers.", "maxSize", "Angle difference in degrees between two points in feature.", "Feature table levels.", "levels", "Maximal difference between angles that treated as equal.", "angleEpsilon", "Minimal rotation angle to detect in degrees.", "minAngle", "Maximal rotation angle to detect in degrees.", "maxAngle", "Angle step in degrees.", "angleStep", "Angle threshold.", "angleThresh", "Minimal scale to detect.", "minScale", "Maximal scale to detect.", "maxScale", "Scale step.", "scaleStep", "Scale threshold.", "scaleThresh", "Inverse ratio of the accumulator resolution to the image resolution.", "Position threshold.", "posThresh", "R-Table levels.", "The accumulator threshold for the template centers at the detection stage. The smaller it is, the more false positions may be detected.", "votesThreshold", "!GHT_Ballard_Pos_info_auto.name().empty()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/generalized_hough.cpp", "!GHT_Ballard_PosScale_info_auto.name().empty()", "!GHT_Ballard_PosRotation_info_auto.name().empty()", "!GHT_Guil_Full_info_auto.name().empty()", "Unsupported method", "votesThreshold > 0", "imageEdges.type() == CV_8UC1", "imageDx.type() == CV_32FC1 && imageDx.size() == imageSize", "imageDy.type() == imageDx.type() && imageDy.size() == imageSize", "dp > 0.0", "levels > 0 && r_table.size() == static_cast<size_t>(levels + 1)", "templEdges.type() == CV_8UC1", "templDx.type() == CV_32FC1 && templDx.size() == templSize", "templDy.type() == templDx.type() && templDy.size() == templSize", "levels > 0", "!hasVotes || voteOutBuf.size() == oldSize", "!hasVotes || voteOutBuf.size() == posOutBuf.size()", "minScale > 0.0 && minScale < maxScale", "scaleStep > 0.0", "minAngle >= 0.0 && minAngle < maxAngle && maxAngle <= 360.0", "angleStep > 0.0 && angleStep < 360.0", "templFeatures.size() == static_cast<size_t>(levels + 1)", "imageFeatures.size() == templFeatures.size()", "angleThresh > 0", "scaleThresh > 0", "posThresh > 0", "templ.type() == CV_8UC1", "cannyThreshold > 0", "image.type() == CV_8UC1", "edges.type() == CV_8UC1", "dx.type() == CV_32FC1 && dx.size == edges.size", "dy.type() == dx.type() && dy.size == edges.size", "NULL vertex array pointer", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/geometry.cpp", "Chains are not supported. Convert them to polygonal representation using cvApproxChains()", "Input contour is neither a valid sequence nor a matrix", "n >= 0 && m >= 0", "temp.ptr<Point2f>() == dst", "p1.depth() == CV_32S || p1.depth() == CV_32F", "p2.depth() == CV_32S || p2.depth() == CV_32F", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/grabcut.cpp", "dtrm > std::numeric_limits<double>::epsilon()", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "mask must have CV_8UC1 type", "mask must have as many rows and cols as img", "mask element value must be equelGC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "mask is empty", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/gcgraph.hpp", "i>=0 && i<(int)vtcs.size()", "w>=0 && revw>=0", "i != j", "j>=0 && j<(int)vtcs.size()", "image mush have CV_8UC3 type", "image is empty", "!bgdSamples.empty() && !fgdSamples.empty()", "opencv-hist", "type", "is_uniform", "have_ranges", "bins", "thresh", "channels != 0 || nimages == dims", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/histogram.cpp", "images[j].channels() == 1", "c >= 0", "images[j].size() == imsize && images[j].depth() == depth", "mask.size() == imsize && mask.channels() == 1", "ranges[i] && ranges[i][0] < ranges[i][1]", "ranges[i][k] < ranges[i][k+1]", "j < nimages", "dims > 0 && histSize", "!mask.data || mask.type() == CV_8UC1", "nimages > 0 && dims > 0", "csz == 0 || csz == dims", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "dims > 0 && hist.data", "dims > 0", "H0.isContinuous()", "nimages > 0", "csz == 0 || csz == dims || (csz == 1 && _1d)", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "Unknown comparison method", "H1.type() == H2.type() && H1.type() == CV_32F", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "H1.size(i) == H2.size(i)", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "Invalid histogram header", "Invalid histogram header[s]", "One of histograms is sparse and other is not", "The histograms have different numbers of dimensions", "The histograms have different sizes", "NULL ranges pointer", "One of <ranges> elements is NULL", "Bin ranges should go in ascenting order", "Number of dimensions is out of range", "Null <sizes> pointer", "Invalid histogram type", "Null histogram header pointer", "Null data pointer", "Only uniform bin ranges can be used here (to avoid memory allocation)", "Destination double pointer is NULL", "Bad histogram pointer", "Null double array pointer", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "NULL histogram array pointer", "Too small number of histograms", "The function supports dense histograms only", "scale must be positive", "Invalid histogram pointer[s]", "All histograms must have 32fC1 type", "Expected CvMatND", "Unknown Histogram type", "'thresh' node is missing", "Bad normalization factor (set it to 1.0 if unsure)", "The patch width and height must be positive", "Resultant image must have 32fC1 type", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "CV_IS_MAT(img) && CV_MAT_TYPE(img->type) == CV_8UC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/hough.cpp", "The source image must be 8-bit, single-channel", "NULL destination", "rho, theta and threshold must be positive", "The destination matrix should be continuous and have a single row or a single column", "The destination matrix data type is inappropriate, see the manual", "Destination is not CvMemStorage* nor CvMat*", "linesMax > 0 && rho > 0 && theta > 0", "CV_IS_MAT(image) && CV_MAT_TYPE(image->type) == CV_8UC1", "Unrecognized method id", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "ssize.area() > 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/imgwarp.cpp", "dsize.area()", "func != 0 && cn <= 4", "Unknown interpolation method", "dsize.area() || (inv_scale_x > 0 && inv_scale_y > 0)", "ksize <= MAX_ESIZE", "cn <= 4 && ssize.area() > 0", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && !m2->data)", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "Unsupported combination of input/output matrices", "src.cols > 0 && src.rows > 0", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "matM.rows == 2 && matM.cols == 3", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "src.type() == dst.type()", "M.size() == M0.size()", "Unknown/unsupported interpolation type", "map1.size().area() > 0", "!map2.data || (map2.size() == map1.size())", "nnfunc != 0", "ifunc != 0", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && !map2.data) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "src.type() == dst.type() && dst.size() == mapx.size()", "dst0.data == dst.data", "M should be >0", "NULL pointer to line parameters", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/linefit.cpp", "The sequence has no points", "Input sequence must consist of 2d points or 3d points", "Input array is not a sequence nor matrix", "Input array must be 1d continuous array of 2d or 3d points", "Both reps and aeps must be non-negative", "User-defined distance is not allowed", "(icvFitLine3D( (CvPoint3D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "(icvFitLine2D( (CvPoint2D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/matchcontours.cpp", "The passed sequence is not a valid contour", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/moments.cpp", "Invalid image type", "hu.isContinuous()", "op == MORPH_ERODE || op == MORPH_DILATE", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/morph.cpp", "Unsupported data type (=%d)", "_kernel.type() == CV_8U", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "unknown morphological operation", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "src.size() == dst.size() && src.type() == dst.type()", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "type == CV_32FC1 || type == CV_64FC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/phasecorr.cpp", "src1.type() == src2.type()", "src1.type() == window.type()", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "type == srcB.type() && srcA.size() == srcB.size()", "src1.type() == CV_32FC1 || src1.type() == CV_64FC1", "src1.size == src2.size", "src1.size == window.size", "borderType != BORDER_CONSTANT", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/pyramids.cpp", "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "!_src.empty()", "borderType == BORDER_DEFAULT", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "The number of extra layers must be non negative", "The buffer is too small to fit the pyramid", "Input sequence must consist of 2d points or pointers to 2d points", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/rotcalipers.cpp", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/samplers.cpp", "(func( src->data.ptr, src_step, src_size, dst->data.ptr, dst_step, dst_size, center )) >= 0", "map matrix is not valid", "Transformation matrix must be 2x3", "The transformation matrix should have 32fC1 or 64fC1 type", "(func( src->data.ptr, src->step, src_size, dst->data.ptr, dst->step, dst_size, m )) >= 0", "Only 8-bit, 3-channel input images are supported", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/segmentation.cpp", "Only 32-bit, 1-channel output images are supported", "The input and output images must have the same size", "The number of pyramid levels is too large or negative", "Only 8-bit, 3-channel images are supported", "The input and output images must have the same type", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/shapedescr.cpp", "Null center or radius pointers", "Only curves with integer coordinates are supported in case of contour slice", "(icvContourSecArea( contour, slice, &area )) >= 0", "Number of points should be >= 5", "The image/matrix format is not supported by the function", "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/smooth.cpp", "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)", "Unsupported combination of sum format (=%d), and destination format (=%d)", "sumCount == ksize-1", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "ksize % 2 == 1", "src.depth() == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "Bilateral filtering is only implemented for 8u and 32f images", "(ksize.width & 1) && (ksize.height & 1)", "Adaptive Bilateral filtering is only implemented for 8u images", "src.type() == CV_8UC1 || src.type() == CV_8UC3", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "The destination image does not have the proper type", "Subdivision is empty", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/subdivision2d.cpp", "edge > 0", "Subdiv2D::locate returned invalid location = %d", "edgeDst(edge, &t) > 0", "edgeOrg( edge, &t ) > 0", "edgeOrg(e) == edgeOrg(o_next)", "edgeOrg(e) == edgeOrg(o_prev)", "edgeDst(e) == edgeDst(d_next)", "edgeDst(e) == edgeDst(d_prev)", "edgeDst(o_next) == edgeOrg(d_prev)", "edgeDst(o_prev) == edgeOrg(d_next)", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/sumpixels.cpp", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/templmatch.cpp", "depth == tdepth || tdepth == CV_32F", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "ccn == 1 || delta == 0", "the input arrays are too big", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "img.rows >= templ.rows && img.cols >= templ.cols", "(img.depth() == CV_8U || img.depth() == CV_32F) && img.type() == templ.type()", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/thresh.cpp", "Unknown threshold type", "blockSize % 2 == 1 && blockSize > 1", "Unknown/unsupported adaptive threshold method", "Unknown/unsupported threshold type", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "src.size == dst.size && src.type() == dst.type()", "m1type == CV_16SC2 || m1type == CV_32FC1 || m1type == CV_32FC2", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/undistort.cpp", "A.size() == Size(3,3) && A.size() == R.size()", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1)", "dst.data != src.data", "mapx0.data == mapx.data && mapy0.data == mapy.data", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8)", "CV_IS_MAT(matR) && matR->rows == 3 && matR->cols == 3", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8)", "Unknown projection type", "avg iters = %g\n", "cameraMatrix0.size() == Size(3,3)", "arr != 0 && contour_header != 0 && block != 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/utils.cpp", "Input array is not a valid matrix", "The matrix can not be converted to point sequence because of inappropriate element type", "The matrix converted to point sequence must be 1-dimensional and continuous", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "src1.depth() == CV_8U", "dst.type() == src.type()", "POSIX", "%s: __pos (which is %zu) > this->size() (which is %zu)", "basic_string::erase", "%.*Lf", "%m/%d/%y", "%H:%M", "%H:%M:%S", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "locale::_S_normalize_category category not found", "locale::_Impl::_M_replace_facet", "-+xX0123456789abcdef0123456789ABCDEF", "-+xX0123456789abcdefABCDEF", "-0123456789", "AKST", "true", "false", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "not enough space for format expansion (Please submit full bug report at http://gcc.gnu.org/bugs.html):\n    ", "basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::_S_construct null not valid", "basic_string::basic_string", "basic_string::substr", "generic", "system", "locale::facet::_S_create_c_locale name not valid", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "space", "print", "cntrl", "upper", "lower", "alpha", "digit", "punct", "xdigit", "alnum", "graph", "basic_ios::clear", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "CvSeq* cvApproxChains(CvSeq*, CvMemStorage*, int, double, int, int)", "CvSeq* icvApproximateChainTC89(CvChain*, int, CvMemStorage*, int)", "CvSeq* cvApproxPoly(const void*, int, CvMemStorage*, int, double, int)", "void cvCanny(const CvArr*, CvArr*, double, double, int)", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "N2cv5CLAHEE", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyE", "virtual void {anonymous}::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "*N12_GLOBAL__N_110CLAHE_ImplE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "cv::Luv2RGB_f::Luv2RGB_f(int, int, const float*, const float*, bool)", "cv::RGB2Luv_f::RGB2Luv_f(int, int, const float*, const float*, bool)", "cv::RGB2Lab_f::RGB2Lab_f(int, int, const float*, const float*, bool)", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "void cvCvtColor(const CvArr*, CvArr*, int)", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f&, float&)", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvConvexityDefect; CvSeq = CvSeq]", "_CvContourScanner* cvStartFindContours(void*, CvMemStorage*, int, int, int, CvPoint)", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "CvSeq* cvFindNextContour(CvContourScanner)", "void cvStartReadChainPoints(CvChain*, CvChainPtReader*)", "CvPoint cvReadChainPoint(CvChainPtReader*)", "int icvFindContoursInInterval(const CvArr*, CvMemStorage*, CvSeq**, int)", "CvSeq* cvEndFindContours(_CvContourScanner**)", "cv::Rect cv::boundingRect(cv::InputArray)", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvSeq*; CvSeq = CvSeq]", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "double cv::arcLength(cv::InputArray, bool)", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "bool cv::isContourConvex(cv::InputArray)", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const Scalar&, int, int, cv::InputArray, int, cv::Point)", "void cvSubstituteContour(CvContourScanner, CvSeq*)", "int cvFindContours(void*, CvMemStorage*, CvSeq**, int, int, int, CvPoint)", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "void icvCalcAndWritePtIndices(CvPoint**, int*, int, int, CvSeq*, CvSeqWriter*)", "CvSeq* cvConvexHull2(const CvArr*, void*, int, int)", "int cvCheckContourConvexity(const CvArr*)", "CvSeq* cvConvexityDefects(const CvArr*, const CvArr*, CvMemStorage*)", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "void cvCornerHarris(const CvArr*, CvArr*, int, int, double)", "void cv::cornerEigenValsVecs(const cv::Mat&, cv::Mat&, int, int, int, double, int)", "void cvCornerEigenValsAndVecs(const void*, void*, int, int)", "void cvPreCornerDetect(const void*, void*, int)", "void cvCornerMinEigenVal(const CvArr*, CvArr*, int, int)", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "@void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "void cvLaplace(const void*, void*, int)", "void cv::getSobelKernels(cv::OutputArray, cv::OutputArray, int, int, int, bool, int)", "void cvSobel(const void*, void*, int, int, int)", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "void icvTrueDistTrans(const CvMat*, CvMat*)", "void icvDistanceATS_L1_8u(const CvMat*, CvMat*)", "void cvDistTransform(const void*, void*, int, int, const float*, void*, int)", "float cvCalcEMD2(const CvArr*, const CvArr*, int, CvDistanceFunction, const CvArr*, CvArr*, float*, void*)", "int icvInitEMD(const float*, int, const float*, int, int, CvDistanceFunction, void*, const float*, int, CvEMDState*, float*, cv::AutoBuffer<char>&)", "void cvGoodFeaturesToTrack(const void*, void*, void*, CvPoint2D32f*, int*, double, double, const void*, int, int, double)", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, bool, double)", "N2cv9RowFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIhiNS_8RowNoVecEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_8RowNoVecEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_8RowNoVecEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = double; VecOp = cv::RowNoVec]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = double; VecOp = cv::RowNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "cv::Ptr<cv::FilterEngine> cv::createLinearFilter(int, int, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = float; VecOp = cv::RowNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "virtual void cv::FilterEngine::apply(const cv::Mat&, cv::Mat&, const Rect&, cv::Point, bool)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "cv::Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "N2cv16BaseColumnFilterE", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = double; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "N2cv13BaseRowFilterE", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = double; VecOp = cv::RowNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = float; VecOp = cv::RowNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "N2cv10BaseFilterE", "void cv::preprocess2DKernel(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<unsigned char>&)", "virtual int cv::FilterEngine::start(cv::Size, cv::Rect, int)", "cv::Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallNoVec]", "int cv::borderInterpolate(int, int, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "virtual int cv::FilterEngine::proceed(const uchar*, int, int, uchar*, int)", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "virtual int cv::FilterEngine::start(const cv::Mat&, const Rect&, bool, int)", "int cv::getKernelType(cv::InputArray, cv::Point)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowNoVec]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "void cvFilter2D(const CvArr*, CvArr*, const CvMat*, CvPoint)", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = double; DT = double; VecOp = cv::RowNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "void cv::FilterEngine::init(const cv::Ptr<cv::BaseFilter>&, const cv::Ptr<cv::BaseRowFilter>&, const cv::Ptr<cv::BaseColumnFilter>&, int, int, int, int, int, const Scalar&)", "cv::Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "cv::Ptr<cv::FilterEngine> cv::createSeparableLinearFilter(int, int, cv::InputArray, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallNoVec]", "N2cv12FilterEngineE", "void cvFloodFill(CvArr*, CvPoint, CvScalar, CvScalar, CvScalar, CvConnectedComp*, int, CvArr*)", "cv::Mat cv::getGaborKernel(cv::Size, double, double, double, double, double, int)", "void {anonymous}::GHT_Guil_Full::calcOrientation()", "*N12_GLOBAL__N_120GHT_Ballard_PosScale6WorkerE", "virtual void {anonymous}::GHT_Ballard_Pos::calcHist()", "*N12_GLOBAL__N_120GHT_Ballard_PosScaleE", "virtual void {anonymous}::GHT_Ballard_PosScale::calcHist()", "N2cv16GeneralizedHoughE", "void {anonymous}::GHT_Guil_Full::calcPosition(double, int, double, int)", "void {anonymous}::GHT_Guil_Full::calcScale(double)", "*N12_GLOBAL__N_123GHT_Ballard_PosRotationE", "void {anonymous}::GHT_Pos::filterMinDist()", "void cv::GeneralizedHough::setTemplate(cv::InputArray, int, cv::Point)", "virtual void {anonymous}::GHT_Ballard_PosScale::findPosInHist()", "void {anonymous}::GHT_Guil_Full::getContourPoints(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<{anonymous}::GHT_Guil_Full::ContourPoint>&)", "static cv::Ptr<cv::GeneralizedHough> cv::GeneralizedHough::create(int)", "*N12_GLOBAL__N_123GHT_Ballard_PosRotation6WorkerE", "void {anonymous}::GHT_Guil_Full::buildFeatureList(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<std::vector<{anonymous}::GHT_Guil_Full::Feature> >&, cv::Point2d)", "*N12_GLOBAL__N_115GHT_Ballard_PosE", "virtual void {anonymous}::GHT_Ballard_Pos::findPosInHist()", "void cv::GeneralizedHough::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, int)", "virtual void {anonymous}::GHT_Ballard_PosRotation::findPosInHist()", "virtual void {anonymous}::GHT_Ballard_Pos::processTempl()", "*N12_GLOBAL__N_113GHT_Guil_FullE", "void {anonymous}::GHT_Pos::convertTo(cv::OutputArray, cv::OutputArray)", "*N12_GLOBAL__N_17GHT_PosE", "virtual void {anonymous}::GHT_Ballard_PosRotation::calcHist()", "double cvPointPolygonTest(const CvArr*, CvPoint2D32f, int)", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "void cvBoxPoints(CvBox2D, CvPoint2D32f*)", "GMM::GMM(cv::Mat&)", "void initGMMs(const cv::Mat&, const cv::Mat&, GMM&, GMM&)", "void checkMask(const cv::Mat&, const cv::Mat&)", "void GMM::calcInverseCovAndDeterm(int)", "double GMM::operator()(int, cv::Vec3d) const", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = double]", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = double]", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = double]", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "28EqualizeHistCalcHist_Invoker", "23EqualizeHistLut_Invoker", "void cvClearHist(CvHistogram*)", "CvHistogram* cvCreateHist(int, int*, CvHistType, float**, int)", "void cvReleaseHist(CvHistogram**)", "void cvThreshHist(CvHistogram*, double)", "double cvCompareHist(const CvHistogram*, const CvHistogram*, int)", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, int, const int*, const float**, bool, bool)", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<float>&, double)", "void* icvReadHist(CvFileStorage*, CvFileNode*)", "void cvSetHistBinRanges(CvHistogram*, float**, int)", "double cv::compareHist(const cv::SparseMat&, const cv::SparseMat&, int)", "void cv::histPrepareImages(const cv::Mat*, int, const int*, const cv::Mat&, int, const int*, const float**, bool, std::vector<unsigned char*>&, std::vector<int>&, cv::Size&, std::vector<double>&)", "void cv::calcHist(const cv::Mat*, int, const int*, const cv::Mat&, cv::SparseMat&, int, const int*, const float**, bool, bool, bool)", "void cvCalcArrHist(CvArr**, CvHistogram*, int, const CvArr*)", "void cvGetMinMaxHistValue(const CvHistogram*, float*, float*, int*, int*)", "void cvCopyHist(const CvHistogram*, CvHistogram**)", "void cvCalcProbDensity(const CvHistogram*, const CvHistogram*, CvHistogram*, double)", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "void cvCalcBayesianProb(CvHistogram**, int, CvHistogram**)", "void cvNormalizeHist(CvHistogram*, double)", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<int>&, const std::vector<float>&, bool)", "void cv::calcBackProject(const cv::Mat*, int, const int*, const cv::SparseMat&, cv::OutputArray, const float**, double, bool)", "void cv::calcBackProject(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, const float**, double, bool)", "void cvCalcArrBackProjectPatch(CvArr**, CvArr*, CvSize, CvHistogram*, int, double)", "void cvCalcArrBackProject(CvArr**, CvArr*, const CvHistogram*)", "CvHistogram* cvMakeHistHeaderForArray(int, int*, CvHistogram*, float*, float**, int)", "void icvHoughLinesProbabilistic(CvMat*, float, float, int, int, int, CvSeq*, int)", "void icvHoughLinesStandard(const CvMat*, float, float, int, CvSeq*, int)", "CvSeq* cvHoughLines2(CvArr*, void*, int, double, double, int, double, double)", "void icvHoughLinesSDiv(const CvMat*, float, float, int, int, int, CvSeq*, int)", "CvSeq* cvHoughCircles(CvArr*, void*, int, double, double, double, double, int, int)", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17warpAffineInvokerE", "N2cv22warpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<float, float, float>; VResize = cv::VResizeLanczos4<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const Scalar&)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapNoVec; AT = short int; cv::Scalar = cv::Scalar_<double>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "const void* cv::initInterTab2D(int, bool)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cvWarpAffine(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cvLinearPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, float>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cvResize(const CvArr*, CvArr*, int)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<double, double>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::Mat cv::getPerspectiveTransform(cv::InputArray, cv::InputArray)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<unsigned char, int, short int>; VResize = cv::VResizeLanczos4<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "CvMat* cvGetPerspectiveTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "CvMat* cvGetAffineTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<double, double, float>; VResize = cv::VResizeLanczos4<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "CvMat* cv2DRotationMatrix(CvPoint2D32f, double, double, CvMat*)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<double, double, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<double, double, float>; VResize = cv::VResizeCubic<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::invertAffineTransform(cv::InputArray, cv::OutputArray)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "cv::Mat cv::getAffineTransform(cv::InputArray, cv::InputArray)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short unsigned int, float, float>; VResize = cv::VResizeLanczos4<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cvLogPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "void cvRemap(const CvArr*, CvArr*, const CvArr*, const CvArr*, int, CvScalar)", "void cvWarpPerspective(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short int, float, float>; VResize = cv::VResizeLanczos4<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "void cv::initInterTab1D(int, float*, int)", "void cvFitLine(const CvArr*, int, double, double, double, float*)", "double cvMatchShapes(const void*, const void*, int, double)", "void cv::HuMoments(const cv::Moments&, cv::OutputArray)", "double cvGetSpatialMoment(CvMoments*, int, int)", "void cvMoments(const void*, CvMoments*, int)", "double cvGetCentralMoment(CvMoments*, int, int)", "void cvGetHuMoments(CvMoments*, CvHuMoments*)", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv16MorphologyRunnerE", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Ptr<cv::FilterEngine> cv::createMorphologyFilter(int, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "void cvDilate(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvMorphologyEx(const void*, void*, void*, IplConvKernel*, int, int)", "IplConvKernel* cvCreateStructuringElementEx(int, int, int, int, int, int*)", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cvErode(const CvArr*, CvArr*, IplConvKernel*, int)", "cv::Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::Mat cv::getStructuringElement(int, cv::Size, cv::Point)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "void cvReleaseStructuringElement(IplConvKernel**)", "cv::Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "void cv::magSpectrums(cv::InputArray, cv::OutputArray)", "cv::Point2d cv::weightedCentroid(cv::InputArray, cv::Point, cv::Size, double*)", "cv::Point2d cv::phaseCorrelateRes(cv::InputArray, cv::InputArray, cv::InputArray, double*)", "void cv::divSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "void cvReleasePyramid(CvMat***, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 6>; VecOp = cv::NoVec<double, double>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 8>; VecOp = cv::NoVec<int, short int>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 6>; VecOp = cv::NoVec<int, short unsigned int>]", "CvMat** cvCreatePyramid(const CvArr*, int, double, const CvSize*, CvArr*, int, int)", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const Size&, int)", "void cvPyrUp(const void*, void*, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 6>; VecOp = cv::NoVec<int, short int>]", "void cvPyrDown(const void*, void*, int)", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::NoVec<float, float>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 8>; VecOp = cv::NoVec<int, short unsigned int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 8>; VecOp = cv::NoVec<double, double>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::NoVec<int, unsigned char>]", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const Size&, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 6>; VecOp = cv::NoVec<float, float>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 6>; VecOp = cv::NoVec<int, unsigned char>]", "CvBox2D cvMinAreaRect2(const CvArr*, CvMemStorage*)", "void cvGetQuadrangleSubPix(const void*, void*, const CvMat*)", "void cvGetRectSubPix(const void*, void*, CvPoint2D32f)", "int cvSampleLine(const void*, CvPoint, CvPoint, void*, int)", "void cvPyrMeanShiftFiltering(const CvArr*, CvArr*, double, double, int, CvTermCriteria)", "void cvWatershed(const CvArr*, CvArr*)", "double cvArcLength(const void*, CvSlice, int)", "double cvContourArea(const void*, CvSlice, int)", "CvRect cvBoundingRect(CvArr*, int)", "CvBox2D cvFitEllipse2(const CvArr*)", "int cvMinEnclosingCircle(const void*, CvPoint2D32f*, float*)", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv34adaptiveBilateralFilter_8u_InvokerE", "cv::Ptr<cv::FilterEngine> cv::createGaussianFilter(int, cv::Size, double, double, int)", "void cvSmooth(const void*, void*, int, int, int, double, double)", "void cv::bilateralFilter_8u(const cv::Mat&, cv::Mat&, int, double, double, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = float; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = unsigned char; uchar = unsigned char]", "void cv::medianBlur(cv::InputArray, cv::OutputArray, int)", "cv::Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = double; uchar = unsigned char]", "cv::adaptiveBilateralFilter_8u_Invoker::adaptiveBilateralFilter_8u_Invoker(cv::Mat&, const cv::Mat&, cv::Size, double, double, cv::Point)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short unsigned int; uchar = unsigned char]", "cv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short int; uchar = unsigned char]", "cv::Mat cv::getGaussianKernel(int, double, int)", "=void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = int; uchar = unsigned char]", "void cv::bilateralFilter_32f(const cv::Mat&, cv::Mat&, int, double, double, int)", "void cv::adaptiveBilateralFilter(cv::InputArray, cv::OutputArray, cv::Size, double, double, cv::Point, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = float; uchar = unsigned char]", "virtual void cv::ColumnSum<int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = double; uchar = unsigned char]", "void cv::adaptiveBilateralFilter_8u(const cv::Mat&, cv::Mat&, cv::Size, double, double, cv::Point, int)", "virtual void cv::ColumnSum<int, short unsigned int>::operator()(const uchar**, uchar*, int, int, int)", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "virtual void cv::ColumnSum<int, short int>::operator()(const uchar**, uchar*, int, int, int)", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f*)", "int cv::Subdiv2D::insert(cv::Point2f)", "int cv::Subdiv2D::locate(cv::Point2f, int&, int&)", "void cv::Subdiv2D::checkSubdiv() const", "void cvIntegral(const CvArr*, CvArr*, CvArr*, CvArr*)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "void cvMatchTemplate(const CvArr*, const CvArr*, CvArr*, int)", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "N2cv15ThresholdRunnerE", "void cvAdaptiveThreshold(const void*, void*, double, int, int, int, double)", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "void cv::thresh_32f(const cv::Mat&, cv::Mat&, float, float, int)", "double cvThreshold(const void*, void*, double, double, int)", "void cv::thresh_16s(const cv::Mat&, cv::Mat&, short int, short int, int)", "void cv::thresh_8u(const cv::Mat&, cv::Mat&, uchar, uchar, int)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "float cv::initWideAngleProjMap(cv::InputArray, cv::InputArray, cv::Size, int, int, cv::OutputArray, cv::OutputArray, int, double)", "void cvUndistortPoints(const CvMat*, CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*)", "void cv::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "cv::Point2f cv::mapPointSpherical(const Point2f&, float, cv::Vec4d*, int)", "void cv::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, int, cv::OutputArray, cv::OutputArray)", "void cvInitUndistortMap(const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvUndistort2(const CvArr*, CvArr*, const CvMat*, const CvMat*, const CvMat*)", "void cvInitUndistortRectifyMap(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvCopyMakeBorder(const CvArr*, CvArr*, CvPoint, int, CvScalar)", "CvSeq* cvPointSeqFromMat(int, const CvArr*, CvContour*, CvSeqBlock*)", "double cv::PSNR(cv::InputArray, cv::InputArray)", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const Scalar&)", "St13basic_istreamIwSt11char_traitsIwEE", "St9time_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St16__numpunct_cacheIcE", "St11__timepunctIcE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb1EE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8messagesIcE", "St8numpunctIcE", "St10moneypunctIcLb0EE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7collateIcE", "St10moneypunctIcLb1EE", "St18__moneypunct_cacheIcLb0EE", "St17__timepunct_cacheIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "NSt6locale5facetE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St15basic_streambufIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St10moneypunctIwLb0EE", "St10moneypunctIwLb1EE", "St18__moneypunct_cacheIwLb0EE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7collateIwE", "St17__timepunct_cacheIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb1EE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St8messagesIwE", "St16__numpunct_cacheIwE", "St21__ctype_abstract_baseIwE", "St11__timepunctIwE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St8numpunctIwE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "*N12_GLOBAL__N_121system_error_categoryE", "St14error_category", "*N12_GLOBAL__N_122generic_error_categoryE", "St7codecvtIwc9mbstate_tE", "St7codecvtIcc9mbstate_tE", "St5ctypeIcE", "St5ctypeIwE", "St9basic_iosIwSt11char_traitsIwEE", "St9basic_iosIcSt11char_traitsIcEE", "St8ios_base", "NSt8ios_base7failureE", "St13runtime_error", "St12out_of_range", "St11logic_error", "St12length_error"], "stringidentifiers": ["vector::_M_fill_insert", "CLAHE", "clipLimit", "tilesX", "tilesY", "vector::reserve", "minDist", "maxSize", "levels", "angleEpsilon", "minAngle", "maxAngle", "angleStep", "angleThresh", "minScale", "maxScale", "scaleStep", "scaleThresh", "posThresh", "votesThreshold", "type", "is_uniform", "have_ranges", "bins", "thresh", "POSIX", "basic_string::erase", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "AKST", "true", "false", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_string::substr", "generic", "system", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "space", "print", "cntrl", "upper", "lower", "alpha", "digit", "punct", "xdigit", "alnum", "graph", "basic_ios::clear", "N2cv5CLAHEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "N2cv9RowFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIhiNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv18SymmRowSmallFilterIffNS_17SymmRowSmallNoVecEEE", "N2cv9RowFilterIhiNS_8RowNoVecEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_8RowNoVecEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_8RowNoVecEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_20SymmColumnSmallNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_20SymmColumnSmallNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv16BaseColumnFilterE", "N2cv13BaseRowFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv16GeneralizedHoughE", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17warpAffineInvokerE", "N2cv22warpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv16MorphologyRunnerE", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv34adaptiveBilateralFilter_8u_InvokerE", "N2cv15ThresholdRunnerE", "St13basic_istreamIwSt11char_traitsIwEE", "St9time_base", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St16__numpunct_cacheIcE", "St11__timepunctIcE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb1EE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8messagesIcE", "St8numpunctIcE", "St10moneypunctIcLb0EE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7collateIcE", "St10moneypunctIcLb1EE", "St18__moneypunct_cacheIcLb0EE", "St17__timepunct_cacheIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "NSt6locale5facetE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St15basic_streambufIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St10moneypunctIwLb0EE", "St10moneypunctIwLb1EE", "St18__moneypunct_cacheIwLb0EE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St7collateIwE", "St17__timepunct_cacheIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb1EE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St8messagesIwE", "St16__numpunct_cacheIwE", "St21__ctype_abstract_baseIwE", "St11__timepunctIwE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St8numpunctIwE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St14error_category", "St7codecvtIwc9mbstate_tE", "St7codecvtIcc9mbstate_tE", "St5ctypeIcE", "St5ctypeIwE", "St9basic_iosIwSt11char_traitsIwEE", "St9basic_iosIcSt11char_traitsIcEE", "St8ios_base", "NSt8ios_base7failureE", "St13runtime_error", "St12out_of_range", "St11logic_error", "St12length_error"], "debugstrings": ["Unknown/unsupported color conversion code", "GCC: (GNU) 4.8", "GCC: (GNU) 4.9 20140827 (prerelease)"], "localsymbols": [""], "dependencies": ["libc.so", "liblog.so", "libm.so", "libdl.so", "libopencv_core.so"], "elfname": "libopencv_imgproc.so"}