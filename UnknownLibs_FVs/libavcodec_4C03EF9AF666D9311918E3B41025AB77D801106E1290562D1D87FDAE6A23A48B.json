{"globalvars": ["avpriv_mjpeg_bits_dc_luminance", "avpriv_ac3_channel_layout_tab", "avpriv_mjpeg_bits_dc_chrominance", "ff_dnxhd_cid_table", "avpriv_mpa_bitrate_tab", "ff_mdct_win_fixed", "avpriv_dca_sample_rates", "avpriv_mjpeg_bits_ac_chrominance", "avpriv_mjpeg_bits_ac_luminance", "avpriv_mjpeg_val_ac_chrominance", "avpriv_mjpeg_val_ac_luminance", "ff_mdct_win_float", "avpriv_mjpeg_val_dc", "avpriv_mpa_freq_tab", "ff_aanscales", "avpriv_mpeg4audio_sample_rates", "ff_raw_pix_fmt_tags"], "importedglobals": ["avpriv_vga16_font", "__sF", "avpriv_cga_font", "__stack_chk_guard"], "importedfunctions": ["av_samples_set_silence", "pthread_mutex_destroy", "av_opt_free", "av_fifo_drain", "av_md5_update", "strdup", "cbrtf", "exp2f", "av_get_cpu_flags", "av_dict_set", "av_vlog", "av_frame_set_color_range", "dlsym", "av_buffer_unref", "av_samples_get_buffer_size", "av_crc", "av_freep", "atoi", "fseeko", "strtok", "deflateEnd", "av_realloc_array", "av_frame_set_pkt_pos", "av_pix_fmt_count_planes", "strlen", "av_frame_copy_props", "ldexp", "strtoul", "av_opt_set_defaults2", "av_opt_set_dict", "av_image_copy_to_buffer", "fread", "fstat", "av_default_item_name", "av_memdup", "av_stristr", "strstr", "av_frame_new_side_data", "av_crc_init", "av_image_fill_pointers", "av_fifo_free", "av_memcpy_backptr", "llrint", "inflateSync", "bsearch", "av_isspace", "av_buffer_alloc", "exp2", "av_bprint_clear", "logf", "round", "av_mul_q", "memchr", "av_gcd", "av_buffer_pool_get", "av_get_media_type_string", "tan", "av_frame_get_pkt_duration", "pthread_create", "ceil", "av_get_planar_sample_fmt", "inflateInit_", "pthread_cond_signal", "atanf", "av_timecode_make_mpeg_tc_string", "av_strdup", "av_parse_color", "__assert2", "av_fifo_size", "inflateEnd", "av_md5_alloc", "av_fifo_generic_read", "av_d2q", "floor", "av_realloc_f", "av_strlcpy", "dlclose", "av_opt_set", "sin", "avpriv_scalarproduct_float_c", "av_buffer_ref", "av_samples_fill_arrays", "av_get_pix_fmt_name", "av_frame_get_color_range", "fputc", "av_frame_set_qp_table", "av_get_picture_type_char", "log10f", "avpriv_frame_get_metadatap", "av_isxdigit", "av_crc_get_table", "pthread_mutex_lock", "strspn", "pthread_cond_broadcast", "llrintf", "av_buffer_make_writable", "av_image_alloc", "strcspn", "avpriv_request_sample", "uncompress", "pthread_cond_destroy", "av_buffer_allocz", "ldexpf", "av_strncasecmp", "av_bprint_chars", "free", "sqrtf", "strpbrk", "av_get_channel_layout_nb_channels", "av_lfg_init", "av_fifo_space", "av_frame_alloc", "av_frame_get_channels", "av_log", "avpriv_float_dsp_init", "av_bprint_finalize", "av_strlcatf", "inflateReset", "strcmp", "av_pix_fmt_get_chroma_sub_sample", "strftime", "av_frame_get_colorspace", "av_image_check_size", "av_log_get_level", "av_image_fill_linesizes", "strchr", "av_frame_set_metadata", "av_strlcat", "raise", "nice", "av_buffer_default_free", "av_frame_unref", "av_reduce", "av_fifo_generic_write", "av_get_padded_bits_per_pixel", "memmove", "av_reallocp_array", "cosf", "av_buffer_pool_uninit", "av_md5_final", "av_mallocz", "fwrite", "av_frame_free", "abort", "vfprintf", "sysconf", "sprintf", "av_strtok", "av_get_bytes_per_sample", "localtime_r", "ftello", "av_frame_set_colorspace", "memalign", "av_get_colorspace_name", "log10", "snprintf", "sinf", "lrint", "cos", "sscanf", "av_sample_fmt_is_planar", "fputs", "avpriv_report_missing_feature", "av_cpu_count", "av_dict_copy", "strncasecmp", "av_dict_free", "pthread_mutex_init", "strcpy", "av_buffer_create", "truncf", "av_bprint_init", "atan", "av_image_fill_arrays", "__stack_chk_fail", "memcmp", "log", "pthread_cond_init", "av_malloc", "avpriv_set_systematic_pal2", "av_frame_ref", "rewind", "av_get_channel_layout_string", "powf", "deflateInit_", "expf", "qsort", "av_image_copy_plane", "pthread_join", "strtol", "av_get_sample_fmt_name", "av_dict_parse_string", "av_frame_is_writable", "sqrt", "lrintf", "av_div_q", "av_pix_fmt_desc_get", "rename", "av_get_channel_layout_channel_index", "memcpy", "av_frame_make_writable", "av_frame_set_pkt_size", "inflate", "strncmp", "av_frame_set_decode_error_flags", "av_frame_move_ref", "av_frame_set_best_effort_timestamp", "av_calloc", "av_fifo_realloc2", "fprintf", "av_buffer_realloc", "av_bprintf", "time", "av_samples_copy", "fclose", "exp", "av_lzo1x_decode", "av_free", "av_dict_get", "dlopen", "av_bprint_get_buffer", "av_buffer_get_ref_count", "pthread_mutex_unlock", "frexp", "strtok_r", "fopen", "deflateBound", "pow", "av_image_copy", "av_reallocp", "av_frame_set_pkt_duration", "av_rescale_q", "deflate", "memset", "atan2f", "av_md5_init", "av_frame_set_channels", "strtod", "av_fifo_alloc", "av_buffer_pool_init", "av_frame_get_buffer", "strcasecmp", "__isfinite", "av_asprintf", "pthread_cond_wait", "av_realloc", "av_get_bits_per_pixel", "av_opt_set_defaults", "av_image_get_buffer_size"], "exportedfunctions": ["avpriv_dv_codec_profile", "av_packet_unref", "av_register_bitstream_filter", "avcodec_alloc_frame", "av_lockmgr_register", "avpriv_bprint_to_extradata", "ff_fft_init_fixed_32", "avcodec_decode_video2", "ff_faanidct_add", "ff_mdct_fixed_calc_neon", "ff_mdct_calc_neon", "av_audio_resample_init", "ff_simple_idct_add_armv5te", "avpriv_lock_avformat", "ff_simple_idct_add_10", "ff_simple_idct_armv5te", "av_packet_copy_props", "avpriv_dirac_parse_sequence_header", "avpriv_mpeg4audio_get_config", "avcodec_chroma_pos_to_enum", "avpriv_flac_parse_streaminfo", "ff_dnxhd_get_cid_table", "av_dct_end", "avcodec_decode_audio4", "ff_simple_idct_put_armv5te", "avpriv_copy_bits", "av_audio_convert", "avpriv_mpegaudio_decode_header", "ff_simple_idct_put_neon", "av_log_missing_feature", "ff_fft_fixed_init_arm", "av_fft_permute", "ff_mdct_end", "av_parser_next", "av_imdct_half", "ff_fdct_ifast248", "avpriv_dnxhd_get_frame_size", "av_packet_split_side_data", "avpicture_alloc", "avcodec_get_frame_defaults", "av_resample_close", "ff_faandct248", "ff_dct_unquantize_h263_neon", "av_bitstream_filter_close", "avcodec_is_open", "ff_mdct_end_fixed", "av_codec_next", "ff_simple_idct_put_8", "av_bitstream_filter_init", "avcodec_enum_to_chroma_pos", "audio_resample", "av_xiphlacing", "av_codec_is_decoder", "avcodec_descriptor_get", "avcodec_encode_audio", "ff_mdct_calc_c_fixed", "avcodec_find_encoder_by_name", "av_log_ask_for_sample", "av_codec_set_lowres", "ff_dct32_float", "avpriv_copy_pce_data", "av_get_exact_bits_per_sample", "av_mdct_end", "ff_simple_idct_neon", "ff_simple_idct_arm", "av_resample_compensate", "avcodec_alloc_context3", "avcodec_align_dimensions2", "av_codec_set_codec_descriptor", "av_audio_convert_free", "ff_mdct_init_fixed", "ff_simple_idct_add_armv6", "av_picture_copy", "avcodec_encode_video2", "avcodec_find_decoder_by_name", "avpriv_dv_frame_profile2", "avpriv_split_xiph_headers", "ff_simple_idct_add_12", "av_init_packet", "ff_dct_init", "av_fast_padded_mallocz", "avpriv_tak_parse_streaminfo", "ff_simple_idct_add_neon", "ff_faanidct_put", "avcodec_string", "av_codec_get_max_lowres", "avpriv_toupper4", "av_codec_is_encoder", "avcodec_default_get_buffer", "ff_fft_lut_init", "av_register_hwaccel", "ff_dct_unquantize_h263_armv5te", "av_fft_init", "avcodec_flush_buffers", "ff_fdct248_islow_10", "ff_simple_idct_put_10", "av_fast_malloc", "av_packet_new_side_data", "ff_fft_init_fixed", "ff_faandct", "av_packet_from_data", "avcodec_decode_subtitle2", "avcodec_configuration", "avcodec_get_frame_class", "av_get_bits_per_sample", "av_hwaccel_next", "avcodec_set_dimensions", "av_picture_crop", "av_parser_parse2", "av_codec_get_pkt_timebase", "av_copy_packet", "avcodec_descriptor_next", "ff_fft_end", "ff_simple_idct48_add", "avpriv_unlock_avformat", "ff_simple_idct_10", "av_packet_get_side_data", "ff_fft_init_arm", "avcodec_fill_audio_frame", "avpriv_ac3_parse_header", "avcodec_encode_subtitle", "av_resample_init", "dsputil_init", "av_codec_get_lowres", "avpriv_adx_decode_header", "avcodec_default_reget_buffer", "ff_mdct_fixed_calcw_neon", "av_rdft_end", "av_dup_packet", "ff_mdct_calcw_c", "avpicture_fill", "av_packet_free_side_data", "av_mdct_calc", "ff_dct_common_init", "ff_simple_idct_put_12", "ff_fft16_vfp", "avcodec_decode_audio3", "avcodec_close", "avpriv_find_start_code", "avpriv_h264_has_num_reorder_frames", "avcodec_find_decoder", "av_get_audio_frame_duration", "ff_mdct_init_fixed_32", "avcodec_get_subtitle_rect_class", "av_fft_calc", "ff_simple_idct248_put", "avcodec_pix_fmt_to_codec_tag", "ff_simple_idct_put_armv6", "avpriv_align_put_bits", "avcodec_get_context_defaults3", "ff_dct_unquantize_h263_intra_neon", "ff_fft_end_fixed", "avcodec_free_frame", "av_dct_init", "ff_simple_idct84_add", "av_fast_realloc", "av_bitstream_filter_filter", "ff_simple_idct_8", "av_get_pcm_codec", "ff_fft_fixed_calc_neon", "avcodec_find_encoder", "avcodec_default_release_buffer", "ff_rdft_init", "avcodec_register", "avpicture_layout", "av_destruct_packet", "ff_simple_idct_add_8", "avcodec_open2", "avpriv_vorbis_parse_frame", "av_register_codec_parser", "ff_rdft_end", "avpriv_vorbis_parse_reset", "avpicture_get_size", "avcodec_version", "ff_jpeg_fdct_islow_8", "av_get_profile_name", "avcodec_get_chroma_sub_sample", "ff_simple_idct_armv6", "avpriv_put_string", "ff_mdct_end_fixed_32", "av_packet_move_ref", "ff_fft_init", "avpriv_aac_parse_header", "ff_dct_unquantize_h263_inter_neon", "ff_dct_end", "avcodec_encode_video", "ff_rdft_init_arm", "avpriv_color_frame", "avsubtitle_free", "av_bitstream_filter_next", "avcodec_align_dimensions", "avpicture_free", "av_free_packet", "av_get_codec_tag_string", "av_audio_convert_alloc", "avcodec_default_get_format", "avcodec_encode_audio2", "avcodec_register_all", "avpriv_dv_frame_profile", "ff_fft_end_fixed_32", "avpriv_flac_is_extradata_valid", "ff_jpeg_fdct_islow_10", "avcodec_find_best_pix_fmt_of_list", "av_packet_ref", "ff_dct32_fixed", "ff_fft_permute_neon", "avcodec_descriptor_get_by_name", "ff_rdft_calc_neon", "av_parser_init", "av_packet_shrink_side_data", "avpriv_vorbis_parse_extradata", "avcodec_license", "av_new_packet", "av_fft_end", "av_dct_calc", "avcodec_get_edge_width", "av_codec_set_seek_preroll", "avcodec_find_best_pix_fmt_of_2", "av_mdct_init", "av_grow_packet", "av_shrink_packet", "ff_mdct_init", "audio_resample_close", "avcodec_default_get_buffer2", "avcodec_get_type", "ff_dsputil_init", "ff_fft_calc_neon", "avpriv_dsputil_init", "av_codec_get_seek_preroll", "av_packet_merge_side_data", "avcodec_get_class", "av_rdft_calc", "avcodec_default_execute", "ff_faanidct", "av_rdft_init", "ff_fdct_ifast", "av_parser_change", "av_codec_set_pkt_timebase", "av_fast_padded_malloc", "av_picture_pad", "avcodec_default_execute2", "avcodec_get_name", "av_imdct_calc", "av_copy_packet_side_data", "ff_mdct_calc_c", "avcodec_copy_context", "avpriv_flac_parse_block_header", "avpicture_deinterlace", "ff_fdct248_islow_8", "av_codec_get_codec_descriptor", "avpriv_mpa_decode_header", "ff_simple_idct_12", "av_resample", "ff_simple_idct44_add", "avpriv_find_pix_fmt", "ff_mdct_calc_c_fixed_32", "avcodec_find_best_pix_fmt2", "avcodec_get_pix_fmt_loss", "av_parser_close"], "allstrings": ["Width 1 not supported.\n", "Packet too small: %d instead of %d\n", "transparency", "012v", "Uncompressed 4:2:2 10-bit", "Assertion %s failed at %s:%d\n", "code >= 0 && code <= 6 && log2w >= 0", "libavcodec/4xm.c", "wordstream overread\n", "bytestream overread\n", "start <= src && src <= end", "mv out of pic\n", "invalid data in read_huffman_tables\n", "ptr overflow in read_huffman_tables\n", "vlc length overflow\n", "avctx->width % 16 == 0 && avctx->height % 16 == 0", "size mismatch %d %d\n", "cfrm", "cfrm in version %d\n", "sizes invalid\n", "lost c frame %d\n", "realloc failure\n", "cframe id mismatch %d %d\n", "pfrm", "ifr2", "packet size too small\n", "buf_size >= 0", "libavcodec/bytestream.h", "unk bit 1\n", "unk bit 2\n", "decode i2 frame failed\n", "ifrm", "size mismatch %d %d %d\n", "Error reading Huffman tables.\n", "prestream <= buf + length", "%d bits left before decode_i_block()\n", "error dc run != 0\n", "0 coeff\n", "run %d oveflow\n", "end mismatch\n", "decode i frame failed\n", "pfr2", "lengths %d %d %d %d\n", "decode p frame failed\n", "snd_", "ignoring snd_ chunk length:%d\n", "ignoring unknown chunk length:%d\n", "extradata wrong or missing\n", "unsupported width/height\n", "4X Movie", "Error: Unsupported color depth: %u.\n", "8bps", "QuickTime 8BPS video", "8SVX does not support more than 2 channels\n", "Invalid codec id %d.\n", "Packet with odd size, ignoring last byte\n", "packet size is too small\n", "unexpected empty packet\n", "8svx_exp", "8SVX exponential", "8svx_fib", "8SVX fibonacci", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "aac_adtstoasc", "Dependent coupling is not supported together with LTP\n", "TNS filter order %d is greater than maximum %d.\n", "Sample rate index in program config element does not match the sample rate index configured by the container.\n", "decode_pce: Input buffer exhausted before END element found\n", "Too many channels\n", "mono with CPE\n", "stereo with SCE\n", "Reserved bit set.\n", "AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found.\n", "Invalid Predictor Reset Group.\n", "Prediction is not allowed in AAC-LC.\n", "LTP in ER AAC LD not yet implemented.\n", "Number of scalefactor bands in group (%d) exceeds limit (%d).\n", "invalid band type\n", "decode_band_types: Input buffer exhausted before END element found\n", "Number of bands (%d) exceeds limit (%d).\n", "If you heard an audible artifact, there may be a bug in the decoder. Clipped intensity stereo position (%d -> %d)", "If you heard an audible artifact, there may be a bug in the decoder. Clipped noise gain (%d -> %d)", "Scalefactor (%d) out of range.\n", "Pulse tool not allowed in eight short sequence.\n", "Pulse data corrupt or invalid.\n", "error in spectral data, ESC overflow\n", "ms_present = 3 is reserved.\n", "More than one AAC RDB per ADTS frame", "invalid default channel configuration (%d)\n", "Error decoding AAC frame header.\n", "invalid sampling rate index %d\n", "channel element %d.%d is not allocated\n", "skip_data_stream_element: Input buffer exhausted before END element found\n", "Not evaluating a further program_config_element as this construct is dubious at best.\n", "TYPE_FIL: Input buffer exhausted before END element found\n", "SBR was found before the first channel element.\n", "SBR signaled to be not-present but was found in the bitstream.\n", "Implicit SBR was found with a first occurrence after the first frame.\n", "FILL:%s\n", "libfaac %d.%d", "Input buffer exhausted before END element found\n", "Unknown ER channel configuration %d", "SBR+", "invalid low delay sampling rate index %d\n", "960/120 MDCT window", "AAC data resilience (flags %x)", "epConfig %d", "Low Delay SBR", "Audio object type %s%d", "Multiple programs", "Multiple layers", "Non-byte-aligned audio-specific config", "audio config changed\n", "initializing latmctx\n", "no decoder config found\n", "incomplete frame\n", "frame length mismatch %d << %d\n", "ADTS header detected, probably as result of configuration misparsing\n", "aac_latm", "AAC LATM (Advanced Audio Coding LATM syntax)", "AAC (Advanced Audio Coding)", "AAC decoder", "dual_mono_mode", "Select the channel to decode for dual mono", "auto", "autoselection", "main", "Select Main/Left channel", "Select Sub/Right channel", "both", "Select both channels", "Unsupported sample rate %d\n", "Unsupported number of channels: %d\n", "Unsupported profile %d\n", "Too many bits per frame requested\n", "Cannot allocate memory.\n", "Lavc55.39.101", "diff >= 0 && diff <= 120", "libavcodec/aacenc.c", "AAC encoder", "stereo_mode", "Stereo coding method", "Selected by the Encoder", "ms_off", "Disable Mid/Side coding", "ms_force", "Force Mid/Side for the whole frame if possible", "aac_coder", "faac", "FAAC-inspired method", "anmr", "ANMR method", "twoloop", "Two loop searching method", "fast", "Constant quantizer", "iid_mode %d is reserved.\n", "icc_mode %d is reserved.\n", "illegal iid\n", "illegal icc\n", "ps extension overflow %d\n", "iid_par invalid\n", "icc_par invalid\n", "Expected to read %d PS bits actually read %d.\n", "3GPP TS 26.403-inspired model", "Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n", "Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n", "Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n", "Non monotone time borders\n", "Unsupported sample rate for SBR: %d\n", "Invalid bs_stop_freq: %d\n", "libavcodec/aacsbr.c", "Invalid bitstream, too many QMF subbands: %d\n", "Invalid n_master: %d\n", "Invalid bitstream, crossover band index beyond array bounds: %d\n", "Invalid num_bands_0: %d\n", "Invalid vDk0[%d]: %d\n", "Invalid vDk1[%d]: %d\n", "Stop frequency border too high: %d\n", "Start frequency border too high: %d\n", "Too many noise floor scale factors: %d\n", "Too many patches: %d\n", "SBR reset failed. Switching SBR to pure upsampling mode.\n", "Invalid bitstream - cannot apply SBR to element type %d\n", "Parametric Stereo signaled to be not-present but was found in the bitstream.\n", "Reserved SBR extensions", "SBR Extension over read.\n", "Expected to read %d SBR bytes actually read %d.\n", "envelope scalefactor overflow in dequant\n", "ERROR : no subband found for frequency %d\n", "kx != f_table{high,low}[0]. Derived frequency tables were not regenerated.\n", "frame too short\n", "Unknown compression type %d\n", "Unknown FourCC: %X\n", "Unsupported bit depth: %d\n", "aasc", "Autodesk RLE", "frame sync error\n", "invalid bitstream id\n", "invalid sample rate\n", "invalid frame size\n", "unsupported frame type : skipping frame\n", "invalid frame type\n", "frame CRC mismatch\n", "unable to determine channel mode\n", "invalid spectral extension range (%d >= %d)\n", "invalid spectral extension copy start bin (%d >= %d)\n", "coupling not allowed in mono or dual-mono\n", "Enhanced coupling", "invalid coupling range (%d >= %d)\n", "new coupling strategy must be present in block 0\n", "new coupling coordinates must be present in block 0\n", "Warning: new rematrixing strategy not present in block 0\n", "bandwidth code = %d > 60\n", "exponent out-of-range\n", "new bit allocation info must be present in block 0\n", "new snr offsets must be present in block 0\n", "new coupling leak info must be present in block 0\n", "delta bit allocation strategy reserved\n", "error in bit allocation\n", "error decoding the audio block\n", "eac3", "ATSC A/52B (AC-3, E-AC-3)", "ATSC A/52A (AC-3)", "E-AC3 decoder", "AC3 decoder", "drc_scale", "percentage of dynamic range compression to apply", "dmix_mode", "Preferred Stereo Downmix Mode", "ltrt_cmixlev", "Lt/Rt Center Mix Level", "ltrt_surmixlev", "Lt/Rt Surround Mix Level", "loro_cmixlev", "Lo/Ro Center Mix Level", "loro_surmixlev", "Lo/Ro Surround Mix Level", "overflow that would need cliping in ff_acelp_interpolate()\n", "Invalid number of channels\n", "invalid number of samples in packet\n", "mismatch in coded sample count\n", "ERROR: step_index[%d] = %i\n", "ERROR: block_predictor[0] = %d\n", "ERROR: block_predictor[1] = %d\n", "ERROR: step_index = %i/%i\n", "unknown XA-ADPCM filter %d", "per-channel sample count mismatch\n", "ERROR: step_index = %i\n", "Missing coeff table\n", "Nothing consumed\n", "adpcm_yamaha", "ADPCM Yamaha", "adpcm_xa", "ADPCM CDROM XA", "adpcm_thp", "ADPCM Nintendo Gamecube THP", "adpcm_swf", "ADPCM Shockwave Flash", "adpcm_sbpro_4", "ADPCM Sound Blaster Pro 4-bit", "adpcm_sbpro_3", "ADPCM Sound Blaster Pro 2.6-bit", "adpcm_sbpro_2", "ADPCM Sound Blaster Pro 2-bit", "adpcm_ms", "ADPCM Microsoft", "adpcm_ima_ws", "ADPCM IMA Westwood", "adpcm_ima_wav", "ADPCM IMA WAV", "adpcm_ima_smjpeg", "ADPCM IMA Loki SDL MJPEG", "adpcm_ima_rad", "ADPCM IMA Radical", "adpcm_ima_qt", "ADPCM IMA QuickTime", "adpcm_ima_oki", "ADPCM IMA Dialogic OKI", "adpcm_ima_iss", "ADPCM IMA Funcom ISS", "adpcm_ima_ea_sead", "ADPCM IMA Electronic Arts SEAD", "adpcm_ima_ea_eacs", "ADPCM IMA Electronic Arts EACS", "adpcm_ima_dk4", "ADPCM IMA Duck DK4", "adpcm_ima_dk3", "ADPCM IMA Duck DK3", "adpcm_ima_apc", "ADPCM IMA CRYO APC", "adpcm_ima_amv", "ADPCM IMA AMV", "adpcm_ea_xas", "ADPCM Electronic Arts XAS", "adpcm_ea_r3", "ADPCM Electronic Arts R3", "adpcm_ea_r2", "ADPCM Electronic Arts R2", "adpcm_ea_r1", "ADPCM Electronic Arts R1", "adpcm_ea_maxis_xa", "ADPCM Electronic Arts Maxis CDROM XA", "adpcm_ea", "ADPCM Electronic Arts", "adpcm_dtk", "ADPCM Nintendo Gamecube DTK", "adpcm_ct", "ADPCM Creative Technology", "adpcm_afc", "ADPCM Nintendo Gamecube AFC", "adpcm_4xm", "ADPCM 4X Movie", "offset is prior data\n", "(c)CRI", "Support for this ADX format", "error parsing ADX header\n", "adpcm_adx", "SEGA CRI ADX ADPCM", "Error allocating slice buffer\n", "Too small frame\n", "Invalid version %d\n", "Invalid header size %d\n", "Frame size should be %d got %d\n", "Picture dimension changed: old: %d x %d, new: %d x %d\n", "Incorrect slice size\n", "Apple Intermediate Codec", "extradata is too small\n", "max samples per frame invalid: %u\n", "set_info failed\n", "Sample depth %d", "Invalid channel count\n", "Unsupported channel count: %d\n", "Error allocating buffers\n", "syntax element unsupported: %d\n", "invalid element channel count\n", "bps is unsupported: %d\n", "invalid samples per frame: %d\n", "sample count mismatch: %u != %d\n", "invalid zero block size of %d %d %d\n", "unknown prediction type: %i\n", "Error : %d bits left\n", "no end tag found. incomplete packet.\n", "alac", "ALAC (Apple Lossless Audio Codec)", "Invalid channel correlation.\n", "Missing required ALS extradata.\n", "Invalid channel reordering.\n", "Reading ALSSpecificConfig failed.\n", "Floating point decoding", "Adaptive RLS-LMS prediction", "Allocating buffer memory failed.\n", "Block length is not evenly divisible by the number of subblocks.\n", "k invalid for rice code.\n", "Predictor order too large.\n", "quant_cof %d is out of range.\n", "Invalid channel pair.\n", "Invalid channel data.\n", "Invalid master channel.\n", "Damaged channel data.\n", "Reading frame data failed. Skipping RA unit.\n", "CRC error.\n", "MPEG-4 Audio Lossless Coding (ALS)", "multi-channel AMR", "Corrupt bitstream\n", "The file is corrupted, pitch_lag = 0 is not allowed\n", "dtx mode", "Note: libopencore_amrnb supports dtx\n", "amrnb", "AMR-NB (Adaptive Multi-Rate NarrowBand)", "Invalid mode %d\n", "Frame too small (%d bytes). Truncated file?\n", "Encountered a bad or corrupted frame\n", "SID mode", "amrwb", "AMR-WB (Adaptive Multi-Rate WideBand)", "Unknown record type", "Padding bytes", "Unknown opcode", "Deluxe Paint Animation", "args overflow (%i)\n", "Unsupported screen mode", "Unsupported rendition parameter", "Unknown escape code", "ansi", "ASCII/ANSI art", "Incorrect extradata\n", "Only mono and stereo is supported\n", "%d bits per coded sample", "Compression Level: %d - Flags: %d\n", "Incorrect compression level %d\n", "Too many bits: %d\n", "s->samples >= 0", "libavcodec/apedec.c", "Packet is too small\n", "packet size is not a multiple of 4. extra bytes at the end will be skipped.\n", "Incorrect offset passed\n", "Invalid sample count: %u.\n", "Error reading frame header\n", "pure silence mono\n", "pure silence stereo\n", "Error decoding frame\n", "Monkey's Audio", "APE decoder", "max_samples", "maximum number of samples decoded per call", "no maximum. decode all samples for each packet at once", "[Script Info]\r\nScriptType: v4.00+\r\n\r\n[V4+ Styles]\r\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding\r\nStyle: Default,%s,%d,&H%x,&H%x,&H%x,&H%x,%d,%d,%d,1,1,0,%d,10,10,10,0,0\r\n\r\n[Events]\r\nFormat: Layer, Start, End, Style, Text\r\n", "Arial", "Dialogue: %ld,", "9:59:59.99,", "%d:%02d:%02d.%02d,", "Default,", "%.*s", "%d:%02d:%02d.%02d", ", \r\n", "&H%8x", "Format", "[%15[0-9A-Za-z+ ]]%c", "Script Info", "V4+ Styles", "V4 Styles", "Events", "\\%1[nN]", "\\%1[bisu]%1[01\\}]%n", "\\c%1[\\}]%n", "\\c&H%X&%1[\\}]%n", "\\%1[1234]c%1[\\}]%n", "\\%1[1234]c&H%X&%1[\\}]%n", "\\alpha%1[\\}]%n", "\\alpha&H%2X&%1[\\}]%n", "\\%1[1234]a%1[\\}]%n", "\\%1[1234]a&H%2X&%1[\\}]%n", "\\fn%1[\\}]%n", "\\fn%127[^\\}]%1[\\}]%n", "\\fs%1[\\}]%n", "\\fs%u%1[\\}]%n", "\\a%1[\\}]%n", "\\a%2u%1[\\}]%n", "\\an%1[\\}]%n", "\\an%1u%1[\\}]%n", "\\r%1[\\}]%n", "\\r%127[^\\}]%1[\\}]%n", "\\move(%d,%d,%d,%d)%1[\\}]%n", "\\move(%d,%d,%d,%d,%d,%d)%1[\\}]%n", "\\pos(%d,%d)%1[\\}]%n", "\\org(%d,%d)%1[\\}]%n", "Default", "ScriptType", "Collisions", "PlayResX", "PlayResY", "Timer", "Style", "Name", "Fontname", "Fontsize", "PrimaryColour", "BackColour", "Bold", "Italic", "Underline", "Alignment", "Dialogue", "Layer", "Start", "Text", "Invalid ASS packet\n", "ASS (Advanced SubStation Alpha) subtitle", "SSA (SubStation Alpha) subtitle", "No extradata provided\n", "illegal qscale 0\n", "coded coeff pattern damaged\n", "asv2", "ASUS V2", "asv1", "ASUS V1", "Unsupported block align.", "Error initializing MDCT\n", "Not enough data to decode!\n", "atrac1", "ATRAC1 (Adaptive TRansform Acoustic Coding)", "Channel configuration error!\n", "[0-1] %d\n", "[8-9] %d\n", "[12-13] %d\n", "Unknown frame/channel/frame_factor configuration %d/%d/%d\n", "Unknown extradata size %d.\n", "Version %d != 4.\n", "Unknown amount of samples per frame %d.\n", "Unknown amount of delay %x != 0x88E.\n", "Normal stereo detected.\n", "Invalid coding mode\n", "Joint stereo detected.\n", "Unknown channel coding mode %x!\n", "JS mono Sound Unit id != 3.\n", "Sound Unit id != 0x28.\n", "Offset of %d", "Frame decoding error!\n", "atrac3", "ATRAC3 (Adaptive TRansform Acoustic Coding 3)", "%d frames left in the queue on closing\n", "Queue input is backward in time\n", "Trying to remove %d samples, but the queue is empty\n", "!afq->frame_count", "libavcodec/audio_frame_queue.c", "afq->remaining_samples == afq->remaining_delay", "Trying to remove %d more samples than there are in the queue\n", "got a buffer with %d bytes when %d were expected\n", "aura2", "Auravision Aura 2", "libavcodec/avpacket.c", "(unsigned)pkt->size <= 2147483647 - 16", "p-pkt->data == pkt->size", "size<=2147483647 && p - pkt->data >= size", "packet too small\n", "lowres is not possible with rawvideo\n", "1:1(", "avrn", "Avid AVI Codec", "AVS (Audio Video Standard) video", "APRGAPRG0001", "Insufficient input data.\n", "avui", "Avid Meridien Uncompressed", "error reading palette\n", "bethsoftvid", "Bethesda VID video", "Palette is too large.\n", "Input resolution larger than actual frame.\n", "Frame larger than buffer.\n", "Brute Force & Ignorance", "Too many motion values\n", "Extradata missing or too short\n", "quant_index %d out of range\n", "DC value went out of bounds: %d\n", "Too many block type values\n", "Too many color values\n", "Too many pattern values\n", "Run value went out of bounds\n", "Run went out of bounds\n", "Incorrect 16x16 block type %d\n", "Copy out of bounds @%d, %d\n", "Unknown block type %d\n", "Reference block is out of bounds\n", "binkvideo", "Bink video", "invalid number of channels: %d\n", "Incomplete packet\n", "binkaudio_dct", "Bink Audio (DCT)", "binkaudio_rdft", "Bink Audio (RDFT)", "not enough extradata\n", "font height %i not supported\n", "iCEDraw text", "xbin", "eXtended BINary text", "bintext", "Binary text", "incorrect codes\n", "vlc->table_size && vlc->table_size == vlc->table_allocated", "libavcodec/bitstream.c", "!vlc->table_size", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code in init_vlc\n", "needed %d had %d\n", "state == vlc", "ret >= 0", "buf size too small (%d)\n", "bad magic number\n", "not enough data (%d < %d), trying to decode anyway\n", "invalid header size %d\n", "declared file size is less than header size (%d < %d)\n", "unsupported BMP file, patch welcome\n", "invalid BMP header\n", "BMP coding %d not supported\n", "Unknown bitfields %0X %0X %0X\n", "Unknown palette for %d-colour BMP\n", "depth %d not supported\n", "unsupported pixel format\n", "not enough data (%d < %d)\n", "Incorrect number of colors - %X for bitdepth %d\n", "palette doesn't fit in packet\n", "BMP decoder is broken\n", "BMP (Windows and OS/2 bitmap)", "expected %d bytes, got %d\n", "Audio data doesn't fit in frame\n", "Command data doesn't fit in frame\n", "Palette data doesn't fit in frame\n", "Screen offset data doesn't fit in frame\n", "len>0", "libavcodec/bmv.c", "Error decoding frame data\n", "Invalid dimension %dx%d\n", "bmv_audio", "Discworld II BMV audio", "bmv_video", "Discworld II BMV video", "Not a BRender PIX file\n", "Invalid chunk type %d\n", "Invalid header length\n", "Format %d is not supported\n", "Invalid palette header length\n", "Palette is not in 0RGB format\n", "Invalid palette data\n", "Invalid image data\n", "brender_pix", "BRender PIX image", "invalid offset %d during C93 decoding\n", "block overlap %d %d %d %d\n", "unexpected type %x at %dx%d\n", "Interplay C93", "Illegal intra prediction mode\n", "get_ue_code: value too larger\n", "position out of block bounds at pic %d MB(%d,%d)\n", "illegal intra chroma pred mode\n", "illegal intra cbp\n", "illegal inter cbp %d\n", "Invalid mb_type %d in B frame\n", "Width/height changing in CAVS", "Dimensions invalid\n", "No sequence header decoded yet\n", "illegal picture type\n", "unexpected start code 0x%02x\n", "weighted prediction not yet supported\n", "cavs", "Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)", "buffer too small for decoder\n", "buffer too big for decoder\n", "buffer too small for loading palette\n", "buffer too small for drawing tile\n", "tile is out of range\n", "buffer too small for scrolling\n", "cdgraphics", "CD Graphics video", "Pixel format 0x%0x", "Encoding %d and bpp %d", "cdxl", "Commodore CDXL video", "chomp", "encoded_buf_size 0", "cinepak_decode failed\n", "cinepak", "Cinepak", "Invalid width or height\n", "Resolution larger than buffer size. Invalid header?\n", "cljr", "Cirrus Logic AccuPak", "Too many VLCs (%d) to be read.\n", "Invalid INFO header offset: 0x%08X is too large.\n", "Skipping INFO chunk.\n", "Could not allocate swapped buffer.\n", "Frame coding type: %d\n", "Blocked YUV", "Could not read code table %d.\n", "Unknown coding type: %d.\n", "cllc", "Canopus Lossless Codec", "comfortnoise", "RFC 3389 comfort noise generator", "mpeg1video", "MPEG-1 video", "mpeg2video", "MPEG-2 video", "mpegvideo_xvmc", "MPEG-1/2 video XvMC (X-Video Motion Compensation)", "h261", "H.261", "h263", "H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "rv10", "RealVideo 1.0", "rv20", "RealVideo 2.0", "mjpeg", "Motion JPEG", "mjpegb", "Apple MJPEG-B", "ljpeg", "Lossless JPEG", "sp5x", "Sunplus JPEG (SP5X)", "jpegls", "JPEG-LS", "mpeg4", "MPEG-4 part 2", "rawvideo", "raw video", "msmpeg4v1", "MPEG-4 part 2 Microsoft variant version 1", "msmpeg4v2", "MPEG-4 part 2 Microsoft variant version 2", "msmpeg4v3", "MPEG-4 part 2 Microsoft variant version 3", "wmv1", "Windows Media Video 7", "wmv2", "Windows Media Video 8", "h263p", "H.263+ / H.263-1998 / H.263 version 2", "h263i", "Intel H.263", "flv1", "FLV / Sorenson Spark / Sorenson H.263 (Flash Video)", "svq1", "Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1", "svq3", "Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3", "dvvideo", "DV (Digital Video)", "huffyuv", "HuffYUV", "cyuv", "Creative YUV (CYUV)", "h264", "H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10", "hevc", "H.265 / HEVC", "indeo3", "Intel Indeo 3", "On2 VP3", "theora", "Theora", "ffv1", "FFmpeg video codec #1", "vcr1", "ATI VCR1", "mdec", "Sony PlayStation MDEC (Motion DECoder)", "id RoQ video", "interplayvideo", "Interplay MVE video", "xan_wc3", "Wing Commander III / Xan", "xan_wc4", "Wing Commander IV / Xxan", "rpza", "QuickTime video (RPZA)", "ws_vqa", "Westwood Studios VQA (Vector Quantized Animation) video", "msrle", "Microsoft RLE", "msvideo1", "Microsoft Video 1", "idcin", "id Quake II CIN video", "QuickTime Graphics (SMC)", "flic", "Autodesk Animator Flic video", "truemotion1", "Duck TrueMotion 1.0", "vmdvideo", "Sierra VMD video", "mszh", "LCL (LossLess Codec Library) MSZH", "zlib", "LCL (LossLess Codec Library) ZLIB", "qtrle", "QuickTime Animation (RLE) video", "snow", "Snow", "tscc", "TechSmith Screen Capture Codec", "ulti", "IBM UltiMotion", "qdraw", "Apple QuickDraw", "vixl", "Miro VideoXL", "qpeg", "Q-team QPEG", "PNG (Portable Network Graphics) image", "PPM (Portable PixelMap) image", "PBM (Portable BitMap) image", "PGM (Portable GrayMap) image", "pgmyuv", "PGMYUV (Portable GrayMap YUV) image", "PAM (Portable AnyMap) image", "ffvhuff", "Huffyuv FFmpeg variant", "rv30", "RealVideo 3.0", "rv40", "RealVideo 4.0", "SMPTE VC-1", "wmv3", "Windows Media Video 9", "loco", "LOCO", "wnv1", "Winnov WNV1", "indeo2", "Intel Indeo 2", "fraps", "Fraps", "truemotion2", "Duck TrueMotion 2.0", "cscd", "CamStudio", "mmvideo", "American Laser Games MM Video", "zmbv", "Zip Motion Blocks Video", "smackvideo", "Smacker video", "NuppelVideo/RTJPEG", "kmvc", "Karl Morton's video codec", "flashsv", "Flash Screen Video v1", "jpeg2000", "JPEG 2000", "vmnc", "VMware Screen Codec / VMware Video", "On2 VP5", "On2 VP6", "vp6f", "On2 VP6 (Flash version)", "targa", "Truevision Targa image", "dsicinvideo", "Delphine Software International CIN video", "tiertexseqvideo", "Tiertex Limited SEQ video", "tiff", "TIFF image", "GIF (Graphics Interchange Format)", "Feeble Files/ScummVM DXA", "dnxhd", "VC3/DNxHD", "Nintendo Gamecube THP video", "SGI image", "sgirle", "SGI RLE 8-bit", "V.Flash PTX image", "Renderware TXD (TeXture Dictionary) image", "vp6a", "On2 VP6 (Flash version, with alpha channel)", "AMV Video", "Beam Software VB", "PC Paintbrush PCX image", "sunrast", "Sun Rasterfile image", "indeo4", "Intel Indeo Video Interactive 4", "indeo5", "Intel Indeo Video Interactive 5", "mimic", "Mimic", "RL2 video", "escape124", "Escape 124", "dirac", "Dirac", "Electronic Arts CMV video", "motionpixels", "Motion Pixels video", "Electronic Arts TGV video", "Electronic Arts TGQ video", "Electronic Arts TQI video", "aura", "Auravision AURA", "v210x", "8088flex TMV", "v210", "DPX (Digital Picture Exchange) image", "Electronic Arts Madcow Video", "frwu", "Forward Uncompressed", "flashsv2", "Flash Screen Video v2", "r210", "Uncompressed RGB 10-bit", "iff_ilbm", "IFF ILBM", "iff_byterun1", "IFF ByteRun1", "kgv1", "Kega Game Video", "Psygnosis YOP Video", "On2 VP8", "Google VP9", "pictor", "Pictor/PC Paint", "a64_multi", "Multicolor charset for Commodore 64", "a64_multi5", "Multicolor charset for Commodore 64, extended with 5th color (colram)", "r10k", "AJA Kona 10-bit RGB Codec", "mvc1", "Silicon Graphics Motion Video Compressor 1", "mvc2", "Silicon Graphics Motion Video Compressor 2", "mxpeg", "Mobotix MxPEG video", "lagarith", "Lagarith lossless", "prores", "Apple ProRes (iCodec Pro)", "Bitmap Brothers JV video", "Chronomaster DFA", "wmv3image", "Windows Media Video 9 Image", "vc1image", "Windows Media Video 9 Image v2", "utvideo", "Ut Video", "vble", "VBLE Lossless Codec", "dxtory", "Dxtory", "v410", "Uncompressed 4:4:4 10-bit", "XWD (X Window Dump) image", "XBM (X BitMap) image", "zerocodec", "ZeroCodec Lossless Video", "mss1", "MS Screen 1", "msa1", "MS ATC Screen", "tscc2", "TechSmith Screen Codec 2", "mts2", "MS Expression Encoder Screen", "mss2", "MS Windows Media Video V9 Screen", "y41p", "Uncompressed YUV 4:1:1 12-bit", "escape130", "Escape 130", "OpenEXR image", "avrp", "Avid 1:1 10-bit RGB Packer", "ayuv", "Uncompressed packed MS 4:4:4:4", "targa_y216", "Pinnacle TARGA CineWave YUV16", "v308", "Uncompressed packed 4:4:4", "v408", "Uncompressed packed QT 4:4:4:4", "yuv4", "Uncompressed packed 4:2:0", "sanm", "LucasArts SMUSH video", "paf_video", "Amazing Studio Packed Animation File Video", "cpia", "CPiA video format", "xface", "X-face image", "Sigmatel Motion Video", "Go2Meeting", "webp", "WebP", "pcm_s16le", "PCM signed 16-bit little-endian", "pcm_s16be", "PCM signed 16-bit big-endian", "pcm_u16le", "PCM unsigned 16-bit little-endian", "pcm_u16be", "PCM unsigned 16-bit big-endian", "pcm_s8", "PCM signed 8-bit", "pcm_u8", "PCM unsigned 8-bit", "pcm_mulaw", "PCM mu-law / G.711 mu-law", "pcm_alaw", "PCM A-law / G.711 A-law", "pcm_s32le", "PCM signed 32-bit little-endian", "pcm_s32be", "PCM signed 32-bit big-endian", "pcm_u32le", "PCM unsigned 32-bit little-endian", "pcm_u32be", "PCM unsigned 32-bit big-endian", "pcm_s24le", "PCM signed 24-bit little-endian", "pcm_s24be", "PCM signed 24-bit big-endian", "pcm_u24le", "PCM unsigned 24-bit little-endian", "pcm_u24be", "PCM unsigned 24-bit big-endian", "pcm_s24daud", "PCM D-Cinema audio signed 24-bit", "pcm_zork", "PCM Zork", "pcm_s16be_planar", "PCM signed 16-bit big-endian planar", "pcm_s16le_planar", "PCM signed 16-bit little-endian planar", "pcm_s24le_planar", "PCM signed 24-bit little-endian planar", "pcm_s32le_planar", "PCM signed 32-bit little-endian planar", "pcm_dvd", "PCM signed 20|24-bit big-endian", "pcm_f32be", "PCM 32-bit floating point big-endian", "pcm_f32le", "PCM 32-bit floating point little-endian", "pcm_f64be", "PCM 64-bit floating point big-endian", "pcm_f64le", "PCM 64-bit floating point little-endian", "pcm_bluray", "PCM signed 16|20|24-bit big-endian for Blu-ray media", "pcm_lxf", "PCM signed 20-bit little-endian planar", "s302m", "SMPTE 302M", "pcm_s8_planar", "PCM signed 8-bit planar", "adpcm_g726", "G.726 ADPCM", "adpcm_g722", "G.722 ADPCM", "adpcm_g726le", "G.726 ADPCM little-endian", "amr_nb", "amr_wb", "ra_144", "RealAudio 1.0 (14.4K)", "ra_288", "RealAudio 2.0 (28.8K)", "roq_dpcm", "DPCM id RoQ", "interplay_dpcm", "DPCM Interplay", "xan_dpcm", "DPCM Xan", "sol_dpcm", "DPCM Sol", "MP2 (MPEG audio layer 2)", "MP3 (MPEG audio layer 3)", "DCA (DTS Coherent Acoustics)", "vorbis", "Vorbis", "dvaudio", "wmav1", "Windows Media Audio 1", "wmav2", "Windows Media Audio 2", "mace3", "MACE (Macintosh Audio Compression/Expansion) 3:1", "mace6", "MACE (Macintosh Audio Compression/Expansion) 6:1", "vmdaudio", "Sierra VMD audio", "flac", "FLAC (Free Lossless Audio Codec)", "mp3adu", "ADU (Application Data Unit) MP3 (MPEG audio layer 3)", "mp3on4", "MP3onMP4", "shorten", "Shorten", "westwood_snd1", "Westwood Audio (SND1)", "qdm2", "QDesign Music Codec 2", "cook", "Cook / Cooker / Gecko (RealAudio G2)", "truespeech", "DSP Group TrueSpeech", "TTA (True Audio)", "smackaudio", "Smacker audio", "qcelp", "QCELP / PureVoice", "wavpack", "WavPack", "dsicinaudio", "Delphine Software International CIN audio", "IMC (Intel Music Coder)", "musepack7", "Musepack SV7", "MLP (Meridian Lossless Packing)", "gsm_ms", "GSM Microsoft variant", "voxware", "Voxware RT29 Metasound", "nellymoser", "Nellymoser Asao", "musepack8", "Musepack SV8", "speex", "Speex", "wmavoice", "Windows Media Audio Voice", "wmapro", "Windows Media Audio 9 Professional", "wmalossless", "Windows Media Audio Lossless", "atrac3p", "ATRAC3+ (Adaptive TRansform Acoustic Coding 3+)", "sipr", "RealAudio SIPR / ACELP.NET", "MP1 (MPEG audio layer 1)", "twinvq", "VQF TwinVQ", "truehd", "TrueHD", "mp4als", "qdmc", "QDesign Music", "celt", "Constrained Energy Lapped Transform (CELT)", "g723_1", "G.723.1", "g729", "G.729", "ralf", "RealAudio Lossless", "IAC (Indeo Audio Coder)", "ilbc", "iLBC (Internet Low Bitrate Codec)", "vima", "LucasArts VIMA audio", "wavesynth", "Wave synthesis pseudo-codec", "sonic", "Sonic", "sonicls", "Sonic lossless", "paf_audio", "Amazing Studio Packed Animation File Audio", "opus", "Opus (Opus Interactive Audio Codec)", "RFC 3389 Comfort Noise", "TAK (Tom's lossless Audio Kompressor)", "metasound", "Voxware MetaSound", "evrc", "EVRC (Enhanced Variable Rate Codec)", "SMV (Selectable Mode Vocoder)", "dvd_subtitle", "DVD subtitles", "dvb_subtitle", "DVB subtitles", "text", "raw UTF-8 text", "xsub", "XSUB", "ASS (Advanced SSA) subtitle", "mov_text", "MOV text", "hdmv_pgs_subtitle", "HDMV Presentation Graphic Stream subtitles", "dvb_teletext", "DVB teletext", "SubRip subtitle with embedded timing", "subrip", "SubRip subtitle", "microdvd", "MicroDVD subtitle", "mpl2", "MPL2 subtitle", "eia_608", "EIA-608 closed captions", "jacosub", "JACOsub subtitle", "PJS (Phoenix Japanimation Society) subtitle", "sami", "SAMI subtitle", "realtext", "RealText subtitle", "subviewer1", "SubViewer v1 subtitle", "subviewer", "SubViewer subtitle", "vplayer", "VPlayer subtitle", "webvtt", "WebVTT subtitle", "SMPTE 336M Key-Length-Value (KLV) metadata", "dvd_nav_packet", "DVD Nav packet", "Deallocating memory.\n", "Memory deallocated.\n", "Necessary extradata missing!\n", "codecdata_length=%d\n", "js_subband_start %d is too large\n", "subpacket[%i].cookversion=%x\n", "Container channels != 1", "MONO\n", "STEREO\n", "Container channels != 2", "JOINT_STEREO\n", "MULTI_CHANNEL\n", "Cook version %d", "different number of samples per channel!\n", "total_subbands > 53", "js_vlc_bits = %d, only >= %d and <= 6 allowed!\n", "subbands > 50", "subbands = 0", "Too many subpackets %d for channels %d\n", "subpackets > %d", "sqvh VLC init\n", "subpacket %i Joint-stereo VLC used.\n", "VLC tables initialized.\n", "MDCT initialized, order = %d.\n", "samples_per_channel = %d", "Invalid quantizer %d at position %d, outside [-63, 63] range\n", "frame subpacket size total > avctx->block_align!\n", "subpacket[%i] size %i js %i %i block_align %i\n", "decouple value too large\n", "subpacket[%i] %i %i\n", "Invalid header!\n", "Unsupported subsample!\n", "Unsupported YUV byte order!\n", "Decimation unsupported!\n", "Frame ended enexpectedly!\n", "Wrong line length %d or line not terminated properly (found 0x%02x)!\n", "Decoded data exceeded linesize!\n", "coded frame too small\n", "error during lzo decompression\n", "error during zlib decompression\n", "unknown compression\n", "CamStudio codec error: invalid depth %i bpp\n", "Can't allocate decompression buffer.\n", "camstudio", "DTS-XBR: decoding XBR extension\n", "DTS-XBR: SYNC ERROR\n", "ERROR: DTS-XBR: block code look-up failed\n", "DTS-XBR: Didn't get subframe DSYNC\n", "DTS-XBR: end of channel set, skipping further than expected (%d bits)\n", "ERROR: block code look-up failed\n", "Stream with high frequencies VQ coding\n", "Didn't get subframe DSYNC\n", "DCA-XXCH: dmix to LFE1 not supported.\n", "Invalid bit allocation index\n", "Joint stereo coding not supported\n", "Invalid channel mode %d\n", "Downmixing %d channels", "LFEScaleIndex larger than 127", "check failed: %i>%i", "Error decoding DTS-XXCH extension\n", "Multiple DTS-HD audio presentations", "Multiple DTS-HD audio assets", "Asset header size mismatch.\n", "DTS core detection mismatch.\n", "DTS extensions detection mismatch (%d, %d)\n", "DTS-ExSS: unknown marker = 0x%08x\n", "Not a valid DCA frame\n", "Invalid LFE value: %d\n", "error decoding block\n", "XCh extension amode %d not supported!\n", "XCh with fewer than 2 base channels", "error decoding XCh extension\n", "X96 extension found at %d bits\n", "FSIZE96 = %d bytes\n", "REVNO = %d\n", "Number of channels %d mismatches layout %d\n", "Non standard configuration %d !\n", "DTS-XXCH: Inconsistant avcodec/dts channel layouts\n", "Number of channels changed in DCA decoder (%d -> %d)\n", "Not implemented!\n", "DTS-ES", "DTS 96/24", "DTS-HD HRA", "DTS-HD MA", "Error decoding %s chunk\n", "Ignoring unknown chunk type %d\n", "av_image_check_size(avctx->width, avctx->height, 0, avctx) >= 0", "libavcodec/dfa.c", "COPY", "TSW1", "BDLT", "WDLT", "TDLT", "DSW1", "BLCK", "DDS1", "Stream is old and may not work\n", "Stream may have unhandled features\n", "Unknown chroma format %d\n", "Bitdepth greater than 8\n", "Dimensions must be a integer multiply of the chroma subsampling\n", "Unsupported picture coding mode %d\n", "Unknown wavelet type %d\n", "Edge emulation not supported!\n", "Invalid quant\n", "wavelet_idx is too big\n", "invalid number of DWT decompositions\n", "codeblock width invalid\n", "codeblock height invalid\n", "unknown codeblock mode\n", "Invalid lowdelay.bytes.den\n", "Low Delay: Has Custom Quantization Matrix!\n", "Mandatory custom low delay matrix missing for depth %d\n", "Schroedinger %d.%d.%d", "Dropping frame without sequence header\n", "framelist full\n", "num_refs of 3\n", "PICTURE_NUM: %d\n", "Reference not found\n", "Frame to retire not found\n", "Block prediction index too high\n", "Block separation too small\n", "Block separation greater than size\n", "Unsupported large block size\n", "MV precision finer than eighth-pel\n", "Unknown picture prediction mode\n", "Reference frame overflow\n", "Data unit with size %d is larger than input buffer, discarding\n", "Error in dirac_decode_data_unit\n", "Delay frame overflow\n", "BBC Dirac VC-2", "yuv422p10", "yuv422p", "Frame size: %dx%d%c; bitrate: %dMbps; pixel format: %s; framerate: %d/%d\n", "ac tex damaged %d, %d\n", "error in header\n", "interlaced %d, cur field %d\n", "unsupported cid %d\n", "bit depth mismatches %d %d\n", "incorrect frame size\n", "mb height too big: %d\n", "invalid mb scan index\n", "frame size changed: %dx%d -> %dx%d\n", "packet is too small\n", "channels have differing number of samples\n", "invalid number of channels\n", "Unknown SOL subcodec\n", "Packet too small for DPX header\n", "SDPX", "DPX marker not found\n", "Invalid data start offset\n", "Packing %d", "Encoding %d", "Descriptor %d", "Packing to 32bit required\n", "Packing to 16bit required\n", "Depth %d", "Unsupported format\n", "Overread buffer. Invalid header?\n", "Can't allocate bitmap buffers.\n", "RLE overread\n", "Internal error, IDCT permutation not set\n", "internal error in cmp function selection\n", "dump_extra", "SL25", "dvsd", "CDVC", "Frame size: %dx%d; pixel format: %s, framerate: %d/%d\n", "Junk in packet\n", "Invalid extradata, subtitle streams may be combined!\n", "Invalid object location! %d-%d %d-%d %02x\n", "DVBSub error: line overflow\n", "4-bit pixel string in %d-bit region!\n", "8-bit pixel string in %d-bit region!\n", "Unknown/unsupported pixel block 0x%x\n", "region depth %d is invalid\n", "Invalid clut depth 0x%x!\n", "Field data size too large\n", "Unknown object coding %d\n", "dvbsub", "could not find dv frame profile\n", "AC EOB marker is absent pos=%d\n", "palette:", "size:", "%dx%d", " 0x%06x", "Attempt to reconstruct too large SPU packets aborted.\n", "Invalid command offset\n", "dvdsub", "dvdsubdec", "palette", "set the global palette", "Uncompress failed!\n", "compr:%2d, dsize:%d\n", "Missing reference frame.\n", "Missing reference frame\n", "MV %d %d out of bounds\n", "Unknown opcode %d\n", "Unknown/unsupported compression type %d\n", "no slice data\n", "%d slices for %dx%d", "slice dimensions %dx%d", "invalid slice size %d (only %d bytes left)\n", "invalid slice size %d\n", "Slice sizes mismatch: got %d instead of %d\n", "Frame header %X", "GAQ gain group code out-of-range\n", "Dependent substream decoding", "Reserved frame type\n", "Additional substreams", "Reduced sampling rate", "Block start info", "truncated header\n", "eacmv", "Input buffer too small\n", "Dimensions too small\n", "ac-tex damaged at %d %d\n", "eamad", "unsupported mb mode %i\n", "eatgq", "truncated intra frame\n", "inter frame without corresponding intra frame\n", "Invalid value for motion vector bits: %d\n", "MV %d %d out of picture\n", "truncated inter frame\n", "eatgv", "eatqi", "Electronic Arts TQI Video", "s->quarter_sample", "libavcodec/error_resilience.c", "guess_dc() is out of memory\n", "internal error, slice end before start\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "Skipping frame\n", "Escape sizes: %i, %i, %i\n", "Insufficient frame data\n", "Error decoding skip value\n", "Dimensions should be a multiple of two.\n", "Could not allocate buffer.\n", "Claimed bitrate and buffer size mismatch.\n", "Buffer is too small for the claimed bitrate.\n", "Bitrate byte is missing, guessing the bitrate from packet size.\n", "Frame #%d, %s\n", "bitrate cannot be determined.", "frame erasure\n", "0x%04X", "TIFF tag type (%u)", "Incomplete header\n", "Unknown data type for header variable %s\n", "Too short header to parse\n", "Wrong magic number %d\n", "Version %d", "Tile support", "channels", "chlist", "Unsupported channel %.256s\n", "Unknown pixel type\n", "Subsampling %dx%d", "RGB channels not of the same depth\n", "Missing red channel\n", "Missing green channel\n", "Missing blue channel\n", "dataWindow", "box2i", "displayWindow", "lineOrder", "pixelAspectRatio", "float", "line order : %d\n", "Unknown line order\n", "compression", "Found more than one compression attribute\n", "Missing compression attribute\n", "Incomplete frame\n", "32-bit unsigned int", "Missing channel list\n", "Compression %d", "Wrong sizing or missing size information\n", "Incorrect mode VLC\n", "Incorrect code\n", "Run overrun\n", "Special modes support", "f->slice_count > 0", "libavcodec/ffv1.c", "Invalid version in global header\n", "slice count invalid\n", "read_quant_table error\n", "CRC mismatch %X!\n", "global: ver:%d.%d, coder:%d, colorspace: %d bpr:%d chroma:%d(%d:%d), alpha:%d slices:%dx%d qtabs:%d ec:%d intra:%d\n", "!fdst->plane[0].state", "libavcodec/ffv1dec.c", "!fdst->sample_buffer", "f->version > 1", "f->version > 2", "quant_table_index out of range\n", "bytestream end mismatching by %d\n", "invalid version %d in ver01 header\n", "Invalid change of global parameters\n", "chroma subsampling not supported in this colorspace\n", "colorspace not supported\n", "format not supported\n", "slice count %d is invalid\n", "context_count >= 0", "Cannot decode non-keyframe without valid keyframe\n", "ver:%d keyframe:%d coder:%d ec:%d slices:%d bps:%d\n", "Slice pointer chain broken\n", "CRC mismatch %X!", "at %f seconds\n", "at %lld\n", "This implementation is limited to %d channels.\n", "Invalid intervals definitions.\n", "invalid sync code\n", "invalid channel mode: %d\n", "invalid sample size code (%d)\n", "broken stream, invalid padding\n", "sample/frame number invalid; utf8 fscked\n", "reserved blocksize code: 0\n", "illegal sample rate code %d\n", "header crc mismatch\n", "extradata NULL or too small.\n", "extradata contains %d bytes too many.\n", "extradata too small.\n", "invalid max blocksize: %d\n", "sample rate change detected in adjacent frames\n", "bits per sample change detected in adjacent frames\n", "blocking strategy change detected in adjacent frames\n", "number of channels change detected in adjacent frames\n", "sample/frame number mismatch in adjacent frames\n", "crc check failed from offset %i (frame %lld) to %i (frame %lld)\n", "couldn't reallocate wrap buffer of size %d", "couldn't allocate FLACHeaderMarker\n", "dropping low score %i frame header from offset %i to %i\n", "couldn't reallocate buffer of size %td\n", "find_new_headers couldn't allocate FLAC header\n", "Junk frame till offset %i\n", "s->max_blocksize", "libavcodec/flacdec.c", "illegal residual coding method %d\n", "invalid predictor order: %i > %i\n", "skiping flac header packet 1\n", "skiping vorbis comment\n", "invalid frame header\n", "bps not found in STREAMINFO or frame header\n", "switching bps mid-stream is not supported\n", "blocksize %d > %d\n", "sample rate not found in STREAMINFO or frame header\n", "  Max Blocksize: %d\n", "  Max Framesize: %d\n", "  Samplerate: %d\n", "  Channels: %d\n", "  Bits: %d\n", "invalid subframe padding\n", "Invalid number of wasted bits > available bits (%d) - left=%d\n", "Decorrelated bit depth > 32", "illegal pred order %d\n", "invalid coeff precision\n", "qlevel %d not supported, maybe buggy stream\n", "invalid coding type\n", "decode_frame() failed\n", "CRC error at PTS %lld\n", "overread: %d\n", "underread: %d orig size: %d\n", "invalid header\n", "1.2.3", "Inflate init error: %d\n", "iframe", "Custom palette", "Can't determine deflate buffer size.\n", "Can't allocate deflate buffer.\n", "Frame width or height differs from first frame!\n", "fh = %d, fv %d  vs  ch = %d, cv = %d\n", "%dx%d invalid color depth %d\n", "inter frame without keyframe\n", "Block parameters invalid\n", "%dx%d diff start %d height %d\n", "%dx%d zlibprime_prev\n", "%dx%d zlibprime_curr %dx%d\n", "zlibprime_curr", "no data available for zlib priming\n", "Inflate reset error: %d\n", "Zlib resync occurred\n", "error in decompression of block %dx%d\n", "Cannot allocate image data\n", "buffer not fully consumed (%d != %d)\n", "Invalid chunk_size = %u > frame_size = %u\n", "Undefined opcode (%x) in DELTA_FLI\n", "Invalid pixel_ptr = %d > pixel_limit = %d\n", "Invalid byte run value.\n", "pixel_countdown < 0 (%d) at line %d\n", "In chunk FLI_COPY : source data (%d bytes) has incorrect size, skipping chunk\n", "Unrecognized chunk type: %d\n", "Processed FLI chunk where chunk size = %d and final chunk ptr = %d\n", "Unexpected FLI_LC chunk in non-palettized FLC\n", "pixel_countdown < 0 (%d) (linea%d)\n", "pixel_countdown < 0 (%d)\n", "In chunk FLI_COPY : source data (%d bytes) bigger than image, skipping chunk\n", "24Bpp FLC Unsupported due to lack of test files.\n", "Unknown FLC format, my science cannot explain how this happened.\n", "Unexpected extradata size %d\n", "24Bpp FLC/FLX", "Unknown FLC/FLX depth of %d Bpp is unsupported.\n", "Bad picture start code\n", "Bad picture format\n", "%c esc_type:%d, qp:%d num:%d\n", "!avctx->internal->frame_thread_encoder", "libavcodec/frame_thread_encoder.c", "threads", "!thread_avctx->internal->frame_thread_encoder", "ff_frame_thread_encoder_init failed\n", "Packet is too short\n", "This file is encoded with Fraps version %d. This codec can only decode versions <= 5.\n", "Invalid frame length %d (should be %d)\n", "Fraps: error in data stream\n", "Fraps: plane %i offset is out of bounds\n", "Invalid frame size %dx%d\n", "Error decoding plane %i\n", "frwu needs even width\n", "Packet is too small.\n", "incorrect marker\n", "Field size %i is too small (required %i)\n", "Packet is too small, need %i, have %i\n", "frwu Decoder", "change_field_order", "Change field order", "Cannot initialise VLCs\n", "Frame should have at least 12 bytes, got %d instead\n", "Wrong magic %08X\n", "G2M2 and G2M3 are not yet supported\n", "Invalid chunk size %d type %02X\n", "Invalid frame info size %d\n", "Invalid frame dimensions %dx%d\n", "Unknown compression method %d\n", "Invalid tile dimensions %dx%d\n", "No frame header - skipping tile\n", "Invalid tile data size %d\n", "Invalid tile pos %d,%d (in %dx%d grid)\n", "ePIC j-b compression is not implemented yet\n", "Error decoding tile %d,%d\n", "Invalid cursor pos size %d\n", "Invalid cursor data size %d\n", "Invalid cursor dimensions %dx%d\n", "Invalid hotspot position %d,%d\n", "Invalid cursor data size %d/%d\n", "Cursor format %d", "Cannot allocate cursor buffer\n", "Skipping chunk type %02X\n", "g722", "g722 decoder", "bits_per_codeword", "Bits per G722 codeword", "Expected %d bytes, got %d - skipping packet\n", "G.723.1 decoder", "postfilter", "postfilter on/off", "Decoding more than one channel", "g726le", "Invalid number of bits %d\n", "Frame invalidly split, missing parser?\n", "g726", "Only mono sound is supported (requested channels: %d).\n", "Packet type: %s\n", "G.729 @ 8kbit/s", "G.729D @ 6.4kbit/s", "Packet size %d is unknown.\n", "pitch_delay_int %d is too large\n", "cannot decode frame without keyframe\n", "code=%02x '%c'\n", "picture doesn't have either global or local palette.\n", "LZW init failed\n", "gif decoder", "trans_color", "color value (ARGB) that is used instead of transparent color", "Invalid codec_id\n", "Unsupported audio mode\n", "Missing GSM magic!\n", "header damaged\n", "qscale has forbidden 0 value\n", "illegal mba at %d %d\n", "Invalid mtype index %d\n", "h->mtype < (sizeof(ff_h261_mtype_map) / sizeof((ff_h261_mtype_map)[0]))", "libavcodec/h261dec.c", "illegal dc %d at %d %d\n", "illegal ac vlc code at %dx%d\n", "run overflow at %dx%d\n", "s->current_picture.f.pict_type == s->current_picture_ptr->f.pict_type", "s->current_picture.f.pict_type == s->pict_type", "Error at MB: %d\n", "l263", "Slice mismatch at MB: %d\n", "discarding %d junk bits at end, next would be %X\n", "overreading %d bits\n", "slice end not reached but screenspace end (%d left %06X, score= %d)\n", "this codec does not support truncated bitstreams\n", "Discarding excessive bitstream in packed xvid\n", "Reverting picture dimensions change due to header decoding failure\n", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "UMP4", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "GEOV", "GEOX", "DIVX", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "libavcodec/h264.c", "no picture %s\n", "!dst->f.buf[0]", "src->f.buf[0]", "Attempt to start a frame outside SETUP state\n", "no frame buffer available\n", "!pic->f.data[0]", "!pic->hwaccel_picture_private", "top block unavailable for requested intra4x4 mode %d at %d %d\n", "left block unavailable for requested intra4x4 mode %d at %d %d\n", "out of range intra chroma pred mode at %d %d\n", "top block unavailable for requested intra mode at %d %d\n", "left block unavailable for requested intra mode at %d %d\n", "h->avctx->sample_aspect_ratio.den", "Could not allocate memory for h264\n", "too many threads/slices (%d), reducing to %d\n", "context_init() failed.\n", "h264_slice_header_init() failed", "Delayed frames seen. Reenabling low delay requires a codec flush.\n", "Different chroma and luma bit depth", "VDPAU decoding does not support video colorspace.\n", "Reference not available for error concealing\n", "Reference invalid\n", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * h->linesize * ((scan8[15] - scan8[0]) >> 3)", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream (%td)\n", "error while decoding MB %d %d\n", "reference overflow %u > %u or %u > %u\n", " fix", " IDR", "TEMP", "SPAT", "hardware accelerator failed to decode picture\n", "slice type too large (%d) at %d %d\n", "pps_id %d out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "Detected GBR colorspace.\n", "Detected unsupported YCgCo colorspace.\n", "h->sps.crop_right + h->sps.crop_left < (unsigned)h->width", "h->sps.crop_top + h->sps.crop_bottom < (unsigned)h->height", "Invalid cropped dimensions: %dx%d.\n", "Ignoring cropping information.\n", "changing width/height on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "Cannot (re-)initialize context during parallel decoding.\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on %d. slice\n", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "first_mb_in_slice overflow\n", "cabac_init_idc overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "Cannot parallelize deblocking type 1, decoding such frames in sequential order\n", "Deblocking switched inside frame.\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", "AVC: nal size %d\n", "NAL %d/%d at %d/%d length %d pass %d\n", "AVC: Consumed only %d bytes instead of %d\n", "Ignoring NAL %d in global header/extradata\n", "Invalid mix of idr and non-idr slices\n", "Partitioned H.264 support is incomplete\n", "SPS decoding failure, trying again with the complete NAL\n", "next_avc - buf_index + consumed == nalsize", "Unknown NAL code: %d (%d bits)\n", "context_count > 0", "decode_slice_header error\n", "avcC too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "buf_index <= buf_size", "Q264", "no frame!\n", "h->sps.bit_depth_chroma == 0", "H264 Decoder", "Baseline", "Constrained Baseline", "Main", "Extended", "High", "High 10", "High 10 Intra", "High 4:2:2", "High 4:2:2 Intra", "High 4:4:4", "High 4:4:4 Predictive", "High 4:4:4 Intra", "CAVLC 4:4:4", "is_avc", "is avc", "nal_length_size", "overflow in decode_cabac_mb_mvd\n", "Reference %d >= %d\n", "gray chroma\n", "cabac decode of qscale diff failed at %d %d\n", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "offset == (sizeof(coeff_token_vlc_tables) / sizeof((coeff_token_vlc_tables)[0]))", "libavcodec/h264_cavlc.c", "mb_type %d in %c slice too large at %d %d\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "dquant out of range (%d) at %d %d\n", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "h264_mp4toannexb", "AVC-parser: nal length size invalid\n", "AVC-parser: nal size %d remaining %d\n", "pps_id out of range\n", "non-existing PPS referenced\n", "non-existing SPS referenced\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count overflow\n", "illegal memory management control operation %d\n", "missing picture in access unit with size %d\n", "cpb_count %d invalid\n", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%d/%d)\n", "illegal num_reorder_frames %d\n", "Overread VUI by %d bits\n", "PIC-AFF", "MB-AFF", "sps_id (%d) out of range\n", "chroma_format_idc %d is illegal\n", "separate color planes are not supported\n", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %u\n", "illegal POC type %d\n", "too many reference frames\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%u r:%u t:%u b:%u\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%d/%d/%d/%d %s %s %d/%d b%d reo:%d\n", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "8x8DCT", "pps_id (%d) out of range\n", "sps_id out of range\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d\n", "FMO not supported\n", "reference overflow (pps)\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "pps:%u sps:%u %s slice_groups:%d ref:%d/%d %s qp:%d/%d/%d/%d %s %s %s %s\n", "len <= 32", "libavcodec/h264_refs.c", "short term list:\n", "%d fn:%d poc:%d %p\n", "long term list:\n", "abs_diff_pic_num overflow\n", "long_term_pic_idx overflow\n", "illegal reordering_of_pic_nums_idc\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(h->ref_list[list][index].f.buf[0]) > 0", "reference picture missing during reorder\n", "MMCO opcode [%d, %d] at %d mismatches between slices\n", "Inconsistent MMCO state between slices [%d, %d]\n", "no mmco here\n", "mmco:%d %d %d\n", "%d %d %p\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "remove short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "mmco: cannot assign current picture to short and long at the same time\n", "illegal short term buffer state detected\n", "illegal long ref in memory management control operation %d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "SEI %d len:%d\n", "SEI type %d size %d truncated at %d\n", "ct_type:%X pic_struct:%d\n", "sei_recovery_frame_cnt: %d\n", "non-existing SPS %d referenced in buffering period\n", "SEI FPA %d %d %d %d %d %d\n", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "bit_depth<=8", "libavcodec/h264dsp.c", "libavcodec/h264pred.c", "PPS id out of range: %d\n", "TODO: s->sps->chroma_format_idc == 0 || s->sps->separate_colour_plane_flag\n", "Invalid slice segment address: %u.\n", "Unknown slice type: %d.\n", "Ignoring POC change between slices: %d -> %d\n", "No ref lists in the SPS.\n", "Too many refs: %d/%d.\n", "Zero refs for a frame with P or B slices.\n", "Invalid collocated_ref_idx: %d.\n", "Invalid number of merging MVP candidates: %d.\n", "Independent slice segment missing.\n", "Invalid long term RPS.\n", "Invalid NAL unit size.\n", "No start code is found.\n", "nal_unit_type: %d, nuh_layer_id: %dtemporal_id: %d\n", "Invalid NAL unit %d, skipping.\n", "Error constructing the frame RPS.\n", "First slice in a frame missing.\n", "Error constructing the reference lists for the current slice.\n", "Skipping NAL unit %d\n", "Error parsing NAL unit #%d.\n", "Verifying checksum for frame with POC %d: ", "plane %d - correct ", "%02x", "mismatching checksum of plane %d - ", " != ", "Decoded frame with POC %d.\n", "Invalid NAL unit size in extradata.\n", "Decoding nal unit %d %d from hvcC failed\n", "HEVC (High Efficiency Video Coding)", "HEVC decoder", "strict-displaywin", "stricly apply default display window size", "CABAC_MAX_BIN : %d\n", "SPS id out of range: %d\n", "missing picture in access unit\n", "Invalid delta in scaling list data: %d.\n", "Invalid value of delta_idx in slice header RPS: %d > %d.\n", "Too many refs in a short term RPS.\n", "Decoding VPS\n", "vps_reserved_three_2bits is not three\n", "vps_reserved_ffff_16bits is not 0xffff\n", "vps_max_sub_layers out of range: %d\n", "Error decoding profile tier level.\n", "vps_max_dec_pic_buffering_minus1 out of range: %d\n", "vps_max_num_reorder_pics out of range: %d\n", "Decoding SPS\n", "sps_max_sub_layers out of range: %d\n", "error decoding profile tier level\n", "chroma_format_idc != 1\n", "discarding sps conformance window, original values are l:%u r:%u t:%u b:%u\n", "Luma bit depth (%d) is different from chroma bit depth (%d), this is unsupported.\n", "non-4:2:0 support is currently unspecified.\n", "log2_max_pic_order_cnt_lsb_minus4 out range: %d\n", "sps_max_dec_pic_buffering_minus1 out of range: %d\n", "sps_max_num_reorder_pics out of range: %d\n", "Invalid value for log2_min_tb_size", "PCM bit depth (%d) is greater than normal bit depth (%d)\n", "Too many short term RPS: %d.\n", "Decoding VUI\n", "Unknown SAR index: %u.\n", "discarding vui default display window, original values are l:%u r:%u t:%u b:%u\n", "Reducing left output window to %d chroma samples to preserve alignment.\n", "Invalid visible frame dimensions: %dx%d.\n", "Displaying the whole video surface.\n", "Invalid coded frame dimensions.\n", "CTB size out of range: 2^%d\n", "max_transform_hierarchy_depth_inter out of range: %d\n", "max_transform_hierarchy_depth_intra out of range: %d\n", "max transform block size out of range: %d\n", "Parsed SPS: id %d; coded wxh: %dx%d; cropped wxh: %dx%d; pix_fmt: %s.\n", "Decoding PPS\n", "SPS does not exist \n", "pps_cb_qp_offset out of range: %d\n", "pps_cr_qp_offset out of range: %d\n", "num_tile_columns_minus1 out of range: %d\n", "num_tile_rows_minus1 out of range: %d\n", "Invalid tile widths.\n", "Invalid tile heights.\n", "pps_beta_offset_div2 out of range: %d\n", "pps_tc_offset_div2 out of range: %d\n", "log2_parallel_merge_level_minus2 out of range: %d\n", "Duplicate POC in a sequence: %d.\n", "Error allocating frame, DPB full.\n", "Output frame with POC %d.\n", "Zero refs in the frame RPS.\n", "Invalid reference index.\n", "Could not find ref with POC %d\n", "Decoding SEI\n", "Skipped PREFIX SEI %d\n", "Skipped SUFFIX SEI %d\n", "Too high symbol frequencies. Tree construction is not possible\n", "Error building tree\n", "Error generating huffman table\n", "i < (1 << 11)", "libavcodec/huffyuvdec.c", "Error reading huffman table\n", "width must be even for this colorspace\n", "width must be a multiple of 4 this colorspace and predictor\n", "YUY2 output is not implemented yet\n", "prediction type not supported!\n", "BGR24 output is not implemented yet\n", "Huffyuv / HuffYUV", "Huffman decode error.\n", "  id CIN video: expected extradata size of %d\n", "idcinvideo", "Invalid image size received: %u -> image data offset: %d\n", "Invalid palette size received: %u -> palette data offset: %d\n", "bpp %d too large for palette\n", "Masking not supported\n", "Invalid number of bitplanes: %u\n", "Invalid number of hold bits for HAM: %u\n", "unknown bits_per_coded_sample", "Ignoring extra planes beyond 8\n", "bitmap (compression %i, bpp %i, ham %i)", "Butterworth filter currently only supports low-pass filter mode\n", "Butterworth filter currently only supports even filter orders\n", "Biquad filter currently only supports high-pass and low-pass filter modes\n", "Biquad filter must have order of 2\n", "filter type is not currently implemented\n", "Number of channels > 2", "FFT init failed\n", "flcoeffs5 %f invalid\n", "frame too small!\n", "frame header check failed!\n", "got %X.\n", "scalefactor out of range\n", "Bit allocations failed\n", "Read coefficients failed\n", "Inverse quantization of coefficients failed\n", "yuvj", "desc", "libavcodec/imgconvert.c", "imx bitstream filter only applies to mpeg2video codec\n", "imxdump", "input buffer size too small (%d)\n", "Invalid picture dimensions: %d x %d!\n", "Stack overflow (corrupted binary tree)!\n", "Invalid VQ_NULL code: %d\n", "SkipCell procedure not implemented yet!\n", "Invalid cell: x=%d, y=%d, w=%d, h=%d\n", "Motion vectors point out of the frame.\n", "motion vector out of array\n", "motion vector index out of range\n", "Invalid VQ table indexes! Primary: %d, secondary: %d!\n", "Attempt to apply Mode 3/4 to an INTER cell!\n", "Attempt to use Mode 11 for an INTRA cell!\n", "Unsupported coding mode: %d\n", "Mode %d: RLE code %X is not allowed at the current line\n", "Mode %d: invalid VQ data\n", "Mode %d: RLE-FB invalid counter: %d\n", "Mode %d: unsupported RLE code: %X\n", "Mode %d: attempt to read past end of buffer\n", "OS header checksum mismatch!\n", "Unsupported codec version!\n", "One of the y/u/v offsets is invalid\n", "Sync frame encountered!\n", "8-bit pixel format", "Halfpel motion vectors", "Read invalid number of motion vectors %d\n", "num_MBs mismatch %d %d %d %d\n", "Empty macroblock in an INTRA picture!\n", "ref_mb unavailable\n", "motion vector %d %d outside reference\n", "Invalid band header sequence!\n", "Invalid/unsupported mv resolution: %d!\n", "Invalid block size!\n", "Transform %d", "DCT transform", "wrong transform size!\n", "transform and block size mismatch (%d != %d)\n", "Custom scan pattern encountered!\n", "mismatching scan table!\n", "Custom quant matrix encountered!\n", "Quantization matrix %d", "The band block size does not match the configuration inherited\n", "Invalid quant_mat inherited\n", "Invalid quant matrix for 4x4 block encountered!\n", "mismatching transform_size!\n", "Too many corrections: %d\n", "band->scan not set\n", "Invalid picture start code!\n", "Invalid frame type: %d\n", "Sync bit is set!\n", "Only YVU9 picture format is supported!\n", "Scalability: unsupported subdivision! Luma bands: %d, chroma bands: %d\n", "Couldn't reallocate color planes!\n", "Couldn't reallocate internal structures!\n", "Bad blocks bits encountered!\n", "Allocated tile size %d mismatches parameters %d\n", "Couldn't allocate color planes!\n", "Invalid frame type: %d \n", "Invalid tile size: %d\n", "YV12 picture format", "4x4 luma blocks are unsupported!\n", "Extended transform info", "quant_mat %d too large!\n", "End marker missing!\n", "Alignment bits are not zero!\n", "Invalid GOP header, skipping frames.\n", "Scalable inter frame in non scaleable stream\n", "Bad marker\n", "Bad H263 id\n", "Intel H263 free format not supported\n", "SAC not supported\n", "Wrong Intel H263 format\n", "Bad value for reserved field\n", "Invalid marker\n", "Invalid aspect ratio.\n", "Help! Mystery opcode 0x6 seen\n", "decode problem on frame %d, @ block (%d, %d)\n", "decode finished with %d bytes left over\n", "motion offset < 0 (%d)\n", "motion offset above limit (%d >= %d)\n", "Invalid decode type, corrupted header?\n", "table size %i does not match needed %i\n", "s->mb_width>0", "libavcodec/intrax8.c", "run overflow at %dx%d i:%d\n", " UMV", " LONG", " AIC", " AIV", " LOOP", "qp:%d %c size:%d rnd:%d%s%s%s%s%s%s%s%s%s %d/%d\n", "cbpc damaged at %d %d\n", "b mb_type damaged at %d %d\n", "b cbpy damaged at %d %d\n", "I cbpc damaged at %d %d\n", "I cbpy damaged at %d %d\n", "Header looks like RTP instead of H.263\n", "H263 SAC not supported\n", "Syntax-based Arithmetic Coding (SAC) not supported\n", "Reference Picture Selection not supported\n", "Independent Segment Decoding not supported\n", "Bad UFEP type (%d)\n", "zero framerate\n", "rectangular slices not supported\n", "unordered slices not supported\n", "dimensions 0\n", "SEPB1 marker missing\n", "SEPB2 marker missing\n", "ZYGO", " %5d", "buf_size - min_size >= offs", "libavcodec/ivi_common.c", "Scan pattern is not set.\n", "Invalid sym encountered: %d.\n", "Too large transform\n", "offs >= 0 && ref_offs >= 0 && band->ref_buf", "buf_size - min_size - ref_size >= ref_offs", "Empty custom Huffman table!\n", "Error while initializing custom vlc table!\n", "ref_tile mismatch\n", "Error while decoding picture header: %d\n", "Password-protected clip!\n", "Color planes not initialized yet\n", "Band buffer points to no data!\n", "Error while decoding band header: %d\n", "Empty band encountered!\n", "MB sizes mismatch: %d vs. %d\n", "Allocated tile size %d mismatches parameters %d in ivi_process_empty_tile()\n", "MV out of bounds\n", "Tile data size is zero!\n", "Corrupted tile data encountered!\n", "Tile data_size mismatch!\n", "Error while decoding band: %d, plane: %d\n", "Buffer contains IP frames!\n", "{\\an1}", "{\\an2}", "{\\an3}", "{\\an4}", "{\\an5}", "{\\an6}", "{\\an7}", "{\\an8}", "{\\an9}", "{\\h}", "%d %b %Y", "%H:%M", "{\\r}", "{\\i1}", "{\\i0}", "{\\b1}", "{\\b0}", "{\\u1}", "{\\u0}", "nreslevels2decode %d invalid or uninitialized\n", "Unknown quantization format\n", "res + 1 < (2147483647)", "libavcodec/jpeg2000.c", "nreslevels %d is invalid\n", "reduction_factor too large for this bitstream, max is %d\n", "cblk size invalid\n", "cblk size > 64", "extra cblk styles %X\n", "width <= 64", "libavcodec/jpeg2000dec.c", "height <= 64", "Segmentation symbol value incorrect\n", "Transforms mismatch, MCT not supported\n", "Missing EOC\n", "Missing SIZ\n", "Missing SOT\n", "Invalid tpend\n", "Support for image offsets", "Invalid number of components: %d\n", "Support for %d components", "Invalid tile dimension %dx%d.\n", "Invalid sample separation %d/%d\n", "Unknown pix_fmt, profile: %d, colour_space: %d, components: %d, precision: %d, cdx[1]: %d, cdy[1]: %d, cdx[2]: %d, cdy[2]: %d\n", "Invalid compno %d. There are %d components in the image.\n", "MCT %d with too few components (%d)\n", "Psot %d too big\n", "unsupported marker 0x%.4X at pos 0x%X\n", "error during processing marker segment %.4x\n", "nonzerobits %d invalid\n", "Block with lengthinc greater than %zu", "EPH marker not found.\n", "Block length %d or lengthinc %d is too large\n", "Unknown palette", "SOC marker not present\n", "Progression order RLCP", "Progression order RPCL", "Progression order PCRL", "Could not find Jpeg2000 codestream atom.\n", "JPEG 2000 codestream restriction 0", "JPEG 2000 codestream restriction 1", "JPEG 2000 no codestream restrictions", "JPEG 2000 digital cinema 2K", "JPEG 2000 digital cinema 4K", "lowres", "Lower the decoding resolution by a power of two", "palette not supported\n", "oversize image not supported\n", "invalid id %d\n", "JPEG-LS params: %ix%i NEAR=%i MV=%i T(%i,%i,%i) RESET=%i, LIMIT=%i, qbpp=%i, RANGE=%i\n", "JPEG params: ILV=%i Pt=%i BPP=%i, scan = %i\n", "Sample interleaved images", "16bit xfrm", "video size %d invalid\n", "unsupported frame type %i\n", "n <= 1024", "libavcodec/kbdwin.c", "Frame reference does not exist\n", "frame finished with %d diff\n", "Block size = %i\n", "Data overrun\n", "Invalid MV\n", "Unknown compression method %i\n", "KMVC supports frames <= 320x200\n", "Extradata missing, decoding may not work properly...\n", "KMVC palette too large\n", "Invalid probability encountered.\n", "Integer overflow encountered in cumulative probability calculation.\n", "Invalid probability run encountered.\n", "All probabilities are 0!\n", "Scaled probabilities invalid\n", "Scaled probabilities are larger than target!\n", "Output more bytes than length (%d of %d)\n", "Too many zeros remaining.\n", "Invalid zero run escape code! (%#x)\n", "cannot allocate temporary buffer\n", "Invalid frame offsets\n", "Unsupported Lagarith frame type: %#x\n", "Extradata size too small.\n", "Codec id and codec type mismatch. This should not happen.\n", "Image type is YUV 1:1:1.\n", "Image type is YUV 4:2:2.\n", "Unsupported dimensions\n", "Image type is RGB 24.\n", "Image type is YUV 4:1:1.\n", "Image type is YUV 2:1:1.\n", "Image type is YUV 4:2:0.\n", "Unsupported image format %d.\n", "Compression enabled.\n", "No compression.\n", "Unsupported compression format for MSZH (%d).\n", "High speed compression.\n", "High compression.\n", "Normal compression.\n", "Unsupported compression level for ZLIB: (%d).\n", "Compression level for ZLIB: (%d).\n", "BUG! Unknown codec in compression switch.\n", "Multithread encoder flag set.\n", "Nullframe insertion flag set.\n", "PNG filter flag set.\n", "Unknown flag set (%d).\n", "len %d is too small\n", "Mthread1 decoded size differs (%d != %d)\n", "Mthread2 decoded size differs (%d != %d)\n", "Decoded size differs (%d != %d)\n", "BUG! Unknown MSZH compression in frame decoder.\n", "Inflate error: %d\n", "Decoded size differs (%d != %lu)\n", "BUG! Unknown codec in frame decoder compression switch.\n", "BUG! Unknown imagetype in pngfilter switch.\n", "BUG! Unknown imagetype in image decoder.\n", "Error: nal buffer is too small\n", "Error setting preset/tune %s/%s.\n", "Possible presets:", "Possible tunes:", "weightp", "bad option '%s': '%s'\n", "bad value for '%s': '%s'\n", "level", "%255[^:=]=%255[^:]", "psy-rd", "Error parsing option '%s' with value '%s'.\n", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "Error setting profile %s.\n", "Possible profiles:", "Error parsing option '%s = %s'.\n", "libx264rgb", "libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 RGB", "libx264", "libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10", "ultrafast", "superfast", "veryfast", "faster", "medium", "slow", "slower", "veryslow", "placebo", "film", "animation", "grain", "stillimage", "psnr", "ssim", "fastdecode", "zerolatency", "flags2", "i_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "flags", "+cgop", "rc_init_occupancy", "preset", "Set the encoding preset (cf. x264 --fullhelp)", "tune", "Tune the encoding params (cf. x264 --fullhelp)", "profile", "Set profile restrictions (cf. x264 --fullhelp) ", "fastfirstpass", "Use fast settings when encoding first pass", "Specify level (as defined by Annex A)", "passlogfile", "Filename for 2 pass stats", "wpredp", "Weighted prediction for P-frames", "x264opts", "x264 options", "Select the quality for constant quality mode", "crf_max", "In CRF mode, prevents VBV from lowering quality beyond this point.", "Constant quantization parameter rate control method", "aq-mode", "AQ method", "aq_mode", "none", "variance", "Variance AQ (complexity mask)", "autovariance", "Auto-variance AQ (experimental)", "aq-strength", "AQ strength. Reduces blocking and blurring in flat and textured areas.", "Use psychovisual optimizations.", "Strength of psychovisual optimization, in <psy-rd>:<psy-trellis> format.", "rc-lookahead", "Number of frames to look ahead for frametype and ratecontrol", "weightb", "Weighted prediction for B-frames.", "Weighted prediction analysis method.", "simple", "smart", "Calculate and print SSIM stats.", "intra-refresh", "Use Periodic Intra Refresh instead of IDR frames.", "bluray-compat", "Bluray compatibility workarounds.", "b-bias", "Influences how often B-frames are used", "b-pyramid", "Keep some B-frames as references.", "b_pyramid", "strict", "Strictly hierarchical pyramid", "normal", "Non-strict (not Blu-ray compatible)", "mixed-refs", "One reference per partition, as opposed to one reference per macroblock", "8x8dct", "High profile 8x8 transform.", "fast-pskip", "Use access unit delimiters.", "mbtree", "Use macroblock tree ratecontrol.", "Loop filter parameters, in <alpha:beta> form.", "cplxblur", "Reduce fluctuations in QP (before curve compression)", "A comma-separated list of partitions to consider. Possible values: p8x8, p4x4, b8x8, i8x8, i4x4, none, all", "direct-pred", "Direct MV prediction mode", "spatial", "temporal", "slice-max-size", "Limit the size of each slice in bytes", "nal-hrd", "Signal HRD information (requires vbv-bufsize; cbr not allowed in .mp4)", "x264-params", "Override the x264 configuration using a :-separated list of key=value parameters", "Extradata size must be >= 12 instead of %i\n", "LOCO codec version %i", "Unknown colorspace, index = %i\n", "lossy:%i, version:%i, mode: %i\n", "libavcodec/loco.c", "Input data too small.\n", "lzw overread\n", "invalid dc code at\n", "Missing or incomplete extradata\n", "Could not find tag %08X\n", "Unsupported number of channels: %i\n", "This version does not support %d kHz - %d kbit/s/ch mode.\n", "Invalid window type, broken sample?\n", "ibus", "cfshyYpo", "{%*d}{%*[0123456789]}%c", "AVPacket is not clean (contains timing information and a trailing line break). You need to upgrade your libavformat or sanitize your packet.\n", "{\\%c1}", "{\\c&H%06X&}", "{\\fn%.*s}", "{\\fs%d}", "{\\pos(%d,%d)}", "{\\fs}", "{\\fn}", "{\\c}", "{\\%c0}", "error initializing vlc table\n", "insufficient data\n", "invalid width/height!\n", "Resolution changing", "decoding must start with keyframe\n", "No such backreference! Buggy sample.\n", "Error decoding block.\n", "input is truncated\n", "AVI1", "input is not MJPEG/AVI1\n", "mjpeg2jpeg", "mjpega bitstream filter only applies to mjpeg codec\n", "mjpg", "bitstream already formatted\n", "could not find SOS marker in bitstream\n", "mjpegadump", "not mjpeg-b (bad fourcc)\n", "field size: 0x%x\n", "second_field_offs is %d and size is %d\n", "second field offs: 0x%x\n", "dqt is %d and size is %d\n", "dqt offs: 0x%x\n", "dht is %d and size is %d\n", "dht offs: 0x%x\n", "sof is %d and size is %d\n", "sof offs: 0x%x\n", "sos is %d and size is %d\n", "sos offs: 0x%x\n", "sod offs: 0x%x\n", "no picture\n", "QP: %d\n", "Single field\n", "nb_codes <= 256", "libavcodec/mjpegdec.c", "mjpeg_decode_dc: bad vlc: %d:%d (%p)\n", "dqt: invalid precision\n", "index=%d\n", "qscale[%d]: %d\n", "class=%d index=%d nb_codes=%d\n", "using external huffman table\n", "error using external huffman table, switching back to internal\n", "bottom field first\n", "lowres is not possible with lossless jpeg\n", "sof0: picture: %dx%d\n", "nb_components changing in interlaced picture\n", "JPEG-LS that is not <= 8 bits/component or 16-bit gray", "quant_index is invalid\n", "Invalid sampling factor in component %d %d:%d\n", "component %d %d:%d id: %d quant:%d\n", "Subsampling in JPEG-LS", "progressively coded interlaced picture", "pix fmt id %x\n", "s->nb_components == 3", "s->nb_components == 4", "Unhandled pixel format 0x%x\n", "lowres not supported for weird subsampling\n", "decode_sof0: error, len(%d) mismatch\n", "Unsupported coding and pixel format combination\n", "lossless", "sequential DCT", "PRCT", "Can not process SOS before SOF, skipping\n", "s->picture_ptr->data[0]", "decode_sos: nb_components (%d) unsupported\n", "decode_sos: invalid len (%d)\n", "component: %d\n", "decode_sos: index(%d) out of components\n", "CJPG", "%s %s p:%d >>:%d ilv:%d bits:%d skip:%d %s comp:%d\n", "s->picture_ptr == &s->picture", "nb_components>=1 && nb_components<=4", "SS/SE %d/%d is invalid\n", "error count: %d\n", "ZRL overflow: %d\n", "error y=%d x=%d\n", "Can not flip image with lowres\n", "overread %d\n", "error dc\n", "AVRn interlaced picture marker found\n", "decode_sos: ac/dc index out of range\n", "escaping removed %td bytes\n", "MJPEG packet 0x%x too big (%d/%d), corrupt data?\n", "marker=%x avail_size_in_buf=%td\n", "startcode: %X\n", "restart marker: %d\n", "APPx %8X len=%d\n", "polarity %d\n", "JFIF", "mjpeg: JFIF header found (version: %x.%x) SAR=%d/%d\n", "Adob", "mjpeg: Adobe header found\n", "LJIF", "Pegasus lossless jpeg header found\n", "unknown colorspace %d\n", "colr", "COLR %d\n", "xfrm", "XFRM %d\n", "Exif", "mjpeg: invalid TIFF header in EXIF data\n", "mjpeg: error decoding EXIF data\n", "mjpeg: Apple MJPEG-A header found\n", "mjpeg: error, decode_app parser read over the end\n", "comment: '%s'\n", "AVID", "CS=ITU601", "Intel(R) JPEG Library, version 1", "Metasoft MJPEG Codec", "huffman table decode error\n", "Found EOI before any SOF, ignoring\n", "restart interval: %d\n", "mjpeg: unsupported coding type (%x)\n", "marker parser used %d bytes (%d bits)\n", "EOI missing, emulating\n", "No JPEG data found in image\n", "avctx->pix_fmt == AV_PIX_FMT_YUVJ444P || avctx->pix_fmt == AV_PIX_FMT_YUV444P || avctx->pix_fmt == AV_PIX_FMT_YUVJ440P || avctx->pix_fmt == AV_PIX_FMT_YUV440P", "avctx->pix_fmt == AV_PIX_FMT_YUVJ444P || avctx->pix_fmt == AV_PIX_FMT_YUV444P || avctx->pix_fmt == AV_PIX_FMT_YUVJ422P || avctx->pix_fmt == AV_PIX_FMT_YUV422P", "decode frame unused %td bytes\n", "invalid buffer\n", "MJPEG (Motion JPEG)", "MJPEG decoder", "extern_huff", "Use external huffman table.", "packet too short, unable to read major sync\n", "major sync info header checksum error\n", "ff_combine_frame failed\n", "mlpparse: Parity check failed.\n", "filter < 2", "libavcodec/mlpdec.c", "Filters may change only once per access unit.\n", "%cIR filter order %d is greater than maximum %d.\n", "%cIR filter coeff_bits must be between 1 and 16.\n", "Sum of coeff_bits and coeff_shift for %cIR filter must be 16 or less.\n", "FIR filter has state data specified.\n", "invalid/unknown bits per sample\n", "Channel group 2 cannot have more bits per sample than group 1.\n", "Channel groups with differing sample rates are not currently supported.\n", "invalid/unknown sampling rate\n", "Sampling rate %d is greater than the supported maximum (%d).\n", "Block size %d is greater than the supported maximum (%d).\n", "Block size pow2 %d is greater than the supported maximum (%d).\n", "MLP only supports up to 2 substreams.\n", "%d substreams (more than the maximum supported by the decoder)", "Mono stream with 2 substreams, ignoring 2nd\n", "Stream parameters not seen; skipping frame.\n", "There must be no extraword for MLP.\n", "Invalid nonrestart_substr.\n", "Indicated length of substream %d data goes off end of packet.\n", "Indicated end offset of substream %d data is smaller than calculated start offset.\n", "Parity check failed.\n", "restart header sync incorrect (got 0x%04x)\n", "MLP must have 0x31ea sync word.\n", "Max matrix channel cannot be greater than %d.\n", "Max channel must be equal max matrix channel.\n", "%d channels (more than the maximum supported by the decoder)", "Substream min channel cannot be greater than max channel.\n", "Extracting %d-channel downmix from substream %d. Further substreams will be skipped.\n", "Extracting %d-channel downmix (0x%llx) from substream %d. Further substreams will be skipped.\n", "Lossless check failed - expected %02x, calculated %02x.\n", "Assignment of matrix channel %d to invalid output channel %d", "restart header checksum error\n", "Invalid blocksize.\n", "Matrices may change only once per access unit.\n", "Number of primitive matrices cannot be greater than %d.\n", "Invalid channel %d specified as output from matrix.\n", "Too many fractional bits specified.\n", "Total filter orders too high.\n", "FIR and IIR filters must use the same precision.\n", "Invalid huff_lsbs.\n", "Substreams with VLC block size check info", "too many audio samples in frame\n", "block data length mismatch\n", "End of stream indicated.\n", "Substream %d parity check failed.\n", "Substream %d checksum failed.\n", "No restart header present in substream %d.\n", "channel count mismatch\n", "No samples to output.\n", "substream %d length mismatch\n", "extradata too small\n", "invalid code size %d/%d\n", "too many codes\n", "too few codes\n", "mov2textsub", "text2movsub", "3GPP Timed Text subtitle", "not standards compliant\n", "cannot compress %08X\n", "FFCMP3 0.0", "Extradata invalid\n", "mp3comp", "Extradata invalid %d\n", "Could not find bitrate_index.\n", "mp3decomp", "%d channels", "Too small extradata size (%i)!\n", "Too many bands: %i\n", "IS: %d, MSS: %d, TG: %d, LFL: %d, bands: %d\n", "Initing VLC\n", "Cannot init SCFI VLC\n", "Cannot init DSCF VLC\n", "Cannot init HDR VLC\n", "Cannot init QUANT VLC %i,%i\n", "packet size is too small (%i bytes)\n", "subband index invalid\n", "Error decoding frame: used %i of %i bits\n", "mpc7", "maxbands %d too high\n", "Multichannel MPC SV8", "maxband %d too large\n", "mpc8", "Missing picture start code, guessing missing values\n", "skip with previntra\n", "invalid mb type in I Frame at %d %d\n", "invalid mb type in P Frame at %d %d\n", "invalid mb type in B Frame at %d %d\n", "!s->progressive_sequence", "libavcodec/mpeg12dec.c", "MT_DMV in progressive_sequence\n", "00 motion_type at %d %d\n", "invalid cbp %d at %d %d\n", "mb_y < s->mb_height", "qscale == 0\n", "SLIF", "first mb_incr damaged\n", "initial skip overflow\n", "qp:%d fc:%2d%2d%2d%2d %s %s %s %s %s dc:%d pstruct:%d fdct:%d cmv:%d qtype:%d ivlc:%d rff:%d %s\n", "Invalid MXF data found in video stream\n", "end mismatch left=%d %0X\n", "mb incr damaged\n", "slice mismatch\n", "skipped MB in I frame at %d %d\n", "avctx->thread_count > 1", "%3X at %td left %d\n", "Invalid horizontal or vertical size value.\n", "aspect ratio has forbidden 0 value\n", "matrix damaged\n", "intra matrix specifies invalid DC quantizer %d, ignoring\n", "sequence header damaged\n", "vbv buffer: %d, bitrate:%d\n", "ignoring SEQ_START_CODE after %X\n", "ignoring extra picture following a frame-picture\n", "Invalid frame dimensions %dx%d.\n", "mpeg_decode_postinit() failure\n", "vbv_delay %d, ref %d type:%d\n", "ignoring pic after %X\n", "profile: %d, level: %d ps: %d cf:%d vbv buffer: %d, bitrate:%d\n", "ignoring seq ext after %X\n", "sde w:%d, h:%d\n", "pde (%d,%d) (%d,%d) (%d,%d)\n", "ignoring pic cod ext after %X\n", "GOP (%s) closed_gop=%d broken_link=%d\n", "ignoring GOP_START_CODE after %X\n", "interlaced frame in progressive sequence, ignoring\n", "picture_structure %d invalid, ignoring\n", "invalid frame_pred_frame_dct\n", "slice too small\n", "slice below image (%d >= %d)\n", "Missing picture start code\n", "first field missing\n", "hardware accelerator failed to decode first field\n", "current_picture not initialized\n", "VCR2", "BW10", "picture in extradata\n", "mpegvideo", "4:2:2", "Spatially Scalable", "SNR Scalable", "Simple", "Reserved", "DivX%dBuild%d%c", "DivX%db%d%c", "Video uses a non-standard and wasteful way to store B-frames ('packed B-frames'). Consider using a tool like VirtualDub or avidemux to fix it.\n", "FFmpe%*[^b]b%d", "FFmpeg v%d.%d.%d / libavcodec build: %d", "Lavc%d.%d.%d", "ffmpeg", "XviD%d", " VOLC", "low_delay flag incorrectly, clearing it\n", "Marker bit missing %s\n", "before time_increment", "hmm, seems the headers are not complete, trying to guess time_increment_bits\n", "my guess is %d bits ;)\n", "MPEG4 PTS: %lld\n", "before vop_coded", "vop not coded\n", "after new_pred", "Header truncated\n", "sprite_brightness_change not supported\n", "static sprite not supported\n", "Error, header damaged or not MPEG4 header (qscale=0)\n", "Error, header damaged or not MPEG4 header (f_code=0)\n", "Error, header damaged or not MPEG4 header (b_code=0)\n", "qp:%d fc:%d,%d %s size:%d pro:%d alt:%d top:%d %spel part:%d resync:%d w:%d a:%d rnd:%d vot:%d%s dc:%d ce:%d/%d/%d time:%lld tincr:%d\n", "load backward shape isn't supported\n", "looks like this file was encoded with (divx4/(old)xvid/opendivx) -> forcing low_delay flag\n", "illegal dc vlc\n", "dc marker bit missing\n", "dc<0 at %dx%d\n", "dc overflow at %dx%d\n", "1. marker bit missing in rvlc esc\n", "2. marker bit missing in rvlc esc\n", "reverse esc missing\n", "1. marker bit missing in 3. esc\n", "2. marker bit missing in 3. esc\n", "|level| overflow in 3. esc, qp=%d\n", "illegal MB_type\n", "texture corrupted at %d %d %d\n", "marker does not match f_code\n", "illegal mb_num in video packet (%d %d) \n", "before time_increment in video packed header", "before vop_coding_type in video packed header", "untested\n", "Error, video packet header damaged (f_code=0)\n", "Error, video packet header damaged (b_code=0)\n", "cbpc corrupted at %d %d\n", "DC corrupted at %d %d\n", "slice below monitor ...\n", "marker missing after first I partition at %d %d\n", "marker missing after first P partition at %d %d\n", "cbpy corrupted at %d %d\n", "I cbpy corrupted at %d %d\n", "P cbpy corrupted at %d %d\n", "scalability ", "qpel ", "partition ", "rvlc ", "WV1F", "QMP4", "frame skip %d\n", "startcode: %3X ", "Video Object Start", "Video Object Layer Start", "FGS bp start", "Visual Object Seq Start", "Visual Object Seq End", "User Data", "Group of VOP start", "Video Session Error", "Visual Object Start", "Video Object Plane start", "slice start", "extension start", "fgs start", "FBA Object start", "FBA Object Plane start", "Mesh Object start", "Mesh Object Plane start", "Still Texture Object start", "Texture Spatial Layer start", "Texture SNR Layer start", "Texture Tile start", "Texture Shape Layer start", "stuffing start", "reserved", "System start", " at %d\n", "illegal chroma format\n", "only rectangular vol supported\n", "Gray shape not supported\n", "before time_increment_resolution", "time_base.den==0\n", "before fixed_vop_rate", "before width", "before height", "after height", "MP4S", "MPEG4 OBMC not supported (very likely buggy encoder)\n", "Static Sprites not supported\n", "%d sprite_warping_points\n", "N-bit not supported\n", "quant precision %d\n", "in complexity estimation part 1", "in complexity estimation part 2", "Invalid Complexity estimation method %d\n", "new pred not supported\n", "reduced resolution VOP not supported\n", "scalability not supported\n", "tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d,  %s%s%s%s\n", "GOP header invalid\n", "MPEG4 Video Decoder", "Simple Profile", "Simple Scalable Profile", "Core Profile", "Main Profile", "N-bit Profile", "Scalable Texture Profile", "Simple Face Animation Profile", "Basic Animated Texture Profile", "Hybrid Profile", "Advanced Real Time Simple Profile", "Code Scalable Profile", "Advanced Coding Profile", "Advanced Core Profile", "Advanced Scalable Texture Profile", "Simple Studio Profile", "Advanced Simple Profile", "quarter_sample", "1/4 subpel MC", "divx_packed", "divx style packed b frames", "offset == (sizeof(huff_vlc_tables) / sizeof((huff_vlc_tables)[0]))", "libavcodec/mpegaudiodec.c", "Codec extradata missing or too short.\n", "Invalid channel config number.\n", "big_values too big\n", "invalid block type\n", "switch point in 8khz", "overread, skip %d enddists: %d %d\n", "bits_left=%d\n", "invalid old backstep %d\n", "invalid new backstep %d\n", "s->frame != ((void *)0)", "Frame size smaller than header size\n", "frame channel count exceeds codec channel count\n", "Error while decoding MPEG audio frame.\n", "Invalid frame header\n", "discarding ID3 tag\n", "Header missing\n", "incorrect frame size - multiple frames in buffer?\n", "mp3on4float", "mp3adufloat", "mp3float", "mp2float", "mp1float", "pic->f.data[0]", "libavcodec/mpegvideo.c", "get_buffer() failed (%d %p)\n", "alloc_frame_buffer() failed (hwaccel private data allocation)\n", "get_buffer() failed (stride changed)\n", "get_buffer() failed (uv stride mismatch)\n", "get_buffer() failed to allocate context scratch buffers.\n", "Error allocating a picture.\n", "failed to allocate context scratch buffers.\n", "decoding to AV_PIX_FMT_NONE is not supported.\n", "s != s1", "!s->picture || s->picture != s1->picture", "Failed to allocate context scratch buffers.\n", "Context scratch buffers could not be allocated due to unknown size.\n", "Internal error, picture buffer overflow\n", "releasing zombie picture\n", "allocating dummy last picture for B frame\n", "warning: first frame is no keyframe\n", "allocate dummy last picture for field based first keyframe\n", "s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr && s->last_picture_ptr->f.data[0])", "New frame, type: %c\n", "ref->size >= offset + s->mb_stride * ((f->height+15)/16)", "DCT coeffs of MB at %dx%d:\n", "Interlaced error concealment is not fully implemented\n", "MPEG motion vector out of boundary (%d %d)\n", "ext header missing, %d left\n", "I frame too long, ignoring ext header\n", "invalid startcode\n", "invalid picture type\n", "invalid qscale\n", "invalid slice height %d\n", "error, slice code was %X\n", "qscale:%d rlc:%d rl:%d dc:%d mbrl:%d slice:%d   \n", "skip:%d rl:%d rlc:%d dc:%d mv:%d mbrl:%d qp:%d   \n", "dc overflow- block: %d qscale: %d//\n", "dc overflow+ L qscale: %d//\n", "dc overflow+ C qscale: %d//\n", "ignoring overflow at %d %d\n", "cbpc %d invalid at %d %d\n", "cbpy %d invalid at %d %d\n", "\nerror while decoding block: %d x %d (%d)\n", "illegal MV code at %d %d\n", "msmpeg4", "unsupported bits per sample\n", "MS RLE: bytestream overrun, %d rows left\n", "MS RLE: frame/stream ptr just went out of bounds (copy)\n", "MS RLE: frame ptr just went out of bounds (run)\n", "MS RLE: ended frame decode with %d bytes left over\n", "Next line is beyond picture bounds (%d bytes left)\n", "Skip beyond picture bounds\n", "bytestream overrun\n", "MS RLE warning: no end-of-picture code\n", "Unknown depth %d\n", "Insufficient extradata size %d\n", "Insufficient extradata size: expected %d got %d\n", "Frame dimensions %dx%d too large", "Frame dimensions %dx%d too small", "Encoder version %d.%d\n", "Header version doesn't match codec tag\n", "Incorrect number of changeable palette entries: %d\n", "%d free colour(s)\n", "Display dimensions %dx%d\n", "Coded dimensions %dx%d\n", "%g frames per second\n", "Bitrate %d bps\n", "Max. lead time %g ms\n", "Max. lag time %g ms\n", "Max. seek time %g ms\n", "Insufficient extradata size %d for v2\n", "Slice split %d\n", "Incorrect number of used colours %d\n", "Used colours %d\n", "Cannot allocate mask plane\n", "implicit_rect && used_rects > 0\n", "Unexpected grandchildren\n", "frame->linesize[0] == ctx->last_pic->linesize[0]", "libavcodec/mss2.c", "Missing keyframe\n", "header error\n", "expected I-frame\n", "ff_MPV_frame_start error\n", "Asymmetric WMV9 rectangle subsampling", "f->linesize[1] == f->linesize[2]", "buffer not fully consumed\n", "Image dimensions should be a multiple of 16.\n", "Cannot allocate buffer\n", "Frame should have at least %d bytes, got %d instead\n", "Invalid frame type %X\n", "Invalid frame dimensions %dx%d +%d,%d\n", "Invalid quality setting %d\n", "Keyframe without data found\n", "Error decoding block %d,%d\n", "Invalid frame type %d\n", "Empty frame found but it is not a skip frame.\n", "Error decoding DCT block %d,%d\n", "Skip block in intra frame\n", " MS Video-1 warning: stream_ptr out of bounds (%d >= %d)\n", "dimension mismatch\n", "bitmap feature", "BottomUp", "buffer overflow\n", "quantization table decode error\n", "MXM bitmask is not complete\n", "MXM bitmask memory allocation error\n", "Completion bitmask memory allocation error\n", "SOF data decode error\n", "Interlaced mode not supported in MxPEG\n", "Can not process SOS without SOF data, skipping\n", "First picture has no SOF, skipping\n", "Non-key frame has no MXM, skipping\n", "Picture dimensions stored in SOF and MXM mismatch\n", "Dimensions of current and reference picture mismatch\n", "Leftover bytes: %d.\n", "noise", "insufficient rtjpeg quant data\n", "not a nuv video frame\n", "Too small NUV video frame\n", "Unknown secondary frame header (wrong codec_tag?)\n", "uncompressed frame too short\n", "NULL", "libavcodec/options.c", "Tried to copy AVCodecContext %p into already-initialized %p\n", "AVCodecContext", "AVFrame", "AVSubtitleRect", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "qpel", "use 1/4-pel motion compensation", "loop", "use loop filter", "qscale", "use fixed qscale", "use gmc", "always try a mb with mv=<0,0>", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "pass2", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "error[?] variables will be set during encoding", "truncated", "normalize adaptive quantization", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "bitexact", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "cgop", "closed GOP", "allow non-spec-compliant speedup tricks", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "chunks", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "set motion estimation method", "zero", "zero motion estimation (fastest)", "full", "full motion estimation (slowest)", "epzs", "EPZS motion estimation (default)", "esa motion estimation (alias for full)", "tesa", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter", "iter motion estimation", "extradata_size", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "cutoff", "set cutoff bandwidth", "frame_size", "frame_number", "delay", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "video quantizer scale blur (VBR)", "minimum video quantizer scale (VBR)", "maximum video quantizer scale (VBR)", "maximum difference between the quantizer scales (VBR)", "use 'frames' B frames", "b_qfactor", "QP factor between P- and B-frames", "rc_strategy", "ratecontrol method", "strategy to choose between I/P/B-frames", "RTP payload size in bytes", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "work around not autodetected encoder bugs", "autodetect", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "how strictly to follow the standards", "very", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "unofficial", "allow unofficial extensions", "experimental", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "err_detect", "set error detection flags", "crccheck", "verify embedded CRCs", "bitstream", "detect bitstream specification deviations", "buffer", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "mpeg_quant", "use MPEG quantizers instead of H.263", "qsquish", "how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)", "rc_qmod_amp", "experimental quantizer modulation", "rc_qmod_freq", "rc_override_count", "rc_eq", "Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.", "maxrate", "Set maximum bitrate tolerance (in bits/s). Requires bufsize to be set.", "minrate", "Set minimum bitrate tolerance (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "bufsize", "set ratecontrol buffer size (in bits)", "rc_buf_aggressivity", "currently useless", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "rc_init_cplx", "initial complexity for 1-pass encoding", "DCT algorithm", "autoselect a good one (default)", "fastint", "fast integer", "accurate integer", "altivec", "faan", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "idct", "select IDCT implementation", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvidmmx", "faani", "floating point AAN IDCT", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "use strong deblock filter for damaged MBs", "bits_per_coded_sample", "pred", "prediction method", "left", "plane", "median", "aspect", "sample aspect ratio", "debug", "print specific debug info", "pict", "picture info", "rate control", "mb_type", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "skip", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "bugs", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "buffers", "picture buffer allocations", "thread_ops", "threading operations", "vismv", "visualize motion vectors (MVs)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "cmp_func", "subcmp", "sub-pel ME compare function", "mbcmp", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "dia_size", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "pre motion estimation", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast (default)", "sum of squared errors", "satd", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "vsad", "sum of absolute vertical differences", "vsse", "sum of squared vertical differences", "nsse", "noise preserving sum of squared differences", "dctmax", "chroma", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "sub-pel motion estimation quality", "dtg_active_format", "limit motion vectors range (1023 for DivX player)", "ibias", "intra quant bias", "pbias", "inter quant bias", "global_quality", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate", "deflate-based coder", "context", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp (default)", "bits", "use fewest bits", "use best rate distortion", "stream_codec_tag", "scene change threshold", "lmin", "minimum Lagrange factor (VBR)", "lmax", "maximum Lagrange factor (VBR)", "noise reduction", "number of bits which should be loaded into the rc buffer before decoding starts", "error", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "unknown", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "skip_threshold", "frame skip threshold", "skip_factor", "frame skip factor", "skip_exp", "frame skip exponent", "skipcmp", "frame skip compare function", "border_mask", "increase the quantizer for macroblocks close to borders", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "mepc", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "discard no frame", "default", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "brd_scale", "downscale frames for dynamic B-frame decision", "minimum interval between IDR-frames", "reference frames to consider for motion compensation", "chromaoffset", "chroma QP offset from luma", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "b_sensitivity", "adjust sensitivity of b_frame_strategy 1", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "request_channels", "set desired number of audio channels", "bits_per_raw_sample", "channel_layout", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color_trc", "colorspace", "color_range", "chroma_sample_location", "log_level_offset", "set the log level offset", "slices", "number of slices, used in parallelized encoding", "select multithreading type", "slice", "frame", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "refcounted_frames", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "sample_rate", "type", "forced", "unknown/invalid code", "width and height must be multiplies of 4\n", "PCM packet too small\n", "unsupported sample depth (%d)\n", "reserved sample rate (%d)\n", "reserved channel configuration (%d)\n", "PCM DVD unsupported sample depth %i\n", "block_size has changed\n", "PCM signed 16|20|24-bit big-endian for DVD media", "Invalid sample_size\n", "codec ids mismatch\n", "Invalid PCM packet, data has size %d but at least a size of %d was expected\n", "PCM channels out of bounds\n", "this is not PCX encoded data\n", "invalid image dimensions\n", "PCX data is corrupted\n", "invalid PCX file\n", "File is too short\n", "image data possibly corrupted\n", "expected palette after image data\n", "Bitmap dimensions larger than video.\n", "too much RLE data\n", "Subtitle out of video bounds. x = %d, y = %d, video width = %d, video height = %d.\n", "RLE data length %u is %u bytes shorter than expected\n", "Decoded %d pixels, when line should be %d pixels\n", "Insufficient RLE data for subtitle\n", "Unknown subtitle segment type 0x%x, length %d\n", "pgssub", "PGS subtitle decoder", "forced_subs_only", "Only show forced subtitles", "Unsupported bit depth", "Missing png signature\n", "inflateInit returned error %d\n", "No bytes left\n", "chunk too big\n", "png: tag=%c%c%c%c length=%u\n", "Invalid image size\n", "width=%d height=%d depth=%d color_type=%d compression_type=%d filter_type=%d interlace_type=%d\n", "pHYs after IDAT\n", "IDAT without IHDR\n", "unsupported bit depth %d and color type %d\n", "inflate returned error %d\n", "%d undecompressed bytes left in buffer\n", "Broken tEXt chunk\n", "Broken zTXt chunk\n", "IEND without all image\n", "MPNG", "WIDTH", "HEIGHT", "DEPTH", "MAXVAL", "TUPLTYPE", "TUPLETYPE", "ENDHDR", "Invalid maxval: %d\n", "Unsupported pixel format\n", "icpf", "error, wrong header size\n", "unsupported version: %d\n", "picture resolution change: %dx%d -> %dx%d\n", "Invalid alpha mode %d\n", "error, wrong picture header size\n", "error, wrong picture data size\n", "unsupported slice resolution: %dx%d\n", "error, wrong slice count\n", "error, wrong slice data size\n", "error, slice out of bounds\n", "error wrong mb count y %d h %d\n", "error decoding picture header\n", "error decoding picture\n", "invalid plane data size\n", "ProRes", "invalid frame\n", "frame data too small\n", "unsupported header version: %d\n", "picture dimension changed: old: %d x %d, new: %d x %d\n", "unsupported frame type: %d\n", "unsupported picture format: %d\n", "header data too small\n", "picture header too small\n", "picture data too small\n", "unsupported slice dimension: %d x %d\n", "invalid number of slices\n", "slice table too small\n", "out of slice data\n", "slice data too small\n", "invalid data size\n", "prores_lgpl", "Final thread update failed\n", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "libavcodec/pthread.c", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "Application has requested %d threads. Using a thread count greater than %d is not recommended.\n", "Image format not RGB15", "offset != 0x2c", "incomplete packet\n", "Blank frame handling", "Frame #%d, IFQ: %s\n", "Bitrate is 1/8 and first 16 bits are on.", "Wrong data in reserved frame area.", "Codebook gain sanity check failed.", "Cannot initialize pitch filter.", "Badly received packets in frame.", "extradata missing or truncated\n", "frmaQDM", "not enough extradata (%i)\n", "stream is QDMC version 1, which is not supported\n", "extradata size too small, %i < %i\n", "size: %d\n", "invalid extradata, expecting QDCA\n", "data block size too large (%u)\n", "Unknown FFT order (%d), contact the developers!\n", "FFT size %d not power of 2.\n", "This file triggers some untested code. Please contact the developers.\n", "coding method invalid\n", "Invalid 8bit codeword\n", "Invalid 7bit codeword\n", "index %d out of type30_dequant array\n", "index %d out of type34_delta array\n", "overread in qdm2_fft_decode_tones()\n", "value %d in qdm2_get_vlc too large\n", "Superblock follows\n", "Subpacket: type=%d size=%d start_offs=%x\n", "bad superblock type\n", "bad packet checksum\n", "This file triggers some missing code. Please contact the developers.\nPosition: %s\n", "too many packet bytes", "packet type 8", "packet type 15", "!superblocktype_2_3", "has errors, and C list is not empty", "Error color count - %i(0x%X)\n", "Palette index out of range: %u\n", "Bogus motion vector (%i,%i), block size %ix%i at %i,%i\n", "Problem: pixel_ptr = %d, pixel_limit = %d\n", "Unsupported colorspace: %d bits/sample?\n", "Overflow. Broken sample?\n", "real_144", "Error! Input buffer is too small [%d<%d]\n", "unsupported block align\n", "real_288", "LSD:", "Extradata is not groovy, dude\n", "Unknown version %X", "Invalid coding parameters %d Hz %d ch\n", "invalid frame size %d\n", "Wrong packet's breath smells of wrong data!\n", "Wrong packet tails are wrong!\n", "too short packets are too short!\n", "short packets are short!\n", "I'm pedaling backwards\n", "Decoder's stomach is crying, it ate too many samples\n", "Sir, I got carsick in your office. Not decoding the rest of packet.\n", "avctx->bits_per_coded_sample == 2", "libavcodec/rawdec.c", "Invalid buffer size, packet size %d < expected frame_size %d\n", "I420", "yuv2", "YVYU", "Invalid pixel format.\n", "rawdec", "top field first", "<br/>", "<br>", "remove_extra", "audioresample", "Resampling with input channels greater than %d is unsupported.\n", "Unsupported audio resampling. Allowed output channels for %d input channel%s", "Can't allocate memory for resample context.\n", "Cannot convert %s sample format to s16 sample format\n", "Cannot convert s16 sample format to %s sample format\n", "Could not allocate buffer\n", "Audio sample format conversion failed\n", "ReSampleContext", "invalid extradata size\n", "invalid video_base\n", "motion vector out of bounds: MV = (%d, %d), boundaries = (0, 0, %d, %d)\n", "Invalid decode type. Invalid header?\n", "Chunk does not fit in input buffer\n", "Dimensions must be a multiple of 16\n", "roqvideo", "First chunk byte is 0x%02x instead of 0xe1\n", "MOV chunk size != encoded chunk size; using MOV chunk size\n", "warning: block counter just went negative (this should not happen)\n", "Unknown opcode %d in rpza chunk. Skip remaining %d bytes of chunk data.\n", "Extradata is too small.\n", "unknown header %X\n", "RV1/2 version", "ver:%X ver0:%X\n", "Invalid slice count: %d.\n", "marker missing\n", "pb frame", "Invalid qscale value: 0\n", "low delay B\n", "early B-frame\n", "reserved bit set\n", "Extradata too small.\n", "attempting to change resolution to %dx%d\n", "F %d/%d\n", "messed up order, possible from seeking? skipping current b frame\n", "num:%5d x:%2d y:%2d type:%d qscale:%2d rnd:%d\n", "s->pict_type != AV_PICTURE_TYPE_B || !s->low_delay", "libavcodec/rv10.c", "HEADER ERROR\n", "POS ERROR %d %d\n", "COUNT ERROR\n", "Slice type mismatch\n", "update size from %d to %d\n", "ERROR at MB %d %d\n", "chroma dc error\n", "Insufficient extradata - need at least %d bytes, got %d\n", "Incorrect MB type code\n", "dquant needed\n", "Extradata does not contain selected resolution\n", "Incorrect intra prediction code\n", "Incorrect intra prediction mode\n", "Incorrect or unknown slice header\n", "Size mismatch\n", "Slice indicates MB offset %d, got %d\n", "Need DQUANT\n", "Slice offset is invalid\n", "First slice header is incorrect\n", "Invalid decoder state: B-frame without reference data.\n", "New frame but still %d MB left.\n", "Changing dimensions to %dx%d\n", "Slice size is invalid\n", "marking unfished frame as finished\n", "Dquant for P-frame\n", "Dquant for B-frame\n", "frame is too short\n", "frame has invalid header\n", "ID=Source", "ID=\"Source\"", "&nbsp;", "{\\i1}%s{\\i0}\\N", "%s\r\n", "MV is invalid \n", "unknown/unsupported compression type", "insufficient data for frame\n", "insufficient data for raw frame\n", "error allocating buffers\n", "RLE buffer allocation failed\n", "incorrect chunk size %d\n", "incorrect palette block size %d\n", "dimensions are invalid\n", "error resizing buffers\n", "decoded size is too large\n", "invalid motion base value %d\n", "subcodec 37 compression %d not implemented\n", "subcodec 47 compression %d not implemented\n", "unknown subcodec %d", "incorrect palette change block size %d\n", "unknown/unsupported chunk %x\n", "too short input frame (%d bytes)\n", "variable size frames are not implemented\n", "subcodec %d: error decoding frame\n", "subcodec %d", "ignoring invalid motion vector (%i, %i)->(%u, %u), block size = %u\n", "buf_size too small (%d)\n", "wrong channel number\n", "wrong dimension number\n", "wrong picture format\n", "opcode %d", "ajkg", "missing shorten magic 'ajkg'\n", "No channels reported\n", "too many channels: %d\n", "invalid or unsupported block size: %d\n", "nmean too large\n", "s->blocksize + s->nwrap too large\n", "unknown audio type\n", "missing verbatim section at beginning of stream\n", "header is wrong size: %d\n", "missing RIFF tag\n", "missing WAVE tag\n", "no fmt chunk found\n", "fmt chunk was too short\n", "unsupported wave format\n", "unsupported number of bits per sample: %d\n", "%d header bytes unparsed\n", "error allocating bitstream buffer\n", "unknown shorten function %d\n", "Increasing block size is not supported\n", "invalid pred_order %d\n", "Invalid block_align: %d. Mode %s guessed based on bitrate: %d\n", "Mode: %s\n", "Error processing packet: packet size (%d) too small\n", "Tree size exceeded!\n", "length too long\n", "packet is too big\n", "Sound: no data\n", "channels mismatch\n", "sample format mismatch\n", "Cannot build VLC table\n", "invalid vlc\n", "size too large\n", "Skipping low bytes tree\n", "Skipping high bytes tree\n", "Huffman codes out of range\n", "Extradata missing!\n", "Skipping MMAP tree\n", "Skipping MCLR tree\n", "Skipping FULL tree\n", "Skipping TYPE tree\n", "smackaud", "smackvid", "warning: MOV chunk size != encoded chunk size (%d != %d); using MOV chunk size\n", "SMC decoder just went out of bounds (row ptr = %d, height = %d)\n", "encountered repeat block opcode (%02X) but no blocks rendered yet\n", "encountered repeat block opcode (%02X) but not enough blocks rendered yet\n", "0xF0 opcode", "Invalid number of frames per jpeg.\n", "MJPEG codec not found\n", "MJPEG codec failed to open\n", "Invalid height\n", "smvjpeg", "SMV JPEG", "SMVJPEG decoder", "pixel format changed\n", "No reference frames\n", "s->last_picture[i]->data[0] != s->current_picture->data[0]", "libavcodec/snow.c", "buf->data_stack_top >= 0", "libavcodec/snow_dwt.c", "Error s->version is %d\n", "Error s->spatial_decomposition_count is %d\n", "unsupported color subsample mode %d %d\n", "unsupported color space\n", "Error s->max_ref_frames is %d\n", "spatial_decomposition_type %d not supported\n", "spatial_decomposition_count %d too large for size\n", "block_max_depth= %d is too large\n", "Invalid ref\n", "keyframe:%d qlog:%d\n", "error at end of frame\n", "No mandatory headers present\n", "Unsupported Sonic version, please report\n", "Sonicv2 chans: %d samprate: %d\n", "Only mono and stereo streams are supported by now\n", "invalid decorrelation %d\n", "invalid downsampling value\n", "Custom quant table\n", "Sonic: ver: %d ls: %d dr: %d taps: %d block: %d frame: %d downsamp: %d\n", "%d:%2d:%2d%*1[,.]%3d --> %d:%2d:%2d%*1[,.]%3d%*[ ]X1:%u X2:%u Y1:%u Y2:%u", "{\\an1}{\\move(%d,%d,%d,%d)}", "{\\an1}{\\pos(%d,%d)}", "{\\an%*1u}%n", "{\\%*[^}]}%n", "{%*1[CcFfoPSsYy]:%*[^}]}%n", "%127[^>]>%n", "font", "size=", "{\\fs%u}", "color=", "{\\c&H%X&}", "face=", "{\\fn%s}", "bisu", "{\\%c%d}", "</%s>", "%*u:%*u:%*u.%*u,%*u:%*u:%*u.%*u%c", "AVPacket is not clean (contains timing information). You need to upgrade your libavformat or sanitize your packet.\n", "[br]", "this is not sunras encoded data\n", "TIFF/IFF/EXPERIMENTAL (compression) type", "invalid (compression) type\n", "invalid image size\n", "Unknown colormap type", "invalid colormap type\n", "unsupported (compression) type\n", "invalid depth\n", "useless colormap found or file is corrupted, trying to recover\n", "invalid colormap length\n", "Invalid frame type.\n", "embedded message:\n%s\n", "Error in svq1_decode_block %i (keyframe)\n", "SEQH", "watermark size: %dx%d\n", "u1: %x u2: %x u3: %x compressed data size: %d offset: %d\n", "could not uncompress watermark logo\n", "watermark key %#x\n", "svq3 memory allocation failed\n", "invalid MV vlc\n", "unsupported slice header (%02X)\n", "slice after bitstream end\n", "illegal slice type %d \n", "%c hpel:%d, tpel:%d aqp:%d qp:%d, slice_num:%02X\n", "error in B-frame picture id\n", "luma prediction:%d\n", "weird prediction\n", "ff_h264_check_intra_pred_mode < 0\n", "cbp_vlc=%d\n", "qscale:%d\n", "error while decoding intra luma dc\n", "error while decoding block\n", "error while decoding chroma dc block\n", "error while decoding chroma ac block\n", "frame num %d incomplete pic x %d y %d left %d\n", "frame num %d left %d\n", "missing sync id\n", "invalid/unsupported bits per sample: %d\n", "CRC error\n", "unsupported codec: %d\n", "unsupported data type: %d\n", "unsupported number of channels: %d\n", "unsupported/invalid number of samples\n", "overread\n", "underread\n", "Not enough data to read header\n", "File without colormap has colormap information set.\n", "Bit depth %i is not supported\n", "Incorrect palette: %i colors with offset %i\n", "Palette entry size %i bits is not supported\n", "Not enough data to read palette\n", "Ran ouf of data before end-of-image\n", "Packet went out of bounds\n", "Not enough data available for image\n", "SubViewer1 subtitle", "PJS subtitle", "Raw text subtitle", "subviewer1 decoder", "pjs decoder", "vplayer decoder", "text decoder", "keep_ass_markup", "Set if ASS tags must be escaped", "This format is not supported (bpp=%d, %d components)\n", "Samples per pixel requires a single value, many provided\n", "Samples per pixel %d is too large\n", "JPEG compression", "Incorrect value of rows per strip\n", "Tag referencing position outside the image\n", "Tiled images are not supported\n", "Color mode %d is not supported\n", "Unknown FillOrder value %d, trying default one\n", "ModelPixelScaleTag", "Error allocating temporary buffer\n", "ModelTransformationTag", "ModelTiepointTag", "GeoTIFF_Version", "GeoTIFF_Key_Revision", "GeoTIFF key directory buffer shorter than specified\n", "undefined", "User-Defined", "Unknown-%d", "Invalid GeoTIFF key %d\n", "%f%s", "artist", "copyright", "date", "document_name", "computer", "description", "make", "model", "page_name", "page_number", "software", "Unknown or unsupported tag %d/0X%0X\n", "Invalid TIFF header\n", "IFD offset is greater than image size\n", "Unknown or unsupported GeoTIFF key %d\n", "Type of GeoTIFF key %d is wrong\n", "Writing metadata with key '%s' failed\n", "Image data is missing\n", "This format is not supported (bpp=%d, bppcount=%d)\n", "Image data size missing\n", "rps %d invalid\n", "Invalid strip size/offset\n", "Uncompressing failed (%lu of %lu) with error %d\n", "Old style LZW is unsupported\n", "Error initializing LZW decoder\n", "Uncompressed fax mode", "Source data overread\n", "Read went out of bounds\n", "Copy went out of bounds\n", "Decoded only %i bytes of %i\n", "%s%7i:%-7i", "%s%7i", "%s%f", "%s%5i", "%s%3i", "VertCS_Newlyn", "VertCS_North_American_Vertical_Datum_1929", "VertCS_North_American_Vertical_Datum_1988", "VertCS_Yellow_Sea_1956", "VertCS_Baltic_Sea", "VertCS_Caspian_Sea", "VertCS_Airy_1830_ellipsoid", "VertCS_Airy_Modified_1849_ellipsoid", "VertCS_ANS_ellipsoid", "VertCS_Bessel_1841_ellipsoid", "VertCS_Bessel_Modified_ellipsoid", "VertCS_Bessel_Namibia_ellipsoid", "VertCS_Clarke_1858_ellipsoid", "VertCS_Clarke_1866_ellipsoid", "VertCS_Clarke_1880_Benoit_ellipsoid", "VertCS_Clarke_1880_IGN_ellipsoid", "VertCS_Clarke_1880_RGS_ellipsoid", "VertCS_Clarke_1880_Arc_ellipsoid", "VertCS_Clarke_1880_SGA_1922_ellipsoid", "VertCS_Everest_1830_1937_Adjustment_ellipsoid", "VertCS_Everest_1830_1967_Definition_ellipsoid", "VertCS_Everest_1830_1975_Definition_ellipsoid", "VertCS_Everest_1830_Modified_ellipsoid", "VertCS_GRS_1980_ellipsoid", "VertCS_Helmert_1906_ellipsoid", "VertCS_INS_ellipsoid", "VertCS_International_1924_ellipsoid", "VertCS_International_1967_ellipsoid", "VertCS_Krassowsky_1940_ellipsoid", "VertCS_NWL_9D_ellipsoid", "VertCS_NWL_10D_ellipsoid", "VertCS_Plessis_1817_ellipsoid", "VertCS_Struve_1860_ellipsoid", "VertCS_War_Office_ellipsoid", "VertCS_WGS_84_ellipsoid", "VertCS_GEM_10C_ellipsoid", "VertCS_OSU86F_ellipsoid", "VertCS_OSU91A_ellipsoid", "CT_TransverseMercator", "CT_TransvMercator_Modified_Alaska", "CT_ObliqueMercator", "CT_ObliqueMercator_Laborde", "CT_ObliqueMercator_Rosenmund", "CT_ObliqueMercator_Spherical", "CT_Mercator", "CT_LambertConfConic_2SP", "CT_LambertConfConic_Helmert", "CT_LambertAzimEqualArea", "CT_AlbersEqualArea", "CT_AzimuthalEquidistant", "CT_EquidistantConic", "CT_Stereographic", "CT_PolarStereographic", "CT_ObliqueStereographic", "CT_Equirectangular", "CT_CassiniSoldner", "CT_Gnomonic", "CT_MillerCylindrical", "CT_Orthographic", "CT_Polyconic", "CT_Robinson", "CT_Sinusoidal", "CT_VanDerGrinten", "CT_NewZealandMapGrid", "CT_TransvMercator_SouthOriented", "Proj_Alabama_CS27_East", "Proj_Alabama_CS27_West", "Proj_Alabama_CS83_East", "Proj_Alabama_CS83_West", "Proj_Arizona_Coordinate_System_east", "Proj_Arizona_Coordinate_System_Central", "Proj_Arizona_Coordinate_System_west", "Proj_Arizona_CS83_east", "Proj_Arizona_CS83_Central", "Proj_Arizona_CS83_west", "Proj_Arkansas_CS27_North", "Proj_Arkansas_CS27_South", "Proj_Arkansas_CS83_North", "Proj_Arkansas_CS83_South", "Proj_California_CS27_I", "Proj_California_CS27_II", "Proj_California_CS27_III", "Proj_California_CS27_IV", "Proj_California_CS27_V", "Proj_California_CS27_VI", "Proj_California_CS27_VII", "Proj_California_CS83_1", "Proj_California_CS83_2", "Proj_California_CS83_3", "Proj_California_CS83_4", "Proj_California_CS83_5", "Proj_California_CS83_6", "Proj_Colorado_CS27_North", "Proj_Colorado_CS27_Central", "Proj_Colorado_CS27_South", "Proj_Colorado_CS83_North", "Proj_Colorado_CS83_Central", "Proj_Colorado_CS83_South", "Proj_Connecticut_CS27", "Proj_Connecticut_CS83", "Proj_Delaware_CS27", "Proj_Delaware_CS83", "Proj_Florida_CS27_East", "Proj_Florida_CS27_West", "Proj_Florida_CS27_North", "Proj_Florida_CS83_East", "Proj_Florida_CS83_West", "Proj_Florida_CS83_North", "Proj_Georgia_CS27_East", "Proj_Georgia_CS27_West", "Proj_Georgia_CS83_East", "Proj_Georgia_CS83_West", "Proj_Idaho_CS27_East", "Proj_Idaho_CS27_Central", "Proj_Idaho_CS27_West", "Proj_Idaho_CS83_East", "Proj_Idaho_CS83_Central", "Proj_Idaho_CS83_West", "Proj_Illinois_CS27_East", "Proj_Illinois_CS27_West", "Proj_Illinois_CS83_East", "Proj_Illinois_CS83_West", "Proj_Indiana_CS27_East", "Proj_Indiana_CS27_West", "Proj_Indiana_CS83_East", "Proj_Indiana_CS83_West", "Proj_Iowa_CS27_North", "Proj_Iowa_CS27_South", "Proj_Iowa_CS83_North", "Proj_Iowa_CS83_South", "Proj_Kansas_CS27_North", "Proj_Kansas_CS27_South", "Proj_Kansas_CS83_North", "Proj_Kansas_CS83_South", "Proj_Kentucky_CS27_North", "Proj_Kentucky_CS27_South", "Proj_Kentucky_CS83_North", "Proj_Kentucky_CS83_South", "Proj_Louisiana_CS27_North", "Proj_Louisiana_CS27_South", "Proj_Louisiana_CS83_North", "Proj_Louisiana_CS83_South", "Proj_Maine_CS27_East", "Proj_Maine_CS27_West", "Proj_Maine_CS83_East", "Proj_Maine_CS83_West", "Proj_Maryland_CS27", "Proj_Maryland_CS83", "Proj_Massachusetts_CS27_Mainland", "Proj_Massachusetts_CS27_Island", "Proj_Massachusetts_CS83_Mainland", "Proj_Massachusetts_CS83_Island", "Proj_Michigan_State_Plane_East", "Proj_Michigan_State_Plane_Old_Central", "Proj_Michigan_State_Plane_West", "Proj_Michigan_CS27_North", "Proj_Michigan_CS27_Central", "Proj_Michigan_CS27_South", "Proj_Michigan_CS83_North", "Proj_Michigan_CS83_Central", "Proj_Michigan_CS83_South", "Proj_Minnesota_CS27_North", "Proj_Minnesota_CS27_Central", "Proj_Minnesota_CS27_South", "Proj_Minnesota_CS83_North", "Proj_Minnesota_CS83_Central", "Proj_Minnesota_CS83_South", "Proj_Mississippi_CS27_East", "Proj_Mississippi_CS27_West", "Proj_Mississippi_CS83_East", "Proj_Mississippi_CS83_West", "Proj_Missouri_CS27_East", "Proj_Missouri_CS27_Central", "Proj_Missouri_CS27_West", "Proj_Missouri_CS83_East", "Proj_Missouri_CS83_Central", "Proj_Missouri_CS83_West", "Proj_Montana_CS27_North", "Proj_Montana_CS27_Central", "Proj_Montana_CS27_South", "Proj_Montana_CS83", "Proj_Nebraska_CS27_North", "Proj_Nebraska_CS27_South", "Proj_Nebraska_CS83", "Proj_Nevada_CS27_East", "Proj_Nevada_CS27_Central", "Proj_Nevada_CS27_West", "Proj_Nevada_CS83_East", "Proj_Nevada_CS83_Central", "Proj_Nevada_CS83_West", "Proj_New_Hampshire_CS27", "Proj_New_Hampshire_CS83", "Proj_New_Jersey_CS27", "Proj_New_Jersey_CS83", "Proj_New_Mexico_CS27_East", "Proj_New_Mexico_CS27_Central", "Proj_New_Mexico_CS27_West", "Proj_New_Mexico_CS83_East", "Proj_New_Mexico_CS83_Central", "Proj_New_Mexico_CS83_West", "Proj_New_York_CS27_East", "Proj_New_York_CS27_Central", "Proj_New_York_CS27_West", "Proj_New_York_CS27_Long_Island", "Proj_New_York_CS83_East", "Proj_New_York_CS83_Central", "Proj_New_York_CS83_West", "Proj_New_York_CS83_Long_Island", "Proj_North_Carolina_CS27", "Proj_North_Carolina_CS83", "Proj_North_Dakota_CS27_North", "Proj_North_Dakota_CS27_South", "Proj_North_Dakota_CS83_North", "Proj_North_Dakota_CS83_South", "Proj_Ohio_CS27_North", "Proj_Ohio_CS27_South", "Proj_Ohio_CS83_North", "Proj_Ohio_CS83_South", "Proj_Oklahoma_CS27_North", "Proj_Oklahoma_CS27_South", "Proj_Oklahoma_CS83_North", "Proj_Oklahoma_CS83_South", "Proj_Oregon_CS27_North", "Proj_Oregon_CS27_South", "Proj_Oregon_CS83_North", "Proj_Oregon_CS83_South", "Proj_Pennsylvania_CS27_North", "Proj_Pennsylvania_CS27_South", "Proj_Pennsylvania_CS83_North", "Proj_Pennsylvania_CS83_South", "Proj_Rhode_Island_CS27", "Proj_Rhode_Island_CS83", "Proj_South_Carolina_CS27_North", "Proj_South_Carolina_CS27_South", "Proj_South_Carolina_CS83", "Proj_South_Dakota_CS27_North", "Proj_South_Dakota_CS27_South", "Proj_South_Dakota_CS83_North", "Proj_South_Dakota_CS83_South", "Proj_Tennessee_CS27", "Proj_Tennessee_CS83", "Proj_Texas_CS27_North", "Proj_Texas_CS27_North_Central", "Proj_Texas_CS27_Central", "Proj_Texas_CS27_South_Central", "Proj_Texas_CS27_South", "Proj_Texas_CS83_North", "Proj_Texas_CS83_North_Central", "Proj_Texas_CS83_Central", "Proj_Texas_CS83_South_Central", "Proj_Texas_CS83_South", "Proj_Utah_CS27_North", "Proj_Utah_CS27_Central", "Proj_Utah_CS27_South", "Proj_Utah_CS83_North", "Proj_Utah_CS83_Central", "Proj_Utah_CS83_South", "Proj_Vermont_CS27", "Proj_Vermont_CS83", "Proj_Virginia_CS27_North", "Proj_Virginia_CS27_South", "Proj_Virginia_CS83_North", "Proj_Virginia_CS83_South", "Proj_Washington_CS27_North", "Proj_Washington_CS27_South", "Proj_Washington_CS83_North", "Proj_Washington_CS83_South", "Proj_West_Virginia_CS27_North", "Proj_West_Virginia_CS27_South", "Proj_West_Virginia_CS83_North", "Proj_West_Virginia_CS83_South", "Proj_Wisconsin_CS27_North", "Proj_Wisconsin_CS27_Central", "Proj_Wisconsin_CS27_South", "Proj_Wisconsin_CS83_North", "Proj_Wisconsin_CS83_Central", "Proj_Wisconsin_CS83_South", "Proj_Wyoming_CS27_East", "Proj_Wyoming_CS27_East_Central", "Proj_Wyoming_CS27_West_Central", "Proj_Wyoming_CS27_West", "Proj_Wyoming_CS83_East", "Proj_Wyoming_CS83_East_Central", "Proj_Wyoming_CS83_West_Central", "Proj_Wyoming_CS83_West", "Proj_Alaska_CS27_1", "Proj_Alaska_CS27_2", "Proj_Alaska_CS27_3", "Proj_Alaska_CS27_4", "Proj_Alaska_CS27_5", "Proj_Alaska_CS27_6", "Proj_Alaska_CS27_7", "Proj_Alaska_CS27_8", "Proj_Alaska_CS27_9", "Proj_Alaska_CS27_10", "Proj_Alaska_CS83_1", "Proj_Alaska_CS83_2", "Proj_Alaska_CS83_3", "Proj_Alaska_CS83_4", "Proj_Alaska_CS83_5", "Proj_Alaska_CS83_6", "Proj_Alaska_CS83_7", "Proj_Alaska_CS83_8", "Proj_Alaska_CS83_9", "Proj_Alaska_CS83_10", "Proj_Hawaii_CS27_1", "Proj_Hawaii_CS27_2", "Proj_Hawaii_CS27_3", "Proj_Hawaii_CS27_4", "Proj_Hawaii_CS27_5", "Proj_Hawaii_CS83_1", "Proj_Hawaii_CS83_2", "Proj_Hawaii_CS83_3", "Proj_Hawaii_CS83_4", "Proj_Hawaii_CS83_5", "Proj_Puerto_Rico_CS27", "Proj_St_Croix", "Proj_Puerto_Rico_Virgin_Is", "Proj_BLM_14N_feet", "Proj_BLM_15N_feet", "Proj_BLM_16N_feet", "Proj_BLM_17N_feet", "Proj_Map_Grid_of_Australia_48", "Proj_Map_Grid_of_Australia_49", "Proj_Map_Grid_of_Australia_50", "Proj_Map_Grid_of_Australia_51", "Proj_Map_Grid_of_Australia_52", "Proj_Map_Grid_of_Australia_53", "Proj_Map_Grid_of_Australia_54", "Proj_Map_Grid_of_Australia_55", "Proj_Map_Grid_of_Australia_56", "Proj_Map_Grid_of_Australia_57", "Proj_Map_Grid_of_Australia_58", "Proj_Australian_Map_Grid_48", "Proj_Australian_Map_Grid_49", "Proj_Australian_Map_Grid_50", "Proj_Australian_Map_Grid_51", "Proj_Australian_Map_Grid_52", "Proj_Australian_Map_Grid_53", "Proj_Australian_Map_Grid_54", "Proj_Australian_Map_Grid_55", "Proj_Australian_Map_Grid_56", "Proj_Australian_Map_Grid_57", "Proj_Australian_Map_Grid_58", "Proj_Argentina_1", "Proj_Argentina_2", "Proj_Argentina_3", "Proj_Argentina_4", "Proj_Argentina_5", "Proj_Argentina_6", "Proj_Argentina_7", "Proj_Colombia_3W", "Proj_Colombia_Bogota", "Proj_Colombia_3E", "Proj_Colombia_6E", "Proj_Egypt_Red_Belt", "Proj_Egypt_Purple_Belt", "Proj_Extended_Purple_Belt", "Proj_New_Zealand_North_Island_Nat_Grid", "Proj_New_Zealand_South_Island_Nat_Grid", "Proj_Bahrain_Grid", "Proj_Netherlands_E_Indies_Equatorial", "Proj_RSO_Borneo", "PCS_Adindan_UTM_zone_37N", "PCS_Adindan_UTM_zone_38N", "PCS_AGD66_AMG_zone_48", "PCS_AGD66_AMG_zone_49", "PCS_AGD66_AMG_zone_50", "PCS_AGD66_AMG_zone_51", "PCS_AGD66_AMG_zone_52", "PCS_AGD66_AMG_zone_53", "PCS_AGD66_AMG_zone_54", "PCS_AGD66_AMG_zone_55", "PCS_AGD66_AMG_zone_56", "PCS_AGD66_AMG_zone_57", "PCS_AGD66_AMG_zone_58", "PCS_AGD84_AMG_zone_48", "PCS_AGD84_AMG_zone_49", "PCS_AGD84_AMG_zone_50", "PCS_AGD84_AMG_zone_51", "PCS_AGD84_AMG_zone_52", "PCS_AGD84_AMG_zone_53", "PCS_AGD84_AMG_zone_54", "PCS_AGD84_AMG_zone_55", "PCS_AGD84_AMG_zone_56", "PCS_AGD84_AMG_zone_57", "PCS_AGD84_AMG_zone_58", "PCS_Ain_el_Abd_UTM_zone_37N", "PCS_Ain_el_Abd_UTM_zone_38N", "PCS_Ain_el_Abd_UTM_zone_39N", "PCS_Ain_el_Abd_Bahrain_Grid", "PCS_Afgooye_UTM_zone_38N", "PCS_Afgooye_UTM_zone_39N", "PCS_Lisbon_Portugese_Grid", "PCS_Aratu_UTM_zone_22S", "PCS_Aratu_UTM_zone_23S", "PCS_Aratu_UTM_zone_24S", "PCS_Arc_1950_Lo13", "PCS_Arc_1950_Lo15", "PCS_Arc_1950_Lo17", "PCS_Arc_1950_Lo19", "PCS_Arc_1950_Lo21", "PCS_Arc_1950_Lo23", "PCS_Arc_1950_Lo25", "PCS_Arc_1950_Lo27", "PCS_Arc_1950_Lo29", "PCS_Arc_1950_Lo31", "PCS_Arc_1950_Lo33", "PCS_Arc_1950_Lo35", "PCS_Batavia_NEIEZ", "PCS_Batavia_UTM_zone_48S", "PCS_Batavia_UTM_zone_49S", "PCS_Batavia_UTM_zone_50S", "PCS_Beijing_Gauss_zone_13", "PCS_Beijing_Gauss_zone_14", "PCS_Beijing_Gauss_zone_15", "PCS_Beijing_Gauss_zone_16", "PCS_Beijing_Gauss_zone_17", "PCS_Beijing_Gauss_zone_18", "PCS_Beijing_Gauss_zone_19", "PCS_Beijing_Gauss_zone_20", "PCS_Beijing_Gauss_zone_21", "PCS_Beijing_Gauss_zone_22", "PCS_Beijing_Gauss_zone_23", "PCS_Beijing_Gauss_13N", "PCS_Beijing_Gauss_14N", "PCS_Beijing_Gauss_15N", "PCS_Beijing_Gauss_16N", "PCS_Beijing_Gauss_17N", "PCS_Beijing_Gauss_18N", "PCS_Beijing_Gauss_19N", "PCS_Beijing_Gauss_20N", "PCS_Beijing_Gauss_21N", "PCS_Beijing_Gauss_22N", "PCS_Beijing_Gauss_23N", "PCS_Belge_Lambert_50", "PCS_Bern_1898_Swiss_Old", "PCS_Bogota_UTM_zone_17N", "PCS_Bogota_UTM_zone_18N", "PCS_Bogota_Colombia_3W", "PCS_Bogota_Colombia_Bogota", "PCS_Bogota_Colombia_3E", "PCS_Bogota_Colombia_6E", "PCS_Camacupa_UTM_32S", "PCS_Camacupa_UTM_33S", "PCS_C_Inchauspe_Argentina_1", "PCS_C_Inchauspe_Argentina_2", "PCS_C_Inchauspe_Argentina_3", "PCS_C_Inchauspe_Argentina_4", "PCS_C_Inchauspe_Argentina_5", "PCS_C_Inchauspe_Argentina_6", "PCS_C_Inchauspe_Argentina_7", "PCS_Carthage_UTM_zone_32N", "PCS_Carthage_Nord_Tunisie", "PCS_Carthage_Sud_Tunisie", "PCS_Corrego_Alegre_UTM_23S", "PCS_Corrego_Alegre_UTM_24S", "PCS_Douala_UTM_zone_32N", "PCS_Egypt_1907_Red_Belt", "PCS_Egypt_1907_Purple_Belt", "PCS_Egypt_1907_Ext_Purple", "PCS_ED50_UTM_zone_28N", "PCS_ED50_UTM_zone_29N", "PCS_ED50_UTM_zone_30N", "PCS_ED50_UTM_zone_31N", "PCS_ED50_UTM_zone_32N", "PCS_ED50_UTM_zone_33N", "PCS_ED50_UTM_zone_34N", "PCS_ED50_UTM_zone_35N", "PCS_ED50_UTM_zone_36N", "PCS_ED50_UTM_zone_37N", "PCS_ED50_UTM_zone_38N", "PCS_Fahud_UTM_zone_39N", "PCS_Fahud_UTM_zone_40N", "PCS_Garoua_UTM_zone_33N", "PCS_ID74_UTM_zone_46N", "PCS_ID74_UTM_zone_47N", "PCS_ID74_UTM_zone_48N", "PCS_ID74_UTM_zone_49N", "PCS_ID74_UTM_zone_50N", "PCS_ID74_UTM_zone_51N", "PCS_ID74_UTM_zone_52N", "PCS_ID74_UTM_zone_53N", "PCS_ID74_UTM_zone_46S", "PCS_ID74_UTM_zone_47S", "PCS_ID74_UTM_zone_48S", "PCS_ID74_UTM_zone_49S", "PCS_ID74_UTM_zone_50S", "PCS_ID74_UTM_zone_51S", "PCS_ID74_UTM_zone_52S", "PCS_ID74_UTM_zone_53S", "PCS_ID74_UTM_zone_54S", "PCS_Indian_1954_UTM_47N", "PCS_Indian_1954_UTM_48N", "PCS_Indian_1975_UTM_47N", "PCS_Indian_1975_UTM_48N", "PCS_Jamaica_1875_Old_Grid", "PCS_JAD69_Jamaica_Grid", "PCS_Kalianpur_India_0", "PCS_Kalianpur_India_I", "PCS_Kalianpur_India_IIa", "PCS_Kalianpur_India_IIIa", "PCS_Kalianpur_India_IVa", "PCS_Kalianpur_India_IIb", "PCS_Kalianpur_India_IIIb", "PCS_Kalianpur_India_IVb", "PCS_Kertau_Singapore_Grid", "PCS_Kertau_UTM_zone_47N", "PCS_Kertau_UTM_zone_48N", "PCS_La_Canoa_UTM_zone_20N", "PCS_La_Canoa_UTM_zone_21N", "PCS_PSAD56_UTM_zone_18N", "PCS_PSAD56_UTM_zone_19N", "PCS_PSAD56_UTM_zone_20N", "PCS_PSAD56_UTM_zone_21N", "PCS_PSAD56_UTM_zone_17S", "PCS_PSAD56_UTM_zone_18S", "PCS_PSAD56_UTM_zone_19S", "PCS_PSAD56_UTM_zone_20S", "PCS_PSAD56_Peru_west_zone", "PCS_PSAD56_Peru_central", "PCS_PSAD56_Peru_east_zone", "PCS_Leigon_Ghana_Grid", "PCS_Lome_UTM_zone_31N", "PCS_Luzon_Philippines_I", "PCS_Luzon_Philippines_II", "PCS_Luzon_Philippines_III", "PCS_Luzon_Philippines_IV", "PCS_Luzon_Philippines_V", "PCS_Makassar_NEIEZ", "PCS_Malongo_1987_UTM_32S", "PCS_Merchich_Nord_Maroc", "PCS_Merchich_Sud_Maroc", "PCS_Merchich_Sahara", "PCS_Massawa_UTM_zone_37N", "PCS_Minna_UTM_zone_31N", "PCS_Minna_UTM_zone_32N", "PCS_Minna_Nigeria_West", "PCS_Minna_Nigeria_Mid_Belt", "PCS_Minna_Nigeria_East", "PCS_Mhast_UTM_zone_32S", "PCS_Monte_Mario_Italy_1", "PCS_Monte_Mario_Italy_2", "PCS_M_poraloko_UTM_32N", "PCS_M_poraloko_UTM_32S", "PCS_NAD27_UTM_zone_3N", "PCS_NAD27_UTM_zone_4N", "PCS_NAD27_UTM_zone_5N", "PCS_NAD27_UTM_zone_6N", "PCS_NAD27_UTM_zone_7N", "PCS_NAD27_UTM_zone_8N", "PCS_NAD27_UTM_zone_9N", "PCS_NAD27_UTM_zone_10N", "PCS_NAD27_UTM_zone_11N", "PCS_NAD27_UTM_zone_12N", "PCS_NAD27_UTM_zone_13N", "PCS_NAD27_UTM_zone_14N", "PCS_NAD27_UTM_zone_15N", "PCS_NAD27_UTM_zone_16N", "PCS_NAD27_UTM_zone_17N", "PCS_NAD27_UTM_zone_18N", "PCS_NAD27_UTM_zone_19N", "PCS_NAD27_UTM_zone_20N", "PCS_NAD27_UTM_zone_21N", "PCS_NAD27_UTM_zone_22N", "PCS_NAD27_Alabama_East", "PCS_NAD27_Alabama_West", "PCS_NAD27_Alaska_zone_1", "PCS_NAD27_Alaska_zone_2", "PCS_NAD27_Alaska_zone_3", "PCS_NAD27_Alaska_zone_4", "PCS_NAD27_Alaska_zone_5", "PCS_NAD27_Alaska_zone_6", "PCS_NAD27_Alaska_zone_7", "PCS_NAD27_Alaska_zone_8", "PCS_NAD27_Alaska_zone_9", "PCS_NAD27_Alaska_zone_10", "PCS_NAD27_California_I", "PCS_NAD27_California_II", "PCS_NAD27_California_III", "PCS_NAD27_California_IV", "PCS_NAD27_California_V", "PCS_NAD27_California_VI", "PCS_NAD27_California_VII", "PCS_NAD27_Arizona_East", "PCS_NAD27_Arizona_Central", "PCS_NAD27_Arizona_West", "PCS_NAD27_Arkansas_North", "PCS_NAD27_Arkansas_South", "PCS_NAD27_Colorado_North", "PCS_NAD27_Colorado_Central", "PCS_NAD27_Colorado_South", "PCS_NAD27_Connecticut", "PCS_NAD27_Delaware", "PCS_NAD27_Florida_East", "PCS_NAD27_Florida_West", "PCS_NAD27_Florida_North", "PCS_NAD27_Hawaii_zone_1", "PCS_NAD27_Hawaii_zone_2", "PCS_NAD27_Hawaii_zone_3", "PCS_NAD27_Hawaii_zone_4", "PCS_NAD27_Hawaii_zone_5", "PCS_NAD27_Georgia_East", "PCS_NAD27_Georgia_West", "PCS_NAD27_Idaho_East", "PCS_NAD27_Idaho_Central", "PCS_NAD27_Idaho_West", "PCS_NAD27_Illinois_East", "PCS_NAD27_Illinois_West", "PCS_NAD27_Indiana_East", "PCS_NAD27_BLM_14N_feet", "PCS_NAD27_Indiana_West", "PCS_NAD27_BLM_15N_feet", "PCS_NAD27_Iowa_North", "PCS_NAD27_BLM_16N_feet", "PCS_NAD27_Iowa_South", "PCS_NAD27_BLM_17N_feet", "PCS_NAD27_Kansas_North", "PCS_NAD27_Kansas_South", "PCS_NAD27_Kentucky_North", "PCS_NAD27_Kentucky_South", "PCS_NAD27_Louisiana_North", "PCS_NAD27_Louisiana_South", "PCS_NAD27_Maine_East", "PCS_NAD27_Maine_West", "PCS_NAD27_Maryland", "PCS_NAD27_Massachusetts", "PCS_NAD27_Massachusetts_Is", "PCS_NAD27_Michigan_North", "PCS_NAD27_Michigan_Central", "PCS_NAD27_Michigan_South", "PCS_NAD27_Minnesota_North", "PCS_NAD27_Minnesota_Cent", "PCS_NAD27_Minnesota_South", "PCS_NAD27_Mississippi_East", "PCS_NAD27_Mississippi_West", "PCS_NAD27_Missouri_East", "PCS_NAD27_Missouri_Central", "PCS_NAD27_Missouri_West", "PCS_NAD_Michigan_Michigan_East", "PCS_NAD_Michigan_Michigan_Old_Central", "PCS_NAD_Michigan_Michigan_West", "PCS_NAD83_UTM_zone_3N", "PCS_NAD83_UTM_zone_4N", "PCS_NAD83_UTM_zone_5N", "PCS_NAD83_UTM_zone_6N", "PCS_NAD83_UTM_zone_7N", "PCS_NAD83_UTM_zone_8N", "PCS_NAD83_UTM_zone_9N", "PCS_NAD83_UTM_zone_10N", "PCS_NAD83_UTM_zone_11N", "PCS_NAD83_UTM_zone_12N", "PCS_NAD83_UTM_zone_13N", "PCS_NAD83_UTM_zone_14N", "PCS_NAD83_UTM_zone_15N", "PCS_NAD83_UTM_zone_16N", "PCS_NAD83_UTM_zone_17N", "PCS_NAD83_UTM_zone_18N", "PCS_NAD83_UTM_zone_19N", "PCS_NAD83_UTM_zone_20N", "PCS_NAD83_UTM_zone_21N", "PCS_NAD83_UTM_zone_22N", "PCS_NAD83_UTM_zone_23N", "PCS_NAD83_Alabama_East", "PCS_NAD83_Alabama_West", "PCS_NAD83_Alaska_zone_1", "PCS_NAD83_Alaska_zone_2", "PCS_NAD83_Alaska_zone_3", "PCS_NAD83_Alaska_zone_4", "PCS_NAD83_Alaska_zone_5", "PCS_NAD83_Alaska_zone_6", "PCS_NAD83_Alaska_zone_7", "PCS_NAD83_Alaska_zone_8", "PCS_NAD83_Alaska_zone_9", "PCS_NAD83_Alaska_zone_10", "PCS_NAD83_California_1", "PCS_NAD83_California_2", "PCS_NAD83_California_3", "PCS_NAD83_California_4", "PCS_NAD83_California_5", "PCS_NAD83_California_6", "PCS_NAD83_Arizona_East", "PCS_NAD83_Arizona_Central", "PCS_NAD83_Arizona_West", "PCS_NAD83_Arkansas_North", "PCS_NAD83_Arkansas_South", "PCS_NAD83_Colorado_North", "PCS_NAD83_Colorado_Central", "PCS_NAD83_Colorado_South", "PCS_NAD83_Connecticut", "PCS_NAD83_Delaware", "PCS_NAD83_Florida_East", "PCS_NAD83_Florida_West", "PCS_NAD83_Florida_North", "PCS_NAD83_Hawaii_zone_1", "PCS_NAD83_Hawaii_zone_2", "PCS_NAD83_Hawaii_zone_3", "PCS_NAD83_Hawaii_zone_4", "PCS_NAD83_Hawaii_zone_5", "PCS_NAD83_Georgia_East", "PCS_NAD83_Georgia_West", "PCS_NAD83_Idaho_East", "PCS_NAD83_Idaho_Central", "PCS_NAD83_Idaho_West", "PCS_NAD83_Illinois_East", "PCS_NAD83_Illinois_West", "PCS_NAD83_Indiana_East", "PCS_NAD83_Indiana_West", "PCS_NAD83_Iowa_North", "PCS_NAD83_Iowa_South", "PCS_NAD83_Kansas_North", "PCS_NAD83_Kansas_South", "PCS_NAD83_Kentucky_North", "PCS_NAD83_Kentucky_South", "PCS_NAD83_Louisiana_North", "PCS_NAD83_Louisiana_South", "PCS_NAD83_Maine_East", "PCS_NAD83_Maine_West", "PCS_NAD83_Maryland", "PCS_NAD83_Massachusetts", "PCS_NAD83_Massachusetts_Is", "PCS_NAD83_Michigan_North", "PCS_NAD83_Michigan_Central", "PCS_NAD83_Michigan_South", "PCS_NAD83_Minnesota_North", "PCS_NAD83_Minnesota_Cent", "PCS_NAD83_Minnesota_South", "PCS_NAD83_Mississippi_East", "PCS_NAD83_Mississippi_West", "PCS_NAD83_Missouri_East", "PCS_NAD83_Missouri_Central", "PCS_NAD83_Missouri_West", "PCS_Nahrwan_1967_UTM_38N", "PCS_Nahrwan_1967_UTM_39N", "PCS_Nahrwan_1967_UTM_40N", "PCS_Naparima_UTM_20N", "PCS_GD49_NZ_Map_Grid", "PCS_GD49_North_Island_Grid", "PCS_GD49_South_Island_Grid", "PCS_Datum_73_UTM_zone_29N", "PCS_ATF_Nord_de_Guerre", "PCS_NTF_France_I", "PCS_NTF_France_II", "PCS_NTF_France_III", "PCS_NTF_Nord_France", "PCS_NTF_Centre_France", "PCS_NTF_Sud_France", "PCS_British_National_Grid", "PCS_Point_Noire_UTM_32S", "PCS_GDA94_MGA_zone_48", "PCS_GDA94_MGA_zone_49", "PCS_GDA94_MGA_zone_50", "PCS_GDA94_MGA_zone_51", "PCS_GDA94_MGA_zone_52", "PCS_GDA94_MGA_zone_53", "PCS_GDA94_MGA_zone_54", "PCS_GDA94_MGA_zone_55", "PCS_GDA94_MGA_zone_56", "PCS_GDA94_MGA_zone_57", "PCS_GDA94_MGA_zone_58", "PCS_Pulkovo_Gauss_zone_4", "PCS_Pulkovo_Gauss_zone_5", "PCS_Pulkovo_Gauss_zone_6", "PCS_Pulkovo_Gauss_zone_7", "PCS_Pulkovo_Gauss_zone_8", "PCS_Pulkovo_Gauss_zone_9", "PCS_Pulkovo_Gauss_zone_10", "PCS_Pulkovo_Gauss_zone_11", "PCS_Pulkovo_Gauss_zone_12", "PCS_Pulkovo_Gauss_zone_13", "PCS_Pulkovo_Gauss_zone_14", "PCS_Pulkovo_Gauss_zone_15", "PCS_Pulkovo_Gauss_zone_16", "PCS_Pulkovo_Gauss_zone_17", "PCS_Pulkovo_Gauss_zone_18", "PCS_Pulkovo_Gauss_zone_19", "PCS_Pulkovo_Gauss_zone_20", "PCS_Pulkovo_Gauss_zone_21", "PCS_Pulkovo_Gauss_zone_22", "PCS_Pulkovo_Gauss_zone_23", "PCS_Pulkovo_Gauss_zone_24", "PCS_Pulkovo_Gauss_zone_25", "PCS_Pulkovo_Gauss_zone_26", "PCS_Pulkovo_Gauss_zone_27", "PCS_Pulkovo_Gauss_zone_28", "PCS_Pulkovo_Gauss_zone_29", "PCS_Pulkovo_Gauss_zone_30", "PCS_Pulkovo_Gauss_zone_31", "PCS_Pulkovo_Gauss_zone_32", "PCS_Pulkovo_Gauss_4N", "PCS_Pulkovo_Gauss_5N", "PCS_Pulkovo_Gauss_6N", "PCS_Pulkovo_Gauss_7N", "PCS_Pulkovo_Gauss_8N", "PCS_Pulkovo_Gauss_9N", "PCS_Pulkovo_Gauss_10N", "PCS_Pulkovo_Gauss_11N", "PCS_Pulkovo_Gauss_12N", "PCS_Pulkovo_Gauss_13N", "PCS_Pulkovo_Gauss_14N", "PCS_Pulkovo_Gauss_15N", "PCS_Pulkovo_Gauss_16N", "PCS_Pulkovo_Gauss_17N", "PCS_Pulkovo_Gauss_18N", "PCS_Pulkovo_Gauss_19N", "PCS_Pulkovo_Gauss_20N", "PCS_Pulkovo_Gauss_21N", "PCS_Pulkovo_Gauss_22N", "PCS_Pulkovo_Gauss_23N", "PCS_Pulkovo_Gauss_24N", "PCS_Pulkovo_Gauss_25N", "PCS_Pulkovo_Gauss_26N", "PCS_Pulkovo_Gauss_27N", "PCS_Pulkovo_Gauss_28N", "PCS_Pulkovo_Gauss_29N", "PCS_Pulkovo_Gauss_30N", "PCS_Pulkovo_Gauss_31N", "PCS_Pulkovo_Gauss_32N", "PCS_Qatar_National_Grid", "PCS_RD_Netherlands_Old", "PCS_RD_Netherlands_New", "PCS_SAD69_UTM_zone_18N", "PCS_SAD69_UTM_zone_19N", "PCS_SAD69_UTM_zone_20N", "PCS_SAD69_UTM_zone_21N", "PCS_SAD69_UTM_zone_22N", "PCS_SAD69_UTM_zone_17S", "PCS_SAD69_UTM_zone_18S", "PCS_SAD69_UTM_zone_19S", "PCS_SAD69_UTM_zone_20S", "PCS_SAD69_UTM_zone_21S", "PCS_SAD69_UTM_zone_22S", "PCS_SAD69_UTM_zone_23S", "PCS_SAD69_UTM_zone_24S", "PCS_SAD69_UTM_zone_25S", "PCS_Sapper_Hill_UTM_20S", "PCS_Sapper_Hill_UTM_21S", "PCS_Schwarzeck_UTM_33S", "PCS_Sudan_UTM_zone_35N", "PCS_Sudan_UTM_zone_36N", "PCS_Tananarive_Laborde", "PCS_Tananarive_UTM_38S", "PCS_Tananarive_UTM_39S", "PCS_Timbalai_1948_Borneo", "PCS_Timbalai_1948_UTM_49N", "PCS_Timbalai_1948_UTM_50N", "PCS_TM65_Irish_Nat_Grid", "PCS_Trinidad_1903_Trinidad", "PCS_TC_1948_UTM_zone_39N", "PCS_TC_1948_UTM_zone_40N", "PCS_Voirol_N_Algerie_ancien", "PCS_Voirol_S_Algerie_ancien", "PCS_Voirol_Unifie_N_Algerie", "PCS_Voirol_Unifie_S_Algerie", "PCS_Bern_1938_Swiss_New", "PCS_Nord_Sahara_UTM_29N", "PCS_Nord_Sahara_UTM_30N", "PCS_Nord_Sahara_UTM_31N", "PCS_Nord_Sahara_UTM_32N", "PCS_Yoff_UTM_zone_28N", "PCS_Zanderij_UTM_zone_21N", "PCS_MGI_Austria_West", "PCS_MGI_Austria_Central", "PCS_MGI_Austria_East", "PCS_Belge_Lambert_72", "PCS_DHDN_Germany_zone_1", "PCS_DHDN_Germany_zone_2", "PCS_DHDN_Germany_zone_3", "PCS_DHDN_Germany_zone_4", "PCS_DHDN_Germany_zone_5", "PCS_NAD27_Montana_North", "PCS_NAD27_Montana_Central", "PCS_NAD27_Montana_South", "PCS_NAD27_Nebraska_North", "PCS_NAD27_Nebraska_South", "PCS_NAD27_Nevada_East", "PCS_NAD27_Nevada_Central", "PCS_NAD27_Nevada_West", "PCS_NAD27_New_Hampshire", "PCS_NAD27_New_Jersey", "PCS_NAD27_New_Mexico_East", "PCS_NAD27_New_Mexico_Cent", "PCS_NAD27_New_Mexico_West", "PCS_NAD27_New_York_East", "PCS_NAD27_New_York_Central", "PCS_NAD27_New_York_West", "PCS_NAD27_New_York_Long_Is", "PCS_NAD27_North_Carolina", "PCS_NAD27_North_Dakota_N", "PCS_NAD27_North_Dakota_S", "PCS_NAD27_Ohio_North", "PCS_NAD27_Ohio_South", "PCS_NAD27_Oklahoma_North", "PCS_NAD27_Oklahoma_South", "PCS_NAD27_Oregon_North", "PCS_NAD27_Oregon_South", "PCS_NAD27_Pennsylvania_N", "PCS_NAD27_Pennsylvania_S", "PCS_NAD27_Rhode_Island", "PCS_NAD27_South_Carolina_N", "PCS_NAD27_South_Carolina_S", "PCS_NAD27_South_Dakota_N", "PCS_NAD27_South_Dakota_S", "PCS_NAD27_Tennessee", "PCS_NAD27_Texas_North", "PCS_NAD27_Texas_North_Cen", "PCS_NAD27_Texas_Central", "PCS_NAD27_Texas_South_Cen", "PCS_NAD27_Texas_South", "PCS_NAD27_Utah_North", "PCS_NAD27_Utah_Central", "PCS_NAD27_Utah_South", "PCS_NAD27_Vermont", "PCS_NAD27_Virginia_North", "PCS_NAD27_Virginia_South", "PCS_NAD27_Washington_North", "PCS_NAD27_Washington_South", "PCS_NAD27_West_Virginia_N", "PCS_NAD27_West_Virginia_S", "PCS_NAD27_Wisconsin_North", "PCS_NAD27_Wisconsin_Cen", "PCS_NAD27_Wisconsin_South", "PCS_NAD27_Wyoming_East", "PCS_NAD27_Wyoming_E_Cen", "PCS_NAD27_Wyoming_W_Cen", "PCS_NAD27_Wyoming_West", "PCS_NAD27_Puerto_Rico", "PCS_NAD27_St_Croix", "PCS_NAD83_Montana", "PCS_NAD83_Nebraska", "PCS_NAD83_Nevada_East", "PCS_NAD83_Nevada_Central", "PCS_NAD83_Nevada_West", "PCS_NAD83_New_Hampshire", "PCS_NAD83_New_Jersey", "PCS_NAD83_New_Mexico_East", "PCS_NAD83_New_Mexico_Cent", "PCS_NAD83_New_Mexico_West", "PCS_NAD83_New_York_East", "PCS_NAD83_New_York_Central", "PCS_NAD83_New_York_West", "PCS_NAD83_New_York_Long_Is", "PCS_NAD83_North_Carolina", "PCS_NAD83_North_Dakota_N", "PCS_NAD83_North_Dakota_S", "PCS_NAD83_Ohio_North", "PCS_NAD83_Ohio_South", "PCS_NAD83_Oklahoma_North", "PCS_NAD83_Oklahoma_South", "PCS_NAD83_Oregon_North", "PCS_NAD83_Oregon_South", "PCS_NAD83_Pennsylvania_N", "PCS_NAD83_Pennsylvania_S", "PCS_NAD83_Rhode_Island", "PCS_NAD83_South_Carolina", "PCS_NAD83_South_Dakota_N", "PCS_NAD83_South_Dakota_S", "PCS_NAD83_Tennessee", "PCS_NAD83_Texas_North", "PCS_NAD83_Texas_North_Cen", "PCS_NAD83_Texas_Central", "PCS_NAD83_Texas_South_Cen", "PCS_NAD83_Texas_South", "PCS_NAD83_Utah_North", "PCS_NAD83_Utah_Central", "PCS_NAD83_Utah_South", "PCS_NAD83_Vermont", "PCS_NAD83_Virginia_North", "PCS_NAD83_Virginia_South", "PCS_NAD83_Washington_North", "PCS_NAD83_Washington_South", "PCS_NAD83_West_Virginia_N", "PCS_NAD83_West_Virginia_S", "PCS_NAD83_Wisconsin_North", "PCS_NAD83_Wisconsin_Cen", "PCS_NAD83_Wisconsin_South", "PCS_NAD83_Wyoming_East", "PCS_NAD83_Wyoming_E_Cen", "PCS_NAD83_Wyoming_W_Cen", "PCS_NAD83_Wyoming_West", "PCS_NAD83_Puerto_Rico_Virgin_Is", "PCS_WGS72_UTM_zone_1N", "PCS_WGS72_UTM_zone_2N", "PCS_WGS72_UTM_zone_3N", "PCS_WGS72_UTM_zone_4N", "PCS_WGS72_UTM_zone_5N", "PCS_WGS72_UTM_zone_6N", "PCS_WGS72_UTM_zone_7N", "PCS_WGS72_UTM_zone_8N", "PCS_WGS72_UTM_zone_9N", "PCS_WGS72_UTM_zone_10N", "PCS_WGS72_UTM_zone_11N", "PCS_WGS72_UTM_zone_12N", "PCS_WGS72_UTM_zone_13N", "PCS_WGS72_UTM_zone_14N", "PCS_WGS72_UTM_zone_15N", "PCS_WGS72_UTM_zone_16N", "PCS_WGS72_UTM_zone_17N", "PCS_WGS72_UTM_zone_18N", "PCS_WGS72_UTM_zone_19N", "PCS_WGS72_UTM_zone_20N", "PCS_WGS72_UTM_zone_21N", "PCS_WGS72_UTM_zone_22N", "PCS_WGS72_UTM_zone_23N", "PCS_WGS72_UTM_zone_24N", "PCS_WGS72_UTM_zone_25N", "PCS_WGS72_UTM_zone_26N", "PCS_WGS72_UTM_zone_27N", "PCS_WGS72_UTM_zone_28N", "PCS_WGS72_UTM_zone_29N", "PCS_WGS72_UTM_zone_30N", "PCS_WGS72_UTM_zone_31N", "PCS_WGS72_UTM_zone_32N", "PCS_WGS72_UTM_zone_33N", "PCS_WGS72_UTM_zone_34N", "PCS_WGS72_UTM_zone_35N", "PCS_WGS72_UTM_zone_36N", "PCS_WGS72_UTM_zone_37N", "PCS_WGS72_UTM_zone_38N", "PCS_WGS72_UTM_zone_39N", "PCS_WGS72_UTM_zone_40N", "PCS_WGS72_UTM_zone_41N", "PCS_WGS72_UTM_zone_42N", "PCS_WGS72_UTM_zone_43N", "PCS_WGS72_UTM_zone_44N", "PCS_WGS72_UTM_zone_45N", "PCS_WGS72_UTM_zone_46N", "PCS_WGS72_UTM_zone_47N", "PCS_WGS72_UTM_zone_48N", "PCS_WGS72_UTM_zone_49N", "PCS_WGS72_UTM_zone_50N", "PCS_WGS72_UTM_zone_51N", "PCS_WGS72_UTM_zone_52N", "PCS_WGS72_UTM_zone_53N", "PCS_WGS72_UTM_zone_54N", "PCS_WGS72_UTM_zone_55N", "PCS_WGS72_UTM_zone_56N", "PCS_WGS72_UTM_zone_57N", "PCS_WGS72_UTM_zone_58N", "PCS_WGS72_UTM_zone_59N", "PCS_WGS72_UTM_zone_60N", "PCS_WGS72_UTM_zone_1S", "PCS_WGS72_UTM_zone_2S", "PCS_WGS72_UTM_zone_3S", "PCS_WGS72_UTM_zone_4S", "PCS_WGS72_UTM_zone_5S", "PCS_WGS72_UTM_zone_6S", "PCS_WGS72_UTM_zone_7S", "PCS_WGS72_UTM_zone_8S", "PCS_WGS72_UTM_zone_9S", "PCS_WGS72_UTM_zone_10S", "PCS_WGS72_UTM_zone_11S", "PCS_WGS72_UTM_zone_12S", "PCS_WGS72_UTM_zone_13S", "PCS_WGS72_UTM_zone_14S", "PCS_WGS72_UTM_zone_15S", "PCS_WGS72_UTM_zone_16S", "PCS_WGS72_UTM_zone_17S", "PCS_WGS72_UTM_zone_18S", "PCS_WGS72_UTM_zone_19S", "PCS_WGS72_UTM_zone_20S", "PCS_WGS72_UTM_zone_21S", "PCS_WGS72_UTM_zone_22S", "PCS_WGS72_UTM_zone_23S", "PCS_WGS72_UTM_zone_24S", "PCS_WGS72_UTM_zone_25S", "PCS_WGS72_UTM_zone_26S", "PCS_WGS72_UTM_zone_27S", "PCS_WGS72_UTM_zone_28S", "PCS_WGS72_UTM_zone_29S", "PCS_WGS72_UTM_zone_30S", "PCS_WGS72_UTM_zone_31S", "PCS_WGS72_UTM_zone_32S", "PCS_WGS72_UTM_zone_33S", "PCS_WGS72_UTM_zone_34S", "PCS_WGS72_UTM_zone_35S", "PCS_WGS72_UTM_zone_36S", "PCS_WGS72_UTM_zone_37S", "PCS_WGS72_UTM_zone_38S", "PCS_WGS72_UTM_zone_39S", "PCS_WGS72_UTM_zone_40S", "PCS_WGS72_UTM_zone_41S", "PCS_WGS72_UTM_zone_42S", "PCS_WGS72_UTM_zone_43S", "PCS_WGS72_UTM_zone_44S", "PCS_WGS72_UTM_zone_45S", "PCS_WGS72_UTM_zone_46S", "PCS_WGS72_UTM_zone_47S", "PCS_WGS72_UTM_zone_48S", "PCS_WGS72_UTM_zone_49S", "PCS_WGS72_UTM_zone_50S", "PCS_WGS72_UTM_zone_51S", "PCS_WGS72_UTM_zone_52S", "PCS_WGS72_UTM_zone_53S", "PCS_WGS72_UTM_zone_54S", "PCS_WGS72_UTM_zone_55S", "PCS_WGS72_UTM_zone_56S", "PCS_WGS72_UTM_zone_57S", "PCS_WGS72_UTM_zone_58S", "PCS_WGS72_UTM_zone_59S", "PCS_WGS72_UTM_zone_60S", "PCS_WGS72BE_UTM_zone_1N", "PCS_WGS72BE_UTM_zone_2N", "PCS_WGS72BE_UTM_zone_3N", "PCS_WGS72BE_UTM_zone_4N", "PCS_WGS72BE_UTM_zone_5N", "PCS_WGS72BE_UTM_zone_6N", "PCS_WGS72BE_UTM_zone_7N", "PCS_WGS72BE_UTM_zone_8N", "PCS_WGS72BE_UTM_zone_9N", "PCS_WGS72BE_UTM_zone_10N", "PCS_WGS72BE_UTM_zone_11N", "PCS_WGS72BE_UTM_zone_12N", "PCS_WGS72BE_UTM_zone_13N", "PCS_WGS72BE_UTM_zone_14N", "PCS_WGS72BE_UTM_zone_15N", "PCS_WGS72BE_UTM_zone_16N", "PCS_WGS72BE_UTM_zone_17N", "PCS_WGS72BE_UTM_zone_18N", "PCS_WGS72BE_UTM_zone_19N", "PCS_WGS72BE_UTM_zone_20N", "PCS_WGS72BE_UTM_zone_21N", "PCS_WGS72BE_UTM_zone_22N", "PCS_WGS72BE_UTM_zone_23N", "PCS_WGS72BE_UTM_zone_24N", "PCS_WGS72BE_UTM_zone_25N", "PCS_WGS72BE_UTM_zone_26N", "PCS_WGS72BE_UTM_zone_27N", "PCS_WGS72BE_UTM_zone_28N", "PCS_WGS72BE_UTM_zone_29N", "PCS_WGS72BE_UTM_zone_30N", "PCS_WGS72BE_UTM_zone_31N", "PCS_WGS72BE_UTM_zone_32N", "PCS_WGS72BE_UTM_zone_33N", "PCS_WGS72BE_UTM_zone_34N", "PCS_WGS72BE_UTM_zone_35N", "PCS_WGS72BE_UTM_zone_36N", "PCS_WGS72BE_UTM_zone_37N", "PCS_WGS72BE_UTM_zone_38N", "PCS_WGS72BE_UTM_zone_39N", "PCS_WGS72BE_UTM_zone_40N", "PCS_WGS72BE_UTM_zone_41N", "PCS_WGS72BE_UTM_zone_42N", "PCS_WGS72BE_UTM_zone_43N", "PCS_WGS72BE_UTM_zone_44N", "PCS_WGS72BE_UTM_zone_45N", "PCS_WGS72BE_UTM_zone_46N", "PCS_WGS72BE_UTM_zone_47N", "PCS_WGS72BE_UTM_zone_48N", "PCS_WGS72BE_UTM_zone_49N", "PCS_WGS72BE_UTM_zone_50N", "PCS_WGS72BE_UTM_zone_51N", "PCS_WGS72BE_UTM_zone_52N", "PCS_WGS72BE_UTM_zone_53N", "PCS_WGS72BE_UTM_zone_54N", "PCS_WGS72BE_UTM_zone_55N", "PCS_WGS72BE_UTM_zone_56N", "PCS_WGS72BE_UTM_zone_57N", "PCS_WGS72BE_UTM_zone_58N", "PCS_WGS72BE_UTM_zone_59N", "PCS_WGS72BE_UTM_zone_60N", "PCS_WGS72BE_UTM_zone_1S", "PCS_WGS72BE_UTM_zone_2S", "PCS_WGS72BE_UTM_zone_3S", "PCS_WGS72BE_UTM_zone_4S", "PCS_WGS72BE_UTM_zone_5S", "PCS_WGS72BE_UTM_zone_6S", "PCS_WGS72BE_UTM_zone_7S", "PCS_WGS72BE_UTM_zone_8S", "PCS_WGS72BE_UTM_zone_9S", "PCS_WGS72BE_UTM_zone_10S", "PCS_WGS72BE_UTM_zone_11S", "PCS_WGS72BE_UTM_zone_12S", "PCS_WGS72BE_UTM_zone_13S", "PCS_WGS72BE_UTM_zone_14S", "PCS_WGS72BE_UTM_zone_15S", "PCS_WGS72BE_UTM_zone_16S", "PCS_WGS72BE_UTM_zone_17S", "PCS_WGS72BE_UTM_zone_18S", "PCS_WGS72BE_UTM_zone_19S", "PCS_WGS72BE_UTM_zone_20S", "PCS_WGS72BE_UTM_zone_21S", "PCS_WGS72BE_UTM_zone_22S", "PCS_WGS72BE_UTM_zone_23S", "PCS_WGS72BE_UTM_zone_24S", "PCS_WGS72BE_UTM_zone_25S", "PCS_WGS72BE_UTM_zone_26S", "PCS_WGS72BE_UTM_zone_27S", "PCS_WGS72BE_UTM_zone_28S", "PCS_WGS72BE_UTM_zone_29S", "PCS_WGS72BE_UTM_zone_30S", "PCS_WGS72BE_UTM_zone_31S", "PCS_WGS72BE_UTM_zone_32S", "PCS_WGS72BE_UTM_zone_33S", "PCS_WGS72BE_UTM_zone_34S", "PCS_WGS72BE_UTM_zone_35S", "PCS_WGS72BE_UTM_zone_36S", "PCS_WGS72BE_UTM_zone_37S", "PCS_WGS72BE_UTM_zone_38S", "PCS_WGS72BE_UTM_zone_39S", "PCS_WGS72BE_UTM_zone_40S", "PCS_WGS72BE_UTM_zone_41S", "PCS_WGS72BE_UTM_zone_42S", "PCS_WGS72BE_UTM_zone_43S", "PCS_WGS72BE_UTM_zone_44S", "PCS_WGS72BE_UTM_zone_45S", "PCS_WGS72BE_UTM_zone_46S", "PCS_WGS72BE_UTM_zone_47S", "PCS_WGS72BE_UTM_zone_48S", "PCS_WGS72BE_UTM_zone_49S", "PCS_WGS72BE_UTM_zone_50S", "PCS_WGS72BE_UTM_zone_51S", "PCS_WGS72BE_UTM_zone_52S", "PCS_WGS72BE_UTM_zone_53S", "PCS_WGS72BE_UTM_zone_54S", "PCS_WGS72BE_UTM_zone_55S", "PCS_WGS72BE_UTM_zone_56S", "PCS_WGS72BE_UTM_zone_57S", "PCS_WGS72BE_UTM_zone_58S", "PCS_WGS72BE_UTM_zone_59S", "PCS_WGS72BE_UTM_zone_60S", "PCS_WGS84_UTM_zone_1N", "PCS_WGS84_UTM_zone_2N", "PCS_WGS84_UTM_zone_3N", "PCS_WGS84_UTM_zone_4N", "PCS_WGS84_UTM_zone_5N", "PCS_WGS84_UTM_zone_6N", "PCS_WGS84_UTM_zone_7N", "PCS_WGS84_UTM_zone_8N", "PCS_WGS84_UTM_zone_9N", "PCS_WGS84_UTM_zone_10N", "PCS_WGS84_UTM_zone_11N", "PCS_WGS84_UTM_zone_12N", "PCS_WGS84_UTM_zone_13N", "PCS_WGS84_UTM_zone_14N", "PCS_WGS84_UTM_zone_15N", "PCS_WGS84_UTM_zone_16N", "PCS_WGS84_UTM_zone_17N", "PCS_WGS84_UTM_zone_18N", "PCS_WGS84_UTM_zone_19N", "PCS_WGS84_UTM_zone_20N", "PCS_WGS84_UTM_zone_21N", "PCS_WGS84_UTM_zone_22N", "PCS_WGS84_UTM_zone_23N", "PCS_WGS84_UTM_zone_24N", "PCS_WGS84_UTM_zone_25N", "PCS_WGS84_UTM_zone_26N", "PCS_WGS84_UTM_zone_27N", "PCS_WGS84_UTM_zone_28N", "PCS_WGS84_UTM_zone_29N", "PCS_WGS84_UTM_zone_30N", "PCS_WGS84_UTM_zone_31N", "PCS_WGS84_UTM_zone_32N", "PCS_WGS84_UTM_zone_33N", "PCS_WGS84_UTM_zone_34N", "PCS_WGS84_UTM_zone_35N", "PCS_WGS84_UTM_zone_36N", "PCS_WGS84_UTM_zone_37N", "PCS_WGS84_UTM_zone_38N", "PCS_WGS84_UTM_zone_39N", "PCS_WGS84_UTM_zone_40N", "PCS_WGS84_UTM_zone_41N", "PCS_WGS84_UTM_zone_42N", "PCS_WGS84_UTM_zone_43N", "PCS_WGS84_UTM_zone_44N", "PCS_WGS84_UTM_zone_45N", "PCS_WGS84_UTM_zone_46N", "PCS_WGS84_UTM_zone_47N", "PCS_WGS84_UTM_zone_48N", "PCS_WGS84_UTM_zone_49N", "PCS_WGS84_UTM_zone_50N", "PCS_WGS84_UTM_zone_51N", "PCS_WGS84_UTM_zone_52N", "PCS_WGS84_UTM_zone_53N", "PCS_WGS84_UTM_zone_54N", "PCS_WGS84_UTM_zone_55N", "PCS_WGS84_UTM_zone_56N", "PCS_WGS84_UTM_zone_57N", "PCS_WGS84_UTM_zone_58N", "PCS_WGS84_UTM_zone_59N", "PCS_WGS84_UTM_zone_60N", "PCS_WGS84_UTM_zone_1S", "PCS_WGS84_UTM_zone_2S", "PCS_WGS84_UTM_zone_3S", "PCS_WGS84_UTM_zone_4S", "PCS_WGS84_UTM_zone_5S", "PCS_WGS84_UTM_zone_6S", "PCS_WGS84_UTM_zone_7S", "PCS_WGS84_UTM_zone_8S", "PCS_WGS84_UTM_zone_9S", "PCS_WGS84_UTM_zone_10S", "PCS_WGS84_UTM_zone_11S", "PCS_WGS84_UTM_zone_12S", "PCS_WGS84_UTM_zone_13S", "PCS_WGS84_UTM_zone_14S", "PCS_WGS84_UTM_zone_15S", "PCS_WGS84_UTM_zone_16S", "PCS_WGS84_UTM_zone_17S", "PCS_WGS84_UTM_zone_18S", "PCS_WGS84_UTM_zone_19S", "PCS_WGS84_UTM_zone_20S", "PCS_WGS84_UTM_zone_21S", "PCS_WGS84_UTM_zone_22S", "PCS_WGS84_UTM_zone_23S", "PCS_WGS84_UTM_zone_24S", "PCS_WGS84_UTM_zone_25S", "PCS_WGS84_UTM_zone_26S", "PCS_WGS84_UTM_zone_27S", "PCS_WGS84_UTM_zone_28S", "PCS_WGS84_UTM_zone_29S", "PCS_WGS84_UTM_zone_30S", "PCS_WGS84_UTM_zone_31S", "PCS_WGS84_UTM_zone_32S", "PCS_WGS84_UTM_zone_33S", "PCS_WGS84_UTM_zone_34S", "PCS_WGS84_UTM_zone_35S", "PCS_WGS84_UTM_zone_36S", "PCS_WGS84_UTM_zone_37S", "PCS_WGS84_UTM_zone_38S", "PCS_WGS84_UTM_zone_39S", "PCS_WGS84_UTM_zone_40S", "PCS_WGS84_UTM_zone_41S", "PCS_WGS84_UTM_zone_42S", "PCS_WGS84_UTM_zone_43S", "PCS_WGS84_UTM_zone_44S", "PCS_WGS84_UTM_zone_45S", "PCS_WGS84_UTM_zone_46S", "PCS_WGS84_UTM_zone_47S", "PCS_WGS84_UTM_zone_48S", "PCS_WGS84_UTM_zone_49S", "PCS_WGS84_UTM_zone_50S", "PCS_WGS84_UTM_zone_51S", "PCS_WGS84_UTM_zone_52S", "PCS_WGS84_UTM_zone_53S", "PCS_WGS84_UTM_zone_54S", "PCS_WGS84_UTM_zone_55S", "PCS_WGS84_UTM_zone_56S", "PCS_WGS84_UTM_zone_57S", "PCS_WGS84_UTM_zone_58S", "PCS_WGS84_UTM_zone_59S", "PCS_WGS84_UTM_zone_60S", "PM_Greenwich", "PM_Lisbon", "PM_Paris", "PM_Bogota", "PM_Madrid", "PM_Rome", "PM_Bern", "PM_Jakarta", "PM_Ferro", "PM_Brussels", "PM_Stockholm", "Ellipse_Airy_1830", "Ellipse_Airy_Modified_1849", "Ellipse_Australian_National_Spheroid", "Ellipse_Bessel_1841", "Ellipse_Bessel_Modified", "Ellipse_Bessel_Namibia", "Ellipse_Clarke_1858", "Ellipse_Clarke_1866", "Ellipse_Clarke_1866_Michigan", "Ellipse_Clarke_1880_Benoit", "Ellipse_Clarke_1880_IGN", "Ellipse_Clarke_1880_RGS", "Ellipse_Clarke_1880_Arc", "Ellipse_Clarke_1880_SGA_1922", "Ellipse_Everest_1830_1937_Adjustment", "Ellipse_Everest_1830_1967_Definition", "Ellipse_Everest_1830_1975_Definition", "Ellipse_Everest_1830_Modified", "Ellipse_GRS_1980", "Ellipse_Helmert_1906", "Ellipse_Indonesian_National_Spheroid", "Ellipse_International_1924", "Ellipse_International_1967", "Ellipse_Krassowsky_1940", "Ellipse_NWL_9D", "Ellipse_NWL_10D", "Ellipse_Plessis_1817", "Ellipse_Struve_1860", "Ellipse_War_Office", "Ellipse_WGS_84", "Ellipse_GEM_10C", "Ellipse_OSU86F", "Ellipse_OSU91A", "Ellipse_Clarke_1880", "Ellipse_Sphere", "DatumE_Airy1830", "DatumE_AiryModified1849", "DatumE_AustralianNationalSpheroid", "DatumE_Bessel1841", "DatumE_BesselModified", "DatumE_BesselNamibia", "DatumE_Clarke1858", "DatumE_Clarke1866", "DatumE_Clarke1866Michigan", "DatumE_Clarke1880_Benoit", "DatumE_Clarke1880_IGN", "DatumE_Clarke1880_RGS", "DatumE_Clarke1880_Arc", "DatumE_Clarke1880_SGA1922", "DatumE_Everest1830_1937Adjustment", "DatumE_Everest1830_1967Definition", "DatumE_Everest1830_1975Definition", "DatumE_Everest1830Modified", "DatumE_GRS1980", "DatumE_Helmert1906", "DatumE_IndonesianNationalSpheroid", "DatumE_International1924", "DatumE_International1967", "DatumE_Krassowsky1960", "DatumE_NWL9D", "DatumE_NWL10D", "DatumE_Plessis1817", "DatumE_Struve1860", "DatumE_WarOffice", "DatumE_WGS84", "DatumE_GEM10C", "DatumE_OSU86F", "DatumE_OSU91A", "DatumE_Clarke1880", "DatumE_Sphere", "Datum_Adindan", "Datum_Australian_Geodetic_Datum_1966", "Datum_Australian_Geodetic_Datum_1984", "Datum_Ain_el_Abd_1970", "Datum_Afgooye", "Datum_Agadez", "Datum_Lisbon", "Datum_Aratu", "Datum_Arc_1950", "Datum_Arc_1960", "Datum_Batavia", "Datum_Barbados", "Datum_Beduaram", "Datum_Beijing_1954", "Datum_Reseau_National_Belge_1950", "Datum_Bermuda_1957", "Datum_Bern_1898", "Datum_Bogota", "Datum_Bukit_Rimpah", "Datum_Camacupa", "Datum_Campo_Inchauspe", "Datum_Cape", "Datum_Carthage", "Datum_Chua", "Datum_Corrego_Alegre", "Datum_Cote_d_Ivoire", "Datum_Deir_ez_Zor", "Datum_Douala", "Datum_Egypt_1907", "Datum_European_Datum_1950", "Datum_European_Datum_1987", "Datum_Fahud", "Datum_Gandajika_1970", "Datum_Garoua", "Datum_Guyane_Francaise", "Datum_Hu_Tzu_Shan", "Datum_Hungarian_Datum_1972", "Datum_Indonesian_Datum_1974", "Datum_Indian_1954", "Datum_Indian_1975", "Datum_Jamaica_1875", "Datum_Jamaica_1969", "Datum_Kalianpur", "Datum_Kandawala", "Datum_Kertau", "Datum_Kuwait_Oil_Company", "Datum_La_Canoa", "Datum_Provisional_S_American_Datum_1956", "Datum_Lake", "Datum_Leigon", "Datum_Liberia_1964", "Datum_Lome", "Datum_Luzon_1911", "Datum_Hito_XVIII_1963", "Datum_Herat_North", "Datum_Mahe_1971", "Datum_Makassar", "Datum_European_Reference_System_1989", "Datum_Malongo_1987", "Datum_Manoca", "Datum_Merchich", "Datum_Massawa", "Datum_Minna", "Datum_Mhast", "Datum_Monte_Mario", "Datum_M_poraloko", "Datum_North_American_Datum_1927", "Datum_NAD_Michigan", "Datum_North_American_Datum_1983", "Datum_Nahrwan_1967", "Datum_Naparima_1972", "Datum_New_Zealand_Geodetic_Datum_1949", "Datum_NGO_1948", "Datum_Datum_73", "Datum_Nouvelle_Triangulation_Francaise", "Datum_NSWC_9Z_2", "Datum_OSGB_1936", "Datum_OSGB_1970_SN", "Datum_OS_SN_1980", "Datum_Padang_1884", "Datum_Palestine_1923", "Datum_Pointe_Noire", "Datum_Geocentric_Datum_of_Australia_1994", "Datum_Pulkovo_1942", "Datum_Qatar", "Datum_Qatar_1948", "Datum_Qornoq", "Datum_Loma_Quintana", "Datum_Amersfoort", "Datum_RT38", "Datum_South_American_Datum_1969", "Datum_Sapper_Hill_1943", "Datum_Schwarzeck", "Datum_Segora", "Datum_Serindung", "Datum_Sudan", "Datum_Tananarive_1925", "Datum_Timbalai_1948", "Datum_TM65", "Datum_TM75", "Datum_Tokyo", "Datum_Trinidad_1903", "Datum_Trucial_Coast_1948", "Datum_Voirol_1875", "Datum_Voirol_Unifie_1960", "Datum_Bern_1938", "Datum_Nord_Sahara_1959", "Datum_Stockholm_1938", "Datum_Yacare", "Datum_Yoff", "Datum_Zanderij", "Datum_Militar_Geographische_Institut", "Datum_Reseau_National_Belge_1972", "Datum_Deutsche_Hauptdreiecksnetz", "Datum_Conakry_1905", "Datum_WGS72", "Datum_WGS72_Transit_Broadcast_Ephemeris", "Datum_WGS84", "Datum_Ancienne_Triangulation_Francaise", "Datum_Nord_de_Guerre", "GCSE_Airy1830", "GCSE_AiryModified1849", "GCSE_AustralianNationalSpheroid", "GCSE_Bessel1841", "GCSE_BesselModified", "GCSE_BesselNamibia", "GCSE_Clarke1858", "GCSE_Clarke1866", "GCSE_Clarke1866Michigan", "GCSE_Clarke1880_Benoit", "GCSE_Clarke1880_IGN", "GCSE_Clarke1880_RGS", "GCSE_Clarke1880_Arc", "GCSE_Clarke1880_SGA1922", "GCSE_Everest1830_1937Adjustment", "GCSE_Everest1830_1967Definition", "GCSE_Everest1830_1975Definition", "GCSE_Everest1830Modified", "GCSE_GRS1980", "GCSE_Helmert1906", "GCSE_IndonesianNationalSpheroid", "GCSE_International1924", "GCSE_International1967", "GCSE_Krassowsky1940", "GCSE_NWL9D", "GCSE_NWL10D", "GCSE_Plessis1817", "GCSE_Struve1860", "GCSE_WarOffice", "GCSE_WGS84", "GCSE_GEM10C", "GCSE_OSU86F", "GCSE_OSU91A", "GCSE_Clarke1880", "GCSE_Sphere", "GCS_Adindan", "GCS_AGD66", "GCS_AGD84", "GCS_Ain_el_Abd", "GCS_Afgooye", "GCS_Agadez", "GCS_Lisbon", "GCS_Aratu", "GCS_Arc_1950", "GCS_Arc_1960", "GCS_Batavia", "GCS_Barbados", "GCS_Beduaram", "GCS_Beijing_1954", "GCS_Belge_1950", "GCS_Bermuda_1957", "GCS_Bern_1898", "GCS_Bogota", "GCS_Bukit_Rimpah", "GCS_Camacupa", "GCS_Campo_Inchauspe", "GCS_Cape", "GCS_Carthage", "GCS_Chua", "GCS_Corrego_Alegre", "GCS_Cote_d_Ivoire", "GCS_Deir_ez_Zor", "GCS_Douala", "GCS_Egypt_1907", "GCS_ED50", "GCS_ED87", "GCS_Fahud", "GCS_Gandajika_1970", "GCS_Garoua", "GCS_Guyane_Francaise", "GCS_Hu_Tzu_Shan", "GCS_HD72", "GCS_ID74", "GCS_Indian_1954", "GCS_Indian_1975", "GCS_Jamaica_1875", "GCS_JAD69", "GCS_Kalianpur", "GCS_Kandawala", "GCS_Kertau", "GCS_KOC", "GCS_La_Canoa", "GCS_PSAD56", "GCS_Lake", "GCS_Leigon", "GCS_Liberia_1964", "GCS_Lome", "GCS_Luzon_1911", "GCS_Hito_XVIII_1963", "GCS_Herat_North", "GCS_Mahe_1971", "GCS_Makassar", "GCS_EUREF89", "GCS_Malongo_1987", "GCS_Manoca", "GCS_Merchich", "GCS_Massawa", "GCS_Minna", "GCS_Mhast", "GCS_Monte_Mario", "GCS_M_poraloko", "GCS_NAD27", "GCS_NAD_Michigan", "GCS_NAD83", "GCS_Nahrwan_1967", "GCS_Naparima_1972", "GCS_GD49", "GCS_NGO_1948", "GCS_Datum_73", "GCS_NTF", "GCS_NSWC_9Z_2", "GCS_OSGB_1936", "GCS_OSGB70", "GCS_OS_SN80", "GCS_Padang", "GCS_Palestine_1923", "GCS_Pointe_Noire", "GCS_GDA94", "GCS_Pulkovo_1942", "GCS_Qatar", "GCS_Qatar_1948", "GCS_Qornoq", "GCS_Loma_Quintana", "GCS_Amersfoort", "GCS_RT38", "GCS_SAD69", "GCS_Sapper_Hill_1943", "GCS_Schwarzeck", "GCS_Segora", "GCS_Serindung", "GCS_Sudan", "GCS_Tananarive", "GCS_Timbalai_1948", "GCS_TM65", "GCS_TM75", "GCS_Tokyo", "GCS_Trinidad_1903", "GCS_TC_1948", "GCS_Voirol_1875", "GCS_Voirol_Unifie", "GCS_Bern_1938", "GCS_Nord_Sahara_1959", "GCS_Stockholm_1938", "GCS_Yacare", "GCS_Yoff", "GCS_Zanderij", "GCS_MGI", "GCS_Belge_1972", "GCS_DHDN", "GCS_Conakry_1905", "GCS_WGS_72", "GCS_WGS_72BE", "GCS_WGS_84", "GCS_Bern_1898_Bern", "GCS_Bogota_Bogota", "GCS_Lisbon_Lisbon", "GCS_Makassar_Jakarta", "GCS_MGI_Ferro", "GCS_Monte_Mario_Rome", "GCS_NTF_Paris", "GCS_Padang_Jakarta", "GCS_Belge_1950_Brussels", "GCS_Tananarive_Paris", "GCS_Voirol_1875_Paris", "GCS_Voirol_Unifie_Paris", "GCS_Batavia_Jakarta", "GCS_ATF_Paris", "GCS_NDG_Paris", "Angular_Radian", "Angular_Degree", "Angular_Arc_Minute", "Angular_Arc_Second", "Angular_Grad", "Angular_Gon", "Angular_DMS", "Angular_DMS_Hemisphere", "Linear_Meter", "Linear_Foot", "Linear_Foot_US_Survey", "Linear_Foot_Modified_American", "Linear_Foot_Clarke", "Linear_Foot_Indian", "Linear_Link", "Linear_Link_Benoit", "Linear_Link_Sears", "Linear_Chain_Benoit", "Linear_Chain_Sears", "Linear_Yard_Sears", "Linear_Yard_Indian", "Linear_Fathom", "Linear_Mile_International_Nautical", "RasterPixelIsArea", "RasterPixelIsPoint", "ModelTypeProjected", "ModelTypeGeographic", "ModelTypeGeocentric", "VerticalCSTypeGeoKey", "VerticalCitationGeoKey", "VerticalDatumGeoKey", "VerticalUnitsGeoKey", "ProjectedCSTypeGeoKey", "PCSCitationGeoKey", "ProjectionGeoKey", "ProjCoordTransGeoKey", "ProjLinearUnitsGeoKey", "ProjLinearUnitSizeGeoKey", "ProjStdParallel1GeoKey", "ProjStdParallel2GeoKey", "ProjNatOriginLongGeoKey", "ProjNatOriginLatGeoKey", "ProjFalseEastingGeoKey", "ProjFalseNorthingGeoKey", "ProjFalseOriginLongGeoKey", "ProjFalseOriginLatGeoKey", "ProjFalseOriginEastingGeoKey", "ProjFalseOriginNorthingGeoKey", "ProjCenterLongGeoKey", "ProjCenterLatGeoKey", "ProjCenterEastingGeoKey", "ProjCenterNorthingGeoKey", "ProjScaleAtNatOriginGeoKey", "ProjScaleAtCenterGeoKey", "ProjAzimuthAngleGeoKey", "ProjStraightVertPoleLongGeoKey", "GeographicTypeGeoKey", "GeogCitationGeoKey", "GeogGeodeticDatumGeoKey", "GeogPrimeMeridianGeoKey", "GeogLinearUnitsGeoKey", "GeogLinearUnitSizeGeoKey", "GeogAngularUnitsGeoKey", "GeogAngularUnitSizeGeoKey", "GeogEllipsoidGeoKey", "GeogSemiMajorAxisGeoKey", "GeogSemiMinorAxisGeoKey", "GeogInvFlatteningGeoKey", "GeogAzimuthUnitsGeoKey", "GeogPrimeMeridianLongGeoKey", "GTModelTypeGeoKey", "GTRasterTypeGeoKey", "GTCitationGeoKey", "Input buffer too small, truncated sample?\n", " help! truemotion1 decoder went out of bounds\n", " index %d went out of bounds\n", " KEY", " INTER", " SPRITE", " INTERPOL", "invalid header size (%d)\n", "invalid header type (%d)\n", "Frame with sprite", "Interpolated frame", "invalid compression type (%d)\n", "invalid vector table id (%d)\n", "tables: %d / %d c:%d %dx%d t:%d %s%s%s%s\n", "Width and height must be multiple of 4\n", "Tree exceeded its given depth (%i)\n", "Too many literals\n", "Got %i tokens for %i blocks\n", "Read token from stream %i out of bounds (%i>=%i)\n", "token %d is too large\n", "MV out of picture\n", "Skipping unknown block type %i\n", "Cannot allocate temporary buffer\n", "Old TM2 header", "Not a TM2 header: 0x%08X\n", "no space for tm2_read_stream\n", "not enough space for len left\n", "invalid stream size\n", "Incorrect delta table: %i deltas x %i bits\n", "Incorrect tree parameters - literal length: %i, max code length: %i\n", "Incorrect number of Huffman tree nodes: %i\n", "Got less codes than expected: %i of %i\n", "Incorrect number of tokens: %i\n", "Invalid delta token index %d for type %d, n=%d\n", "Channel count %d", "Too small input buffer (%d bytes), need at least 32 bytes\n", "Camtasia error: unknown depth %i bpp\n", "camtasia", "Cannot allocate slice information\n", "Incorrect frame type %d\n", "Frame is too short\n", "Invalid quantisers %d / %d\n", "Slice properties chunk is too large\n", "Too many slice properties\n", "Too few slice properties (%d / %d)\n", "Non-skip row with zero size\n", "Invalid slice size (%d/%d)\n", "Error decoding slice %d\n", "TTA1", "Invalid format\n", "Missing password for encrypted stream. Please use the -password option\n", "Invalid samplerate\n", "Invalid/unsupported sample format.\n", "sample_rate too large\n", "format: %d chans: %d bps: %d rate: %d block: %d\n", "data_length: %d frame_length: %d last: %d total: %d\n", "frame_length too large\n", "Wrong extradata present\n", "TTA Decoder", "password", "Set decoding password", "Unsupported sample rate\n", "Bad bitrate per channel value %d\n", "texture data version %i is unsupported\n", "depth of %i is unsupported\n", "unsupported d3d format (%08x)\n", "warning: modifier must be 0 or 1, got %i\n", "warning: unknown escape 0x%02X\n", "Insufficient data\n", "ultimotion", "s->codec_type == AVMEDIA_TYPE_VIDEO", "libavcodec/utils.c", "desc->flags & (1 << 4)", "pic->data[0]!=NULL in avcodec_default_get_buffer\n", "default_get_buffer called on pic %p\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "video_get_buffer: image parameters invalid\n", "get_buffer() failed\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "reget_buffer() failed\n", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %lld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %lld)\n", "Failed to allocate packet of size %lld\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "Provided packet is too small, needs to be %d\n", "avctx->codec->encode2", "ret <= 0", "buffer smaller than minimum size\n", "start_display_time must be 0.\n", "Invalid media type for video\n", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "skip %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "Custom get_buffer() for use withavcodec_decode_audio3() detected. Overriding with avcodec_default_get_buffer\n", "Please port your application to avcodec_decode_audio4()\n", "output buffer size is too small for the current frame (%d < %d)\n", "Invalid media type for subtitles\n", "!\"requesting subtitles recoding without iconv\"", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "unknown_codec", "Codec 0x%x is not in the full list.\n", "[%d]", "--prefix=/Applications/AndroidTools/android-ndk-r9d/../ --enable-shared --enable-gpl --disable-encoders --enable-encoder=libx264 --enable-encoder=aac --disable-muxers --enable-muxer=mp4 --enable-decoder=aac_latm --disable-protocols --enable-protocol=file --enable-version3 --enable-runtime-cpudetect --disable-outdev=sdl --enable-libx264 --extra-cflags=-Ix264-snapshot-20140322-2245-stable --extra-ldflags=-Lx264-snapshot-20140322-2245-stable --enable-cross-compile --cc=/Applications/AndroidTools/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/darwin-x86_64/bin//arm-linux-androideabi-gcc --sysroot=/Applications/AndroidTools/android-ndk-r9d/platforms/android-9/arch-arm/ --target-os=linux --arch=arm --extra-cflags='-DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -mfpu=neon -fomit-frame-pointer -fstrict-aliasing -funswitch-loops -finline-limit=300 -O3' --extra-ldflags='-nostdlib -Wl,--fix-cortex-a8' --extra-libs='-lgcc -ldl -lz -lm -lc' --disable-stripping --disable-symver --disable-programs", "libavcodec license: GPL version 3 or later", "tv, ", "pc, ", "%s: %s", " (%s)", " (%s / 0x%04X)", ", %s", "%d bpc, ", "%s, ", ", %dx%d", " [SAR %d:%d DAR %d:%d]", ", %d/%d", ", q=%d-%d", ", %d Hz", ", pass 1", ", pass 2", ", %d kb/s", ", max. %d kb/s", "avcodec_encode_audio() does not support this codec\n", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/MPlayer/incoming/ and contact the ffmpeg-devel mailing list.\n", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "ff_avcodec_locked", "Insufficient thread locking around avcodec_open/close()\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "encoder", "decoder", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The maximum value for lowres supported by the decoder is %d\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Channel layout not specified\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "dimensions not set\n", "Bitrate %d is extremely low, maybe you mean %dk\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "Specified sample rate %d is not supported\n", "Specified channel layout '%s' is not supported\n", "p <= end", "Cannot build Huffman codes\n", "Plane has more than one symbol yet a slice has a length of zero.\n", "Slice decoding ran out of bits\n", "Decoding error\n", "%d bits left after decoding slice\n", "Insufficient extradata size %d, should be at least 16\n", "Encoder version %d.%d.%d.%d\n", "Original format %X\n", "Frame info not 4 bytes", "Encoding parameters %08X\n", "Unknown Ut Video FOURCC provided (%08X)\n", "Insufficient data for a plane\n", "Not enough data for frame information\n", "frame information flags %X\n", "Frame with gradient prediction", "Broken v210 with too small padding (64 byte) detected\n", "v210 needs even width\n", "V210 Decoder", "custom_stride", "Custom V210 stride", "Packet too small\n", "(Probably) padded data", "v210x needs even width\n", "v308 requires width to be even.\n", "v410 requires width to be even.\n", "v410 requires width to be even, continuing anyway.\n", "Frame size invalid\n", "Invalid opcode seen @%d\n", "Palette change runs beyond entry 256\n", "Palette data runs beyond chunk size\n", "Could not allocate values buffer.\n", "Invalid packet size\n", "Unsupported VBLE Version: %d\n", "Invalid Code\n", "invalid NORM-6 VLC\n", "Header: %0X\n", "WMV3 Complex Profile is not fully supported\n", "Reserved LEVEL %i\n", "Only 4:2:0 chroma format supported\n", "Advanced Profile level %i:\nfrmrtq_postproc=%i, bitrtq_postproc=%i\nLoopFilter=%i, ChromaFormat=%i, Pulldown=%i, Interlace: %i\nTFCTRflag=%i, FINTERPflag=%i\n", "Progressive Segmented Frame mode: not supported (yet)\n", "Display extended info:\n", "Display dimensions: %ix%i\n", "Aspect: %i:%i\n", "Old interlaced mode is not supported\n", "LOOPFILTER shall not be enabled in Simple Profile\n", "FASTUVMC unavailable in Simple Profile\n", "Extended MVs unavailable in Simple Profile\n", "1 for reserved RES_TRANSTAB is forbidden\n", "RANGERED should be set to 0 in Simple Profile\n", "Unsupported sprite feature\n", "Old WMV3 version detected, some frames may be decoded incorrectly\n", "Profile %i:\nfrmrtq_postproc=%i, bitrtq_postproc=%i\nLoopFilter=%i, MultiRes=%i, FastUVMC=%i, Extended MV=%i\nRangered=%i, VSTransform=%i, Overlap=%i, SyncMarker=%i\nDQuant=%i, Quantizer mode=%i, Max B frames=%i\n", "Entry point: %08X\n", "Luma scaling is not supported, expect wrong picture\n", "Chroma scaling is not supported, expect wrong picture\n", "Entry point info:\nBrokenLink=%i, ClosedEntry=%i, PanscanFlag=%i\nRefDist=%i, Postproc=%i, FastUVMC=%i, ExtMV=%i\nDQuant=%i, VSTransform=%i, Overlap=%i, Qmode=%i\n", "MB MV Type plane encoding: Imode: %i, Invert: %i\n", "MB Skip plane encoding: Imode: %i, Invert: %i\n", "VOP DQuant info\n", "MB Direct Type plane encoding: Imode: %i, Invert: %i\n", "Pan-scan", "FIELDTX plane encoding: Imode: %i, Invert: %i\n", "ACPRED plane encoding: Imode: %i, Invert: %i\n", "CONDOVER plane encoding: Imode: %i, Invert: %i\n", "SKIPMB plane encoding: Imode: %i, Invert: %i\n", "B Fields\n", "MB Forward Type plane encoding: Imode: %i, Invert: %i\n", "Intensity compensation set for B picture\n", "Referenced frame missing.\n", "libavcodec/vc1dec.c", "Illegal DC VLC\n", "Bits overconsumption: %i > %i\n", "Overriding invalid mquant %d\n", "index < esc", "Bits overconsumption: %i > %i at %ix%i\n", "Error in WVC1 interlaced frame\n", "pict_type: %c\n", "Sprite decoder: expected I-frame\n", "image too short\n", "parsing header for second field failed", "mb_height > 0", "Slice %d starts beyond picture boundary (%d >= %d)\n", "Field header damaged\n", "Slice header damaged\n", "first field slice count too large\n", "end mb y %d %d invalid\n", "missing cbpcy_vlc\n", "Non-zero rotation coefficients", " %d.%.3d", "Effect: %d; params: ", " %d.%.2d", "Too many effect parameters\n", "Effect params 2: ", "Effect flag set\n", "Buffer overrun\n", "Buffer not fully read\n", "Got no sprites\n", "Need two sprites, only got one\n", "Extra data: %i bits left, value: %X\n", "Read %i bits in overflow\n", "Extradata size too small: %i\n", "Incomplete extradata\n", "odd sprites support", "Complex", "Advanced", "Insufficient input data. %d < %d\n", "bytestream_end - bytestream >= 4 + avctx->width", "libavcodec/vcr1.c", "bytestream_end - bytestream >= avctx->width / 2", "odd dimensions (%d x %d) support", "skipping small junk packet\n", "unknown block type: %d\n", "avctx->block_align * silent_chunks <= frame->nb_samples * avctx->channels", "libavcodec/vmdav.c", "(buf_size & (avctx->channels > 1)) == 0", "Invalid horizontal range %d-%d\n", "Invalid vertical range %d-%d\n", "Incomplete palette\n", "Trying to unpack LZ-compressed frame with no LZ buffer\n", "offset > width (%d > %d)\n", "expected extradata size of %d\n", "invalid block align\n", "%d channels, %d bits/sample, block align = %d, sample rate = %d\n", "Premature end of data!\n", "dimensions too large\n", "Premature end of data! (need %i got %i)\n", "Cursor hot spot is not in image: %ix%i of %ix%i cursor size\n", "Depth mismatch. Container %i bpp, Frame data: %i bpp\n", "Invalid header: bigendian flag = %i\n", "Incorrect frame size: %ix%i+%ix%i of %ix%i\n", "Unsupported block type 0x%08X\n", "Unsupported bitdepth %i\n", "Duplicate value found in floor 1 X coordinates\n", "Extradata corrupt.\n", "Id header is too short\n", "Wrong packet type in Id header\n", "Invalid packet signature in Id header\n", "Invalid framing bit in Id header\n", "Setup header is too short\n", "Wrong packet type in Setup header\n", "Invalid packet signature in Setup header\n", "Out of memory\n", "Invalid Setup header\n", "%d modes (either a false positive or a sample from an unknown encoder)", "Unsupported mode count: %d\n", "Invalid packet\n", "Invalid mode in packet\n", "floor0 dec: booknumber too high!\n", "Vorbis time domain transform data nonzero. \n", " Vorbis setup header packet corrupt (time domain transforms). \n", "floor_setup->data.t1.class_masterbook[j]", "libavcodec/vorbisdec.c", "Floor value is too large for blocksize: %u (%u)\n", "Floor 0 order is 0.\n", "Floor 0 rate is 0.\n", "Floor 0 bark map size is 0.\n", "book_idx", "Invalid floor type!\n", " Vorbis setup header packet corrupt (floors). \n", "partition out of bounds: type, begin, end, size, blocksize: %u, %u, %u, %u, %u\n", "res_setup->classbook", "res_setup->books[j][k]", " Vorbis setup header packet corrupt (residues). \n", "Other mappings than type 0 are not compliant with the Vorbis I specification. \n", "mapping_setup->magnitude[j]", "mapping_setup->angle[j]", "%u. mapping setup data invalid.\n", "mapping_setup->submap_floor[j]", "mapping_setup->submap_residue[j]", " Vorbis setup header packet corrupt (mappings). \n", "mode_setup->mapping", " Vorbis setup header packet corrupt (modes). \n", " Vorbis setup header packet corrupt (framing flag). \n", " Vorbis id header packet corrupt (no vorbis signature). \n", " Vorbis id header packet corrupt (illegal blocksize). \n", " Vorbis id header packet corrupt (framing flag not set). \n", " %u. Codebook setup data corrupt.\n", " %u. Codebook's dimension is invalid (%d).\n", " %u. Codebook has too many entries (%u).\n", " More codelengths than codes in codebook. \n", "Bug in codevector vector building code. \n", "Codebook lookup type not supported. \n", " Invalid code lengths while generating vlcs. \n", " Error generating vlc tables. \n", "Extradata missing.\n", "First header is not the id header.\n", "Id header corrupt.\n", "Third header is not the setup header.\n", " Vorbis setup header packet corrupt (no vorbis signature). \n", " Vorbis setup header packet corrupt (codebooks). \n", "Setup header corrupt.\n", "Ignoring comment header\n", "Data packet before valid headers\n", "Not a Vorbis I audio packet.\n", "mode_number", "Invalid codebook in vorbis_floor_decode.\n", "Too many channels in vorbis_floor_decode.\n", "Insufficient output buffer\n", "vr->classifications > 1", " Invalid residue type while residue decode?! \n", "Invalid number of coefficents at level %d\n", "Invalid zero run of %d with %d coeffs left\n", "Invalid token %d\n", "More blocks ended than coded!\n", "Theora bitstream version %X\n", "Old (<alpha3) Theora bitstream, flipped image\n", "Invalid dimensions (%dx%d)\n", "Invalid framerate\n", "Invalid pixel format\n", "Invalid huffman table\n", "Coefficient index overflow\n", "huffman tree overflow\n", "invalid number of base matrixes\n", "invalid base matrix index\n", "invalid qi %d > 63\n", "Missing extradata!\n", "Corrupt extradata\n", "Invalid extradata!\n", "Unknown Theora config packet: %d\n", "%d bits left in packet %X\n", "midstream reconfiguration with multithreading is unsupported, try -threads 1\n", "Header packet passed to frame decoder, skipping\n", "Data packet without prior valid headers\n", " VP3 %sframe #%d: Q index = %d\n", "filter_limit < 128U", "libavcodec/vp3.c", "VP version: %d\n", "Warning, unsupported keyframe coding type?!\n", "vp3: first frame not a keyframe\n", "Invalid partially coded superblock run length\n", "Invalid fully coded superblock run length\n", "error in unpack_superblocks\n", "error in unpack_block_qpis\n", "error in unpack_dct_coeffs\n", "error in unpack_modes\n", "error in unpack_vectors\n", "interlacing not supported\n", "Invalid size %dx%d\n", "picture too big\n", "Alpha reconfiguration\n", "Interlacing", "Unknown profile %d\n", "Header size larger than data provided\n", "Invalid start code 0x%x\n", "Upscaling", "Unspecified colorspace\n", "Invalid partitions\n", "Ran out of free frames!\n", "Discarding interframe without a prior keyframe!\n", "Failed to allocate frame buffer %d\n", "Invalid frame marker\n", "Reserved bit should be zero\n", "Invalid sync code\n", "RGB not supported in profile 0\n", "Not all references are available\n", "Ran out of memory during range coder init\n", "Invalid compressed header size\n", "Marker bit was set\n", "Failed to intialize bitstream reader\n", "Failed to initialize decoder for %dx%d\n", "Requested reference %d not available\n", "i < 10", "libavcodec/vp9.c", "Superframe packet size too big: %d > %d\n", "decode_format80 problem: dest_index (%d) exceeded dest_size (%d)\n", "decode_format80 problem: next op would overflow dest_index\n", "current dest_index = %d, count = %d, dest_size = %d\n", "current src_pos = %d, count = %d, dest_size = %d\n", "decode_format80 problem: decode finished with dest_index (%d) < dest_size (%d)\n", "VQA Version %d", "VQA Version %i", "Image size not multiple of block size\n", "Found unknown chunk type: %c%c%c%c (%08X)\n", "problem: found both CPL0 and CPLZ chunks\n", "problem: found a palette chunk with %d colors\n", "problem: found both CBF0 and CBFZ chunks\n", "problem: CBF0 chunk too large (0x%X bytes)\n", "problem: no VPTZ chunk found\n", "problem: found both CBP0 and CBPZ chunks\n", "cbp0 chunk too large (%u bytes)\n", "cbpz chunk too large (%u bytes)\n", "vqavideo", "k %d is too large\n", "Invalid number of samples: %d\n", "Block %d has invalid size (size %d vs. %d bytes left)\n", "Error creating frame decode context\n", "Context for block %d is not present\n", "Mismatching number of samples in a sequence: %d and %d\n", "Got incorrect block %02X with size %i\n", "Block size %i is out of bounds\n", "Too many decorrelation terms\n", "No decorrelation terms met\n", "Too many decorrelation weights\n", "Entropy vars size should be %i, got %i.\n", "Invalid INT32INFO, size = %i\n", "Invalid FLOATINFO, size = %i\n", "Invalid EXTRABITS, size = %i\n", "Insufficient channel information\n", "Invalid channel info size %d\n", "Invalid custom sample rate.\n", "No block with decorrelation terms\n", "No block with decorrelation weights\n", "No block with decorrelation samples\n", "No block with entropy info\n", "Hybrid config not found\n", "Packed samples not found\n", "Float information not found\n", "Too small EXTRABITS\n", "Custom sample rate missing.\n", "Too many channels coded in a packet.\n", "Extra bits CRC error\n", "Not enough channels coded in a packet.\n", "invalid color cache bits: %d\n", "max symbol %d > alphabet size %d\n", "invalid symbol %d + repeat %d > alphabet size %d\n", "color cache not found\n", "color cache index out-of-bounds\n", "Invalid WebP Lossless signature\n", "Width mismatch. %d != %d\n", "Height mismatch. %d != %d\n", "Invalid WebP Lossless version\n", "invalid predictor mode: %d\n", "invalid palette index %d\n", "missing WEBP tag\n", "unsupported chunk size\n", "ALPHA chunk present, but alpha bit not set in the VP8X header\n", "invalid ALPHA chunk size\n", "skipping unsupported ALPHA chunk\n", "skipping unsupported chunk: %s\n", "skipping unknown chunk: %s\n", "image data not found\n", "WebP image", "</i>", "</b>", "</u>", "byte_offset_bits %d is too large\n", "broken escape sequence\n", "overflow in spectral RLE, ignoring\n", "block_align is not set\n", "Disabling use_variable_block_len, if this fails contact the ffmpeg developers and send us the file\n", "prev_block_len_bits %d out of range\n", "block_len_bits %d out of range\n", "next_block_len_bits %d out of range\n", "block_len_bits not initialized to a valid value\n", "frame_len overflow\n", "total_gain overread\n", "hgain vlc invalid\n", "Exponent vlc invalid\n", "Exponent out of range: %d\n", "Input packet size too small (%d < %d)\n", "nb_frames is %d\n", "Invalid last frame bit offset %d > buf size %d (%d)\n", "len %d invalid\n", "Bit-depth higher than 16", "Unknown bit-depth: %d\n", "Unsupported extradata size", "s->samples_per_frame <= (1 << 14)", "libavcodec/wmalosslessdec.c", "invalid number of subframes %i\n", "invalid number of channels %d\n", "More than %d channels", "Too small input buffer", "Found empty subframe\n", "broken frame: subframe_len %i\n", "broken frame: num subframes > 31\n", "broken frame: channel len(%d) > samples_per_frame(%d)\n", "Arithmetic coding", "Order[%d][%d] %d > max (%d), not supported\n", "Waiting for seekable tile\n", "Expect wrong output since inverse LPC filter", "Invalid number of padding bits in raw PCM tile\n", "broken subframe\n", "frame[%i] would have to skip %i bits\n", "buf size %d invalid\n", "Bitstream splicing", "Packet loss detected! seq %x vs %x\n", "Unknown extradata size", "Large block align", "14-bit block sizes", "min_samples_per_subframe of %d too small\n", "num_sfb invalid\n", "v < 29", "libavcodec/wmaprodec.c", " %s = %d\n", "ed sample bit depth", " %s = %x\n", "ed decode flags", "samples per frame", "log2 frame size", "max num subframes", "len prefix", "num channels", "len <= put_bits_left(&s->pb)", "broken frame: channel len > samples_per_frame\n", "invalid number of fill bits\n", "Reserved bit", "Channel transform bit", "Unknown channel transform type", "Coupled channels > 6", "s->subframe_len <= (1 << 13)", "num_vec_coeffs %d is too large\n", "num_vec_coeffs + offset <= (sizeof(s->channel[c].out) / sizeof((s->channel[c].out)[0]))", "negative quant step\n", "invalid scale factor coding\n", "Input packet too small (%d < %d)\n", "Invalid extradata size %d (should be 46)\n", "Invalid denoise filter strength %d (max=11)\n", "Invalid VBM tree; broken extradata?\n", "Invalid pitch range; broken extradata?\n", "Unsupported samplerate %d (min=%d, max=%d)\n", "Invalid delta pitch hrange; broken extradata?\n", "Invalid frame type VLC code, skipping\n", "size <= 160 / 2", "libavcodec/wmavoice.c", "WMAPro-in-WMAVoice", "Superframe encodes >480 samples (%d), not allowed\n", "internal error in WMV2 abt\n", "fps:%d, br:%d, qpbit:%d, abt_flag:%d, j_type_bit:%d, tl_mv_flag:%d, mbrl_bit:%d, code:%d, loop_filter:%d, slices:%d\n", "I7:%X/\n", "qscale:%d rlc:%d rl:%d dc:%d mbrl:%d j_type:%d \n", "rl:%d rlc:%d dc:%d mv:%d mbrl:%d qp:%d mspel:%d per_mb_abt:%d abt_type:%d cbp:%d ii:%d\n", "II-cbp illegal at %d %d\n", "\nerror while decoding inter block: %d x %d (%d)\n", "\nerror while decoding intra block: %d x %d (%d)\n", "Packet size %d is too small\n", "Unknown WNV1 frame header value %i", "Frame data is larger than input buffer\n", "ws_snd1", "Invalid tag size %d\n", "Invalid palette selected\n", "No palette found\n", "size_segment overread\n", "Overlapping copy\n", "vector_segment overread\n", "#define %255s %u", "Unexpected preprocessor directive\n", "_height", "_width", "Unknown define '%s'\n", "Unexpected data at '%.8s'\n", "Size value %dx%d not supported, only accepts a size of %dx%d\n", "Buffer is longer than expected, truncating at byte %d\n", "width is not a multiple of 4\n", "coded frame size %d too small\n", "invalid time code\n", "unsupported version\n", "invalid header size\n", "pixformat %d, pixdepth %d, bunit %d, bitorder %d, bpad %d\n", "vclass %d, ncolors %d, bpp %d, be %d, lsize %d, xoffset %d\n", "red %0x, green %0x, blue %0x\n", "invalid pixmap format\n", "invalid pixmap depth\n", "xoffset %d", "invalid byte order\n", "invalid bitmap bit order\n", "invalid bitmap unit\n", "invalid bitmap scan-line pad\n", "invalid bits per pixel\n", "invalid number of entries in colormap\n", "invalid bytes per scan-line\n", "input buffer too small\n", "Pixmap format %d", "invalid visual class\n", "Unknown file: bpp %d, pixdepth %d, vclass %d", "Invalid chroma block position\n", "Invalid chroma block offset\n", "Chroma unpacking failed\n", "Invalid frame height: %d.\n", "Invalid frame width: %d.\n", "Ignoring invalid correction block position\n", "Luma decoding failed\n", "Unknown frame type %d\n", "y41p requires width to be divisible by 8.\n", "Packet too small.\n", "frame is too odd %d\n", "File probably corrupt\n", "YOP has invalid dimensions\n", "Missing or incomplete extradata.\n", "Palette parameters invalid, header probably corrupt\n", "Could not initialize inflate: %d.\n", "Could not reset inflate: %d.\n", "Inflate failed with return code: %d.\n", "Used %ti of %i bytes\n", "Flags=%X ver=%i.%i comp=%i fmt=%i blk=%ix%i\n", "Version %i.%i", "Block size %ix%i", "Compression type %i", "Format %i", "Error! Got no format or no keyframe!\n", "Buffer too small\n", "inflate error %d\n", "Cannot handle format %i\n", "warning", "info", "x264 [%s]: ", "true", "false", "x264_2pass.log", "lookahead-threads", "sliced-threads", "sync-lookahead", "deterministic", "n-deterministic", "cpu-independent", "level-idc", "avcintra-class", "%d:%d", "%d/%d", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "%u/%u", "frameref", "dpb-size", "keyint", "infinite", "min-keyint", "keyint-min", "scenecut", "bframes", "b-adapt", "open-gop", "filter", "%d,%d", "slice-max-mbs", "slice-min-mbs", "slices-max", "cabac", "cabac-idc", "interlaced", "constrained-intra", "flat", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "dump-yuv", "analyse", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "weight-b", "direct", "chroma-qp-offset", "merange", "me-range", "mvrange", "mv-range", "mvrange-thread", "mv-range-thread", "subme", "%f:%f", "%f,%f", "%f|%f", "chroma-me", "dct-decimate", "deadzone-inter", "deadzone-intra", "bitrate", "qp_constant", "crf-max", "qpmin", "qp-min", "qpmax", "qp-max", "qpstep", "qp-step", "ratetol", "vbv-maxrate", "vbv-bufsize", "vbv-init", "ipratio", "ip-factor", "pbratio", "pb-factor", "pass", "cplx-blur", "zones", "crop-rect", "%u,%u,%u,%u", "sps-id", "global-header", "repeat-headers", "annexb", "force-cfr", "filler", "pic-struct", "fake-interlaced", "frame-packing", "stitchable", "opencl", "opencl-clbin", "opencl-device", "%s profile doesn't support lossless\n", "%s profile doesn't support 4:4:4\n", "%s profile doesn't support 4:2:2\n", "baseline profile doesn't support interlacing\n", "baseline profile doesn't support fake interlacing\n", "invalid profile: %s\n", "malloc of size %d failed\n", "invalid preset '%s'\n", ",./-+", "touhou", "invalid tune '%s'\n", "only 1 psy tuning can be used: ignoring tune %s\n", "fake", "2pass", "%dx%d ", "fps=%u/%u ", "timebase=%u/%u ", "bitdepth=%d ", "opencl=%d ", "cabac=%d", " ref=%d", " deblock=%d:%d:%d", " analyse=%#x:%#x", " me=%s", " subme=%d", " psy=%d", " psy_rd=%.2f:%.2f", " mixed_ref=%d", " me_range=%d", " chroma_me=%d", " trellis=%d", " 8x8dct=%d", " cqm=%d", " deadzone=%d,%d", " fast_pskip=%d", " chroma_qp_offset=%d", " threads=%d", " lookahead_threads=%d", " sliced_threads=%d", " slices=%d", " slices_max=%d", " slice_max_size=%d", " slice_max_mbs=%d", " slice_min_mbs=%d", " nr=%d", " decimate=%d", " interlaced=%s", " bluray_compat=%d", " stitchable=%d", " constrained_intra=%d", " bframes=%d", " b_pyramid=%d b_adapt=%d b_bias=%d direct=%d weightb=%d open_gop=%d", " weightp=%d", " keyint=infinite", " keyint=%d", " keyint_min=%d scenecut=%d intra_refresh=%d", " rc_lookahead=%d", " rc=%s mbtree=%d", " crf=%.1f", " bitrate=%d ratetol=%.1f", " qcomp=%.2f qpmin=%d qpmax=%d qpstep=%d", " cplxblur=%.1f qblur=%.1f", " vbv_maxrate=%d vbv_bufsize=%d", " crf_max=%.1f", " qp=%d", " nal_hrd=%s filler=%d", " crop_rect=%u,%u,%u,%u", " frame-packing=%d", " ip_ratio=%.2f", " pb_ratio=%.2f", " aq=%d", ":%.2f", " zones=%s", " zones", "undef", "show", "crop", "component", "ntsc", "secam", "bt709", "bt470m", "bt470bg", "smpte170m", "smpte240m", "bt2020", "linear", "log100", "log316", "iec61966-2-4", "bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-12", "YCgCo", "bt2020nc", "bt2020c", "encoder/encoder.c", "x264_clip3( denom, 0, 7 ) == denom", "h->sh.weight[j][i].i_denom == denom", "invalid width x height (%dx%d)\n", "invalid CSP (only I420/YV12/NV12/I422/YV16/NV16/I444/YV24/BGR/BGRA/RGB supported)\n", "width not divisible by 2 (%dx%d)\n", "height not divisible by 4 (%dx%d)\n", "height not divisible by 2 (%dx%d)\n", "invalid crop-rect %u,%u,%u,%u\n", "OpenCL: frame size is too small, disabling opencl\n", "OpenCL: device id and device skip count configured; dropping skip\n", "broken ffmpeg default settings detected\n", "use an encoding preset (e.g. -vpre medium)\n", "preset usage: -vpre <speed> -vpre <profile>\n", "speed presets are listed in x264 --help\n", "profile is optional; x264 defaults to high\n", "no ratecontrol method specified\n", "%2d-bit AVC-Intra is not widely compatible\n", "10-bit x264 is required to encode AVC-Intra\n", "bitrate not specified\n", "VBV is incompatible with constant QP, ignored.\n", "VBV maxrate unspecified, assuming CBR\n", "VBV bufsize set but maxrate unspecified, ignored\n", "max bitrate less than average bitrate, assuming CBR\n", "VBV maxrate specified, but no bufsize, ignored\n", "interlace + slice-min-mbs is not implemented\n", "slice-min-mbs > row mb size (%d) not implemented\n", "subme=0 + direct=temporal is not supported\n", "b-pyramid normal + intra-refresh is not supported\n", "ref > 1 + intra-refresh is not supported\n", "intra-refresh is not compatible with open-gop\n", "lookaheadless mb-tree requires intra refresh or infinite keyint\n", "--%s used with psy on: results will be invalid!\n", "--ssim used with AQ off: results will be invalid!\n", "--psnr used with AQ on: results will be invalid!\n", "--tune %s should be used if attempting to benchmark %s!\n", "invalid level_idc: %d\n", "interlace + me=esa is not implemented\n", "interlace + weightp is not implemented\n", "using mv_range_thread = %d\n", "NAL HRD parameters require VBV parameters\n", "CBR HRD requires constant bitrate\n", "cannot create valid sample aspect ratio\n", "using SAR=%d/%d\n", "invalid DTS: PTS is less than DTS\n", " PSNR Y:%5.2f U:%5.2f V:%5.2f", " SSIM Y:%.5f", "frame=%4d QP=%.2f NAL=%d Slice:%c Poc:%-3d I:%-4d P:%-4d SKIP:%-4d size=%d bytes%s\n", "(first_y&1) == 0", "slice-max-size violated (frame %d, cause: slice-min-mbs)\n", "Effective timebase denominator %u exceeds H.264 maximum\n", "using cpu capabilities:", "SSE2", "SSE3", "SSE4.1", "BMI1", " none!", "MV cost test failed: x264 has been miscompiled!\n", "CLZ test failed: x264 has been miscompiled!\n", "failed to load OpenCL\n", "HRD bitrate: %i bits/sec\n", "CPB size: %i bits\n", "dump_yuv: can't write to %s\n", "dump_yuv: incompatible with non-regular file %s\n", "%d.%d", "profile %s, level %s\n", "profile %s, level %s, %s %d-bit\n", "h->i_ref[0] + h->i_ref[1] <= X264_REF_MAX", "x264_encoder_invalidate_reference is not supported with B-frames enabled\n", "x264_encoder_invalidate_reference is not supported with intra refresh enabled\n", "non-strictly-monotonic PTS\n", "uvDC", "uvAC", "h->thread[i]->fenc->i_reference_count == 1", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f\n", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f  PSNR Mean Y:%5.2f U:%5.2f V:%5.2f Avg:%5.2f Global:%5.2f\n", " %4.1f%%", "consecutive B-frames:%s\n", "I16..4%s: %4.1f%% %4.1f%% %4.1f%%", "..PCM", "mb I  %s\n", "mb P  %s  P16..4: %4.1f%% %4.1f%% %4.1f%% %4.1f%% %4.1f%%    skip:%4.1f%%\n", "  B16..8: %4.1f%% %4.1f%% %4.1f%%  direct:%4.1f%%  skip:%4.1f%%", "  L0:%4.1f%% L1:%4.1f%% BI:%4.1f%%", "mb B  %s\n", " inter:%.1f%%", " skip:%.1f%%", "field mbs: intra: %.1f%%%s\n", "8x8 transform intra:%.1f%%%s\n", "direct mvs  spatial:%.1f%% temporal:%.1f%%\n", " inter: %.1f%% %.1f%% %.1f%%", "coded y,%s,%s intra: %.1f%% %.1f%% %.1f%%%s\n", "i16 v,h,dc,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i%d v,h,dc,ddl,ddr,vr,hd,vl,hu: %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i8c dc,h,v,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "Weighted P-Frames: Y:%.1f%% UV:%.1f%%\n", "ref %c L%d:%s\n", "SSIM Mean Y:%.7f (%6.3fdb)\n", "PSNR Mean Y:%6.3f U:%6.3f V:%6.3f Avg:%6.3f Global:%6.3f kb/s:%.2f\n", "kb/s:%.2f\n", "(*frame)->i_reference_count > 0", "4:0:0", "4:2:0", "4:4:4", "encoder/lookahead.c", "dst->i_size < dst->i_max_size", "src->i_size", "OpenCL: %s\n", "OpenCL: fatal error, aborting encode\n", "libOpenCL.so", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "(SI)", "-DVECTORIZE=1", "OpenCL: Unable to query installed platforms\n", "OpenCL: malloc of installed platforms buffer failed\n", "OpenCL: %s does not support required image formats\n", "x264_lookahead.clbin", "OpenCL: Unable to find a compatible device\n", "Advanced Micro Devices, Inc.", "libatiadlxx.so", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "OpenCL acceleration disabled, switchable graphics detected\n", "OpenCL acceleration enabled with %s %s %s\n", "Compiling OpenCL kernels...\n", "OpenCL: unable to create program\n", "OpenCL: unable to open clbin file for write\n", "OpenCL: Unable to query program binary size, no cache file generated\n", "OpenCL: Unable to query program binary, no cache file generated\n", "OpenCL: Compilation failed, unable to query build log\n", "OpenCL: Compilation failed, unable to alloc build log\n", "OpenCL: Compilation failed, unable to get build log\n", "x264_kernel_build_log.txt", "OpenCL: Compilation failed, unable to create file x264_kernel_build_log.txt\n", "OpenCL: kernel build errors written to x264_kernel_build_log.txt\n", "OpenCL: Unable to compile kernel '%s' (%d)\n", "OpenCL: Unable to allocate page-locked buffer, error '%d'\n", "OpenCL: Unable to map page-locked buffer, error '%d'\n", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "common/macroblock.c", "dist_scale_factor >= -63 && dist_scale_factor <= 127", "Invalid input colorspace\n", "This build of x264 requires 8-bit input. Rebuild to support high depth input.\n", "v210 input is only compatible with bit-depth of 10 bits\n", "Input picture width (%d) is greater than stride (%d)\n", "common/frame.c", "list[0]", "frame->i_reference_count > 0", "Impossible QP constraints for CQM (min=%d, max=%d)\n", "can't open file '%s'\n", "INTRA4X4_LUMA", "bad coefficient in list '%s'\n", " \t\n,", "0123456789", "not enough coefficients in list '%s'\n", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", "encoder/cabac.c", "internal error P_L0 and partition=%d\n", "internal error\n", "internal error (invalid MB type)\n", "internal error (MV out of thread range)\n", "mb type: %d \n", "mv: l%dr%d (%d,%d) \n", "limit: %d \n", "mb_xy: %d,%d \n", "completed: %d \n", "recovering by using intra mode\n", "encoder/analyse.c", "h->mb.cache.pskip_mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "a->l0.me16x16.mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "internal error (!8x8 && !4x4)\n", "scene cut at %d Icost:%d Pcost:%d ratio:%.4f bias:%.4f gop:%d (imb:%d pmb:%d)\n", "encoder/slicetype.c", "h->frames.b_have_lowres", "B-ref at frame %d incompatible with B-pyramid %s \n", "B-ref at frame %d incompatible with B-pyramid %s and %d reference frames\n", "specified frame type (%d) at %d is not compatible with keyframe interval\n", "specified frame type is not compatible with max B-frames\n", "cost >= 0", "slice=%c but 2pass stats say %c\n", "MB-tree frametype %d doesn't match actual frametype %d.\n", "Incomplete MB-tree stats file.\n", "VBV buffer size cannot be smaller than one frame, using %d kbit\n", "VBV parameters cannot be changed when NAL HRD is in use\n", "CRF max must be greater than CRF\n", "constant rate-factor is incompatible with 2pass.\n", "HRD with very large timescale and bufsize not supported\n", "bitrate tolerance too small, using .01\n", "%d,%d,q=%d%n", "%d,%d,b=%f%n", "%d,%d%n", "invalid zone: \"%s\"\n", "invalid zone param: %s = %s\n", "invalid zone: start=%d end=%d\n", "invalid zone: bitrate_factor=%f\n", "failed to parse zones\n", "encoder/ratecontrol.c", "h->param.rc.psz_stat_in", "ratecontrol_init: can't open stats file\n", ".mbtree", "ratecontrol_init: can't open mbtree stats file\n", "#options:", "options list in stats file not valid\n", "#options: %dx%d", "resolution specified in stats file not valid\n", "timebase=", "timebase=%u/%u", "timebase specified in stats file not valid\n", "timebase mismatch with 1st pass (%u/%u vs %u/%u)\n", "bitdepth=", "bitdepth=%d", "different bitdepth setting than first pass (%d vs %d)\n", "weightp=", "weightp=%d", "different weightp setting than first pass (%d vs %d)\n", "bframes=", "bframes=%d", "different bframes setting than first pass (%d vs %d)\n", "b_pyramid=", "b_pyramid=%d", "different b_pyramid setting than first pass (%d vs %d)\n", "intra_refresh=", "intra_refresh=%d", "different intra_refresh setting than first pass (%d vs %d)\n", "open_gop=", "open_gop=%d", "different open_gop setting than first pass (%d vs %d)\n", "bluray_compat=", "bluray_compat=%d", "different bluray_compat setting than first pass (%d vs %d)\n", "interlaced=", "interlaced=%4s", "different interlaced setting than first pass (%s vs %s)\n", "keyint=", "different keyint setting than first pass (%.*s vs %.*s)\n", "qp=0", "1st pass was lossless, bitrate prediction will be inaccurate\n", "direct=3", "direct=auto not used on the first pass\n", "b_adapt=", "b_adapt=%d", "b_adapt method specified in stats file not valid\n", "rc_lookahead=", "rc_lookahead=%d", "empty stats file\n", "2nd pass has fewer frames than 1st pass (%d vs %d)\n", "2nd pass has more frames than 1st pass (%d vs %d)\n", " in:%d ", "bad frame number (%d) at stats line %d\n", " in:%*d out:%*d type:%c dur:%lld cpbdur:%lld q:%f aq:%f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c", "ref:", "w:%hd,%hd,%hd,%hd,%hd,%hd,%hd,%hd", "statistics are damaged at line %d, parser out=%d\n", "requested bitrate is too low. estimated minimum is %d kbps\n", "qscale[i] >= 0", "rce->new_qscale >= 0", "vbv-maxrate issue, qpmax or vbv-maxrate too low\n", "Error: 2pass curve failed to converge\n", "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", "try reducing target bitrate or reducing qp_min (currently %d)\n", "try reducing target bitrate\n", "try increasing target bitrate or increasing qp_max (currently %d)\n", "try increasing target bitrate\n", ".temp", "#options: %s\n", ".mbtree.temp", "final ratefactor: %.2f\n", "failed to rename \"%s\" to \"%s\"\n", "frame >= 0 && frame < rc->num_entries", "2nd pass has more frames than 1st pass (%d)\n", "continuing anyway, at constant QP=%d\n", "disabling adaptive B-frames\n", "in:%d out:%d type:%c dur:%lld cpbdur:%lld q:%.2f aq:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c ref:", "w:%d,%d,%d", ",%d,%d,%d,%d,%d ", "VBV underflow due to CRF-max (frame %d, %.0f bits)\n", "VBV underflow (frame %d, %.0f bits)\n", "ratecontrol_end: stats file could not be written to\n", "underflow", "overflow", "CPB %s: %.0lf bits in a %.0lf-bit buffer\n", "x264 - core %d%s - H.264/MPEG-4 AVC codec - Copy%s 2003-2014 - http://www.videolan.org/x264.html - options: %s", "AVC-Intra SEI is too large (%d)\n", "frame MB size (%dx%d) > level limit (%d)\n", "DPB size (%d frames, %d mbs) > level limit (%d frames, %d mbs)\n", "VBV bitrate (%lld) > level limit (%d)\n", "VBV buffer (%lld) > level limit (%d)\n", "MV range (%lld) > level limit (%d)\n", "interlaced (%lld) > level limit (%d)\n", "fake interlaced (%lld) > level limit (%d)\n", "MB rate (%lld) > level limit (%d)\n", "clCreateImage2D error '%d'\n", "clCreateBuffer error '%d'\n", "encoder/slicetype-cl.c", "bytes < PAGE_LOCKED_BUF_SIZE", "clEnqueueWriteBuffer error '%d'\n", "clSetKernelArg error '%d'\n", "clEnqueueNDRangeKernel error '%d'\n", "clEnqueueReadBuffer error '%d'\n", "clEnqueueCopyBuffer error '%d'\n", "common/rectangle.h", "!!&((())%%%\"\"", "))/113//+++((", "0<sb", " !\"\"!\"#%(+*'&')+,/27=?80.16;:7:?ACJTRKHFJTWW^]QKNSY[VRUZZUOIIII\n>\u000b\f\r", " !\"\"$%$$%&&&'),+)().1/./136<>;768:=AB@?BINOPONNRWYZ]_`aadhfbbcc", " $''&')-39:50/37:BKQSRNIHJMSUSRYc`Z^acimi_Y\\_^]\\XYZ]_`aadhfbbcc", "  !\"!!!!!!!!#%%$$#$&&$#$%&)*)'&&&')*)''()+,,,,,-///12333579:;99", " ###\"\"#'+--)'()*,07;?A;5447=>::?BBAFJFBADKMJJMLIIIILPYZRMPVTRRR", " !\"\"#$%$%&&&''((&&'&%'))*+--./.-+'%%(,--...//.,*+-/01210./00111", " $&%%()((**))))*+,,-..-,----./.-,*)+--/000.//./.--/01210.010111", " !!\"#$#!!#$%%&%%%$%%%&'%$%(*-.,)*,-/120.0124421/022332113431///", " %*---,&%(*,13/)(+,.0363//-/231./1/277301334466114566557;?><<<<", "  !!#######\"#&('%%%$#$&()*,-,*)(&$$%&(+,------)')-//000.,-//0//", " $%$%'')++*)))*+++,,,./.----.,,-,*)+.-,---...-,-,-//010.-.//0//", "  !\"###\"\"#$$$$$%&&&&&''&&')++*)(('())''(*/2/-..,-./16:60169<>??", " #$$#$')+-,)'(*++-01342233334563134489766787:::<=>>;9::=;;;<>??\n>\u000b\f\r", "  \"\"\"\"###$%$$#$&&&&&&&&&&'),+)(((('()('(+..,,,*)+.027:5027:=>>>", " #$$#$')+-,)'(*++-00022233334563134489766787:::<=>>;9::=;;;=>>>", " \"#$$$%$%'()((())*))+,,-.07<942114457:>AIRRPNIDGRZZXWZ_dkga_]cc", "ppppPP", "?&SU?", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "ImageWidth", "GIF89af", "VOXj\n", "VOXq ", "VOXr(", "VOXs0", "VOXv ", "VOXw0", "VOXx@", "VOXyP", "VOXz`", "TMPGEXS", "?333?", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "WwvfeUDDDDDD3DCDDEVfwP", "HwvfeUUDDC3334EUUfgwx`", "WgfveUDTDCC4CDDDEEUgw`", "WxwffUUDDC3#3DEUVffwx`", "I420", "IYUV", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "0BGR ", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "DVOO.", "L555,", "L565+", "b16g)", "b48r,", "\t\t\t\t\t\t\t\t", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\t\t\t\t\t\t\t\t\t", "Index value %d out of range (0 - %d) for %s at %s:%i\n", "\n\r\u000b\f", "S:>@;I>", "8`u?", "x264_weighted_pred_init", "x264_encoder_close", "x264_lookahead_shift", "c8ef3d10dedcd2579b7ae8c9f0d18028", "#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable\nconstant sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;\n/* 7.18.1.1  Exact-width integer types */\ntypedef signed char int8_t;\ntypedef unsigned char   uint8_t;\ntypedef short  int16_t;\ntypedef unsigned short  uint16_t;\ntypedef int  int32_t;\ntypedef unsigned   uint32_t;\ntypedef uint8_t  pixel;\ntypedef uint16_t sum_t;\ntypedef uint32_t sum2_t;\n#define LOWRES_COST_MASK ((1<<14)-1)\n#define LOWRES_COST_SHIFT 14\n#define COST_MAX (1<<28)\n#define PIXEL_MAX 255\n#define BITS_PER_SUM (8 * sizeof(sum_t))\n/* Constants for offsets into frame statistics buffer */\n#define COST_EST    0\n#define COST_EST_AQ 1\n#define INTRA_MBS   2\n#define COPY2_IF_LT( x, y, a, b )\\\nif((y)<(x))\\\n{\\\n(x) = (y);\\\n(a) = (b);\\\n}\nconstant int2 dia_offs[4] =\n{\n{0, -1}, {-1, 0}, {1, 0}, {0, 1},\n};\ninline pixel x264_clip_pixel( int x )\n{\nreturn (pixel) clamp( x, (int) 0, (int) PIXEL_MAX );\n}\ninline int2 x264_median_mv( short2 a, short2 b, short2 c )\n{\nshort2 t1 = min(a, b);\nshort2 t2 = min(max(a, b), c);\nreturn convert_int2(max(t1, t2));\n}\ninline sum2_t abs2( sum2_t a )\n{\nsum2_t s = ((a >> (BITS_PER_SUM - 1)) & (((sum2_t)1 << BITS_PER_SUM) + 1)) * ((sum_t)-1);\nreturn (a + s) ^ s;\n}\n#define HADAMARD4( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nsum2_t t0 = s0 + s1;\\\nsum2_t t1 = s0 - s1;\\\nsum2_t t2 = s2 + s3;\\\nsum2_t t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define HADAMARD4V( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nint2 t0 = s0 + s1;\\\nint2 t1 = s0 - s1;\\\nint2 t2 = s2 + s3;\\\nint2 t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define SATD_C_8x4_Q( name, q1, q2 )\\\nint name( q1 pixel *pix1, int i_pix1, q2 pixel *pix2, int i_pix2 )\\\n{\\\nsum2_t tmp[4][4];\\\nsum2_t a0, a1, a2, a3;\\\nsum2_t sum = 0;\\\nfor( int i = 0; i < 4; i++, pix1 += i_pix1, pix2 += i_pix2 )\\\n{\\\na0 = (pix1[0] - pix2[0]) + ((sum2_t)(pix1[4] - pix2[4]) << BITS_PER_SUM);\\\na1 = (pix1[1] - pix2[1]) + ((sum2_t)(pix1[5] - pix2[5]) << BITS_PER_SUM);\\\na2 = (pix1[2] - pix2[2]) + ((sum2_t)(pix1[6] - pix2[6]) << BITS_PER_SUM);\\\na3 = (pix1[3] - pix2[3]) + ((sum2_t)(pix1[7] - pix2[7]) << BITS_PER_SUM);\\\nHADAMARD4( tmp[i][0], tmp[i][1], tmp[i][2], tmp[i][3], a0, a1, a2, a3 );\\\n}\\\nfor( int i = 0; i < 4; i++ )\\\n{\\\nHADAMARD4( a0, a1, a2, a3, tmp[0][i], tmp[1][i], tmp[2][i], tmp[3][i] );\\\nsum += abs2( a0 ) + abs2( a1 ) + abs2( a2 ) + abs2( a3 );\\\n}\\\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\\\n}\n/*\n* Utility function to perform a parallel sum reduction of an array of integers\n*/\nint parallel_sum( int value, int x, volatile local int *array )\n{\narray[x] = value;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint dim = get_local_size( 0 );\nwhile( dim > 1 )\n{\ndim >>= 1;\nif( x < dim )\narray[x] += array[x + dim];\nif( dim > 32 )\nbarrier( CLK_LOCAL_MEM_FENCE );\n}\nreturn array[0];\n}\nint mv_cost( uint2 mvd )\n{\nfloat2 mvdf = (float2)(mvd.x, mvd.y) + 1.0f;\nfloat2 cost = round( log2(mvdf) * 2.0f + 0.718f + (float2)(!!mvd.x, !!mvd.y) );\nreturn (int) (cost.x + cost.y);\n}\n/* Mode selection routines, select the least SATD cost mode for each lowres\n* macroblock.  When measuring B slices, this includes measuring the cost of\n* three bidir modes.  */\n/* Four threads cooperatively measure 8x8 BIDIR cost with SATD */\nint bidir_satd_8x8_ii_coop4( read_only image2d_t fenc_lowres,\nint2 fencpos,\nread_only image2d_t fref0_planes,\nint2 qpos0,\nread_only image2d_t fref1_planes,\nint2 qpos1,\nint weight,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nsum2_t sum = 0;\nint2 fref0Apos = (int2)(qpos0.x>>2, qpos0.y>>2);\nint hpel0A = ((qpos0.x&2)>>1) + (qpos0.y&2);\nint2 qpos0B = (int2)qpos0 + (int2)(((qpos0.x&1)<<1), ((qpos0.y&1)<<1));\nint2 fref0Bpos = (int2)(qpos0B.x>>2, qpos0B.y>>2);\nint hpel0B = ((qpos0B.x&2)>>1) + (qpos0B.y&2);\nint2 fref1Apos = (int2)(qpos1.x>>2, qpos1.y>>2);\nint hpel1A = ((qpos1.x&2)>>1) + (qpos1.y&2);\nint2 qpos1B = (int2)qpos1 + (int2)(((qpos1.x&1)<<1), ((qpos1.y&1)<<1));\nint2 fref1Bpos = (int2)(qpos1B.x>>2, qpos1B.y>>2);\nint hpel1B = ((qpos1B.x&2)>>1) + (qpos1B.y&2);\nuint mask_shift0A = 8 * hpel0A, mask_shift0B = 8 * hpel0B;\nuint mask_shift1A = 8 * hpel1A, mask_shift1B = 8 * hpel1B;\nuint vA, vB;\nuint enc, ref0, ref1;\nuint a0, a1;\nconst int weight2 = 64 - weight;\n#define READ_BIDIR_DIFF( OUT, X )\\\nenc = read_imageui( fenc_lowres, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref0_planes, sampler, fref0Apos + (int2)(X, idx) ).s0 >> mask_shift0A) & 0xFF;\\\nvB = (read_imageui( fref0_planes, sampler, fref0Bpos + (int2)(X, idx) ).s0 >> mask_shift0B) & 0xFF;\\\nref0 = rhadd( vA, vB );\\\nvA = (read_imageui( fref1_planes, sampler, fref1Apos + (int2)(X, idx) ).s0 >> mask_shift1A) & 0xFF;\\\nvB = (read_imageui( fref1_planes, sampler, fref1Bpos + (int2)(X, idx) ).s0 >> mask_shift1B) & 0xFF;\\\nref1 = rhadd( vA, vB );\\\nOUT = enc - ((ref0 * weight + ref1 * weight2 + (1 << 5)) >> 6);\n#define READ_DIFF_EX( OUT, a, b )\\\nREAD_BIDIR_DIFF( a0, a );\\\nREAD_BIDIR_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\n#define ROW_8x4_SATD( a, b, c )\\\nfencpos.y += a;\\\nfref0Apos.y += b;\\\nfref0Bpos.y += b;\\\nfref1Apos.y += c;\\\nfref1Bpos.y += c;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\nROW_8x4_SATD( 0, 0, 0 );\nROW_8x4_SATD( 4, 4, 4 );\n#undef READ_BIDIR_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\n/*\n* mode selection - pick the least cost partition type for each 8x8 macroblock.\n* Intra, list0 or list1.  When measuring a B slice, also test three bidir\n* possibilities.\n*\n* fenc_lowres_mvs[0|1] and fenc_lowres_mv_costs[0|1] are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors:\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs0[(b - p0 - 1) * mb_count]\n*\n* global launch dimensions for P slice estimate:  [mb_width, mb_height]\n* global launch dimensions for B slice estimate:  [mb_width * 4, mb_height]\n*/\nkernel void mode_selection( read_only image2d_t   fenc_lowres,\nread_only image2d_t   fref0_planes,\nread_only image2d_t   fref1_planes,\nconst global short2  *fenc_lowres_mvs0,\nconst global short2  *fenc_lowres_mvs1,\nconst global short2  *fref1_lowres_mvs0,\nconst global int16_t *fenc_lowres_mv_costs0,\nconst global int16_t *fenc_lowres_mv_costs1,\nconst global uint16_t *fenc_intra_cost,\nglobal uint16_t      *lowres_costs,\nglobal int           *frame_stats,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nint                   mb_width,\nint                   bipred_weight,\nint                   dist_scale_factor,\nint                   b,\nint                   p0,\nint                   p1,\nint                   lambda )\n{\nint mb_x = get_global_id( 0 );\nint b_bidir = b < p1;\nif( b_bidir )\n{\n/* when mode_selection is run for B frames, it must perform BIDIR SATD\n* measurements, so it is launched with four times as many threads in\n* order to spread the work around more of the GPU.  And it can add\n* padding threads in the X direction. */\nmb_x >>= 2;\nif( mb_x >= mb_width )\nreturn;\n}\nint mb_y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint mb_count = mb_width * mb_height;\nint mb_xy = mb_x + mb_y * mb_width;\n/* Initialize int frame_stats[4] for next kernel (sum_inter_cost) */\nif( mb_x < 4 && mb_y == 0 )\nframe_stats[mb_x] = 0;\nint bcost = COST_MAX;\nint list_used = 0;\nif( !b_bidir )\n{\nint icost = fenc_intra_cost[mb_xy];\nCOPY2_IF_LT( bcost, icost, list_used, 0 );\n}\nif( b != p0 )\n{\nint mv_cost0 = fenc_lowres_mv_costs0[(b - p0 - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost0, list_used, 1 );\n}\nif( b != p1 )\n{\nint mv_cost1 = fenc_lowres_mv_costs1[(p1 - b - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost1, list_used, 2 );\n}\nif( b_bidir )\n{\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint mb_i = get_global_id( 0 ) & 3;\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\n#define TRY_BIDIR( mv0, mv1, penalty )\\\n{\\\nint2 qpos0 = (int2)((coord.x<<2) + mv0.x, (coord.y<<2) + mv0.y);\\\nint2 qpos1 = (int2)((coord.x<<2) + mv1.x, (coord.y<<2) + mv1.y);\\\ncost_local[mb_i] = bidir_satd_8x8_ii_coop4( fenc_lowres, coord, fref0_planes, qpos0, fref1_planes, qpos1, bipred_weight, satd_local, mb_i );\\\nint cost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\\\nCOPY2_IF_LT( bcost, penalty * lambda + cost, list_used, 3 );\\\n}\n/* temporal prediction */\nshort2 dmv0, dmv1;\nshort2 mvr = fref1_lowres_mvs0[mb_xy];\ndmv0 = (mvr * (short) dist_scale_factor + (short) 128) >> (short) 8;\ndmv1 = dmv0 - mvr;\nTRY_BIDIR( dmv0, dmv1, 0 )\nif( as_uint( dmv0 ) || as_uint( dmv1 ) )\n{\n/* B-direct prediction */\ndmv0 = 0; dmv1 = 0;\nTRY_BIDIR( dmv0, dmv1, 0 );\n}\n/* L0+L1 prediction */\ndmv0 = fenc_lowres_mvs0[(b - p0 - 1) * mb_count + mb_xy];\ndmv1 = fenc_lowres_mvs1[(p1 - b - 1) * mb_count + mb_xy];\nTRY_BIDIR( dmv0, dmv1, 5 );\n#undef TRY_BIDIR\n}\nlowres_costs[mb_xy] = min( bcost, LOWRES_COST_MASK ) + (list_used << LOWRES_COST_SHIFT);\n}\n/*\n* parallel sum inter costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_inter_cost( const global uint16_t *fenc_lowres_costs,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width,\nint                   bframe_bias,\nint                   b,\nint                   p0,\nint                   p1 )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nint intra_mbs = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_lowres_costs[mb_xy] & LOWRES_COST_MASK;\nint list = fenc_lowres_costs[mb_xy] >> LOWRES_COST_SHIFT;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nif( list == 0 && b_frame_score_mb )\nintra_mbs++;\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nintra_mbs   = parallel_sum( intra_mbs, x, buffer );\nif( b != p1 )\ncost_est = (int)((float)cost_est * 100.0f / (120.0f + (float)bframe_bias));\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST, cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\natomic_add( frame_stats + INTRA_MBS, intra_mbs );\n}\n}\n/*\n* downscale lowres luma: full-res buffer to down scale image, and to packed hpel image\n*\n* --\n*\n* fenc_img is an output image (area of memory referenced through a texture\n* cache). A read of any pixel location (x,y) returns four pixel values:\n*\n* val.s0 = P(x,y)\n* val.s1 = P(x+1,y)\n* val.s2 = P(x+2,y)\n* val.s3 = P(x+3,y)\n*\n* This is a 4x replication of the lowres pixels, a trade-off between memory\n* size and read latency.\n*\n* --\n*\n* hpel_planes is an output image that contains the four HPEL planes used for\n* subpel refinement. A read of any pixel location (x,y) returns a UInt32 with\n* the four planar values C | V | H | F\n*\n* launch dimensions:  [lowres-width, lowres-height]\n*/\nkernel void downscale_hpel( const global pixel *fenc,\nwrite_only image2d_t fenc_img,\nwrite_only image2d_t hpel_planes,\nint stride )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nuint4 values;\nfenc += y * stride * 2;\nconst global pixel *src1 = fenc + stride;\nconst global pixel *src2 = (y == get_global_size( 1 )-1) ? src1 : src1 + stride;\nint2 pos = (int2)(x, y);\npixel right, left;\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s0 = rhadd( right, left );           // F\nright = rhadd( fenc[2*x+1], src1[2*x+1] );\nleft  = rhadd( fenc[2*x+2], src1[2*x+2] );\nvalues.s1 = rhadd( right, left );           // H\nright = rhadd( src1[2*x], src2[2*x] );\nleft  = rhadd( src1[2*x+1], src2[2*x+1] );\nvalues.s2 = rhadd( right, left );           // V\nright = rhadd( src1[2*x+1], src2[2*x+1] );\nleft  = rhadd( src1[2*x+2], src2[2*x+2] );\nvalues.s3 = rhadd( right, left );           // C\nuint4 val = (uint4) ((values.s3 & 0xff) << 24) | ((values.s2 & 0xff) << 16) | ((values.s1 & 0xff) << 8) | (values.s0 & 0xff);\nwrite_imageui( hpel_planes, pos, val );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s1 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s2 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s3 = rhadd( right, left );\nwrite_imageui( fenc_img, pos, values );\n}\n/*\n* downscale lowres hierarchical motion search image, copy from one image to\n* another decimated image.  This kernel is called iteratively to generate all\n* of the downscales.\n*\n* launch dimensions:  [lower_res width, lower_res height]\n*/\nkernel void downscale1( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\n/* these select statements appear redundant, and they should be, but tests break when\n* they are not here.  I believe this was caused by a driver bug\n*/\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/*\n* Second copy of downscale kernel, no differences. This is a (no perf loss)\n* workaround for a scheduling bug in current Tahiti drivers.  This bug has\n* theoretically been fixed in the July 2012 driver release from AMD.\n*/\nkernel void downscale2( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/* OpenCL 1.2 finally added a memset command, but we're not targeting 1.2 */\nkernel void memset_int16( global int16_t *buf, int16_t value )\n{\nbuf[get_global_id( 0 )] = value;\n}\n/* Lookahead lowres intra analysis\n*\n* Each intra analysis function has been implemented twice, once for scalar GPUs\n* (NV) and once for vectorized GPUs (AMD pre-Southern Islands).  x264 detects\n* the GPU type and sets the -DVECTORIZE compile flag accordingly.\n*\n* All the intra analysis functions were based on their C versions in pixel.c\n* and produce the exact same results.\n*/\n/* force all clamp arguments and return value to int, prevent ambiguous types */\n#define clamp_int( X, MIN, MAX ) (int) clamp( (int)(X), (int)(MIN), (int)(MAX) )\n#if VECTORIZE\nint satd_8x4_intra_lr( const local pixel *data, int data_stride, int8 pr0, int8 pr1, int8 pr2, int8 pr3 )\n{\nint8 a_v, d_v;\nint2 tmp00, tmp01, tmp02, tmp03, tmp10, tmp11, tmp12, tmp13;\nint2 tmp20, tmp21, tmp22, tmp23, tmp30, tmp31, tmp32, tmp33;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr0).s04152637;\nHADAMARD4V( tmp00, tmp01, tmp02, tmp03, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr1).s04152637;\nHADAMARD4V( tmp10, tmp11, tmp12, tmp13, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr2).s04152637;\nHADAMARD4V( tmp20, tmp21, tmp22, tmp23, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr3).s04152637;\nHADAMARD4V( tmp30, tmp31, tmp32, tmp33, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\nuint8 sum_v;\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp00, tmp10, tmp20, tmp30 );\nsum_v = abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp01, tmp11, tmp21, tmp31 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp02, tmp12, tmp22, tmp32 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp03, tmp13, tmp23, tmp33 );\nsum_v += abs( a_v );\nuint4 sum2 = sum_v.hi + sum_v.lo;\nuint2 sum3 = sum2.hi + sum2.lo;\nreturn ( sum3.hi + sum3.lo ) >> 1;\n}\n#else\nSATD_C_8x4_Q( satd_8x4_lp, const local, private )\n#endif\n/****************************************************************************\n* 8x8 prediction for intra luma block\n****************************************************************************/\n#define F1            rhadd\n#define F2( a, b, c ) ( a+2*b+c+2 )>>2\n#if VECTORIZE\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = ( 2 + top[0] + 2*top[1] + top[2] ) >> 2;\npr0.s1 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr0.s2 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr0.s3 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr0.s4 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s5 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s6 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s7 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s0 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr1.s1 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr1.s2 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr1.s3 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr1.s4 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s5 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s6 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s7 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s0 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr2.s1 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr2.s2 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr2.s3 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr2.s4 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s5 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s6 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s7 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s0 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr3.s1 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr3.s2 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr3.s3 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr3.s4 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s5 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s6 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s7 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s1 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s2 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s3 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr0.s4 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr0.s5 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr0.s6 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr0.s7 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s0 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s1 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s2 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s3 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr1.s4 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr1.s5 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr1.s6 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s7 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s0 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s1 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s2 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s3 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr2.s4 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr2.s5 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr2.s6 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s7 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s0 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s1 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s2 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s3 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr3.s4 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr3.s5 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr3.s6 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s7 = ( 2 + top[14] + 3*top[15] ) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr3.s0 = F2( left[1], left[2], left[3] );\npr2.s0 = pr3.s1 = F2( left[0], left[1], left[2] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[1], left[0], left_top );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( top[3], top[4], top[5] );\npr0.s6 = pr1.s7 = F2( top[4], top[5], top[6] );\npr0.s7 = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr3.s0 = F2( left[5], left[6], left[7] );\npr2.s0 = pr3.s1 = F2( left[4], left[5], left[6] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[3], left[4], left[5] );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[2], left[3], left[4] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left[1], left[2], left[3] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( left[0], left[1], left[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( left[1], left[0], left_top );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( left[0], left_top, top[0] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( left_top, top[0], top[1] );\npr0.s6 = pr1.s7 = F2( top[0], top[1], top[2] );\npr0.s7 = F2( top[1], top[2], top[3] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr2.s0 = F2( left[1], left[0], left_top );\npr3.s0 = F2( left[2], left[1], left[0] );\npr1.s0 = pr3.s1 = F2( left[0], left_top, top[0] );\npr0.s0 = pr2.s1 = F1( left_top, top[0] );\npr1.s1 = pr3.s2 = F2( left_top, top[0], top[1] );\npr0.s1 = pr2.s2 = F1( top[0], top[1] );\npr1.s2 = pr3.s3 = F2( top[0], top[1], top[2] );\npr0.s2 = pr2.s3 = F1( top[1], top[2] );\npr1.s3 = pr3.s4 = F2( top[1], top[2], top[3] );\npr0.s3 = pr2.s4 = F1( top[2], top[3] );\npr1.s4 = pr3.s5 = F2( top[2], top[3], top[4] );\npr0.s4 = pr2.s5 = F1( top[3], top[4] );\npr1.s5 = pr3.s6 = F2( top[3], top[4], top[5] );\npr0.s5 = pr2.s6 = F1( top[4], top[5] );\npr1.s6 = pr3.s7 = F2( top[4], top[5], top[6] );\npr0.s6 = pr2.s7 = F1( top[5], top[6] );\npr1.s7 = F2( top[5], top[6], top[7] );\npr0.s7 = F1( top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr2.s0 = F2( left[5], left[4], left[3] );\npr3.s0 = F2( left[6], left[5], left[4] );\npr0.s0 = pr2.s1 = F2( left[3], left[2], left[1] );\npr1.s0 = pr3.s1 = F2( left[4], left[3], left[2] );\npr0.s1 = pr2.s2 = F2( left[1], left[0], left_top );\npr1.s1 = pr3.s2 = F2( left[2], left[1], left[0] );\npr1.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s2 = pr2.s3 = F1( left_top, top[0] );\npr1.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s3 = pr2.s4 = F1( top[0], top[1] );\npr1.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s4 = pr2.s5 = F1( top[1], top[2] );\npr1.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s5 = pr2.s6 = F1( top[2], top[3] );\npr1.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s6 = pr2.s7 = F1( top[3], top[4] );\npr1.s7 = F2( top[3], top[4], top[5] );\npr0.s7 = F1( top[4], top[5] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n#undef PRED\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left_top, left[0] ); pr0.s1 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr0.s2 = F2( top[1], top[0], left_top ); pr0.s3 = F2( top[2], top[1], top[0] );\npr0.s4 = F2( top[3], top[2], top[1] ); pr0.s5 = F2( top[4], top[3], top[2] );\npr0.s6 = F2( top[5], top[4], top[3] ); pr0.s7 = F2( top[6], top[5], top[4] );\npr1.s0 = F1( left[0], left[1] ); pr1.s1 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s2 = F1( left_top, left[0] ); pr1.s3 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr1.s4 = F2( top[1], top[0], left_top ); pr1.s5 = F2( top[2], top[1], top[0] );\npr1.s6 = F2( top[3], top[2], top[1] ); pr1.s7 = F2( top[4], top[3], top[2] );\npr2.s0 = F1( left[1], left[2] ); pr2.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s2 = F1( left[0], left[1] ); pr2.s3 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr2.s4 = F1( left_top, left[0] ); pr2.s5 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr2.s6 = F2( top[1], top[0], left_top ); pr2.s7 = F2( top[2], top[1], top[0] );\npr3.s0 = F1( left[2], left[3] ); pr3.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s2 = F1( left[1], left[2] ); pr3.s3 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr3.s4 = F1( left[0], left[1] ); pr3.s5 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr3.s6 = F1( left_top, left[0] ); pr3.s7 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[3], left[4] ); pr0.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s2 = F1( left[2], left[3] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[1], left[2] ); pr0.s5 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s6 = F1( left[0], left[1] ); pr0.s7 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s0 = F1( left[4], left[5] ); pr1.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s2 = F1( left[3], left[4] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[2], left[3] ); pr1.s5 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s6 = F1( left[1], left[2] ); pr1.s7 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s0 = F1( left[5], left[6] ); pr2.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s2 = F1( left[4], left[5] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[3], left[4] ); pr2.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s6 = F1( left[2], left[3] ); pr2.s7 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s0 = F1( left[6], left[7] ); pr3.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s2 = F1( left[5], left[6] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[4], left[5] ); pr3.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s6 = F1( left[3], left[4] ); pr3.s7 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( top[0], top[1] );\npr1.s0 = F2( top[0], top[1], top[2] );\npr2.s0 = pr0.s1 = F1( top[1], top[2] );\npr3.s0 = pr1.s1 = F2( top[1], top[2], top[3] );\npr2.s1 = pr0.s2 = F1( top[2], top[3] );\npr3.s1 = pr1.s2 = F2( top[2], top[3], top[4] );\npr2.s2 = pr0.s3 = F1( top[3], top[4] );\npr3.s2 = pr1.s3 = F2( top[3], top[4], top[5] );\npr2.s3 = pr0.s4 = F1( top[4], top[5] );\npr3.s3 = pr1.s4 = F2( top[4], top[5], top[6] );\npr2.s4 = pr0.s5 = F1( top[5], top[6] );\npr3.s4 = pr1.s5 = F2( top[5], top[6], top[7] );\npr2.s5 = pr0.s6 = F1( top[6], top[7] );\npr3.s5 = pr1.s6 = F2( top[6], top[7], top[8] );\npr2.s6 = pr0.s7 = F1( top[7], top[8] );\npr3.s6 = pr1.s7 = F2( top[7], top[8], top[9] );\npr2.s7 = F1( top[8], top[9] );\npr3.s7 = F2( top[8], top[9], top[10] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( top[2], top[3] );\npr1.s0 = F2( top[2], top[3], top[4] );\npr2.s0 = pr0.s1 = F1( top[3], top[4] );\npr3.s0 = pr1.s1 = F2( top[3], top[4], top[5] );\npr2.s1 = pr0.s2 = F1( top[4], top[5] );\npr3.s1 = pr1.s2 = F2( top[4], top[5], top[6] );\npr2.s2 = pr0.s3 = F1( top[5], top[6] );\npr3.s2 = pr1.s3 = F2( top[5], top[6], top[7] );\npr2.s3 = pr0.s4 = F1( top[6], top[7] );\npr3.s3 = pr1.s4 = F2( top[6], top[7], top[8] );\npr2.s4 = pr0.s5 = F1( top[7], top[8] );\npr3.s4 = pr1.s5 = F2( top[7], top[8], top[9] );\npr2.s5 = pr0.s6 = F1( top[8], top[9] );\npr3.s5 = pr1.s6 = F2( top[8], top[9], top[10] );\npr2.s6 = pr0.s7 = F1( top[9], top[10] );\npr3.s6 = pr1.s7 = F2( top[9], top[10], top[11] );\npr2.s7 = F1( top[10], top[11] );\npr3.s7 = F2( top[10], top[11], top[12] );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left[0], left[1] ); pr0.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s2 = F1( left[1], left[2] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[2], left[3] ); pr0.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s6 = F1( left[3], left[4] ); pr0.s7 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s0 = F1( left[1], left[2] ); pr1.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s2 = F1( left[2], left[3] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[3], left[4] ); pr1.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s6 = F1( left[4], left[5] ); pr1.s7 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s0 = F1( left[2], left[3] ); pr2.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s2 = F1( left[3], left[4] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[4], left[5] ); pr2.s5 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s6 = F1( left[5], left[6] ); pr2.s7 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s0 = F1( left[3], left[4] ); pr3.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s2 = F1( left[4], left[5] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[5], left[6] ); pr3.s5 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s6 = F1( left[6], left[7] ); pr3.s7 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[4], left[5] ); pr0.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr0.s2 = F1( left[5], left[6] ); pr0.s3 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr0.s4 = F1( left[6], left[7] ); pr0.s5 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr0.s6 = left[7]; pr0.s7 = left[7];\npr1.s0 = F1( left[5], left[6] ); pr1.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr1.s2 = F1( left[6], left[7] ); pr1.s3 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr1.s4 = left[7]; pr1.s5 = left[7];\npr1.s6 = left[7]; pr1.s7 = left[7];\npr2.s0 = F1( left[6], left[7] ); pr2.s1 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr2.s2 = left[7]; pr2.s3 = left[7];\npr2.s4 = left[7]; pr2.s5 = left[7];\npr2.s6 = left[7]; pr2.s7 = left[7];\npr3 = (int8)left[7];\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nconst local pixel *src_l = src;\nint8 pr0, pr1, pr2, pr3;\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1]; src += src_stride;\nint satd = satd_8x4_intra_lr( src_l, src_stride, pr0, pr1, pr2, pr3 );\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1];\nreturn satd + satd_8x4_intra_lr( src_l + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nint8 pred = convert_int8( vload8( 0, &src[-src_stride] ));\nreturn satd_8x4_intra_lr( src, src_stride, pred, pred, pred, pred ) +\nsatd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pred, pred, pred, pred );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nint pix = i00;\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npix = i00;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nint8 dc0;\ndc0.lo = (int4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (int4)( (s1 + 2) >> 2 );\nint satd = satd_8x4_intra_lr( src, src_stride, dc0, dc0, dc0, dc0 );\ndc0.lo = (int4)( (s3 + 2) >> 2 );\ndc0.hi = (int4)( (s1 + s3 + 4) >> 3 );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, dc0, dc0, dc0, dc0 );\n}\n#else  /* not vectorized: private is cheap registers are scarce */\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nfor( int y = 0; y < 4; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + y*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 4; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + ( y - 4 )*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\npred[31] = ( 2 + top[14] + 3*top[15] ) >> 2;\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[1], left[0], left_top );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( top[3], top[4], top[5] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 7, 0 ) = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 3 ) = F2( left[5], left[6], left[7] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[4], left[5], left[6] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[3], left[4], left[5] );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[2], left[3], left[4] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( left[1], left[0], left_top );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( left_top, top[0], top[1] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 7, 0 ) = F2( top[1], top[2], top[3] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 2 ) = F2( left[1], left[0], left_top );\nPRED( 0, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F1( left_top, top[0] );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F1( top[0], top[1] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( top[1], top[2] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[2], top[3] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[3], top[4] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[3], top[4], top[5] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[4], top[5] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[4], top[5], top[6] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[5], top[6] );\nPRED( 7, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 7, 0 ) = F1( top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 2 ) = F2( left[5], left[4], left[3] );\nPRED( 0, 3 ) = F2( left[6], left[5], left[4] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F2( left[3], left[2], left[1] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[4], left[3], left[2] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F2( left[1], left[0], left_top );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( left_top, top[0] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[0], top[1] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[1], top[2] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[2], top[3] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[3], top[4] );\nPRED( 7, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 7, 0 ) = F1( top[4], top[5] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\ninline uint32_t pack16to32( uint32_t a, uint32_t b )\n{\nreturn a + (b << 16);\n}\ninline uint32_t pack8to16( uint32_t a, uint32_t b )\n{\nreturn a + (b << 8);\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\nint satd;\nint p1 =  pack8to16( (F1( left[6], left[7] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p2 =  pack8to16( (F1( left[5], left[6] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p3 =  pack8to16( (F1( left[4], left[5] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p4 =  pack8to16( (F1( left[3], left[4] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p5 =  pack8to16( (F1( left[2], left[3] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p6 =  pack8to16( (F1( left[1], left[2] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p7 =  pack8to16( (F1( left[0], left[1] )), ((left_top + 2 * left[0] + left[1] + 2) >> 2) );\nint p8 =  pack8to16( (F1( left_top, left[0] )), ((left[0] + 2 * left_top + top[0] + 2) >> 2) );\nint p9 =  pack8to16( (F2( top[1], top[0], left_top )), (F2( top[2], top[1], top[0] )) );\nint p10 =  pack8to16( (F2( top[3], top[2], top[1] )), (F2( top[4], top[3], top[2] )) );\nint p11 =  pack8to16( (F2( top[5], top[4], top[3] )), (F2( top[6], top[5], top[4] )) );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p10, p11 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p9, p10 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[4 + 3 * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[4 + 3 * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nint satd;\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 0 ) = F1( top[0], top[1] );\nPRED( 0, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[1], top[2] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[1], top[2], top[3] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[2], top[3] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[3], top[4] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[4], top[5] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[5], top[6] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[6], top[7] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[7], top[8] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 7, 2 ) = F1( top[8], top[9] );\nPRED( 7, 3 ) = F2( top[8], top[9], top[10] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 0 ) = F1( top[2], top[3] );\nPRED( 0, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[3], top[4] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[4], top[5] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[5], top[6] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[6], top[7] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[7], top[8] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[8], top[9] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[8], top[9], top[10] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[9], top[10] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[9], top[10], top[11] );\nPRED( 7, 2 ) = F1( top[10], top[11] );\nPRED( 7, 3 ) = F2( top[10], top[11], top[12] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nprivate pixel pred[32];\nint satd;\nint p1 = pack8to16( (F1( left[0], left[1] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p2 = pack8to16( (F1( left[1], left[2] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p3 = pack8to16( (F1( left[2], left[3] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p4 = pack8to16( (F1( left[3], left[4] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p5 = pack8to16( (F1( left[4], left[5] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p6 = pack8to16( (F1( left[5], left[6] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p7 = pack8to16( (F1( left[6], left[7] )), ((left[6] + 2 * left[7] + left[7] + 2) >> 2) );\nint p8 = pack8to16( left[7], left[7] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nconst local pixel *src_l = src;\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred ); src += src_stride;\nint satd = satd_8x4_lp( src_l, src_stride, pred, 8 );\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred );\nreturn satd + satd_8x4_lp( src_l + ( src_stride << 2 ), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nuchar16 v16;\nv16.lo = vload8( 0, &src[-src_stride] );\nv16.hi = vload8( 0, &src[-src_stride] );\nvstore16( v16, 0, pred );\nvstore16( v16, 1, pred );\nreturn satd_8x4_lp( src, src_stride, pred, 8 ) +\nsatd_8x4_lp( src + (src_stride << 2), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nprivate pixel pred[32];\nint satd;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nuchar8 dc0;\ndc0.lo = (uchar4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (uchar4)( (s1 + 2) >> 2 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\ndc0.lo = (uchar4)( (s3 + 2) >> 2 );\ndc0.hi = (uchar4)( (s1 + s3 + 4) >> 3 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nreturn satd + satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\n}\n#endif\n/* Find the least cost intra mode for 32 8x8 macroblocks per workgroup\n*\n* Loads 33 macroblocks plus the pixels directly above them into local memory,\n* padding where necessary with edge pixels.  It then cooperatively calculates\n* smoothed top and left pixels for use in some of the analysis.\n*\n* Then groups of 32 threads each calculate a single intra mode for each 8x8\n* block.  Since consecutive threads are calculating the same intra mode there\n* is no code-path divergence.  8 intra costs are calculated simultaneously.  If\n* the \"slow\" argument is not zero, the final two (least likely) intra modes are\n* tested in a second pass.  The slow mode is only enabled for presets slow,\n* slower, and placebo.\n*\n* This allows all of the pixels functions to read pixels from local memory, and\n* avoids re-fetching edge pixels from global memory.  And it allows us to\n* calculate all of the intra mode costs simultaneously without branch divergence.\n*\n* Local dimension:    [ 32, 8 ]\n* Global dimensions:  [ paddedWidth, height ] */\nkernel void mb_intra_cost_satd_8x8( read_only image2d_t  fenc,\nglobal uint16_t     *fenc_intra_cost,\nglobal int          *frame_stats,\nint                  lambda,\nint                  mb_width,\nint                  slow )\n{\n#define CACHE_STRIDE 265\n#define BLOCK_OFFSET 266\nlocal pixel cache[2385];\nlocal int cost_buf[32];\nlocal pixel top[32 * 16];\nlocal pixel left[32 * 8];\nlocal pixel left_top[32];\nint lx = get_local_id( 0 );\nint ly = get_local_id( 1 );\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nint gidx = get_group_id( 0 );\nint gidy = get_group_id( 1 );\nint linear_id = ly * get_local_size( 0 ) + lx;\nint satd = COST_MAX;\nint basex = gidx << 8;\nint basey = (gidy << 3) - 1;\n/* Load 33 8x8 macroblocks and the pixels above them into local cache */\nfor( int y = 0; y < 9 && linear_id < (33<<3)>>2; y++ )\n{\nint x = linear_id << 2;\nuint4 data = read_imageui( fenc, sampler, (int2)(x + basex, y + basey) );\ncache[y * CACHE_STRIDE + 1 + x] = data.s0;\ncache[y * CACHE_STRIDE + 1 + x + 1] = data.s1;\ncache[y * CACHE_STRIDE + 1 + x + 2] = data.s2;\ncache[y * CACHE_STRIDE + 1 + x + 3] = data.s3;\n}\n/* load pixels on left edge */\nif( linear_id < 9 )\ncache[linear_id * CACHE_STRIDE] = read_imageui( fenc, sampler, (int2)( basex - 1, linear_id + basey) ).s0;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint j = ly;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nj += 8;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nleft[lx*8 + ly] = ( cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*(ly - 1)] +\n2*cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*ly] +\ncache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*clamp((ly + 1), 0, 7 )] + 2 ) >> 2;\nif( 0 == ly )\n{\nleft_top[lx] = ( cache[BLOCK_OFFSET + 8*lx - 1] + 2*cache[BLOCK_OFFSET + 8*lx - 1 - CACHE_STRIDE] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE] + 2 ) >> 2;\ncost_buf[lx] = COST_MAX;\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nswitch( ly )\n{\ncase 0:\nsatd = x264_predict_8x8c_h( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 1:\nsatd = x264_predict_8x8c_v( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 2:\nsatd = x264_predict_8x8c_dc( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 3:\nsatd = x264_predict_8x8c_p( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 4:\nsatd = x264_predict_8x8_ddr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 5:\nsatd = x264_predict_8x8_vr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 6:\nsatd = x264_predict_8x8_hd( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 7:\nsatd = x264_predict_8x8_hu( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &left[8*lx] );\nbreak;\ndefault:\nbreak;\n}\natom_min( &cost_buf[lx], satd );\nif( slow )\n{\nswitch( ly )\n{\ncase 0: // DDL\nsatd = x264_predict_8x8_ddl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ncase 1: // VL\nsatd = x264_predict_8x8_vl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ndefault:\nbreak;\n}\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nif( (0 == ly) && (gx < mb_width) )\nfenc_intra_cost[gidy * mb_width + gx] = cost_buf[lx]+ 5*lambda;\nif( gx < 2 && gy == 0 )\nframe_stats[gx] = 0;\n#undef CACHE_STRIDE\n#undef BLOCK_OFFSET\n}\n/*\n* parallel sum intra costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_intra_cost( const global uint16_t *fenc_intra_cost,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_intra_cost[mb_xy];\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST,    cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\n}\n}\n/* Hierarchical (iterative) OpenCL lowres motion search */\ninline int find_downscale_mb_xy( int x, int y, int mb_width, int mb_height )\n{\n/* edge macroblocks might not have a direct descendant, use nearest */\nx = select( x >> 1, (x - (mb_width&1)) >> 1, x == mb_width-1 );\ny = select( y >> 1, (y - (mb_height&1)) >> 1, y == mb_height-1 );\nreturn (mb_width>>1) * y + x;\n}\n/* Four threads calculate an 8x8 SAD.  Each does two rows */\nint sad_8x8_ii_coop4( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos, int idx, local int16_t *costs )\n{\nfrefpos.y += idx << 1;\nfencpos.y += idx << 1;\nint cost = 0;\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge.  The GPU clamps reads from\n* (-1, 0) to (0,0), so you get pixels [0, 1, 2, 3] when what you really\n* want are [0, 0, 1, 2]\n*/\nfor( int y = 0; y < 2; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\npixel ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\n}\nelse\n{\nuint4 enc, ref, costs = 0;\nenc = read_imageui( fenc, sampler, fencpos );\nref = read_imageui( fref, sampler, frefpos );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 0) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 0) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(0, 1) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 1) );\ncosts += abs_diff( enc, ref );\ncost = costs.s0 + costs.s1 + costs.s2 + costs.s3;\n}\ncosts[idx] = cost;\nreturn costs[0] + costs[1] + costs[2] + costs[3];\n}\n/* One thread performs 8x8 SAD */\nint sad_8x8_ii( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos )\n{\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge */\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\nuint ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost;\n}\nelse\n{\nuint4 enc, ref, cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x += 4 )\n{\nenc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) );\nref = read_imageui( fref, sampler, frefpos + (int2)(x, y) );\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost.s0 + cost.s1 + cost.s2 + cost.s3;\n}\n}\n/*\n* hierarchical motion estimation\n*\n* Each kernel launch is a single iteration\n*\n* MB per work group is determined by lclx / 4 * lcly\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*/\nkernel void hierarchical_motion( read_only image2d_t  fenc,\nread_only image2d_t  fref,\nconst global short2 *in_mvs,\nglobal short2       *out_mvs,\nglobal int16_t      *out_mv_costs,\nglobal short2       *mvp_buffer,\nlocal int16_t       *cost_local,\nlocal short2        *mvc_local,\nint                  mb_width,\nint                  lambda,\nint                  me_range,\nint                  scale,\nint                  b_shift_index,\nint                  b_first_iteration,\nint                  b_reverse_references )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\nconst int mb_size = 8;\nint2 coord = (int2)(mb_x, mb_y) * mb_size;\nconst int mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += 4 * mb_in_group;\nint i_mvc = 0;\nmvc_local += 4 * mb_in_group;\nmvc_local[mb_i] = 0;\nint2 mvp =0;\nif( !b_first_iteration )\n{\n#define MVC( DX, DY )\\\n{\\\nint px = mb_x + DX;\\\nint py = mb_y + DY;\\\nmvc_local[i_mvc] = b_shift_index ? in_mvs[find_downscale_mb_xy( px, py, mb_width, mb_height )] : \\\nin_mvs[mb_width * py + px];\\\nmvc_local[i_mvc] >>= (short) scale;\\\ni_mvc++;\\\n}\n/* Find MVP from median of MVCs */\nif( b_reverse_references )\n{\n/* odd iterations: derive MVP from down and right */\nif( mb_x < mb_width - 1 )\nMVC( 1, 0 );\nif( mb_y < mb_height - 1 )\n{\nMVC( 0, 1 );\nif( mb_x > b_shift_index )\nMVC( -1, 1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, 1 );\n}\n}\nelse\n{\n/* even iterations: derive MVP from up and left */\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > b_shift_index )\nMVC( -1, -1 );\n}\n}\n#undef MVC\nmvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\n}\n/* current mvp matches the previous mvp and we have not changed scale.  We know\n* we're going to arrive at the same MV again, so just copy the previous\n* result to our output. */\nif( !b_shift_index && mvp.x == mvp_buffer[mb_xy].x && mvp.y == mvp_buffer[mb_xy].y )\n{\nout_mvs[mb_xy] = in_mvs[mb_xy];\nreturn;\n}\nmvp_buffer[mb_xy] = convert_short2_sat(mvp);\nint2 mv_min = -mb_size * (int2)(mb_x, mb_y) - 4;\nint2 mv_max = mb_size * ((int2)(mb_width, mb_height) - (int2)(mb_x, mb_y) - 1) + 4;\nint2 bestmv = clamp(mvp, mv_min, mv_max);\nint2 refcrd = coord + bestmv;\n/* measure cost at bestmv */\nint bcost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\nlambda * mv_cost( abs_diff( bestmv, mvp ) << (2 + scale) );\ndo\n{\n/* measure costs at offsets from bestmv */\nrefcrd = coord + bestmv + dia_offs[mb_i];\nint2 trymv = bestmv + dia_offs[mb_i];\nint cost = sad_8x8_ii( fenc, coord, fref, refcrd ) +\nlambda * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\ncost_local[mb_i] = (cost<<2) | mb_i;\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\nif( (cost >> 2) >= bcost )\nbreak;\nbestmv += dia_offs[cost&3];\nbcost = cost>>2;\nif( bestmv.x >= mv_max.x || bestmv.x <= mv_min.x || bestmv.y >= mv_max.y || bestmv.y <= mv_min.y )\nbreak;\n}\nwhile( --me_range > 0 );\nint2 trymv = 0, diff = 0;\n#define COST_MV_NO_PAD( L )\\\ntrymv = clamp( trymv, mv_min, mv_max );\\\ndiff = convert_int2_sat(abs_diff( mvp, trymv ));\\\nif( diff.x > 1 || diff.y > 1 ) {\\\nint2 refcrd = coord + trymv;\\\nint cost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\\\nL * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\\\nif( cost < bcost ) { bcost = cost; bestmv = trymv; } }\nCOST_MV_NO_PAD( 0 );\nif( !b_first_iteration )\n{\n/* try cost at previous iteration's MV, if MVP was too far away */\nint2 prevmv = b_shift_index ? convert_int2_sat(in_mvs[find_downscale_mb_xy( mb_x, mb_y, mb_width, mb_height )]) : convert_int2_sat(in_mvs[mb_xy]);\nprevmv >>= scale;\ntrymv = prevmv;\nCOST_MV_NO_PAD( lambda );\n}\nfor( int i = 0; i < i_mvc; i++ )\n{\n/* try cost at each candidate MV, if MVP was too far away */\ntrymv = convert_int2_sat( mvc_local[i] );\nCOST_MV_NO_PAD( lambda );\n}\nif( mb_i == 0 )\n{\nbestmv <<= scale;\nout_mvs[mb_xy] = convert_short2_sat(bestmv);\nout_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n}\n/* OpenCL lowres subpel Refine */\n/* Each thread performs 8x8 SAD.  4 threads per MB, so the 4 DIA HPEL offsets are\n* calculated simultaneously */\nint sad_8x8_ii_hpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefpos = qpos >> 2;\nint hpel_idx = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nuint mask_shift = 8 * hpel_idx;\nuint4 cost4 = 0;\nfor( int y = 0; y < 8; y++ )\n{\nuint4 enc, val4;\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(0, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(1, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(2, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(3, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(4, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(5, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(6, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(7, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\n}\nreturn cost4.s0 + cost4.s1 + cost4.s2 + cost4.s3;\n}\n/* One thread measures 8x8 SAD cost at a QPEL offset into an HPEL plane */\nint sad_8x8_ii_qpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nint2 qposB = qpos + ((qpos & 1) << 1);\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x & 2) >> 1) + (qposB.y & 2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y)).s0;\nuint vA = (read_imageui( fref_planes, sampler, frefApos + (int2)(x, y)).s0 >> mask_shift0) & 0xFF;\nuint vB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(x, y)).s0 >> mask_shift1) & 0xFF;\ncost += abs_diff( enc, rhadd( vA, vB ) );\n}\n}\nreturn cost;\n}\n/* Four threads measure 8x8 SATD cost at a QPEL offset into an HPEL plane\n*\n* Each thread collects 1/4 of the rows of diffs and processes one quarter of\n* the transforms\n*/\nint satd_8x8_ii_qpel_coop4( read_only image2d_t fenc,\nint2 fencpos,\nread_only image2d_t fref_planes,\nint2 qpos,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x&2)>>1) + (qpos.y&2);\nint2 qposB = qpos + (int2)(((qpos.x&1)<<1), ((qpos.y&1)<<1));\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x&2)>>1) + (qposB.y&2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nuint vA, vB;\nuint a0, a1;\nuint enc;\nsum2_t sum = 0;\n#define READ_DIFF( OUT, X )\\\nenc = read_imageui( fenc, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref_planes, sampler, frefApos + (int2)(X, idx) ).s0 >> mask_shift0) & 0xFF;\\\nvB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(X, idx) ).s0 >> mask_shift1) & 0xFF;\\\nOUT = enc - rhadd( vA, vB );\n#define READ_DIFF_EX( OUT, a, b )\\\n{\\\nREAD_DIFF( a0, a );\\\nREAD_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\\\n}\n#define ROW_8x4_SATD( a, b )\\\n{\\\nfencpos.y += a;\\\nfrefApos.y += b;\\\nfrefBpos.y += b;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\\\n}\nROW_8x4_SATD( 0, 0 );\nROW_8x4_SATD( 4, 4 );\n#undef READ_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\nconstant int2 hpoffs[4] =\n{\n{0, -2}, {-2, 0}, {2, 0}, {0, 2}\n};\n/* sub pixel refinement of motion vectors, output MVs and costs are moved from\n* temporary buffers into final per-frame buffer\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*\n* With X being the source 16x16 pixels, F is the lowres pixel used by the\n* motion search.  We will now utilize the H V and C pixels (stored in separate\n* planes) to search at half-pel increments.\n*\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*  V C V C V\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*\n* The YX HPEL bits of the motion vector selects the plane we search in.  The\n* four planes are packed in the fref_planes 2D image buffer.  Each sample\n* returns:  s0 = F, s1 = H, s2 = V, s3 = C */\nkernel void subpel_refine( read_only image2d_t   fenc,\nread_only image2d_t   fref_planes,\nconst global short2  *in_mvs,\nconst global int16_t *in_sad_mv_costs,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nlocal short2         *mvc_local,\nglobal short2        *fenc_lowres_mv,\nglobal int16_t       *fenc_lowres_mv_costs,\nint                   mb_width,\nint                   lambda,\nint                   b,\nint                   ref,\nint                   b_islist1 )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\n/* fenc_lowres_mv and fenc_lowres_mv_costs are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors.  The kernel will be passed the correct\n* directional buffer for the direction of the search: list1 or list0\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs[(b - p0 - 1) * mb_count] */\nfenc_lowres_mv +=       (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\nfenc_lowres_mv_costs += (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\n/* Adjust pointers into local memory buffers for this thread's data */\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\nmvc_local += mb_in_group * 4;\nint i_mvc = 0;\nmvc_local[0] = mvc_local[1] = mvc_local[2] = mvc_local[3] = 0;\n#define MVC( DX, DY ) mvc_local[i_mvc++] = in_mvs[mb_width * (mb_y + DY) + (mb_x + DX)];\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > 0 )\nMVC( -1, -1 );\n}\n#undef MVC\nint2 mvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\nint bcost =  in_sad_mv_costs[mb_xy];\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint2 bmv = convert_int2_sat( in_mvs[mb_xy] );\n/* Make mvp and bmv QPEL MV */\nmvp <<= 2; bmv <<= 2;\n#define HPEL_QPEL( ARR, FUNC )\\\n{\\\nint2 trymv = bmv + ARR[mb_i];\\\nint2 qpos = (coord << 2) + trymv;\\\nint cost = FUNC( fenc, coord, fref_planes, qpos ) + lambda * mv_cost( abs_diff( trymv, mvp ) );\\\ncost_local[mb_i] = (cost<<2) + mb_i;\\\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\\\nif( (cost>>2) < bcost )\\\n{\\\nbmv += ARR[cost&3];\\\nbcost = cost>>2;\\\n}\\\n}\nHPEL_QPEL( hpoffs, sad_8x8_ii_hpel );\nHPEL_QPEL( dia_offs, sad_8x8_ii_qpel );\nfenc_lowres_mv[mb_xy] = convert_short2_sat( bmv );\n/* remeasure cost of bmv using SATD */\nint2 qpos = (coord << 2) + bmv;\ncost_local[mb_i] = satd_8x8_ii_qpel_coop4( fenc, coord, fref_planes, qpos, satd_local, mb_i );\nbcost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\nbcost += lambda * mv_cost( abs_diff( bmv, mvp ) );\nfenc_lowres_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n/* Weightp filter a downscaled image into a temporary output buffer.\n* This kernel is launched once for each scale.\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_scaled_images( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint4 input_val;\nuint4 output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy));\noutput_val = (uint4)(offset) + ( ( ((uint4)(scale)) * input_val ) >> ((uint4)(denom)) );\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n/* Weightp filter for the half-pel interpolated image\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_hpel( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint input_val;\nuint output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy)).s0;\nuint4 temp;\ntemp.s0 = input_val & 0x00ff; temp.s1 = (input_val >> 8) & 0x00ff;\ntemp.s2 = (input_val >> 16) & 0x00ff; temp.s3 = (input_val >> 24) & 0x00ff;\ntemp = (uint4)(offset) + ( ( ((uint4)(scale)) * temp ) >> ((uint4)(denom)) );\noutput_val = temp.s0 | (temp.s1 << 8) | (temp.s2 << 16) | (temp.s3 << 24);\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n", "x264_macroblock_bipred_init", "x264_frame_pop", "x264_frame_shift", "x264_frame_push_unused", "x264_frame_push_blank_unused", "ARMv6", "NEON", "FastNeonMRC", "x264_mb_analyse_inter_p16x16", "x264_macroblock_analyse", "x264_rc_analyse_slice", "x264_ratecontrol_new", "infinite ", "init_pass2", "x264_ratecontrol_start", "x264_macroblock_cache_rect"], "stringidentifiers": ["transparency", "cfrm", "pfrm", "ifr2", "ifrm", "pfr2", "snd_", "aac_adtstoasc", "aac_latm", "dual_mono_mode", "auto", "autoselection", "main", "both", "stereo_mode", "ms_off", "ms_force", "aac_coder", "faac", "anmr", "twoloop", "fast", "aasc", "eac3", "drc_scale", "dmix_mode", "ltrt_cmixlev", "ltrt_surmixlev", "loro_cmixlev", "loro_surmixlev", "adpcm_yamaha", "adpcm_xa", "adpcm_thp", "adpcm_swf", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_ms", "adpcm_ima_ws", "adpcm_ima_wav", "adpcm_ima_smjpeg", "adpcm_ima_rad", "adpcm_ima_qt", "adpcm_ima_oki", "adpcm_ima_iss", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ima_dk4", "adpcm_ima_dk3", "adpcm_ima_apc", "adpcm_ima_amv", "adpcm_ea_xas", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ea_r1", "adpcm_ea_maxis_xa", "adpcm_ea", "adpcm_dtk", "adpcm_ct", "adpcm_afc", "adpcm_4xm", "adpcm_adx", "alac", "amrnb", "amrwb", "ansi", "max_samples", "Arial", "Format", "Events", "Default", "ScriptType", "Collisions", "PlayResX", "PlayResY", "Timer", "Style", "Name", "Fontname", "Fontsize", "PrimaryColour", "BackColour", "Bold", "Italic", "Underline", "Alignment", "Dialogue", "Layer", "Start", "Text", "asv2", "asv1", "atrac1", "atrac3", "aura2", "avrn", "APRGAPRG0001", "avui", "bethsoftvid", "binkvideo", "binkaudio_dct", "binkaudio_rdft", "xbin", "bintext", "bmv_audio", "bmv_video", "brender_pix", "cavs", "cdgraphics", "cdxl", "chomp", "cinepak", "Cinepak", "cljr", "cllc", "comfortnoise", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpeg", "mjpegb", "ljpeg", "sp5x", "jpegls", "mpeg4", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "HuffYUV", "cyuv", "h264", "hevc", "indeo3", "theora", "Theora", "ffv1", "vcr1", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "Snow", "tscc", "ulti", "qdraw", "vixl", "qpeg", "pgmyuv", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "LOCO", "wnv1", "indeo2", "fraps", "Fraps", "truemotion2", "cscd", "CamStudio", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "jpeg2000", "vmnc", "vp6f", "targa", "dsicinvideo", "tiertexseqvideo", "tiff", "dnxhd", "sgirle", "vp6a", "sunrast", "indeo4", "indeo5", "mimic", "Mimic", "escape124", "dirac", "Dirac", "motionpixels", "aura", "v210x", "v210", "frwu", "flashsv2", "r210", "iff_ilbm", "iff_byterun1", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "wmv3image", "vc1image", "utvideo", "vble", "dxtory", "Dxtory", "v410", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "mss2", "y41p", "escape130", "avrp", "ayuv", "targa_y216", "v308", "v408", "yuv4", "sanm", "paf_video", "cpia", "xface", "Go2Meeting", "webp", "WebP", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_g726", "adpcm_g722", "adpcm_g726le", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "vorbis", "Vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "MP3onMP4", "shorten", "Shorten", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "WavPack", "dsicinaudio", "musepack7", "gsm_ms", "voxware", "nellymoser", "musepack8", "speex", "Speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "sipr", "twinvq", "truehd", "TrueHD", "mp4als", "qdmc", "celt", "g723_1", "g729", "ralf", "ilbc", "vima", "wavesynth", "sonic", "Sonic", "sonicls", "paf_audio", "opus", "metasound", "evrc", "dvd_subtitle", "dvb_subtitle", "text", "xsub", "XSUB", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "dvd_nav_packet", "camstudio", "COPY", "TSW1", "BDLT", "WDLT", "TDLT", "DSW1", "BLCK", "DDS1", "yuv422p10", "yuv422p", "SDPX", "dump_extra", "SL25", "dvsd", "CDVC", "dvbsub", "dvdsub", "dvdsubdec", "palette", "eacmv", "eamad", "eatgq", "eatgv", "eatqi", "channels", "chlist", "dataWindow", "box2i", "displayWindow", "lineOrder", "pixelAspectRatio", "float", "compression", "iframe", "zlibprime_curr", "threads", "change_field_order", "g722", "bits_per_codeword", "postfilter", "g726le", "g726", "trans_color", "l263", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "UMP4", "GEOV", "GEOX", "DIVX", "TEMP", "SPAT", "Q264", "Baseline", "Main", "Extended", "High", "is_avc", "nal_length_size", "h264_mp4toannexb", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "idcinvideo", "yuvj", "desc", "imxdump", "ZYGO", "lowres", "weightp", "level", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "libx264rgb", "libx264", "ultrafast", "superfast", "veryfast", "faster", "medium", "slow", "slower", "veryslow", "placebo", "film", "animation", "grain", "stillimage", "psnr", "ssim", "fastdecode", "zerolatency", "flags2", "i_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "flags", "rc_init_occupancy", "preset", "tune", "profile", "fastfirstpass", "passlogfile", "wpredp", "x264opts", "crf_max", "aq_mode", "none", "variance", "autovariance", "weightb", "simple", "smart", "b_pyramid", "strict", "normal", "mbtree", "cplxblur", "spatial", "temporal", "ibus", "cfshyYpo", "AVI1", "mjpeg2jpeg", "mjpg", "mjpegadump", "lossless", "PRCT", "CJPG", "JFIF", "Adob", "LJIF", "colr", "xfrm", "Exif", "AVID", "extern_huff", "mov2textsub", "text2movsub", "mp3comp", "mp3decomp", "mpc7", "mpc8", "SLIF", "VCR2", "BW10", "mpegvideo", "Simple", "Reserved", "ffmpeg", "WV1F", "QMP4", "reserved", "MP4S", "quarter_sample", "divx_packed", "mp3on4float", "mp3adufloat", "mp3float", "mp2float", "mp1float", "msmpeg4", "BottomUp", "noise", "NULL", "AVCodecContext", "AVFrame", "AVSubtitleRect", "unaligned", "qpel", "loop", "qscale", "input_preserved", "pass1", "pass2", "gray", "emu_edge", "truncated", "ildct", "low_delay", "global_header", "bitexact", "ilme", "cgop", "noout", "ignorecrop", "local_header", "chunks", "showall", "zero", "full", "epzs", "tesa", "phods", "iter", "extradata_size", "time_base", "cutoff", "frame_size", "frame_number", "delay", "b_qfactor", "rc_strategy", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "autodetect", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "edge", "hpel_chroma", "dc_clip", "trunc", "very", "unofficial", "experimental", "b_qoffset", "err_detect", "crccheck", "bitstream", "buffer", "explode", "careful", "compliant", "aggressive", "has_b_frames", "block_align", "mpeg_quant", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maxrate", "minrate", "bufsize", "rc_buf_aggressivity", "i_qoffset", "rc_init_cplx", "fastint", "altivec", "faan", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "idct", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvidmmx", "faani", "slice_count", "guess_mvs", "bits_per_coded_sample", "pred", "left", "plane", "median", "aspect", "debug", "pict", "mb_type", "dct_coeff", "skip", "startcode", "mmco", "bugs", "vis_qp", "vis_mb_type", "buffers", "thread_ops", "vismv", "debug_mv", "cmp_func", "subcmp", "mbcmp", "ildctcmp", "dia_size", "last_pred", "preme", "precmp", "satd", "vsad", "vsse", "nsse", "dctmax", "chroma", "pre_dia_size", "dtg_active_format", "ibias", "pbias", "global_quality", "deflate", "context", "slice_flags", "xvmc_acceleration", "bits", "stream_codec_tag", "lmin", "lmax", "error", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "unknown", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "skip_threshold", "skip_factor", "skip_exp", "skipcmp", "border_mask", "mblmin", "mblmax", "mepc", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "default", "noref", "bidir", "nokey", "bidir_refine", "brd_scale", "chromaoffset", "sc_factor", "mv0_threshold", "b_sensitivity", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "request_channels", "bits_per_raw_sample", "channel_layout", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color_trc", "colorspace", "color_range", "chroma_sample_location", "log_level_offset", "slices", "slice", "frame", "audio_service_type", "Effects", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "refcounted_frames", "skip_alpha", "field_order", "progressive", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "sample_rate", "type", "forced", "pgssub", "forced_subs_only", "MPNG", "WIDTH", "HEIGHT", "DEPTH", "MAXVAL", "TUPLTYPE", "TUPLETYPE", "ENDHDR", "icpf", "ProRes", "prores_lgpl", "frmaQDM", "real_144", "real_288", "I420", "yuv2", "YVYU", "rawdec", "remove_extra", "audioresample", "ReSampleContext", "roqvideo", "ajkg", "smackaud", "smackvid", "smvjpeg", "font", "bisu", "SEQH", "keep_ass_markup", "ModelPixelScaleTag", "ModelTransformationTag", "ModelTiepointTag", "GeoTIFF_Version", "GeoTIFF_Key_Revision", "undefined", "artist", "copyright", "date", "document_name", "computer", "description", "make", "model", "page_name", "page_number", "software", "VertCS_Newlyn", "VertCS_North_American_Vertical_Datum_1929", "VertCS_North_American_Vertical_Datum_1988", "VertCS_Yellow_Sea_1956", "VertCS_Baltic_Sea", "VertCS_Caspian_Sea", "VertCS_Airy_1830_ellipsoid", "VertCS_Airy_Modified_1849_ellipsoid", "VertCS_ANS_ellipsoid", "VertCS_Bessel_1841_ellipsoid", "VertCS_Bessel_Modified_ellipsoid", "VertCS_Bessel_Namibia_ellipsoid", "VertCS_Clarke_1858_ellipsoid", "VertCS_Clarke_1866_ellipsoid", "VertCS_Clarke_1880_Benoit_ellipsoid", "VertCS_Clarke_1880_IGN_ellipsoid", "VertCS_Clarke_1880_RGS_ellipsoid", "VertCS_Clarke_1880_Arc_ellipsoid", "VertCS_Clarke_1880_SGA_1922_ellipsoid", "VertCS_Everest_1830_1937_Adjustment_ellipsoid", "VertCS_Everest_1830_1967_Definition_ellipsoid", "VertCS_Everest_1830_1975_Definition_ellipsoid", "VertCS_Everest_1830_Modified_ellipsoid", "VertCS_GRS_1980_ellipsoid", "VertCS_Helmert_1906_ellipsoid", "VertCS_INS_ellipsoid", "VertCS_International_1924_ellipsoid", "VertCS_International_1967_ellipsoid", "VertCS_Krassowsky_1940_ellipsoid", "VertCS_NWL_9D_ellipsoid", "VertCS_NWL_10D_ellipsoid", "VertCS_Plessis_1817_ellipsoid", "VertCS_Struve_1860_ellipsoid", "VertCS_War_Office_ellipsoid", "VertCS_WGS_84_ellipsoid", "VertCS_GEM_10C_ellipsoid", "VertCS_OSU86F_ellipsoid", "VertCS_OSU91A_ellipsoid", "CT_TransverseMercator", "CT_TransvMercator_Modified_Alaska", "CT_ObliqueMercator", "CT_ObliqueMercator_Laborde", "CT_ObliqueMercator_Rosenmund", "CT_ObliqueMercator_Spherical", "CT_Mercator", "CT_LambertConfConic_2SP", "CT_LambertConfConic_Helmert", "CT_LambertAzimEqualArea", "CT_AlbersEqualArea", "CT_AzimuthalEquidistant", "CT_EquidistantConic", "CT_Stereographic", "CT_PolarStereographic", "CT_ObliqueStereographic", "CT_Equirectangular", "CT_CassiniSoldner", "CT_Gnomonic", "CT_MillerCylindrical", "CT_Orthographic", "CT_Polyconic", "CT_Robinson", "CT_Sinusoidal", "CT_VanDerGrinten", "CT_NewZealandMapGrid", "CT_TransvMercator_SouthOriented", "Proj_Alabama_CS27_East", "Proj_Alabama_CS27_West", "Proj_Alabama_CS83_East", "Proj_Alabama_CS83_West", "Proj_Arizona_Coordinate_System_east", "Proj_Arizona_Coordinate_System_Central", "Proj_Arizona_Coordinate_System_west", "Proj_Arizona_CS83_east", "Proj_Arizona_CS83_Central", "Proj_Arizona_CS83_west", "Proj_Arkansas_CS27_North", "Proj_Arkansas_CS27_South", "Proj_Arkansas_CS83_North", "Proj_Arkansas_CS83_South", "Proj_California_CS27_I", "Proj_California_CS27_II", "Proj_California_CS27_III", "Proj_California_CS27_IV", "Proj_California_CS27_V", "Proj_California_CS27_VI", "Proj_California_CS27_VII", "Proj_California_CS83_1", "Proj_California_CS83_2", "Proj_California_CS83_3", "Proj_California_CS83_4", "Proj_California_CS83_5", "Proj_California_CS83_6", "Proj_Colorado_CS27_North", "Proj_Colorado_CS27_Central", "Proj_Colorado_CS27_South", "Proj_Colorado_CS83_North", "Proj_Colorado_CS83_Central", "Proj_Colorado_CS83_South", "Proj_Connecticut_CS27", "Proj_Connecticut_CS83", "Proj_Delaware_CS27", "Proj_Delaware_CS83", "Proj_Florida_CS27_East", "Proj_Florida_CS27_West", "Proj_Florida_CS27_North", "Proj_Florida_CS83_East", "Proj_Florida_CS83_West", "Proj_Florida_CS83_North", "Proj_Georgia_CS27_East", "Proj_Georgia_CS27_West", "Proj_Georgia_CS83_East", "Proj_Georgia_CS83_West", "Proj_Idaho_CS27_East", "Proj_Idaho_CS27_Central", "Proj_Idaho_CS27_West", "Proj_Idaho_CS83_East", "Proj_Idaho_CS83_Central", "Proj_Idaho_CS83_West", "Proj_Illinois_CS27_East", "Proj_Illinois_CS27_West", "Proj_Illinois_CS83_East", "Proj_Illinois_CS83_West", "Proj_Indiana_CS27_East", "Proj_Indiana_CS27_West", "Proj_Indiana_CS83_East", "Proj_Indiana_CS83_West", "Proj_Iowa_CS27_North", "Proj_Iowa_CS27_South", "Proj_Iowa_CS83_North", "Proj_Iowa_CS83_South", "Proj_Kansas_CS27_North", "Proj_Kansas_CS27_South", "Proj_Kansas_CS83_North", "Proj_Kansas_CS83_South", "Proj_Kentucky_CS27_North", "Proj_Kentucky_CS27_South", "Proj_Kentucky_CS83_North", "Proj_Kentucky_CS83_South", "Proj_Louisiana_CS27_North", "Proj_Louisiana_CS27_South", "Proj_Louisiana_CS83_North", "Proj_Louisiana_CS83_South", "Proj_Maine_CS27_East", "Proj_Maine_CS27_West", "Proj_Maine_CS83_East", "Proj_Maine_CS83_West", "Proj_Maryland_CS27", "Proj_Maryland_CS83", "Proj_Massachusetts_CS27_Mainland", "Proj_Massachusetts_CS27_Island", "Proj_Massachusetts_CS83_Mainland", "Proj_Massachusetts_CS83_Island", "Proj_Michigan_State_Plane_East", "Proj_Michigan_State_Plane_Old_Central", "Proj_Michigan_State_Plane_West", "Proj_Michigan_CS27_North", "Proj_Michigan_CS27_Central", "Proj_Michigan_CS27_South", "Proj_Michigan_CS83_North", "Proj_Michigan_CS83_Central", "Proj_Michigan_CS83_South", "Proj_Minnesota_CS27_North", "Proj_Minnesota_CS27_Central", "Proj_Minnesota_CS27_South", "Proj_Minnesota_CS83_North", "Proj_Minnesota_CS83_Central", "Proj_Minnesota_CS83_South", "Proj_Mississippi_CS27_East", "Proj_Mississippi_CS27_West", "Proj_Mississippi_CS83_East", "Proj_Mississippi_CS83_West", "Proj_Missouri_CS27_East", "Proj_Missouri_CS27_Central", "Proj_Missouri_CS27_West", "Proj_Missouri_CS83_East", "Proj_Missouri_CS83_Central", "Proj_Missouri_CS83_West", "Proj_Montana_CS27_North", "Proj_Montana_CS27_Central", "Proj_Montana_CS27_South", "Proj_Montana_CS83", "Proj_Nebraska_CS27_North", "Proj_Nebraska_CS27_South", "Proj_Nebraska_CS83", "Proj_Nevada_CS27_East", "Proj_Nevada_CS27_Central", "Proj_Nevada_CS27_West", "Proj_Nevada_CS83_East", "Proj_Nevada_CS83_Central", "Proj_Nevada_CS83_West", "Proj_New_Hampshire_CS27", "Proj_New_Hampshire_CS83", "Proj_New_Jersey_CS27", "Proj_New_Jersey_CS83", "Proj_New_Mexico_CS27_East", "Proj_New_Mexico_CS27_Central", "Proj_New_Mexico_CS27_West", "Proj_New_Mexico_CS83_East", "Proj_New_Mexico_CS83_Central", "Proj_New_Mexico_CS83_West", "Proj_New_York_CS27_East", "Proj_New_York_CS27_Central", "Proj_New_York_CS27_West", "Proj_New_York_CS27_Long_Island", "Proj_New_York_CS83_East", "Proj_New_York_CS83_Central", "Proj_New_York_CS83_West", "Proj_New_York_CS83_Long_Island", "Proj_North_Carolina_CS27", "Proj_North_Carolina_CS83", "Proj_North_Dakota_CS27_North", "Proj_North_Dakota_CS27_South", "Proj_North_Dakota_CS83_North", "Proj_North_Dakota_CS83_South", "Proj_Ohio_CS27_North", "Proj_Ohio_CS27_South", "Proj_Ohio_CS83_North", "Proj_Ohio_CS83_South", "Proj_Oklahoma_CS27_North", "Proj_Oklahoma_CS27_South", "Proj_Oklahoma_CS83_North", "Proj_Oklahoma_CS83_South", "Proj_Oregon_CS27_North", "Proj_Oregon_CS27_South", "Proj_Oregon_CS83_North", "Proj_Oregon_CS83_South", "Proj_Pennsylvania_CS27_North", "Proj_Pennsylvania_CS27_South", "Proj_Pennsylvania_CS83_North", "Proj_Pennsylvania_CS83_South", "Proj_Rhode_Island_CS27", "Proj_Rhode_Island_CS83", "Proj_South_Carolina_CS27_North", "Proj_South_Carolina_CS27_South", "Proj_South_Carolina_CS83", "Proj_South_Dakota_CS27_North", "Proj_South_Dakota_CS27_South", "Proj_South_Dakota_CS83_North", "Proj_South_Dakota_CS83_South", "Proj_Tennessee_CS27", "Proj_Tennessee_CS83", "Proj_Texas_CS27_North", "Proj_Texas_CS27_North_Central", "Proj_Texas_CS27_Central", "Proj_Texas_CS27_South_Central", "Proj_Texas_CS27_South", "Proj_Texas_CS83_North", "Proj_Texas_CS83_North_Central", "Proj_Texas_CS83_Central", "Proj_Texas_CS83_South_Central", "Proj_Texas_CS83_South", "Proj_Utah_CS27_North", "Proj_Utah_CS27_Central", "Proj_Utah_CS27_South", "Proj_Utah_CS83_North", "Proj_Utah_CS83_Central", "Proj_Utah_CS83_South", "Proj_Vermont_CS27", "Proj_Vermont_CS83", "Proj_Virginia_CS27_North", "Proj_Virginia_CS27_South", "Proj_Virginia_CS83_North", "Proj_Virginia_CS83_South", "Proj_Washington_CS27_North", "Proj_Washington_CS27_South", "Proj_Washington_CS83_North", "Proj_Washington_CS83_South", "Proj_West_Virginia_CS27_North", "Proj_West_Virginia_CS27_South", "Proj_West_Virginia_CS83_North", "Proj_West_Virginia_CS83_South", "Proj_Wisconsin_CS27_North", "Proj_Wisconsin_CS27_Central", "Proj_Wisconsin_CS27_South", "Proj_Wisconsin_CS83_North", "Proj_Wisconsin_CS83_Central", "Proj_Wisconsin_CS83_South", "Proj_Wyoming_CS27_East", "Proj_Wyoming_CS27_East_Central", "Proj_Wyoming_CS27_West_Central", "Proj_Wyoming_CS27_West", "Proj_Wyoming_CS83_East", "Proj_Wyoming_CS83_East_Central", "Proj_Wyoming_CS83_West_Central", "Proj_Wyoming_CS83_West", "Proj_Alaska_CS27_1", "Proj_Alaska_CS27_2", "Proj_Alaska_CS27_3", "Proj_Alaska_CS27_4", "Proj_Alaska_CS27_5", "Proj_Alaska_CS27_6", "Proj_Alaska_CS27_7", "Proj_Alaska_CS27_8", "Proj_Alaska_CS27_9", "Proj_Alaska_CS27_10", "Proj_Alaska_CS83_1", "Proj_Alaska_CS83_2", "Proj_Alaska_CS83_3", "Proj_Alaska_CS83_4", "Proj_Alaska_CS83_5", "Proj_Alaska_CS83_6", "Proj_Alaska_CS83_7", "Proj_Alaska_CS83_8", "Proj_Alaska_CS83_9", "Proj_Alaska_CS83_10", "Proj_Hawaii_CS27_1", "Proj_Hawaii_CS27_2", "Proj_Hawaii_CS27_3", "Proj_Hawaii_CS27_4", "Proj_Hawaii_CS27_5", "Proj_Hawaii_CS83_1", "Proj_Hawaii_CS83_2", "Proj_Hawaii_CS83_3", "Proj_Hawaii_CS83_4", "Proj_Hawaii_CS83_5", "Proj_Puerto_Rico_CS27", "Proj_St_Croix", "Proj_Puerto_Rico_Virgin_Is", "Proj_BLM_14N_feet", "Proj_BLM_15N_feet", "Proj_BLM_16N_feet", "Proj_BLM_17N_feet", "Proj_Map_Grid_of_Australia_48", "Proj_Map_Grid_of_Australia_49", "Proj_Map_Grid_of_Australia_50", "Proj_Map_Grid_of_Australia_51", "Proj_Map_Grid_of_Australia_52", "Proj_Map_Grid_of_Australia_53", "Proj_Map_Grid_of_Australia_54", "Proj_Map_Grid_of_Australia_55", "Proj_Map_Grid_of_Australia_56", "Proj_Map_Grid_of_Australia_57", "Proj_Map_Grid_of_Australia_58", "Proj_Australian_Map_Grid_48", "Proj_Australian_Map_Grid_49", "Proj_Australian_Map_Grid_50", "Proj_Australian_Map_Grid_51", "Proj_Australian_Map_Grid_52", "Proj_Australian_Map_Grid_53", "Proj_Australian_Map_Grid_54", "Proj_Australian_Map_Grid_55", "Proj_Australian_Map_Grid_56", "Proj_Australian_Map_Grid_57", "Proj_Australian_Map_Grid_58", "Proj_Argentina_1", "Proj_Argentina_2", "Proj_Argentina_3", "Proj_Argentina_4", "Proj_Argentina_5", "Proj_Argentina_6", "Proj_Argentina_7", "Proj_Colombia_3W", "Proj_Colombia_Bogota", "Proj_Colombia_3E", "Proj_Colombia_6E", "Proj_Egypt_Red_Belt", "Proj_Egypt_Purple_Belt", "Proj_Extended_Purple_Belt", "Proj_New_Zealand_North_Island_Nat_Grid", "Proj_New_Zealand_South_Island_Nat_Grid", "Proj_Bahrain_Grid", "Proj_Netherlands_E_Indies_Equatorial", "Proj_RSO_Borneo", "PCS_Adindan_UTM_zone_37N", "PCS_Adindan_UTM_zone_38N", "PCS_AGD66_AMG_zone_48", "PCS_AGD66_AMG_zone_49", "PCS_AGD66_AMG_zone_50", "PCS_AGD66_AMG_zone_51", "PCS_AGD66_AMG_zone_52", "PCS_AGD66_AMG_zone_53", "PCS_AGD66_AMG_zone_54", "PCS_AGD66_AMG_zone_55", "PCS_AGD66_AMG_zone_56", "PCS_AGD66_AMG_zone_57", "PCS_AGD66_AMG_zone_58", "PCS_AGD84_AMG_zone_48", "PCS_AGD84_AMG_zone_49", "PCS_AGD84_AMG_zone_50", "PCS_AGD84_AMG_zone_51", "PCS_AGD84_AMG_zone_52", "PCS_AGD84_AMG_zone_53", "PCS_AGD84_AMG_zone_54", "PCS_AGD84_AMG_zone_55", "PCS_AGD84_AMG_zone_56", "PCS_AGD84_AMG_zone_57", "PCS_AGD84_AMG_zone_58", "PCS_Ain_el_Abd_UTM_zone_37N", "PCS_Ain_el_Abd_UTM_zone_38N", "PCS_Ain_el_Abd_UTM_zone_39N", "PCS_Ain_el_Abd_Bahrain_Grid", "PCS_Afgooye_UTM_zone_38N", "PCS_Afgooye_UTM_zone_39N", "PCS_Lisbon_Portugese_Grid", "PCS_Aratu_UTM_zone_22S", "PCS_Aratu_UTM_zone_23S", "PCS_Aratu_UTM_zone_24S", "PCS_Arc_1950_Lo13", "PCS_Arc_1950_Lo15", "PCS_Arc_1950_Lo17", "PCS_Arc_1950_Lo19", "PCS_Arc_1950_Lo21", "PCS_Arc_1950_Lo23", "PCS_Arc_1950_Lo25", "PCS_Arc_1950_Lo27", "PCS_Arc_1950_Lo29", "PCS_Arc_1950_Lo31", "PCS_Arc_1950_Lo33", "PCS_Arc_1950_Lo35", "PCS_Batavia_NEIEZ", "PCS_Batavia_UTM_zone_48S", "PCS_Batavia_UTM_zone_49S", "PCS_Batavia_UTM_zone_50S", "PCS_Beijing_Gauss_zone_13", "PCS_Beijing_Gauss_zone_14", "PCS_Beijing_Gauss_zone_15", "PCS_Beijing_Gauss_zone_16", "PCS_Beijing_Gauss_zone_17", "PCS_Beijing_Gauss_zone_18", "PCS_Beijing_Gauss_zone_19", "PCS_Beijing_Gauss_zone_20", "PCS_Beijing_Gauss_zone_21", "PCS_Beijing_Gauss_zone_22", "PCS_Beijing_Gauss_zone_23", "PCS_Beijing_Gauss_13N", "PCS_Beijing_Gauss_14N", "PCS_Beijing_Gauss_15N", "PCS_Beijing_Gauss_16N", "PCS_Beijing_Gauss_17N", "PCS_Beijing_Gauss_18N", "PCS_Beijing_Gauss_19N", "PCS_Beijing_Gauss_20N", "PCS_Beijing_Gauss_21N", "PCS_Beijing_Gauss_22N", "PCS_Beijing_Gauss_23N", "PCS_Belge_Lambert_50", "PCS_Bern_1898_Swiss_Old", "PCS_Bogota_UTM_zone_17N", "PCS_Bogota_UTM_zone_18N", "PCS_Bogota_Colombia_3W", "PCS_Bogota_Colombia_Bogota", "PCS_Bogota_Colombia_3E", "PCS_Bogota_Colombia_6E", "PCS_Camacupa_UTM_32S", "PCS_Camacupa_UTM_33S", "PCS_C_Inchauspe_Argentina_1", "PCS_C_Inchauspe_Argentina_2", "PCS_C_Inchauspe_Argentina_3", "PCS_C_Inchauspe_Argentina_4", "PCS_C_Inchauspe_Argentina_5", "PCS_C_Inchauspe_Argentina_6", "PCS_C_Inchauspe_Argentina_7", "PCS_Carthage_UTM_zone_32N", "PCS_Carthage_Nord_Tunisie", "PCS_Carthage_Sud_Tunisie", "PCS_Corrego_Alegre_UTM_23S", "PCS_Corrego_Alegre_UTM_24S", "PCS_Douala_UTM_zone_32N", "PCS_Egypt_1907_Red_Belt", "PCS_Egypt_1907_Purple_Belt", "PCS_Egypt_1907_Ext_Purple", "PCS_ED50_UTM_zone_28N", "PCS_ED50_UTM_zone_29N", "PCS_ED50_UTM_zone_30N", "PCS_ED50_UTM_zone_31N", "PCS_ED50_UTM_zone_32N", "PCS_ED50_UTM_zone_33N", "PCS_ED50_UTM_zone_34N", "PCS_ED50_UTM_zone_35N", "PCS_ED50_UTM_zone_36N", "PCS_ED50_UTM_zone_37N", "PCS_ED50_UTM_zone_38N", "PCS_Fahud_UTM_zone_39N", "PCS_Fahud_UTM_zone_40N", "PCS_Garoua_UTM_zone_33N", "PCS_ID74_UTM_zone_46N", "PCS_ID74_UTM_zone_47N", "PCS_ID74_UTM_zone_48N", "PCS_ID74_UTM_zone_49N", "PCS_ID74_UTM_zone_50N", "PCS_ID74_UTM_zone_51N", "PCS_ID74_UTM_zone_52N", "PCS_ID74_UTM_zone_53N", "PCS_ID74_UTM_zone_46S", "PCS_ID74_UTM_zone_47S", "PCS_ID74_UTM_zone_48S", "PCS_ID74_UTM_zone_49S", "PCS_ID74_UTM_zone_50S", "PCS_ID74_UTM_zone_51S", "PCS_ID74_UTM_zone_52S", "PCS_ID74_UTM_zone_53S", "PCS_ID74_UTM_zone_54S", "PCS_Indian_1954_UTM_47N", "PCS_Indian_1954_UTM_48N", "PCS_Indian_1975_UTM_47N", "PCS_Indian_1975_UTM_48N", "PCS_Jamaica_1875_Old_Grid", "PCS_JAD69_Jamaica_Grid", "PCS_Kalianpur_India_0", "PCS_Kalianpur_India_I", "PCS_Kalianpur_India_IIa", "PCS_Kalianpur_India_IIIa", "PCS_Kalianpur_India_IVa", "PCS_Kalianpur_India_IIb", "PCS_Kalianpur_India_IIIb", "PCS_Kalianpur_India_IVb", "PCS_Kertau_Singapore_Grid", "PCS_Kertau_UTM_zone_47N", "PCS_Kertau_UTM_zone_48N", "PCS_La_Canoa_UTM_zone_20N", "PCS_La_Canoa_UTM_zone_21N", "PCS_PSAD56_UTM_zone_18N", "PCS_PSAD56_UTM_zone_19N", "PCS_PSAD56_UTM_zone_20N", "PCS_PSAD56_UTM_zone_21N", "PCS_PSAD56_UTM_zone_17S", "PCS_PSAD56_UTM_zone_18S", "PCS_PSAD56_UTM_zone_19S", "PCS_PSAD56_UTM_zone_20S", "PCS_PSAD56_Peru_west_zone", "PCS_PSAD56_Peru_central", "PCS_PSAD56_Peru_east_zone", "PCS_Leigon_Ghana_Grid", "PCS_Lome_UTM_zone_31N", "PCS_Luzon_Philippines_I", "PCS_Luzon_Philippines_II", "PCS_Luzon_Philippines_III", "PCS_Luzon_Philippines_IV", "PCS_Luzon_Philippines_V", "PCS_Makassar_NEIEZ", "PCS_Malongo_1987_UTM_32S", "PCS_Merchich_Nord_Maroc", "PCS_Merchich_Sud_Maroc", "PCS_Merchich_Sahara", "PCS_Massawa_UTM_zone_37N", "PCS_Minna_UTM_zone_31N", "PCS_Minna_UTM_zone_32N", "PCS_Minna_Nigeria_West", "PCS_Minna_Nigeria_Mid_Belt", "PCS_Minna_Nigeria_East", "PCS_Mhast_UTM_zone_32S", "PCS_Monte_Mario_Italy_1", "PCS_Monte_Mario_Italy_2", "PCS_M_poraloko_UTM_32N", "PCS_M_poraloko_UTM_32S", "PCS_NAD27_UTM_zone_3N", "PCS_NAD27_UTM_zone_4N", "PCS_NAD27_UTM_zone_5N", "PCS_NAD27_UTM_zone_6N", "PCS_NAD27_UTM_zone_7N", "PCS_NAD27_UTM_zone_8N", "PCS_NAD27_UTM_zone_9N", "PCS_NAD27_UTM_zone_10N", "PCS_NAD27_UTM_zone_11N", "PCS_NAD27_UTM_zone_12N", "PCS_NAD27_UTM_zone_13N", "PCS_NAD27_UTM_zone_14N", "PCS_NAD27_UTM_zone_15N", "PCS_NAD27_UTM_zone_16N", "PCS_NAD27_UTM_zone_17N", "PCS_NAD27_UTM_zone_18N", "PCS_NAD27_UTM_zone_19N", "PCS_NAD27_UTM_zone_20N", "PCS_NAD27_UTM_zone_21N", "PCS_NAD27_UTM_zone_22N", "PCS_NAD27_Alabama_East", "PCS_NAD27_Alabama_West", "PCS_NAD27_Alaska_zone_1", "PCS_NAD27_Alaska_zone_2", "PCS_NAD27_Alaska_zone_3", "PCS_NAD27_Alaska_zone_4", "PCS_NAD27_Alaska_zone_5", "PCS_NAD27_Alaska_zone_6", "PCS_NAD27_Alaska_zone_7", "PCS_NAD27_Alaska_zone_8", "PCS_NAD27_Alaska_zone_9", "PCS_NAD27_Alaska_zone_10", "PCS_NAD27_California_I", "PCS_NAD27_California_II", "PCS_NAD27_California_III", "PCS_NAD27_California_IV", "PCS_NAD27_California_V", "PCS_NAD27_California_VI", "PCS_NAD27_California_VII", "PCS_NAD27_Arizona_East", "PCS_NAD27_Arizona_Central", "PCS_NAD27_Arizona_West", "PCS_NAD27_Arkansas_North", "PCS_NAD27_Arkansas_South", "PCS_NAD27_Colorado_North", "PCS_NAD27_Colorado_Central", "PCS_NAD27_Colorado_South", "PCS_NAD27_Connecticut", "PCS_NAD27_Delaware", "PCS_NAD27_Florida_East", "PCS_NAD27_Florida_West", "PCS_NAD27_Florida_North", "PCS_NAD27_Hawaii_zone_1", "PCS_NAD27_Hawaii_zone_2", "PCS_NAD27_Hawaii_zone_3", "PCS_NAD27_Hawaii_zone_4", "PCS_NAD27_Hawaii_zone_5", "PCS_NAD27_Georgia_East", "PCS_NAD27_Georgia_West", "PCS_NAD27_Idaho_East", "PCS_NAD27_Idaho_Central", "PCS_NAD27_Idaho_West", "PCS_NAD27_Illinois_East", "PCS_NAD27_Illinois_West", "PCS_NAD27_Indiana_East", "PCS_NAD27_BLM_14N_feet", "PCS_NAD27_Indiana_West", "PCS_NAD27_BLM_15N_feet", "PCS_NAD27_Iowa_North", "PCS_NAD27_BLM_16N_feet", "PCS_NAD27_Iowa_South", "PCS_NAD27_BLM_17N_feet", "PCS_NAD27_Kansas_North", "PCS_NAD27_Kansas_South", "PCS_NAD27_Kentucky_North", "PCS_NAD27_Kentucky_South", "PCS_NAD27_Louisiana_North", "PCS_NAD27_Louisiana_South", "PCS_NAD27_Maine_East", "PCS_NAD27_Maine_West", "PCS_NAD27_Maryland", "PCS_NAD27_Massachusetts", "PCS_NAD27_Massachusetts_Is", "PCS_NAD27_Michigan_North", "PCS_NAD27_Michigan_Central", "PCS_NAD27_Michigan_South", "PCS_NAD27_Minnesota_North", "PCS_NAD27_Minnesota_Cent", "PCS_NAD27_Minnesota_South", "PCS_NAD27_Mississippi_East", "PCS_NAD27_Mississippi_West", "PCS_NAD27_Missouri_East", "PCS_NAD27_Missouri_Central", "PCS_NAD27_Missouri_West", "PCS_NAD_Michigan_Michigan_East", "PCS_NAD_Michigan_Michigan_Old_Central", "PCS_NAD_Michigan_Michigan_West", "PCS_NAD83_UTM_zone_3N", "PCS_NAD83_UTM_zone_4N", "PCS_NAD83_UTM_zone_5N", "PCS_NAD83_UTM_zone_6N", "PCS_NAD83_UTM_zone_7N", "PCS_NAD83_UTM_zone_8N", "PCS_NAD83_UTM_zone_9N", "PCS_NAD83_UTM_zone_10N", "PCS_NAD83_UTM_zone_11N", "PCS_NAD83_UTM_zone_12N", "PCS_NAD83_UTM_zone_13N", "PCS_NAD83_UTM_zone_14N", "PCS_NAD83_UTM_zone_15N", "PCS_NAD83_UTM_zone_16N", "PCS_NAD83_UTM_zone_17N", "PCS_NAD83_UTM_zone_18N", "PCS_NAD83_UTM_zone_19N", "PCS_NAD83_UTM_zone_20N", "PCS_NAD83_UTM_zone_21N", "PCS_NAD83_UTM_zone_22N", "PCS_NAD83_UTM_zone_23N", "PCS_NAD83_Alabama_East", "PCS_NAD83_Alabama_West", "PCS_NAD83_Alaska_zone_1", "PCS_NAD83_Alaska_zone_2", "PCS_NAD83_Alaska_zone_3", "PCS_NAD83_Alaska_zone_4", "PCS_NAD83_Alaska_zone_5", "PCS_NAD83_Alaska_zone_6", "PCS_NAD83_Alaska_zone_7", "PCS_NAD83_Alaska_zone_8", "PCS_NAD83_Alaska_zone_9", "PCS_NAD83_Alaska_zone_10", "PCS_NAD83_California_1", "PCS_NAD83_California_2", "PCS_NAD83_California_3", "PCS_NAD83_California_4", "PCS_NAD83_California_5", "PCS_NAD83_California_6", "PCS_NAD83_Arizona_East", "PCS_NAD83_Arizona_Central", "PCS_NAD83_Arizona_West", "PCS_NAD83_Arkansas_North", "PCS_NAD83_Arkansas_South", "PCS_NAD83_Colorado_North", "PCS_NAD83_Colorado_Central", "PCS_NAD83_Colorado_South", "PCS_NAD83_Connecticut", "PCS_NAD83_Delaware", "PCS_NAD83_Florida_East", "PCS_NAD83_Florida_West", "PCS_NAD83_Florida_North", "PCS_NAD83_Hawaii_zone_1", "PCS_NAD83_Hawaii_zone_2", "PCS_NAD83_Hawaii_zone_3", "PCS_NAD83_Hawaii_zone_4", "PCS_NAD83_Hawaii_zone_5", "PCS_NAD83_Georgia_East", "PCS_NAD83_Georgia_West", "PCS_NAD83_Idaho_East", "PCS_NAD83_Idaho_Central", "PCS_NAD83_Idaho_West", "PCS_NAD83_Illinois_East", "PCS_NAD83_Illinois_West", "PCS_NAD83_Indiana_East", "PCS_NAD83_Indiana_West", "PCS_NAD83_Iowa_North", "PCS_NAD83_Iowa_South", "PCS_NAD83_Kansas_North", "PCS_NAD83_Kansas_South", "PCS_NAD83_Kentucky_North", "PCS_NAD83_Kentucky_South", "PCS_NAD83_Louisiana_North", "PCS_NAD83_Louisiana_South", "PCS_NAD83_Maine_East", "PCS_NAD83_Maine_West", "PCS_NAD83_Maryland", "PCS_NAD83_Massachusetts", "PCS_NAD83_Massachusetts_Is", "PCS_NAD83_Michigan_North", "PCS_NAD83_Michigan_Central", "PCS_NAD83_Michigan_South", "PCS_NAD83_Minnesota_North", "PCS_NAD83_Minnesota_Cent", "PCS_NAD83_Minnesota_South", "PCS_NAD83_Mississippi_East", "PCS_NAD83_Mississippi_West", "PCS_NAD83_Missouri_East", "PCS_NAD83_Missouri_Central", "PCS_NAD83_Missouri_West", "PCS_Nahrwan_1967_UTM_38N", "PCS_Nahrwan_1967_UTM_39N", "PCS_Nahrwan_1967_UTM_40N", "PCS_Naparima_UTM_20N", "PCS_GD49_NZ_Map_Grid", "PCS_GD49_North_Island_Grid", "PCS_GD49_South_Island_Grid", "PCS_Datum_73_UTM_zone_29N", "PCS_ATF_Nord_de_Guerre", "PCS_NTF_France_I", "PCS_NTF_France_II", "PCS_NTF_France_III", "PCS_NTF_Nord_France", "PCS_NTF_Centre_France", "PCS_NTF_Sud_France", "PCS_British_National_Grid", "PCS_Point_Noire_UTM_32S", "PCS_GDA94_MGA_zone_48", "PCS_GDA94_MGA_zone_49", "PCS_GDA94_MGA_zone_50", "PCS_GDA94_MGA_zone_51", "PCS_GDA94_MGA_zone_52", "PCS_GDA94_MGA_zone_53", "PCS_GDA94_MGA_zone_54", "PCS_GDA94_MGA_zone_55", "PCS_GDA94_MGA_zone_56", "PCS_GDA94_MGA_zone_57", "PCS_GDA94_MGA_zone_58", "PCS_Pulkovo_Gauss_zone_4", "PCS_Pulkovo_Gauss_zone_5", "PCS_Pulkovo_Gauss_zone_6", "PCS_Pulkovo_Gauss_zone_7", "PCS_Pulkovo_Gauss_zone_8", "PCS_Pulkovo_Gauss_zone_9", "PCS_Pulkovo_Gauss_zone_10", "PCS_Pulkovo_Gauss_zone_11", "PCS_Pulkovo_Gauss_zone_12", "PCS_Pulkovo_Gauss_zone_13", "PCS_Pulkovo_Gauss_zone_14", "PCS_Pulkovo_Gauss_zone_15", "PCS_Pulkovo_Gauss_zone_16", "PCS_Pulkovo_Gauss_zone_17", "PCS_Pulkovo_Gauss_zone_18", "PCS_Pulkovo_Gauss_zone_19", "PCS_Pulkovo_Gauss_zone_20", "PCS_Pulkovo_Gauss_zone_21", "PCS_Pulkovo_Gauss_zone_22", "PCS_Pulkovo_Gauss_zone_23", "PCS_Pulkovo_Gauss_zone_24", "PCS_Pulkovo_Gauss_zone_25", "PCS_Pulkovo_Gauss_zone_26", "PCS_Pulkovo_Gauss_zone_27", "PCS_Pulkovo_Gauss_zone_28", "PCS_Pulkovo_Gauss_zone_29", "PCS_Pulkovo_Gauss_zone_30", "PCS_Pulkovo_Gauss_zone_31", "PCS_Pulkovo_Gauss_zone_32", "PCS_Pulkovo_Gauss_4N", "PCS_Pulkovo_Gauss_5N", "PCS_Pulkovo_Gauss_6N", "PCS_Pulkovo_Gauss_7N", "PCS_Pulkovo_Gauss_8N", "PCS_Pulkovo_Gauss_9N", "PCS_Pulkovo_Gauss_10N", "PCS_Pulkovo_Gauss_11N", "PCS_Pulkovo_Gauss_12N", "PCS_Pulkovo_Gauss_13N", "PCS_Pulkovo_Gauss_14N", "PCS_Pulkovo_Gauss_15N", "PCS_Pulkovo_Gauss_16N", "PCS_Pulkovo_Gauss_17N", "PCS_Pulkovo_Gauss_18N", "PCS_Pulkovo_Gauss_19N", "PCS_Pulkovo_Gauss_20N", "PCS_Pulkovo_Gauss_21N", "PCS_Pulkovo_Gauss_22N", "PCS_Pulkovo_Gauss_23N", "PCS_Pulkovo_Gauss_24N", "PCS_Pulkovo_Gauss_25N", "PCS_Pulkovo_Gauss_26N", "PCS_Pulkovo_Gauss_27N", "PCS_Pulkovo_Gauss_28N", "PCS_Pulkovo_Gauss_29N", "PCS_Pulkovo_Gauss_30N", "PCS_Pulkovo_Gauss_31N", "PCS_Pulkovo_Gauss_32N", "PCS_Qatar_National_Grid", "PCS_RD_Netherlands_Old", "PCS_RD_Netherlands_New", "PCS_SAD69_UTM_zone_18N", "PCS_SAD69_UTM_zone_19N", "PCS_SAD69_UTM_zone_20N", "PCS_SAD69_UTM_zone_21N", "PCS_SAD69_UTM_zone_22N", "PCS_SAD69_UTM_zone_17S", "PCS_SAD69_UTM_zone_18S", "PCS_SAD69_UTM_zone_19S", "PCS_SAD69_UTM_zone_20S", "PCS_SAD69_UTM_zone_21S", "PCS_SAD69_UTM_zone_22S", "PCS_SAD69_UTM_zone_23S", "PCS_SAD69_UTM_zone_24S", "PCS_SAD69_UTM_zone_25S", "PCS_Sapper_Hill_UTM_20S", "PCS_Sapper_Hill_UTM_21S", "PCS_Schwarzeck_UTM_33S", "PCS_Sudan_UTM_zone_35N", "PCS_Sudan_UTM_zone_36N", "PCS_Tananarive_Laborde", "PCS_Tananarive_UTM_38S", "PCS_Tananarive_UTM_39S", "PCS_Timbalai_1948_Borneo", "PCS_Timbalai_1948_UTM_49N", "PCS_Timbalai_1948_UTM_50N", "PCS_TM65_Irish_Nat_Grid", "PCS_Trinidad_1903_Trinidad", "PCS_TC_1948_UTM_zone_39N", "PCS_TC_1948_UTM_zone_40N", "PCS_Voirol_N_Algerie_ancien", "PCS_Voirol_S_Algerie_ancien", "PCS_Voirol_Unifie_N_Algerie", "PCS_Voirol_Unifie_S_Algerie", "PCS_Bern_1938_Swiss_New", "PCS_Nord_Sahara_UTM_29N", "PCS_Nord_Sahara_UTM_30N", "PCS_Nord_Sahara_UTM_31N", "PCS_Nord_Sahara_UTM_32N", "PCS_Yoff_UTM_zone_28N", "PCS_Zanderij_UTM_zone_21N", "PCS_MGI_Austria_West", "PCS_MGI_Austria_Central", "PCS_MGI_Austria_East", "PCS_Belge_Lambert_72", "PCS_DHDN_Germany_zone_1", "PCS_DHDN_Germany_zone_2", "PCS_DHDN_Germany_zone_3", "PCS_DHDN_Germany_zone_4", "PCS_DHDN_Germany_zone_5", "PCS_NAD27_Montana_North", "PCS_NAD27_Montana_Central", "PCS_NAD27_Montana_South", "PCS_NAD27_Nebraska_North", "PCS_NAD27_Nebraska_South", "PCS_NAD27_Nevada_East", "PCS_NAD27_Nevada_Central", "PCS_NAD27_Nevada_West", "PCS_NAD27_New_Hampshire", "PCS_NAD27_New_Jersey", "PCS_NAD27_New_Mexico_East", "PCS_NAD27_New_Mexico_Cent", "PCS_NAD27_New_Mexico_West", "PCS_NAD27_New_York_East", "PCS_NAD27_New_York_Central", "PCS_NAD27_New_York_West", "PCS_NAD27_New_York_Long_Is", "PCS_NAD27_North_Carolina", "PCS_NAD27_North_Dakota_N", "PCS_NAD27_North_Dakota_S", "PCS_NAD27_Ohio_North", "PCS_NAD27_Ohio_South", "PCS_NAD27_Oklahoma_North", "PCS_NAD27_Oklahoma_South", "PCS_NAD27_Oregon_North", "PCS_NAD27_Oregon_South", "PCS_NAD27_Pennsylvania_N", "PCS_NAD27_Pennsylvania_S", "PCS_NAD27_Rhode_Island", "PCS_NAD27_South_Carolina_N", "PCS_NAD27_South_Carolina_S", "PCS_NAD27_South_Dakota_N", "PCS_NAD27_South_Dakota_S", "PCS_NAD27_Tennessee", "PCS_NAD27_Texas_North", "PCS_NAD27_Texas_North_Cen", "PCS_NAD27_Texas_Central", "PCS_NAD27_Texas_South_Cen", "PCS_NAD27_Texas_South", "PCS_NAD27_Utah_North", "PCS_NAD27_Utah_Central", "PCS_NAD27_Utah_South", "PCS_NAD27_Vermont", "PCS_NAD27_Virginia_North", "PCS_NAD27_Virginia_South", "PCS_NAD27_Washington_North", "PCS_NAD27_Washington_South", "PCS_NAD27_West_Virginia_N", "PCS_NAD27_West_Virginia_S", "PCS_NAD27_Wisconsin_North", "PCS_NAD27_Wisconsin_Cen", "PCS_NAD27_Wisconsin_South", "PCS_NAD27_Wyoming_East", "PCS_NAD27_Wyoming_E_Cen", "PCS_NAD27_Wyoming_W_Cen", "PCS_NAD27_Wyoming_West", "PCS_NAD27_Puerto_Rico", "PCS_NAD27_St_Croix", "PCS_NAD83_Montana", "PCS_NAD83_Nebraska", "PCS_NAD83_Nevada_East", "PCS_NAD83_Nevada_Central", "PCS_NAD83_Nevada_West", "PCS_NAD83_New_Hampshire", "PCS_NAD83_New_Jersey", "PCS_NAD83_New_Mexico_East", "PCS_NAD83_New_Mexico_Cent", "PCS_NAD83_New_Mexico_West", "PCS_NAD83_New_York_East", "PCS_NAD83_New_York_Central", "PCS_NAD83_New_York_West", "PCS_NAD83_New_York_Long_Is", "PCS_NAD83_North_Carolina", "PCS_NAD83_North_Dakota_N", "PCS_NAD83_North_Dakota_S", "PCS_NAD83_Ohio_North", "PCS_NAD83_Ohio_South", "PCS_NAD83_Oklahoma_North", "PCS_NAD83_Oklahoma_South", "PCS_NAD83_Oregon_North", "PCS_NAD83_Oregon_South", "PCS_NAD83_Pennsylvania_N", "PCS_NAD83_Pennsylvania_S", "PCS_NAD83_Rhode_Island", "PCS_NAD83_South_Carolina", "PCS_NAD83_South_Dakota_N", "PCS_NAD83_South_Dakota_S", "PCS_NAD83_Tennessee", "PCS_NAD83_Texas_North", "PCS_NAD83_Texas_North_Cen", "PCS_NAD83_Texas_Central", "PCS_NAD83_Texas_South_Cen", "PCS_NAD83_Texas_South", "PCS_NAD83_Utah_North", "PCS_NAD83_Utah_Central", "PCS_NAD83_Utah_South", "PCS_NAD83_Vermont", "PCS_NAD83_Virginia_North", "PCS_NAD83_Virginia_South", "PCS_NAD83_Washington_North", "PCS_NAD83_Washington_South", "PCS_NAD83_West_Virginia_N", "PCS_NAD83_West_Virginia_S", "PCS_NAD83_Wisconsin_North", "PCS_NAD83_Wisconsin_Cen", "PCS_NAD83_Wisconsin_South", "PCS_NAD83_Wyoming_East", "PCS_NAD83_Wyoming_E_Cen", "PCS_NAD83_Wyoming_W_Cen", "PCS_NAD83_Wyoming_West", "PCS_NAD83_Puerto_Rico_Virgin_Is", "PCS_WGS72_UTM_zone_1N", "PCS_WGS72_UTM_zone_2N", "PCS_WGS72_UTM_zone_3N", "PCS_WGS72_UTM_zone_4N", "PCS_WGS72_UTM_zone_5N", "PCS_WGS72_UTM_zone_6N", "PCS_WGS72_UTM_zone_7N", "PCS_WGS72_UTM_zone_8N", "PCS_WGS72_UTM_zone_9N", "PCS_WGS72_UTM_zone_10N", "PCS_WGS72_UTM_zone_11N", "PCS_WGS72_UTM_zone_12N", "PCS_WGS72_UTM_zone_13N", "PCS_WGS72_UTM_zone_14N", "PCS_WGS72_UTM_zone_15N", "PCS_WGS72_UTM_zone_16N", "PCS_WGS72_UTM_zone_17N", "PCS_WGS72_UTM_zone_18N", "PCS_WGS72_UTM_zone_19N", "PCS_WGS72_UTM_zone_20N", "PCS_WGS72_UTM_zone_21N", "PCS_WGS72_UTM_zone_22N", "PCS_WGS72_UTM_zone_23N", "PCS_WGS72_UTM_zone_24N", "PCS_WGS72_UTM_zone_25N", "PCS_WGS72_UTM_zone_26N", "PCS_WGS72_UTM_zone_27N", "PCS_WGS72_UTM_zone_28N", "PCS_WGS72_UTM_zone_29N", "PCS_WGS72_UTM_zone_30N", "PCS_WGS72_UTM_zone_31N", "PCS_WGS72_UTM_zone_32N", "PCS_WGS72_UTM_zone_33N", "PCS_WGS72_UTM_zone_34N", "PCS_WGS72_UTM_zone_35N", "PCS_WGS72_UTM_zone_36N", "PCS_WGS72_UTM_zone_37N", "PCS_WGS72_UTM_zone_38N", "PCS_WGS72_UTM_zone_39N", "PCS_WGS72_UTM_zone_40N", "PCS_WGS72_UTM_zone_41N", "PCS_WGS72_UTM_zone_42N", "PCS_WGS72_UTM_zone_43N", "PCS_WGS72_UTM_zone_44N", "PCS_WGS72_UTM_zone_45N", "PCS_WGS72_UTM_zone_46N", "PCS_WGS72_UTM_zone_47N", "PCS_WGS72_UTM_zone_48N", "PCS_WGS72_UTM_zone_49N", "PCS_WGS72_UTM_zone_50N", "PCS_WGS72_UTM_zone_51N", "PCS_WGS72_UTM_zone_52N", "PCS_WGS72_UTM_zone_53N", "PCS_WGS72_UTM_zone_54N", "PCS_WGS72_UTM_zone_55N", "PCS_WGS72_UTM_zone_56N", "PCS_WGS72_UTM_zone_57N", "PCS_WGS72_UTM_zone_58N", "PCS_WGS72_UTM_zone_59N", "PCS_WGS72_UTM_zone_60N", "PCS_WGS72_UTM_zone_1S", "PCS_WGS72_UTM_zone_2S", "PCS_WGS72_UTM_zone_3S", "PCS_WGS72_UTM_zone_4S", "PCS_WGS72_UTM_zone_5S", "PCS_WGS72_UTM_zone_6S", "PCS_WGS72_UTM_zone_7S", "PCS_WGS72_UTM_zone_8S", "PCS_WGS72_UTM_zone_9S", "PCS_WGS72_UTM_zone_10S", "PCS_WGS72_UTM_zone_11S", "PCS_WGS72_UTM_zone_12S", "PCS_WGS72_UTM_zone_13S", "PCS_WGS72_UTM_zone_14S", "PCS_WGS72_UTM_zone_15S", "PCS_WGS72_UTM_zone_16S", "PCS_WGS72_UTM_zone_17S", "PCS_WGS72_UTM_zone_18S", "PCS_WGS72_UTM_zone_19S", "PCS_WGS72_UTM_zone_20S", "PCS_WGS72_UTM_zone_21S", "PCS_WGS72_UTM_zone_22S", "PCS_WGS72_UTM_zone_23S", "PCS_WGS72_UTM_zone_24S", "PCS_WGS72_UTM_zone_25S", "PCS_WGS72_UTM_zone_26S", "PCS_WGS72_UTM_zone_27S", "PCS_WGS72_UTM_zone_28S", "PCS_WGS72_UTM_zone_29S", "PCS_WGS72_UTM_zone_30S", "PCS_WGS72_UTM_zone_31S", "PCS_WGS72_UTM_zone_32S", "PCS_WGS72_UTM_zone_33S", "PCS_WGS72_UTM_zone_34S", "PCS_WGS72_UTM_zone_35S", "PCS_WGS72_UTM_zone_36S", "PCS_WGS72_UTM_zone_37S", "PCS_WGS72_UTM_zone_38S", "PCS_WGS72_UTM_zone_39S", "PCS_WGS72_UTM_zone_40S", "PCS_WGS72_UTM_zone_41S", "PCS_WGS72_UTM_zone_42S", "PCS_WGS72_UTM_zone_43S", "PCS_WGS72_UTM_zone_44S", "PCS_WGS72_UTM_zone_45S", "PCS_WGS72_UTM_zone_46S", "PCS_WGS72_UTM_zone_47S", "PCS_WGS72_UTM_zone_48S", "PCS_WGS72_UTM_zone_49S", "PCS_WGS72_UTM_zone_50S", "PCS_WGS72_UTM_zone_51S", "PCS_WGS72_UTM_zone_52S", "PCS_WGS72_UTM_zone_53S", "PCS_WGS72_UTM_zone_54S", "PCS_WGS72_UTM_zone_55S", "PCS_WGS72_UTM_zone_56S", "PCS_WGS72_UTM_zone_57S", "PCS_WGS72_UTM_zone_58S", "PCS_WGS72_UTM_zone_59S", "PCS_WGS72_UTM_zone_60S", "PCS_WGS72BE_UTM_zone_1N", "PCS_WGS72BE_UTM_zone_2N", "PCS_WGS72BE_UTM_zone_3N", "PCS_WGS72BE_UTM_zone_4N", "PCS_WGS72BE_UTM_zone_5N", "PCS_WGS72BE_UTM_zone_6N", "PCS_WGS72BE_UTM_zone_7N", "PCS_WGS72BE_UTM_zone_8N", "PCS_WGS72BE_UTM_zone_9N", "PCS_WGS72BE_UTM_zone_10N", "PCS_WGS72BE_UTM_zone_11N", "PCS_WGS72BE_UTM_zone_12N", "PCS_WGS72BE_UTM_zone_13N", "PCS_WGS72BE_UTM_zone_14N", "PCS_WGS72BE_UTM_zone_15N", "PCS_WGS72BE_UTM_zone_16N", "PCS_WGS72BE_UTM_zone_17N", "PCS_WGS72BE_UTM_zone_18N", "PCS_WGS72BE_UTM_zone_19N", "PCS_WGS72BE_UTM_zone_20N", "PCS_WGS72BE_UTM_zone_21N", "PCS_WGS72BE_UTM_zone_22N", "PCS_WGS72BE_UTM_zone_23N", "PCS_WGS72BE_UTM_zone_24N", "PCS_WGS72BE_UTM_zone_25N", "PCS_WGS72BE_UTM_zone_26N", "PCS_WGS72BE_UTM_zone_27N", "PCS_WGS72BE_UTM_zone_28N", "PCS_WGS72BE_UTM_zone_29N", "PCS_WGS72BE_UTM_zone_30N", "PCS_WGS72BE_UTM_zone_31N", "PCS_WGS72BE_UTM_zone_32N", "PCS_WGS72BE_UTM_zone_33N", "PCS_WGS72BE_UTM_zone_34N", "PCS_WGS72BE_UTM_zone_35N", "PCS_WGS72BE_UTM_zone_36N", "PCS_WGS72BE_UTM_zone_37N", "PCS_WGS72BE_UTM_zone_38N", "PCS_WGS72BE_UTM_zone_39N", "PCS_WGS72BE_UTM_zone_40N", "PCS_WGS72BE_UTM_zone_41N", "PCS_WGS72BE_UTM_zone_42N", "PCS_WGS72BE_UTM_zone_43N", "PCS_WGS72BE_UTM_zone_44N", "PCS_WGS72BE_UTM_zone_45N", "PCS_WGS72BE_UTM_zone_46N", "PCS_WGS72BE_UTM_zone_47N", "PCS_WGS72BE_UTM_zone_48N", "PCS_WGS72BE_UTM_zone_49N", "PCS_WGS72BE_UTM_zone_50N", "PCS_WGS72BE_UTM_zone_51N", "PCS_WGS72BE_UTM_zone_52N", "PCS_WGS72BE_UTM_zone_53N", "PCS_WGS72BE_UTM_zone_54N", "PCS_WGS72BE_UTM_zone_55N", "PCS_WGS72BE_UTM_zone_56N", "PCS_WGS72BE_UTM_zone_57N", "PCS_WGS72BE_UTM_zone_58N", "PCS_WGS72BE_UTM_zone_59N", "PCS_WGS72BE_UTM_zone_60N", "PCS_WGS72BE_UTM_zone_1S", "PCS_WGS72BE_UTM_zone_2S", "PCS_WGS72BE_UTM_zone_3S", "PCS_WGS72BE_UTM_zone_4S", "PCS_WGS72BE_UTM_zone_5S", "PCS_WGS72BE_UTM_zone_6S", "PCS_WGS72BE_UTM_zone_7S", "PCS_WGS72BE_UTM_zone_8S", "PCS_WGS72BE_UTM_zone_9S", "PCS_WGS72BE_UTM_zone_10S", "PCS_WGS72BE_UTM_zone_11S", "PCS_WGS72BE_UTM_zone_12S", "PCS_WGS72BE_UTM_zone_13S", "PCS_WGS72BE_UTM_zone_14S", "PCS_WGS72BE_UTM_zone_15S", "PCS_WGS72BE_UTM_zone_16S", "PCS_WGS72BE_UTM_zone_17S", "PCS_WGS72BE_UTM_zone_18S", "PCS_WGS72BE_UTM_zone_19S", "PCS_WGS72BE_UTM_zone_20S", "PCS_WGS72BE_UTM_zone_21S", "PCS_WGS72BE_UTM_zone_22S", "PCS_WGS72BE_UTM_zone_23S", "PCS_WGS72BE_UTM_zone_24S", "PCS_WGS72BE_UTM_zone_25S", "PCS_WGS72BE_UTM_zone_26S", "PCS_WGS72BE_UTM_zone_27S", "PCS_WGS72BE_UTM_zone_28S", "PCS_WGS72BE_UTM_zone_29S", "PCS_WGS72BE_UTM_zone_30S", "PCS_WGS72BE_UTM_zone_31S", "PCS_WGS72BE_UTM_zone_32S", "PCS_WGS72BE_UTM_zone_33S", "PCS_WGS72BE_UTM_zone_34S", "PCS_WGS72BE_UTM_zone_35S", "PCS_WGS72BE_UTM_zone_36S", "PCS_WGS72BE_UTM_zone_37S", "PCS_WGS72BE_UTM_zone_38S", "PCS_WGS72BE_UTM_zone_39S", "PCS_WGS72BE_UTM_zone_40S", "PCS_WGS72BE_UTM_zone_41S", "PCS_WGS72BE_UTM_zone_42S", "PCS_WGS72BE_UTM_zone_43S", "PCS_WGS72BE_UTM_zone_44S", "PCS_WGS72BE_UTM_zone_45S", "PCS_WGS72BE_UTM_zone_46S", "PCS_WGS72BE_UTM_zone_47S", "PCS_WGS72BE_UTM_zone_48S", "PCS_WGS72BE_UTM_zone_49S", "PCS_WGS72BE_UTM_zone_50S", "PCS_WGS72BE_UTM_zone_51S", "PCS_WGS72BE_UTM_zone_52S", "PCS_WGS72BE_UTM_zone_53S", "PCS_WGS72BE_UTM_zone_54S", "PCS_WGS72BE_UTM_zone_55S", "PCS_WGS72BE_UTM_zone_56S", "PCS_WGS72BE_UTM_zone_57S", "PCS_WGS72BE_UTM_zone_58S", "PCS_WGS72BE_UTM_zone_59S", "PCS_WGS72BE_UTM_zone_60S", "PCS_WGS84_UTM_zone_1N", "PCS_WGS84_UTM_zone_2N", "PCS_WGS84_UTM_zone_3N", "PCS_WGS84_UTM_zone_4N", "PCS_WGS84_UTM_zone_5N", "PCS_WGS84_UTM_zone_6N", "PCS_WGS84_UTM_zone_7N", "PCS_WGS84_UTM_zone_8N", "PCS_WGS84_UTM_zone_9N", "PCS_WGS84_UTM_zone_10N", "PCS_WGS84_UTM_zone_11N", "PCS_WGS84_UTM_zone_12N", "PCS_WGS84_UTM_zone_13N", "PCS_WGS84_UTM_zone_14N", "PCS_WGS84_UTM_zone_15N", "PCS_WGS84_UTM_zone_16N", "PCS_WGS84_UTM_zone_17N", "PCS_WGS84_UTM_zone_18N", "PCS_WGS84_UTM_zone_19N", "PCS_WGS84_UTM_zone_20N", "PCS_WGS84_UTM_zone_21N", "PCS_WGS84_UTM_zone_22N", "PCS_WGS84_UTM_zone_23N", "PCS_WGS84_UTM_zone_24N", "PCS_WGS84_UTM_zone_25N", "PCS_WGS84_UTM_zone_26N", "PCS_WGS84_UTM_zone_27N", "PCS_WGS84_UTM_zone_28N", "PCS_WGS84_UTM_zone_29N", "PCS_WGS84_UTM_zone_30N", "PCS_WGS84_UTM_zone_31N", "PCS_WGS84_UTM_zone_32N", "PCS_WGS84_UTM_zone_33N", "PCS_WGS84_UTM_zone_34N", "PCS_WGS84_UTM_zone_35N", "PCS_WGS84_UTM_zone_36N", "PCS_WGS84_UTM_zone_37N", "PCS_WGS84_UTM_zone_38N", "PCS_WGS84_UTM_zone_39N", "PCS_WGS84_UTM_zone_40N", "PCS_WGS84_UTM_zone_41N", "PCS_WGS84_UTM_zone_42N", "PCS_WGS84_UTM_zone_43N", "PCS_WGS84_UTM_zone_44N", "PCS_WGS84_UTM_zone_45N", "PCS_WGS84_UTM_zone_46N", "PCS_WGS84_UTM_zone_47N", "PCS_WGS84_UTM_zone_48N", "PCS_WGS84_UTM_zone_49N", "PCS_WGS84_UTM_zone_50N", "PCS_WGS84_UTM_zone_51N", "PCS_WGS84_UTM_zone_52N", "PCS_WGS84_UTM_zone_53N", "PCS_WGS84_UTM_zone_54N", "PCS_WGS84_UTM_zone_55N", "PCS_WGS84_UTM_zone_56N", "PCS_WGS84_UTM_zone_57N", "PCS_WGS84_UTM_zone_58N", "PCS_WGS84_UTM_zone_59N", "PCS_WGS84_UTM_zone_60N", "PCS_WGS84_UTM_zone_1S", "PCS_WGS84_UTM_zone_2S", "PCS_WGS84_UTM_zone_3S", "PCS_WGS84_UTM_zone_4S", "PCS_WGS84_UTM_zone_5S", "PCS_WGS84_UTM_zone_6S", "PCS_WGS84_UTM_zone_7S", "PCS_WGS84_UTM_zone_8S", "PCS_WGS84_UTM_zone_9S", "PCS_WGS84_UTM_zone_10S", "PCS_WGS84_UTM_zone_11S", "PCS_WGS84_UTM_zone_12S", "PCS_WGS84_UTM_zone_13S", "PCS_WGS84_UTM_zone_14S", "PCS_WGS84_UTM_zone_15S", "PCS_WGS84_UTM_zone_16S", "PCS_WGS84_UTM_zone_17S", "PCS_WGS84_UTM_zone_18S", "PCS_WGS84_UTM_zone_19S", "PCS_WGS84_UTM_zone_20S", "PCS_WGS84_UTM_zone_21S", "PCS_WGS84_UTM_zone_22S", "PCS_WGS84_UTM_zone_23S", "PCS_WGS84_UTM_zone_24S", "PCS_WGS84_UTM_zone_25S", "PCS_WGS84_UTM_zone_26S", "PCS_WGS84_UTM_zone_27S", "PCS_WGS84_UTM_zone_28S", "PCS_WGS84_UTM_zone_29S", "PCS_WGS84_UTM_zone_30S", "PCS_WGS84_UTM_zone_31S", "PCS_WGS84_UTM_zone_32S", "PCS_WGS84_UTM_zone_33S", "PCS_WGS84_UTM_zone_34S", "PCS_WGS84_UTM_zone_35S", "PCS_WGS84_UTM_zone_36S", "PCS_WGS84_UTM_zone_37S", "PCS_WGS84_UTM_zone_38S", "PCS_WGS84_UTM_zone_39S", "PCS_WGS84_UTM_zone_40S", "PCS_WGS84_UTM_zone_41S", "PCS_WGS84_UTM_zone_42S", "PCS_WGS84_UTM_zone_43S", "PCS_WGS84_UTM_zone_44S", "PCS_WGS84_UTM_zone_45S", "PCS_WGS84_UTM_zone_46S", "PCS_WGS84_UTM_zone_47S", "PCS_WGS84_UTM_zone_48S", "PCS_WGS84_UTM_zone_49S", "PCS_WGS84_UTM_zone_50S", "PCS_WGS84_UTM_zone_51S", "PCS_WGS84_UTM_zone_52S", "PCS_WGS84_UTM_zone_53S", "PCS_WGS84_UTM_zone_54S", "PCS_WGS84_UTM_zone_55S", "PCS_WGS84_UTM_zone_56S", "PCS_WGS84_UTM_zone_57S", "PCS_WGS84_UTM_zone_58S", "PCS_WGS84_UTM_zone_59S", "PCS_WGS84_UTM_zone_60S", "PM_Greenwich", "PM_Lisbon", "PM_Paris", "PM_Bogota", "PM_Madrid", "PM_Rome", "PM_Bern", "PM_Jakarta", "PM_Ferro", "PM_Brussels", "PM_Stockholm", "Ellipse_Airy_1830", "Ellipse_Airy_Modified_1849", "Ellipse_Australian_National_Spheroid", "Ellipse_Bessel_1841", "Ellipse_Bessel_Modified", "Ellipse_Bessel_Namibia", "Ellipse_Clarke_1858", "Ellipse_Clarke_1866", "Ellipse_Clarke_1866_Michigan", "Ellipse_Clarke_1880_Benoit", "Ellipse_Clarke_1880_IGN", "Ellipse_Clarke_1880_RGS", "Ellipse_Clarke_1880_Arc", "Ellipse_Clarke_1880_SGA_1922", "Ellipse_Everest_1830_1937_Adjustment", "Ellipse_Everest_1830_1967_Definition", "Ellipse_Everest_1830_1975_Definition", "Ellipse_Everest_1830_Modified", "Ellipse_GRS_1980", "Ellipse_Helmert_1906", "Ellipse_Indonesian_National_Spheroid", "Ellipse_International_1924", "Ellipse_International_1967", "Ellipse_Krassowsky_1940", "Ellipse_NWL_9D", "Ellipse_NWL_10D", "Ellipse_Plessis_1817", "Ellipse_Struve_1860", "Ellipse_War_Office", "Ellipse_WGS_84", "Ellipse_GEM_10C", "Ellipse_OSU86F", "Ellipse_OSU91A", "Ellipse_Clarke_1880", "Ellipse_Sphere", "DatumE_Airy1830", "DatumE_AiryModified1849", "DatumE_AustralianNationalSpheroid", "DatumE_Bessel1841", "DatumE_BesselModified", "DatumE_BesselNamibia", "DatumE_Clarke1858", "DatumE_Clarke1866", "DatumE_Clarke1866Michigan", "DatumE_Clarke1880_Benoit", "DatumE_Clarke1880_IGN", "DatumE_Clarke1880_RGS", "DatumE_Clarke1880_Arc", "DatumE_Clarke1880_SGA1922", "DatumE_Everest1830_1937Adjustment", "DatumE_Everest1830_1967Definition", "DatumE_Everest1830_1975Definition", "DatumE_Everest1830Modified", "DatumE_GRS1980", "DatumE_Helmert1906", "DatumE_IndonesianNationalSpheroid", "DatumE_International1924", "DatumE_International1967", "DatumE_Krassowsky1960", "DatumE_NWL9D", "DatumE_NWL10D", "DatumE_Plessis1817", "DatumE_Struve1860", "DatumE_WarOffice", "DatumE_WGS84", "DatumE_GEM10C", "DatumE_OSU86F", "DatumE_OSU91A", "DatumE_Clarke1880", "DatumE_Sphere", "Datum_Adindan", "Datum_Australian_Geodetic_Datum_1966", "Datum_Australian_Geodetic_Datum_1984", "Datum_Ain_el_Abd_1970", "Datum_Afgooye", "Datum_Agadez", "Datum_Lisbon", "Datum_Aratu", "Datum_Arc_1950", "Datum_Arc_1960", "Datum_Batavia", "Datum_Barbados", "Datum_Beduaram", "Datum_Beijing_1954", "Datum_Reseau_National_Belge_1950", "Datum_Bermuda_1957", "Datum_Bern_1898", "Datum_Bogota", "Datum_Bukit_Rimpah", "Datum_Camacupa", "Datum_Campo_Inchauspe", "Datum_Cape", "Datum_Carthage", "Datum_Chua", "Datum_Corrego_Alegre", "Datum_Cote_d_Ivoire", "Datum_Deir_ez_Zor", "Datum_Douala", "Datum_Egypt_1907", "Datum_European_Datum_1950", "Datum_European_Datum_1987", "Datum_Fahud", "Datum_Gandajika_1970", "Datum_Garoua", "Datum_Guyane_Francaise", "Datum_Hu_Tzu_Shan", "Datum_Hungarian_Datum_1972", "Datum_Indonesian_Datum_1974", "Datum_Indian_1954", "Datum_Indian_1975", "Datum_Jamaica_1875", "Datum_Jamaica_1969", "Datum_Kalianpur", "Datum_Kandawala", "Datum_Kertau", "Datum_Kuwait_Oil_Company", "Datum_La_Canoa", "Datum_Provisional_S_American_Datum_1956", "Datum_Lake", "Datum_Leigon", "Datum_Liberia_1964", "Datum_Lome", "Datum_Luzon_1911", "Datum_Hito_XVIII_1963", "Datum_Herat_North", "Datum_Mahe_1971", "Datum_Makassar", "Datum_European_Reference_System_1989", "Datum_Malongo_1987", "Datum_Manoca", "Datum_Merchich", "Datum_Massawa", "Datum_Minna", "Datum_Mhast", "Datum_Monte_Mario", "Datum_M_poraloko", "Datum_North_American_Datum_1927", "Datum_NAD_Michigan", "Datum_North_American_Datum_1983", "Datum_Nahrwan_1967", "Datum_Naparima_1972", "Datum_New_Zealand_Geodetic_Datum_1949", "Datum_NGO_1948", "Datum_Datum_73", "Datum_Nouvelle_Triangulation_Francaise", "Datum_NSWC_9Z_2", "Datum_OSGB_1936", "Datum_OSGB_1970_SN", "Datum_OS_SN_1980", "Datum_Padang_1884", "Datum_Palestine_1923", "Datum_Pointe_Noire", "Datum_Geocentric_Datum_of_Australia_1994", "Datum_Pulkovo_1942", "Datum_Qatar", "Datum_Qatar_1948", "Datum_Qornoq", "Datum_Loma_Quintana", "Datum_Amersfoort", "Datum_RT38", "Datum_South_American_Datum_1969", "Datum_Sapper_Hill_1943", "Datum_Schwarzeck", "Datum_Segora", "Datum_Serindung", "Datum_Sudan", "Datum_Tananarive_1925", "Datum_Timbalai_1948", "Datum_TM65", "Datum_TM75", "Datum_Tokyo", "Datum_Trinidad_1903", "Datum_Trucial_Coast_1948", "Datum_Voirol_1875", "Datum_Voirol_Unifie_1960", "Datum_Bern_1938", "Datum_Nord_Sahara_1959", "Datum_Stockholm_1938", "Datum_Yacare", "Datum_Yoff", "Datum_Zanderij", "Datum_Militar_Geographische_Institut", "Datum_Reseau_National_Belge_1972", "Datum_Deutsche_Hauptdreiecksnetz", "Datum_Conakry_1905", "Datum_WGS72", "Datum_WGS72_Transit_Broadcast_Ephemeris", "Datum_WGS84", "Datum_Ancienne_Triangulation_Francaise", "Datum_Nord_de_Guerre", "GCSE_Airy1830", "GCSE_AiryModified1849", "GCSE_AustralianNationalSpheroid", "GCSE_Bessel1841", "GCSE_BesselModified", "GCSE_BesselNamibia", "GCSE_Clarke1858", "GCSE_Clarke1866", "GCSE_Clarke1866Michigan", "GCSE_Clarke1880_Benoit", "GCSE_Clarke1880_IGN", "GCSE_Clarke1880_RGS", "GCSE_Clarke1880_Arc", "GCSE_Clarke1880_SGA1922", "GCSE_Everest1830_1937Adjustment", "GCSE_Everest1830_1967Definition", "GCSE_Everest1830_1975Definition", "GCSE_Everest1830Modified", "GCSE_GRS1980", "GCSE_Helmert1906", "GCSE_IndonesianNationalSpheroid", "GCSE_International1924", "GCSE_International1967", "GCSE_Krassowsky1940", "GCSE_NWL9D", "GCSE_NWL10D", "GCSE_Plessis1817", "GCSE_Struve1860", "GCSE_WarOffice", "GCSE_WGS84", "GCSE_GEM10C", "GCSE_OSU86F", "GCSE_OSU91A", "GCSE_Clarke1880", "GCSE_Sphere", "GCS_Adindan", "GCS_AGD66", "GCS_AGD84", "GCS_Ain_el_Abd", "GCS_Afgooye", "GCS_Agadez", "GCS_Lisbon", "GCS_Aratu", "GCS_Arc_1950", "GCS_Arc_1960", "GCS_Batavia", "GCS_Barbados", "GCS_Beduaram", "GCS_Beijing_1954", "GCS_Belge_1950", "GCS_Bermuda_1957", "GCS_Bern_1898", "GCS_Bogota", "GCS_Bukit_Rimpah", "GCS_Camacupa", "GCS_Campo_Inchauspe", "GCS_Cape", "GCS_Carthage", "GCS_Chua", "GCS_Corrego_Alegre", "GCS_Cote_d_Ivoire", "GCS_Deir_ez_Zor", "GCS_Douala", "GCS_Egypt_1907", "GCS_ED50", "GCS_ED87", "GCS_Fahud", "GCS_Gandajika_1970", "GCS_Garoua", "GCS_Guyane_Francaise", "GCS_Hu_Tzu_Shan", "GCS_HD72", "GCS_ID74", "GCS_Indian_1954", "GCS_Indian_1975", "GCS_Jamaica_1875", "GCS_JAD69", "GCS_Kalianpur", "GCS_Kandawala", "GCS_Kertau", "GCS_KOC", "GCS_La_Canoa", "GCS_PSAD56", "GCS_Lake", "GCS_Leigon", "GCS_Liberia_1964", "GCS_Lome", "GCS_Luzon_1911", "GCS_Hito_XVIII_1963", "GCS_Herat_North", "GCS_Mahe_1971", "GCS_Makassar", "GCS_EUREF89", "GCS_Malongo_1987", "GCS_Manoca", "GCS_Merchich", "GCS_Massawa", "GCS_Minna", "GCS_Mhast", "GCS_Monte_Mario", "GCS_M_poraloko", "GCS_NAD27", "GCS_NAD_Michigan", "GCS_NAD83", "GCS_Nahrwan_1967", "GCS_Naparima_1972", "GCS_GD49", "GCS_NGO_1948", "GCS_Datum_73", "GCS_NTF", "GCS_NSWC_9Z_2", "GCS_OSGB_1936", "GCS_OSGB70", "GCS_OS_SN80", "GCS_Padang", "GCS_Palestine_1923", "GCS_Pointe_Noire", "GCS_GDA94", "GCS_Pulkovo_1942", "GCS_Qatar", "GCS_Qatar_1948", "GCS_Qornoq", "GCS_Loma_Quintana", "GCS_Amersfoort", "GCS_RT38", "GCS_SAD69", "GCS_Sapper_Hill_1943", "GCS_Schwarzeck", "GCS_Segora", "GCS_Serindung", "GCS_Sudan", "GCS_Tananarive", "GCS_Timbalai_1948", "GCS_TM65", "GCS_TM75", "GCS_Tokyo", "GCS_Trinidad_1903", "GCS_TC_1948", "GCS_Voirol_1875", "GCS_Voirol_Unifie", "GCS_Bern_1938", "GCS_Nord_Sahara_1959", "GCS_Stockholm_1938", "GCS_Yacare", "GCS_Yoff", "GCS_Zanderij", "GCS_MGI", "GCS_Belge_1972", "GCS_DHDN", "GCS_Conakry_1905", "GCS_WGS_72", "GCS_WGS_72BE", "GCS_WGS_84", "GCS_Bern_1898_Bern", "GCS_Bogota_Bogota", "GCS_Lisbon_Lisbon", "GCS_Makassar_Jakarta", "GCS_MGI_Ferro", "GCS_Monte_Mario_Rome", "GCS_NTF_Paris", "GCS_Padang_Jakarta", "GCS_Belge_1950_Brussels", "GCS_Tananarive_Paris", "GCS_Voirol_1875_Paris", "GCS_Voirol_Unifie_Paris", "GCS_Batavia_Jakarta", "GCS_ATF_Paris", "GCS_NDG_Paris", "Angular_Radian", "Angular_Degree", "Angular_Arc_Minute", "Angular_Arc_Second", "Angular_Grad", "Angular_Gon", "Angular_DMS", "Angular_DMS_Hemisphere", "Linear_Meter", "Linear_Foot", "Linear_Foot_US_Survey", "Linear_Foot_Modified_American", "Linear_Foot_Clarke", "Linear_Foot_Indian", "Linear_Link", "Linear_Link_Benoit", "Linear_Link_Sears", "Linear_Chain_Benoit", "Linear_Chain_Sears", "Linear_Yard_Sears", "Linear_Yard_Indian", "Linear_Fathom", "Linear_Mile_International_Nautical", "RasterPixelIsArea", "RasterPixelIsPoint", "ModelTypeProjected", "ModelTypeGeographic", "ModelTypeGeocentric", "VerticalCSTypeGeoKey", "VerticalCitationGeoKey", "VerticalDatumGeoKey", "VerticalUnitsGeoKey", "ProjectedCSTypeGeoKey", "PCSCitationGeoKey", "ProjectionGeoKey", "ProjCoordTransGeoKey", "ProjLinearUnitsGeoKey", "ProjLinearUnitSizeGeoKey", "ProjStdParallel1GeoKey", "ProjStdParallel2GeoKey", "ProjNatOriginLongGeoKey", "ProjNatOriginLatGeoKey", "ProjFalseEastingGeoKey", "ProjFalseNorthingGeoKey", "ProjFalseOriginLongGeoKey", "ProjFalseOriginLatGeoKey", "ProjFalseOriginEastingGeoKey", "ProjFalseOriginNorthingGeoKey", "ProjCenterLongGeoKey", "ProjCenterLatGeoKey", "ProjCenterEastingGeoKey", "ProjCenterNorthingGeoKey", "ProjScaleAtNatOriginGeoKey", "ProjScaleAtCenterGeoKey", "ProjAzimuthAngleGeoKey", "ProjStraightVertPoleLongGeoKey", "GeographicTypeGeoKey", "GeogCitationGeoKey", "GeogGeodeticDatumGeoKey", "GeogPrimeMeridianGeoKey", "GeogLinearUnitsGeoKey", "GeogLinearUnitSizeGeoKey", "GeogAngularUnitsGeoKey", "GeogAngularUnitSizeGeoKey", "GeogEllipsoidGeoKey", "GeogSemiMajorAxisGeoKey", "GeogSemiMinorAxisGeoKey", "GeogInvFlatteningGeoKey", "GeogAzimuthUnitsGeoKey", "GeogPrimeMeridianLongGeoKey", "GTModelTypeGeoKey", "GTRasterTypeGeoKey", "GTCitationGeoKey", "camtasia", "TTA1", "password", "ultimotion", "unknown_codec", "ff_avcodec_locked", "encoder", "decoder", "custom_stride", "Complex", "Advanced", "book_idx", "mode_number", "Interlacing", "Upscaling", "vqavideo", "ws_snd1", "_height", "_width", "warning", "info", "true", "false", "deterministic", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "frameref", "keyint", "infinite", "scenecut", "bframes", "filter", "cabac", "interlaced", "flat", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "analyse", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "direct", "merange", "mvrange", "subme", "bitrate", "qp_constant", "qpmin", "qpmax", "qpstep", "ratetol", "ipratio", "pbratio", "pass", "zones", "annexb", "filler", "stitchable", "opencl", "touhou", "fake", "undef", "show", "crop", "component", "ntsc", "secam", "bt709", "bt470m", "bt470bg", "smpte170m", "smpte240m", "bt2020", "linear", "log100", "log316", "bt1361e", "YCgCo", "bt2020nc", "bt2020c", "SSE2", "SSE3", "BMI1", "uvDC", "uvAC", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", "underflow", "overflow", "ppppPP", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "ImageWidth", "GIF89a", "VOXs0", "VOXw0", "VOXyP", "TMPGEXS", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "wgvgwffgwwfffffgwwwwvffffffffffgwwwwwwwwvffffffffffffffffffffffgwwwwwwwwwwwwwwwwwwwwp", "WwvfeUDDDDDD3DCDDEVfwP", "I420", "IYUV", "BGR0C", "x264_weighted_pred_init", "x264_encoder_close", "x264_lookahead_shift", "c8ef3d10dedcd2579b7ae8c9f0d18028", "x264_macroblock_bipred_init", "x264_frame_pop", "x264_frame_shift", "x264_frame_push_unused", "x264_frame_push_blank_unused", "ARMv6", "NEON", "FastNeonMRC", "x264_mb_analyse_inter_p16x16", "x264_macroblock_analyse", "x264_rc_analyse_slice", "x264_ratecontrol_new", "init_pass2", "x264_ratecontrol_start", "x264_macroblock_cache_rect"], "debugstrings": ["cfrm in version %d\n", "Invalid version %d\n", "Version %d != 4.\n", "H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "MPEG-4 part 2 Microsoft variant version 1", "MPEG-4 part 2 Microsoft variant version 2", "MPEG-4 part 2 Microsoft variant version 3", "H.263+ / H.263-1998 / H.263 version 2", "On2 VP6 (Flash version)", "On2 VP6 (Flash version, with alpha channel)", "subpacket[%i].cookversion=%x\n", "Cook version %d", "Version %d", "Invalid version in global header\n", "f->version > 1", "f->version > 2", "invalid version %d in ver01 header\n", "This file is encoded with Fraps version %d. This codec can only decode versions <= 5.\n", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "Unsupported codec version!\n", "LOCO codec version %i", "lossy:%i, version:%i, mode: %i\n", "This version does not support %d kHz - %d kbit/s/ch mode.\n", "mjpeg: JFIF header found (version: %x.%x) SAR=%d/%d\n", "Intel(R) JPEG Library, version 1", "Encoder version %d.%d\n", "Header version doesn't match codec tag\n", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "strictly conform to a older more strict version of the spec or reference software", "unsupported version: %d\n", "unsupported header version: %d\n", "stream is QDMC version 1, which is not supported\n", "Unknown version %X", "Audio sample format conversion failed\n", "RV1/2 version", "Error s->version is %d\n", "Unsupported Sonic version, please report\n", "GeoTIFF_Version", "texture data version %i is unsupported\n", "libavcodec license: GPL version 3 or later", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "Encoder version %d.%d.%d.%d\n", "Unsupported VBLE Version: %d\n", "Old WMV3 version detected, some frames may be decoded incorrectly\n", "Theora bitstream version %X\n", "VP version: %d\n", "VQA Version %d", "VQA Version %i", "Invalid WebP Lossless version\n", "unsupported version\n", "Version %i.%i", "GCC: (GNU) 4.6 20120106 (prerelease)"], "localsymbols": ["", "ff_log2_tab"], "dependencies": ["libz.so", "libm.so", "libdl.so", "libc.so", "libavutil.so"], "elfname": "libavcodec.so"}