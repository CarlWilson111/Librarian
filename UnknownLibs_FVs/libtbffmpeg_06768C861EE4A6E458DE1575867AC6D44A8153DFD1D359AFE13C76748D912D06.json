{"globalvars": ["FDKaacEnc_huff_ltab7_8", "EXTERN_ASMavg_hevc_epel_s8_h_8_neon", "avpriv_cga_font", "DH_version", "ff_vf_separatefields", "ff_vf_setfield", "ff_http_protocol", "groupBorders34", "SineWindow120", "ff_mpegts_demuxer", "ff_sine_4096_fixed", "PKCS12_BAGS_it", "v3_bcons", "rgb24tobgr24", "ff_mpa_sblimit_table", "ff_vf_palettegen", "shuffle_bytes_2103", "FDK_sbrDecoder_sbr_frame_info1_15", "FDKaacEnc_huff_ltab9_10", "ELDAnalysis480", "aBookPsIidFineFreqDecode", "EXTERN_ASMadd_hevc_qpel_s16_v2_8_neon", "CAST_S_table5", "SHA256_version", "CMS_OtherRecipientInfo_it", "CMS_IssuerAndSerialNumber_it", "ff_af_amix", "ff_vf_il", "ff_aac_spectral_bits", "v_Huff_envelopeLevelC11F", "EXTERN_ASMadd_hevc_qpel_s16_h1v2_8_neon", "p_FDKaacEnc_96000_long_1024", "ff_aac_pow2sf_tab", "elementsTab", "EXTERN_ASMadd_hevc_qpel_s32_h1v1_8_neon", "ASN1_SEQUENCE_it", "OCSP_SERVICELOC_it", "ff_af_stereotools", "EXTERN_ASMadd_hevc_qpel_s8_h3v1_8_neon", "EXTERN_ASMadd_hevc_qpel_s16_h2_8_neon", "ff_vf_pixdesctest", "EXTERN_ASMput_hevc_qpel_s8_h1_8_neon", "ff_hevc_diag_scan8x8_x", "EVP_version", "psTuningTable", "SHA512_version", "EXTERN_ASMavg_hevc_epel_s16_v_8_neon", "ff_af_areverse", "ff_vf_hqx", "ff_aac_pred_sfb_max", "EXTERN_ASMadd_hevc_qpel_s8_h1v1_8_neon", "p_FDKaacEnc_88200_long_1024", "ASN1_GENERALSTRING_it", "EXTERN_ASMavg_hevc_epel_s4_pixels_8_neon", "ASN1_T61STRING_it", "PKCS7_ENVELOPE_it", "ff_aac_num_swb_512", "ff_mp3_demuxer", "ff_af_treble", "ff_cos_8192_fixed", "EXTERN_ASMadd_hevc_qpel_s16_h2v3_8_neon", "yuyvtoyuv422", "EXTERN_ASMavg_hevc_qpel_s16_v2_8_neon", "ff_cos_16_fixed", "FDKaacEnc_tnsCoeff4Borders", "v_Huff_envelopeLevelC10T", "ff_vf_noise", "OTHERNAME_it", "ff_af_replaygain", "ff_cos_64", "ff_vf_vectorscope", "EXTERN_ASMavg_hevc_qpel_s16_h2v3_8_neon", "ff_af_anequalizer", "ff_vf_tile", "ff_vsrc_smptebars", "NOTICEREF_it", "ff_aac_eld_window_512", "ff_af_acompressor", "FDK_sbrDecoder_sbr_start_freq_44", "EXTERN_ASMput_hevc_qpel_s8_h3_8_neon", "EXTERN_ASMadd_hevc_epel_s4_v_8_neon", "ff_pcm_s16le_encoder", "ff_mpegtsraw_demuxer", "v3_akey_id", "ff_cos_4096_fixed", "EXTERN_ASMadd_hevc_epel_s8_pixels_8_neon", "BF_version", "ff_vf_setpts", "EXTERN_ASMavg_hevc_epel_s8_v_8_neon", "ff_hevc_parser", "v3_name_constraints", "ff_rgb24toyv12", "ff_aac_demuxer", "ff_vf_fftfilt", "EXTERN_ASMavg_hevc_qpel_s8_h1_8_neon", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10F", "EXTERN_ASMput_hevc_qpel_s8_h1v2_8_neon", "ff_cos_32", "x264_decimate_table8", "EXTERN_ASMput_hevc_qpel_s16_h2v1_8_neon", "ff_asink_abuffer", "ff_vf_edgedetect", "p_FDKaacEnc_16000_short_128", "OCSP_REVOKEDINFO_it", "EXTERN_ASMff_mc_weight_4_neon", "ff_log2_tab", "x264_lambda2_tab", "ff_mdct_win_fixed", "ff_vf_dejudder", "X509_version", "ff_libfdk_aac_encoder", "tns_max_bands_tbl_480", "p8_13_20", "ff_vf_blend", "ff_vf_haldclut", "ff_af_dynaudnorm", "ff_vf_sendcmd", "NAME_CONSTRAINTS_it", "SSL_version_str", "app_pkey_methods", "EXTERN_ASMput_hevc_qpel_s16_h1v2_8_neon", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10T", "FDK_sbrDecoder_sbr_frame_info4_16", "p_FDKaacEnc_44100_long_1024", "ff_aac_kbd_long_1024", "RSA_version", "dsa_pkey_meth", "ff_vf_removelogo", "ff_sin_4096", "AUTHORITY_INFO_ACCESS_it", "ff_sin_32", "SineWindow32", "EXTERN_ASMput_hevc_qpel_s16_v1_8_neon", "ff_interleaved_ue_golomb_vlc_code", "x264_lambda_tab", "EXTERN_ASMput_hevc_qpel_s16_h3_8_neon", "ff_vf_realtime", "PKCS7_ISSUER_AND_SERIAL_it", "ff_aac_spectral_codes", "v3_crl_invdate", "SineWindow64", "EXTERN_ASMput_hevc_epel_s4_pixels_8_neon", "ExponentTable", "ff_eac3_default_cpl_band_struct", "tmptmp0", "ssl3_undef_enc_method", "EXTERN_ASMput_hevc_qpel_s32_h1v1_8_neon", "v3_inhibit_anyp", "x264_total_zeros", "v_Huff_envelopeLevelC10F", "ff_mpeg4_video_profiles", "DSAPublicKey_it", "X509_NAME_ENTRY_it", "ff_ac3_slow_gain_tab", "avpriv_pix_fmt_bps_mov", "CMS_SignedData_it", "EXTERN_ASMadd_hevc_epel_s16_v_8_neon", "ff_af_channelsplit", "EXTERN_ASMavg_hevc_epel_s16_h_8_neon", "EXTERN_ASMput_hevc_qpel_s16_h1v3_8_neon", "x264_coeff_abs_level_m1_offset", "ff_af_apad", "uyvytoyuv420", "x264_chroma_format", "FDK_sbrDecoder_envelopeTable_16", "ff_vf_split", "ff_id3v2_3_tags", "ff_rtmp_protocol", "aLargestAbsoluteValue", "FDK_sbrDecoder_sbr_frame_info1_16", "dhx_asn1_meth", "ff_mp3on4float_decoder", "ff_hevc_pel_weight", "X509_ALGORS_it", "ff_aac_kbd_short_128", "CMS_OriginatorInfo_it", "x264_cabac_range_lps", "FDK_sbrDecoder_sbr_frame_info4_15", "ff_aac_spectral_sizes", "sigx_app", "ff_swb_offset_1024", "aHuffTreeRvlCodewds", "ff_vf_streamselect", "EXTERN_ASMput_hevc_qpel_s8_h1v3_8_neon", "RSA_PSS_PARAMS_it", "av_format_ffversion", "x264_last_coeff_flag_offset_8x8", "EXTERN_ASMadd_hevc_qpel_s32_v1_8_neon", "FDK_sbrDecoder_aNoIccBins", "ff_vf_framestep", "ff_sine_4096", "EXTERN_ASMput_hevc_qpel_s8_pixels_8_neon", "CONF_def_version", "EXTERN_ASMadd_hevc_qpel_s16_h2v1_8_neon", "EXTERN_ASMtransform_32x32_add_neon_row_4", "SineWindow960", "ASN1_SET_ANY_it", "dhx_pkey_meth", "ff_avio_class", "harmonicPhaseX", "CMS_SignerIdentifier_it", "ff_vf_elbg", "ff_vsrc_haldclutsrc", "OSSL_libdes_version", "ff_codec_bmp_tags", "v3_crld", "aBookPsIidFineTimeDecode", "KBDWindow128", "OSSL_DES_version", "ff_hevc_diag_scan4x4_x", "aQuantTable", "ff_ue_golomb_vlc_code", "ff_codec_wav_tags", "MantissaTable", "ff_af_astats", "v3_ocsp_serviceloc", "EXTERN_ASMput_hevc_qpel_s16_v2_8_neon", "ff_ue_golomb_len", "EXTERN_ASMput_hevc_qpel_s16_h3v1_8_neon", "v3_ocsp_nonce", "aHuffTreeRvlcEscape", "DISPLAYTEXT_it", "ff_avf_showcqt", "aaFractDelayPhaseFactorReSubQmf20", "p_FDKaacEnc_12000_short_128", "ff_af_bandreject", "DHvparams_it", "ff_cos_256", "ff_vf_yadif", "ff_ac3_rematrix_band_tab", "ff_avf_adrawgraph", "EXTERN_ASMput_hevc_epel_s4_h_8_neon", "ff_cos_4096", "ff_vf_detelecine", "v3_pci", "av_ripemd_size", "CAST_version", "EXTERN_ASMtransform_4x4_luma_add_neon", "ff_mpeg2_video_profiles", "DSA_version", "interleaveBytes", "EXTERN_ASMavg_hevc_qpel_s16_v3_8_neon", "rgb24to16", "ff_af_agate", "ff_af_sidechaingate", "PBKDF2PARAM_it", "ASN1_NULL_it", "ff_vf_colorchannelmixer", "ff_asrc_aevalsrc", "OPENSSL_NONPIC_relocated", "EXTERN_ASMtransform_16x16_add_00", "ff_vf_null", "ff_interleaved_dirac_golomb_vlc_code", "FDKaacEnc_huff_ltabscf", "CMS_KEKRecipientInfo_it", "ff_mp3adufloat_decoder", "ff_vf_colorlevels", "EXTERN_ASMput_hevc_epel_s8_v_8_neon", "x264_decimate_table4", "X509_it", "EXTERN_ASMtransform_32x32_add_neon_col", "rsa_asn1_meths", "RSAPrivateKey_it", "CMS_OriginatorPublicKey_it", "v3_ns_ia5_list", "ff_af_afade", "ff_avf_ahistogram", "ff_put_pixels_clamped", "qmf_phaseshift_cos_downsamp32", "x264_cache_mv_func_table", "ff_aac_codebook_vector_vals", "p_FDKaacEnc_22050_short_128", "ff_af_aselect", "ff_mpa_synth_window_fixed", "PKCS7_it", "EXTERN_ASMadd_hevc_qpel_s32_h3v3_8_neon", "ff_af_anull", "ff_dither_2x2_8", "p_FDKaacEnc_32000_short_128", "ff_id3v2_tags", "ASN1_UTF8STRING_it", "EXTERN_ASMtransform_16x16_add_neon_row_8", "ff_h264_mp4toannexb_bsf", "EXTERN_ASMput_hevc_epel_s16_h_8_neon", "ff_vf_framerate", "DIST_POINT_it", "ff_vf_deband", "ff_vf_thumbnail", "yv12touyvy", "ff_vf_copy", "ff_avcodec_locked", "EXTERN_ASMput_hevc_qpel_s16_h1_8_neon", "ff_sine_128", "EXTERN_ASMadd_hevc_qpel_s32_pixels_8_neon", "ff_af_earwax", "CMS_KeyAgreeRecipientIdentifier_it", "sbrTuningTableSize", "aDimCbShift", "EXTERN_ASMadd_hevc_qpel_s32_h3v1_8_neon", "FDKSEEK_SET", "ff_vf_swapuv", "av_camellia_size", "EXTERN_ASMput_hevc_epel_s16_pixels_8_neon", "RotVectorReal240", "swri_resampler", "ff_ac3_fast_decay_tab", "ff_asrc_anullsrc", "EXTERN_ASMput_hevc_qpel_s32_h2v1_8_neon", "EXTERN_ASMadd_hevc_qpel_s8_h1_8_neon", "transform", "ASN1_GENERALIZEDTIME_it", "ff_aac_parser", "ff_af_highpass", "EXTERN_ASMavg_hevc_qpel_s32_h2v3_8_neon", "hmac_pkey_meth", "X509_NAME_it", "EXTERN_ASMput_hevc_epel_s8_h_8_neon", "EXTERN_ASMadd_hevc_qpel_s8_h3_8_neon", "OCSP_REQUEST_it", "ff_vf_deshake", "EXTERN_ASMff_mc_weight_8_neon", "EXTERN_ASMadd_hevc_qpel_s8_v1_8_neon", "ff_sine_256_fixed", "avpriv_vga16_font", "ff_af_vibrato", "CMS_EnvelopedData_it", "ff_flv_demuxer", "EXTERN_ASMadd_hevc_qpel_s16_h1v1_8_neon", "EXTERN_ASMput_hevc_qpel_s8_h2v1_8_neon", "EXTERN_ASMadd_hevc_epel_s16_hv_8_neon", "MD4_version", "aaFractDelayPhaseFactorImSubQmf20", "ff_crypto_protocol", "EXTERN_ASMadd_hevc_qpel_s8_v2_8_neon", "ff_af_sidechaincompress", "avpriv_mpeg4audio_sample_rates", "ff_vf_unsharp", "ff_id3v2_34_metadata_conv", "ff_vf_bbox", "ff_codec_movvideo_tags", "ff_codec_wav_guids", "OCSP_SINGLERESP_it", "ECDSA_SIG_it", "ff_vf_hstack", "ff_cos_256_fixed", "ff_vf_reverse", "FDK_sbrDecoder_sbr_whFactorsTable", "x264_coeff_token", "FDKaacEnc_huff_ctabscf", "DTLSv1_2_enc_data", "X9_62_PENTANOMIAL_it", "av_tea_size", "aBookPsIccTimeDecode", "DHparams_it", "x264_level_token", "v3_alt", "ff_hevc_decoder", "ff_fft_offsets_lut", "ASN1_OCTET_STRING_NDEF_it", "ff_vsrc_testsrc", "ff_vf_convolution", "CMS_CompressedData_it", "invCount", "EXTERN_ASMadd_hevc_qpel_s16_h3v3_8_neon", "EXTERN_ASMavg_hevc_qpel_s16_v1_8_neon", "x264_dct4_weight2_tab", "FDK_sbrDecoder_sbr_start_freq_40", "EXTERN_ASMavg_hevc_qpel_s8_h3v2_8_neon", "ff_vf_vignette", "PKCS7_ENCRYPT_it", "ff_af_channelmap", "ff_vf_drawbox", "x264_dct8_weight_tab", "ff_vf_overlay", "ff_rtmpte_protocol", "ff_cos_16384_fixed", "EXTERN_ASMtransform_16x16_add_neon_row_4", "ScaleFactorsFine", "ff_id3v2_4_metadata_conv", "default_pctx", "ff_cos_2048", "ff_af_flanger", "X509_ATTRIBUTE_it", "ff_sin_128", "EXTERN_ASMavg_hevc_qpel_s16_h2_8_neon", "PKCS8_PRIV_KEY_INFO_it", "POLICY_MAPPING_it", "EXTERN_ASMadd_hevc_epel_s4_hv_8_neon", "EXTERN_ASMput_hevc_qpel_s8_h3v1_8_neon", "ff_aac_scalefactor_code", "EXTERN_ASMavg_hevc_qpel_s32_h3_8_neon", "EXTERN_ASMavg_hevc_qpel_s32_h1v1_8_neon", "bookSbrEnvBalanceC11T", "ff_af_asplit", "ff_eac3_default_chmap", "FDKaacEnc_mTab_4_3Elc", "FDK_sbrDecoder_sbr_start_freq_64", "ff_asrc_anoisesrc", "EXTERN_ASMavg_hevc_qpel_s32_h1_8_neon", "channelMappingTableWAV", "p_FDKaacEnc_24000_short_128", "ff_dither_2x2_4", "bookSbrEnvBalanceC10F", "ff_mp3on4_decoder", "ff_vf_lut", "EXTERN_ASMadd_hevc_qpel_s32_h1v3_8_neon", "ff_dither_4x4_16", "tns_max_bands_tbl_512", "ff_hevc_epel_filters", "p2_13_20", "ff_h264_mb_sizes", "AUTHORITY_KEYID_it", "SineWindow128", "PKCS7_ATTR_VERIFY_it", "ff_af_ashowinfo", "ff_vf_metadata", "ff_vf_codecview", "TLSv1_enc_data", "eckey_asn1_meth", "ff_vf_alphaextract", "x264_total_zeros_2x4_dc", "OCSP_RESPDATA_it", "ff_id3v2_picture_types", "EXTERN_ASMput_hevc_qpel_s32_h1v3_8_neon", "ff_aac_eld_window_512_fixed", "ff_ac3_slow_decay_tab", "aCbPriority", "aaFractDelayPhaseFactorReQmf", "ff_rtmps_protocol", "EXTERN_ASMavg_hevc_qpel_s16_pixels_8_neon", "CAST_S_table3", "EXTERN_ASMput_hevc_qpel_s8_h2v2_8_neon", "AES_version", "EXTERN_ASMput_hevc_epel_s16_v_8_neon", "delayIndexQmf", "ff_hevc_profiles", "ff_vf_trim", "ff_sin_64", "ff_cos_128_fixed", "ff_dither_8x8_32", "qmf_phaseshift_cos32", "ff_vf_fps", "EXTERN_ASMavg_hevc_qpel_s8_v2_8_neon", "v3_key_usage", "RC4_version", "ff_tns_max_bands_1024", "ff_img_tags", "ff_sine_512_fixed", "ff_sqrt_tab", "CMS_KEKIdentifier_it", "rgb15tobgr24", "FDKaacEnc_tnsEncCoeff4", "ff_mpa_alloc_tables", "ff_vf_lutrgb", "CMS_RecipientKeyIdentifier_it", "ff_vsrc_rgbtestsrc", "X509_ALGOR_it", "v3_ext_ku", "FDKaacDec_tnsCoeff3", "EXTERN_ASMavg_hevc_qpel_s8_h2v2_8_neon", "ASN1_ANY_it", "PBEPARAM_it", "ff_vf_crop", "ff_live_flv_demuxer", "x264_cache_mvd_func_table", "FDKaacEnc_huff_ctab6", "ff_af_atrim", "aHuffTable", "EXTERN_ASMadd_hevc_qpel_s16_v3_8_neon", "aAllpassLinkDelaySer", "BitMask", "CMS_KeyAgreeRecipientInfo_it", "DSAparams_it", "ff_af_aresample", "ff_avf_avectorscope", "ff_vsrc_allyuv", "obj_cleanup_defer", "ff_sin_16384", "ff_vf_psnr", "aAllpassLinkDecaySer", "ff_af_asetnsamples", "FDKaacEnc_huff_ctab5", "ff_vf_histogram", "qmf_phaseshift_sin32_cldfb", "x264_run_before", "ff_riff_info_conv", "CMS_SharedInfo_it", "ff_sin_512", "x264_weight_none", "ff_hevc_qpel_filters", "val", "av_cast5_size", "FDKaacEnc_huff_ltab3_4", "tls1_version_str", "EXTERN_ASMput_hevc_qpel_s8_h2_8_neon", "ff_inverse", "ff_asink_anullsink", "ff_avf_showspectrumpic", "X9_62_FIELDID_it", "CAST_S_table0", "ASN1_UNIVERSALSTRING_it", "ff_mpegaudio_parser", "CMS_Receipt_it", "ff_tns_max_bands_128", "ff_af_ametadata", "ff_vf_pad", "FDK_sbrDecoder_sbr_whFactorsIndex", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10F", "Alphas", "ff_se_golomb_vlc_code", "RotVectorImag480", "ff_vf_select", "EXTERN_ASMadd_hevc_qpel_s32_h2v1_8_neon", "ff_mp4_muxer", "aaFractDelayPhaseFactorImQmf", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10T", "EXTERN_ASMavg_hevc_qpel_s32_v1_8_neon", "ff_af_bass", "EXTERN_ASMtransform_16x16_add_neon_row", "EXTERN_ASMput_hevc_qpel_s32_h3v1_8_neon", "ff_af_join", "openssl_mutexes", "rgb24tobgr16", "EXTERN_ASMput_hevc_qpel_s8_v2_8_neon", "av_sha_size", "PROXY_CERT_INFO_EXTENSION_it", "ff_aac_eld_window_480", "TXT_DB_version", "ff_af_atempo", "ff_aac_num_swb_128", "SSLv3_enc_data", "x264_coeff_flag_offset_chroma_422_dc", "ASN1_version", "OCSP_REQINFO_it", "ff_vf_format", "ff_https_protocol", "ff_mov_muxer", "x264_count_cat_m1", "x264_iter_kludge", "EXTERN_ASMadd_hevc_qpel_s16_h3v2_8_neon", "EXTERN_ASMput_hevc_qpel_s8_h2v3_8_neon", "OCSP_RESPBYTES_it", "qmf_phaseshift_sin_downsamp32", "CMS_CertificateChoices_it", "EXTERN_ASMavg_hevc_qpel_s32_h3v3_8_neon", "EXTERN_ASMavg_hevc_qpel_s8_h1v1_8_neon", "EXTERN_ASMadd_hevc_qpel_s8_v3_8_neon", "sfbOffsetTables", "ff_vf_settb", "ff_vsrc_testsrc2", "ff_h264_profiles", "bookSbrEnvBalanceL10F", "ff_ac3_sample_rate_tab", "ASN1_BOOLEAN_it", "ff_pcm_s16le_decoder", "ff_vf_perms", "FDK_sbrDecoder_aFixNoEnvDecode", "ff_vf_dctdnoiz", "ff_sine_2048_fixed", "EXTERN_ASMadd_hevc_qpel_s8_h1v3_8_neon", "ff_vf_ssim", "ff_cos_65536_fixed", "SineTable480", "ff_af_compensationdelay", "ff_vf_chromakey", "rgb16tobgr24", "vu9_to_vu12", "ff_vf_rotate", "PKCS7_SIGNER_INFO_it", "EXTERN_ASMtransform_skip_neon", "PKCS12_SAFEBAG_it", "yv12toyuy2", "EXTERN_ASMput_hevc_qpel_s16_h2v2_8_neon", "BASIC_CONSTRAINTS_it", "X509_EXTENSION_it", "EXTERN_ASMadd_hevc_epel_s4_pixels_8_neon", "ff_hls_demuxer", "NETSCAPE_SPKI_it", "ff_af_apulsator", "FDKaacEnc_huff_ctab2", "FDKaacEnc_tnsCoeff3Borders", "EC_PRIVATEKEY_it", "ff_af_dcshift", "IDEA_version", "x264_coeff0_token", "EXTERN_ASMavg_hevc_qpel_s8_v1_8_neon", "ff_af_asendcmd", "ff_vf_noformat", "v_Huff_envelopeLevelL10F", "ff_af_aecho", "EXTERN_ASMavg_hevc_qpel_s8_h1v3_8_neon", "GENERAL_NAME_it", "ff_vf_scale2ref", "OCSP_ONEREQ_it", "v3_delta_crl", "x264_cabac_transition_unary", "ff_sine_windows_fixed", "POLICY_MAPPINGS_it", "dsa_pub_internal_it", "ff_h264_parser", "FDKSEEK_END", "p_FDKaacEnc_48000_short_128", "PKCS7_DIGEST_it", "FDK_sbrDecoder_sbr_limiterBandsPerOctaveDiv4", "STACK_version", "ff_jpeg2000_profiles", "v3_crl_reason", "FDK_sbrDecoder_envelopeTable_8", "ff_af_astreamselect", "DNS_TIMEOUT", "avpriv_mpa_freq_tab", "EXTERN_ASMput_hevc_qpel_s16_pixels_8_neon", "EXTERN_ASMput_hevc_qpel_s32_v1_8_neon", "ff_vf_telecine", "EXTERN_ASMtransform_4x4_add_neon", "EXTERN_ASMff_mc_weight_bi_4_neon", "EXTERN_ASMadd_hevc_epel_s4_h_8_neon", "EXTERN_ASMadd_hevc_epel_s16_h_8_neon", "ASN1_PRINTABLE_it", "CMS_EncryptedData_it", "v3_nscert", "ff_aac_kbd_long_1024_fixed", "ff_vf_maskedmerge", "SXNETID_it", "CMS_RecipientEncryptedKey_it", "ff_af_aperms", "yvu9_to_yuy2", "X509_CERT_AUX_it", "EXTERN_ASMput_hevc_qpel_s16_h1v1_8_neon", "ff_vf_erosion", "ff_file_protocol", "FDKaacEnc_huff_ltab1_2", "USERNOTICE_it", "FDKaacEnc_huff_ctab9", "v3_sxnet", "ff_vf_w3fdif", "FDK_sbrDecoder_aNoIidBins", "ff_vf_vflip", "_shadow_DES_check_key", "ff_vf_selectivecolor", "ff_tls_openssl_protocol", "ff_sine_1024", "EXTERN_ASMavg_hevc_epel_s4_hv_8_neon", "EXTERN_ASMavg_hevc_epel_s4_v_8_neon", "POLICY_CONSTRAINTS_it", "ff_libx264rgb_encoder", "ff_cos_1024", "ff_cos_32_fixed", "EXTERN_ASMput_hevc_epel_s8_pixels_8_neon", "x264_cabac_entropy", "ff_vp9_profiles", "GENERAL_SUBTREE_it", "ff_rtmpt_protocol", "EXTERN_ASMavg_hevc_qpel_s32_h2_8_neon", "X509_CRL_it", "ff_vf_setsar", "x264_last_coeff_flag_offset", "rgb15to16", "EXTERN_ASMavg_hevc_qpel_s8_h2v1_8_neon", "p_FDKaacEnc_48000_long_1024", "ff_ac3_channels_tab", "ff_vf_scale", "EXTERN_ASMput_hevc_qpel_s8_v1_8_neon", "EXTERN_ASMavg_hevc_qpel_s16_h2v1_8_neon", "rgb16to32", "EXTERN_ASMput_hevc_epel_s8_hv_8_neon", "ff_codec_movaudio_tags", "EXTERN_ASMput_hevc_qpel_s32_h1v2_8_neon", "ff_vf_zoompan", "x264_significant_coeff_flag_offset", "EXTERN_ASMavg_hevc_qpel_s8_h1v2_8_neon", "bookSbrEnvBalanceC11F", "RotVectorReal480", "LowDelaySynthesis480", "FDKaacEnc_sideInfoTabLong", "EXTERN_ASMtransform_4x4_add_00", "p_FDKaacEnc_8000_short_128", "EXTERN_ASMavg_hevc_qpel_s8_h3v1_8_neon", "EXTERN_ASMavg_hevc_qpel_s32_h2v1_8_neon", "qmf_phaseshift_sin32", "x264_hpel_ref1", "FDKaacEnc_huff_ctab1", "ff_aac_profiles", "v3_info", "ff_vsrc_cellauto", "RotVectorImag60", "aDimCb", "ff_aac_eld_window_480_fixed", "CMS_KeyTransRecipientInfo_it", "ff_vf_blackdetect", "EXTERN_ASMavg_hevc_qpel_s8_h2v3_8_neon", "FDKaacDec_tnsCoeff4", "aCodebook2StartInt", "x264_dct4_weight_tab", "ff_vf_mergeplanes", "ff_af_pan", "CMS_ReceiptRequest_it", "x264_cabac_contexts", "p_FDKaacEnc_96000_short_128", "ff_af_acrossfade", "EXTERN_ASMadd_hevc_qpel_s32_h2v3_8_neon", "ff_cos_tabs_fixed", "FDKaacEnc_huff_ctab11", "v3_ocsp_accresp", "ff_af_alimiter", "TLSv1_2_enc_data", "EDIPARTYNAME_it", "EXTERN_ASMadd_hevc_qpel_s8_h2v3_8_neon", "CMS_ContentInfo_it", "ff_ac3_bitrate_tab", "RAND_version", "KBDWindow960", "EXTERN_ASMadd_hevc_qpel_s32_v3_8_neon", "EXTERN_ASMadd_hevc_epel_s8_h_8_neon", "rgb32to15", "sin_twiddle_L64", "ff_cos_32768", "ff_mp3_decoder", "ASN1_UTCTIME_it", "ff_avf_concat", "v3_ocsp_acutoff", "CAST_S_table7", "X509_ATTRIBUTE_SET_it", "ff_network_inited_globally", "ff_af_equalizer", "ff_swb_offset_128", "FDK_sbrDecoder_sbr_smoothFilter", "aMaxOfCbPair", "ff_vf_drawgrid", "ff_vf_deflate", "DIST_POINT_NAME_it", "ff_square_tab", "ff_cos_16", "ff_hevc_diag_scan8x8_y", "ff_af_bandpass", "AACcodeBookDescriptionTable", "DTLSv1_enc_data", "CMS_RevocationInfoChoice_it", "ff_vf_vstack", "v_Huff_envelopeLevelL11T", "FDKaacEnc_huff_ltab5_6", "av_md5_size", "ff_ac3_bap_tab", "ASN1_BIT_STRING_it", "EXTERN_ASMavg_hevc_qpel_s32_h3v1_8_neon", "ff_vf_shuffleplanes", "ff_hls_protocol", "av_tree_node_size", "X509_REQ_INFO_it", "qmf_phaseshift_cos64_cldfb", "OCSP_CERTID_it", "EXTERN_ASMavg_hevc_qpel_s8_h2_8_neon", "FDK_sbrDecoder_sbr_start_freq_32", "ASN1_BMPSTRING_it", "ASN1_OCTET_STRING_it", "EXTERN_ASMput_hevc_qpel_s8_h3v2_8_neon", "PROXY_POLICY_it", "CMS_PasswordRecipientInfo_it", "v_Huff_envelopeLevelC11T", "quantizedIIDsFine", "qmf_64", "OCSP_SIGNATURE_it", "ff_avf_showvolume", "CAST_S_table6", "x264_levels", "EXTERN_ASMput_hevc_qpel_s32_h1_8_neon", "X509_SIG_it", "X509_VAL_it", "EXTERN_ASMavg_hevc_epel_s16_hv_8_neon", "p_FDKaacEnc_88200_short_128", "ff_vf_framepack", "ff_id3v2_mime_tags", "ff_sine_1024_fixed", "rgb32to16", "CBIGNUM_it", "EXTERN_ASMput_hevc_qpel_s8_v3_8_neon", "OCSP_CERTSTATUS_it", "ff_hevc_qpel_filtersT", "EXTERN_ASMadd_hevc_qpel_s8_h3v2_8_neon", "ff_dither_8x8_128", "FDK_sbrDecoder_sbr_limGains_m", "ff_cos_1024_fixed", "ff_cos_2048_fixed", "ff_vf_showpalette", "ff_dither_8x8_220", "p_FDKaacEnc_22050_long_1024", "p_FDKaacEnc_24000_long_1024", "ff_cos_128", "EXTERN_ASMavg_hevc_qpel_s32_pixels_8_neon", "CAST_S_table2", "EXTERN_ASMavg_hevc_qpel_s16_h2v2_8_neon", "ff_mpa_quant_bits", "EXTENDED_KEY_USAGE_it", "ff_ac3_hearing_threshold_tab", "bins2groupMap20", "ff_vsrc_smptehdbars", "EXTERN_ASMavg_hevc_qpel_s32_h1v3_8_neon", "yuv422ptouyvy", "EXTERN_ASMadd_hevc_qpel_s16_h3_8_neon", "EXTERN_ASMadd_hevc_qpel_s32_h3_8_neon", "ff_interleaved_se_golomb_vlc_code", "ff_vf_colorbalance", "aaFractDelayPhaseFactorSerImSubQmf20", "ff_swb_offset_480", "FDKaacEnc_quantTableE", "FDK_sbrDecoder_sbr_frame_info2_15", "ff_af_compand", "ff_vf_fieldmatch", "EXTERN_ASMtransform_32x32_add_neon_row_8", "CMS_EncapsulatedContentInfo_it", "ff_af_silencedetect", "ff_sine_8192_fixed", "ff_mpa_synth_window_float", "ff_h264_decoder", "EXTERN_ASMavg_hevc_qpel_s16_h1v2_8_neon", "ff_sbr_noise_table", "aBookPsIidFreqDecode", "ff_asrc_sine", "ssl3_ciphers", "ff_mpeg4audio_channels", "InverseQuantTable", "ff_avsrc_movie", "ff_af_volume", "EXTERN_ASMavg_hevc_qpel_s8_h3v3_8_neon", "x509_name_ff", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11T", "av_aes_size", "groupBorders20", "ff_cos_16384", "OCSP_BASICRESP_it", "PKCS12_MAC_DATA_it", "ff_vsink_buffer", "ff_vf_idet", "rgb15to32", "avpriv_pix_fmt_bps_avi", "chroma_coef", "ff_af_biquad", "v3_sinfo", "EXTERN_ASMtransform_8x32_add_00", "cmac_asn1_meth", "x264_cabac_renorm_shift", "CMS_Attributes_Sign_it", "rgb32tobgr24", "EXTERN_ASMadd_hevc_qpel_s32_h2_8_neon", "SXNET_it", "ff_af_asettb", "X509_CERT_PAIR_it", "ECDH_version", "x264_cache_ref_func_table", "ff_ac3_frame_size_tab", "EXTERN_ASMput_hevc_epel_s16_hv_8_neon", "ff_cos_tabs", "PKCS7_ATTR_SIGN_it", "ff_af_chorus", "ff_vf_extractplanes", "ff_mov_demuxer", "PKCS7_ENC_CONTENT_it", "EXTERN_ASMput_hevc_qpel_s16_h2_8_neon", "bookSbrEnvBalanceL11F", "decayScaleFactTable", "CMS_OtherRevocationInfoFormat_it", "ff_h264_chroma_qp", "EXTERN_ASMavg_hevc_qpel_s32_v2_8_neon", "ff_af_lowpass", "NETSCAPE_CERT_SEQUENCE_it", "DES_SPtrans", "ff_af_ainterleave", "EXTERN_ASMavg_hevc_epel_s4_h_8_neon", "ff_hevc_diag_scan4x4_y", "FDK_sbrDecoder_sbr_randomPhase", "v3_idp", "ff_yuv2rgb_coeffs", "EXTERN_ASMput_hevc_qpel_s8_h1v1_8_neon", "ff_aac_latm_decoder", "ff_vf_alphamerge", "rand_ssleay_meth", "EXTERN_ASMavg_hevc_epel_s8_pixels_8_neon", "ff_tcp_protocol", "FDKSEEK_CUR", "FDK_sbrDecoder_sbr_start_freq_16", "EXTERN_ASMput_hevc_qpel_s32_pixels_8_neon", "EXTERN_ASMadd_hevc_qpel_s16_v1_8_neon", "ASN1_VISIBLESTRING_it", "ff_mp4_obj_type", "KBDWindow1024", "X509_NAME_INTERNAL_it", "ff_af_asetrate", "ff_m4v_demuxer", "FDKaacEnc_sideInfoTabShort", "rgb16to15", "lh_version", "FDKaacEnc_tnsEncCoeff3", "ff_ac3_window", "ff_af_volumedetect", "v_Huff_NoiseLevelC11T", "EXTERN_ASMput_hevc_qpel_s32_h3v3_8_neon", "v3_freshest_crl", "FDKaacEnc_huff_ctab10", "ff_ac3_enc_channel_map", "p_FDKaacEnc_8000_long_1024", "ff_cos_8192", "shuffle_bytes_0321", "ff_vf_drawgraph", "EXTERN_ASMput_hevc_qpel_s32_h2v3_8_neon", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11F", "ff_dither_8x8_73", "CAMELLIA_version", "ff_vf_dilation", "FDK_sbrDecoder_sbr_limGains_e", "EXTERN_ASMavg_hevc_qpel_s8_pixels_8_neon", "FDKaacEnc_huff_ctab8", "POLICYINFO_it", "EXTERN_ASMtransform_8x8_add_neon", "avpriv_ac3_channel_layout_tab", "FDKaacEnc_huff_ctab4", "EXTERN_ASMadd_hevc_qpel_s16_pixels_8_neon", "ff_reverse", "KBDWindow120", "AACcodeBookDescriptionSCL", "ff_vsrc_nullsrc", "BN_version", "p_FDKaacEnc_16000_long_1024", "aaFractDelayPhaseFactorSerReQmf", "ff_vsink_nullsink", "CMS_EncryptedContentInfo_it", "EXTERN_ASMadd_hevc_qpel_s32_h2v2_8_neon", "qmf_cldfb_640", "ff_af_adelay", "FDKaacEnc_mTab_3_4", "x509_dir_lookup", "x264_cpu_names", "OCSP_CRLID_it", "avpriv_mpa_bitrate_tab", "ff_sine_2048", "v3_policy_mappings", "X509_REVOKED_it", "ff_sine_64_fixed", "ff_ac3_db_per_bit_tab", "ASN1_TBOOLEAN_it", "ff_cos_512", "ff_tns_max_bands_512", "EXTERN_ASMput_hevc_qpel_s32_h3_8_neon", "EXTERN_ASMput_hevc_qpel_s32_h2_8_neon", "ff_sin_32768", "EXTERN_ASMadd_hevc_qpel_s8_pixels_8_neon", "PEM_version", "av_filter_ffversion", "yuyvtoyuv420", "ff_vf_inflate", "ff_vf_hflip", "av_sha512_size", "FDK_sbrDecoder_sbr_frame_info2_16", "ff_zigzag_direct", "bookSbrEnvBalanceC10T", "CERTIFICATEPOLICIES_it", "ff_vf_qp", "PKCS7_RECIP_INFO_it", "FDK_sbrDecoder_sbr_start_freq_22", "FDKaacEnc_huff_ltab11", "ff_sin_2048", "ff_vsrc_allrgb", "SineTable512", "EXTERN_ASMput_hevc_qpel_s32_h3v2_8_neon", "qmf_phaseshift_sin64", "ff_af_silenceremove", "ScaleFactors", "PKCS12_SAFEBAGS_it", "ff_sin_256", "bookSbrEnvBalanceL10T", "EXTERN_ASMavg_hevc_qpel_s16_h3v3_8_neon", "ff_sine_32", "v_Huff_envelopeLevelL11F", "EXTERN_ASMadd_hevc_qpel_s16_h3v1_8_neon", "ff_avf_showwaves", "FDK_sbrDecoder_envelopeTable_15", "hmac_asn1_meth", "RC2_version", "x264_bit_depth", "ff_aac_adtstoasc_bsf", "ff_sine_128_fixed", "EXTERN_ASMput_hevc_qpel_s16_v3_8_neon", "ff_sws_context_class", "ECPKPARAMETERS_it", "rgb32tobgr15", "qmf_cldfb_320", "ff_aac_codebook_vector_idx", "ff_af_aemphasis", "ff_codec_movsubtitle_tags", "PKCS12_AUTHSAFES_it", "ASN1_FBOOLEAN_it", "DIRECTORYSTRING_it", "ff_avsrc_amovie", "ff_vf_curves", "ff_vf_lutyuv", "yuy2toyv12", "aMinOfCbPair", "ff_vf_decimate", "ff_sin_16", "EXTERN_ASMavg_hevc_qpel_s16_h3v1_8_neon", "LowDelaySynthesis512", "ff_vsrc_buffer", "ff_af_asetpts", "ff_ac3_log_add_tab", "x264_log2_lut", "aBookPsIidTimeDecode", "dh_pkey_meth", "dh_asn1_meth", "ff_vf_fieldorder", "ASN1_PRINTABLESTRING_it", "EXTERN_ASMavg_hevc_qpel_s16_h3_8_neon", "EXTERN_ASMadd_hevc_qpel_s32_h1v2_8_neon", "ff_vf_removegrain", "ff_aac_kbd_short_128_fixed", "CAST_S_table4", "CRL_DIST_POINTS_it", "FDKaacEnc_huff_ctab7", "ACCESS_DESCRIPTION_it", "ff_h264_cabac_tables", "ff_rtmpts_protocol", "ZLONG_it", "FDK_sbrDecoder_sbr_huffBook_NoiseLevel11T", "ff_vf_paletteuse", "ff_w_tab_sr", "ff_af_stereowiden", "ff_hevc_demuxer", "ff_sine_8192", "ff_aac_scalefactor_bits", "PBE2PARAM_it", "PKCS7_SIGN_ENVELOPE_it", "ff_af_aeval", "EXTERN_ASMtransform_8x8_add_44_neon", "p_FDKaacEnc_44100_short_128", "ff_add_pixels_clamped", "SineWindow1024", "CMS_ReceiptsFrom_it", "EXTERN_ASMadd_hevc_qpel_s8_h2v1_8_neon", "aBookPsIccFreqDecode", "EXTERN_ASMput_hevc_qpel_s32_v2_8_neon", "FDK_sbrDecoder_sbr_start_freq_88", "bookSbrEnvBalanceL11T", "PKEY_USAGE_PERIOD_it", "DSA_SIG_it", "ff_vf_hue", "ff_aac_decoder", "bookSbrNoiseBalanceL11T", "p_FDKaacEnc_11025_short_128", "ff_vsrc_life", "EXTERN_ASMput_hevc_qpel_s16_h3v2_8_neon", "ff_vf_lut3d", "ff_sine_64", "ff_cos_64_fixed", "x264_log2_lz_lut", "ff_golomb_vlc_len", "ff_af_aphaser", "ff_dca_profiles", "x264_significant_coeff_flag_offset_8x8", "ff_af_allpass", "ff_vf_transpose", "ssl3_version_str", "ff_sine_windows", "rgb24tobgr15", "uyvytoyuv422", "EXTERN_ASMavg_hevc_qpel_s16_h1_8_neon", "ff_avf_showspectrum", "EXTERN_ASMavg_hevc_qpel_s16_h3v2_8_neon", "ff_aac_codebook_vectors", "EXTERN_ASMadd_hevc_qpel_s8_h2_8_neon", "EXTERN_ASMff_mc_weight_bi_8_neon", "x264_total_zeros_2x2_dc", "ff_vf_lenscorrection", "ff_ac3_fast_gain_tab", "EXTERN_ASMtransform_32x32_add_neon_row", "ff_id3v2_4_tags", "EXTERN_ASMavg_hevc_qpel_s16_h1v1_8_neon", "avfilter_all_channel_layouts", "ASN1_TIME_it", "sbrTuningTable", "EXTERN_ASMadd_hevc_qpel_s32_h3v2_8_neon", "EXTERN_ASMadd_hevc_qpel_s8_h2v2_8_neon", "v_Huff_NoiseLevelL11T", "EXTERN_ASMput_hevc_qpel_s32_v3_8_neon", "EXTERN_ASMavg_hevc_epel_s16_pixels_8_neon", "X509_CRL_INFO_it", "FDK_sbrDecoder_sbr_huffBook_NoiseBalance11T", "ff_vc1_profiles", "p_FDKaacEnc_12000_long_1024", "rgb32tobgr16", "v3_cpols", "yuv422ptoyuy2", "ff_af_afifo", "ff_cos_512_fixed", "av_util_ffversion", "ff_sine_512", "ELDAnalysis512", "PKCS12_it", "CMS_OtherKeyAttribute_it", "ff_log2_run", "EXTERN_ASMavg_hevc_epel_s8_hv_8_neon", "tns_max_bands_tbl", "ff_af_arealtime", "ff_mdct_win_float", "v3_crl_num", "x264_exp2_lut", "EXTERN_ASMput_hevc_epel_s4_hv_8_neon", "EXTERN_ASMavg_hevc_qpel_s8_v3_8_neon", "v3_pkey_usage_period", "bookSbrNoiseBalanceC11T", "ff_aac_num_swb_480", "ff_hevc_epel_filtersT", "aaFractDelayPhaseFactorSerImQmf", "ec_pkey_meth", "v3_crl_hold", "EXTERN_ASMadd_hevc_qpel_s8_h3v3_8_neon", "x264_hpel_ref0", "aMaxCwLen", "FDKaacEnc_huff_ctab3", "POLICYQUALINFO_it", "windowSlopes", "ff_vf_interleave", "EXTERN_ASMavg_hevc_qpel_s32_v3_8_neon", "ASN1_IA5STRING_it", "ff_vf_fifo", "EXTERN_ASMadd_hevc_epel_s8_hv_8_neon", "ff_raw_pix_fmt_tags", "ECDSA_version", "ff_aac_num_swb_1024", "p_FDKaacEnc_32000_long_1024", "ff_asrc_abuffer", "rsa_pkey_meth", "ff_vf_atadenoise", "ff_rtmpe_protocol", "ff_sin_8192", "FDK_sbrDecoder_sbr_start_freq_48", "CMS_Attributes_Verify_it", "EXTERN_ASMadd_hevc_epel_s8_v_8_neon", "EXTERN_ASMavg_hevc_qpel_s32_h2v2_8_neon", "x264_cabac_size_unary", "RotVectorReal60", "EXTERN_ASMavg_hevc_qpel_s32_h1v2_8_neon", "X509_REQ_it", "ff_vsrc_mandelbrot", "qmf_phaseshift_cos64", "CMS_RecipientInfo_it", "cmac_pkey_meth", "av_twofish_size", "EXTERN_ASMtransform_32x32_add_neon_row_16", "aStateConstant2State", "EXTERN_ASMput_hevc_qpel_s8_h3v3_8_neon", "ff_vf_tblend", "ff_af_tremolo", "av_codec_ffversion", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11T", "DSAPrivateKey_it", "EXTERN_ASMadd_hevc_qpel_s8_h1v2_8_neon", "ff_cos_65536", "EXTERN_ASMadd_hevc_qpel_s32_h1_8_neon", "EXTERN_ASMavg_hevc_qpel_s32_h3v2_8_neon", "SHA_version", "CMS_OriginatorIdentifierOrKey_it", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11F", "EXTERN_ASMtransform_8x8_add_00", "p_FDKaacEnc_11025_long_1024", "ff_vf_field", "v3_skey_id", "ff_sine_256", "v3_policy_constraints", "ff_vsrc_color", "EXTERN_ASMadd_hevc_qpel_s16_h1v3_8_neon", "ff_interleaved_golomb_vlc_len", "ff_vf_waveform", "LONG_it", "EXTERN_ASMavg_hevc_qpel_s8_h3_8_neon", "OCSP_RESPID_it", "dsa_asn1_meths", "ff_vf_colorkey", "FDKaacEnc_specExpTableComb", "qmf_phaseshift_cos32_cldfb", "FDK_sbrDecoder_invTable", "swr_ffversion", "x264_dct8_weight2_tab", "DHxparams_it", "CMS_SignerInfo_it", "ff_vf_setdar", "ff_vf_xbr", "CMS_DigestedData_it", "EC_version", "EXTERN_ASMput_hevc_qpel_s32_h2v2_8_neon", "X509_CINF_it", "ff_af_afftfilt", "p_FDKaacEnc_64000_short_128", "SineWindow480", "ff_swb_offset_512", "channelMappingTablePassthrough", "RotVectorImag240", "EXTERN_ASMadd_hevc_epel_s16_pixels_8_neon", "OCSP_RESPONSE_it", "ff_cos_32768_fixed", "ff_sin_1024", "ff_mp3float_decoder", "EXTERN_ASMavg_hevc_qpel_s16_h1v3_8_neon", "ff_id3v1_genre_str", "p_FDKaacEnc_64000_long_1024", "BIGNUM_it", "EXTERN_ASMadd_hevc_qpel_s16_h2v2_8_neon", "X509_NAME_ENTRIES_it", "TLSv1_1_enc_data", "quantizedIIDs", "ff_af_aformat", "ff_aac_pow34sf_tab", "EXTERN_ASMput_hevc_epel_s4_v_8_neon", "ff_mp3adu_decoder", "rgb24to15", "ASN1_ENUMERATED_it", "RMD160_version", "sqrt_tab", "FDKaacEnc_specExpMantTableCombElc", "CAST_S_table1", "ff_crop_tab", "ff_avf_showfreqs", "planar2x", "ff_vf_random", "MD5_version", "ff_vf_negate", "v3_ocsp_crlid", "ff_mpa_enwindow", "aaFractDelayPhaseFactorSerReSubQmf20", "ECPARAMETERS_it", "ff_sine_32_fixed", "qmf_phaseshift_sin64_cldfb", "CMS_AuthenticatedData_it", "FDKaacEnc_quantTableQ", "PKCS7_SIGNED_it", "ff_libx264_encoder", "ff_avf_aphasemeter", "ff_vf_swaprect", "X9_62_CHARACTERISTIC_TWO_it", "ff_vf_gradfun", "x264_cabac_transition", "FDK_sbrDecoder_sbr_start_freq_24", "tmptmp1", "ff_vf_showinfo", "NETSCAPE_SPKAC_it", "ff_ac3_floor_tab", "ff_tns_max_bands_480", "ISSUING_DIST_POINT_it", "ff_vf_signalstats", "EXTERN_ASMtransform_16x16_add_neon_col", "ASN1_OBJECT_it", "RSA_OAEP_PARAMS_it", "ff_sin_65536", "randomSign", "ffurl_context_class", "aSignCb", "EXTERN_ASMput_hevc_qpel_s16_h3v3_8_neon", "GENERAL_NAMES_it", "CONF_version", "ASN1_INTEGER_it", "ff_vaf_spectrumsynth", "SineWindow512", "SHA1_version", "v3_ocsp_nocheck", "x509_file_lookup", "X509_EXTENSIONS_it", "ff_ac3_dec_channel_map", "ff_mpa_quant_steps", "ff_avf_showwavespic", "EXTERN_ASMadd_hevc_qpel_s32_v2_8_neon", "EXTERN_ASMput_hevc_qpel_s16_h2v3_8_neon", "RSAPublicKey_it", "v_Huff_envelopeLevelL10T", "ff_vf_shuffleframes", "EXTERN_ASMadd_hevc_qpel_s16_h1_8_neon", "dtls1_version_str", "ff_vf_fade", "X509_PUBKEY_it", "ff_rawvideo_options", "sig_app", "X9_62_CURVE_it", "deinterleaveBytes", "rgb24tobgr32", "ff_af_extrastereo", "v3_ct_scts", "ASN1_SEQUENCE_ANY_it", "CMS_OtherCertificateFormat_it", "ff_af_amerge", "ff_vf_displace"], "importedglobals": ["__sF"], "importedfunctions": ["ldexp", "expf", "localtime_r", "pthread_mutex_init", "strerror_r", "pthread_create", "fcntl", "malloc", "gettimeofday", "fflush", "atoi", "strtok_r", "calloc", "rint", "strtoll", "sysconf", "cbrtf", "strtok", "fdopen", "sqrt", "sprintf", "sscanf", "log10", "mktime", "posix_memalign", "close", "nanosleep", "dlclose", "memset", "fputc", "rename", "vsnprintf", "lrint", "__isinf", "dlsym", "round", "__assert2", "inflateInit_", "fread", "floorf", "isxdigit", "strcasecmp", "raise", "pthread_cond_broadcast", "strpbrk", "log", "exp2", "memcmp", "getuid", "__isfinite", "pthread_cond_wait", "ftello", "poll", "powf", "erf", "inflateInit2_", "ceil", "bsd_signal", "realloc", "strcspn", "memmove", "fgets", "fseek", "access", "connect", "sin", "fopen", "pthread_mutex_unlock", "strcmp", "gmtime_r", "cbrt", "bind", "strlen", "strncpy", "accept", "closedir", "munmap", "gai_strerror", "inflateEnd", "strcpy", "modf", "readdir", "strncasecmp", "vsprintf", "sinh", "isnanf", "getaddrinfo", "uncompress", "atan", "trunc", "frexp", "fabs", "mkstemp", "ftell", "floor", "abort", "pthread_join", "tan", "strncmp", "inflate", "fseeko", "pthread_mutex_lock", "vprintf", "getc", "socket", "open", "free", "pthread_cond_destroy", "acos", "snprintf", "fstat", "fputs", "memchr", "stat", "dlopen", "arc4random", "inet_ntop", "sigsetjmp", "getpeername", "unlink", "pthread_mutex_destroy", "zlibCompileFlags", "isatty", "strrchr", "memcpy", "isspace", "strdup", "getsockopt", "cos", "read", "mmap", "getpid", "strcat", "vfprintf", "tanh", "llrint", "pthread_once", "lstat", "memalign", "llrintf", "printf", "listen", "fclose", "cosf", "atan2f", "lrintf", "pow", "logf", "dlerror", "strftime", "strtol", "ceilf", "fwrite", "bsearch", "strchr", "strtoul", "asin", "lseek64", "send", "recv", "tolower", "atol", "hypot", "strstr", "siglongjmp", "atan2", "time", "atanf", "fmod", "opendir", "shutdown", "freeaddrinfo", "strtod", "write", "strspn", "exp", "getenv", "sigprocmask", "qsort", "pthread_cond_signal", "isupper", "sigaction", "sinf", "nice", "strerror", "setsockopt", "ioctl", "pthread_cond_init", "rmdir", "cosh", "fprintf", "__errno", "isalnum"], "exportedfunctions": ["X509_PUBKEY_set0_param", "EC_KEY_up_ref", "ASN1_UTCTIME_check", "ff_h264_decode_init_vlc", "EVP_PKEY_derive_init", "ff_mc_weight_bi_8_neon", "PEM_write_bio_DHparams", "CMS_SignerInfo_get0_signature", "transform_32x32_add_neon_row_8", "ff_hevc_put_pixels_w64_neon_8", "ff_init_desc_no_chr", "ssl3_get_client_certificate", "BIO_set_flags", "BIO_dup_chain", "EVP_bf_ofb", "X509_chain_check_suiteb", "_Z39GetRequiredMemRam_aacEnc_PsyInputBufferv", "__ledf2", "X509_LOOKUP_ctrl", "avio_wl16", "ff_h264_idct_dc_add_8_c", "av_xtea_init", "SSL_state_string", "SSL_get_ssl_method", "av_codec_get_seek_preroll", "ff_compute_frame_duration", "_Z26CConcealment_GetFadeFactorP16CConcealmentInfoi", "gcm_init_v8", "avg_hevc_qpel_s16_v1_8_neon", "BN_is_bit_set", "_Z17FDKaacEnc_psyInitP12PSY_INTERNALPP7PSY_OUTii17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPING", "X509V3_EXT_cleanup", "_Z29FDKaacEnc_CalcSfbMaxScaleSpecPKlPKiPii", "ff_amf_read_null", "add_hevc_epel_s8_hv_8_neon", "avfilter_free", "x264_predict_8x16c_v_c", "tbEncryptionInit", "OPENSSL_cleanse", "av_gettime_relative", "pqueue_print", "CMS_signed_add1_attr_by_OBJ", "BIO_indent", "EVP_PKEY_asn1_get0", "av_reduce", "av_mastering_display_metadata_create_side_data", "X509_ATTRIBUTE_create", "ffio_open_null_buf", "av_buffer_make_writable", "av_log_set_callback", "_Z30CAacDecoder_SignalInterruptionP20AAC_DECODER_INSTANCE", "DSO_new_method", "av_opt_set_pixel_fmt", "ASN1_STRING_TABLE_add", "CMS_get0_signers", "_Z3fftiPlPi", "ssl_add_clienthello_renegotiate_ext", "EVP_CIPHER_CTX_block_size", "_Z29FreeRam_aacEnc_PsyOutElementsPP15PSY_OUT_ELEMENT", "x264_cabac_encode_terminal_c", "_Z28FDKsbrEnc_frameInfoGeneratorP18SBR_ENVELOPE_FRAMEPhS1_iPKi", "ssl_cert_set_current", "av_timegm", "EC_POINTs_mul", "ssl3_send_cert_status", "ff_h264_luma_dc_dequant_idct_10_c", "av_write_trailer", "SSL_library_init", "SSL_set_connect_state", "pcmDmx_Open", "av_get_bytes_per_sample", "ENGINE_set_default_DH", "EVP_aes_128_cfb128", "ECPARAMETERS_new", "ec_GFp_mont_group_clear_finish", "ff_hevc_decode_nal_sps", "ff_yuv420p_to_bgra_neon_16", "d2i_ASN1_UINTEGER", "PKCS7_ISSUER_AND_SERIAL_digest", "ssl_get_new_session", "SRP_create_verifier_BN", "x264_predict_16x16_dc_c", "avg_hevc_qpel_s16_h2v1_8_neon", "X509_NAME_ENTRY_create_by_OBJ", "FDK_ResetBitBuffer", "RC4_options", "swri_dither_init", "ssl_parse_serverhello_renegotiate_ext", "d2i_ASN1_NULL", "ASN1_ENUMERATED_to_BN", "PEM_read_bio_RSAPrivateKey", "EVP_MD_CTX_clear_flags", "get_error_code", "DSA_generate_key", "_Z33GetRequiredMemRam_Sbr_quotaMatrixv", "_Z34GetRequiredMemRam_aacEnc_PsyStaticv", "av_filter_next", "ENGINE_get_pkey_meth_engine", "ff_h264dsp_init_arm", "ff_put_pixels8_y2_neon", "CRYPTO_set_mem_debug_functions", "EVP_sha256", "EC_KEY_set_asn1_flag", "put_hevc_qpel_s8_h2v3_8_neon", "ff_hevc_set_new_ref", "BUF_strdup", "av_pix_fmt_get_chroma_sub_sample", "ff_id3v2_parse_apic", "X509_STORE_set_default_paths", "ASN1_d2i_bio", "EC_POINT_set_to_infinity", "BN_RECP_CTX_init", "EVP_PKEY_CTX_set_data", "ec_GF2m_simple_field_mul", "_Z32transportDec_RegisterAscCallbackP12TRANSPORTDECPFiPvPK21CSAudioSpecificConfigES1_", "ff_mdct_fixed_calcw_neon", "ERR_peek_last_error_line_data", "EVP_PKEY_meth_get_decrypt", "ff_sws_init_range_convert", "ASN1_d2i_fp", "CRYPTO_get_mem_debug_functions", "ssl3_record_sequence_update", "d2i_ASN1_OCTET_STRING", "X509_CRL_get_ext", "CRYPTO_set_dynlock_create_callback", "av_dirac_parse_sequence_header", "X509_get_ext_by_OBJ", "av_dct_init", "PKCS12_new", "BN_GF2m_mod_exp_arr", "SSL_get_rfd", "ECDSA_size", "dtls1_retransmit_buffered_messages", "sha512_block_data_order", "c2i_ASN1_INTEGER", "avio_wb24", "RSA_padding_add_PKCS1_PSS_mgf1", "HMAC_Init_ex", "x264_encoder_parameters", "OCSP_RESPBYTES_free", "ff_ps_hybrid_analysis_neon", "ff_put_pixels16_x2_no_rnd_neon", "RSA_verify_ASN1_OCTET_STRING", "EVP_PKEY_decrypt", "x264_frame_push_blank_unused", "ff_mc_weight_8_neon", "NCONF_dump_bio", "d2i_PKCS8PrivateKey_bio", "EVP_CIPHER_CTX_nid", "ff_er_frame_end", "av_log_default_callback", "dtls1_shutdown", "ASN1_UNIVERSALSTRING_free", "i2d_ACCESS_DESCRIPTION", "UI_set_default_method", "EVP_aes_256_ecb", "ENGINE_set_name", "bsaes_xts_decrypt", "ssl3_release_read_buffer", "d2i_X509_CRL", "SSL_CTX_use_PrivateKey_ASN1", "av_dict_count", "EVP_PKEY_cmp_parameters", "_Z23adtsWrite_GetHeaderBitsP11STRUCT_ADTS", "_Z27FreeRam_Sbr_freqBandTableLOPPh", "EVP_rc2_ofb", "ff_hevc_put_qpel_uw_h2v2_neon_8", "v2i_GENERAL_NAME_ex", "X509_REQ_get_attr_by_OBJ", "avg_hevc_qpel_s8_h1_8_neon", "X509_verify", "ff_hevc_set_qPy", "ff_faanidct_add", "EC_GROUP_get_asn1_flag", "ff_replaygain_export_raw", "ec_GF2m_simple_field_div", "EC_POINT_set_affine_coordinates_GFp", "_Z31GetRequiredMemRam_aacEnc_PsyOutv", "pitem_new", "d2i_PKCS7_fp", "av_fft_end", "X509V3_get_section", "BIO_set_cipher", "ffio_open2_wrapper", "ff_h264_init_dequant_tables", "_Z30CLatmDemux_ReadStreamMuxConfigP13FDK_BITSTREAMP10CLatmDemuxP13CSTpCallBacksP21CSAudioSpecificConfigPi", "BN_reciprocal", "ff_avg_h264_chroma_mc4_neon", "ff_listen_connect", "_Z16fDivNormHighPrecllPi", "X509_NAME_get_index_by_NID", "ec_GFp_simple_point_copy", "_Z18FreeRam_SbrElementPP11SBR_ELEMENT", "av_buffer_pool_uninit", "ENGINE_set_default_pkey_meths", "X509V3_EXT_free", "av_buffersink_get_frame_flags", "ff_hevc_part_mode_decode", "ASN1_PCTX_set_str_flags", "av_guess_sample_aspect_ratio", "aacEncClose", "ECDSA_METHOD_set_name", "url_feof", "ECDSA_get_ex_data", "_Z32FDK_DRC_Generator_getCompProfileP8DRC_COMP", "ASN1_OCTET_STRING_dup", "ff_get_wav_header", "i2d_DIST_POINT", "av_strlcatf", "avcodec_align_dimensions2", "_Z18transportEnc_ClosePP12TRANSPORTENC", "ssl3_do_change_cipher_spec", "ff_hevc_frame_nb_refs", "sws_getDefaultFilter", "RSA_padding_check_PKCS1_OAEP_mgf1", "ssl23_put_cipher_by_char", "X509_get_default_cert_file", "dtls1_get_record", "_Z30FDKsbrEnc_InitTonCorrParamExtriP16SBR_TON_CORR_ESTP15SBR_CONFIG_DATAiiiiij", "FDKabs", "PEM_read_bio_PKCS8", "av_frame_alloc", "CONF_modules_unload", "av_bprint_chars", "EC_EX_DATA_get_data", "_Z22FDKaacEnc_lookUpPnsUseiiii", "EVP_sha384", "X509V3_EXT_print_fp", "SMIME_read_CMS", "bn_mul_low_recursive", "ASN1_STRING_clear_free", "_Z10imdct_gainPlPii", "av_hmac_update", "avformat_get_mov_video_tags", "RSA_verify_PKCS1_PSS_mgf1", "av_reallocp", "d2i_ASN1_bytes", "ff_codec_guid_get_id", "ENGINE_unregister_pkey_asn1_meths", "av_parser_change", "CMS_SignerInfo_get0_algs", "ssl3_get_finished", "_Z21GetRam_Sbr_v_k_masteri", "ec_GF2m_simple_invert", "EVP_aes_128_ccm", "d2i_X509_REVOKED", "X509_check_ip_asc", "EVP_CIPHER_set_asn1_iv", "MDC2_Init", "av_dv_frame_profile", "CRYPTO_gcm128_init", "ff_videodsp_init", "X509_ALGOR_dup", "ERR_unload_strings", "ASN1_STRING_TABLE_cleanup", "ff_start_tag", "EVP_PKEY_type", "SSL_set_client_CA_list", "EC_POINT_dup", "PEM_write_PrivateKey", "i2d_RSAPublicKey_bio", "ff_h264qpel_init", "avpriv_io_move", "avformat_alloc_output_context2", "add_hevc_epel_s16_pixels_8_neon", "X509_get_pubkey", "OBJ_NAME_do_all_sorted", "av_stristart", "_Z20FDK_MetadataEnc_OpenPP20FDK_METADATA_ENCODER", "ssl3_send_hello_request", "CRYPTO_gcm128_tag", "EVP_CIPHER_CTX_cleanup", "av_twofish_alloc", "ssl3_ctrl", "_Z25FreeAacDecoderChannelInfoPP22CAacDecoderChannelInfo", "EVP_dss", "ff_seek_frame_binary", "_Z27GetRam_Sbr_detectionVectorsi", "PKCS12_unpack_authsafes", "_Z22CAacDecoder_AncDataGetP8CAncDataiPPhPi", "__subdf3", "i2d_PKCS8PrivateKey_bio", "ff_set_sar", "BN_swap", "avg_hevc_qpel_s32_pixels_8_neon", "dencryptKey", "_Z30FDKaacEnc_InitPsyConfigurationiiiiiiP17PSY_CONFIGURATION7FB_TYPE", "asn1_get_field_ptr", "d2i_PKCS12_SAFEBAG", "SSL_CIPHER_find", "av_fast_padded_malloc", "EVP_aes_192_gcm", "DSO_bind_var", "OCSP_REQ_CTX_i2d", "EVP_PKEY_CTX_get0_peerkey", "i2d_PKCS8_PRIV_KEY_INFO", "i2d_OCSP_RESPBYTES", "av_get_pix_fmt_loss", "sws_convertPalette8ToPacked24", "ff_vector_fmul_reverse_neon", "ff_hevc_put_qpel_h1v3_neon_8", "ssl_undefined_function", "i2d_ASN1_NULL", "tls12_check_peer_sigalg", "ff_h264_idct_add16intra_8_c", "_Z38GetRequiredMemRam_aacEnc_PsyOutChannelv", "OPENSSL_gmtime_adj", "ff_hevc_put_qpel_uw_h1_neon_8", "sk_new", "ERR_get_error", "ASN1_TYPE_free", "ssl3_release_write_buffer", "X509_VERIFY_PARAM_inherit", "EVP_DigestSignInit", "EVP_MD_CTX_copy", "ssl_cipher_id_cmp", "CMS_RecipientInfo_kari_set0_pkey", "add_hevc_qpel_s8_h1_8_neon", "PKCS7_RECIP_INFO_get0_alg", "_Z30transportDec_GetBufferFullnessP12TRANSPORTDEC", "DSA_sign", "X509_get_default_private_dir", "_Z43GetRequiredMemRam_aacEnc_AdjThrStateElementv", "RSA_public_decrypt", "BN_mod_add", "_Z28FDK_DRC_Generator_InitializeP8DRC_COMP11DRC_PROFILES1_ij12CHANNEL_MODE13CHANNEL_ORDERh", "avg_hevc_epel_s16_h_8_neon", "_Z23PredictiveInterpolationP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "DSO_set_default_method", "BIO_dump_indent", "SSL_dup", "_Z26GetRam_Sbr_freqBandTableLOi", "EC_POINT_get_affine_coordinates_GFp", "ff_hex_to_data", "X509_get1_email", "rgb64tobgr48_bswap", "_Z27CConcealment_GetLastFrameOkP16CConcealmentInfoi", "WAV_InputRead", "CRYPTO_ccm128_aad", "ssl3_dispatch_alert", "_Z17transportDec_Open14TRANSPORT_TYPEj", "n_ssl3_mac", "BN_MONT_CTX_init", "ff_id3v2_read_dict", "_Z18FDKaacEnc_PsyClosePP12PSY_INTERNALPP7PSY_OUT", "ff_avg_pixels16_y2_no_rnd_neon", "DH_set_ex_data", "dsa_builtin_paramgen2", "av_des_init", "_Z28FDKaacEnc_SyncBlockSwitchingP23BLOCK_SWITCHING_CONTROLS0_ii", "BN_asc2bn", "sws_alloc_context", "av_bprint_channel_layout", "ff_hevc_decode_short_term_rps", "UI_method_set_flusher", "av_strnstr", "CRYPTO_set_mem_functions", "PKCS7_add1_attrib_digest", "__gtdf2", "av_fifo_grow", "ff_h264_alloc_tables", "EVP_aes_192_cbc", "avfilter_register_all", "ASN1_item_d2i_bio", "x264_macroblock_probe_skip", "ff_j_rev_dct2", "SSL_peek", "av_buffersink_set_frame_size", "ENGINE_register_all_digests", "x264_macroblock_bipred_init", "SEED_cbc_encrypt", "SSL_use_RSAPrivateKey_file", "i2d_DHxparams", "add_hevc_qpel_s16_h1_8_neon", "av_gettime", "ff_h264_h_loop_filter_luma_neon", "ENGINE_set_pkey_meths", "ff_vector_fmul_vfp", "UI_method_get_reader", "ff_put_h264_qpel16_mc00_neon", "ff_line_noise_c", "_Z28FDKaacEnc_InitPreEchoControlPlPiiS_S0_", "_Z32transportDec_RegisterSbrCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "i2d_CRL_DIST_POINTS", "SHA224_Update", "_Z27transportEnc_GetChannelModei", "ff_dualinput_uninit", "_Z23FDKhybridSynthesisApplyP18FDK_SYN_HYB_FILTERPKlS2_PlS3_", "i2d_OCSP_CRLID", "ffio_close_null_buf", "CMS_ContentInfo_new", "SRP_user_pwd_free", "FDKfflush", "aes_v8_encrypt", "ec_GF2m_simple_point_finish", "FDKstrlen", "ssl3_final_finish_mac", "engine_set_all_null", "_Z21FreeRam_SbrDecChannelPP11SBR_CHANNEL", "__subsf3", "SRP_get_default_gN", "i2d_ASN1_SET", "ssl3_read_bytes", "_Z30FDKsbrEnc_FindStartAndStopBandiiiiiPiS_", "EVP_PBE_alg_add_type", "X509_VERIFY_PARAM_get0_name", "ff_get_guid", "ff_tls_open_underlying", "GENERAL_NAME_free", "av_thread_message_queue_set_free_func", "ENGINE_set_pkey_asn1_meths", "av_new_program", "CRYPTO_gcm128_setiv", "avg_hevc_qpel_s16_pixels_8_neon", "X509_ALGOR_free", "DSA_get_ex_data", "PEM_write_bio_PKCS7", "DES_cfb_encrypt", "i2d_DSAparams", "ENGINE_load_private_key", "x264_ratecontrol_slice_type", "X509_CRL_get_ext_by_OBJ", "ff_h264_idct8_dc_add_14_c", "DES_set_key_checked", "X509_ocspid_print", "ffurl_handshake", "CRYPTO_set_ex_data", "avfilter_graph_alloc_filter", "ENGINE_get_destroy_function", "ssl23_get_cipher", "_Z24FDKaacEnc_updateFillBitsP15CHANNEL_MAPPINGP8QC_STATEPP12ELEMENT_BITSPP6QC_OUT", "__gnu_Unwind_RaiseException", "bsaes_cbc_encrypt", "x264_lookahead_is_empty", "ERR_clear_error", "d2i_PBE2PARAM", "av_register_input_format", "EC_POINT_method_of", "ssl3_do_compress", "_Z32FDKsbrEnc_InitExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiiiiimiPhj", "UI_dup_error_string", "_Z17transportEnc_InitP12TRANSPORTENCPhi14TRANSPORT_TYPEP12CODER_CONFIGj", "swresample_configuration", "SSL_CIPHER_get_id", "avpriv_find_pix_fmt", "FDKfprintf", "ff_ps_add_squares_neon", "_Z21FreeRam_Sbr_guideScfbPPh", "ECDSA_METHOD_set_sign_setup", "OCSP_REQ_CTX_nbio_d2i", "add_hevc_qpel_s16_h3v1_8_neon", "SSL_get_read_ahead", "pcmDmx_Close", "i2d_NETSCAPE_SPKI", "avcodec_profile_name", "X509_issuer_and_serial_cmp", "_Z29GetRam_aacEnc_MergeGainLookUpiPh", "ENGINE_ctrl", "av_dynarray_add", "UI_create_method", "av_application_on_io_traffic", "avio_w8", "ff_yuv420p_to_argb_neon_32", "_Z26FDKsbrEnc_InitSbrBitstreamP11COMMON_DATAPhiP11FDK_CRCINFOj", "string_to_hex", "CONF_load_bio", "ASN1_OBJECT_new", "_Z19adtsWrite_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ssl_cipher_get_evp", "i2d_PBKDF2PARAM", "d2i_ASN1_type_bytes", "cms_get0_enveloped", "ECParameters_print_fp", "FDKatof", "sbrEncoder_IsSingleRatePossible", "ENGINE_load_ssl_client_cert", "av_get_audio_frame_duration", "EVP_PKEY_CTX_get0_pkey", "HMAC_CTX_set_flags", "dtls1_check_timeout_num", "X509_VERIFY_PARAM_get_depth", "OBJ_NAME_add", "x264_quant_4x4_trellis", "av_opt_set_dict_val", "av_malloc", "X509V3_EXT_REQ_add_nconf", "set_one_stream", "X509_PUBKEY_free", "NETSCAPE_SPKI_new", "i2d_PrivateKey", "CRYPTO_cbc128_encrypt", "__eqdf2", "CONF_imodule_get_usr_data", "av_hex_dump", "UTF8_getc", "ff_simple_idct_add_armv5te", "ff_pred8x8_0l0_dc_neon", "tls1_cbc_remove_padding", "CMAC_Final", "ff_sbr_sum64x5_neon", "PEM_write_PKCS8_PRIV_KEY_INFO", "rgb48tobgr48_bswap", "put_hevc_qpel_s16_h2v1_8_neon", "SSL_set_debug", "_Z27FreeRam_Sbr_freqBandTableHIPPh", "_Z19sbrDecoder_drcApplyP18SBRDEC_DRC_CHANNELPPlS2_iPi", "avpriv_report_missing_feature", "x264_plane_copy_interleave_c", "CRYPTO_destroy_dynlockid", "ff_idctdsp_init_arm", "EC_KEY_print", "SRP_Calc_A", "BN_mod_sqr", "ff_hevc_put_pixels_w16_neon_8", "ff_hevc_put_qpel_uw_pixels_w12_neon_8", "i2d_PKCS8PrivateKey_fp", "av_sdp_create", "BN_MONT_CTX_set", "FDKatan", "EVP_cleanup", "av_pixelutils_get_sad_fn", "_Z20initSbrPrevFrameDataP19SBR_PREV_FRAME_DATAi", "EVP_PKEY_CTX_get_app_data", "av_chroma_location_name", "ff_mc_weight_bi", "ff_ape_write_tag", "aes_v8_ctr32_encrypt_blocks", "av_find_best_pix_fmt_of_2", "av_find_input_format", "UI_destroy_method", "X509_EXTENSION_set_object", "CRYPTO_set_mem_debug_options", "d2i_NETSCAPE_SPKAC", "i2d_PKCS7_ISSUER_AND_SERIAL", "PEM_write_bio_EC_PUBKEY", "dtls1_get_message_header", "_Z36FDKsbrEnc_CountSbrChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "av_samples_copy", "ff_h264_idct8_dc_add_9_c", "OCSP_sendreq_bio", "av_dict_free", "EVP_aes_192_ofb", "BN_is_prime_fasttest_ex", "CMS_unsigned_add1_attr", "add_hevc_qpel_s32_h2v1_8_neon", "ENGINE_set_default_DSA", "i2d_X509_REQ_bio", "_Unwind_VRS_Set", "OpenSSL_add_all_digests", "x264_sei_avcintra_vanc_write", "ERR_put_error", "avg_hevc_qpel_s32_h2v1_8_neon", "ff_mpa_l2_select_table", "avio_close_dir", "x264_ratecontrol_delete", "av_packet_pack_dictionary", "av_display_rotation_set", "CMS_SignerInfo_set1_signer_cert", "ff_hevc_parse_sps", "OBJ_NAME_do_all", "CRYPTO_pop_info", "ssl3_setup_buffers", "ff_put_h264_chroma_mc2_neon", "av_frame_get_plane_buffer", "ssl23_get_cipher_by_char", "ASN1_TYPE_get_int_octetstring", "PEM_X509_INFO_write_bio", "SSL_is_server", "_Z28FDKhybridAnalysisScaleStatesP18FDK_ANA_HYB_FILTERi", "EVP_PKEY_meth_get0_info", "lh_delete", "SMIME_write_ASN1", "swri_rematrix_init", "i2d_ASN1_UTCTIME", "avio_rl32", "put_hevc_qpel_s16_h3v1_8_neon", "add_hevc_qpel_s32_h1v3_8_neon", "EVP_PKEY_asn1_copy", "engine_table_cleanup", "_Z25transportEnc_GetBitstreamP12TRANSPORTENC", "EVP_des_ede3_wrap", "_Z24GetRam_aacEnc_AacEncoderi", "sws_allocVec", "ENGINE_register_pkey_meths", "X509_CRL_add0_revoked", "ecdh_check", "PKCS7_add0_attrib_signing_time", "sws_addVec", "i2d_OCSP_REQUEST", "TXT_DB_read", "ec_GFp_simple_points_make_affine", "SEED_cfb128_encrypt", "__gnu_uldivmod_helper", "FDK_pushBack", "OCSP_SERVICELOC_new", "ff_mdct_end_fixed", "EVP_PKEY_meth_set_verify_recover", "MD4_Update", "avcodec_get_chroma_sub_sample", "ff_put_guid", "avg_hevc_qpel_s16_v2_8_neon", "ff_h264_init_cabac_states", "av_get_random_seed", "asn1_enc_save", "av_program_add_stream_index", "ff_mov_cenc_init", "OTHERNAME_cmp", "ENGINE_init", "avg_hevc_qpel_s8_h3_8_neon", "SRP_Verify_A_mod_N", "i2d_X509_REQ_fp", "EVP_EncodeUpdate", "ff_init_ff_cos_tabs_fixed_32", "ff_blend_rectangle", "av_opt_eval_int64", "UI_dup_input_string", "SSL_CIPHER_description", "avfilter_add_matrix", "ff_fft_calc_vfp", "EVP_camellia_192_cbc", "ENGINE_by_id", "ff_h264_chroma422_dc_dequant_idct_8_c", "CONF_imodule_set_usr_data", "ff_hevc_split_transform_flag_decode", "RC2_cbc_encrypt", "d2i_ASN1_SET", "ENGINE_get_finish_function", "avfilter_graph_parse", "_Z25transportDec_GetBitstreamP12TRANSPORTDECj", "X509_REQ_set_subject_name", "SSL_CTX_set_purpose", "swri_audio_convert_alloc", "PEM_read_bio_CMS", "_Z21CConcealment_GetDelayP14CConcealParams", "x264_analyse_init_costs", "ff_format_io_close", "x264_mb_predict_mv_direct16x16", "ff_avg_h264_qpel16_mc12_neon", "sk_new_null", "NCONF_dump_fp", "av_buffersink_get_samples", "DH_compute_key", "EC_POINT_add", "OCSP_ONEREQ_new", "ff_pred16x16_top_dc_neon", "d2i_PrivateKey_bio", "__divdi3", "X509_NAME_ENTRY_get_object", "i2d_PKCS12_SAFEBAG", "PKCS7_dataInit", "av_packet_from_data", "ff_codec_open2_recursive", "ff_avg_pixels16_xy2_neon", "av_tree_enumerate", "av_fifo_drain", "SSL_get_srp_g", "ENGINE_set_DH", "_Z18GetWorkBufferCore2i", "av_frame_move_ref", "avio_close", "resetLimiter", "ssl_replace_hash", "X509_alias_get0", "EVP_des_cfb8", "EVP_desx_cbc", "_Z37GetRequiredMemRam_aacEnc_BitCntrStatev", "ASN1_GENERALIZEDTIME_set_string", "av_version_info", "ff_put_h264_qpel8_mc23_neon", "X509_STORE_set_flags", "EC_POINT_make_affine", "ff_mc_weight", "ff_j_rev_dct4", "PKCS7_ENCRYPT_new", "ff_put_h264_qpel16_mc31_neon", "x264_predict_lossless_chroma", "ec_GF2m_simple_group_set_curve", "av_get_padded_bits_per_pixel", "EVP_PKEY_verify_init", "_Z21transportEnc_GetFrameP12TRANSPORTENCPi", "ff_af_queue_init", "i2d_PKCS7_bio", "ff_nv21_to_abgr_neon_16", "RSA_padding_add_PKCS1_PSS", "av_opt_set_sample_fmt", "X509_VERIFY_PARAM_table_cleanup", "ff_h264_idct_add16_8_c", "x264_frame_expand_border_chroma", "ENGINE_cmd_is_executable", "ASN1_PRINTABLESTRING_free", "i2d_EC_PRIVATEKEY", "_Z20GetRam_Sbr_guideScfbi", "av_hash_final_hex", "ff_simple_idct_arm", "EVP_dss1", "_Z14initHeaderDataP15SBR_HEADER_DATAiiij", "avcodec_find_encoder_by_name", "ff_mc_weight_bi_4_neon", "AES_decrypt", "policy_data_free", "ff_h264_reset_sei", "NETSCAPE_SPKI_free", "ff_fft_init_fixed_32", "av_sha512_final", "X509_check_email", "ff_id3v2_free_extra_meta", "X509_verify_cert_error_string", "i2a_ASN1_OBJECT", "CMS_SignerInfo_sign", "PKCS7_set_cipher", "ff_avg_pixels8_neon", "Camellia_Ekeygen", "av_d3d11va_alloc_context", "ff_simple_idct_put_12", "setLimiterNChannels", "x264_frame_expand_border", "_Z12PSEnc_CreatePP19T_PARAMETRIC_STEREO", "_Z24FDK_MetadataEnc_GetDelayP20FDK_METADATA_ENCODER", "cms_RecipientInfo_kari_init", "x264_free", "EVP_Cipher", "X509V3_parse_list", "EVP_PKEY_verify_recover_init", "engine_cleanup_add_first", "ff_avg_h264_qpel8_mc02_neon", "RSA_padding_check_PKCS1_type_2", "x264_cqm_init", "ff_all_channel_counts", "CRYPTO_ccm128_init", "EVP_PKEY_cmp", "avio_wl32", "PKCS8_PRIV_KEY_INFO_free", "av_samples_fill_arrays", "ff_draw_supported_pixel_formats", "_Unwind_GetRegionStart", "CRYPTO_gcm128_aad", "ff_fill_line_with_color", "ff_get_line", "avformat_query_codec", "ff_float_dsp_init_vfp", "avio_accept", "_Z21FDKsbrEnc_AddVecRightPiS_S_i", "ff_mdct_init_fixed", "avfilter_next", "OPENSSL_DIR_read", "ASN1_PCTX_set_cert_flags", "dtls1_write_bytes", "avsubtitle_free", "av_fifo_reset", "X509V3_add1_i2d", "ec_GF2m_simple_points_make_affine", "UI_set_result", "av_stream_get_r_frame_rate", "EVP_camellia_128_cfb128", "SSL_CTX_use_PrivateKey", "ff_imdct_calc_c", "EVP_PKEY_CTX_ctrl", "CMS_add0_recipient_key", "ff_pred8x8_left_dc_neon", "FDK_Feed", "av_fifo_size", "ff_hevc_cu_qp_delta_abs", "NCONF_load_bio", "ff_thread_report_progress", "cms_SignedData_init_bio", "audio_resample", "PKCS12_item_i2d_encrypt", "_Z26transportDec_EndAccessUnitP12TRANSPORTDEC", "ff_h264_execute_decode_slices", "ff_add_pixels_clamped_arm", "ASN1_UTCTIME_set_string", "x264_pixel_init", "ff_hevc_res_scale_sign_flag", "i2d_PKCS8PrivateKey_nid_fp", "FDKstrstr", "EVP_PKEY_CTX_get_keygen_info", "ff_init_ff_sine_windows_fixed", "ENGINE_set_default_ciphers", "EC_POINT_point2hex", "EVP_PKEY_meth_set_sign", "_Z10getHcrTypeP10CErHcrInfo", "EVP_aes_256_cbc", "PEM_write_CMS", "x264_copy_column8", "EVP_SignFinal", "av_application_on_http_event", "FDKafree_L", "av_fifo_freep", "av_opt_free", "a2i_IPADDRESS", "av_add_q", "EC_EX_DATA_clear_free_data", "ASN1_UTCTIME_print", "PEM_read_X509_CRL", "CRYPTO_gcm128_finish", "avg_hevc_epel_s8_pixels_8_neon", "av_bprint_finalize", "_Z37GetRequiredMemRam_Sbr_freqBandTableHIv", "CMS_signed_get_attr", "_Z21FDK_MetadataEnc_ClosePP20FDK_METADATA_ENCODER", "OCSP_BASICRESP_new", "X509_ATTRIBUTE_get0_object", "ff_hevc_put_qpel_uw_pixels_w8_neon_8", "avpriv_h264_has_num_reorder_frames", "av_url_split", "ff_amf_match_string", "BN_MONT_CTX_new", "add_hevc_qpel_s8_v3_8_neon", "d2i_PKCS8_PRIV_KEY_INFO", "X509_CRL_set_issuer_name", "EVP_CIPHER_CTX_key_length", "x264_sei_write", "ec_GF2m_simple_point_set_to_infinity", "OPENSSL_ia32cap_loc", "_Unwind_GetLanguageSpecificData", "EVP_ripemd160", "X509V3_EXT_nconf", "ff_raw_video_read_header", "EVP_PKEY_size", "X509_REQ_get_pubkey", "CRYPTO_cbc128_decrypt", "x264_macroblock_cache_load_progressive", "i2d_PKCS8PrivateKeyInfo_bio", "Camellia_EncryptBlock", "PKCS12_item_pack_safebag", "ENGINE_set_default_RAND", "X509_print_fp", "ASN1_primitive_free", "UI_get_default_method", "add_hevc_qpel_s8_h3_8_neon", "SSL_pending", "EVP_PKEY_asn1_set_param", "av_get_media_type_string", "BN_CTX_init", "ff_put_h264_qpel16_mc01_neon", "ENGINE_set_table_flags", "av_write_uncoded_frame_query", "PEM_write_bio_DSAPrivateKey", "EVP_PKEY_derive_set_peer", "BN_add", "EC_KEY_new", "ENGINE_finish", "av_twofish_crypt", "_Z17aliasingReductionPlP13ENV_CALC_NRGSPii", "EVP_aes_128_cbc_hmac_sha1", "SSL_CTX_sessions", "SSL_use_certificate", "X509_TRUST_get_flags", "SSL_CTX_use_RSAPrivateKey_ASN1", "ERR_load_X509V3_strings", "_Z22FDKhybridAnalysisCloseP18FDK_ANA_HYB_FILTER", "CMS_set1_signers_certs", "bn_mul_low_normal", "CMS_unsigned_add1_attr_by_NID", "_Z23FDKsbrEnc_Shellsort_intPii", "add_hevc_qpel_s16_v2_8_neon", "X509_REQ_dup", "av_bmg_get", "x264_nal_encode", "ff_null_get_video_buffer", "X509_check_purpose", "ff_hevc_put_qpel_uw_v1_neon_8", "SSL_CTX_get_info_callback", "av_fast_mallocz", "SSL_get_verify_depth", "i2d_X509_SIG", "SSL_get_ex_new_index", "CRYPTO_get_mem_functions", "EC_KEY_set_public_key_affine_coordinates", "ff_vector_fmul_neon", "ENGINE_set_init_function", "RAND_set_rand_engine", "SSL_get_cipher_list", "DH_set_method", "av_asprintf", "_Z18FreeRam_SbrChannelPP11SBR_CHANNEL", "_Z18GetWorkBufferCore1i", "transform_32x32_add_neon_row_4", "swri_noise_shaping_float", "swri_oldapi_conv_fltp_to_s16_2ch_neon", "SSL_CTX_remove_session", "ff_default_get_audio_buffer", "d2i_X509_EXTENSION", "ff_put_h264_chroma_mc4_neon", "ssl3_send_server_key_exchange", "ASN1_INTEGER_new", "ssl3_write_bytes", "UI_get_ex_data", "ASN1_PCTX_set_nm_flags", "NCONF_get_string", "d2i_PKCS7_DIGEST", "EVP_des_ede_cbc", "BN_pseudo_rand", "av_init_packet", "avg_hevc_qpel_s32_v3_8_neon", "i2d_OCSP_RESPID", "avcodec_encode_video2", "sk_is_sorted", "avpriv_mpa_decode_header2", "OBJ_obj2txt", "x264_ratecontrol_summary", "ec_GF2m_simple_cmp", "ff_free_filters", "avg_hevc_qpel_s8_h2v1_8_neon", "EVP_camellia_256_cfb8", "PEM_read_bio_PKCS7", "DSA_dup_DH", "pcmDmx_ApplyFrame", "ff_hevc_unref_frame", "X509_set_notBefore", "avfilter_graph_dump", "FDKprintDisclaimer", "av_hmac_calc", "EVP_PKCS82PKEY", "chroma_mc_fixed_bs_add", "av_opt_set_defaults", "X509_CRL_set_default_method", "_Z21FDKaacEnc_calcSfbDistPlPsii", "ff_yuv420p_to_argb_neon_16", "aes_v8_set_decrypt_key", "_Z7IcsReadP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfoj", "pem_check_suffix", "_Z15calcSubbandGainlaP13ENV_CALC_NRGSilahhi", "X509V3_EXT_conf", "ff_hevc_put_qpel_h2v3_neon_8", "ff_imdct_half_vfp", "PKCS7_dataVerify", "ff_alloc_entries", "ff_rgb24toyv12_c", "x264_macroblock_cache_load_interlaced", "av_frame_set_qp_table", "v2i_GENERAL_NAMES", "avg_hevc_qpel_s32_h3_8_neon", "i2d_X509_ALGORS", "_Z8fDivNormll", "av_application_closep", "asn1_item_combine_free", "_Z11imdct_drainP6mdct_tPli", "av_strncasecmp", "CRYPTO_strdup", "av_hmac_alloc", "X509_REQ_extension_nid", "_Z49BidirectionalEstimation_UseLowerScfOfCurrentFrameP22CAacDecoderChannelInfo", "x264_frame_cond_broadcast", "ff_tlog_ref", "CMAC_CTX_free", "X509_STORE_add_lookup", "POLICY_CONSTRAINTS_free", "_Z40GetRequiredMemRam_aacEnc_AdjustThresholdv", "EVP_PKEY_meth_get_verify", "PEM_read_PKCS8", "X509_SIG_new", "ff_hevc_v_loop_filter_chroma_neon", "ff_filter_alloc", "EVP_EncodeBlock", "ECDH_OpenSSL", "av_parse_cpu_flags", "ff_nv12_to_rgba_neon_32", "_Z42transportEnc_LatmCountTotalBitDemandHeaderP11LATM_STREAMj", "CRYPTO_ccm128_setiv", "av_abuffersink_params_alloc", "SSL_set_generate_session_id", "avpriv_solve_lls", "_Z35GetRequiredMemRam_aacEnc_AacEncoderv", "X509_TRUST_set", "ff_j_rev_dct_arm", "SSL_CTX_use_PrivateKey_file", "av_frame_set_pkt_duration", "FDKfwrite_EL", "ENGINE_register_all_DSA", "av_aes_ctr_set_iv", "PBEPARAM_free", "ff_hevc_put_qpel_uw_h2_neon_8", "ff_faanidct", "av_strndup", "EC_KEY_get_flags", "x264_mb_predict_mv", "FDKsqrt", "X509_PKEY_new", "x264_threadpool_wait", "ERR_load_EVP_strings", "SSL_state_string_long", "DES_encrypt2", "PEM_write_bio_PKCS8_PRIV_KEY_INFO", "_Z24FDKaacEnc_PreEchoControlPliiisS_iPi", "UI_get_ex_new_index", "ssl_cert_clear_certs", "EC_KEY_get0_group", "SSL_extension_supported", "PKCS8_set_broken", "SSL_CTX_get_client_cert_cb", "ffurl_write", "av_hmac_free", "__extendsfdf2", "ff_http_init_auth_state", "SRP_Calc_x", "ASN1_template_d2i", "d2i_RSAPublicKey_fp", "BN_mod_lshift1_quick", "_Z40GetRequiredMemRam_TransportDecoderBufferv", "sk_set_cmp_func", "SSL_get_current_expansion", "PEM_write_bio_ECPKParameters", "av_imdct_calc", "ff_h264_ref_picture", "DH_check_pub_key", "i2d_DIST_POINT_NAME", "_Z36FreeRam_Sbr_prevEnvelopeCompensationPPh", "engine_table_select", "SSL_CTX_get_ex_new_index", "_Z37FDKaacEnc_GetChannelModeConfiguration12CHANNEL_MODE", "swr_next_pts", "X509V3_extensions_print", "EVP_PKEY_meth_find", "EC_GROUP_precompute_mult", "EVP_PKEY_meth_get_signctx", "_Z16CPulseData_ApplyP10CPulseDataPKsPl", "EC_POINTs_make_affine", "av_codec_get_chroma_intra_matrix", "FDKfopen", "_Z25CAacDecoder_GetStreamInfoP20AAC_DECODER_INSTANCE", "X509_CRL_add1_ext_i2d", "_Z34CBlock_InverseQuantizeSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "x264_macroblock_cache_allocate", "EVP_PKEY_add1_attr", "X509_REQ_INFO_new", "i2d_OCSP_REQINFO", "ff_hevc_put_qpel_bi_neon_wrapper", "d2i_ASN1_ENUMERATED", "__divsi3", "ff_mov_iso639_to_lang", "x264_macroblock_thread_init", "EVP_sha512", "Camellia_DecryptBlock", "X509_VERIFY_PARAM_set1_ip", "_Z21FreeRam_aacEnc_PsyOutPP7PSY_OUT", "d2i_ASN1_SEQUENCE_ANY", "AES_wrap_key", "ff_jref_idct_add", "avfilter_configuration", "ENGINE_set_ECDSA", "ffurl_get_file_handle", "EVP_PBE_find", "CRYPTO_THREADID_set_numeric", "_CONF_new_section", "PEM_ASN1_read_bio", "ff_float_dsp_init_neon", "ssl3_do_write", "_Z17decodeRVLCodewordP13FDK_BITSTREAMP11CErRvlcInfo", "X509_REVOKED_add_ext", "EVP_camellia_128_ofb", "ASN1_UNIVERSALSTRING_new", "ff_nv12_to_abgr_neon_32", "avcodec_descriptor_get", "X509_TRUST_get_by_id", "ERR_load_X509_strings", "_Z29GetRequiredMemRam_ParamStereov", "_Z18transportDec_ClosePP12TRANSPORTDEC", "ff_h264_decode_extradata", "_Z16qmfChangeOutGainP15QMF_FILTER_BANKl", "_Z20FDK_MetadataEnc_InitP20FDK_METADATA_ENCODERiiijjj12CHANNEL_MODE13CHANNEL_ORDER", "av_strdup", "SSL_CTX_get_timeout", "ssl3_send_client_key_exchange", "x264_encoder_open_146", "COMP_zlib_cleanup", "ff_query_formats_all", "av_rdft_calc", "ff_free_vlc", "ff_thread_release_buffer", "sws_getCoefficients", "av_ripemd_alloc", "av_mdct_end", "av_stream_set_r_frame_rate", "MD5_Update", "Camellia_cbc_encrypt", "X509_REQ_set_pubkey", "FDKmemcmp", "ENGINE_get_load_privkey_function", "DES_encrypt1", "av_probe_input_buffer", "SXNET_add_id_ulong", "ff_sbr_autocorrelate_neon", "NETSCAPE_SPKAC_new", "ff_set_common_formats", "ff_add_channel_layout", "ENGINE_register_pkey_asn1_meths", "X509V3_string_free", "d2i_PKCS7", "_Z25GetRam_aacEnc_PsyInternali", "ssl3_cbc_record_digest_supported", "ERR_load_RAND_strings", "x264_field_vsad", "SRP_Calc_A_param", "ff_avg_h264_qpel8_mc20_neon", "BF_encrypt", "av_copy_packet_side_data", "avcodec_chroma_pos_to_enum", "av_log_set_level", "ff_aac_sbr_init", "_armv8_sha256_probe", "_Z13IcsReadMaxSfbP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfo", "avcodec_alloc_context3", "gcm_ghash_neon", "SXNET_new", "x264_predict_8x8c_init_arm", "rgb15tobgr15", "_Z35FDKaacEnc_IntensityStereoProcessingPlS_S_S_S_S_S_S_S_S_S_PiS0_iiiPKiiS0_S0_PP8PNS_DATA", "SSL_get_verify_mode", "NETSCAPE_SPKAC_free", "AUTHORITY_KEYID_new", "x264_macroblock_encode_p8x8", "x264_encoder_close", "ssl3_write_pending", "av_application_open", "FDK_getBwd", "ff_rtp_chain_mux_open", "av_opt_set_int", "X509_subject_name_hash_old", "av_parser_parse2", "av_div_q", "BN_GF2m_mod_sqr_arr", "d2i_PKCS8PrivateKey_fp", "x264_frame_pop_blank_unused", "d2i_DSA_PUBKEY_bio", "ff_simple_idct_add_10", "tls1_set_server_sigalgs", "dtls1_send_change_cipher_spec", "OpenSSL_add_all_ciphers", "ff_h264_chroma_dc_dequant_idct_12_c", "ec_GF2m_simple_group_copy", "FDKaacEnc_GetVBRBitrate", "ASN1_item_verify", "d2i_X509_REQ", "d2i_X509_ALGORS", "EC_GROUP_clear_free", "EC_KEY_dup", "ff_hevc_inter_pred_idc_decode", "_Z21FDKaacEnc_AdjThrClosePP13ADJ_THR_STATE", "d2i_RSAPrivateKey", "ff_h264_hl_decode_mb", "_Z24CBlock_ScaleSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "i2d_ASN1_ENUMERATED", "put_hevc_qpel_s16_h1_8_neon", "_Z34FDKsbrEnc_InitSbrTransientDetectorP22SBR_TRANSIENT_DETECTORiiP16sbrConfigurationiiiiiii", "FDKmemclear", "cms_CompressedData_create", "X509_policy_node_get0_qualifiers", "DSA_generate_parameters_ex", "ENGINE_register_all_ciphers", "PEM_write_bio_X509", "av_format_get_subtitle_codec", "ASN1_template_new", "PKCS7_dup", "_CONF_free_data", "WHIRLPOOL_BitUpdate", "ERR_load_TS_strings", "ff_avg_pixels8_y2_neon", "EVP_PKEY_set1_DSA", "ff_put_pixels8_x2_no_rnd_neon", "avg_hevc_qpel_s16_h3_8_neon", "PKCS7_add_recipient_info", "SSL_set_rfd", "ENGINE_set_ECDH", "ff_avg_h264_qpel16_mc33_neon", "av_stereo3d_create_side_data", "OPENSSL_cpuid_setup", "ssl_get_algorithm2", "x264_weight_scale_plane", "x264_expand_border_mbpair", "BIO_write", "EVP_DecodeInit", "SSL_write", "X509_CINF_new", "EVP_CIPHER_iv_length", "ff_rotate_slice", "avpriv_mpegaudio_decode_header", "ECDSA_set_method", "swri_rematrix", "bn_mul_mont", "PEM_X509_INFO_read_bio", "_Z11resetSbrDecP7SBR_DECP15SBR_HEADER_DATAP19SBR_PREV_FRAME_DATAii", "av_murmur3_init_seeded", "UI_method_get_prompt_constructor", "X509_SIG_free", "X509_REQ_new", "SSL_COMP_set0_compression_methods", "SHA_Update", "RAND_query_egd_bytes", "d2i_ISSUING_DIST_POINT", "CRYPTO_THREADID_cmp", "_Z19FreeRam_ParamStereoPP19T_PARAMETRIC_STEREO", "x264_pps_init", "SSL_get_fd", "av_get_alt_sample_fmt", "d2i_SSL_SESSION", "put_hevc_qpel_s8_h2v2_8_neon", "ff_parse_creation_time_metadata", "EVP_aes_128_cbc", "X509_set_subject_name", "avio_handshake", "_Z16FDKaacEnc_PsyNewPP12PSY_INTERNALiiPh", "dsa_builtin_paramgen", "EVP_PKEY_get0_asn1", "i2d_X509_EXTENSIONS", "ff_filter_frame", "TLSv1_1_method", "ff_rtmp_packet_write", "X509_STORE_set_lookup_crls_cb", "_Z20FreeRam_aacEnc_QCoutPP6QC_OUT", "DSA_set_ex_data", "GENERAL_NAMES_new", "RSA_get_ex_data", "ff_fft_fixed_calc_neon", "av_mul_i", "x264_sei_frame_packing_write", "X509_VERIFY_PARAM_add0_table", "av_find_program_from_stream", "SSL_get_current_cipher", "X509_VAL_new", "DTLSv1_2_method", "ff_put_h264_qpel8_mc11_neon", "SXNET_add_id_INTEGER", "av_find_default_stream_index", "EC_EX_DATA_free_data", "ff_h264_decode_mb_cavlc", "av_xiphlacing", "x264_macroblock_slice_init", "SSL_CTX_set_tmp_ecdh_callback", "avcodec_pix_fmt_to_codec_tag", "ffio_set_buf_size", "BIO_callback_ctrl", "OBJ_txt2obj", "put_hevc_epel_s4_pixels_8_neon", "X509_CRL_get0_by_serial", "PKCS12_key_gen_asc", "act_transform_32x32_add_8", "BIO_f_asn1", "av_get_channel_layout_channel_index", "i2d_ASN1_IA5STRING", "i2d_ASN1_BIT_STRING", "i2d_EC_PUBKEY", "sbrDecoder_GetLibInfo", "avfilter_get_matrix", "i2d_CMS_bio", "ssl_cert_set_default_md", "X509_NAME_get_text_by_OBJ", "DES_cfb64_encrypt", "__fixdfdi", "ssl3_send_finished", "ff_hevc_sao_eo_class_decode", "EVP_camellia_256_cbc", "ff_avg_h264_qpel8_mc03_neon", "_Z37GetRequiredMemRam_Sbr_guideVectorDiffv", "BN_mod_sqrt", "_Z22FreeRam_Sbr_v_k_masterPPh", "BN_hex2bn", "avpriv_alloc_fixed_dsp", "_Z24qmfAnalysisFilteringSlotP15QMF_FILTER_BANKPlS1_PKsiS1_", "avcodec_dct_init", "ERR_get_string_table", "PKCS7_get_signed_attribute", "ff_amf_write_object_end", "ff_mov_get_lpcm_codec_id", "DES_decrypt3", "CMS_SignerInfo_get0_signer_id", "ff_yuv420p_to_rgba_neon_16", "DES_ede3_cfb64_encrypt", "ff_h264_flush_change", "ff_filter_graph_run_once", "tbEncryptionInvCipher", "ff_sbrdsp_init_arm", "X509_VERIFY_PARAM_free", "ssl_cert_select_current", "put_hevc_epel_s8_pixels_8_neon", "av_buffersink_get_frame_rate", "ssl3_get_server_hello", "ff_hevc_merge_idx_decode", "ff_free_stream", "_Z26GetRam_Sbr_guideVectorDiffi", "ssl3_read_n", "bn_add_words", "X509_http_nbio", "x264_mb_predict_mv_ref16x16", "X509_STORE_CTX_set_depth", "ff_copy_rectangle", "d2i_PKCS7_RECIP_INFO", "CRYPTO_dbg_get_options", "SSL_set_verify_result", "ff_put_h264_qpel8_mc00_neon", "__restore_core_regs", "avfilter_sub_matrix", "ERR_load_ECDH_strings", "BASIC_CONSTRAINTS_new", "DSA_SIG_new", "EC_GROUP_get_pentanomial_basis", "X509_STORE_set_purpose", "ERR_print_errors_fp", "d2i_EC_PUBKEY_fp", "ASN1_item_ex_i2d", "avio_open2", "av_md5_sum", "ssleay_rand_bytes", "ff_hevc_hls_mvd_coding", "ff_draw_rectangle", "SXNETID_free", "_Z21FDKhybridAnalysisOpenP18FDK_ANA_HYB_FILTERPljS1_j", "X509V3_EXT_add_alias", "SHA384_Final", "ECDSA_METHOD_set_app_data", "ASN1_PCTX_free", "ff_h264_idct_dc_add_12_c", "avcodec_get_pix_fmt_loss", "ff_hevc_annexb2mp4_buf", "EVP_camellia_256_ecb", "X509V3_EXT_get_nid", "av_opt_get_key_value", "d2i_PKCS7_SIGNED", "X509_PUBKEY_get", "av_read_image_line", "av_packet_get_side_data", "RSA_setup_blinding", "_Z26transportEnc_GetStaticBitsP12TRANSPORTENCi", "ff_scale_image", "CMS_add1_recipient_cert", "x264_threads_distribute_ratecontrol", "swr_convert", "X509_PURPOSE_get_count", "RSA_padding_add_X931", "av_bprint_clear", "add_hevc_qpel_s16_h2_8_neon", "x264_predict_4x4_v_c", "CRYPTO_dbg_free", "ff_yuv422p_to_argb_neon_32", "RSA_get_method", "_CONF_get_string", "d2i_X509_VAL", "x264_analyse_weight_frame", "ff_match_2uint16", "PKCS7_add_attrib_smimecap", "OCSP_RESPDATA_new", "ssl23_read", "EVP_PKEY_paramgen_init", "sws_isSupportedOutput", "X509_REVOKED_add1_ext_i2d", "ff_avg_h264_chroma_mc8_neon", "ff_fdct248_islow_8", "BN_get_word", "d2i_OCSP_SIGNATURE", "ff_put_wav_header", "ff_er_frame_start", "x264_macroblock_thread_allocate", "_Z19FreeWorkBufferCore2PPl", "tls1_process_sigalgs", "ff_network_init", "x264_validate_levels", "RSA_new_method", "_Z30adtsRead_GetRawDataBlockLengthP11STRUCT_ADTSi", "_CONF_get_section", "EVP_DecryptFinal", "ssl3_cbc_copy_mac", "ERR_load_CMS_strings", "ff_avg_pixels16_xy2_no_rnd_neon", "EVP_PKEY_copy_parameters", "ff_hevc_h_loop_filter_chroma_neon", "SSL_connect", "PKCS5_pbe_set", "i2d_X509_ALGOR", "FDKcalloc_L", "X509_REVOKED_set_serialNumber", "_Z11CreatePsDecPP6PS_DECi", "ASN1_OCTET_STRING_new", "SHA_Final", "ff_sbrdsp_init", "SSL_CTX_set_trust", "_Z18FDKaacEnc_bitCountPKsiiPi", "cms_ias_cert_cmp", "ERR_add_error_data", "BF_decrypt", "PKCS12_SAFEBAG_new", "sbrDecoder_Apply", "ff_avg_h264_qpel16_mc10_neon", "x264_encoder_maximum_delayed_frames", "X509_LOOKUP_hash_dir", "av_buffer_allocz", "cms_CompressedData_init_bio", "sbrEncoder_UpdateBuffers", "ff_hevc_deblocking_boundary_strengths_2017", "BIO_free_all", "sk_sort", "ENGINE_load_public_key", "av_fifo_generic_write", "_Z27FreeRam_aacEnc_BitCntrStatePP13BITCNTR_STATE", "EVP_aes_192_wrap", "avcodec_register_all", "avio_feof", "SSL_get_servername", "av_timecode_get_smpte_from_framenum", "i2s_ASN1_ENUMERATED", "ff_mp4_read_descr_len", "ASN1_generate_nconf", "dtls1_min_mtu", "_Z24FDKsbrEnc_EnvEncodeFrameP11SBR_ENCODERiPsjPjPhi", "ff_h264_v_loop_filter_luma_neon", "avcodec_set_dimensions", "ff_h264_chroma_dc_dequant_idct_9_c", "ASN1_NULL_new", "d2i_ASN1_TIME", "CRYPTO_get_locked_mem_functions", "_Z19FDKaacEnc_PnsDetectP10PNS_CONFIGP8PNS_DATAiiiPlPKiS3_PiPsiiiS3_S6_", "X509_VERIFY_PARAM_clear_flags", "ff_avg_h264_qpel16_mc21_neon", "BN_from_montgomery", "av_file_unmap", "BN_CTX_get", "_Z28FDKsbrEnc_initPsBandNrgScaleP11T_PS_ENCODE", "OCSP_REVOKEDINFO_new", "_Z21StatisticalEstimationP22CAacDecoderChannelInfo", "ff_formats_ref", "x264_plane_copy_c", "AUTHORITY_INFO_ACCESS_new", "x264_log", "ff_rtmp_packet_read_internal", "EC_KEY_new_by_curve_name", "EVP_aes_128_gcm", "avpicture_fill", "avio_seek_time", "CONF_get_number", "avcodec_encode_audio2", "_Z17GetRam_SbrDecoderi", "ff_pred8x8_l0t_dc_neon", "ff_hevc_transform_16x16_8_neon", "_Z27GetRequiredMemOverlapBufferv", "av_buffer_create", "ff_simple_idct_put_armv6", "ff_mdct_init", "CRYPTO_dbg_set_options", "PKCS7_DIGEST_new", "aacDecoder_ConfigRaw", "ENGINE_set_digests", "ff_hevc_pred_mode_decode", "X509_PURPOSE_get_by_id", "SSL_use_PrivateKey", "avcodec_default_get_format", "UI_dup_info_string", "EVP_CIPHER_CTX_init", "ff_avg_h264_qpel16_mc23_neon", "SSL_COMP_get_name", "_armv7_neon_probe", "_armv8_pmull_probe", "_Z9shellsortPhh", "dtls1_double_timeout", "SSL_set_cipher_list", "FDK_getValidBits", "x264_frame_shift", "RSA_set_ex_data", "add_hevc_qpel_s8_h2v3_8_neon", "av_opt_set_from_string", "av_pix_fmt_desc_next", "EC_KEY_get0_private_key", "RSAPublicKey_dup", "ff_tls_init", "ssl_parse_serverhello_use_srtp_ext", "ff_yuv422p_to_abgr_neon_32", "ff_hevc_dsp_init", "av_register_codec_parser", "av_format_set_data_codec", "ff_filter_graph_remove_filter", "ff_getSwsFunc", "ff_thread_get_buffer", "EVP_CipherInit_ex", "put_hevc_qpel_s16_h2v3_8_neon", "RSA_padding_add_PKCS1_type_2", "ENGINE_register_DH", "lh_free", "EC_POINT_dbl", "FDKfgets", "avg_hevc_epel_s4_pixels_8_neon", "av_opt_set_video_rate", "SSL_CTX_set_verify_depth", "OBJ_NAME_remove", "TLSv1_method", "CRYPTO_ex_data_new_class", "EVP_aes_192_ctr", "swri_audio_convert_free", "PEM_read_bio_DSA_PUBKEY", "CMS_unsigned_add1_attr_by_txt", "TLSv1_1_server_method", "pqueue_peek", "ff_sbr_qmf_deint_bfly_neon", "_Z24CTns_ReadDataPresentFlagP13FDK_BITSTREAMP8CTnsData", "ASN1_GENERALIZEDTIME_set", "DES_xcbc_encrypt", "OBJ_dup", "OPENSSL_atomic_add", "ff_amf_write_null", "NOTICEREF_new", "ffurl_size", "ssl3_free", "ff_h264_idct_add16_12_c", "av_get_pix_fmt_string", "X509_policy_node_get0_policy", "ec_GFp_simple_group_clear_finish", "PEM_write_X509_CERT_PAIR", "BIO_push", "EVP_bf_cbc", "SSL_get_peer_finished", "gcm_gmult_v8", "CMS_add1_crl", "_Z25FDKsbrEnc_Shellsort_fractPli", "sws_isSupportedInput", "av_buffer_get_opaque", "_Z27FreeRam_Sbr_guideVectorDiffPPl", "av_samples_set_silence", "d2i_OCSP_SERVICELOC", "ff_sbr_neg_odd_64_neon", "DTLSv1_method", "_Z16FDKaacEnc_QCMainP8QC_STATEPP7PSY_OUTPP6QC_OUTiP15CHANNEL_MAPPING17AUDIO_OBJECT_TYPEja", "ff_parse_sample_format", "ff_read_riff_info", "i2d_OCSP_CERTID", "ASN1_TIME_to_generalizedtime", "ff_avg_h264_qpel8_mc32_neon", "bn_expand2", "x264_intra_sad_x3_8x8c_neon", "EVP_seed_cbc", "OCSP_CERTID_new", "ff_hevc_cbf_cb_cr_decode", "avpriv_open", "OBJ_create_objects", "X509_set_version", "CONF_get_string", "_Z17FDKaacEnc_TnsSyncP8TNS_DATAPKS_P8TNS_INFOS4_iiPK10TNS_CONFIG", "_Z20FDKaacEnc_DownsampleP11DOWNSAMPLERPsiiS1_Pii", "_Z23GetRam_aacEnc_QCelementi", "av_image_get_linesize", "_Z30FDKaacEnc_CheckBandEnergyOptimPKlPiPKiiPlS4_i", "_Z22transportEnc_Latm_InitP11LATM_STREAMP13FDK_BITSTREAMP12CODER_CONFIGj14TRANSPORT_TYPEP13CSTpCallBacks", "X509_cmp_time", "EC_KEY_generate_key", "d2i_ASN1_BIT_STRING", "_Z33Hcr_State_BODY_SIGN_ESC__ESC_WORDP13FDK_BITSTREAMPv", "X509_digest", "ff_vector_fmac_scalar_neon", "sbrEncoder_GetEstimateBitrate", "X509_get_ext_by_critical", "ENGINE_get_table_flags", "ff_hevc_put_qpel_uw_h1v3_neon_8", "SSL_SESSION_get_ex_new_index", "ASN1_TIME_adj", "X509_CRL_set_lastUpdate", "_Z31FDKaacEnc_CalculateChaosMeasurePliS_", "MD4_Transform", "avcodec_is_open", "i2d_ASN1_GENERALSTRING", "X509_check_issued", "SSL_SRP_CTX_init", "av_add_index_entry", "CMS_RecipientInfo_decrypt", "ff_h264_idct_add8_422_14_c", "dtls1_read_failed", "X509_ATTRIBUTE_get0_type", "ec_GFp_simple_dbl", "pqueue_next", "av_memdup", "x264_reduce_fraction", "avformat_license", "ff_set_ref_count", "SHA1_Final", "d2i_PKCS8_PRIV_KEY_INFO_fp", "DIST_POINT_set_dpname", "x264_intra_sad_x3_8x16c_neon", "EC_KEY_precompute_mult", "OCSP_CRLID_free", "_Z4ifftiPlPi", "d2i_PKCS7_SIGN_ENVELOPE", "av_pkt_dump2", "CRYPTO_get_dynlock_value", "ff_fft_end", "GENERAL_NAME_set0_othername", "avcodec_string", "sk_dup", "BN_bn2hex", "d2i_PKCS7_ENC_CONTENT", "avfilter_link_get_channels", "Camellia_EncryptBlock_Rounds", "av_stream_get_side_data", "ASN1_tag2bit", "bn_mul_mont_fixed_top", "ff_read_packet", "X509_STORE_CTX_set_time", "av_bitstream_filter_close", "_Z28CProgramConfig_LookupElementP14CProgramConfigjjjPhP18AUDIO_CHANNEL_TYPES1_S1_P14MP4_ELEMENT_IDS4_", "EC_KEY_check_key", "ff_avg_pixels16_neon", "set_error_type", "av_opt_get_sample_fmt", "rgb15to24", "put_hevc_qpel_s8_h2v1_8_neon", "EVP_camellia_128_cfb1", "ff_command_queue_pop", "BIO_get_callback_arg", "ff_rtmp_packet_create", "DSO_new", "avformat_free_context", "SSL_CTX_use_RSAPrivateKey_file", "_Z25FDKaacEnc_InitElementBitsP8QC_STATEP15CHANNEL_MAPPINGiii", "a2d_ASN1_OBJECT", "ssl_set_cert_masks", "PEM_write_SSL_SESSION", "tls1_set_curves", "BIO_method_name", "ec_GFp_simple_point_clear_finish", "_Z20CProgramConfig_ResetP14CProgramConfig", "X509_STORE_get_by_subject", "X509_VERIFY_PARAM_add0_policy", "FDK_toolsGetLibInfo", "OCSP_CERTID_free", "av_crc", "av_vorbis_parse_frame", "ff_h264_decode_nal", "X509_LOOKUP_shutdown", "ec_GFp_simple_group_check_discriminant", "NAME_CONSTRAINTS_new", "ec_GFp_simple_point_set_to_infinity", "ff_h264chroma_init", "ff_h264_idct_add16_neon", "_Unwind_GetTextRelBase", "FDKaacEnc_Close", "ff_calculate_bounding_box", "EVP_PKEY_CTX_ctrl_str", "PEM_read_bio", "SSL_CTX_set_cookie_generate_cb", "lh_retrieve", "ENGINE_get_ECDH", "_Z21CreateStreamMuxConfigP11LATM_STREAMP13FDK_BITSTREAMiP13CSTpCallBacks", "ENGINE_get_digest", "EC_KEY_set_group", "X509_VERIFY_PARAM_set_flags", "d2i_PKCS8_bio", "cms_DigestedData_create", "i2d_DSA_PUBKEY_fp", "SSL_CTX_set_ssl_version", "ff_hevc_put_qpel_uw_pixels_neon_8", "OCSP_sendreq_nbio", "avfilter_process_command", "FDK_putBwd", "avformat_close_input", "RC2_decrypt", "SXNET_free", "EVP_aes_128_cfb8", "av_dv_codec_profile2", "put_hevc_qpel_s32_v1_8_neon", "x264_analyse_prepare_costs", "x264_intra_sad_x3_16x16", "ssl3_get_cert_status", "av_image_copy", "av_frame_unref", "BN_mod_exp_mont_word", "ECPARAMETERS_free", "X509_OBJECT_idx_by_subject", "av_codec_get_lowres", "EVP_camellia_256_ofb", "ASN1_PCTX_get_str_flags", "av_probe_input_format3", "EVP_MD_CTX_md", "CRYPTO_set_locking_callback", "rgb64to48_nobswap", "_Z23FreeRam_Sbr_quotaMatrixPPl", "avcodec_descriptor_get_by_name", "ff_framesync_init", "put_hevc_qpel_s32_h1v2_8_neon", "avg_hevc_qpel_s32_h3v2_8_neon", "PKCS7_content_new", "d2i_PKCS12_BAGS", "ASN1_TYPE_set_octetstring", "SHA224_Init", "_Z28FDKaacEnc_InitChannelMapping12CHANNEL_MODE13CHANNEL_ORDERP15CHANNEL_MAPPING", "d2i_PKCS12_MAC_DATA", "SSL_get_quiet_shutdown", "CONF_imodule_get_name", "tls1_set_curves_list", "aacDecoder_DecodeFrame", "x264_encoder_invalidate_reference", "policy_data_new", "COMP_zlib", "avformat_flush", "_Z28GetRam_Sbr_QmfStatesAnalysisi", "__gnu_Unwind_Restore_VFP", "__gnu_Unwind_Save_VFP_D_16_to_31", "EVP_aes_192_ccm", "EVP_PKEY_get0", "av_audio_resample_init", "pcmDmx_ReadDvbAncData", "SSL_get_srp_userinfo", "X509_find_by_subject", "cms_content_bio", "ff_rdft_end", "X509_NAME_ENTRY_free", "X509_NAME_set", "tls12_get_hash", "CMS_add_smimecap", "_Z9schur_divlli", "ff_hevc_transform_8x8_neon_8", "ssl3_pending", "PEM_read_bio_Parameters", "_Z10HcrDecoderP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "CONF_modules_finish", "ff_http_do_new_request", "ec_GFp_simple_cmp", "EVP_DigestVerifyInit", "ECDSA_METHOD_free", "sk_pop_free", "transform_8x8_add_00", "_Z22qmfAnaPrototypeFirSlotPliPKsiPs", "SSL_CTX_use_psk_identity_hint", "avcodec_get_type", "ASN1_OCTET_STRING_set", "sws_getConstVec", "ENGINE_set_DSA", "CONF_set_nconf", "lh_doall", "ff_listen", "dtls1_stop_timer", "av_frame_set_metadata", "_Z21FDKhybridAnalysisInitP18FDK_ANA_HYB_FILTER15FDK_HYBRID_MODEiii", "x264_frame_pop", "d2i_PKCS7_ENCRYPT", "ff_avg_h264_qpel8_mc31_neon", "ssl3_finish_mac", "ERR_load_RSA_strings", "add_hevc_qpel_s32_h1v2_8_neon", "ff_hevc_flush_dpb", "GENERAL_SUBTREE_new", "SSL_CTX_set_cert_store", "add_hevc_qpel_s16_h1v3_8_neon", "BN_lshift1", "ff_pred8x8_plane_neon", "i2d_X509_CERT_AUX", "setLimiterRelease", "GENERAL_NAME_dup", "av_frame_get_metadata", "EVP_PKEY_asn1_find_str", "_Z10CPns_ApplyPK8CPnsDataPK8CIcsInfoPlPKsS7_PK16SamplingRateInfoii", "_Z17FreeOverlapBufferPPl", "PEM_write_X509_REQ", "ff_sbr_hf_apply_noise_0_neon", "NETSCAPE_SPKI_sign", "X509_REQ_add_extensions", "RSA_generate_key_ex", "X509v3_get_ext", "avio_put_str16le", "EVP_PKEY_print_private", "engine_table_register", "BIO_puts", "SSL_CTX_set_client_CA_list", "x264_me_refine_bidir_rd", "SSL_COMP_add_compression_method", "ff_mov_write_packet", "i2d_SXNET", "sbrDecoder_drcDisable", "dtls1_get_queue_priority", "ec_GF2m_precompute_mult", "_Z24GetRam_SbrDecWorkBuffer2i", "ASN1_STRING_length_set", "sha1_block_data_order", "_Z10CRvlc_ReadP22CAacDecoderChannelInfoP13FDK_BITSTREAM", "FDKsbrEnc_EncodeOpd", "BN_GF2m_mod_sqr", "_Z23FDKaacEnc_AdjustBitrateP8QC_STATEP15CHANNEL_MAPPINGPiiii", "X509_STORE_set_trust", "CRL_DIST_POINTS_new", "avg_hevc_qpel_s32_h2v2_8_neon", "EVP_MD_CTX_test_flags", "add_hevc_qpel_s8_h2v2_8_neon", "EVP_PKEY_meth_set_cleanup", "x264_sync_frame_list_pop", "FDKcalloc", "av_vorbis_parse_reset", "ff_get_format", "ff_hevc_transform_32x32_8_neon", "PKCS12_pack_p7encdata", "av_aes_ctr_alloc", "_Z38GetRequiredMemRam_Sbr_detectionVectorsv", "ff_put_h264_qpel16_mc10_neon", "BIO_s_socket", "_Z21FDKaacEnc_psyMainInitP12PSY_INTERNAL17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPINGiiiiiiijm", "cms_RecipientInfo_kari_encrypt", "sk_unshift", "SSL_set_ex_data", "x264_quant_luma_dc_trellis", "NCONF_load", "_Z24FreeRam_TransportEncoderPP12TRANSPORTENC", "_Z36FDKsbrEnc_resetSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEPKhi", "_Z22FDKsbrEnc_InitPSEncodeP11T_PS_ENCODE8PS_BANDSl", "CRYPTO_mem_leaks", "d2i_EDIPARTYNAME", "CMS_SignerInfo_get0_pkey_ctx", "ff_avg_h264_qpel16_mc30_neon", "ssl3_send_client_certificate", "_Z18CConcealment_ApplyP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoPK16SamplingRateInfoihij", "chroma_mc_fixed_bs_put", "ff_avg_h264_qpel8_mc13_neon", "ffurl_shutdown", "_Z24GetRam_SbrDecWorkBuffer1i", "i2d_CMS_ContentInfo", "BN_set_params", "ff_interleave_add_packet", "PKCS5_PBKDF2_HMAC_SHA1", "av_get_pcm_codec", "X509_CRL_http_nbio", "X509_REQ_get_attr_count", "_Z7fPowIntliiPi", "EVP_aes_256_cbc_hmac_sha256", "X509_get_ext_by_NID", "x264_predict_8x8c_p_c", "RC2_encrypt", "PEM_write_bio_X509_CERT_PAIR", "SSL_dup_CA_list", "BIO_new_mem_buf", "ENGINE_get_ctrl_function", "_Z24FDKaacEnc_BlockSwitchingP23BLOCK_SWITCHING_CONTROLiiPKs", "SSL_CTX_use_certificate_file", "_Z19CProgramConfig_InitP14CProgramConfig", "ff_avg_h264_qpel8_mc10_neon", "av_sub_i", "ff_generate_wave_table", "x264_filler_write", "EVP_rc2_cfb64", "EVP_cast5_ofb", "SSL_get_verify_result", "ERR_load_PKCS12_strings", "ssl_cert_add0_chain_cert", "av_packet_side_data_name", "ff_h264_idct_add_9_c", "i2d_PKCS7_ENVELOPE", "OBJ_add_object", "EVP_CIPHER_nid", "ff_get_audio_buffer", "av_opt_freep_ranges", "DSA_SIG_free", "avcodec_get_edge_width", "av_opt_get_dict_val", "ff_hevcdsp_init_neon", "SSL_COMP_get_compression_methods", "EVP_CIPHER_CTX_set_padding", "X509_get_pubkey_parameters", "ASN1_TYPE_set1", "_Z12mapSineFlagsPhiS_PiiPa", "ff_pixblockdsp_init_arm", "put_hevc_qpel_s32_h1_8_neon", "i2d_PKCS12", "PEM_read_X509_REQ", "x264_analyse_free_costs", "asn1_ex_c2i", "_Z32CLatmDemux_ReadAuChunkLengthInfoP13FDK_BITSTREAM", "av_packet_merge_side_data", "avfilter_pad_count", "DES_ncbc_encrypt", "FDKsbrEnc_WritePSBitstream", "CRYPTO_ccm128_encrypt_ccm64", "aes_v8_decrypt", "av_set_cpu_flags_mask", "_Z22FDKaacEnc_updateBitresP15CHANNEL_MAPPINGP8QC_STATEPP6QC_OUT", "ssl3_handshake_write", "ENGINE_set_load_privkey_function", "ssl_ok", "SSL_set_accept_state", "CMS_ContentInfo_free", "ERR_error_string_n", "av_frame_get_pkt_size", "i2d_X509_CRL", "av_opt_get_int", "ff_init_gamma_convert", "cms_set1_SignerIdentifier", "av_bprint_append_data", "i2d_X509_NAME", "TXT_DB_write", "SSL_certs_clear", "BN_set_bit", "av_memcpy_backptr", "ff_hevc_slice_rpl", "d2i_X509_fp", "EVP_aes_256_cbc_hmac_sha1", "ssl3_default_timeout", "ff_imdct_half_c", "CMS_add_standard_smimecap", "FDKfread", "_Z17GetRam_SbrElementi", "_Z27GetRam_PsQmfStatesSynthesisi", "ASN1_PCTX_get_flags", "add_hevc_qpel_s32_v2_8_neon", "BIO_read", "avformat_new_stream", "SHA1_Init", "TXT_DB_create_index", "SSL_has_matching_session_id", "avfilter_graph_queue_command", "ff_h264_idct8_add4_9_c", "EVP_MD_do_all", "X509_REQ_set_version", "SSL_set1_param", "BN_GF2m_mod", "__gnu_unwind_frame", "ASN1_item_digest", "CRYPTO_free", "SSL_accept", "ERR_get_next_error_library", "chroma_mc_fixed_bs_avg_dsp", "av_tree_node_alloc", "POLICYINFO_free", "X509_REQ_add_extensions_nid", "ssl3_get_new_session_ticket", "ff_prores_idct", "DSO_global_lookup", "ssl3_cbc_digest_record", "av_codec_next", "BN_BLINDING_create_param", "ECDSA_get_default_method", "ECDSA_METHOD_set_sign", "EVP_cast5_cbc", "BN_mod_exp", "rgb15tobgr16", "X509V3_conf_free", "BIO_vprintf", "X509at_add1_attr", "ENGINE_register_ECDH", "x264_predict_lossless_8x8", "___Unwind_Resume", "_Z5fLog2li", "PEM_read_bio_PUBKEY", "EVP_PKEY_meth_get_copy", "d2i_ACCESS_DESCRIPTION", "CRYPTO_get_add_lock_callback", "bn_sqr_comba8", "add_hevc_epel_s4_hv_8_neon", "ERR_get_error_line_data", "aacEncEncode", "ff_idctdsp_init_armv6", "ff_h264_idct8_add_8_c", "avcodec_find_best_pix_fmt2", "_Z7HcrInitP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "BN_mod_mul", "d2i_CMS_bio", "av_audio_convert_free", "_Z33FDKsbrEnc_CalculateTonalityQuotasP16SBR_TON_CORR_ESTPPlS2_ii", "tls12_get_psigalgs", "X509_NAME_entry_count", "sws_scale", "SSL_CTX_use_serverinfo", "EVP_camellia_256_cfb128", "av_codec_get_pkt_timebase", "_Z27FDKsbrEnc_getSbrStopFreqRAWii", "_Z30FDKaacEnc_codeScalefactorDeltaiP13FDK_BITSTREAM", "ff_nv12_to_argb_neon_32", "DSA_size", "av_opt_eval_int", "BIO_dump_indent_cb", "ff_h264_field_end", "ff_sbr_qmf_pre_shuffle_neon", "X509_STORE_get1_crls", "ff_dualinput_filter_frame", "ff_sbr_hf_gen_neon", "CRYPTO_get_dynlock_create_callback", "ff_video_frame_pool_init", "BN_div", "MD4_Final", "createLimiter", "ff_hevc_transform_add_4x4_neon_8", "X509_STORE_CTX_set0_crls", "ssl_set_client_disabled", "_Z35transportEnc_LatmAdjustSubframeBitsP11LATM_STREAMPi", "avpriv_scalarproduct_float_c", "ff_id3v2_tag_len", "ERR_load_OBJ_strings", "av_log_get_level", "av_dv_codec_profile", "avpriv_get_raw_pix_fmt_tags", "X509_LOOKUP_by_issuer_serial", "d2i_AutoPrivateKey", "X509_NAME_print_ex_fp", "set_error_code", "PKCS7_SIGN_ENVELOPE_free", "av_read_frame", "put_hevc_qpel_s8_pixels_8_neon", "X509_EXTENSION_new", "SHA256_Update", "av_bitstream_filter_filter", "ff_hevc_put_qpel_uw_h3_neon_8", "ff_rdft_init", "x264_threadslice_cond_broadcast", "BN_mod_exp_simple", "BIO_new_file", "ripemd160_block_data_order", "av_vlog", "BIO_s_mem", "ff_hevc_hls_residual_coding_2017", "i2d_PKCS8_bio", "X509_get_default_cert_file_env", "EVP_MD_pkey_type", "bn_mul_comba8", "x264_macroblock_write_cavlc", "_Z10CalcLdDatal", "avfilter_init_str", "OPENSSL_showfatal", "EC_GROUP_copy", "x264_predict_8x16c_init", "_Z19createLppTransposerP13SBR_LPP_TRANSP19TRANSPOSER_SETTINGSiPhiiiiS3_ijii", "ff_hevc_put_pixels_w8_neon_8", "_Z32GetRequiredMemRam_Sbr_signMatrixv", "ff_sbr_apply", "FDKmemset", "EVP_idea_cfb64", "ec_GFp_simple_is_at_infinity", "CRYPTO_cfb128_1_encrypt", "avg_hevc_qpel_s16_h2_8_neon", "avg_hevc_qpel_s32_h1v1_8_neon", "X509_CRL_cmp", "ec_GF2m_simple_point_clear_finish", "avio_get_str16le", "d2i_RSAPublicKey", "X509_gmtime_adj", "ssl3_send_alert", "_Z22transportEnc_LatmWriteP11LATM_STREAMP13FDK_BITSTREAMiiP13CSTpCallBacks", "ASN1_INTEGER_cmp", "x264_picture_alloc", "SSL_CTX_set_tmp_dh_callback", "av_format_set_subtitle_codec", "ff_fdctdsp_init", "transform_8x8_add_44_neon", "X509_policy_check", "ff_get_qtpalette", "avg_hevc_epel_s8_v_8_neon", "i2d_OTHERNAME", "X509_STORE_CTX_get0_current_issuer", "CMS_SignerInfo_cert_cmp", "_Z26FDKaacEnc_QuantizeSpectrumiiiPiPliS_Ps", "ff_add_pixels_clamped_armv6", "ff_pred16x16_vert_neon", "ec_precompute_mont_data", "OCSP_RESPONSE_new", "ff_nv21_to_argb_neon_16", "EVP_PKEY_meth_set_ctrl", "DSA_up_ref", "av_fifo_space", "i2d_PKCS8_PRIV_KEY_INFO_fp", "OCSP_set_max_response_length", "X509V3_add_value_uchar", "av_get_sample_fmt", "ff_h264_get_slice_type", "DSO_set_name_converter", "_Z16CopyAlignedBlockP10FDK_BITBUFPhj", "swscale_license", "i2d_PKCS7_RECIP_INFO", "swr_set_matrix", "BIO_method_type", "FDK_byteAlign", "ff_rtmp_calc_digest_pos", "ff_mov_read_esds", "_Z17FDKgetWindowSlopeii", "_Z17CJointStereo_ReadP13FDK_BITSTREAMP16CJointStereoDataiij", "av_sha_init", "add_hevc_qpel_s16_pixels_8_neon", "__adddf3", "ASN1_PRINTABLE_new", "CMS_signed_add1_attr", "X509_NAME_get_entry", "ff_pred8x8_l00_dc_neon", "ec_GFp_simple_invert", "x264_cabac_mb_skip", "ff_pred16x16_hor_neon", "av_write_image_line", "PEM_write_bio_PrivateKey", "ff_simple_idct48_add", "EVP_PKEY_asn1_new", "bsaes_ctr32_encrypt_blocks", "ec_GFp_mont_field_mul", "d2i_RSA_PUBKEY_fp", "i2d_OCSP_SINGLERESP", "X509_TRUST_cleanup", "EVP_PKEY_CTX_set_app_data", "EVP_des_ede_ecb", "ff_hevc_deblocking_boundary_strengths_neon", "RSA_new", "X509V3_add_value_bool_nf", "ff_crcA001_update", "av_mul_q", "x264_sei_recovery_point_write", "ASN1_STRING_print_ex", "SSL_get_srtp_profiles", "av_packet_free", "tls1_enc", "_Z21transportDec_SetParamP12TRANSPORTDEC11TPDEC_PARAMi", "put_hevc_qpel_s8_v1_8_neon", "X509_CRL_digest", "ERR_load_PKCS7_strings", "ff_hevc_transform_4x4_neon_8", "av_stream_set_recommended_encoder_configuration", "TLSv1_1_client_method", "X509_CRL_set_nextUpdate", "BIO_set", "RAND_status", "av_gcd", "SSL_get_info_callback", "X509_get_serialNumber", "FDKsin", "ff_h264_direct_dist_scale_factor", "idea_ecb_encrypt", "av_get_codec_tag_string", "i2d_CERTIFICATEPOLICIES", "d2i_PKCS8_fp", "avio_rb24", "ssl_cert_set0_chain", "swr_is_initialized", "EVP_CIPHER_CTX_free", "tls1_check_curve", "PKCS7_signatureVerify", "X509_CRL_set_version", "EVP_aes_256_gcm", "SXNET_get_id_asc", "avio_put_str16be", "ff_fft_end_fixed_32", "_Z17GetRam_SbrChanneli", "CRYPTO_malloc_locked", "ff_init_vlc_sparse", "DES_ecb_encrypt", "_Z29FreeRam_aacEnc_PsyInputBufferPPs", "ec_GFp_simple_oct2point", "ERR_peek_last_error_line", "PKCS7_digest_from_attributes", "HMAC_CTX_init", "av_d2q", "i2d_X509_fp", "luma_mc_fixed_bs_add", "x264_intra_satd_x3_16x16_neon", "a2i_GENERAL_NAME", "avformat_get_riff_audio_tags", "put_hevc_qpel_s32_h3v1_8_neon", "SHA256_Init", "EVP_PKEY_set_type_str", "ENGINE_unregister_RAND", "PEM_read_bio_PKCS8_PRIV_KEY_INFO", "ENGINE_get_default_DSA", "ff_amf_tag_size", "WAV_OutputClose", "PKCS12_free", "PEM_write_bio_PUBKEY", "_Z25FreeRam_aacEnc_AacEncoderPP7AAC_ENC", "_Z29CLatmDemux_GetOtherDataLengthP10CLatmDemux", "ff_mov_cenc_free", "ff_simple_idct_neon", "HMAC_CTX_cleanup", "s2i_ASN1_OCTET_STRING", "_Z18adtsRead_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ff_jref_idct_put", "ff_rtmp_check_alloc_array", "ssl_cert_add1_chain_cert", "ff_hevc_put_qpel_uw_pixels_w24_neon_8", "PEM_read_EC_PUBKEY", "ff_put_pixels8_x2_neon", "EVP_rc4", "EVP_PKEY_meth_set_verify", "ff_planar_sample_fmts", "OCSP_REQINFO_new", "put_hevc_qpel_s16_h2v2_8_neon", "av_stream_get_end_pts", "ECDH_KDF_X9_62", "avio_write", "EVP_MD_do_all_sorted", "d2i_ECPrivateKey_bio", "ff_avg_h264_qpel16_mc32_neon", "add_hevc_epel_s16_hv_8_neon", "DTLSv1_client_method", "SSL_set_state", "av_log_get_flags", "DSO_get_loaded_filename", "TLSv1_server_method", "X509_subject_name_hash", "pqueue_pop", "x264_mb_predict_mv_16x16", "X509_REVOKED_free", "X509_PURPOSE_cleanup", "av_guess_codec", "X509_REQ_digest", "ff_framesync_filter_frame", "ECDSA_do_sign", "EVP_PKEY_verify", "BN_mod_lshift1", "av_parse_ratio", "BN_bn2dec", "X509_STORE_CTX_init", "x264_slicetype_decide", "ff_imdct_half_c_fixed", "EVP_MD_CTX_destroy", "ff_yuv422p_to_rgba_neon_16", "UI_get_input_flags", "ff_h264_idct_add16_9_c", "ASN1_PRINTABLESTRING_new", "ASN1_TIME_diff", "EVP_PKEY_print_params", "_Z26GetRam_Sbr_freqBandTableHIi", "EVP_PKEY_get_default_digest_nid", "ff_crc04C11DB7_update", "ASN1_STRING_cmp", "aacDecoder_GetLibInfo", "ff_yuv2rgb_c_init_tables", "put_hevc_qpel_s32_h2v1_8_neon", "BN_gcd", "put_hevc_epel_s4_h_8_neon", "SSL_do_handshake", "tbEncryptionRelease", "i2d_X509_CINF", "ff_h264_fill_mbaff_ref_list", "BN_CTX_free", "ff_hyscale_fast_c", "PEM_read_ECPrivateKey", "BN_GF2m_mod_solve_quad_arr", "X509_TRUST_add", "x264_frame_copy_picture", "EVP_aes_128_ecb", "tls1_change_cipher_state", "pcmDmx_SetMatrixMixdownFromPce", "ff_amf_read_string", "EC_KEY_copy", "PKCS7_add_signed_attribute", "d2i_X509_CRL_INFO", "bn_sqr_normal", "i2d_DSAPrivateKey_fp", "EVP_PKEY_get1_DH", "PKCS12_unpack_p7data", "x264_noise_reduction_update", "_Z17FDKsbrEnc_AddLeftPiS_i", "_Z8fDivNormllPi", "av_cpb_properties_alloc", "dtls1_default_timeout", "PKEY_USAGE_PERIOD_new", "USERNOTICE_new", "ERR_load_CRYPTO_strings", "_Z22CChannelElement_DecodePP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoP16SamplingRateInfoji", "SSL_alert_desc_string_long", "x264_threadpool_delete", "pqueue_new", "ec_GFp_simple_make_affine", "DES_ofb64_encrypt", "EVP_des_ede3_cfb1", "SSL_CTX_set_default_passwd_cb", "_Z14InitInvSqrtTabv", "_Z25aacDecoder_drcMarkPayloadP8CDrcInfoP13FDK_BITSTREAM23AACDEC_DRC_PAYLOAD_TYPE", "EVP_CipherFinal_ex", "DH_generate_parameters_ex", "av_frame_get_pkt_pos", "CONF_imodule_get_value", "avpriv_mpa_decode_header", "PEM_write_DHparams", "RSA_blinding_on", "d2i_NETSCAPE_SPKI", "ec_GFp_mont_group_set_curve", "EVP_PKEY_get_attr_by_NID", "CRYPTO_cfb128_8_encrypt", "ec_GF2m_simple_group_finish", "ff_hevc_split_packet", "ff_h264_check_intra_pred_mode", "_Z16CAacDecoder_InitP20AAC_DECODER_INSTANCEPK21CSAudioSpecificConfig", "i2s_ASN1_OCTET_STRING", "i2d_USERNOTICE", "av_codec_is_encoder", "ff_h264chroma_init_arm", "ff_prefetch_arm", "PKCS8_decrypt", "ff_mdct_calc_c", "tls1_alert_code", "ff_pred16x16_128_dc_neon", "avutil_license", "BN_set_negative", "ec_GFp_simple_point_get_affine_coordinates", "_Z25qmfSynthesisFilteringSlotP15QMF_FILTER_BANKPKlS2_iiPsiPl", "pitem_free", "i2v_ASN1_BIT_STRING", "add_hevc_qpel_s16_h3v2_8_neon", "dtls1_get_timeout", "d2i_POLICYINFO", "EVP_des_ede_cfb64", "av_frame_set_colorspace", "x264_sync_frame_list_init", "av_format_get_data_codec", "X509_subject_name_cmp", "EVP_des_ede3_ecb", "NCONF_get_section", "ff_h264_idct_add8_422_9_c", "av_aes_ctr_free", "_Z16GetOverlapBufferi", "swr_free", "ff_frame_thread_free", "d2i_PUBKEY_bio", "_Z34GetRequiredMemRam_aacEnc_QCelementv", "PBE2PARAM_free", "X509_get_default_cert_area", "OBJ_cleanup", "EVP_EncryptUpdate", "SSL_check_private_key", "X509_REVOKED_get_ext_by_OBJ", "swri_realloc_audio", "x264_sei_buffering_period_write", "i2a_ACCESS_DESCRIPTION", "ff_h264_idct_add_12_c", "ff_reduce_index", "av_application_did_tcp_connect_fd", "ff_avg_h264_qpel8_mc11_neon", "_Z22FDKhybridAnalysisApplyP18FDK_ANA_HYB_FILTERPKlS2_PlS3_", "_Z24sbrGetChannelPairElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAS2_P13FDK_BITSTREAMji", "ff_h264_idct8_add_10_c", "ff_update_cur_dts", "ff_write_chained", "ff_pred16x16_plane_neon", "av_format_set_opaque", "NETSCAPE_SPKI_verify", "ff_mov_get_channel_layout_tag", "swri_audio_convert_init_arm", "EC_POINT_get_affine_coordinates_GF2m", "_Z23transportEnc_GetPCEBits12CHANNEL_MODEii", "SSL_CTX_get0_privatekey", "EVP_rc2_ecb", "ssl3_ctx_callback_ctrl", "_Z34FDKaacEnc_PreProcessPnsChannelPairiPlS_S_S_S_P10PNS_CONFIGP8PNS_DATAS3_", "d2i_OCSP_RESPID", "SSL_CTX_set_next_protos_advertised_cb", "EVP_des_cbc", "PEM_read_SSL_SESSION", "RSA_padding_check_none", "av_max_alloc", "X509_LOOKUP_free", "av_fft_calc", "CONF_imodule_get_flags", "i2d_OCSP_ONEREQ", "ff_thread_ref_frame", "_Z16FDKaacEnc_QCInitP8QC_STATEP7QC_INIT", "avcodec_encode_subtitle", "CMS_RecipientInfo_kari_get0_reks", "EVP_DigestUpdate", "UI_add_verify_string", "SHA_Init", "_Z18GetRam_ParamStereoi", "ENGINE_get_cipher", "X509_ATTRIBUTE_create_by_OBJ", "X509_NAME_digest", "ff_network_close", "X509_REQ_INFO_free", "EVP_seed_ecb", "MDC2_Final", "SSL_CTX_set_alpn_protos", "avformat_match_stream_specifier", "av_md5_update", "X509_check_akid", "X509_get_issuer_name", "CRYPTO_get_ex_data_implementation", "DSO_get_method", "PKCS7_SIGNED_free", "av_expr_eval", "bn_cmp_words", "CRYPTO_THREADID_set_callback", "avcodec_get_frame_class", "set_httpdns_ip", "WHIRLPOOL_Init", "EVP_EncryptFinal_ex", "_Unwind_VRS_Pop", "av_format_get_open_cb", "avfilter_init_filter", "x264_prefetch_fenc", "av_hash_final", "av_log2_16bit", "av_timecode_init", "sws_shiftVec", "pcmDmx_GetLibInfo", "ff_amf_get_field_value", "EVP_CipherInit", "dtls1_get_ccs_header", "ff_mdct_init_fixed_32", "av_audio_fifo_space", "ASN1_UTCTIME_cmp_time_t", "CRYPTO_num_locks", "avcodec_register", "BN_uadd", "ff_h264_pred_init", "ENGINE_get_DSA", "av_parser_init", "ff_h264_idct8_add4_10_c", "ASN1_STRING_type", "x264_predict_8x8_init_arm", "ff_merge_channel_layouts", "PKCS7_ISSUER_AND_SERIAL_new", "_Z25FDKsbrEnc_DestroyPSEncodePP11T_PS_ENCODE", "DH_new_method", "SSL_CTX_set_timeout", "d2i_RSAPrivateKey_fp", "BF_ofb64_encrypt", "put_hevc_qpel_s32_h3_8_neon", "ff_hevc_transform_add_32x32_neon_8", "ASN1_IA5STRING_free", "ff_mpa_synth_init_fixed", "av_blowfish_init", "OPENSSL_rdtsc", "GENERAL_NAME_get0_otherName", "EVP_seed_ofb", "_Z34GetRequiredMemRam_TransportDecoderv", "SHA384_Init", "BASIC_CONSTRAINTS_free", "sws_get_class", "av_hwaccel_next", "SSL_get_shared_ciphers", "a2i_IPADDRESS_NC", "UI_ctrl", "cms_set1_ias", "SSL_SESSION_get_timeout", "avio_read_to_bprint", "PKCS7_DIGEST_free", "BN_clear_free", "DSO_METHOD_openssl", "ff_simple_idct_put_10", "shuffle_bytes_1230", "i2d_ASN1_PRINTABLE", "EVP_des_cfb1", "add_hevc_qpel_s8_h1v2_8_neon", "ENGINE_unregister_DH", "X509_NAME_ENTRY_new", "EVP_PKEY_meth_get_verifyctx", "_Z21FDKaacEnc_GetPnsParamP11NOISEPARAMSiiiPKiPiii", "EC_GROUP_have_precompute_mult", "CRYPTO_get_mem_ex_functions", "av_buffer_pool_get", "X509_CRL_get_meth_data", "av_probe_input_format", "X509_STORE_add_cert", "_Z10ApplyToolsPP22CAacDecoderChannelInfoPK16SamplingRateInfoji", "ff_nv12_to_rgba_neon_16", "av_fast_padded_mallocz", "i2d_OCSP_CERTSTATUS", "ENGINE_register_RAND", "whirlpool_block", "d2i_ECParameters", "ff_mdct_end", "X509V3_EXT_add_conf", "BIO_asn1_set_prefix", "__gedf2", "ff_framesync_request_frame", "swr_get_out_samples", "FDKstrncmp", "CRYPTO_get_new_lockid", "i2d_ASN1_PRINTABLESTRING", "ENGINE_pkey_asn1_find_str", "RAND_egd_bytes", "d2i_ASN1_PRINTABLE", "X509_NAME_ENTRY_set_data", "PBKDF2PARAM_new", "ff_h264_idct8_add_14_c", "ssl_cert_set_cert_cb", "SSL_CTX_set_tmp_rsa_callback", "d2i_RSAPublicKey_bio", "ff_frame_thread_encoder_init", "EVP_PKEY_new_mac_key", "BN_get_params", "X509_ATTRIBUTE_create_by_NID", "avio_rl64", "__gnu_Unwind_Restore_VFP_D", "ssl_undefined_void_function", "_Z25Hcr_State_BODY_SIGN__SIGNP13FDK_BITSTREAMPv", "PEM_read_PKCS7", "EVP_CIPHER_CTX_get_app_data", "ENGINE_get_default_DH", "_Z19FreeWorkBufferCore1PP16CWorkBufferCore1", "UI_dup_input_boolean", "SSL_set_session_id_context", "x264_predict_16x16_init", "avfilter_open", "X509_STORE_CTX_get1_issuer", "i2d_X509", "add_hevc_qpel_s32_h1_8_neon", "ff_video_frame_pool_uninit", "ff_gradfun_filter_line_c", "CMS_RecipientInfo_ktri_cert_cmp", "ec_GF2m_simple_group_get_curve", "ssl23_connect", "policy_cache_free", "SSL_set_wfd", "_Z17FDKaacEnc_BCClosePP13BITCNTR_STATE", "_Z35GetRequiredMemRam_aacEnc_PsyElementv", "GENERAL_NAME_new", "_Z17GetRam_SbrEncoderi", "OCSP_CRLID_new", "ff_weight_h264_pixels_4_neon", "av_small_strptime", "SXNET_add_id_asc", "_Z28GetRequiredMemRam_SbrChannelv", "ff_framesync_drop", "x264_intra_satd_x3_16x16", "ff_h264_idct8_add4_neon", "DH_get_1024_160", "EVP_rc2_cbc", "EC_GF2m_simple_method", "av_tea_alloc", "AES_set_decrypt_key", "x264_param_parse", "OCSP_REQINFO_free", "av_tree_insert", "x264_lookahead_put_frame", "av_dirname", "SSL_alert_desc_string", "ERR_set_mark", "get_tcp_timeout", "av_compare_ts", "_Z21FDKaacEnc_noiseDetectPlPiiPKiPsP11NOISEPARAMSS3_", "GENERAL_NAME_cmp", "av_sha512_alloc", "av_base64_encode", "avpriv_frame_get_metadatap", "av_sha512_init", "av_timecode_make_string", "bn_to_mont_fixed_top", "add_hevc_qpel_s8_h1v3_8_neon", "SSL_set_session_ticket_ext_cb", "EC_GROUP_set_curve_GF2m", "i2d_PrivateKey_bio", "d2i_OCSP_CERTID", "OCSP_REQ_CTX_free", "av_bitstream_filter_next", "DES_set_key", "d2i_OCSP_REVOKEDINFO", "sws_setColorspaceDetails", "avg_hevc_qpel_s8_v2_8_neon", "BF_cfb64_encrypt", "__gnu_Unwind_Save_WMMXC", "d2i_X509_bio", "X509_STORE_CTX_get1_chain", "ff_network_wait_fd", "RAND_SSLeay", "ff_mpadsp_apply_window_fixed_armv6", "EVP_PKEY_asn1_set_item", "d2i_ECPKPARAMETERS", "CRYPTO_free_ex_data", "EVP_MD_block_size", "_Z36GetRequiredMemRam_aacEnc_ElementBitsv", "av_murmur3_update", "av_expr_parse", "swr_get_class", "SSL_add_dir_cert_subjects_to_stack", "ASN1_GENERALIZEDTIME_print", "_Z28InvMdctTransformLowDelay_fdkPliPsS_ii", "ff_h264_pred_init_arm", "x264_cabac_block_residual_rd_c", "ff_put_h264_qpel8_mc22_neon", "OCSP_REQ_CTX_get0_mem_bio", "ff_fft16_vfp", "OBJ_find_sigid_algs", "x264_picture_init", "swri_get_dither", "BN_sub", "ff_simple_idct_12", "_Z27transportDec_ReadAccessUnitP12TRANSPORTDECj", "PKCS7_get_signer_info", "EVP_PKEY_set1_EC_KEY", "destroyLimiter", "EVP_PKEY_asn1_set_ctrl", "CMAC_resume", "ff_mpadsp_apply_window_float", "CMS_dataInit", "ffurl_connect", "SSL_new", "ff_draw_round_to_sub", "ff_pred8x8_top_dc_neon", "bn_sqr_comba4", "engine_pkey_meths_free", "av_get_profile_name", "avfilter_graph_config", "av_format_set_open_cb", "_Z18FDKaacEnc_QCOutNewPP6QC_OUTiiiPh", "DES_encrypt3", "transform_32x32_add_neon_row", "av_register_all", "ff_simple_idct_put_armv5te", "X509_ATTRIBUTE_new", "ff_mp4_parse_es_descr", "UI_method_get_writer", "ssl3_cleanup_key_block", "d2i_GENERAL_NAME", "ASN1_PRINTABLE_free", "PKCS7_add_attrib_content_type", "_Z32GetRam_aacEnc_AdjThrStateElementi", "d2i_PrivateKey", "av_downmix_info_update_side_data", "ASN1_BIT_STRING_set_bit", "PKCS12_MAC_DATA_free", "_Z15DecodeHuffmanCWPA2_KaP13FDK_BITSTREAM", "ff_avg_pixels8_x2_neon", "WAV_InputClose", "DH_size", "ENGINE_set_ciphers", "FDK_DeleteBitBuffer", "ff_sdp_write_media", "_Z23GetRam_aacEnc_QCchanneliPh", "BIO_new_CMS", "SSL_CTX_sess_set_new_cb", "i2d_GENERAL_NAMES", "ff_id3v1_read", "ERR_pop_to_mark", "add_hevc_qpel_s16_v3_8_neon", "ff_http_match_no_proxy", "ECDH_set_default_method", "EC_POINT_bn2point", "SSL_use_PrivateKey_file", "CRYPTO_ccm128_decrypt", "SSL_CTX_set_ex_data", "av_murmur3_init", "av_get_planar_sample_fmt", "RSA_padding_check_SSLv23", "i2s_ASN1_INTEGER", "av_match_list", "_Z28FreeRam_Sbr_detectionVectorsPPh", "pcmDmx_SetParam", "ff_yuv422p_to_abgr_neon_16", "_Z17FDKaacEnc_QCClosePP8QC_STATEPP6QC_OUT", "ff_ps_stereo_interpolate_neon", "_Z26CBlock_ReadScaleFactorDataP22CAacDecoderChannelInfoP13FDK_BITSTREAMj", "_Z10CTns_ApplyP8CTnsDataPK8CIcsInfoPlPK16SamplingRateInfoi", "OPENSSL_gmtime", "ff_simple_idct_10", "OCSP_BASICRESP_free", "ff_hevc_h_loop_filter_luma_neon", "_Z32FDKsbrEnc_LSI_divide_scale_fractlll", "SMIME_text", "EVP_add_digest", "ff_all_samplerates", "av_compare_mod", "_Z30GetAacDecoderStaticChannelInfoi", "policy_node_match", "set_cdn_ip", "CRYPTO_THREADID_set_pointer", "BN_clear_bit", "SSL_set_session_secret_cb", "EVP_des_cfb64", "av_get_sample_fmt_name", "X509_TRUST_get0_name", "X509_get_default_cert_dir", "ff_hevc_get_ref_list", "av_pkt_dump_log2", "SSL_CTX_get0_param", "SSL_CTX_get_verify_callback", "i2d_ASN1_UNIVERSALSTRING", "ERR_load_EC_strings", "ff_ps_ctx_init", "CRYPTO_realloc", "EVP_rc2_40_cbc", "x264_cabac_encode_flush", "avpriv_io_delete", "d2i_OCSP_ONEREQ", "chroma_mc_fixed_bs_put_avg", "add_hevc_epel_s4_pixels_8_neon", "CRYPTO_set_dynlock_destroy_callback", "ff_sbr_sum_square_neon", "ff_parse_mpeg2_descriptor", "BN_sqr", "NAME_CONSTRAINTS_free", "ASN1_parse_dump", "private_AES_set_encrypt_key", "CMS_unsigned_get_attr_count", "av_int_list_length_for_size", "avformat_alloc_context", "_Z29FDKsbrEnc_extractSbrEnvelope1P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP18SBR_BITSTREAM_DATAP11ENV_CHANNELP11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATA", "_Z11imdct_blockP6mdct_tPlS1_PKsiiiPK8FIXP_SPKiS6_il", "EC_curve_nid2nist", "ff_put_pixels16_y2_neon", "sws_normalizeVec", "EXTENDED_KEY_USAGE_new", "EVP_EncodeFinal", "av_tea_crypt", "X509_OBJECT_retrieve_match", "dtls1_set_message_header", "x264_intra_sad_x3_16x16_neon", "PKCS5_pbkdf2_set", "ff_raw_audio_read_header", "_Z20GetRam_SbrDecChanneli", "d2i_RSAPrivateKey_bio", "PEM_write_bio_SSL_SESSION", "X509_ATTRIBUTE_set1_data", "SSL_CTX_set_cipher_list", "ERR_load_ENGINE_strings", "_Z9CHcr_ReadP13FDK_BITSTREAMP22CAacDecoderChannelInfo", "av_write_uncoded_frame", "av_get_default_channel_layout", "X509v3_get_ext_by_NID", "av_crc_get_table", "av_bprint_init", "WAV_OutputWrite", "OBJ_NAME_init", "ff_simple_idct_add_12", "_Z35FDKsbrEnc_InitSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEiPKhiiiij", "av_opt_child_next", "av_application_alloc", "x264_weights_analyse", "ff_avfilter_link_set_in_status", "ERR_peek_error", "BIO_sock_non_fatal_error", "EVP_DigestInit_ex", "ssl_undefined_const_function", "ff_biweight_h264_pixels_4_neon", "ff_init_poc", "ff_guess_image2_codec", "tls1_heartbeat", "x264_dct_init", "i2d_PKCS12_fp", "X509v3_add_ext", "avg_hevc_qpel_s16_h3v1_8_neon", "x264_intra_satd_x3_8x8c_neon", "SSL_get_selected_srtp_profile", "COMP_expand_block", "i2d_OCSP_REVOKEDINFO", "_Z15FDKaacEnc_QCNewPP8QC_STATEiPh", "DSA_do_verify", "get_cdn_ip", "_Z25GetRequiredMem_AacEncoderv", "X509V3_EXT_REQ_add_conf", "ssl3_send_newsession_ticket", "SRP_VBASE_get_by_user", "ff_decode_sbr_extension", "x264_deblock_init", "EVP_camellia_128_ecb", "dtls1_buffer_message", "_Z22CBlock_FrequencyToTimeP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssiiPl", "x264_quant_chroma_dc_trellis", "EVP_DigestFinal", "i2d_ASN1_BMPSTRING", "ASN1_BIT_STRING_set", "BIO_new_fp", "av_buffer_default_free", "EVP_PKEY_get1_RSA", "BN_cmp", "av_codec_set_seek_preroll", "ff_hevc_frame_rps", "avio_wl24", "av_packet_clone", "ASN1_STRING_set", "ff_framesync_get_frame", "CMS_signed_add1_attr_by_NID", "sws_getContext", "_Z28GetRequiredMemRam_SbrDecoderv", "av_packet_copy_props", "av_get_time_base_q", "X509_PURPOSE_add", "_Z24GetRam_aacEnc_PsyElementi", "av_strlcat", "avpriv_get_trc_function_from_trc", "PEM_read_X509_CERT_PAIR", "av_dict_copy", "avpicture_alloc", "EVP_camellia_192_cfb128", "X509_STORE_get1_certs", "ssl3_setup_read_buffer", "X509_REVOKED_get_ext_by_NID", "av_frame_get_qp_table", "Camellia_decrypt", "X509V3_EXT_add", "_Z21FreeRam_SbrDecElementPP19SBR_DECODER_ELEMENT", "ff_h264_unref_picture", "RSA_padding_check_PKCS1_OAEP", "transform_16x16_add_neon_row", "tls1_generate_master_secret", "CRYPTO_cfb128_encrypt", "X509_VERIFY_PARAM_set1_host", "ASN1_UTF8STRING_new", "_Z29GetRam_aacEnc_AdjustThresholdi", "i2d_SSL_SESSION", "d2i_X509_REQ_fp", "ff_fft_init_arm", "_Z29FDKsbrEnc_InitSbrCodeEnvelopeP17SBR_CODE_ENVELOPEPiill", "av_bprint_init_for_buffer", "av_fast_realloc", "ASN1_check_infinite_end", "X509_policy_tree_free", "ff_float_dsp_init_arm", "a2i_ASN1_INTEGER", "ENGINE_set_RSA", "tls1_check_ec_tmp_key", "X509_STORE_CTX_get_current_cert", "av_application_close", "ff_all_formats", "CAST_cbc_encrypt", "asn1_utctime_to_tm", "d2i_ASN1_UTCTIME", "ff_h264_idct_add_neon", "CRYPTO_get_ex_data", "_Z25FDKaacEnc_InitDownsamplerP11DOWNSAMPLERii", "av_opt_set_image_size", "NCONF_new", "PKCS12_PBE_add", "ff_yuv422p_to_bgra_neon_16", "put_hevc_qpel_s32_h2v3_8_neon", "ssl3_read", "X509_PURPOSE_get_by_sname", "av_des_mac", "CMS_add1_signer", "ff_hevc_skip_flag_decode", "_Z32GetRequiredMemRam_aacEnc_QCstatev", "FDKatoi", "_Z38GetRequiredMemRam_PsQmfStatesSynthesisv", "ff_h264dsp_init", "DH_check", "ff_socket", "_Z34FDKaacEnc_CalcBandEnergyOptimShortPKlPiPKiiPl", "i2d_RSAPublicKey_fp", "X509v3_get_ext_by_OBJ", "_Z21transportEnc_writeASCP13FDK_BITSTREAMP12CODER_CONFIGP13CSTpCallBacks", "ssl_build_cert_chain", "i2d_ASN1_T61STRING", "x264_macroblock_deblock", "ssl_cert_type", "ff_hevc_sao_offset_abs_decode", "CMS_RecipientEncryptedKey_get0_id", "ASN1_item_ndef_i2d", "av_opt_eval_double", "i2d_int_dhx", "ff_me_cmp_init_arm", "avio_get_str", "ff_inet_aton", "PEM_write_bio_PKCS8PrivateKey", "PKCS1_MGF1", "avg_hevc_qpel_s8_h2_8_neon", "_Z35FDKaacEnc_calcSfbQuantEnergyAndDistPlPsiiS_S_", "SSL_get_servername_type", "EVP_camellia_128_cbc", "rgb12tobgr12", "av_bprintf", "dtls1_retransmit_message", "_Z28FDKaacEnc_AdaptThresholdsVBRPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELP11ATS_ELEMENTP9TOOLSINFOP7PE_DATAi", "x264_lookahead_get_frames", "X509_STORE_CTX_set_default", "ASN1_item_unpack", "tls1_final_finish_mac", "ff_h264_v_loop_filter_chroma_neon", "transform_32x32_add_neon_row_16", "aacDecoder_GetStreamInfo", "SHA256_Transform", "X509_STORE_CTX_set_chain", "x264_param_default", "CRYPTO_set_locked_mem_functions", "ERR_error_string", "avfilter_version", "av_application_did_http_open", "gcm_gmult_4bit", "av_parser_close", "engine_unlocked_init", "av_pix_fmt_desc_get_id", "PKCS7_add_crl", "X509_find_by_issuer_and_serial", "av_audio_fifo_reset", "bn_mul_recursive", "_Z35FDKaacEnc_PostProcessPnsChannelPairiP10PNS_CONFIGP8PNS_DATAS2_PiS3_", "ssl_session_dup", "X509_CRL_sign_ctx", "av_sha512_update", "ff_gen_search", "ff_read_frame_flush", "BF_ecb_encrypt", "BUF_strlcpy", "BN_BLINDING_new", "ENGINE_register_all_pkey_asn1_meths", "FDKgetchar", "add_hevc_qpel_s32_h1v1_8_neon", "ff_hevc_hls_filters", "ff_h264_idct8_dc_add_8_c", "ff_h264_idct_add16_14_c", "d2i_ECDSA_SIG", "X509at_get_attr_count", "ENGINE_set_finish_function", "ff_mdct_calc_neon", "DSA_free", "add_hevc_epel_s8_h_8_neon", "SRP_VBASE_init", "CRYPTO_gcm128_release", "ff_avg_h264_qpel8_mc23_neon", "x264_param_apply_profile", "BN_num_bits_word", "ssl_get_handshake_digest", "x264_macroblock_deblock_strength", "x264_frame_deblock_row", "av_twofish_init", "ff_hevc_no_residual_syntax_flag_decode", "EVP_PKEY_paramgen", "_Z30CProgramConfig_GetElementTablePK14CProgramConfigP14MP4_ELEMENT_IDiPh", "SSL_get_rbio", "ff_sws_init_input_funcs", "CMS_add0_cert", "_Z29Hcr_State_BODY_SIGN_ESC__SIGNP13FDK_BITSTREAMPv", "ff_weight_h264_pixels_8_neon", "EVP_DecodeBlock", "PKCS12_x5092certbag", "PKCS12_MAKE_SHKEYBAG", "_Z25FDKsbrEnc_UpdateFreqScalePhPiiiii", "add_hevc_qpel_s32_h2v2_8_neon", "ec_wNAF_mul", "aacDecoder_AncDataInit", "av_opt_get", "cms_Data_create", "avio_close_dyn_buf", "swr_get_delay", "BN_GF2m_mod_div", "i2d_X509_PUBKEY", "ENGINE_set_default_pkey_asn1_meths", "ff_ps_read_data", "act_transform_4x4_add_8", "avutil_version", "ff_fdct_ifast248", "add_hevc_qpel_s8_h3v3_8_neon", "i2d_RSAPrivateKey_fp", "AES_set_encrypt_key", "_Z10ResetPsDecP6PS_DEC", "av_match_ext", "_Z19FDKaacEnc_QCOutInitPP6QC_OUTiPK15CHANNEL_MAPPING", "_Z28GetRam_aacEnc_PsyOutElementsi", "EVP_Digest", "sbrDecoder_Parse", "x264_predict_4x4_init_arm", "ff_check_pixfmt_descriptors", "avg_hevc_qpel_s16_h3v3_8_neon", "_CONF_add_string", "X509_PUBKEY_set", "ff_parse_time_base", "_Z6dst_IVPliPi", "_Z30FDKaacEnc_DetermineEncoderModeP12CHANNEL_MODEi", "ff_tlog_link", "put_hevc_epel_s8_v_8_neon", "DTLSv1_2_client_method", "av_opt_set", "x264_predict_8x16c_h_c", "EVP_PKEY_add1_attr_by_OBJ", "x264_ratecontrol_init_reconfigurable", "av_murmur3_final", "BN_MONT_CTX_copy", "CMAC_CTX_cleanup", "_Z40FDKsbrEnc_SbrMissingHarmonicsDetectorQmfP30SBR_MISSING_HARMONICS_DETECTORPPlPPiPaPK14SBR_FRAME_INFOPKhS3_PhSA_iSB_S1_", "_Z22FDKaacEnc_reduceMinSnrP15CHANNEL_MAPPINGPP14QC_OUT_ELEMENTPP15PSY_OUT_ELEMENTPA2_A60_hiPiii", "_Z16adjustTimeSlotLCPlP13ENV_CALC_NRGSPhiiiiPii", "i2d_RSAPrivateKey", "avcodec_get_name", "EVP_sha1", "EVP_CIPHER_CTX_flags", "avg_hevc_qpel_s32_h1_8_neon", "X509_cmp", "swr_inject_silence", "avg_hevc_qpel_s16_h2v3_8_neon", "RC4_set_key", "d2i_ASN1_IA5STRING", "CRYPTO_push_info_", "av_md5_init", "POLICYQUALINFO_free", "EVP_PKEY_add1_attr_by_txt", "_Z24FreeRam_aacEnc_QCelementPP14QC_OUT_ELEMENT", "add_hevc_epel_s8_v_8_neon", "ff_mov_read_chan", "d2i_DHparams", "X509_PUBKEY_get0_param", "CMS_get1_crls", "ENGINE_get_cmd_defns", "rgb15tobgr32", "av_hex_dump_log", "ssl_parse_clienthello_tlsext", "SSL_CTX_get_ssl_method", "BN_consttime_swap", "ff_id3v2_match", "d2i_BASIC_CONSTRAINTS", "CRYPTO_set_locked_mem_ex_functions", "PKCS12_pack_p7data", "X509_CRL_diff", "EVP_PKEY_asn1_add_alias", "RC4", "av_rc4_alloc", "X509at_get_attr_by_OBJ", "ff_vector_fmul_reverse_vfp", "av_timecode_make_smpte_tc_string", "SRP_check_known_gN_param", "EVP_PKEY2PKCS8", "ASN1_PCTX_get_nm_flags", "ff_fft_calc_neon", "BN_lshift", "x264_param_default_preset", "CMS_unsigned_get_attr_by_OBJ", "POLICYINFO_new", "asn1_get_choice_selector", "ssl_get_ciphers_by_id", "d2i_ASN1_SET_ANY", "BN_GF2m_mod_inv", "X509_get_default_cert_dir_env", "ASN1_VISIBLESTRING_new", "_Z27CLatmDemux_GetNrOfSubFramesP10CLatmDemux", "OBJ_nid2sn", "FDKaacEnc_EncodeFrame", "av_demuxer_open", "ffio_open_whitelist", "_Z20transportEnc_GetConfP12TRANSPORTENCP12CODER_CONFIGP13FDK_BITSTREAMPj", "av_packet_unpack_dictionary", "av_frame_set_color_range", "COMP_compress_block", "EC_POINT_oct2point", "ff_hevcdsp_init_arm", "i2d_EC_PUBKEY_bio", "x264_encoder_delayed_frames", "__gnu_Unwind_Restore_VFP_D_16_to_31", "EVP_PKEY_meth_set_paramgen", "av_image_fill_max_pixsteps", "X509_STORE_CTX_get_ex_data", "ff_pred8x8_dc_neon", "SSL_CTX_set_client_cert_cb", "ENGINE_get_cipher_engine", "CRYPTO_set_dynlock_lock_callback", "EVP_PKEY_encrypt_init", "av_buffersrc_add_frame", "X509_CRL_match", "EVP_PKEY2PKCS8_broken", "av_dynarray_add_nofree", "ENGINE_get_ciphers", "EVP_PKEY_missing_parameters", "_Z26FDKaacEnc_CalcBandNrgMSOptPKlS0_PiS1_PKiiPlS4_iS4_S4_", "av_opt_set_q", "ssl3_accept", "CRYPTO_lock", "OCSP_REQ_CTX_http", "BUF_MEM_new", "SSL_get_psk_identity", "RAND_add", "X509_EXTENSION_set_data", "ec_GF2m_simple_set_compressed_coordinates", "FDKpow", "x264_ratecontrol_start", "ssl_set_peer_cert_type", "__nedf2", "av_bprint_strftime", "avg_hevc_qpel_s8_h1v1_8_neon", "ASN1_PCTX_get_cert_flags", "ff_get_buffer", "CMS_EncryptedData_set1_key", "tls1_new", "ffio_open_dyn_packet_buf", "ff_aac_sbr_ctx_init", "PKCS7_ENC_CONTENT_free", "avcodec_copy_context", "av_get_picture_type_char", "ASN1_NULL_free", "ssl_add_clienthello_use_srtp_ext", "_Z36FDKsbrEnc_WriteEnvChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "av_hash_init", "_Z16getChannelConfig12CHANNEL_MODE", "EC_KEY_get0_public_key", "EC_GROUP_set_point_conversion_form", "lh_num_items", "av_log_set_flags", "add_hevc_epel_s4_h_8_neon", "avpriv_put_string", "aacDecoder_GetFreeBytes", "X509_REQ_sign", "EVP_PKEY_get_attr", "UI_add_user_data", "ENGINE_get_load_pubkey_function", "ff_h264_idct8_add4_8_c", "d2i_DSAPublicKey", "swri_oldapi_conv_flt_to_s16_neon", "i2d_PUBKEY", "d2i_X509_NAME", "CRYPTO_remove_all_info", "ff_end_tag", "ff_h264_idct_add8_422_8_c", "SSL_set_trust", "ff_openssl_deinit", "OBJ_create", "ASN1_STRING_type_new", "CMS_unsigned_add1_attr_by_OBJ", "ASN1_verify", "ENGINE_set_default_ECDSA", "UI_set_ex_data", "ff_fdct248_islow_10", "d2i_RSA_OAEP_PARAMS", "av_opt_query_ranges_default", "ERR_load_ERR_strings", "ASN1_object_size", "ENGINE_free", "ff_put_pixels8_xy2_neon", "X509_CRL_INFO_free", "FDKmemmove", "x264_cabac_encode_init", "ENGINE_up_ref", "_Z22transportDec_CrcEndRegP12TRANSPORTDECi", "ff_h264_luma_dc_dequant_idct_14_c", "x264_sync_frame_list_delete", "ff_pix_abs16_armv6", "d2i_X509_PKEY", "ff_dualinput_init", "SEED_ofb128_encrypt", "ENGINE_ctrl_cmd", "ssl3_cert_verify_mac", "ff_rtmp_packet_destroy", "CERTIFICATEPOLICIES_new", "CRYPTO_is_mem_check_on", "EVP_PKEY_bits", "ASN1_put_eoc", "ff_aac_ac3_parse", "FDKfabs", "CRYPTO_set_mem_ex_functions", "BN_RECP_CTX_new", "d2i_X509_ALGOR", "d2i_EXTENDED_KEY_USAGE", "SSL_callback_ctrl", "put_hevc_epel_s16_hv_8_neon", "ff_rtmp_calc_digest", "avpriv_float_dsp_alloc", "X509V3_get_value_bool", "ff_hevc_put_qpel_uw_h2v3_neon_8", "__cmpdf2", "CMAC_CTX_copy", "PEM_ASN1_write_bio", "avpriv_split_xiph_headers", "x264_predict_16x16_v_c", "ff_default_get_video_buffer", "_Z8sqrtFixpl", "ff_brktimegm", "PKEY_USAGE_PERIOD_free", "PEM_write_PKCS8PrivateKey", "transform_16x16_add_00", "BIO_s_file", "do_dtls1_write", "transform_4x4_add_00", "ssl_create_cipher_list", "ASN1_TYPE_set", "_Z32transportEnc_RegisterSbrCallbackP12TRANSPORTENCPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "tls1_save_sigalgs", "ff_replaygain_export", "ECDSA_SIG_free", "ff_avg_h264_qpel16_mc02_neon", "av_format_get_audio_codec", "EVP_des_ede3_cfb64", "_Z18FreeRam_SbrEncoderPP11SBR_ENCODER", "av_match_name", "OCSP_RESPONSE_free", "_Z29aacDecoder_drcInitChannelDataP15CDrcChannelData", "_Z12invSqrtNorm2lPi", "ff_put_pixels_clamped_neon", "_Z32GetRequiredMemRam_Sbr_v_k_masterv", "int_rsa_verify", "av_mod_i", "ff_hevc_cu_qp_delta_sign_flag", "ff_put_h264_qpel16_mc13_neon", "avpriv_unlock_avformat", "ff_framesync_uninit", "HMAC_Final", "BIO_set_callback_arg", "ERR_load_strings", "i2d_PKCS7_NDEF", "_Z21sbrdecUpdateFreqScalePhS_jP15SBR_HEADER_DATAj", "ec_GF2m_simple_group_init", "__udivsi3", "X509_signature_print", "_CONF_get_section_values", "EVP_MD_CTX_init", "EVP_mdc2", "X509_STORE_CTX_new", "av_format_set_metadata_header_padding", "__gnu_Unwind_Restore_WMMXD", "X509_STORE_set_verify_cb", "EVP_PKEY_assign", "X509_NAME_hash_old", "ff_nv21_to_rgba_neon_32", "ERR_load_BIO_strings", "d2i_PBKDF2PARAM", "ff_mov_add_hinted_packet", "ec_GFp_simple_point_set_affine_coordinates", "ec_GFp_mont_group_copy", "av_get_frame_filename", "OCSP_ONEREQ_free", "EVP_aes_256_cfb8", "RSA_verify_PKCS1_PSS", "SSL_get_ex_data", "ff_dct_init", "rgb32to24", "av_opt_set_defaults2", "ff_put_pixels16_neon", "av_gettime_relative_is_monotonic", "PKCS7_RECIP_INFO_new", "_Z12deleteSbrDecP11SBR_CHANNEL", "DSA_OpenSSL", "sbrEncoder_GetLibInfo", "EVP_PKEY_sign_init", "av_mallocz", "av_free", "PKCS5_v2_PBE_keyivgen", "SMIME_crlf_copy", "DSO_free", "SRP_VBASE_get1_by_user", "ff_hevc_put_qpel_uw_h3v2_neon_8", "i2d_ASN1_TIME", "pqueue_iterator", "X509_email_free", "avfilter_init_dict", "EVP_PKEY_meth_get_sign", "X509_ALGOR_cmp", "i2d_ECPrivateKey_fp", "_Z35Hcr_State_BODY_SIGN_ESC__ESC_PREFIXP13FDK_BITSTREAMPv", "EVP_camellia_192_cfb8", "X509_trust_clear", "BN_rshift1", "BN_BLINDING_invert", "add_hevc_qpel_s16_h2v2_8_neon", "CMAC_CTX_new", "ffio_read_indirect", "ERR_set_error_data", "i2d_ASN1_OCTET_STRING", "av_parse_video_rate", "ENGINE_get_default_RSA", "X509_NAME_add_entry", "i2d_NETSCAPE_CERT_SEQUENCE", "sk_find", "av_expr_parse_and_eval", "BN_mul_word", "X509_STORE_set_depth", "ff_merge_formats", "rgb24to32", "ff_idctdsp_init", "OPENSSL_add_all_algorithms_noconf", "EC_GROUP_check_discriminant", "ENGINE_set_default_ECDH", "ff_imdct_calc_neon", "i2d_PBE2PARAM", "ssl3_generate_master_secret", "avfilter_graph_add_filter", "x264_thread_sync_ratecontrol", "EVP_PKEY_set1_DH", "d2i_ASN1_INTEGER", "ENGINE_set_flags", "av_frame_get_sample_rate", "_Z18FreeRam_SbrDecoderPP20SBR_DECODER_INSTANCE", "X509_POLICY_NODE_print", "_Z21GetRam_Sbr_envIBufferiPh", "X509_CERT_AUX_free", "ff_fill_rectangle", "DISPLAYTEXT_new", "EC_GFp_mont_method", "RSA_OAEP_PARAMS_new", "ff_avc_parse_nal_units", "i2d_AUTHORITY_KEYID", "ff_framesync_next", "ff_pred8x8_hor_neon", "dtls1_start_timer", "CONF_free", "EVP_idea_ofb", "d2i_PKCS7_bio", "ssl23_accept", "av_guess_format", "av_thread_message_flush", "av_frame_get_buffer", "X509_REQ_sign_ctx", "ff_h264_idct_add16_10_c", "ff_put_h264_qpel8_mc31_neon", "ssl_cipher_ptr_id_cmp", "dtls1_is_timer_expired", "X509_set_pubkey", "OPENSSL_stderr", "_Z21GetRam_Sbr_envYBufferi", "av_adler32_update", "add_hevc_epel_s8_pixels_8_neon", "_Z9fixp_atanl", "ff_put_pixels16_x2_neon", "put_hevc_qpel_s32_h1v1_8_neon", "_Z24FreeRam_TransportDecoderPP12TRANSPORTDEC", "RIPEMD160_Transform", "OCSP_SINGLERESP_free", "_Z25FreeRam_SbrDecWorkBuffer1PPl", "av_timecode_init_from_string", "EVP_PKEY_save_parameters", "avfilter_graph_create_filter", "ENGINE_unregister_pkey_meths", "X509_print_ex", "ff_hevc_idct_16x16_dc_neon_8", "x264_weighted_reference_duplicate", "d2i_NETSCAPE_CERT_SEQUENCE", "FDKaalloc", "ssl3_get_cipher", "EC_POINT_set_compressed_coordinates_GF2m", "av_mastering_display_metadata_alloc", "x264_reference_build_list_optimal", "ff_diff_pixels_armv6", "ff_avg_h264_qpel16_mc22_neon", "EVP_idea_ecb", "_Z21HcrMuteErroneousLinesP10CErHcrInfo", "ff_sine_window_init", "rgb64to48_bswap", "x264_intra_sad_x3_8x8_neon", "SSL_get_privatekey", "i2d_X509_ATTRIBUTE", "EC_POINT_mul", "ssl3_client_hello", "X509_NAME_get_text_by_NID", "av_audio_fifo_size", "_Z32FDKsbrEnc_DeleteTonCorrParamExtrP16SBR_TON_CORR_EST", "_Z28FreeRam_PsQmfStatesSynthesisPPl", "X509_CRL_new", "x264_intra_sa8d_x3_8x8_neon", "av_rescale_q_rnd", "sk_free", "tls1_process_heartbeat", "avg_hevc_qpel_s16_h1v1_8_neon", "BUF_memdup", "_Z32GetRequiredMemRam_Sbr_envYBufferv", "ENGINE_get_default_ECDH", "ff_rtp_enc_name", "put_hevc_qpel_s16_v1_8_neon", "SSL_CTX_set_alpn_select_cb", "RSA_padding_add_SSLv23", "AUTHORITY_KEYID_free", "gcm_gmult_neon", "chroma_mc_fixed_bs_put_dsp", "d2i_AUTHORITY_KEYID", "ENGINE_get_digests", "ASN1_GENERALSTRING_new", "RSA_padding_add_PKCS1_OAEP_mgf1", "av_strerror", "DTLSv1_server_method", "X509_STORE_CTX_purpose_inherit", "add_hevc_qpel_s32_pixels_8_neon", "ssl_do_client_cert_cb", "EC_GROUP_new", "ff_hcscale_fast_c", "FDK_pushForward", "evp_pkey_set_cb_translate", "ff_imdct36_blocks_fixed", "ASN1_OBJECT_create", "_Z15FDKaacEnc_BCNewPP13BITCNTR_STATEPh", "d2i_X509", "X509_NAME_ENTRY_get_data", "PEM_write_bio_X509_REQ", "av_cast5_alloc", "_Z29GetRequiredMemWorkBufferCore2v", "SSL_CTX_get_client_CA_list", "avcodec_align_dimensions", "ff_hevc_put_qpel_uw_h1v2_neon_8", "BN_GF2m_mod_sqrt", "x264_picture_clean", "d2i_ASN1_VISIBLESTRING", "AES_encrypt", "ff_hevc_compute_poc", "ASN1_mbstring_ncopy", "ff_set_dimensions", "_Z8fixp_sinli", "avfilter_inout_alloc", "UI_process", "d2i_X509_NAME_ENTRY", "ff_h264_idct_add8_14_c", "av_opt_find2", "get_error_type", "SSL_use_certificate_ASN1", "CRYPTO_realloc_clean", "av_interleaved_write_uncoded_frame", "EVP_PKEY_meth_add0", "RC2_ofb64_encrypt", "custom_exts_copy_flags", "SSL_set_session", "CONF_modules_load", "ff_hevc_put_qpel_h2_neon_8", "av_find_best_stream", "CRYPTO_new_ex_data", "PEM_write_X509_REQ_NEW", "_Z18CConcealment_StoreP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "CMS_RecipientInfo_kari_decrypt", "av_parser_next", "___Unwind_RaiseException", "X509_pubkey_digest", "avformat_get_class", "ff_h264_decode_sei", "ECDH_get_default_method", "ERR_get_state", "EVP_PKEY_new", "avpriv_set_systematic_pal2", "X509V3_get_d2i", "sbrEncoder_GetInBufferSize", "FDKaacEnc_LimitBitrate", "_Z23sbrDecoder_drcApplySlotP18SBRDEC_DRC_CHANNELPlS1_iii", "_Z20GetRam_SbrDecElementi", "ff_avg_h264_qpel8_mc22_neon", "tls1_cert_verify_mac", "ASN1_generate_v3", "ERR_load_DSA_strings", "BIO_get_callback", "d2i_DSA_PUBKEY", "_Z18GetRam_bsOutbufferi", "_Z9CPns_ReadP8CPnsDataP13FDK_BITSTREAMPK19CodeBookDescriptionPshii", "avio_wl64", "add_hevc_epel_s16_v_8_neon", "x264_sps_init", "ASN1_STRING_print_ex_fp", "i2d_POLICYQUALINFO", "X509_CRL_delete_ext", "i2d_DISPLAYTEXT", "av_format_set_audio_codec", "ff_init_desc_hscale", "EC_GROUP_get_basis_type", "SSL_CTX_set_srp_verify_param_callback", "X509V3_set_conf_lhash", "FDKstrncpy", "av_frame_side_data_name", "i2d_GENERAL_NAME", "ssl3_setup_write_buffer", "gcm_ghash_v8", "av_register_output_format", "_Z23GetRam_TransportEncoderi", "dtls1_get_message", "CRL_DIST_POINTS_free", "ENGINE_get_next", "ff_copy_rectangle2", "dtls1_new", "PEM_read_bio_DSAparams", "X509_get_signature_nid", "ERR_load_BN_strings", "ERR_peek_error_line_data", "asn1_GetSequence", "d2i_USERNOTICE", "SHA1_Update", "ASN1_BIT_STRING_get_bit", "av_fifo_free", "ec_GF2m_simple_point_init", "ff_mov_cenc_write_packet", "ec_GF2m_simple_dbl", "avg_hevc_epel_s16_hv_8_neon", "EC_KEY_get_key_method_data", "PEM_proc_type", "audio_resample_close", "_Z19aacEncDefaultConfigP13AACENC_CONFIGP10USER_PARAM", "tls1_free", "ssl3_renegotiate_check", "d2i_GENERAL_NAMES", "UI_set_method", "aacEncoder_SetParam", "X509at_get_attr", "SSL_SRP_CTX_free", "ff_thread_decode_frame", "ERR_add_error_vdata", "i2d_PKCS12_MAC_DATA", "ff_avg_h264_qpel16_mc11_neon", "ff_h264_idct8_dc_add_12_c", "luma_mc_fixed_bs_avg", "PEM_X509_INFO_read", "X509_get_subject_name", "_Z20qmfAnalysisFilteringP15QMF_FILTER_BANKPPlS2_P16QMF_SCALE_FACTORPKsiS1_", "EVP_get_digestbyname", "ff_amf_write_string2", "FDKmemcpy", "ffurl_read", "d2i_X509_SIG", "CAST_set_key", "RSA_padding_add_none", "X509_load_cert_file", "av_timecode_adjust_ntsc_framenum2", "x264_macroblock_write_cabac", "add_hevc_qpel_s32_h3v2_8_neon", "_Z15Free_AacEncoderPP10AACENCODER", "v2i_GENERAL_NAME", "ECDH_get_ex_new_index", "ff_h264_decode_mb_cabac", "ASN1_OCTET_STRING_free", "EVP_CIPHER_type", "private_Camellia_set_key", "X509_add1_trust_object", "ff_check_alignment", "_Z25Hcr_State_BODY_SIGN__BODYP13FDK_BITSTREAMPv", "i2d_RSA_PUBKEY_bio", "BN_BLINDING_get_flags", "cms_SignerIdentifier_cert_cmp", "get_real_ip", "put_hevc_qpel_s16_h1v1_8_neon", "PEM_write_bio_ASN1_stream", "ASN1_UTCTIME_new", "ff_stream_add_bitstream_filter", "ff_formats_changeref", "swri_noise_shaping_double", "DH_free", "av_guess_frame_rate", "put_hevc_qpel_s32_h3v2_8_neon", "srp_verify_server_param", "EVP_PKEY_asn1_get_count", "md4_block_data_order", "av_fft_init", "GENERAL_SUBTREE_free", "av_tree_find", "EC_POINT_set_affine_coordinates_GF2m", "DH_KDF_X9_42", "EVP_CIPHER_CTX_test_flags", "i2d_EC_PUBKEY_fp", "ASN1_TYPE_cmp", "SEED_set_key", "ec_GFp_simple_is_on_curve", "ff_yuv2rgb_get_func_ptr", "X509_time_adj_ex", "CRYPTO_ctr128_encrypt_ctr32", "av_vorbis_parse_init", "SSL_CTX_set_default_verify_paths", "av_picture_copy", "EC_KEY_clear_flags", "ff_put_h264_qpel8_mc03_neon", "EC_POINT_point2bn", "EC_POINT_cmp", "EC_METHOD_get_field_type", "ASN1_OBJECT_free", "sk_push", "av_fifo_realloc2", "SSL_CTX_sess_set_remove_cb", "X509_to_X509_REQ", "PKCS7_set_digest", "ff_get_video_buffer", "shuffle_bytes_3012", "_Z12fixp_cos_sinliPlS_", "CMS_get0_content", "BN_BLINDING_thread_id", "av_color_transfer_name", "DISPLAYTEXT_free", "EVP_VerifyFinal", "X509_check_private_key", "X509_REQ_verify", "BIO_ctrl_wpending", "ASN1_STRING_print", "_Z23FDK_DRC_Generator_ClosePP8DRC_COMP", "add_hevc_qpel_s16_h3_8_neon", "ssl3_cbc_remove_padding", "i2d_PKCS7_DIGEST", "get_server_ip", "av_codec_set_chroma_intra_matrix", "SSL_CTX_sess_get_get_cb", "idea_set_decrypt_key", "bn_mul_high", "SSL_CTX_sess_get_remove_cb", "RSA_size", "ENGINE_register_all_ECDH", "SXNET_get_id_INTEGER", "avio_open_dir", "_Z21FDKaacEnc_dynBitCountP13BITCNTR_STATEPKsPKjPKiiiiiS6_P12SECTION_DATAS6_S6_S6_j", "ff_isom_write_hvcc", "DSO_get_default_method", "sbrDecoder_Open", "_Z20FDKaacEnc_AdjThrInitP13ADJ_THR_STATEiPP12ELEMENT_BITSiiiiil", "av_lfg_init", "av_hash_final_b64", "BIO_new_NDEF", "_Z8CalcLog2liPi", "SSL_state", "CONF_module_add", "OBJ_ln2nid", "PKCS7_set_type", "x264_macroblock_cache_free", "BN_mask_bits", "ENGINE_get_pkey_meths", "avg_hevc_qpel_s8_h3v1_8_neon", "x264_ratecontrol_mb", "AES_set_enc2dec_key", "BN_value_one", "_Z30GetRequiredMemRam_aacEnc_QCoutv", "sk_deep_copy", "OPENSSL_asc2uni", "CMS_RecipientInfo_set0_pkey", "DSO_ctrl", "PKCS7_stream", "lh_insert", "idea_options", "ENGINE_get_init_function", "CMS_set_detached", "ff_unlock_avcodec", "X509_STORE_CTX_set_flags", "SSL_CTX_sess_set_get_cb", "set_cur_idx", "_Z38transportDec_GetMissingAccessUnitCountPiP12TRANSPORTDEC", "ff_h264_idct_add_8_c", "EVP_DigestFinal_ex", "UI_get_result_minsize", "ff_hevc_dsp_init_act", "DH_get_ex_new_index", "PEM_read_bio_ECPrivateKey", "ff_choose_timebase", "av_free_packet", "X509_TRUST_get0", "CMAC_Init", "avfilter_graph_free", "ff_hevc_put_pixels_w6_neon_8", "av_packet_split_side_data", "__fixunsdfdi", "CRYPTO_memcmp", "ECDSA_do_verify", "ff_hevc_put_pixels_w2_neon_8", "CMS_signed_delete_attr", "EVP_CIPHER_CTX_rand_key", "PEM_read_RSAPublicKey", "swri_rematrix_free", "ASN1_item_print", "EC_GROUP_get_point_conversion_form", "x264_adaptive_quant_frame", "BIO_vsnprintf", "ec_GFp_simple_group_get_degree", "dtls1_write_app_data_bytes", "transform_16x16_add_neon_col", "EVP_PKEY_meth_set_derive", "_Z32transportDec_RegisterSscCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAM17AUDIO_OBJECT_TYPEiiiES1_", "av_qsv_alloc_context", "ff_put_h264_chroma_mc8_neon", "d2i_ECPrivateKey_fp", "X509_REQ_get_attr", "i2d_PROXY_CERT_INFO_EXTENSION", "ff_h264_set_erpic", "ASN1_STRING_new", "MDC2_Update", "sws_init_context", "BIO_f_zlib", "i2t_ASN1_OBJECT", "ec_GFp_simple_point_finish", "avio_wb64", "_Unwind_DeleteException", "dtls1_clear_received_buffer", "BN_mod_inverse", "_Z17ResetLimiterBandsPhS_S_iPK11PATCH_PARAMii", "X9_62_PENTANOMIAL_free", "ff_hevc_ref_idx_lx_decode", "ECDSA_SIG_new", "_armv8_aes_probe", "PKCS12_key_gen_uni", "CONF_load_fp", "ERR_load_COMP_strings", "HMAC_Update", "EVP_aes_256_cfb1", "ENGINE_unregister_DSA", "ff_put_h264_qpel16_mc23_neon", "EVP_sha", "avcodec_decode_subtitle2", "_Z30FreeRam_aacEnc_AdjustThresholdPP13ADJ_THR_STATE", "EVP_PKEY_decrypt_init", "_Z19aacDecoder_drcApplyP8CDrcInfoPvP22CAacDecoderChannelInfoP15CDrcChannelDataPliii", "ASN1_item_ex_d2i", "_Z19getSamplingRateInfoP16SamplingRateInfojjj", "PEM_ASN1_write", "avg_hevc_qpel_s8_h1v2_8_neon", "_Z23FDKaacEnc_peCalculationP7PE_DATAPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELP9TOOLSINFOP11ATS_ELEMENTi", "check_defer", "SSL_CTX_set_srp_cb_arg", "aacEncoder_GetParam", "ff_parse_channel_layout", "ssl_get_server_cert_serverinfo", "a2i_ipadd", "X509_REQ_set_extension_nids", "RSA_PSS_PARAMS_free", "ff_get_v_length", "ssl3_peek", "Camellia_encrypt", "av_dict_set", "_Z20CJointStereo_ApplyISPP22CAacDecoderChannelInfoPKsPKhiij", "ff_parse_sample_rate", "add_hevc_qpel_s8_h3v1_8_neon", "BN_bin2bn", "ff_put_pixels16_y2_no_rnd_neon", "x264_intra_satd_x3_8x8c", "SSLv3_server_method", "PEM_write_NETSCAPE_CERT_SEQUENCE", "av_aes_ctr_crypt", "d2i_X509_EXTENSIONS", "av_xtea_le_init", "avpriv_get_gamma_from_trc", "X509at_add1_attr_by_OBJ", "ff_thread_init", "av_blowfish_crypt", "ENGINE_register_ECDSA", "SSL_CTX_SRP_CTX_free", "d2i_NOTICEREF", "_Z32FDKaacEnc_FreqToBandWithRoundingiiiPKi", "PKCS5_pbe2_set", "x264_hrd_fullness", "ff_h264_decode_ref_pic_marking", "EC_GROUP_get_seed_len", "x264_param_apply_fastfirstpass", "PKCS8_pkey_set0", "ff_scalarproduct_float_neon", "ff_fft_end_fixed", "BUF_MEM_free", "ssl_sess_cert_new", "ff_me_cmp_init", "SSL_get_default_timeout", "BN_bntest_rand", "ASN1_BIT_STRING_free", "ssl_sess_cert_free", "COMP_CTX_free", "ASN1_item_sign", "avio_alloc_context", "SSL_use_PrivateKey_ASN1", "EVP_CIPHER_do_all", "EVP_MD_CTX_cleanup", "_Z21FDKsbrEnc_UpdateLoResPhPiS_i", "ff_hevc_deblocking_boundary_strengths", "ASN1_T61STRING_free", "add_hevc_qpel_s32_h3_8_neon", "ff_hevc_decode_nal_sei", "CMS_RecipientInfo_ktri_get0_algs", "_Z24GetAacDecoderChannelInfoi", "EVP_PKEY_verify_recover", "avfilter_link_set_closed", "av_audio_convert_alloc", "RAND_get_rand_method", "ff_init_desc_cfmt_convert", "UI_construct_prompt", "X509_keyid_get0", "X509_REQ_get_attr_by_NID", "MD5_Transform", "avfilter_graph_send_command", "ff_mov_cenc_write_sinf_tag", "_Unwind_Complete", "ff_put_h264_qpel16_mc22_neon", "av_realloc_array", "PEM_read_DHparams", "d2i_ASN1_OBJECT", "_Z13GetAacDecoderi", "ff_fmt_is_in", "set_server_ip", "_Z25FreeRam_sbr_OverlapBufferPPl", "ff_nv21_to_argb_neon_32", "ff_poll_frame", "av_log", "SSL_CTX_get_ex_data", "X509_ATTRIBUTE_create_by_txt", "ff_reget_buffer", "_Z17transportEnc_OpenPP12TRANSPORTENC", "ssl_verify_alarm_type", "SRP_generate_server_master_secret", "EVP_PKEY_meth_set_signctx", "CMS_get1_certs", "av_thread_message_queue_recv", "ASN1_STRING_TABLE_get", "ff_hevc_put_qpel_v2_neon_8", "put_hevc_qpel_s8_h1v1_8_neon", "av_buffer_alloc", "av_get_cpu_flags", "SHA512_Final", "X509_sign_ctx", "PKCS5_PBE_keyivgen", "X509_CRL_get0_by_cert", "ff_thread_free", "EC_curve_nist2nid", "_Z23CAacDecoder_AncDataInitP8CAncDataPhi", "X509_VERIFY_PARAM_set_trust", "ff_init_filters", "ff_simple_idct_add_armv6", "CRYPTO_mem_leaks_fp", "avfilter_mul_matrix", "avpicture_free", "avg_hevc_qpel_s32_h1v3_8_neon", "_Z41FDKsbrEnc_InitSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORiiiiiiij", "EVP_MD_type", "av_bprint_get_buffer", "add_hevc_qpel_s32_v3_8_neon", "ff_pred16x16_dc_neon", "SSL_load_client_CA_file", "ff_fetch_timestamp", "d2i_PKEY_USAGE_PERIOD", "X509_CERT_AUX_new", "av_frame_get_side_data", "_Z21GetRam_SbrDynamic_RAMi", "TRANSPOSE8x8_16_LS_opt", "X509at_add1_attr_by_NID", "_Z23transportDec_GetLibInfoP8LIB_INFO", "ff_thread_finish_setup", "RSA_sign_ASN1_OCTET_STRING", "ERR_func_error_string", "_Z30FDKsbrEnc_AssembleSbrBitstreamP11COMMON_DATAP11FDK_CRCINFOij", "EVP_CIPHER_CTX_set_key_length", "av_opt_get_pixel_fmt", "i2d_DSAPrivateKey", "PKCS12_SAFEBAG_free", "_Z35GetRam_Sbr_prevEnvelopeCompensationi", "ERR_remove_thread_state", "SSL_set_srp_server_param", "tls1_set_sigalgs", "tls1_export_keying_material", "EVP_PKEY_set_type", "X509_VERIFY_PARAM_new", "ff_thread_report_progress2", "CONF_dump_bio", "X509_CRL_set_meth_data", "EC_GROUP_dup", "put_hevc_qpel_s32_h2_8_neon", "EVP_MD_CTX_set_flags", "sha256_block_data_order", "av_resample_close", "avg_hevc_epel_s4_v_8_neon", "AUTHORITY_INFO_ACCESS_free", "sws_getGaussianVec", "ECDSA_get_ex_new_index", "_Z34FDKsbrEnc_deleteExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPE", "ec_GF2m_simple_mul", "PKCS12_certbag2x509crl", "transform_16x16_add_neon_row_8", "PKCS7_set_signed_attributes", "SSL_read", "ff_put_h264_qpel8_mc01_neon", "av_strlcpy", "ff_sbr_hf_apply_noise_1_neon", "av_opt_is_set_to_default", "_Z27FDKaacEnc_GetMonoStereoMode12CHANNEL_MODE", "av_format_inject_global_side_data", "avg_hevc_qpel_s32_v1_8_neon", "x264_frame_delete", "i2d_DHparams", "ff_amf_read_number", "setLimiterAttack", "avg_hevc_qpel_s32_h3v1_8_neon", "_Z18FDKsbrEnc_PSEncodeP11T_PS_ENCODEP8T_PS_OUTPhjPA2_A2_Plii", "OPENSSL_instrument_bus2", "ff_hevc_cabac_init", "ff_init_slice_from_src", "get_httpdns_ip", "SSL_CTX_flush_sessions", "ssl3_set_handshake_header", "i2d_PKCS8_PRIV_KEY_INFO_bio", "ASN1_STRING_data", "RAND_bytes", "_Z41GetRequiredMemAacDecoderStaticChannelInfov", "ff_line_noise_avg_c", "ff_hevc_cu_chroma_qp_offset_flag", "ssl23_peek", "_Z9CalcLdInti", "_Z22aacDecoder_drcSetParamP8CDrcInfo16AACDEC_DRC_PARAMi", "EVP_DecryptUpdate", "dtls1_hm_fragment_free", "pcmDmx_Parse", "BIO_set_callback", "ssl23_write_bytes", "BN_mod_lshift", "av_get_channel_layout", "av_shrink_packet", "ff_hevc_mpm_idx_decode", "PKCS8_encrypt", "x264_mb_predict_mv_pskip", "ec_GFp_mont_group_init", "x264_threadpool_init", "_Z12FDKcrcEndRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "avformat_get_mov_audio_tags", "avg_hevc_qpel_s8_h2v3_8_neon", "av_hash_freep", "ECPKPARAMETERS_new", "ASN1_BMPSTRING_free", "ff_video_frame_pool_get", "av_format_get_video_codec", "d2i_PKCS7_SIGNER_INFO", "BN_exp", "ff_slice_thread_init", "avio_size", "_Z26GetRequiredMemRam_PsEncodev", "ff_set_common_channel_layouts", "ff_init_ff_cos_tabs_fixed", "shuffle_bytes_3210", "PKCS12_pbe_crypt", "RAND_poll", "ff_h264_idct8_add_9_c", "put_hevc_qpel_s16_h3v2_8_neon", "FDKaacEnc_Initialize", "_Z16maxSubbandSamplePPlS0_iiii", "EVP_PKEY_add1_attr_by_NID", "EVP_des_ede3_cbc", "aacDecoder_AncDataGet", "i2d_PKCS7_SIGNED", "ff_get_extradata", "add_hevc_epel_s4_v_8_neon", "av_probe_input_format2", "ff_hevc_put_qpel_neon_wrapper", "ff_hevc_cu_transquant_bypass_flag_decode", "ssl3_get_client_hello", "EVP_aes_128_wrap", "ff_make_absolute_url", "X509_VERIFY_PARAM_get_count", "pqueue_find", "ENGINE_get_digest_engine", "avfilter_pad_get_type", "OBJ_sigid_free", "DH_set_default_method", "ff_mov_read_stsd_entries", "sws_getIdentityVec", "BN_kronecker", "ff_avfilter_graph_update_heap", "X509v3_delete_ext", "hls_prediction_unit", "x264_mc_init", "put_hevc_qpel_s8_v2_8_neon", "av_audio_fifo_drain", "PKCS12_decrypt_skey", "FDKsbrEnc_EncodeIid", "avg_hevc_epel_s8_h_8_neon", "ASN1_STRING_dup", "av_cpu_count", "ASN1_STRING_copy", "x264_cabac_block_residual_c", "SRP_Calc_client_key", "ff_color_frame", "CMS_RecipientInfo_kari_orig_id_cmp", "d2i_X509_CRL_fp", "BIO_ctrl", "ff_h264qpel_init_arm", "put_hevc_epel_s8_hv_8_neon", "i2d_OCSP_BASICRESP", "ff_hevc_pcm_flag_decode", "DES_options", "X509_CINF_free", "i2d_X509_REQ_INFO", "ff_channel_layouts_unref", "d2i_DISPLAYTEXT", "ASN1_INTEGER_set", "DH_generate_key", "BIO_ptr_ctrl", "asn1_add_error", "av_default_item_name", "PKCS7_add_recipient", "HMAC", "PKCS7_SIGNER_INFO_new", "EVP_bf_cfb64", "ENGINE_add", "asn1_set_choice_selector", "cms_SignedData_final", "DSO_pathbyaddr", "EVP_md5", "ff_init_scantable_permutation", "ff_hevc_sao_type_idx_decode", "BN_mod_exp_recp", "avpriv_init_elbg", "ff_sbr_hf_apply_noise_3_neon", "x264_frame_push", "SMIME_write_CMS", "SSL_SESSION_get_compress_id", "X509_STORE_CTX_get_error", "EVP_PKEY_meth_get_verify_recover", "X509_verify_cert", "i2d_X509_CRL_bio", "CRYPTO_dbg_malloc", "avcodec_enum_to_chroma_pos", "OBJ_add_sigid", "ff_faandct248", "BN_sub_word", "x264_ratecontrol_qp", "ff_avg_pixels8_xy2_neon", "ssl3_comp_find", "ff_alloc_dir_entry", "SSL_CTX_set_srp_username", "EVP_rc2_64_cbc", "av_copy_packet", "ssl23_write", "OCSP_RESPID_free", "FDKsbrEnc_EncodeIcc", "X509_STORE_CTX_get0_parent_ctx", "av_opt_show2", "ff_metadata_conv", "X509_dup", "EVP_PKEY_meth_set_keygen", "av_get_output_timestamp", "X509_EXTENSION_set_critical", "x264_mc_init_arm", "ssl_cert_new", "transform_4x4_add_neon", "ASN1_BIT_STRING_new", "i2d_ISSUING_DIST_POINT", "ff_hevc_prev_intra_luma_pred_flag_decode", "add_hevc_qpel_s8_v2_8_neon", "i2d_NETSCAPE_SPKAC", "ff_sws_rgb2rgb_init", "avio_flush", "DH_compute_key_padded", "ssl3_callback_ctrl", "ENGINE_get_RAND", "av_aes_ctr_init", "av_frame_set_channel_layout", "PBKDF2PARAM_free", "ff_blend_init", "BIO_snprintf", "sbrDecoder_Header", "sha256_block_data_order_neon", "ERR_load_OCSP_strings", "_Z15mul_dbl_sgl_rndls", "avfilter_link", "ENGINE_register_all_RSA", "FDK_Fetch", "_Z31GetRequiredMemRam_SbrDecChannelv", "SSL_CTX_check_private_key", "_Z22CConcealment_GetMethodP14CConcealParams", "CMS_stream", "chroma_mc_fixed_bs_add_dsp", "d2i_CERTIFICATEPOLICIES", "ssl_get_server_send_pkey", "BIO_dump_indent_fp", "NCONF_default", "EVP_seed_cfb128", "X509_keyid_set1", "SSL_get_wfd", "ssl_cert_free", "EVP_camellia_192_cfb1", "ASN1_GENERALIZEDTIME_new", "CMS_RecipientInfo_kekri_get0_id", "CMS_unsigned_get_attr_by_NID", "X509_NAME_ENTRY_create_by_txt", "d2i_OCSP_SINGLERESP", "ff_formats_unref", "av_frame_get_channels", "asn1_do_adb", "ssl_clear_bad_session", "_Z24AudioSpecificConfig_InitP21CSAudioSpecificConfig", "_Z23FDKaacEnc_psyInitStatesP12PSY_INTERNALP10PSY_STATIC17AUDIO_OBJECT_TYPE", "BIO_dump_cb", "SSL_CTX_free", "_Z25FreeRam_SbrDecWorkBuffer2PPl", "BIO_get_retry_reason", "ff_find_last_ts", "X509_issuer_name_hash", "OBJ_bsearch_ssl_cipher_id", "avg_hevc_qpel_s16_h1v2_8_neon", "ec_GFp_simple_point2oct", "ASN1_UTCTIME_free", "ENGINE_register_RSA", "v2i_ASN1_BIT_STRING", "ec_wNAF_precompute_mult", "NCONF_load_fp", "X509_VERIFY_PARAM_lookup", "EC_EX_DATA_free_all_data", "BIO_sock_should_retry", "EVP_PKEY_free", "swri_noise_shaping_int32", "DH_up_ref", "SSL_CTX_set_psk_client_callback", "_Z26GetRam_Sbr_guideVectorOrigi", "EC_POINT_clear_free", "_Z31FreeAacDecoderStaticChannelInfoPP28CAacDecoderStaticChannelInfo", "ff_psdsp_init_arm", "_Z5f2Powli", "_Z20CChannelElement_ReadP13FDK_BITSTREAMPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfo17AUDIO_OBJECT_TYPEPK16SamplingRateInfojjhaP12TRANSPORTDEC", "avcodec_get_subtitle_rect_class", "avg_hevc_qpel_s32_v2_8_neon", "av_audio_fifo_realloc", "avfilter_inout_free", "ff_rtmp_packet_dump", "av_append_path_component", "av_color_range_name", "_Z23qmfChangeOutScalefactorP15QMF_FILTER_BANKi", "ff_h264_slice_context_init", "ff_draw_init", "ff_h264_idct_add_14_c", "X509_policy_level_node_count", "FDKprintfErr", "av_int2i", "av_stream_new_side_data", "policy_cache_find_data", "_Z21sbrdecDownSampleLoResPhhS_h", "avformat_configuration", "UI_method_get_closer", "ff_hevc_intra_chroma_pred_mode_decode", "av_force_cpu_flags", "ENGINE_set_ex_data", "ffurl_closep", "x264_cpu_num_processors", "EVP_des_ede3_cfb8", "ENGINE_get_ECDSA", "tree_find_sk", "ff_hevc_put_qpel_uw_pixels_w4_neon_8", "BUF_strnlen", "FDKceil", "X509_add1_ext_i2d", "x264_cpu_detect", "EVP_EncryptFinal", "TLSv1_2_server_method", "X509_REVOKED_get_ext_by_critical", "av_rc4_init", "SSL_set_tmp_ecdh_callback", "X509_LOOKUP_new", "i2d_ASN1_bytes", "x264_cabac_encode_init_core", "i2d_re_X509_tbs", "av_opt_flag_is_set", "avfilter_graph_parse2", "X509_STORE_set1_param", "X509_LOOKUP_by_fingerprint", "avio_printf", "SHA256", "ff_mpadsp_init_arm", "SSL_CTX_set_default_passwd_cb_userdata", "_Z37GetRequiredMemRam_Sbr_freqBandTableLOv", "i2d_OCSP_SIGNATURE", "EVP_PKEY_meth_get_encrypt", "ec_GFp_simple_group_copy", "i2d_PKCS7_ENCRYPT", "X509_EXTENSION_free", "BN_BLINDING_convert", "ff_alloc_packet2", "ec_GF2m_simple_point_set_affine_coordinates", "PKCS7_SIGNER_INFO_set", "i2d_DSA_PUBKEY", "ERR_load_SSL_strings", "avio_read_dir", "_Z31FDKsbrEnc_ResetTonCorrParamExtrP16SBR_TON_CORR_ESTiiPhiiPS1_Pii", "X509_REVOKED_delete_ext", "avpriv_strtod", "sws_convVec", "av_cast5_crypt", "X509V3_EXT_d2i", "ff_generate_window_func", "ff_put_pixels16_xy2_no_rnd_neon", "SRP_VBASE_free", "EVP_PKEY_asn1_set_free", "aes_v8_cbc_encrypt", "ff_mpa_synth_filter_fixed", "av_audio_convert", "CRYPTO_malloc", "X509_add_ext", "DSA_verify", "___Unwind_Backtrace", "level_find_node", "CMAC_Update", "RSA_memory_lock", "_Z23slotBasedHybridAnalysisPlS_S_S_P6HYBRID", "ssl_prepare_clienthello_tlsext", "OBJ_NAME_get", "__fixdfsi", "sbrEncoder_GetHeader", "_Z8fixp_cosli", "_Z30FDKaacEnc_EstimateScaleFactorsPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELii", "swr_close", "av_packet_ref", "o2i_ECPublicKey", "ERR_print_errors_cb", "OBJ_nid2ln", "RAND_egd", "av_dict_get_string", "ASN1_TYPE_set_int_octetstring", "SSL_SESSION_new", "ASN1_ENUMERATED_free", "av_display_matrix_flip", "ff_put_pixels8_y2_no_rnd_neon", "ff_hevc_put_qpel_uw_h3v1_neon_8", "EVP_DecryptInit", "x264_predict_8x8c_v_c", "EVP_CIPHER_key_length", "avpriv_request_sample", "_Z14FreeAacDecoderPP20AAC_DECODER_INSTANCE", "EC_KEY_get_enc_flags", "av_stristr", "avfilter_graph_alloc", "ff_dct32_fixed", "ff_simple_idct_armv6", "ff_h264_chroma422_dc_dequant_idct_10_c", "X509_PURPOSE_get0", "ec_GF2m_simple_field_sqr", "sk_delete", "cms_DigestAlgorithm_set", "_Z22FDKaacEnc_SpreadingMaxiPKlS0_Pl", "x264_ratecontrol_mb_qp", "SSL_get_srp_N", "ff_amf_write_bool", "ffurl_read_complete", "X509_REQ_check_private_key", "x264_me_refine_bidir_satd", "X509_CRL_get_ext_count", "CRYPTO_get_locked_mem_ex_functions", "X509_TRUST_get_trust", "GENERAL_NAME_print", "_Z37GetRequiredMemRam_Sbr_guideVectorOrigv", "_Z28FDKaacEnc_InitBlockSwitchingP23BLOCK_SWITCHING_CONTROLi", "av_codec_set_pkt_timebase", "av_opt_is_set_to_default_by_name", "_Z28FDKaacEnc_writeExtensionDataP12TRANSPORTENCP16QC_OUT_EXTENSIONijj17AUDIO_OBJECT_TYPEa", "PEM_write_bio_PKCS8PrivateKey_nid", "x264_cabac_encode_ue_bypass", "ASN1_dup", "ssl3_init_finished_mac", "ENGINE_get_pkey_asn1_meth", "ssl3_send_change_cipher_spec", "transform_skip_neon", "ff_hevc_put_pixels_w12_neon_8", "sbrDecoder_InitElement", "BIO_vfree", "i2d_X509_REQ", "ff_hevc_v_loop_filter_luma_neon", "av_image_get_buffer_size", "ff_mdct_end_fixed_32", "d2i_X509_CERT_PAIR", "PEM_read_DSAPrivateKey", "ff_get_cpu_flags_arm", "BN_dec2bn", "policy_cache_set_mapping", "NETSCAPE_CERT_SEQUENCE_new", "ff_h264_decode_init", "ECDSA_OpenSSL", "FDK_setBitCnt", "ASN1_TYPE_get_octetstring", "av_audio_fifo_free", "i2d_PrivateKey_fp", "ec_GF2m_simple_group_get_degree", "CMS_RecipientInfo_set0_password", "av_thread_message_queue_free", "BIO_get_ex_data", "EVP_camellia_256_cfb1", "X509V3_get_value_int", "d2i_X509_CERT_AUX", "EVP_PKEY_meth_set_copy", "PEM_write_bio_ECPrivateKey", "PEM_read_NETSCAPE_CERT_SEQUENCE", "ff_nv21_to_bgra_neon_32", "ASN1_TIME_set_string", "av_fifo_generic_peek", "dtls1_heartbeat", "av_frame_copy", "SSL_use_RSAPrivateKey", "ssl3_change_cipher_state", "EVP_aes_128_ofb", "BIO_pop", "av_realloc_f", "_Z36GetRequiredMemRam_aacEnc_PsyInternalv", "dtls1_ctrl", "avcodec_find_decoder_by_name", "avio_get_str16be", "EVP_read_pw_string", "PEM_write_bio_DSA_PUBKEY", "ssl_update_cache", "ASN1_bn_print", "d2i_PUBKEY", "ffurl_get_multi_file_handle", "ff_amf_write_field_name", "d2i_ASN1_PRINTABLESTRING", "ff_h264_idct_add8_422_12_c", "ASN1_STRING_set0", "X509_NAME_add_entry_by_NID", "_Z26FDKaacEnc_AdjustThresholdsPP11ATS_ELEMENTPP14QC_OUT_ELEMENTP6QC_OUTPP15PSY_OUT_ELEMENTiP15CHANNEL_MAPPING", "av_samples_alloc_array_and_samples", "DES_ede3_ofb64_encrypt", "FDKacos", "ssl_bytes_to_cipher_list", "EVP_EncodeInit", "FDKaacEnc_AacInitDefaultConfig", "_Z33FDKaacEnc_CalcBandEnergyOptimLongPKlPiPKiiPlS4_", "X9_62_PENTANOMIAL_new", "X509_CRL_sort", "ff_af_queue_remove", "ECDSA_METHOD_set_flags", "_Z24FDKaacEnc_CalcFormFactorPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELi", "SSL_get_sigalgs", "ERR_free_strings", "EVP_CIPHER_flags", "CONF_imodule_get_module", "d2i_OCSP_REQUEST", "avfilter_make_format64_list", "PKCS7_dataDecode", "ec_GFp_simple_point_init", "SSLv23_server_method", "ff_yuv420p_to_rgba_neon_32", "av_read_pause", "d2i_DIRECTORYSTRING", "_Z29transportDec_GetNrOfSubFramesP12TRANSPORTDEC", "_Z30FreeRam_TransportDecoderBufferPPh", "ff_openssl_init", "av_tree_destroy", "ff_framesync_configure", "av_calloc", "_Z26qmfInitSynthesisFilterBankP15QMF_FILTER_BANKPliiiii", "av_tea_init", "EC_PRIVATEKEY_new", "PKCS8_pkey_get0", "PKCS12_BAGS_free", "DES_ede3_cbc_encrypt", "PEM_write_RSAPublicKey", "av_usleep", "i2d_PKCS7_SIGNER_INFO", "X509_LOOKUP_init", "_Z26CChannel_CodebookTableInitP22CAacDecoderChannelInfo", "BIO_get_retry_BIO", "dtls1_clear", "_Z24FDKaacEnc_CodePnsChanneliP10PNS_CONFIGPiPlS1_S2_", "_Z18resetLppTransposerP13SBR_LPP_TRANShPhhS1_hhj", "av_blowfish_alloc", "SRP_create_verifier", "av_des_crypt", "SSL_CIPHER_get_version", "ENGINE_register_all_ECDSA", "ECDH_get_ex_data", "SSL_set_bio", "tls12_get_sigandhash", "av_find_info_tag", "SHA1_Transform", "av_strtod", "_Z34FDKsbrEnc_sbrNoiseFloorEstimateQmfP24SBR_NOISE_FLOOR_ESTIMATEPK14SBR_FRAME_INFOPlPS4_PaiiiiP9INVF_MODEj", "X509_REQ_add1_attr_by_OBJ", "_Z23GetRam_TransportDecoderi", "ff_yuv420p_to_abgr_neon_16", "d2i_RSA_PSS_PARAMS", "i2d_ECPrivateKey", "ff_combine_frame", "EC_KEY_set_public_key", "EVP_DecodeUpdate", "sk_pop", "i2d_ASN1_INTEGER", "i2d_X509_CRL_fp", "ff_h264_filter_mb", "CRYPTO_dup_ex_data", "CMS_RecipientInfo_set0_key", "BIO_find_type", "OPENSSL_instrument_bus", "PKCS5_pbe_set0_algor", "_Z21CConcealment_GetStateP16CConcealmentInfo", "_Z10CTns_ResetP8CTnsData", "ff_videodsp_init_arm", "NETSCAPE_CERT_SEQUENCE_free", "ERR_load_DSO_strings", "ASN1_PCTX_set_oid_flags", "ff_yuv422p_to_argb_neon_16", "CRYPTO_set_ex_data_implementation", "put_hevc_qpel_s8_h2_8_neon", "PEM_get_EVP_CIPHER_INFO", "X509V3_get_string", "CAST_cfb64_encrypt", "ff_hevc_annexb2mp4", "EC_POINT_point2oct", "av_thread_message_queue_set_err_recv", "av_audio_fifo_alloc", "ff_startcode_find_candidate_armv6", "ff_imdct_calc_c_fixed", "SSL_get_current_compression", "DSO_load", "X509_issuer_name_hash_old", "X509_STORE_CTX_cleanup", "BIO_f_base64", "_Z34CLatmDemux_GetOtherDataPresentFlagP10CLatmDemux", "av_packet_move_ref", "ECDH_compute_key", "X509_NAME_add_entry_by_txt", "_Z28GetRequiredMemRam_SbrElementv", "PKCS7_get_smimecap", "BN_GF2m_mod_arr", "ASN1_TIME_free", "bn_cmp_part_words", "av_fifo_generic_read", "X509_NAME_print_ex", "avcodec_open2", "BN_GF2m_mod_inv_arr", "X509_STORE_CTX_set_verify_cb", "SEED_encrypt", "gcm_ghash_4bit", "ff_put_h264_qpel16_mc02_neon", "X509_policy_node_get0_parent", "put_hevc_qpel_s16_h3_8_neon", "_Z25transportEnc_LatmGetFrameP11LATM_STREAMP13FDK_BITSTREAMPi", "EC_GROUP_get_curve_GF2m", "ASN1_PCTX_set_flags", "cms_DigestedData_init_bio", "x264_plane_copy_deinterleave_v210_c", "BN_BLINDING_get_thread_id", "PEM_read_PKCS8_PRIV_KEY_INFO", "ENGINE_get_ex_data", "sk_value", "ff_yuv422p_to_bgra_neon_32", "i2d_EDIPARTYNAME", "EC_GROUP_set_generator", "ff_h264_chroma422_dc_dequant_idct_9_c", "ECDSA_METHOD_set_verify", "BIO_f_cipher", "__ctzdi2", "ASN1_STRING_set_by_NID", "i2d_ASN1_VISIBLESTRING", "EC_EX_DATA_set_data", "SSL_cache_hit", "BN_GF2m_mod_mul_arr", "x264_frame_expand_border_filtered", "d2i_PUBKEY_fp", "RIPEMD160_Init", "av_register_hwaccel", "_Z42FDKsbrEnc_ResetSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "SSL_use_certificate_file", "ff_parse_key_value", "av_fifo_generic_peek_at", "rgb16to24", "_Z5fLog2liPi", "x264_sei_avcintra_umid_write", "OpenSSLDie", "EVP_CIPHER_block_size", "NAME_CONSTRAINTS_check", "_Z21qmfSynthesisFilteringP15QMF_FILTER_BANKPPlS2_PK16QMF_SCALE_FACTORiPsiS1_", "ff_sse16_armv6", "get_cur_idx", "X509V3_EXT_add_nconf_sk", "CRYPTO_ctr128_encrypt", "cms_EnvelopedData_init_bio", "x264_encoder_headers", "ff_sbr_qmf_post_shuffle_neon", "_Z20aacDecoder_drcPrologP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "DIST_POINT_new", "_Z21deleteSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "ASN1_item_i2d", "BN_RECP_CTX_free", "OBJ_find_sigid_by_algs", "X509_VERIFY_PARAM_get0_peername", "ff_copy_whitelists", "ff_h264_free_tables", "SSL_get_psk_identity_hint", "av_frame_ref", "X9_62_CHARACTERISTIC_TWO_new", "avpriv_do_elbg", "x264_predict_4x4_init", "ssl_add_serverhello_use_srtp_ext", "SSL_CTX_use_certificate_chain_file", "d2i_ASN1_TYPE", "__addsf3", "ff_hevc_put_qpel_v1_neon_8", "EVP_PKEY_asn1_free", "x264_macroblock_tree_read", "ff_update_link_current_pts", "av_dict_parse_string", "BN_div_recp", "av_image_copy_plane", "i2d_DIRECTORYSTRING", "ff_avc_parse_nal_units_buf", "av_expr_free", "PEM_read_bio_X509_REQ", "sbrEncoder_Init", "av_dump_format", "av_color_space_name", "ff_rtp_get_payload_type", "PEM_dek_info", "av_opt_set_dict", "av_thread_message_queue_set_err_send", "x264_macroblock_cache_save", "ssl_add_serverhello_tlsext", "av_opt_set_bin", "i2d_OCSP_RESPONSE", "PKCS7_ENCRYPT_free", "X509V3_NAME_from_section", "avio_rb16", "BN_num_bits", "SSL_get_shutdown", "EVP_aes_256_cfb128", "d2i_PKCS12_fp", "charBuf2HexString", "RSA_padding_add_PKCS1_OAEP", "ec_GFp_simple_group_finish", "d2i_SXNET", "ASN1_PCTX_new", "asn1_enc_free", "X509_policy_tree_get0_level", "ff_h264_get_profile", "idea_cbc_encrypt", "SSL_SESSION_get_id", "_Z25CProgramConfig_GetDefaultP14CProgramConfigj", "_Z43FDKsbrEnc_DeleteSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTOR", "ff_h264_luma_dc_dequant_idct_9_c", "BIO_new", "X509_signature_dump", "avg_hevc_qpel_s32_h1v2_8_neon", "dtls1_free", "x264_cabac_context_init", "x264_predict_8x8c_h_c", "EVP_add_cipher", "OCSP_CERTSTATUS_new", "RSA_padding_add_PKCS1_type_1", "ERR_lib_error_string", "EVP_PKEY_derive", "_Z22FreeRam_Sbr_signMatrixPPi", "_Z20calculateSbrEnvelopeP16QMF_SCALE_FACTORP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAP14SBR_FRAME_DATAPPlS8_iS7_ji", "tls1_ec_curve_id2nid", "CRYPTO_get_new_dynlockid", "ff_reset_entries", "ssl3_send_client_verify", "av_resample_compensate", "ff_hevc_clear_refs", "av_q2intfloat", "ffio_fdopen", "CMS_RecipientEncryptedKey_cert_cmp", "ff_put_h264_qpel8_mc33_neon", "_Z16CAacDecoder_Open14TRANSPORT_TYPE", "tls1_clear", "EC_POINT_set_compressed_coordinates_GFp", "ff_put_h264_qpel8_mc10_neon", "i2d_RSA_OAEP_PARAMS", "DSA_do_sign", "aacDecoder_SetParam", "_Z39GetRequiredMemRam_Sbr_QmfStatesAnalysisv", "_Z52BidirectionalEstimation_UseScfOfPrevFrameAsReferenceP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "_Z38FDKsbrEnc_WriteEnvSingleChannelElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAP11COMMON_DATAj", "av_packet_new_side_data", "ASN1_STRING_get_default_mask", "d2i_OCSP_RESPDATA", "avfilter_transform", "PKCS7_simple_smimecap", "__gnu_Unwind_Backtrace", "SSL_CTX_set_srp_password", "_Z41GetRequiredMemRam_Sbr_guideVectorDetectedv", "av_frame_free", "bn_div_words", "avfilter_config_links", "BIO_number_read", "av_frame_new_side_data", "PEM_ASN1_read", "SSL_CTX_SRP_CTX_init", "sws_freeVec", "UI_get_result_maxsize", "ssl3_ctx_ctrl", "ff_pred8x8_vert_neon", "ENGINE_unregister_RSA", "ec_GFp_mont_field_sqr", "ffio_read_partial", "RSA_get_default_method", "av_dynarray2_add", "CONF_modules_free", "d2i_ASN1_BMPSTRING", "SSL_set_shutdown", "_Z26transportEnc_EndAccessUnitP12TRANSPORTENCPi", "OPENSSL_uni2asc", "i2d_ASN1_TYPE", "d2i_ASN1_T61STRING", "avg_hevc_qpel_s32_h3v3_8_neon", "NCONF_WIN32", "ec_GF2m_simple_is_on_curve", "av_codec_set_lowres", "ff_init_buffer_info", "CAST_ecb_encrypt", "PEM_read_ECPKParameters", "av_bitstream_filter_init", "ffio_limit", "avcodec_encode_video", "d2i_X509_REQ_bio", "_Z21transportDec_FillDataP12TRANSPORTDECPhjPji", "EVP_PKEY_meth_get_paramgen", "FDK_Copy", "ENGINE_set_load_ssl_client_cert_function", "POLICY_MAPPING_new", "UI_dup_verify_string", "CONF_module_set_usr_data", "CRYPTO_remalloc", "PKCS7_add_attribute", "EVP_DigestVerifyFinal", "ff_insert_pad", "ASN1_parse", "SSL_renegotiate", "x264_macroblock_thread_free", "ff_hevc_cu_chroma_qp_offset_idx", "SSL_set_alpn_protos", "X509V3_EXT_get", "ASN1_i2d_fp", "BIO_hex_string", "av_get_channel_description", "ASN1_TYPE_new", "X509_TRUST_get_count", "EVP_aes_256_wrap", "ff_hevc_put_pixels_w32_neon_8", "OCSP_REQ_CTX_new", "PEM_write_bio", "d2i_ASN1_GENERALSTRING", "EVP_PKEY_delete_attr", "d2i_OCSP_BASICRESP", "avio_skip", "d2i_ECPrivateKey", "OPENSSL_init", "EC_PRIVATEKEY_free", "_Z29FDKsbrEnc_initInvFiltDetectorP16SBR_INV_FILT_ESTPiij", "av_opt_eval_q", "av_rescale_delta", "avpriv_align_put_bits", "ASN1_IA5STRING_new", "EDIPARTYNAME_free", "BN_mod_exp_mont", "avg_hevc_qpel_s32_h2v3_8_neon", "UI_add_input_boolean", "ff_check_interrupt", "_Z24FreeRam_aacEnc_PsyStaticPP10PSY_STATIC", "ff_request_frame", "_Z22CBlock_ReadSectionDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "ff_hevc_put_qpel_v3_neon_8", "ff_mov_close_hinting", "X509_VERIFY_PARAM_set1_policies", "X509_ATTRIBUTE_get0_data", "av_interleaved_write_frame", "_Z24GetRequiredMemRam_ps_decv", "EVP_PKEY_asn1_add0", "_Z24FDKaacEnc_groupShortDataPlP13SFB_THRESHOLDP10SFB_ENERGYS3_S3_iiPKiPKlPiS8_S_iS5_i", "lh_strhash", "FDKtan", "aacDecoder_Fill", "ff_side_data_set_encoder_stats", "ff_add_cpb_side_data", "av_md5_final", "av_resample_init", "put_hevc_epel_s16_h_8_neon", "ssl_get_prev_session", "_Z22FreeRam_aacEnc_QCstatePP8QC_STATE", "USERNOTICE_free", "WAV_InputOpen", "tbBase64Dec", "SSL_SESSION_set_timeout", "X509_ATTRIBUTE_dup", "_Z22imdct_adapt_parametersP6mdct_tPiS1_iPK8FIXP_SPKi", "ff_er_add_slice", "av_image_fill_arrays", "SRP_Calc_server_key", "ff_http_auth_handle_header", "av_buffer_get_ref_count", "X509_CRL_check_suiteb", "x264_frame_expand_border_mod16", "_Z12ResetPsDeCorP6PS_DEC", "X509_get0_signature", "X509_PURPOSE_set", "CONF_get1_default_config_file", "_Z37FDKsbrEnc_deleteSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATE", "av_dct_end", "ff_channel_layouts_changeref", "cms_EncryptedContent_init", "FDKsprintf", "ASN1_STRING_to_UTF8", "PEM_write_bio_DHxparams", "X509_PURPOSE_get0_sname", "ff_sbr_hf_g_filt_neon", "X509_NAME_print", "_Z19FDKaacEnc_PsyOutNewPP7PSY_OUTiiiPh", "EC_GFp_simple_method", "av_dict_get", "ssl3_get_message", "ffurl_open", "tls12_get_sigid", "_Unwind_ForcedUnwind", "x264_predict_8x16c_dc_c", "BN_RECP_CTX_set", "PEM_read_X509", "ENGINE_set_default_digests", "_Z10FDKcrcInitP11FDK_CRCINFOjjj", "PBEPARAM_new", "d2i_CRL_DIST_POINTS", "ff_simple_idct248_put", "PEM_write_bio_Parameters", "ASN1_GENERALIZEDTIME_free", "OCSP_REQUEST_free", "av_aes_alloc", "avcodec_default_execute", "AES_cbc_encrypt", "FDKfread_EL", "ff_avg_pixels16_x2_no_rnd_neon", "sws_alloc_set_opts", "ff_merge_samplerates", "ff_h264_execute_ref_pic_marking", "ff_put_h264_qpel8_mc20_neon", "avio_rb64", "ff_amf_write_object_start", "ff_listen_bind", "ff_pix_abs16_y2_armv6", "d2i_DSAPrivateKey_bio", "bn_dup_expand", "PEM_write_PKCS8PrivateKey_nid", "BN_mod_sub", "av_codec_is_decoder", "MD5_Final", "PROXY_POLICY_free", "avfilter_graph_request_oldest", "ssl3_send_next_proto", "ASN1_UTF8STRING_free", "FDKlog", "CONF_set_default_method", "ENGINE_register_all_DH", "ec_GF2m_simple_point_copy", "SSL_set_tlsext_use_srtp", "EVP_PKEY_asn1_set_private", "ff_nv12_to_bgra_neon_32", "i2d_SXNETID", "CRYPTO_ccm128_encrypt", "bn_mul_normal", "SSL_CIPHER_get_name", "tls1_shared_curve", "ff_h264_decode_slice_header", "BN_mod_sub_quick", "SSL_get_verify_callback", "av_frame_set_sample_rate", "RSA_up_ref", "i2d_PROXY_POLICY", "ssl_cert_set_cert_store", "SSL_get_client_CA_list", "ff_idet_filter_line_c", "ffurl_register_protocol", "CMS_RecipientInfo_ktri_get0_signer_id", "SHA224", "ff_rfps_add_frame", "ECDSA_set_ex_data", "ENGINE_ctrl_cmd_string", "ec_GFp_simple_field_sqr", "av_vorbis_parse_free", "ff_framesync_add_frame", "i2d_X509_bio", "SSL_set_tmp_rsa_callback", "X509_LOOKUP_by_subject", "av_application_did_io_tcp_read", "av_hmac_final", "CRYPTO_THREADID_get_callback", "X509_REVOKED_get_ext", "put_hevc_epel_s16_pixels_8_neon", "EVP_PKEY_get1_DSA", "EVP_CIPHER_CTX_clear_flags", "ffio_ensure_seekback", "EVP_idea_cbc", "ff_h264_free_context", "DES_check_key_parity", "avpriv_aac_parse_header", "X509V3_EXT_val_prn", "EVP_CipherUpdate", "ff_avg_pixels16_y2_neon", "RSA_free", "x264_cabac_block_residual_8x8_rd_c", "CMS_add_simple_smimecap", "av_write_frame", "ff_h264_idct_dc_add_14_c", "CRYPTO_gcm128_new", "ff_interleave_packet_per_dts", "x264_cabac_encode_bypass_c", "av_opt_next", "PKCS7_set_attributes", "X509_NAME_ENTRY_create_by_NID", "avg_hevc_qpel_s8_v1_8_neon", "_Z35GetRequiredMemAacDecoderChannelInfov", "d2i_ASN1_GENERALIZEDTIME", "c2i_ASN1_OBJECT", "rgb64tobgr48_nobswap", "_Z30FDKaacEnc_getChannelAssignment12CHANNEL_MODE13CHANNEL_ORDER", "X509_VERIFY_PARAM_set_purpose", "sbrEncoder_Close", "X509_CRL_get_ext_by_NID", "rgb16tobgr15", "EC_KEY_set_flags", "SSLv3_client_method", "ffio_rewind_with_probe_data", "ssl3_choose_cipher", "ASN1_item_new", "_Z12LdDataVectorPlS_i", "ff_ps_apply", "EVP_PKEY_CTX_get_cb", "OCSP_CERTSTATUS_free", "X509_VERIFY_PARAM_set1", "dtls1_accept", "GENERAL_NAMES_free", "_Z32FDKsbrEnc_initFrameInfoGeneratorP18SBR_ENVELOPE_FRAMEiiiiii", "FDKsbrEnc_EncodeIpd", "ff_dct32_float", "SSL_CTX_use_certificate_ASN1", "ff_hevc_put_qpel_uw_h3v3_neon_8", "BIO_clear_flags", "CMS_SignedData_init", "EC_POINT_is_at_infinity", "i2d_DSAPublicKey", "sk_insert", "ff_j_rev_dct", "avio_r8", "_Z23transportEnc_GetLibInfoP8LIB_INFO", "OTHERNAME_free", "ff_put_h264_qpel8_mc21_neon", "ECDH_set_method", "av_get_packet", "av_opt_get_double", "i2d_X509_NAME_ENTRY", "ff_faanidct_put", "avio_enum_protocols", "i2c_ASN1_INTEGER", "_Z9mdct_initP6mdct_tPli", "ff_socket_nonblock", "OTHERNAME_new", "X509_PURPOSE_get_id", "CRYPTO_get_dynlock_lock_callback", "av_buffersrc_get_nb_failed_requests", "av_fifo_alloc", "dtls1_clear_sent_buffer", "av_opt_get_video_rate", "_Z21GetRam_Sbr_envYBufferiPh", "CRYPTO_set_id_callback", "av_hash_get_size", "_Z20resetSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "DSO_up_ref", "av_lockmgr_register", "DSA_set_default_method", "av_frame_get_best_effort_timestamp", "av_timecode_make_mpeg_tc_string", "OBJ_NAME_cleanup", "av_seek_frame", "av_sub_q", "DTLS_server_method", "UI_get_string_type", "d2i_X509_REQ_INFO", "SSL_CTX_set_cert_cb", "__gnu_Unwind_Save_VFP", "EVP_PKEY_meth_get_keygen", "EVP_aes_128_ctr", "BN_GF2m_poly2arr", "DES_set_odd_parity", "ff_make_formatu64_list", "ff_mpadsp_init", "SSL_srp_server_param_with_username", "ASN1_pack_string", "CMS_add0_recipient_password", "ISSUING_DIST_POINT_new", "EVP_CIPHER_CTX_set_flags", "_Z19CPns_SetCorrelationP8CPnsDataiii", "sk_zero", "avio_rl16", "ff_init_ff_sine_windows", "bn_mul_part_recursive", "RSA_get_ex_new_index", "EVP_CIPHER_CTX_new", "EVP_PKEY_get_attr_by_OBJ", "_Z31transportDec_GetAuBitsRemainingP12TRANSPORTDECj", "avfilter_uninit", "idea_set_encrypt_key", "av_set_options_string", "SSL_set_srp_server_param_pw", "ff_put_h264_qpel16_mc21_neon", "ff_avg_h264_qpel16_mc03_neon", "BIO_f_md", "BN_mod_exp2_mont", "_Z21adtsRead_DecodeHeaderP11STRUCT_ADTSP21CSAudioSpecificConfigP13FDK_BITSTREAMi", "SSL_get_shared_sigalgs", "avcodec_find_encoder", "BIO_ctrl_pending", "UI_OpenSSL", "BN_CTX_end", "ASN1_STRING_free", "_Z24FDKaacEnc_DistributeBitsP13ADJ_THR_STATEP11ATS_ELEMENTPP15PSY_OUT_CHANNELP7PE_DATAPiS8_iiiiili", "WAV_OutputOpen", "EC_POINT_free", "RSA_X931_hash_id", "i2d_X509_REVOKED", "CRYPTO_128_wrap", "i2d_PKCS8PrivateKey_nid_bio", "ff_hevc_put_qpel_h1v2_neon_8", "ff_mov_cenc_avc_parse_nal_units", "BN_GF2m_mod_div_arr", "put_hevc_qpel_s8_h1v2_8_neon", "X509V3_EXT_add_list", "PEM_read_bio_ECPKParameters", "X509_STORE_CTX_set_trust", "EVP_PBE_cleanup", "SSL_SESSION_get_time", "ff_get_bmp_header", "RAND_cleanup", "X509_CRL_verify", "SSL_CTX_set_srp_username_callback", "sws_subVec", "i2d_DSAPrivateKey_bio", "EVP_MD_size", "CMS_ContentInfo_print_ctx", "_CONF_new_data", "ssl_add_clienthello_tlsext", "_Z19FDKaacEnc_TnsEncodeP8TNS_INFOP8TNS_DATAiPK10TNS_CONFIGiPlii", "OCSP_SERVICELOC_free", "av_hmac_init", "av_get_bits_per_pixel", "_Z13lppTransposerP13SBR_LPP_TRANSP16QMF_SCALE_FACTORPPlS3_S4_iiiiiP9INVF_MODES6_", "aacEncGetLibInfo", "avformat_queue_attached_pictures", "DH_new", "X509_VERIFY_PARAM_set_depth", "X509_STORE_CTX_free", "ff_set_common_samplerates", "av_get_channel_name", "CMS_RecipientInfo_kari_get0_ctx", "X509_CRL_add_ext", "av_opt_copy", "ssl_fill_hello_random", "BN_rand_range", "NOTICEREF_free", "av_frame_get_colorspace", "PEM_def_callback", "FDKfloor", "avcodec_decode_video2", "cms_keyid_cert_cmp", "avg_hevc_epel_s8_hv_8_neon", "ff_amf_read_bool", "i2s_ASN1_ENUMERATED_TABLE", "applyLimiter", "CAST_decrypt", "av_reallocp_array", "BN_GF2m_add", "av_strstart", "av_format_get_opaque", "ff_hevc_set_neighbour_available", "ssl3_put_cipher_by_char", "EVP_bf_ecb", "CRYPTO_set_add_lock_callback", "ff_jpeg_fdct_islow_10", "ENGINE_register_ciphers", "put_hevc_qpel_s8_h3v2_8_neon", "BIO_asn1_get_suffix", "ff_hevc_dsp_init_neon_tb", "_Z19GetRam_aacEnc_QCouti", "ENGINE_get_ex_new_index", "EVP_cast5_cfb64", "dsa_paramgen_check_g", "ff_add_param_change", "EVP_PKEY_CTX_get_operation", "sbrDecoder_SetParam", "ff_hevc_put_qpel_uni_neon_wrapper", "ASN1_GENERALIZEDTIME_adj", "avio_rb32", "add_hevc_qpel_s16_h2v3_8_neon", "x264_frame_init_lowres", "_Z31FDKaacEnc_CalculateFullTonalityPlPiS_PsiPKii", "i2d_X509_AUX", "SEED_ecb_encrypt", "DTLS_client_method", "_Z21rescaleSubbandSamplesPPlS0_iiiii", "rgb16tobgr16", "ENGINE_unregister_ECDH", "avpriv_mpegts_parse_open", "asn1_template_print_ctx", "_Z22FDKhybridSynthesisInitP18FDK_SYN_HYB_FILTER15FDK_HYBRID_MODEii", "BN_nnmod", "RIPEMD160_Update", "SSL_CTX_use_serverinfo_file", "RSA_public_encrypt", "_Z20GetRam_aacEnc_PsyOuti", "EVP_PKEY_keygen", "POLICY_CONSTRAINTS_new", "EVP_camellia_128_cfb8", "d2i_EC_PUBKEY", "ff_all_channel_layouts", "avformat_seek_file", "EC_GROUP_get_trinomial_basis", "pqueue_insert", "av_dup_packet", "_Unwind_Backtrace", "_Z12FDKcrcGetCRCP11FDK_CRCINFO", "s2i_ASN1_INTEGER", "cms_DigestAlgorithm_find_ctx", "x264_quant_8x8_trellis", "SSL_get_finished", "put_hevc_qpel_s32_h2v2_8_neon", "av_display_rotation_get", "BIO_next", "ENGINE_set_destroy_function", "_Z24GetRam_sbr_OverlapBufferi", "TXT_DB_get_by_index", "_Z18aacDecoder_drcInitP8CDrcInfo", "cms_set1_keyid", "dtls1_do_write", "RSA_PSS_PARAMS_new", "ff_hevc_decode_nal_pps", "av_rescale_q", "CMS_SignerInfo_verify", "ff_simple_idct44_add", "tls1_ec_nid2curve_id", "av_packet_shrink_side_data", "avg_hevc_qpel_s16_h1v3_8_neon", "UI_method_set_closer", "ff_hevc_put_qpel_h2v1_neon_8", "av_md5_alloc", "avpriv_copy_bits", "x264_frame_unshift", "ECDSA_sign", "PEM_read_bio_EC_PUBKEY", "X509_CERT_AUX_print", "bn_mod_add_fixed_top", "RSA_set_default_method", "av_div_i", "BN_mod_word", "ec_wNAF_have_precompute_mult", "ASN1_STRING_set_default_mask", "av_vbprintf", "av_codec_get_tag2", "swri_oldapi_conv_fltp_to_s16_nch_neon", "OPENSSL_wipe_cpu", "a2i_ASN1_STRING", "SSL_set_SSL_CTX", "md5_block_data_order", "ff_h264_idct_add16intra_neon", "SSL_CTX_set_client_cert_engine", "X509_REQ_get_extension_nids", "ff_hevc_luma_mv_merge_mode", "ff_parse_pixel_format", "ENGINE_unregister_digests", "sws_scaleVec", "ssl_add_serverhello_renegotiate_ext", "X509_NAME_get_index_by_OBJ", "x264_intra_sad_x3_8x8", "ssl_parse_serverhello_tlsext", "EVP_DigestSignFinal", "av_pix_fmt_desc_get", "ff_hevc_put_qpel_h3v3_neon_8", "ec_GF2m_have_precompute_mult", "_Z31FDK_DRC_Generator_setDrcProfileP8DRC_COMP11DRC_PROFILES1_", "ff_yuv420p_to_abgr_neon_32", "i2d_ECPKPARAMETERS", "avg_hevc_qpel_s8_h2v2_8_neon", "SRP_Calc_B", "_Unwind_GetDataRelBase", "ff_init_ff_cos_tabs", "d2i_ASN1_UNIVERSALSTRING", "ff_dv_frame_profile", "av_utf8_decode", "BN_BLINDING_set_thread_id", "ff_mpeg4video_split", "BN_CTX_start", "PKCS7_new", "SSL_CTX_set_generate_session_id", "bn_sqr_recursive", "av_image_alloc", "policy_node_free", "ff_h264_h_loop_filter_chroma_neon", "i2d_X509_EXTENSION", "X509_LOOKUP_file", "av_opt_get_channel_layout", "PKCS12_BAGS_new", "avpriv_lock_avformat", "CMS_dataFinal", "add_hevc_qpel_s32_v1_8_neon", "BF_options", "_Z6fLdPowlili", "SSL_use_psk_identity_hint", "add_hevc_epel_s16_h_8_neon", "X509_OBJECT_retrieve_by_subject", "ssl3_alert_code", "ECDSA_METHOD_get_app_data", "avformat_network_deinit", "ssl3_enc", "put_hevc_qpel_s8_v3_8_neon", "PKCS7_ISSUER_AND_SERIAL_free", "RC2_cfb64_encrypt", "EVP_camellia_192_ecb", "PEM_read_DSA_PUBKEY", "__gnu_Unwind_Restore_WMMXC", "avio_pause", "CMS_add0_RevocationInfoChoice", "ff_hevc_put_qpel_h1v1_neon_8", "X509_REVOKED_set_revocationDate", "SSL_SESSION_set_time", "ff_put_h264_qpel16_mc20_neon", "ff_codec_get_id", "ERR_reason_error_string", "x264_bitstream_init", "ff_startcode_find_candidate_c", "X509_ATTRIBUTE_count", "BN_GF2m_mod_exp", "SSL_CTX_sess_get_new_cb", "_Z24slotBasedHybridSynthesisPlS_S_S_P6HYBRID", "ff_hevc_split_coding_unit_flag_decode", "ff_ps_init", "x264_ratecontrol_end", "ff_hevc_bump_frame", "av_hash_update", "_Z34FDKsbrEnc_CreateExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiPh", "ssl_free_wbio_buffer", "bn_sqr_words", "ff_weight_h264_pixels_16_neon", "av_format_get_control_message_cb", "X509_CRL_INFO_new", "sws_freeFilter", "ff_imdct36_blocks_float", "FDKmalloc", "ff_put_h264_qpel16_mc32_neon", "i2d_ECPrivateKey_bio", "X509_check_host", "EVP_DigestInit", "i2d_ASN1_GENERALIZEDTIME", "rgb48tobgr48_nobswap", "EVP_des_ofb", "x264_rd_cost_part", "X509_STORE_CTX_set_error", "CMS_SharedInfo_encode", "ff_accept", "ECPKParameters_print_fp", "_Z29FDKsbrEnc_extractSbrEnvelope2P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP11ENV_CHANNELS8_P11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATAi", "i2d_CMS_bio_stream", "EVP_aes_256_xts", "ff_init_scantable", "ERR_remove_state", "hexString2CharBuf", "BF_set_key", "bn_sub_part_words", "av_pix_fmt_swap_endianness", "SSL_CTX_get0_certificate", "EVP_CIPHER_CTX_iv_length", "SRP_generate_client_master_secret", "BIO_get_ex_new_index", "SSL_set_cert_cb", "d2i_POLICYQUALINFO", "_Z30GetRam_Sbr_guideVectorDetectedi", "ssl3_get_next_proto", "add_hevc_qpel_s16_h1v1_8_neon", "SSL_add_client_CA", "CMS_SignerInfo_verify_content", "ssl_parse_clienthello_use_srtp_ext", "ff_imdct_calc_c_fixed_32", "X509_REQ_add1_attr", "ASN1_sign", "ssl3_setup_key_block", "i2a_ASN1_STRING", "SSL_CTX_set1_param", "X509_STORE_CTX_get0_store", "swr_drop_output", "X509_NAME_hash", "X509V3_EXT_print", "av_get_exact_bits_per_sample", "ff_add_pixels_clamped_neon", "x264_encoder_intra_refresh", "ssl23_default_timeout", "_Z22FDKaacEnc_prepareSfbPeP15PE_CHANNEL_DATAPKlS2_S2_PKiiii", "bn_mul_add_words", "PEM_read_bio_PrivateKey", "av_filename_number_test", "PKCS7_SIGNER_INFO_get0_algs", "act_transform_8x8_add_8", "x264_pps_write", "_Z21CarryBitToBranchValuehjPjS_", "X509_STORE_CTX_get_chain", "EVP_PKEY_meth_get_ctrl", "EVP_EncryptInit_ex", "SSL_get0_next_proto_negotiated", "_Z27CConcealment_SetAttenuationP14CConcealParamsPsS1_", "BN_free", "x264_frame_push_unused", "PEM_write", "OBJ_sn2nid", "EVP_aes_256_ccm", "ff_h264_idct8_add4_12_c", "av_buffersrc_add_frame_flags", "X509_add1_reject_object", "BN_mul", "__gnu_Unwind_Save_VFP_D", "FDKfwrite", "BN_dup", "i2c_ASN1_BIT_STRING", "X509_STORE_CTX_set0_param", "custom_ext_init", "EC_KEY_free", "EC_POINT_hex2point", "ff_mov_cenc_write_stbl_atoms", "X509_STORE_new", "DTLS_method", "ff_put_h264_qpel16_mc03_neon", "av_find_nearest_q_idx", "add_hevc_qpel_s32_h2v3_8_neon", "EVP_CIPHER_get_asn1_iv", "BN_add_word", "X509_NAME_delete_entry", "ffio_free_dyn_buf", "ff_amf_write_string", "sws_isSupportedEndiannessConversion", "OCSP_SINGLERESP_new", "PEM_read_X509_AUX", "_Z22FDKsbrEnc_codeEnvelopePaPK8FREQ_RESP17SBR_CODE_ENVELOPEPiiiii", "av_parse_time", "add_hevc_qpel_s32_h3v1_8_neon", "DIST_POINT_NAME_new", "ssl_bad_method", "_Unwind_GetCFA", "sws_freeContext", "av_get_token", "EVP_ecdsa", "FDK_getFreeBits", "av_frame_set_pkt_pos", "BN_is_prime_ex", "_Z24rvlcReadBitFromBitstreamP13FDK_BITSTREAMPth", "ERR_print_errors", "DES_key_sched", "_Z17FDKaacEnc_psyMainiP11PSY_ELEMENTP11PSY_DYNAMICP17PSY_CONFIGURATIONP15PSY_OUT_ELEMENTPsPii", "SSL_export_keying_material", "BIO_new_socket", "d2i_DSA_SIG", "ASN1_ENUMERATED_new", "pqueue_free", "EVP_sha224", "put_hevc_qpel_s8_h1v3_8_neon", "idea_encrypt", "_Z19CProgramConfig_ReadP14CProgramConfigP13FDK_BITSTREAMj", "d2i_DSAparams", "UI_new_method", "EVP_PKEY_print_public", "ff_avg_h264_qpel8_mc12_neon", "setLimiterSampleRate", "x264_predict_16x16_init_arm", "ENGINE_get_pkey_meth", "ff_init_mpadsp_tabs_float", "ssl3_renegotiate", "PROXY_POLICY_new", "X509V3_add_value_bool", "CMS_SignerInfo_get0_md_ctx", "x264_quant_init", "avg_hevc_epel_s16_v_8_neon", "EVP_EncryptInit", "x264_intra_satd_x3_4x4", "ff_hevc_init_orange", "_Z13GetRam_ps_deci", "SSL_ctrl", "put_hevc_qpel_s16_v3_8_neon", "RSAPrivateKey_dup", "X509_VERIFY_PARAM_get0", "ff_put_bmp_header", "EVP_des_ede3", "EC_GROUP_cmp", "RSA_set_method", "ff_fft_permute_neon", "i2d_PKCS12_bio", "i2d_ECDSA_SIG", "avg_hevc_qpel_s16_h1_8_neon", "av_i2int", "ASN1_item_sign_ctx", "SSL_CTX_set_srp_client_pwd_callback", "av_frame_set_channels", "rgb16tobgr32", "_Z19resetFreqBandTablesP15SBR_HEADER_DATAj", "EC_KEY_set_private_key", "SSL_load_error_strings", "ff_h264_idct_dc_add_neon", "_Z33FreeRam_aacEnc_AdjThrStateElementPP11ATS_ELEMENT", "_Z25adtsWrite_EndRawDataBlockP11STRUCT_ADTSP13FDK_BITSTREAMPi", "cms_env_asn1_ctrl", "EC_GROUP_set_curve_name", "RSA_blinding_off", "asn1_enc_restore", "X509_EXTENSION_get_data", "x264_slurp_file", "ASN1_item_d2i", "EVP_PKEY_CTX_dup", "X509_VERIFY_PARAM_set_time", "__gnu_ldivmod_helper", "UI_method_set_prompt_constructor", "ssl3_get_client_key_exchange", "OBJ_cmp", "avfilter_get_by_name", "av_aes_init", "EVP_PKEY_get_attr_count", "_Z21transportEnc_writePCEP13FDK_BITSTREAM12CHANNEL_MODEiiiiij", "_Z17adtsRead_CrcCheckP11STRUCT_ADTS", "av_fopen_utf8", "DSO_set_filename", "SSL_copy_session_id", "_Unwind_RaiseException", "_Z13calcNrgPerSfbPPlS0_iPhiiaS_Pa", "_Z24FDKaacEnc_Transform_RealPKsPliiPiiS2_iS1_", "_Z27GetRam_aacEnc_PsyOutChanneli", "DSO_flags", "BN_GF2m_mod_solve_quad", "av_opt_set_dict2", "_Z31CLatmDemux_GetFrameLengthInBitsP10CLatmDemux", "EVP_enc_null", "X509_NAME_cmp", "SSL_CTX_add_server_custom_ext", "ff_channel_layouts_ref", "ENGINE_get_last", "EVP_PBE_CipherInit", "ff_hevc_put_qpel_uw_pixels_w32_neon_8", "_Z24FDKsbrEnc_CreatePSEncodePP11T_PS_ENCODE", "PKCS7_free", "_Z18FreeAACdynamic_RAMPPl", "_Z23HcrGetABitFromBitstreamP13FDK_BITSTREAMPtS1_h", "ECDSA_do_sign_ex", "_Z25AudioSpecificConfig_ParseP21CSAudioSpecificConfigP13FDK_BITSTREAMiP13CSTpCallBacks", "EVP_rc4_40", "X509V3_EXT_add_nconf", "SSL_set_psk_server_callback", "x264_threadslice_cond_wait", "swr_config_frame", "_Z10setHcrTypeP10CErHcrInfo14MP4_ELEMENT_ID", "ff_hevc_transform_luma_4x4_neon_8", "CRYPTO_THREADID_cpy", "_Z16adtsRead_CrcInitP11STRUCT_ADTS", "X509_REVOKED_new", "av_default_get_category", "custom_exts_free", "dtls1_dispatch_alert", "av_rescale_rnd", "_Z14FreeRam_ps_decPP6PS_DEC", "i2d_PKCS7", "av_get_known_color_name", "_Z30FDKsbrEnc_resetInvFiltDetectorP16SBR_INV_FILT_ESTPii", "CMS_unsigned_delete_attr", "EC_GROUP_get_order", "EXTENDED_KEY_USAGE_free", "CONF_get_section", "ff_simple_idct_put_8", "ff_h264_filter_mb_fast", "get_one_stream", "_Z22CProgramConfig_IsValidPK14CProgramConfig", "av_new_packet", "PEM_write_PKCS8", "PKCS12_MAC_DATA_new", "_Z14FDKcrcStartRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "av_opt_eval_flags", "CMS_is_detached", "_Z17GetAACdynamic_RAMi", "OPENSSL_DIR_end", "CRYPTO_gcm128_encrypt", "ff_hevc_sao_offset_sign_decode", "ff_sine_window_init_fixed", "ECDH_set_ex_data", "RSA_sign", "swresample_version", "ff_mpa_synth_filter_float", "ff_mpadsp_apply_window_fixed", "ASN1_ENUMERATED_get", "EVP_CipherFinal", "FDKaalloc_L", "ECParameters_print", "CRYPTO_gcm128_decrypt_ctr32", "BN_options", "ASN1_INTEGER_free", "d2i_RSA_PUBKEY_bio", "ff_put_pixels8_neon", "DSO_bind_func", "FDKexp", "cms_pkey_get_ri_type", "ff_hevc_put_qpel_uw_v3_neon_8", "ff_bswapdsp_init", "av_application_will_http_seek", "EVP_des_ede", "av_image_copy_to_buffer", "av_codec_set_codec_descriptor", "av_add_i", "d2i_EC_PUBKEY_bio", "x264_intra_satd_x3_8x16c", "PEM_write_bio_RSA_PUBKEY", "add_hevc_qpel_s8_pixels_8_neon", "_Z27FDKsbrEnc_PSEnc_WritePSDataP19T_PARAMETRIC_STEREOP13FDK_BITSTREAM", "OBJ_bsearch_", "av_pix_fmt_count_planes", "CONF_dump_fp", "ff_h264_chroma422_dc_dequant_idct_14_c", "add_hevc_qpel_s32_h3v3_8_neon", "ASN1_INTEGER_dup", "ssl_get_sign_pkey", "X509_LOOKUP_by_alias", "ASN1_T61STRING_new", "_Z32CLatmDemux_ReadPayloadLengthInfoP13FDK_BITSTREAMP10CLatmDemux", "ffurl_open_whitelist", "EC_GROUP_get_cofactor", "x264_encoder_reconfig", "ff_hevc_put_qpel_uw_h2v1_neon_8", "ff_codec_get_tag", "d2i_OCSP_RESPBYTES", "ff_nv21_to_abgr_neon_32", "EVP_CIPHER_param_to_asn1", "ff_mov_write_chan", "aacEncOpen", "avutil_configuration", "_Unwind_VRS_Get", "BN_rand", "SSL_set_msg_callback", "av_buffersink_params_alloc", "X509at_get_attr_by_NID", "x264_pixel_ssd_wxh", "HMAC_CTX_copy", "X509_EXTENSION_create_by_OBJ", "BN_pseudo_rand_range", "ff_put_pixels8_xy2_no_rnd_neon", "ff_h264_idct_add8_neon", "av_frame_remove_side_data", "BN_div_word", "CMS_EnvelopedData_create", "ssl3_clear", "ff_find_stream_index", "_Z25FDKsbrEnc_transientDetectP22SBR_TRANSIENT_DETECTORPPlPiPhiiii", "_Z19FDKaacEnc_AdjThrNewPP13ADJ_THR_STATEi", "x264_rc_analyse_slice", "ff_make_format_list", "X509V3_EXT_conf_nid", "ENGINE_register_all_pkey_meths", "x264_malloc", "_Z28CConcealment_InitChannelDataP16CConcealmentInfoP14CConcealParamsi", "ff_h264_idct_add8_9_c", "ff_h264_decode_ref_pic_list_reordering", "avfilter_get_class", "av_format_get_probe_score", "ASN1_ENUMERATED_set", "EC_KEY_set_conv_form", "ff_h264_draw_horiz_band", "EVP_MD_CTX_copy_ex", "i2d_PKCS12_BAGS", "x264_predict_8x8_init", "DIST_POINT_free", "UI_method_get_flusher", "EVP_PKEY_CTX_new_id", "PKCS7_RECIP_INFO_free", "PKCS7_SIGN_ENVELOPE_new", "X509_EXTENSION_dup", "GENERAL_NAME_set0_value", "DSA_get_default_method", "ff_h264_idct8_add_12_c", "dtls1_handle_timeout", "ff_pred8x8_128_dc_neon", "_Z8dit_ifftPliPK8FIXP_SPKi", "ssl3_connect", "av_stereo3d_alloc", "_Z28FreeRam_aacEnc_PsyOutChannelPP15PSY_OUT_CHANNEL", "asn1_enc_init", "aes_v8_set_encrypt_key", "x264_cavlc_init", "_Z21adifRead_DecodeHeaderP11CAdifHeaderP14CProgramConfigP13FDK_BITSTREAM", "avcodec_license", "ff_fill_rgba_map", "_Z28FDKaacEnc_MsStereoProcessingPP8PSY_DATAPP15PSY_OUT_CHANNELPKiPiS7_iiiS6_", "X509_set_serialNumber", "ff_hevc_idct_8x8_dc_neon_8", "__gnu_Unwind_Resume", "_Z23GetRam_aacEnc_PsyStatici", "ASN1_template_i2d", "av_file_map", "CRYPTO_thread_id", "EVP_aes_192_cfb128", "d2i_AUTHORITY_INFO_ACCESS", "ff_opencl_register_filter_kernel_code_all", "i2v_GENERAL_NAMES", "ec_GF2m_simple_point_get_affine_coordinates", "_Z27sbrDecoder_drcUpdateChannelP18SBRDEC_DRC_CHANNEL", "ff_framesync_process_frame", "ff_put_pixels16_xy2_neon", "X509_CRL_sign", "ff_h264_chroma_dc_dequant_idct_10_c", "sws_getCachedContext", "sbrEncoder_EncodeFrame", "x264_intra_sad_x3_8x8c", "av_opt_set_channel_layout", "ff_avg_h264_qpel16_mc31_neon", "FDK_get32", "RSA_OAEP_PARAMS_free", "avcodec_fill_audio_frame", "x264_sei_pic_timing_write", "avcodec_default_execute2", "av_packet_unref", "EC_EX_DATA_clear_free_all_data", "ff_parse_specific_params", "_Z17calcNrgPerSubbandPPlS0_iiiiaS_Pa", "BIO_gets", "sbrEncoder_LimitBitRate", "_Z12CPns_InitPnsP8CPnsDataP20CPnsInterChannelDataPiS3_", "avg_hevc_epel_s4_h_8_neon", "EC_POINT_is_on_curve", "X509_NAME_dup", "d2i_ECPKParameters", "PEM_read_RSAPrivateKey", "d2i_OCSP_REQINFO", "ERR_release_err_state_table", "ssl_prepare_serverhello_tlsext", "CMS_get0_type", "UI_add_error_string", "_Z24FDKsbrEnc_GetEnvEstDelayP20SBR_EXTRACT_ENVELOPE", "ENGINE_register_DSA", "PEM_read_bio_X509_AUX", "UI_method_set_writer", "CONF_module_get_usr_data", "av_buffer_unref", "ff_ps_mul_pair_single_neon", "x264_me_refine_qpel", "_Z21GetRam_Sbr_signMatrixi", "asn1_do_lock", "ssl3_output_cert_chain", "X509_CRL_get_ext_d2i", "avpriv_copy_pce_data", "X509_TRUST_set_default", "EC_GROUP_new_by_curve_name", "ff_mpa_synth_init_float", "ff_imdct_half_neon", "avio_open_dyn_buf", "ASN1_item_ex_new", "av_codec_get_codec_descriptor", "ssl3_digest_cached_records", "av_opt_query_ranges", "PEM_write_bio_PKCS8", "DES_ecb3_encrypt", "CRYPTO_ofb128_encrypt", "X509_REQ_add1_attr_by_NID", "avio_find_protocol_name", "ENGINE_get_ssl_client_cert_function", "ASN1_VISIBLESTRING_free", "CMS_signed_get_attr_by_NID", "av_opt_set_double", "DH_get_2048_224", "EVP_PKEY_meth_set_verifyctx", "av_opt_child_class_next", "ff_hevc_hls_residual_coding_2016", "ff_put_h264_qpel8_mc30_neon", "ff_hevc_idct_32x32_dc_neon_8", "_Z15CLatmDemux_ReadP13FDK_BITSTREAMP10CLatmDemux14TRANSPORT_TYPEP13CSTpCallBacksP21CSAudioSpecificConfigPii", "add_hevc_qpel_s16_v1_8_neon", "SSL_set_psk_client_callback", "_Z19IIS_ProcessCmdlListPKcPFiiPPcE", "avcodec_get_class", "_Z20FDKsbrEnc_AddVecLeftPiS_S_i", "ENGINE_unregister_ciphers", "_Z21GetRequiredMemDrcInfov", "d2i_PROXY_CERT_INFO_EXTENSION", "ssl_check_serverhello_tlsext", "av_image_fill_pointers", "av_opt_serialize", "i2d_RSA_PUBKEY_fp", "_Z14CPns_IsPnsUsedPK8CPnsDataii", "SSL_CIPHER_get_bits", "X509_INFO_free", "x264_cabac_init", "SHA512_Transform", "FDKcos", "ASN1_UTCTIME_adj", "av_hash_final_bin", "_Z22transportEnc_CrcEndRegP12TRANSPORTENCi", "EVP_CIPHER_CTX_cipher", "av_probe_input_buffer2", "PEM_write_PUBKEY", "ff_nv12_to_abgr_neon_16", "ssl3_send_certificate_request", "av_des_alloc", "av_thread_message_queue_alloc", "ASN1_item_ex_free", "ff_decode_frame_props", "X509_cmp_current_time", "TLSv1_client_method", "ffio_get_checksum", "PKCS7_SIGNED_new", "ff_request_frame_to_filter", "avformat_write_header", "avio_seek", "ff_hevc_sao_band_position_decode", "X509v3_get_ext_by_critical", "CONF_imodule_set_flags", "d2i_SXNETID", "X509_VAL_free", "OCSP_SIGNATURE_new", "EVP_aes_128_cfb1", "X509_reject_clear", "ff_ntp_time", "SSL_CTX_new", "ff_video_frame_pool_get_config", "ff_lock_avcodec", "ff_emulated_edge_mc_8", "sws_cloneVec", "ECPKPARAMETERS_free", "X509_ALGOR_get0", "DES_set_key_unchecked", "PKCS7_add_signer", "ff_fdct_ifast", "X509_STORE_CTX_get0_current_crl", "ff_avc_mp4_find_startcode", "X509_PURPOSE_get_trust", "TLSv1_2_client_method", "sk_find_ex", "PKCS7_cert_from_signer_info", "BIO_dump_fp", "swri_resample_dsp_init", "ec_GF2m_simple_add", "av_d2str", "SSL_want", "ERR_get_implementation", "FDKstrcpy", "ERR_load_CONF_strings", "X509_STORE_CTX_set_cert", "av_imdct_half", "ASN1_TIME_set", "av_frame_make_writable", "i2o_ECPublicKey", "ASN1_mbstring_copy", "EC_GROUP_set_curve_GFp", "EVP_aes_256_ofb", "av_packet_free_side_data", "BN_BLINDING_invert_ex", "EVP_rc4_hmac_md5", "ff_h264_idct_add8_8_c", "avpriv_new_chapter", "av_dict_set_int", "DSO_convert_filename", "ff_avg_h264_qpel16_mc20_neon", "_Z18FDKsbrEnc_AddRightPiS_i", "FDKatol", "Camellia_DecryptBlock_Rounds", "avpriv_find_start_code", "ff_put_h264_qpel8_mc32_neon", "_Unwind_Resume", "X509_REQ_delete_attr", "avio_wb32", "ffurl_close", "X509_issuer_name_cmp", "PROXY_CERT_INFO_EXTENSION_free", "d2i_DSA_PUBKEY_fp", "WHIRLPOOL_Update", "av_samples_alloc", "_Z14Get_AacEncoderi", "x264_me_refine_qpel_rd", "SSL_version", "_Z21FDKaacEnc_countValuesPsii", "X509_STORE_CTX_set_purpose", "avg_hevc_qpel_s8_h3v2_8_neon", "tls1_set_cert_validity", "i2d_AUTHORITY_INFO_ACCESS", "EVP_DecryptFinal_ex", "X509_REVOKED_get_ext_d2i", "x264_lookahead_delete", "ff_hevc_put_qpel_h1_neon_8", "swri_noise_shaping_int16", "BUF_reverse", "_Z9CTns_ReadP13FDK_BITSTREAMP8CTnsDataPK8CIcsInfoj", "avpriv_set_pts_info", "av_frame_set_pkt_size", "BN_set_word", "ff_gradfun_blur_line_c", "ff_pred16x16_left_dc_neon", "X509_REVOKED_dup", "avpriv_init_lls", "_Z16autoCorr2nd_realP11ACORR_COEFSPKli", "CMS_add0_crl", "av_get_packed_sample_fmt", "ff_videodsp_init_armv5te", "EVP_DecodeFinal", "BIO_free", "swr_init", "PKCS12_pack_authsafes", "ff_simple_idct_8", "ASN1_UTCTIME_set", "tls1_setup_key_block", "ff_configure_buffers_for_index", "av_channel_layout_extract_channel", "ff_get_codec_guid", "ff_put_h264_qpel8_mc02_neon", "X509_NAME_ENTRY_set_object", "x264_predict_4x4_h_c", "ff_h264_idct_add16intra_14_c", "CONF_parse_list", "PEM_write_RSA_PUBKEY", "CMS_unsigned_get_attr", "x264_threads_merge_ratecontrol", "ff_hevc_put_pixels_w48_neon_8", "avcodec_get_context_defaults3", "asn1_const_Finish", "X509V3_add_value", "i2d_RSAPublicKey", "d2i_PKCS7_ISSUER_AND_SERIAL", "_Z42FDKsbrEnc_PSEnc_ParametricStereoProcessingP19T_PARAMETRIC_STEREOPPsjPP15QMF_FILTER_BANKPPlS7_S1_S4_Pai", "av_audio_fifo_peek", "av_apply_bitstream_filters", "_Z21initSlotBasedRotationP6PS_DECii", "ff_hevc_put_qpel_uw_pixels_w48_neon_8", "cms_DigestAlgorithm_init_bio", "ff_avg_h264_qpel16_mc13_neon", "ENGINE_set_id", "PKCS5_pbe2_set_iv", "BN_BLINDING_update", "ENGINE_get_default_RAND", "x264_cabac_encode_decision_c", "ff_af_queue_close", "ERR_get_err_state_table", "_Z28transportDec_OutOfBandConfigP12TRANSPORTDECPhjj", "i2d_PUBKEY_fp", "_Z23adifWrite_GetHeaderBitsP9ADIF_INFO", "d2i_X509_PUBKEY", "_Z17CAacDecoder_CloseP20AAC_DECODER_INSTANCE", "_Z13CalcInvLdDatal", "x264_encoder_encode", "ERR_peek_error_line", "PKCS7_add_signature", "ec_GFp_simple_group_get_curve", "_Z7dct_IIIPlS_iPi", "av_get_pix_fmt", "avpicture_get_size", "_Z29Hcr_State_BODY_SIGN_ESC__BODYP13FDK_BITSTREAMPv", "ASN1_BMPSTRING_new", "ENGINE_get_prev", "avfilter_pad_get_name", "EC_KEY_insert_key_method_data", "av_shr_i", "x264_predict_16x16_h_c", "CONF_modules_load_file", "SXNETID_new", "d2i_X509_ATTRIBUTE", "SMIME_read_ASN1", "_Z35GetRequiredMemRam_SbrDecWorkBuffer2v", "sbrEncoder_Open", "ff_vector_fmul_window_vfp", "NCONF_free", "ff_ps_hybrid_synthesis_deint_neon", "FDKstrcmp", "policy_node_cmp_new", "ff_h264_idct_add16intra_9_c", "PEM_write_PKCS7", "ff_thread_get_format", "EC_GROUP_new_curve_GF2m", "tls1_mac", "av_get_channel_layout_string", "av_format_set_video_codec", "BN_BLINDING_convert_ex", "av_sha_alloc", "ff_get_unscaled_swscale_arm", "ff_thread_can_start_frame", "SSLv23_client_method", "i2d_NOTICEREF", "ff_hevc_log2_res_scale_abs", "ec_GFp_simple_group_set_curve", "ff_hevc_rem_intra_luma_pred_mode_decode", "av_ripemd_update", "EVP_BytesToKey", "X509_ALGOR_set_md", "i2d_RSA_PSS_PARAMS", "i2d_ECParameters", "_Z22CConcealment_SetParamsP14CConcealParamsiiiii", "EVP_CIPHER_CTX_ctrl", "put_hevc_epel_s4_hv_8_neon", "i2d_PKEY_USAGE_PERIOD", "ff_null_get_audio_buffer", "ssl_cert_dup", "SSL_get_peer_cert_chain", "PEM_read_PrivateKey", "ff_rtp_get_codec_info", "engine_free_util", "ff_h264_chroma_dc_dequant_idct_14_c", "i2d_PKCS8_fp", "SSL_get_SSL_CTX", "_Z10ReadPsDataP6PS_DECP13FDK_BITSTREAMi", "av_murmur3_alloc", "ff_hevc_put_qpel_uw_pixels_w16_neon_8", "DSA_new_method", "_Z8DecodePsP6PS_DECh", "PKCS7_ENVELOPE_free", "cms_SignerIdentifier_get0_signer_id", "PEM_read_bio_X509_CRL", "ssl3_send_server_done", "PKCS7_SIGNER_INFO_sign", "sk_num", "SSL_clear", "DTLSv1_2_server_method", "_Z35GetRequiredMemRam_sbr_OverlapBufferv", "SSL_CTX_set_cert_verify_callback", "OCSP_REVOKEDINFO_free", "ENGINE_register_digests", "av_fifo_alloc_array", "tbEncryptionCipher", "CRYPTO_get_id_callback", "_Z37FDKsbrEnc_qmfInverseFilteringDetectorP16SBR_INV_FILT_ESTPPlS1_PaiiiP9INVF_MODE", "X509_get_ex_new_index", "swr_alloc", "x264_mb_mc_8x8", "PEM_read_bio_DSAPrivateKey", "av_cmp_i", "BIO_number_written", "CMS_RecipientInfo_type", "avio_put_str", "ssl23_get_client_hello", "ff_mpa_decode_header", "X509_STORE_add_crl", "sbrDecoder_drcFeedChannel", "engine_table_unregister", "av_picture_crop", "ff_init_vscale_pfn", "EVP_aes_192_ecb", "i2d_RSAPrivateKey_bio", "i2d_ASN1_BOOLEAN", "engine_table_doall", "EVP_PKEY_meth_get_init", "ff_hevc_transform_add_16x16_neon_8", "ASN1_INTEGER_get", "i2d_PBEPARAM", "avfilter_insert_filter", "SHA256_Final", "add_hevc_qpel_s16_h3v3_8_neon", "av_nearer_q", "ff_put_h264_qpel16_mc12_neon", "SSL_CTX_get_cert_store", "av_strcasecmp", "RSA_padding_check_PKCS1_type_1", "IIS_ScanCmdl", "PEM_write_ECPKParameters", "ff_pred_weight_table", "av_codec_get_tag", "_Z22adifWrite_EncodeHeaderP9ADIF_INFOP13FDK_BITSTREAMi", "lh_new", "ERR_load_BUF_strings", "DIRECTORYSTRING_new", "av_stream_get_parser", "av_sha_final", "av_dct_calc", "put_hevc_qpel_s8_h3_8_neon", "ff_h264_idct8_dc_add_10_c", "WHIRLPOOL_Final", "dtls1_read_bytes", "X509_REQ_get1_email", "X509V3_set_ctx", "DH_get_ex_data", "PKCS7_ctrl", "ERR_load_PEM_strings", "ASN1_INTEGER_to_BN", "EC_POINT_get_Jprojective_coordinates_GFp", "ffio_fill", "EVP_PKEY_set1_RSA", "PEM_write_ECPrivateKey", "ssl3_get_cipher_by_char", "ff_tls_deinit", "BIO_int_ctrl", "d2i_DSAPrivateKey_fp", "BN_BLINDING_set_flags", "av_hash_get_name", "X509V3_EXT_nconf_nid", "CMAC_CTX_get0_cipher_ctx", "SSL_SESSION_get0_peer", "SSL_CTX_set_cookie_verify_cb", "av_samples_get_buffer_size", "CRYPTO_cleanup_all_ex_data", "PEM_write_X509_AUX", "ssl_verify_cert_chain", "ff_imdct15_uninit", "add_hevc_qpel_s32_h2_8_neon", "EVP_PKEY_meth_new", "ff_h264_remove_all_refs", "PKCS7_RECIP_INFO_set", "av_buffersrc_write_frame", "PEM_bytes_read_bio", "bn_mul_words", "custom_ext_parse", "add_hevc_qpel_s8_h3v2_8_neon", "_Z24transportDec_CrcStartRegP12TRANSPORTDECi", "ff_hevc_hls_filter", "CAST_ofb64_encrypt", "ECDSA_sign_setup", "x264_frame_cond_wait", "ff_thread_video_encode_frame", "ff_avg_h264_qpel16_mc00_neon", "hex_to_string", "ff_simple_idct84_add", "ff_riff_write_info", "X509_get1_ocsp", "X509_new", "i2d_ASN1_OBJECT", "avg_hevc_epel_s4_hv_8_neon", "bn_mul_comba4", "CMS_add1_cert", "put_hevc_qpel_s32_h1v3_8_neon", "X509_NAME_free", "av_vorbis_parse_frame_flags", "ec_GFp_simple_set_compressed_coordinates", "SHA_Transform", "avformat_open_input", "ec_GF2m_simple_group_clear_finish", "set_real_ip", "ff_init_cabac_encoder", "SSL_get_version", "av_crc_init", "OCSP_RESPDATA_free", "DES_ede3_cfb_encrypt", "ASN1_TIME_new", "av_frame_is_writable", "x264_predict_8x8c_dc_c", "ff_vector_fmul_add_neon", "DSO_METHOD_dlfcn", "tls1_check_chain", "ff_fft_fixed_init_arm", "RIPEMD160_Final", "PKCS7_get_issuer_and_serial", "UI_add_info_string", "put_hevc_qpel_s16_h1v2_8_neon", "_Z32GetRequiredMemRam_SbrDynamic_RAMv", "av_rc4_crypt", "av_xtea_crypt", "X9_62_CHARACTERISTIC_TWO_free", "av_frame_copy_props", "UI_new", "ECPKParameters_print", "av_append_packet", "HMAC_Init", "CERTIFICATEPOLICIES_free", "CRYPTO_get_mem_debug_options", "ssl_cert_set1_chain", "put_hevc_qpel_s8_h1_8_neon", "ff_mov_lang_to_iso639", "UI_get0_result", "x264_sei_dec_ref_pic_marking_write", "ssl3_check_cert_and_algorithm", "ssl3_send_server_certificate", "SSL_use_RSAPrivateKey_ASN1", "avio_closep", "OCSP_RESPBYTES_new", "_Z32FDKaacEnc_FinalizeBitConsumptionP15CHANNEL_MAPPINGP8QC_STATEP6QC_OUTPP14QC_OUT_ELEMENTP12TRANSPORTENC17AUDIO_OBJECT_TYPEja", "SSL_shutdown", "avio_open", "ff_thread_flush", "avg_hevc_qpel_s16_h2v2_8_neon", "BIO_s_null", "av_get_bits_per_sample", "put_hevc_epel_s16_v_8_neon", "lh_doall_arg", "ssl3_free_digest_list", "av_application_did_http_seek", "av_codec_get_max_lowres", "put_hevc_qpel_s32_v3_8_neon", "FDKftell", "BUF_MEM_grow", "avfilter_graph_parse_ptr", "ffurl_protocol_next", "av_fmt_ctx_get_duration_estimation_method", "d2i_ASN1_UTF8STRING", "x264_macroblock_encode", "EVP_CIPHER_asn1_to_param", "SSL_set_verify", "setLimiterThreshold", "_Z21equalizeFiltBufferExpPlPaS_S0_i", "SSLv23_method", "PKCS12_item_decrypt_d2i", "_Z24transportEnc_CrcStartRegP12TRANSPORTENCi", "i2d_PKCS7_ENC_CONTENT", "ASN1_TYPE_get", "EC_GROUP_get_mont_data", "ff_pred8x8_0lt_dc_neon", "X509_CRL_get_ext_by_critical", "ec_GF2m_simple_group_check_discriminant", "d2i_PROXY_POLICY", "FDKfclose", "EC_KEY_set_enc_flags", "ASN1_i2d_bio", "add_hevc_qpel_s16_h2v1_8_neon", "SSL_set_fd", "SSL_CTX_get_verify_mode", "PKCS7_set0_type_other", "CRYPTO_add_lock", "ff_hevc_transform_add_8x8_neon_8", "av_frame_get_color_range", "OCSP_REQUEST_new", "x264_me_refine_qpel_refdupe", "_Z23CBlock_ReadSpectralDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "PROXY_CERT_INFO_EXTENSION_new", "hls_prediction_unit_2017", "_Z29GetRam_sbr_QmfStatesSynthesisi", "SSL_set_read_ahead", "ff_emulated_edge_mc_16", "ff_simple_idct_put_neon", "ASN1_tag2str", "av_opt_find", "ff_put_h264_qpel8_mc13_neon", "POLICYQUALINFO_new", "_Z40GetRequiredMemRam_sbr_QmfStatesSynthesisv", "av_aes_ctr_set_random_iv", "ff_idctdsp_init_neon", "CMS_RecipientInfo_get0_pkey_ctx", "SSL_CTX_add_client_custom_ext", "_Z7sbr_decP7SBR_DECPsS1_S0_S1_iiP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAiP6PS_DECj", "custom_exts_copy", "SSL_CTX_set_session_id_context", "swr_set_channel_mapping", "PEM_read", "i2d_OCSP_SERVICELOC", "d2i_OCSP_CERTSTATUS", "_Z19ToggleReadDirectionh", "dtls1_reset_seq_numbers", "EVP_des_ecb", "_Z16autoCorr2nd_cplxP11ACORR_COEFSPKlS2_i", "SSL_COMP_free_compression_methods", "avg_hevc_epel_s16_pixels_8_neon", "aacEncInfo", "EVP_CIPHER_CTX_set_app_data", "ff_init_desc_fmt_convert", "X509_CRL_METHOD_new", "ff_put_h264_qpel16_mc11_neon", "_Z23CAacDecoder_DecodeFrameP20AAC_DECODER_INSTANCEjPsii", "BIO_f_buffer", "PEM_write_bio_X509_REQ_NEW", "d2i_OCSP_CRLID", "SSL_get0_alpn_selected", "avpriv_mpegts_parse_packet", "X509_set_ex_data", "___Unwind_ForcedUnwind", "ssl3_shutdown", "PEM_read_bio_DHparams", "SHA384_Update", "X509_REQ_free", "DH_OpenSSL", "av_iformat_next", "bn_sub_words", "EVP_des_ede_ofb", "X509_CERT_PAIR_new", "_Z16CBlock_GetEscapeP13FDK_BITSTREAMl", "ENGINE_get_flags", "_Z12createSbrDecP11SBR_CHANNELP15SBR_HEADER_DATAP19TRANSPOSER_SETTINGSijjii", "X509V3_add_value_int", "ff_add_format", "ssl_cipher_get_cert_index", "ssl3_get_key_exchange", "ff_hevc_put_qpel_uw_h1v1_neon_8", "av_add_stable", "_Z22FreeRam_Sbr_envYBufferPPl", "BN_mod_exp_mont_consttime", "ff_dct_end", "_Z24FDKaacEnc_WriteBitstreamP12TRANSPORTENCP15CHANNEL_MAPPINGP6QC_OUTP7PSY_OUTP8QC_STATE17AUDIO_OBJECT_TYPEja", "ff_h264_direct_ref_list_init", "X509_alias_set1", "i2d_PKCS7_SIGN_ENVELOPE", "EC_GROUP_get_curve_GFp", "ff_http_auth_create_response", "tls1_process_ticket", "av_opt_get_q", "DSA_set_method", "av_packet_add_side_data", "x264_sei_version_write", "X509_NAME_ENTRY_dup", "ERR_load_ECDSA_strings", "put_hevc_qpel_s16_h3v3_8_neon", "ff_put_signed_pixels_clamped_neon", "SSL_SESSION_set_ex_data", "EC_KEY_get_conv_form", "X509V3_set_nconf", "X509_VERIFY_PARAM_set1_name", "_Z11FDKcrcResetP11FDK_CRCINFO", "CRYPTO_xts128_encrypt", "BIO_printf", "ENGINE_get_id", "X509_certificate_type", "FDK_getBitCnt", "avg_hevc_qpel_s16_v3_8_neon", "cms_DigestedData_do_final", "_Z22CProgramConfig_ComparePK14CProgramConfigS1_", "_Z27FreeRam_Sbr_guideVectorOrigPPl", "ff_raw_data_read_header", "SSL_CTX_set_psk_server_callback", "OBJ_new_nid", "BN_print_fp", "av_opt_eval_float", "_Z39GetRequiredMemRam_aacEnc_PsyOutElementsv", "put_hevc_qpel_s16_pixels_8_neon", "ec_GFp_mont_field_encode", "CMS_get0_SignerInfos", "X509_time_adj", "i2d_DSA_SIG", "av_frame_get_channel_layout", "x264_intra_satd_x3_4x4_neon", "EVP_CIPHER_do_all_sorted", "BN_clear", "TXT_DB_free", "WHIRLPOOL", "PEM_write_DSAparams", "act_transform_16x16_add_8", "ssl_add_cert_chain", "_Z27CConcealment_InitCommonDataP14CConcealParams", "transform_4x4_luma_add_neon", "getLimiterDelay", "sws_convertPalette8ToPacked32", "ff_h264_luma_dc_dequant_idct_8_c", "X509_check_ca", "ff_parse_close", "RSA_private_encrypt", "avcodec_close", "avcodec_dct_alloc", "put_hevc_qpel_s8_h3v1_8_neon", "DSA_get_ex_new_index", "AES_unwrap_key", "swr_set_compensation", "SSL_get_peer_certificate", "dtls1_connect", "ff_hevc_put_qpel_h3_neon_8", "_Z24GetRequiredMemAacDecoderv", "MD5_Init", "SEED_decrypt", "ff_network_wait_fd_timeout", "av_rdft_end", "_Z26FreeRam_aacEnc_PsyInternalPP12PSY_INTERNAL", "d2i_X509_CRL_bio", "RSA_padding_check_X931", "ff_urldecode", "X509_STORE_CTX_get0_policy_tree", "RSA_verify", "av_oformat_next", "x264_predict_4x4_dc_c", "_Z23FDK_MetadataEnc_ProcessP20FDK_METADATA_ENCODERPsiPK15AACENC_MetaDataPP18AACENC_EXT_PAYLOADPjPi", "av_thread_message_queue_send", "FDKfeof", "EVP_md4", "BF_cbc_encrypt", "i2d_ASN1_bio_stream", "COMP_CTX_new", "ff_h264_idct_add16intra_10_c", "put_hevc_qpel_s32_h3v3_8_neon", "ff_avc_find_startcode", "ff_pixblockdsp_init", "swresample_license", "EVP_PKEY_CTX_set_cb", "ssl23_num_ciphers", "d2i_PrivateKey_fp", "ff_load_image", "ff_hevc_sao_merge_flag_decode", "ff_generate_sliding_window_mmcos", "ENGINE_register_all_RAND", "av_aes_ctr_increment_iv", "_Z4fPowliliPi", "X509v3_get_ext_count", "ff_hevc_hls_filter_2017", "ff_hevc_idct_4x4_dc_neon_8", "_Z25qmfInitAnalysisFilterBankP15QMF_FILTER_BANKPsiiiii", "ssl_load_ciphers", "EVP_camellia_192_ofb", "SSL_CTX_set_msg_callback", "ASN1_PCTX_get_oid_flags", "ff_ape_parse_tag", "OBJ_nid2obj", "av_log_ask_for_sample", "BN_GF2m_arr2poly", "OBJ_txt2nid", "BUF_strlcat", "PEM_write_bio_NETSCAPE_CERT_SEQUENCE", "EVP_PKEY_asn1_find", "swscale_version", "ff_avg_h264_qpel8_mc01_neon", "ff_mp4_read_descr", "SSL_add_file_cert_subjects_to_stack", "X509_CRL_free", "d2i_PKCS7_ENVELOPE", "_Z16sbrGetHeaderDataP15SBR_HEADER_DATAP13FDK_BITSTREAMji", "ff_pix_abs8_armv6", "_Z11ApplyPsSlotP6PS_DECPPlS2_S1_S1_", "x264_sps_write", "_Z24GetRam_aacEnc_PsyDynamiciPh", "swscale_configuration", "CMS_RecipientInfo_kari_get0_alg", "ssl_cert_inst", "av_color_primaries_name", "x264_pixel_ssim_wxh", "_Z31FreeRam_Sbr_guideVectorDetectedPPh", "ff_avg_h264_qpel8_mc33_neon", "SSL_renegotiate_abbreviated", "avpriv_toupper4", "_Z22FreeRam_SbrDynamic_RAMPPl", "RAND_pseudo_bytes", "EC_POINT_new", "__muldf3", "ff_hevc_put_qpel_uw_pixels_w64_neon_8", "sk_delete_ptr", "BN_print", "ff_kbd_window_init", "ecdsa_check", "x264_frame_pop_unused", "PEM_read_bio_X509_CERT_PAIR", "BN_to_ASN1_ENUMERATED", "ff_mdct_calc_c_fixed_32", "SSL_CTX_get_verify_depth", "_Z28GetRequiredMemRam_SbrEncoderv", "av_basename", "bn_GF2m_mul_2x2", "X509_get_ex_data", "EVP_PKEY_asn1_get0_info", "ssl_init_wbio_buffer", "_Z9InitLdIntv", "RSA_flags", "ASN1_STRING_set_default_mask_asc", "_Z20FDKaacEnc_codeValuesPsiiP13FDK_BITSTREAM", "EC_GROUP_free", "RAND_set_rand_method", "ENGINE_set_load_pubkey_function", "CRYPTO_get_ex_new_index", "X509_EXTENSION_get_object", "_Z28GetRequiredMemAACdynamic_RAMv", "DSO_get_filename", "ssl3_get_certificate_request", "d2i_EC_PRIVATEKEY", "_Z16FreeRam_PsEncodePP11T_PS_ENCODE", "avio_free_directory_entry", "ff_generate_avci_extradata", "ff_nv12_to_bgra_neon_16", "EVP_PKEY_keygen_init", "av_buffer_realloc", "X509_ALGOR_new", "DSO_merge", "EVP_PKEY_CTX_free", "transform_16x16_add_neon_row_4", "avio_check", "X509_ATTRIBUTE_free", "ff_rfps_calculate", "ssl_get_cipher_by_char", "SSL_rstate_string", "X509_VERIFY_PARAM_set_hostflags", "ff_hevc_cbf_luma_decode", "ff_hevc_mvp_lx_flag_decode", "ASN1_GENERALIZEDTIME_check", "ff_simple_idct_add_8", "ffurl_alloc", "X509_free", "_Z10HcrInitRomP10CErHcrInfo", "av_index_search_timestamp", "_Z10fixp_atan2ll", "EVP_PKEY_meth_get_derive", "__udivdi3", "CMS_signed_get0_data_by_OBJ", "SSL_CTX_get_quiet_shutdown", "d2i_RSA_PUBKEY", "DSA_new", "_Z25GetRam_aacEnc_ElementBitsi", "X509_get0_pubkey_bitstr", "ff_hevc_decode_nal_vps", "X509_STORE_CTX_get0_param", "ec_GF2m_simple_make_affine", "d2i_DIST_POINT", "ssl_cipher_list_to_bytes", "SSL_CTX_set_info_callback", "ssl_check_clienthello_tlsext_late", "avg_hevc_qpel_s8_h1v3_8_neon", "add_hevc_qpel_s8_h2v1_8_neon", "ff_me_cmp_init_static", "DSAparams_dup", "av_buffer_ref", "_Z16adjustTimeSlotHQPlS_P22SBR_CALCULATE_ENVELOPEP13ENV_CALC_NRGSiiisii", "luma_mc_fixed_bs_put", "av_cast5_crypt2", "ec_GFp_mont_group_finish", "ssl3_get_server_done", "CRYPTO_get_lock_name", "ENGINE_cleanup", "av_grow_packet", "sbrDecoder_Close", "ff_set_cmp", "DIST_POINT_NAME_free", "EC_GROUP_get_curve_name", "SRP_Verify_B_mod_N", "BIO_copy_next_retry", "ASN1_item_pack", "EVP_aes_192_cfb1", "SHA1", "ASN1_put_object", "av_audio_fifo_write", "_Z9fMultNormllPi", "i2d_OCSP_RESPDATA", "custom_ext_add", "ff_vector_fmul_scalar_neon", "ff_h264_idct8_dc_add_neon", "BN_to_ASN1_INTEGER", "ASN1_OCTET_STRING_cmp", "CONF_load", "SHA512_Init", "d2i_DIST_POINT_NAME", "x264_predict_8x8c_init", "_Z15CPulseData_ReadP13FDK_BITSTREAMP10CPulseDataPKsPKvs", "CMS_add0_CertificateChoices", "ff_graph_thread_init", "asn1_Finish", "ASN1_item_dup", "SRP_Calc_u", "ff_simple_idct_armv5te", "ff_is_multicast_address", "SSL_get_certificate", "ff_hevc_pred_init_arm", "EVP_PBE_alg_add", "avio_rl24", "EVP_aes_128_cbc_hmac_sha256", "ssl_check_srvr_ecc_cert_and_alg", "init_taobao_param", "av_sample_fmt_is_planar", "SSL_alert_type_string", "X509_print_ex_fp", "SSL_CTX_set_tlsext_use_srtp", "ff_init_desc_chscale", "SSL_CTX_set_next_proto_select_cb", "ff_yuv422p_to_rgba_neon_32", "BN_BLINDING_free", "SSL_get0_param", "_Z21aacDecoder_drcGetInfoP8CDrcInfoPaS1_", "d2i_int_dhx", "av_base64_decode", "d2i_X509_CINF", "x264_mb_encode_chroma", "ERR_get_error_line", "ff_riff_write_info_tag", "ff_psdsp_init", "X509_STORE_CTX_get_explicit_policy", "ff_hevc_save_states", "_Z46GetRequiredMemRam_Sbr_prevEnvelopeCompensationv", "TLSv1_2_method", "d2i_X509_AUX", "_Z19Hcr_State_BODY_ONLYP13FDK_BITSTREAMPv", "_Z29GetRam_TransportDecoderBufferi", "ff_avg_h264_qpel8_mc30_neon", "_Z7dit_fftPliPK8FIXP_SPKi", "PEM_read_RSA_PUBKEY", "X509_get_ext_d2i", "ff_data_to_hex", "X509_STORE_CTX_trusted_stack", "___Unwind_Resume_or_Rethrow", "av_fft_permute", "X509_STORE_CTX_set_ex_data", "X509_ALGOR_set0", "EC_POINT_copy", "av_xtea_le_crypt", "EC_GROUP_set_asn1_flag", "UI_free", "x264_intra_sad_x3_8x16c", "pcmDmx_Reset", "avcodec_descriptor_next", "av_get_standard_channel_layout", "i2a_ASN1_INTEGER", "UI_method_set_opener", "ff_avg_pixels16_x2_neon", "ff_hevc_end_of_slice_flag_decode", "av_rescale", "avio_read", "_Z22adtsWrite_EncodeHeaderP11STRUCT_ADTSP13FDK_BITSTREAMii", "DHparams_print", "__fixunsdfsi", "i2d_BASIC_CONSTRAINTS", "EVP_PKEY_meth_copy", "ff_nv21_to_bgra_neon_16", "SSL_CTX_set_verify", "EC_GROUP_get_degree", "_Z14CPns_ResetDataP8CPnsDataP20CPnsInterChannelData", "X509_CRL_METHOD_free", "x264_mb_mc", "ff_hevc_luma_mv_mvp_mode", "ff_jpeg_fdct_islow_8", "X509_policy_tree_level_count", "_Z30FDKsbrEnc_InitSbrHuffmanTablesP12SBR_ENV_DATAP17SBR_CODE_ENVELOPES2_7AMP_RES", "avg_hevc_qpel_s8_pixels_8_neon", "__divdf3", "ENGINE_get_first", "X509_CRL_dup", "ff_get_unscaled_swscale", "ff_hevc_put_pixels_w24_neon_8", "_Z21FDKsbrEnc_UpdateHiResPhPiS_iS0_", "EC_GROUP_method_of", "PKCS7_get_attribute", "cms_RecipientInfo_pwri_crypt", "UI_get0_output_string", "EVP_MD_flags", "X509_delete_ext", "NCONF_get_number_e", "_Z43FDKsbrEnc_CreateSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "DIRECTORYSTRING_free", "av_buffersink_get_frame", "X509V3_section_free", "EC_GROUP_new_curve_GFp", "SSL_CTX_ctrl", "ENGINE_set_ctrl_function", "PEM_write_X509_CRL", "PKCS5_PBKDF2_HMAC", "_Z32FDKsbrEnc_CreateTonCorrParamExtrP16SBR_TON_CORR_ESTi", "av_cast5_init", "ff_slice_thread_free", "AES_options", "add_hevc_qpel_s8_h1v1_8_neon", "_Z28transportEnc_WriteAccessUnitP12TRANSPORTENCiii", "ff_rdft_calc_neon", "X509at_add1_attr_by_txt", "FDK_CreateBitBuffer", "ff_h264_idct_add16intra_12_c", "x264_reduce_fraction64", "ec_GFp_simple_field_mul", "ff_alloc_packet", "ff_put_h264_qpel16_mc33_neon", "_Z23FDKsbrEnc_frameSplitterPPlPiP22SBR_TRANSIENT_DETECTORPhS4_iiiii", "BN_generate_prime_ex", "av_frame_get_decode_error_flags", "X509_policy_tree_get0_policies", "d2i_DSAPrivateKey", "av_freep", "_Z20InitHybridFilterBankP6HYBRIDaaPKh", "BN_CTX_new", "avcodec_flush_buffers", "X509_sign", "ff_choose_chroma_location", "SSL_get_ciphers", "PKCS7_add_certificate", "sbrEncoder_GetInputDataDelay", "EVP_aes_128_xts", "CAST_encrypt", "idea_ofb64_encrypt", "__gnu_Unwind_Resume_or_Rethrow", "BIO_asn1_get_prefix", "ff_h264_check_intra4x4_pred_mode", "ff_url_join", "av_codec_get_id", "Camellia_set_key", "avg_hevc_qpel_s16_h3v2_8_neon", "x264_predict_8x8_dc_c", "av_tempfile", "BIO_dump", "_Z26FDKsbrEnc_TonCorrParamExtrP16SBR_TON_CORR_ESTP9INVF_MODEPlPiPhS5_PK14SBR_FRAME_INFOS5_S5_i9XPOS_MODEj", "sk_set", "ffio_init_context", "av_parse_cpu_caps", "PEM_write_DSAPrivateKey", "PKCS7_set_content", "ff_avg_h264_qpel16_mc01_neon", "av_aes_ctr_get_iv", "avpicture_layout", "EC_GROUP_get0_seed", "GENERAL_NAME_get0_value", "sws_getColorspaceDetails", "_Z23CAacDecoder_SyncQmfModeP20AAC_DECODER_INSTANCE", "SSL_CTX_set_srp_strength", "SSL_CTX_callback_ctrl", "ff_get_pixels_armv6", "_Z34GetRequiredMemRam_TransportEncoderv", "dtls1_link_min_mtu", "avcodec_find_best_pix_fmt_of_list", "EVP_PKEY_meth_free", "transform_8x8_add_neon", "_Z5f2PowliPi", "EVP_read_pw_string_min", "av_camellia_crypt", "ff_j_rev_dct1", "FDK_InitBitBuffer", "BN_bn2bin", "x264_macroblock_encode_p4x4", "avpriv_mpeg4audio_get_config", "av_get_sample_fmt_string", "ff_hevc_put_qpel_h3v1_neon_8", "add_hevc_qpel_s8_v1_8_neon", "x264_frame_expand_border_lowres", "SHA512_Update", "FDKfseek", "BUF_strndup", "_Z30FDKaacEnc_InitPnsConfigurationP10PNS_CONFIGiiiiPKiii", "PEM_write_bio_RSAPrivateKey", "ssl23_read_bytes", "EVP_PKEY_id", "avformat_find_stream_info", "_Z26GetRam_aacEnc_BitCntrStatei", "X509_issuer_and_serial_hash", "av_packet_rescale_ts", "ACCESS_DESCRIPTION_free", "av_mdct_calc", "_Z29GetRequiredMemRam_bsOutbufferv", "_armv8_sha1_probe", "avfilter_register", "av_picture_pad", "_Z29GetRequiredMemWorkBufferCore1v", "DHparams_dup", "UTF8_putc", "_Z28GetRam_aacEnc_PsyInputBufferi", "FDKatan2", "put_hevc_qpel_s16_h2_8_neon", "ff_simple_idct_add_neon", "_Z30CBlock_FrequencyToTimeLowDelayP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssc", "avfilter_graph_set_auto_convert", "av_xtea_alloc", "ff_draw_color", "PEM_write_DHxparams", "ff_http_averror", "ff_rtmp_packet_read", "ff_sbr_qmf_deint_neg_neon", "ERR_peek_last_error", "SSL_CTX_use_RSAPrivateKey", "ASN1_item_d2i_fp", "ff_avg_h264_qpel8_mc21_neon", "SXNET_get_id_ulong", "av_hash_alloc", "x264_pixel_ssd_nv12", "i2d_DSA_PUBKEY_bio", "ff_avc_write_annexb_extradata", "aacDecoder_Open", "_Z25FreeRam_aacEnc_PsyElementPP11PSY_ELEMENT", "BIO_test_flags", "BN_MONT_CTX_free", "d2i_OTHERNAME", "_Z15GetRam_PsEncodei", "x264_sync_frame_list_push", "x264_zigzag_init", "X509_STORE_CTX_get_ex_new_index", "ff_mov_init_hinting", "ASN1_TIME_print", "ff_frame_thread_init", "avpriv_bprint_to_extradata", "dtls1_listen", "i2d_X509_VAL", "put_hevc_epel_s8_h_8_neon", "_Z30FDKaacEnc_InitTnsConfigurationiiiiiiP10TNS_CONFIGP17PSY_CONFIGURATIONii", "ff_thread_await_progress2", "ff_rdft_init_arm", "SSL_set_session_ticket_ext", "ff_amf_write_number", "ASN1_STRING_length", "ffio_read_size", "_Z13decodeSbrDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAS2_S4_", "X509_PURPOSE_get0_name", "ff_h264_idct_dc_add_10_c", "X509_VERIFY_PARAM_add1_host", "X509_STORE_free", "ff_h264_idct_add8_10_c", "OCSP_SIGNATURE_free", "_Z26sbrGetSingleChannelElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAMP6PS_DECji", "ssl3_send_server_hello", "SRP_VBASE_new", "avcodec_dct_get_class", "EVP_PKEY_encrypt", "ff_h264_sei_stereo_mode", "transform_8x32_add_00", "SSL_CTX_load_verify_locations", "ff_mdct_calc_c_fixed", "ec_GFp_simple_group_init", "SSL_SESSION_set1_id_context", "ASN1_item_i2d_bio", "X509_NAME_add_entry_by_OBJ", "i2d_X509_PKEY", "_Z6dct_IVPliPi", "ff_fft_lut_init", "CMS_unsigned_get0_data_by_OBJ", "d2i_PKCS8_PRIV_KEY_INFO_bio", "x264_cqm_parse_file", "idea_cfb64_encrypt", "i2d_POLICYINFO", "OBJ_obj2nid", "_Z22transportDec_GetFormatP12TRANSPORTDEC", "PKCS5_PBE_add", "X509_VERIFY_PARAM_set1_ip_asc", "_Z11DeletePsDecPP6PS_DEC", "ssl3_get_cert_verify", "BUF_MEM_grow_clean", "private_AES_set_decrypt_key", "x264_predict_8x8_h_c", "OCSP_RESPID_new", "ff_init_mpadsp_tabs_fixed", "ff_hevc_extract_rbsp", "PEM_do_header", "_Z28FDKaacEnc_DetermineBandWidthPiii19AACENC_BITRATE_MODEiiP15CHANNEL_MAPPING12CHANNEL_MODE", "engine_pkey_asn1_meths_free", "put_hevc_qpel_s8_h3v3_8_neon", "SSL_free", "i2d_X509_CERT_PAIR", "i2d_ASN1_UTF8STRING", "avio_wb16", "pcmDmx_GetParam", "pqueue_size", "ASN1_seq_pack", "_Z18CRvlc_ElementCheckPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoji", "put_hevc_qpel_s32_pixels_8_neon", "av_blowfish_crypt_ecb", "x264_ratecontrol_new", "BN_mod_mul_montgomery", "set_tcp_timeout", "av_rdft_init", "FDKafree", "ff_nv12_to_argb_neon_16", "ff_wav_codec_get_id", "EVP_PKEY_sign", "BN_copy", "BIO_set_ex_data", "SSL_set_tmp_dh_callback", "x264_frame_delete_list", "ASN1_unpack_string", "DH_get_2048_256", "SSL_SESSION_get_ex_data", "private_RC4_set_key", "ASN1_primitive_new", "PKCS8_PRIV_KEY_INFO_new", "ff_mp4_read_dec_config_descr", "ASN1_template_free", "BN_mod_lshift_quick", "ENGINE_get_RSA", "SSL_check_chain", "BN_init", "ff_nv21_to_rgba_neon_16", "POLICY_MAPPING_free", "ff_hevc_put_qpel_h3v2_neon_8", "_Z22FDK_DRC_Generator_CalcP8DRC_COMPPKsiiillPiS3_", "ENGINE_get_pkey_asn1_meths", "x264_predict_lossless_16x16", "ENGINE_get_pkey_asn1_meth_str", "PKCS7_ENVELOPE_new", "SSL_CTX_add_client_CA", "PEM_read_bio_SSL_SESSION", "_Z25sbrDecoder_drcInitChannelP18SBRDEC_DRC_CHANNEL", "EVP_get_pw_prompt", "CRYPTO_mem_leaks_cb", "RC2_set_key", "EVP_DecryptInit_ex", "_Z11SbrCrcCheckP13FDK_BITSTREAMl", "_Z6fLdPowliliPi", "EVP_PKEY_meth_get_cleanup", "_Z19FreeRam_bsOutbufferPPh", "SSL_CTX_add_session", "export_symbol", "av_resample", "ECDSA_METHOD_new", "PEM_write_bio_CMS_stream", "X509_check_trust", "ec_GFp_simple_set_Jprojective_coordinates_GFp", "EVP_MD_CTX_create", "ff_h264_decode_seq_parameter_set", "aacDecoder_Close", "add_hevc_qpel_s16_h1v2_8_neon", "_Z21createSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAij", "_Z23GetRam_aacEnc_BitLookUpiPh", "ff_rtp_codec_id", "x264_ratecontrol_set_weights", "ff_get_pcm_codec_id", "ff_hevc_put_qpel_h2v2_neon_8", "av_parse_color", "__gnu_unwind_execute", "SSL_select_next_proto", "ASN1_BIT_STRING_check", "x264_predict_8x8_v_c", "UI_get0_user_data", "PKCS12_PBE_keyivgen", "CMS_RecipientInfo_kekri_id_cmp", "ASN1_get_object", "ff_butterflies_float_neon", "ASN1_item_i2d_fp", "ff_imdct15_init", "DH_get_default_method", "x264_predict_16x16_p_c", "av_escape", "d2i_ASN1_BOOLEAN", "SSL_set_info_callback", "ECDSA_set_default_method", "ssl_clear_hash_ctx", "ff_avg_h264_chroma_mc2_neon", "EDIPARTYNAME_new", "X509_REVOKED_get_ext_count", "ff_hevc_merge_flag_decode", "X509_CERT_PAIR_free", "av_sha_update", "PEM_write_RSAPrivateKey", "X509_print", "ff_mov_cenc_avc_write_nal_units", "ff_aac_sbr_ctx_close", "SSL_set_purpose", "_Z24sbrGetSyntheticCodedDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAM", "ff_avg_h264_qpel8_mc00_neon", "cms_EncryptedData_init_bio", "i2v_GENERAL_NAME", "i2d_ECPKParameters", "_Z20imdct_copy_ov_and_nrP6mdct_tPli", "gcm_init_neon", "ENGINE_get_name", "SSLv3_method", "ENGINE_get_pkey_asn1_meth_engine", "av_frame_clone", "ECDSA_verify", "FDK_get", "av_read_play", "BN_mod_mul_reciprocal", "PKCS12_x509crl2certbag", "EVP_PKEY_base_id", "X509_PUBKEY_new", "level_add_node", "avcodec_free_context", "EC_KEY_print_fp", "ssl_clear_cipher_ctx", "cms_EncryptedContent_init_bio", "_Z12CRvlc_DecodeP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoP13FDK_BITSTREAM", "_Z20CJointStereo_ApplyMSPP22CAacDecoderChannelInfoPKsPKhiii", "_Z11calcAvgGainP13ENV_CALC_NRGSiiPlPaS1_S2_", "avcodec_find_best_pix_fmt_of_2", "ff_h264_idct_add_10_c", "i2d_ASN1_SET_ANY", "ff_h264_luma_dc_dequant_idct_12_c", "SSL_set_verify_depth", "ff_add_index_entry", "OCSP_REQ_CTX_nbio", "hexChar2Dec", "ASN1_digest", "name_cmp", "_Z22FDK_DRC_Generator_OpenPP8DRC_COMP", "OCSP_REQ_CTX_add1_header", "CRYPTO_THREADID_current", "x264_threadpool_run", "ssl_parse_clienthello_renegotiate_ext", "ec_GFp_simple_add", "PKCS7_dataFinal", "avcodec_find_decoder", "ff_init_cabac_decoder", "X509_set_notAfter", "CRYPTO_ccm128_tag", "av_format_set_control_message_cb", "x264_rdo_init", "avpriv_mpegts_parse_close", "rgb12to15", "__gnu_Unwind_Save_WMMXD", "av_frame_set_decode_error_flags", "X509at_get0_data_by_OBJ", "avcodec_version", "CMS_signed_add1_attr_by_txt", "ENGINE_unregister_ECDSA", "put_hevc_qpel_s16_h1v3_8_neon", "ff_hevc_output_frame", "av_mdct_init", "X509_STORE_load_locations", "SSL_renegotiate_pending", "PEM_write_bio_X509_CRL", "BN_usub", "DES_is_weak_key", "SSL_get1_session", "av_application_did_tcp_connect_ip_port", "ff_put_h264_qpel16_mc30_neon", "ff_vector_fmul_window_neon", "av_frame_get_pkt_duration", "av_bprint_escape", "ff_kbd_window_init_fixed", "ffurl_seek", "X509V3_EXT_CRL_add_conf", "ff_blend_mask", "d2i_CMS_ContentInfo", "ff_fft_init_fixed", "EVP_PKEY_CTX_new", "CMS_get0_RecipientInfos", "swri_audio_convert", "X509_REQ_get_extensions", "EVP_des_ede3_ofb", "d2i_DHxparams", "av_realloc", "ff_af_queue_add", "av_stream_get_recommended_encoder_configuration", "_Z10GetDrcInfoi", "ff_metadata_conv_ctx", "avformat_version", "ff_avfilter_link_set_out_status", "ff_h264_update_thread_context", "DSO_set_method", "BN_GENCB_call", "UI_get0_action_string", "x264_predict_lossless_4x4", "policy_cache_set", "ec_GF2m_simple_point2oct", "x264_me_search_ref", "SHA512", "OPENSSL_gmtime_diff", "av_image_check_sar", "i2d_ASN1_SEQUENCE_ANY", "OCSP_sendreq_new", "CMS_signed_get_attr_count", "_Z23qmfSynPrototypeFirSlot2P15QMF_FILTER_BANKPlS1_Psi", "SSL_set_quiet_shutdown", "ec_GFp_mont_field_set_to_one", "ff_default_query_formats", "c2i_ASN1_BIT_STRING", "X509_policy_tree_get0_user_policies", "_Z13DecodeNonPCWsP13FDK_BITSTREAMP10CErHcrInfo", "av_log2_i", "ASN1_seq_unpack", "SHA384", "avcodec_default_get_buffer2", "X509_EXTENSION_get_critical", "i2d_X509_CRL_INFO", "av_audio_fifo_read", "SSL_get_error", "ff_biweight_h264_pixels_8_neon", "_Z23FDKaacEnc_QCMainPrepareP12ELEMENT_INFOP11ATS_ELEMENTP15PSY_OUT_ELEMENTP14QC_OUT_ELEMENT17AUDIO_OBJECT_TYPEja", "X509_set_issuer_name", "ec_GFp_mont_field_decode", "PEM_read_bio_X509", "avformat_get_riff_video_tags", "_Z13PSEnc_DestroyPP19T_PARAMETRIC_STEREO", "ff_raw_read_partial_packet", "EVP_aes_256_ctr", "avformat_network_init", "avg_hevc_qpel_s8_h3v3_8_neon", "av_image_fill_linesizes", "_Z20aacDecoder_drcEpilogP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "av_frame_set_best_effort_timestamp", "TXT_DB_insert", "X509_NAME_new", "EVP_PKEY_meth_set_decrypt", "d2i_PKCS12_bio", "ff_sws_init_output_funcs", "x264_predict_8x16c_p_c", "CRYPTO_THREADID_hash", "_Z21GetRam_Sbr_envRBufferiPh", "ENGINE_get_static_state", "EVP_PKEY_CTX_set0_keygen_info", "FDK_put", "ff_amf_get_string", "_Z20adtsRead_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ENGINE_set_cmd_defns", "av_application_will_http_open", "ff_mdct_calcw_c", "_Z19FDKaacEnc_calcSfbPeP15PE_CHANNEL_DATAPKlS2_iiiPKiS4_", "ff_put_h264_qpel8_mc12_neon", "ENGINE_get_DH", "av_buffer_pool_init", "ERR_load_UI_strings", "av_hash_names", "FDKrewind", "EVP_PKEY_meth_set_init", "av_ripemd_final", "put_hevc_epel_s4_v_8_neon", "dtls1_get_cipher", "PEM_read_DSAparams", "avfilter_link_free", "PEM_write_bio_X509_AUX", "av_opt_ptr", "i2d_RSA_PUBKEY", "ff_sws_alphablendaway", "x264_lookahead_init", "av_get_colorspace_name", "x264_intra_sa8d_x3_8x8", "x264_cqm_delete", "av_buffer_is_writable", "ssl3_num_ciphers", "ff_mdct_fixed_calc_neon", "SSL_CTX_set_quiet_shutdown", "EVP_aes_192_cfb8", "i2d_PUBKEY_bio", "x264_frame_new_slice", "av_timecode_check_frame_rate", "EC_GROUP_get0_generator", "avfilter_graph_get_filter", "BN_mod_add_quick", "x264_param2string", "SSL_set_ssl_method", "X509_get_ext_count", "ff_faandct", "ffio_init_checksum", "av_image_check_size", "PKCS5_v2_PBKDF2_keyivgen", "X509_ATTRIBUTE_set1_object", "av_get_pix_fmt_name", "X509_REQ_add1_attr_by_txt", "CRYPTO_dbg_realloc", "X509_load_cert_crl_file", "DSA_sign_setup", "ERR_load_DH_strings", "NCONF_free_data", "PKCS7_SIGNER_INFO_free", "__ltdf2", "ff_h264_idct_add8_12_c", "ff_h264_idct8_add4_14_c", "SHA224_Final", "ASN1_item_free", "X509_load_crl_file", "x264_macroblock_analyse", "RC2_ecb_encrypt", "PKCS12_MAKE_KEYBAG", "CRYPTO_ccm128_decrypt_ccm64", "ff_butterflies_float_vfp", "PKCS7_print_ctx", "_Z35GetRequiredMemRam_SbrDecWorkBuffer1v", "x264_intra_satd_x3_8x16c_neon", "ff_h264_idct8_add_neon", "ec_GFp_simple_get_Jprojective_coordinates_GFp", "EVP_PKEY_meth_set_encrypt", "X509V3_EXT_CRL_add_nconf", "_Z21GetRam_aacEnc_QCstatei", "x264_intra_sad_x3_4x4", "sk_shift", "ACCESS_DESCRIPTION_new", "ff_isom_write_avcc", "x264_encoder_reconfig_apply", "d2i_PBEPARAM", "ENGINE_set_RAND", "av_opt_get_image_size", "ERR_load_crypto_strings", "d2i_PKCS12", "CRYPTO_gcm128_decrypt", "CMS_RecipientInfo_encrypt", "av_get_channel_layout_nb_channels", "EVP_cast5_ecb", "ff_idet_filter_line_c_16bit", "X509V3_EXT_i2d", "ff_alloc_extradata", "i2d_EXTENDED_KEY_USAGE", "ec_GF2m_simple_is_at_infinity", "ff_h264_chroma422_dc_dequant_idct_12_c", "ff_id3v2_read", "EVP_set_pw_prompt", "ffurl_accept", "PEM_write_X509", "av_camellia_init", "ff_put_v", "X509_check_ip", "dtls1_process_heartbeat", "SSL_get_srp_username", "ff_yuv420p_to_bgra_neon_32", "EC_GROUP_set_seed", "PEM_write_EC_PUBKEY", "CRYPTO_128_unwrap", "asn1_generalizedtime_to_tm", "UI_get_method", "BIO_asn1_set_suffix", "PEM_read_bio_NETSCAPE_CERT_SEQUENCE", "ff_idctdsp_init_armv5te", "PEM_write_bio_DSAparams", "ISSUING_DIST_POINT_free", "ASN1_TIME_check", "CRYPTO_free_locked", "_Z14adtsWrite_InitP11STRUCT_ADTSP12CODER_CONFIG", "av_codec_get_codec_properties", "EC_POINT_set_Jprojective_coordinates_GFp", "SSL_alert_type_string_long", "X509_STORE_CTX_get_error_depth", "PEM_write_DSA_PUBKEY", "OBJ_bsearch_ex_", "PEM_read_bio_RSAPublicKey", "EC_POINT_invert", "ssl3_get_server_certificate", "_Z21transportDec_CrcCheckP12TRANSPORTDEC", "ssl3_get_req_cert_type", "av_camellia_alloc", "OCSP_REQ_CTX_set1_req", "add_hevc_qpel_s8_h2_8_neon", "ff_frame_thread_encoder_free", "bn_add_part_words", "swr_alloc_set_opts", "_Z20scalFilterBankValuesP6PS_DECPPlS2_iiiPaS3_iPii", "ff_graph_thread_free", "X509_PKEY_free", "X509_chain_up_ref", "_Z26FreeRam_aacEnc_ElementBitsPP12ELEMENT_BITS", "X509_get_ext", "av_parse_video_size", "put_hevc_qpel_s16_v2_8_neon", "tls1_set_sigalgs_list", "ff_biweight_h264_pixels_16_neon", "SSL_SESSION_free", "ff_h264_pred_direct_motion", "ff_pix_abs16_x2_armv6", "ERR_set_implementation", "ff_h264_decode_picture_parameter_set", "_Z29FreeRam_Sbr_QmfStatesAnalysisPPs", "BN_GF2m_mod_sqrt_arr", "SSL_rstate_string_long", "ff_index_search_timestamp", "PEM_write_bio_CMS", "SSL_get_ex_data_X509_STORE_CTX_idx", "ff_side_data_update_matrix_encoding", "CMS_set1_eContentType", "UI_get0_result_string", "swr_convert_frame", "FDKfree", "FDKprintf", "ASN1_GENERALSTRING_free", "X509_VERIFY_PARAM_set1_email", "EVP_whirlpool", "_Z19FDKaacEnc_TnsDetectP8TNS_DATAPK10TNS_CONFIGP8TNS_INFOiPlii", "ENGINE_remove", "_Z27transportDec_GetAuBitsTotalP12TRANSPORTDECj", "ASN1_UNIVERSALSTRING_to_string", "_Unwind_Resume_or_Rethrow", "BN_new", "ff_fft_init", "X509_OBJECT_free_contents", "_Z31GetRequiredMemRam_SbrDecElementv", "PEM_write_bio_RSAPublicKey", "X509V3_add_standard_extensions", "transform_32x32_add_neon_col", "ff_h264_idct_add8_422_10_c", "av_aes_crypt", "ASN1_PRINTABLE_type", "avg_hevc_qpel_s8_v3_8_neon", "PEM_read_bio_RSA_PUBKEY", "ECDSA_sign_ex", "_Z11FreeDrcInfoPP8CDrcInfo", "av_format_get_metadata_header_padding", "BN_ucmp", "sbrDecoder_GetDelay", "avfilter_license", "X509_NAME_oneline", "bsaes_xts_encrypt", "BN_GF2m_mod_mul", "_Z30FreeRam_sbr_QmfStatesSynthesisPPl", "UI_get0_test_string", "PKCS12_certbag2x509", "BN_rshift", "RSA_PKCS1_SSLeay", "ff_hevc_put_qpel_uw_v2_neon_8", "X509_supported_extension", "avg_hevc_qpel_s32_h2_8_neon", "x264_slicetype_analyse", "ffio_read_varlen", "CMS_RecipientInfo_kari_get0_orig_id", "asn1_ex_i2c", "_Z31GetRequiredMemRam_Sbr_guideScfbv", "CRYPTO_gcm128_encrypt_ctr32", "X509_INFO_new", "SSL_get_wbio", "_Z22rescalFilterBankValuesP6PS_DECPPlS2_ii", "BN_MONT_CTX_set_locked", "PBE2PARAM_new", "ff_hevc_put_pixels_w4_neon_8", "SSL_get_session", "avcodec_decode_audio4", "PKCS12_unpack_p7encdata", "EVP_CIPHER_CTX_copy", "av_packet_alloc", "ff_imdct_half_c_fixed_32", "ENGINE_set_default_RSA", "av_log_missing_feature", "i2d_PKCS7_fp", "av_log2", "CMS_signed_get_attr_by_OBJ", "ff_mc_weight_4_neon", "PKCS7_ENC_CONTENT_new", "_Z31FDK_DRC_Generator_getDrcProfileP8DRC_COMP", "_Z28FDKsbrEnc_getSbrStartFreqRAWii", "av_ripemd_init", "EVP_get_cipherbyname", "PEM_read_CMS", "ENGINE_new", "_Z6dct_IIPlS_iPi", "av_fast_malloc", "x264_intra_sad_x3_4x4_neon", "avcodec_configuration", "ff_mov_get_channel_layout", "av_log_format_line", "tls1_default_timeout", "FDKaacEnc_Open", "RSA_private_decrypt", "EVP_PKEY_CTX_get_data", "_Z21adtsWrite_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "ssl3_new", "_Z19fillHybridDelayLinePPlS0_S_S_S_S_P6HYBRID", "ff_dualinput_request_frame", "CRYPTO_get_dynlock_destroy_callback", "UI_method_set_reader", "CRYPTO_get_locking_callback", "CRYPTO_mem_ctrl", "MD4_Init", "EC_get_builtin_curves", "UI_add_input_string", "sws_printVec2", "SSL_CTX_use_certificate", "_Z29FDKaacEnc_ChannelElementWriteP12TRANSPORTENCP12ELEMENT_INFOPP14QC_OUT_CHANNELP15PSY_OUT_ELEMENTPP15PSY_OUT_CHANNELj17AUDIO_OBJECT_TYPEaPih", "_Z23getBitstreamElementList17AUDIO_OBJECT_TYPEahh", "x264_frame_filter", "av_register_bitstream_filter", "_Z10PSEnc_InitP19T_PARAMETRIC_STEREOP14T_PSENC_CONFIGiiPh", "EVP_PKEY_asn1_set_public", "ff_thread_await_progress", "ssl3_write", "X509_EXTENSION_create_by_NID", "_armv7_tick", "OPENSSL_isservice", "ec_GF2m_simple_oct2point", "ssl3_do_uncompress", "FDKfree_L", "PEM_read_PUBKEY", "X509_VERIFY_PARAM_get_flags", "put_hevc_qpel_s32_v2_8_neon", "ff_h264_idct_dc_add_9_c", "EVP_PKEY_get1_EC_KEY", "i2d_PKCS8PrivateKeyInfo_fp", "restore_core_regs", "av_strtok", "ERR_load_ASN1_strings", "d2i_OCSP_RESPONSE", "_Z22GetRam_Sbr_quotaMatrixi", "ff_hevc_pred_init", "X509_policy_level_get0_node", "UI_method_get_opener", "X509at_delete_attr", "ASN1_const_check_infinite_end", "engine_cleanup_add_last", "FDKstrchr", "ff_init_vscale", "ff_sbr_hf_apply_noise_2_neon", "ENGINE_get_default_ECDSA", "ff_h264_chroma_dc_dequant_idct_8_c", "CMS_get0_eContentType", "engine_unlocked_finish", "OBJ_NAME_new_index", "X509_OBJECT_up_ref_count", "RAND_seed"], "allstrings": ["+infinity", "+inf", "-infinity", "-inf", "+nan", "-nan", "infinity", "Assertion %s failed at %s:%d\n", "s->buf_ptr < s->buf_end", "libavcodec/put_bits.h", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "aac_adtstoasc", "Dependent coupling is not supported together with LTP\n", "Sample rate index in program config element does not match the sample rate index configured by the container.\n", "decode_pce: Input buffer exhausted before END element found\n", "TNS filter order %d is greater than maximum %d.\n", "ChannelElement %d.%d missing \n", "Remapped id too large\n", "Too many channels\n", "mono with CPE\n", "stereo with SCE\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to LFE[0]\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to SCE[1]\n", "Reserved bit set.\n", "AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found.\n", "Invalid Predictor Reset Group.\n", "Prediction is not allowed in AAC-LC.\n", "LTP in ER AAC LD not yet implemented.\n", "Number of scalefactor bands in group (%d) exceeds limit (%d).\n", "invalid band type\n", "decode_band_types: Input buffer exhausted before END element found\n", "Number of bands (%d) exceeds limit (%d).\n", "If you heard an audible artifact, there may be a bug in the decoder. Clipped intensity stereo position (%d -> %d)", "If you heard an audible artifact, there may be a bug in the decoder. Clipped noise gain (%d -> %d)", "Scalefactor (%d) out of range.\n", "Pulse tool not allowed in eight short sequence.\n", "error in spectral data, ESC overflow\n", "Pulse data corrupt or invalid.\n", "ms_present = 3 is reserved.\n", "Unknown ER channel configuration %d", "channel element %d.%d is not allocated\n", "no frame data found\n", "More than one AAC RDB per ADTS frame", "invalid default channel configuration (%d)\n", "Assuming an incorrectly encoded 7.1 channel layout instead of a spec-compliant 7.1(wide) layout, use -strict %d to decode according to the specification instead.\n", "Error decoding AAC frame header.\n", "invalid sampling rate index %d\n", "Elem type:%x id:%x\n", "skip_data_stream_element: Input buffer exhausted before END element found\n", "Not evaluating a further program_config_element as this construct is dubious at best.\n", "TYPE_FIL: Input buffer exhausted before END element found\n", "extension type: %d len:%d\n", "SBR was found before the first channel element.\n", "SBR signaled to be not-present but was found in the bitstream.\n", "Implicit SBR was found with a first occurrence after the first frame.\n", "FILL:%s\n", "libfaac %d.%d", "Input buffer exhausted before END element found\n", "SBR+", "Audio specific config size is invalid\n", "invalid low delay sampling rate index %d\n", "960/120 MDCT window", "AAC data resilience (flags %x)", "epConfig %d", "Low Delay SBR", "Audio object type %s%d", "Non-byte-aligned audio-specific config", "audio config changed\n", "initializing latmctx\n", "Multiple programs", "Multiple layers", "no decoder config found\n", "incomplete frame\n", "frame length mismatch %d << %d\n", "ADTS header detected, probably as result of configuration misparsing\n", "aac_latm", "AAC LATM (Advanced Audio Coding LATM syntax)", "AAC (Advanced Audio Coding)", "AAC decoder", "dual_mono_mode", "Select the channel to decode for dual mono", "auto", "autoselection", "main", "Select Main/Left channel", "Select Sub/Right channel", "both", "Select both channels", "iid_mode %d is reserved.\n", "icc_mode %d is reserved.\n", "illegal iid\n", "illegal icc\n", "ps extension overflow %d\n", "iid_par invalid\n", "icc_par invalid\n", "Expected to read %d PS bits actually read %d.\n", "Invalid n_master: %d\n", "Invalid bitstream, crossover band index beyond array bounds: %d\n", "Unsupported sample rate for SBR: %d\n", "Invalid bs_stop_freq: %d\n", "libavcodec/aacsbr_template.c", "Invalid bitstream, too many QMF subbands: %d\n", "Invalid num_bands_0: %d\n", "Invalid vDk0[%d]: %d\n", "Invalid vDk1[%d]: %d\n", "noise_facs_q %d is invalid\n", "env_facs_q %d is invalid\n", "Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n", "Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n", "bs_pointer >= 0", "Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n", "Not strictly monotone time borders\n", "Stop frequency border too high: %d\n", "Start frequency border too high: %d\n", "Too many noise floor scale factors: %d\n", "patch construction failed\n", "Too many patches: %d\n", "SBR reset failed. Switching SBR to pure upsampling mode.\n", "Invalid bitstream - cannot apply SBR to element type %d\n", "Parametric Stereo signaled to be not-present but was found in the bitstream.\n", "Reserved SBR extensions", "SBR Extension over read.\n", "Expected to read %d SBR bytes actually read %d.\n", "element type mismatch %d != %d\n", "No quantized data read for sbr_dequant.\n", "envelope scalefactor overflow in dequant\n", "temp1 <= 1E20", "libavcodec/aacsbr.c", "sbr->data[ch].bs_num_env > 0", "ERROR : no subband found for frequency %d\n", "kx != f_table{high,low}[0]. Derived frequency tables were not regenerated.\n", "Error: donot support neon opt other than 8bits", "%d frames left in the queue on closing\n", "Queue input is backward in time\n", "Trying to remove %d samples, but the queue is empty\n", "!afq->frame_count", "libavcodec/audio_frame_queue.c", "afq->remaining_samples == afq->remaining_delay", "Trying to remove %d more samples than there are in the queue\n", "AVDCT", "DCT algorithm", "autoselect a good one", "fastint", "fast integer (experimental / for debugging)", "accurate integer", "experimental / for debugging", "altivec", "faan", "floating point AAN DCT (experimental / for debugging)", "idct", "select IDCT implementation", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "floating point AAN IDCT (experimental / for debugging)", "simpleauto", "bits_per_sample", "(unsigned)pkt->size <= 2147483647 - 32", "libavcodec/avpacket.c", "Palette", "New Extradata", "Param Change", "H263 MB Info", "Replay Gain", "Display Matrix", "Stereo 3D", "Audio Service Type", "Skip Samples", "JP Dual Mono", "Strings Metadata", "Subtitle Position", "Matroska BlockAdditional", "WebVTT ID", "WebVTT Settings", "Metadata Update", "size<=2147483647 && p - pkt->data >= size", "p-pkt->data == pkt->size", "incorrect codes\n", "Internal error, put_bits buffer too small\n", "length <= put_bits_left(pb)", "libavcodec/bitstream.c", "n <= s->buf_end - s->buf_ptr", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code in init_vlc\n", "needed %d had %d\n", "ret >= 0", "mpeg1video", "MPEG-1 video", "mpeg2video", "MPEG-2 video", "mpegvideo_xvmc", "MPEG-1/2 video XvMC (X-Video Motion Compensation)", "h261", "H.261", "h263", "H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "rv10", "RealVideo 1.0", "rv20", "RealVideo 2.0", "mjpeg", "Motion JPEG", "mjpegb", "Apple MJPEG-B", "mpeg4", "MPEG-4 part 2", "rawvideo", "raw video", "msmpeg4v1", "MPEG-4 part 2 Microsoft variant version 1", "msmpeg4v2", "MPEG-4 part 2 Microsoft variant version 2", "msmpeg4v3", "MPEG-4 part 2 Microsoft variant version 3", "wmv1", "Windows Media Video 7", "wmv2", "Windows Media Video 8", "h263p", "H.263+ / H.263-1998 / H.263 version 2", "h263i", "Intel H.263", "flv1", "FLV / Sorenson Spark / Sorenson H.263 (Flash Video)", "svq1", "Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1", "svq3", "Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3", "dvvideo", "DV (Digital Video)", "huffyuv", "HuffYUV", "cyuv", "Creative YUV (CYUV)", "h264", "H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10", "indeo3", "Intel Indeo 3", "On2 VP3", "theora", "Theora", "asv1", "ASUS V1", "asv2", "ASUS V2", "ffv1", "FFmpeg video codec #1", "4X Movie", "vcr1", "ATI VCR1", "cljr", "Cirrus Logic AccuPak", "mdec", "Sony PlayStation MDEC (Motion DECoder)", "id RoQ video", "interplayvideo", "Interplay MVE video", "xan_wc3", "Wing Commander III / Xan", "xan_wc4", "Wing Commander IV / Xxan", "rpza", "QuickTime video (RPZA)", "cinepak", "Cinepak", "ws_vqa", "Westwood Studios VQA (Vector Quantized Animation) video", "msrle", "Microsoft RLE", "msvideo1", "Microsoft Video 1", "idcin", "id Quake II CIN video", "8bps", "QuickTime 8BPS video", "QuickTime Graphics (SMC)", "flic", "Autodesk Animator Flic video", "truemotion1", "Duck TrueMotion 1.0", "vmdvideo", "Sierra VMD video", "mszh", "LCL (LossLess Codec Library) MSZH", "zlib", "LCL (LossLess Codec Library) ZLIB", "qtrle", "QuickTime Animation (RLE) video", "snow", "Snow", "tscc", "TechSmith Screen Capture Codec", "ulti", "IBM UltiMotion", "qdraw", "Apple QuickDraw", "vixl", "Miro VideoXL", "qpeg", "Q-team QPEG", "ffvhuff", "Huffyuv FFmpeg variant", "rv30", "RealVideo 3.0", "rv40", "RealVideo 4.0", "SMPTE VC-1", "wmv3", "Windows Media Video 9", "loco", "LOCO", "wnv1", "Winnov WNV1", "aasc", "Autodesk RLE", "indeo2", "Intel Indeo 2", "fraps", "Fraps", "truemotion2", "Duck TrueMotion 2.0", "BMP (Windows and OS/2 bitmap)", "cscd", "CamStudio", "mmvideo", "American Laser Games MM Video", "zmbv", "Zip Motion Blocks Video", "AVS (Audio Video Standard) video", "smackvideo", "Smacker video", "NuppelVideo/RTJPEG", "kmvc", "Karl Morton's video codec", "flashsv", "Flash Screen Video v1", "cavs", "Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)", "jpeg2000", "JPEG 2000", "vmnc", "VMware Screen Codec / VMware Video", "On2 VP5", "On2 VP6", "vp6f", "On2 VP6 (Flash version)", "dsicinvideo", "Delphine Software International CIN video", "tiertexseqvideo", "Tiertex Limited SEQ video", "Feeble Files/ScummVM DXA", "dnxhd", "VC3/DNxHD", "Nintendo Gamecube THP video", "Interplay C93", "bethsoftvid", "Bethesda VID video", "vp6a", "On2 VP6 (Flash version, with alpha channel)", "AMV Video", "Beam Software VB", "indeo4", "Intel Indeo Video Interactive 4", "indeo5", "Intel Indeo Video Interactive 5", "mimic", "Mimic", "RL2 video", "escape124", "Escape 124", "daala", "Daala", "dirac", "Dirac", "Brute Force & Ignorance", "Electronic Arts CMV video", "motionpixels", "Motion Pixels video", "Electronic Arts TGV video", "Electronic Arts TGQ video", "Electronic Arts TQI video", "aura", "Auravision AURA", "aura2", "Auravision Aura 2", "v210x", "Uncompressed 4:2:2 10-bit", "8088flex TMV", "v210", "Electronic Arts Madcow Video", "frwu", "Forward Uncompressed", "flashsv2", "Flash Screen Video v2", "cdgraphics", "CD Graphics video", "r210", "Uncompressed RGB 10-bit", "Deluxe Paint Animation", "binkvideo", "Bink video", "iff_ilbm", "IFF ILBM", "kgv1", "Kega Game Video", "Psygnosis YOP Video", "On2 VP8", "Google VP9", "pictor", "Pictor/PC Paint", "a64_multi", "Multicolor charset for Commodore 64", "a64_multi5", "Multicolor charset for Commodore 64, extended with 5th color (colram)", "r10k", "AJA Kona 10-bit RGB Codec", "mvc1", "Silicon Graphics Motion Video Compressor 1", "mvc2", "Silicon Graphics Motion Video Compressor 2", "mxpeg", "Mobotix MxPEG video", "lagarith", "Lagarith lossless", "prores", "Apple ProRes (iCodec Pro)", "Bitmap Brothers JV video", "Chronomaster DFA", "utvideo", "Ut Video", "bmv_video", "Discworld II BMV video", "vble", "VBLE Lossless Codec", "dxtory", "Dxtory", "v410", "Uncompressed 4:4:4 10-bit", "cdxl", "Commodore CDXL video", "zerocodec", "ZeroCodec Lossless Video", "mss1", "MS Screen 1", "msa1", "MS ATC Screen", "tscc2", "TechSmith Screen Codec 2", "mts2", "MS Expression Encoder Screen", "cllc", "Canopus Lossless Codec", "mss2", "MS Windows Media Video V9 Screen", "Apple Intermediate Codec", "y41p", "Uncompressed YUV 4:1:1 12-bit", "escape130", "Escape 130", "avrp", "Avid 1:1 10-bit RGB Packer", "012v", "avui", "Avid Meridien Uncompressed", "ayuv", "Uncompressed packed MS 4:4:4:4", "targa_y216", "Pinnacle TARGA CineWave YUV16", "v308", "Uncompressed packed 4:4:4", "v408", "Uncompressed packed QT 4:4:4:4", "yuv4", "Uncompressed packed 4:2:0", "avrn", "Avid AVI Codec", "cpia", "CPiA video format", "xface", "X-face image", "smvjpeg", "Sigmatel Motion Video", "Go2Meeting", "hnm4video", "HNM 4 video", "hevc", "H.265 / HEVC (High Efficiency Video Coding)", "Mirillis FIC", "paf_video", "Amazing Studio Packed Animation File Video", "On2 VP7", "sanm", "LucasArts SANM/SMUSH video", "sgirle", "SGI RLE 8-bit", "Canopus HQX", "hq_hqa", "Canopus HQ/HQA", "Vidvox Hap decoder", "Resolume DXV", "screenpresso", "Screenpresso", "wrapped_avframe", "AVFrame to AVPacket passthrough", "rscc", "innoHeim/Rsupport Screen Capture Codec", "alias_pix", "Alias/Wavefront PIX image", "ansi", "ASCII/ANSI art", "brender_pix", "BRender PIX image", "DirectDraw Surface image decoder", "DPX (Digital Picture Exchange) image", "OpenEXR image", "GIF (Graphics Interchange Format)", "jpegls", "JPEG-LS", "ljpeg", "Lossless JPEG", "PAM (Portable AnyMap) image", "PBM (Portable BitMap) image", "PC Paintbrush PCX image", "PGM (Portable GrayMap) image", "pgmyuv", "PGMYUV (Portable GrayMap YUV) image", "PNG (Portable Network Graphics) image", "PPM (Portable PixelMap) image", "V.Flash PTX image", "SGI image", "sp5x", "Sunplus JPEG (SP5X)", "sunrast", "Sun Rasterfile image", "targa", "Truevision Targa image", "tdsc", "TDSC", "tiff", "TIFF image", "Renderware TXD (TeXture Dictionary) image", "vc1image", "Windows Media Video 9 Image v2", "webp", "WebP", "wmv3image", "Windows Media Video 9 Image", "XBM (X BitMap) image", "XWD (X Window Dump) image", "apng", "APNG (Animated Portable Network Graphics) image", "cfhd", "Cineform HD", "pcm_s16le", "PCM signed 16-bit little-endian", "pcm_s16be", "PCM signed 16-bit big-endian", "pcm_u16le", "PCM unsigned 16-bit little-endian", "pcm_u16be", "PCM unsigned 16-bit big-endian", "pcm_s8", "PCM signed 8-bit", "pcm_u8", "PCM unsigned 8-bit", "pcm_mulaw", "PCM mu-law / G.711 mu-law", "pcm_alaw", "PCM A-law / G.711 A-law", "pcm_s32le", "PCM signed 32-bit little-endian", "pcm_s32be", "PCM signed 32-bit big-endian", "pcm_u32le", "PCM unsigned 32-bit little-endian", "pcm_u32be", "PCM unsigned 32-bit big-endian", "pcm_s24le", "PCM signed 24-bit little-endian", "pcm_s24be", "PCM signed 24-bit big-endian", "pcm_u24le", "PCM unsigned 24-bit little-endian", "pcm_u24be", "PCM unsigned 24-bit big-endian", "pcm_s24daud", "PCM D-Cinema audio signed 24-bit", "pcm_zork", "PCM Zork", "pcm_s16be_planar", "PCM signed 16-bit big-endian planar", "pcm_s16le_planar", "PCM signed 16-bit little-endian planar", "pcm_s24le_planar", "PCM signed 24-bit little-endian planar", "pcm_s32le_planar", "PCM signed 32-bit little-endian planar", "pcm_dvd", "PCM signed 20|24-bit big-endian", "pcm_f32be", "PCM 32-bit floating point big-endian", "pcm_f32le", "PCM 32-bit floating point little-endian", "pcm_f64be", "PCM 64-bit floating point big-endian", "pcm_f64le", "PCM 64-bit floating point little-endian", "pcm_bluray", "PCM signed 16|20|24-bit big-endian for Blu-ray media", "pcm_lxf", "PCM signed 20-bit little-endian planar", "s302m", "SMPTE 302M", "pcm_s8_planar", "PCM signed 8-bit planar", "adpcm_ima_qt", "ADPCM IMA QuickTime", "adpcm_ima_wav", "ADPCM IMA WAV", "adpcm_ima_dk3", "ADPCM IMA Duck DK3", "adpcm_ima_dk4", "ADPCM IMA Duck DK4", "adpcm_ima_ws", "ADPCM IMA Westwood", "adpcm_ima_smjpeg", "ADPCM IMA Loki SDL MJPEG", "adpcm_ms", "ADPCM Microsoft", "adpcm_4xm", "ADPCM 4X Movie", "adpcm_xa", "ADPCM CDROM XA", "adpcm_adx", "SEGA CRI ADX ADPCM", "adpcm_ea", "ADPCM Electronic Arts", "adpcm_g726", "G.726 ADPCM", "adpcm_ct", "ADPCM Creative Technology", "adpcm_swf", "ADPCM Shockwave Flash", "adpcm_yamaha", "ADPCM Yamaha", "adpcm_sbpro_4", "ADPCM Sound Blaster Pro 4-bit", "adpcm_sbpro_3", "ADPCM Sound Blaster Pro 2.6-bit", "adpcm_sbpro_2", "ADPCM Sound Blaster Pro 2-bit", "adpcm_thp", "ADPCM Nintendo THP", "adpcm_thp_le", "ADPCM Nintendo THP (Little-Endian)", "adpcm_ima_amv", "ADPCM IMA AMV", "adpcm_ea_r1", "ADPCM Electronic Arts R1", "adpcm_ea_r3", "ADPCM Electronic Arts R3", "adpcm_ea_r2", "ADPCM Electronic Arts R2", "adpcm_ima_ea_sead", "ADPCM IMA Electronic Arts SEAD", "adpcm_ima_ea_eacs", "ADPCM IMA Electronic Arts EACS", "adpcm_ea_xas", "ADPCM Electronic Arts XAS", "adpcm_ea_maxis_xa", "ADPCM Electronic Arts Maxis CDROM XA", "adpcm_ima_iss", "ADPCM IMA Funcom ISS", "adpcm_g722", "G.722 ADPCM", "adpcm_ima_apc", "ADPCM IMA CRYO APC", "adpcm_afc", "ADPCM Nintendo Gamecube AFC", "adpcm_ima_oki", "ADPCM IMA Dialogic OKI", "adpcm_dtk", "ADPCM Nintendo Gamecube DTK", "adpcm_ima_rad", "ADPCM IMA Radical", "adpcm_g726le", "G.726 ADPCM little-endian", "adpcm_vima", "LucasArts VIMA audio", "adpcm_psx", "ADPCM Playstation", "adpcm_aica", "ADPCM Yamaha AICA", "amr_nb", "AMR-NB (Adaptive Multi-Rate NarrowBand)", "amr_wb", "AMR-WB (Adaptive Multi-Rate WideBand)", "ra_144", "RealAudio 1.0 (14.4K)", "ra_288", "RealAudio 2.0 (28.8K)", "roq_dpcm", "DPCM id RoQ", "interplay_dpcm", "DPCM Interplay", "xan_dpcm", "DPCM Xan", "sol_dpcm", "DPCM Sol", "sdx2_dpcm", "DPCM Squareroot-Delta-Exact", "MP2 (MPEG audio layer 2)", "MP3 (MPEG audio layer 3)", "ATSC A/52A (AC-3)", "DCA (DTS Coherent Acoustics)", "vorbis", "Vorbis", "dvaudio", "DV audio", "wmav1", "Windows Media Audio 1", "wmav2", "Windows Media Audio 2", "mace3", "MACE (Macintosh Audio Compression/Expansion) 3:1", "mace6", "MACE (Macintosh Audio Compression/Expansion) 6:1", "vmdaudio", "Sierra VMD audio", "flac", "FLAC (Free Lossless Audio Codec)", "mp3adu", "ADU (Application Data Unit) MP3 (MPEG audio layer 3)", "mp3on4", "MP3onMP4", "shorten", "Shorten", "alac", "ALAC (Apple Lossless Audio Codec)", "westwood_snd1", "Westwood Audio (SND1)", "qdm2", "QDesign Music Codec 2", "cook", "Cook / Cooker / Gecko (RealAudio G2)", "truespeech", "DSP Group TrueSpeech", "TTA (True Audio)", "smackaudio", "Smacker audio", "qcelp", "QCELP / PureVoice", "wavpack", "WavPack", "dsicinaudio", "Delphine Software International CIN audio", "IMC (Intel Music Coder)", "musepack7", "Musepack SV7", "MLP (Meridian Lossless Packing)", "gsm_ms", "GSM Microsoft variant", "atrac3", "ATRAC3 (Adaptive TRansform Acoustic Coding 3)", "voxware", "Voxware RT29 Metasound", "Monkey's Audio", "nellymoser", "Nellymoser Asao", "musepack8", "Musepack SV8", "speex", "Speex", "wmavoice", "Windows Media Audio Voice", "wmapro", "Windows Media Audio 9 Professional", "wmalossless", "Windows Media Audio Lossless", "atrac3p", "ATRAC3+ (Adaptive TRansform Acoustic Coding 3+)", "eac3", "ATSC A/52B (AC-3, E-AC-3)", "sipr", "RealAudio SIPR / ACELP.NET", "MP1 (MPEG audio layer 1)", "twinvq", "VQF TwinVQ", "truehd", "TrueHD", "mp4als", "MPEG-4 Audio Lossless Coding (ALS)", "atrac1", "ATRAC1 (Adaptive TRansform Acoustic Coding)", "binkaudio_rdft", "Bink Audio (RDFT)", "binkaudio_dct", "Bink Audio (DCT)", "qdmc", "QDesign Music", "celt", "Constrained Energy Lapped Transform (CELT)", "g723_1", "G.723.1", "dss_sp", "Digital Speech Standard - Standard Play mode (DSS SP)", "g729", "G.729", "8svx_exp", "8SVX exponential", "8svx_fib", "8SVX fibonacci", "bmv_audio", "Discworld II BMV audio", "ralf", "RealAudio Lossless", "IAC (Indeo Audio Coder)", "ilbc", "iLBC (Internet Low Bitrate Codec)", "wavesynth", "Wave synthesis pseudo-codec", "sonic", "Sonic", "sonicls", "Sonic lossless", "opus", "Opus (Opus Interactive Audio Codec)", "comfortnoise", "RFC 3389 Comfort Noise", "TAK (Tom's lossless Audio Kompressor)", "metasound", "Voxware MetaSound", "paf_audio", "Amazing Studio Packed Animation File Audio", "On2 Audio for Video Codec", "evrc", "EVRC (Enhanced Variable Rate Codec)", "SMV (Selectable Mode Vocoder)", "4GV (Fourth Generation Vocoder)", "dsd_lsbf", "DSD (Direct Stream Digital), least significant bit first", "dsd_msbf", "DSD (Direct Stream Digital), most significant bit first", "dsd_lsbf_planar", "DSD (Direct Stream Digital), least significant bit first, planar", "dsd_msbf_planar", "DSD (Direct Stream Digital), most significant bit first, planar", "interplayacm", "Interplay ACM", "xma1", "Xbox Media Audio 1", "xma2", "Xbox Media Audio 2", "dvd_subtitle", "DVD subtitles", "dvb_subtitle", "DVB subtitles", "text", "raw UTF-8 text", "xsub", "XSUB", "ASS (Advanced SSA) subtitle", "SSA (SubStation Alpha) subtitle", "mov_text", "MOV text", "hdmv_pgs_subtitle", "HDMV Presentation Graphic Stream subtitles", "dvb_teletext", "DVB teletext", "SubRip subtitle with embedded timing", "subrip", "SubRip subtitle", "microdvd", "MicroDVD subtitle", "mpl2", "MPL2 subtitle", "eia_608", "EIA-608 closed captions", "jacosub", "JACOsub subtitle", "PJS (Phoenix Japanimation Society) subtitle", "sami", "SAMI subtitle", "realtext", "RealText subtitle", "Spruce subtitle format", "subviewer1", "SubViewer v1 subtitle", "subviewer", "SubViewer subtitle", "vplayer", "VPlayer subtitle", "webvtt", "WebVTT subtitle", "hdmv_text_subtitle", "HDMV Text subtitle", "TrueType font", "bintext", "Binary text", "xbin", "eXtended BINary text", "iCEDraw text", "OpenType font", "SMPTE 336M Key-Length-Value (KLV) metadata", "dvd_nav_packet", "DVD Nav packet", "timed_id3", "timed ID3 metadata", "bin_data", "binary data", "application/octet-stream", "application/vnd.ms-opentype", "application/x-truetype-font", "application/x-font", "image/png", "image/x-xwindowdump", "image/webp", "image/tiff", "image/x-targa", "image/x-tga", "image/x-pcx", "image/x-portable-pixmap", "image/gif", "image/jp2", "image/x-ms-bmp", "image/jpeg", "guess_dc() is out of memory\n", "s->quarter_sample", "libavcodec/error_resilience.c", "internal error, slice end before start\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "Forcing thread count to 1 for MJPEG encoding, use -thread_type slice or a constant quantizer if you want to use multiple cpu cores\n", "MJPEG CBR encoding works badly with frame multi-threading, consider using -threads 1, -thread_type slice or a constant quantizer.\n", "context", "non_deterministic", "!avctx->internal->frame_thread_encoder", "libavcodec/frame_thread_encoder.c", "threads", "!thread_avctx->internal->frame_thread_encoder", "ff_frame_thread_encoder_init failed\n", "Forcing thread count to 1 for huffyuv encoding with first pass or context 1\n", "Reference not available for error concealing\n", "Reference invalid\n", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "libavcodec/h264.c", "no picture %s\n", "stereo_mode", "top block unavailable for requested intra4x4 mode %d at %d %d\n", "left block unavailable for requested intra4x4 mode %d at %d %d\n", "out of range intra chroma pred mode at %d %d\n", "top block unavailable for requested intra mode at %d %d\n", "left block unavailable for requested intra mode at %d %d\n", "AVC: nal size %d\n", "NAL %d/%d at %d/%d length %d\n", "AVC: Consumed only %d bytes instead of %d\n", "Ignoring NAL %d in global header/extradata\n", "Invalid inter IDR frame\n", "invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n", "data partitioning", "SPS decoding failure, trying again with the complete NAL\n", "next_avc - buf_index + consumed == nalsize", "Unknown NAL code: %d (%d bits)\n", "decode_slice_header error\n", "Cannot allocate memory.\n", "avcC %d too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "buf_index <= buf_size", "Q264", "no frame!\n", "Duplicating field %d to fill missing\n", "pict->buf[0] || !*got_frame", "Invalid UE golomb code\n", "luma_log2_weight_denom %d is out of range\n", "chroma_log2_weight_denom %d is out of range\n", "reference overflow %u > %u or %u > %u\n", "pthread_once has failed.", "Error resilience with slice threads is enabled. It is unsafe and unsupported and may crash. Use it at your own risk\n", "H264 Decoder", "is_avc", "is avc", "nal_length_size", "enable_er", "Enable error resilience on damaged frames (unsafe)", "overflow in decode_cabac_mb_mvd\n", "Reference %d >= %d\n", "gray chroma\n", "cabac decode of qscale diff failed at %d %d\n", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "offset == (sizeof(coeff_token_vlc_tables) / sizeof((coeff_token_vlc_tables)[0]))", "libavcodec/h264_cavlc.c", "mb_type %d in %c slice too large at %d %d\n", "Not enough data for an intra PCM block.\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "dquant out of range (%d) at %d %d\n", "co located POCs unavailable\n", "private_spspps_buf", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "SPS not present in the stream, nor in AVCC, stream may be unreadable\n", "PPS not present in the stream, nor in AVCC, stream may be unreadable\n", "h264_mp4toannexb", "AVC-parser: nal length size invalid\n", "AVC-parser: nal size %d remaining %d\n", "pps_id %u out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count %d overflow\n", "illegal memory management control operation %d\n", "missing picture in access unit with size %d\n", "!dst->f->buf[0]", "libavcodec/h264_picture.c", "src->f->buf[0]", "hardware accelerator failed to decode picture\n", "sl == h->slice_ctx", "cpb_count %d invalid\n", "PIC-AFF", "MB-AFF", "Truncating likely oversized SPS\n", "sps_id %u out of range\n", "chroma_format_idc %u", "separate color planes are not supported\n", "Different chroma and luma bit depth", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %d\n", "illegal POC type %d\n", "too many reference frames %d\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%d r:%d t:%d b:%d\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n", "Clipping illegal num_reorder_frames %d\n", "Overread %s by %d bits\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %d/%d b%d reo:%d\n", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "8x8DCT", "Truncating likely oversized PPS\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d\n", "FMO not supported\n", "reference overflow (pps)\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n", "remove short %d count %d\n", "%d %d %p\n", "index < def_len", "libavcodec/h264_refs.c", "short term list:\n", "%u fn:%d poc:%d %p\n", "long term list:\n", "len <= 32", "reference count overflow\n", "abs_diff_pic_num overflow\n", "long_term_pic_idx overflow\n", "illegal modification_of_pic_nums_idc %u\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(sl->ref_list[list][index].parent->f->buf[0]) > 0", "Discarding mismatching reference\n", "reference picture missing during reorder\n", "MMCO opcode [%d, %d] at %d mismatches between slices\n", "Inconsistent MMCO state between slices [%d, %d]\n", "no mmco here\n", "mmco:%d %d %d\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to short and long at the same time\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "illegal short term buffer state detected\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "illegal long ref in memory management control operation %d\n", "SEI %d len:%d\n", "SEI type %d size %d truncated at %d\n", "ct_type:%X pic_struct:%d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "sei_recovery_frame_cnt: %d\n", "non-existing SPS %d referenced in buffering period\n", "SEI FPA %d %d %d %d %d %d\n", "Green Metadata Info SEI message\n", "green_metadata_type                            = %d\n", "green_metadata_period_type                     = %d\n", "green_metadata_num_seconds                     = %d\n", "green_metadata_num_pictures                    = %d\n", "SEI GREEN Complexity Metrics                   = %f %f %f %f\n", "xsd_metric_type                                = %d\n", "xsd_metric_value                               = %f\n", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "Could not allocate memory\n", "VDPAU decoding does not support video colorspace.\n", "Unsupported bit depth %d\n", "too many threads/slices %d, reducing to %d\n", "context_init() failed.\n", "Attempt to start a frame outside SETUP state\n", "!pic->f->data[0]", "libavcodec/h264_slice.c", "!pic->hwaccel_picture_private", "no frame buffer available\n", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3)", "Slice overlaps with next at %d\n", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream %td\n", "error while decoding MB %d %d\n", "h264_slice_header_init() failed", " fix", " IDR", "TEMP", "SPAT", "!h->setup_finished", "Too many fields\n", "Cannot decode multiple access units as slice threads\n", "Broken frame packetizing\n", "slice type %d too large at %d\n", "A non-intra slice in an IDR NAL unit.\n", "PPS change from %d to %d forbidden\n", "PPS changed between slices\n", "SPS changed in the middle of the frame\n", "Delayed frames seen. Reenabling low delay requires a codec flush.\n", "h->sps.crop_right + h->sps.crop_left < (unsigned)h->width", "h->sps.crop_top + h->sps.crop_bottom < (unsigned)h->height", "Invalid cropped dimensions: %dx%d.\n", "Ignoring cropping information.\n", "changing width %d -> %d / height %d -> %d on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "Cannot (re-)initialize context during parallel decoding.\n", "Frame num change from %d to %d\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on slice %d\n", "h->cur_pic_ptr", "h->cur_pic_ptr->f->buf[0]", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "first_mb_in_slice overflow\n", "cabac_init_idc %u overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "Cannot parallelize slice decoding with deblocking filter type 1, decoding such frames in sequential order\nTo parallelize slice decoding you need video encoded with disable_deblocking_filter_idc set to 2 (deblock only edges that do not cross slices).\nSetting the flags2 libavcodec option to +fast (-flags2 +fast) will disable deblocking across slices and enable parallel slice decoding but will generate non-standard-compliant output.\n", "Deblocking switched inside frame.\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", "context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height", "bit_depth<=8", "libavcodec/h264dsp.c", "libavcodec/h264pred.c", "The cu_qp_delta %d is outside the valid range [%d, %d].\n", "cu_chroma_qp_offset_idx not yet tested.\n", "PPS id out of range: %d\n", "PPS changed between slices.\n", "Invalid slice segment address: %u.\n", "Unknown slice type: %d.\n", "Inter slices in an IRAP frame.\n", "Ignoring POC change between slices: %d -> %d\n", "No ref lists in the SPS.\n", "Too many refs: %d/%d.\n", "Zero refs for a frame with P or B slices.\n", "Invalid collocated_ref_idx: %d.\n", "luma_log2_weight_denom %d is invalid\n", "Invalid number of merging MVP candidates: %d.\n", "Independent slice segment missing.\n", "num_entry_point_offsets %d is invalid\n", "offset_len %d is invalid\n", "Failed to allocate memory\n", "too many slice_header_extension_data_bytes\n", "The slice_qp %d is outside the valid range [%d, 51].\n", "Impossible slice segment.\n", "Overread slice header by %d bits\n", "Invalid long term RPS.\n", "Error splitting the input into NAL units.\n", "Error constructing the frame RPS.\n", "Mastering Display Metadata:\n", "r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f)\n", "min_luminance=%f, max_luminance=%f\n", "First slice in a frame missing.\n", "Non-matching NAL types of the VCL NALUs: %d %d\n", "Error constructing the reference lists for the current slice.\n", "WPP ctb addresses are wrong (%d %d %d %d)\n", "entry_point_offset table is corrupted\n", "Skipping NAL unit %d\n", "Error parsing NAL unit #%d.\n", "buf_size >= 0", "libavcodec/bytestream.h", "Invalid NAL unit size in extradata.\n", "Decoding nal unit %d %d from hvcC failed\n", "Impossible initial tile.\n", "Previous slice segment missing\n", "Verifying checksum for frame with POC %d: ", "plane %d - correct ", "%02x", "mismatching checksum of plane %d - ", " != ", "HEVC (High Efficiency Video Coding)", "HEVC decoder", "apply_defdispwin", "Apply default display window from VUI", "strict-displaywin", "stricly apply default display window size", "CABAC_MAX_BIN : %d\n", "nal->skipped_bytes_pos_size >= nal->skipped_bytes", "libavcodec/hevc_parse.c", "Invalid NAL unit size.\n", "No start code is found.\n", "Invalid NAL unit %d, skipping.\n", "Invalid NAL unit: %d\n", "SPS id out of range: %d\n", "missing picture in access unit\n", "!(s->sps_list[id] && s->sps == (HEVCSPS*)s->sps_list[id]->data)", "libavcodec/hevc_ps.c", "PTL information too short\n", "Main profile bitstream\n", "Main 10 profile bitstream\n", "Main Still Picture profile bitstream\n", "Range Extension profile bitstream\n", "Unknown HEVC profile: %d\n", "Not enough data for sublayer %i level_idc\n", "PTL information for sublayer %i too short\n", "Invalid delta in scaling list data: %d.\n", "nb_cpb %d invalid\n", "Decoding VUI\n", "Unknown SAR index: %u.\n", "Invalid default display window\n", "discarding vui default display window, original values are l:%u r:%u t:%u b:%u\n", "Strange VUI timing information, retrying...\n", "Retry got %i/%i fps\n", "Invalid value of delta_idx in slice header RPS: %d > %d.\n", "Invalid value of abs_delta_rps: %d\n", "Too many refs in a short term RPS.\n", "Decoding VPS\n", "vps_reserved_three_2bits is not three\n", "vps_reserved_ffff_16bits is not 0xffff\n", "vps_max_sub_layers out of range: %d\n", "vps_max_dec_pic_buffering_minus1 out of range: %d\n", "vps_max_num_reorder_pics out of range: %d\n", "too many layer_id_included_flags\n", "vps_num_hrd_parameters %d is invalid\n", "Overread VPS by %d bits\n", "VPS %d does not exist\n", "sps_max_sub_layers out of range: %d\n", "chroma_format_idc %d is invalid\n", "discarding sps conformance window, original values are l:%u r:%u t:%u b:%u\n", "Luma bit depth (%d) is different from chroma bit depth (%d), this is unsupported.\n", "4:2:0, 4:2:2, 4:4:4 supports are currently specified for 8, 10 and 12 bits.\n", "chroma_format_idc is %d, depth is %d", "log2_max_pic_order_cnt_lsb_minus4 out range: %d\n", "sps_max_dec_pic_buffering_minus1 out of range: %d\n", "sps_max_num_reorder_pics out of range: %d\n", "Invalid value %d for log2_min_cb_size", "Invalid value %d for log2_diff_max_min_coding_block_size", "Invalid value for log2_min_tb_size", "Invalid value %d for log2_diff_max_min_transform_block_size", "PCM bit depth (%d) is greater than normal bit depth (%d)\n", "Too many short term RPS: %d.\n", "num_long_term_ref_pics_sps %d is out of range.\n", "extended_precision_processing_flag not yet implemented\n", "high_precision_offsets_enabled_flag not yet implemented\n", "cabac_bypass_alignment_enabled_flag not yet implemented\n", "Reducing left output window to %d chroma samples to preserve alignment.\n", "Invalid visible frame dimensions: %dx%d.\n", "Displaying the whole video surface.\n", "CTB size out of range: 2^%d\n", "log2_ctb_size %d differs from the bounds of any known profile\n", "log2_ctb_size %d", "Invalid coded frame dimensions.\n", "max_transform_hierarchy_depth_inter out of range: %d\n", "max_transform_hierarchy_depth_intra out of range: %d\n", "max transform block size out of range: %d\n", "Overread SPS by %d bits\n", "Decoding SPS\n", "Parsed SPS: id %d; coded wxh: %dx%d; cropped wxh: %dx%d; pix_fmt: %s.\n", "Decoding PPS\n", "SPS %u does not exist.\n", "diff_cu_qp_delta_depth %d is invalid\n", "pps_cb_qp_offset out of range: %d\n", "pps_cr_qp_offset out of range: %d\n", "num_tile_columns_minus1 out of range: %d\n", "num_tile_rows_minus1 out of range: %d\n", "Invalid tile widths.\n", "Invalid tile heights.\n", "pps_beta_offset_div2 out of range: %d\n", "pps_tc_offset_div2 out of range: %d\n", "log2_parallel_merge_level_minus2 out of range: %d\n", "chroma_qp_offset_list_len_minus1 shall be in the range [0, 5].\n", "cb_qp_offset_list not tested yet.\n", "Overread PPS by %d bits\n", "!frame->hwaccel_picture_private", "libavcodec/hevc_refs.c", "Error allocating frame, DPB full.\n", "Could not find ref with POC %d\n", "Duplicate POC in a sequence: %d.\n", "Zero refs in the frame RPS.\n", "Invalid reference index.\n", "Decoding SEI\n", "BOTTOM Field\n", "TOP Field\n", "Skipped PREFIX SEI %d\n", "num_sps_ids_minus1 %d invalid\n", "active_parameter_set_id %d invalid\n", "Skipped SUFFIX SEI %d\n", "Internal error, IDCT permutation not set\n", "desc", "libavcodec/imgconvert.c", "n <= 1024", "libavcodec/kbdwin.c", "No error", "Invalid handle", "Memory allocation error", "Unsupported parameter", "Invalid config", "Initialization error", "AAC library initialization error", "SBR library initialization error", "Transport library initialization error", "Metadata library initialization error", "Encoding error", "End of file", "Unknown error", "Unable to open the encoder: %s\n", "Unable to set the AOT %d: %s\n", "Unable to enable SBR for ELD: %s\n", "Unable to set the sample rate %d: %s\n", "Unsupported number of channels %d\n", "Unable to set channel mode %d: %s\n", "Unable to set wav channel order %d: %s\n", "VBR quality %d out of range, should be 1-5\n", "Note, the VBR setting is unsupported and only works with some parameter combinations\n", "Unable to set the VBR bitrate mode %d: %s\n", "Unable to set the bitrate %lld: %s\n", "Unable to set the transmux format: %s\n", "Unable to set header period: %s\n", "Unable to set signaling mode %d: %s\n", "Unable to set afterburner to %d: %s\n", "cutoff valid range is %d-20000\n", "Unable to set the encoder bandwidth to %d: %s\n", "Unable to initialize the encoder: %s\n", "Unable to get encoder info: %s\n", "Unable to encode frame: %s\n", "libfdk_aac", "Fraunhofer FDK AAC", "HE-AAC", "HE-AACv2", "afterburner", "Afterburner (improved quality)", "eld_sbr", "Enable SBR for ELD (for SBR in other configurations, use the -profile parameter)", "signaling", "SBR/PS signaling style", "default", "Choose signaling implicitly (explicit hierarchical by default, implicit if global header is disabled)", "implicit", "Implicit backwards compatible signaling", "explicit_sbr", "Explicit SBR, implicit PS signaling", "explicit_hierarchical", "Explicit hierarchical signaling", "latm", "Output LATM/LOAS encapsulated data", "header_period", "StreamMuxConfig and PCE repetition period (in frames)", "VBR mode (1-5)", "Not enough memory for closed captions, skipping\n", "Error: nal buffer is too small\n", "-qscale is ignored, -crf is recommended.\n", "Error setting preset/tune %s/%s.\n", "Possible presets:", "Possible tunes:", "weightp", "Error parsing option '%s' with value '%s'.\n", "level", "Failed to parse level\n", "psy-rd", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "Error setting profile %s.\n", "Possible profiles:", "%255[^:=]=%255[^:]", "bad option '%s': '%s'\n", "bad value for '%s': '%s'\n", "Error parsing option '%s = %s'.\n", "libx264rgb", "libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 RGB", "libx264", "libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "flags", "+cgop", "rc_init_occupancy", "preset", "Set the encoding preset (cf. x264 --fullhelp)", "medium", "tune", "Tune the encoding params (cf. x264 --fullhelp)", "profile", "Set profile restrictions (cf. x264 --fullhelp) ", "fastfirstpass", "Use fast settings when encoding first pass", "Specify level (as defined by Annex A)", "passlogfile", "Filename for 2 pass stats", "wpredp", "Weighted prediction for P-frames", "a53cc", "Use A53 Closed Captions (if available)", "x264opts", "x264 options", "Select the quality for constant quality mode", "crf_max", "In CRF mode, prevents VBV from lowering quality beyond this point.", "Constant quantization parameter rate control method", "aq-mode", "AQ method", "aq_mode", "none", "variance", "Variance AQ (complexity mask)", "autovariance", "Auto-variance AQ", "autovariance-biased", "Auto-variance AQ with bias to dark scenes", "aq-strength", "AQ strength. Reduces blocking and blurring in flat and textured areas.", "Use psychovisual optimizations.", "Strength of psychovisual optimization, in <psy-rd>:<psy-trellis> format.", "rc-lookahead", "Number of frames to look ahead for frametype and ratecontrol", "weightb", "Weighted prediction for B-frames.", "Weighted prediction analysis method.", "smart", "ssim", "Calculate and print SSIM stats.", "intra-refresh", "Use Periodic Intra Refresh instead of IDR frames.", "bluray-compat", "Bluray compatibility workarounds.", "b-bias", "Influences how often B-frames are used", "b-pyramid", "Keep some B-frames as references.", "b_pyramid", "strict", "Strictly hierarchical pyramid", "normal", "Non-strict (not Blu-ray compatible)", "mixed-refs", "One reference per partition, as opposed to one reference per macroblock", "8x8dct", "High profile 8x8 transform.", "fast-pskip", "Use access unit delimiters.", "mbtree", "Use macroblock tree ratecontrol.", "Loop filter parameters, in <alpha:beta> form.", "cplxblur", "Reduce fluctuations in QP (before curve compression)", "A comma-separated list of partitions to consider. Possible values: p8x8, p4x4, b8x8, i8x8, i4x4, none, all", "direct-pred", "Direct MV prediction mode", "spatial", "temporal", "slice-max-size", "Limit the size of each slice in bytes", "nal-hrd", "Signal HRD information (requires vbv-bufsize; cbr not allowed in .mp4)", "avcintra-class", "AVC-Intra class 50/100/200", "motion-est", "Set motion estimation method", "tesa", "forced-idr", "If forcing keyframes, force them as IDR frames.", "Coder type", "cavlc", "cabac", "Strategy to choose between I/P/B-frames", "chromaoffset", "QP difference between chroma and luma", "Scene change threshold", "noise_reduction", "Noise reduction", "x264-params", "Override the x264 configuration using a :-separated list of key=value parameters", "film", "animation", "grain", "stillimage", "psnr", "fastdecode", "zerolatency", "ultrafast", "superfast", "veryfast", "faster", "fast", "slow", "slower", "veryslow", "placebo", "internal error in cmp function selection\n", "MP3ADU full parser", "offset == (sizeof(huff_vlc_tables) / sizeof((huff_vlc_tables)[0]))", "libavcodec/mpegaudiodec_template.c", "Codec extradata missing or too short.\n", "Invalid channel config number.\n", "big_values too big\n", "invalid block type\n", "switch point in 8khz", "overread, skip %d enddists: %d %d\n", "bits_left=%d\n", "invalid old backstep %d\n", "invalid new backstep %d\n", "s->frame", "discarding ID3 tag\n", "Header missing\n", "incorrect frame size - multiple frames in buffer?\n", "Error while decoding MPEG audio frame.\n", "Packet is too small\n", "Invalid frame header\n", "Frame size smaller than header size\n", "Bad header, discard block\n", "frame channel count exceeds codec channel count\n", "failed to decode channel %d\n", "failed to decode all channels\n", "mp3on4float", "mp3adufloat", "mp3float", "NULL", "libavcodec/options.c", "Tried to copy AVCodecContext %p into already-initialized %p\n", "dest->subtitle_header_size == src->subtitle_header_size", "AVSubtitleRect", "type", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "channel_layout", "sample_rate", "AVCodecContext", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "qpel", "use 1/4-pel motion compensation", "loop", "use loop filter", "qscale", "use fixed qscale", "use gmc", "always try a mb with mv=<0,0>", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "pass2", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "error[?] variables will be set during encoding", "truncated", "Input bitstream might be randomly truncated", "normalize adaptive quantization", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "bitexact", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "cgop", "closed GOP", "output_corrupt", "Output even potentially corrupted frames", "allow non-spec-compliant speedup tricks", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "chunks", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "export_mvs", "export motion vectors through frame side data", "skip_manual", "do not skip samples and export skip information as frame side data", "set motion estimation method", "zero", "zero motion estimation (fastest)", "full", "full motion estimation (slowest)", "epzs", "EPZS motion estimation", "esa motion estimation (alias for full)", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter", "iter motion estimation", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "cutoff", "set cutoff bandwidth", "frame_size", "frame_number", "delay", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "video quantizer scale blur (VBR)", "minimum video quantizer scale (VBR)", "maximum video quantizer scale (VBR)", "maximum difference between the quantizer scales (VBR)", "set maximum number of B frames between non-B-frames", "QP factor between P- and B-frames", "rc_strategy", "ratecontrol method", "strategy to choose between I/P/B-frames", "RTP payload size in bytes", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "work around not autodetected encoder bugs", "autodetect", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "how strictly to follow the standards", "very", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "unofficial", "allow unofficial extensions", "experimental", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "err_detect", "set error detection flags", "crccheck", "verify embedded CRCs", "bitstream", "detect bitstream specification deviations", "buffer", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "ignore_err", "ignore errors", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "mpeg_quant", "use MPEG quantizers instead of H.263", "qsquish", "deprecated, use encoder private options instead", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maxrate", "maximum bitrate (in bits/s). Used for VBV together with bufsize.", "minrate", "minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "bufsize", "set ratecontrol buffer size (in bits)", "rc_buf_aggressivity", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "rc_init_cplx", "fast integer", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "deprecated, for compatibility only", "floating point AAN IDCT", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "use strong deblock filter for damaged MBs", "favor_inter", "favor predicting from the previous frame", "bits_per_coded_sample", "pred", "prediction method", "left", "plane", "median", "aspect", "sample aspect ratio", "debug", "print specific debug info", "pict", "picture info", "rate control", "mb_type", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "green_metadata", "skip", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "bugs", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "buffers", "picture buffer allocations", "thread_ops", "threading operations", "nomc", "skip motion compensation", "vismv", "visualize motion vectors (MVs) (deprecated)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "cmp_func", "subcmp", "sub-pel ME compare function", "mbcmp", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "dia_size", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "pre motion estimation", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast", "sum of squared errors", "satd", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "vsad", "sum of absolute vertical differences", "vsse", "sum of squared vertical differences", "nsse", "noise preserving sum of squared differences", "dctmax", "chroma", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "sub-pel motion estimation quality", "dtg_active_format", "limit motion vectors range (1023 for DivX player)", "ibias", "intra quant bias", "pbias", "inter quant bias", "global_quality", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate", "deflate-based coder", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp", "bits", "use fewest bits", "use best rate distortion", "stream_codec_tag", "scene change threshold", "lmin", "lmax", "noise reduction", "number of bits which should be loaded into the rc buffer before decoding starts", "error", "set the number of threads", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "unknown", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "lowres", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "skip_threshold", "frame skip threshold", "skip_factor", "frame skip factor", "skip_exp", "frame skip exponent", "skipcmp", "frame skip compare function", "border_mask", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "mepc", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "discard no frame", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "nointra", "discard all frames except I frames", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "brd_scale", "downscale frames for dynamic B-frame decision", "minimum interval between IDR-frames", "reference frames to consider for motion compensation", "chroma QP offset from luma", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "b_sensitivity", "adjust sensitivity of b_frame_strategy 1", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color primaries", "color_primaries_type", "bt709", "BT.709", "unspecified", "Unspecified", "bt470m", "BT.470 M", "bt470bg", "BT.470 BG", "smpte170m", "SMPTE 170 M", "smpte240m", "SMPTE 240 M", "Film", "bt2020", "BT.2020", "smpte428_1", "SMPTE ST 428-1", "color_trc", "color transfer characteristics", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log_sqrt", "Log square root", "iec61966_2_4", "IEC 61966-2-4", "bt1361", "BT.1361", "iec61966_2_1", "IEC 61966-2-1", "bt2020_10bit", "BT.2020 - 10 bit", "bt2020_12bit", "BT.2020 - 12 bit", "smpte2084", "SMPTE ST 2084", "colorspace", "color space", "colorspace_type", "ycocg", "YCOCG", "bt2020_ncl", "BT.2020 NCL", "bt2020_cl", "BT.2020 CL", "color_range", "color range", "color_range_type", "mpeg", "MPEG (219*2^(n-8))", "jpeg", "JPEG (2^n-1)", "chroma_sample_location", "chroma sample location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "Top-left", "bottomleft", "Bottom-left", "bottom", "Bottom", "log_level_offset", "set the log level offset", "slices", "set the number of slices, used in parallelized encoding", "select multithreading type", "slice", "frame", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Dialogue", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "refcounted_frames", "side_data_only_packets", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "dump_separator", "set information dump field separator", "codec_whitelist", "List of decoders that are allowed to be used", "pixel_format", "set pixel format", "video_size", "set video size", "index > -0x20000000", "libavcodec/parser.c", "Failed to reallocate parser buffer to %d\n", "Invalid sample_size\n", "Invalid number of channels\n", "codec ids mismatch\n", "Invalid PCM packet, data has size %d but at least a size of %d was expected\n", "PCM channels out of bounds\n", "Profile 0", "Profile 1", "Profile 2", "Profile 3", "Simple", "Main", "Complex", "Advanced", "Simple Profile", "Simple Scalable Profile", "Core Profile", "Main Profile", "N-bit Profile", "Scalable Texture Profile", "Simple Face Animation Profile", "Basic Animated Texture Profile", "Hybrid Profile", "Advanced Real Time Simple Profile", "Code Scalable Profile", "Advanced Coding Profile", "Advanced Core Profile", "Advanced Scalable Texture Profile", "Simple Studio Profile", "Advanced Simple Profile", "4:2:2", "High", "Spatially Scalable", "SNR Scalable", "Reserved", "JPEG 2000 codestream restriction 0", "JPEG 2000 codestream restriction 1", "JPEG 2000 no codestream restrictions", "JPEG 2000 digital cinema 2K", "JPEG 2000 digital cinema 4K", "Main 10", "Main Still Picture", "Rext", "Baseline", "Constrained Baseline", "Extended", "High 10", "High 10 Intra", "High 4:2:2", "High 4:2:2 Intra", "High 4:4:4", "High 4:4:4 Predictive", "High 4:4:4 Intra", "CAVLC 4:4:4", "DTS-ES", "DTS 96/24", "DTS-HD HRA", "DTS-HD MA", "DTS Express", "Application has requested %d threads. Using a thread count greater than %d is not recommended.\n", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "libavcodec/pthread_frame.c", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "A frame threaded decoder did not free the frame on failure. This is a bug, please report it.\n", "Final thread update failed\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "p->thread_count == avctx->thread_count", "libavcodec/pthread_slice.c", "audioresample", "Resampling with input channels greater than %d is unsupported.\n", "Unsupported audio resampling. Allowed output channels for %d input channel%s", "Can't allocate memory for resample context.\n", "Cannot convert %s sample format to s16 sample format\n", "Cannot convert s16 sample format to %s sample format\n", "Could not allocate buffer\n", "Audio sample format conversion failed\n", "ReSampleContext", "val || !min_size", "./libavutil/mem_internal.h", "Failed to set dimensions %d %d\n", "This decoder does not support parameter changes, but PARAM_CHANGE side data was sent to it.\n", "Invalid channel count", "Invalid sample rate", "PARAM_CHANGE side data too small.\n", "ignoring invalid SAR: %d/%d\n", "desc->flags & (1 << 4)", "libavcodec/utils.c", "pic->data[0]!=NULL in avcodec_default_get_buffer\n", "Unable to get pixel format descriptor for format %s\n", "default_get_buffer called on pic %p\n", "hevc goto fail\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "ignoring invalid SAR: %u/%u\n", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "video_get_buffer: image parameters invalid\n", "get_buffer() failed\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "reget_buffer() failed\n", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %lld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %lld)\n", "Failed to allocate packet of size %lld\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "avctx->codec->encode2", "Provided packet is too small, needs to be %d\n", "AVFrame.format is not set\n", "AVFrame.width or height is not set\n", "ret <= 0", "buffer smaller than minimum size\n", "start_display_time must be 0.\n", "Invalid media type for video\n", "Error applying parameter changes.\n", "!picture->extended_data || picture->extended_data == picture->data", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "ret <= tmp.size", "skip %d / discard %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "Invalid media type for subtitles\n", "requesting subtitles recoding without iconv", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "unknown_codec", "Codec 0x%x is not in the full list.\n", "[%d]", "--arch=arm --cpu=cortex-a8 --enable-neon --enable-thumb --enable-openssl --enable-libx264 --extra-cflags=-I/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/x264-armv7a/output/include --enable-libfdk_aac --extra-cflags=-I/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/fdk-aac-armv7a/output/include --extra-ldflags=-L/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/fdk-aac-armv7a/output/lib --extra-ldflags=-lfdk-aac --disable-nonfree --enable-runtime-cpudetect --disable-gray --disable-swscale-alpha --disable-programs --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --disable-avdevice --enable-avcodec --enable-avformat --enable-avutil --enable-swresample --enable-swscale --disable-postproc --enable-avfilter --disable-avresample --enable-network --disable-d3d11va --disable-dxva2 --disable-vaapi --disable-vda --disable-vdpau --disable-videotoolbox --disable-encoders --disable-decoders --enable-decoder=aac --enable-decoder=h264 --enable-decoder=hevc --enable-decoder='mp3*' --enable-decoder=pcm_s16le --disable-hwaccels --disable-muxers --enable-muxer=mp4 --enable-muxer=mov --enable-encoder=libx264 --enable-encoder=libfdk_aac --enable-encoder=pcm_s16le --disable-demuxers --enable-demuxer=aac --enable-demuxer=flv --enable-demuxer=hls --enable-demuxer=m4v --enable-demuxer=mov --enable-demuxer=mp3 --enable-demuxer=mpegts --enable-demuxer=hevc --enable-demuxer=mov --disable-parsers --enable-parser=aac --enable-parser=h264 --enable-parser=hevc --enable-bsfs --disable-bsf=chomp --disable-bsf=dca_core --disable-bsf=dump_extradata --disable-bsf=hevc_mp4toannexb --disable-bsf=imx_dump_header --disable-bsf=mjpeg2jpeg --disable-bsf=mjpega_dump_header --disable-bsf=mov2textsub --disable-bsf=mp3_header_decompress --disable-bsf=mpeg4_unpack_bframes --disable-bsf=noise --disable-bsf=remove_extradata --disable-bsf=text2movsub --disable-bsf=vp9_superframe --enable-bsf=h264_mp4toannexb --enable-protocols --disable-protocol=async --disable-protocol=bluray --disable-protocol=ffrtmpcrypt --disable-protocol=ffrtmphttp --disable-protocol=gopher --disable-protocol='librtmp*' --disable-protocol=mmsh --disable-protocol=mmst --disable-protocol='rtmp*' --enable-protocol=rtmp --disable-protocol=httpproxy --disable-protocol=udp --disable-protocol=rtp --disable-protocol=sctp --disable-protocol=srtp --disable-protocol=unix --disable-protocol=cache --disable-protocol=ftp --disable-protocol=concat --disable-protocol=icecast --disable-protocol=udplite --disable-protocol=md5 --disable-protocol=subfile --disable-protocol=pipe --disable-protocol=data --disable-devices --enable-filters --disable-iconv --disable-videotoolbox --prefix=/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/ffmpeg-armv7a/output --cross-prefix=arm-linux-androideabi- --enable-cross-compile --target-os=linux --enable-pic --enable-asm --enable-inline-asm --extra-cflags='-O3 -Wall -pipe -std=c99 -ffast-math -fstrict-aliasing -Werror=strict-aliasing -Wno-psabi -Wa,--noexecstack -DANDROID -DNDEBUG -I/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/include -march=armv7-a -mcpu=cortex-a8 -mfpu=vfpv3-d16 -mfloat-abi=softfp -mfpu=neon -mthumb' --extra-ldflags='-L/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/lib -lssl -lcrypto -L/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/x264-armv7a/output/lib -lx264 -Wl,--whole-archive -Wl,/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/fdk-aac-armv7a/output/lib/libfdk-aac.a -Wl,--no-whole-archive -lm -Wl,--fix-cortex-a8 -Wl,-Bsymbolic'", "libavcodec license: LGPL version 2.1 or later", "%s: %s", " (%s)", ", %d reference frame%s", " (%s / 0x%04X)", "%d bpc, ", "%s, ", "%s/%s/%s, ", "%dx%d", " (%dx%d)", " [SAR %d:%d DAR %d:%d]", ", %d/%d", ", q=%d-%d", ", Closed Captions", ", lossless", "%d Hz, ", ", %s", " (%d bit)", ", %dx%d", ", pass 1", ", pass 2", ", %lld kb/s", ", max. %lld kb/s", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "n >= 1", "Hardware accelerated decoding with frame threading is known to be unstable and its use is discouraged.\n", "Could not find an AVHWAccel for the pixel format: %s", "Ignoring experimental hwaccel: %s\n", "choices[n] != AV_PIX_FMT_NONE", "ff_avcodec_locked", "Insufficient thread locking. At least %d threads are calling avcodec_open2() at the same time right now.\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "!dst->progress", "encoder", "decoder", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Codec (%s) not on whitelist '%s'\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The maximum value for lowres supported by the decoder is %d\n", "The 'vismv' option is deprecated, see the codecview filter instead.\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Specified sample rate %d is not supported\n", "Channel layout not specified\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "Specified number of channels %d is not supported\n", "Specified bit depth %d not possible with the specified pixel formats depth %d\n", "dimensions not set\n", "Bitrate %lld is extremely low, maybe you mean %lldk\n", "ticks_per_frame %d too large for the timebase %d/%d.", "gray decoding requested but not enabled at configuration time\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "*(const AVClass **)avctx->priv_data == codec->priv_class", "Specified channel layout '%s' is not supported\n", "p <= end", "Invalid packet\n", "Invalid mode in packet\n", "Extradata corrupt.\n", "Id header is too short\n", "Wrong packet type in Id header\n", "Invalid packet signature in Id header\n", "Invalid framing bit in Id header\n", "Setup header is too short\n", "Wrong packet type in Setup header\n", "Invalid packet signature in Setup header\n", "Out of memory\n", "Invalid Setup header\n", "%d modes (either a false positive or a sample from an unknown encoder)", "Unsupported mode count: %d\n", "Vorbis parser", "Channels expressions list is empty\n", "aeval", "Mismatch between the specified number of channel expressions '%d' and the number of expected output channels '%d' for the specified channel layout\n", "same", "Invalid number of channels '%d' provided\n", "sample_rate:%d chlayout:%s duration:%lld\n", "Filter audio signal according to a specified expression.", "exprs", "set the '|'-separated list of channels expressions", "set channel layout", "aevalsrc", "Generate an audio signal generated by an expression.", "nb_samples", "set the number of samples per requested frame", "set the sample rate", "44100", "duration", "set audio duration", "nb_in_channels", "nb_out_channels", "Delay must be non negative number.\n", "At least one delay >0 must be specified.\n", "adelay", "Delay one or more audio channels.", "delays", "set list of delays for each channel", "Missing delays and/or decays.\n", "Number of delays %d differs from number of decays %d.\n", "At least one decay & delay must be set.\n", "delay[%d]: %f is out of allowed range: (0, 90000]\n", "decay[%d]: %f is out of allowed range: (0, 1]\n", "nb_echoes:%d\n", "Nothing to echo - missing delay samples.\n", "out_gain %f can cause saturation of output\n", "aecho", "Add echoing to the audio.", "in_gain", "set signal input gain", "out_gain", "set signal output gain", "set list of signal delays", "1000", "decays", "set list of signal decays", "aemphasis", "Audio emphasis.", "level_in", "set input gain", "level_out", "set output gain", "mode", "set filter mode", "reproduction", "production", "set filter type", "Columbia", "BSI (78RPM)", "riaa", "RIAA", "Compact Disc (CD)", "50fm", "75fm", "50kf", "75kf", "Inputs must have the same sample rate %d for in0 vs %d for in1\n", "acrossfade", "Cross fade two input audio streams.", "crossfade0", "crossfade1", "set number of samples for cross fade duration", "set cross fade duration", "overlap", "overlap 1st stream end with 2nd stream start", "curve1", "set fade curve type for 1st stream", "curve", "linear slope", "qsin", "quarter of sine wave", "esin", "exponential sine wave", "hsin", "half of sine wave", "logarithmic", "ipar", "inverted parabola", "quadratic", "cubic", "square root", "cubic root", "parabola", "exponential", "iqsin", "inverted quarter of sine wave", "ihsin", "inverted half of sine wave", "dese", "double-exponential seat", "desi", "double-exponential sigmoid", "curve2", "set fade curve type for 2nd stream", "afade", "Fade in/out input audio.", "set the fade direction", "fade-in", "fade-out", "start_sample", "set number of first sample to start fading", "set number of samples for fade duration", "start_time", "set time to start fading", "set fade duration", "set fade curve type", "afftfilt", "Apply arbitrary expressions to samples in frequency domain.", "real", "set channels real expressions", "imag", "set channels imaginary expressions", "win_size", "set window size", "w128", "w256", "w512", "w1024", "w2048", "w4096", "w8192", "w16384", "w32768", "w65536", "win_func", "set window function", "rect", "Rectangular", "bartlett", "Bartlett", "hann", "Hann", "hanning", "Hanning", "hamming", "Hamming", "sine", "Sine", "set window overlap", "This syntax is deprecated, use '|' to separate %s.\n", "sample format", "Error parsing sample format: %s.\n", "sample rate", "Error parsing sample rate: %s.\n", "channel layout", "Error parsing channel layout: %s.\n", "aformat", "Convert the input audio to one of the specified formats.", "sample_fmts", "A '|'-separated list of sample formats.", "sample_rates", "A '|'-separated list of sample rates.", "channel_layouts", "A '|'-separated list of channel layouts.", "No channel layout for input 1\n", "i < 2", "libavfilter/af_agate.c", "sidechaingate", "Audio sidechain gate.", "sidechain", "agate", "Audio gate.", "set input level", "range", "set max gain reduction", "threshold", "set threshold", "ratio", "set ratio", "attack", "set attack", "release", "set release", "makeup", "set makeup gain", "knee", "set knee", "detection", "set detection", "peak", "link", "set link", "average", "maximum", "level_sc", "set sidechain gain", "alimiter", "Audio lookahead limiter.", "set output level", "limit", "set limit", "enable asc", "asc_level", "set asc level", "auto level", "No channel layout for input %d\n", "Using \"%s\" for input %d\n", "Too many channels (max %d)\n", "Input channel layouts overlap: output layout will be determined by the number of distinct input channels\n", "in%d", "Inputs must have the same sample rate %d for in%d vs %d\n", " -> out:", "%sin%d:", "queue->available", "libavfilter/bufferqueue.h", "Buffer queue overflow, dropping.\n", "amerge", "Merge two or more audio streams into a single multi-channel stream.", "inputs", "specify the number of inputs", "input%d", "info", "libavfilter/af_amix.c", "unknown input link\n", "frame_list->end", "s->nb_inputs > 1", "s->frame_list->nb_frames > 0", "inputs:%d fmt:%s srate:%d cl:%s\n", "amix", "Audio mixing.", "Number of inputs.", "How to determine the end-of-stream.", "longest", "Duration of longest input.", "shortest", "Duration of shortest input.", "first", "Duration of first input.", "dropout_transition", "Transition time, in seconds, for volume renormalization when an input stream ends.", "out0", "out1", "change", "%d|f=%lf|w=%lf|g=%lf", "c%d f=%lf w=%lf g=%lf t=%d", "c%d f=%lf w=%lf g=%lf", "anequalizer", "Apply high-order audio parametric multi band equalizer.", "params", "curves", "draw frequency response curves", "size", "hd720", "mgain", "set max gain", "fscale", "set frequency scale", "colors", "set channels curves colors", "red|green|blue|yellow|orange|lime|pink|magenta|brown", "anull", "Pass the source unchanged to the output.", "padding n_out:%d pad_len_left:%lld\n", "outsamplesref->sample_rate == outlink->sample_rate", "libavfilter/af_apad.c", "outsamplesref->nb_samples == n_out", "n_out:%d whole_len_left:%lld\n", "Both whole and pad length are set, this is not possible\n", "apad", "Pad audio with silence.", "packet_size", "set silence packet size", "pad_len", "set number of samples of silence to add", "whole_len", "set minimum target number of samples in the audio stream", "channels > 0", "libavfilter/af_aphaser.c", "delay is too small\n", "in_gain may cause clipping\n", "out_gain may cause clipping\n", "aphaser", "Add a phasing effect to the audio.", "set delay in milliseconds", "decay", "set decay", "speed", "set modulation speed", "set modulation type", "triangular", "sinusoidal", "libavfilter/af_apulsator.c", "apulsator", "Audio pulsator.", "set mode", "triangle", "square", "sawup", "sawdown", "amount", "set modulation", "offset_l", "set offset L", "offset_r", "set offset R", "set pulse width", "timing", "set timing", "set BPM", "set ms", "set frequency", "outlink->sample_rate == out_rate", "libavfilter/af_aresample.c", "outlink->channel_layout == out_layout || !outlink->channel_layout", "outlink->format == out_format", "ch:%d chl:%s fmt:%s r:%dHz -> ch:%d chl:%s fmt:%s r:%dHz\n", "aresample", "Resample audio data.", "nb_out_samples:%d pad:%d\n", "No space for %d samples, stretching audio fifo\n", "Stretching audio fifo failed, discarded %d samples\n", "asetnsamples", "Set the number of samples for each output audio frames.", "nb_out_samples", "set the number of per-frame output samples", "pad last frame with zeros", "Time base is inaccurate\n", "asetrate", "Change the sample rate without altering the data.", "NOPTS", "%lld", "%.6g", "n:%lld pts:%s pts_time:%s pos:%lld fmt:%s channels:%d chlayout:%s rate:%d nb_samples:%d checksum:%08X ", "plane_checksums: [ ", "%08X ", "  side data - ", "matrix encoding: ", "invalid data", "Dolby Surround", "Dolby Pro Logic II", "Dolby Pro Logic IIx", "Dolby Pro Logic IIz", "Dolby EX", "Dolby Headphone", "downmix: ", "preferred downmix type - ", "Lo/Ro", "Lt/Rt", " Mix levels: center %f (%f ltrt) - surround %f (%f ltrt) - lfe %f", "replaygain: ", "%s - ", "track gain", "track peak", "album gain", "album peak", "audio service type: ", "unknown side data type: %d, size %d bytes", "ashowinfo", "Show textual information for each audio frame.", "Channel: %d\n", "DC offset: %f\n", "Min level: %f\n", "Max level: %f\n", "Min difference: %f\n", "Max difference: %f\n", "Mean difference: %f\n", "Peak level dB: %f\n", "RMS level dB: %f\n", "RMS peak dB: %f\n", "RMS trough dB: %f\n", "Crest factor: %f\n", "Flat factor: %f\n", "Peak count: %lld\n", "Bit depth: %u\n", "Overall\n", "Peak count: %f\n", "Number of samples: %lld\n", "lavfi.astats.%d.%s", "DC_offset", "Min_level", "Max_level", "Min_difference", "Max_difference", "Mean_difference", "Peak_level", "RMS_level", "RMS_peak", "RMS_trough", "Crest_factor", "Flat_factor", "Peak_count", "Bit_depth", "lavfi.astats.%s", "Overall.DC_offset", "Overall.Min_level", "Overall.Max_level", "Overall.Min_difference", "Overall.Max_difference", "Overall.Mean_difference", "Overall.Peak_level", "Overall.RMS_level", "Overall.RMS_peak", "Overall.RMS_trough", "Overall.Flat_factor", "Overall.Peak_count", "Overall.Bit_depth", "Overall.Number_of_samples", "astats", "Show time domain statistics about audio frames.", "length", "set the window length", "metadata", "inject metadata in the filtergraph", "reset", "recalculate stats after this many frames", "tempo", "Invalid tempo value '%s'\n", "Tempo value %f exceeds [0.5, 2.0] range\n", "start_here <= stop_here && frag->position[1] <= start_here && overlap <= frag->nsamples", "libavfilter/af_atempo.c", "read_size <= atempo->ring", "atempo->position[0] <= stop_here", "zeros != nsamples", "nsamples <= zeros + na + nb", "pot <= atempo->window", "start_here <= stop_here && frag->position[1] <= start_here", "atempo", "Adjust audio tempo.", "set tempo scale factor", "Invalid frequency %f and/or width %f <= 0\n", "Invalid frequency %f. Frequency must be less than half the sample-rate %d.\n", "libavfilter/af_biquads.c", "clipping %d times. Please reduce gain.\n", "biquad", "Apply a biquad IIR filter with the given coefficients.", "allpass", "Apply a two-pole all-pass filter.", "frequency", "set central frequency", "width_type", "set filter-width type", "Q-Factor", "octave", "slope", "set filter-width", "highpass", "Apply a high-pass filter with 3dB point frequency.", "set width", "poles", "set number of poles", "lowpass", "Apply a low-pass filter with 3dB point frequency.", "bandreject", "Apply a two-pole Butterworth band-reject filter.", "set band-width", "bandpass", "Apply a two-pole Butterworth band-pass filter.", "use constant skirt gain", "treble", "Boost or cut upper frequencies.", "set shelf transition steep", "gain", "set gain", "bass", "Boost or cut lower frequencies.", "equalizer", "Apply two-pole peaking equalization (EQ) filter.", "input channel '%s' not available from input layout '%s'\n", "input channel #%d not available from input layout '%s'\n", "%d%n", "This syntax is deprecated, use '|' to separate the mappings.\n", "Too many channels mapped: '%d'.\n", "Error parsing channel layout: '%s'.\n", "Output channel layout '%s' does not match the list of channel mapped: '%s'.\n", "Output channel layout %s does not match the number of channels mapped %d.\n", "Output channel layout is not set and cannot be guessed from the maps.\n", "channelmap", "Remap audio channels.", "A comma-separated list of input channel numbers in output order.", "Output channel layout.", "Error parsing channel layout '%s'.\n", "channelsplit", "Split audio into per-channel streams.", "Input channel layout.", "stereo", "Both delays & decays & speeds & depths must be set.\n", "Number of delays & decays & speeds & depths given must be same.\n", "At least one delay & decay & speed & depth must be set.\n", "output gain can cause saturation or clipping of output\n", "chorus", "Add a chorus effect to the audio.", "set delays", "set decays", "speeds", "set speeds", "depths", "set depths", "Invalid number of channels: %d\n", "Number of attacks/decays bigger than number of channels.\n", "Number of attacks %d differs from number of decays %d.\n", "%lf/%lf", "Invalid and/or missing input/output value.\n", "Transfer function input values must be increasing.\n", "%d: x=%f y=%f\n", "libavfilter/af_compand.c", "compand", "Compress or expand audio dynamic range.", "attacks", "set time over which increase of volume is determined", "set time over which decrease of volume is determined", "points", "set points of transfer function", "-70/-70|-60/-20", "soft-knee", "set soft-knee", "volume", "set initial volume", "set delay for samples before sending them to volume adjuster", "compensationdelay", "Audio Compensation Delay Line.", "set mm distance", "set cm distance", "set meter distance", "set dry amount", "set wet amount", "temp", "dcshift", "Apply a DC shift to the audio.", "shift", "set DC shift", "limitergain", "set limiter gain", "filter size %d is invalid. Must be an odd value.\n", "cqueue_size(s->gain_history_original[channel]) == s->filter_size", "libavfilter/af_dynaudnorm.c", "cqueue_size(s->gain_history_minimum[channel]) == s->filter_size", "./libavfilter/bufferqueue.h", "frame len %d\n", "dynaudnorm", "Dynamic Audio Normalizer.", "set the frame length in msec", "set the filter size", "set the peak value", "set the max amplification", "set the target RMS", "set channel coupling", "set DC correction", "set alternative boundary mode", "set the compress factor", "earwax", "Widen the stereo image.", "extrastereo", "Increase difference between stereo audio channels.", "set the difference coefficient", "enable clipping", "flanger", "Apply a flanging effect to the audio.", "base delay in milliseconds", "depth", "added swept delay in milliseconds", "regen", "percentage regeneration (delayed signal feedback)", "percentage of delayed signal mixed with original", "sweeps per second (Hz)", "shape", "swept wave shape", "phase", "swept wave percentage phase-shift for multi-channel", "interp", "delay-line interpolation", "itype", "i < ctx->nb_inputs", "libavfilter/af_join.c", "!s->input_frames[i]", "Missing separator '-' in channel map '%s'\n", "Invalid output channel: %s.\n", "Channel map describes more than one output channel.\n", "Output channel '%s' is not present in requested channel layout.\n", "Multiple maps for output channel '%s'.\n", "Invalid input stream index: %d.\n", "Invalid input channel: %s.\n", "Channel map describes more than one input channel.\n", "Requested channel %s is not present in input stream #%d.\n", "mappings: ", "Could not find input channel for output channel '%s'.\n", "%d.%s => %s ", "No channels are used from input stream %d.\n", "join", "Join multiple audio streams into multi-channel output.", "Number of input streams.", "Channel layout of the output stream.", "A comma-separated list of channels maps in the format 'input_stream.input_channel-output_channel.", "%7[A-Z]%n", "c%d%n", "pan filter needs a channel layout and a set of channels definitions as parameter\n", "Expected out channel name, got \"%.8s\"\n", "Channel \"%.8s\" does not exist in the chosen layout\n", "Invalid out channel name \"%.8s\"\n", "Syntax error after channel name in \"%.8s\"\n", "%lf%n *%n", "Expected in channel name, got \"%.8s\"\n", "Can not mix named and numbered channels\n", "Syntax error near \"%.8s\"\n", "af_pan support a maximum of %d channels. Feel free to ask for a higher limit.\n", "Degenerate coefficients while renormalizing\n", "%s%.3g i%d", "o%d = %s\n", "Pure channel mapping detected:", "Remix channels with coefficients (panning).", "args", "track_gain = %+.2f dB\n", "track_peak = %.6f\n", "i < (sizeof(freqinfos) / sizeof((freqinfos)[0]))", "libavfilter/af_replaygain.c", "replaygain", "ReplayGain scanner.", "libavfilter/af_sidechaincompress.c", "acompressor", "Audio compressor.", "sidechaincompress", "Sidechain compressor.", "set make up gain", "set link type", "set mix", "lavfi.silence_start", "silence_start: %s\n", "lavfi.silence_end", "lavfi.silence_duration", "silence_end: %s | silence_duration: %s\n", "silencedetect", "Detect silence.", "set noise tolerance", "noise", "set minimum duration in seconds", "silenceremove", "Remove silence.", "start_periods", "start_duration", "start_threshold", "stop_periods", "stop_duration", "stop_threshold", "leave_silence", "window", "sample rate is too small\n", "stereotools", "Apply various stereo tools.", "set level in", "set level out", "balance_in", "set balance in", "balance_out", "set balance out", "softclip", "enable softclip", "mutel", "mute L", "muter", "mute R", "phasel", "phase L", "phaser", "phase R", "set stereo mode", "lr>lr", "lr>ms", "ms>lr", "lr>ll", "lr>rr", "lr>l+r", "lr>rl", "slev", "set side level", "sbal", "set side balance", "mlev", "set middle level", "mpan", "set middle pan", "base", "set stereo base", "set delay", "sclevel", "set S/C level", "set stereo phase", "stereowiden", "Apply stereo widening effect.", "set delay time", "feedback", "set feedback gain", "crossfeed", "set cross feed", "drymix", "set dry-mix", "tremolo", "Apply tremolo effect.", "set frequency in hertz", "set depth as percentage", "vibrato", "Apply vibrato effect.", "Error when evaluating the volume expression '%s'\n", "n:%f t:%f pts:%f precision:%s ", "volume_i:%d/255 ", "volume:%f volume_dB:%f\n", "tb:%f sample_rate:%f nb_channels:%f\n", "Both ReplayGain gain values are unknown.\n", "Using gain %f dB from replaygain side data.\n", "Change input volume.", "set volume adjustment expression", "precision", "select mathematical precision", "fixed", "select 8-bit fixed-point", "float", "select 32-bit floating-point", "double", "select 64-bit floating-point", "eval", "specify when to evaluate expressions", "once", "eval volume expression once", "eval volume expression per-frame", "Apply replaygain side data when present", "drop", "replaygain side data is dropped", "ignore", "replaygain side data is ignored", "track", "track gain is preferred", "album", "album gain is preferred", "replaygain_preamp", "Apply replaygain pre-amplification", "replaygain_noclip", "Apply replaygain clipping prevention", "nb_channels", "nb_consumed_samples", "startpts", "startt", "n_samples: %lld\n", "power <= 0x8000 * 0x8000", "libavfilter/af_volumedetect.c", "mean_volume: %.1f dB\n", "max_volume: %.1f dB\n", "histogram_%ddb: %lld\n", "volumedetect", "Detect audio volume.", "anullsink", "Do absolutely nothing with the input audio.", "anoisesrc", "Generate a noise audio signal.", "set sample rate", "amplitude", "set amplitude", "set duration", "color", "set noise color", "colour", "white", "pink", "brown", "seed", "set random seed", "sample_rate:%d channel_layout:'%s' nb_samples:%d\n", "anullsrc", "Null audio source, return empty audio frames.", "set channel_layout", "nb samples expression evaluated to %d, defaulting to 1024\n", "Generate sine wave audio signal.", "set the sine frequency", "beep_factor", "set the beep frequency factor", "set the audio duration", "samples_per_frame", "set the number of samples per frame", "1024", "channels == av_get_channel_layout_nb_channels(link->channel_layout) || !av_get_channel_layout_nb_channels(link->channel_layout)", "libavfilter/audio.c", "libavfilter/avf_ahistogram.c", "ahistogram", "Convert input audio to histogram video output.", "dmode", "set method to display channels", "single", "all channels use single histogram", "separate", "each channel have own histogram", "rate", "set video rate", "scale", "set display scale", "sqrt", "cbrt", "rlog", "reverse logarithmic", "ascale", "set amplitude scale", "acount", "how much frames to accumulate", "rheight", "set histogram ratio of window height", "slide", "set sonogram sliding", "replace", "replace old rows with new", "scroll", "scroll from top to bottom", "lavfi.aphasemeter.phase", "aphasemeter", "Convert input audio to phase meter video output.", "800x400", "set red contrast", "set green contrast", "set blue contrast", "set median phase color", "libavfilter/avf_avectorscope.c", "avectorscope", "Convert input audio to vectorscope video output.", "lissajous", "lissajous_xy", "polar", "400x400", "set alpha contrast", "set red fade", "set green fade", "set blue fade", "set alpha fade", "zoom", "set zoom factor", "draw", "set draw mode", "line", "Input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding output link %s parameters (%dx%d, SAR %d:%d)\n", "in%d:%c%d", "out:%c%d", "EOF on %s, %d streams left in segment.\n", "Segment finished at pts=%lld\n", "Frame after EOF on input %s\n", "concat", "Concatenate audio and video streams.", "specify the number of segments", "specify the number of video streams", "specify the number of audio streams", "unsafe", "enable unsafe mode", "fullhd option is deprecated, use size/s option instead.\n", "fullhd set to 0 but with custom dimension.\n", "invalid dimension.\n", "font axis rendering is not implemented in non-default frequency range, please use axisfile option instead.\n", "freetype is not available, ignoring fontfile option.\n", "EF G A BC D ", "video: %dx%d %s %d/%d fps, bar_h = %d, axis_h = %d, sono_h = %d.\n", "fft_len = %d, cqt_len = %d.\n", "[%d] %s is too low (%g), setting it to %g.\n", "sono_v", "[%d] %s it too high (%g), setting it to %g.\n", "bar_v", "tlength", "nb_cqt_coeffs = %d.\n", "nb_cqt_coeffs = {%d,%d}.\n", "loading axis image failed, fallback to font rendering.\n", "loading axis font failed, disable text drawing.\n", "audio: %d Hz, step = %d + %d/%d.\n", "fractional step.\n", "audio: %d Hz, step = %d.\n", "midi", "timeclamp", "freq", "a_weighting", "b_weighting", "c_weighting", "showcqt", "Convert input audio to a CQT (Constant/Clamped Q Transform) spectrum video output.", "1920x1080", "bar_h", "set bargraph height", "axis_h", "set axis height", "sono_h", "set sonogram height", "fullhd", "set fullhd size", "set sonogram volume", "set bargraph volume", "volume2", "sono_g", "set sonogram gamma", "gamma", "bar_g", "set bargraph gamma", "gamma2", "set timeclamp", "basefreq", "set base frequency", "endfreq", "set end frequency", "coeffclamp", "set coeffclamp", "set tlength", "384*tc/(384+tc*f)", "count", "set transform count", "fcount", "set frequency count", "fontfile", "set axis font", "fontcolor", "set font color", "st(0, (midi(f)-59.5)/12);st(1, if(between(ld(0),0,1), 0.5-0.5*cos(2*PI*ld(0)), 0));r(1-ld(1)) + b(ld(1))", "axisfile", "set axis image", "axis", "draw axis", "Unable to create FFT context. The window size might be too high.\n", "overlap %f too big\n", "libavfilter/avf_showfreqs.c", "showfreqs", "Convert input audio to a frequencies video output.", "1024x512", "set display mode", "show lines", "show bars", "show dots", "blackman", "Blackman", "welch", "Welch", "flattop", "Flat-top", "bharris", "Blackman-Harris", "bnuttall", "Blackman-Nuttall", "bhann", "Bartlett-Hann", "nuttall", "Nuttall", "lanczos", "Lanczos", "gauss", "Gauss", "tukey", "Tukey", "averaging", "set time averaging", "set channels colors", "cmode", "set channel mode", "combined", "show all channels in same window", "show each channel in own window", "showspectrumpic", "s:%dx%d FFT window size:%d\n", "libavfilter/avf_showspectrum.c", "fin->nb_samples == s->win_size", "CREATED BY LIBAVFILTER", "FREQUENCY (Hz)", "TIME", "%.2f", "%.2fh", "%.2fm", "%.2fs", "Convert input audio to a spectrum video output single picture.", "4096x2048", "set channel display mode", "combined mode", "separate mode", "set channel coloring", "channel", "separate color for each channel", "intensity", "intensity based coloring", "rainbow", "rainbow based coloring", "moreland", "moreland based coloring", "nebulae", "nebulae based coloring", "fire", "fire based coloring", "fiery", "fiery based coloring", "fruit", "fruit based coloring", "cool", "cool based coloring", "4thrt", "4th root", "5thrt", "5th root", "saturation", "color saturation multiplier", "orientation", "set orientation", "vertical", "horizontal", "set scale gain", "legend", "draw legend", "showspectrum", "Convert input audio to a spectrum video output.", "640x512", "set sliding mode", "replace old columns with new", "scroll from right to left", "rscroll", "scroll from left to right", "fullframe", "return full frames", "data", "set data mode", "magnitude", "showvolume", "Convert input audio volume to video output.", "set border width", "set channel width", "set channel height", "set fade", "set volume color expression", "if(gte(VOLUME,-6), if(gte(VOLUME,-2), if(gte(VOLUME,-1), if(gt(VOLUME,0), 0xff0000ff, 0xff0066ff), 0xff00ffff),0xff00ff00),0xffff0000)", "display channel names", "display volume value", "VOLUME", "CHANNEL", "showwavespic", "Could not allocate showwaves buffer\n", "s:%dx%d r:%f n:%d\n", "Too few samples\n", "Create frame averaging %lld samples per column\n", "col < outlink->w", "libavfilter/avf_showwaves.c", "Convert input audio to a video output single picture.", "600x240", "split_channels", "draw channels separately", "showwaves", "Convert input audio to a video output.", "select display mode", "point", "draw a point for each sample", "draw a line for each sample", "draw a line between samples", "cline", "draw a centered line for each sample", "set how many samples to show in the same point", "Timeline ('enable' option) not supported with filter '%s'\n", "Error when evaluating the expression '%s' for enable\n", "No option name near '%s'\n", "Unable to parse '%s': %s\n", "Setting '%s' to value '%s'\n", "Option '%s' not found\n", "libavfilter license: LGPL version 2.1 or later", "Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\n", "auto-inserting filter '%s' between the filter '%s' and the filter '%s'\n", "Not all input and output are properly linked (%d).\n", "circular filter chain detected\n", "Source filters and filters with more than one input must set config_props() callbacks on all outputs\n", "Failed to configure output pad on %s\n", "Video source filters must set their output link's width and height\n", "Failed to configure input pad on %s\n", "ping", "enable", "pong from:%s %s\n", "Copying data in avfilter.\n", "Processing command time:%f command:%s arg:%s\n", "(filter->flags & ((1 << 16) | (1 << 17))) != ((1 << 16) | (1 << 17))", "libavfilter/avfilter.c", "Error applying generic filter options.\n", "Error applying options to the filter.\n", "This filter does not take any options, but options were provided: %s.\n", "noformat", "frei0r", "frei0r_src", "This syntax is deprecated. Use '|' to separate the list items.\n", "compat: called with args=[%s]\n", "No such option: %s.\n", "Format change is not supported\n", "Channel count change is not supported\n", "Channel layout change is not supported\n", "Sample rate change is not supported\n", "Samples dropped due to memory allocation failure.\n", "AVFilter", "Allowed thread types", "set enable expression", "index >= 0", "libavfilter/avfiltergraph.c", "Query format failed for '%s': %s\n", "All layouts set on non-empty list\n", "All counts without all layouts\n", "Cannot select sample rate for the link between filters %s and %s.\n", "Cannot select channel layout for the link between filters %s and %s.\n", "Unknown channel layouts not supported, try specifying a channel layout using 'aformat=channel_layouts=something'.\n", "Error initializing threading.\n", "'scale' filter not present, cannot convert pixel formats.\n", "auto-inserted scaler %d", "'aresample' filter not present, cannot convert audio formats.\n", "auto-inserted resampler %d", "inlink-> in_formats->refcount > 0", "inlink->out_formats->refcount > 0", "outlink-> in_formats->refcount > 0", "outlink->out_formats->refcount > 0", "inlink-> in_samplerates->refcount > 0", "inlink->out_samplerates->refcount > 0", "outlink-> in_samplerates->refcount > 0", "outlink->out_samplerates->refcount > 0", "inlink-> in_channel_layouts->refcount > 0", "inlink->out_channel_layouts->refcount > 0", "outlink-> in_channel_layouts->refcount > 0", "outlink->out_channel_layouts->refcount > 0", "Impossible to convert between the formats supported by the filter '%s' and the filter '%s'\n", "query_formats: %d queried, %d merged, %d already done, %d delayed\n", "The following filters could not choose their formats: %s\nConsider inserting the (a)format filter near their input or output.\n", "%s%s", "Input pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any source\n", "Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n", "fifo", "afifo", "auto-inserted fifo %d", "query_formats not finished\n", "best_idx >= 0", "picking %s out of %d ref:%s alpha:%d\n", "picking %s out of %d ref:%s\n", "n == sink_links_count", "Useless run of a filter graph\n", "EOF on sink link %s:%s.\n", "AVFilterGraph", "Maximum number of threads", "scale_sws_opts", "default scale filter options", "aresample_swr_opts", "default aresample filter options", "Invalid size for pixel_fmts: %d, should be multiple of %d\n", "Cannot buffer more frames. Consume some available frames before adding new ones.\n", "%d buffers queued in %s, something may be wrong.\n", "Invalid size for sample_fmts: %d, should be multiple of %d\n", "Invalid size for sample_rates: %d, should be multiple of %d\n", "Invalid size for channel_layouts: %d, should be multiple of %d\n", "Invalid size for channel_counts: %d, should be multiple of %d\n", "Conflicting all_channel_counts and list in options\n", "Failed to allocate fifo\n", "pix_fmts", "channel_counts", "all_channel_counts", "buffersink", "ffbuffersink", "!strcmp(ctx->filter->name, \"buffersink\") || !strcmp(ctx->filter->name, \"ffbuffersink\")", "libavfilter/buffersink.c", "abuffersink", "Buffer audio frames, and make them available to the end of the filter graph.", "Buffer video frames, and make them available to the end of the filter graph.", "set the supported sample formats", "set the supported sample rates", "set the supported channel layouts", "set the supported channel counts", "accept all channel counts", "set the supported pixel formats", "Changing frame properties on the fly is not supported by all filters.\n", "Changing frame properties on the fly is not supported.\n", "Invalid parameters provided.\n", "w:%d h:%d pixfmt:%s tb:%d/%d fr:%d/%d sar:%d/%d sws_param:%s\n", "Sample format was not set or was invalid\n", "Invalid channel layout %s.\n", "Mismatching channel count %d and layout '%s' (%d channels)\n", "Neither number of channels nor channel layout specified\n", "tb:%d/%d samplefmt:%s samplerate:%d chlayout:%s\n", "Layout indicates a different number of channels than actually present\n", "abuffer", "Buffer audio frames, and make them accessible to the filterchain.", "Buffer video frames, and make them accessible to the filterchain.", "sample_fmt", "channels", "pix_fmt", "time_base_num", "deprecated, do not use", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "pix_desc", "libavfilter/drawutils.c", "Color conversion not implemented for %s\n", "mainpic", "libavfilter/dualinput.c", "max is same or lower than min\n", "adrawgraph", "Draw a graph using input audio metadata.", "drawgraph", "Draw a graph using input video metadata.", "set 1st metadata key", "set 1st foreground color expression", "0xffff0000", "set 2nd metadata key", "set 2nd foreground color expression", "0xff00ff00", "set 3rd metadata key", "set 3rd foreground color expression", "0xffff00ff", "set 4th metadata key", "set 4th foreground color expression", "0xffffff00", "set background color", "set minimal value", "set maximal value", "set graph mode", "draw bars", "draw dots", "draw lines", "set slide mode", "draw new frames", "set graph size", "900x256", "Parameters for input link %s (size %dx%d, SAR %d:%d) do not match the corresponding output link parameters (%dx%d, SAR %d:%d)\n", "libavfilter/f_interleave.c", "queue:%d -> frame time:%f\n", "NOPTS value for input frame cannot be accepted, frame discarded\n", "frame pts:%f -> queue idx:%d available:%d\n", "ainterleave", "Temporally interleave audio inputs.", "nb_inputs", "set number of inputs", "interleave", "Temporally interleave video inputs.", "Metadata key must be set\n", "Missing metadata value\n", "libavfilter/f_metadata.c", "expr option not set\n", "Error while parsing expression '%s'\n", "Could not open file %s: %s\n", "frame %lld pts %lld\n", "%s=%s\n", "Manipulate video frame metadata.", "set a mode of operation", "select", "select frame", "add new metadata", "modify", "modify metadata", "delete", "delete metadata", "print", "print metadata", "set metadata key", "value", "set metadata value", "function", "function for comparing values", "same_str", "starts_with", "less", "equal", "greater", "expr", "set expression for expr function", "file", "set file where to print metadata information", "ametadata", "Manipulate audio frame metadata.", "VALUE1", "VALUE2", "random seed: 0x%08x\n", " (no-op)", "%s -> %s%s\n", "perms", "Set permissions for the output video frame.", "aperms", "Set permissions for the output audio frame.", "select permissions mode", "do nothing", "set all output frames read-only", "set all output frames writable", "toggle", "switch permissions", "random", "set permissions randomly", "set the seed for the random mode", "time discontinuity detected: %lli us, resetting\n", "sleeping %lli us\n", "arealtime", "Slow down filtering to match realtime.", "realtime", "sleep time limit", "areverse", "Reverse an audio clip.", "reverse", "Reverse a clip.", "scene", "output%d", "Scene detection is ignored in aselect filter\n", "lavf.concatdec.start_time", "lavf.concatdec.duration", "lavfi.scene_score", "n:%f pts:%f t:%f key:%d", " interlace_type:%c pict_type:%c scene:%f", " samples_n:%d consumed_samples_n:%f", " -> select:%f select_out:%d\n", "Select video frames to pass in output.", "set an expression to use for selecting frames", "outputs", "set the number of outputs", "aselect", "Select audio frames to pass in output.", "start_pts", "prev_pts", "prev_selected_pts", "start_t", "prev_t", "prev_selected_t", "pict_type", "PICT_TYPE_I", "PICT_TYPE_P", "PICT_TYPE_B", "PICT_TYPE_S", "PICT_TYPE_SI", "PICT_TYPE_SP", "PICT_TYPE_BI", "interlace_type", "PROGRESSIVE", "TOPFIRST", "BOTTOMFIRST", "consumed_samples_n", "samples_n", "selected_n", "prev_selected_n", "concatdec_select", "enter", "leave", "One and only one of the filename or commands options must be specified\n", " \f\t\n\r", " \f\t\n\r,;", "Invalid start time specification '%s' in interval #%d\n", "Invalid end time specification '%s' in interval #%d\n", "Invalid end time '%s' in interval #%d: cannot be lesser than start time '%s'\n", "Unknown flag '%s' in interval #%d, command #%d\n", "Invalid flags char '%c' in interval #%d, command #%d\n", "Missing flag terminator or extraneous data found at the end of flags in interval #%d, command #%d\n", "No target specified in interval #%d, command #%d\n", "No command specified in interval #%d, command #%d\n", "Could not (re)allocate command array\n", "Missing separator or extraneous data found at the end of interval #%d, in command #%d\n", "Command was parsed as: flags:[%s] target:%s command:%s arg:%s\n", "No interval specified for interval #%d\n", "Missing terminator or extraneous data found at the end of interval #%d\n", "Could not (re)allocate intervals array\n", "No commands were specified\n", "Parsed commands:\n", "start_time:%f end_time:%f index:%d\n", "    [%s] target:%s command:%s arg:%s index:%d\n", "[%s] interval #%d start_ts:%f end_ts:%f ts:%f\n", "Processing command #%d target:%s command:%s arg:%s\n", "Command reply for command #%d: ret:%s res:%s\n", "asendcmd", "Send commands to filters.", "sendcmd", "commands", "set commands", "filename", "set commands file", "mapping definition is not set\n", "n=%d map=%p p=%p\n", "Unable to map more than the %d input pads available\n", "Input stream index %d doesn't exist (there is only %d input streams defined)\n", "Map input stream %d to output stream %d\n", "invalid mapping\n", "%d map set\n", "config output link %d with settings from input link %d\n", "%sput%d", "Add %s pad %s\n", "astreamselect", "Configured with %d inpad and %d outpad\n", "Select audio streams", "streamselect", "Select video streams", "number of input streams", "input indexes to remap to outputs", "frame->nb_samples > offset", "libavfilter/fifo.c", "request_samples changed before the buffer was returned.\n", "Buffer input frames and send them when they are requested.", "Buffer input images and send them when they are requested.", "Duplicate formats in avfilter_merge_formats() detected\n", "Invalid pixel format '%s'\n", "Invalid sample format '%s'\n", "Invalid time base '%s'\n", "Invalid sample rate '%s'\n", "Invalid channel layout '%s'\n", "frame->data[1] != ((void *)0)", "libavfilter/framepool.c", "framesync", "level <= fs->sync_level", "libavfilter/framesync.c", "Impossible to set time base\n", "Selected %d/%d time base\n", "Sync level %u\n", "!fs->frame_ready", "fs->on_event", "libavfilter/generate_wave_table.c", "[%dx%d %d:%d %s]", "[%dHz %s:%s]", "%s:%s", "%*s%-*s", "%*s(%s)%*s", "=,;[\n", "[],;\n", "Parsed_%s_%d", "No such filter: '%s'\n", "Error creating filter '%s'\n", "Error initializing filter '%s'", " with args '%s'", "Cannot create the link %s:%d -> %s:%d\n", "Too many inputs specified for the \"%s\" filter.\n", "Bad (empty?) label found in the following: \"%s\".\n", "Mismatched '[' found in the following: \"%s\".\n", "No output pad can be associated to link label '%s'.\n", "sws_flags=", "sws_flags not terminated with ';'.\n", "Unable to parse graph description substring: \"%s\"\n", "Not enough inputs specified for the \"%s\" filter.\n", "Invalid filterchain containing an unlabelled output pad: \"%s\"\n", "[in]", "[out]", "image2", "Failed to open input file '%s'\n", "Find stream info failed\n", "Failed to find codec\n", "Failed to open codec\n", "Failed to alloc frame\n", "Failed to read frame from file\n", "Failed to decode image from file\n", "Error loading image file '%s'\n", "Impossible to create scale context for the conversion fmt:%s s:%dx%d -> fmt:%s s:%dx%d\n", "TB:%f FRAME_RATE:%f SAMPLE_RATE:%f\n", "N:%lld PTS:%s T:%f POS:%s", " INTERLACED:%lld", " NB_SAMPLES:%lld NB_CONSUMED_SAMPLES:%lld", " -> PTS:%s T:%f\n", "asetpts", "Set PTS for the output audio frame.", "setpts", "Set PTS for the output video frame.", "Expression determining the frame timestamp", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "Invalid expression '%s' for timebase.\n", "Invalid non-positive values for the timebase num:%d or den:%d.\n", "tb:%d/%d -> tb:%d/%d\n", "tb:%d/%d pts:%lld -> tb:%d/%d pts:%lld\n", "asettb", "Set timebase for the audio output link.", "set expression determining the output timebase", "intb", "settb", "Set timebase for the video output link.", "AVTB", "asplit", "Pass on the audio input to N audio outputs.", "split", "Pass on the input to N video outputs.", "set number of outputs", "Stream finished, looping.\n", "Unable to loop: %s\n", "Decode error: %s\n", "Format changed %s -> %s, discarding frame\n", "matched only already used streams", "did not match any stream", "No filename provided!\n", "amovie", "d%c%d", "Loop with several streams is currently unsupported\n", "Failed to avformat_open_input '%s'\n", "Failed to find stream info\n", "%s: seek value overflow with start_time:%lld seek_point:%lld\n", "%s: could not seek to position %lld\n", "d%1[av]%d%c", "No %s stream with index '%d' found\n", "Invalid stream specifier \"%s\"\n", "Ambiguous stream specifier \"%s\", using #%d\n", "Stream specifier \"%s\" %s\n", "Stream specifier \"%s\" matched a %s stream,currently unsupported by libavfilter\n", "out%d", "Failed to find any codec\n", "Channel layout is not set in stream %d, and could not be guessed from the number of channels (%d)\n", "Channel layout is not set in output stream %d, guessed channel layout is '%s'\n", "seek_point:%lli format_name:%s file_name:%s stream_index:%d\n", "Read audio from a movie source.", "movie", "Read from a movie source.", "format_name", "set format name", "stream_index", "set stream index", "seek_point", "set seekpoint (seconds)", "streams", "set streams", "set loop count", "start_sample < end_sample || (start_sample == end_sample && !frame->nb_samples)", "libavfilter/trim.c", "atrim", "Pick one continuous section from the input, drop the rest.", "starti", "Timestamp of the first frame that should be passed", "endi", "Timestamp of the first frame that should be dropped again", "Timestamp of the first frame that should be  passed", "end_pts", "durationi", "Maximum duration of the output", "Number of the first audio sample that should be passed to the output", "end_sample", "Number of the first audio sample that should be dropped again", "start", "Timestamp in seconds of the first frame that should be passed", "Timestamp in seconds of the first frame that should be dropped again", "Maximum duration of the output in seconds", "trim", "start_frame", "Number of the first frame that should be passed to the output", "end_frame", "Number of the first frame that should be dropped again", "libavfilter/vaf_spectrumsynth.c", "Magnitude and Phase sizes differ (%dx%d vs %dx%d).\n", "Magnitude and Phase time bases differ (%d/%d vs %d/%d).\n", "Magnitude and Phase framerates differ (%d/%d vs %d/%d).\n", "spectrumsynth", "Convert input spectrum videos to audio output.", "set channels", "set input amplitude scale", "set input sliding mode", "consume old columns with new", "consume only most right column", "consume full frames", "consume only most left column", "Input frame sizes do not match (%dx%d vs %dx%d).\n", "alphamerge", "Copy the luma value of the second input into the alpha channel of the first input.", "alpha", "num:den syntax is deprecated, please use num/den or named options instead\n", "Unable to parse ratio numerator \"%s\"\n", "Error when evaluating the expression '%s'\n", "Invalid string '%s' for aspect ratio\n", "w:%d h:%d dar:%d/%d sar:%d/%d -> dar:%d/%d sar:%d/%d\n", "w:%d h:%d sar:%d/%d dar:%d/%d -> sar:%d/%d dar:%d/%d\n", "setsar", "Set the pixel sample aspect ratio.", "set sample (pixel) aspect ratio", "set max value for nominator or denominator in the ratio", "setdar", "Set the frame display aspect ratio.", "set display aspect ratio", "dar_den", "hsub", "vsub", "size %d is invalid. Must be an odd value.\n", "atadenoise", "Apply an Adaptive Temporal Averaging Denoiser.", "set threshold A for 1st plane", "set threshold B for 1st plane", "set threshold A for 2nd plane", "set threshold B for 2nd plane", "set threshold A for 3rd plane", "set threshold B for 3rd plane", "set how many frames to use", "n:%lld pts:%s pts_time:%s", "lavfi.bbox.x1", "lavfi.bbox.x2", "lavfi.bbox.y1", "lavfi.bbox.y2", "lavfi.bbox.w", "lavfi.bbox.h", " x1:%d x2:%d y1:%d y2:%d w:%d h:%d crop=%d:%d:%d:%d drawbox=%d:%d:%d:%d", "bbox", "Compute bounding box for each frame.", "min_val", "set minimum luminance value for bounding box", "black_min_duration:%s pixel_black_th:%f pixel_black_th_i:%d picture_black_ratio_th:%f\n", "black_start:%s black_end:%s black_duration:%s\n", "frame:%lld picture_black_ratio:%f pts:%s t:%s type:%c\n", "lavfi.black_start", "lavfi.black_end", "blackdetect", "Detect video intervals that are (almost) black.", "set minimum detected black duration in seconds", "black_min_duration", "picture_black_ratio_th", "set the picture black ratio threshold", "pic_th", "pixel_black_th", "set the pixel black threshold", "pix_th", "tblend", "inputs must be of same pixel format\n", "First input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding second input link %s parameters (%dx%d, SAR %d:%d)\n", "Blend successive frames.", "c0_mode", "set component #0 blend mode", "c1_mode", "set component #1 blend mode", "c2_mode", "set component #2 blend mode", "c3_mode", "set component #3 blend mode", "all_mode", "set blend mode for all components", "addition", "addition128", "burn", "darken", "difference", "difference128", "divide", "dodge", "exclusion", "glow", "hardlight", "hardmix", "lighten", "linearlight", "multiply", "multiply128", "negation", "overlay", "phoenix", "pinlight", "reflect", "screen", "softlight", "subtract", "vividlight", "c0_expr", "set color component #0 expression", "c1_expr", "set color component #1 expression", "c2_expr", "set color component #2 expression", "c3_expr", "set color component #3 expression", "all_expr", "set expression for all color components", "c0_opacity", "set color component #0 opacity", "c1_opacity", "set color component #1 opacity", "c2_opacity", "set color component #2 opacity", "c3_opacity", "set color component #3 opacity", "all_opacity", "set opacity for all color components", "blend", "Blend two video frames into each other.", "force termination when the shortest input terminates", "repeatlast", "repeat last bottom frame", "BOTTOM", "chromakey", "Turns a certain color into transparency. Operates on YUV colors.", "set the chromakey key color", "black", "similarity", "set the chromakey similarity value", "set the chromakey key blend value", "color parameter is in yuv instead of rgb", "codecview", "Visualize information about some codecs.", "set motion vectors to visualize", "colorbalance", "Adjust the color balance.", "set red shadows", "set green shadows", "set blue shadows", "set red midtones", "set green midtones", "set blue midtones", "set red highlights", "set green highlights", "set blue highlights", "colorchannelmixer", "Adjust colors by mixing color channels.", "set the red gain for the red channel", "set the green gain for the red channel", "set the blue gain for the red channel", "set the alpha gain for the red channel", "set the red gain for the green channel", "set the green gain for the green channel", "set the blue gain for the green channel", "set the alpha gain for the green channel", "set the red gain for the blue channel", "set the green gain for the blue channel", "set the blue gain for the blue channel", "set the alpha gain for the blue channel", "set the red gain for the alpha channel", "set the green gain for the alpha channel", "set the blue gain for the alpha channel", "set the alpha gain for the alpha channel", "colorkey", "Turns a certain color into transparency. Operates on RGB colors.", "set the colorkey key color", "set the colorkey similarity value", "set the colorkey key blend value", "colorlevels", "Adjust the color levels.", "rimin", "set input red black point", "gimin", "set input green black point", "bimin", "set input blue black point", "aimin", "set input alpha black point", "rimax", "set input red white point", "gimax", "set input green white point", "bimax", "set input blue white point", "aimax", "set input alpha white point", "romin", "set output red black point", "gomin", "set output green black point", "bomin", "set output blue black point", "aomin", "set output alpha black point", "romax", "set output red white point", "gomax", "set output green white point", "bomax", "set output blue white point", "aomax", "set output alpha white point", "convolution", "Apply convolution filter.", "set matrix for 1st plane", "0 0 0 0 1 0 0 0 0", "set matrix for 2nd plane", "set matrix for 3rd plane", "set matrix for 4th plane", "0rdiv", "set rdiv for 1st plane", "1rdiv", "set rdiv for 2nd plane", "2rdiv", "set rdiv for 3rd plane", "3rdiv", "set rdiv for 4th plane", "0bias", "set bias for 1st plane", "1bias", "set bias for 2nd plane", "2bias", "set bias for 3rd plane", "3bias", "set bias for 4th plane", "copy", "Copy the input video unchanged to the output.", "n:%d t:%f pos:%f x:%d y:%d x+w:%d y+h:%d\n", "Too big value or invalid expression for out_w/ow or out_h/oh. Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n", "w:%d h:%d sar:%d/%d -> w:%d h:%d sar:%d/%d\n", "Invalid too big or non positive size for width '%d' or height '%d'\n", "out_w", "out_h", "crop", "Crop the input video.", "set the width crop area expression", "set the height crop area expression", "set the x crop area expression", "(in_w-out_w)/2", "set the y crop area expression", "(in_h-out_h)/2", "keep_aspect", "keep aspect ratio", "in_w", "in_h", "%f/%f ", "curves %d (intid=%d) [%d points]: [%s]\n", "Invalid key point coordinates (%f;%f), x and y must be in the [0;1] range.\n", "Key point coordinates (%f;%f) and (%f;%f) are too close from each other or not strictly increasing on the x-axis\n", "last", "libavfilter/vf_curves.c", "point->next", "x_start >= 0 && x_start <= 255 && x_end >= 0 && x_end <= 255", "f(%f)=%f -> y[%d]=%d\n", "#%d points:", " (%f;%f)", "#%d values:", " %02X", "Adjust components curves.", "0/1 0.129/1 0.466/0.498 0.725/0 1/0", "0/1 0.109/1 0.301/0.498 0.517/0 1/0", "0/1 0.098/1 0.235/0.498 0.423/0 1/0", "0.25/0.156 0.501/0.501 0.686/0.745", "0.25/0.188 0.38/0.501 0.745/0.815 1/0.815", "0.231/0.094 0.709/0.874", "0.5/0.4", "0.149/0.066 0.831/0.905 0.905/0.98", "0.4/0.5", "0.305/0.286 0.694/0.713", "0.286/0.219 0.639/0.643", "0/1 1/0", "0.301/0.196 0.592/0.6 0.686/0.737", "0/0.11 0.42/0.51 1/0.95", "0.50/0.48", "0/0.22 0.49/0.44 1/0.8", "select a color curves preset", "preset_name", "color_negative", "cross_process", "darker", "increase_contrast", "lighter", "linear_contrast", "medium_contrast", "negative", "strong_contrast", "vintage", "master", "set master points coordinates", "set red points coordinates", "green", "set green points coordinates", "blue", "set blue points coordinates", "set points coordinates for all components", "psfile", "set Photoshop curves file name", "Overlap value can not except %d with a block size of %dx%d\n", "libavfilter/vf_dctdnoiz.c", "The last %d horizontal pixels won't be denoised\n", "The last %d vertical pixels won't be denoised\n", "threads: [max=%d hmax=%d user=%d] => %d\n", "dctdnoiz", "Denoise frames using 2D DCT.", "sigma", "set noise sigma constant", "set number of block overlapping pixels", "set coefficient factor expression", "set the block size, expressed in bits", "deband", "Debands video.", "1thr", "set 1st plane threshold", "2thr", "set 2nd plane threshold", "3thr", "set 3rd plane threshold", "4thr", "set 4th plane threshold", "set range", "direction", "set direction", "blur", "set blur", "clean_src", "blockx and blocky settings must be power of two\n", "The input needs a constant frame rate; current rate of %d/%d is invalid\n", "frame parameters differ between inputs\n", "FPS: %d/%d -> %d/%d\n", " dup", " lowest", " [DROP]", "1/%d frame drop:\n", "  #%d: totdiff=%08llx maxbdiff=%08llx%s%s%s%s\n", "decimate", "Decimate frames (post field matching filter).", "cycle", "set the number of frame from which one will be dropped", "dupthresh", "set duplicate threshold", "scthresh", "set scene change threshold", "blockx", "set the size of the x-axis blocks used during metric calculations", "blocky", "set the size of the y-axis blocks used during metric calculations", "ppsrc", "mark main input as a pre-processed input and activate clean source input stream", "set whether or not chroma is considered in the metric calculations", "cycle:%d\n", "%lld\t", "next=%lld, new=%lld\n", "dejudder", "Remove judder produced by pullup.", "set the length of the cycle to use for dejuddering", "rx must be a multiple of 16\n", "Ori x, Avg x, Fin x, Ori y, Avg y, Fin y, Ori angle, Avg angle, Fin angle, Ori zoom, Avg zoom, Fin zoom\n", "OpenCL support was not enabled in this build, cannot be selected\n", "cx: %d, cy: %d, cw: %d, ch: %d, rx: %d, ry: %d, edge: %d blocksize: %d contrast: %d search: %d\n", "%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", "deshake", "Stabilize shaky video.", "set x for the rectangular search area", "set y for the rectangular search area", "set width for the rectangular search area", "set height for the rectangular search area", "set edge mode", "blank", "fill zeroes at blank locations", "original", "original image at blank locations", "clamp", "extruded edge value at blank locations", "mirror", "mirrored edge at blank locations", "blocksize", "set motion search blocksize", "contrast", "set contrast threshold for blocks", "search", "set search strategy", "smode", "exhaustive", "exhaustive search", "less exhaustive search", "set motion search detailed log file name", "opencl", "use OpenCL filtering capabilities", "No pattern provided.\n", "Provided pattern includes non-numeric characters.\n", "Detelecine pattern %s removes up to %d frames per frame, pts advance factor: %d/%d\n", "TB: %d/%d -> %d/%d\n", "detelecine", "Apply an inverse telecine pattern.", "first_field", "select first field", "field", "select top field first", "select bottom field first", "pattern", "pattern that describe for how many fields a frame is to be displayed", "position of first frame with respect to the pattern if stream is cut", "First input link %s parameters (size %dx%d, SAR %d:%d) do not match the corresponding second input link %s parameters (%dx%d, SAR %d:%d) and/or third input link %s parameters (%dx%d, SAR %d:%d)\n", "displace", "Displace pixels.", "source", "xmap", "ymap", "smear", "wrap", "invert", "Size values less than 0 are not acceptable.\n", "x:%d y:%d w:%d h:%d color:0x%02X%02X%02X%02X\n", "Error when evaluating the expression '%s'.\n", "drawgrid", "Draw a colored grid on the input video.", "set horizontal offset", "set vertical offset", "set width of grid cell", "set height of grid cell", "set color of the grid", "thickness", "set grid line thickness", "drawbox", "Draw a colored box on the input video.", "set horizontal position of the left box edge", "set vertical position of the top box edge", "set width of the box", "set height of the box", "set color of the box", "set the box thickness", "libavfilter/vf_edgedetect.c", "edgedetect", "Detect and draw edge.", "set high threshold", "set low threshold", "wires", "white/gray wires on black", "colormix", "mix colors", "pal8 output allows max 256 codebook length.\n", "elbg", "Apply posterize effect, using the ELBG algorithm.", "codebook_length", "set codebook length", "nb_steps", "set max number of steps used to compute the mapping", "set the random seed", "pal8", "set the pal8 output", "Requested planes not available.\n", "alphaextract", "Extract an alpha channel as a grayscale image component.", "extractplanes", "Extract planes as grayscale frames.", "planes", "set planes", "set luma plane", "set u plane", "set v plane", "set red plane", "set green plane", "set blue plane", "set alpha plane", "type:%s start_frame:%d nb_frames:%d alpha:%d\n", "type:%s start_time:%f duration:%f alpha:%d\n", "libavfilter/vf_fade.c", "fade", "Fade in/out input video.", "'in' or 'out' for fade-in/fade-out", "Number of the first frame to which to apply the effect.", "nb_frames", "Number of frames to which the effect should be applied.", "fade alpha if it is available on the input", "Number of seconds of the beginning of the effect.", "Duration of the effect in seconds.", "set color", "weight_Y", "weight_U", "weight_V", "fftfilt", "Apply arbitrary expressions to pixels in frequency domain.", "dc_Y", "adjust gain in Y plane", "dc_U", "adjust gain in U plane", "dc_V", "adjust gain in V plane", "set luminance expression in Y plane", "set chrominance expression in U plane", "set chrominance expression in V plane", "w:%d h:%d type:%s -> w:%d h:%d\n", "Extract a field from the input video.", "set field type (top or bottom)", "field_type", "select top field", "select bottom field", "Combed pixel should not be larger than blockx x blocky\n", "libavfilter/vf_fieldmatch.c", "fm->prv && fm->src && fm->nxt", "fm->prv2 && fm->src2 && fm->nxt2", "order == 0 || order == 1 || field == 0 || field == 1", "COMBS: %3d %3d %3d %3d %3d\n", "Frame #%lld at %s is still interlaced\n", "SC:%d | COMBS: %3d %3d %3d %3d %3d (combpel=%d) match=%d combed=%s\n", "fieldmatch", "Field matching for inverse telecine.", "order", "specify the assumed field order", "auto detect parity", "assume bottom field first", "assume top field first", "set the matching mode or strategy to use", "2-way match (p/c)", "pc_n", "2-way match + 3rd match on combed (p/c + u)", "pc_u", "2-way match + 3rd match (same order) on combed (p/c + u)", "pc_n_ub", "2-way match + 3rd match on combed + 4th/5th matches if still combed (p/c + u + u/b)", "3-way match (p/c/n)", "pcn_ub", "3-way match + 4th/5th matches on combed (p/c/n + u/b)", "set the field to match from", "automatic (same value as 'order')", "bottom field", "top field", "mchroma", "set whether or not chroma is included during the match comparisons", "define an exclusion band which excludes the lines between y0 and y1 from the field matching decision", "set scene change detection threshold", "combmatch", "set combmatching mode", "combmatching", "disable combmatching", "enable combmatching only on scene change", "enable combmatching all the time", "combdbg", "enable comb debug", "dbglvl", "no forced calculation", "calculate p/c/n", "pcnub", "calculate p/c/n/u/b", "cthresh", "set the area combing threshold used for combed frame detection", "set whether or not chroma is considered in the combed frame decision", "set the x-axis size of the window used during combed frame detection", "set the y-axis size of the window used during combed frame detection", "combpel", "set the number of combed pixels inside any of the blocky by blockx size blocks on the frame for the frame to be detected as combed", "frame with same field order", "progressive frame", "down", "Skipping %s.\n", "picture will move %s one line\n", "fieldorder", "Set the field order.", "output field order", "bottom field first", "top field first", "Empty output format string.\n", "Force libavfilter not to use any of the specified pixel formats for the input to the next filter.", "Convert the input video to one of the specified pixel formats.", "A '|'-separated list of pixel formats", "%d frames in, %d frames out; %d frames dropped, %d frames duplicated.\n", "fps=%d/%d\n", "Set first pts to (in:%lld out:%lld)\n", "Discarding initial frame(s) with no timestamp.\n", "Dropping %d frame(s).\n", "Duplicating frame.\n", "Force constant framerate.", "A string describing desired output framerate", "Assume the first PTS should be this value.", "round", "set rounding method for timestamps", "round towards 0", "round away from 0", "round towards -infty", "round towards +infty", "near", "round to nearest", "Left and right sizes differ (%dx%d vs %dx%d).\n", "Left and right time bases differ (%d/%d vs %d/%d).\n", "Left and right framerates differ (%d/%d vs %d/%d).\n", "Unknown packing mode.", "framepack", "Generate a frame packed stereoscopic video.", "packed", "right", "Frame pack output format", "Views are packed next to each other", "Views are packed on top of each other", "frameseq", "Views are one after the other", "lines", "Views are interleaved by lines", "columns", "Views are interleaved by columns", "config_output()\n", "config_output() input time base:%u/%u (%f)\n", "time base:%u/%u -> %u/%u exact:%d\n", "Timebase conversion is not exact\n", "config_output() output time base:%u/%u (%f) w:%d h:%d\n", "fps -> fps:%u/%u scene score:%f interpolate start:%d end:%d\n", "set_srce_frame_output_pts()\n", "set_work_frame_pts()\n", "s->srce[s->next]", "libavfilter/vf_framerate.c", "s->srce[s->crnt]", "set_work_frame_pts() srce crnt pts:%lld\n", "set_work_frame_pts() srce next pts:%lld\n", "set_work_frame_pts() srce prev pts:%lld\n", "set_work_frame_pts() initial average srce pts:%lld\n", "set_work_frame_pts() average srce pts:%lld\n", "set_work_frame_pts() average srce pts:%lld at dest time base:%u/%u\n", "set_work_frame_pts() average dest pts delta:%lld\n", "set_work_frame_pts() calculated pts:%lld at dest time base:%u/%u\n", "get_scene_score16()\n", "get_scene_score16() process\n", "get_scene_score16() result is:%f\n", "blend_frames16() interpolate scene score:%f\n", "blend_frames16() INTERPOLATE to create work frame\n", "get_scene_score()\n", "get_scene_score() process\n", "get_scene_score() result is:%f\n", "blend_frames8() interpolate scene score:%f\n", "blend_frames8() INTERPOLATE to create work frame\n", "process_work_frame()\n", "process_work_frame() pending_input_frames %d\n", "process_work_frame() srce prev pts:%lld\n", "process_work_frame() srce crnt pts:%lld\n", "process_work_frame() srce next pts:%lld\n", "process_work_frame() no current frame cached: move on to next frame, do not output a frame\n", "next_source()\n", "next_source() unlink %d\n", "next_source() copy %d to %d\n", "next_source() make %d null\n", "process_work_frame() work crnt pts:%lld\n", "process_work_frame() work next pts:%lld\n", "process_work_frame() srce prev pts:%lld at dest time base:%u/%u\n", "process_work_frame() srce crnt pts:%lld at dest time base:%u/%u\n", "process_work_frame() srce next pts:%lld at dest time base:%u/%u\n", "process_work_frame() work crnt pts >= srce next pts: SKIP FRAME, move on to next frame, do not output a frame\n", "process_work_frame() interpolate:%f/256\n", "process_work_frame() source is:NEXT\n", "process_work_frame() source is:PREV\n", "process_work_frame() interpolate source is:NEXT\n", "process_work_frame() interpolate source is:PREV\n", "process_work_frame() CUT - DON'T INTERPOLATE\n", "process_work_frame() COPY to the work frame\n", "process_work_frame() REPEAT FRAME\n", "process_work_frame() CONSUME FRAME, move to next frame\n", "process_work_frame() output a frame\n", "request_frame()\n", "request_frame() call source's request_frame()\n", "request_frame() source's request_frame() returned error:%d\n", "request_frame() source's request_frame() returned:%d\n", "request_frame() REPEAT or FLUSH\n", "request_frame() nothing else to do, return:EOF\n", "request_frame() FLUSH\n", "request_frame() copy:%d to:%d\n", "Interlaced frame found - the output will not be correct.\n", "framerate", "Upsamples or downsamples progressive source between specified frame rates.", "required output frames per second rate", "interp_start", "point to start linear interpolation", "interp_end", "point to end linear interpolation", "scene change level", "set flags", "scene_change_detect", "enable scene change detection", "step:%d frame_rate:%d/%d(%f) -> frame_rate:%d/%d(%f)\n", "framestep", "Select one frame every N frames.", "step", "set frame step", "threshold:%.2f radius:%d\n", "gradfun", "Debands video quickly using gradients.", "strength", "The maximum amount by which the filter will change any one pixel.", "radius", "The neighborhood to fit the gradient to.", "hflip", "Horizontally flip the input video.", "histogram", "Compute and draw a histogram.", "level_height", "set level height", "scale_height", "set scale height", "display_mode", "parade", "levels_mode", "set levels mode", "components", "set color components to display", "fmt:%s size:%dx%d -> size:%dx%d\n", "Scale the input by 2, 3 or 4 using the hq*x magnification algorithm.", "set scale factor", "Error when evaluating the expression '%s' for %s\n", "H and h options are incompatible and cannot be specified at the same time\n", "H_expr:%s h_deg_expr:%s s_expr:%s b_expr:%s\n", "Saturation value not in range [%d,%d]: clipping value to %0.1f\n", "Brightness value not in range [%d,%d]: clipping value to %0.1f\n", "H:%0.1f*PI h:%0.1f s:%0.1f b:%0.f t:%0.1f n:%d\n", "Adjust the hue and saturation of the input video.", "set the hue angle degrees expression", "set the saturation expression", "set the hue angle radians expression", "set the brightness expression", "auto-inserted", "Repeated Fields: Neither:%6lld Top:%6lld Bottom:%6lld\n", "Single frame detection: TFF:%6lld BFF:%6lld Progressive:%6lld Undetermined:%6lld\n", "Multi frame detection: TFF:%6lld BFF:%6lld Progressive:%6lld Undetermined:%6lld\n", "neither", "undetermined", "Repeated Field:%12s, Single frame:%12s, Multi frame:%12s\n", "lavfi.idet.repeated.current_frame", "%lld.%0*lld", "lavfi.idet.repeated.neither", "lavfi.idet.repeated.top", "lavfi.idet.repeated.bottom", "lavfi.idet.single.current_frame", "lavfi.idet.single.tff", "lavfi.idet.single.bff", "lavfi.idet.single.progressive", "lavfi.idet.single.undetermined", "lavfi.idet.multiple.current_frame", "lavfi.idet.multiple.tff", "lavfi.idet.multiple.bff", "lavfi.idet.multiple.progressive", "lavfi.idet.multiple.undetermined", "Final flag accuracy %d\n", "idet", "Interlace detect Filter.", "intl_thres", "set interlacing threshold", "prog_thres", "set progressive threshold", "rep_thres", "set repeat threshold", "half_life", "half life of cumulative statistics", "analyze_interlaced_flag", "set number of frames to use to determine if the interlace flag is accurate", "Deinterleave or interleave fields.", "luma_mode", "select luma mode", "deinterleave", "chroma_mode", "select chroma mode", "alpha_mode", "select alpha mode", "luma_swap", "swap luma fields", "chroma_swap", "swap chroma fields", "alpha_swap", "swap alpha fields", "lenscorrection", "Rectify the image by correcting for lens distortion.", "set relative center x", "set relative center y", "set quadratic distortion factor", "set double quadratic distortion factor", "Error when parsing the expression '%s' for the component %d and color %d.\n", "val[%d][%d] = %d\n", "negval", "negate_alpha:%d\n", "negate", "Negate input video.", "negate_alpha", "lutrgb", "Compute and apply a lookup table to the RGB input video.", "lutyuv", "Compute and apply a lookup table to the YUV input video.", "Compute and apply a lookup table to the RGB/YUV input video.", "clip", "gammaval", "gammaval709", "set component #0 expression", "set component #1 expression", "set component #2 expression", "set component #3 expression", "set Y expression", "set U expression", "set V expression", "set R expression", "set G expression", "set B expression", "set A expression", "maxval", "minval", "clipval", "libavfilter/vf_lut3d.c", "Padding on the right (%dpx) of the Hald CLUT will be ignored\n", "Padding at the bottom (%dpx) of the Hald CLUT will be ignored\n", "The Hald CLUT width does not match the level\n", "Too large Hald CLUT (maximum level is %d, or %dx%d CLUT)\n", "%s: %s\n", "Unable to guess the format from the extension\n", "Unexpected EOF\n", "3DLUTSIZE ", "Too large or invalid 3D LUT size\n", "%f %f %f", "%d %d %d", "cube", "LUT_3D_SIZE ", "DOMAIN_", "MIN ", "MAX ", "values", "in and out must be defined\n", "invalid in (%d) or out (%d)\n", "Unrecognized '.%s' file type\n", "3D LUT is empty\n", "min: %f %f %f | max: %f %f %f\n", "haldclut", "Adjust colors using a Hald CLUT.", "clut", "continue applying the last clut after eos", "select interpolation mode", "interp_mode", "nearest", "use values from the nearest defined points", "trilinear", "interpolate values using the 8 points defining a cube", "tetrahedral", "interpolate values using a tetrahedron", "lut3d", "Adjust colors using a 3D LUT.", "set 3D LUT file name", "maskedmerge", "Merge first stream with second stream using third stream as mask.", "mask", "Only planar formats with more than one component are supported.\n", "Mapping with out of range input and/or plane number.\n", "s->nb_inputs && s->nb_inputs <= 4", "libavfilter/vf_mergeplanes.c", "input #%d link %s SAR %d:%d does not match output link %s SAR %d:%d\n", "input %d does not have %d plane\n", "output plane %d depth %d does not match input %d plane %d depth %d\n", "output plane %d width %d does not match input %d plane %d width %d\n", "output plane %d height %d does not match input %d plane %d height %d\n", "mergeplanes", "Merge planes.", "mapping", "set input to output plane mapping", "set output pixel format", "erosion", "dilation", "inflate", "Apply inflate effect.", "threshold0", "set threshold for 1st plane", "threshold1", "set threshold for 2nd plane", "threshold2", "set threshold for 3rd plane", "threshold3", "set threshold for 4th plane", "Apply deflate effect.", "Apply dilation effect.", "coordinates", "set coordinates", "Apply erosion effect.", "Add noise.", "all_seed", "set component #0 noise seed", "all_strength", "set component #0 strength", "alls", "all_flags", "set component #0 flags", "allf", "averaged noise", "(semi)regular pattern", "temporal noise", "uniform noise", "c0_seed", "c0_strength", "c0_flags", "c1_seed", "set component #1 noise seed", "c1_strength", "set component #1 strength", "c1_flags", "set component #1 flags", "c2_seed", "set component #2 noise seed", "c2_strength", "set component #2 strength", "c2_flags", "set component #2 flags", "c3_seed", "set component #3 noise seed", "c3_strength", "set component #3 strength", "c3_flags", "set component #3 flags", "null", "The rgb option is deprecated and is overriding the format option, use format instead\n", "libavfilter/vf_overlay.c", "Incoming frame (time:%s) from link #%d\n", "x:%f xi:%d y:%f yi:%d\n", "main w:%d h:%d fmt:%s overlay w:%d h:%d fmt:%s eof_action:%s\n", "n:%f t:%f pos:%f x:%f xi:%d y:%f yi:%d\n", "Overlay a video source on top of the input.", "set the x expression", "set the y expression", "eof_action", "Action to take when encountering EOF from secondary input ", "repeat", "Repeat the previous frame.", "endall", "End both streams.", "pass", "Pass through the main input.", "init", "eval expressions once during initialization", "eval expressions per-frame", "force packed RGB in input and output (deprecated)", "set output format", "yuv420", "yuv422", "yuv444", "repeat overlay of the last overlay frame", "main_w", "main_h", "overlay_w", "overlay_h", "Negative values are not acceptable.\n", "w:%d h:%d -> w:%d h:%d x:%d y:%d color:0x%02X%02X%02X%02X\n", "Input area %d:%d:%d:%d not within the padded area 0:0:%d:%d or zero-sized\n", "Direct padding impossible allocating new frame\n", "Pad the input video.", "set the pad area width expression", "set the pad area height expression", "set the x offset expression for the input image position", "set the y offset expression for the input image position", "set the color of the padded area border", "(+1)", "box->len >= 1", "libavfilter/vf_palettegen.c", "new_box->len >= 1", "lavfi.color_quant_ratio", "%d%s colors generated out of %d colors; ratio=%f\n", "Dupped color: %08X\n", "s->nb_boxes < 256", "Unable to allocate references for %d different colors\n", "palettegen", "Find the optimal palette for a given stream.", "max_colors", "set the maximum number of colors to use in the palette", "reserve_transparent", "reserve a palette entry for transparency", "stats_mode", "set statistics mode", "compute full frame histograms", "diff", "compute histograms only for the part that differs from previous frame", "Palette input must contain exactly %d pixels. Specified input has %dx%d=%d pixels\n", "%*cnode%d [label=\"%c%02X%c%02X%c%02X%c\" fillcolor=\"#%02x%02x%02x\" fontcolor=\"#%06X\"]\n", "%*cnode%d -> node%d\n", "Cannot open file '%s' for writing: %s\n", "digraph {\n", "    node [style=filled fontsize=10 shape=box]\n", "/!\\ %02X%02X%02X: %d ! %d (%06X ! %06X) / dist: %d ! %d\n", "Accuracy check passed\n", "MEP:%.3f TotalMEP:%.3f\n", "paletteuse", "Use a palette to downsample an input video stream.", "palette", "dither", "select dithering mode", "dithering_mode", "bayer", "ordered 8x8 bayer dithering (deterministic)", "heckbert", "dithering as defined by Paul Heckbert in 1982 (simple error diffusion)", "floyd_steinberg", "Floyd and Steingberg dithering (error diffusion)", "sierra2", "Frankie Sierra dithering v2 (error diffusion)", "sierra2_4a", "Frankie Sierra dithering v2 \"Lite\" (error diffusion)", "bayer_scale", "set scale for bayer dithering", "diff_mode", "set frame difference mode", "rectangle", "process smallest different rectangle", "debug_kdtree", "save Graphviz graph of the kdtree in specified file", "color_search", "set reverse colormap color search method", "nns_iterative", "iterative search", "nns_recursive", "recursive search", "bruteforce", "brute-force into the palette", "mean_err", "compute and print mean error", "debug_accuracy", "test color search accuracy", "pixdesctest", "Test pixel format definitions.", " %c:%f", "PSNR%s average:%f min:%f max:%f\n", "Could not open stats file %s: %s\n", "Width and height of input videos must be same.\n", "Inputs must be of same pixel format.\n", "%0.2f", "lavfi.psnr.mse_avg", "lavfi.psnr.psnr_avg", "%s%c", "lavfi.psnr.mse.", "lavfi.psnr.psnr.", "n:%lld mse_avg:%0.2f ", "psnr_avg:%0.2f ", "mse_%c:%0.2f ", "psnr_%c:%0.2f ", "Calculate the PSNR between two video streams.", "reference", "stats_file", "Set file where to store per-frame difference information", "known", "Change video quantization parameters.", "set qp expression", "Return random frames.", "frames", "set number of frames in cache", "set the seed", "removegrain", "Remove grain.", "set mode for 1st plane", "set mode for 2nd plane", "set mode for 3rd plane", "set mode for 4th plane", "Mask image size %dx%d does not match with the input video size %dx%d\n", "The bitmap file name is mandatory\n", "full x1:%d x2:%d y1:%d y2:%d max_mask_size:%d\n", "half x1:%d x2:%d y1:%d y2:%d max_mask_size:%d\n", "removelogo", "Remove a TV logo based on a mask image.", "set bitmap filename", "angle", "Error when parsing the expression '%s' for angle command\n", "Error occurred parsing angle expression '%s'\n", "Error parsing or evaluating expression for option %s: invalid expression '%s' or non-positive or indefinite value %f\n", "n:%f time:%f angle:%f/PI\n", "rotate", "Rotate the input image.", "rotw", "roth", "set angle (in radians)", "set output width expression", "set output height expression", "fillcolor", "set background fill color", "bilinear", "use bilinear interpolation", "Rescaled value for width or height is too big.\n", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "w:%d h:%d fmt:%s sar:%d/%d -> w:%d h:%d fmt:%s sar:%d/%d flags:0x%0x\n", "Error when evaluating the expression '%s'.\nMaybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n", "Size and width/height expressions cannot be set at the same time.\n", "Invalid size '%s'\n", "w:%s h:%s flags:'%s' interl:%d\n", "bt601", "bt470", "Detected unsupported YCgCo colorspace.\n", "scale2ref", "Scale the input video size and/or convert the image format.", "Output video width", "Output video height", "Flags to pass to libswscale", "interl", "set interlacing", "in_color_matrix", "set input YCbCr type", "out_color_matrix", "set output YCbCr type", "in_range", "set input color range", "out_range", "set output color range", "in_v_chr_pos", "input vertical chroma position in luma grid/256", "in_h_chr_pos", "input horizontal chroma position in luma grid/256", "out_v_chr_pos", "output vertical chroma position in luma grid/256", "out_h_chr_pos", "output horizontal chroma position in luma grid/256", "force_original_aspect_ratio", "decrease or increase w/h if necessary to keep the original AR", "force_oar", "disable", "decrease", "increase", "Scaler param 0", "Scaler param 1", "nb_slices", "set the number of slices (debug purpose only)", "eval expressions during initialization and per-frame", "Scale the input video size and/or convert the image format to the given reference.", "ohsub", "ovsub", "Invalid %s adjustments (%g %g %g %g). Settings must be set in [-1;1] range\n", "libavfilter/vf_selectivecolor.c", " none", "Unsupported selective color file version %d, the settings might not be loaded properly\n", "%c value of first CMYK entry is not 0 but %d\n", "CMYK", "%f %f %f %f", "Adjustments:%s\n", "%8ss: C=%6g M=%6g Y=%6g K=%6g\n", "selectivecolor", "Apply CMYK adjustments to specific color ranges.", "correction_method", "select correction method", "absolute", "relative", "reds", "adjust red regions", "yellows", "adjust yellow regions", "greens", "adjust green regions", "cyans", "adjust cyan regions", "blues", "adjust blue regions", "magentas", "adjust magenta regions", "whites", "adjust white regions", "neutrals", "adjust neutral regions", "blacks", "adjust black regions", "set Photoshop selectivecolor file name", "yellow", "cyan", "magenta", "neutral", "height must be even\n", "separatefields", "Split input video frames into fields.", "setfield", "Force field for the output video frame.", "select interlace mode", "keep the same input field", "mark as bottom-field-first", "mark as top-field-first", "prog", "mark as progressive", "config %s time_base: %d/%d, frame_rate: %d/%d\n", "n:%4lld pts:%7s pts_time:%-7s pos:%9lld fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c checksum:%08X plane_checksum:[%08X", " %08X", "] mean:[", "%lld ", "%3.1f ", "pan/scan", "A/53 closed captions (%d bytes)", "stereoscopic information: ", "type - ", "side by side", "top and bottom", "frame alternate", "checkerboard", "interleaved lines", "interleaved columns", "side by side (quincunx subsampling)", " (inverted)", "displaymatrix: rotation of %.2f degrees", "afd: value of %u", "unknown side data type %d (%d bytes)", "showinfo", "Show textual information for each video frame.", "showpalette", "Display frame palette.", "set pixel box size", "Index out of range.\n", "libavfilter/vf_shuffleframes.c", "shuffleframes", "Shuffle video frames.", "set destination indexes of input frames", "Non-existing input plane #%d mapped to output plane #%d.\n", "Cannot map between a subsampled chroma plane and a luma or alpha plane.\n", "Cannot map between a palette plane and a data plane.\n", "shuffleplanes", "Shuffle video planes.", "map0", "Index of the input plane to be used as the first output plane ", "map1", "Index of the input plane to be used as the second output plane ", "map2", "Index of the input plane to be used as the third output plane ", "map3", "Index of the input plane to be used as the fourth output plane ", "lavfi.signalstats.YMIN", "lavfi.signalstats.YLOW", "lavfi.signalstats.YAVG", "lavfi.signalstats.YHIGH", "lavfi.signalstats.YMAX", "lavfi.signalstats.UMIN", "lavfi.signalstats.ULOW", "lavfi.signalstats.UAVG", "lavfi.signalstats.UHIGH", "lavfi.signalstats.UMAX", "lavfi.signalstats.VMIN", "lavfi.signalstats.VLOW", "lavfi.signalstats.VAVG", "lavfi.signalstats.VHIGH", "lavfi.signalstats.VMAX", "lavfi.signalstats.SATMIN", "lavfi.signalstats.SATLOW", "lavfi.signalstats.SATAVG", "lavfi.signalstats.SATHIGH", "lavfi.signalstats.SATMAX", "lavfi.signalstats.HUEMED", "lavfi.signalstats.HUEAVG", "lavfi.signalstats.YDIF", "lavfi.signalstats.UDIF", "lavfi.signalstats.VDIF", "lavfi.signalstats.%s", "TOUT", "VREP", "BRNG", "signalstats", "Generate statistics from video analysis.", "stat", "set statistics filters", "filters", "tout", "analyze pixels for temporal outliers", "vrep", "analyze video lines for vertical line repetition", "brng", "analyze for pixels outside of broadcast range", "set video filter", "highlight pixels that depict temporal outliers", "highlight video lines that depict vertical line repetition", "highlight pixels that are outside of broadcast range", "set highlight color", " %c:%f (%f)", "SSIM%s All:%f (%f)\n", "lavfi.ssim.", "lavfi.ssim.All", "lavfi.ssim.dB", "n:%lld ", "All:%f (%f)\n", "%c:%f ", "Calculate the SSIM between two video streams.", "vstack", "Input %d width %d does not match input %d width %d.\n", "Input %d height %d does not match input %d height %d.\n", "Stack video inputs vertically.", "hstack", "Stack video inputs horizontally.", "swaprect", "Swap 2 rectangular objects in video.", "set rect width", "set rect height", "set 1st rect x top left coordinate", "set 1st rect y top left coordinate", "set 2nd rect x top left coordinate", "set 2nd rect y top left coordinate", "swapuv", "Swap U and V components.", "Telecine pattern %s yields up to %d frames per frame, pts advance factor: %d/%d\n", "telecine", "Apply a telecine pattern.", "frame id #%d (pts_time=%f) selected from a set of %d images\n", "Allocation failure, try to lower the number of frames\n", "batch size: %d frames\n", "thumbnail", "Select the most representative frame in a given sequence of consecutive frames.", "set the frames batch size", "Tile size %ux%u is insane.\n", "nb_frames must be less than or equal to %dx%d=%d\n", "Total width %ux%u is too much.\n", "Total height %ux%u is too much.\n", "tile", "Tile several successive frames together.", "layout", "set grid size", "set maximum number of frame to render", "margin", "set outer border margin in pixels", "padding", "set inner border thickness in pixels", "set the color of the unused area", "clockwise", "counterclockwise", "dir values greater than 3 are deprecated, use the passthrough option instead\n", "w:%d h:%d -> w:%d h:%d (passthrough mode)\n", "w:%d h:%d dir:%d -> w:%d h:%d rotation:%s vflip:%d\n", "transpose", "Transpose input video.", "set transpose direction", "cclock_flip", "rotate counter-clockwise with vertical flip", "clock", "rotate clockwise", "cclock", "rotate counter-clockwise", "clock_flip", "rotate clockwise with vertical flip", "passthrough", "do not apply transposition if the input matches the specified geometry", "always apply transposition", "portrait", "preserve portrait geometry", "landscape", "preserve landscape geometry", "sharpen", "Invalid even size for %s matrix size %dx%d\n", "luma", "effect:%s type:%s msize_x:%d msize_y:%d amount:%0.2f\n", "unsharp", "Sharpen or blur the input video.", "luma_msize_x", "set luma matrix horizontal size", "luma_msize_y", "set luma matrix vertical size", "luma_amount", "set luma effect strength", "chroma_msize_x", "set chroma matrix horizontal size", "chroma_msize_y", "set chroma matrix vertical size", "chroma_amount", "set chroma effect strength", "libavfilter/vf_vectorscope.c", "vectorscope", "Video vectorscope.", "set vectorscope mode", "color2", "color3", "color4", "set color component on X axis", "set color component on Y axis", "set intensity", "envelope", "set envelope", "instant", "peak+instant", "vflip", "Flip the input video vertically.", "Unable to parse expression for 'angle'\n", "Unable to parse expression for 'x0'\n", "Unable to parse expression for 'y0'\n", "xscale=%f yscale=%f dmax=%f\n", "vignette", "Make or reverse a vignette effect.", "set lens angle", "PI/5", "set circle center position on x-axis", "set circle center position on y-axis", "set forward/backward mode", "forward", "backward", "eval expressions for each frame", "set dithering", "set aspect ratio", "w3fdif", "Apply Martin Weston three field deinterlace.", "filter", "specify the filter", "complex", "deint", "specify which frames to deinterlace", "deinterlace all frames", "interlaced", "only deinterlace frames marked as interlaced", "waveform", "Video waveform monitor.", "column", "set mirroring", "display", "set components to display", "set envelope to display", "set filter", "flat", "aflat", "achroma", "Scale the input using xBR algorithm.", "Video of less than 3 columns or lines is not supported\n", "libavfilter/vf_yadif.c", "Failed to reallocate frame\n", "Reallocating frame due to differing stride\n", "yadif", "Deinterlace the input image.", "specify the interlacing mode", "send_frame", "send one frame for each frame", "send_field", "send one frame for each field", "send_frame_nospatial", "send one frame for each frame, but skip spatial interlacing check", "send_field_nospatial", "send one frame for each field, but skip spatial interlacing check", "parity", "specify the assumed picture field parity", "s->in == ((void *)0)", "libavfilter/vf_zoompan.c", "zoompan", "Apply Zoom & Pan effect.", "set the zoom expression", "set the duration expression", "set the output image size", "set the output framerate", "pduration", "time", "pzoom", "nullsink", "Do absolutely nothing with the input video.", "w:%d\n", "The specified width is %d which cannot contain the provided string width of %d\n", "%d %c\n", "320x518", "Only one of the filename or pattern options can be used\n", "s:%dx%d r:%d/%d rule:%d stitch:%d scroll:%d full:%d seed:%u\n", "cellauto", "Create pattern generated by an elementary cellular automaton.", "read initial pattern from file", "set initial pattern", "rule", "set rule", "random_fill_ratio", "set fill ratio for filling initial grid randomly", "random_seed", "set the seed for filling the initial grid randomly", "scroll pattern downward", "start_full", "start filling the whole video", "stitch", "stitch boundaries", "320x240", "bBsS", "Invalid rule code '%s' provided\n", "Mold color is set while mold isn't, ignoring the color.\n", "h:%d max_w:%d\n", "The specified size is %dx%d which cannot contain the provided file size of %dx%d\n", "%d:%d %c\n", "s:%dx%d r:%d/%d rule:%s stay_rule:%d born_rule:%d stitch:%d seed:%u\n", "life", "Create life.", "set source file", "B3/S23", "mold", "set mold speed for dead cells", "life_color", "set life color", "death_color", "set death color", "mold_color", "set mold color", "Mandelbrot cache is too small!\n", "mandelbrot", "Render a Mandelbrot fractal.", "set frame size", "640x480", "set frame rate", "maxiter", "set max iterations number", "start_x", "set the initial x position", "start_y", "set the initial y position", "start_scale", "set the initial scale value", "end_scale", "set the terminal scale value", "set the terminal pts value", "bailout", "set the bailout value", "morphxf", "set morph x frequency", "morphyf", "set morph y frequency", "morphamp", "set morph amplitude", "outer", "set outer coloring mode", "iteration_count", "set iteration count mode", "normalized_iteration_count", "set normalized iteration count mode", "set white mode", "outz", "set outz mode", "inner", "set inner coloring mode", "set black mode", "period", "set period mode", "convergence", "show time until convergence", "mincol", "color based on point closest to the origin of the iterations", "size:%dx%d rate:%d/%d duration:%f sar:%d/%d\n", "w == h && w == level*level*level", "libavfilter/vsrc_testsrc.c", "x + w <= test->w", "y + h <= test->h", "ff_draw_init(&s->draw, inlink->format, 0) >= 0", "%02d:%02d:%02d.%03d\n%12lli", "allrgb", "Generate all RGB colors.", "set video duration", "set video sample aspect ratio", "allyuv", "Generate all yuv colors.", "smptehdbars", "Generate SMPTE HD color bars.", "smptebars", "Generate SMPTE color bars.", "rgbtestsrc", "Generate RGB test pattern.", "testsrc2", "Generate another test pattern.", "testsrc", "Generate test pattern.", "decimals", "set number of decimals to show", "nullsrc", "Null video source, return unprocessed video frames.", "haldclutsrc", "Provide an identity Hald CLUT.", "set level", "Provide an uniformly colored input.", "libavfilter/window_func.c", "raw ADTS AAC (Advanced Audio Coding)", "audio/aac,audio/aacp,audio/x-aac", "Invalid APE tag key '%s'.\n", "APE tag size too large.\n", "Skipping binary tag '%s'.\n", "Error reading cover art.\n", "APETAGEX", "Unsupported tag version. (>=%d)\n", "Tag size is way too big\n", "Invalid tag size %u.\n", "Too many tag fields (%u)\n", "APE Tag is a header\n", "Non ASCII keys are not allowed\n", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.", "subfile,", "libavformat/avio.c", "No URL Protocols are registered. Missing call to av_register_all()?\n", "Impossible to open the '%s' protocol for reading\n", "Impossible to open the '%s' protocol for writing\n", "subfile", "Key '%s' not found.\n", "Error parsing options string %s\n", "https:", "https protocol not found, recompile FFmpeg with openssl, gnutls,\nor securetransport enabled.\n", "protocol_whitelist", "!(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || (uc->protocol_whitelist && !strcmp(uc->protocol_whitelist, e->value))", "Protocol not on whitelist '%s'!\n", "Setting default whitelist '%s'\n", "No default whitelist set\n", "!whitelist || !(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || !strcmp(whitelist, e->value)", "URLContext", "List of protocols that are allowed to be used", "Invaid UTF8 sequence in avio_put_str16%s\n", "!s->write_flag", "libavformat/aviobuf.c", "Failed to decrease buffer size\n", "len >= s->orig_buffer_size", "Statistics: %d seeks, %d writeouts\n", "Statistics: %lld bytes read, %d seeks\n", "AVIOContext", "crypto+", "crypto:", "Unsupported url %s\n", "%s not set\n", "decryption key", "invalid %s size (%d bytes, block size is %d)\n", "decryption IV", "encryption key", "encryption IV", "Unable to open resource: %s\n", "crypto", "AES encryption/decryption key", "AES encryption/decryption initialization vector", "decryption_key", "AES decryption key", "decryption_iv", "AES decryption initialization vector", "encryption_key", "AES encryption key", "encryption_iv", "AES encryption initialization vector", "%sMetadata:\n", "language", "%s  %-16s: ", "\n%s  %-16s: ", "fps, ", "tbr, ", "tbn, ", "    Stream #%d:%d", "[0x%x]", "(%s)", ", %d, %d/%d", ": %s", ", SAR %d:%d DAR %d:%d", "%1.4f %s", "%3.2f %s", "%1.0f %s", "%1.0fk %s", " (default)", " (dub)", " (original)", " (comment)", " (lyrics)", " (karaoke)", " (forced)", " (hearing impaired)", " (visual impaired)", " (clean effects)", "    ", "%sSide data:\n", "%s  ", "new extradata", "paramchange: ", "channel count %u, ", "channel layout: %s, ", "sample_rate %u, ", "width %u height %u", "unknown param", "h263 macroblock info", "stereo3d: ", "effects", "visually impaired", "hearing impaired", "dialogue", "comentary", "emergency", "voice over", "karaoke", "quality factor: %d, pict_type: %c", "%08x ", " %02x", "stream #%d:\n", "  keyframe=%d\n", "  duration=%0.3f\n", "  dts=", "%0.3f", "  pts=", "  size=%d\n", "  Duration: ", "%02d:%02d:%02d.%02d", ", start: ", "%d.%06d", ", bitrate: ", "%lld kb/s", "    Chapter #%d:%d: ", "start %f, ", "end %f\n", "name", "  Program %d %s\n", "  No Program\n", "file:", "truncate", "truncate existing files on write", "set I/O operation maximum block size", "Video codec (%x)", "NGINX RTMP", "true", "false", "AMF_DATA_TYPE_STRING parsing failed\n", "keyframes", "Skipping duplicate index\n", "times", "filepositions", "Invalid keyframes object, skipping.\n", "Keyframe index parsing failed\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_OBJECT\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_MIXEDARRAY, found %d\n", "unsupported amf type %d\n", "videodatarate", "audiodatarate", "datastream", "videocodecreal", "~~~~ videocodecreal:%f \n", "videocodecid", "audiocodecid", "Audio codec (%x)", "audiosamplerate", "audiosamplesize", "Open Broadcaster Software v0.%d", "metadatacreator", "MEGA", "filesize", "type:%d, size:%d, last:%d, dts:%lld pos:%lld\n", "Found invalid index entries, clearing the index.\n", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Unknown type %s\n", "Adjusting next position due to index mismatch\n", "Skipping flv packet: type %d, size %d, flags %d.\n", "%s stream discovered after head already parsed\n", "%d %X %d \n", "Negative cts, previous timestamps might be wrong.\n", "invalid timestamps %lld %lld\n", "Omnia A/XE", "Packet mismatch %d %d\n", "Encoder", "OnTextData packet", "live_flv", "live RTMP FLV (Flash Video)", "live_flvdec", "FLV (Flash Video)", "flvdec", "flv_metadata", "Allocate streams according to the onMetaData array", "segment", "ssegment", "Probing %s score:%d size:%d\n", "Specified probe size value %u cannot be < %u\n", "mime_type", "Format %s detected only with low score of %d, misdetection possible!\n", "Format %s probed with size=%d and score=%d\n", "configurationVersion:                %u\n", "general_profile_space:               %u\n", "general_tier_flag:                   %u\n", "general_profile_idc:                 %u\n", "general_profile_compatibility_flags: 0x%08x\n", "general_constraint_indicator_flags:  0x%012llx\n", "general_level_idc:                   %u\n", "min_spatial_segmentation_idc:        %u\n", "parallelismType:                     %u\n", "chromaFormat:                        %u\n", "bitDepthLumaMinus8:                  %u\n", "bitDepthChromaMinus8:                %u\n", "avgFrameRate:                        %u\n", "constantFrameRate:                   %u\n", "numTemporalLayers:                   %u\n", "temporalIdNested:                    %u\n", "lengthSizeMinusOne:                  %u\n", "numOfArrays:                         %u\n", "array_completeness[%u]:               %u\n", "NAL_unit_type[%u]:                    %u\n", "numNalus[%u]:                         %u\n", "nalUnitLength[%u][%u]:                 %u\n", "raw HEVC video", "hevc,h265,265", "hevc demuxer", "URI=", "BYTERANGE=", "TYPE=", "GROUP-ID=", "LANGUAGE=", "ASSOC-LANGUAGE=", "NAME=", "DEFAULT=", "FORCED=", "CHARACTERISTICS=", "METHOD=", "BANDWIDTH=", "AUDIO=", "VIDEO=", "SUBTITLES=", "#EXTM3U", "#EXT-X-STREAM-INF:", "#EXT-X-TARGETDURATION:", "#EXT-X-MEDIA-SEQUENCE:", "comment", "seekable", "user-agent", "cookies", "headers", "http_proxy", "location", "#EXT-X-KEY:", "AES-128", "SAMPLE-AES", "#EXT-X-MEDIA:", "AUDIO", "VIDEO", "SUBTITLES", "public.accessibility.describes-music-and-sound", "public.accessibility.describes-video", "#EXT-X-PLAYLIST-TYPE:", "EVENT", "#EXT-X-MAP:", "#EXT-X-ENDLIST", "#EXT-X-DISCONTINUITY", "#EXTINF:", "#EXT-X-BYTERANGE:", "hls_read_header cur_seq_no %d, start_seq_no %d, n_segments %d, live_start_index %d, hls_switch_seq_no %d", "http", "file,", "cdn_ip", "offset", "end_offset", "HLS request for url '%s', offset %lld, playlist %d\n", "Unable to read key file %s\n", "Unable to open key file %s\n", "crypto+%s", "crypto:%s", "SAMPLE-AES encryption is not supported yet\n", "Unable to seek to offset %lld of HLS segment '%s'\n", "No longer receiving playlist %d\n", "Failed to reload playlist %d\n", "skipping %d segments ahead, expired from playlists\n", "Failed to open an initialization section in playlist %d\n", "Downloading an initialization section of size %lld\n", "Failed to open segment of playlist %d\n", "Too large HLS ID3 tag (%d > %lld bytes)\n", "Stripped %d HLS ID3 bytes\n", "Stripped additional %d HLS ID3 bytes\n", "PRIV", "HLS ID3 audio timestamp %lld\n", "Invalid HLS ID3 audio timestamp %lld\n", "APIC", "!pls->id3_deferred_extra", "libavformat/hls.c", "Changing ID3 metadata in HLS audio elementary stream", "recheck_discard_flags cur_seq_no %d", "Now receiving playlist %d, segment %d\n", "Empty playlist\n", "hls_read_header cur_seq_no %d", "Error when loading first segment '%s'\n", "No expected HTTP requests have been made\n", "~~~ read header: url:%s  \n", "~~~~ read header  streams:%d  \n", "variant_bitrate", "user_agent", "hls,applehttp", "Apple HTTP Live Streaming", "live_start_index", "segment index to start live streams at (negative values are from the end)", "skipping %d segments ahead, expired from playlist\n", "opening %s\n", "Unable to open %s\n", "hls+", "Using the hls protocol is discouraged, please try using the hls demuxer instead. The hls demuxer should be more complete and work as well as the protocol implementation. (If not, please report it.) To use the demuxer, simply use %s as url.\n", "hls://", "No nested protocol specified. Specify e.g. hls+http://%s\n", "0\r\n\r\n", "%x\r\n", "Bad Request", "Forbidden", "Not Found", "Internal server error", "text/plain", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nContent-Length: %zu\r\n\r\n%03d %s\r\n", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nTransfer-Encoding: chunked\r\n\r\n", "HTTP reply header: \n%s----\n", "Stream ends prematurely at %lld, should be %lld\n", "sc->listen", "libavformat/http.c", "POST", "header='%s'\n", "Received method: %s\n", "Received and expected HTTP method do not match. (%s expected, %s received)\n", "Autodetected %s HTTP method\n", "Received and autodetected HTTP method did not match (%s autodetected %s received)\n", "Requested resource: %s\n", "HTTP/", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "http_code=%d\n", " \t\r\n", "HTTP error %d %s\n", "Location", "Content-Length", "Content-Range", "bytes ", "Accept-Ranges", "bytes", "Transfer-Encoding", "chunked", "WWW-Authenticate", "Authentication-Info", "Proxy-Authenticate", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "Content-Type", "Set-Cookie", "Icy-MetaInt", "Icy-", "Content-Encoding", "gzip", "1.2.3", "Error during zlib initialisation: %s\n", "Your zlib was compiled without gzip support.\n", "identity", "Unknown content coding: %s\n", "%s%s\n", "Unable to parse '%s'\n", "Transfer-Encoding: chunked\r\n", "Proxy-", "no_proxy", "http://", "https", "ijkapplication", "\r\nUser-Agent: ", "\r\nAccept: ", "\r\nRange: ", "Range: bytes=%lld-", "\r\nExpect: ", "\r\nConnection: ", "Connection: keep-alive\r\n", "Connection: close\r\n", "\r\nHost: ", "\r\nContent-Length: ", "Content-Length: %d\r\n", "\r\nContent-Type: ", "Content-Type: %s\r\n", "\r\nCookie: ", "path=", "domain=", "Invalid cookie found, no value, path or domain specified\n", "%s; %s", "Cookie: %s\r\n", "\r\nIcy-MetaData: ", "Icy-MetaData: %d\r\n", "%s %s HTTP/1.1\r\n%s%s%s%s%s\r\n", "request: %s\n", "try to fix missing 'Content-Range' at server side (%lld,%lld) => (%lld,%lld)", "User-Agent: %s\r\n", "Accept: */*\r\n", "Expect: 100-continue\r\n", "Host: %s\r\n", "Lower protocol\n", "Read headers\n", "Reply code: %d\n", "listen", "Chunked encoding data size: %lld'\n", "inflate return value: %d, %s\n", "Will reconnect at %lld error=%s.\n", "Failed to reconnect at %lld.\n", "icy_metadata_packet", "No trailing CRLF found in HTTP header.\n", "http,https,tls,rtp,tcp,udp,crypto", "control seekability of connection", "chunked_post", "use chunked transfer-encoding for posts", "set HTTP proxy to tunnel through", "set custom HTTP headers, can override built in default headers", "content_type", "set a specific content type for the POST messages", "override User-Agent header", "Lavf/57.25.100", "multiple_requests", "use persistent connections", "post_data", "set custom HTTP post data", "export the MIME type", "set cookies to be sent in applicable future requests, use newline delimited Set-Cookie HTTP field value syntax", "request ICY metadata", "icy_metadata_headers", "return ICY metadata headers", "return current ICY metadata packet", "metadata read from the bitstream", "auth_type", "HTTP authentication type", "No auth method set, autodetect", "basic", "HTTP basic authentication", "send_expect_100", "Force sending an Expect: 100-continue header for POST", "The actual location of the data received", "initial byte offset", "try to limit the request to bytes preceding this offset", "method", "Override the HTTP method or set the expected HTTP method from a client", "reconnect", "auto reconnect after disconnect before EOF", "reconnect_at_eof", "auto reconnect at EOF", "reconnect_streamed", "auto reconnect streamed / non seekable streams", "reconnect_delay_max", "max reconnect delay in seconds after which to give up", "listen on HTTP", "resource", "The resource requested by a client", "reply_code", "The http status code to return to a client", "http-tcp-hook", "hook protocol on tcp", "AVApplicationContext", "cdn_ip by httpdns", "nextnonce=", "realm=", "nonce=", "opaque=", "algorithm=", "qop=", "stale=", "Basic ", "Digest ", "auth", "Authorization: Basic ", "%08x", "MD5-sess", "auth-int", "Authorization: Digest ", "username=\"%s\"", ", realm=\"%s\"", ", nonce=\"%s\"", ", uri=\"%s\"", ", response=\"%s\"", ", algorithm=\"%s\"", ", opaque=\"%s\"", ", qop=\"%s\"", ", cnonce=\"%s\"", ", nc=%s", "title", "artist", "date", "genre", "Blues", "Classic Rock", "Country", "Dance", "Disco", "Funk", "Grunge", "Hip-Hop", "Jazz", "Metal", "New Age", "Oldies", "Other", "Reggae", "Rock", "Techno", "Industrial", "Alternative", "Death Metal", "Pranks", "Soundtrack", "Euro-Techno", "Ambient", "Trip-Hop", "Vocal", "Jazz+Funk", "Fusion", "Trance", "Classical", "Instrumental", "Acid", "House", "Game", "Sound Clip", "Gospel", "Noise", "AlternRock", "Bass", "Soul", "Punk", "Space", "Meditative", "Instrumental Pop", "Instrumental Rock", "Ethnic", "Gothic", "Darkwave", "Techno-Industrial", "Electronic", "Pop-Folk", "Eurodance", "Dream", "Southern Rock", "Comedy", "Cult", "Gangsta", "Top 40", "Christian Rap", "Pop/Funk", "Jungle", "Native American", "Cabaret", "New Wave", "Psychadelic", "Rave", "Showtunes", "Trailer", "Lo-Fi", "Tribal", "Acid Punk", "Acid Jazz", "Polka", "Retro", "Musical", "Rock & Roll", "Hard Rock", "Folk", "Folk-Rock", "National Folk", "Swing", "Fast Fusion", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Gothic Rock", "Progressive Rock", "Psychedelic Rock", "Symphonic Rock", "Slow Rock", "Big Band", "Chorus", "Easy Listening", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Chamber Music", "Sonata", "Symphony", "Booty Bass", "Primus", "Porn Groove", "Satire", "Slow Jam", "Club", "Tango", "Samba", "Folklore", "Ballad", "Power Ballad", "Rhythmic Soul", "Freestyle", "Duet", "Punk Rock", "Drum Solo", "A capella", "Euro-House", "Dance Hall", "Drum & Bass", "Club-House", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Polsk Punk", "Beat", "Christian Gangsta", "Heavy Metal", "Black Metal", "Crossover", "Contemporary Christian", "Christian Rock", "Merengue", "Salsa", "Thrash Metal", "Anime", "JPop", "SynthPop", "Error opening memory stream\n", "Cannot read BOM value, input too short\n", "Incorrect BOM value\n", "Unknown encoding\n", "Error reading frame %s, skipped\n", "TCON", "(%d)", "TXXX", "No AVFormatContext, skipped ID3 chapter data\n", "encrypted", "encrypted and compressed", "extended header too long.", "invalid extended header length", "version", "compression", "id3v2 ver:%d flags:%02X len:%d\n", "Invalid empty frame %s, skipping.\n", "Skipping %s ID3v2 frame %s.\n", "USLT", "CHAP", "Failed to alloc %d bytes\n", "Compresssed frame %s tlen=%d dlen=%ld\n", "Failed to alloc %ld bytes\n", "Failed to read compressed tag\n", "Failed to uncompress tag: %d\n", "lyrics-%s%s%s", "invalid frame id, assuming padding\n", "Error reading lyrics, skipped\n", "ID3v2.%d tag skipped, cannot handle %s\n", "GEOB", "Unknown attached picture mimetype: %s, skipping.\n", "Unknown attached picture type %d.\n", "Error decoding attached picture description.\n", "Failed to alloc %zu bytes\n", "Error reading GEOB frame, data truncated.\n", "TYER", "TDAT", "-%.2s-%.2s", " %.2s:%.2s", "32x32 pixels 'file icon'", "Other file icon", "Cover (front)", "Cover (back)", "Leaflet page", "Media (e.g. label side of CD)", "Lead artist/lead performer/soloist", "Artist/performer", "Conductor", "Band/Orchestra", "Composer", "Lyricist/text writer", "Recording Location", "During recording", "During performance", "Movie/video screen capture", "A bright coloured fish", "Illustration", "Band/artist logotype", "Publisher/Studio logotype", "compilation", "encoded_by", "album_artist", "performer", "TCMP", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "album-sort", "TSOP", "artist-sort", "TSOT", "title-sort", "TALB", "TCOM", "composer", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "ljpg", "mpg1-img", "mpg2-img", "mpg4-img", "ffv1-img", "im24", "im32", "sunras", "yuv10", "MPEG4 description: tag=0x%02x len=%d\n", "codec open in read_dec_config_descr\n", "esds object type id 0x%02x\n", "Specific MPEG4 header len=%d\n", "mp4a config channels %d obj %d ext obj %d sample rate %d ext sample rate %d\n", "raw MPEG-4 video", "m4v demuxer", "Unknown MOV field order 0x%04x\n", "enda %d\n", "Duplicated STPS atom\n", "Atoms too deeply nested\n", "Detected moov in a free atom.\n", "Broken file, trak/mdat not at top-level\n", "type: %08x '%.4s' parent:'%.4s' sz: %lld %lld %lld\n", "overread end of atom '%.4s' by %lld bytes\n", "ignoring multiple glbl\n", "Found duplicated MOOV Atom. Skipped it\n", "root atom offset 0x%llx: partial file\n", "read fragments, offset 0x%llx\n", "root", "%d/%d", "qt  ", "ISO: File Type Major Brand: %.4s\n", "major_brand", "minor_version", "compatible_brands", "Duplicated SBGP atom\n", "found fragment index for track %u\n", "found fragment index entry for track %u and moof_offset %lld\n", "track %u has a fragment index but it doesn't have an (in-order) entry for moof_offset %lld\n", "frag flags 0x%x\n", "could not find corresponding trex\n", "could not find corresponding track id %d\n", "track[%i].stts.entries = %i\n", "Duplicated STTS atom\n", "Invalid sample_count=%d\n", "sample_count=%d, sample_duration=%d\n", "keyframe_count = %d\n", "Duplicated STSS atom\n", "track[%i].stsc.entries = %i\n", "Duplicated STSC atom\n", "ctype= %.4s (0x%08x)\n", "stype= %.4s\n", "handler_name", "Duplicated ELST atom\n", "track[%i].edit_count = %i\n", "duration=%lld time=%lld rate=%f\n", "Duplicated STCO atom\n", "duplicate senc atom\n", "senc atom size %lld too small\n", "failed to read the auxiliary info", "systemBitrate=\"", "unknown compression for cmov atom !\n", "get_wav_header failed\n", "sample aspect ratio already set to %d:%d, ignoring 'pasp' atom (%d:%d)\n", "stream %d, sample %d, dts %lld\n", "sidx version %u", "sidx reference_type 1", "stream has moof boxes, will look for a mfra\n", "doesn't look like mfra (unreasonable size)\n", "doesn't look like mfra (size mismatch)\n", "doesn't look like mfra (tag mismatch)\n", "stream has mfra\n", "found tfra\n", "failed to seek back after looking for mfra\n", "found a moof box but failed to read the mfra (may be a live ismv)\n", "found a moof box but stream is not seekable, can not look for mfra\n", "moof offset %llx\n", "%Y-%m-%d %H:%M:%S", "time scale = %i\n", "[aax] file checksum == ", "[aax] activation_bytes option is missing!\n", "[aax] activation_bytes value needs to be 4 bytes!\n", "[aax] audible_fixed_key value needs to be 16 bytes!\n", "[aax] mismatch in checksums!\n", "[aax] error in drm blob decryption!\n", "nclx", "nclc", "unsupported color_parameter_type %s\n", "%s: pri %d trc %d matrix %d", " full %u", "type %.4s size %d\n", "volume %s, len %d\n", "filename %s, len %d\n", "nlvl from %d, nlvl to %d\n", "type %d, len %d\n", "path %s\n", "dir %s\n", "Unknown dref type 0x08%x size %d\n", "flags 0x%x entries %d\n", "first sample flags 0x%x\n", "mov_update_dts_shift(): dts_shift set to %d\n", "found frag time %lld sc->dts_shift %d ctts.duration %d sc->time_offset %lld flags & MOV_TRUN_SAMPLE_CTS %d\n", "calculated into dts %lld\n", "found frag time %lld, using it for dts\n", "Failed to add index entry\n", "AVIndex stream %d, sample %d, offset %llx, dts %lld, size %d, distance %d, keyframe %d\n", "ignoring 'frma' atom of '%.4s', stream has codec id %d\n", "ignoring 'frma' atom of '%.4s', stream format is '%.4s'\n", "stream %d, timestamp %lld, sample %d\n", "stream %d, found sample %d\n", "The 'keys' atom with the invalid key count: %d\n", "The key# %d in meta has invalid size: %d\n", "iTunSMPB", "%*X %X %X %X", "cdec", "Unhandled or malformed custom metadata of size %lld\n", "truncated extradata\n", "ignored unknown aclr value (%d)\n", "aclr not decoded - incomplete atom\n", "aclr not decoded - unexpected size %lld\n", "aclr not decoded - unable to add atom to extradata\n", "size: %dx%d\n", "palette: ", "%06x%s", "Using absolute path on user request, this is a possible security issue\n", "Absolute path %s not tried for security reasons, set demuxer option use_absolute_path to allow absolute paths\n", "Reference with mismatching origin, %s not tried for security reasons, set demuxer option use_absolute_path to allow it anyway\n", "stream %d, missing mandatory atoms, broken header\n", "stream %d, timescale not set\n", "multiple edit list entries, a/v desync might occur, patch welcome\n", "STSZ sample size %d invalid (too large), ignoring\n", "STSZ sample size %d invalid (too small), ignoring\n", "wrong sample count\n", "Invalid SampleDelta %d in STTS, at %d st:%d\n", "error unaligned chunk\n", "chunk count %d\n", "Zero bytes per frame, but %d samples per frame", "wrong chunk count %d\n", "AVIndex stream %d, chunk %d, offset %llx, dts %lld, size %d, duration %d\n", "stream %d, error opening alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d\n", "Skipped opening external track: stream %d, alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d.Set enable_drefs to allow this.\n", "Invalid decryption key len %d expected %d\n", "error reading header\n", "moov atom not found\n", "on_parse_exit_offset=%lld\n", "ignoring stream duration which is shorter than chapters\n", "Chapter %d not found in file\n", "timecode", "Forcing full parsing for mp3 stream\n", "Referenced QT chapter track not found\n", "tmcd", "stream %d, offset 0x%llx: partial file\n", "Cannot append palette to packet\n", "failed to read iv from the auxiliary info\n", "failed to read subsample count from the auxiliary info\n", "failed to read subsample from the auxiliary info\n", "subsample size exceeds the packet size left\n", "leftover packet bytes after subsample processing\n", "track[%i].ctts.entries = %i\n", "count=%d, duration=%d\n", "CTTS invalid\n", "dts shift %d\n", "warning", "subtitle", "original_source", "playback_requirements", "performers", "producer", "original_artist", "model", "make", "host_computer", "grouping", "original_format", "edit_date", "disclaimer", "director", "chapter", "season_number", "show", "network", "episode_sort", "episode_id", "media_type", "sort_show", "sort_name", "sort_composer", "sort_artist", "sort_album", "sort_album_artist", "rating", "purchase_date", "gapless_playback", "podcast", "synopsis", "keywords", "hd_video", "episode_uid", "description", "category", "account_id", "account_type", "quicktime_version", "premiere_version", "loci too short\n", "place name too long\n", "no space for coordinates left (%d)\n", "%+08.4f%+09.4f", "%s-%s", "Unknown cover type: 0x%x.\n", "The index of 'data' is out of range: %d >= %d.\n", "UDTA parsing failed retrying raw\n", "%.4s", "Failed to store the float32 number (%f) in string.\n", "HandBrake %d.%d.%d", "lang \"%3s\" ", "tag \"%s\" value \"%s\" atom \"%.4s\" %d %lld\n", "Error parsing cover art.\n", "sample_size = %d sample_count = %d\n", "Invalid sample field size %d\n", "Duplicated STSZ atom\n", "Unsupported DTS audio channel layout", "Multiple mdhd?\n", "Version %d", "Found media data tag MPEG indicating this is a MOV-packed MPEG-PS.\n", "invalid size %lld in stsd\n", "multiple fourcc not supported\n", "Concatenated H.264 or H.265 might not play correctly.\n", "size=%lld 4CC= %c%c%c%c/0x%08x codec_type=%d\n", "Planar Y'CbCr 8-bit 4:2:0", "Sorenson H263", "audio channels %d\n", "version =%d, isom =%d\n", "reel_name", "stsd", "avc1", "hvc1", "hev1", "mp4s", "mov,mp4,m4a,3gp,3g2,mj2", "QuickTime / MOV", "use_absolute_path", "allow using absolute path when opening alias, this is a possible security issue", "seek_streams_individually", "Seek each stream individually to the to the closest point", "ignore_editlist", "ignore_chapters", "use_mfra_for", "use mfra for fragment timestamps", "export_all", "Export unrecognized metadata entries", "export_xmp", "Export full XMP metadata", "activation_bytes", "Secret bytes for Audible AAX files", "audible_fixed_key", "Fixed key used for handling Audible AAX files", "77214d4b196a87cd520045fd20a51d67", "The media decryption key (hex)", "enable_drefs", "Enable external track support.", "chan: layout=%u bitmap=%u num_descr=%u\n", "reached EOF while reading channel layout\n", "a=control:streamid=%d\r\n", "next_dts >= 0", "libavformat/movenc.c", "disk", "trkn", "stss", "stps", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "hint", "HintHandler", "TimeCodeHandler", "url ", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "Unknown hldr_type for %s / 0x%04X, writing dummy values\n", "handler", "3gp6", "3gp4", "3g2b", "3g2a", "M4V ", "M4A ", "PSP mode need one video and one audio stream\n", "Non-consecutive fragments, writing incorrect sidx\n", "yrrc", "albm", "next_dts <= 2147483647", "Lucida Grande", "timecode: tbc=%d/%d invalid, fallback on %d/%d\n", "XDCAM", " HD422", " %d%c", "Could not locate DNxHD bit stream in vos_data\n", "Could not locate DNxHD bit stream, vos_data too small\n", "moov atom written before any packets, unable to write correct dvc1 atom. Set the delay_moov flag to fix this.\n", "./libavcodec/put_bits.h", "DpxE", "gamma value %g\n", "writing gama value %d\n", "track->mode == 0x02", "gamma value unknown, unable to write gama atom\n", "Not writing 'gama' atom. Format is not MOV.\n", "color primaries unspecified, assuming bt709\n", "color primaries unspecified, assuming bt470bg\n", "color primaries unspecified, assuming smpte170\n", "color primaries unspecified, unable to assume anything\n", "track->mode == 0x02 || track->mode == 0x01", "Not writing 'colr' atom. Format is not MOV or MP4.\n", "not writing 'chan' tag due to lack of channel information\n", "fps %d is too large\n", "reel_name length %llu is too large\n", "lpcm", "EDTS using dts:%lld cts:%d instead of dts:%lld cts:%lld tid:%d\n", "av_rescale_rnd(start_dts, 1000, track->timescale, AV_ROUND_DOWN) <= 0", "Not writing any edit list even though one would have been required\n", "FATAL error, file duration too long for timebase, this file will not be\nplayable with quicktime. Choose a different timebase or a different\ncontainer format\n", "Lavc57.24.102", "2006/04/01 11:11:11", "perf", "titl", "author", "gnre", "dscp", "cprt", "aART", "encoding_tool", "Lavf57.25.100", "ldes", "tvsh", "tven", "tvnn", "tmpo", "Estimating the duration of the last packet in a fragment, consider setting the duration field in AVPacket instead.\n", "Unable to re-open %s output file for the second pass (faststart)\n", "Application provided duration: %lld / timestamp: %lld is out of range for mov/mp4 format\n", "Application provided duration: %lld is invalid\n", "fatal error, input is not a single packet, implement a AVParser for it\n", "Malformed AAC bitstream detected: use the audio bitstream filter 'aac_adtstoasc' to fix it ('-bsf:a aac_adtstoasc' option with ffmpeg)\n", "aac bitstream error\n", "Track %d starts with a nonzero dts %lld, while the moov already has been written. Set the delay_moov flag to handle this case.\n", "pts has no value\n", "Starting second pass: moving the moov atom to the beginning of the file\n", "reserved_moov_size is too small, needed %lld additional\n", "Starting second pass: inserting sidx atoms\n", "wide", "free", "video", "audio", "ipod", "ismv", "No meaningful edit list will be written when using empty_moov without delay_moov\n", "Sample interleaving in fragments is mutually exclusive with omit_tfhd_offset and separate_moof\n", "muxer does not support non seekable output\n", "You requested a copy of the original timecode track so timecode metadata are now ignored\n", "cenc-aes-ctr", "Invalid encryption key len %d expected %d\n", "Invalid encryption kid len %d expected %d\n", "unsupported encryption scheme %s\n", "Warning, extension is not .m4a, .m4v nor  .m4b Quicktime/Ipod might not play the file\n", "unsupported height for dv codec\n", "%s rawvideo cannot be written to mov, output file will be unreadable\n", "Using MS style video codec tag, the file may be unplayable!\n", "Using MS style audio codec tag, the file may be unplayable!\n", "Could not find tag for codec %s in stream #%d, codec not currently supported in container\n", "D-10/IMX must use 720x608 or 720x512 video resolution\n", "Resolution %dx%d too large for mov/mp4\n", "WARNING codec timebase is very high. If duration is too long,\nfile may not be playable by quicktime. Specify a shorter timebase\nor choose different container.\n", "track %d: codec frame size is not set\n", "track %d: codec block align is not set for adpcm\n", "track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n", "track %d: muxing mp3 at %dhz is not standard in MP4\n", "palette:", "%06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x", "size:", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n", "<head>\n", "<meta name=\"creator\" content=\"%s\" />\n", "</head>\n", "<body>\n", "<switch>\n", "<%s systemBitrate=\"%lld\">\n", "<param name=\"%s\" value=\"%d\" valuetype=\"data\"/>\n", "systemBitrate", "trackID", "<param name=\"%s\" value=\"%s\" valuetype=\"data\"/>\n", "CodecPrivateData", "FourCC", "H264", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "</%s>\n", "</switch>\n", "</body>\n", "</smil>\n", "MP4 (MPEG-4 Part 14)", "video/mp4", "mp4 muxer", "mov muxer", "movflags", "MOV muxer flags", "rtphint", "Add RTP hint tracks", "moov_size", "maximum moov size so it can be placed at the begin", "empty_moov", "Make the initial moov atom empty", "frag_keyframe", "Fragment at video keyframes", "separate_moof", "Write separate moof/mdat atoms for each track", "frag_custom", "Flush fragments on caller requests", "isml", "Create a live smooth streaming feed (for pushing to a publishing point)", "faststart", "Run a second pass to put the index (moov atom) at the beginning of the file", "omit_tfhd_offset", "Omit the base data offset in tfhd atoms", "disable_chpl", "Disable Nero chapter atom", "default_base_moof", "Set the default-base-is-moof flag in tfhd atoms", "dash", "Write DASH compatible fragmented MP4", "frag_discont", "Signal that the next fragment is discontinuous from earlier ones", "delay_moov", "Delay writing the initial moov until the first fragment is cut, or until the first fragment flush", "global_sidx", "Write a global sidx index at the start of the file", "write_colr", "Write colr atom (Experimental, may be renamed or changed, do not use from scripts)", "write_gama", "Write deprecated gama atom", "rtpflags", "RTP muxer flags", "Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC", "rfc2190", "Use RFC 2190 packetization instead of RFC 4629 for H.263", "skip_rtcp", "Don't send RTCP sender reports", "h264_mode0", "Use mode 0 for H264 in RTP", "send_bye", "Send RTCP BYE packets when finishing", "skip_iods", "Skip writing iods atom.", "iods_audio_profile", "iods audio profile atom.", "iods_video_profile", "iods video profile atom.", "frag_duration", "Maximum fragment duration", "min_frag_duration", "Minimum fragment duration", "frag_size", "Maximum fragment size", "ism_lookahead", "Number of lookahead entries for ISM files", "video_track_timescale", "set timescale of all video tracks", "brand", "Override major brand", "use_editlist", "use edit list", "fragment_index", "Fragment number of the next fragment", "mov_gamma", "gamma value for gama atom", "frag_interleave", "Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead)", "encryption_scheme", "Configures the encryption scheme, allowed values are none, cenc-aes-ctr", "The media encryption key (hex)", "encryption_kid", "The media encryption key identifier (hex)", "CENC-AVC: remaining size %d smaller than nal length+type %d\n", "CENC-AVC: nal size %d remaining %d\n", "Unable to initialize hinting of stream %d\n", "rtpo", "Using MP3 TOC to seek; may be imprecise.\n", "Using scaling to seek VBR MP3; may be imprecise.\n", "invalid concatenated file detected - using bitrate for duration\n", "filesize and duration do not match (growing file?)\n", "Cannot determine file size, skipping TOC table.\n", "pad %d %d\n", "Skipping %d bytes of junk at %lld.\n", "MP2/3 (MPEG audio layer 2/3)", "mp2,mp3,m2a,mpa", "usetoc", "use table of contents", "PES packet size mismatch\n", "max resync size reached, could not find sync byte\n", "changing packet size to %d\n", "timestamp_len > 64", "Predefined SLConfigDescriptor", "Filter: pid=0x%x\n", "pos >= 188", "libavformat/mpegts.c", "All programs have pmt, headers found\n", "Continuity check failed for pid %d expected %d got %d\n", "Skipping after seek\n", "SDT:\n", "tag: 0x%02x len=%d\n", "service_name", "service_provider", "cannot set stream info, codec is open\n", "stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n", "HDMV", "HDPR", "pid=%x pes_code=%#x\n", "pid=%x stream_type=%x probing\n", "Failed to allocate buffers for seekback\n", "score: %d, dvhs_score: %d, fec_score: %d \n", "Unable to seek back to the start\n", "tuning done\n", "start=%0.3f pcr=%0.3f incr=%d\n", "Could not detect TS packet size, defaulting to non-FEC/DVHS\n", "Tag %x length violation new length %d bytes remaining %d\n", "Maximum MP4 descriptor level exceeded\n", "Found tag %x expected %x\n", "pid %x is not PES\n", "PAT:\n", "sid=0x%x pid=0x%x\n", "DVB subtitles with multiple languages", "reg_desc=%.4s\n", "Opus in MPEG-TS - channel_config_code > 0x8", "PMT: len %i\n", "sid=0x%x sec_num=%d/%d version=%d\n", "pcr_pid=0x%x\n", "program tag: 0x%02x len=%d\n", "mpegtsraw", "raw MPEG-TS (MPEG-2 Transport Stream)", "mpegts", "MPEG-TS (MPEG-2 Transport Stream)", "mpegtsraw demuxer", "resync_size", "set size limit for looking up a new synchronization", "compute_pcr", "compute exact PCR for each transport stream packet", "ts_packetsize", "output option carrying the raw packet size", "mpegts demuxer", "fix_teletext_pts", "try to fix pts values of dvb teletext streams", "scan_all_pmts", "scan and combine all PMTs", "skip_changes", "skip changing / adding streams / programs", "skip_clear", "skip clearing programs", "Timestamps are unset in a packet for stream %d. This is deprecated and will stop working in the future. Fix your code to set the timestamps properly\n", "compute_muxer_pkt_fields: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n", "Packet with invalid duration %lld in stream %d\n", "Encoder did not produce proper pts, making some up.\n", "Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n", "pts (%s) < dts (%s) in stream %d\n", "av_write_frame: pts2:%s dts2:%s\n", "Requested output format '%s' is not a suitable output format\n", "Unable to find a suitable output format for '%s'\n", "Setting the AVFormatContext to bitexact mode, because the AVCodecContext is in that mode. This behavior will change in the future. To keep the current behavior, set AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n", "No streams to mux were specified\n", "Using AVStream.codec.time_base as a timebase hint to the muxer is deprecated. Set AVStream.time_base instead.\n", "sample rate not set\n", "Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\n", "encoder-", "Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n", "Invalid packet stream index: %d\n", "Received a packet for an attachment stream.\n", "failed to avoid negative pts %s in stream %d.\nTry -avoid_negative_ts 1 as a possible workaround.\n", "Packets poorly interleaved, failed to avoid negative timestamp %s in stream %d.\nTry -max_interleave_delta 0 as a possible workaround.\n", "pkt->size == ((-2147483647 - 1) / 3 * 2 + (int)sizeof(AVFrame))", "libavformat/mux.c", "((AVFrame *)pkt->data)->buf", "Delay between the first packet and last packet in the muxing queue is %lld > %lld: forcing output\n", "av_interleaved_write_frame size:%d dts:%s pts:%s\n", "av_interleaved_write_frame FLUSH\n", "s->oformat", "Using network protocols without global network initialization. Please use avformat_network_init(), this will become mandatory later.\n", "Failed to set close on exec\n", "setsockopt(SO_REUSEADDR) failed\n", "ff_socket_nonblock failed\n", "Connection to %s failed (%s), trying next address\n", "Connection to %s failed: %s\n", "AVFormatContext", "avioflags", "direct", "reduce buffering", "probesize", "set probing size", "formatprobesize", "number of bytes to probe file format", "packetsize", "set packet size", "fflags", "flush_packets", "reduce the latency by flushing out packets immediately", "ignidx", "ignore index", "genpts", "generate pts", "nofillin", "do not fill in missing values that can be exactly calculated", "noparse", "disable AVParsers, this needs nofillin too", "igndts", "ignore dts", "discardcorrupt", "discard corrupted frames", "sortdts", "try to interleave outputted packets by dts", "keepside", "don't merge side data", "fastseek", "fast but inaccurate seeks", "enable RTP MP4A-LATM payload", "nobuffer", "reduce the latency introduced by optional buffering", "seek2any", "allow seeking to non-keyframes on demuxer level when supported", "do not write random/volatile data", "analyzeduration", "specify how many microseconds are analyzed to probe the input", "cryptokey", "indexmem", "max memory used for timestamp index (per stream)", "rtbufsize", "max memory used for buffering real-time frames", "fdebug", "max_delay", "maximum muxing or demuxing delay in microseconds", "start_time_realtime", "wall-clock time when stream begins (PTS==0)", "fpsprobesize", "number of frames used to probe fps", "audio_preload", "microseconds by which audio packets should be interleaved earlier", "chunk_duration", "microseconds for each chunk", "chunk_size", "size in bytes for each chunk", "f_err_detect", "set error detection flags (deprecated; use err_detect, save via avconv)", "consider things that a sane encoder shouldn't do as an error", "use_wallclock_as_timestamps", "use wallclock as timestamps", "skip_initial_bytes", "set number of bytes to skip before reading header and frames", "correct_ts_overflow", "correct single timestamp overflows", "enable flushing of the I/O context after each packet", "metadata_header_padding", "set number of bytes to be written as padding in a metadata header", "output_ts_offset", "set output timestamp offset", "max_interleave_delta", "maximum buffering duration for interleaving", "f_strict", "how strictly to follow the standards (deprecated; use strict, save via avconv)", "allow non-standardized experimental variants", "max_ts_probe", "maximum number of packets to read while waiting for the first timestamp", "avoid_negative_ts", "shift timestamps so they start at 0", "enabled when required by target format", "disabled", "do not change timestamps", "make_non_negative", "shift timestamps so they are non negative", "make_zero", "format_whitelist", "List of demuxers that are allowed to be used", "hls_cdn_ip", "%d.%d.%d.%d", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "wav header size < 14", "WAVEFORMATEX support for RIFX files\n", "unknown subformat:%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x {%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x}\n", "Invalid sample rate: %d\n", "INFO subchunk truncated\n", "too big INFO subchunk\n", "truncated file\n", "out of memory, unable to read INFO tag\n", "premature end of file while reading INFO tag\n", "(start&1) == 0", "libavformat/riffenc.c", "BottomUp", "LIST", "requested bits_per_coded_sample (%d) and actually stored (%d) differ\n", "Unable to read as many bytes as AMF string signaled\n", " number %g\n", " bool %d\n", " string '%s'\n", " NULL\n", "  %s: ", "chunk size", "bytes read", "server bandwidth", "client bandwidth", "audio packet", "video packet", "Flex shared stream", "Flex shared object", "Flex shared message", "notification", "shared object", "invoke", "RTMP packet type '%s'(%d) for channel %d, timestamp %d, extra field %d size %d\n", "Server BW = %d\n", "Client BW = %d\n", "Too short chunk size change packet (%d)\n", "Incorrect chunk size %d\n", "New incoming chunk size = %d\n", "Unable to create response packet\n", "./libavcodec/bytestream.h", "Incomplete flv packets in RTMP_PT_METADATA packet\n", "_result", "Server error: %s\n", "code", "NetStream.Play.Start", "NetStream.Play.Stop", "NetStream.Play.UnpublishNotify", "NetStream.Publish.Start", "NetStream.Seek.Notify", "onStatus", "status", "%s is now published", "details", "clientid", "@setDataFrame", "Too short ping packet (%d)\n", "_checkbw", "releaseStream", "FCSubscribe", "FCPublish", "getStreamLength", "connect", "authmod=adobe", "authmod=llnw", "Unknown connect error (unsupported authentication method?)\n", "No credentials set\n", "?reason=authfailed", "Incorrect username/password\n", "?reason=nosuchuser", "Incorrect username\n", "Authentication failed\n", "code=403 need auth", "?authmod=%s&user=%s", "?reason=needauth", "No auth parameters found\n", "user", "salt", "opaque", "challenge", "nonce", "Ignoring unsupported var %s\n", "Variable %s has NULL value\n", "adobe", "?authmod=%s&user=%s&challenge=%s&response=%s", "&opaque=%s", "live", "publish", "/_definst_", "00000001", "?authmod=%s&user=%s&nonce=%s&cnonce=%s&nc=%s&response=%s", "llnw", "UnPublishing stream...\n", "FCUnpublish", "Deleting stream...\n", "deleteStream", "Sending publish command for '%s'\n", "Seek on stream index %d at timestamp %lld with flags %08x\n", "Sending seek command for timestamp %lld\n", "seek", "Unable to send seek command on stream index %d at timestamp %lld with flags %08x\n", "Pause at timestamp %d\n", "Sending pause command for timestamp %d\n", "pause", "Unable to send pause command at timestamp %d\n", "received bytes read report\n", "Sending SWF verification...\n", "Ignoring SWFVerification request.\n", "Client bandwidth report packet is less than 4 bytes long (%d)\n", "Incorrect client bandwidth %d\n", "Client bandwidth = %d\n", "Too short server bandwidth report packet (%d)\n", "Incorrect server bandwidth %d\n", "Server bandwidth = %d\n", "_error", "Releasing stream...\n", "FCPublish stream...\n", "Creating stream...\n", "createStream", "Unexpected reply on connect()\n", "Sending play command for '%s'\n", "play", "Unexpected reply on getStreamLength()\n", "onBWDone", "Error in PT_INVOKE\n", "Unable to find / in url %s, bad format\n", "Unexpected stream %s, expecting %s\n", "onFCPublish", "Unknown packet type received 0x%02X\n", "|RtmpSampleAccess", "Sending bytes read report\n", "Detected librtmp style URL parameters, these aren't supported by the libavformat internal RTMP handler currently enabled. See the documentation for the correct way to pass parameters.\n", "rtmp", "rtmp_listen not available for %s\n", "rtmpt", "rtmpts", "ffrtmphttp_tls", "ffrtmphttp", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "?listen&listen_timeout=%d", "Cannot open connection %s\n", "Cannot open connection %s.\n", "Genuine Adobe Flash Player 001", "rtmp_swfhash", "Handshaking...\n", "Cannot write RTMP handshake request\n", "Cannot read RTMP handshake response\n", "Type answer %d\n", "Server version %d.%d.%d.%d\n", "Server response validating failed\n", "Hash of the decompressed SWF file is not 32 bytes long.\n", "Signature mismatch\n", "Unable to read handshake\n", "RTMP protocol version mismatch\n", "Unable to write answer - RTMP S0\n", "Erroneous Message size %d not following standard\n", "Unable to write answer\n", "RTMP Handshake S1 Error\n", "RTMP Handshake S2 Error\n", "Erroneous C2 Message epoch does not match up with C1 epoch\n", "Erroneous C2 Message random does not match up\n", "slist=", "/ondemand/", "ondemand", ".f4v", ".mp4", "mp4:", ".flv", "%s %d,%d,%d,%d", "FMLE/3.0 (compatible; %s)", "Proto = %s, path = %s, app = %s, fname = %s\n", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "Invalid AMF parameter: %s\n", "Unable to read command string\n", "Expecting connect, got %s\n", "SeqNum not found\n", "App field not found in connect\n", "App field don't match up: %s <-> %s\n", "fmsVer", "FMS/3,0,1,123", "NetConnection.Connect.Success", "Connection succeeded.", "objectEncoding", "RTMP Handshake C1 Error\n", "RTMP Handshake C2 Error\n", "rtmp_app", "Name of application to connect to on the RTMP server", "rtmp_buffer", "Set buffer time in milliseconds. The default is 3000.", "rtmp_conn", "Append arbitrary AMF data to the Connect message", "rtmp_flashver", "Version of the Flash plugin used to run the SWF player.", "rtmp_flush_interval", "Number of packets flushed in the same request (RTMPT only).", "rtmp_live", "Specify that the media is a live stream.", "live stream", "recorded", "recorded stream", "rtmp_pageurl", "URL of the web page in which the media was embedded. By default no value will be sent.", "rtmp_playpath", "Stream identifier to play or to publish", "rtmp_subscribe", "Name of live stream to subscribe to. Defaults to rtmp_playpath.", "SHA256 hash of the decompressed SWF file (32 bytes).", "rtmp_swfsize", "Size of the decompressed SWF file, required for SWFVerification.", "rtmp_swfurl", "URL of the SWF player. By default no value will be sent", "rtmp_swfverify", "URL to player swf file, compute hash/size automatically.", "rtmp_tcurl", "URL of the target stream. Defaults to proto://host[:port]/app.", "rtmp_listen", "Listen for incoming rtmp connections", "timeout", "Maximum timeout (in seconds) to wait for incoming connections. -1 is infinite. Implies -rtmp_listen 1", "payload_type", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "Port missing in uri\n", "listen_timeout", "~~~ host name: %s ~~\n", "~~~ after getaddrinfo", "Failed to resolve hostname %s: %s\n", "~~~~ TCP OPEN FAILED ~~~~\n", "libavformat/tcp.c", "Listen for incoming connections", "set timeout (in microseconds) of socket I/O operations", "Connection awaiting timeout (in milliseconds)", "send_buffer_size", "Socket send buffer size (in bytes)", "recv_buffer_size", "Socket receive buffer size (in bytes)", "cafile", "verify", "cert", "?listen=1", "httpproxy", "SSL_CTX_load_verify_locations %s\n", "Unable to load cert file %s: %s\n", "Unable to load key file %s: %s\n", "Unable to negotiate TLS/SSL session\n", "ca_file", "Certificate Authority database file", "tls_verify", "Verify the peer certificate", "cert_file", "Certificate file", "key_file", "Private key file", "verifyhost", "Verify against a specific hostname", "urlprotocol bio", "%s://", "*pkt_buffer", "libavformat/utils.c", "probing stream %d pp:%d\n", "nothing to probe for stream %d\n", "Probe with size=%d, packets=%d detected %s with score=%d\n", "probed stream %d\n", "probed stream %d failed\n", "libavformat license: LGPL version 2.1 or later", "!dst->codec_whitelist && !dst->format_whitelist", "Failed to duplicate whitelist\n", "Truncating packet of size %d to %lld\n", "Format not on whitelist '%s'\n", "Attached picture on stream %d has invalid size, ignoring\n", "st->codec->ticks_per_frame", "s->iformat", "DTS %lli < %lli out of order\n", "invalid dts/pts combination %lli\n", "first_dts %s not matching first dts %s (pts %s, duration %lld) in the queue\n", "IN delayed:%d pts:%s, dts:%s cur_dts:%s st:%d pc:%p duration:%lld delay:%d onein_oneout:%d\n", "OUTdelayed:%d/%d pts:%s, dts:%s cur_dts:%s\n", "first_dts %s but no packet with dts in the queue\n", "index == 0 || ie[-1].timestamp < timestamp", "Protocol name not provided, cannot determine if input is local or a network protocol, buffers and access patterns cannot be configured optimally without knowing the protocol\n", "pipe", "cache", "Reconfiguring buffers to size %lld\n", "tmp_pos > pos_max", "gen_seek: %d %s\n", "ts_min < ts_max", "pos_min=0x%llx pos_max=0x%llx dts_min=%s dts_max=%s\n", "pos_limit <= pos_max", "%lld %lld %lld / %s %s %s target:%s limit:%lld start:%lld noc:%d\n", "read_timestamp() failed in the middle\n", "read_seek: %d %s\n", "using cached pos_min=0x%llx dts_min=%s\n", "index < st->nb_index_entries", "using cached pos_max=0x%llx pos_limit=0x%llx dts_max=%s\n", "Failed to read extradata of size %d\n", "rfps: %f %f\n", "Setting avg frame rate based on r frame rate\n", "mp4v", "st->request_probe <= 0", "Dropped corrupted packet (stream = %d)\n", "Invalid stream index %d\n", "Failed to reallocate probe buffer for stream %d\n", "Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\n", "ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%lld, flags=%d\n", "parser not found for codec %s, packets or times may be invalid.\n", "demuxer injecting skip %d / discard %d\n", "Could not inject global side data\n", "read_frame_internal stream=%d, pts=%s, dts=%s, size=%d, duration=%lld, flags=%d\n", "st->index_entries", "seek_frame_generic failed as this stream seems to contain no keyframes after the target timestamp, %d non keyframes found\n", "Ignoring outlier non primary stream starttime %f\n", "unspecified frame size", "unspecified pixel format", "unspecified size", "no decodable DTS frames", "unspecified number of channels", "no frame in rv30/40 and no sar", "unspecified sample rate", "unspecified sample format", "unknown codec", "Before avformat_find_stream_info() pos: %lld bytes read:%lld seeks:%d\n", "Failed to open codec in av_find_stream_info\n", "interrupted\n", "All info found\n", "Probe buffer size limit of %lld bytes reached\n", "Stream #%d: not enough frames to estimate rate; consider increasing probesize\n", "** PKT stream:%d \n", "Non-increasing DTS in stream %d: packet %d with DTS %lld, packet %d with DTS %lld\n", "DTS discontinuity in stream %d: packet %d with DTS %lld, packet %d with DTS %lld\n", "max_analyze_duration %lld reached at %lld microseconds st:%d\n", "decoding for stream %d failed\n", "start time for stream %d is not set in estimate_timings_from_pts\n", "stream %d : no PTS found at end of file, duration not set\n", "stream %d : no TS found at start of file, duration not set\n", "Estimating duration from bitrate, this may be inaccurate\n", "stream: start_time: %0.3f duration: %0.3f bitrate=%lld kb/s\n", "%d: start_time: %0.3f duration: %0.3f\n", "After avformat_find_stream_info() pos: %lld bytes read:%lld seeks:%d frames:%d\n", "Could not find codec parameters for stream %d (%s): %s\nConsider increasing the value for the 'analyzeduration' and 'probesize' options\n", "s->nb_streams>0", "s->streams[ s->nb_streams - 1 ] == st", "new_program: id=0x%04x\n", "Chapter end time %lld before start %lld\n", "stream index %d is not valid\n", "%0*d", "Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\n", "Custom AVIOContext makes no sense and will be ignored with AVFMT_NOFILE format.\n", "demuxer does not support additional id3 data, skipping\n", "st:%d removing common factor %d from timebase\n", "st:%d has too large timebase, reducing\n", "Ignoring attempt to set invalid timebase %d/%d for st:%d\n", "Invalid stream specifier: %s.\n", "Unknown bitstream filter '%s'\n", "Automatically inserted bitstream filter '%s'; args='%s'\n", "Failed to open bitstream filter %s for stream %d with codec %s", "Failed to parse creation_time %s\n", "dvbsub", "loas", "mpegvideo", "tail_len <= 5", "libavutil/avstring.c", "'\\''", "%d channels", "3.0(back)", "quad", "quad(side)", "5.0(side)", "5.1(side)", "6.0(front)", "hexagonal", "6.1(front)", "7.0(front)", "7.1(wide)", "7.1(wide-side)", "octagonal", "hexadecagonal", "downmix", "front left", "front right", "front center", "low frequency", "back left", "back right", "front left-of-center", "front right-of-center", "back center", "side left", "side right", "top center", "top front left", "top front center", "top front right", "top back left", "top back center", "top back right", "downmix left", "downmix right", "wide left", "wide right", "surround direct left", "surround direct right", "LFE2", "low frequency 2", "MMX implied by specified flags\n", "detected %d logical cores\n", "armv5te", "armv6", "armv6t2", "vfp_vm", "vfpv3", "neon", "setend", "cpuflags", "Error number %d occurred", "BSF_NOT_FOUND", "Bitstream filter not found", "Internal bug, should not have happened", "BUG2", "BUFFER_TOO_SMALL", "Buffer too small", "DECODER_NOT_FOUND", "Decoder not found", "DEMUXER_NOT_FOUND", "Demuxer not found", "ENCODER_NOT_FOUND", "Encoder not found", "EXIT", "Immediate exit requested", "EXTERNAL", "Generic error in an external library", "FILTER_NOT_FOUND", "Filter not found", "INPUT_CHANGED", "Input changed", "INVALIDDATA", "Invalid data found when processing input", "MUXER_NOT_FOUND", "Muxer not found", "OPTION_NOT_FOUND", "Option not found", "OUTPUT_CHANGED", "Output changed", "PATCHWELCOME", "Not yet implemented in FFmpeg, patches welcome", "PROTOCOL_NOT_FOUND", "Protocol not found", "STREAM_NOT_FOUND", "Stream not found", "UNKNOWN", "Unknown error occurred", "EXPERIMENTAL", "Experimental feature", "INPUT_AND_OUTPUT_CHANGED", "Input and output changed", "HTTP_BAD_REQUEST", "Server returned 400 Bad Request", "HTTP_UNAUTHORIZED", "Server returned 401 Unauthorized (authorization failed)", "HTTP_FORBIDDEN", "Server returned 403 Forbidden (access denied)", "HTTP_NOT_FOUND", "Server returned 404 Not Found", "HTTP_OTHER_4XX", "Server returned 4XX Client Error, but not one of 40{0,1,3,4}", "HTTP_SERVER_ERROR", "Server returned 5XX Server Error reply", "Undefined constant or missing '(' in '%s'\n", "Missing ')' in '%s'\n", "Missing ')' or too many args in '%s'\n", "sinh", "cosh", "tanh", "asin", "acos", "squish", "isnan", "isinf", "while", "taylor", "floor", "ceil", "hypot", "ifnot", "bitand", "bitor", "between", "Unknown function in '%s'\n", "atan", "Invalid chars '%s' at the end of expression '%s'\n", "QP2LAMBDA", "Eval", "Cannot read file '%s': %s\n", "Error occurred in fstat(): %s\n", "Error occurred in mmap(): %s\n", "ff_tempfile: Cannot allocate file name\n", "/tmp/%sXXXXXX", "ff_tempfile: Cannot open temporary file %s\n", "FILE", "AVPanScan", "ATSC A53 Part 4 Closed Captions", "Stereoscopic 3d metadata", "AVMatrixEncoding", "Metadata relevant to a downmix procedure", "AVReplayGain", "3x3 displaymatrix", "Active format description", "Motion vectors", "Skip samples", "Audio service type", "Mastering display metadata", "GOP timecode", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA512/224", "SHA512/256", "SHA384", "SHA512", "CRC32", "adler32", "Picture size %ux%u is invalid\n", "Formats with a palette require a minimum alignment of 4\n", "abs(src_linesize) >= bytewidth", "libavutil/imgutils.c", "abs(dst_linesize) >= bytewidth", "av_image_get_linesize failed\n", "IMGUTILS", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "256color", "quiet", "verbose", "fatal", "panic", "[%s @ %p] ", "[%s] ", "%s%s%s%s", "    Last message repeated %d times\r", "    Last message repeated %d times\n", " is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "in_ts != ((int64_t)0x8000000000000000ULL)", "libavutil/mathematics.c", "duration >= 0", "libavutil/mem_internal.h", "Unable to parse option value \"%s\" as %s\n", "Value %d for parameter '%s' out of %s format range [%d - %d]\n", "Value %f for parameter '%s' out of range [%g - %g]\n", "Value %f for parameter '%s' is not a valid set of 32bit integer flags\n", "size >= 25", "libavutil/opt.c", "INT64_MAX", "INT64_MIN", "%lld:%02d:%02d.%06d", "%d:%02d.%06d", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "FLT_MAX", "FLT_MIN", "-FLT_MAX", "-FLT_MIN", "DBL_MAX", "DBL_MIN", "-DBL_MAX", "-DBL_MIN", "Unable to parse option value \"%s\" as color\n", "Unable to parse option value \"%s\" as image size\n", "Unable to parse option value \"%s\" as video rate\n", "AVOption type %d of option %s not implemented yet\n", "The value set by option '%s' is not an image size.\n", "Invalid negative size value %dx%d for size '%s'\n", "The value set by option '%s' is not a video rate.\n", "The value set by option '%s' is not a %s format", "pixel", "The value set by option '%s' is not a channel layout.\n", "0x%08X", "%02X", "0x%02x%02x%02x%02x", "0x%llx", "The value for option '%s' is not an image size.\n", "The value for option '%s' is not a %s format.\n", "sample", "The value for option '%s' is not a channel layout.\n", "%d%*1[:/]%d%c", "const_values array too small for %s\n", "Unable to parse option value \"%s\"\n", "true,y,yes,enable,enabled,on", "false,n,no,disable,disabled,off", "Unable to parse option value \"%s\" as boolean\n", "pixel format", "Unable to parse option value \"%s\" as duration\n", "Unable to parse option value \"%s\" as channel layout\n", "Invalid option type.\n", "Missing key or no key/value separator found after key '%s'\n", "Setting entry with key '%s' to value '%s'\n", "Error setting option %s to value %s.\n", "  %s%-17s ", "%-12s ", "<flags>", "<int>", "<int64>", "<double>", "<float>", "<string>", "<rational>", "<binary>", "<image_size>", "<video_rate>", "<pix_fmt>", "<sample_fmt>", "<duration>", "<color>", "<channel_layout>", "<boolean>", " (from ", " to ", " (default ", "%llX", "\"%s\"", "     %-15s ", "%s AVOptions:\n", "Not supported option type: %d, option name: %s\n", "Invalid separator(s) found.", "%d:%d%c", "ntsc", "qntsc", "qpal", "sntsc", "spal", "ntsc-film", "bikeshed", "0123456789ABCDEFabcdef", "Invalid 0xRRGGBB[AA] color string: '%s'\n", "Cannot find color '%s'\n", "Invalid alpha value specifier '%s' in '%s'\n", "%H:%M:%S", "%Y - %m - %d", "%Y%m%d", "%H%M%S", "%J:%M:%S", "%M:%S", "%H:%M", "%H%M", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SpringGreen", "SteelBlue", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen", "sqcif", "qcif", "4cif", "16cif", "qqvga", "qvga", "svga", "uxga", "qxga", "sxga", "qsxga", "hsxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd1080", "2kdci", "2kflat", "2kscope", "4kdci", "4kflat", "4kscope", "hqvga", "wqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "bgra", "rgba", "rgb32", "bgr32", "name nb_components nb_bits", "%-11s %7d %10d", "yuvj", "d->log2_chroma_w <= 3", "libavutil/pixdesc.c", "d->log2_chroma_h <= 3", "d->nb_components <= 4", "d->name && d->name[0]", "(d->nb_components==4 || d->nb_components==2) == !!(d->flags & (1 << 7))", "!c->plane && !c->step && !c->offset && !c->shift && !c->depth", "c->step >= c->depth", "8*c->step >= c->depth", "bayer_", "tmp[0] == 0 && tmp[1] == 0", "reserved", "ycgco", "bt2020nc", "bt2020c", "log100", "log316", "iec61966-2-4", "bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-20", "smpte428-1", "yuv420p", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "gray8,y8", "monow", "monob", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "y16be", "gray16le", "y16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "0rgb", "rgb0", "0bgr", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "name   depth", "%-6s   %2d ", "%s%02d:%02d:%02d%c%02d", "%02u:%02u:%02u%c%02u", "Timecode frame rate must be specified\n", "Drop frame is only allowed with 30000/1001 or 60000/1001 FPS\n", "Using non-standard frame rate %d/%d\n", "%d:%d:%d%c%d", "Unable to parse timecode, syntax: hh:mm:ss[:;.]ff\n", "0748dcd", "Libavutil has been built with a broken binutils, please upgrade binutils and rebuild\n", "libavutil license: LGPL version 2.1 or later", "attachment", "!\"valid element size\"", "libavutil/utils.c", "ctx->channels == out->ch_count", "libswresample/audioconvert.c", "s->dither.method < SWR_DITHER_NB", "libswresample/dither.c", "Requested noise shaping dither not available at this sampling rate, using triangular hp dither\n", "!s->preout.count", "SWResampler", "set input channel count", "in_channel_count", "set output channel count", "out_channel_count", "set used channel count", "used_channel_count", "set input sample rate", "in_sample_rate", "set output sample rate", "out_sample_rate", "set input sample format", "in_sample_fmt", "set output sample format", "out_sample_fmt", "set internal sample format", "internal_sample_fmt", "set input channel layout", "in_channel_layout", "set output channel layout", "out_channel_layout", "clev", "set center mix level", "center_mix_level", "set surround mix level", "surround_mix_level", "set surround mix Level", "lfe_mix_level", "set LFE mix level", "rmvol", "set rematrix volume", "rematrix_volume", "rematrix_maxval", "set rematrix maxval", "swr_flags", "force resampling", "dither_scale", "set dither scale", "dither_method", "set dither method", "rectangular", "select rectangular dither", "select triangular dither", "triangular_hp", "select triangular dither with high pass", "lipshitz", "select Lipshitz noise shaping dither", "shibata", "select Shibata noise shaping dither", "low_shibata", "select low Shibata noise shaping dither", "high_shibata", "select high Shibata noise shaping dither", "f_weighted", "select f-weighted noise shaping dither", "modified_e_weighted", "select modified-e-weighted noise shaping dither", "improved_e_weighted", "select improved-e-weighted noise shaping dither", "filter_size", "set swr resampling filter size", "phase_shift", "set swr resampling phase shift", "linear_interp", "enable linear interpolation", "set cutoff frequency ratio", "resample_cutoff", "resampler", "set resampling Engine", "select SW Resampler", "soxr", "select SoX Resampler", "set soxr resampling precision (in bits)", "cheby", "enable soxr Chebyshev passband & higher-precision irrational ratio approximation", "min_comp", "set minimum difference between timestamps and audio data (in seconds) below which no timestamp compensation of either kind is applied", "min_hard_comp", "set minimum difference between timestamps and audio data (in seconds) to trigger padding/trimming the data.", "comp_duration", "set duration (in seconds) over which data is stretched/squeezed to make it match the timestamps.", "max_soft_comp", "set maximum factor by which data is stretched/squeezed to make it match the timestamps.", "async", "simplified 1 parameter audio timestamp matching, 0(disabled), 1(filling and trimming), >1(maximum stretch/squeeze in samples per second)", "first_pts", "Assume the first pts should be this value (in samples).", "matrix_encoding", "set matrixed stereo encoding", "select none", "dolby", "select Dolby", "dplii", "select Dolby Pro Logic II", "filter_type", "select swr filter type", "select cubic", "blackman_nuttall", "select Blackman Nuttall windowed sinc", "kaiser", "select Kaiser windowed sinc", "kaiser_beta", "set swr Kaiser window beta", "output_sample_bits", "set swr number of output sample bits", "Treating %s as mono\n", "Input channel layout '%s' is not supported\n", "Output channel layout '%s' is not supported\n", "libswresample/rematrix.c", "Matrix coefficients:\n", "%s: ", "%s:%f ", "!s->out_ch_layout || out->ch_count == av_get_channel_layout_nb_channels(s->out_ch_layout)", "!s-> in_ch_layout || in ->ch_count == av_get_channel_layout_nb_channels(s-> in_ch_layout)", "a->planar", "libswresample/resample.c", "Unsupported sample format\n", "Filter length too large\n", "phase_count == 1 || phase_count % 2 == 0", "out->planar == in->planar", "libswresample/swresample.c", "out->bps == in->bps", "out->ch_count == in->ch_count", "libswresample license: LGPL version 2.1 or later", "Failed to set option\n", "Requested input sample format %d is invalid\n", "Requested output sample format %d is invalid\n", "Input channel layout 0x%llx is invalid or unsupported.\n", "Output channel layout 0x%llx is invalid or unsupported.\n", "Requested resampling engine is unavailable\n", "Input channel layout has a different number of channels than the number of used channels, ignoring layout\n", "Using %s internally between filters\n", "Requested sample format %s is not supported internally, S16/S32/FLT/DBL is supported\n", "Failed to initialize resampler\n", "Resampling only supported with internal s16/s32/flt/dbl\n", "!s->in_ch_layout", "Input channel count and layout are unset\n", "Output channel layout %s mismatches specified channel count %d\n", "Input channel layout %s mismatches specified channel count %d\n", "Rematrix is needed between %s and %s but there is not enough information to do it\n", "s->used_ch_count", "s->out.ch_count", "a->bps", "a->ch_count", "s->midbuf.ch_count == s->used_ch_count", "s->midbuf.ch_count == s->out.ch_count", "s->in.planar", "s->dither.noise.ch_count == preout->ch_count", "Context has not been initialized\n", "s->drop_output", "!s->resample", "discarding %d audio samples\n", "adding %d audio samples of silence\n", "s->out_sample_rate == s->in_sample_rate", "Failed to compensate for timestamp delta of %f\n", "compensating audio timestamp drift:%f compensation:%d in:%d\n", "plane_count == nb_components - 1", "libswscale/alphablend.c", "libswscale/swscale_internal.h", "swscaler", "SWScaler", "scaler flags", "fast_bilinear", "fast bilinear", "bicubic", "neighbor", "nearest neighbor", "area", "averaging area", "bicublin", "luma bicubic, chroma bilinear", "Gaussian", "sinc", "spline", "natural bicubic spline", "print_info", "print info", "accurate_rnd", "accurate rounding", "full_chroma_int", "full chroma interpolation", "full_chroma_inp", "full chroma input", "error_diffusion", "error diffusion dither", "source width", "source height", "destination width", "destination height", "source format", "destination format", "source is full range", "destination is full range", "scaler param 0", "scaler param 1", "source vertical chroma position in luma grid/256", "source horizontal chroma position in luma grid/256", "destination vertical chroma position in luma grid/256", "destination horizontal chroma position in luma grid/256", "sws_dither", "set dithering algorithm", "leave choice to sws", "bayer dither", "error diffusion", "a_dither", "arithmetic addition dither", "x_dither", "arithmetic xor dither", "gamma correct scaling", "alphablend", "mode for alpha -> non alpha", "ignore alpha", "uniform_color", "blend onto a uniform color", "blend onto a checkerboard", "libswscale/output.c", "n == s->plane[ii].available_lines", "libswscale/slice.c", "Warning: dstStride is not aligned!\n         ->cannot do aligned memory accesses anymore\n", "firstLumSrcY >= lastInLumBuf - vLumBufSize + 1", "libswscale/swscale.c", "firstChrSrcY >= lastInChrBuf - vChrBufSize + 1", "One of the input parameters to sws_scale() is NULL, please check the calling code\n", "Slice parameters %d, %d are invalid\n", "Slices start in the middle!\n", "bad src image pointers\n", "bad dst image pointers\n", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "srcSliceH > 1", "libswscale/swscale_unscaled.c", "internal error %s -> %s converter\n", "unsupported bayer conversion\n", "sizeFactor > 0", "libswscale/utils.c", "filter2Size > 0", "minFilterSize > 0", "SwScaler: reducing / aligning filtersize %d -> %d\n", "(*filterPos)[i] >= 0", "(*filterPos)[i] < srcW", "(*filterPos)[i] + j < srcW || !filter[i * filterSize + j]", "SwScaler: zero vector in scaling\n", "sws: initFilter failed\n", "libswscale license: LGPL version 2.1 or later", "%1.3f ", "ehh flags invalid?!", "dithered ", "deprecated pixel format used, make sure you did set range correctly\n", "%s is not supported as input pixel format\n", "%s is not supported as output pixel format\n", "Exactly one scaler algorithm must be chosen, got %X\n", "%dx%d -> %dx%d is invalid scaling dimension\n", "Forcing full internal H chroma due to odd output size\n", "Forcing full internal H chroma due to input having non subsampled chroma\n", "Desired dithering only supported in full chroma interpolation for destination format '%s'\n", "Ordered dither is not supported in full chroma interpolation for destination format '%s'\n", "%s output is not supported with half chroma resolution, switching to full\n", "full chroma interpolation for destination format '%s' not yet implemented\n", "c->dstBpc > 14", "c->chrDstH <= dstH", "%s scaler, from %s to %s%s ", "using %s\n", "%dx%d -> %dx%d\n", "lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "using alpha blendaway %s -> %s special converter\n", "using unscaled %s -> %s special converter\n", "YUV color matrix differs for YUV->YUV, using intermediate RGB to convert\n", "area averaging", "luma bicubic / chroma bilinear", "nearest neighbor / point", "bicubic spline", "Optimized 2 tap filter code cannot be used\n", "No accelerated colorspace conversion found from %s to %s.\n", "%ibpp not supported by yuv2rgb\n", "orange siwth for armv7: hevc opt is %lld. \n", "/proc/self/auxv", "/proc/cpuinfo", "Features", "t1_lib.c", "ECDSA", "client finished", "server finished", "t1_enc.c", "chunk >= 0", "client write key", "server write key", "IV block", "key expansion", "n >= 0", "%s:%d: rec->data != rec->input\n", "t >= 0", "master secret", "t1_ext.c", "!(meth->ext_flags & SSL_EXT_FLAG_SENT)", "d1_srtp.c", "SRTP_AES128_CM_SHA1_80", "SRTP_AES128_CM_SHA1_32", "ssl_lib.c", "SSLv2", "ALL:!EXPORT:!LOW:!aNULL:!eNULL:!SSLv2", "ssl2-md5", "ssl3-md5", "ssl3-sha1", "TLSv1.2", "TLSv1.1", "TLSv1", "SSLv3", "DTLSv0.9", "DTLSv1", "DTLSv1.2", "ssl->sid_ctx_length <= sizeof(ssl->sid_ctx)", "s->sid_ctx_length <= sizeof(s->sid_ctx)", "OpenSSL 1.0.2p-dev  xx XXX xxxx", "ssl_cert.c", "SSL for verify callback", "ssl_client", "ssl_server", "%s/%s", "OPENSSL_DIR_read(&ctx, '", "Verify error:", "ssl_sess.c", "SSL SESSION PARAMETERS", "ssl_ciph.c", "STRENGTH", "DES-CBC", "DES-EDE3-CBC", "RC2-CBC", "IDEA-CBC", "AES-128-CBC", "AES-256-CBC", "CAMELLIA-128-CBC", "CAMELLIA-256-CBC", "gost89-cnt", "SEED-CBC", "id-aes128-GCM", "id-aes256-GCM", "ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0", "SHA1", "ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0", "md_gost94", "ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0", "gost-mac", "RC4-HMAC-MD5", "AES-128-CBC-HMAC-SHA1", "AES-256-CBC-HMAC-SHA1", "AES-128-CBC-HMAC-SHA256", "AES-256-CBC-HMAC-SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-ECDSA-AES128-GCM-SHA256", "SUITEB128ONLY", "SUITEB128C2", "SUITEB128", "SUITEB192", "gost2001", "DEFAULT", "gost94", " export", "DH/RSA", "DH/DSS", "KRB5", "ECDH/RSA", "ECDH/ECDSA", "ECDH", "GOST", "DH(1024)", "DH(512)", "RSA(1024)", "RSA(512)", "None", "GOST94", "GOST01", "DES(56)", "3DES(168)", "RC4(128)", "RC2(128)", "IDEA(128)", "AES(128)", "AES(256)", "AESGCM(128)", "AESGCM(256)", "Camellia(128)", "Camellia(256)", "SEED(128)", "GOST89(256)", "RC2(56)", "RC2(40)", "RC4(56)", "RC4(64)", "RC4(40)", "DES(40)", "AEAD", "GOST89", "OPENSSL_malloc Error", "%-23s %s Kx=%-8s Au=%-4s Enc=%-9s Mac=%-4s%s\n", "(NONE)", "TLSv1/SSLv3", "COMPLEMENTOFALL", "COMPLEMENTOFDEFAULT", "kRSA", "kDHr", "kDHd", "kEDH", "kDHE", "kKRB5", "kECDHr", "kECDHe", "kECDH", "kEECDH", "kECDHE", "kPSK", "kSRP", "kGOST", "aRSA", "aDSS", "aKRB5", "aNULL", "aECDH", "aECDSA", "aPSK", "aGOST94", "aGOST01", "aGOST", "aSRP", "EECDH", "ECDHE", "AECDH", "3DES", "IDEA", "SEED", "eNULL", "AES128", "AES256", "AESGCM", "CAMELLIA128", "CAMELLIA256", "CAMELLIA", "GOST89MAC", "EXPORT", "EXPORT40", "EXPORT56", "MEDIUM", "HIGH", "FIPS", "EXP-DHE-DSS-DES-CBC-SHA", "DHE-DSS-DES-CBC-SHA", "DHE-DSS-DES-CBC3-SHA", "EXP-DHE-RSA-DES-CBC-SHA", "DHE-RSA-DES-CBC-SHA", "DHE-RSA-DES-CBC3-SHA", "before SSL initialization", "before accept initialization", "before connect initialization", "SSL negotiation finished successfully", "SSL renegotiate ciphers", "before/connect initialization", "ok/connect SSL initialization", "before/accept initialization", "ok/accept SSL initialization", "SSLv3 write client hello A", "SSLv3 write client hello B", "SSLv3 read server hello A", "SSLv3 read server hello B", "SSLv3 read server certificate A", "SSLv3 read server certificate B", "SSLv3 read server key exchange A", "SSLv3 read server key exchange B", "SSLv3 read server certificate request A", "SSLv3 read server certificate request B", "SSLv3 read server session ticket A", "SSLv3 read server session ticket B", "SSLv3 read server done A", "SSLv3 read server done B", "SSLv3 write client certificate A", "SSLv3 write client certificate B", "SSLv3 write client certificate C", "SSLv3 write client certificate D", "SSLv3 write client key exchange A", "SSLv3 write client key exchange B", "SSLv3 write certificate verify A", "SSLv3 write certificate verify B", "SSLv3 write change cipher spec A", "SSLv3 write change cipher spec B", "SSLv3 write finished A", "SSLv3 write finished B", "SSLv3 read change cipher spec A", "SSLv3 read change cipher spec B", "SSLv3 read finished A", "SSLv3 read finished B", "SSLv3 flush data", "SSLv3 read client hello A", "SSLv3 read client hello B", "SSLv3 read client hello C", "SSLv3 write hello request A", "SSLv3 write hello request B", "SSLv3 write hello request C", "SSLv3 write server hello A", "SSLv3 write server hello B", "SSLv3 write certificate A", "SSLv3 write certificate B", "SSLv3 write key exchange A", "SSLv3 write key exchange B", "SSLv3 write certificate request A", "SSLv3 write certificate request B", "SSLv3 write session ticket A", "SSLv3 write session ticket B", "SSLv3 write server done A", "SSLv3 write server done B", "SSLv3 read client certificate A", "SSLv3 read client certificate B", "SSLv3 read client key exchange A", "SSLv3 read client key exchange B", "SSLv3 read certificate verify A", "SSLv3 read certificate verify B", "SSLv2/v3 write client hello A", "SSLv2/v3 write client hello B", "SSLv2/v3 read server hello A", "SSLv2/v3 read server hello B", "SSLv2/v3 read client hello A", "SSLv2/v3 read client hello B", "DTLS1 read hello verify request A", "DTLS1 read hello verify request B", "DTLS1 write hello verify request A", "DTLS1 write hello verify request B", "unknown state", "read header", "read body", "read done", "PINIT ", "AINIT ", "CINIT ", "SSLOK ", "SSLERR", "3FLUSH", "3WCH_A", "3WCH_B", "3RSH_A", "3RSH_B", "3RSC_A", "3RSC_B", "3RSKEA", "3RSKEB", "3RCR_A", "3RCR_B", "3RSD_A", "3RSD_B", "3WCC_A", "3WCC_B", "3WCC_C", "3WCC_D", "3WCKEA", "3WCKEB", "3WCV_A", "3WCV_B", "3WCCSA", "3WCCSB", "3WFINA", "3WFINB", "3RCCSA", "3RCCSB", "3RFINA", "3RFINB", "3WHR_A", "3WHR_B", "3WHR_C", "3RCH_A", "3RCH_B", "3RCH_C", "3WSH_A", "3WSH_B", "3WSC_A", "3WSC_B", "3WSKEA", "3WSKEB", "3WCR_A", "3WCR_B", "3WSD_A", "3WSD_B", "3RCC_A", "3RCC_B", "3RCKEA", "3RCKEB", "3RCV_A", "3RCV_B", "23WCHA", "23WCHB", "23RSHA", "23RCHA", "23RCHB", "DRCHVA", "DRCHVB", "DWCHVA", "DWCHVB", "UNKWN ", "close notify", "unexpected_message", "bad record mac", "decompression failure", "handshake failure", "no certificate", "bad certificate", "unsupported certificate", "certificate revoked", "certificate expired", "certificate unknown", "illegal parameter", "decryption failed", "record overflow", "unknown CA", "access denied", "decode error", "decrypt error", "export restriction", "protocol version", "insufficient security", "internal error", "user canceled", "no renegotiation", "unsupported extension", "certificate unobtainable", "unrecognized name", "bad certificate status response", "bad certificate hash value", "unknown PSK identity", "ssl_rsa.c", "SERVERINFO FOR ", "ssl_asn1.c", "RSA-SHA1-2", "RSA-SHA1", "DSA-SHA1-old", "DSA-SHA1", "DSS1", "dss1", "app data in handshake", "attempt to reuse session in different context", "bad alert record", "bad authentication type", "bad change cipher spec", "bad checksum", "bad data", "bad data returned by callback", "bad decompression", "bad dh g length", "bad dh g value", "bad dh pub key length", "bad dh pub key value", "bad dh p length", "bad dh p value", "bad digest length", "bad dsa signature", "bad ecc cert", "bad ecdsa signature", "bad ecpoint", "bad handshake length", "bad hello request", "bad length", "bad mac decode", "bad mac length", "bad message type", "bad packet length", "bad protocol version number", "bad psk identity hint length", "bad response argument", "bad rsa decrypt", "bad rsa encrypt", "bad rsa e length", "bad rsa modulus length", "bad rsa signature", "bad signature", "bad srp a length", "bad srp b length", "bad srp g length", "bad srp n length", "bad srp parameters", "bad srp s length", "bad srtp mki value", "bad srtp protection profile list", "bad ssl filetype", "bad ssl session id length", "bad state", "bad value", "bad write retry", "bio not set", "block cipher pad is wrong", "bn lib", "ca dn length mismatch", "ca dn too long", "ccs received early", "certificate verify failed", "cert cb error", "cert length mismatch", "challenge is different", "cipher code wrong length", "cipher or hash unavailable", "cipher table src error", "clienthello tlsext", "compressed length too long", "compression disabled", "compression failure", "compression id not within private range", "compression library error", "connection id is different", "connection type not set", "cookie mismatch", "data between ccs and finished", "data length too long", "decryption failed or bad record mac", "dh key too small", "dh public value length is wrong", "digest check failed", "dtls message too big", "duplicate compression id", "ecc cert not for key agreement", "ecc cert not for signing", "ecc cert should have rsa signature", "ecc cert should have sha1 signature", "ecdh required for suiteb mode", "ecgroup too large for cipher", "empty srtp protection profile list", "encrypted length too long", "error generating tmp rsa key", "error in received cipher list", "excessive message size", "extra data in message", "got a fin before a ccs", "got next proto before a ccs", "got next proto without seeing extension", "https proxy request", "http request", "illegal padding", "illegal Suite B digest", "inappropriate fallback", "inconsistent compression", "invalid challenge length", "invalid command", "invalid compression algorithm", "invalid null cmd name", "invalid purpose", "invalid serverinfo data", "invalid srp username", "invalid status response", "invalid ticket keys length", "invalid trust", "key arg too long", "krb5", "krb5 client cc principal (no tkt?)", "krb5 client get cred", "krb5 client init", "krb5 client mk_req (expired tkt?)", "krb5 server bad ticket", "krb5 server init", "krb5 server rd_req (keytab perms?)", "krb5 server tkt expired", "krb5 server tkt not yet valid", "krb5 server tkt skew", "length mismatch", "length too short", "library bug", "library has no ciphers", "message too long", "missing dh dsa cert", "missing dh key", "missing dh rsa cert", "missing dsa signing cert", "missing ecdh cert", "missing ecdsa signing cert", "missing export tmp dh key", "missing export tmp rsa key", "missing rsa certificate", "missing rsa encrypting cert", "missing rsa signing cert", "can't find SRP server param", "missing tmp dh key", "missing tmp ecdh key", "missing tmp rsa key", "missing tmp rsa pkey", "missing verify message", "multiple sgc restarts", "non sslv2 initial packet", "no certificates returned", "no certificate assigned", "no certificate returned", "no certificate set", "no certificate specified", "no ciphers available", "no ciphers passed", "no ciphers specified", "no cipher list", "no cipher match", "no client cert method", "no client cert received", "no compression specified", "Peer haven't sent GOST certificate, required for selected ciphersuite", "no method specified", "no pem extensions", "no privatekey", "no private key assigned", "no protocols available", "no publickey", "digest requred for handshake isn't computed", "no shared cipher", "no shared sigature algorithms", "no srtp profiles", "no verify callback", "null ssl ctx", "null ssl method passed", "old session cipher not returned", "old session compression algorithm not returned", "only DTLS 1.2 allowed in Suite B mode", "only TLS 1.2 allowed in Suite B mode", "only tls allowed in fips mode", "opaque PRF input too long", "packet length too long", "parse tlsext", "path too long", "peer did not return a certificate", "peer error", "peer error certificate", "peer error no certificate", "peer error no cipher", "peer error unsupported certificate type", "pem name bad prefix", "pem name too short", "pre mac length too long", "problems mapping cipher functions", "protocol is shutdown", "psk identity not found", "psk no client cb", "psk no server cb", "public key encrypt error", "public key is not rsa", "public key not rsa", "read bio not set", "read timeout expired", "read wrong packet type", "record length mismatch", "record too large", "record too small", "renegotiate ext too long", "renegotiation encoding err", "renegotiation mismatch", "required cipher missing", "required compresssion algorithm missing", "reuse cert length not zero", "reuse cert type not zero", "reuse cipher list not zero", "scsv received when renegotiating", "serverhello tlsext", "session id context uninitialized", "short read", "shutdown while in init", "signature algorithms error", "signature for non signing certificate", "error with the srp params", "srtp could not allocate profiles", "srtp protection profile list too long", "srtp unknown protection profile", "ssl23 doing session id reuse", "ssl2 connection id too long", "ssl3 ext invalid ecpointformat", "ssl3 ext invalid servername", "ssl3 ext invalid servername type", "ssl3 session id too long", "ssl3 session id too short", "sslv3 alert bad certificate", "sslv3 alert bad record mac", "sslv3 alert certificate expired", "sslv3 alert certificate revoked", "sslv3 alert certificate unknown", "sslv3 alert decompression failure", "sslv3 alert handshake failure", "sslv3 alert illegal parameter", "sslv3 alert no certificate", "sslv3 alert unexpected message", "sslv3 alert unsupported certificate", "ssl ctx has no default ssl version", "ssl handshake failure", "ssl library has no ciphers", "ssl session id callback failed", "ssl session id conflict", "ssl session id context too long", "ssl session id has bad length", "ssl session id is different", "tlsv1 alert access denied", "tlsv1 alert decode error", "tlsv1 alert decryption failed", "tlsv1 alert decrypt error", "tlsv1 alert export restriction", "tlsv1 alert inappropriate fallback", "tlsv1 alert insufficient security", "tlsv1 alert internal error", "tlsv1 alert no renegotiation", "tlsv1 alert protocol version", "tlsv1 alert record overflow", "tlsv1 alert unknown ca", "tlsv1 alert user cancelled", "tlsv1 bad certificate hash value", "tlsv1 bad certificate status response", "tlsv1 certificate unobtainable", "tlsv1 unrecognized name", "tlsv1 unsupported extension", "tls client cert req with anon cipher", "peer does not accept heartbeats", "heartbeat request already pending", "tls illegal exporter label", "tls invalid ecpointformat list", "too many warn alerts", "tls peer did not respond with certificate list", "tls rsa encrypted value length is wrong", "tried to use unsupported cipher", "unable to decode dh certs", "unable to decode ecdh certs", "unable to extract public key", "unable to find dh parameters", "unable to find ecdh parameters", "unable to find public key parameters", "unable to find ssl method", "unable to load ssl2 md5 routines", "unable to load ssl3 md5 routines", "unable to load ssl3 sha1 routines", "unexpected message", "unexpected record", "uninitialized", "unknown alert type", "unknown certificate type", "unknown cipher returned", "unknown cipher type", "unknown cmd name", "unknown digest", "unknown key exchange type", "unknown pkey type", "unknown protocol", "unknown remote error type", "unknown ssl version", "unsafe legacy renegotiation disabled", "unsupported cipher", "unsupported compression algorithm", "unsupported digest type", "unsupported elliptic curve", "unsupported protocol", "unsupported ssl version", "unsupported status type", "use srtp not negotiated", "write bio not set", "wrong certificate type", "wrong cipher returned", "wrong curve", "wrong message type", "wrong number of key bits", "wrong signature length", "wrong signature size", "wrong signature type", "wrong ssl version", "wrong version number", "x509 lib", "x509 verification setup problems", "CHECK_SUITEB_CIPHER_LIST", "CLIENT_CERTIFICATE", "CLIENT_FINISHED", "CLIENT_HELLO", "CLIENT_MASTER_KEY", "d2i_SSL_SESSION", "do_dtls1_write", "DO_SSL3_WRITE", "dtls1_accept", "DTLS1_ADD_CERT_TO_BUF", "DTLS1_BUFFER_RECORD", "dtls1_check_timeout_num", "dtls1_client_hello", "dtls1_connect", "DTLS1_GET_HELLO_VERIFY", "dtls1_get_message", "DTLS1_GET_MESSAGE_FRAGMENT", "dtls1_get_record", "dtls1_handle_timeout", "dtls1_heartbeat", "dtls1_output_cert_chain", "DTLS1_PREPROCESS_FRAGMENT", "DTLS1_PROCESS_BUFFERED_RECORDS", "DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE", "DTLS1_PROCESS_RECORD", "dtls1_read_bytes", "dtls1_read_failed", "dtls1_send_certificate_request", "dtls1_send_client_certificate", "dtls1_send_client_key_exchange", "dtls1_send_client_verify", "DTLS1_SEND_HELLO_VERIFY_REQUEST", "dtls1_send_server_certificate", "dtls1_send_server_hello", "dtls1_send_server_key_exchange", "dtls1_write_app_data_bytes", "GET_CLIENT_FINISHED", "GET_CLIENT_HELLO", "GET_CLIENT_MASTER_KEY", "GET_SERVER_FINISHED", "GET_SERVER_HELLO", "GET_SERVER_STATIC_DH_KEY", "GET_SERVER_VERIFY", "i2d_SSL_SESSION", "READ_N", "REQUEST_CERTIFICATE", "SERVER_FINISH", "SERVER_HELLO", "SERVER_VERIFY", "ssl23_accept", "SSL23_CLIENT_HELLO", "ssl23_connect", "SSL23_GET_CLIENT_HELLO", "SSL23_GET_SERVER_HELLO", "ssl23_peek", "ssl23_read", "ssl23_write", "ssl2_accept", "ssl2_connect", "ssl2_enc_init", "ssl2_generate_key_material", "ssl2_peek", "ssl2_read", "SSL2_READ_INTERNAL", "ssl2_set_certificate", "ssl2_write", "ssl3_accept", "SSL3_ADD_CERT_TO_BUF", "ssl3_callback_ctrl", "ssl3_change_cipher_state", "ssl3_check_cert_and_algorithm", "ssl3_check_client_hello", "SSL3_CHECK_FINISHED", "ssl3_client_hello", "ssl3_connect", "ssl3_ctrl", "ssl3_ctx_ctrl", "ssl3_digest_cached_records", "ssl3_do_change_cipher_spec", "ssl3_enc", "SSL3_GENERATE_KEY_BLOCK", "ssl3_generate_master_secret", "ssl3_get_certificate_request", "ssl3_get_cert_status", "ssl3_get_cert_verify", "ssl3_get_client_certificate", "ssl3_get_client_hello", "ssl3_get_client_key_exchange", "ssl3_get_finished", "ssl3_get_key_exchange", "ssl3_get_message", "ssl3_get_new_session_ticket", "ssl3_get_next_proto", "SSL3_GET_RECORD", "ssl3_get_server_certificate", "ssl3_get_server_done", "ssl3_get_server_hello", "ssl3_handshake_mac", "SSL3_NEW_SESSION_TICKET", "ssl3_output_cert_chain", "ssl3_peek", "ssl3_read_bytes", "ssl3_read_n", "ssl3_send_certificate_request", "ssl3_send_client_certificate", "ssl3_send_client_key_exchange", "ssl3_send_client_verify", "ssl3_send_server_certificate", "ssl3_send_server_hello", "ssl3_send_server_key_exchange", "ssl3_setup_key_block", "ssl3_setup_read_buffer", "ssl3_setup_write_buffer", "ssl3_write_bytes", "ssl3_write_pending", "ssl_add_cert_chain", "SSL_ADD_CERT_TO_BUF", "ssl_add_clienthello_renegotiate_ext", "ssl_add_clienthello_tlsext", "ssl_add_clienthello_use_srtp_ext", "SSL_add_dir_cert_subjects_to_stack", "SSL_add_file_cert_subjects_to_stack", "ssl_add_serverhello_renegotiate_ext", "ssl_add_serverhello_tlsext", "ssl_add_serverhello_use_srtp_ext", "ssl_bad_method", "ssl_build_cert_chain", "ssl_bytes_to_cipher_list", "ssl_cert_dup", "ssl_cert_inst", "SSL_CERT_INSTANTIATE", "ssl_cert_new", "SSL_check_private_key", "SSL_CHECK_SERVERHELLO_TLSEXT", "ssl_check_srvr_ecc_cert_and_alg", "SSL_CIPHER_PROCESS_RULESTR", "SSL_CIPHER_STRENGTH_SORT", "SSL_clear", "SSL_COMP_add_compression_method", "SSL_CONF_cmd", "ssl_create_cipher_list", "SSL_ctrl", "SSL_CTX_check_private_key", "SSL_CTX_MAKE_PROFILES", "SSL_CTX_new", "SSL_CTX_set_cipher_list", "SSL_CTX_set_client_cert_engine", "SSL_CTX_set_purpose", "SSL_CTX_set_session_id_context", "SSL_CTX_set_ssl_version", "SSL_CTX_set_trust", "SSL_CTX_use_certificate", "SSL_CTX_use_certificate_ASN1", "SSL_CTX_use_certificate_chain_file", "SSL_CTX_use_certificate_file", "SSL_CTX_use_PrivateKey", "SSL_CTX_use_PrivateKey_ASN1", "SSL_CTX_use_PrivateKey_file", "SSL_CTX_use_psk_identity_hint", "SSL_CTX_use_RSAPrivateKey", "SSL_CTX_use_RSAPrivateKey_ASN1", "SSL_CTX_use_RSAPrivateKey_file", "SSL_CTX_use_serverinfo", "SSL_CTX_use_serverinfo_file", "SSL_do_handshake", "ssl_get_new_session", "ssl_get_prev_session", "SSL_GET_SERVER_CERT_INDEX", "SSL_GET_SERVER_SEND_CERT", "ssl_get_server_send_pkey", "ssl_get_sign_pkey", "ssl_init_wbio_buffer", "SSL_load_client_CA_file", "SSL_new", "ssl_parse_clienthello_renegotiate_ext", "ssl_parse_clienthello_tlsext", "ssl_parse_clienthello_use_srtp_ext", "ssl_parse_serverhello_renegotiate_ext", "ssl_parse_serverhello_tlsext", "ssl_parse_serverhello_use_srtp_ext", "SSL_peek", "ssl_prepare_clienthello_tlsext", "ssl_prepare_serverhello_tlsext", "SSL_read", "SSL_RSA_PRIVATE_DECRYPT", "SSL_RSA_PUBLIC_ENCRYPT", "SSL_SCAN_CLIENTHELLO_TLSEXT", "SSL_SCAN_SERVERHELLO_TLSEXT", "ssl_session_dup", "SSL_SESSION_new", "SSL_SESSION_print_fp", "SSL_SESSION_set1_id_context", "ssl_sess_cert_new", "SSL_SET_CERT", "SSL_set_cipher_list", "SSL_set_fd", "SSL_SET_PKEY", "SSL_set_purpose", "SSL_set_rfd", "SSL_set_session", "SSL_set_session_id_context", "SSL_set_session_ticket_ext", "SSL_set_trust", "SSL_set_wfd", "SSL_shutdown", "SSL_SRP_CTX_init", "ssl_undefined_const_function", "ssl_undefined_function", "ssl_undefined_void_function", "SSL_use_certificate", "SSL_use_certificate_ASN1", "SSL_use_certificate_file", "SSL_use_PrivateKey", "SSL_use_PrivateKey_ASN1", "SSL_use_PrivateKey_file", "SSL_use_psk_identity_hint", "SSL_use_RSAPrivateKey", "SSL_use_RSAPrivateKey_ASN1", "SSL_use_RSAPrivateKey_file", "ssl_verify_cert_chain", "SSL_write", "tls12_check_peer_sigalg", "tls1_cert_verify_mac", "tls1_change_cipher_state", "TLS1_CHECK_SERVERHELLO_TLSEXT", "tls1_enc", "tls1_export_keying_material", "TLS1_GET_CURVELIST", "tls1_heartbeat", "TLS1_PREPARE_CLIENTHELLO_TLSEXT", "TLS1_PREPARE_SERVERHELLO_TLSEXT", "tls1_prf", "tls1_setup_key_block", "tls1_set_server_sigalgs", "WRITE_PENDING", "t1_reneg.c", "!expected_len || s->s3->previous_client_finished_len", "!expected_len || s->s3->previous_server_finished_len", "tls_srp.c", "s3_srvr.c", "s3_clnt.c", "s3_lib.c", "CLNT", "SRVR", "NULL-MD5", "NULL-SHA", "RC4-MD5", "RC4-SHA", "IDEA-CBC-SHA", "DES-CBC3-SHA", "DH-DSS-DES-CBC3-SHA", "DH-RSA-DES-CBC3-SHA", "EDH-DSS-DES-CBC3-SHA", "EDH-RSA-DES-CBC3-SHA", "ADH-RC4-MD5", "ADH-DES-CBC3-SHA", "AES128-SHA", "DH-DSS-AES128-SHA", "DH-RSA-AES128-SHA", "DHE-DSS-AES128-SHA", "DHE-RSA-AES128-SHA", "ADH-AES128-SHA", "AES256-SHA", "DH-DSS-AES256-SHA", "DH-RSA-AES256-SHA", "DHE-DSS-AES256-SHA", "DHE-RSA-AES256-SHA", "ADH-AES256-SHA", "NULL-SHA256", "AES128-SHA256", "AES256-SHA256", "DH-DSS-AES128-SHA256", "DH-RSA-AES128-SHA256", "DHE-DSS-AES128-SHA256", "CAMELLIA128-SHA", "DH-DSS-CAMELLIA128-SHA", "DH-RSA-CAMELLIA128-SHA", "DHE-DSS-CAMELLIA128-SHA", "DHE-RSA-CAMELLIA128-SHA", "ADH-CAMELLIA128-SHA", "DHE-RSA-AES128-SHA256", "DH-DSS-AES256-SHA256", "DH-RSA-AES256-SHA256", "DHE-DSS-AES256-SHA256", "DHE-RSA-AES256-SHA256", "ADH-AES128-SHA256", "ADH-AES256-SHA256", "GOST94-GOST89-GOST89", "GOST2001-GOST89-GOST89", "GOST94-NULL-GOST94", "GOST2001-NULL-GOST94", "CAMELLIA256-SHA", "DH-DSS-CAMELLIA256-SHA", "DH-RSA-CAMELLIA256-SHA", "DHE-DSS-CAMELLIA256-SHA", "DHE-RSA-CAMELLIA256-SHA", "ADH-CAMELLIA256-SHA", "PSK-RC4-SHA", "PSK-3DES-EDE-CBC-SHA", "PSK-AES128-CBC-SHA", "PSK-AES256-CBC-SHA", "SEED-SHA", "DH-DSS-SEED-SHA", "DH-RSA-SEED-SHA", "DHE-DSS-SEED-SHA", "DHE-RSA-SEED-SHA", "ADH-SEED-SHA", "AES128-GCM-SHA256", "AES256-GCM-SHA384", "DHE-RSA-AES128-GCM-SHA256", "DHE-RSA-AES256-GCM-SHA384", "DH-RSA-AES128-GCM-SHA256", "DH-RSA-AES256-GCM-SHA384", "DHE-DSS-AES128-GCM-SHA256", "DHE-DSS-AES256-GCM-SHA384", "DH-DSS-AES128-GCM-SHA256", "DH-DSS-AES256-GCM-SHA384", "ADH-AES128-GCM-SHA256", "ADH-AES256-GCM-SHA384", "ECDH-ECDSA-NULL-SHA", "ECDH-ECDSA-RC4-SHA", "ECDH-ECDSA-DES-CBC3-SHA", "ECDH-ECDSA-AES128-SHA", "ECDH-ECDSA-AES256-SHA", "ECDHE-ECDSA-NULL-SHA", "ECDHE-ECDSA-RC4-SHA", "ECDHE-ECDSA-DES-CBC3-SHA", "ECDHE-ECDSA-AES128-SHA", "ECDHE-ECDSA-AES256-SHA", "ECDH-RSA-NULL-SHA", "ECDH-RSA-RC4-SHA", "ECDH-RSA-DES-CBC3-SHA", "ECDH-RSA-AES128-SHA", "ECDH-RSA-AES256-SHA", "ECDHE-RSA-NULL-SHA", "ECDHE-RSA-RC4-SHA", "ECDHE-RSA-DES-CBC3-SHA", "ECDHE-RSA-AES128-SHA", "ECDHE-RSA-AES256-SHA", "AECDH-NULL-SHA", "AECDH-RC4-SHA", "AECDH-DES-CBC3-SHA", "AECDH-AES128-SHA", "AECDH-AES256-SHA", "SRP-3DES-EDE-CBC-SHA", "SRP-RSA-3DES-EDE-CBC-SHA", "SRP-DSS-3DES-EDE-CBC-SHA", "SRP-AES-128-CBC-SHA", "SRP-RSA-AES-128-CBC-SHA", "SRP-DSS-AES-128-CBC-SHA", "SRP-AES-256-CBC-SHA", "SRP-RSA-AES-256-CBC-SHA", "SRP-DSS-AES-256-CBC-SHA", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-ECDSA-AES256-SHA384", "ECDH-ECDSA-AES128-SHA256", "ECDH-ECDSA-AES256-SHA384", "ECDHE-RSA-AES128-SHA256", "ECDHE-RSA-AES256-SHA384", "ECDH-RSA-AES128-SHA256", "ECDH-RSA-AES256-SHA384", "ECDH-ECDSA-AES128-GCM-SHA256", "ECDH-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-RSA-AES256-GCM-SHA384", "ECDH-RSA-AES128-GCM-SHA256", "ECDH-RSA-AES256-GCM-SHA384", "s3_enc.c", "s3_pkt.c", "s->s3->wnum <= INT_MAX", "mac_size <= EVP_MAX_MD_SIZE", "SSL alert number ", "s3_both.c", "i <= EVP_MAX_MD_SIZE", "s3_cbc.c", "orig_len >= md_size", "md_size <= EVP_MAX_MD_SIZE", "data_plus_mac_plus_padding_size < 1024 * 1024", "mac_secret_length <= sizeof(hmac_pad)", "s23_srvr.c", "GET ", "POST ", "HEAD ", "PUT ", "CONNECT", "s->version <= TLS_MAX_VERSION", "s23_clnt.c", "s23_lib.c", "d1_srvr.c", "d1_clnt.c", "d1_lib.c", "d1_pkt.c", "len <= SSL3_RT_MAX_PLAIN_LENGTH", "d1_both.c", "((long)msg_hdr->msg_len) > 0", "item != NULL", "s->init_off == 0", "s->d1->w_msg_hdr.msg_len + ((s->version==DTLS1_BAD_VER)?3:DTLS1_CCS_HEADER_LENGTH) == (unsigned int)s->init_num", "s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LENGTH == (unsigned int)s->init_num", "s->d1->mtu >= dtls1_min_mtu(s)", "s->init_num == (int)s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LENGTH", "len == (unsigned int)ret", "cryptlib.c", "dynamic", "ERROR", "%s(%d): OpenSSL internal error, assertion failed: %s\n", "pointer != NULL", "<<ERROR>>", "ex_data", "x509", "x509_info", "x509_pkey", "x509_crl", "x509_req", "evp_pkey", "x509_store", "ssl_ctx", "ssl_cert", "ssl_session", "ssl_sess_cert", "ssl_method", "rand", "rand2", "debug_malloc", "gethostbyname", "getservbyname", "readdir", "RSA_blinding", "debug_malloc2", "dynlock", "engine", "ecdsa", "ecdh", "ec_pre_comp", "store", "comp", "fips", "fips2", "mem.c", "[%02d:%02d:%02d] ", "%5lu file=%s, line=%d, ", "thread=%lu, ", "number=%d, address=%08lX\n", " thread=%lu, file=%s, line=%d, info=\"", "mem_dbg.c", "%ld bytes leaked in %d chunks\n", "ex_data.c", "o_names.c", "obj_dat.c", ".%lu", "UNDEF", "undefined", "rsadsi", "RSA Data Security, Inc.", "pkcs", "RSA Data Security, Inc. PKCS", "rsaEncryption", "RSA-MD2", "md2WithRSAEncryption", "RSA-MD5", "md5WithRSAEncryption", "PBE-MD2-DES", "pbeWithMD2AndDES-CBC", "PBE-MD5-DES", "pbeWithMD5AndDES-CBC", "X500", "directory services (X.500)", "X509", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs7", "pkcs7-data", "pkcs7-signedData", "pkcs7-envelopedData", "pkcs7-signedAndEnvelopedData", "pkcs7-digestData", "pkcs7-encryptedData", "pkcs3", "dhKeyAgreement", "DES-ECB", "des-ecb", "DES-CFB", "des-cfb", "des-cbc", "DES-EDE", "des-ede", "DES-EDE3", "des-ede3", "idea-cbc", "IDEA-CFB", "idea-cfb", "IDEA-ECB", "idea-ecb", "rc2-cbc", "RC2-ECB", "rc2-ecb", "RC2-CFB", "rc2-cfb", "RC2-OFB", "rc2-ofb", "RSA-SHA", "shaWithRSAEncryption", "DES-EDE-CBC", "des-ede-cbc", "des-ede3-cbc", "DES-OFB", "des-ofb", "IDEA-OFB", "idea-ofb", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "Netscape Communications Corp.", "nsCertExt", "Netscape Certificate Extension", "nsDataType", "Netscape Data Type", "DES-EDE-CFB", "des-ede-cfb", "DES-EDE3-CFB", "des-ede3-cfb", "DES-EDE-OFB", "des-ede-ofb", "DES-EDE3-OFB", "des-ede3-ofb", "sha1", "sha1WithRSAEncryption", "DSA-SHA", "dsaWithSHA", "DSA-old", "dsaEncryption-old", "PBE-SHA1-RC2-64", "pbeWithSHA1AndRC2-CBC", "PBKDF2", "dsaWithSHA1-old", "nsCertType", "Netscape Cert Type", "nsBaseUrl", "Netscape Base Url", "nsRevocationUrl", "Netscape Revocation Url", "nsCaRevocationUrl", "Netscape CA Revocation Url", "nsRenewalUrl", "Netscape Renewal Url", "nsCaPolicyUrl", "Netscape CA Policy Url", "nsSslServerName", "Netscape SSL Server Name", "nsComment", "Netscape Comment", "nsCertSequence", "Netscape Certificate Sequence", "DESX-CBC", "desx-cbc", "id-ce", "subjectKeyIdentifier", "X509v3 Subject Key Identifier", "keyUsage", "X509v3 Key Usage", "privateKeyUsagePeriod", "X509v3 Private Key Usage Period", "subjectAltName", "X509v3 Subject Alternative Name", "issuerAltName", "X509v3 Issuer Alternative Name", "basicConstraints", "X509v3 Basic Constraints", "crlNumber", "X509v3 CRL Number", "certificatePolicies", "X509v3 Certificate Policies", "authorityKeyIdentifier", "X509v3 Authority Key Identifier", "BF-CBC", "bf-cbc", "BF-ECB", "bf-ecb", "BF-CFB", "bf-cfb", "BF-OFB", "bf-ofb", "MDC2", "mdc2", "RSA-MDC2", "mdc2WithRSA", "RC4-40", "rc4-40", "RC2-40-CBC", "rc2-40-cbc", "givenName", "surname", "initials", "crlDistributionPoints", "X509v3 CRL Distribution Points", "RSA-NP-MD5", "md5WithRSA", "serialNumber", "CAST5-CBC", "cast5-cbc", "CAST5-ECB", "cast5-ecb", "CAST5-CFB", "cast5-cfb", "CAST5-OFB", "cast5-ofb", "pbeWithMD5AndCast5CBC", "dsaWithSHA1", "MD5-SHA1", "md5-sha1", "sha1WithRSA", "dsaEncryption", "ripemd160", "RSA-RIPEMD160", "ripemd160WithRSA", "RC5-CBC", "rc5-cbc", "RC5-ECB", "rc5-ecb", "RC5-CFB", "rc5-cfb", "RC5-OFB", "rc5-ofb", "run length compression", "ZLIB", "zlib compression", "extendedKeyUsage", "X509v3 Extended Key Usage", "PKIX", "id-kp", "serverAuth", "TLS Web Server Authentication", "clientAuth", "TLS Web Client Authentication", "codeSigning", "Code Signing", "emailProtection", "E-mail Protection", "timeStamping", "Time Stamping", "msCodeInd", "Microsoft Individual Code Signing", "msCodeCom", "Microsoft Commercial Code Signing", "msCTLSign", "Microsoft Trust List Signing", "msSGC", "Microsoft Server Gated Crypto", "msEFS", "Microsoft Encrypted File System", "nsSGC", "Netscape Server Gated Crypto", "deltaCRL", "X509v3 Delta CRL Indicator", "CRLReason", "X509v3 CRL Reason Code", "invalidityDate", "Invalidity Date", "SXNetID", "Strong Extranet ID", "PBE-SHA1-RC4-128", "pbeWithSHA1And128BitRC4", "PBE-SHA1-RC4-40", "pbeWithSHA1And40BitRC4", "PBE-SHA1-3DES", "pbeWithSHA1And3-KeyTripleDES-CBC", "PBE-SHA1-2DES", "pbeWithSHA1And2-KeyTripleDES-CBC", "PBE-SHA1-RC2-128", "pbeWithSHA1And128BitRC2-CBC", "PBE-SHA1-RC2-40", "pbeWithSHA1And40BitRC2-CBC", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "id-qt-cps", "Policy Qualifier CPS", "id-qt-unotice", "Policy Qualifier User Notice", "RC2-64-CBC", "rc2-64-cbc", "SMIME-CAPS", "S/MIME Capabilities", "PBE-MD2-RC2-64", "pbeWithMD2AndRC2-CBC", "PBE-MD5-RC2-64", "pbeWithMD5AndRC2-CBC", "PBE-SHA1-DES", "pbeWithSHA1AndDES-CBC", "msExtReq", "Microsoft Extension Request", "extReq", "Extension Request", "dnQualifier", "id-pe", "id-ad", "authorityInfoAccess", "Authority Information Access", "OCSP", "caIssuers", "CA Issuers", "OCSPSigning", "OCSP Signing", "member-body", "ISO Member Body", "ISO-US", "ISO US Member Body", "X9-57", "X9.57", "X9cm", "X9.57 CM ?", "pkcs1", "pkcs5", "SMIME", "S/MIME", "id-smime-mod", "id-smime-ct", "id-smime-aa", "id-smime-alg", "id-smime-cd", "id-smime-spq", "id-smime-cti", "id-smime-mod-cms", "id-smime-mod-ess", "id-smime-mod-oid", "id-smime-mod-msg-v3", "id-smime-mod-ets-eSignature-88", "id-smime-mod-ets-eSignature-97", "id-smime-mod-ets-eSigPolicy-88", "id-smime-mod-ets-eSigPolicy-97", "id-smime-ct-receipt", "id-smime-ct-authData", "id-smime-ct-publishCert", "id-smime-ct-TSTInfo", "id-smime-ct-TDTInfo", "id-smime-ct-contentInfo", "id-smime-ct-DVCSRequestData", "id-smime-ct-DVCSResponseData", "id-smime-aa-receiptRequest", "id-smime-aa-securityLabel", "id-smime-aa-mlExpandHistory", "id-smime-aa-contentHint", "id-smime-aa-msgSigDigest", "id-smime-aa-encapContentType", "id-smime-aa-contentIdentifier", "id-smime-aa-macValue", "id-smime-aa-equivalentLabels", "id-smime-aa-contentReference", "id-smime-aa-encrypKeyPref", "id-smime-aa-signingCertificate", "id-smime-aa-smimeEncryptCerts", "id-smime-aa-timeStampToken", "id-smime-aa-ets-sigPolicyId", "id-smime-aa-ets-commitmentType", "id-smime-aa-ets-signerLocation", "id-smime-aa-ets-signerAttr", "id-smime-aa-ets-otherSigCert", "id-smime-aa-ets-contentTimestamp", "id-smime-aa-ets-CertificateRefs", "id-smime-aa-ets-RevocationRefs", "id-smime-aa-ets-certValues", "id-smime-aa-ets-revocationValues", "id-smime-aa-ets-escTimeStamp", "id-smime-aa-ets-certCRLTimestamp", "id-smime-aa-ets-archiveTimeStamp", "id-smime-aa-signatureType", "id-smime-aa-dvcs-dvc", "id-smime-alg-ESDHwith3DES", "id-smime-alg-ESDHwithRC2", "id-smime-alg-3DESwrap", "id-smime-alg-RC2wrap", "id-smime-alg-ESDH", "id-smime-alg-CMS3DESwrap", "id-smime-alg-CMSRC2wrap", "id-smime-cd-ldap", "id-smime-spq-ets-sqt-uri", "id-smime-spq-ets-sqt-unotice", "id-smime-cti-ets-proofOfOrigin", "id-smime-cti-ets-proofOfReceipt", "id-smime-cti-ets-proofOfDelivery", "id-smime-cti-ets-proofOfSender", "id-smime-cti-ets-proofOfApproval", "id-smime-cti-ets-proofOfCreation", "id-pkix-mod", "id-qt", "id-it", "id-pkip", "id-alg", "id-cmc", "id-on", "id-pda", "id-aca", "id-qcs", "id-cct", "id-pkix1-explicit-88", "id-pkix1-implicit-88", "id-pkix1-explicit-93", "id-pkix1-implicit-93", "id-mod-crmf", "id-mod-cmc", "id-mod-kea-profile-88", "id-mod-kea-profile-93", "id-mod-cmp", "id-mod-qualified-cert-88", "id-mod-qualified-cert-93", "id-mod-attribute-cert", "id-mod-timestamp-protocol", "id-mod-ocsp", "id-mod-dvcs", "id-mod-cmp2000", "biometricInfo", "Biometric Info", "qcStatements", "ac-auditEntity", "ac-targeting", "aaControls", "sbgp-ipAddrBlock", "sbgp-autonomousSysNum", "sbgp-routerIdentifier", "textNotice", "ipsecEndSystem", "IPSec End System", "ipsecTunnel", "IPSec Tunnel", "ipsecUser", "IPSec User", "DVCS", "dvcs", "id-it-caProtEncCert", "id-it-signKeyPairTypes", "id-it-encKeyPairTypes", "id-it-preferredSymmAlg", "id-it-caKeyUpdateInfo", "id-it-currentCRL", "id-it-unsupportedOIDs", "id-it-subscriptionRequest", "id-it-subscriptionResponse", "id-it-keyPairParamReq", "id-it-keyPairParamRep", "id-it-revPassphrase", "id-it-implicitConfirm", "id-it-confirmWaitTime", "id-it-origPKIMessage", "id-regCtrl", "id-regInfo", "id-regCtrl-regToken", "id-regCtrl-authenticator", "id-regCtrl-pkiPublicationInfo", "id-regCtrl-pkiArchiveOptions", "id-regCtrl-oldCertID", "id-regCtrl-protocolEncrKey", "id-regInfo-utf8Pairs", "id-regInfo-certReq", "id-alg-des40", "id-alg-noSignature", "id-alg-dh-sig-hmac-sha1", "id-alg-dh-pop", "id-cmc-statusInfo", "id-cmc-identification", "id-cmc-identityProof", "id-cmc-dataReturn", "id-cmc-transactionId", "id-cmc-senderNonce", "id-cmc-recipientNonce", "id-cmc-addExtensions", "id-cmc-encryptedPOP", "id-cmc-decryptedPOP", "id-cmc-lraPOPWitness", "id-cmc-getCert", "id-cmc-getCRL", "id-cmc-revokeRequest", "id-cmc-regInfo", "id-cmc-responseInfo", "id-cmc-queryPending", "id-cmc-popLinkRandom", "id-cmc-popLinkWitness", "id-cmc-confirmCertAcceptance", "id-on-personalData", "id-pda-dateOfBirth", "id-pda-placeOfBirth", "id-pda-gender", "id-pda-countryOfCitizenship", "id-pda-countryOfResidence", "id-aca-authenticationInfo", "id-aca-accessIdentity", "id-aca-chargingIdentity", "id-aca-group", "id-aca-role", "id-qcs-pkixQCSyntax-v1", "id-cct-crs", "id-cct-PKIData", "id-cct-PKIResponse", "ad_timestamping", "AD Time Stamping", "AD_DVCS", "ad dvcs", "basicOCSPResponse", "Basic OCSP Response", "Nonce", "OCSP Nonce", "CrlID", "OCSP CRL ID", "acceptableResponses", "Acceptable OCSP Responses", "noCheck", "OCSP No Check", "archiveCutoff", "OCSP Archive Cutoff", "serviceLocator", "OCSP Service Locator", "extendedStatus", "Extended OCSP Status", "valid", "path", "trustRoot", "Trust Root", "algorithm", "rsaSignature", "X500algorithms", "directory services - algorithms", "IANA", "iana", "directory", "Directory", "mgmt", "Management", "Experimental", "private", "Private", "security", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "domain", "Domain", "selected-attribute-types", "Selected Attribute Types", "clearance", "RSA-MD4", "md4WithRSAEncryption", "ac-proxying", "subjectInfoAccess", "Subject Information Access", "id-aca-encAttrs", "role", "policyConstraints", "X509v3 Policy Constraints", "targetInformation", "X509v3 AC Targeting", "noRevAvail", "X509v3 No Revocation Available", "ansi-X9-62", "ANSI X9.62", "prime-field", "characteristic-two-field", "id-ecPublicKey", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "ecdsa-with-SHA1", "CSPName", "Microsoft CSP Name", "AES-128-ECB", "aes-128-ecb", "aes-128-cbc", "AES-128-OFB", "aes-128-ofb", "AES-128-CFB", "aes-128-cfb", "AES-192-ECB", "aes-192-ecb", "AES-192-CBC", "aes-192-cbc", "AES-192-OFB", "aes-192-ofb", "AES-192-CFB", "aes-192-cfb", "AES-256-ECB", "aes-256-ecb", "aes-256-cbc", "AES-256-OFB", "aes-256-ofb", "AES-256-CFB", "aes-256-cfb", "holdInstructionCode", "Hold Instruction Code", "holdInstructionNone", "Hold Instruction None", "holdInstructionCallIssuer", "Hold Instruction Call Issuer", "holdInstructionReject", "Hold Instruction Reject", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "mail", "rfc822Mailbox", "favouriteDrink", "roomNumber", "photo", "userClass", "host", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "documentPublisher", "x500UniqueIdentifier", "mime-mhs", "MIME MHS", "mime-mhs-headings", "mime-mhs-bodies", "id-hex-partial-message", "id-hex-multipart-message", "generationQualifier", "pseudonym", "id-set", "Secure Electronic Transactions", "set-ctype", "content types", "set-msgExt", "message extensions", "set-attr", "set-policy", "set-certExt", "certificate extensions", "set-brand", "setct-PANData", "setct-PANToken", "setct-PANOnly", "setct-OIData", "setct-PI", "setct-PIData", "setct-PIDataUnsigned", "setct-HODInput", "setct-AuthResBaggage", "setct-AuthRevReqBaggage", "setct-AuthRevResBaggage", "setct-CapTokenSeq", "setct-PInitResData", "setct-PI-TBS", "setct-PResData", "setct-AuthReqTBS", "setct-AuthResTBS", "setct-AuthResTBSX", "setct-AuthTokenTBS", "setct-CapTokenData", "setct-CapTokenTBS", "setct-AcqCardCodeMsg", "setct-AuthRevReqTBS", "setct-AuthRevResData", "setct-AuthRevResTBS", "setct-CapReqTBS", "setct-CapReqTBSX", "setct-CapResData", "setct-CapRevReqTBS", "setct-CapRevReqTBSX", "setct-CapRevResData", "setct-CredReqTBS", "setct-CredReqTBSX", "setct-CredResData", "setct-CredRevReqTBS", "setct-CredRevReqTBSX", "setct-CredRevResData", "setct-PCertReqData", "setct-PCertResTBS", "setct-BatchAdminReqData", "setct-BatchAdminResData", "setct-CardCInitResTBS", "setct-MeAqCInitResTBS", "setct-RegFormResTBS", "setct-CertReqData", "setct-CertReqTBS", "setct-CertResData", "setct-CertInqReqTBS", "setct-ErrorTBS", "setct-PIDualSignedTBE", "setct-PIUnsignedTBE", "setct-AuthReqTBE", "setct-AuthResTBE", "setct-AuthResTBEX", "setct-AuthTokenTBE", "setct-CapTokenTBE", "setct-CapTokenTBEX", "setct-AcqCardCodeMsgTBE", "setct-AuthRevReqTBE", "setct-AuthRevResTBE", "setct-AuthRevResTBEB", "setct-CapReqTBE", "setct-CapReqTBEX", "setct-CapResTBE", "setct-CapRevReqTBE", "setct-CapRevReqTBEX", "setct-CapRevResTBE", "setct-CredReqTBE", "setct-CredReqTBEX", "setct-CredResTBE", "setct-CredRevReqTBE", "setct-CredRevReqTBEX", "setct-CredRevResTBE", "setct-BatchAdminReqTBE", "setct-BatchAdminResTBE", "setct-RegFormReqTBE", "setct-CertReqTBE", "setct-CertReqTBEX", "setct-CertResTBE", "setct-CRLNotificationTBS", "setct-CRLNotificationResTBS", "setct-BCIDistributionTBS", "setext-genCrypt", "generic cryptogram", "setext-miAuth", "merchant initiated auth", "setext-pinSecure", "setext-pinAny", "setext-track2", "setext-cv", "additional verification", "set-policy-root", "setCext-hashedRoot", "setCext-certType", "setCext-merchData", "setCext-cCertRequired", "setCext-tunneling", "setCext-setExt", "setCext-setQualf", "setCext-PGWYcapabilities", "setCext-TokenIdentifier", "setCext-Track2Data", "setCext-TokenType", "setCext-IssuerCapabilities", "setAttr-Cert", "setAttr-PGWYcap", "payment gateway capabilities", "setAttr-TokenType", "setAttr-IssCap", "issuer capabilities", "set-rootKeyThumb", "set-addPolicy", "setAttr-Token-EMV", "setAttr-Token-B0Prime", "setAttr-IssCap-CVM", "setAttr-IssCap-T2", "setAttr-IssCap-Sig", "setAttr-GenCryptgrm", "generate cryptogram", "setAttr-T2Enc", "encrypted track 2", "setAttr-T2cleartxt", "cleartext track 2", "setAttr-TokICCsig", "ICC or token signature", "setAttr-SecDevSig", "secure device signature", "set-brand-IATA-ATA", "set-brand-Diners", "set-brand-AmericanExpress", "set-brand-JCB", "set-brand-Visa", "set-brand-MasterCard", "set-brand-Novus", "DES-CDMF", "des-cdmf", "rsaOAEPEncryptionSET", "ITU-T", "itu-t", "JOINT-ISO-ITU-T", "joint-iso-itu-t", "international-organizations", "International Organizations", "msSmartcardLogin", "Microsoft Smartcardlogin", "msUPN", "Microsoft Universal Principal Name", "AES-128-CFB1", "aes-128-cfb1", "AES-192-CFB1", "aes-192-cfb1", "AES-256-CFB1", "aes-256-cfb1", "AES-128-CFB8", "aes-128-cfb8", "AES-192-CFB8", "aes-192-cfb8", "AES-256-CFB8", "aes-256-cfb8", "DES-CFB1", "des-cfb1", "DES-CFB8", "des-cfb8", "DES-EDE3-CFB1", "des-ede3-cfb1", "DES-EDE3-CFB8", "des-ede3-cfb8", "street", "streetAddress", "postalCode", "id-ppl", "proxyCertInfo", "Proxy Certificate Information", "id-ppl-anyLanguage", "Any language", "id-ppl-inheritAll", "Inherit all", "nameConstraints", "X509v3 Name Constraints", "id-ppl-independent", "Independent", "RSA-SHA256", "sha256WithRSAEncryption", "RSA-SHA384", "sha384WithRSAEncryption", "RSA-SHA512", "sha512WithRSAEncryption", "RSA-SHA224", "sha224WithRSAEncryption", "sha256", "sha384", "sha512", "sha224", "identified-organization", "certicom-arc", "wap-wsg", "id-characteristic-two-basis", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "wap-wsg-idm-ecid-wtls1", "wap-wsg-idm-ecid-wtls3", "wap-wsg-idm-ecid-wtls4", "wap-wsg-idm-ecid-wtls5", "wap-wsg-idm-ecid-wtls6", "wap-wsg-idm-ecid-wtls7", "wap-wsg-idm-ecid-wtls8", "wap-wsg-idm-ecid-wtls9", "wap-wsg-idm-ecid-wtls10", "wap-wsg-idm-ecid-wtls11", "wap-wsg-idm-ecid-wtls12", "anyPolicy", "X509v3 Any Policy", "policyMappings", "X509v3 Policy Mappings", "inhibitAnyPolicy", "X509v3 Inhibit Any Policy", "Oakley-EC2N-3", "ipsec3", "Oakley-EC2N-4", "ipsec4", "camellia-128-cbc", "CAMELLIA-192-CBC", "camellia-192-cbc", "camellia-256-cbc", "CAMELLIA-128-ECB", "camellia-128-ecb", "CAMELLIA-192-ECB", "camellia-192-ecb", "CAMELLIA-256-ECB", "camellia-256-ecb", "CAMELLIA-128-CFB", "camellia-128-cfb", "CAMELLIA-192-CFB", "camellia-192-cfb", "CAMELLIA-256-CFB", "camellia-256-cfb", "CAMELLIA-128-CFB1", "camellia-128-cfb1", "CAMELLIA-192-CFB1", "camellia-192-cfb1", "CAMELLIA-256-CFB1", "camellia-256-cfb1", "CAMELLIA-128-CFB8", "camellia-128-cfb8", "CAMELLIA-192-CFB8", "camellia-192-cfb8", "CAMELLIA-256-CFB8", "camellia-256-cfb8", "CAMELLIA-128-OFB", "camellia-128-ofb", "CAMELLIA-192-OFB", "camellia-192-ofb", "CAMELLIA-256-OFB", "camellia-256-ofb", "subjectDirectoryAttributes", "X509v3 Subject Directory Attributes", "issuingDistributionPoint", "X509v3 Issuing Distrubution Point", "certificateIssuer", "X509v3 Certificate Issuer", "KISA", "kisa", "SEED-ECB", "seed-ecb", "seed-cbc", "SEED-OFB", "seed-ofb", "SEED-CFB", "seed-cfb", "HMAC-MD5", "hmac-md5", "HMAC-SHA1", "hmac-sha1", "id-PasswordBasedMAC", "password based MAC", "id-DHBasedMac", "Diffie-Hellman based MAC", "id-it-suppLangTags", "caRepository", "CA Repository", "id-smime-ct-compressedData", "id-ct-asciiTextWithCRLF", "id-aes128-wrap", "id-aes192-wrap", "id-aes256-wrap", "ecdsa-with-Recommended", "ecdsa-with-Specified", "ecdsa-with-SHA224", "ecdsa-with-SHA256", "ecdsa-with-SHA384", "ecdsa-with-SHA512", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "id-GostR3411-94-with-GostR3410-2001", "GOST R 34.11-94 with GOST R 34.10-2001", "id-GostR3411-94-with-GostR3410-94", "GOST R 34.11-94 with GOST R 34.10-94", "GOST R 34.11-94", "id-HMACGostR3411-94", "HMAC GOST 34.11-94", "GOST R 34.10-2001", "GOST R 34.10-94", "gost89", "GOST 28147-89", "GOST 28147-89 MAC", "prf-gostr3411-94", "GOST R 34.11-94 PRF", "id-GostR3410-2001DH", "GOST R 34.10-2001 DH", "id-GostR3410-94DH", "GOST R 34.10-94 DH", "id-Gost28147-89-CryptoPro-KeyMeshing", "id-Gost28147-89-None-KeyMeshing", "id-GostR3411-94-TestParamSet", "id-GostR3411-94-CryptoProParamSet", "id-Gost28147-89-TestParamSet", "id-Gost28147-89-CryptoPro-A-ParamSet", "id-Gost28147-89-CryptoPro-B-ParamSet", "id-Gost28147-89-CryptoPro-C-ParamSet", "id-Gost28147-89-CryptoPro-D-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet", "id-Gost28147-89-CryptoPro-RIC-1-ParamSet", "id-GostR3410-94-TestParamSet", "id-GostR3410-94-CryptoPro-A-ParamSet", "id-GostR3410-94-CryptoPro-B-ParamSet", "id-GostR3410-94-CryptoPro-C-ParamSet", "id-GostR3410-94-CryptoPro-D-ParamSet", "id-GostR3410-94-CryptoPro-XchA-ParamSet", "id-GostR3410-94-CryptoPro-XchB-ParamSet", "id-GostR3410-94-CryptoPro-XchC-ParamSet", "id-GostR3410-2001-TestParamSet", "id-GostR3410-2001-CryptoPro-A-ParamSet", "id-GostR3410-2001-CryptoPro-B-ParamSet", "id-GostR3410-2001-CryptoPro-C-ParamSet", "id-GostR3410-2001-CryptoPro-XchA-ParamSet", "id-GostR3410-2001-CryptoPro-XchB-ParamSet", "id-GostR3410-94-a", "id-GostR3410-94-aBis", "id-GostR3410-94-b", "id-GostR3410-94-bBis", "id-Gost28147-89-cc", "GOST 28147-89 Cryptocom ParamSet", "gost94cc", "GOST 34.10-94 Cryptocom", "gost2001cc", "GOST 34.10-2001 Cryptocom", "id-GostR3411-94-with-GostR3410-94-cc", "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom", "id-GostR3411-94-with-GostR3410-2001-cc", "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom", "id-GostR3410-2001-ParamSet-cc", "GOST R 3410-2001 Parameter Set Cryptocom", "HMAC", "hmac", "LocalKeySet", "Microsoft Local Key set", "freshestCRL", "X509v3 Freshest CRL", "id-on-permanentIdentifier", "Permanent Identifier", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "id-alg-PWRI-KEK", "CMAC", "cmac", "aes-128-gcm", "id-aes128-CCM", "aes-128-ccm", "id-aes128-wrap-pad", "id-aes192-GCM", "aes-192-gcm", "id-aes192-CCM", "aes-192-ccm", "id-aes192-wrap-pad", "aes-256-gcm", "id-aes256-CCM", "aes-256-ccm", "id-aes256-wrap-pad", "AES-128-CTR", "aes-128-ctr", "AES-192-CTR", "aes-192-ctr", "AES-256-CTR", "aes-256-ctr", "id-camellia128-wrap", "id-camellia192-wrap", "id-camellia256-wrap", "anyExtendedKeyUsage", "Any Extended Key Usage", "MGF1", "mgf1", "RSASSA-PSS", "rsassaPss", "AES-128-XTS", "aes-128-xts", "AES-256-XTS", "aes-256-xts", "rc4-hmac-md5", "aes-128-cbc-hmac-sha1", "AES-192-CBC-HMAC-SHA1", "aes-192-cbc-hmac-sha1", "aes-256-cbc-hmac-sha1", "RSAES-OAEP", "rsaesOaep", "dhpublicnumber", "X9.42 DH", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "dhSinglePass-stdDH-sha1kdf-scheme", "dhSinglePass-stdDH-sha224kdf-scheme", "dhSinglePass-stdDH-sha256kdf-scheme", "dhSinglePass-stdDH-sha384kdf-scheme", "dhSinglePass-stdDH-sha512kdf-scheme", "dhSinglePass-cofactorDH-sha1kdf-scheme", "dhSinglePass-cofactorDH-sha224kdf-scheme", "dhSinglePass-cofactorDH-sha256kdf-scheme", "dhSinglePass-cofactorDH-sha384kdf-scheme", "dhSinglePass-cofactorDH-sha512kdf-scheme", "dh-std-kdf", "dh-cofactor-kdf", "aes-128-cbc-hmac-sha256", "AES-192-CBC-HMAC-SHA256", "aes-192-cbc-hmac-sha256", "aes-256-cbc-hmac-sha256", "ct_precert_scts", "CT Precertificate SCTs", "ct_precert_poison", "CT Precertificate Poison", "ct_precert_signer", "CT Precertificate Signer", "ct_cert_scts", "CT Certificate SCTs", "jurisdictionL", "jurisdictionLocalityName", "jurisdictionST", "jurisdictionStateOrProvinceName", "jurisdictionC", "jurisdictionCountryName", "obj_lib.c", "obj_xref.c", "hmac.c", "j <= (int)sizeof(ctx->key)", "bn_lib.c", "bn_ctx.c", "bn_print.c", "%09u", "bn(%d,%d)", "bn_shift.c", "ec_lib.c", "ec_mult.c", "ec_curve.c", "B-163", "B-233", "B-283", "B-409", "B-571", "K-163", "K-233", "K-283", "K-409", "K-571", "P-192", "P-224", "P-256", "P-384", "P-521", "SECG/WTLS curve over a 112 bit prime field", "SECG curve over a 112 bit prime field", "SECG curve over a 128 bit prime field", "SECG curve over a 160 bit prime field", "SECG/WTLS curve over a 160 bit prime field", "SECG curve over a 192 bit prime field", "SECG curve over a 224 bit prime field", "NIST/SECG curve over a 224 bit prime field", "SECG curve over a 256 bit prime field", "NIST/SECG curve over a 384 bit prime field", "NIST/SECG curve over a 521 bit prime field", "NIST/X9.62/SECG curve over a 192 bit prime field", "X9.62 curve over a 192 bit prime field", "X9.62 curve over a 239 bit prime field", "X9.62/SECG curve over a 256 bit prime field", "SECG curve over a 113 bit binary field", "SECG/WTLS curve over a 131 bit binary field", "SECG curve over a 131 bit binary field", "NIST/SECG/WTLS curve over a 163 bit binary field", "SECG curve over a 163 bit binary field", "NIST/SECG curve over a 163 bit binary field", "SECG curve over a 193 bit binary field", "NIST/SECG/WTLS curve over a 233 bit binary field", "SECG curve over a 239 bit binary field", "NIST/SECG curve over a 283 bit binary field", "NIST/SECG curve over a 409 bit binary field", "NIST/SECG curve over a 571 bit binary field", "X9.62 curve over a 163 bit binary field", "X9.62 curve over a 176 bit binary field", "X9.62 curve over a 191 bit binary field", "X9.62 curve over a 208 bit binary field", "X9.62 curve over a 239 bit binary field", "X9.62 curve over a 272 bit binary field", "X9.62 curve over a 304 bit binary field", "X9.62 curve over a 359 bit binary field", "X9.62 curve over a 368 bit binary field", "X9.62 curve over a 431 bit binary field", "WTLS curve over a 113 bit binary field", "WTLS curve over a 112 bit prime field", "WTLS curve over a 160 bit prime field", "WTLS curvs over a 224 bit prime field", "\n\tIPSec/IKE/Oakley curve #3 over a 155 bit binary field.\n\tNot suitable for ECDSA.\n\tQuestionable extension field!", "\n\tIPSec/IKE/Oakley curve #4 over a 185 bit binary field.\n\tNot suitable for ECDSA.\n\tQuestionable extension field!", "RFC 5639 curve over a 160 bit prime field", "RFC 5639 curve over a 192 bit prime field", "RFC 5639 curve over a 224 bit prime field", "RFC 5639 curve over a 256 bit prime field", "RFC 5639 curve over a 320 bit prime field", "RFC 5639 curve over a 384 bit prime field", "RFC 5639 curve over a 512 bit prime field", "ec_key.c", "ec_oct.c", "rsa_lib.c", "rsa_sign.c", "RSA_OAEP_PARAMS", "hashFunc", "maskGenFunc", "pSourceFunc", "RSA_PSS_PARAMS", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "dmp1", "dmq1", "iqmp", "rsa_crpt.c", "dsa_asn1.c", "pub_key", "priv_key", "DSA_SIG", "dsa_sign.c", "dh_key.c", "OpenSSL DH Method", "dh_lib.c", "dh_ameth.c", "%s: (%d bit)\n", "DH Private-Key", "private-key:", "public-key:", "prime:", "generator:", "subgroup order:", "subgroup factor:", "seed:", "%02x%s", "counter:", "recommended-private-length: %d bits\n", "DH Parameters", "DH Public-Key", "OpenSSL X9.42 DH method", "OpenSSL PKCS#3 DH method", "eng_init.c", "eng_pkey.c", "buffer.c", "buf_str.c", "bio_lib.c", "bss_mem.c", "memory buffer", "bss_file.c", "fopen('", "fflush()", "FILE pointer", "socket", "bf_buff.c", "b_print.c", "0123456789abcdef", "0123456789ABCDEF", "<NULL>", "0123456789", "doapr()", "stack.c", "lhash.c", "err.c", "int_thread_get (err.c)", "int_err_get (err.c)", "lib(%lu)", "func(%lu)", "reason(%lu)", "error:%08lX:%s:%s:%s", "system lib", "BN lib", "RSA lib", "DH lib", "EVP lib", "BUF lib", "OBJ lib", "PEM lib", "DSA lib", "X509 lib", "ASN1 lib", "CONF lib", "CRYPTO lib", "EC lib", "SSL lib", "BIO lib", "PKCS7 lib", "X509V3 lib", "PKCS12 lib", "RAND lib", "DSO lib", "ENGINE lib", "OCSP lib", "TS lib", "nested asn1 error", "bad asn1 object header", "bad get asn1 object call", "expecting an asn1 sequence", "asn1 length mismatch", "missing asn1 eos", "malloc failure", "called a function you should not call", "passed a null parameter", "called a function that was disabled at compile-time", "fopen", "ioctlsocket", "bind", "accept", "opendir", "fread", "fflush", "unknown library", "system library", "bignum routines", "rsa routines", "Diffie-Hellman routines", "digital envelope routines", "memory buffer routines", "object identifier routines", "PEM routines", "dsa routines", "x509 certificate routines", "asn1 encoding routines", "configuration file routines", "common libcrypto routines", "elliptic curve routines", "SSL routines", "BIO routines", "PKCS7 routines", "X509 V3 routines", "PKCS12 routines", "random number generator", "DSO support routines", "time stamp routines", "engine routines", "OCSP routines", "FIPS routines", "CMS routines", "HMAC routines", "digest.c", "ctx->digest->md_size <= EVP_MAX_MD_SIZE", "evp_enc.c", "bl <= (int)sizeof(ctx->buf)", "b <= sizeof(ctx->buf)", "b <= sizeof(ctx->final)", "ctx->cipher->block_size == 1 || ctx->cipher->block_size == 8 || ctx->cipher->block_size == 16", "EVP_CIPHER_CTX_iv_length(ctx) <= (int)sizeof(ctx->iv)", "e_camellia.c", "e_aes.c", "e_rc2.c", "l <= sizeof(iv)", "p_sign.c", "p_verify.c", "p_lib.c", "%s algorithm \"%s\" unsupported\n", "Public Key", "Private Key", "Parameters", "aes iv setup failed", "aes key setup failed", "asn1 lib", "bad block length", "bad decrypt", "bad key length", "bn decode error", "bn pubkey error", "buffer too small", "camellia key setup failed", "cipher parameter error", "command not supported", "ctrl not implemented", "ctrl operation not implemented", "data not multiple of block length", "different key types", "different parameters", "disabled for fips", "encode error", "error loading section", "error setting fips mode", "evp pbe cipherinit error", "expecting an rsa key", "expecting a dh key", "expecting a dsa key", "expecting a ecdsa key", "expecting a ec key", "fips mode not supported", "initialization error", "input not initialized", "invalid digest", "invalid fips mode", "invalid key", "invalid key length", "invalid operation", "iv too large", "keygen failure", "message digest is null", "method not supported", "missing parameters", "no cipher set", "no default digest", "no digest set", "no dsa parameters", "no key set", "no operation set", "no sign function configured", "no verify function configured", "operation not supported for this keytype", "operaton not initialized", "pkcs8 unknown broken type", "private key decode error", "private key encode error", "too large", "unknown cipher", "unknown option", "unknown pbe algorithm", "unsuported number of rounds", "unsupported algorithm", "unsupported keylength", "unsupported key derivation function", "unsupported key size", "unsupported prf", "unsupported private key algorithm", "unsupported salt type", "wrap mode not allowed", "wrong final block length", "wrong public key type", "AESNI_INIT_KEY", "AESNI_XTS_CIPHER", "AES_INIT_KEY", "AES_T4_INIT_KEY", "AES_XTS", "AES_XTS_CIPHER", "ALG_MODULE_INIT", "CAMELLIA_INIT_KEY", "CMAC_INIT", "CMLL_T4_INIT_KEY", "D2I_PKEY", "DO_SIGVER_INIT", "DSAPKEY2PKCS8", "DSA_PKEY2PKCS8", "ECDSA_PKEY2PKCS8", "ECKEY_PKEY2PKCS8", "EVP_CipherInit_ex", "EVP_CIPHER_CTX_copy", "EVP_CIPHER_CTX_ctrl", "EVP_CIPHER_CTX_set_key_length", "EVP_DecryptFinal_ex", "EVP_DigestInit_ex", "EVP_EncryptFinal_ex", "EVP_MD_CTX_copy_ex", "EVP_MD_size", "EVP_OpenInit", "EVP_PBE_alg_add", "EVP_PBE_alg_add_type", "EVP_PBE_CipherInit", "EVP_PKCS82PKEY", "EVP_PKCS82PKEY_BROKEN", "EVP_PKEY2PKCS8_broken", "EVP_PKEY_copy_parameters", "EVP_PKEY_CTX_ctrl", "EVP_PKEY_CTX_ctrl_str", "EVP_PKEY_CTX_dup", "EVP_PKEY_decrypt", "EVP_PKEY_decrypt_init", "EVP_PKEY_decrypt_old", "EVP_PKEY_derive", "EVP_PKEY_derive_init", "EVP_PKEY_derive_set_peer", "EVP_PKEY_encrypt", "EVP_PKEY_encrypt_init", "EVP_PKEY_encrypt_old", "EVP_PKEY_get1_DH", "EVP_PKEY_get1_DSA", "EVP_PKEY_GET1_ECDSA", "EVP_PKEY_get1_EC_KEY", "EVP_PKEY_get1_RSA", "EVP_PKEY_keygen", "EVP_PKEY_keygen_init", "EVP_PKEY_new", "EVP_PKEY_paramgen", "EVP_PKEY_paramgen_init", "EVP_PKEY_sign", "EVP_PKEY_sign_init", "EVP_PKEY_verify", "EVP_PKEY_verify_init", "EVP_PKEY_verify_recover", "EVP_PKEY_verify_recover_init", "EVP_RIJNDAEL", "EVP_SignFinal", "EVP_VerifyFinal", "FIPS_CIPHERINIT", "FIPS_CIPHER_CTX_COPY", "FIPS_CIPHER_CTX_CTRL", "FIPS_CIPHER_CTX_SET_KEY_LENGTH", "FIPS_DIGESTINIT", "FIPS_MD_CTX_COPY", "HMAC_Init_ex", "INT_CTX_NEW", "PKCS5_PBE_keyivgen", "PKCS5_v2_PBE_keyivgen", "PKCS5_V2_PBKDF2_KEYIVGEN", "PKCS8_set_broken", "PKEY_SET_TYPE", "RC2_MAGIC_TO_METH", "RC5_CTRL", "DESX", "desx", "DES3", "des3", "idea", "blowfish", "CAST", "cast", "CAST-cbc", "cast-cbc", "aes128", "AES192", "aes192", "aes256", "camellia128", "CAMELLIA192", "camellia192", "camellia256", "ripemd", "rmd160", "evp_lib.c", "l <= sizeof(c->iv)", "j <= sizeof(c->iv)", "evp_pbe.c", "p5_crpt.c", "EVP_CIPHER_key_length(cipher) <= (int)sizeof(md_tmp)", "EVP_CIPHER_iv_length(cipher) <= 16", "p5_crpt2.c", "keylen <= sizeof(key)", "pmeth_lib.c", "digest", "pmeth_fn.c", "pmeth_gn.c", "m_sigver.c", "a_object.c", "<INVALID>", "a_int.c", "a_dup.c", "X509_ALGORS", "algorithms", "X509_ALGOR", "parameter", "x_pubkey.c", "X509_PUBKEY", "algor", "public_key", "X509_SIG", "X509_ATTRIBUTE", "object", "value.set", "value.single", "BIGNUM", "%ld\n", "x_long.c", "ZLONG", "LONG", "x_name.c", "X509_NAME", "X509_NAME_INTERNAL", "Name", "X509_NAME_ENTRIES", "RDNS", "X509_NAME_ENTRY", "x_x509.c", "cert_info", "sig_alg", "signature", "X509_CINF", "issuer", "validity", "subject", "issuerUID", "subjectUID", "extensions", "X509_CERT_PAIR", "X509_CERT_AUX", "trust", "reject", "alias", "keyid", "other", "d2i_pr.c", " (Negative)", "%s 0\n", "%s %s%lu (%s0x%lx)\n", "tasn_new.c", "tasn_enc.c", "tasn_dec.c", "Field=", ", Type=", "Type=", "tasn_utl.c", "ASN1_SET_ANY", "ASN1_SEQUENCE_ANY", "ASN1_OCTET_STRING_NDEF", "ASN1_FBOOLEAN", "ASN1_TBOOLEAN", "ASN1_BOOLEAN", "DIRECTORYSTRING", "DISPLAYTEXT", "ASN1_PRINTABLE", "ASN1_SEQUENCE", "ASN1_ANY", "ASN1_BMPSTRING", "ASN1_UNIVERSALSTRING", "ASN1_VISIBLESTRING", "ASN1_GENERALIZEDTIME", "ASN1_UTCTIME", "ASN1_GENERALSTRING", "ASN1_IA5STRING", "ASN1_T61STRING", "ASN1_PRINTABLESTRING", "ASN1_UTF8STRING", "ASN1_OBJECT", "ASN1_NULL", "ASN1_OCTET_STRING", "ASN1_BIT_STRING", "ASN1_ENUMERATED", "ASN1_INTEGER", "ameth_lib.c", "X509_EXTENSIONS", "Extension", "X509_EXTENSION", "critical", "asn1_lib.c", "address=", " offset=", "adding object", "asn1 parse error", "asn1 sig parse error", "aux error", "bad class", "bad object header", "bad password read", "bad tag", "bmpstring is wrong length", "boolean is wrong length", "cipher has no object identifier", "context not initialised", "data is wrong", "decoding error", "depth exceeded", "digest and key type not supported", "error getting time", "error parsing set element", "error setting cipher params", "expecting an integer", "expecting an object", "expecting a boolean", "expecting a time", "explicit length mismatch", "explicit tag not constructed", "field missing", "first num too large", "header too long", "illegal bitstring format", "illegal boolean", "illegal characters", "illegal format", "illegal hex", "illegal implicit tag", "illegal integer", "illegal nested tagging", "illegal null", "illegal null value", "illegal object", "illegal optional any", "illegal options on item template", "illegal tagged any", "illegal time value", "integer not ascii format", "integer too large for long", "invalid bit string bits left", "invalid bmpstring length", "invalid digit", "invalid mime type", "invalid modifier", "invalid number", "invalid object encoding", "invalid separator", "invalid time format", "invalid universalstring length", "invalid utf8string", "length error", "list error", "mime no content type", "mime parse error", "mime sig parse error", "missing eoc", "missing second number", "missing value", "mstring not universal", "mstring wrong tag", "nested asn1 string", "nested too deep", "non hex characters", "not ascii format", "not enough data", "no content type", "no matching choice type", "no multipart body failure", "no multipart boundary", "no sig content type", "null is wrong length", "object not ascii format", "odd number of chars", "private key header missing", "second number too large", "sequence length mismatch", "sequence not constructed", "sequence or set needs config", "short line", "sig invalid mime type", "streaming not supported", "string too long", "string too short", "tag value too high", "the asn1 object identifier is not known for this md", "time not ascii format", "too long", "type not constructed", "type not primitive", "unable to decode rsa key", "unable to decode rsa private key", "unexpected eoc", "universalstring is wrong length", "unknown format", "unknown message digest algorithm", "unknown object type", "unknown public key type", "unknown signature algorithm", "unknown tag", "unsupported any defined by type", "unsupported encryption algorithm", "unsupported public key type", "unsupported type", "wrong tag", "wrong type", "a2d_ASN1_OBJECT", "a2i_ASN1_ENUMERATED", "a2i_ASN1_INTEGER", "a2i_ASN1_STRING", "APPEND_EXP", "ASN1_BIT_STRING_set_bit", "ASN1_CB", "ASN1_CHECK_TLEN", "ASN1_COLLATE_PRIMITIVE", "ASN1_COLLECT", "ASN1_D2I_EX_PRIMITIVE", "ASN1_d2i_fp", "ASN1_D2I_READ_BIO", "ASN1_digest", "ASN1_DO_ADB", "ASN1_dup", "ASN1_ENUMERATED_set", "ASN1_ENUMERATED_to_BN", "ASN1_EX_C2I", "ASN1_FIND_END", "ASN1_GENERALIZEDTIME_adj", "ASN1_GENERALIZEDTIME_set", "ASN1_generate_v3", "ASN1_get_object", "ASN1_HEADER_NEW", "ASN1_i2d_bio", "ASN1_i2d_fp", "ASN1_INTEGER_set", "ASN1_INTEGER_to_BN", "ASN1_item_d2i_fp", "ASN1_item_dup", "ASN1_ITEM_EX_COMBINE_NEW", "ASN1_ITEM_EX_D2I", "ASN1_item_i2d_bio", "ASN1_item_i2d_fp", "ASN1_item_pack", "ASN1_item_sign", "ASN1_item_sign_ctx", "ASN1_item_unpack", "ASN1_item_verify", "ASN1_mbstring_ncopy", "ASN1_OBJECT_new", "ASN1_OUTPUT_DATA", "ASN1_pack_string", "ASN1_PCTX_new", "ASN1_PKCS5_PBE_SET", "ASN1_seq_pack", "ASN1_seq_unpack", "ASN1_sign", "ASN1_STR2TYPE", "ASN1_STRING_set", "ASN1_STRING_TABLE_add", "ASN1_STRING_type_new", "ASN1_TEMPLATE_EX_D2I", "ASN1_TEMPLATE_NEW", "ASN1_TEMPLATE_NOEXP_D2I", "ASN1_TIME_adj", "ASN1_TIME_set", "ASN1_TYPE_get_int_octetstring", "ASN1_TYPE_get_octetstring", "ASN1_unpack_string", "ASN1_UTCTIME_adj", "ASN1_UTCTIME_set", "ASN1_verify", "B64_READ_ASN1", "B64_WRITE_ASN1", "BIO_new_NDEF", "BITSTR_CB", "BN_to_ASN1_ENUMERATED", "BN_to_ASN1_INTEGER", "c2i_ASN1_BIT_STRING", "c2i_ASN1_INTEGER", "c2i_ASN1_OBJECT", "COLLECT_DATA", "D2I_ASN1_BIT_STRING", "d2i_ASN1_BOOLEAN", "d2i_ASN1_bytes", "D2I_ASN1_GENERALIZEDTIME", "D2I_ASN1_HEADER", "D2I_ASN1_INTEGER", "d2i_ASN1_OBJECT", "d2i_ASN1_SET", "d2i_ASN1_type_bytes", "d2i_ASN1_UINTEGER", "D2I_ASN1_UTCTIME", "d2i_AutoPrivateKey", "d2i_Netscape_RSA", "D2I_NETSCAPE_RSA_2", "d2i_PrivateKey", "d2i_PublicKey", "d2i_RSA_NET", "D2I_RSA_NET_2", "D2I_X509", "D2I_X509_CINF", "d2i_X509_PKEY", "DO_BUF", "i2d_ASN1_bio_stream", "i2d_ASN1_SET", "I2D_ASN1_TIME", "i2d_DSA_PUBKEY", "i2d_EC_PUBKEY", "i2d_PrivateKey", "i2d_PublicKey", "i2d_RSA_NET", "i2d_RSA_PUBKEY", "LONG_C2I", "OID_MODULE_INIT", "PARSE_TAGGING", "PKCS5_pbe2_set_iv", "PKCS5_pbe_set", "PKCS5_pbe_set0_algor", "PKCS5_pbkdf2_set", "SMIME_read_ASN1", "SMIME_text", "X509_CINF_NEW", "X509_CRL_add0_revoked", "X509_INFO_new", "X509_NAME_ENCODE", "X509_NAME_EX_D2I", "X509_NAME_EX_NEW", "X509_NEW", "X509_PKEY_new", "evp_asn1.c", "p5_pbe.c", "PBEPARAM", "p5_pbev2.c", "PBKDF2PARAM", "keylength", "PBE2PARAM", "keyfunc", "encryption", "PKCS8_PRIV_KEY_INFO", "pkeyalg", "pkey", "attributes", "Enter PEM pass phrase:", "pem_lib.c", "ENCRYPTED", "MIC-CLEAR", "MIC-ONLY", "BAD-TYPE", "Proc-Type: 4,", "DEK-Info: ", "Proc-Type: ", "-----BEGIN ", "-----\n", "-----END ", "enc->iv_len <= (int)sizeof(iv)", "strlen(objstr) + 23 + 2 * enc->iv_len + 13 <= sizeof(buf)", "Expecting: ", "ANY PRIVATE KEY", "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", "PARAMETERS", "X9.42 DH PARAMETERS", "DH PARAMETERS", "X509 CERTIFICATE", "CERTIFICATE", "NEW CERTIFICATE REQUEST", "CERTIFICATE REQUEST", "TRUSTED CERTIFICATE", "PKCS7", "PKCS #7 SIGNED DATA", "X509 CRL", "RSA PRIVATE KEY", "RSA PUBLIC KEY", "PUBLIC KEY", "DSA PRIVATE KEY", "DSA PARAMETERS", "EC PARAMETERS", "EC PRIVATE KEY", "bad base64 decode", "bad end line", "bad iv chars", "bad magic number", "bad version number", "bio write failure", "cipher is null", "error converting private key", "expecting private key blob", "expecting public key blob", "inconsistent header", "keyblob header parse error", "keyblob too short", "not dek info", "not encrypted", "not proc type", "no start line", "problems getting password", "public key no rsa", "pvk data too short", "pvk too short", "read key", "short header", "unsupported encryption", "unsupported key components", "B2I_DSS", "b2i_PVK_bio", "B2I_RSA", "CHECK_BITLEN_DSA", "CHECK_BITLEN_RSA", "d2i_PKCS8PrivateKey_bio", "d2i_PKCS8PrivateKey_fp", "DO_B2I", "DO_B2I_BIO", "DO_BLOB_HEADER", "DO_PK8PKEY", "DO_PK8PKEY_FP", "DO_PVK_BODY", "DO_PVK_HEADER", "I2B_PVK", "i2b_PVK_bio", "LOAD_IV", "PEM_ASN1_read", "PEM_ASN1_read_bio", "PEM_ASN1_write", "PEM_ASN1_write_bio", "PEM_def_callback", "PEM_do_header", "PEM_F_PEM_WRITE_PKCS8PRIVATEKEY", "PEM_get_EVP_CIPHER_INFO", "PEM_PK8PKEY", "PEM_read", "PEM_read_bio", "PEM_READ_BIO_DHPARAMS", "PEM_read_bio_Parameters", "PEM_READ_BIO_PRIVATEKEY", "PEM_READ_DHPARAMS", "PEM_READ_PRIVATEKEY", "PEM_SealFinal", "PEM_SealInit", "PEM_SignFinal", "PEM_write", "PEM_write_bio", "PEM_WRITE_PRIVATEKEY", "PEM_X509_INFO_read", "PEM_X509_INFO_read_bio", "PEM_X509_INFO_write_bio", "CERTIFICATE PAIR", "pem_oth.c", "pem_pkey.c", "%s PRIVATE KEY", "%s PARAMETERS", "x509_cmp.c", "NO X509_NAME", "x509_obj.c", "x509_vfy.c", "OPENSSL_ALLOW_PROXY_CERTS", "akid mismatch", "bad x509 filetype", "base64 decode error", "cant check dh key", "cert already in hash table", "crl already delta", "crl verify failure", "err asn1 lib", "idp mismatch", "invalid directory", "invalid field name", "issuer mismatch", "key type mismatch", "key values mismatch", "loading cert dir", "loading defaults", "name too long", "newer crl not newer", "no cert set for us to verify", "no crl number", "public key decode error", "public key encode error", "should retry", "unable to find parameters in chain", "unable to get certs public key", "unknown key type", "unknown nid", "unknown purpose id", "unknown trust id", "wrong lookup type", "ADD_CERT_DIR", "BY_FILE_CTRL", "CHECK_NAME_CONSTRAINTS", "CHECK_POLICY", "DIR_CTRL", "GET_CERT_BY_SUBJECT", "NETSCAPE_SPKI_b64_decode", "NETSCAPE_SPKI_b64_encode", "X509at_add1_attr", "X509v3_add_ext", "X509_ATTRIBUTE_create_by_NID", "X509_ATTRIBUTE_create_by_OBJ", "X509_ATTRIBUTE_create_by_txt", "X509_ATTRIBUTE_get0_data", "X509_ATTRIBUTE_set1_data", "X509_check_private_key", "X509_CRL_diff", "X509_CRL_print_fp", "X509_EXTENSION_create_by_NID", "X509_EXTENSION_create_by_OBJ", "X509_get_pubkey_parameters", "X509_load_cert_crl_file", "X509_load_cert_file", "X509_load_crl_file", "X509_NAME_add_entry", "X509_NAME_ENTRY_create_by_NID", "X509_NAME_ENTRY_create_by_txt", "X509_NAME_ENTRY_set_object", "X509_NAME_oneline", "X509_NAME_print", "X509_print_ex_fp", "X509_PUBKEY_get", "X509_PUBKEY_set", "X509_REQ_check_private_key", "X509_REQ_print_ex", "X509_REQ_print_fp", "X509_REQ_to_X509", "X509_STORE_add_cert", "X509_STORE_add_crl", "X509_STORE_CTX_get1_issuer", "X509_STORE_CTX_init", "X509_STORE_CTX_new", "X509_STORE_CTX_purpose_inherit", "X509_to_X509_REQ", "X509_TRUST_add", "X509_TRUST_set", "X509_verify_cert", "x509name.c", "name=", "x509_v3.c", "x509_lu.c", "unable to get issuer certificate", "unable to get certificate CRL", "unable to decrypt certificate's signature", "unable to decrypt CRL's signature", "unable to decode issuer public key", "certificate signature failure", "CRL signature failure", "certificate is not yet valid", "CRL is not yet valid", "certificate has expired", "CRL has expired", "format error in certificate's notBefore field", "format error in certificate's notAfter field", "format error in CRL's lastUpdate field", "format error in CRL's nextUpdate field", "out of memory", "self signed certificate", "self signed certificate in certificate chain", "unable to get local issuer certificate", "unable to verify the first certificate", "certificate chain too long", "invalid CA certificate", "invalid non-CA certificate (has CA markings)", "path length constraint exceeded", "proxy path length constraint exceeded", "proxy certificates not allowed, please set the appropriate flag", "unsupported certificate purpose", "certificate not trusted", "certificate rejected", "application verification failure", "subject issuer mismatch", "authority and subject key identifier mismatch", "authority and issuer serial number mismatch", "key usage does not include certificate signing", "unable to get CRL issuer certificate", "unhandled critical extension", "key usage does not include CRL signing", "key usage does not include digital signature", "unhandled critical CRL extension", "invalid or inconsistent certificate extension", "invalid or inconsistent certificate policy extension", "no explicit policy", "Different CRL scope", "Unsupported extension feature", "RFC 3779 resource not subset of parent's resources", "permitted subtree violation", "excluded subtree violation", "name constraints minimum and maximum not supported", "unsupported name constraint type", "unsupported or invalid name constraint syntax", "unsupported or invalid name syntax", "CRL path validation error", "Suite B: certificate version invalid", "Suite B: invalid public key algorithm", "Suite B: invalid ECC curve", "Suite B: invalid signature algorithm", "Suite B: curve not allowed for this LOS", "Suite B: cannot sign P-384 with P-256", "Hostname mismatch", "Email address mismatch", "IP address mismatch", "Invalid certificate verification context", "Issuer certificate lookup error", "proxy subject name violation", "error number %ld", "x509_trs.c", "compatible", "SSL Client", "SSL Server", "S/MIME email", "Object Signer", "OCSP responder", "OCSP request", "TSA server", "by_file.c", "Load file into cache", "by_dir.c", "%s%c%08lx.%s%d", "Load certs from files in a directory", "x509_vpm.c", "smime_sign", "v3_lib.c", "xn--", "v3_utl.c", "TRUE", "FALSE", "section:", ",name:", ",value:", "bad ip address", "bad object", "bn dec2bn error", "bn to asn1 integer error", "cannot find free function", "dirname error", "distpoint already set", "duplicate zone id", "error converting zone", "error creating extension", "error in extension", "expected a section name", "extension exists", "extension name error", "extension not found", "extension setting not supported", "extension value error", "illegal empty extension", "illegal hex digit", "incorrect policy syntax tag", "invalid asnumber", "invalid asrange", "invalid boolean string", "invalid extension string", "invalid inheritance", "invalid ipaddress", "invalid multiple rdns", "invalid name", "invalid null argument", "invalid null name", "invalid null value", "invalid numbers", "invalid object identifier", "invalid option", "invalid policy identifier", "invalid proxy policy setting", "invalid safi", "invalid section", "invalid syntax", "issuer decode error", "need organization and numbers", "no config database", "no issuer certificate", "no issuer details", "no policy identifier", "no proxy cert policy language defined", "no public key", "no subject details", "odd number of digits", "operation not defined", "othername error", "policy language already defined", "policy path length", "policy path length already defined", "policy syntax not currently supported", "policy when proxy language requires no policy", "section not found", "unable to get issuer details", "unable to get issuer keyid", "unknown bit string argument", "unknown extension", "unknown extension name", "unsupported option", "user too long", "a2i_GENERAL_NAME", "ASIDENTIFIERCHOICE_CANONIZE", "ASIDENTIFIERCHOICE_IS_CANONICAL", "COPY_EMAIL", "COPY_ISSUER", "DO_DIRNAME", "DO_EXT_CONF", "DO_EXT_I2D", "DO_EXT_NCONF", "DO_I2V_NAME_CONSTRAINTS", "GNAMES_FROM_SECTNAME", "hex_to_string", "i2s_ASN1_ENUMERATED", "I2S_ASN1_IA5STRING", "i2s_ASN1_INTEGER", "I2V_AUTHORITY_INFO_ACCESS", "NOTICE_SECTION", "NREF_NOS", "POLICY_SECTION", "PROCESS_PCI_VALUE", "R2I_CERTPOL", "R2I_PCI", "S2I_ASN1_IA5STRING", "s2i_ASN1_INTEGER", "s2i_ASN1_OCTET_STRING", "S2I_ASN1_SKEY_ID", "S2I_SKEY_ID", "SET_DIST_POINT_NAME", "string_to_hex", "SXNET_add_id_asc", "SXNET_add_id_INTEGER", "SXNET_add_id_ulong", "SXNET_get_id_asc", "SXNET_get_id_ulong", "V2I_ASIDENTIFIERS", "v2i_ASN1_BIT_STRING", "V2I_AUTHORITY_INFO_ACCESS", "V2I_AUTHORITY_KEYID", "V2I_BASIC_CONSTRAINTS", "V2I_CRLD", "V2I_EXTENDED_KEY_USAGE", "v2i_GENERAL_NAMES", "v2i_GENERAL_NAME_ex", "V2I_IDP", "V2I_IPADDRBLOCKS", "V2I_ISSUER_ALT", "V2I_NAME_CONSTRAINTS", "V2I_POLICY_CONSTRAINTS", "V2I_POLICY_MAPPINGS", "V2I_SUBJECT_ALT", "V3_ADDR_VALIDATE_PATH_INTERNAL", "V3_GENERIC_EXTENSION", "X509V3_add1_i2d", "X509V3_add_value", "X509V3_EXT_add", "X509V3_EXT_add_alias", "X509V3_EXT_conf", "X509V3_EXT_free", "X509V3_EXT_i2d", "X509V3_EXT_nconf", "X509V3_get_section", "X509V3_get_string", "X509V3_get_value_bool", "X509V3_parse_list", "X509_PURPOSE_add", "X509_PURPOSE_set", "GENERAL_NAMES", "GeneralNames", "GENERAL_NAME", "d.otherName", "d.rfc822Name", "d.dNSName", "d.x400Address", "d.directoryName", "d.ediPartyName", "d.uniformResourceIdentifier", "d.iPAddress", "d.registeredID", "EDIPARTYNAME", "nameAssigner", "partyName", "OTHERNAME", "type_id", "othername", "<unsupported>", "X400Name", "EdiPartyName", "email", "DirName", "IP Address", "<invalid>", "Registered ID", "othername:<unsupported>", "X400Name:<unsupported>", "EdiPartyName:<unsupported>", "email:%s", "DNS:%s", "URI:%s", "DirName: ", "IP Address:%d.%d.%d.%d", "IP Address:<invalid>", "v3_alt.c", "value=", "section=", "dirName", "otherName", "move", "v3_skey.c", "hash", "always", "v3_akey.c", "serial", "Not Before: ", "Not After: ", "PKEY_USAGE_PERIOD", "notBefore", "notAfter", "Key Compromise", "keyCompromise", "CA Compromise", "CACompromise", "Affiliation Changed", "affiliationChanged", "Superseded", "superseded", "Cessation Of Operation", "cessationOfOperation", "Certificate Hold", "certificateHold", "Remove From CRL", "removeFromCRL", "Privilege Withdrawn", "privilegeWithdrawn", "AA Compromise", "AACompromise", "%*sVersion: %ld (0x%lX)", "\n%*sZone: %s, User: ", "v3_sxnet.c", "SXNET", "SXNETID", "zone", "%*sCPS: %s\n", "%*sUser Notice:\n", "%*sOrganization: %s\n", "%*sNumber%s: ", "(null)", "%*sExplicit Text: %s\n", "%*sUnknown Qualifier: ", "%*sPolicy: ", "v3_cpols.c", "ia5org", "policyIdentifier", "userNotice", "explicitText", "organization", "noticeNumbers", "Critical", "Non Critical", "%*s%s\n", "%*sNo Qualifiers\n", "NOTICEREF", "noticenos", "USERNOTICE", "noticeref", "exptext", "POLICYQUALINFO", "pqualid", "d.cpsuri", "d.usernotice", "d.other", "POLICYINFO", "policyid", "qualifiers", "CERTIFICATEPOLICIES", "%*sFull Name:\n", "%*sRelative Name:\n%*s", "%*sOnly User Certificates\n", "%*sOnly CA Certificates\n", "%*sIndirect CRL\n", "%*s%s:\n%*s", "Only Some Reasons", "<EMPTY>\n", "%*sOnly Attribute Certificates\n", "%*s<EMPTY>\n", "Reasons", "%*sCRL Issuer:\n", "fullname", "v3_crld.c", "relativename", "CRLissuer", "reasons", "onlyCA", "onlyAA", "indirectCRL", "onlysomereasons", "onlyuser", "ISSUING_DIST_POINT", "distpoint", "onlyattr", "CRL_DIST_POINTS", "CRLDistributionPoints", "DIST_POINT", "DIST_POINT_NAME", "name.fullname", "name.relativename", "Unused", "unused", "v3_purp.c", "SSL client", "sslclient", "SSL server", "sslserver", "Netscape SSL server", "nssslserver", "S/MIME signing", "smimesign", "S/MIME encryption", "smimeencrypt", "CRL signing", "crlsign", "Any Purpose", "OCSP helper", "ocsphelper", "Time Stamp signing", "timestampsign", "v3_info.c", "AUTHORITY_INFO_ACCESS", "ACCESS_DESCRIPTION", "%*scrlUrl: ", "%*scrlNum: ", "%*scrlTime: ", "v3_ocsp.c", "%*sIssuer: ", "\n%*s", "AUTHORITY_KEYID", "v3_pmaps.c", "POLICY_MAPPINGS", "POLICY_MAPPING", "issuerDomainPolicy", "subjectDomainPolicy", "Require Explicit Policy", "Inhibit Policy Mapping", "v3_pcons.c", "requireExplicitPolicy", "inhibitPolicyMapping", "POLICY_CONSTRAINTS", "%*s%s:\n", "%d.%d.%d.%d/%d.%d.%d.%d", "Permitted", "Excluded", "permitted", "excluded", "v3_ncons.c", "NAME_CONSTRAINTS", "permittedSubtrees", "excludedSubtrees", "GENERAL_SUBTREE", "minimum", "PROXY_CERT_INFO_EXTENSION", "pcPathLengthConstraint", "proxyPolicy", "PROXY_POLICY", "policyLanguage", "policy", "v3_pci.c", "pathlen", "hex:", "text:", "%*sPath Length Constraint: ", "infinite", "%*sPolicy Language: ", "%*sPolicy Text: %s\n", "pcy_cache.c", "pcy_data.c", "pcy_tree.c", "%*sSigned Certificate Timestamp:", "\n%*sVersion   : ", "v1(0)", "\n%*sLog ID    : ", "\n%*sTimestamp : ", "%.14s.%03dZ", "\n%*sExtensions: ", "\n%*sSignature : ", "\n%*s            ", "unknown\n%*s", "%02X%02X", "v3_scts.c", "error loading dso", "list cannot be null", "missing close square bracket", "missing equal sign", "missing finish function", "missing init function", "module initialization error", "no close brace", "no conf", "no conf or environment variable", "no section", "no such file", "no value", "unable to create new section", "unknown module name", "variable expansion too long", "variable has no value", "CONF_dump_fp", "CONF_load", "CONF_load_bio", "CONF_load_fp", "CONF_modules_load", "CONF_parse_list", "DEF_LOAD", "DEF_LOAD_BIO", "MODULE_INIT", "MODULE_LOAD_DSO", "MODULE_RUN", "NCONF_dump_bio", "NCONF_dump_fp", "NCONF_get_number", "NCONF_get_number_e", "NCONF_get_section", "NCONF_get_string", "NCONF_load", "NCONF_load_bio", "NCONF_load_fp", "NCONF_new", "STR_COPY", "openssl_conf", "OPENSSL_init", "OPENSSL_finish", "conf_mod.c", "module=", ", path=", "%-8d", ", value=", ", retcode=", "OPENSSL_CONF", "openssl.cnf", "PKCS7_ATTR_VERIFY", "PKCS7_ATTRIBUTES", "PKCS7_ATTR_SIGN", "PKCS7_DIGEST", "contents", "PKCS7_ENCRYPT", "enc_data", "PKCS7_SIGN_ENVELOPE", "recipientinfo", "md_algs", "signer_info", "PKCS7_ENC_CONTENT", "PKCS7_RECIP_INFO", "issuer_and_serial", "key_enc_algor", "enc_key", "PKCS7_ENVELOPE", "PKCS7_ISSUER_AND_SERIAL", "PKCS7_SIGNER_INFO", "digest_alg", "auth_attr", "digest_enc_alg", "enc_digest", "unauth_attr", "PKCS7_SIGNED", "d.data", "d.sign", "d.enveloped", "d.signed_and_enveloped", "d.digest", "d.encrypted", "pk7_lib.c", "certificate verify error", "cipher not initialized", "content and data present", "ctrl error", "decrypted key is wrong length", "digest failure", "encryption ctrl failure", "encryption not supported for this key type", "error adding recipient", "error setting cipher", "invalid null pointer", "invalid signed data type", "missing ceripend info", "no content", "no matching digest type found", "no recipient matches certificate", "no recipient matches key", "no signatures on data", "no signers", "operation not supported on this type", "pkcs7 add signature error", "pkcs7 add signer error", "pkcs7 datafinal", "pkcs7 datafinal error", "pkcs7 datasign", "pkcs7 parse error", "pkcs7 sig parse error", "private key does not match certificate", "signature failure", "signer certificate not found", "signing ctrl failure", "signing not supported for this key type", "smime text error", "unable to find certificate", "unable to find mem bio", "unable to find message digest", "unknown digest type", "unknown operation", "unsupported cipher type", "unsupported content type", "wrong content type", "wrong pkcs7 type", "B64_READ_PKCS7", "B64_WRITE_PKCS7", "DO_PKCS7_SIGNED_ATTRIB", "i2d_PKCS7_bio_stream", "PKCS7_add0_attrib_signing_time", "PKCS7_add_attrib_smimecap", "PKCS7_add_certificate", "PKCS7_add_crl", "PKCS7_add_recipient_info", "PKCS7_add_signature", "PKCS7_add_signer", "PKCS7_BIO_ADD_DIGEST", "PKCS7_COPY_EXISTING_DIGEST", "PKCS7_ctrl", "PKCS7_dataDecode", "PKCS7_dataFinal", "PKCS7_dataInit", "PKCS7_DATASIGN", "PKCS7_dataVerify", "PKCS7_decrypt", "PKCS7_DECRYPT_RINFO", "PKCS7_ENCODE_RINFO", "PKCS7_encrypt", "PKCS7_final", "PKCS7_FIND_DIGEST", "PKCS7_get0_signers", "PKCS7_RECIP_INFO_set", "PKCS7_set_cipher", "PKCS7_set_content", "PKCS7_set_digest", "PKCS7_set_type", "PKCS7_sign", "PKCS7_signatureVerify", "PKCS7_SIGNER_INFO_set", "PKCS7_SIGNER_INFO_sign", "PKCS7_sign_add_signer", "PKCS7_simple_smimecap", "PKCS7_verify", "SMIME_read_PKCS7", "pk7_doit.c", "pk7_attr.c", "p12_crpt.c", "p12_key.c", "p12_utl.c", "cant pack structure", "content type not data", "encrypt error", "error setting encrypted data type", "invalid null pkcs12 pointer", "iv gen error", "key gen error", "mac absent", "mac generation error", "mac setup error", "mac string set error", "mac verify error", "mac verify failure", "parse error", "pkcs12 algor cipherinit error", "pkcs12 cipherfinal error", "pkcs12 pbe crypt error", "unknown digest algorithm", "unsupported pkcs12 mode", "PARSE_BAG", "PARSE_BAGS", "PKCS12_ADD_FRIENDLYNAME", "PKCS12_add_friendlyname_asc", "PKCS12_add_friendlyname_uni", "PKCS12_add_localkeyid", "PKCS12_create", "PKCS12_gen_mac", "PKCS12_init", "PKCS12_item_decrypt_d2i", "PKCS12_item_i2d_encrypt", "PKCS12_item_pack_safebag", "PKCS12_key_gen_asc", "PKCS12_key_gen_uni", "PKCS12_MAKE_KEYBAG", "PKCS12_MAKE_SHKEYBAG", "PKCS12_newpass", "PKCS12_pack_p7data", "PKCS12_pack_p7encdata", "PKCS12_parse", "PKCS12_pbe_crypt", "PKCS12_PBE_keyivgen", "PKCS12_setup_mac", "PKCS12_set_mac", "PKCS12_unpack_authsafes", "PKCS12_unpack_p7data", "PKCS12_verify_mac", "PKCS8_add_keyusage", "PKCS8_encrypt", "comp_lib.c", "zlib deflate error", "zlib inflate error", "zlib not supported", "BIO_ZLIB_FLUSH", "BIO_ZLIB_NEW", "BIO_ZLIB_READ", "BIO_ZLIB_WRITE", "c_zlib.c", "zlib error:", "compress", "inflateEnd", "inflateInit_", "deflateEnd", "deflateInit_", "zError", "(undef)", "OCSP_SERVICELOC", "locator", "OCSP_CRLID", "crlUrl", "crlNum", "crlTime", "OCSP_BASICRESP", "tbsResponseData", "signatureAlgorithm", "certs", "OCSP_RESPDATA", "responderId", "producedAt", "responses", "responseExtensions", "OCSP_SINGLERESP", "certId", "certStatus", "thisUpdate", "nextUpdate", "singleExtensions", "OCSP_CERTSTATUS", "value.good", "value.revoked", "value.unknown", "OCSP_REVOKEDINFO", "revocationTime", "revocationReason", "OCSP_RESPID", "value.byName", "value.byKey", "OCSP_RESPONSE", "responseStatus", "responseBytes", "OCSP_RESPBYTES", "responseType", "response", "OCSP_REQUEST", "tbsRequest", "optionalSignature", "OCSP_REQINFO", "requestorName", "requestList", "requestExtensions", "OCSP_ONEREQ", "reqCert", "singleRequestExtensions", "OCSP_CERTID", "issuerNameHash", "issuerKeyHash", "OCSP_SIGNATURE", "ocsp_ht.c", "Code=", ",Reason=", "digest err", "error in nextupdate field", "error in thisupdate field", "error parsing url", "missing ocspsigning usage", "nextupdate before thisupdate", "not basic response", "no certificates in chain", "no response data", "no revoked time", "request not signed", "response contains no revocation data", "root ca not trusted", "server read error", "server response error", "server response parse error", "server write error", "status expired", "status not yet valid", "status too old", "unknown message digest", "unsupported requestorname type", "ASN1_STRING_encode", "D2I_OCSP_NONCE", "OCSP_basic_add1_status", "OCSP_basic_sign", "OCSP_basic_verify", "OCSP_cert_id_new", "OCSP_CHECK_DELEGATED", "OCSP_CHECK_IDS", "OCSP_CHECK_ISSUER", "OCSP_check_validity", "OCSP_MATCH_ISSUERID", "OCSP_parse_url", "OCSP_request_sign", "OCSP_request_verify", "OCSP_response_get1_basic", "OCSP_sendreq_bio", "OCSP_sendreq_nbio", "PARSE_HTTP_LINE1", "REQUEST_VERIFY", "common ok and cancel characters", "index too large", "index too small", "no result buffer", "result too large", "result too small", "unknown control command", "GENERAL_ALLOCATE_BOOLEAN", "GENERAL_ALLOCATE_PROMPT", "GENERAL_ALLOCATE_STRING", "UI_ctrl", "UI_dup_error_string", "UI_dup_info_string", "UI_dup_input_boolean", "UI_dup_input_string", "UI_dup_verify_string", "UI_get0_result", "UI_new_method", "UI_set_result", "add signer error", "certificate already present", "certificate has no keyid", "cipher initialisation error", "cipher parameter initialisation error", "cms datafinal error", "cms lib", "contentidentifier mismatch", "content not found", "content type mismatch", "content type not compressed data", "content type not enveloped data", "content type not signed data", "content verify error", "ctrl failure", "digest error", "error getting public key", "error reading messagedigest attribute", "error setting key", "error setting recipientinfo", "invalid encrypted key length", "invalid key encryption parameter", "md bio init error", "messagedigest attribute wrong length", "messagedigest wrong length", "msgsigdigest error", "msgsigdigest verification failure", "msgsigdigest wrong length", "need one signer", "not a signed receipt", "not encrypted data", "not kek", "not key agreement", "not key transport", "not pwri", "not supported for this key type", "no cipher", "no key", "no key or cert", "no matching digest", "no matching recipient", "no matching signature", "no msgsigdigest", "no password", "no private key", "no receipt request", "receipt decode error", "recipient error", "signfinal error", "store init error", "type not compressed data", "type not data", "type not digested data", "type not encrypted data", "type not enveloped data", "unable to finalize context", "unknown digest algorihm", "unknown id", "unsupported kek algorithm", "unsupported key encryption algorithm", "unsupported recipient type", "unsupported recpientinfo type", "unwrap error", "unwrap failure", "verification failure", "wrap error", "CHECK_CONTENT", "CMS_add0_cert", "CMS_add0_recipient_key", "CMS_add0_recipient_password", "CMS_add1_ReceiptRequest", "CMS_add1_recipient_cert", "CMS_add1_signer", "CMS_ADD1_SIGNINGTIME", "CMS_compress", "cms_CompressedData_create", "cms_CompressedData_init_bio", "CMS_COPY_CONTENT", "CMS_COPY_MESSAGEDIGEST", "CMS_data", "CMS_dataFinal", "CMS_dataInit", "CMS_decrypt", "CMS_decrypt_set1_key", "CMS_decrypt_set1_password", "CMS_decrypt_set1_pkey", "cms_DigestAlgorithm_find_ctx", "cms_DigestAlgorithm_init_bio", "cms_DigestedData_do_final", "CMS_digest_verify", "cms_encode_Receipt", "CMS_encrypt", "cms_EncryptedContent_init_bio", "CMS_EncryptedData_decrypt", "CMS_EncryptedData_encrypt", "CMS_EncryptedData_set1_key", "CMS_EnvelopedData_create", "cms_EnvelopedData_init_bio", "CMS_ENVELOPED_DATA_INIT", "cms_env_asn1_ctrl", "CMS_final", "CMS_GET0_CERTIFICATE_CHOICES", "CMS_get0_content", "CMS_GET0_ECONTENT_TYPE", "cms_get0_enveloped", "CMS_GET0_REVOCATION_CHOICES", "CMS_GET0_SIGNED", "cms_msgSigDigest_add1", "CMS_ReceiptRequest_create0", "cms_Receipt_verify", "CMS_RecipientInfo_decrypt", "CMS_RecipientInfo_encrypt", "cms_RecipientInfo_kari_encrypt", "CMS_RecipientInfo_kari_get0_alg", "CMS_RecipientInfo_kari_get0_orig_id", "CMS_RecipientInfo_kari_get0_reks", "CMS_RecipientInfo_kari_orig_id_cmp", "CMS_RECIPIENTINFO_KEKRI_DECRYPT", "CMS_RECIPIENTINFO_KEKRI_ENCRYPT", "CMS_RecipientInfo_kekri_get0_id", "CMS_RecipientInfo_kekri_id_cmp", "CMS_RecipientInfo_ktri_cert_cmp", "CMS_RECIPIENTINFO_KTRI_DECRYPT", "CMS_RECIPIENTINFO_KTRI_ENCRYPT", "CMS_RecipientInfo_ktri_get0_algs", "CMS_RecipientInfo_ktri_get0_signer_id", "cms_RecipientInfo_pwri_crypt", "CMS_RecipientInfo_set0_key", "CMS_RecipientInfo_set0_password", "CMS_RecipientInfo_set0_pkey", "CMS_SD_ASN1_CTRL", "cms_set1_ias", "cms_set1_keyid", "cms_set1_SignerIdentifier", "CMS_set_detached", "CMS_sign", "CMS_SIGNED_DATA_INIT", "CMS_SIGNERINFO_CONTENT_SIGN", "CMS_SignerInfo_sign", "CMS_SignerInfo_verify", "CMS_SIGNERINFO_VERIFY_CERT", "CMS_SignerInfo_verify_content", "CMS_sign_receipt", "CMS_stream", "CMS_uncompress", "CMS_verify", "cms_env.c", "cms_enc.c", "cms_pwri.c", "cms_kari.c", "pqueue.c", "item\t%02x%02x%02x%02x%02x%02x%02x%02x\n", "bad pkcs7 type", "bad type", "could not set engine", "could not set time", "d2i ts resp int failed", "detached content", "ess add signing cert error", "ess signing certificate error", "invalid signer certificate purpose", "message imprint mismatch", "nonce mismatch", "nonce not returned", "no time stamp token", "pkcs7 add signed attr error", "pkcs7 to ts tst info failed", "policy mismatch", "response setup error", "there must be one signer", "time syscall error", "token not present", "token present", "tsa name mismatch", "tsa untrusted", "tst info setup error", "ts datasign", "unacceptable policy", "unsupported md algorithm", "unsupported version", "d2i_TS_RESP", "DEF_SERIAL_CB", "DEF_TIME_CB", "ESS_ADD_SIGNING_CERT", "ESS_CERT_ID_NEW_INIT", "ESS_SIGNING_CERT_NEW_INIT", "INT_TS_RESP_VERIFY_TOKEN", "PKCS7_to_TS_TST_INFO", "TS_ACCURACY_set_micros", "TS_ACCURACY_set_millis", "TS_ACCURACY_set_seconds", "TS_CHECK_IMPRINTS", "TS_CHECK_NONCES", "TS_CHECK_POLICY", "TS_CHECK_SIGNING_CERTS", "TS_CHECK_STATUS_INFO", "TS_COMPUTE_IMPRINT", "TS_CONF_set_default_engine", "TS_GET_STATUS_TEXT", "TS_MSG_IMPRINT_set_algo", "TS_REQ_set_msg_imprint", "TS_REQ_set_nonce", "TS_REQ_set_policy_id", "TS_RESP_create_response", "TS_RESP_CREATE_TST_INFO", "TS_RESP_CTX_add_failure_info", "TS_RESP_CTX_add_md", "TS_RESP_CTX_add_policy", "TS_RESP_CTX_new", "TS_RESP_CTX_set_accuracy", "TS_RESP_CTX_set_certs", "TS_RESP_CTX_set_def_policy", "TS_RESP_CTX_set_signer_cert", "TS_RESP_CTX_set_status_info", "TS_RESP_GET_POLICY", "TS_RESP_SET_GENTIME_WITH_PRECISION", "TS_RESP_set_status_info", "TS_RESP_set_tst_info", "TS_RESP_SIGN", "TS_RESP_verify_signature", "TS_RESP_verify_token", "TS_TST_INFO_set_accuracy", "TS_TST_INFO_set_msg_imprint", "TS_TST_INFO_set_nonce", "TS_TST_INFO_set_policy_id", "TS_TST_INFO_set_serial", "TS_TST_INFO_set_time", "TS_TST_INFO_set_tsa", "TS_VERIFY", "TS_VERIFY_CERT", "TS_VERIFY_CTX_new", "srp_lib.c", "8192", "6144", "4096", "3072", "2048", "1536", "srp_vfy.c", "OpenSSL CMAC method", "cipher", "hexkey", "no dynlock create callback", "CRYPTO_get_ex_new_index", "CRYPTO_get_new_dynlockid", "CRYPTO_get_new_lockid", "CRYPTO_set_ex_data", "DEF_ADD_INDEX", "DEF_GET_CLASS", "FIPS_mode_set", "INT_DUP_EX_DATA", "INT_FREE_EX_DATA", "INT_NEW_EX_DATA", "OPENSSL_armcap", "OBJ_add_object", "OBJ_create", "OBJ_dup", "OBJ_NAME_new_index", "OBJ_nid2ln", "OBJ_nid2obj", "OBJ_nid2sn", "hm_ameth.c", "OpenSSL HMAC method", "hm_pmeth.c", "des(%s,%s,%s,%s)", "cisc", "long", "aes(partial)", "idea(int)", "gcm128.c", "bn_add.c", "bn_div.c", "bn_exp.c", "bn_mod.c", "bn_rand.c", "bn_blind.c", "bn_gcd.c", "arg2 lt arg3", "bad reciprocal", "bignum too long", "bits too small", "called with even modulus", "div by zero", "encoding error", "expand on static bignum data", "input not reduced", "invalid length", "invalid range", "invalid shift", "not a square", "not initialized", "no inverse", "no solution", "p is not prime", "too many iterations", "too many temporary variables", "BNRAND", "BN_BLINDING_convert_ex", "BN_BLINDING_create_param", "BN_BLINDING_invert_ex", "BN_BLINDING_new", "BN_BLINDING_update", "BN_bn2dec", "BN_bn2hex", "BN_CTX_get", "BN_CTX_new", "BN_CTX_start", "BN_div", "BN_div_no_branch", "BN_div_recp", "BN_exp", "bn_expand2", "BN_EXPAND_INTERNAL", "BN_GF2m_mod", "BN_GF2m_mod_exp", "BN_GF2m_mod_mul", "BN_GF2m_mod_solve_quad", "BN_GF2m_mod_solve_quad_arr", "BN_GF2m_mod_sqr", "BN_GF2m_mod_sqrt", "BN_lshift", "BN_mod_exp2_mont", "BN_mod_exp_mont", "BN_mod_exp_mont_consttime", "BN_mod_exp_mont_word", "BN_mod_exp_recp", "BN_mod_exp_simple", "BN_mod_inverse", "BN_mod_inverse_no_branch", "BN_mod_lshift_quick", "BN_mod_mul_reciprocal", "BN_mod_sqrt", "BN_mpi2bn", "BN_new", "BN_rand", "BN_rand_range", "BN_rshift", "BN_usub", "bn_recp.c", "bn_mont.c", "asn1 error", "asn1 unknown field", "bignum out of range", "coordinates out of range", "d2i ecpkparameters failure", "discriminant is zero", "ec group new by name failure", "field too large", "gf2m not supported", "group2pkparameters failure", "i2d ecpkparameters failure", "incompatible objects", "invalid argument", "invalid compressed point", "invalid compression bit", "invalid curve", "invalid digest type", "invalid encoding", "invalid field", "invalid form", "invalid group order", "invalid pentanomial basis", "invalid private key", "invalid trinomial basis", "kdf parameter error", "keys not set", "missing private key", "not a NIST prime", "not a supported NIST prime", "not implemented", "no field mod", "no parameters set", "passed null parameter", "peer key error", "pkparameters2group failure", "point at infinity", "point is not on curve", "shared info error", "slot full", "undefined generator", "undefined order", "unknown group", "unknown order", "unsupported field", "wrong curve parameters", "wrong order", "BN_TO_FELEM", "COMPUTE_WNAF", "d2i_ECParameters", "d2i_ECPKParameters", "d2i_ECPrivateKey", "DO_EC_KEY_PRINT", "ECDH_CMS_DECRYPT", "ECDH_CMS_SET_SHARED_INFO", "ECKEY_PARAM2TYPE", "ECKEY_PARAM_DECODE", "ECKEY_PRIV_DECODE", "ECKEY_PRIV_ENCODE", "ECKEY_PUB_DECODE", "ECKEY_PUB_ENCODE", "ECKEY_TYPE2PARAM", "ECParameters_print", "ECParameters_print_fp", "ECPKParameters_print", "ECPKParameters_print_fp", "ecp_nistz256_get_affine", "ecp_nistz256_mult_precompute", "ecp_nistz256_points_mul", "ecp_nistz256_pre_comp_new", "ecp_nistz256_set_words", "ecp_nistz256_windowed_mul", "ECP_NIST_MOD_192", "ECP_NIST_MOD_224", "ECP_NIST_MOD_256", "ECP_NIST_MOD_521", "EC_ASN1_GROUP2CURVE", "EC_ASN1_GROUP2FIELDID", "EC_ASN1_GROUP2PARAMETERS", "EC_ASN1_GROUP2PKPARAMETERS", "EC_ASN1_PARAMETERS2GROUP", "EC_ASN1_PKPARAMETERS2GROUP", "EC_EX_DATA_set_data", "EC_GF2M_MONTGOMERY_POINT_MULTIPLY", "ec_GF2m_simple_group_check_discriminant", "ec_GF2m_simple_group_set_curve", "ec_GF2m_simple_oct2point", "ec_GF2m_simple_point2oct", "ec_GF2m_simple_point_get_affine_coordinates", "ec_GF2m_simple_point_set_affine_coordinates", "ec_GF2m_simple_set_compressed_coordinates", "ec_GFp_mont_field_decode", "ec_GFp_mont_field_encode", "ec_GFp_mont_field_mul", "ec_GFp_mont_field_set_to_one", "ec_GFp_mont_field_sqr", "ec_GFp_mont_group_set_curve", "EC_GFP_MONT_GROUP_SET_CURVE_GFP", "ec_GFp_nistp224_group_set_curve", "ec_GFp_nistp224_points_mul", "ec_GFp_nistp224_point_get_affine_coordinates", "ec_GFp_nistp256_group_set_curve", "ec_GFp_nistp256_points_mul", "ec_GFp_nistp256_point_get_affine_coordinates", "ec_GFp_nistp521_group_set_curve", "ec_GFp_nistp521_points_mul", "ec_GFp_nistp521_point_get_affine_coordinates", "ec_GFp_nist_field_mul", "ec_GFp_nist_field_sqr", "ec_GFp_nist_group_set_curve", "ec_GFp_simple_group_check_discriminant", "ec_GFp_simple_group_set_curve", "EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP", "EC_GFP_SIMPLE_GROUP_SET_GENERATOR", "ec_GFp_simple_make_affine", "ec_GFp_simple_oct2point", "ec_GFp_simple_point2oct", "ec_GFp_simple_points_make_affine", "ec_GFp_simple_point_get_affine_coordinates", "EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP", "ec_GFp_simple_point_set_affine_coordinates", "EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP", "ec_GFp_simple_set_compressed_coordinates", "EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP", "EC_GROUP_check", "EC_GROUP_check_discriminant", "EC_GROUP_copy", "EC_GROUP_get0_generator", "EC_GROUP_get_cofactor", "EC_GROUP_get_curve_GF2m", "EC_GROUP_get_curve_GFp", "EC_GROUP_get_degree", "EC_GROUP_get_order", "EC_GROUP_get_pentanomial_basis", "EC_GROUP_get_trinomial_basis", "EC_GROUP_new", "EC_GROUP_new_by_curve_name", "EC_GROUP_NEW_FROM_DATA", "EC_GROUP_precompute_mult", "EC_GROUP_set_curve_GF2m", "EC_GROUP_set_curve_GFp", "EC_GROUP_SET_EXTRA_DATA", "EC_GROUP_set_generator", "EC_KEY_check_key", "EC_KEY_copy", "EC_KEY_generate_key", "EC_KEY_new", "EC_KEY_print", "EC_KEY_print_fp", "EC_KEY_set_public_key_affine_coordinates", "EC_POINTs_make_affine", "EC_POINT_add", "EC_POINT_cmp", "EC_POINT_copy", "EC_POINT_dbl", "EC_POINT_get_affine_coordinates_GF2m", "EC_POINT_get_affine_coordinates_GFp", "EC_POINT_get_Jprojective_coordinates_GFp", "EC_POINT_invert", "EC_POINT_is_at_infinity", "EC_POINT_is_on_curve", "EC_POINT_make_affine", "EC_POINT_mul", "EC_POINT_new", "EC_POINT_oct2point", "EC_POINT_point2oct", "EC_POINT_set_affine_coordinates_GF2m", "EC_POINT_set_affine_coordinates_GFp", "EC_POINT_set_compressed_coordinates_GF2m", "EC_POINT_set_compressed_coordinates_GFp", "EC_POINT_set_Jprojective_coordinates_GFp", "EC_POINT_set_to_infinity", "EC_PRE_COMP_DUP", "EC_PRE_COMP_NEW", "ec_wNAF_mul", "ec_wNAF_precompute_mult", "i2d_ECParameters", "i2d_ECPKParameters", "i2d_ECPrivateKey", "i2o_ECPublicKey", "NISTP224_PRE_COMP_NEW", "NISTP256_PRE_COMP_NEW", "NISTP521_PRE_COMP_NEW", "o2i_ECPublicKey", "OLD_EC_PRIV_DECODE", "PKEY_EC_CTRL", "PKEY_EC_CTRL_STR", "PKEY_EC_DERIVE", "PKEY_EC_KEYGEN", "PKEY_EC_PARAMGEN", "PKEY_EC_SIGN", "ec_asn1.c", "EC_PRIVATEKEY", "privateKey", "parameters", "publicKey", "ECPKPARAMETERS", "value.named_curve", "value.parameters", "value.implicitlyCA", "ECPARAMETERS", "fieldID", "cofactor", "X9_62_CURVE", "X9_62_FIELDID", "fieldType", "p.prime", "p.char_two", "p.other", "X9_62_CHARACTERISTIC_TWO", "p.onBasis", "p.tpBasis", "p.ppBasis", "X9_62_PENTANOMIAL", "ec2_smpl.c", "ec2_mult.c", "ec_ameth.c", "Private-Key", "priv:", "pub: ", "ECDSA-Parameters", "Public-Key", "OpenSSL EC algorithm", "ec_paramgen_curve", "ec_pmeth.c", "ec_param_enc", "explicit", "named_curve", "ecdh_kdf_md", "ecdh_cofactor_mode", "eck_prn.c", "ASN1 OID: %s", "NIST CURVE: %s\n", "Field Type: %s\n", "Basis Type: %s\n", "Polynomial:", "A:   ", "Prime:", "B:   ", "Generator (compressed):", "Order: ", "Generator (uncompressed):", "Generator (hybrid):", "Cofactor: ", "Seed:", "ecp_oct.c", "ec2_oct.c", "rsa_eay.c", "Eric Young's PKCS#1 RSA", "algorithm mismatch", "bad e value", "bad fixed header decrypt", "bad pad byte count", "block type is not 01", "block type is not 02", "data greater than mod len", "data too large", "data too large for key size", "data too large for modulus", "data too small", "data too small for key size", "digest does not match", "digest too big for rsa key", "dmp1 not congruent to d", "dmq1 not congruent to d", "d e not congruent to 1", "first octet invalid", "illegal or unsupported padding mode", "invalid digest length", "invalid header", "invalid keybits", "invalid label", "invalid message length", "invalid mgf1 md", "invalid oaep parameters", "invalid padding", "invalid padding mode", "invalid pss parameters", "invalid pss saltlen", "invalid salt length", "invalid trailer", "invalid x931 digest", "iqmp not inverse of q", "key size too small", "last octet invalid", "modulus too large", "non fips rsa method", "no public exponent", "null before block missing", "n does not equal p q", "oaep decoding error", "operation not allowed in fips mode", "padding check failed", "pkcs decoding error", "p not prime", "q not prime", "rsa operations not supported", "salt length check failed", "salt length recovery failed", "sslv3 rollback attack", "unknown algorithm type", "unknown mask digest", "unknown padding type", "unknown pss digest", "unsupported encryption type", "unsupported label source", "unsupported mask algorithm", "unsupported mask parameter", "unsupported signature type", "value missing", "CHECK_PADDING_MD", "DO_RSA_PRINT", "INT_RSA_VERIFY", "MEMORY_LOCK", "OLD_RSA_PRIV_DECODE", "PKEY_RSA_CTRL", "PKEY_RSA_CTRL_STR", "PKEY_RSA_SIGN", "PKEY_RSA_VERIFY", "PKEY_RSA_VERIFYRECOVER", "RSA_ALGOR_TO_MD", "RSA_BUILTIN_KEYGEN", "RSA_check_key", "RSA_CMS_DECRYPT", "RSA_EAY_PRIVATE_DECRYPT", "RSA_EAY_PRIVATE_ENCRYPT", "RSA_EAY_PUBLIC_DECRYPT", "RSA_EAY_PUBLIC_ENCRYPT", "RSA_generate_key", "RSA_generate_key_ex", "RSA_ITEM_VERIFY", "RSA_memory_lock", "RSA_MGF1_TO_MD", "RSA_new_method", "RSA_NULL", "RSA_NULL_MOD_EXP", "RSA_NULL_PRIVATE_DECRYPT", "RSA_NULL_PRIVATE_ENCRYPT", "RSA_NULL_PUBLIC_DECRYPT", "RSA_NULL_PUBLIC_ENCRYPT", "RSA_padding_add_none", "RSA_padding_add_PKCS1_OAEP", "RSA_padding_add_PKCS1_OAEP_mgf1", "RSA_padding_add_PKCS1_PSS", "RSA_padding_add_PKCS1_PSS_mgf1", "RSA_padding_add_PKCS1_type_1", "RSA_padding_add_PKCS1_type_2", "RSA_padding_add_SSLv23", "RSA_padding_add_X931", "RSA_padding_check_none", "RSA_padding_check_PKCS1_OAEP", "RSA_padding_check_PKCS1_OAEP_mgf1", "RSA_padding_check_PKCS1_type_1", "RSA_padding_check_PKCS1_type_2", "RSA_padding_check_SSLv23", "RSA_padding_check_X931", "RSA_print", "RSA_print_fp", "RSA_private_decrypt", "RSA_private_encrypt", "RSA_PRIV_DECODE", "RSA_PRIV_ENCODE", "RSA_PSS_TO_CTX", "RSA_public_decrypt", "RSA_public_encrypt", "RSA_PUB_DECODE", "RSA_setup_blinding", "RSA_sign", "RSA_sign_ASN1_OCTET_STRING", "RSA_verify", "RSA_verify_ASN1_OCTET_STRING", "RSA_verify_PKCS1_PSS", "RSA_verify_PKCS1_PSS_mgf1", "rsa_pk1.c", "rsa_ssl.c", "rsa_none.c", "rsa_oaep.c", "rsa_x931.c", "rsa_ameth.c", "Hash Algorithm: ", "sha1 (default)", "Mask Algorithm: ", " with ", "INVALID", "mgf1 with sha1 (default)", "Salt Length: 0x", "14 (default)", "Trailer Field: 0x", "BC (default)", " (INVALID PSS PARAMETERS)\n", "Public-Key: (%d bit)\n", "Modulus:", "Exponent:", "publicExponent:", "modulus:", "Private-Key: (%d bit)\n", "privateExponent:", "prime1:", "prime2:", "exponent1:", "exponent2:", "coefficient:", "OpenSSL RSA method", "rsa_pmeth.c", "rsa_padding_mode", "sslv23", "oeap", "oaep", "x931", "rsa_pss_saltlen", "rsa_keygen_bits", "rsa_keygen_pubexp", "rsa_mgf1_md", "rsa_oaep_md", "rsa_oaep_label", "dsa_lib.c", "bad q value", "bn error", "invalid parameters", "need new setup values", "non fips dsa method", "parameter encoding error", "d2i_DSA_SIG", "DO_DSA_PRINT", "DSAparams_print", "DSAparams_print_fp", "DSA_BUILTIN_PARAMGEN2", "DSA_do_sign", "DSA_do_verify", "DSA_generate_key", "DSA_generate_parameters_ex", "DSA_new_method", "DSA_PARAM_DECODE", "DSA_print_fp", "DSA_PRIV_DECODE", "DSA_PRIV_ENCODE", "DSA_PUB_DECODE", "DSA_PUB_ENCODE", "DSA_sign", "DSA_sign_setup", "DSA_SIG_new", "DSA_SIG_PRINT", "DSA_verify", "i2d_DSA_SIG", "OLD_DSA_PRIV_DECODE", "PKEY_DSA_CTRL", "PKEY_DSA_CTRL_STR", "PKEY_DSA_KEYGEN", "SIG_CB", "dsa_ossl.c", "OpenSSL DSA method", "dsa_ameth.c", "r:   ", "s:   ", "P:   ", "Q:   ", "G:   ", "dsa_paramgen_bits", "dsa_paramgen_q_bits", "dsa_paramgen_md", "dsa_pmeth.c", "ecs_lib.c", "ECDSA_SIG", "ecs_ossl.c", "OpenSSL ECDSA method", "err ec lib", "non fips method", "random number generation failed", "signature malloc failed", "ECDSA_CHECK", "ECDSA_DATA_NEW_METHOD", "ECDSA_do_sign", "ECDSA_do_verify", "ECDSA_METHOD_new", "ECDSA_sign_setup", "int_dhx942_dh", "vparams", "int_dhvparams", "counter", "bad generator", "invalid public key", "no private value", "COMPUTE_KEY", "DHparams_print_fp", "DH_BUILTIN_GENPARAMS", "DH_CMS_DECRYPT", "DH_CMS_SET_PEERKEY", "DH_CMS_SET_SHARED_INFO", "DH_compute_key", "DH_generate_key", "DH_generate_parameters_ex", "DH_new_method", "DH_PARAM_DECODE", "DH_PRIV_DECODE", "DH_PRIV_ENCODE", "DH_PUB_DECODE", "DH_PUB_ENCODE", "DO_DH_PRINT", "GENERATE_KEY", "GENERATE_PARAMETERS", "PKEY_DH_DERIVE", "PKEY_DH_KEYGEN", "dh_pmeth.c", "dh_paramgen_prime_len", "dh_rfc5114", "dh_paramgen_generator", "dh_paramgen_subprime_len", "dh_paramgen_type", "ech_lib.c", "ech_ossl.c", "OpenSSL ECDH method", "KDF failed", "point arithmetic failure", "ECDH_CHECK", "ECDH_compute_key", "ECDH_DATA_new_method", "control command failed", "dso already loaded", "empty file structure", "failure", "filename too big", "cleanup method function failed", "incorrect file syntax", "could not load the shared library", "name translation failed", "no filename", "no file specification", "a null shared library handle was used", "set filename failed", "the meth_data stack is corrupt", "could not bind to the requested symbol name", "could not unload the shared library", "functionality not supported", "BEOS_BIND_FUNC", "BEOS_BIND_VAR", "BEOS_LOAD", "BEOS_NAME_CONVERTER", "BEOS_UNLOAD", "DLFCN_BIND_FUNC", "DLFCN_BIND_VAR", "DLFCN_LOAD", "DLFCN_MERGER", "DLFCN_NAME_CONVERTER", "DLFCN_UNLOAD", "DL_BIND_FUNC", "DL_BIND_VAR", "DL_LOAD", "DL_MERGER", "DL_NAME_CONVERTER", "DL_UNLOAD", "DSO_bind_func", "DSO_bind_var", "DSO_convert_filename", "DSO_ctrl", "DSO_free", "DSO_get_filename", "DSO_get_loaded_filename", "DSO_global_lookup", "DSO_load", "DSO_merge", "DSO_new_method", "DSO_pathbyaddr", "DSO_set_filename", "DSO_set_name_converter", "DSO_up_ref", "GLOBAL_LOOKUP_FUNC", "PATHBYADDR", "VMS_BIND_SYM", "VMS_LOAD", "VMS_MERGER", "VMS_UNLOAD", "WIN32_BIND_FUNC", "WIN32_BIND_VAR", "WIN32_GLOBALLOOKUP", "WIN32_GLOBALLOOKUP_FUNC", "WIN32_JOINER", "WIN32_LOAD", "WIN32_MERGER", "WIN32_NAME_CONVERTER", "WIN32_PATHBYADDR", "WIN32_SPLITTER", "WIN32_UNLOAD", "dso_lib.c", "already loaded", "argument is not a number", "cmd not executable", "command takes input", "command takes no input", "conflicting engine id", "ctrl command not implemented", "dh not implemented", "dsa not implemented", "DSO failure", "dso not found", "engines section error", "engine configuration error", "engine is not in the list", "engine section error", "failed loading private key", "failed loading public key", "finish failed", "could not obtain hardware handle", "'id' or 'name' missing", "init failed", "internal list error", "invalid cmd name", "invalid cmd number", "invalid init value", "invalid string", "not initialised", "not loaded", "no control function", "no index", "no load function", "no reference", "no such engine", "no unload function", "provide parameters", "rsa not implemented", "unimplemented cipher", "unimplemented digest", "unimplemented public key method", "version incompatibility", "DYNAMIC_CTRL", "DYNAMIC_GET_DATA_CTX", "DYNAMIC_LOAD", "DYNAMIC_SET_DATA_CTX", "ENGINE_add", "ENGINE_by_id", "ENGINE_cmd_is_executable", "ENGINE_ctrl", "ENGINE_ctrl_cmd", "ENGINE_ctrl_cmd_string", "ENGINE_finish", "ENGINE_FREE_UTIL", "ENGINE_get_cipher", "ENGINE_GET_DEFAULT_TYPE", "ENGINE_get_digest", "ENGINE_get_next", "ENGINE_get_pkey_asn1_meth", "ENGINE_get_pkey_meth", "ENGINE_get_prev", "ENGINE_init", "ENGINE_LIST_ADD", "ENGINE_LIST_REMOVE", "ENGINE_load_private_key", "ENGINE_load_public_key", "ENGINE_load_ssl_client_cert", "ENGINE_new", "ENGINE_remove", "ENGINE_set_default_string", "ENGINE_SET_DEFAULT_TYPE", "ENGINE_set_id", "ENGINE_set_name", "ENGINE_TABLE_REGISTER", "ENGINE_UNLOAD_KEY", "ENGINE_UNLOCKED_FINISH", "ENGINE_up_ref", "INT_CTRL_HELPER", "INT_ENGINE_CONFIGURE", "INT_ENGINE_MODULE_INIT", "LOG_MESSAGE", "eng_lib.c", "eng_list.c", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/lib/engines", "OPENSSL_ENGINES", "DIR_LOAD", "DIR_ADD", "LIST_ADD", "LOAD", "eng_ctrl.c", "eng_table.c", "tb_cipher.c", "tb_digest.c", "tb_pkmeth.c", "tb_asnmth.c", "BUF_memdup", "BUF_MEM_grow", "BUF_MEM_grow_clean", "BUF_MEM_new", "BUF_strdup", "BUF_strndup", "accept error", "bad fopen mode", "bad hostname lookup", "broken pipe", "connect error", "EOF on memory BIO", "error setting nbio", "error setting nbio on accepted socket", "error setting nbio on accept socket", "gethostbyname addr is not af inet", "invalid ip address", "in use", "keepalive", "nbio connect error", "no accept port specified", "no hostname specified", "no port defined", "no port specified", "null parameter", "tag mismatch", "unable to bind socket", "unable to create socket", "unable to listen socket", "unsupported method", "write to read only BIO", "WSAStartup", "ACPT_STATE", "BIO_accept", "BIO_BER_GET_HEADER", "BIO_callback_ctrl", "BIO_ctrl", "BIO_gethostbyname", "BIO_gets", "BIO_get_accept_socket", "BIO_get_host_ip", "BIO_get_port", "BIO_MAKE_PAIR", "BIO_new", "BIO_new_file", "BIO_new_mem_buf", "BIO_nread", "BIO_nread0", "BIO_nwrite", "BIO_nwrite0", "BIO_puts", "BIO_read", "BIO_sock_init", "BIO_write", "BUFFER_CTRL", "CONN_CTRL", "CONN_STATE", "DGRAM_SCTP_READ", "DGRAM_SCTP_WRITE", "FILE_CTRL", "FILE_READ", "LINEBUFFER_CTRL", "MEM_READ", "MEM_WRITE", "WSASTARTUP", "%04x - ", "%02x%c", "%02X:", "md_rand.c", "....................", "You need to read the OpenSSL FAQ, http://www.openssl.org/support/faq.html", "dual ec drbg disabled", "error initialising drbg", "error instantiating drbg", "no fips random method set", "PRNG not seeded", "RAND_get_rand_method", "RAND_init_fips", "SSLEAY_RAND_BYTES", "/var/run/egd-pool", "/dev/egd-pool", "/etc/egd-pool", "/etc/entropy", "/dev/urandom", "/dev/random", "/dev/srandom", "encode.c", "ctx->length <= (int)sizeof(ctx->enc_data)", "evp_key.c", "nkey <= EVP_MAX_KEY_LENGTH", "niv <= EVP_MAX_IV_LENGTH", "message digest", "bio_enc.c", "evp_pkey.c", "a_bitstr.c", "a_utctm.c", "%02d%02d%02d%02d%02d%02dZ", "a_gentm.c", "%04d%02d%02d%02d%02d%02dZ", "a_time.c", "ASN1_TIME", "a_d2i_fp.c", "a_i2d_fp.c", "a_enum.c", "a_sign.c", "a_digest.c", "a_verify.c", "\\W%08lX", "\\U%04lX", "\\%02X", "a_strex.c", "X509_VAL", "X509_REQ", "req_info", "X509_REQ_INFO", "pubkey", "x_crl.c", "X509_CRL", "X509_CRL_INFO", "lastUpdate", "revoked", "X509_REVOKED", "revocationDate", "x_info.c", "NETSCAPE_SPKI", "spkac", "sig_algor", "NETSCAPE_SPKAC", "NETSCAPE_CERT_SEQUENCE", "i2d_pr.c", "        Subject OCSP hash: ", "t_x509.c", "\n        Public key OCSP hash: ", "    Signature Algorithm: ", " GMT", "%s %2d %02d:%02d:%02d%.*s %d%s", "Bad time value", "%s %2d %02d:%02d:%02d %d%s", "Certificate:\n", "    Data:\n", "%8sVersion: %lu (0x%lx)\n", "        Serial Number:", " %s%lu (%s0x%lx)\n", "\n%12s%s", "        Issuer:%c", "        Validity\n", "            Not Before: ", "\n            Not After : ", "        Subject:%c", "        Subject Public Key Info:\n", "%12sPublic Key Algorithm: ", "%12sUnable to load Public Key\n", "%8sIssuer Unique ID: ", "%8sSubject Unique ID: ", "X509v3 extensions", "%*sTrusted Uses:\n%*s", "%*sNo Trusted Uses.\n", "%*sRejected Uses:\n%*s", "%*sNo Rejected Uses.\n", "%*sAlias: %s\n", "%*sKey Id: ", "%s%02X", "tasn_prn.c", "SEQUENCE", "BOOL ABSENT", "%*s%s OF %s {\n", "<ABSENT>\n", "NULL\n", "%s (%s)", " (%ld unused bits)\n", "ERROR: selector [%d] invalid\n", "%*s}\n", "Unprocessed type %d\n", ":EXTERNAL TYPE %s\n", "f_int.c", "f_string.c", "x_pkey.c", "asn1_gen.c", "Char=", "string=", "tag=", "ASCII", "UTF8", "BITLIST", "BOOL", "BOOLEAN", "INTEGER", "ENUM", "ENUMERATED", "OBJECT", "UTCTIME", "GENERALIZEDTIME", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIVERSALSTRING", "UNIV", "IA5STRING", "UTF8String", "BMPSTRING", "VISIBLESTRING", "VISIBLE", "PRINTABLESTRING", "PRINTABLE", "T61STRING", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "NUMERICSTRING", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORM", "FORMAT", "(unknown)", "cons: ", "prim: ", "BAD RECURSION DEPTH\n", "Error in encoding\n", "%5ld:", "d=%-2d hl=%ld l=%4ld ", "d=%-2d hl=%ld l=inf  ", "priv [ %d ] ", "cont [ %d ]", "appl [ %d ]", "<ASN1 %d>", "length is greater than %ld\n", ":BAD OBJECT", "Bad boolean\n", "[HEX DUMP]:", "BAD INTEGER", "BAD ENUMERATED", "BIT STRING", "OCTET STRING", "OBJECT DESCRIPTOR", "REAL", "<ASN1 11>", "UTF8STRING", "<ASN1 13>", "<ASN1 14>", "<ASN1 15>", "VIDEOTEXSTRING", "GRAPHICSTRING", "GENERALSTRING", "<ASN1 29>", "a_bytes.c", "MASK:", "nombstr", "pkix", "utf8only", "a_strnid.c", "asn_pack.c", "pem_info.c", "pem_pk8.c", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/private", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/certs", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/build/openssl-armv7a/output/cert.pem", "SSL_CERT_DIR", "SSL_CERT_FILE", "x509_req.c", "x509_att.c", "v3_bcons.c", "BASIC_CONSTRAINTS", "v3_bitst.c", "Digital Signature", "digitalSignature", "Non Repudiation", "nonRepudiation", "Key Encipherment", "keyEncipherment", "Data Encipherment", "dataEncipherment", "Key Agreement", "keyAgreement", "Certificate Sign", "keyCertSign", "CRL Sign", "cRLSign", "Encipher Only", "encipherOnly", "Decipher Only", "decipherOnly", "client", "server", "Object Signing", "objsign", "SSL CA", "sslCA", "S/MIME CA", "emailCA", "Object Signing CA", "objCA", "v3_conf.c", ",section=", "critical,", "DER:", "ASN1:", "v3_extku.c", "EXTENDED_KEY_USAGE", "v3_ia5.c", "%*s<Not Supported>", "%*s<Parse Error>", "%*s%s", ": %s\n", "pcy_node.c", "conf_lib.c", "group=", " name=", "conf_api.c", "vv == NULL", "[%s] %s=%s\n", "[[%s]]\n", "conf_def.c", "line ", "WIN32", "OpenSSL default", "txt_db.c", "wrong number of fields on line %ld (looking for field %d, got %d, '%s' left)\n", "failure in sk_push\n", "OPENSSL_malloc failure\n", "p12_add.c", "PKCS12_AUTHSAFES", "PKCS12_SAFEBAGS", "PKCS12_SAFEBAG", "attrib", "value.keybag", "value.shkeybag", "value.safes", "value.bag", "value.other", "PKCS12_BAGS", "value.x509cert", "value.x509crl", "value.sdsicert", "PKCS12_MAC_DATA", "dinfo", "PKCS12", "authsafes", "p12_decr.c", "p12_p8e.c", "ui_lib.c", "Enter ", " for ", "You must type in ", " characters", "ui_openssl.c", "Verifying - %s", "Verify failure\n", "/dev/tty", "OpenSSL default user interface", "cms_lib.c", "CMS_SharedInfo", "keyInfo", "entityUInfo", "suppPubInfo", "CMS_Receipt", "signedContentIdentifier", "originatorSignatureValue", "CMS_ReceiptRequest", "receiptsFrom", "receiptsTo", "CMS_ReceiptsFrom", "d.allOrFirstTier", "d.receiptList", "CMS_Attributes_Verify", "CMS_ATTRIBUTES", "CMS_Attributes_Sign", "CMS_ContentInfo", "d.signedData", "d.envelopedData", "d.digestedData", "d.encryptedData", "d.authenticatedData", "d.compressedData", "CMS_CompressedData", "compressionAlgorithm", "encapContentInfo", "CMS_AuthenticatedData", "originatorInfo", "recipientInfos", "macAlgorithm", "digestAlgorithm", "authAttrs", "unauthAttrs", "CMS_EncryptedData", "encryptedContentInfo", "unprotectedAttrs", "CMS_DigestedData", "CMS_EnvelopedData", "CMS_RecipientInfo", "d.ktri", "d.kari", "d.kekri", "d.pwri", "d.ori", "CMS_OtherRecipientInfo", "oriType", "oriValue", "CMS_PasswordRecipientInfo", "keyDerivationAlgorithm", "keyEncryptionAlgorithm", "encryptedKey", "CMS_KEKRecipientInfo", "kekid", "CMS_KEKIdentifier", "keyIdentifier", "CMS_KeyAgreeRecipientInfo", "originator", "recipientEncryptedKeys", "CMS_OriginatorIdentifierOrKey", "d.issuerAndSerialNumber", "d.subjectKeyIdentifier", "d.originatorKey", "CMS_OriginatorPublicKey", "CMS_RecipientEncryptedKey", "CMS_KeyAgreeRecipientIdentifier", "d.rKeyId", "CMS_RecipientKeyIdentifier", "CMS_OtherKeyAttribute", "keyAttrId", "keyAttr", "CMS_KeyTransRecipientInfo", "CMS_EncryptedContentInfo", "contentEncryptionAlgorithm", "encryptedContent", "CMS_OriginatorInfo", "certificates", "crls", "CMS_SignedData", "digestAlgorithms", "signerInfos", "CMS_RevocationInfoChoice", "d.crl", "CMS_OtherRevocationInfoFormat", "otherRevInfoFormat", "otherRevInfo", "CMS_SignerInfo", "signedAttrs", "unsignedAttrs", "CMS_EncapsulatedContentInfo", "eContentType", "eContent", "CMS_SignerIdentifier", "CMS_CertificateChoices", "d.certificate", "d.extendedCertificate", "d.v1AttrCert", "d.v2AttrCert", "CMS_OtherCertificateFormat", "otherCertFormat", "otherCert", "CMS_IssuerAndSerialNumber", "cms_io.c", "cms_sd.c", "cms_dd.c", "cms_cd.c", "cmac.c", "rc4(ptr,char)", "blowfish(ptr)", "bn_sqrt.c", "bn_exp2.c", "bn_gf2m.c", "ecp_mont.c", "ec_print.c", "rsa_gen.c", "rsa_saos.c", "rsa_pss.c", "dsa_gen.c", "dh_gen.c", "dso_dlfcn.c", "lib%s.so", "%s.so", "symname(", "filename(", "OpenSSL 'dlfcn' shared library method", "%lu:%s:%s:%d:%s\n", "a_set.c", "'()+,-./:=?", "a_mbstr.c", "minsize=", "maxsize=", "a_bool.c", "bio_ndef.c", "asn_mime.c", "content-type", "multipart/signed", "boundary", "application/x-pkcs7-signature", "application/pkcs7-signature", "type: ", "application/x-pkcs7-mime", "application/pkcs7-mime", "Content-Type: text/plain\r\n\r\n", "-----BEGIN %s-----\n", "-----END %s-----\n", "application/x-pkcs7-", "application/pkcs7-", "smime.p7m", "certs-only", "signed-receipt", "compressed-data", "smime.p7z", "signed-data", "enveloped-data", "MIME-Version: 1.0%s", "Content-Type: multipart/signed;", " protocol=\"%ssignature\";", " micalg=\"", "sha-256", "sha-384", "sha-512", "gostr3411-94", "\"; boundary=\"----%s\"%s%s", "This is an S/MIME signed message%s%s", "------%s%s", "%s------%s%s", "Content-Type: %ssignature;", " name=\"smime.p7s\"%s", "Content-Transfer-Encoding: base64%s", "Content-Disposition: attachment;", " filename=\"smime.p7s\"%s%s", "%s------%s--%s%s", " name=\"%s\"%s", "Content-Transfer-Encoding: base64%s%s", " filename=\"%s\"%s", "Content-Type: %smime;", " smime-type=%s;", "ecp_smpl.c", "bio_b64.c", "ctx->buf_len >= ctx->buf_off", "ctx->buf_off + i < (int)sizeof(ctx->buf)", "ctx->buf_off < (int)sizeof(ctx->buf)", "ctx->buf_len <= (int)sizeof(ctx->buf)", "i <= n", "ctx->buf_off <= (int)sizeof(ctx->buf)", "ctx->tmp_len <= 3", "base64 encoding", "bio_asn1.c", "ctx->buflen <= ctx->bufsize", "asn1", "x264 [%s]: ", "x264_2pass.log", "lookahead-threads", "sliced-threads", "sync-lookahead", "deterministic", "n-deterministic", "cpu-independent", "level-idc", "%d:%d", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "%u/%u", "frameref", "dpb-size", "keyint", "min-keyint", "keyint-min", "scenecut", "bframes", "b-adapt", "open-gop", "%d,%d", "slice-max-mbs", "slice-min-mbs", "slices-max", "cabac-idc", "constrained-intra", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "dump-yuv", "analyse", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "weight-b", "chroma-qp-offset", "merange", "me-range", "mvrange", "mv-range", "mvrange-thread", "mv-range-thread", "subme", "%f:%f", "%f,%f", "%f|%f", "chroma-me", "dct-decimate", "deadzone-inter", "deadzone-intra", "bitrate", "qp_constant", "crf-max", "qpmin", "qp-min", "qpmax", "qp-max", "qpstep", "qp-step", "ratetol", "vbv-maxrate", "vbv-bufsize", "vbv-init", "ipratio", "ip-factor", "pbratio", "pb-factor", "cplx-blur", "zones", "crop-rect", "%u,%u,%u,%u", "sps-id", "global-header", "repeat-headers", "annexb", "force-cfr", "filler", "pic-struct", "fake-interlaced", "frame-packing", "stitchable", "opencl-clbin", "opencl-device", "%s profile doesn't support lossless\n", "%s profile doesn't support 4:4:4\n", "%s profile doesn't support 4:2:2\n", "baseline profile doesn't support interlacing\n", "baseline profile doesn't support fake interlacing\n", "invalid profile: %s\n", "malloc of size %d failed\n", "invalid preset '%s'\n", ",./-+", "touhou", "invalid tune '%s'\n", "only 1 psy tuning can be used: ignoring tune %s\n", "fake", "2pass", "%dx%d ", "fps=%u/%u ", "timebase=%u/%u ", "bitdepth=%d ", "opencl=%d ", "cabac=%d", " ref=%d", " deblock=%d:%d:%d", " analyse=%#x:%#x", " me=%s", " subme=%d", " psy=%d", " psy_rd=%.2f:%.2f", " mixed_ref=%d", " me_range=%d", " chroma_me=%d", " trellis=%d", " 8x8dct=%d", " cqm=%d", " deadzone=%d,%d", " fast_pskip=%d", " chroma_qp_offset=%d", " threads=%d", " lookahead_threads=%d", " sliced_threads=%d", " slices=%d", " slices_max=%d", " slice_max_size=%d", " slice_max_mbs=%d", " slice_min_mbs=%d", " nr=%d", " decimate=%d", " interlaced=%s", " bluray_compat=%d", " stitchable=%d", " constrained_intra=%d", " bframes=%d", " b_pyramid=%d b_adapt=%d b_bias=%d direct=%d weightb=%d open_gop=%d", " weightp=%d", " keyint=infinite", " keyint=%d", " keyint_min=%d scenecut=%d intra_refresh=%d", " rc_lookahead=%d", " rc=%s mbtree=%d", " crf=%.1f", " bitrate=%d ratetol=%.1f", " qcomp=%.2f qpmin=%d qpmax=%d qpstep=%d", " cplxblur=%.1f qblur=%.1f", " vbv_maxrate=%d vbv_bufsize=%d", " crf_max=%.1f", " qp=%d", " nal_hrd=%s filler=%d", " crop_rect=%u,%u,%u,%u", " frame-packing=%d", " ip_ratio=%.2f", " pb_ratio=%.2f", " aq=%d", ":%.2f", " zones=%s", " zones", "undef", "bt2020-12", "component", "secam", "x264 - core %d%s - H.264/MPEG-4 AVC codec - Copy%s 2003-2015 - http://www.videolan.org/x264.html - options: %s", "AVC-Intra SEI is too large (%d)\n", "frame MB size (%dx%d) > level limit (%d)\n", "DPB size (%d frames, %d mbs) > level limit (%d frames, %d mbs)\n", "VBV bitrate (%lld) > level limit (%d)\n", "VBV buffer (%lld) > level limit (%d)\n", "MV range (%lld) > level limit (%d)\n", "interlaced (%lld) > level limit (%d)\n", "fake interlaced (%lld) > level limit (%d)\n", "MB rate (%lld) > level limit (%d)\n", "cannot create valid sample aspect ratio\n", "using SAR=%d/%d\n", "invalid DTS: PTS is less than DTS\n", " PSNR Y:%5.2f U:%5.2f V:%5.2f", " SSIM Y:%.5f", "frame=%4d QP=%.2f NAL=%d Slice:%c Poc:%-3d I:%-4d P:%-4d SKIP:%-4d size=%d bytes%s\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/encoder.c", "(first_y&1) == 0", "slice-max-size violated (frame %d, cause: slice-min-mbs)\n", "pf_log not set! did you forget to call x264_param_default?\n", "not compiled with interlaced support\n", "invalid width x height (%dx%d)\n", "not compiled with 4:2:2 support\n", "not compiled with 4:4:4 support\n", "invalid CSP (only I420/YV12/NV12/I422/YV16/NV16/I444/YV24/BGR/BGRA/RGB supported)\n", "width not divisible by %d (%dx%d)\n", "height not divisible by %d (%dx%d)\n", "invalid crop-rect %u,%u,%u,%u\n", "crop-rect %u,%u,%u,%u not divisible by %dx%d\n", "OpenCL: not compiled with OpenCL support, disabling\n", "OpenCL: device id and device skip count configured; dropping skip\n", "ignoring unknown frame packing value\n", "cropped resolution %dx%d not compatible with tile format frame packing\n", "broken ffmpeg default settings detected\n", "use an encoding preset (e.g. -vpre medium)\n", "preset usage: -vpre <speed> -vpre <profile>\n", "speed presets are listed in x264 --help\n", "profile is optional; x264 defaults to high\n", "no ratecontrol method specified\n", "%2d-bit AVC-Intra is not widely compatible\n", "10-bit x264 is required to encode AVC-Intra\n", "bitrate not specified\n", "VBV is incompatible with constant QP, ignored.\n", "VBV maxrate unspecified, assuming CBR\n", "VBV bufsize set but maxrate unspecified, ignored\n", "max bitrate less than average bitrate, assuming CBR\n", "VBV maxrate specified, but no bufsize, ignored\n", "slice-min-mbs > row mb size (%d) not implemented\n", "subme=0 + direct=temporal is not supported\n", "b-pyramid normal + intra-refresh is not supported\n", "ref > 1 + intra-refresh is not supported\n", "intra-refresh is not compatible with open-gop\n", "lookaheadless mb-tree requires intra refresh or infinite keyint\n", "--%s used with psy on: results will be invalid!\n", "--ssim used with AQ off: results will be invalid!\n", "--psnr used with AQ on: results will be invalid!\n", "using mv_range_thread = %d\n", "NAL HRD parameters require VBV parameters\n", "CBR HRD requires constant bitrate\n", "Effective timebase denominator %u exceeds H.264 maximum\n", "using cpu capabilities:", "SSE2", "SSE3", "SSE4.1", "BMI1", " none!", "MV cost test failed: x264 has been miscompiled!\n", "CLZ test failed: x264 has been miscompiled!\n", "HRD bitrate: %i bits/sec\n", "CPB size: %i bits\n", "dump_yuv: can't write to %s\n", "dump_yuv: incompatible with non-regular file %s\n", "%d.%d", "profile %s, level %s\n", "profile %s, level %s, %s %d-bit\n", "4:2:0", "--tune %s should be used if attempting to benchmark %s!\n", "invalid level_idc: %d\n", "x264_encoder_invalidate_reference is not supported with B-frames enabled\n", "x264_encoder_invalidate_reference is not supported with intra refresh enabled\n", "non-strictly-monotonic PTS\n", "h->i_ref[0] + h->i_ref[1] <= X264_REF_MAX", "x264_clip3( denom, 0, 7 ) == denom", "h->sh.weight[j][i].i_denom == denom", "h->thread[i]->fenc->i_reference_count == 1", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f  PSNR Mean Y:%5.2f U:%5.2f V:%5.2f Avg:%5.2f Global:%5.2f\n", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f\n", "consecutive B-frames:%s\n", " %4.1f%%", "mb I  %s\n", "mb P  %s  P16..4: %4.1f%% %4.1f%% %4.1f%% %4.1f%% %4.1f%%    skip:%4.1f%%\n", "  B16..8: %4.1f%% %4.1f%% %4.1f%%  direct:%4.1f%%  skip:%4.1f%%", "  L0:%4.1f%% L1:%4.1f%% BI:%4.1f%%", "mb B  %s\n", " inter:%.1f%%", "8x8 transform intra:%.1f%%%s\n", "direct mvs  spatial:%.1f%% temporal:%.1f%%\n", " inter: %.1f%% %.1f%% %.1f%%", "coded y,%s,%s intra: %.1f%% %.1f%% %.1f%%%s\n", "uvDC", "uvAC", "i16 v,h,dc,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i%d v,h,dc,ddl,ddr,vr,hd,vl,hu: %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i8c dc,h,v,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "Weighted P-Frames: Y:%.1f%% UV:%.1f%%\n", "ref %c L%d:%s\n", "SSIM Mean Y:%.7f (%6.3fdb)\n", "PSNR Mean Y:%6.3f U:%6.3f V:%6.3f Avg:%6.3f Global:%6.3f kb/s:%.2f\n", "kb/s:%.2f\n", "(*frame)->i_reference_count > 0", "I16..4%s: %4.1f%% %4.1f%% %4.1f%%", "..PCM", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/lookahead.c", "dst->i_size < dst->i_max_size", "src->i_size", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/common/macroblock.c", "dist_scale_factor >= -63 && dist_scale_factor <= 127", "Invalid input colorspace\n", "This build of x264 requires 8-bit input. Rebuild to support high depth input.\n", "v210 input is only compatible with bit-depth of 10 bits\n", "Input picture width (%d) is greater than stride (%d)\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/common/frame.c", "list[0]", "frame->i_reference_count > 0", "bad coefficient in list '%s'\n", " \t\n,", "not enough coefficients in list '%s'\n", "Impossible QP constraints for CQM (min=%d, max=%d)\n", "can't open file '%s'\n", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "internal error\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/cabac.c", "internal error P_L0 and partition=%d\n", "internal error (invalid MB type)\n", "internal error (MV out of thread range)\n", "mb type: %d \n", "mv: l%dr%d (%d,%d) \n", "limit: %d \n", "mb_xy: %d,%d \n", "completed: %d \n", "recovering by using intra mode\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/analyse.c", "h->mb.cache.pskip_mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "a->l0.me16x16.mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "internal error (!8x8 && !4x4)\n", "scene cut at %d Icost:%d Pcost:%d ratio:%.4f bias:%.4f gop:%d (imb:%d pmb:%d)\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/slicetype.c", "h->frames.b_have_lowres", "B-ref at frame %d incompatible with B-pyramid %s \n", "B-ref at frame %d incompatible with B-pyramid %s and %d reference frames\n", "specified frame type (%d) at %d is not compatible with keyframe interval\n", "specified frame type is not compatible with max B-frames\n", "cost >= 0", "slice=%c but 2pass stats say %c\n", "MB-tree frametype %d doesn't match actual frametype %d.\n", "Incomplete MB-tree stats file.\n", "VBV buffer size cannot be smaller than one frame, using %d kbit\n", "VBV parameters cannot be changed when NAL HRD is in use\n", "CRF max must be greater than CRF\n", "constant rate-factor is incompatible with 2pass.\n", "HRD with very large timescale and bufsize not supported\n", "bitrate tolerance too small, using .01\n", "%d,%d,q=%d%n", "%d,%d,b=%f%n", "%d,%d%n", "invalid zone: \"%s\"\n", "invalid zone param: %s = %s\n", "invalid zone: start=%d end=%d\n", "invalid zone: bitrate_factor=%f\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/encoder/ratecontrol.c", "h->param.rc.psz_stat_in", "ratecontrol_init: can't open stats file\n", ".mbtree", "ratecontrol_init: can't open mbtree stats file\n", "#options:", "options list in stats file not valid\n", "#options: %dx%d", "resolution specified in stats file not valid\n", "timebase=", "timebase specified in stats file not valid\n", "timebase=%u/%u", "timebase mismatch with 1st pass (%u/%u vs %u/%u)\n", "bitdepth=", "bitdepth=%d", "different bitdepth setting than first pass (%d vs %d)\n", "weightp=", "weightp=%d", "different weightp setting than first pass (%d vs %d)\n", "bframes=", "bframes=%d", "different bframes setting than first pass (%d vs %d)\n", "b_pyramid=", "b_pyramid=%d", "different b_pyramid setting than first pass (%d vs %d)\n", "intra_refresh=", "intra_refresh=%d", "different intra_refresh setting than first pass (%d vs %d)\n", "open_gop=", "open_gop=%d", "different open_gop setting than first pass (%d vs %d)\n", "bluray_compat=", "bluray_compat=%d", "different bluray_compat setting than first pass (%d vs %d)\n", "interlaced=", "interlaced=%4s", "different interlaced setting than first pass (%s vs %s)\n", "keyint=", "different keyint setting than first pass (%.*s vs %.*s)\n", "qp=0", "1st pass was lossless, bitrate prediction will be inaccurate\n", "direct=3", "direct=auto not used on the first pass\n", "b_adapt=", "b_adapt=%d", "b_adapt method specified in stats file not valid\n", "rc_lookahead=", "rc_lookahead=%d", "empty stats file\n", "2nd pass has fewer frames than 1st pass (%d vs %d)\n", "2nd pass has more frames than 1st pass (%d vs %d)\n", " in:%d ", "bad frame number (%d) at stats line %d\n", " in:%*d out:%*d type:%c dur:%lld cpbdur:%lld q:%f aq:%f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c", "ref:", "w:%hd,%hd,%hd,%hd,%hd,%hd,%hd,%hd", "statistics are damaged at line %d, parser out=%d\n", "requested bitrate is too low. estimated minimum is %d kbps\n", "qscale[i] >= 0", "rce->new_qscale >= 0", "vbv-maxrate issue, qpmax or vbv-maxrate too low\n", "Error: 2pass curve failed to converge\n", "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", "try reducing target bitrate or reducing qp_min (currently %d)\n", "try reducing target bitrate\n", "try increasing target bitrate or increasing qp_max (currently %d)\n", "try increasing target bitrate\n", ".temp", "#options: %s\n", ".mbtree.temp", "failed to parse zones\n", "final ratefactor: %.2f\n", "failed to rename \"%s\" to \"%s\"\n", "frame >= 0 && frame < rc->num_entries", "2nd pass has more frames than 1st pass (%d)\n", "continuing anyway, at constant QP=%d\n", "disabling adaptive B-frames\n", "in:%d out:%d type:%c dur:%lld cpbdur:%lld q:%.2f aq:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c ref:", "w:%d,%d,%d", ",%d,%d,%d,%d,%d ", "VBV underflow due to CRF-max (frame %d, %.0f bits)\n", "VBV underflow (frame %d, %.0f bits)\n", "ratecontrol_end: stats file could not be written to\n", "underflow", "overflow", "CPB %s: %.0f bits in a %.0f-bit buffer\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/x264/common/rectangle.h", "!!&((())%%%\"\"", "))/113//+++((", "Gray", "(-39@H", "(-39@H", "I420", "IYUV", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "YUYVw", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "\fRGBt", "RBA@v", "BRA@s", "@RBAu", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "0BGR ", "Y3\u000b\tE", "\t\u000b3YP", "Y3\n\tO", "\t\n3YL", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "XYZ$o", "DVOO.", "L555,", "L565+", "b16g)", "I422!", "I444\f", "J420\r", "J422\"", "J444Z", "YUVA#", "I40AY", "RGB2.", "RV15,", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "I4AB:", "I4FL;", "I4FB,", "FFmpeg version 0748dcd", "FFmpeg version 0748dcd", "com.apple.streaming.transportStreamTimestamp", "image/gif", "image/jpeg", "image/jpg", "image/png", "image/tiff", "image/bmp", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "c608", "sac3", "alac", ".mp1", "twos", "lpcm", "lpcm\r", "in24\f", "in24\t", "ssmv", "v410", "dmb1\t", "SVQ3\r", "mp4v\r", "DIVX\r", "XVID\r", "VP31+", "rpza,", "cvid1", "8BPS2", "smc 8", "rle1.", "WRLE;", "mp2vY", "mjp2^", "tga a", "tiffb", "gif >", "png >", "MNG G", "vc-1X", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "DXDI", "\fencd", "avc1\r", "text", "avc1\r", "mp4a", "tx3g", "avc1k", "VP6A]", "VP6F", "drac", "HEVC", "VC-1", "U263\r", "FMP4\r", "DIVX\r", "DX50\r", "XVID\r", "MP4S\r", "M4S2\r", "ZMP4\r", "DIV1\r", "BLZ0\r", "mp4v\r", "UMP4\r", "WV1F\r", "SEDG\r", "RMP4\r", "3IV2\r", "WAWV\r", "FFDS\r", "FVFW\r", "DCOD\r", "MVXM\r", "PM4V\r", "SMP4\r", "DXGM\r", "VIDM\r", "M4T3\r", "GEOX\r", "G264\r", "HDX4\r", "DM4V\r", "DMK2\r", "DYM4\r", "DIGI\r", "EPHV\r", "EM4A\r", "M4CC\r", "SN40\r", "VSPX\r", "ULDX\r", "GEOV\r", "SIPP\r", "SM4V\r", "XVIX\r", "DreX\r", "QMP4\r", "PLV1\r", "GLV4\r", "GMP4\r", "mjpa\n", "JPGL\f", "MJLS\f", "HFYUD", "IV32p", "IV41q", "VP30[", "VP50\\", "VP60\\", "VP61\\", "VP62k", "VP6A]", "VP6F]", "VP90 ", "ASV1!", "ASV2$", "VCR1\"", "FFV1*", "Xxanr", "LM20.", "mrle.", "MSVC/", "msvc/", "CRAM/", "cram/", "WHAM/", "wham,", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "SNOW#", "S263W", "svq19", "tscc:", "ULTI<", "VIXL=", "QPEG=", "Q1.0=", "Q1.1H", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TM20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "VMnc^", "tga >", "MPNG>", "PNG1>", "png %", "CLJRu", "drac+", "azpr+", "RPZA+", "rpza\u000b", "SP54|", "AURA}", "LAGSl", "ZECO", "Y41P3", "CUVCF", "CFHD", "IART", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "?456789:;<=", "0123456789abcdef0123456789ABCDEF", "FFmpeg version 0748dcd", "s16p", "s32p", "fltp", "dblp", "IPBSipb", "FFmpeg version 0748dcd", "<fBBf<", "fffffff", "fff$", "000`", "<00000000<", "<\f\f\f\f\f\f\f\f<", "<ll>", "8ll8", "8ll8", "|||||||", "<fBBf<", "0xx00", "x00000x", "x`````x", "p000x", "p00000x", "p000x", "p000x", "p000x", "<ll>", "8ll8", "8ll8", "<<<<", "TLSv1 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "SSLv3 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "DTLSv1 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "MD5 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "SHA1 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "SHA-256 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "SHA-512 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "Big Number part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "0123456789ABCDEF", "EC part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "Diffie-Hellman part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "Stack part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "lhash part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "EVP part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "ASN.1 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "0123456789ABCDEF", "PEM part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "0123456789ABCDEF", "X.509 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "0123456789ABCDEF", "Content-Type: application/ocsp-request\r\nContent-Length: %d\r\n\r\n", "%s %s HTTP/1.0\r\n", "libdes part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "AES part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "RC2 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "CAMELLIA part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "ECDSA part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "RAND part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "0123456789ABCDEF", "%-18s", "CONF part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "CONF_def part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "TXT_DB part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "MD4 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "SHA part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "RIPE-MD160 part of OpenSSL 1.0.2p-dev  xx XXX xxxx", "ggen", "x264_slice_header_write", "x264_weighted_pred_init", "x264_encoder_close", "x264_lookahead_shift", "x264_macroblock_bipred_init", "x264_frame_pop", "x264_frame_shift", "x264_frame_push_unused", "x264_frame_push_blank_unused", "ARMv6", "NEON", "FastNeonMRC", "x264_mb_analyse_inter_p16x16", "x264_rc_analyse_slice", "x264_ratecontrol_new", "infinite ", "init_pass2", "x264_ratecontrol_start", "x264_macroblock_cache_rect", "%d.%d.%d", "Sep 20 2018", "15:35:41", "AAC Decoder Lib", "Sep 20 2018", "15:35:43", "AAC Encoder", "%d.%d.%d", "q=\n'", "_{fI", "Sep 20 2018", "15:35:45", "MPEG Transport", "%d.%d.%d", "ADIF", "%d.%d.%d", "Sep 20 2018", "15:35:45", "MPEG Transport", "%d.%d.%d", "Sep 20 2018", "15:35:46", "SBR Decoder", "%d.%d.%d", "Sep 20 2018", "15:35:47", "SBR Encoder", "Sep 20 2018", "15:35:48", "PCM Downmix Lib", "Sep 20 2018", "15:35:48", "FDK Tools", "Error allocating memory line %d, file %s\n", "/Users/qishui.qj/StudioProjects/taobao_ffmpeg/compile-ffmpeg-for-android/tools/../../fdk-aac/libSYS/src/cmdl_parser.cpp", "\n\nError: Parsing argument for required switch '%s'.\n", "Bug: unsupported data identifier \"%c\"\n", "\n\nInternal Parser Error: Strlen Problem\n", "\n\nInternal Parser Error: Missing bracket ')'\n", "Warning: Ignoring argument for switch '%s'. ", "Argument is too LONG.\n", "\n\nError: Argument '%s' for switch '%s' is not valid \n", "\n\nError: Argument '%s' for switch '%s' is not a valid number.\n", "\ncould not open config file %s", "main returned %d\n", "0123456789abcdef", "This program is protected by copyright law and international treaties.\nAny reproduction or distribution of this program, or any portion\nof it, may result in severe civil and criminal penalties, and will be\nprosecuted to the maximum extent possible under law.\n\n", "WAV_InputOpen(): Unable to allocate WAV struct.\n", "WAV_InputOpen(): Unable to open wav file. %s\n", "WAV_InputOpen(): couldn't read RIFF_ID\n", "RIFF", "WAV_InputOpen(): RIFF descriptor not found.\n", "WAV_InputOpen(): couldn't read format\n", "WAVE", "WAV_InputOpen(): WAVE chunk ID not found.\n", "WAV_InputOpen(): couldn't read format_ID\n", "WAV_InputOpen(): fmt chunk format not found.\n", "WAV_InputOpen(): Unable to read data chunk ID.\n", "data", "WAV_InputRead(): unsupported data-compression!!", "WAV_OutputOpen(): Unable to allocate WAV struct.\n", "WAV_OutputOpen(): Invalid argument (bitsPerSample).\n", "WAV_OutputOpen(): unable to create file %s\n", "fmt ", "WAV_OutputOpen(): error writing to output file %s\n", "WAV_OutputWrite(): error: unable to write to file %d\n", "WAV_OutputClose(): fseek() failed.\n", "WAV_OutputClose(): unable to write header\n", "WAV_OutputClose(): unable to close wav file\n"], "stringidentifiers": ["infinity", "aac_adtstoasc", "aac_latm", "dual_mono_mode", "auto", "autoselection", "main", "both", "AVDCT", "fastint", "altivec", "faan", "idct", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "simpleauto", "bits_per_sample", "Palette", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpeg", "mjpegb", "mpeg4", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "HuffYUV", "cyuv", "h264", "indeo3", "theora", "Theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "Cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "Snow", "tscc", "ulti", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "LOCO", "wnv1", "aasc", "indeo2", "fraps", "Fraps", "truemotion2", "cscd", "CamStudio", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "Mimic", "escape124", "daala", "Daala", "dirac", "Dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "Dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "Go2Meeting", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "Screenpresso", "wrapped_avframe", "rscc", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "targa", "tdsc", "TDSC", "tiff", "vc1image", "webp", "WebP", "wmv3image", "apng", "cfhd", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "Vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "MP3onMP4", "shorten", "Shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "WavPack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "Speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "eac3", "sipr", "twinvq", "truehd", "TrueHD", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "qdmc", "celt", "g723_1", "dss_sp", "g729", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "Sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "dvd_subtitle", "dvb_subtitle", "text", "xsub", "XSUB", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "context", "non_deterministic", "threads", "stereo_mode", "Q264", "is_avc", "nal_length_size", "enable_er", "private_spspps_buf", "h264_mp4toannexb", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "TEMP", "SPAT", "apply_defdispwin", "desc", "libfdk_aac", "afterburner", "eld_sbr", "signaling", "default", "implicit", "explicit_sbr", "explicit_hierarchical", "latm", "header_period", "weightp", "level", "deblock", "partitions", "stats", "baseline", "high", "high10", "high422", "high444", "libx264rgb", "libx264", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "refs", "sc_threshold", "trellis", "me_range", "me_method", "subq", "b_strategy", "keyint_min", "coder", "thread_type", "flags", "rc_init_occupancy", "preset", "medium", "tune", "profile", "fastfirstpass", "passlogfile", "wpredp", "a53cc", "x264opts", "crf_max", "aq_mode", "none", "variance", "autovariance", "weightb", "smart", "ssim", "b_pyramid", "strict", "normal", "mbtree", "cplxblur", "spatial", "temporal", "tesa", "cavlc", "cabac", "chromaoffset", "noise_reduction", "film", "animation", "grain", "stillimage", "psnr", "fastdecode", "zerolatency", "ultrafast", "superfast", "veryfast", "faster", "fast", "slow", "slower", "veryslow", "placebo", "mp3on4float", "mp3adufloat", "mp3float", "NULL", "AVSubtitleRect", "type", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "width", "height", "format", "channel_layout", "sample_rate", "AVCodecContext", "unaligned", "qpel", "loop", "qscale", "input_preserved", "pass1", "pass2", "gray", "emu_edge", "truncated", "ildct", "low_delay", "global_header", "bitexact", "ilme", "cgop", "output_corrupt", "noout", "ignorecrop", "local_header", "chunks", "showall", "export_mvs", "skip_manual", "zero", "full", "epzs", "phods", "iter", "time_base", "cutoff", "frame_size", "frame_number", "delay", "rc_strategy", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "p_count", "skip_count", "misc_bits", "frame_bits", "codec_tag", "autodetect", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "edge", "hpel_chroma", "dc_clip", "trunc", "very", "unofficial", "experimental", "b_qoffset", "err_detect", "crccheck", "bitstream", "buffer", "explode", "ignore_err", "careful", "compliant", "aggressive", "has_b_frames", "block_align", "mpeg_quant", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maxrate", "minrate", "bufsize", "rc_buf_aggressivity", "i_qoffset", "rc_init_cplx", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "slice_count", "guess_mvs", "favor_inter", "bits_per_coded_sample", "pred", "left", "plane", "median", "aspect", "debug", "pict", "mb_type", "dct_coeff", "green_metadata", "skip", "startcode", "mmco", "bugs", "vis_qp", "vis_mb_type", "buffers", "thread_ops", "nomc", "vismv", "debug_mv", "cmp_func", "subcmp", "mbcmp", "ildctcmp", "dia_size", "last_pred", "preme", "precmp", "satd", "vsad", "vsse", "nsse", "dctmax", "chroma", "pre_dia_size", "dtg_active_format", "ibias", "pbias", "global_quality", "deflate", "slice_flags", "xvmc_acceleration", "bits", "stream_codec_tag", "lmin", "lmax", "error", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "unknown", "aac_main", "aac_low", "aac_ssr", "aac_ltp", "aac_he", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "lowres", "skip_threshold", "skip_factor", "skip_exp", "skipcmp", "border_mask", "mblmin", "mblmax", "mepc", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "noref", "bidir", "nokey", "nointra", "bidir_refine", "brd_scale", "sc_factor", "mv0_threshold", "b_sensitivity", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color_primaries_type", "bt709", "unspecified", "Unspecified", "bt470m", "bt470bg", "smpte170m", "smpte240m", "Film", "bt2020", "smpte428_1", "color_trc", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "smpte2084", "colorspace", "colorspace_type", "ycocg", "YCOCG", "bt2020_ncl", "bt2020_cl", "color_range", "color_range_type", "mpeg", "jpeg", "chroma_sample_location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "bottomleft", "bottom", "Bottom", "log_level_offset", "slices", "slice", "frame", "audio_service_type", "Effects", "Dialogue", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "refcounted_frames", "side_data_only_packets", "skip_alpha", "field_order", "progressive", "dump_separator", "codec_whitelist", "pixel_format", "video_size", "Simple", "Main", "Complex", "Advanced", "High", "Reserved", "Rext", "Baseline", "Extended", "audioresample", "ReSampleContext", "unknown_codec", "ff_avcodec_locked", "encoder", "decoder", "aeval", "same", "exprs", "aevalsrc", "nb_samples", "duration", "nb_in_channels", "nb_out_channels", "adelay", "delays", "aecho", "in_gain", "out_gain", "decays", "aemphasis", "level_in", "level_out", "mode", "reproduction", "production", "Columbia", "riaa", "RIAA", "acrossfade", "crossfade0", "crossfade1", "overlap", "curve1", "curve", "qsin", "esin", "hsin", "logarithmic", "ipar", "quadratic", "cubic", "parabola", "exponential", "iqsin", "ihsin", "dese", "desi", "curve2", "afade", "start_sample", "start_time", "afftfilt", "real", "imag", "win_size", "w128", "w256", "w512", "w1024", "w2048", "w4096", "w8192", "w16384", "w32768", "w65536", "win_func", "rect", "Rectangular", "bartlett", "Bartlett", "hann", "Hann", "hanning", "Hanning", "hamming", "Hamming", "sine", "Sine", "aformat", "sample_fmts", "sample_rates", "channel_layouts", "sidechaingate", "sidechain", "agate", "range", "threshold", "ratio", "attack", "release", "makeup", "knee", "detection", "peak", "link", "average", "maximum", "level_sc", "alimiter", "limit", "asc_level", "amerge", "inputs", "info", "amix", "longest", "shortest", "first", "dropout_transition", "out0", "out1", "change", "anequalizer", "params", "curves", "size", "hd720", "mgain", "fscale", "colors", "anull", "apad", "packet_size", "pad_len", "whole_len", "aphaser", "decay", "speed", "triangular", "sinusoidal", "apulsator", "triangle", "square", "sawup", "sawdown", "amount", "offset_l", "offset_r", "timing", "aresample", "asetnsamples", "nb_out_samples", "asetrate", "NOPTS", "ashowinfo", "DC_offset", "Min_level", "Max_level", "Min_difference", "Max_difference", "Mean_difference", "Peak_level", "RMS_level", "RMS_peak", "RMS_trough", "Crest_factor", "Flat_factor", "Peak_count", "Bit_depth", "astats", "length", "metadata", "reset", "tempo", "atempo", "biquad", "allpass", "frequency", "width_type", "octave", "slope", "highpass", "poles", "lowpass", "bandreject", "bandpass", "treble", "gain", "bass", "equalizer", "channelmap", "channelsplit", "stereo", "chorus", "speeds", "depths", "compand", "attacks", "points", "volume", "compensationdelay", "temp", "dcshift", "shift", "limitergain", "dynaudnorm", "earwax", "extrastereo", "flanger", "depth", "regen", "shape", "phase", "interp", "itype", "join", "args", "replaygain", "acompressor", "sidechaincompress", "silencedetect", "noise", "silenceremove", "start_periods", "start_duration", "start_threshold", "stop_periods", "stop_duration", "stop_threshold", "leave_silence", "window", "stereotools", "balance_in", "balance_out", "softclip", "mutel", "muter", "phasel", "phaser", "slev", "sbal", "mlev", "mpan", "base", "sclevel", "stereowiden", "feedback", "crossfeed", "drymix", "tremolo", "vibrato", "precision", "fixed", "float", "double", "eval", "once", "drop", "ignore", "track", "album", "replaygain_preamp", "replaygain_noclip", "nb_channels", "nb_consumed_samples", "startpts", "startt", "volumedetect", "anullsink", "anoisesrc", "amplitude", "color", "colour", "white", "pink", "brown", "seed", "anullsrc", "beep_factor", "samples_per_frame", "ahistogram", "dmode", "single", "separate", "rate", "scale", "sqrt", "cbrt", "rlog", "ascale", "acount", "rheight", "slide", "replace", "scroll", "aphasemeter", "avectorscope", "lissajous", "lissajous_xy", "polar", "zoom", "draw", "line", "concat", "unsafe", "sono_v", "bar_v", "tlength", "midi", "timeclamp", "freq", "a_weighting", "b_weighting", "c_weighting", "showcqt", "bar_h", "axis_h", "sono_h", "fullhd", "volume2", "sono_g", "gamma", "bar_g", "gamma2", "basefreq", "endfreq", "coeffclamp", "count", "fcount", "fontfile", "fontcolor", "axisfile", "axis", "showfreqs", "blackman", "Blackman", "welch", "Welch", "flattop", "bharris", "bnuttall", "bhann", "nuttall", "Nuttall", "lanczos", "Lanczos", "gauss", "Gauss", "tukey", "Tukey", "averaging", "cmode", "combined", "showspectrumpic", "TIME", "channel", "intensity", "rainbow", "moreland", "nebulae", "fire", "fiery", "fruit", "cool", "saturation", "orientation", "vertical", "horizontal", "legend", "showspectrum", "rscroll", "fullframe", "data", "magnitude", "showvolume", "VOLUME", "CHANNEL", "showwavespic", "split_channels", "showwaves", "point", "cline", "ping", "enable", "noformat", "frei0r", "frei0r_src", "AVFilter", "fifo", "afifo", "AVFilterGraph", "scale_sws_opts", "aresample_swr_opts", "pix_fmts", "channel_counts", "all_channel_counts", "buffersink", "ffbuffersink", "abuffersink", "abuffer", "sample_fmt", "channels", "pix_fmt", "time_base_num", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "pix_desc", "mainpic", "adrawgraph", "drawgraph", "ainterleave", "nb_inputs", "interleave", "select", "modify", "delete", "print", "value", "function", "same_str", "starts_with", "less", "equal", "greater", "expr", "file", "ametadata", "VALUE1", "VALUE2", "perms", "aperms", "toggle", "random", "arealtime", "realtime", "areverse", "reverse", "scene", "outputs", "aselect", "start_pts", "prev_pts", "prev_selected_pts", "start_t", "prev_t", "prev_selected_t", "pict_type", "PICT_TYPE_I", "PICT_TYPE_P", "PICT_TYPE_B", "PICT_TYPE_S", "PICT_TYPE_SI", "PICT_TYPE_SP", "PICT_TYPE_BI", "interlace_type", "PROGRESSIVE", "TOPFIRST", "BOTTOMFIRST", "consumed_samples_n", "samples_n", "selected_n", "prev_selected_n", "concatdec_select", "enter", "leave", "asendcmd", "sendcmd", "commands", "filename", "astreamselect", "streamselect", "framesync", "image2", "asetpts", "setpts", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "asettb", "intb", "settb", "AVTB", "asplit", "split", "amovie", "movie", "format_name", "stream_index", "seek_point", "streams", "atrim", "starti", "endi", "end_pts", "durationi", "end_sample", "start", "trim", "start_frame", "end_frame", "spectrumsynth", "alphamerge", "alpha", "setsar", "setdar", "dar_den", "hsub", "vsub", "atadenoise", "bbox", "min_val", "blackdetect", "black_min_duration", "picture_black_ratio_th", "pic_th", "pixel_black_th", "pix_th", "tblend", "c0_mode", "c1_mode", "c2_mode", "c3_mode", "all_mode", "addition", "addition128", "burn", "darken", "difference", "difference128", "divide", "dodge", "exclusion", "glow", "hardlight", "hardmix", "lighten", "linearlight", "multiply", "multiply128", "negation", "overlay", "phoenix", "pinlight", "reflect", "screen", "softlight", "subtract", "vividlight", "c0_expr", "c1_expr", "c2_expr", "c3_expr", "all_expr", "c0_opacity", "c1_opacity", "c2_opacity", "c3_opacity", "all_opacity", "blend", "repeatlast", "BOTTOM", "chromakey", "black", "similarity", "codecview", "colorbalance", "colorchannelmixer", "colorkey", "colorlevels", "rimin", "gimin", "bimin", "aimin", "rimax", "gimax", "bimax", "aimax", "romin", "gomin", "bomin", "aomin", "romax", "gomax", "bomax", "aomax", "convolution", "copy", "out_w", "out_h", "crop", "keep_aspect", "in_w", "in_h", "last", "preset_name", "color_negative", "cross_process", "darker", "increase_contrast", "lighter", "linear_contrast", "medium_contrast", "negative", "strong_contrast", "vintage", "master", "green", "blue", "psfile", "dctdnoiz", "sigma", "deband", "direction", "blur", "clean_src", "decimate", "cycle", "dupthresh", "scthresh", "blockx", "blocky", "ppsrc", "dejudder", "deshake", "blank", "original", "clamp", "mirror", "blocksize", "contrast", "search", "smode", "exhaustive", "opencl", "detelecine", "first_field", "field", "pattern", "displace", "source", "xmap", "ymap", "smear", "wrap", "invert", "drawgrid", "thickness", "drawbox", "edgedetect", "wires", "colormix", "elbg", "codebook_length", "nb_steps", "pal8", "alphaextract", "extractplanes", "planes", "fade", "nb_frames", "weight_Y", "weight_U", "weight_V", "fftfilt", "dc_Y", "dc_U", "dc_V", "field_type", "fieldmatch", "order", "pc_n", "pc_u", "pc_n_ub", "pcn_ub", "mchroma", "combmatch", "combmatching", "combdbg", "dbglvl", "pcnub", "cthresh", "combpel", "down", "fieldorder", "round", "near", "framepack", "packed", "right", "frameseq", "lines", "columns", "framerate", "interp_start", "interp_end", "scene_change_detect", "framestep", "step", "gradfun", "strength", "radius", "hflip", "histogram", "level_height", "scale_height", "display_mode", "parade", "levels_mode", "components", "neither", "undetermined", "idet", "intl_thres", "prog_thres", "rep_thres", "half_life", "analyze_interlaced_flag", "luma_mode", "deinterleave", "chroma_mode", "alpha_mode", "luma_swap", "chroma_swap", "alpha_swap", "lenscorrection", "negval", "negate", "negate_alpha", "lutrgb", "lutyuv", "clip", "gammaval", "gammaval709", "maxval", "minval", "clipval", "cube", "DOMAIN_", "values", "haldclut", "clut", "interp_mode", "nearest", "trilinear", "tetrahedral", "lut3d", "maskedmerge", "mask", "mergeplanes", "mapping", "erosion", "dilation", "inflate", "threshold0", "threshold1", "threshold2", "threshold3", "coordinates", "all_seed", "all_strength", "alls", "all_flags", "allf", "c0_seed", "c0_strength", "c0_flags", "c1_seed", "c1_strength", "c1_flags", "c2_seed", "c2_strength", "c2_flags", "c3_seed", "c3_strength", "c3_flags", "null", "eof_action", "repeat", "endall", "pass", "init", "yuv420", "yuv422", "yuv444", "main_w", "main_h", "overlay_w", "overlay_h", "palettegen", "max_colors", "reserve_transparent", "stats_mode", "diff", "paletteuse", "palette", "dither", "dithering_mode", "bayer", "heckbert", "floyd_steinberg", "sierra2", "sierra2_4a", "bayer_scale", "diff_mode", "rectangle", "debug_kdtree", "color_search", "nns_iterative", "nns_recursive", "bruteforce", "mean_err", "debug_accuracy", "pixdesctest", "reference", "stats_file", "known", "frames", "removegrain", "removelogo", "angle", "rotate", "rotw", "roth", "fillcolor", "bilinear", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "bt601", "bt470", "scale2ref", "interl", "in_color_matrix", "out_color_matrix", "in_range", "out_range", "in_v_chr_pos", "in_h_chr_pos", "out_v_chr_pos", "out_h_chr_pos", "force_original_aspect_ratio", "force_oar", "disable", "decrease", "increase", "nb_slices", "ohsub", "ovsub", "CMYK", "selectivecolor", "correction_method", "absolute", "relative", "reds", "yellows", "greens", "cyans", "blues", "magentas", "whites", "neutrals", "blacks", "yellow", "cyan", "magenta", "neutral", "separatefields", "setfield", "prog", "checkerboard", "showinfo", "showpalette", "shuffleframes", "shuffleplanes", "map0", "map1", "map2", "map3", "TOUT", "VREP", "BRNG", "signalstats", "stat", "filters", "tout", "vrep", "brng", "vstack", "hstack", "swaprect", "swapuv", "telecine", "thumbnail", "tile", "layout", "margin", "padding", "clockwise", "counterclockwise", "transpose", "cclock_flip", "clock", "cclock", "clock_flip", "passthrough", "portrait", "landscape", "sharpen", "luma", "unsharp", "luma_msize_x", "luma_msize_y", "luma_amount", "chroma_msize_x", "chroma_msize_y", "chroma_amount", "vectorscope", "color2", "color3", "color4", "envelope", "instant", "vflip", "vignette", "forward", "backward", "w3fdif", "filter", "complex", "deint", "interlaced", "waveform", "column", "display", "flat", "aflat", "achroma", "yadif", "send_frame", "send_field", "send_frame_nospatial", "send_field_nospatial", "parity", "zoompan", "pduration", "time", "pzoom", "nullsink", "cellauto", "rule", "random_fill_ratio", "random_seed", "start_full", "stitch", "bBsS", "life", "mold", "life_color", "death_color", "mold_color", "mandelbrot", "maxiter", "start_x", "start_y", "start_scale", "end_scale", "bailout", "morphxf", "morphyf", "morphamp", "outer", "iteration_count", "normalized_iteration_count", "outz", "inner", "period", "convergence", "mincol", "allrgb", "allyuv", "smptehdbars", "smptebars", "rgbtestsrc", "testsrc2", "testsrc", "decimals", "nullsrc", "haldclutsrc", "APETAGEX", "subfile", "protocol_whitelist", "URLContext", "AVIOContext", "crypto", "decryption_key", "decryption_iv", "encryption_key", "encryption_iv", "language", "effects", "dialogue", "comentary", "emergency", "karaoke", "name", "truncate", "true", "false", "keyframes", "times", "filepositions", "videodatarate", "audiodatarate", "datastream", "videocodecreal", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "metadatacreator", "MEGA", "filesize", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Encoder", "live_flv", "live_flvdec", "flvdec", "flv_metadata", "segment", "ssegment", "mime_type", "comment", "seekable", "cookies", "headers", "http_proxy", "location", "AUDIO", "VIDEO", "SUBTITLES", "EVENT", "http", "cdn_ip", "offset", "end_offset", "PRIV", "APIC", "variant_bitrate", "user_agent", "live_start_index", "Forbidden", "POST", "Location", "bytes", "chunked", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "gzip", "identity", "no_proxy", "https", "ijkapplication", "listen", "icy_metadata_packet", "chunked_post", "content_type", "multiple_requests", "post_data", "icy_metadata_headers", "auth_type", "basic", "send_expect_100", "method", "reconnect", "reconnect_at_eof", "reconnect_streamed", "reconnect_delay_max", "resource", "reply_code", "AVApplicationContext", "auth", "title", "artist", "date", "genre", "Blues", "Country", "Dance", "Disco", "Funk", "Grunge", "Jazz", "Metal", "Oldies", "Other", "Reggae", "Rock", "Techno", "Industrial", "Alternative", "Pranks", "Soundtrack", "Ambient", "Vocal", "Fusion", "Trance", "Classical", "Instrumental", "Acid", "House", "Game", "Gospel", "Noise", "AlternRock", "Bass", "Soul", "Punk", "Space", "Meditative", "Ethnic", "Gothic", "Darkwave", "Electronic", "Eurodance", "Dream", "Comedy", "Cult", "Gangsta", "Jungle", "Cabaret", "Psychadelic", "Rave", "Showtunes", "Trailer", "Tribal", "Polka", "Retro", "Musical", "Folk", "Swing", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Chorus", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Sonata", "Symphony", "Primus", "Satire", "Club", "Tango", "Samba", "Folklore", "Ballad", "Freestyle", "Duet", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Beat", "Crossover", "Merengue", "Salsa", "Anime", "JPop", "SynthPop", "TCON", "TXXX", "encrypted", "version", "compression", "USLT", "CHAP", "GEOB", "TYER", "TDAT", "Conductor", "Composer", "Illustration", "compilation", "encoded_by", "album_artist", "performer", "TCMP", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "TSOP", "TSOT", "TALB", "TCOM", "composer", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "ljpg", "im24", "im32", "sunras", "yuv10", "root", "major_brand", "minor_version", "compatible_brands", "handler_name", "nclx", "nclc", "iTunSMPB", "cdec", "timecode", "tmcd", "warning", "subtitle", "original_source", "playback_requirements", "performers", "producer", "original_artist", "model", "make", "host_computer", "grouping", "original_format", "edit_date", "disclaimer", "director", "chapter", "season_number", "show", "network", "episode_sort", "episode_id", "media_type", "sort_show", "sort_name", "sort_composer", "sort_artist", "sort_album", "sort_album_artist", "rating", "purchase_date", "gapless_playback", "podcast", "synopsis", "keywords", "hd_video", "episode_uid", "description", "category", "account_id", "account_type", "quicktime_version", "premiere_version", "reel_name", "stsd", "avc1", "hvc1", "hev1", "mp4s", "use_absolute_path", "seek_streams_individually", "ignore_editlist", "ignore_chapters", "use_mfra_for", "export_all", "export_xmp", "activation_bytes", "audible_fixed_key", "enable_drefs", "disk", "trkn", "stss", "stps", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "hint", "HintHandler", "TimeCodeHandler", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "handler", "yrrc", "albm", "XDCAM", "DpxE", "lpcm", "perf", "titl", "author", "gnre", "dscp", "cprt", "aART", "encoding_tool", "ldes", "tvsh", "tven", "tvnn", "tmpo", "wide", "free", "video", "audio", "ipod", "ismv", "systemBitrate", "trackID", "CodecPrivateData", "FourCC", "H264", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "movflags", "rtphint", "moov_size", "empty_moov", "frag_keyframe", "separate_moof", "frag_custom", "isml", "faststart", "omit_tfhd_offset", "disable_chpl", "default_base_moof", "dash", "frag_discont", "delay_moov", "global_sidx", "write_colr", "write_gama", "rtpflags", "rfc2190", "skip_rtcp", "h264_mode0", "send_bye", "skip_iods", "iods_audio_profile", "iods_video_profile", "frag_duration", "min_frag_duration", "frag_size", "ism_lookahead", "video_track_timescale", "brand", "use_editlist", "fragment_index", "mov_gamma", "frag_interleave", "encryption_scheme", "encryption_kid", "rtpo", "usetoc", "service_name", "service_provider", "HDMV", "HDPR", "mpegtsraw", "mpegts", "resync_size", "compute_pcr", "ts_packetsize", "fix_teletext_pts", "scan_all_pmts", "skip_changes", "skip_clear", "AVFormatContext", "avioflags", "direct", "probesize", "formatprobesize", "packetsize", "fflags", "flush_packets", "ignidx", "genpts", "nofillin", "noparse", "igndts", "discardcorrupt", "sortdts", "keepside", "fastseek", "nobuffer", "seek2any", "analyzeduration", "cryptokey", "indexmem", "rtbufsize", "fdebug", "max_delay", "start_time_realtime", "fpsprobesize", "audio_preload", "chunk_duration", "chunk_size", "f_err_detect", "use_wallclock_as_timestamps", "skip_initial_bytes", "correct_ts_overflow", "metadata_header_padding", "output_ts_offset", "max_interleave_delta", "f_strict", "max_ts_probe", "avoid_negative_ts", "disabled", "make_non_negative", "make_zero", "format_whitelist", "hls_cdn_ip", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "BottomUp", "LIST", "notification", "invoke", "_result", "code", "onStatus", "status", "details", "clientid", "_checkbw", "releaseStream", "FCSubscribe", "FCPublish", "getStreamLength", "connect", "user", "salt", "opaque", "challenge", "nonce", "adobe", "live", "publish", "llnw", "FCUnpublish", "deleteStream", "seek", "pause", "_error", "createStream", "play", "onBWDone", "onFCPublish", "rtmp", "rtmpt", "rtmpts", "ffrtmphttp_tls", "ffrtmphttp", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "rtmp_swfhash", "ondemand", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "fmsVer", "objectEncoding", "rtmp_app", "rtmp_buffer", "rtmp_conn", "rtmp_flashver", "rtmp_flush_interval", "rtmp_live", "recorded", "rtmp_pageurl", "rtmp_playpath", "rtmp_subscribe", "rtmp_swfsize", "rtmp_swfurl", "rtmp_swfverify", "rtmp_tcurl", "rtmp_listen", "timeout", "payload_type", "listen_timeout", "send_buffer_size", "recv_buffer_size", "cafile", "verify", "cert", "httpproxy", "ca_file", "tls_verify", "cert_file", "key_file", "verifyhost", "pipe", "cache", "mp4v", "dvbsub", "loas", "mpegvideo", "quad", "hexagonal", "octagonal", "hexadecagonal", "downmix", "LFE2", "armv5te", "armv6", "armv6t2", "vfp_vm", "vfpv3", "neon", "setend", "cpuflags", "BSF_NOT_FOUND", "BUG2", "BUFFER_TOO_SMALL", "DECODER_NOT_FOUND", "DEMUXER_NOT_FOUND", "ENCODER_NOT_FOUND", "EXIT", "EXTERNAL", "FILTER_NOT_FOUND", "INPUT_CHANGED", "INVALIDDATA", "MUXER_NOT_FOUND", "OPTION_NOT_FOUND", "OUTPUT_CHANGED", "PATCHWELCOME", "PROTOCOL_NOT_FOUND", "STREAM_NOT_FOUND", "UNKNOWN", "EXPERIMENTAL", "INPUT_AND_OUTPUT_CHANGED", "HTTP_BAD_REQUEST", "HTTP_UNAUTHORIZED", "HTTP_FORBIDDEN", "HTTP_NOT_FOUND", "HTTP_OTHER_4XX", "HTTP_SERVER_ERROR", "sinh", "cosh", "tanh", "asin", "acos", "squish", "isnan", "isinf", "while", "taylor", "floor", "ceil", "hypot", "ifnot", "bitand", "bitor", "between", "atan", "QP2LAMBDA", "Eval", "FILE", "AVPanScan", "AVMatrixEncoding", "AVReplayGain", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA384", "SHA512", "CRC32", "adler32", "IMGUTILS", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "quiet", "verbose", "fatal", "panic", "INT64_MAX", "INT64_MIN", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "FLT_MAX", "FLT_MIN", "DBL_MAX", "DBL_MIN", "pixel", "sample", "ntsc", "qntsc", "qpal", "sntsc", "spal", "bikeshed", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SpringGreen", "SteelBlue", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen", "sqcif", "qcif", "qqvga", "qvga", "svga", "uxga", "qxga", "sxga", "qsxga", "hsxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd1080", "hqvga", "wqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "bgra", "rgba", "rgb32", "bgr32", "yuvj", "bayer_", "reserved", "ycgco", "bt2020nc", "bt2020c", "log100", "log316", "bt1361e", "yuv420p", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "monow", "monob", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "y16be", "gray16le", "y16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "rgb0", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "attachment", "SWResampler", "in_channel_count", "out_channel_count", "used_channel_count", "in_sample_rate", "out_sample_rate", "in_sample_fmt", "out_sample_fmt", "internal_sample_fmt", "in_channel_layout", "out_channel_layout", "clev", "center_mix_level", "surround_mix_level", "lfe_mix_level", "rmvol", "rematrix_volume", "rematrix_maxval", "swr_flags", "dither_scale", "dither_method", "rectangular", "triangular_hp", "lipshitz", "shibata", "low_shibata", "high_shibata", "f_weighted", "modified_e_weighted", "improved_e_weighted", "filter_size", "phase_shift", "linear_interp", "resample_cutoff", "resampler", "soxr", "cheby", "min_comp", "min_hard_comp", "comp_duration", "max_soft_comp", "async", "first_pts", "matrix_encoding", "dolby", "dplii", "filter_type", "blackman_nuttall", "kaiser", "kaiser_beta", "output_sample_bits", "swscaler", "SWScaler", "fast_bilinear", "bicubic", "neighbor", "area", "bicublin", "Gaussian", "sinc", "spline", "print_info", "accurate_rnd", "full_chroma_int", "full_chroma_inp", "error_diffusion", "sws_dither", "a_dither", "x_dither", "alphablend", "uniform_color", "Features", "ECDSA", "SRTP_AES128_CM_SHA1_80", "SRTP_AES128_CM_SHA1_32", "SSLv2", "TLSv1", "SSLv3", "DTLSv1", "ssl_client", "ssl_server", "STRENGTH", "SHA1", "md_gost94", "SUITEB128ONLY", "SUITEB128C2", "SUITEB128", "SUITEB192", "gost2001", "DEFAULT", "gost94", "KRB5", "ECDH", "GOST", "None", "GOST94", "GOST01", "AEAD", "GOST89", "COMPLEMENTOFALL", "COMPLEMENTOFDEFAULT", "kRSA", "kDHr", "kDHd", "kEDH", "kDHE", "kKRB5", "kECDHr", "kECDHe", "kECDH", "kEECDH", "kECDHE", "kPSK", "kSRP", "kGOST", "aRSA", "aDSS", "aKRB5", "aNULL", "aECDH", "aECDSA", "aPSK", "aGOST94", "aGOST01", "aGOST", "aSRP", "EECDH", "ECDHE", "AECDH", "IDEA", "SEED", "eNULL", "AES128", "AES256", "AESGCM", "CAMELLIA128", "CAMELLIA256", "CAMELLIA", "GOST89MAC", "EXPORT", "EXPORT40", "EXPORT56", "MEDIUM", "HIGH", "FIPS", "SSLERR", "DRCHVA", "DRCHVB", "DWCHVA", "DWCHVB", "unexpected_message", "DSS1", "dss1", "krb5", "uninitialized", "CHECK_SUITEB_CIPHER_LIST", "CLIENT_CERTIFICATE", "CLIENT_FINISHED", "CLIENT_HELLO", "CLIENT_MASTER_KEY", "d2i_SSL_SESSION", "do_dtls1_write", "DO_SSL3_WRITE", "dtls1_accept", "DTLS1_ADD_CERT_TO_BUF", "DTLS1_BUFFER_RECORD", "dtls1_check_timeout_num", "dtls1_client_hello", "dtls1_connect", "DTLS1_GET_HELLO_VERIFY", "dtls1_get_message", "DTLS1_GET_MESSAGE_FRAGMENT", "dtls1_get_record", "dtls1_handle_timeout", "dtls1_heartbeat", "dtls1_output_cert_chain", "DTLS1_PREPROCESS_FRAGMENT", "DTLS1_PROCESS_BUFFERED_RECORDS", "DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE", "DTLS1_PROCESS_RECORD", "dtls1_read_bytes", "dtls1_read_failed", "dtls1_send_certificate_request", "dtls1_send_client_certificate", "dtls1_send_client_key_exchange", "dtls1_send_client_verify", "DTLS1_SEND_HELLO_VERIFY_REQUEST", "dtls1_send_server_certificate", "dtls1_send_server_hello", "dtls1_send_server_key_exchange", "dtls1_write_app_data_bytes", "GET_CLIENT_FINISHED", "GET_CLIENT_HELLO", "GET_CLIENT_MASTER_KEY", "GET_SERVER_FINISHED", "GET_SERVER_HELLO", "GET_SERVER_STATIC_DH_KEY", "GET_SERVER_VERIFY", "i2d_SSL_SESSION", "READ_N", "REQUEST_CERTIFICATE", "SERVER_FINISH", "SERVER_HELLO", "SERVER_VERIFY", "ssl23_accept", "SSL23_CLIENT_HELLO", "ssl23_connect", "SSL23_GET_CLIENT_HELLO", "SSL23_GET_SERVER_HELLO", "ssl23_peek", "ssl23_read", "ssl23_write", "ssl2_accept", "ssl2_connect", "ssl2_enc_init", "ssl2_generate_key_material", "ssl2_peek", "ssl2_read", "SSL2_READ_INTERNAL", "ssl2_set_certificate", "ssl2_write", "ssl3_accept", "SSL3_ADD_CERT_TO_BUF", "ssl3_callback_ctrl", "ssl3_change_cipher_state", "ssl3_check_cert_and_algorithm", "ssl3_check_client_hello", "SSL3_CHECK_FINISHED", "ssl3_client_hello", "ssl3_connect", "ssl3_ctrl", "ssl3_ctx_ctrl", "ssl3_digest_cached_records", "ssl3_do_change_cipher_spec", "ssl3_enc", "SSL3_GENERATE_KEY_BLOCK", "ssl3_generate_master_secret", "ssl3_get_certificate_request", "ssl3_get_cert_status", "ssl3_get_cert_verify", "ssl3_get_client_certificate", "ssl3_get_client_hello", "ssl3_get_client_key_exchange", "ssl3_get_finished", "ssl3_get_key_exchange", "ssl3_get_message", "ssl3_get_new_session_ticket", "ssl3_get_next_proto", "SSL3_GET_RECORD", "ssl3_get_server_certificate", "ssl3_get_server_done", "ssl3_get_server_hello", "ssl3_handshake_mac", "SSL3_NEW_SESSION_TICKET", "ssl3_output_cert_chain", "ssl3_peek", "ssl3_read_bytes", "ssl3_read_n", "ssl3_send_certificate_request", "ssl3_send_client_certificate", "ssl3_send_client_key_exchange", "ssl3_send_client_verify", "ssl3_send_server_certificate", "ssl3_send_server_hello", "ssl3_send_server_key_exchange", "ssl3_setup_key_block", "ssl3_setup_read_buffer", "ssl3_setup_write_buffer", "ssl3_write_bytes", "ssl3_write_pending", "ssl_add_cert_chain", "SSL_ADD_CERT_TO_BUF", "ssl_add_clienthello_renegotiate_ext", "ssl_add_clienthello_tlsext", "ssl_add_clienthello_use_srtp_ext", "SSL_add_dir_cert_subjects_to_stack", "SSL_add_file_cert_subjects_to_stack", "ssl_add_serverhello_renegotiate_ext", "ssl_add_serverhello_tlsext", "ssl_add_serverhello_use_srtp_ext", "ssl_bad_method", "ssl_build_cert_chain", "ssl_bytes_to_cipher_list", "ssl_cert_dup", "ssl_cert_inst", "SSL_CERT_INSTANTIATE", "ssl_cert_new", "SSL_check_private_key", "SSL_CHECK_SERVERHELLO_TLSEXT", "ssl_check_srvr_ecc_cert_and_alg", "SSL_CIPHER_PROCESS_RULESTR", "SSL_CIPHER_STRENGTH_SORT", "SSL_clear", "SSL_COMP_add_compression_method", "SSL_CONF_cmd", "ssl_create_cipher_list", "SSL_ctrl", "SSL_CTX_check_private_key", "SSL_CTX_MAKE_PROFILES", "SSL_CTX_new", "SSL_CTX_set_cipher_list", "SSL_CTX_set_client_cert_engine", "SSL_CTX_set_purpose", "SSL_CTX_set_session_id_context", "SSL_CTX_set_ssl_version", "SSL_CTX_set_trust", "SSL_CTX_use_certificate", "SSL_CTX_use_certificate_ASN1", "SSL_CTX_use_certificate_chain_file", "SSL_CTX_use_certificate_file", "SSL_CTX_use_PrivateKey", "SSL_CTX_use_PrivateKey_ASN1", "SSL_CTX_use_PrivateKey_file", "SSL_CTX_use_psk_identity_hint", "SSL_CTX_use_RSAPrivateKey", "SSL_CTX_use_RSAPrivateKey_ASN1", "SSL_CTX_use_RSAPrivateKey_file", "SSL_CTX_use_serverinfo", "SSL_CTX_use_serverinfo_file", "SSL_do_handshake", "ssl_get_new_session", "ssl_get_prev_session", "SSL_GET_SERVER_CERT_INDEX", "SSL_GET_SERVER_SEND_CERT", "ssl_get_server_send_pkey", "ssl_get_sign_pkey", "ssl_init_wbio_buffer", "SSL_load_client_CA_file", "SSL_new", "ssl_parse_clienthello_renegotiate_ext", "ssl_parse_clienthello_tlsext", "ssl_parse_clienthello_use_srtp_ext", "ssl_parse_serverhello_renegotiate_ext", "ssl_parse_serverhello_tlsext", "ssl_parse_serverhello_use_srtp_ext", "SSL_peek", "ssl_prepare_clienthello_tlsext", "ssl_prepare_serverhello_tlsext", "SSL_read", "SSL_RSA_PRIVATE_DECRYPT", "SSL_RSA_PUBLIC_ENCRYPT", "SSL_SCAN_CLIENTHELLO_TLSEXT", "SSL_SCAN_SERVERHELLO_TLSEXT", "ssl_session_dup", "SSL_SESSION_new", "SSL_SESSION_print_fp", "SSL_SESSION_set1_id_context", "ssl_sess_cert_new", "SSL_SET_CERT", "SSL_set_cipher_list", "SSL_set_fd", "SSL_SET_PKEY", "SSL_set_purpose", "SSL_set_rfd", "SSL_set_session", "SSL_set_session_id_context", "SSL_set_session_ticket_ext", "SSL_set_trust", "SSL_set_wfd", "SSL_shutdown", "SSL_SRP_CTX_init", "ssl_undefined_const_function", "ssl_undefined_function", "ssl_undefined_void_function", "SSL_use_certificate", "SSL_use_certificate_ASN1", "SSL_use_certificate_file", "SSL_use_PrivateKey", "SSL_use_PrivateKey_ASN1", "SSL_use_PrivateKey_file", "SSL_use_psk_identity_hint", "SSL_use_RSAPrivateKey", "SSL_use_RSAPrivateKey_ASN1", "SSL_use_RSAPrivateKey_file", "ssl_verify_cert_chain", "SSL_write", "tls12_check_peer_sigalg", "tls1_cert_verify_mac", "tls1_change_cipher_state", "TLS1_CHECK_SERVERHELLO_TLSEXT", "tls1_enc", "tls1_export_keying_material", "TLS1_GET_CURVELIST", "tls1_heartbeat", "TLS1_PREPARE_CLIENTHELLO_TLSEXT", "TLS1_PREPARE_SERVERHELLO_TLSEXT", "tls1_prf", "tls1_setup_key_block", "tls1_set_server_sigalgs", "WRITE_PENDING", "CLNT", "SRVR", "CONNECT", "dynamic", "ERROR", "ex_data", "x509", "x509_info", "x509_pkey", "x509_crl", "x509_req", "evp_pkey", "x509_store", "ssl_ctx", "ssl_cert", "ssl_session", "ssl_sess_cert", "ssl_method", "rand", "rand2", "debug_malloc", "gethostbyname", "getservbyname", "readdir", "RSA_blinding", "debug_malloc2", "dynlock", "engine", "ecdsa", "ecdh", "ec_pre_comp", "store", "comp", "fips", "fips2", "UNDEF", "undefined", "rsadsi", "pkcs", "rsaEncryption", "md2WithRSAEncryption", "md5WithRSAEncryption", "X500", "X509", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs7", "pkcs3", "dhKeyAgreement", "shaWithRSAEncryption", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "nsCertExt", "nsDataType", "sha1", "sha1WithRSAEncryption", "dsaWithSHA", "PBKDF2", "nsCertType", "nsBaseUrl", "nsRevocationUrl", "nsCaRevocationUrl", "nsRenewalUrl", "nsCaPolicyUrl", "nsSslServerName", "nsComment", "nsCertSequence", "subjectKeyIdentifier", "keyUsage", "privateKeyUsagePeriod", "subjectAltName", "issuerAltName", "basicConstraints", "crlNumber", "certificatePolicies", "authorityKeyIdentifier", "MDC2", "mdc2", "mdc2WithRSA", "givenName", "surname", "initials", "crlDistributionPoints", "md5WithRSA", "serialNumber", "pbeWithMD5AndCast5CBC", "dsaWithSHA1", "sha1WithRSA", "dsaEncryption", "ripemd160", "ripemd160WithRSA", "ZLIB", "extendedKeyUsage", "PKIX", "serverAuth", "clientAuth", "codeSigning", "emailProtection", "timeStamping", "msCodeInd", "msCodeCom", "msCTLSign", "msSGC", "msEFS", "nsSGC", "deltaCRL", "CRLReason", "invalidityDate", "SXNetID", "pbeWithSHA1And128BitRC4", "pbeWithSHA1And40BitRC4", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "msExtReq", "extReq", "dnQualifier", "authorityInfoAccess", "OCSP", "caIssuers", "OCSPSigning", "X9cm", "pkcs1", "pkcs5", "SMIME", "biometricInfo", "qcStatements", "aaControls", "textNotice", "ipsecEndSystem", "ipsecTunnel", "ipsecUser", "DVCS", "dvcs", "ad_timestamping", "AD_DVCS", "basicOCSPResponse", "Nonce", "CrlID", "acceptableResponses", "noCheck", "archiveCutoff", "serviceLocator", "extendedStatus", "valid", "path", "trustRoot", "algorithm", "rsaSignature", "X500algorithms", "IANA", "iana", "directory", "Directory", "mgmt", "Management", "Experimental", "private", "Private", "security", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "domain", "Domain", "clearance", "md4WithRSAEncryption", "subjectInfoAccess", "role", "policyConstraints", "targetInformation", "noRevAvail", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "CSPName", "holdInstructionCode", "holdInstructionNone", "holdInstructionCallIssuer", "holdInstructionReject", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "mail", "rfc822Mailbox", "favouriteDrink", "roomNumber", "photo", "userClass", "host", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "documentPublisher", "x500UniqueIdentifier", "generationQualifier", "pseudonym", "rsaOAEPEncryptionSET", "msSmartcardLogin", "msUPN", "street", "streetAddress", "postalCode", "proxyCertInfo", "nameConstraints", "Independent", "sha256WithRSAEncryption", "sha384WithRSAEncryption", "sha512WithRSAEncryption", "sha224WithRSAEncryption", "sha256", "sha384", "sha512", "sha224", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "anyPolicy", "policyMappings", "inhibitAnyPolicy", "ipsec3", "ipsec4", "subjectDirectoryAttributes", "issuingDistributionPoint", "certificateIssuer", "KISA", "kisa", "caRepository", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "gost89", "gost94cc", "gost2001cc", "HMAC", "hmac", "LocalKeySet", "freshestCRL", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "CMAC", "cmac", "anyExtendedKeyUsage", "MGF1", "mgf1", "rsassaPss", "rsaesOaep", "dhpublicnumber", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "ct_precert_scts", "ct_precert_poison", "ct_precert_signer", "ct_cert_scts", "jurisdictionL", "jurisdictionLocalityName", "jurisdictionST", "jurisdictionStateOrProvinceName", "jurisdictionC", "jurisdictionCountryName", "RSA_OAEP_PARAMS", "hashFunc", "maskGenFunc", "pSourceFunc", "RSA_PSS_PARAMS", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "dmp1", "dmq1", "iqmp", "pub_key", "priv_key", "DSA_SIG", "socket", "fopen", "ioctlsocket", "bind", "accept", "opendir", "fread", "fflush", "Parameters", "AESNI_INIT_KEY", "AESNI_XTS_CIPHER", "AES_INIT_KEY", "AES_T4_INIT_KEY", "AES_XTS", "AES_XTS_CIPHER", "ALG_MODULE_INIT", "CAMELLIA_INIT_KEY", "CMAC_INIT", "CMLL_T4_INIT_KEY", "D2I_PKEY", "DO_SIGVER_INIT", "DSAPKEY2PKCS8", "DSA_PKEY2PKCS8", "ECDSA_PKEY2PKCS8", "ECKEY_PKEY2PKCS8", "EVP_CipherInit_ex", "EVP_CIPHER_CTX_copy", "EVP_CIPHER_CTX_ctrl", "EVP_CIPHER_CTX_set_key_length", "EVP_DecryptFinal_ex", "EVP_DigestInit_ex", "EVP_EncryptFinal_ex", "EVP_MD_CTX_copy_ex", "EVP_MD_size", "EVP_OpenInit", "EVP_PBE_alg_add", "EVP_PBE_alg_add_type", "EVP_PBE_CipherInit", "EVP_PKCS82PKEY", "EVP_PKCS82PKEY_BROKEN", "EVP_PKEY2PKCS8_broken", "EVP_PKEY_copy_parameters", "EVP_PKEY_CTX_ctrl", "EVP_PKEY_CTX_ctrl_str", "EVP_PKEY_CTX_dup", "EVP_PKEY_decrypt", "EVP_PKEY_decrypt_init", "EVP_PKEY_decrypt_old", "EVP_PKEY_derive", "EVP_PKEY_derive_init", "EVP_PKEY_derive_set_peer", "EVP_PKEY_encrypt", "EVP_PKEY_encrypt_init", "EVP_PKEY_encrypt_old", "EVP_PKEY_get1_DH", "EVP_PKEY_get1_DSA", "EVP_PKEY_GET1_ECDSA", "EVP_PKEY_get1_EC_KEY", "EVP_PKEY_get1_RSA", "EVP_PKEY_keygen", "EVP_PKEY_keygen_init", "EVP_PKEY_new", "EVP_PKEY_paramgen", "EVP_PKEY_paramgen_init", "EVP_PKEY_sign", "EVP_PKEY_sign_init", "EVP_PKEY_verify", "EVP_PKEY_verify_init", "EVP_PKEY_verify_recover", "EVP_PKEY_verify_recover_init", "EVP_RIJNDAEL", "EVP_SignFinal", "EVP_VerifyFinal", "FIPS_CIPHERINIT", "FIPS_CIPHER_CTX_COPY", "FIPS_CIPHER_CTX_CTRL", "FIPS_CIPHER_CTX_SET_KEY_LENGTH", "FIPS_DIGESTINIT", "FIPS_MD_CTX_COPY", "HMAC_Init_ex", "INT_CTX_NEW", "PKCS5_PBE_keyivgen", "PKCS5_v2_PBE_keyivgen", "PKCS5_V2_PBKDF2_KEYIVGEN", "PKCS8_set_broken", "PKEY_SET_TYPE", "RC2_MAGIC_TO_METH", "RC5_CTRL", "DESX", "desx", "DES3", "des3", "idea", "blowfish", "CAST", "cast", "aes128", "AES192", "aes192", "aes256", "camellia128", "CAMELLIA192", "camellia192", "camellia256", "ripemd", "rmd160", "digest", "X509_ALGORS", "algorithms", "X509_ALGOR", "parameter", "X509_PUBKEY", "algor", "public_key", "X509_SIG", "X509_ATTRIBUTE", "object", "BIGNUM", "ZLONG", "LONG", "X509_NAME", "X509_NAME_INTERNAL", "Name", "X509_NAME_ENTRIES", "RDNS", "X509_NAME_ENTRY", "cert_info", "sig_alg", "signature", "X509_CINF", "issuer", "validity", "subject", "issuerUID", "subjectUID", "extensions", "X509_CERT_PAIR", "X509_CERT_AUX", "trust", "reject", "alias", "keyid", "other", "ASN1_SET_ANY", "ASN1_SEQUENCE_ANY", "ASN1_OCTET_STRING_NDEF", "ASN1_FBOOLEAN", "ASN1_TBOOLEAN", "ASN1_BOOLEAN", "DIRECTORYSTRING", "DISPLAYTEXT", "ASN1_PRINTABLE", "ASN1_SEQUENCE", "ASN1_ANY", "ASN1_BMPSTRING", "ASN1_UNIVERSALSTRING", "ASN1_VISIBLESTRING", "ASN1_GENERALIZEDTIME", "ASN1_UTCTIME", "ASN1_GENERALSTRING", "ASN1_IA5STRING", "ASN1_T61STRING", "ASN1_PRINTABLESTRING", "ASN1_UTF8STRING", "ASN1_OBJECT", "ASN1_NULL", "ASN1_OCTET_STRING", "ASN1_BIT_STRING", "ASN1_ENUMERATED", "ASN1_INTEGER", "X509_EXTENSIONS", "Extension", "X509_EXTENSION", "critical", "a2d_ASN1_OBJECT", "a2i_ASN1_ENUMERATED", "a2i_ASN1_INTEGER", "a2i_ASN1_STRING", "APPEND_EXP", "ASN1_BIT_STRING_set_bit", "ASN1_CB", "ASN1_CHECK_TLEN", "ASN1_COLLATE_PRIMITIVE", "ASN1_COLLECT", "ASN1_D2I_EX_PRIMITIVE", "ASN1_d2i_fp", "ASN1_D2I_READ_BIO", "ASN1_digest", "ASN1_DO_ADB", "ASN1_dup", "ASN1_ENUMERATED_set", "ASN1_ENUMERATED_to_BN", "ASN1_EX_C2I", "ASN1_FIND_END", "ASN1_GENERALIZEDTIME_adj", "ASN1_GENERALIZEDTIME_set", "ASN1_generate_v3", "ASN1_get_object", "ASN1_HEADER_NEW", "ASN1_i2d_bio", "ASN1_i2d_fp", "ASN1_INTEGER_set", "ASN1_INTEGER_to_BN", "ASN1_item_d2i_fp", "ASN1_item_dup", "ASN1_ITEM_EX_COMBINE_NEW", "ASN1_ITEM_EX_D2I", "ASN1_item_i2d_bio", "ASN1_item_i2d_fp", "ASN1_item_pack", "ASN1_item_sign", "ASN1_item_sign_ctx", "ASN1_item_unpack", "ASN1_item_verify", "ASN1_mbstring_ncopy", "ASN1_OBJECT_new", "ASN1_OUTPUT_DATA", "ASN1_pack_string", "ASN1_PCTX_new", "ASN1_PKCS5_PBE_SET", "ASN1_seq_pack", "ASN1_seq_unpack", "ASN1_sign", "ASN1_STR2TYPE", "ASN1_STRING_set", "ASN1_STRING_TABLE_add", "ASN1_STRING_type_new", "ASN1_TEMPLATE_EX_D2I", "ASN1_TEMPLATE_NEW", "ASN1_TEMPLATE_NOEXP_D2I", "ASN1_TIME_adj", "ASN1_TIME_set", "ASN1_TYPE_get_int_octetstring", "ASN1_TYPE_get_octetstring", "ASN1_unpack_string", "ASN1_UTCTIME_adj", "ASN1_UTCTIME_set", "ASN1_verify", "B64_READ_ASN1", "B64_WRITE_ASN1", "BIO_new_NDEF", "BITSTR_CB", "BN_to_ASN1_ENUMERATED", "BN_to_ASN1_INTEGER", "c2i_ASN1_BIT_STRING", "c2i_ASN1_INTEGER", "c2i_ASN1_OBJECT", "COLLECT_DATA", "D2I_ASN1_BIT_STRING", "d2i_ASN1_BOOLEAN", "d2i_ASN1_bytes", "D2I_ASN1_GENERALIZEDTIME", "D2I_ASN1_HEADER", "D2I_ASN1_INTEGER", "d2i_ASN1_OBJECT", "d2i_ASN1_SET", "d2i_ASN1_type_bytes", "d2i_ASN1_UINTEGER", "D2I_ASN1_UTCTIME", "d2i_AutoPrivateKey", "d2i_Netscape_RSA", "D2I_NETSCAPE_RSA_2", "d2i_PrivateKey", "d2i_PublicKey", "d2i_RSA_NET", "D2I_RSA_NET_2", "D2I_X509", "D2I_X509_CINF", "d2i_X509_PKEY", "DO_BUF", "i2d_ASN1_bio_stream", "i2d_ASN1_SET", "I2D_ASN1_TIME", "i2d_DSA_PUBKEY", "i2d_EC_PUBKEY", "i2d_PrivateKey", "i2d_PublicKey", "i2d_RSA_NET", "i2d_RSA_PUBKEY", "LONG_C2I", "OID_MODULE_INIT", "PARSE_TAGGING", "PKCS5_pbe2_set_iv", "PKCS5_pbe_set", "PKCS5_pbe_set0_algor", "PKCS5_pbkdf2_set", "SMIME_read_ASN1", "SMIME_text", "X509_CINF_NEW", "X509_CRL_add0_revoked", "X509_INFO_new", "X509_NAME_ENCODE", "X509_NAME_EX_D2I", "X509_NAME_EX_NEW", "X509_NEW", "X509_PKEY_new", "PBEPARAM", "PBKDF2PARAM", "keylength", "PBE2PARAM", "keyfunc", "encryption", "PKCS8_PRIV_KEY_INFO", "pkeyalg", "pkey", "attributes", "ENCRYPTED", "PARAMETERS", "CERTIFICATE", "PKCS7", "B2I_DSS", "b2i_PVK_bio", "B2I_RSA", "CHECK_BITLEN_DSA", "CHECK_BITLEN_RSA", "d2i_PKCS8PrivateKey_bio", "d2i_PKCS8PrivateKey_fp", "DO_B2I", "DO_B2I_BIO", "DO_BLOB_HEADER", "DO_PK8PKEY", "DO_PK8PKEY_FP", "DO_PVK_BODY", "DO_PVK_HEADER", "I2B_PVK", "i2b_PVK_bio", "LOAD_IV", "PEM_ASN1_read", "PEM_ASN1_read_bio", "PEM_ASN1_write", "PEM_ASN1_write_bio", "PEM_def_callback", "PEM_do_header", "PEM_F_PEM_WRITE_PKCS8PRIVATEKEY", "PEM_get_EVP_CIPHER_INFO", "PEM_PK8PKEY", "PEM_read", "PEM_read_bio", "PEM_READ_BIO_DHPARAMS", "PEM_read_bio_Parameters", "PEM_READ_BIO_PRIVATEKEY", "PEM_READ_DHPARAMS", "PEM_READ_PRIVATEKEY", "PEM_SealFinal", "PEM_SealInit", "PEM_SignFinal", "PEM_write", "PEM_write_bio", "PEM_WRITE_PRIVATEKEY", "PEM_X509_INFO_read", "PEM_X509_INFO_read_bio", "PEM_X509_INFO_write_bio", "OPENSSL_ALLOW_PROXY_CERTS", "ADD_CERT_DIR", "BY_FILE_CTRL", "CHECK_NAME_CONSTRAINTS", "CHECK_POLICY", "DIR_CTRL", "GET_CERT_BY_SUBJECT", "NETSCAPE_SPKI_b64_decode", "NETSCAPE_SPKI_b64_encode", "X509at_add1_attr", "X509v3_add_ext", "X509_ATTRIBUTE_create_by_NID", "X509_ATTRIBUTE_create_by_OBJ", "X509_ATTRIBUTE_create_by_txt", "X509_ATTRIBUTE_get0_data", "X509_ATTRIBUTE_set1_data", "X509_check_private_key", "X509_CRL_diff", "X509_CRL_print_fp", "X509_EXTENSION_create_by_NID", "X509_EXTENSION_create_by_OBJ", "X509_get_pubkey_parameters", "X509_load_cert_crl_file", "X509_load_cert_file", "X509_load_crl_file", "X509_NAME_add_entry", "X509_NAME_ENTRY_create_by_NID", "X509_NAME_ENTRY_create_by_txt", "X509_NAME_ENTRY_set_object", "X509_NAME_oneline", "X509_NAME_print", "X509_print_ex_fp", "X509_PUBKEY_get", "X509_PUBKEY_set", "X509_REQ_check_private_key", "X509_REQ_print_ex", "X509_REQ_print_fp", "X509_REQ_to_X509", "X509_STORE_add_cert", "X509_STORE_add_crl", "X509_STORE_CTX_get1_issuer", "X509_STORE_CTX_init", "X509_STORE_CTX_new", "X509_STORE_CTX_purpose_inherit", "X509_to_X509_REQ", "X509_TRUST_add", "X509_TRUST_set", "X509_verify_cert", "compatible", "smime_sign", "TRUE", "FALSE", "a2i_GENERAL_NAME", "ASIDENTIFIERCHOICE_CANONIZE", "ASIDENTIFIERCHOICE_IS_CANONICAL", "COPY_EMAIL", "COPY_ISSUER", "DO_DIRNAME", "DO_EXT_CONF", "DO_EXT_I2D", "DO_EXT_NCONF", "DO_I2V_NAME_CONSTRAINTS", "GNAMES_FROM_SECTNAME", "hex_to_string", "i2s_ASN1_ENUMERATED", "I2S_ASN1_IA5STRING", "i2s_ASN1_INTEGER", "I2V_AUTHORITY_INFO_ACCESS", "NOTICE_SECTION", "NREF_NOS", "POLICY_SECTION", "PROCESS_PCI_VALUE", "R2I_CERTPOL", "R2I_PCI", "S2I_ASN1_IA5STRING", "s2i_ASN1_INTEGER", "s2i_ASN1_OCTET_STRING", "S2I_ASN1_SKEY_ID", "S2I_SKEY_ID", "SET_DIST_POINT_NAME", "string_to_hex", "SXNET_add_id_asc", "SXNET_add_id_INTEGER", "SXNET_add_id_ulong", "SXNET_get_id_asc", "SXNET_get_id_ulong", "V2I_ASIDENTIFIERS", "v2i_ASN1_BIT_STRING", "V2I_AUTHORITY_INFO_ACCESS", "V2I_AUTHORITY_KEYID", "V2I_BASIC_CONSTRAINTS", "V2I_CRLD", "V2I_EXTENDED_KEY_USAGE", "v2i_GENERAL_NAMES", "v2i_GENERAL_NAME_ex", "V2I_IDP", "V2I_IPADDRBLOCKS", "V2I_ISSUER_ALT", "V2I_NAME_CONSTRAINTS", "V2I_POLICY_CONSTRAINTS", "V2I_POLICY_MAPPINGS", "V2I_SUBJECT_ALT", "V3_ADDR_VALIDATE_PATH_INTERNAL", "V3_GENERIC_EXTENSION", "X509V3_add1_i2d", "X509V3_add_value", "X509V3_EXT_add", "X509V3_EXT_add_alias", "X509V3_EXT_conf", "X509V3_EXT_free", "X509V3_EXT_i2d", "X509V3_EXT_nconf", "X509V3_get_section", "X509V3_get_string", "X509V3_get_value_bool", "X509V3_parse_list", "X509_PURPOSE_add", "X509_PURPOSE_set", "GENERAL_NAMES", "GeneralNames", "GENERAL_NAME", "EDIPARTYNAME", "nameAssigner", "partyName", "OTHERNAME", "type_id", "othername", "X400Name", "EdiPartyName", "email", "DirName", "dirName", "otherName", "move", "hash", "always", "serial", "PKEY_USAGE_PERIOD", "notBefore", "notAfter", "keyCompromise", "CACompromise", "affiliationChanged", "Superseded", "superseded", "cessationOfOperation", "certificateHold", "removeFromCRL", "privilegeWithdrawn", "AACompromise", "SXNET", "SXNETID", "zone", "ia5org", "policyIdentifier", "userNotice", "explicitText", "organization", "noticeNumbers", "Critical", "NOTICEREF", "noticenos", "USERNOTICE", "noticeref", "exptext", "POLICYQUALINFO", "pqualid", "POLICYINFO", "policyid", "qualifiers", "CERTIFICATEPOLICIES", "Reasons", "fullname", "relativename", "CRLissuer", "reasons", "onlyCA", "onlyAA", "indirectCRL", "onlysomereasons", "onlyuser", "ISSUING_DIST_POINT", "distpoint", "onlyattr", "CRL_DIST_POINTS", "CRLDistributionPoints", "DIST_POINT", "DIST_POINT_NAME", "Unused", "unused", "sslclient", "sslserver", "nssslserver", "smimesign", "smimeencrypt", "crlsign", "ocsphelper", "timestampsign", "AUTHORITY_INFO_ACCESS", "ACCESS_DESCRIPTION", "AUTHORITY_KEYID", "POLICY_MAPPINGS", "POLICY_MAPPING", "issuerDomainPolicy", "subjectDomainPolicy", "requireExplicitPolicy", "inhibitPolicyMapping", "POLICY_CONSTRAINTS", "Permitted", "Excluded", "permitted", "excluded", "NAME_CONSTRAINTS", "permittedSubtrees", "excludedSubtrees", "GENERAL_SUBTREE", "minimum", "PROXY_CERT_INFO_EXTENSION", "pcPathLengthConstraint", "proxyPolicy", "PROXY_POLICY", "policyLanguage", "policy", "pathlen", "infinite", "CONF_dump_fp", "CONF_load", "CONF_load_bio", "CONF_load_fp", "CONF_modules_load", "CONF_parse_list", "DEF_LOAD", "DEF_LOAD_BIO", "MODULE_INIT", "MODULE_LOAD_DSO", "MODULE_RUN", "NCONF_dump_bio", "NCONF_dump_fp", "NCONF_get_number", "NCONF_get_number_e", "NCONF_get_section", "NCONF_get_string", "NCONF_load", "NCONF_load_bio", "NCONF_load_fp", "NCONF_new", "STR_COPY", "openssl_conf", "OPENSSL_init", "OPENSSL_finish", "OPENSSL_CONF", "PKCS7_ATTR_VERIFY", "PKCS7_ATTRIBUTES", "PKCS7_ATTR_SIGN", "PKCS7_DIGEST", "contents", "PKCS7_ENCRYPT", "enc_data", "PKCS7_SIGN_ENVELOPE", "recipientinfo", "md_algs", "signer_info", "PKCS7_ENC_CONTENT", "PKCS7_RECIP_INFO", "issuer_and_serial", "key_enc_algor", "enc_key", "PKCS7_ENVELOPE", "PKCS7_ISSUER_AND_SERIAL", "PKCS7_SIGNER_INFO", "digest_alg", "auth_attr", "digest_enc_alg", "enc_digest", "unauth_attr", "PKCS7_SIGNED", "B64_READ_PKCS7", "B64_WRITE_PKCS7", "DO_PKCS7_SIGNED_ATTRIB", "i2d_PKCS7_bio_stream", "PKCS7_add0_attrib_signing_time", "PKCS7_add_attrib_smimecap", "PKCS7_add_certificate", "PKCS7_add_crl", "PKCS7_add_recipient_info", "PKCS7_add_signature", "PKCS7_add_signer", "PKCS7_BIO_ADD_DIGEST", "PKCS7_COPY_EXISTING_DIGEST", "PKCS7_ctrl", "PKCS7_dataDecode", "PKCS7_dataFinal", "PKCS7_dataInit", "PKCS7_DATASIGN", "PKCS7_dataVerify", "PKCS7_decrypt", "PKCS7_DECRYPT_RINFO", "PKCS7_ENCODE_RINFO", "PKCS7_encrypt", "PKCS7_final", "PKCS7_FIND_DIGEST", "PKCS7_get0_signers", "PKCS7_RECIP_INFO_set", "PKCS7_set_cipher", "PKCS7_set_content", "PKCS7_set_digest", "PKCS7_set_type", "PKCS7_sign", "PKCS7_signatureVerify", "PKCS7_SIGNER_INFO_set", "PKCS7_SIGNER_INFO_sign", "PKCS7_sign_add_signer", "PKCS7_simple_smimecap", "PKCS7_verify", "SMIME_read_PKCS7", "PARSE_BAG", "PARSE_BAGS", "PKCS12_ADD_FRIENDLYNAME", "PKCS12_add_friendlyname_asc", "PKCS12_add_friendlyname_uni", "PKCS12_add_localkeyid", "PKCS12_create", "PKCS12_gen_mac", "PKCS12_init", "PKCS12_item_decrypt_d2i", "PKCS12_item_i2d_encrypt", "PKCS12_item_pack_safebag", "PKCS12_key_gen_asc", "PKCS12_key_gen_uni", "PKCS12_MAKE_KEYBAG", "PKCS12_MAKE_SHKEYBAG", "PKCS12_newpass", "PKCS12_pack_p7data", "PKCS12_pack_p7encdata", "PKCS12_parse", "PKCS12_pbe_crypt", "PKCS12_PBE_keyivgen", "PKCS12_setup_mac", "PKCS12_set_mac", "PKCS12_unpack_authsafes", "PKCS12_unpack_p7data", "PKCS12_verify_mac", "PKCS8_add_keyusage", "PKCS8_encrypt", "BIO_ZLIB_FLUSH", "BIO_ZLIB_NEW", "BIO_ZLIB_READ", "BIO_ZLIB_WRITE", "compress", "inflateEnd", "inflateInit_", "deflateEnd", "deflateInit_", "zError", "OCSP_SERVICELOC", "locator", "OCSP_CRLID", "crlUrl", "crlNum", "crlTime", "OCSP_BASICRESP", "tbsResponseData", "signatureAlgorithm", "certs", "OCSP_RESPDATA", "responderId", "producedAt", "responses", "responseExtensions", "OCSP_SINGLERESP", "certId", "certStatus", "thisUpdate", "nextUpdate", "singleExtensions", "OCSP_CERTSTATUS", "OCSP_REVOKEDINFO", "revocationTime", "revocationReason", "OCSP_RESPID", "OCSP_RESPONSE", "responseStatus", "responseBytes", "OCSP_RESPBYTES", "responseType", "response", "OCSP_REQUEST", "tbsRequest", "optionalSignature", "OCSP_REQINFO", "requestorName", "requestList", "requestExtensions", "OCSP_ONEREQ", "reqCert", "singleRequestExtensions", "OCSP_CERTID", "issuerNameHash", "issuerKeyHash", "OCSP_SIGNATURE", "ASN1_STRING_encode", "D2I_OCSP_NONCE", "OCSP_basic_add1_status", "OCSP_basic_sign", "OCSP_basic_verify", "OCSP_cert_id_new", "OCSP_CHECK_DELEGATED", "OCSP_CHECK_IDS", "OCSP_CHECK_ISSUER", "OCSP_check_validity", "OCSP_MATCH_ISSUERID", "OCSP_parse_url", "OCSP_request_sign", "OCSP_request_verify", "OCSP_response_get1_basic", "OCSP_sendreq_bio", "OCSP_sendreq_nbio", "PARSE_HTTP_LINE1", "REQUEST_VERIFY", "GENERAL_ALLOCATE_BOOLEAN", "GENERAL_ALLOCATE_PROMPT", "GENERAL_ALLOCATE_STRING", "UI_ctrl", "UI_dup_error_string", "UI_dup_info_string", "UI_dup_input_boolean", "UI_dup_input_string", "UI_dup_verify_string", "UI_get0_result", "UI_new_method", "UI_set_result", "CHECK_CONTENT", "CMS_add0_cert", "CMS_add0_recipient_key", "CMS_add0_recipient_password", "CMS_add1_ReceiptRequest", "CMS_add1_recipient_cert", "CMS_add1_signer", "CMS_ADD1_SIGNINGTIME", "CMS_compress", "cms_CompressedData_create", "cms_CompressedData_init_bio", "CMS_COPY_CONTENT", "CMS_COPY_MESSAGEDIGEST", "CMS_data", "CMS_dataFinal", "CMS_dataInit", "CMS_decrypt", "CMS_decrypt_set1_key", "CMS_decrypt_set1_password", "CMS_decrypt_set1_pkey", "cms_DigestAlgorithm_find_ctx", "cms_DigestAlgorithm_init_bio", "cms_DigestedData_do_final", "CMS_digest_verify", "cms_encode_Receipt", "CMS_encrypt", "cms_EncryptedContent_init_bio", "CMS_EncryptedData_decrypt", "CMS_EncryptedData_encrypt", "CMS_EncryptedData_set1_key", "CMS_EnvelopedData_create", "cms_EnvelopedData_init_bio", "CMS_ENVELOPED_DATA_INIT", "cms_env_asn1_ctrl", "CMS_final", "CMS_GET0_CERTIFICATE_CHOICES", "CMS_get0_content", "CMS_GET0_ECONTENT_TYPE", "cms_get0_enveloped", "CMS_GET0_REVOCATION_CHOICES", "CMS_GET0_SIGNED", "cms_msgSigDigest_add1", "CMS_ReceiptRequest_create0", "cms_Receipt_verify", "CMS_RecipientInfo_decrypt", "CMS_RecipientInfo_encrypt", "cms_RecipientInfo_kari_encrypt", "CMS_RecipientInfo_kari_get0_alg", "CMS_RecipientInfo_kari_get0_orig_id", "CMS_RecipientInfo_kari_get0_reks", "CMS_RecipientInfo_kari_orig_id_cmp", "CMS_RECIPIENTINFO_KEKRI_DECRYPT", "CMS_RECIPIENTINFO_KEKRI_ENCRYPT", "CMS_RecipientInfo_kekri_get0_id", "CMS_RecipientInfo_kekri_id_cmp", "CMS_RecipientInfo_ktri_cert_cmp", "CMS_RECIPIENTINFO_KTRI_DECRYPT", "CMS_RECIPIENTINFO_KTRI_ENCRYPT", "CMS_RecipientInfo_ktri_get0_algs", "CMS_RecipientInfo_ktri_get0_signer_id", "cms_RecipientInfo_pwri_crypt", "CMS_RecipientInfo_set0_key", "CMS_RecipientInfo_set0_password", "CMS_RecipientInfo_set0_pkey", "CMS_SD_ASN1_CTRL", "cms_set1_ias", "cms_set1_keyid", "cms_set1_SignerIdentifier", "CMS_set_detached", "CMS_sign", "CMS_SIGNED_DATA_INIT", "CMS_SIGNERINFO_CONTENT_SIGN", "CMS_SignerInfo_sign", "CMS_SignerInfo_verify", "CMS_SIGNERINFO_VERIFY_CERT", "CMS_SignerInfo_verify_content", "CMS_sign_receipt", "CMS_stream", "CMS_uncompress", "CMS_verify", "d2i_TS_RESP", "DEF_SERIAL_CB", "DEF_TIME_CB", "ESS_ADD_SIGNING_CERT", "ESS_CERT_ID_NEW_INIT", "ESS_SIGNING_CERT_NEW_INIT", "INT_TS_RESP_VERIFY_TOKEN", "PKCS7_to_TS_TST_INFO", "TS_ACCURACY_set_micros", "TS_ACCURACY_set_millis", "TS_ACCURACY_set_seconds", "TS_CHECK_IMPRINTS", "TS_CHECK_NONCES", "TS_CHECK_POLICY", "TS_CHECK_SIGNING_CERTS", "TS_CHECK_STATUS_INFO", "TS_COMPUTE_IMPRINT", "TS_CONF_set_default_engine", "TS_GET_STATUS_TEXT", "TS_MSG_IMPRINT_set_algo", "TS_REQ_set_msg_imprint", "TS_REQ_set_nonce", "TS_REQ_set_policy_id", "TS_RESP_create_response", "TS_RESP_CREATE_TST_INFO", "TS_RESP_CTX_add_failure_info", "TS_RESP_CTX_add_md", "TS_RESP_CTX_add_policy", "TS_RESP_CTX_new", "TS_RESP_CTX_set_accuracy", "TS_RESP_CTX_set_certs", "TS_RESP_CTX_set_def_policy", "TS_RESP_CTX_set_signer_cert", "TS_RESP_CTX_set_status_info", "TS_RESP_GET_POLICY", "TS_RESP_SET_GENTIME_WITH_PRECISION", "TS_RESP_set_status_info", "TS_RESP_set_tst_info", "TS_RESP_SIGN", "TS_RESP_verify_signature", "TS_RESP_verify_token", "TS_TST_INFO_set_accuracy", "TS_TST_INFO_set_msg_imprint", "TS_TST_INFO_set_nonce", "TS_TST_INFO_set_policy_id", "TS_TST_INFO_set_serial", "TS_TST_INFO_set_time", "TS_TST_INFO_set_tsa", "TS_VERIFY", "TS_VERIFY_CERT", "TS_VERIFY_CTX_new", "cipher", "hexkey", "CRYPTO_get_ex_new_index", "CRYPTO_get_new_dynlockid", "CRYPTO_get_new_lockid", "CRYPTO_set_ex_data", "DEF_ADD_INDEX", "DEF_GET_CLASS", "FIPS_mode_set", "INT_DUP_EX_DATA", "INT_FREE_EX_DATA", "INT_NEW_EX_DATA", "OPENSSL_armcap", "OBJ_add_object", "OBJ_create", "OBJ_dup", "OBJ_NAME_new_index", "OBJ_nid2ln", "OBJ_nid2obj", "OBJ_nid2sn", "cisc", "long", "BNRAND", "BN_BLINDING_convert_ex", "BN_BLINDING_create_param", "BN_BLINDING_invert_ex", "BN_BLINDING_new", "BN_BLINDING_update", "BN_bn2dec", "BN_bn2hex", "BN_CTX_get", "BN_CTX_new", "BN_CTX_start", "BN_div", "BN_div_no_branch", "BN_div_recp", "BN_exp", "bn_expand2", "BN_EXPAND_INTERNAL", "BN_GF2m_mod", "BN_GF2m_mod_exp", "BN_GF2m_mod_mul", "BN_GF2m_mod_solve_quad", "BN_GF2m_mod_solve_quad_arr", "BN_GF2m_mod_sqr", "BN_GF2m_mod_sqrt", "BN_lshift", "BN_mod_exp2_mont", "BN_mod_exp_mont", "BN_mod_exp_mont_consttime", "BN_mod_exp_mont_word", "BN_mod_exp_recp", "BN_mod_exp_simple", "BN_mod_inverse", "BN_mod_inverse_no_branch", "BN_mod_lshift_quick", "BN_mod_mul_reciprocal", "BN_mod_sqrt", "BN_mpi2bn", "BN_new", "BN_rand", "BN_rand_range", "BN_rshift", "BN_usub", "BN_TO_FELEM", "COMPUTE_WNAF", "d2i_ECParameters", "d2i_ECPKParameters", "d2i_ECPrivateKey", "DO_EC_KEY_PRINT", "ECDH_CMS_DECRYPT", "ECDH_CMS_SET_SHARED_INFO", "ECKEY_PARAM2TYPE", "ECKEY_PARAM_DECODE", "ECKEY_PRIV_DECODE", "ECKEY_PRIV_ENCODE", "ECKEY_PUB_DECODE", "ECKEY_PUB_ENCODE", "ECKEY_TYPE2PARAM", "ECParameters_print", "ECParameters_print_fp", "ECPKParameters_print", "ECPKParameters_print_fp", "ecp_nistz256_get_affine", "ecp_nistz256_mult_precompute", "ecp_nistz256_points_mul", "ecp_nistz256_pre_comp_new", "ecp_nistz256_set_words", "ecp_nistz256_windowed_mul", "ECP_NIST_MOD_192", "ECP_NIST_MOD_224", "ECP_NIST_MOD_256", "ECP_NIST_MOD_521", "EC_ASN1_GROUP2CURVE", "EC_ASN1_GROUP2FIELDID", "EC_ASN1_GROUP2PARAMETERS", "EC_ASN1_GROUP2PKPARAMETERS", "EC_ASN1_PARAMETERS2GROUP", "EC_ASN1_PKPARAMETERS2GROUP", "EC_EX_DATA_set_data", "EC_GF2M_MONTGOMERY_POINT_MULTIPLY", "ec_GF2m_simple_group_check_discriminant", "ec_GF2m_simple_group_set_curve", "ec_GF2m_simple_oct2point", "ec_GF2m_simple_point2oct", "ec_GF2m_simple_point_get_affine_coordinates", "ec_GF2m_simple_point_set_affine_coordinates", "ec_GF2m_simple_set_compressed_coordinates", "ec_GFp_mont_field_decode", "ec_GFp_mont_field_encode", "ec_GFp_mont_field_mul", "ec_GFp_mont_field_set_to_one", "ec_GFp_mont_field_sqr", "ec_GFp_mont_group_set_curve", "EC_GFP_MONT_GROUP_SET_CURVE_GFP", "ec_GFp_nistp224_group_set_curve", "ec_GFp_nistp224_points_mul", "ec_GFp_nistp224_point_get_affine_coordinates", "ec_GFp_nistp256_group_set_curve", "ec_GFp_nistp256_points_mul", "ec_GFp_nistp256_point_get_affine_coordinates", "ec_GFp_nistp521_group_set_curve", "ec_GFp_nistp521_points_mul", "ec_GFp_nistp521_point_get_affine_coordinates", "ec_GFp_nist_field_mul", "ec_GFp_nist_field_sqr", "ec_GFp_nist_group_set_curve", "ec_GFp_simple_group_check_discriminant", "ec_GFp_simple_group_set_curve", "EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP", "EC_GFP_SIMPLE_GROUP_SET_GENERATOR", "ec_GFp_simple_make_affine", "ec_GFp_simple_oct2point", "ec_GFp_simple_point2oct", "ec_GFp_simple_points_make_affine", "ec_GFp_simple_point_get_affine_coordinates", "EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP", "ec_GFp_simple_point_set_affine_coordinates", "EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP", "ec_GFp_simple_set_compressed_coordinates", "EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP", "EC_GROUP_check", "EC_GROUP_check_discriminant", "EC_GROUP_copy", "EC_GROUP_get0_generator", "EC_GROUP_get_cofactor", "EC_GROUP_get_curve_GF2m", "EC_GROUP_get_curve_GFp", "EC_GROUP_get_degree", "EC_GROUP_get_order", "EC_GROUP_get_pentanomial_basis", "EC_GROUP_get_trinomial_basis", "EC_GROUP_new", "EC_GROUP_new_by_curve_name", "EC_GROUP_NEW_FROM_DATA", "EC_GROUP_precompute_mult", "EC_GROUP_set_curve_GF2m", "EC_GROUP_set_curve_GFp", "EC_GROUP_SET_EXTRA_DATA", "EC_GROUP_set_generator", "EC_KEY_check_key", "EC_KEY_copy", "EC_KEY_generate_key", "EC_KEY_new", "EC_KEY_print", "EC_KEY_print_fp", "EC_KEY_set_public_key_affine_coordinates", "EC_POINTs_make_affine", "EC_POINT_add", "EC_POINT_cmp", "EC_POINT_copy", "EC_POINT_dbl", "EC_POINT_get_affine_coordinates_GF2m", "EC_POINT_get_affine_coordinates_GFp", "EC_POINT_get_Jprojective_coordinates_GFp", "EC_POINT_invert", "EC_POINT_is_at_infinity", "EC_POINT_is_on_curve", "EC_POINT_make_affine", "EC_POINT_mul", "EC_POINT_new", "EC_POINT_oct2point", "EC_POINT_point2oct", "EC_POINT_set_affine_coordinates_GF2m", "EC_POINT_set_affine_coordinates_GFp", "EC_POINT_set_compressed_coordinates_GF2m", "EC_POINT_set_compressed_coordinates_GFp", "EC_POINT_set_Jprojective_coordinates_GFp", "EC_POINT_set_to_infinity", "EC_PRE_COMP_DUP", "EC_PRE_COMP_NEW", "ec_wNAF_mul", "ec_wNAF_precompute_mult", "i2d_ECParameters", "i2d_ECPKParameters", "i2d_ECPrivateKey", "i2o_ECPublicKey", "NISTP224_PRE_COMP_NEW", "NISTP256_PRE_COMP_NEW", "NISTP521_PRE_COMP_NEW", "o2i_ECPublicKey", "OLD_EC_PRIV_DECODE", "PKEY_EC_CTRL", "PKEY_EC_CTRL_STR", "PKEY_EC_DERIVE", "PKEY_EC_KEYGEN", "PKEY_EC_PARAMGEN", "PKEY_EC_SIGN", "EC_PRIVATEKEY", "privateKey", "parameters", "publicKey", "ECPKPARAMETERS", "ECPARAMETERS", "fieldID", "cofactor", "X9_62_CURVE", "X9_62_FIELDID", "fieldType", "X9_62_CHARACTERISTIC_TWO", "X9_62_PENTANOMIAL", "ec_paramgen_curve", "ec_param_enc", "explicit", "named_curve", "ecdh_kdf_md", "ecdh_cofactor_mode", "CHECK_PADDING_MD", "DO_RSA_PRINT", "INT_RSA_VERIFY", "MEMORY_LOCK", "OLD_RSA_PRIV_DECODE", "PKEY_RSA_CTRL", "PKEY_RSA_CTRL_STR", "PKEY_RSA_SIGN", "PKEY_RSA_VERIFY", "PKEY_RSA_VERIFYRECOVER", "RSA_ALGOR_TO_MD", "RSA_BUILTIN_KEYGEN", "RSA_check_key", "RSA_CMS_DECRYPT", "RSA_EAY_PRIVATE_DECRYPT", "RSA_EAY_PRIVATE_ENCRYPT", "RSA_EAY_PUBLIC_DECRYPT", "RSA_EAY_PUBLIC_ENCRYPT", "RSA_generate_key", "RSA_generate_key_ex", "RSA_ITEM_VERIFY", "RSA_memory_lock", "RSA_MGF1_TO_MD", "RSA_new_method", "RSA_NULL", "RSA_NULL_MOD_EXP", "RSA_NULL_PRIVATE_DECRYPT", "RSA_NULL_PRIVATE_ENCRYPT", "RSA_NULL_PUBLIC_DECRYPT", "RSA_NULL_PUBLIC_ENCRYPT", "RSA_padding_add_none", "RSA_padding_add_PKCS1_OAEP", "RSA_padding_add_PKCS1_OAEP_mgf1", "RSA_padding_add_PKCS1_PSS", "RSA_padding_add_PKCS1_PSS_mgf1", "RSA_padding_add_PKCS1_type_1", "RSA_padding_add_PKCS1_type_2", "RSA_padding_add_SSLv23", "RSA_padding_add_X931", "RSA_padding_check_none", "RSA_padding_check_PKCS1_OAEP", "RSA_padding_check_PKCS1_OAEP_mgf1", "RSA_padding_check_PKCS1_type_1", "RSA_padding_check_PKCS1_type_2", "RSA_padding_check_SSLv23", "RSA_padding_check_X931", "RSA_print", "RSA_print_fp", "RSA_private_decrypt", "RSA_private_encrypt", "RSA_PRIV_DECODE", "RSA_PRIV_ENCODE", "RSA_PSS_TO_CTX", "RSA_public_decrypt", "RSA_public_encrypt", "RSA_PUB_DECODE", "RSA_setup_blinding", "RSA_sign", "RSA_sign_ASN1_OCTET_STRING", "RSA_verify", "RSA_verify_ASN1_OCTET_STRING", "RSA_verify_PKCS1_PSS", "RSA_verify_PKCS1_PSS_mgf1", "INVALID", "rsa_padding_mode", "sslv23", "oeap", "oaep", "x931", "rsa_pss_saltlen", "rsa_keygen_bits", "rsa_keygen_pubexp", "rsa_mgf1_md", "rsa_oaep_md", "rsa_oaep_label", "d2i_DSA_SIG", "DO_DSA_PRINT", "DSAparams_print", "DSAparams_print_fp", "DSA_BUILTIN_PARAMGEN2", "DSA_do_sign", "DSA_do_verify", "DSA_generate_key", "DSA_generate_parameters_ex", "DSA_new_method", "DSA_PARAM_DECODE", "DSA_print_fp", "DSA_PRIV_DECODE", "DSA_PRIV_ENCODE", "DSA_PUB_DECODE", "DSA_PUB_ENCODE", "DSA_sign", "DSA_sign_setup", "DSA_SIG_new", "DSA_SIG_PRINT", "DSA_verify", "i2d_DSA_SIG", "OLD_DSA_PRIV_DECODE", "PKEY_DSA_CTRL", "PKEY_DSA_CTRL_STR", "PKEY_DSA_KEYGEN", "SIG_CB", "dsa_paramgen_bits", "dsa_paramgen_q_bits", "dsa_paramgen_md", "ECDSA_SIG", "ECDSA_CHECK", "ECDSA_DATA_NEW_METHOD", "ECDSA_do_sign", "ECDSA_do_verify", "ECDSA_METHOD_new", "ECDSA_sign_setup", "int_dhx942_dh", "vparams", "int_dhvparams", "counter", "COMPUTE_KEY", "DHparams_print_fp", "DH_BUILTIN_GENPARAMS", "DH_CMS_DECRYPT", "DH_CMS_SET_PEERKEY", "DH_CMS_SET_SHARED_INFO", "DH_compute_key", "DH_generate_key", "DH_generate_parameters_ex", "DH_new_method", "DH_PARAM_DECODE", "DH_PRIV_DECODE", "DH_PRIV_ENCODE", "DH_PUB_DECODE", "DH_PUB_ENCODE", "DO_DH_PRINT", "GENERATE_KEY", "GENERATE_PARAMETERS", "PKEY_DH_DERIVE", "PKEY_DH_KEYGEN", "dh_paramgen_prime_len", "dh_rfc5114", "dh_paramgen_generator", "dh_paramgen_subprime_len", "dh_paramgen_type", "ECDH_CHECK", "ECDH_compute_key", "ECDH_DATA_new_method", "failure", "BEOS_BIND_FUNC", "BEOS_BIND_VAR", "BEOS_LOAD", "BEOS_NAME_CONVERTER", "BEOS_UNLOAD", "DLFCN_BIND_FUNC", "DLFCN_BIND_VAR", "DLFCN_LOAD", "DLFCN_MERGER", "DLFCN_NAME_CONVERTER", "DLFCN_UNLOAD", "DL_BIND_FUNC", "DL_BIND_VAR", "DL_LOAD", "DL_MERGER", "DL_NAME_CONVERTER", "DL_UNLOAD", "DSO_bind_func", "DSO_bind_var", "DSO_convert_filename", "DSO_ctrl", "DSO_free", "DSO_get_filename", "DSO_get_loaded_filename", "DSO_global_lookup", "DSO_load", "DSO_merge", "DSO_new_method", "DSO_pathbyaddr", "DSO_set_filename", "DSO_set_name_converter", "DSO_up_ref", "GLOBAL_LOOKUP_FUNC", "PATHBYADDR", "VMS_BIND_SYM", "VMS_LOAD", "VMS_MERGER", "VMS_UNLOAD", "WIN32_BIND_FUNC", "WIN32_BIND_VAR", "WIN32_GLOBALLOOKUP", "WIN32_GLOBALLOOKUP_FUNC", "WIN32_JOINER", "WIN32_LOAD", "WIN32_MERGER", "WIN32_NAME_CONVERTER", "WIN32_PATHBYADDR", "WIN32_SPLITTER", "WIN32_UNLOAD", "DYNAMIC_CTRL", "DYNAMIC_GET_DATA_CTX", "DYNAMIC_LOAD", "DYNAMIC_SET_DATA_CTX", "ENGINE_add", "ENGINE_by_id", "ENGINE_cmd_is_executable", "ENGINE_ctrl", "ENGINE_ctrl_cmd", "ENGINE_ctrl_cmd_string", "ENGINE_finish", "ENGINE_FREE_UTIL", "ENGINE_get_cipher", "ENGINE_GET_DEFAULT_TYPE", "ENGINE_get_digest", "ENGINE_get_next", "ENGINE_get_pkey_asn1_meth", "ENGINE_get_pkey_meth", "ENGINE_get_prev", "ENGINE_init", "ENGINE_LIST_ADD", "ENGINE_LIST_REMOVE", "ENGINE_load_private_key", "ENGINE_load_public_key", "ENGINE_load_ssl_client_cert", "ENGINE_new", "ENGINE_remove", "ENGINE_set_default_string", "ENGINE_SET_DEFAULT_TYPE", "ENGINE_set_id", "ENGINE_set_name", "ENGINE_TABLE_REGISTER", "ENGINE_UNLOAD_KEY", "ENGINE_UNLOCKED_FINISH", "ENGINE_up_ref", "INT_CTRL_HELPER", "INT_ENGINE_CONFIGURE", "INT_ENGINE_MODULE_INIT", "LOG_MESSAGE", "OPENSSL_ENGINES", "DIR_LOAD", "DIR_ADD", "LIST_ADD", "LOAD", "BUF_memdup", "BUF_MEM_grow", "BUF_MEM_grow_clean", "BUF_MEM_new", "BUF_strdup", "BUF_strndup", "keepalive", "WSAStartup", "ACPT_STATE", "BIO_accept", "BIO_BER_GET_HEADER", "BIO_callback_ctrl", "BIO_ctrl", "BIO_gethostbyname", "BIO_gets", "BIO_get_accept_socket", "BIO_get_host_ip", "BIO_get_port", "BIO_MAKE_PAIR", "BIO_new", "BIO_new_file", "BIO_new_mem_buf", "BIO_nread", "BIO_nread0", "BIO_nwrite", "BIO_nwrite0", "BIO_puts", "BIO_read", "BIO_sock_init", "BIO_write", "BUFFER_CTRL", "CONN_CTRL", "CONN_STATE", "DGRAM_SCTP_READ", "DGRAM_SCTP_WRITE", "FILE_CTRL", "FILE_READ", "LINEBUFFER_CTRL", "MEM_READ", "MEM_WRITE", "WSASTARTUP", "RAND_get_rand_method", "RAND_init_fips", "SSLEAY_RAND_BYTES", "ASN1_TIME", "X509_VAL", "X509_REQ", "req_info", "X509_REQ_INFO", "pubkey", "X509_CRL", "X509_CRL_INFO", "lastUpdate", "revoked", "X509_REVOKED", "revocationDate", "NETSCAPE_SPKI", "spkac", "sig_algor", "NETSCAPE_SPKAC", "NETSCAPE_CERT_SEQUENCE", "SEQUENCE", "ASCII", "UTF8", "BITLIST", "BOOL", "BOOLEAN", "INTEGER", "ENUM", "ENUMERATED", "OBJECT", "UTCTIME", "GENERALIZEDTIME", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIVERSALSTRING", "UNIV", "IA5STRING", "UTF8String", "BMPSTRING", "VISIBLESTRING", "VISIBLE", "PRINTABLESTRING", "PRINTABLE", "T61STRING", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "NUMERICSTRING", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORM", "FORMAT", "REAL", "UTF8STRING", "VIDEOTEXSTRING", "GRAPHICSTRING", "GENERALSTRING", "nombstr", "pkix", "utf8only", "SSL_CERT_DIR", "SSL_CERT_FILE", "BASIC_CONSTRAINTS", "digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly", "client", "server", "objsign", "sslCA", "emailCA", "objCA", "EXTENDED_KEY_USAGE", "WIN32", "PKCS12_AUTHSAFES", "PKCS12_SAFEBAGS", "PKCS12_SAFEBAG", "attrib", "PKCS12_BAGS", "PKCS12_MAC_DATA", "dinfo", "PKCS12", "authsafes", "CMS_SharedInfo", "keyInfo", "entityUInfo", "suppPubInfo", "CMS_Receipt", "signedContentIdentifier", "originatorSignatureValue", "CMS_ReceiptRequest", "receiptsFrom", "receiptsTo", "CMS_ReceiptsFrom", "CMS_Attributes_Verify", "CMS_ATTRIBUTES", "CMS_Attributes_Sign", "CMS_ContentInfo", "CMS_CompressedData", "compressionAlgorithm", "encapContentInfo", "CMS_AuthenticatedData", "originatorInfo", "recipientInfos", "macAlgorithm", "digestAlgorithm", "authAttrs", "unauthAttrs", "CMS_EncryptedData", "encryptedContentInfo", "unprotectedAttrs", "CMS_DigestedData", "CMS_EnvelopedData", "CMS_RecipientInfo", "CMS_OtherRecipientInfo", "oriType", "oriValue", "CMS_PasswordRecipientInfo", "keyDerivationAlgorithm", "keyEncryptionAlgorithm", "encryptedKey", "CMS_KEKRecipientInfo", "kekid", "CMS_KEKIdentifier", "keyIdentifier", "CMS_KeyAgreeRecipientInfo", "originator", "recipientEncryptedKeys", "CMS_OriginatorIdentifierOrKey", "CMS_OriginatorPublicKey", "CMS_RecipientEncryptedKey", "CMS_KeyAgreeRecipientIdentifier", "CMS_RecipientKeyIdentifier", "CMS_OtherKeyAttribute", "keyAttrId", "keyAttr", "CMS_KeyTransRecipientInfo", "CMS_EncryptedContentInfo", "contentEncryptionAlgorithm", "encryptedContent", "CMS_OriginatorInfo", "certificates", "crls", "CMS_SignedData", "digestAlgorithms", "signerInfos", "CMS_RevocationInfoChoice", "CMS_OtherRevocationInfoFormat", "otherRevInfoFormat", "otherRevInfo", "CMS_SignerInfo", "signedAttrs", "unsignedAttrs", "CMS_EncapsulatedContentInfo", "eContentType", "eContent", "CMS_SignerIdentifier", "CMS_CertificateChoices", "CMS_OtherCertificateFormat", "otherCertFormat", "otherCert", "CMS_IssuerAndSerialNumber", "boundary", "asn1", "deterministic", "overscan", "videoformat", "fullrange", "colorprim", "transfer", "colormatrix", "chromaloc", "frameref", "keyint", "scenecut", "bframes", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "analyse", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "merange", "mvrange", "subme", "bitrate", "qp_constant", "qpmin", "qpmax", "qpstep", "ratetol", "ipratio", "pbratio", "zones", "annexb", "filler", "stitchable", "touhou", "fake", "undef", "component", "secam", "SSE2", "SSE3", "BMI1", "uvDC", "uvAC", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "underflow", "overflow", "Gray", "I420", "IYUV", "YUYVw", "BGR0C", "J444Z", "I40AY", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "c608", "sac3", "alac", "twos", "lpcm", "ssmv", "v410", "cvid1", "mp2vY", "tiffb", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "DXDI", "text", "mp4a", "tx3g", "avc1k", "VP6F", "drac", "HEVC", "HFYUD", "IV32p", "IV41q", "VP62k", "Xxanr", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "S263W", "svq19", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TM20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "CLJRu", "LAGSl", "ZECO", "Y41P3", "CUVCF", "CFHD", "IART", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "s16p", "s32p", "fltp", "dblp", "IPBSipb", "fffffff", "x00000x", "p000x", "p00000x", "p000x", "p000x", "p000x", "ggen", "x264_slice_header_write", "x264_weighted_pred_init", "x264_encoder_close", "x264_lookahead_shift", "x264_macroblock_bipred_init", "x264_frame_pop", "x264_frame_shift", "x264_frame_push_unused", "x264_frame_push_blank_unused", "ARMv6", "NEON", "FastNeonMRC", "x264_mb_analyse_inter_p16x16", "x264_rc_analyse_slice", "x264_ratecontrol_new", "init_pass2", "x264_ratecontrol_start", "x264_macroblock_cache_rect", "ADIF", "RIFF", "WAVE", "data"], "debugstrings": ["H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "MPEG-4 part 2 Microsoft variant version 1", "MPEG-4 part 2 Microsoft variant version 2", "MPEG-4 part 2 Microsoft variant version 3", "H.263+ / H.263-1998 / H.263 version 2", "On2 VP6 (Flash version)", "On2 VP6 (Flash version, with alpha channel)", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "strictly conform to a older more strict version of the spec or reference software", "Audio sample format conversion failed\n", "libavcodec license: LGPL version 2.1 or later", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "libavfilter license: LGPL version 2.1 or later", "Color conversion not implemented for %s\n", "Impossible to create scale context for the conversion fmt:%s s:%dx%d -> fmt:%s s:%dx%d\n", "Timebase conversion is not exact\n", "Unsupported selective color file version %d, the settings might not be loaded properly\n", "Unsupported tag version. (>=%d)\n", "configurationVersion:                %u\n", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "version", "minor_version", "sidx version %u", "quicktime_version", "premiere_version", "Version %d", "version =%d, isom =%d\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "sid=0x%x sec_num=%d/%d version=%d\n", "Server version %d.%d.%d.%d\n", "RTMP protocol version mismatch\n", "Version of the Flash plugin used to run the SWF player.", "libavformat license: LGPL version 2.1 or later", "libavutil license: LGPL version 2.1 or later", "libswresample license: LGPL version 2.1 or later", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "unsupported bayer conversion\n", "libswscale license: LGPL version 2.1 or later", "No accelerated colorspace conversion found from %s to %s.\n", "protocol version", "bad protocol version number", "ssl ctx has no default ssl version", "tlsv1 alert protocol version", "unknown ssl version", "unsupported ssl version", "wrong ssl version", "wrong version number", "SSL_CTX_set_ssl_version", "s->version <= TLS_MAX_VERSION", "s->d1->w_msg_hdr.msg_len + ((s->version==DTLS1_BAD_VER)?3:DTLS1_CCS_HEADER_LENGTH) == (unsigned int)s->init_num", "documentVersion", "bad version number", "Suite B: certificate version invalid", "%*sVersion: %ld (0x%lX)", "\n%*sVersion   : ", "unsupported version", "version incompatibility", "%8sVersion: %lu (0x%lx)\n", "MIME-Version: 1.0%s", "FFmpeg version 0748dcd", "FFmpeg version 0748dcd", "FFmpeg version 0748dcd", "FFmpeg version 0748dcd", "GCC: (GNU) 4.8"], "localsymbols": [""], "dependencies": ["libz.so", "libc.so", "libm.so", "libdl.so"], "elfname": "libtbffmpeg.so"}