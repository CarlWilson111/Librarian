{"globalvars": ["avpriv_mjpeg_bits_dc_chrominance", "avpriv_mjpeg_bits_ac_chrominance", "avpriv_pix_fmt_bps_mov", "avpriv_mpeg4audio_sample_rates", "av_codec_ffversion", "avpriv_pix_fmt_bps_avi", "avpriv_mjpeg_bits_dc_luminance", "avpriv_mjpeg_val_ac_chrominance", "avpriv_ac3_channel_layout_tab", "avpriv_mpa_bitrate_tab", "avpriv_mjpeg_val_dc", "avpriv_mjpeg_bits_ac_luminance", "avpriv_mjpeg_val_ac_luminance", "avpriv_mpa_freq_tab"], "importedglobals": ["__sF"], "importedfunctions": ["av_frame_new_side_data", "av_malloc", "av_buffer_pool_init", "av_fast_malloc", "sqrtf", "fseek", "strcmp", "sem_post", "av_frame_set_pkt_size", "av_mul_q", "getpid", "av_pix_fmt_desc_get", "av_dynarray_add_nofree", "pthread_mutex_init", "av_get_colorspace_name", "av_dict_parse_string", "pthread_mutex_unlock", "strtol", "vsnprintf", "gettimeofday", "read", "memcmp", "pthread_cond_wait", "free", "av_match_list", "av_buffer_get_ref_count", "av_buffer_pool_uninit", "av_chroma_location_name", "av_opt_copy", "lrintf", "av_frame_get_colorspace", "sin", "av_get_planar_sample_fmt", "av_frame_get_buffer", "av_buffer_unref", "close", "pthread_mutex_destroy", "av_frame_set_pkt_duration", "av_frame_get_side_data", "dlerror", "av_reallocp_array", "av_frame_set_best_effort_timestamp", "av_mallocz", "malloc", "av_buffer_ref", "av_get_channel_layout_nb_channels", "av_frame_make_writable", "avpriv_set_systematic_pal2", "av_display_matrix_flip", "av_gcd", "av_get_bytes_per_sample", "av_get_pix_fmt_loss", "sscanf", "avpriv_report_missing_feature", "sem_wait", "av_get_picture_type_char", "av_image_fill_arrays", "av_bprint_init", "av_frame_set_qp_table", "pthread_cond_init", "av_free", "av_frame_copy_props", "sem_trywait", "fflush", "av_pix_fmt_count_planes", "strstr", "av_image_fill_linesizes", "av_freep", "av_strdup", "_Znwm", "av_buffer_make_writable", "pthread_cond_broadcast", "av_fifo_space", "av_reduce", "av_samples_get_buffer_size", "av_rescale_q", "av_opt_set_dict2", "av_buffer_realloc", "av_vlog", "pthread_cond_destroy", "log", "strncmp", "av_image_get_buffer_size", "av_opt_set_from_string", "av_rescale", "av_fifo_generic_read", "av_get_pix_fmt_name", "av_opt_next", "open", "av_image_fill_max_pixsteps", "strlen", "avpriv_request_sample", "av_buffer_alloc", "cos", "av_realloc_array", "av_opt_set_dict", "pthread_attr_init", "av_frame_alloc", "sem_timedwait", "av_realloc_f", "av_frame_is_writable", "av_buffer_default_free", "av_bprintf", "av_strlcatf", "av_frame_get_pkt_duration", "av_samples_fill_arrays", "fprintf", "pthread_cond_signal", "av_default_item_name", "av_get_channel_layout_string", "av_frame_copy", "pthread_mutex_lock", "av_frame_ref", "av_image_copy_to_buffer", "av_reallocp", "memmove", "av_color_range_name", "av_fifo_alloc", "av_strlcat", "av_color_space_name", "av_frame_set_pkt_pos", "av_frame_free", "localtime", "av_opt_set_defaults2", "av_frame_unref", "dlclose", "av_fifo_generic_write", "fwrite", "av_image_check_size2", "av_dict_get", "av_opt_set", "av_find_best_pix_fmt_of_2", "av_get_media_type_string", "sem_init", "pthread_attr_destroy", "sem_destroy", "av_dict_free", "av_get_bits_per_pixel", "snprintf", "av_display_rotation_set", "av_log_get_level", "memset", "av_frame_set_colorspace", "av_hwframe_get_buffer", "strchr", "av_frame_set_channels", "av_fast_realloc", "av_frame_move_ref", "av_buffer_pool_get", "av_color_transfer_name", "av_image_check_sar", "pthread_join", "dlopen", "av_get_sample_fmt_name", "av_image_fill_pointers", "pthread_once", "av_fifo_size", "av_samples_copy", "av_log", "av_image_alloc", "lrint", "av_opt_set_defaults", "av_stereo3d_create_side_data", "fclose", "av_pix_fmt_get_chroma_sub_sample", "av_memdup", "av_fifo_free", "av_buffer_allocz", "strncpy", "av_bprint_finalize", "av_fourcc_make_string", "av_frame_set_color_range", "pthread_self", "av_opt_free", "avpriv_frame_get_metadatap", "av_realloc", "av_frame_get_best_effort_timestamp", "av_color_primaries_name", "av_fast_mallocz", "av_image_check_size", "__errno", "_ZdlPv", "av_samples_set_silence", "fopen", "av_bprint_clear", "av_dict_set", "av_sample_fmt_is_planar", "av_frame_get_channels", "abort", "av_fifo_realloc2", "strftime", "log10", "av_buffer_create", "av_cpu_count", "dlsym", "memcpy", "av_dict_copy", "pthread_create", "av_frame_get_color_range", "usleep", "av_image_copy", "pthread_setname_np", "memchr", "av_strtok"], "exportedfunctions": ["audio_resample_close", "av_audio_convert_free", "av_parser_next", "av_codec_get_chroma_intra_matrix", "av_bsf_send_packet", "avcodec_parameters_alloc", "av_vorbis_parse_frame", "avcodec_profile_name", "avpriv_bprint_to_extradata", "av_bsf_list_append2", "av_codec_set_codec_descriptor", "avcodec_default_get_format", "av_free_packet", "av_log_missing_feature", "av_codec_is_decoder", "avpriv_get_raw_pix_fmt_tags", "av_mediacodec_alloc_context", "av_codec_set_chroma_intra_matrix", "av_vorbis_parse_reset", "av_bsf_get_by_name", "av_dv_frame_profile", "avpriv_toupper4", "avcodec_get_class", "av_rdft_init", "av_bsf_get_class", "avcodec_parameters_from_context", "avcodec_alloc_context3", "av_codec_set_seek_preroll", "avcodec_encode_subtitle", "av_bitstream_filter_next", "av_get_codec_tag_string", "avcodec_descriptor_get_by_name", "avcodec_find_decoder", "avcodec_get_name", "avcodec_send_frame", "av_copy_packet_side_data", "avpicture_get_size", "av_cpb_properties_alloc", "av_packet_pack_dictionary", "avcodec_copy_context", "avpriv_find_pix_fmt", "av_fft_permute", "av_picture_pad", "av_get_exact_bits_per_sample", "av_packet_unref", "avpriv_mpeg4audio_get_config", "avcodec_get_subtitle_rect_class", "av_jni_set_java_vm", "avcodec_align_dimensions", "avcodec_find_best_pix_fmt2", "avcodec_send_packet", "avcodec_flush_buffers", "av_fft_calc", "avcodec_open2", "av_codec_set_pkt_timebase", "av_bsf_list_alloc", "avcodec_enum_to_chroma_pos", "av_packet_unpack_dictionary", "av_resample_init", "avcodec_parameters_to_context", "avcodec_get_pix_fmt_loss", "avcodec_is_open", "avpriv_split_xiph_headers", "avcodec_encode_audio2", "av_audio_convert_alloc", "av_packet_rescale_ts", "avcodec_register_all", "avcodec_decode_audio4", "avcodec_default_execute", "av_init_packet", "av_codec_get_codec_descriptor", "avcodec_receive_frame", "av_log_ask_for_sample", "av_dirac_parse_sequence_header", "av_resample", "av_get_audio_frame_duration", "av_parser_parse2", "avcodec_find_decoder_by_name", "avcodec_dct_alloc", "av_bitstream_filter_close", "avcodec_pix_fmt_to_codec_tag", "av_packet_alloc", "av_hwaccel_next", "av_codec_get_seek_preroll", "av_register_bitstream_filter", "av_get_audio_frame_duration2", "avcodec_get_context_defaults3", "avcodec_get_chroma_sub_sample", "avcodec_version", "av_lockmgr_register", "av_packet_move_ref", "av_vorbis_parse_init", "av_fft_end", "avpicture_fill", "av_bsf_list_parse_str", "av_dup_packet", "av_new_packet", "av_bsf_alloc", "avcodec_receive_packet", "av_codec_get_max_lowres", "av_fast_padded_malloc", "av_grow_packet", "av_packet_merge_side_data", "avcodec_free_context", "av_vorbis_parse_frame_flags", "av_copy_packet", "av_packet_ref", "avpicture_alloc", "av_bsf_init", "avcodec_default_execute2", "av_packet_get_side_data", "avpriv_find_start_code", "av_get_pcm_codec", "av_register_codec_parser", "av_rdft_calc", "audio_resample", "avcodec_get_edge_width", "av_parser_init", "av_resample_compensate", "av_bitstream_filter_init", "avcodec_decode_subtitle2", "av_packet_shrink_side_data", "avcodec_fill_audio_frame", "av_packet_copy_props", "avcodec_dct_init", "av_bsf_receive_packet", "av_get_profile_name", "av_codec_next", "avcodec_license", "avcodec_find_best_pix_fmt_of_list", "av_packet_split_side_data", "av_d3d11va_alloc_context", "av_packet_free", "av_vorbis_parse_free", "av_bsf_get_null_filter", "av_codec_is_encoder", "av_bsf_list_append", "av_picture_crop", "av_packet_from_data", "av_bsf_free", "avsubtitle_free", "av_get_bits_per_sample", "av_audio_convert", "avpriv_put_string", "avpriv_align_put_bits", "av_bsf_list_finalize", "av_audio_resample_init", "av_parser_close", "av_shrink_packet", "av_codec_get_lowres", "av_fft_init", "avcodec_find_encoder", "avcodec_register", "avpriv_unlock_avformat", "av_register_hwaccel", "av_packet_add_side_data", "avcodec_decode_video2", "avpriv_h264_has_num_reorder_frames", "av_parser_change", "av_qsv_alloc_context", "av_codec_get_codec_properties", "avpicture_free", "avpicture_layout", "avcodec_descriptor_get", "av_packet_new_side_data", "avpriv_aac_parse_header", "avpriv_copy_bits", "avcodec_close", "av_mediacodec_default_init", "av_rdft_end", "av_codec_set_lowres", "av_jni_get_java_vm", "avcodec_default_get_buffer2", "avcodec_parameters_copy", "avpriv_init_elbg", "av_bitstream_filter_filter", "avpriv_copy_pce_data", "avcodec_align_dimensions2", "avcodec_encode_video2", "av_resample_close", "avcodec_find_encoder_by_name", "av_bsf_next", "av_dv_codec_profile2", "avcodec_get_frame_class", "avcodec_chroma_pos_to_enum", "av_packet_free_side_data", "av_xiphlacing", "avpriv_lock_avformat", "avcodec_dct_get_class", "av_mediacodec_default_free", "av_picture_copy", "avcodec_parameters_free", "av_mediacodec_release_buffer", "av_codec_get_pkt_timebase", "av_packet_clone", "avcodec_configuration", "avcodec_get_type", "avcodec_descriptor_next", "av_packet_side_data_name", "avcodec_find_best_pix_fmt_of_2", "av_fast_padded_mallocz", "avpriv_do_elbg", "avcodec_set_dimensions", "avcodec_string", "av_bsf_list_free", "avpriv_codec_get_cap_skip_frame_fill_param", "av_dv_codec_profile"], "allstrings": ["Internal error, put_bits buffer too small\n", "Error parsing AudioSpecificConfig extradata!\n", "Assertion %s failed at %s:%d\n", "s->buf_ptr < s->buf_end", "libavcodec/put_bits.h", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "Input packet too small\n", "aac_adtstoasc", "AVDCT", "DCT algorithm", "autoselect a good one", "fastint", "fast integer (experimental / for debugging)", "accurate integer", "experimental / for debugging", "altivec", "faan", "floating point AAN DCT (experimental / for debugging)", "select IDCT implementation", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "floating point AAN IDCT (experimental / for debugging)", "simpleauto", "bits_per_sample", "(unsigned)pkt->size <= 2147483647 - 32", "libavcodec/avpacket.c", "Palette", "New Extradata", "Param Change", "H263 MB Info", "Replay Gain", "Display Matrix", "Stereo 3D", "Audio Service Type", "Skip Samples", "JP Dual Mono", "Strings Metadata", "Subtitle Position", "Matroska BlockAdditional", "WebVTT ID", "WebVTT Settings", "Metadata Update", "MPEGTS Stream ID", "Mastering display metadata", "Spherical Mapping", "size<=2147483647 - 5 && p - pkt->data >= size", "p-pkt->data == pkt->size", "incorrect codes\n", "length <= put_bits_left(pb)", "libavcodec/bitstream.c", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code %x for %d in init_vlc\n", "needed %d had %d\n", "ret >= 0", "private_spspps_buf", "null", "bsf_list(", "unknown", "Codec '%s' (%d) is not supported by the bitstream filter '%s'. Supported codecs are: ", "%s (%d) ", "pkt->data || pkt->side_data", "libavcodec/bsf.c", "A non-NULL packet sent after an EOF.\n", "bsf_list", "AVBSFContext", "chomp", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpegb", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "8bps", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "012v", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "tdsc", "vc1image", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "aac_latm", "qdmc", "celt", "g723_1", "dss_sp", "g729", "8svx_exp", "8svx_fib", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "application/octet-stream", "application/vnd.ms-opentype", "application/x-truetype-font", "application/x-font", "image/png", "image/x-xwindowdump", "image/x-xpixmap", "image/x-xbitmap", "image/webp", "image/tiff", "image/x-targa", "image/x-tga", "image/x-pcx", "image/x-portable-pixmap", "image/gif", "image/jp2", "image/x-ms-bmp", "image/jpeg", "buf_size >= 0", "libavcodec/bytestream.h", "dca_core", "dump_extra", "dump_extradata bsf", "When do dump extradata", "s->quarter_sample", "libavcodec/error_resilience.c", "guess_dc() is out of memory\n", "internal error, slice end before start\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "next_blocklist_length <= mb_height * mb_width", "extract_extradata", "remove", "remove the extradata from the bitstream", "Bad picture format\n", "%c esc_type:%d, qp:%d num:%d\n", "\u000b\r\r\r", "L263", "S263", "Slice mismatch at MB: %d\n", "Error at MB: %d\n", "discarding %d junk bits at end, next would be %X\n", "overreading %d bits\n", "slice end not reached but screenspace end (%d left %06X, score= %d)\n", "this codec does not support truncated bitstreams\n", "Discarding excessive bitstream in packed xvid\n", "Reverting picture dimensions change due to header decoding failure\n", "header damaged\n", "format change not supported\n", "GEOV", "GEOX", "libavcodec/h2645_parse.c", "TRAIL_N", "TRAIL_R", "STSA_N", "STSA_R", "RADL_N", "RADL_R", "RASL_N", "RASL_R", "BLA_W_LP", "BLA_W_RADL", "BLA_N_LP", "IDR_W_RADL", "IDR_N_LP", "CRA_NUT", "EOS_NUT", "EOB_NUT", "FD_NUT", "SEI_PREFIX", "SEI_SUFFIX", "Invalid NAL unit size (%d > %d).\n", "Exceeded next NALFF position, re-syncing.\n", "No start code is found.\n", "NALFF: Consumed only %d bytes instead of %d\n", "nal_unit_type: %d(%s), nuh_layer_id: %d, temporal_id: %d\n", "nal_unit_type: %d, nal_ref_idc: %d\n", "Invalid NAL unit %d, skipping.\n", "overflow in decode_cabac_mb_mvd\n", "Reference %d >= %d\n", "gray chroma\n", "cabac decode of qscale diff failed at %d %d\n", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "offset == (sizeof(coeff_token_vlc_tables) / sizeof((coeff_token_vlc_tables)[0]))", "libavcodec/h264_cavlc.c", "mb_skip_run %d is invalid\n", "mb_type %d in %c slice too large at %d %d\n", "Not enough data for an intra PCM block.\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "dquant out of range (%d) at %d %d\n", "pocdiff overflow\n", "pocdiff0 overflow\n", "cur->mbaff == (h)->mb_aff_frame", "libavcodec/h264_direct.c", "co located POCs unavailable\n", "SPS not present in the stream, nor in AVCC, stream may be unreadable\n", "PPS not present in the stream, nor in AVCC, stream may be unreadable\n", "The input looks like it is Annex B already\n", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "Invalid extradata size: %d\n", "h264_mp4toannexb", "Ignoring NAL type %d in extradata\n", "SPS decoding failure, trying again after escaping the NAL\n", "luma_log2_weight_denom %d is out of range\n", "chroma_log2_weight_denom %d is out of range\n", "Out of range weight\n", "top block unavailable for requested intra mode %d\n", "left block unavailable for requested intra4x4 mode %d\n", "out of range intra chroma pred mode\n", "top block unavailable for requested intra mode\n", "left block unavailable for requested intra mode\n", "reference overflow %u > %u or %u > %u\n", "avcC %d too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "AVC-parser: nal size %d remaining %d\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count %d overflow\n", "illegal memory management control operation %d\n", "Q264", "pps_id %u out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "missing picture in access unit with size %d\n", "!dst->f->buf[0]", "libavcodec/h264_picture.c", "src->f->buf[0]", "src->tf.f == src->f", "hardware accelerator failed to decode picture\n", "Gray", "delta scale %d is invalid\n", "cpb_count %d invalid\n", "PIC-AFF", "MB-AFF", "Truncating likely oversized SPS\n", "sps_id %u out of range\n", "chroma_format_idc %u", "separate color planes are not supported\n", "Different chroma and luma bit depth", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %d\n", "illegal POC type %d\n", "too many reference frames %d\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%d r:%d t:%d b:%d\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n", "Clipping illegal num_reorder_frames %d\n", "Overread %s by %d bits\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %d/%d b%d reo:%d\n", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "8x8DCT", "Truncating likely oversized PPS (%zu > %zu)\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d", "FMO not supported\n", "reference overflow (pps)\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n", "short term list:\n", "%u fn:%d poc:%d %p\n", "long term list:\n", "remove short %d count %d\n", "%d %d %p\n", "index < def_len", "libavcodec/h264_refs.c", "len <= 32", "Discarding mismatching reference\n", "abs_diff_pic_num overflow\n", "long_term_pic_idx overflow\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(sl->ref_list[list][index].parent->f->buf[0]) > 0", "reference picture missing during reorder\n", "reference count overflow\n", "illegal modification_of_pic_nums_idc %u\n", "no mmco here\n", "mmco:%d %d %d\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to short and long at the same time\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "illegal short term buffer state detected\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "illegal long ref in memory management control operation %d\n", "SEI type %d size %d truncated at %d\n", "SPS unavailable in decode_picture_timing\n", "ct_type:%X pic_struct:%d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "non-existing SPS %d referenced in buffering period\n", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "\t\t\u000b\r", "Could not allocate memory\n", "VDPAU decoding does not support video colorspace.\n", "Unsupported bit depth %d\n", "context_init() failed.\n", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3)", "libavcodec/h264_slice.c", "Slice overlaps with next at %d\n", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream %td\n", "error while decoding MB %d %d\n", "Attempt to start a frame outside SETUP state\n", "!pic->f->data[0]", "!pic->hwaccel_picture_private", "no frame buffer available\n", "h264_slice_header_init() failed", "context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height", " fix", " IDR", "TEMP", "SPAT", "!h->setup_finished", "slice type %d too large at %d\n", "A non-intra slice in an IDR NAL unit.\n", "Frame num change from %d to %d\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "cabac_init_idc %u overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "Too many fields\n", "Broken frame packetizing\n", "sl == h->slice_ctx", "PPS changed between slices\n", "SPS changed in the middle of the frame\n", "sps->crop_right + sps->crop_left < (unsigned)h->width", "sps->crop_top + sps->crop_bottom < (unsigned)h->height", "changing width %d -> %d / height %d -> %d on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "h->cur_pic_ptr", "h->cur_pic_ptr->f->buf[0]", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "no picture %s\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on slice %d\n", "Invalid mix of IDR and non-IDR slices\n", "first_mb_in_slice overflow\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", "Reference invalid\n", "Duplicating field %d to fill missing\n", "stereo_mode", "Error splitting the input into NAL units.\n", "Invalid zero-sized VCL NAL unit\n", "Invalid inter IDR frame\n", "invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n", "data partitioning", "Green Metadata Info SEI message\n", "  green_metadata_type: %d\n", "  green_metadata_period_type: %d\n", "  green_metadata_num_seconds: %d\n", "  green_metadata_num_pictures: %d\n", "  SEI GREEN Complexity Metrics: %f %f %f %f\n", "  xsd_metric_type: %d\n", "  xsd_metric_value: %f\n", "SPS decoding failure, trying again with the complete NAL\n", "Unknown NAL code: %d (%d bits)\n", "decode_slice_header error\n", "no frame!\n", "pict->buf[0] || !*got_frame", "libavcodec/h264dec.c", "Cannot allocate memory.\n", "pthread_once has failed.", "Error resilience with slice threads is enabled. It is unsafe and unsupported and may crash. Use it at your own risk\n", "H264 Decoder", "is_avc", "is avc", "nal_length_size", "enable_er", "Enable error resilience on damaged frames (unsafe)", "libavcodec/h264dsp.c", "Invalid NAL unit type in extradata: %d\n", "No parameter sets in the extradata\n", "hevc_mp4toannexb", "Internal error, IDCT permutation not set\n", "desc", "libavcodec/imgconvert.c", "imxdump", "after picture_number", "Bad H.263 id\n", "Intel H.263 free format not supported\n", "Wrong Intel H.263 format\n", "Bad value for reserved field\n", "Invalid marker\n", "in dimensions", "Invalid aspect ratio.\n", "illegal dc %d at %d %d\n", "illegal ac vlc code at %dx%d\n", "run overflow at %dx%d i:%d\n", "Huge DMV", " UMV", " LONG", " AIC", " AIV", " LOOP", "qp:%d %c size:%d rnd:%d%s%s%s%s%s%s%s%s%s %d/%d\n", "before MBA", "after SQUANT", "after MBA", "b mb_type damaged at %d %d\n", "b cbpy damaged at %d %d\n", "I cbpc damaged at %d %d\n", "I cbpy damaged at %d %d\n", "U263", "Header looks like RTP instead of H.263\n", "in PTYPE", "H.263 SAC not supported\n", "Syntax-based Arithmetic Coding (SAC) not supported\n", "Reference Picture Selection not supported\n", "Independent Segment Decoding not supported\n", "Bad UFEP type (%d)\n", "zero framerate\n", "rectangular slices not supported\n", "unordered slices not supported\n", "SEPB1", "SEPB2", " %5d", "ZYGO", "Incorrect library version loaded\n", "DecodeFrame2 failed\n", "No frame produced\n", "Unable to allocate buffer\n", "Unable to create decoder\n", "Initialize failed\n", "libopenh264", "input is truncated\n", "input is not MJPEG\n", "mjpeg2jpeg", "mjpg", "bitstream already formatted\n", "could not find SOS marker in bitstream\n", "mjpegadump", "max_length > 0", "libavcodec/mjpegenc_huffman.c", "nval <= max_nval", "mov2textsub", "text2movsub", "FFCMP3 0.0", "Extradata invalid %d\n", "Could not find bitrate_index.\n", "mp3decomp", "Updating DivX userdata (remove trailing 'p') in extradata.\n", "Found %d VOP startcode(s) in this packet.\n", "Missing one N-VOP packet, discarding one B-frame.\n", "Found %d VOP headers in one packet, only unpacking one.\n", "Skipping N-VOP.\n", "Updating DivX userdata (remove trailing 'p').\n", "mpeg4_unpack_bframes", "Invalid sample rate %d\n", "Failed to parse extradata\n", "DivX%dBuild%d%c", "DivX%db%d%c", "FFmpe%*[^b]b%d", "FFmpeg v%d.%d.%d / libavcodec build: %d", "Lavc%d.%d.%d", "ffmpeg", "Unknown Lavc version string encountered, %d.%d.%d; clamping sub-version values to 8-bits.\n", "XviD%d", "after new_pred", "before sprite_trajectory", "after sprite_trajectory", "Too large sprite shift, delta or offset", "Overflow on sprite points", "dc<0 at %dx%d\n", "dc overflow at %dx%d\n", "illegal dc vlc\n", "dc marker bit missing\n", "1. marker bit missing in rvlc esc\n", "2. marker bit missing in rvlc esc\n", "reverse esc missing\n", "1. marker bit missing in 3. esc\n", "2. marker bit missing in 3. esc\n", "|level| overflow in 3. esc, qp=%d\n", "ac-tex damaged at %d %d\n", "mcbpc damaged at %d %d\n", "P cbpy damaged at %d %d\n", "illegal MB_type\n", "texture corrupted at %d %d %d\n", "marker does not match f_code\n", "illegal mb_num in video packet (%d %d) \n", "before time_increment in video packed header", "before vop_coding_type in video packed header", "untested\n", "Error, video packet header damaged (f_code=0)\n", "Error, video packet header damaged (b_code=0)\n", "mcbpc corrupted at %d %d\n", "DC corrupted at %d %d\n", "slice below monitor ...\n", "marker missing after first I partition at %d %d\n", "marker missing after first P partition at %d %d\n", "I cbpy corrupted at %d %d\n", "P cbpy corrupted at %d %d\n", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "scalability ", "qpel ", "partition ", "rvlc ", " VOLC", "frame skip %d\n", "startcode: %3X ", "Video Object Start", "Video Object Layer Start", "Reserved", "FGS bp start", "Visual Object Seq Start", "Visual Object Seq End", "User Data", "Group of VOP start", "Video Session Error", "Visual Object Start", "Video Object Plane start", "slice start", "extension start", "fgs start", "FBA Object start", "FBA Object Plane start", "Mesh Object start", "Mesh Object Plane start", "Still Texture Object start", "Texture Spatial Layer start", "Texture SNR Layer start", "Texture Tile start", "Texture Shape Layer start", "stuffing start", "System start", "Ignoring multiple VOL headers\n", "illegal chroma format\n", "after first_half_bitrate", "after latter_half_bitrate", "after first_half_vbv_buffer_size", "after first_half_vbv_occupancy", "after latter_half_vbv_occupancy", "only rectangular vol supported\n", "Gray shape not supported\n", "before time_increment_resolution", "framerate==0\n", "before fixed_vop_rate", "before width", "before height", "after height", "MPEG-4 OBMC not supported (very likely buggy encoder)\n", "Static Sprites not supported\n", "after sprite_width", "after sprite_height", "after sprite_left", "after sprite_top", "%d sprite_warping_points\n", "N-bit not supported\n", "quant precision %d\n", "insufficient data for custom matrix\n", "VOL Header truncated\n", "in complexity estimation part 1", "in complexity estimation part 2", "Invalid Complexity estimation method %d\n", "new pred not supported\n", "reduced resolution VOP not supported\n", "scalability not supported\n", "tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d, low_delay:%d  %s%s%s%s\n", "GOP header invalid\n", "in gop_header", "low_delay flag set incorrectly, clearing it\n", "before time_increment", "time_increment_bits %d is invalid in relation to the current bitstream, this is likely caused by a missing VOL header\n", "time_increment_bits set to %d bits, based on bitstream analysis\n", "before vop_coded", "vop not coded\n", "after width", "after hor_spat_ref", "sprite_brightness_change not supported\n", "static sprite not supported\n", "Error, header damaged or not MPEG-4 header (qscale=0)\n", "Error, header damaged or not MPEG-4 header (f_code=0)\n", "Error, header damaged or not MPEG4 header (b_code=0)\n", "qp:%d fc:%d,%d %s size:%d pro:%d alt:%d top:%d %spel part:%d resync:%d w:%d a:%d rnd:%d vot:%d%s dc:%d ce:%d/%d/%d time:%ld tincr:%d\n", "load backward shape isn't supported\n", "looks like this file was encoded with (divx4/(old)xvid/opendivx) -> forcing low_delay flag\n", "WV1F", "QMP4", "MP4S", "Video uses a non-standard and wasteful way to store B-frames ('packed B-frames'). Consider using the mpeg4_unpack_bframes bitstream filter without encoding but stream copy to fix it.\n", "MPEG4 Video Decoder", "1/4 subpel MC", "divx_packed", "divx style packed b frames", "Interlaced error concealment is not fully implemented\n", "Image too small, temporary buffers cannot function\n", "libavcodec/mpegpicture.c", "!pic->f->buf[0]", "get_buffer() failed (%d %p)\n", "alloc_frame_buffer() failed (hwaccel private data allocation)\n", "get_buffer() failed (stride changed)\n", "get_buffer() failed (uv stride mismatch)\n", "get_buffer() failed to allocate context scratch buffers.\n", "Error allocating a picture.\n", "Internal error, picture buffer overflow\n", "decoding to AV_PIX_FMT_NONE is not supported.\n", "too many threads/slices (%d), reducing to %d\n", "s != s1", "libavcodec/mpegvideo.c", "!s->picture || s->picture != s1->picture", "Failed to allocate context scratch buffers.\n", "Context scratch buffers could not be allocated due to unknown size.\n", "allocating dummy last picture for B frame\n", "warning: first frame is no keyframe\n", "allocate dummy last picture for field based first keyframe\n", "s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr && s->last_picture_ptr->f->buf[0])", "Adding %d MVs info to frame %d\n", "New frame, type: %c\n", "ref->size >= offset + s->mb_stride * ((f->height+15)/16)", "DCT coeffs of MB at %dx%d:\n", "NULL", "libavcodec/options.c", "Tried to copy AVCodecContext %p into already-initialized %p\n", "dest->subtitle_header_size == src->subtitle_header_size", "AVSubtitleRect", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "sample_rate", "AVCodecContext", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "use 1/4-pel motion compensation", "loop", "use loop filter", "use fixed qscale", "use gmc", "always try a mb with mv=<0,0>", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "pass2", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "psnr", "error[?] variables will be set during encoding", "Input bitstream might be randomly truncated", "normalize adaptive quantization", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "bitexact", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "cgop", "closed GOP", "output_corrupt", "Output even potentially corrupted frames", "allow non-spec-compliant speedup tricks", "flags2", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "export_mvs", "export motion vectors through frame side data", "skip_manual", "do not skip samples and export skip information as frame side data", "ass_ro_flush_noop", "do not reset ASS ReadOrder field on flush", "me_method", "set motion estimation method", "zero", "zero motion estimation (fastest)", "full", "full motion estimation (slowest)", "epzs", "EPZS motion estimation", "esa motion estimation (alias for full)", "tesa", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter", "iter motion estimation", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "cutoff", "set cutoff bandwidth", "frame_size", "frame_number", "qcomp", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "qblur", "video quantizer scale blur (VBR)", "qmin", "minimum video quantizer scale (VBR)", "qmax", "maximum video quantizer scale (VBR)", "qdiff", "maximum difference between the quantizer scales (VBR)", "set maximum number of B-frames between non-B-frames", "b_qfactor", "QP factor between P- and B-frames", "rc_strategy", "ratecontrol method", "b_strategy", "strategy to choose between I/P/B-frames", "RTP payload size in bytes", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "work around not autodetected encoder bugs", "autodetect", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "iedge", "strict", "how strictly to follow the standards", "very", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "normal", "unofficial", "allow unofficial extensions", "experimental", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "err_detect", "set error detection flags", "crccheck", "verify embedded CRCs", "detect bitstream specification deviations", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "ignore_err", "ignore errors", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "mpeg_quant", "use MPEG quantizers instead of H.263", "qsquish", "deprecated, use encoder private options instead", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maxrate", "maximum bitrate (in bits/s). Used for VBV together with bufsize.", "minrate", "minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "bufsize", "set ratecontrol buffer size (in bits)", "rc_buf_aggressivity", "i_qfactor", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "rc_init_cplx", "fast integer", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "deprecated, for compatibility only", "floating point AAN IDCT", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "deblock", "use strong deblock filter for damaged MBs", "favor_inter", "favor predicting from the previous frame", "bits_per_coded_sample", "prediction method", "plane", "median", "aspect", "sample aspect ratio", "debug", "print specific debug info", "pict", "picture info", "rate control", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "green_metadata", "skip", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "buffers", "picture buffer allocations", "thread_ops", "threading operations", "nomc", "skip motion compensation", "vismv", "visualize motion vectors (MVs) (deprecated)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "cmp_func", "subcmp", "sub-pel ME compare function", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "pre motion estimation", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast", "sum of squared errors", "satd", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "vsad", "sum of absolute vertical differences", "vsse", "sum of squared vertical differences", "nsse", "noise preserving sum of squared differences", "dctmax", "msad", "sum of absolute differences, median predicted", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "subq", "sub-pel motion estimation quality", "dtg_active_format", "me_range", "limit motion vectors range (1023 for DivX player)", "ibias", "intra quant bias", "pbias", "inter quant bias", "global_quality", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate", "deflate-based coder", "context", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp", "use fewest bits", "use best rate distortion", "stream_codec_tag", "sc_threshold", "scene change threshold", "noise reduction", "rc_init_occupancy", "number of bits which should be loaded into the rc buffer before decoding starts", "set the number of threads", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "profile", "aac_main", "aac_ssr", "aac_ltp", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "skip_threshold", "frame skip threshold", "skip_factor", "frame skip factor", "skip_exp", "frame skip exponent", "skipcmp", "frame skip compare function", "border_mask", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "mepc", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "none", "discard no frame", "default", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "nointra", "discard all frames except I frames", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "brd_scale", "downscale frames for dynamic B-frame decision", "keyint_min", "minimum interval between IDR-frames", "refs", "reference frames to consider for motion compensation", "chromaoffset", "chroma QP offset from luma", "trellis", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "b_sensitivity", "adjust sensitivity of b_frame_strategy 1", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color primaries", "color_primaries_type", "bt709", "BT.709", "Unspecified", "bt470m", "BT.470 M", "bt470bg", "BT.470 BG", "smpte170m", "SMPTE 170 M", "smpte240m", "SMPTE 240 M", "film", "Film", "bt2020", "BT.2020", "smpte428", "SMPTE 428-1", "smpte428_1", "smpte431", "SMPTE 431-2", "smpte432", "SMPTE 422-1", "jedec-p22", "JEDEC P22", "unspecified", "color_trc", "color transfer characteristics", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log100", "log316", "Log square root", "iec61966-2-4", "IEC 61966-2-4", "bt1361e", "BT.1361", "iec61966-2-1", "IEC 61966-2-1", "bt2020-10", "BT.2020 - 10 bit", "bt2020-12", "BT.2020 - 12 bit", "smpte2084", "SMPTE 2084", "arib-std-b67", "ARIB STD-B67", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "color space", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "BT.2020 NCL", "bt2020c", "BT.2020 CL", "smpte2085", "SMPTE 2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color range", "color_range_type", "MPEG (219*2^(n-8))", "JPEG (2^n-1)", "chroma_sample_location", "chroma sample location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "Top-left", "bottomleft", "Bottom-left", "Bottom", "log_level_offset", "set the log level offset", "slices", "set the number of slices, used in parallelized encoding", "thread_type", "select multithreading type", "slice", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Dialogue", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "sub_text_format", "set decoded text subtitle format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "dump_separator", "set information dump field separator", "codec_whitelist", "List of decoders that are allowed to be used", "pixel_format", "set pixel format", "video_size", "set video size", "max_pixels", "Maximum number of pixels", "index > -0x20000000", "libavcodec/parser.c", "Failed to reallocate parser buffer to %d\n", "Application has requested %d threads. Using a thread count greater than %d is not recommended.\n", "fctx->async_lock", "libavcodec/pthread_frame.c", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "av_packet_ref() failed in submit_packet()\n", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "!p->hwaccel_serializing", "A frame threaded decoder did not free the frame on failure. This is a bug, please report it.\n", "Final thread update failed\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "p->thread_count == avctx->thread_count", "libavcodec/pthread_slice.c", "I420", "IYUV", "yv12", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "YUYVw", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "\fRGBt", "RBA@v", "BRA@s", "@RBAu", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "Y3\u000b\tE", "\t\u000b3YP", "Y3\n\tO", "\t\n3YL", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "XYZ$o", "DVOO.", "L555,", "L565+", "b16g)", "b48rs", "I422!", "I444\f", "J420\r", "J422\"", "J444Z", "YUVA#", "I40AY", "RGB2.", "RV15,", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "I4AB:", "I4FL;", "I4FB,", "remove_extra", "remove_extradata", "audioresample", "Resampling with input channels greater than %d is unsupported.\n", "Unsupported audio resampling. Allowed output channels for %d input channel%s", "Can't allocate memory for resample context.\n", "Cannot convert %s sample format to s16 sample format\n", "Cannot convert s16 sample format to %s sample format\n", "Could not allocate buffer\n", "Audio sample format conversion failed\n", "ReSampleContext", "libavcodec/rl.c", "FFmpeg version 3.3.9", "9:59:59.99,", "%d:%02d:%02d.%02d,", "val || !min_size", "./libavutil/mem_internal.h", "Failed to set dimensions %d %d\n", "This decoder does not support parameter changes, but PARAM_CHANGE side data was sent to it.\n", "Invalid channel count", "Invalid sample rate", "PARAM_CHANGE side data too small.\n", "Error applying parameter changes.\n", "ignoring invalid SAR: %d/%d\n", "desc->flags & (1 << 4)", "libavcodec/utils.c", "pic->data[*]!=NULL in avcodec_default_get_buffer\n", "Unable to get pixel format descriptor for format %s\n", "default_get_buffer called on pic %p\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "ignoring invalid SAR: %u/%u\n", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "video_get_buffer: image parameters invalid\n", "pic->data[*]!=NULL in get_buffer_internal\n", "frame->data[i]", "Buffer returned by get_buffer2() did not zero unused plane pointers\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "reget_buffer() failed\n", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %ld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %ld)\n", "Failed to allocate packet of size %ld\n", "This encoder requires using the avcodec_send_frame() API.\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "avctx->codec->encode2", "Provided packet is too small, needs to be %d\n", "AVFrame.format is not set\n", "AVFrame.width or height is not set\n", "ret <= 0", "!avctx->internal->buffer_pkt->data || avctx->internal->buffer_pkt->buf", "start_display_time must be 0.\n", "Invalid media type for video\n", "This decoder requires using the avcodec_send_packet() API.\n", "!picture->extended_data || picture->extended_data == picture->data", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "ret <= tmp.size", "skip %d / discard %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "ret <= avpkt->size", "Multiple frames in a packet.\n", "!avctx->internal->buffer_frame->buf[0]", "Invalid media type for subtitles\n", "requesting subtitles recoding without iconv", "Dialogue: ", "Dialogue: %ld,", "%s\r\n", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "unknown_codec", "Codec 0x%x is not in the full list.\n", "[%d]", "--prefix=/Users/wangjianjun/Alan/ffmpeg/ffmpegBuild/libs/ffmpeg-open264-merge/arm64-v8a --arch=arch-arm64 --target-os=android --cc=/Users/wangjianjun/AndroidDev/android-ndk-r15c/toolchains/aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin/aarch64-linux-android-gcc --cross-prefix=/Users/wangjianjun/AndroidDev/android-ndk-r15c/toolchains/aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin/aarch64-linux-android- --nm=/Users/wangjianjun/AndroidDev/android-ndk-r15c/toolchains/aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin/aarch64-linux-android-nm --sysroot=/Users/wangjianjun/AndroidDev/android-ndk-r15c/platforms/android-21/arch-arm64 --extra-cflags='-I/Users/wangjianjun/Alan/ffmpeg/ffmpegBuild/libs/openh264/arm64-v8a/include ' --extra-ldflags='-L/Users/wangjianjun/Alan/ffmpeg/ffmpegBuild/libs/openh264/arm64-v8a/lib ' --enable-cross-compile --disable-runtime-cpudetect --enable-asm --enable-neon --enable-gpl --enable-nonfree --enable-shared --disable-static --enable-small --enable-libopenh264 --enable-neon --enable-yasm --disable-encoders --disable-decoders --enable-decoder=libopenh264 --enable-decoder=h264 --enable-decoder=mpeg4 --disable-demuxers --enable-demuxer=h264 --enable-demuxer=mov --disable-muxers --disable-parsers --enable-parser=h264 --disable-protocols --enable-protocol=file --disable-debug --disable-doc --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --disable-postproc --enable-avfilter --enable-avdevice --disable-symver", "libavcodec license: nonfree and unredistributable", "top first", "bottom first", "top coded first (swapped)", "bottom coded first (swapped)", "%s: %s", " (%s)", ", %d reference frame%s", " (%s / 0x%04X)", "%d bpc, ", "%s/%s/%s, ", " (%dx%d)", " [SAR %d:%d DAR %d:%d]", ", %d/%d", ", q=%d-%d", ", Closed Captions", ", lossless", "%d Hz, ", ", %s", " (%d bit)", ", delay %d", ", padding %d", ", %dx%d", ", pass 1", ", pass 2", ", %ld kb/s", ", max. %ld kb/s", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "n >= 1", "Format returned from get_buffer() does not match the format of provided AVHWFramesContext\n", "Ignoring experimental hwaccel: %s\n", "choices[n] != AV_PIX_FMT_NONE", "Could not find an AVHWAccel for the pixel format: %s", "Insufficient thread locking. At least %d threads are calling avcodec_open2() at the same time right now.\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "!dst->progress", "encoder", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Codec (%s) not on whitelist '%s'\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The maximum value for lowres supported by the decoder is %d\n", "The 'vismv' option is deprecated, see the codecview filter instead.\n", "The encoder timebase is not set.\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Specified sample rate %d is not supported\n", "Channel layout not specified\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "Specified number of channels %d is not supported\n", "Specified bit depth %d not possible with the specified pixel formats depth %d\n", "dimensions not set\n", "Bitrate %ld is extremely low, maybe you mean %ldk\n", "ticks_per_frame %d too large for the timebase %d/%d.", "Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n", "Mismatching AVCodecContext.sw_pix_fmt (%s) and AVHWFramesContext.sw_format (%s)\n", "gray decoding requested but not enabled at configuration time\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "*(const AVClass **)avctx->priv_data == codec->priv_class", "Specified channel layout '%s' is not supported\n", "p <= end", "Invalid packet\n", "Invalid mode in packet\n", "Extradata corrupt.\n", "Id header is too short\n", "Wrong packet type in Id header\n", "Invalid packet signature in Id header\n", "Invalid framing bit in Id header\n", "Setup header is too short\n", "Wrong packet type in Setup header\n", "Invalid packet signature in Setup header\n", "Out of memory\n", "Invalid Setup header\n", "%d modes (either a false positive or a sample from an unknown encoder)", "Unsupported mode count: %d\n", "Vorbis parser", "Mixing of superframe syntax and naked VP9 frames not supported", "Too many invisible frames", "s->n_cache > 0", "libavcodec/vp9_superframe_bsf.c", "ptr == &out->data[out->size]", "vp9_superframe", "ENCODER_OPTION_INTER_SPATIAL_PRED, this feature not supported at present.", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_DATAFORMAT, m_iCspInternal= 0x%x", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_IDR_INTERVAL, uiIntraPeriod= %d", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_EXT", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_BASE", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_FRAME_RATE, fMaxFrameRate = %.6ff", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_BITRATE, layerId =%d,iBitrate = %d", "CWelsH264SVCEncoder::GetOption():ENCODER_OPTION_MAX_BITRATE,, layerId =%d,iBitrate = %d", "CWelsH264SVCEncoder::EncodeFrame(), cmInitParaError.", "CWelsH264SVCEncoder::EncodeFrame(), wrong iColorFormat %d", "CWelsH264SVCEncoder::EncodeFrame(), kiEncoderReturn %d", "CWelsH264SVCEncoder::Uninitialize(), openh264 codec version = %s.", "CWelsH264SVCEncoder::~CWelsH264SVCEncoder()", "CWelsH264SVCEncoder::ForceIntraFrame(),nothing to do as bIDR set to false", "iUsageType = %d,iPicWidth= %d;iPicHeight= %d;iTargetBitrate= %d;iMaxBitrate= %d;iRCMode= %d;iPaddingFlag= %d;iTemporalLayerNum= %d;iSpatialLayerNum= %d;fFrameRate= %.6ff;uiIntraPeriod= %d;eSpsPpsIdStrategy = %d;bPrefixNalAddingCtrl = %d;bSimulcastAVC=%d;bEnableDenoise= %d;bEnableBackgroundDetection= %d;bEnableSceneChangeDetect = %d;bEnableAdaptiveQuant= %d;bEnableFrameSkip= %d;bEnableLongTermReference= %d;iLtrMarkPeriod= %d, bIsLosslessLink=%d;iComplexityMode = %d;iNumRefFrame = %d;iEntropyCodingModeFlag = %d;uiMaxNalSize = %d;iLTRRefNum = %d;iMultipleThreadIdc = %d;iLoopFilterDisableIdc = %d (offset(alpha/beta): %d,%d;iComplexityMode = %d,iMaxQp = %d;iMinQp = %d)", "sSpatialLayers[%d]: .iVideoWidth= %d; .iVideoHeight= %d; .fFrameRate= %.6ff; .iSpatialBitrate= %d; .iMaxSpatialBitrate= %d; .sSliceArgument.uiSliceMode= %d; .sSliceArgument.iSliceNum= %d; .sSliceArgument.uiSliceSizeConstraint= %d;uiProfileIdc = %d;uiLevelIdc = %d;iDLayerQp = %d", "CWelsH264SVCEncoder::Initialize(), invalid argv= 0x%p.", "CWelsH264SVCEncoder::Initialize(), reinitialize, m_bInitialFlag= %d.", "CWelsH264SVCEncoder::Initialize(), invalid iSpatialLayerNum= %d, valid at range of [1, %d].", "CWelsH264SVCEncoder::Initialize(), invalid iTemporalLayerNum= %d, valid at range of [1, %d].", "CWelsH264SVCEncoder::Initialize(), invalid uiGopSize= %d, valid at range of [1, %d].", "CWelsH264SVCEncoder::Initialize(), invalid uiIntraPeriod= %d, valid in case it equals to 0 for unlimited intra period or exceeds specified uiGopSize= %d.", "CWelsH264SVCEncoder::Initialize(), invalid uiIntraPeriod= %d, valid in case it equals to 0 for unlimited intra period or exceeds specified uiGopSize= %d also multiple of it.", "CWelsH264SVCEncoder::Initialize(), WelsInitEncoderExt failed.", "Problematic Input Base Param: iUsageType=%d, Resolution=%dx%d, FR=%f, TLayerNum=%d, DLayerNum=%d", "CWelsH264SVCEncoder::Initialize(), invalid uiGopSize= %d, valid at range of [1, %d] and yield to power of 2.", "CWelsH264SVCEncoder::InitEncoder(), openh264 codec version = %s", "CWelsH264SVCEncoder::Initialize(), invalid argv= 0x%p", "CWelsH264SVCEncoder::InitializeExt(), invalid argv= 0x%p", "EncoderStatistics: SpatialId = %d,%dx%d, SpeedInMs: %f, fAverageFrameRate=%f, LastFrameRate=%f, LatestBitRate=%d, LastFrameQP=%d, uiInputFrameCount=%d, uiSkippedFrameCount=%d, uiResolutionChangeTimes=%d, uIDRReqNum=%d, uIDRSentNum=%d, uLTRSentNum=NA, iTotalEncodedBytes=%lu at Ts = %ld", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_DATAFORMAT, m_iCspInternal = 0x%x", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_IDR_INTERVAL iValue = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_IDR_INTERVAL uiIntraPeriod updated to %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_BASE iUsageType = %d,iPicWidth= %d;iPicHeight= %d;iTargetBitrate= %d;fMaxFrameRate=  %.6ff;iRCMode= %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_BASE, DetermineTemporalSettings failed!", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_BASE, LogStatisticsBeforeNewEncoding", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_EXT, iSpatialLayerNum(%d) failed!", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_EXT, DetermineTemporalSettings failed!", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_SVC_ENCODE_PARAM_EXT, LogStatisticsBeforeNewEncoding", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_FRAME_RATE,m_pEncContext->pSvcParam->fMaxFrameRate= %f", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_BITRATE,iBitrate = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_BITRATE,iLayer = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_BITRATE layerId= %d,iSpatialBitrate = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_MAX_BITRATE,iBitrate = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_MAX_BITRATE,iLayer = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_BITRATE layerId= %d,iMaxSpatialBitrate = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_RC_MODE iRCMode= %d (Note: not suggest changing RC-mode in middle of encoding)", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_RC_FRAME_SKIP, frame-skip setting(%d)", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_RC_FRAME_SKIP, rc off, frame-skip setting(%d) un-useful", "CWelsH264SVCEncoder::SetOption():ENCODER_PADDING_PADDING iPaddingFlag= %d ", "CWelsH264SVCEncoder::SetOption():ENCODER_LTR_MARKING_PERIOD iLtrMarkPeriod= %d ", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_LTR,expected bEnableLongTermReference = %d,expeced iLTRRefNum = %d,actual bEnableLongTermReference = %d,actual iLTRRefNum = %d", " CWelsH264SVCEncoder::SetOption enable SSEI = %d -- this is not supported yet", " CWelsH264SVCEncoder::SetOption bPrefixNalAddingCtrl = %d ", " CWelsH264SVCEncoder::SetOption eSpsPpsIdStrategy(%d) not in valid range, unchanged! existing=%d", " CWelsH264SVCEncoder::SetOption eSpsPpsIdStrategy changing in the middle of call is NOT allowed for eSpsPpsIdStrategy>INCREASING_ID: existing setting is %d and the new one is %d", " CWelsH264SVCEncoder::SetOption eSpsPpsIdStrategy = %d ", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_TRACE_CALLBACK callback = %p.", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_PROFILE,iLayer = %d(rang0-3)", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_PROFILE,layerId = %d,expected profile = %d,actual profile = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_LEVEL,layerId = %d,expected level = %d,actual level = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_NUMBER_REF,expected refNum = %d,actual refnum = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_DELIVERY_STATUS,bDeliveryFlag = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_COMPLEXITY,iComplexityMode = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_GET_STATISTICS: this option is get-only!", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_STATISTICS_LOG_INTERVAL,iStatisticsLogInterval = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_IS_LOSSLESS_LINK,bIsLosslessLink = %d", "CWelsH264SVCEncoder::SetOption():ENCODER_OPTION_BITS_VARY_PERCENTAGE,iBitsVaryPercentage = %d", "Actual input fLatestFrameRate = %f is quite different from framerate in setting %f, please check setting or timestamp unit (ms), cur_Ts = %ld start_Ts = %ld", "Actual input framerate %f is different from framerate in setting %f, suggest to use other rate control modes", "Don't support width(%d) or height(%d) which is less than 16!", "CWelsH264SVCEncoder::EncodeFrame() not succeed, err=%d", "unexpected return(%d) from EncodeFrameInternal()!", "CWelsDecoder::SetOption for ERROR_CON_IDC = %d not allowd for parse only!.", "CWelsDecoder::SetOption for ERROR_CON_IDC = %d.", "CWelsDecoder::SetOption():DECODER_OPTION_TRACE_CALLBACK callback = %p.", "CWelsDecoder::SetOption():DECODER_OPTION_GET_STATISTICS: this option is get-only!", "CWelsDecoder::SetOption():DECODER_OPTION_GET_SAR_INFO: this option is get-only!", "CWelsDecoder::CWelsDecoder() entry", "CWelsDecoder::UninitDecoder(), openh264 codec version = %s.", "CWelsDecoder::UninitDecoder(), verify memory usage (%d bytes) after free..", "m_pDecContext", "CWelsDecoder::~CWelsDecoder()", "CWelsDecoder::init_decoder(), openh264 codec version = %s, ParseOnly = %d", "SDecodingParam", "CWelsDecoder::Initialize(), invalid input argument.", "ResetDecoder(), context error code is %d", "ResetDecoder() failed as decoder context null", "Call DecodeParser without Initialize.\n", "bParseOnly should be true for this API calling! \n", "decode failed, failure type:%d \n", "DecoderStatistics: uiWidth=%d, uiHeight=%d, fAverageFrameSpeedInMs=%.1f, fActualAverageFrameSpeedInMs=%.1f,               uiDecodedFrameCount=%d, uiResolutionChangeTimes=%d, uiIDRCorrectNum=%d,               uiAvgEcRatio=%d, uiAvgEcPropRatio=%d, uiEcIDRNum=%d, uiEcFrameNum=%d,               uiIDRLostNum=%d, uiFreezingIDRNum=%d, uiFreezingNonIDRNum=%d, iAvgLumaQp=%d,               iSpsReportErrorNum=%d, iSubSpsReportErrorNum=%d, iPpsReportErrorNum=%d, iSpsNoExistNalNum=%d, iSubSpsNoExistNalNum=%d, iPpsNoExistNalNum=%d,               uiProfile=%d, uiLevel=%d,               iCurrentActiveSpsId=%d, iCurrentActivePpsId=%d,", "Call DecodeFrame2 without Initialize.\n", "bParseOnly should be false for this API calling! \n", "continuous error reached INT_MAX! Restart as 0.", "[OpenH264] this = 0x%p, Error:", "[OpenH264] this = 0x%p, Warning:", "[OpenH264] this = 0x%p, Info:", "[OpenH264] this = 0x%p, Debug:", "[OpenH264] this = 0x%p, Detail:", "LevelIdc is changed from (%d) to (%d) according to the iMaxSpatialBitrate(%d)", "No LevelIdc setting and iMaxSpatialBitrate (%d) is considered too big to be valid, changed to UNSPECIFIED_BIT_RATE", "Setting MaxSpatialBitrate (%d) the same at SpatialBitrate (%d) will make the actual bit rate lower than SpatialBitrate", "MaxSpatialBitrate (%d) should be larger than SpatialBitrate (%d), considering it as error setting", "Invalid bitrate settings in layer %d, bitrate= %d at FrameRate(%f)", "layerId(%d) doesn't support profile(%d), change to UNSPECIFIC profile", "layerId(%d) doesn't support profile(%d), change to scalable baseline profile", "doesn't support the number of reference frame(%d) change to auto select mode", "SliceArgumentValidationFixedSliceMode(), uiSliceNum(%d) you set for SM_FIXEDSLCNUM_SLICE, now turn to SM_SINGLE_SLICE type!", "SliceArgumentValidationFixedSliceMode(), uiSliceNum(%d) you set for SM_FIXEDSLCNUM_SLICE, now turn to SM_SINGLE_SLICE type as CountMbNum less than MIN_NUM_MB_PER_SLICE!", "SliceArgumentValidationFixedSliceMode(), uiSliceNum exceed MAX_SLICES_NUM! So setting slice num eqaul to MAX_SLICES_NUM(%d)!", "SliceArgumentValidationFixedSliceMode(), unsupported setting with Resolution and uiSliceNum combination under RC on! So uiSliceNum is changed to %d!", "SliceArgumentValidationFixedSliceMode(), invalid uiSliceMbNum (%d) settings!,now turn to SM_SINGLE_SLICE type", "SliceArgumentValidationFixedSliceMode(), unsupported setting with Resolution and uiSliceNum (%d) combination  under RC on! Consider setting single slice with this resolution!", "ParamValidation(),Invalid usage type = %d", "ParamValidation(),Invalid the number of Spatial layer(%d)for screen content", "ParamValidation(), AdaptiveQuant(%d) is not supported yet for screen content, auto turned off", "ParamValidation(), BackgroundDetection(%d) is not supported yet for screen content, auto turned off", "ParamValidation(), screen change detection should be turned on, change bEnableSceneChangeDetect as true", "ParamValidation,Invalid resolution layer(%d) resolution(%d x %d) should be less than the upper spatial layer resolution(%d x %d) ", "Invalid settings in input frame rate(%.6f) or output frame rate(%.6f) of layer #%d config file..", "AUTO CORRECT: Invalid settings in input frame rate(%.6f) and output frame rate(%.6f) of layer #%d config file: iResult of output frame rate divided by input frame rate should be power of 2(i.e,in/pOut=2^n). \n Auto correcting Output Framerate to Input Framerate %f!\n", "ParamValidation(),Invalid iRCMode = %d", "Invalid bitrate settings in total configure, bitrate= %d", "Invalid settings in bitrate. the sum of each layer bitrate(%d) is larger than total bitrate setting(%d)", "bEnableFrameSkip = %d,bitrate can't be controlled for RC_QUALITY_MODE,RC_BITRATE_MODE and RC_TIMESTAMP_MODE without enabling skip frame.", "Change QP Range from(%d,%d) to (%d,%d)", "WelsCheckRefFrameLimitation failed", "ParamValidation, Invalid iLoopFilterDisableIdc(%d) or iLoopFilterAlphaC0Offset(%d) or iLoopFilterBetaOffset(%d)!", "ParamValidationExt(),Invalid usage type = %d", "ParamValidationExt(), setting lossy link for LTR under screen, which is not supported yet! Auto disabled LTR!", "ParamValidationExt(), monitor invalid pCodingParam->iSpatialLayerNum: %d!", "ParamValidationExt(), monitor invalid pCodingParam->iTemporalLayerNum: %d!", "ParamValidationExt(), monitor invalid pCodingParam->uiGopSize: %d!", "ParamValidationExt(), uiIntraPeriod(%d) should be not less than that of uiGopSize(%d) or -1 specified!", "ParamValidationExt(), uiIntraPeriod(%d) should be multiple of uiGopSize(%d) or -1 specified!", "ParamValidationExt(), eSpsPpsIdStrategy setting (%d) with multiple svc SpatialLayers (%d) not supported! eSpsPpsIdStrategy adjusted to CONSTANT_ID", "ParamValidationExt(), eSpsPpsIdStrategy setting (%d) with iUsageType (%d) not supported! eSpsPpsIdStrategy adjusted to CONSTANT_ID", "ParamValidationExt(), eSpsPpsIdStrategy(%d) under bSimulcastAVC(%d) not supported yet, adjusted to INCREASING_ID", "ParamValidationExt(), bSimulcastAVC(%d) is not compatible with bPrefixNalAddingCtrl(%d) true, adjusted bPrefixNalAddingCtrl to false", "ParamValidationExt(), layer resolution is not set, set to general resolution %d x %d", "ParamValidationExt(), width > 0, height > 0, width * height <= %d, invalid %d x %d in dependency layer settings!", "ParamValidationExt(), in layer #%d iWidth x iHeight(%d x %d) both should be multiple of 16, can not support with arbitrary size currently!", "ParamValidationExt(), invalid uiSliceMode (%d) settings!", "ParamValidationExt(), current layer %d uiSliceMode (%d) settings may not fulfill MaxNalSize = %d", "ParamValidationExt(), invalid uiSliceNum (%d) settings more than MAX(%d)!", "ParamValidationExt(), invalid uiSliceMbNum (%d) settings!", "ParamValidationExt(), invalid uiSliceNum (%d) in SM_RASTER_SLICE settings!", "ParamValidationExt(), pSlice setting for SM_RASTER_SLICE now turn to SM_SINGLE_SLICE!", "ParamValidationExt(), WARNING: GOM based RC do not support SM_RASTER_SLICE!", "ParamValidationExt(), invalid iSliceSize (%d) settings!should be larger than  MAX_MACROBLOCK_SIZE_IN_BYTE(%d)", "ParamValidationExt(), invalid uiMaxNalSize (%d) settings! should be larger than (NAL_HEADER_ADD_0X30BYTES + MAX_MACROBLOCK_SIZE_IN_BYTE)(%d)", "ParamValidationExt(), slice mode = SM_SIZELIMITED_SLICE, uiSliceSizeConstraint = %d ,uiMaxNalsize = %d, will take uiMaxNalsize!", "layerId(%d) Profile is baseline, Change CABAC to CAVLC", "WelsEncoderApplyBitVaryRang:UpdateMaxBitrate layerId= %d,iMaxSpatialBitrate = %d", "AcquireLayersNals(), num_of_slice(%d) > existing slice(%d) at (iDid= %d), max=%d", "AcquireLayersNals(), num_of_slice(%d) > MAX_SLICES_NUM(%d) per (iDid= %d, qid= %d) settings!", "AcquireLayersNals(), num_of_nals(%d) > MAX_NAL_UNITS_IN_LAYER(%d) per (iDid= %d, qid= %d) settings!", "AcquireLayersNals(), pFuncList and pParametersetStrategy needed to be initialized first!", "ppMbListD", "ppMbListD[0]", "pSliceBuffer", "ppSliceInLayer", "pFirstMbIdxOfSlice", "pCountMbNumInSlice", "pFeatureSearchPreparation", "pDqLayer", "pRefList", "SStrideTables", "pBase", "pTmpRow", "pVaa->pVaaBlockStaticIdc[0]", "RequestMemorySvc() failed due to invalid iNumDependencyLayers(%d)!", "RequestMemorySvc() failed due to invalid uiIntraPeriod(%d) (=multipler of uiGopSize(%d)!", "RequestMemorySvc(), AcquireLayersNals failed(%d)!", "SWelsEncoderOutput", "pOut->pBsBuffer", "pOut->sNalList", "pOut->pNalLen", "pFrameBs", "DynamicSliceBs", "pIntra4x4PredModeBlocks", "pNonZeroCountBlocks", "pMvUnitBlock4x4", "pRefIndexBlock4x4", "pSadCostMb", "SLTRState", "RequestMemorySvc(), AllocStrideTables failed!", "pWelsSvcRc", "pVaa", "RequestMemorySvc(), RequestMemoryVaaScreen failed!", "pVaa->sAdaptiveQuantParam.pMotionTextureUnit", "pVaa->sAdaptiveQuantParam.pMotionTextureIndexToDeltaQp", "pVaa->pVaaBackgroundMbFlag", "pVaa->sVaaCalcInfo.sad8x8", "pVaa->sVaaCalcInfo.pSsd16x16", "pVaa->sVaaCalcInfo.pSum16x16", "pVaa->sVaaCalcInfo.pSumOfSquare16x16", "ppRefPicListExt", "pVaa->sVaaCalcInfo.pSumOfDiff8x8", "pVaa->sVaaCalcInfo.pMad8x8", "ppDqLayerList", "InitDqLayers(), InitSliceInLayer failed(%d)!", "pSpsArray", "pSubsetArray", "pPPSArray", "pDqIdcMap", "InitDqLayers(), InitSlicePEncCtx failed(%d)!", "RequestMemorySvc(), InitMbListD failed!", "pMvdCostTable", "RequestMemorySvc(), RequestMtResource failed!", "RequestMemorySvc(), InitDqLayers failed(%d)!", "SWelsSvcCodingParam", "SWelsFuncPtrList", "FreeMemorySvc(), verify memory usage (%d bytes) after free..", "WELS CPU features/capacities (0x%x) detected: \tHTT:      %c, MMX:      %c, MMXEX:    %c, SSE:      %c, SSE2:     %c, SSE3:     %c, SSSE3:    %c, SSE4.1:   %c, SSE4.2:   %c, AVX:      %c, FMA:      %c, X87-FPU:  %c, 3DNOW:    %c, 3DNOWEX:  %c, ALTIVEC:  %c, CMOV:     %c, MOVBE:    %c, AES:      %c, NUMBER OF LOGIC PROCESSORS ON CHIP: %d, CPU CACHE LINE SIZE (BYTES):        %d", "GetMultipleThreadIdc(), InitSliceSettings failed.", "WelsUninitEncoderExt(), pCtx= %p, iMultipleThreadIdc= %d.", "WelsUninitEncoderExt(), pthread_join(pThreadHandles%d) return %d..", "WelsInitEncoderExt(), NULL == ppCtx(0x%p) or NULL == pCodingParam(0x%p).", "WelsInitEncoderExt(), ParamValidationExt failed return %d.", "WelsInitEncoderExt(), DetermineTemporalSettings failed return %d (check in/out frame rate and temporal layer setting! -- in/out = 2^x, x <= temppral_layer_num)", "WelsInitEncoderExt(), GetMultipleThreadIdc failed return %d.", "WelsInitEncoderExt(), RequestMemorySvc failed return %d.", "WelsInitEncoderExt(), pOut of memory in case new CWelsPreProcess().", "WelsInitEncoderExt(), pVPP alloc spatial pictures failed", "WelsInitEncoderExt() exit, overall memory usage: %llu bytes", "WelsInitEncoderExt(), pCtx= 0x%p.", "WelsEncoderParamAdjust(), does not expect in-middle change of iUsgaeType from %d to %d", "WelsEncoderParamAdjust(),bSimulcastAVC(%d,%d),iSpatialLayerNum(%d,%d),iPicWidth(%d,%d),iPicHeight(%d,%d),Rect.iWidth(%d,%d),Rect.iHeight(%d,%d)", "WelsEncoderParamAdjust(),bEnableLongTermReference(%d,%d),iLTRRefNum(%d,%d),iMultipleThreadIdc(%d,%d),bEnableBackgroundDetection(%d,%d),bEnableAdaptiveQuant(%d,%d),eSpsPpsIdStrategy(%d,%d),iMaxNumRefFrame(%d,%d),iTemporalLayerNum(%d,%d)", "WelsEncoderParamAdjust(),iIndexD = %d,sSpatialLayers.wxh_old(%d,%d),sSpatialLayers.wxh_new(%d,%d),iActualwxh_old(%d,%d),iActualwxh_new(%d,%d)", "WelsEncoderParamAdjust(),iIndexD = %d,uiSliceMode (%d,%d),uiSliceNum(%d,%d)", "WelsEncoderParamAdjust() iIndexD = %d,fInputFrameRate(%f,%f),fOutputFrameRate(%f,%f),fMaxFrameRate(%f,%f)", "WelsEncoderParamAdjust(),iIndexD = %d,uiProfileIdc(%d,%d)", "WelsEncoderParamAdjust(),iIndexD = %d,uiLevelIdc(%d,%d)", "Set-SliceConstraint(%d) too small for current resolution (MB# %d) under QP/BR!", "SetMeMethod(BLOCK_16x16) ME_DIA_CROSS unsuccessful, switched to default search", "SetMeMethod(BLOCK_8x8) ME_DIA_CROSS_FME unsuccessful, switched to default search", "ForceCodingIDR(iDid 0-%d)at InputFrameCount=%d\n", "ForceCodingIDR(iDid %d)at InputFrameCount=%d\n", "WriteSavcParaset(), iLayerNum(%d) > MAX_LAYER_NUM_OF_FRAME(%d)!", "[Rc] Frame timestamp = %lld, iDid = %d,skip one frame due to target_br, continual skipped %d frames", "WelsEncoderParamAdjust(), GetMultipleThreadIdc failed return %d.", " CWelsH264SVCEncoder::SetOption LTR flag = %d and number = %d: Required number of reference increased to %d and iMaxNumRefFrame is adjusted (from %d)", " CWelsH264SVCEncoder::SetOption LTR flag = %d and number = %d, Required number of reference increased from Old = %d to New = %d because of LTR setting", "CWelsH264SVCEncoder::SetOption enable LTR = %d,ltrnum = %d", "CWelsH264SVCEncoder::WelsCodeOnePicPartition: DynSliceRealloc not successful", "CWelsH264SVCEncoder::WelsCodeOnePicPartition: iSliceIdx(%d) over iMaxSliceNum(%d)", "Failed in allocating memory in BuildSpatialPicList", "[Rc] Frame timestamp = %lld, skip one frame due to preprocessing return (temporal layer settings or else)", "WelsEncoderEncodeExt(), iLayerNum(%d) overflow(max:%d)!", "WelsEncoderEncodeExt(), WelsBuildRefList failed for P frames, pCtx->iNumRef0= %d. ForceCodingIDR!", "WelsEncoderEncodeExt(), iLayerNum(%d) overflow(max:%d) at iDid= %d uiSliceMode= %d, iSliceCount= %d!", "WelsEncoderEncodeExt(), iSliceCount(%d) from GetCurrentSliceNum() is untrusted due stack/heap crupted!", "WelsEncoderEncodeExt(), multi-slice (mode %d) encoding error!", "WelsEncoderEncodeExt(), multi-slice (mode %d) InitAllSlicesInThread() error!", "WelsEncoderEncodeExt(), multi-slice (mode %d) encoding error = %d!", "WelsEncoderEncodeExt(), WelsUpdateRefList failed. ForceCodingIDR!", "WelsEncoderEncodeExt()MinCr Checking,codec bitstream size is larger than Level limitation", "WelsEncoderEncodeExt(), Logic Error Found in Preprocess updating. ForceCodingIDR!", "WelsEncoderEncodeExt(), Logic Error Found in temporal level. ForceCodingIDR!", "WelsEncoderEncodeExt(), iLayerNum(%d) > MAX_LAYER_NUM_OF_FRAME(%d)!", "WelsEncoderEncodeExt() OutputInfo iLayerNum = %d,iFrameSize = %d", "WelsEncoderEncodeExt() OutputInfo iLayerId = %d,iNalType = %d,iNalCount = %d, first Nal Length=%d,uiSpatialId = %d,uiTemporalId = %d,iSubSeqId = %d", "pPic->pBuffer", "pPic->uiRefMbType", "pPic->pRefMbQp", "pPic->sMvList", "pPic->pMbSkipSad", "pPic->pScreenBlockFeatureStorage", "pPic", "pScreenBlockFeatureStorage", "[Rc] bits in buffer = %ld, bits in Max bitrate buffer = %ld, Predict skip frames = %d and %d", "[Rc] iDid = %d,bits in buffer = %ld, bits in Max bitrate buffer = %ld", "[Rc] iDid = %d,iContinualSkipFrames(%d) is large", "WelsRcFrameDelayJudgeTimeStamp iDidIdx = %d,iSkipFrameNum = %d,buffer = %ld,threadhold = %d,bitrate = %d,iSentBits = %d,lasttimestamp = %lld,timestamp=%lld", "pWelsSvcRc->pTemporalOverRc", "iCmplxRatio = %d,frameComplexity = %ld,iFrameCmplxMean = %ld,iQStep = %d,iLumaQp = %d", "iMaxTh = %d,iMinTh = %d,pWelsSvcRc->iTargetBits = %d,pWelsSvcRc->iBufferSizeSkip = %d, pWelsSvcRc->iBufferFullnessSkip= %ld", "iMaxTh = %d,pWelsSvcRc->iTargetBits = %d,pWelsSvcRc->iBufferSizeSkip = %d, pWelsSvcRc->iBufferFullnessSkip= %ld", "iMaxTh = %d,iMinTh = %d,pWelsSvcRc->iTargetBits = %d,pWelsSvcRc->iBufferSizeSkip = %d, pWelsSvcRc->iBufferFullnessSkip= % ld", "[Rc] bits in buffer = %ld, bits in Max bitrate buffer = %ld", "[Rc] VBV_Skip,dIncPercent = %f,iRcVaryPercentage = %d,pWelsSvcRc->bSkipFlag = %d", "[Rc]Layer %d: Frame timestamp = %lld, Frame type = %d, encoding_qp = %d, average qp = %d, max qp = %d, min qp = %d, index = %d, iTid = %d, used = %d, bitsperframe = %d, target = %d, remainingbits = %d, skipbuffersize = %d", "RcUpdateIntraComplexity iFrameDqBits = %d,iQStep= %d,iIntraCmplx = %ld", "RcUpdateFrameComplexity iFrameDqBits = %d,iQStep= %d,pWelsSvcRc->iQStep= %d,pTOverRc->iLinearCmplx = %ld", "iFrameCmplxMean = %ld,iFrameComplexity = %ld", "WelRcPictureInitScc iLumaQp = %d\n", "[WelsRcDropFrameUpdate:\tdrop:%d\t%ld\n", "LTR ,iMarkFrameNum invalid LTR delete ,long_term_idx = %d , iFrameNum =%d ", "pLtr->uiLtrMarkState = %d, pLtr.iCurLtrIdx = %d , pLtr->iLtrMarkFbFrameNum = %d ,pCtx->iFrameNum = %d ", "LTR mark mode =%d", "LTR ,invalid LTR delete ,long_term_idx = %d , iFrameNum =%d ", "Receive valid LTR recovery pRequest,feedback_type = %d ,uiIdrPicId = %d , current_frame_num = %d , last correct frame num = %d", "Receive LTR recovery pRequest,feedback_type = %d ,uiIdrPicId = %d , current_frame_num = %d , last correct frame num = %d", "Receive valid LTR marking feedback, feedback_type = %d , uiIdrPicId = %d , LTR_frame_num = %d , cur_idr_pic_id = %d", "Receive LTR marking feedback, feedback_type = %d , uiIdrPicId = %d , LTR_frame_num = %d , cur_idr_pic_id = %d", "pRef is int32_t !iLastRecoverFrameNum = %d, pRef iFrameNum = %d,LTR number = %d,", "WelsBuildRefList pCtx->uiTemporalId = %d,pRef->iFrameNum = %d,pRef->uiTemporalId = %d", "WelsUpdateRefSyntax():::uiAbsDiffPicNumMinus1:%d", "WelsUpdateRefSyntax():::uiAbsDiffPicNumMinus1< 0, update as:%d", "WelsBuildRefListScreen(), current iFrameNum = %d, current Tid = %d, ref iFrameNum = %d, ref uiTemporalId = %d, ref is Scene LTR = %d, LTR count = %d,iNumRef = %d", "WelsBuildRefListScreen(), ref !current iFrameNum = %d, ref iFrameNum = %d,LTR number = %d", "WelsBuildRefListScreen(), CurrentFramePoc=%d, isLTR=%d", "WelsBuildRefListScreen()\tRefLot[%d]: iPoc=%d, iPictureType=%d, bUsedAsRef=%d, bIsLongRef=%d, bIsSceneLTR=%d, uiTemporalId=%d, iFrameNum=%d, iMarkFrameNum=%d, iLongTermPicNum=%d, uiRecieveConfirmed=%d", "WelsBuildRefListScreen()\tRefLot[%d]: NULL", "WelsMarkPicScreen, Invalid Frame Number", "SSliceThreading", "pThreadPEncCtx", "%p%x", "scm%s", "ud%d%s", "fu%d%s", "sc%d%s", "rc%d%s", "pSmt->pThreadBsBuffer", "pSliceSeg->pOverallMbMap", "Invalid uiDisableDeblockingFilterIdc %d", "pMbCache->pMemPredMb", "pMbCache->pCoeffLevel", "pMbCache->pSkipMb", "pMbCache->pMemPredBlk4", "pMbCache->pBufferInterPredMe", "pMbCache->pPrevIntra4x4PredModeFlag", "pMbCache->pRemIntra4x4PredModeFlag", "pMbCache->pDct", "sSliceBs.pBs", "CWelsH264SVCEncoder::InitSliceThreadInfo: pSliceThreadInfo->pSliceBuffer[iIdx] is NULL", "CWelsH264SVCEncoder::InitSliceInLayer() pDqLayer->ppSliceInLayer is NULL", "CWelsH264SVCEncoder::InitSliceInLayer() pDqLayer->pFirstMbIdxOfSlice is NULL", "CWelsH264SVCEncoder::InitSliceInLayer() pDqLayer->pCountMbNumInSlice is NULL", "CWelsH264SVCEncoder::ReallocateSliceList: pNewSliceList is NULL", "ReallocateSliceList()::InitSliceBsBuffer()", "CWelsH264SVCEncoder::ExtendLayerBuffer: ppSlice is NULL", "CWelsH264SVCEncoder::ExtendLayerBuffer: pFirstMbIdxOfSlice is NULL", "CWelsH264SVCEncoder::ExtendLayerBuffer: pCountMbNumInSlice is NULL", "CWelsH264SVCEncoder::FrameBsRealloc: pNalList is NULL", "CWelsH264SVCEncoder::FrameBsRealloc: pNalLen is NULL", "CWelsH264SVCEncoder::SliceLayerInfoUpdate: ReOrderSliceInLayer failed", "DynSlcJudgeSliceBoundaryStepBack: AddSliceBoundary: iCurMbIdx=%d, uiLen=%d, iSliceIdx=%d", "pFeatureOfBlock", "pScreenBlockFeatureStorage->pTimesOfFeatureValue", "pScreenBlockFeatureStorage->pLocationOfFeature", "pScreenBlockFeatureStorage->pLocationPointer", "pScreenBlockFeatureStorage->pFeatureValuePointerList", "\f%%\f%", "SceneChangeDetect() iAvailableRefNum=0 but not I.", "iVaaFrameSceneChangeIdc = %d,codingIdx = %d", "pSvcParam->uiIntraPeriod=%d, pCtx->pVaa->bIdrPeriodFlag=%d", "Set Thread Num to %d did not succeed, current thread num in use: %d", "pPicBuf->queue", "pPicBuf", "WelsRequestMem(): memory re-alloc for no resolution change (size = %d * %d), ref list size change from %d to %d", "PPicBuff", "PPicture*", "pPicOldBuf->queue", "pPicOldBuf", "WelsRequestMem(): memory re-alloc for resolution change, size change from %d * %d to %d * %d, ref list size change from %d to %d", "WelsRequestMem(): memory alloc size = %d * %d, ref list size = %d", "pCtx->pCabacDecEngine", "eErrorConMethod (%d) not in range: (%d - %d). Set as default value: (%d).", "eVideoType: %d", "SyncPictureResolutionExt()::WelsRequestMem--buffer allocated failure.", "SyncPictureResolutionExt()::InitialDqLayersContext--buffer allocated failure.", "SyncPictureResolutionExt(), overall memory usage: %llu bytes", "WelsInitStaticMemory() failed in WelsOpenDecoder().", "pCtx->sRawData.pHead", "pCtx->pParserBsInfo", "pCtx->pParserBsInfo->pDstBuff", "pCtx->sSavedData.pHead", "pCtx->pParserBsInfo->pNalLenInByte", "ExpandBsBuffer() Failed for malloc pNewBsBuff (%d)", "ExpandBsBuffer() Failed for malloc pNewSavedBsBuff (%d)", "Current nal num (%d) exceededs %d.", "Max AU size exceeded. Allowed size = %d, current size = %d", "pCtx->sRawData->pHead", "pCtx->sSavedData->pHead", "pCtx->pParam", "invalid syntax first_mb_in_slice %d", "slice type too large (%d) at first_mb(%d)", "ParseSliceHeaderSyntaxs(): B slice not supported.", "Invalid slice type(%d) in IDR picture. ", "Invalid slice type(%d).", "invalid syntax iPpsId out of range %d", "PPS id (%d) is invalid, previous id (%d) error ignored (%d)!", "Invalid PPS referenced", "Sub SPS id (%d) is invalid, previous id (%d) error ignored (%d)!", "SPS id (%d) is invalid, previous id (%d) error ignored (%d)!", "slice_type (%d) not supported for num_ref_frames = 0.", "non existing SPS referenced", "ParseSliceHeaderSyntaxs(): frame_mbs_only_flag = %d not supported. ", "ParseSliceHeaderSyntaxs(), invaild frame number: %d due to IDR frame introduced!", "invalid syntax idr_pic_id %d", "invalid syntax redundant_pic_cnt %d", "Redundant picture not supported!", "invalid syntax num_ref_idx_l0_active_minus1 %d", "reference overflow", "invalid ref pPic list reordering syntaxs!", "invalid weighted prediction syntaxs!", "ParseSliceHeaderSyntaxs(): bUseRefBasePicFlag or bStoreRefBasePicFlag = 1 not supported.", "invalid syntax cabac_init_idc %d", "QP %d out of range", "SP/SI not supported", "disable_deblock_filter_idc (%d) out of range [0, 6]", "invalid syntax slice_alpha_c0_offset_div2 * 2 %d", "invalid syntax slice_beta_offset_div2 * 2 %d", "disable_inter_layer_deblock_filter_idc (%d) out of range [0, 6]", "invalid syntax inter_layer_alpha_c0_offset_div2 * 2 %d", "invalid syntax inter_layer_slice_beta_offset_div2 * 2 %d", "bSliceSkipFlag == 1 not supported.", "uiScanIdxStart (%d) != 0 and uiScanIdxEnd (%d) !=15 not supported here", "UpdateAccessUnit():::::Key frame lost.....CAN NOT find IDR from current AU.", "pCtx->sMb.pMbType[]", "pCtx->sMb.pMv[][]", "pCtx->sMb.pRefIndex[][]", "pCtx->sMb.pNoSubMbPartSizeLessThan8x8Flag[]", "pCtx->sMb.pTransformSize8x8Flag[]", "pCtx->sMb.pLumaQp[]", "pCtx->sMb.pChromaQp[]", "pCtx->sMb.pMvd[][]", "pCtx->sMb.pCbfDc[]", "pCtx->sMb.pNzc[]", "pCtx->sMb.pNzcRs[]", "pCtx->sMb.pScaledTCoeff[]", "pCtx->sMb.pIntraPredMode[]", "pCtx->sMb.pIntra4x4FinalMode[]", "pCtx->sMb.pIntraNxNAvailFlag", "pCtx->sMb.pChromaPredMode[]", "pCtx->sMb.pCbp[]", "pCtx->sMb.pSubMbType[]", "pCtx->sMb.pSliceIdc[]", "pCtx->sMb.pResidualPredFlag[]", "pCtx->sMb.pInterPredictionDoneFlag[]", "pCtx->sMb.pMbCorrectlyDecodedFlag[]", "pCtx->sMb.pMbRefConcealedFlag[]", "PDqLayer", "pCtx->pMbRefConcealedFlag[]", "DecodeCurrentAccessUnit()::::::PrefetchPic ERROR, pSps->iNumRefFrames:%d.", "DecodeCurrentAccessUnit(), Fmo param alloc failed", "DecodeCurrentAccessUnit(), FmoParamUpdate failed, eSliceType: %d.", "referencing pictures lost due frame gaps exist, prev_frame_num: %d, curr_frame_num: %d", "reference picture introduced by this frame is lost during transmission! uiTId: %d", "DecodeCurrentAccessUnit() failed (%d) in frame: %d uiDId: %d uiQId: %d", "DecodeFrameConstruction(): will output first frame of new sequence, %d x %d, crop_left:%d, crop_right:%d, crop_top:%d, crop_bottom:%d, ignored error packet:%d.", "DecodeFrameConstruction(): current NAL num (%d) plus sps & pps exceeds permitted num (%d). Will expand", "DecodeFrameConstruction(): sps pps size: (%d %d) too large. Failed to parse. \n", "DecodeFrameConstruction(): current NAL num (%d) exceeds permitted num (%d). Will expand", "DecodeFrameConstruction(): composed output size (%ld) exceeds (%d). Failed to parse. current data pos %d out of %d:, previously accumulated num: %d, total num: %d, previously accumulated len: %d, current len: %d, current buf pos: %p, header buf pos: %p \n", "DecodeFrameConstruction(): iTotalNumMbRec:%d, total_num_mb_sps:%d, cur_layer_mb_width:%d, cur_layer_mb_height:%d ", "DecodeFrameConstruction():New sequence detected, but freezed, correct MBs (%d) out of whole MBs (%d).", "sync picture resolution ext failed,  the error is %d", "returned error from decoding:[0x%x]", "DoErrorConFrameCopy()::EC memcpy overlap.", "DoErrorConSliceCopy()::EC memcpy overlap.", "DoErrorConSliceMVCopy()::EC memcpy overlap.", "_fmo->pMbAllocMap", "pIter->pMbAllocMap", "No reference picture in short term list when sliding window", "WelsInitRefList()::EC memcpy overlap.", "WelsInitRefList()::PrefetchPic for EC errors.", "WelsReorderRefList()::::BASE LAYER::::iSpsId:%d, ref_sps_id:%d", "RemainOneBufferInDpbForEC(): empty one DPB failed for EC!", "ex_mark_avc():::MMCO_SHORT2LONG:::LTR marking....iFrameNum: %d", "ex_mark_avc():::MMCO_LONG:::LTR marking....iFrameNum: %d", "MMCO_SHORT2UNUSED: delete an empty entry from short term list", "MMCO_LONG2UNUSED: delete an empty entry from long term list", "MMCO_LONG2LONG: delete an empty entry from short term list", "Access Unit", "pPic->pBuffer[0]", "PPicture", "_pic->buffer[0]", "iNumRefFrame(%d) setting does not support the temporal and LTR setting, will be reset to %d", "iMaxNumRefFrame(%d) adjusted to %d because of uiLevelIdc=%d -- under level-idc first strategy ", "iMaxNumRefFrame(%d) adjusted to %d because of limitation from uiLevelIdc=%d", "iNumRefFrame(%d) adjusted to %d because of limitation from uiLevelIdc=%d", "rec%d.yuv", "rec.yuv", "[MT] CWelsSliceEncodingTask()FinishTask for m_iSliceIdx %d, unlock thread %d", "[MT] CWelsSliceEncodingTask ExecuteTask(), WriteSliceBs not successful: coding_idx %d, um_iSliceIdx %d", "@pSlice=%-6d sliceType:%c idc:%d size:%-6d", "[MT] CWelsLoadBalancingSlicingEncodingTask()FinishTask, coding_idx %d, um_iSliceIdx %d, uiSliceConsumeTime %d, m_iSliceSize %d, iFirstMbInSlice %d, count_num_mb_in_slice %d at time=%ld", "[MT] CWelsConstrainedSizeSlicingEncodingTask ExecuteTask(), WriteSliceBs not successful: coding_idx %d, uiLocalSliceIdx %d, BufferSize %d, m_iSliceSize %d, iPayloadSize %d", "@pSlice=%-6d sliceType:%c idc:%d size:%-6d\n", "[MT] CWelsConstrainedSizeSlicingEncodingTask(), coding_idx %d, iPartitionId %d, m_iThreadIdx %d, iLocalSliceIdx %d, m_iSliceSize %d, ParamValidationExt(), invalid uiMaxNalSizeiEndMbInPartition %d, pCurDq->LastCodedMbIdxOfPartition[%d] %d\n", "[MT] CWelsSliceEncodingTask()InitTask for m_iSliceIdx %d, lock thread %d", "[MT] CWelsSliceEncodingTask InitTask(), Cannot find available thread for m_iSliceIdx = %d", "[MT] CWelsLoadBalancingSlicingEncodingTask()InitTask for m_iSliceIdx %d at time=%ld", "parse_nal(), no exist Picture Parameter Sets ahead of sequence when try to decode NAL(type:%d).", "ParseNalHeader(), no exist Parameter Sets ahead of sequence when try to decode slice(type:%d).", "ParseNalHeader() in Prefix Nal Unit:uiQualityId (%d) != 0, bUseRefBasePicFlag (%d) != 0, not supported!", "NAL_UNIT_PREFIX: DecInitBits() fail due invalid access.", "MemGetNextNal() fail due out of memory.", "ParseNalHeader():bUseRefBasePicFlag (%d) != 0, MGS not supported!", "ParseNalHeader():uiQualityId (%d) != 0, MGS not supported!", "NAL_UNIT_CODED_SLICE: DecInitBits() fail due invalid access.", "DecodeSpsSvcExt():extended_spatial_scalability (%d) != 0, ESS not supported!", "invalid syntax seq_scaled_ref_layer_left_offset %d", "invalid syntax seq_scaled_ref_layer_top_offset %d", "invalid syntax seq_scaled_ref_layer_right_offset %d", "invalid syntax seq_scaled_ref_layer_bottom_offset %d", "invalid syntax chroma_sample_loc_type_top_field %d", "invalid syntax chroma_sample_loc_type_bottom_field %d", "invalid syntax num_units_in_tick %d", "invalid syntax time_scale %d", "nal_hrd_parameters_present_flag = 1 not supported.", "vcl_hrd_parameters_present_flag = 1 not supported.", "invalid syntax max_bytes_per_pic_denom %d", "invalid syntax max_bits_per_mb_denom %d", "invalid syntax log2_max_mv_length_horizontal %d", "invalid syntax log2_max_mv_length_vertical %d", "invalid syntax max_num_reorder_frames %d", "SPS ID can not be supported!\n", " iSpsId is out of range! \n", "ParseSps(): level_idx (%d).\n", "ParseSps(): chroma_format_idc (%d) <=1 supported.", "ParseSps(): bit_depth_luma (%d) Only 8 bit supported.", "ParseSps(): bit_depth_chroma (%d). Only 8 bit supported.", "invalid syntax log2_max_frame_num_minus4 %d", "invalid syntax log2_max_pic_order_cnt_lsb_minus4 %d", "invalid syntax num_ref_frames_in_pic_order_cnt_cycle %d", " illegal pic_order_cnt_type: %d ! ", "pic_width_in_mbs(%d) invalid!", "the pic_width_in_mbs exceeds the level limits!", "pic_height_in_mbs(%d) invalid!", "the pic_height_in_mbs exceeds the level limits!", "the total count of mb exceeds the level limits!", "invalid syntax max_num_ref_frames %d", " max_num_ref_frames exceeds level limits!", "ParseSps(): frame_mbs_only_flag (%d) not supported.", "frame_crop_left_offset + frame_crop_right_offset exceeds limits!", "frame_crop_top_offset + frame_crop_right_offset exceeds limits!", "hrd parse in vui of subsetSPS is not supported!", "sps payload size (%d) too large for parse only (%d), not supported!", "Temp buffer for parse only usage.", "sps buffer alloc failed for parse only!", "pBsBuf for parse only usage", "ParsePps(): slice_group_map_type (%d): support only 0,1.", "invalid syntax pic_init_qp_minus26 + 26 %d", "invalid syntax pic_init_qs_minus26 + 26 %d", "invalid syntax chroma_qp_index_offset %d", "ParsePps(): sps_id (%d) does not exist for scaling_list. This PPS (%d) is marked as invalid.", "pps payload size (%d) too large for parse only (%d), not supported!", "WelsTargetMbConstruction():::::Unknown MB type: %d", "WelsTargetSliceConstruction():::MB(%d, %d) construction error. pCurSlice_type:%d", "WelsTargetSliceConstruction():::pCtx->iTotalNumMbRec:%d, iTotalMbTargetLayer:%d", "I_PCM mode exists in I slice!", "I_PCM mode exists in P slice!", "WelsDecodeSlice()::::ILP flag exist, not supported with CABAC enabled!", "iBaseModeFlag (%d) != 0, inter-layer prediction not supported.", "WelsDecodeMbCavlcISlice()::::pBs incomplete, iUsedBits:%ld > pBs->iBits:%d, MUST stop decoding.", "residual_pred_flag = 1 not supported.", "\\ajm^pgsd", "invalid syntax vertical mv %d", "aeiEImqMQUY]", "inter parse: iMotionPredFlag = 1 not supported. ", "/sys/devices/system/cpu/present", "/sys/devices/system/cpu/possible", "/proc/cpuinfo", "libc.so", "getauxval", "CWelsTaskThread"], "stringidentifiers": ["aac_adtstoasc", "AVDCT", "fastint", "altivec", "faan", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "simpleauto", "bits_per_sample", "Palette", "private_spspps_buf", "null", "unknown", "bsf_list", "AVBSFContext", "chomp", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpegb", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "wmv3", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "tdsc", "vc1image", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "aac_latm", "qdmc", "celt", "g723_1", "dss_sp", "g729", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "dca_core", "dump_extra", "extract_extradata", "remove", "L263", "S263", "GEOV", "GEOX", "TRAIL_N", "TRAIL_R", "STSA_N", "STSA_R", "RADL_N", "RADL_R", "RASL_N", "RASL_R", "BLA_W_LP", "BLA_W_RADL", "BLA_N_LP", "IDR_W_RADL", "IDR_N_LP", "CRA_NUT", "EOS_NUT", "EOB_NUT", "FD_NUT", "SEI_PREFIX", "SEI_SUFFIX", "h264_mp4toannexb", "Q264", "Gray", "CABAC", "CAVLC", "weighted", "LPAR", "CONSTR", "REDU", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "mono", "TEMP", "SPAT", "stereo_mode", "is_avc", "nal_length_size", "enable_er", "hevc_mp4toannexb", "desc", "imxdump", "U263", "SEPB1", "SEPB2", "ZYGO", "libopenh264", "mjpeg2jpeg", "mjpg", "mjpegadump", "mov2textsub", "text2movsub", "mp3decomp", "mpeg4_unpack_bframes", "ffmpeg", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "Reserved", "WV1F", "QMP4", "MP4S", "divx_packed", "NULL", "AVSubtitleRect", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "sample_rate", "AVCodecContext", "unaligned", "loop", "input_preserved", "pass1", "pass2", "gray", "emu_edge", "psnr", "ildct", "low_delay", "global_header", "bitexact", "ilme", "cgop", "output_corrupt", "flags2", "noout", "ignorecrop", "local_header", "showall", "export_mvs", "skip_manual", "ass_ro_flush_noop", "me_method", "zero", "full", "epzs", "tesa", "phods", "iter", "time_base", "cutoff", "frame_size", "frame_number", "qcomp", "qblur", "qmin", "qmax", "qdiff", "b_qfactor", "rc_strategy", "b_strategy", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "autodetect", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "hpel_chroma", "dc_clip", "trunc", "iedge", "strict", "very", "normal", "unofficial", "experimental", "b_qoffset", "err_detect", "crccheck", "explode", "ignore_err", "careful", "compliant", "aggressive", "has_b_frames", "block_align", "mpeg_quant", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maxrate", "minrate", "bufsize", "rc_buf_aggressivity", "i_qfactor", "i_qoffset", "rc_init_cplx", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "slice_count", "guess_mvs", "deblock", "favor_inter", "bits_per_coded_sample", "plane", "median", "aspect", "debug", "pict", "dct_coeff", "green_metadata", "skip", "startcode", "mmco", "vis_qp", "vis_mb_type", "buffers", "thread_ops", "nomc", "vismv", "debug_mv", "cmp_func", "subcmp", "ildctcmp", "last_pred", "preme", "precmp", "satd", "vsad", "vsse", "nsse", "dctmax", "msad", "pre_dia_size", "subq", "dtg_active_format", "me_range", "ibias", "pbias", "global_quality", "deflate", "context", "slice_flags", "xvmc_acceleration", "stream_codec_tag", "sc_threshold", "rc_init_occupancy", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "profile", "aac_main", "aac_ssr", "aac_ltp", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "skip_threshold", "skip_factor", "skip_exp", "skipcmp", "border_mask", "mblmin", "mblmax", "mepc", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "none", "default", "noref", "bidir", "nokey", "nointra", "bidir_refine", "brd_scale", "keyint_min", "refs", "chromaoffset", "trellis", "sc_factor", "mv0_threshold", "b_sensitivity", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "ticks_per_frame", "color_primaries", "color_primaries_type", "bt709", "Unspecified", "bt470m", "bt470bg", "smpte170m", "smpte240m", "film", "Film", "bt2020", "smpte428", "smpte428_1", "smpte431", "smpte432", "unspecified", "color_trc", "color_trc_type", "gamma22", "gamma28", "linear", "Linear", "log100", "log316", "bt1361e", "smpte2084", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "bt2020c", "smpte2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color_range_type", "chroma_sample_location", "chroma_sample_location_type", "Left", "center", "Center", "topleft", "bottomleft", "Bottom", "log_level_offset", "slices", "thread_type", "slice", "audio_service_type", "Effects", "Dialogue", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "sub_text_format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "field_order", "progressive", "dump_separator", "codec_whitelist", "pixel_format", "video_size", "max_pixels", "I420", "IYUV", "yv12", "YUYVw", "BGR0C", "b48rs", "J444Z", "I40AY", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "remove_extra", "remove_extradata", "audioresample", "ReSampleContext", "unknown_codec", "encoder", "vp9_superframe", "m_pDecContext", "SDecodingParam", "ppMbListD", "pSliceBuffer", "ppSliceInLayer", "pFirstMbIdxOfSlice", "pCountMbNumInSlice", "pFeatureSearchPreparation", "pDqLayer", "pRefList", "SStrideTables", "pBase", "pTmpRow", "SWelsEncoderOutput", "pFrameBs", "DynamicSliceBs", "pIntra4x4PredModeBlocks", "pNonZeroCountBlocks", "pMvUnitBlock4x4", "pRefIndexBlock4x4", "pSadCostMb", "SLTRState", "pWelsSvcRc", "pVaa", "ppRefPicListExt", "ppDqLayerList", "pSpsArray", "pSubsetArray", "pPPSArray", "pDqIdcMap", "pMvdCostTable", "SWelsSvcCodingParam", "SWelsFuncPtrList", "pPic", "pScreenBlockFeatureStorage", "SSliceThreading", "pThreadPEncCtx", "pFeatureOfBlock", "pPicBuf", "PPicBuff", "pPicOldBuf", "PDqLayer", "PPicture", "getauxval", "CWelsTaskThread"], "debugstrings": ["Incorrect library version loaded\n", "Unknown Lavc version string encountered, %d.%d.%d; clamping sub-version values to 8-bits.\n", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "strictly conform to a older more strict version of the spec or reference software", "Audio sample format conversion failed\n", "FFmpeg version 3.3.9", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "CWelsH264SVCEncoder::Uninitialize(), openh264 codec version = %s.", "CWelsH264SVCEncoder::InitEncoder(), openh264 codec version = %s", "CWelsDecoder::UninitDecoder(), openh264 codec version = %s.", "CWelsDecoder::init_decoder(), openh264 codec version = %s, ParseOnly = %d", "GCC: (GNU) 4.9.x 20150123 (prerelease)"], "localsymbols": [""], "dependencies": ["libc.so", "libm.so", "libavutil.so", "libstdc++.so", "libdl.so"], "elfname": "libavcodec.so"}