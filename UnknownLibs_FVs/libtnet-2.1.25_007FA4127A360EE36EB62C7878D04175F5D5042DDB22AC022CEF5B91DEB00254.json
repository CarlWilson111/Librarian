{"globalvars": ["easy_baseth_self_init", "easy_log_level", "easy_io_list_lock", "easy_baseth_once_var", "easy_log_format", "log_file", "easy_baseth_self_key", "easy_io_list_var", "easy_pool_realloc", "easy_connection_buffer_key", "easy_http_request_settings", "easy_log_print", "easy_method_strings", "easy_io_var", "easy_connection_buffer_once", "easy_http_response_settings"], "importedglobals": ["__stack_chk_guard", "timezone", "__sF"], "importedfunctions": ["isxdigit", "deflate", "strchr", "fwrite", "__android_log_write", "read", "perror", "gethostbyname", "ioctl", "access", "send", "setsockopt", "socket", "inflateSetDictionary", "atoi", "fclose", "select", "memchr", "unlink", "fopen", "realloc", "pthread_mutex_trylock", "snprintf", "inet_pton", "pthread_mutexattr_destroy", "__errno", "pthread_self", "pthread_sigmask", "strncpy", "pthread_mutex_lock", "sendmsg", "tzset", "getpeername", "inflateInit_", "bsd_signal", "memcmp", "memmove", "abort", "memset", "pthread_mutex_unlock", "usleep", "localtime_r", "pthread_create", "strdup", "inet_addr", "pthread_getspecific", "fprintf", "deflateEnd", "pthread_once", "sigaction", "getpid", "fread", "srand48", "recv", "deflateSetDictionary", "pthread_setspecific", "pthread_cond_broadcast", "mkdir", "readdir", "close", "connect", "sysconf", "deflateBound", "pthread_exit", "pthread_mutexattr_settype", "pthread_cond_wait", "pthread_cond_init", "inflate", "getsockopt", "recvfrom", "raise", "pthread_cond_destroy", "lrand48", "strlen", "strrchr", "strncmp", "__stack_chk_fail", "time", "inet_ntop", "memcpy", "getsockname", "pthread_mutex_destroy", "malloc", "sendto", "strcpy", "calloc", "ftell", "gettimeofday", "inflateEnd", "pipe", "getenv", "writev", "inflateInit2_", "strerror", "pthread_mutex_init", "deflateInit2_", "sprintf", "free", "fflush", "write", "strcmp", "opendir", "fcntl", "pthread_key_create", "pthread_mutexattr_init", "pthread_join"], "exportedfunctions": ["easy_socket_read", "NAL_session_on_init", "easy_hashx_del_node", "__gnu_Unwind_Restore_VFP", "http_parser_has_error", "easy_message_create_ex", "http_parser_init", "_Unwind_Complete", "easy_url_decode", "easy_pool_clear", "easy_bio_set", "easy_strcpy", "easy_spdy_get_packet_id", "easy_baseth_on_wakeup", "easy_pool_set_allocator", "easy_baseth_init", "__fixunsdfsi", "log_file_flush", "easy_connection_disconnect_ex", "easy_bio_set_handshake", "easy_hash_code", "__gnu_thumb1_case_uhi", "NAL_session_Ping", "easy_pool_set_lock", "easy_connection_disconnect_all", "__gnu_Unwind_Save_VFP", "easy_connection_connect_init", "easy_socket_udpwrite", "ev_set_syserr_cb", "ev_ref", "easy_slightssl_connection_destroy_v2", "easy_baseth_on_start", "JNI_OnUnload", "easy_connection_proxy_on_writable", "easy_request_addbuf_list", "easy_array_destroy", "easy_inet_str_to_addr", "___Unwind_RaiseException", "_Unwind_GetDataRelBase", "easy_bio_get_hdr", "easy_num_to_str", "easy_spdy_destroy", "__gnu_Unwind_Resume_or_Rethrow", "easy_spdy_mem_free", "easy_session_process", "easy_buf_chain_offer", "NAL_session_on_connect", "easy_hash_string_get", "easy_hash_add", "easy_hashx_free", "easy_hash_pair_del", "easy_baseth_once", "__divdf3", "easy_http_add_header", "easy_hashx_find_ex", "__gedf2", "__fixdfsi", "easy_bioh_prepare_ssl_hdr", "easy_buf_create", "easy_socket_get_tcpopt", "easy_connection_wakeup_session", "easy_connection_write_socket", "easy_frame_unpack_window_update", "easy_baseth_pool_on_wakeup", "ev_io_stop", "ev_feed_fd_event", "NAL_session_RstStream", "easy_string_format_size", "__gnu_Unwind_Restore_VFP_D", "easy_inet_add_port", "easy_session_destroy", "http_should_keep_alive", "easy_eio_create", "easy_http_get_header", "log_buffer_full", "__cmpdf2", "log_file_print_msg", "easy_hash_string_add", "___Unwind_Resume", "easy_pool_create", "easy_inet_addr_to_str", "log_file_init", "easy_multissl_client_destroy", "easy_array_create", "easy_http_request_printf", "easy_request_client_done", "easy_http_get_args", "parse_url", "http_parser_execute", "_Unwind_GetRegionStart", "easy_connection_destroy", "easy_log_format_default", "log_file_loop_pthread", "easy_spdy_set_process", "easy_header_create_table", "ev_async_send", "easy_hash_find", "easy_pool_alloc_ex", "log_buffer_free", "log_buffer_get_len", "easy_hash_dlist_add", "ev_async_stop", "NAL_session_Close", "__gtdf2", "__gnu_Unwind_Save_VFP_D_16_to_31", "easy_message_create_nlist", "easy_pool_aligndup", "easy_pool_default_realloc", "__gnu_uldivmod_helper", "___Unwind_Backtrace", "NAL_start_Tnet", "easy_buf_destroy", "easy_string_capitalize", "easy_log_init", "easy_buf_set_cleanup", "easy_connection_disconnect_direct_thread", "easy_hash_key", "NAL_session_on_connect_failed", "NAL_log_file_close", "easy_hash_string_del", "easy_connection_on_udpreadable", "easy_client_list_find", "easy_pool_strdup", "easy_session_create", "easy_spdy_on_send_frame", "easy_eio_stop", "easy_log_set_print", "ev_set_invoke_pending_cb", "easy_time_now", "easy_hash_find_ex", "log_buffer_empty", "easy_pool_cleanup_new", "_Unwind_Backtrace", "easy_string_tohex", "easy_multissl_client_handshake_cb", "easy_connection_get_session", "NAL_inspect", "easy_buf_set_endup", "easy_pool_cleanup_reg", "easy_connection_wakeup_stream", "__gnu_Unwind_Resume", "easy_eio_set_thread_cb", "easy_bio_set_done", "easy_multissl_add_magic_number", "NAL_session_SubmitRequest", "easy_connection_on_accs_readable", "easy_bioh_write_ping", "easy_connection_sendsocket", "easy_host_to_addr", "easy_http_del_header", "__nedf2", "NAL_switch_accs_server", "__gnu_Unwind_Save_WMMXC", "easy_multissl_destroy", "__gnu_ldivmod_helper", "easy_string_tolower", "easy_hash_del_node", "easy_socket_set_tcpopt", "easy_task_set_cleanup", "ev_run", "easy_bio_read_hdr", "NAL_session_on_ping", "_Unwind_VRS_Get", "__gnu_Unwind_Restore_VFP_D_16_to_31", "easy_socket_get_opt", "easy_connection_on_readable", "___Unwind_Resume_or_Rethrow", "__divsi3", "easy_hash_string_next", "easy_socket_set_linger", "easy_hashx_find", "__subdf3", "__gnu_Unwind_RaiseException", "easy_spdy_on_send_ping", "error2error", "easy_connection_proxy_cleanup", "_Unwind_ForcedUnwind", "easy_localtime", "easy_bioh_process_ssl_hdr", "NAL_set_thread_callback", "easy_bioh_init", "easy_tcp_cork_off", "__gnu_Unwind_Backtrace", "__gnu_unwind_frame", "ev_loop_destroy", "NAL_session_SendHead", "easy_log_print_default", "easy_connection_disconnect_direct", "easy_buf_string_copy", "easy_slightssl_cleanup_v2", "__udivdi3", "easy_buf_check_read_space", "easy_socket_set_opt", "NAL_process", "easy_frame_unpack_settings", "easy_buf_on_cleanup", "easy_bioh_ping_cb", "NAL_session_Create", "easy_connection_on_wakeup", "NAL_session_putSSLMeta", "easy_message_create", "NAL_config_log_file", "restore_core_regs", "__eqdf2", "log_buffer_init", "easy_connection_disconnect_thread", "easy_baseth_on_once", "easy_connection_session_build", "easy_baseth_pool_create", "__gnu_Unwind_Save_WMMXD", "__gnu_thumb1_case_si", "ev_userdata", "ev_backend", "easy_hashx_clear", "easy_pool_destroy", "NAL_session_SendFrame", "easy_bioh_ping", "NAL_log_file_flush", "easy_slightssl_client_init_v2", "ev_io_start", "__gnu_Unwind_Save_VFP_D", "__ledf2", "ev_break", "_Unwind_DeleteException", "easy_bioh_prepare_ping", "easy_http_handler_init", "easy_buf_calloc", "easy_baseth_pool_destroy", "__muldi3", "NAL_session_set_option", "__adddf3", "ev_async_fsend", "easy_connection_disconnect", "ev_async_start", "easy_inet_etoa", "http_method_str", "easy_hashx_del", "easy_task_create", "easy_log_print_file", "easy_hashx_destroy", "easy_hash_dlist_del", "easy_socket_usend", "error_detail", "easy_hash_string_create", "log_buffer_write", "easy_client_dispatch", "NAL_session_on_disconnect", "easy_bio_clear_hdr", "easy_connection_connect_ex", "NAL_session_on_bio_ping", "easy_spdy_init", "easy_slightssl_init_v2", "ev_now", "__divdi3", "easy_inspect", "log_buffer_read", "easy_connection_on_once", "_Unwind_Resume_or_Rethrow", "__muldf3", "easy_hash_clear", "easy_connection_on_writable", "lnprintf", "NAL_process_custom_frame_fail", "easy_connection_proxy_on_readable", "easy_errlog_print", "easy_connection_on_udpwritable", "easy_fnv_hashcode", "NAL_session_SendBioPing", "ev_set_allocator", "__fixdfdi", "easy_multissl_client_init", "_Unwind_Resume", "ev_timer_stop", "easy_inet_atoe", "easy_log_print_android", "NAL_session_SendData", "__gnu_thumb1_case_sqi", "easy_multissl_client_do_handshake", "easy_socket_write", "easy_inet_parse_host", "NAL_session_SetOption", "easy_connection_get_packet_id", "log_file_free", "NAL_process_custom_frame", "ev_timer_start", "easy_multissl_init", "easy_log_set_format", "easy_array_alloc", "easy_connection_connect_thread_ex", "easy_socket_non_blocking", "__gnu_unwind_execute", "easy_inet_getpeername", "NAL_session_getSSLMeta", "ev_invoke_pending", "easy_request_addbuf", "easy_log_start_", "__restore_core_regs", "easy_time_start_", "easy_session_async", "easy_header_set_case_sensitive", "ev_loop_new", "easy_array_free", "__extendsfdf2", "__gnu_Unwind_Restore_WMMXD", "_easy_hashx_add", "easy_tcp_cork_on", "__ltdf2", "easy_buf_string_printf", "ev_timer_again", "easy_buf_set_startup", "ev_time", "easy_http_client_on_decode", "easy_spdy_addr_to_str", "_Unwind_RaiseException", "easy_eio_start", "easy_hash_create", "easy_eio_wait", "easy_bioh_read_hdr", "NAL_destroy_Tnet", "easy_connection_send_session_list", "easy_is_non_blocking", "_Unwind_GetLanguageSpecificData", "NAL_task", "easy_spdy_encode_ctrl_frame", "easy_buf_list_len", "easy_string_toupper", "_Unwind_VRS_Pop", "easy_strncpy", "easy_connection_connect_thread", "easy_header_status_code_string", "___Unwind_ForcedUnwind", "log_buffer_get_len2", "easy_socket_tcpwrite", "easy_connection_str", "NAL_resolve_host", "_Unwind_GetCFA", "easy_eio_thread_loop", "JNI_OnLoad", "__clzsi2", "easy_b64_encode", "easy_hashx_create", "easy_socket_error", "easy_bio_write_with_hdr", "easy_http_request_create", "easy_bio_read_data", "easy_hash_del", "easy_http_merge_path", "easy_buf_start", "easy_hashx_add", "log_buffer_get_space_len", "ev_feed_event", "easy_buf_pack", "easy_hashx_resize", "easy_client_list_add", "easy_vsnprintf", "easy_inet_myip", "__gnu_Unwind_Restore_WMMXC", "easy_connection_connect", "_Unwind_GetTextRelBase", "__gnu_thumb1_case_uqi", "easy_bioh_process_ping", "easy_slightssl_client_handshake_cb_v2", "easy_http_server_on_encode", "easy_pool_calloc", "easy_http_server_on_decode", "ev_unref", "easy_message_destroy", "easy_inet_is_ipaddr", "easy_eio_destroy", "ev_set_userdata", "easy_header_set_max_size", "_Unwind_VRS_Set", "NAL_init_Tnet", "easy_http_client_on_encode", "easy_buf_check_write_space", "easy_buf_set_data", "easy_socket_urecv", "easy_slightssl_client_handshake_v2", "__fixunsdfdi", "easy_multissl_send_cb", "easy_http_packet_create", "easy_buf_chain_clear", "__udivsi3", "easy_task_destory"], "allstrings": ["CSpdyAgentInit", "jni/spdyjni/CSpdyAgent.c", "tnet-jni |-| FindClass[SpdyAgent=%p]", "spdySessionConnectCB", "(Lorg/android/spdy/SpdySession;Lorg/android/spdy/SuperviseConnectInfo;)V", "spdyDataChunkRecvCB", "(Lorg/android/spdy/SpdySession;ZILorg/android/spdy/SpdyByteArray;I)V", "spdyDataRecvCallback", "(Lorg/android/spdy/SpdySession;ZIII)V", "spdyDataSendCallback", "spdyStreamCloseCallback", "(Lorg/android/spdy/SpdySession;IIILorg/android/spdy/SuperviseData;)V", "spdyPingRecvCallback", "(Lorg/android/spdy/SpdySession;ILjava/lang/Object;)V", "spdyCustomControlFrameRecvCallback", "(Lorg/android/spdy/SpdySession;Ljava/lang/Object;IIII[B)V", "spdyCustomControlFrameFailCallback", "(Lorg/android/spdy/SpdySession;Ljava/lang/Object;II)V", "bioPingRecvCallback", "(Lorg/android/spdy/SpdySession;I)V", "spdyRequestRecvCallback", "(Lorg/android/spdy/SpdySession;II)V", "spdySessionCloseCallback", "(Lorg/android/spdy/SpdySession;Ljava/lang/Object;Lorg/android/spdy/SuperviseConnectInfo;I)V", "spdyStreamResponseRecv", "(Lorg/android/spdy/SpdySession;I[Ljava/lang/String;I)V", "spdySessionFailedError", "putCertificate", "(Lorg/android/spdy/SpdySession;[BI)I", "getPublicKey", "(Lorg/android/spdy/SpdySession;)Lorg/android/spdy/SslPublickey;", "getPerformance", "(Lorg/android/spdy/SpdySession;Lorg/android/spdy/SslPermData;)V", "putSSLMeta", "(Lorg/android/spdy/SpdySession;[B)I", "getSSLMeta", "(Lorg/android/spdy/SpdySession;)[B", "org/android/spdy/SuperviseData", "tnet-jni |-| FindClass[SuperviseData=%p]", "<init>", "tnet-jni |-| GetMethodID[initSupervise=%p]", "sendStart", "sendEnd", "requestStart", "responseStart", "responseEnd", "uncompressSize", "compressSize", "bodySize", "recvUncompressSize", "recvCompressSize", "recvBodySize", "org/android/spdy/SuperviseConnectInfo", "tnet-jni |-| [CSpdyAgentInit] - claszNew not found.", "connectTime", "reused_counter", "keepalive_period_second", "retryTimes", "timeout", "handshakeTime", "doHandshakeTime", "sessionTicketReused", "org/android/spdy/SslPublickey", "module", "exponent", "seqnum", "error", "org/android/spdy/SSLMeta", "sslMeta", "sslMetaLength", "org/android/spdy/SslPermData", "requestnum", "invalidkey", "keyrequest", "requesttime", "genrequest", "org/android/spdy/SpdyBytePool", "tnet-jni |-| FindClass[SpdyBytePool=%p]", "getInstance", "()Lorg/android/spdy/SpdyBytePool;", "getSpdyByteArray", "(I)Lorg/android/spdy/SpdyByteArray;", "org/android/spdy/SpdyByteArray", "tnet-jni |-| FindClass[SpdyByteArray=%p]", "setByteArrayDataLength", "(I)V", "tnet-jni |-| setSpdyByteArrayDataLength=%p", "getByteArray", "()[B", "tnet-jni |-| CSpdyAgentInit[Success]", "jni/spdyjni/SpdySoOnLoad.c", "spdyandroid |-| [JNI_OnLoad] - error: env == NULL!", "spdyandroid |-| [JNI_OnLoad] - error: SpdyAgentRegisterMethods failed!", "spdyandroid |-| [JNI_OnLoad] - error: SpdySessionRegisterMethods failed!", "jni/spdyjni/NALCallBack.h", "tnet-jni |-| ret=%d", "tnet-jni |-| ses=%p", "tnet-jni |-| env=%p", "tnet-jni |-| vm=%p", "tnet-jni |-| env2=%p", "jni/spdyjni/NALAgentNal-jni.c", "setConTimeout |-| setConTimeout[Begin]", "tnet-jni |-| spdyBeforeThreadEndCallback[begin]", "tnet-jni |-| deattach %p", "tnet-jni |-| spdyBeforeThreadEndCallback[end]", "tnet-jni |-| spdyBeforeThreadStartCallback[Begin]", "spdy-%d", "tnet-jni |-| attach fail err=%d", "tnet-jni |-| attach succes=%p", "tnet-jni |-| p=%p", "tnet-jni |-| [createSession] - host: %s, port: %d", "tnet-jni |-| [createSession] - resolve failed code = %d host = %s", "tnet-jni |-| [createSession] - resolve ip = %u.%u.%u.%u", "tnet-jni |-| [createSession] - resolve proxy ip = %u.%u.%u.%u", "tnet-jni |-| agent=%p, csession=%p", "tnet-jni |-| [createSession] - NAL_session_Create ret=%d", "tnet-jni |-| CSpdySessionFree[csession->data=%p]", "jni/spdyjni/CSpdySession.h", "tnet-jni |-| [CSpdySessionGetJavaSession] - javasession is null!", "tnet-jni |-| [CSpdySessionGetJavaSession] - javasession: %p", "tnet-jni |-| CSpdySessionFree[csession->jse=%p]", "tnet-jni |-| call DVMinit agent=%p", "tnet-jni |-| dvm=%p", "tnet-jni |-| JNI exception!!!!!", "tnet-jni |-| [NAL_session_custom_frame_fail] - att: %p", "tnet-jni |-| NAL_session_bio_ping[begin]", "tnet-jni |-| NAL_session_bio_ping[end]", "tnet-jni |-| NAL_session_ping[begin]", "tnet-jni |-| NAL_session_ping[end]", "tnet-jni |-| NAL_session_error[begin]=%p", "tnet-jni |-| agent=%p", "tnet-jni |-| NAL_session_error[end]", "tnet-jni |-| NAL_session_connect[Begin]", "tnet-jni |-| getSuperviseConnectInfo[count_ptr=%p]", "tnet-jni |-| getSuperviseConnectInfo[connInfo=%p][initConnInfo=%p]", "tnet-jni |-| NewObject[SuperviseConnectInfo=%p]", "tnet-jni |-| NAL_session_connect[end]", "tnet-jni |-| [NAL_session_get_ssl_meta] - att: %p", "tnet-jni |-| [NAL_session_get_ssl_meta] - ses == NULL!", "tnet-jni |-| [NAL_session_get_ssl_meta] - ssl meta == NULL!", "tnet-jni |-| [NAL_session_set_ssl_meta] - att: %p", "tnet-jni |-| [NAL_session_set_ssl_meta] - ses == NULL!", "tnet-jni |-| [NAL_session_set_ssl_meta] - set failed!", "tnet-jni |-| NAL_request_ResponseHead[begin]", "java/lang/String", "tnet-jni |-| NAL_request_ResponseHead[end]", "tnet-jni |-| [NAL_session_custom_frame] - att: %p", "tnet-jni |-| [NAL_request_StreamClose] - status_code: %d", "tnet-jni |-| getSuperviseData[count_ptr=%p]", "tnet-jni |-| NewObject[supervise=%p]", "tnet-jni |-| [NAL_session_disconnect] - ", "tnet-jni |-| getSuperviseConnectEndInfo[count_ptr=%p]", "tnet-jni |-| NAL_request_ResponseData[%p:att=%p]", "tnet-jni |-| NAL_request_ResponseData[Begin]", "tnet-jni |-| try to get env in response Data,dummy=%d", "tnet-jni |-| spdyOnDataChunkRecv[stream_id=%d][userdata=%d]", "tnet-jni |-| env in response Data=%p", "tnet-jni |-| response Data claszSpdyBytePool=%p", "tnet-jni |-| response Data spdyBytePool=%p", "tnet-jni |-| response Data spdyByteArray=%p", "tnet-jni |-| NAL_request_ResponseData[end]", "submitRequest |-| getagent[data=%p]", "spdyandroid |-| [submitRequest] - protocol: %d", "submitRequest |-| submitRequest[data=%p]", "tnet-jni |-| streamData=%p", "tnet-jni |-| pri=%d,len=%d, data=(%s)", "tnet-jni |-| error=%d", "tnet-jni |-| CStreamUserDataFree[streamData->data=%p]", "tnet-jni |-| init Tnet failed", "onInit |-| start Tnet failed", "tnet-jni |-| init Tnet succeed", "tnet-jni |-| uninit Tnet succeed", "org/android/spdy/SpdyAgent", "closeSessionN", "(I)I", "initAgent", "(III)I", "freeAgent", "getSession", "(I[BC)I", "setSessionKind", "(II)I", "setConTimeout", "submitRequest", "(ILorg/android/spdy/SpdySession;I[BC[BC[B[B[BB[Ljava/lang/String;[BZLjava/lang/Object;IIIII)J", "createSession", "(ILorg/android/spdy/SpdySession;I[BC[BC[B[BLjava/lang/Object;II)J", "configLogFileN", "(Ljava/lang/String;II)I", "(Ljava/lang/String;III)I", "logFileFlushN", "logFileCloseN", "inspectN", "(Ljava/lang/String;)V", "switchAccsServerN", "org/android/spdy/SpdySession", "submitRequestN", "(ILjava/lang/String;B[Ljava/lang/String;[BZII)I", "sendCustomControlFrameN", "(IIIII[B)I", "sendHeadersN", "(II[Ljava/lang/String;Z)I", "streamSendDataN", "(II[BIIZ)I", "setOptionN", "submitPingN", "streamCloseN", "submitBioPingN", "/dev/urandom", "jni/slight_ssl/src/ssl_lib.c", "(%s): before mixing by sha256 [&shactx=%p][head=%d][n=%d]", "slight V2 SPDY", "unknown", "(%s): invalid type of SSSL_PEERKEY_TYPE [type=%d]", "jni/slight_ssl/src/slight_ssl_method.c", "(%s): args: [ssl=%p][buf=%p][num=%d][state=%d]", "(%s): [err=%d]", "(%s): args: [ssl=%p][buf=%p][num=%d][iscipher=%d]", "(%s): SSL_UNINITILIZE", "(%s): [use_ticket=%d]", "(%s): ecdh get key error", "(%s): ecdh decode public key error", "(%s): init ecdh [err=%d]", "(%s): gen nonce [err=%d]", "(%s): SSL_INITILIZE", "(%s): 1-rtt handshake again in the session", "(%s): write by 1-rtt[err=%d]", "(%s): WARNING: using 0-rtt like 1-rtt", "(%s): write by 0-rtt[err=%d]", "(%s): SSL_REQUEST [request_num=%d][want_write=%d]", "(%s): sent 0-rtt request[err=%d]", "(%s): sent buffer data in the case of limit[err=%d]", "(%s): SSL_GET_CERT", "(%s): SSL_KEY_INVLID", "(%s): SSL_RESPONCE", "(%s): check time[expire_time=%lu][now=%lu]", "(%s): write data[err=%d]", "(%s): ERROR_STATE", "(%s): [mod=%d]", "(%s): error state when connecting [state=%d]", "(%s): 1-rtt write handshake [ret=%d][want write=%u]", "(%s): 1-rtt read handshake [ret=%d]", "jni/slight_ssl/src/ssl_frame.c", "(%s): while-send [ret=%d][sent=%d][len=%d][errno=%d]", "(%s): send finish [r==%d][errno=%d]", "0123456789abcdef", "jni/slight_ssl/src/ssl_log.h", "(%s): (%s): [%s][data=%s]", "(%s): after write [datalen=%d][space=%d]", "(%s): check space[ret=%d]", "(%s): args: [ssl=%p][buf=%p][len=%d]", "(%s): encrypt [ret=%d]", "(%s): send text [ret=%d]", "(%s): args: [ssl=%p][buf=%p][num=%d][type=%d]", "(%s): len < aesBlock [len=%d][aesBlock=%d]", "(%s): read point=%x, write point=%x", "(%s): [effect=%d]", "(%s): [err=%d][cipherlen=%d][outlen=%d]", "(%s): [datalen=%d]", "(%s): args: [ssl=%p][buf=%p][num=%d]", "(%s): send text [ret=%d][len=%d]", "(%s): args: [ctx=%p][type=%d][buf=%p][num=%d]", "(%s): read ctx block [ret=%d]", "[nonce]", "(%s): [requestnum=%d][requesttime=%lld][gentime=%lld][invalid=%d][requestKey=%d]", "(%s): read ctx block [tmplen=%d]", "(%s): clear write buffer [ret=%d]", "(%s): sending 1-rtt request", "(%s): gen request [ret=%d]", "(%s): loop start [scount=%d][num=%d][type=%d]", "(%s): sending 0-rtt request", "(%s): sending 0-rtt cipher request", "(%s): after sending [ret=%d][scount=%d][num=%d]", "(%s): [bufnum=%d][scount=%d][req=%d]", "(%s): read cache [ret=%d]", "(%s): buffer full [bufnum=%d][rcount=%d]", "read buffer", "(%s): buffer space [user_buf=%d][ssl_buf=%d][recvbuf=%d]", "(%s): received finish [r=%d][errno=%d]", "read", "(%s): ssl_read [ret=%d]", "data read", "(%s): frame parse loop [rstate=%d]", "(%s): READ_INIT", "(%s): READ_HEAD", "(%s): recv rst frame[code=%d][value=%d]", "(%s): version magic code error", "(%s): [type=%d]", "(%s): [keyinvalid=%d]", "(%s): [ticklen=%d][recv_buf_data_len=%d]", "(%s): [expirtime=%lu]", "(%s): READ_SUB_HEAD", "(%s): check length [ret=%d][length=%d]", "(%s): read ctx data [ret=%d][recv_len=%d]", "(%s): [DATA][bufnum=%d][ret=%d][rcount=%d]", "read end", "(%s): loop [ret=%d]", "jni/slight_ssl/src/slight_ssl_spdy.c", "(%s): loop [buf_len=%d][frame_length=%d][iscipher=%d][wrote=%d]", "(%s): args: [ssl=%p][len=%d][frame_len=%d][sid=%d]", "(%s): [iscipher=%d]", "(%s): args: [ssl=%p][len=%d][type=%d][frame_len=%d]", "(%s): [sid=%d][iscipher=%d]", "(%s): write data [effect=%d][err=%d]", "(%s): end [wrote=%d][err=%d][len=%d]", "EC ERROR: EC_F_EC_GROUP_NEW_BY_CURVE_NAME EC_R_UNKNOWN_GROUP\n", "EC ERROR: EC_F_EC_GROUP_NEW_FROM_DATA ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_GROUP_NEW_FROM_DATA ERR_R_BN_LIB\n", "EC ERROR: EC_F_EC_GROUP_NEW_FROM_DATA ERR_R_EC_LIB\n", "SECG curve over a 128 bit prime field", "EC ERROR: EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP EC_R_GF2M_NOT_SUPPORTED\n", "EC ERROR: EC_F_EC_POINT_POINT2OCT ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_POINT2OCT EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_POINT2OCT EC_R_GF2M_NOT_SUPPORTED\n", "EC ERROR: EC_F_EC_POINT_OCT2POINT ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_OCT2POINT EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_OCT2POINT EC_R_GF2M_NOT_SUPPORTED\n", "EC ERROR: EC_F_EC_GROUP_NEW EC_R_SLOT_FULL\n", "EC ERROR: EC_F_EC_GROUP_NEW ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_GROUP_NEW ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_GROUP_SET_CURVE_GFP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_GROUP_GET_DEGREE ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_EX_DATA_SET_DATA EC_R_SLOT_FULL\n", "EC ERROR: EC_F_EC_POINT_NEW ERR_R_PASSED_NULL_PARAMETER\n", "EC ERROR: EC_F_EC_POINT_NEW ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_NEW ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_POINT_COPY ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_COPY EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_GROUP_SET_GENERATOR ERR_R_PASSED_NULL_PARAMETER\n", "EC ERROR: EC_F_EC_POINT_SET_TO_INFINITY ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_SET_TO_INFINITY EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_ADD ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_ADD EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_DBL ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_DBL EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_INVERT ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_INVERT EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_IS_AT_INFINITY ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_IS_AT_INFINITY EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_IS_ON_CURVE ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_IS_ON_CURVE EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINT_CMP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINT_CMP EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_POINTS_MAKE_AFFINE ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "EC ERROR: EC_F_EC_POINTS_MAKE_AFFINE EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES EC_R_INVALID_COMPRESSED_POINT\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES ERR_R_BN_LIB\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES EC_R_INVALID_COMPRESSION_BIT\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES ERR_R_INTERNAL_ERROR\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT2OCT EC_R_INVALID_FORM\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT2OCT EC_R_BUFFER_TOO_SMALL\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT2OCT ERR_R_INTERNAL_ERROR\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_OCT2POINT EC_R_BUFFER_TOO_SMALL\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_OCT2POINT EC_R_INVALID_ENCODING\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_OCT2POINT EC_R_POINT_IS_NOT_ON_CURVE\n", "EC ERROR: EC_F_EC_GFP_MONT_GROUP_SET_CURVE ERR_R_BN_LIB\n", "EC ERROR: EC_F_EC_GFP_MONT_FIELD_MUL EC_R_NOT_INITIALIZED\n", "EC ERROR: EC_F_EC_GFP_MONT_FIELD_SQR EC_R_NOT_INITIALIZED\n", "EC ERROR: EC_F_EC_GFP_MONT_FIELD_ENCODE EC_R_NOT_INITIALIZED\n", "EC ERROR: EC_F_EC_GFP_MONT_FIELD_DECODE EC_R_NOT_INITIALIZED\n", "EC ERROR: EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE EC_R_NOT_INITIALIZED\n", "EC ERROR: EC_F_EC_KEY_NEW ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_KEY_GENERATE_KEY ERR_R_PASSED_NULL_PARAMETER\n", "ECDH ERROR: ECDH_F_ECDH_DATA_NEW_METHOD ERR_R_MALLOC_FAILURE\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ERR_R_MALLOC_FAILURE\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ECDH_R_NO_PRIVATE_VALUE\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ECDH_R_POINT_ARITHMETIC_FAILURE\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ERR_R_INTERNAL_ERROR\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ERR_R_BN_LIB\n", "ECDH ERROR: ECDH_F_ECDH_COMPUTE_KEY ECDH_R_KDF_FAILED\n", "OpenSSL ECDH method", "BN ERROR: BN_F_BNRAND ERR_R_MALLOC_FAILURE\n", "BN ERROR: BN_F_BN_RAND_RANGE BN_R_INVALID_RANGE\n", "BN ERROR: BN_F_BN_RAND_RANGE BN_R_TOO_MANY_ITERATIONS\n", "BN ERROR: BN_F_BN_MOD_LSHIFT_QUICK BN_R_INPUT_NOT_REDUCED\n", "BN ERROR: BN_F_BN_DIV_RECP BN_R_BAD_RECIPROCAL\n", "BN ERROR: BN_F_BN_MOD_SQRT BN_R_P_IS_NOT_PRIME\n", "BN ERROR: BN_F_BN_MOD_SQRT BN_R_TOO_MANY_ITERATIONS\n", "BN ERROR: BN_F_BN_MOD_SQRT BN_R_NOT_A_SQUARE\n", "BN ERROR: BN_F_BN_NEW ERR_R_MALLOC_FAILURE\n", "BN ERROR: BN_F_BN_EXPAND_INTERNAL BN_R_BIGNUM_TOO_LONG\n", "BN ERROR: BN_F_BN_EXPAND_INTERNAL BN_R_EXPAND_ON_STATIC_BIGNUM_DATA\n", "BN ERROR: BN_F_BN_EXPAND_INTERNAL ERR_R_MALLOC_FAILURE\n", "BN ERROR: BN_F_BN_USUB BN_R_ARG2_LT_ARG3\n", "BN ERROR: BN_F_BN_MOD_EXP_RECP ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "BN ERROR: BN_F_BN_MOD_EXP_MONT_CONSTTIME BN_R_CALLED_WITH_EVEN_MODULUS\n", "BN ERROR: BN_F_BN_MOD_EXP_MONT BN_R_CALLED_WITH_EVEN_MODULUS\n", "BN ERROR: BN_F_BN_MOD_EXP_MONT_WORD ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED\n", "BN ERROR: BN_F_BN_MOD_EXP_MONT_WORD BN_R_CALLED_WITH_EVEN_MODULUS\n", "BN ERROR: BN_F_BN_DIV BN_R_NOT_INITIALIZED\n", "BN ERROR: BN_F_BN_DIV BN_R_DIV_BY_ZERO\n", "BN ERROR: BN_F_BN_CTX_NEW ERR_R_MALLOC_FAILURE\n", "BN ERROR: BN_F_BN_CTX_START BN_R_TOO_MANY_TEMPORARY_VARIABLES\n", "BN ERROR: BN_F_BN_CTX_GET BN_R_TOO_MANY_TEMPORARY_VARIABLES\n", "EC ERROR: EC_F_COMPUTE_WNAF ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_COMPUTE_WNAF ERR_R_INTERNAL_ERROR\n", "EC ERROR: EC_F_EC_WNAF_MUL EC_R_INCOMPATIBLE_OBJECTS\n", "EC ERROR: EC_F_EC_WNAF_MUL EC_R_UNDEFINED_GENERATOR\n", "EC ERROR: EC_F_EC_WNAF_MUL ERR_R_INTERNAL_ERROR\n", "EC ERROR: EC_F_EC_WNAF_MUL ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE EC_R_INVALID_FIELD\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT ERR_R_MALLOC_FAILURE\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES ERR_R_PASSED_NULL_PARAMETER\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES EC_R_POINT_AT_INFINITY\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES ERR_R_BN_LIB\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_MAKE_AFFINE ERR_R_INTERNAL_ERROR\n", "EC ERROR: EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE ERR_R_BN_LIB\n", "BN ERROR: BN_F_BN_MOD_INVERSE_NO_BRANCH BN_R_NO_INVERSE\n", "BN ERROR: BN_F_BN_MOD_INVERSE BN_R_NO_INVERSE\n", "JNI_OnLoad", "GetDvmJNIEnv", "getCurrentThreadJNIEnv", "setConTimeout", "spdyBeforeThreadEndCallback", "PollProtectDvmDeAttach", "spdyBeforeThreadStartCallback", "PollProtectDvmAttach", "createSession", "CSpdySessionGetJavaSession", "initAgent", "checkJNIException", "NAL_session_custom_frame_fail", "NAL_session_bio_ping", "NAL_session_ping", "NAL_session_error", "NAL_session_connect", "getSuperviseConnectInfo", "NAL_session_get_ssl_meta", "NAL_session_set_ssl_meta", "NAL_request_ResponseHead", "NAL_session_custom_frame", "NAL_request_StreamClose", "getSuperviseData", "NAL_session_disconnect", "getSuperviseConnectEndInfo", "NAL_request_ResponseData", "submitRequest", "onInit", "onUnInit", "getCurrentThreadJNIEnv", "GetDvmJNIEnv", "checkJNIException", "NAL_request_ResponseData", "CSpdySessionGetJavaSession", "NAL_request_ResponseHead", "NAL_request_StreamClose", "getSuperviseData", "[cut_str] - calloc failed.", "[parse_url] - calloc failed.", "[parse_url] - invalid url.", "http", "https", "[NAL_session_SubmitRequest] - calloc failed.", "[NAL_session_SubmitRequest] - invalid url or calloc failed.", "[NAL_session_SubmitRequest] - easy_header_create_table failed", "[NAL_session_SubmitRequest] - request head key:%s value:%s\n", ":method", "POST", "[NAL_session_SubmitRequest] - POST request.", "calloc memory fail!\n", "easy_session_dispatch: %d\n", "Connection failure: %s\n", "[NAL_session_Close] - close session: %s", "Connection close failure: %s\n", "[NAL_session_Ping] - Ping!", "easy_session_dispatch error\n", "[NAL_session_SendHead] - Not supported yet.", "[NAL_session_SendData] - calloc failed.", "[NAL_session_RstStream] - calloc failed.", "send custom frame, id=%d type %u, flags %u, length %d", "easy_task_dispatch error: %d\n", "easy_io_start error.\n", "easy_io_init error.\n", "[NAL_config_log_file] - log_file_init failed.", "[NAL_config_log_file] - path = %s fileSize = %d fileNum = %d bufferSize = %d", "[NAL_config_log_file] - errno = %s rc = %d", "[NAL_inspect] - %s.", "[NAL_switch_accs_server] - %d", "NAL_session_SendBioPing - ", "parse_url", "cut_str", "NAL_session_SubmitRequest", "NAL_session_Create", "NAL_session_Close", "NAL_session_Ping", "NAL_session_SendHead", "NAL_session_SendData", "NAL_session_RstStream", "NAL_session_SendFrame", "NAL_start_Tnet", "NAL_init_Tnet", "NAL_config_log_file", "NAL_inspect", "NAL_switch_accs_server", "NAL_session_SendBioPing", "[easy_bio_write_with_hdr] write type=%d, len=%u", "len = %u", "[easy_bio_write_with_hdr] cut len from %u to 4095", "[easy_bio_write_with_hdr] prepare new bio block, type=%d, len=%u", "[easy_bio_write_with_hdr] prepare bio header, type=%d, want_send_bytes=%d, already sent_bytes=%d", "[easy_bio_write_with_hdr] prepare bio body, type=%d, want_send_bytes=%u, already sent_bytes=%d", "[easy_bio_write_with_hdr] write ret=%d, errno=%d", "*** writev cnt %d, includes: hdr %d, ping %d, data hdr %d, data %d", "[easy_bio_write_with_hdr] full bio block written. type=%d, len=%d", "[easy_bio_read_hdr] read_bytes=%d, HDR_SIZE=%d", "[easy_bio_read_hdr] n=%d, want read=%d, errno=%d", "[easy_bio_read_hdr] invalid hdr read, type=%d, block len=%u", "[easy_bio_read_hdr] hdr read, type=%d, block len=%u", "[easy_bio_read_hdr] read_bytes=%d, want read", "[easy_bio_read_data_bio] read_bytes=%d, len=%u", "error, param len = %u", "[easy_bio_read_data_bio] block left len=%d, len=%u", "[easy_bio_read_data_bio] n=%d, want_read=%d, errno=%d", "[easy_bio_read_data_bio] full block read. len=%d", "read bio ping %u", "call on_ping fail", "send ping, connection not found", "task create fail", "easy_bioh_write_with_hdr", "easy_bioh_read_hdr", "easy_bioh_read_data_bio", "easy_bioh_ping_cb", "easy_bioh_ping", "jni/NAL/io/easy_client.c", "easy_io_dispatch is failure: stoped: %d\n", "ioth->doing_request_count: %d, EASY_IOTH_DOING_REQ_CNT: %d\n", "session", "task", "[easy_client_dispatch] - dispatch %s %p to %s, status=%d", "lookup: %d", "easy_client_dispatch", "easy_client_list_find", "jni/NAL/io/easy_connection.c", "session_process when destroy c=%p, s=%p", "destroy c=%s, status=%d, reason=%d, reconn=%d", "%s has data", "%s close %d, fd=%d\n", "%s reconn_time: %f, reconn_fail: %d\n", "connection %s, destroied", "[easy_connection_session_build] - c: %p, s: %p, c->handler: %p", "[easy_connection_session_build] - encode: %p", "[easy_connection_session_build] - encode finish.", "%s evio: %d, cb:%p", "[easy_connection_on_readable] %s", "easy_message_create failure, c=%p\n", "easy_buf_check_read_space failure, m=%p, len=%d\n", "%s: do read eof\n", "%s type=client error\n", "%s n: %d\n", "[easy_connection_do_client] - %s n: %d, error: %s(%d)\n", "%s read: %d", "%s read: %d => %s: pending: %d", "client", "server", "%s type=%s error\n", "easy_connection_on_readable finish\n", "[easy_connection_on_accs_readable] %s", "[easy_connection_on_accs_readable] - %s n: %d, error: %s(%d)\n", "easy_connection_on_accs_readable finish\n", "[easy_connection_proxy_on_readable] - ", "easy_buf_check_read_space failure", "HTTP/1.1", "HTTP/1.0", "wrong http version: %.*s", "HTTP/1.1 200", "HTTP/1.0 200", "wrong http status code: %.*s", "n=%d, %d %d %d %d", "%.*s", "\r\n\r\n", "proxy connected, mode=%d", "CONNECT %d.%d.%d.%d:%d HTTP/1.1\r\n%s", "Proxy-Authorization: Basic %s\r\n\r\n", "[easy_connection_proxy_on_writable] - ", "[easy_connection_on_writable] - connect fail: %s(%d)", "%s:%s", "%s n: %d, error: %s(%d)\n", "%s read: %d => %s", "%s on read idle %p", "easy_buf_create failed", "recv server ping: %u", "call on_ping fail", "decode error, %s\n", "not found session, packet_id=%llu %s\n", "easy_session_process error, fd=%d, s=%p\n", "easy_connection_recycle_message error, fd=%d, m=%p\n", "[easy_connection_on_writable] %s writable ", "[easy_connection_on_writable] - connect success!", "timeout_mesg: %p, packet_id: %llu c:%s, repeat:%lf", "timeout_mesg: %p, time: %f (s), packet_id: %llu %s", "%s timeout_conn: status=%d, type=%d, repeat=%lf", "%s write: %d empty: %d", "ret=%d, %s, error: %s (%d)\n", "[[easy_connection_do_client]] - write error.", "do task=%p, status=%d, t->r.user_data=%p, addr=%s, c=%p, http_proxy addr=%s", "do task=%p, status=%d, t->r.user_data=%p, addr=%s, c=%p", "stream is not found", "no data sent", "build session succeed s=%p", "new connect failure.\n", "socket failure: %s (%d)\n", "socket set non-blocking failure: %s(%d)", "easy_spdy_init failed", "connect to %s failure: %s (%d)\n", "easy_hash_create failure.", "[easy_connection_do_connect] - connect success.", "[easy_connection_do_connect] - connect to '%s' start", "process session %p, addr=%s, status=%d, client=%p, client->ref=%d, client->c=%p", "process session %p, addr=%s, status=%d, client=%p", "[easy_connection_do_client] - EASY_REASON_CONN_ERROR(-5) or EASY_REASON_IO_ERROR(-2): %d", "[easy_connection_do_client] - use slightsslV2", "[easy_connection_do_client] - connect error(internal error).", "disconnect direct client=%p, client->ref=%d", "disconnect client=%p, client->ref=%d", "reconnect to '%s', times: %d", "connect to '%s' failure: %s (%d)\n", "reconnect to '%s' start, %d\n", "reconnect to '%s' start\n", "null", "%s_%d_%p", "easy_connection_wakeup_session", "easy_connection_destroy", "easy_connection_session_build", "easy_connection_evio_start", "easy_connection_on_readable", "easy_connection_on_accs_readable", "easy_connection_proxy_on_readable", "easy_connection_proxy_on_writable", "easy_connection_on_udpreadable", "easy_connection_on_readidle", "easy_connection_bio_ping_ack", "easy_connection_do_response", "easy_connection_on_writable", "easy_connection_on_timeout_mesg", "easy_connection_on_timeout_conn", "easy_connection_write_socket", "easy_connection_do_task", "easy_connection_send_session_list", "easy_connection_do_connect", "easy_connection_do_client", "easy_connection_reconn", "easy_connection_autoconn", "easy_eio_destroy, eio=%p\n", "easy_io_wait fatal, eio=%p, tid=%lx\n", "easy_io_wait exit, eio=%p\n", "easy_eio_stop exit, eio=%p\n", "pthread exit: %lx\n", "easy_eio_destroy", "easy_eio_wait", "easy_eio_stop", "easy_io_on_thread_start", "libeasy", "(tid:%llu) ", "[%04d-%02d-%02d %02d:%02d:%02d.%03d]", "%s %s:%d(tid:%llu) ", "easy_log_level", "jni/NAL/io/easy_logfile.c", "[file_list_swap] unlink file.", "[file_list_swap] remove log file error. errno: %d - %s", "[log_file_file_list_insert] remove log file error. errno: %d - %s", "[log_file_init_file_list] can not open dir. errno: %d - %s", "%s/%s", "[log_file_init_file_list] print list:", "[log_file_init_file_list] list[%d]=%s", "[log_file_update_list] unlink file.", "%s_%04d%02d%02d.log", "[log_file_open] unlink file.", "[log_file_check_path] can not mkdir; errno: %d - %s", "[log_file_init] arg: path:%s size:%d filenum:%d", "[log_file_init] path is too long.", "[log_file_init] invalid file_size/file_num.", "[log_file_init] strdup error.", "[log_file_init] malloc error.", "file_list_swap", "log_file_file_list_insert", "log_file_init_file_list", "log_file_check_path", "log_file_init", "jni/NAL/io/easy_message.c", "[easy_message_create_nlist] - error, d: %d", "[easy_message_create_nlist] - error, m: %p, input: %p", "[easy_message_create] - create message error.", "session process is null, s = %p\n", "easy_pool_alloc failed", "destory task, error:%d task_id=%d task=%p task->pool->ref=%u", "easy_message_create_nlist", "easy_message_create", "easy_message_create_ex", "easy_session_process", "easy_session_async", "easy_task_destory", "[easy_bio_write_with_hdr] write type=%d, len=%u", "len = %u", "[easy_bio_write_with_hdr] cut len from %u to 4095", "[easy_bio_write_with_hdr] prepare new bio block, type=%d, len=%u", "[easy_bio_write_with_hdr] prepare bio header, type=%d, want_send_bytes=%d, already sent_bytes=%d", "[easy_bio_write_with_hdr] prepare bio body, type=%d, want_send_bytes=%u, already sent_bytes=%d", "[easy_bio_write_with_hdr] write type=%d, ret=%d, errno=%d", "[easy_bio_write_with_hdr] full bio block written. type=%d, len=%d", "[easy_bio_read_ignore_hdr] read type=%d, ssl want read len=%u", "error, param len = %u", "[easy_bio_read_ignore_hdr] read new bio block, type=%d", "[easy_bio_read_ignore_hdr] bio block len %d, type=%d", "header", "body", "[easy_bio_read_ignore_hdr] read_bytes=%d, bio want_read_bytes=%d, type=%d, going to read %s", "[easy_bio_read_ignore_hdr] n=%d, errno=%d", "[easy_bio_read_hdr] read_bytes=%d, HDR_SIZE=%d", "[easy_bio_read_hdr] n=%d, want read=%d, errno=%d", "[easy_bio_read_hdr] n=%d, errno=%d", "[easy_bio_read_hdr] hdr read, type=%d, invalid block len=%u", "[easy_bio_read_hdr] hdr read, type=%d, block len=%u", "[easy_bio_read_hdr] read_bytes=%d, want read", "[easy_bio_read_data_bio] read_bytes=%d, len=%u", "[easy_bio_read_data_bio] block left len=%d, len=%u", "[easy_bio_read_data_bio] n=%d, want_read=%d, errno=%d", "[easy_bio_read_data_bio] full block read. len=%d", "[easy_bio_read_data] read_bytes=%d, len=%d", "error, param len = %d", "[easy_bio_read_data] block left len=%d, len=%d", "[easy_bio_read_data] n=%d, want_read=%d, errno=%d", "[easy_bio_read_data] full block read. len=%d", "easy_bio_write_with_hdr", "easy_bio_read_ignore_hdr", "easy_bio_read_hdr", "easy_bio_read_data_bio", "easy_bio_read_data", "jni/NAL/io/easy_slightsslv2.c", "SLIGHT_SSL_CTX_new() failed", "[easy_slightssl_client_init]", "SLIGHT_SSL_new failed: %p", "[SLIGHT_SSL_set_mode] rtt:%d", "[SLIGHT_SSL_set_peerkey_type] type::%d", "get slight ssl session failed", "SLIGHT_SSL_set_session_ticket fail,len:%d", "easy_slightssl_client_destroy %s", "[easy_connection_do_client] - slight ssl init error.", "slight ssl connect ret=%d", "SLIGHT_SSL_connect fail: %d", "peer closed connection in SSL handshake", "easy_slightssl_client_handshake_cb_v2", "[easy_slightssl] SLIGHT_SSL_read() failed: %d", "[easy_slightssl] read n=%d", "[easy_slightssl] write start", "[easy_slightssl] - SLIGHT_SSL_write NULL ret %d", "[easy_slightssl] slightssl writev: %d/%d => %s", "[easy_slightssl_session_ticket_cb]", "put slight ssl session failed", "easy_slightssl_init_v2", "easy_slightssl_client_init_v2", "easy_slightssl_connection_destroy_v2", "easy_slightssl_client_handshake_v2", "easy_slightssl_client_handshake_cb_v2", "easy_slightssl_handle_recv", "easy_slightssl_read", "easy_slightssl_write", "easy_slightssl_session_ticket_cb", "easy_buf_create failed", "[easy_multissl_send_cb] %s ", "[easy_multissl_send_cb] - connect fail: %s(%d)", "easy_multissl_client_handshake failed, c=%s", "[multissl] call handshake cb, c=%s", "[easy_slightssl_session_ticket_cb]", "put slight ssl session failed", "[easy_multissl_client_init]", "SLIGHT_SSL_new failed: %p", "get slight ssl session failed", "SLIGHT_SSL_set_session_ticket fail,len:%d", "[easy_multissl_client_destroy]", "[multissl] do handshake, c=%s", "[easy_connection_do_client] - slight ssl init error.", "[multissl] handshake done, c=%s", "[multissl] easy_multissl_handshake, c=%s", "slight ssl connect ret=%d", "fail to handshake, SSL_get_error: %d", "peer closed connection in SSL handshake", "[multissl]server handshake done, c=%s", "[easy_multissl_read] c=%s, size=%d", "[easy_multissl_read] ssl has pending, %d bytes in ssl buffer", "[easy_multissl_read] read hdr ret=%d", "[easy_multissl_read], c=%s, type=%d", "unknown bug %x, %x", "[multissl] easy_multissl_read, c=%s, size=%d, n=%d, type=%d", "[multissl] easy_multissl_read error, c=%s, n=%d, errno=%d", "[multissl] easy_multissl_read error, c=%s, n=%d", "[multissl] c=%s, shutdown", "read fail %d", "[multissl] easy_multissl_write, c=%s", "[easy_slightssl] - SLIGHT_SSL_write NULL ret %d", "write 1, %d", "[multissl] invalid ssl_idx %d, c=%s", "[multissl] easy_multissl_write, ret=%d, size=%d, ssl_idx=%d, errno=%d", "SLIGHT_SSL_CTX_new() failed", "easy_multissl_add_magic_number", "easy_multissl_send_cb", "easy_multissl_client_handshake_cb", "easy_slightssl_session_ticket_cb", "easy_multissl_client_init", "easy_multissl_client_destroy", "easy_multissl_client_do_handshake", "easy_multissl_client_handshake_done", "easy_multissl_handshake", "easy_multissl_read", "easy_multissl_write", "easy_multissl_init", "fd: %d write: %d,%d => %s", "easy_socket_chain_writev", "\raccept-ranges", "\rauthorization", "\rcache-control", "\nconnection", "\fcontent-base", "\u000bcontent-md5", "\rcontent-range", "\fcontent-type", "\rif-none-match", "\rlast-modified", "\fmax-forwards", "\u000bretry-after", "\nuser-agent", "\nset-cookie", "\nkeep-alive", "jni/NAL/io/easy_spdy.c", "[easy_spdy_init] - ", "alloc failed", "1.2.3", "inflateInit failed, ret: %d\n", "deflateInit2 failed: %d", "deflateSetDictionary failed: %d", "create streams table failed", "create nv buf failed", "[%s]:%d", "%d.%d.%d.%d:%d", "%d.%d.%d.%d", "[easy_spdy_client_encode] - ", "easy_buf_create failed", "easy_spdy_stream_create failed", ":method", "POST", ":path", ":scheme", "https", "http", ":version", "HTTP/1.1", ":host", "Accept-Encoding", "gzip,deflate", "stream is NULL", "[easy-spdy] easy_spdy_client_decode, headdump: %s", "[easy-spdy] broken hdr detected!", "[easy-spdy]need read again packet_len: %d, next_read_len: %d", "calloc failed", "[easy-spdy] recv reply: %d, flags: %d", "check reply stream failed: %d", "session is not found", "stream is not found %d", "unpack syn reply failed: %d", "[easy-spdy] recv ping: %u", "malloc buf failed", "recv duplicate GOAWAY", "[easy-spdy] recv goaway: %d, %u", "[easy-spdy] recv rst: %d, %u", "[easy-spdy] recv setting or update frame: %d", "Not implement, frame type: %d", "[easy-spdy] recv data frame: %d, len: %d, flags: %d", "session is not found: %d", "stream %d not found", "stream %d is closed", "frame is too large. data len=%d, stock=%d, limit=%d", "inflate fail: %d", "[easy-spdy] call spdy_process, ret: %d", "spdy_process is NULL", "error_exit.\n", "[easy-spdy] easy_spdy_client_process: %p", "callback is NULL", "opacket is NULL", "[easy-spdy] process ping frame: %d", "[easy-spdy] process data frame with fin : %d", "[easy-spdy] process ctrl frame with fin : %d, type: %d", "no spdy_process", "rst stream, id: %d, err code: %d", "easy_frame_unpack_syn_reply fail: %d, length: %d, date: %s", "easy_hash_string_create failed", "content-encoding", "gzip", "inflateInit fail: %d", "[easy-spdy] close stream: %d, succ: %d", "create pool failed", "[easy_spdy_server_decode_nv] - \n", "easy_buf_check_read_space failed", "deflate failed: %d", "inflateSetDictionary failed: %d", "inflate failed: %d", ":status", "easy_spdy_on_send_frame", "send custom frame, connection not found", "send ping, connection not found", "easy_spdy_init", "easy_spdy_client_encode", "easy_spdy_client_decode", "easy_spdy_client_process", "easy_frame_unpack_syn_reply", "easy_spdy_stream_close", "easy_spdy_stream_create", "easy_spdy_server_decode_nv", "easy_spdy_client_encode_nv", "easy_spdy_deflate", "easy_spdy_inflate", "easy_spdy_encode_ctrl_frame", "easy_spdy_on_send_frame", "easy_spdy_on_send_ping", "(libev) system error", "(libev) cannot allocate %ld bytes, aborting.", "(libev) error creating signal/async pipe", "[select debug] (libev) select fail ENOMEM", "[select debug] (libev) select fail EINVAL. res=%d, e=%d, vec_mac=%d, NFDBITS=%d, timeout=%f, sec=%ld, usec=%ld\n", "[select debug] (libev) select fail. res=%d, ret=%d, e=%d, e_saved=%d, e_error=%d, e_flushed=%d, vec_mac=%d, NFDBITS=%d, timeout=%f, sec=%ld, usec=%ld\n", "[select debug] EBADF detected: fd=%d\n", "[select debug] %d fds got, anfdmax %d\n", "[select debug] malloc 128 fail p=%p\n", "[select debug] malloc 128 succ p=%p\n", "[select debug] malloc 512 fail p=%p\n", "[select debug] malloc 512 succ p=%p\n", "[select debug] malloc 4096 fail p=%p\n", "[select debug] malloc 4096 succ p=%p\n", "jni/NAL/packet/http/easy_http_handler.c", "%s, packet_id=%llu\n", "easy_http_request_create failure\n", "200 OK", "text/html", "HTTP/", "Content-Type: ", "\r\nTransfer-Encoding: chunked", "\r\nContent-Length: ", "Connection: close\r\n", "Connection: keep-alive\r\n", "POST ", "HEAD ", "GET ", " HTTP/1.1\r\n", "Content-Type: application/x-www-form-urlencoded\r\nContent-Length: ", "%lx\r\n", "\r\n0\r\n\r\n", "201 Created", "202 Accepted", "204 No Content", "206 Partial Content", "301 Moved Permanently", "302 Moved Temporarily", "303 See Other", "304 Not Modified", "400 Bad Request", "401 Unauthorized", "402 Payment Required", "403 Forbidden", "404 Not Found", "405 Not Allowed", "406 Not Acceptable", "408 Request Time-out", "409 Conflict", "410 Gone", "411 Length Required", "412 Precondition Failed", "413 Request Entity Too Large", "415 Unsupported Media Type", "416 Requested Range Not Satisfiable", "500 Internal Server Error", "501 Method Not Implemented", "502 Bad Gateway", "503 Service Temporarily Unavailable", "504 Gateway Time-out", "507 Insufficient Storage", "easy_http_request_on_body", "easy_http_server_on_decode", "easy_http_client_on_decode", "DELETE", "HEAD", "POST", "PURGE", "CONNECT", "OPTIONS", "TRACE", "COPY", "LOCK", "MKCOL", "MOVE", "PROPFIND", "PROPPATCH", "UNLOCK", "REPORT", "MKACTIVITY", "CHECKOUT", "MERGE", "M-SEARCH", "NOTIFY", "SUBSCRIBE", "UNSUBSCRIBE", " !\"#$%&'", "-./0123456789", "abcdefghijklmnopqrstuvwxyz", "^_`abcdefghijklmnopqrstuvwxyz", "keep-alive", "close", "connection", "proxy-connection", "content-length", "transfer-encoding", "upgrade", "%d.%d.%d.%d:%d", "%d.%d.%d.%d", "%.2f", "%.2f %cB", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", " KMGTPEZY", "[NAL_process] - hr == NULL, error: %d\n", "[NAL_process] - Get response header.", "[NAL_process] - calloc error.", "[NAL_process] - Finish one request.", "NAL_process_custom_frame_fail id:%d reason:%d errcode:%d\n", "[NAL_session_on_init] - calloc failed.", "[NAL_session_getSSLMeta] - ", "[NAL_session_putSSLMeta] - ", "NAL_process", "NAL_process_custom_frame_fail", "NAL_session_on_init", "NAL_session_getSSLMeta", "NAL_session_putSSLMeta", "jni/NAL/io/easy_baseth_pool.c", "pthread exit: %lx.\n", "pthread_key_create failed: %d", "ev_break: eio=%p\n", "easy_baseth_on_start", "easy_baseth_on_once", "easy_baseth_pool_invoke", "slight_ssl_rand_seed", "SLIGHT_SSL_set_peerkey_type", "slight_ssl_read_state", "slight_ssl_write_state", "slight_ssl_init_ecdh", "slight_ssl_connect", "ssl_write", "sssl_log_print_buffer_def", "ssl_send_text", "ssl_gen_session_ticket_request", "ssl_gen_cipher_text", "ssl_gen_request", "ssl_read_ctx_data", "ssl_write_frame_text", "ssl_gen_plain_text", "ssl_read_frame_text", "ssl_read", "ssl_read_ctx_type", "slight_ssl_write_spdy", "sssl_spdy_parse_data_frame", "sssl_spdy_parse_control_frame"], "stringidentifiers": ["CSpdyAgentInit", "spdySessionConnectCB", "spdyDataChunkRecvCB", "spdyDataRecvCallback", "spdyDataSendCallback", "spdyStreamCloseCallback", "spdyPingRecvCallback", "spdyCustomControlFrameRecvCallback", "spdyCustomControlFrameFailCallback", "bioPingRecvCallback", "spdyRequestRecvCallback", "spdySessionCloseCallback", "spdyStreamResponseRecv", "spdySessionFailedError", "putCertificate", "getPublicKey", "getPerformance", "putSSLMeta", "getSSLMeta", "sendStart", "sendEnd", "requestStart", "responseStart", "responseEnd", "uncompressSize", "compressSize", "bodySize", "recvUncompressSize", "recvCompressSize", "recvBodySize", "connectTime", "reused_counter", "keepalive_period_second", "retryTimes", "timeout", "handshakeTime", "doHandshakeTime", "sessionTicketReused", "module", "exponent", "seqnum", "error", "sslMeta", "sslMetaLength", "requestnum", "invalidkey", "keyrequest", "requesttime", "genrequest", "getInstance", "getSpdyByteArray", "setByteArrayDataLength", "getByteArray", "closeSessionN", "initAgent", "freeAgent", "getSession", "setSessionKind", "setConTimeout", "submitRequest", "createSession", "configLogFileN", "logFileFlushN", "logFileCloseN", "inspectN", "switchAccsServerN", "submitRequestN", "sendCustomControlFrameN", "sendHeadersN", "streamSendDataN", "setOptionN", "submitPingN", "streamCloseN", "submitBioPingN", "unknown", "read", "JNI_OnLoad", "GetDvmJNIEnv", "getCurrentThreadJNIEnv", "setConTimeout", "spdyBeforeThreadEndCallback", "PollProtectDvmDeAttach", "spdyBeforeThreadStartCallback", "PollProtectDvmAttach", "createSession", "CSpdySessionGetJavaSession", "initAgent", "checkJNIException", "NAL_session_custom_frame_fail", "NAL_session_bio_ping", "NAL_session_ping", "NAL_session_error", "NAL_session_connect", "getSuperviseConnectInfo", "NAL_session_get_ssl_meta", "NAL_session_set_ssl_meta", "NAL_request_ResponseHead", "NAL_session_custom_frame", "NAL_request_StreamClose", "getSuperviseData", "NAL_session_disconnect", "getSuperviseConnectEndInfo", "NAL_request_ResponseData", "submitRequest", "onInit", "onUnInit", "getCurrentThreadJNIEnv", "GetDvmJNIEnv", "checkJNIException", "NAL_request_ResponseData", "CSpdySessionGetJavaSession", "NAL_request_ResponseHead", "NAL_request_StreamClose", "getSuperviseData", "http", "https", "POST", "parse_url", "cut_str", "NAL_session_SubmitRequest", "NAL_session_Create", "NAL_session_Close", "NAL_session_Ping", "NAL_session_SendHead", "NAL_session_SendData", "NAL_session_RstStream", "NAL_session_SendFrame", "NAL_start_Tnet", "NAL_init_Tnet", "NAL_config_log_file", "NAL_inspect", "NAL_switch_accs_server", "NAL_session_SendBioPing", "easy_bioh_write_with_hdr", "easy_bioh_read_hdr", "easy_bioh_read_data_bio", "easy_bioh_ping_cb", "easy_bioh_ping", "session", "task", "easy_client_dispatch", "easy_client_list_find", "client", "server", "null", "easy_connection_wakeup_session", "easy_connection_destroy", "easy_connection_session_build", "easy_connection_evio_start", "easy_connection_on_readable", "easy_connection_on_accs_readable", "easy_connection_proxy_on_readable", "easy_connection_proxy_on_writable", "easy_connection_on_udpreadable", "easy_connection_on_readidle", "easy_connection_bio_ping_ack", "easy_connection_do_response", "easy_connection_on_writable", "easy_connection_on_timeout_mesg", "easy_connection_on_timeout_conn", "easy_connection_write_socket", "easy_connection_do_task", "easy_connection_send_session_list", "easy_connection_do_connect", "easy_connection_do_client", "easy_connection_reconn", "easy_connection_autoconn", "easy_eio_destroy", "easy_eio_wait", "easy_eio_stop", "easy_io_on_thread_start", "libeasy", "easy_log_level", "file_list_swap", "log_file_file_list_insert", "log_file_init_file_list", "log_file_check_path", "log_file_init", "easy_message_create_nlist", "easy_message_create", "easy_message_create_ex", "easy_session_process", "easy_session_async", "easy_task_destory", "header", "body", "easy_bio_write_with_hdr", "easy_bio_read_ignore_hdr", "easy_bio_read_hdr", "easy_bio_read_data_bio", "easy_bio_read_data", "easy_slightssl_client_handshake_cb_v2", "easy_slightssl_init_v2", "easy_slightssl_client_init_v2", "easy_slightssl_connection_destroy_v2", "easy_slightssl_client_handshake_v2", "easy_slightssl_client_handshake_cb_v2", "easy_slightssl_handle_recv", "easy_slightssl_read", "easy_slightssl_write", "easy_slightssl_session_ticket_cb", "easy_multissl_add_magic_number", "easy_multissl_send_cb", "easy_multissl_client_handshake_cb", "easy_slightssl_session_ticket_cb", "easy_multissl_client_init", "easy_multissl_client_destroy", "easy_multissl_client_do_handshake", "easy_multissl_client_handshake_done", "easy_multissl_handshake", "easy_multissl_read", "easy_multissl_write", "easy_multissl_init", "easy_socket_chain_writev", "POST", "https", "http", "gzip", "easy_spdy_on_send_frame", "easy_spdy_init", "easy_spdy_client_encode", "easy_spdy_client_decode", "easy_spdy_client_process", "easy_frame_unpack_syn_reply", "easy_spdy_stream_close", "easy_spdy_stream_create", "easy_spdy_server_decode_nv", "easy_spdy_client_encode_nv", "easy_spdy_deflate", "easy_spdy_inflate", "easy_spdy_encode_ctrl_frame", "easy_spdy_on_send_frame", "easy_spdy_on_send_ping", "easy_http_request_on_body", "easy_http_server_on_decode", "easy_http_client_on_decode", "DELETE", "HEAD", "POST", "PURGE", "CONNECT", "OPTIONS", "TRACE", "COPY", "LOCK", "MKCOL", "MOVE", "PROPFIND", "PROPPATCH", "UNLOCK", "REPORT", "MKACTIVITY", "CHECKOUT", "MERGE", "NOTIFY", "SUBSCRIBE", "UNSUBSCRIBE", "abcdefghijklmnopqrstuvwxyz", "close", "connection", "upgrade", "NAL_process", "NAL_process_custom_frame_fail", "NAL_session_on_init", "NAL_session_getSSLMeta", "NAL_session_putSSLMeta", "easy_baseth_on_start", "easy_baseth_on_once", "easy_baseth_pool_invoke", "slight_ssl_rand_seed", "SLIGHT_SSL_set_peerkey_type", "slight_ssl_read_state", "slight_ssl_write_state", "slight_ssl_init_ecdh", "slight_ssl_connect", "ssl_write", "sssl_log_print_buffer_def", "ssl_send_text", "ssl_gen_session_ticket_request", "ssl_gen_cipher_text", "ssl_gen_request", "ssl_read_ctx_data", "ssl_write_frame_text", "ssl_gen_plain_text", "ssl_read_frame_text", "ssl_read", "ssl_read_ctx_type", "slight_ssl_write_spdy", "sssl_spdy_parse_data_frame", "sssl_spdy_parse_control_frame"], "debugstrings": ["(%s): version magic code error", "wrong http version: %.*s", ":version", "GCC: (GNU) 4.6 20120106 (prerelease)", "GCC: (GNU) 4.8"], "localsymbols": [""], "dependencies": ["liblog.so", "libdl.so", "libstdc++.so", "libc.so", "libz.so", "libm.so"], "elfname": "libtnet-2.1.25.so"}