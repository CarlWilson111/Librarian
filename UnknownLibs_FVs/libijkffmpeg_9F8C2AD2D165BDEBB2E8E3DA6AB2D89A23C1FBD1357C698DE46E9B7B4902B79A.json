{"globalvars": ["_ZN6CTimer11m_EventCondE", "ff_hevc_diag_scan4x4_x", "FDK_sbrDecoder_sbr_huffBook_NoiseLevel11T", "FDKaacEnc_huff_ctab2", "ffurl_context_class", "Curl_ssl_openssl", "ff_h264_p_sub_mb_type_info", "ff_ac3_fast_decay_tab", "aSignCb", "qmf_phaseshift_sin_downsamp32", "ff_interleaved_se_golomb_vlc_code", "fixed_invtbl8", "qmf_phaseshift_sin64_cldfb", "mglog", "qmf_phaseshift_cos32_cldfb", "ff_rtmp_protocol", "_ZTSN4Json12StreamWriter7FactoryE", "ff_aac_pow34sf_tab", "FDK_sbrDecoder_sbr_start_freq_88", "SineWindow512", "KBDWindow960", "FDKSEEK_CUR", "Curl_wkday", "bookSbrEnvBalanceC10T", "ff_eac3_default_chmap", "_ZN3fLB16FLAGS_nohelpfullE", "x264_cabac_contexts", "_ZTSN3re214SimplifyWalkerE", "ijkimp_ff_async_protocol", "ff_mpeg4audio_channels", "ff_sqrt_tab", "FDK_sbrDecoder_sbr_start_freq_48", "aaFractDelayPhaseFactorImSubQmf20", "blog", "avpriv_pix_fmt_bps_avi", "FDK_sbrDecoder_sbr_start_freq_22", "FDKaacEnc_tnsEncCoeff3", "FDKaacEnc_mTab_4_3Elc", "ff_h264_golomb_to_pict_type", "v_Huff_envelopeLevelL11F", "FDKaacEnc_quantTableE", "quantizedIIDsFine", "ff_swb_offset_512", "x264_last_coeff_flag_offset_8x8", "p_FDKaacEnc_11025_long_1024", "_ZN3fLS13FLAGS_undefokE", "ff_network_inited_globally", "Curl_cstrdup", "ff_swb_offset_128", "avpriv_pix_fmt_bps_mov", "_ZTVN3re214ToStringWalkerE", "ff_hls_protocol", "aCodebook2StartInt", "p_FDKaacEnc_8000_short_128", "bookSbrEnvBalanceC11T", "ff_h264_mb_sizes", "ff_cos_64", "ff_aac_adtstoasc_bsf", "ff_dither_8x8_32", "_ZTSN3re28CompilerE", "_ZN4Json5Value8maxInt64E", "ff_aac_num_swb_480", "FDK_sbrDecoder_sbr_start_freq_64", "harmonicPhaseX", "ff_avio_class", "_ZN4Json5Value13minLargestIntE", "delayIndexQmf", "uriSafeToPointToW", "ff_cbrt_tab", "_ZN5uripp9authority19IP_LITERAL_END_CHARE", "x264_cabac_entropy", "ff_ijktcphook_protocol", "channelMappingTableWAV", "ff_h264_dequant4_coeff_init", "SineTable480", "ff_ijkhttphook_protocol", "kYuvH709Constants", "ff_aac_num_swb_128", "ijkff_ijklivehook_demuxer", "ff_ue_golomb_vlc_code", "_ZN3fLS12FLAGS_helponE", "v_Huff_envelopeLevelC11F", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10T", "ff_aac_codebook_vector_idx", "ff_ijklongurl_protocol", "FDK_sbrDecoder_sbr_limGains_e", "_ZTVN4Json10FastWriterE", "x264_cabac_size_unary", "ff_hevc_diag_scan8x8_x", "ff_inverse", "nghttp2_enable_strict_preface", "x264_significant_coeff_flag_offset_8x8", "ff_id3v1_genre_str", "yuv422ptoyuy2", "ff_hevc_epel_filters", "KBDWindow120", "FDK_sbrDecoder_envelopeTable_16", "_ZTIN3re28CompilerE", "uriConstPwdW", "RotVectorImag60", "Curl_ccalloc", "RotVectorReal480", "_ZN6google17kStrippedFlagHelpE", "inflate_copyright", "ff_rawvideo_options", "sfbOffsetTables", "ff_ac3_slow_gain_tab", "srt_logger_config", "ff_sine_256", "ff_codec_wav_guids", "FDK_sbrDecoder_envelopeTable_8", "p2_13_20", "rgb16to32", "_ZN3fLS13FLAGS_fromenvE", "FDKaacEnc_quantTableQ", "_ZN5uripp12ipv6_address14SEPARATOR_CHARE", "FDKaacEnc_huff_ltab1_2", "ff_ac3_hearing_threshold_tab", "ff_vorbis_floor1_inverse_db_table", "_ZTSN4Json12StreamWriterE", "_ZN3fLB15FLAGS_nohelpxmlE", "ff_sbr_noise_table", "_ZN3fLB13FLAGS_versionE", "ff_rtmpte_protocol", "ff_h264_cabac_tables", "ff_hevc_parser", "ff_flv_demuxer", "aQuantTable", "rgb24tobgr16", "p_FDKaacEnc_22050_long_1024", "ff_ac3_dec_channel_map", "_ZTVN4Json9ExceptionE", "ff_ac3_rematrix_band_tab", "tslog", "elementsTab", "_ZN3fLS25FLAGS_tab_completion_wordE", "ff_swb_offset_480", "ff_aac_eld_window_512", "ff_libfdk_aac_decoder", "ff_sine_2048", "_ZTVN4Json19StreamWriterBuilderE", "ff_ac3_db_per_bit_tab", "ff_vp9_profiles", "ff_mpa_quant_bits", "x264_cache_ref_func_table", "FDKaacEnc_specExpTableComb", "AACcodeBookDescriptionSCL", "FDK_sbrDecoder_sbr_start_freq_32", "FDKaacEnc_huff_ltabscf", "Curl_month", "ff_h264_p_mb_type_info", "_ZN4Json5Value6maxIntE", "ff_h264_chroma_dc_scan", "ff_rtmpe_protocol", "avpriv_mpa_bitrate_tab", "ff_rgb24toyv12", "z_errmsg", "_ZTVN3re214SimplifyWalkerE", "aDimCb", "_ZN6CTimer11m_EventLockE", "shuffle_bytes_2103", "ff_ac3_log_add_tab", "avpriv_ac3_channel_layout_tab", "_ZTIN3re214ToStringWalkerE", "aBookPsIidFineFreqDecode", "x264_cache_mvd_func_table", "x264_coeff_flag_offset_chroma_422_dc", "ff_eac3_default_cpl_band_struct", "v_Huff_envelopeLevelL11T", "RotVectorReal240", "ff_https_protocol", "MantissaTable", "p_FDKaacEnc_24000_short_128", "ijkimp_ff_ijkmediadatasource_protocol", "huff_decode_table", "aCbPriority", "SineWindow1024", "FDK_sbrDecoder_sbr_smoothFilter", "FDKaacEnc_huff_ltab7_8", "aLargestAbsoluteValue", "x264_cabac_transition_unary", "qmf_phaseshift_cos64_cldfb", "av_sha512_size", "ff_dither_8x8_128", "_ZTSN4Json17CharReaderBuilderE", "rgb16to15", "aaFractDelayPhaseFactorSerImSubQmf20", "ff_hevc_diag_scan4x4_y", "FDK_sbrDecoder_sbr_randomPhase", "ff_id3v2_mime_tags", "KBDWindow1024", "_ZN5uripp6urisyn16AUTHORITY_TRAITSE", "_ZN5uripp11domain_name14SEPARATOR_CHARE", "ff_h264_dequant8_coeff_init", "FDKaacEnc_huff_ctab9", "_ZN4Json5Value14maxLargestUIntE", "_ZN3srt7recvmsgE", "ff_sine_128", "ff_sine_windows", "rgb15to32", "kYvuJPEGConstants", "Alphas", "_ZTSN4Json19StreamWriterBuilderE", "ff_tns_max_bands_480", "av_aes_size", "ff_aac_num_swb_512", "Curl_ack_eintr", "_ZTIN4Json23BuiltStyledStreamWriterE", "ff_ac3_bap_tab", "ff_yuv2rgb_coeffs", "ff_sine_32", "ff_aac_num_swb_1024", "aaFractDelayPhaseFactorImQmf", "ff_sws_context_class", "ff_aac_eld_window_480", "FDKaacEnc_huff_ctab10", "ff_libfdk_aac_encoder", "_ZN3fLS16FLAGS_tryfromenvE", "ff_aac_kbd_long_1024_fixed", "_ZN3re219num_unicode_tolowerE", "sin_twiddle_L64", "p_FDKaacEnc_16000_short_128", "ff_riff_info_conv", "aAllpassLinkDecaySer", "aDimCbShift", "curl_debuglogfile", "ff_ac3_fast_gain_tab", "ff_cos_16384", "ff_cos_16", "FDK_sbrDecoder_aNoIidBins", "ff_codec_wav_tags", "huff_sym_table", "_ZTSN4Json12StyledWriterE", "qmf_phaseshift_sin32_cldfb", "ff_crop_tab", "uyvytoyuv422", "rgb16tobgr24", "x264_chroma_format", "aStateConstant2State", "FDKaacEnc_huff_ctab11", "x264_dct8_weight_tab", "p_FDKaacEnc_88200_short_128", "ff_mov_muxer", "cpu_info_", "ff_hevc_qpel_filters", "sbrTuningTable", "ff_id3v2_34_metadata_conv", "FDK_sbrDecoder_sbr_start_freq_44", "_ZN3re211StringPiece4nposE", "FDKSEEK_SET", "p_FDKaacEnc_16000_long_1024", "ff_rtmpts_protocol", "av_format_ffversion", "uriSafeToPointToA", "_ZTIN4Json9ExceptionE", "FDK_sbrDecoder_sbr_whFactorsTable", "shuffle_bytes_0321", "Curl_cfree", "SineWindow64", "aAllpassLinkDelaySer", "ff_aac_spectral_codes", "ff_m4v_demuxer", "ff_mpegtsraw_demuxer", "ff_h264_quant_div6", "ff_swb_offset_1024", "ff_tns_max_bands_1024", "_ZTIN4Json17CharReaderBuilderE", "KBDWindow128", "p_FDKaacEnc_48000_short_128", "ff_ue_golomb_len", "yvu9_to_yuy2", "avpriv_mpa_freq_tab", "_ZN3fLB19FLAGS_nohelppackageE", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11T", "ff_reverse", "_ZN4Json5Value8minInt64E", "openssl_mutexes", "ff_live_flv_demuxer", "_ZN3re215unicode_tolowerE", "ff_log2_tab", "_ZN5uripp11domain_name10char_classE", "v_Huff_envelopeLevelC11T", "_ZTVN4Json23BuiltStyledStreamWriterE", "_ZN3re218num_unicode_groupsE", "_ZN5uripp6urisyn15FRAGMENT_TRAITSE", "ff_ijksegment_protocol", "_ZN5uripp10ip_address14SEPARATOR_CHARE", "ff_hevc_profiles", "yuy2toyv12", "FDKaacEnc_sideInfoTabShort", "p_FDKaacEnc_96000_long_1024", "rgb24tobgr15", "kYvuH709Constants", "ScaleFactorsFine", "p_FDKaacEnc_64000_short_128", "RotVectorImag240", "_ZTIN4Json12StreamWriterE", "FDK_sbrDecoder_aNoIccBins", "ff_h264_b_mb_type_info", "_ZTIN4Json6WriterE", "_ZTS10CInfoBlock", "ff_opus_decoder", "ff_h264_b_sub_mb_type_info", "deinterleaveBytes", "x264_total_zeros", "Curl_cmalloc", "x264_coeff_abs_level_m1_offset", "FDKaacEnc_mTab_3_4", "ff_tcp_protocol", "bookSbrEnvBalanceL10F", "ff_hevc_demuxer", "ff_interleaved_golomb_vlc_len", "bins2groupMap20", "_ZN4Json5Value13maxLargestIntE", "ijkimp_ff_ijksegment_protocol", "qmf_phaseshift_sin64", "bookSbrNoiseBalanceC11T", "v_Huff_envelopeLevelC10F", "ff_dither_8x8_73", "ff_aac_scalefactor_code", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11T", "qmf_cldfb_320", "aaFractDelayPhaseFactorSerReQmf", "FDKaacEnc_huff_ctab7", "_ZTIN4Json19StreamWriterBuilderE", "ff_dither_8x8_220", "x264_log2_lut", "qmf_cldfb_640", "ff_libx264_encoder", "_ZTIN4Json12StreamWriter7FactoryE", "ff_zigzag_scan", "FDK_sbrDecoder_sbr_start_freq_24", "FDK_sbrDecoder_sbr_limGains_m", "ff_sine_8192", "FDK_sbrDecoder_invTable", "ff_ac3_floor_tab", "aBookPsIidTimeDecode", "ff_aac_kbd_short_128_fixed", "qmf_64", "aBookPsIccTimeDecode", "SineWindow32", "_ZN5uripp9authority21IP_LITERAL_BEGIN_CHARE", "ff_mp4_obj_type", "aaFractDelayPhaseFactorReQmf", "_ZN4Json5Value7maxUIntE", "_ZN6google15gflags_exitfuncE", "_ZN3fLS15FLAGS_helpmatchE", "x264_coeff_token", "ff_se_golomb_vlc_code", "_ZN3re220num_unicode_casefoldE", "ff_h264_dequant8_coeff_init_scan", "ijkimp_ff_ijktcphook_protocol", "p_FDKaacEnc_64000_long_1024", "ff_golomb_vlc_len", "x264_significant_coeff_flag_offset", "x264_levels", "Curl_ssl", "yuyvtoyuv420", "ff_ac3_slow_decay_tab", "x264_count_cat_m1", "FDKaacEnc_sideInfoTabLong", "x264_hpel_ref1", "av_sha_size", "FDK_sbrDecoder_sbr_frame_info4_16", "FDKaacEnc_huff_ctab3", "qmf_phaseshift_cos64", "ff_codec_movaudio_tags", "ff_vorbis_encoding_channel_layout_offsets", "_ZTSN3re214ToStringWalkerE", "LowDelaySynthesis480", "ff_udplite_protocol", "x264_iter_kludge", "ff_aac_scalefactor_bits", "FDKaacEnc_huff_ltab11", "_ZN3UDT12INVALID_SOCKE", "FDKaacEnc_huff_ltab3_4", "v_Huff_envelopeLevelL10F", "ff_ac3_channels_tab", "sqrt_tab", "p_FDKaacEnc_48000_long_1024", "yuv422ptouyvy", "bookSbrNoiseBalanceL11T", "_ZN3re215num_perl_groupsE", "ff_log2_run", "_ZTVN3re28CompilerE", "_ZN8Smoother9smoothersE", "windowSlopes", "FDKaacEnc_huff_ltab9_10", "ff_aac_parser", "glog", "FDK_sbrDecoder_sbr_limiterBandsPerOctaveDiv4", "RotVectorImag480", "FDKaacEnc_tnsCoeff4Borders", "x264_cabac_renorm_shift", "ff_ac3_sample_rate_tab", "groupBorders34", "FDKaacEnc_huff_ctab8", "kYuvJPEGConstants", "_ZTV10CInfoBlock", "vu9_to_vu12", "x264_total_zeros_2x2_dc", "yv12toyuy2", "v_Huff_NoiseLevelC11T", "ff_h264_profiles", "rgb24tobgr24", "aaFractDelayPhaseFactorSerImQmf", "ff_dither_4x4_16", "x264_log2_lz_lut", "ff_square_tab", "InverseQuantTable", "SineWindow128", "FDK_sbrDecoder_sbr_huffBook_EnvBalance11F", "ff_hevc_diag_scan8x8_y", "FDK_sbrDecoder_aFixNoEnvDecode", "ff_sine_512", "ff_mpa_alloc_tables", "p_FDKaacEnc_12000_short_128", "_ZTSN4Json23BuiltStyledStreamWriterE", "_ZTSN4Json6WriterE", "ff_id3v2_3_tags", "_ZN3re23RE27Options14kDefaultMaxMemE", "ff_vc1_profiles", "p_FDKaacEnc_8000_long_1024", "_ZN5uripp6urisyn12QUERY_TRAITSE", "swr_ffversion", "ff_aac_latm_decoder", "_ZN4CUDT11s_UDTUnitedE", "swri_resampler", "ff_aac_spectral_bits", "_ZTIN3re216RepetitionWalkerE", "av_md5_size", "ff_vorbis_vwin", "ff_hevc_mp4toannexb_bsf", "FDK_sbrDecoder_sbr_huffBook_EnvBalance10F", "p_FDKaacEnc_44100_short_128", "ff_img_tags", "ff_aac_decoder", "ff_sine_1024", "yv12touyvy", "FDK_sbrDecoder_sbr_frame_info2_15", "RotVectorReal60", "p_FDKaacEnc_32000_long_1024", "ff_aac_codebook_vectors", "x264_level_token", "_ZN3fLB12FLAGS_nohelpE", "Curl_handler_https", "FDK_sbrDecoder_sbr_frame_info2_16", "uyvytoyuv420", "_ZTVN4Json6WriterE", "FDK_sbrDecoder_sbr_whFactorsIndex", "ff_cos_128", "p_FDKaacEnc_22050_short_128", "ff_ac3_bitrate_tab", "ff_interleaved_ue_golomb_vlc_code", "rgb15tobgr24", "FDKaacEnc_huff_ctab1", "Curl_handler_http", "ELDAnalysis512", "FDK_sbrDecoder_sbr_limiterBandsPerOctaveDiv4_DBL", "ff_sine_4096", "FDK_sbrDecoder_envelopeTable_15", "FDKaacEnc_tnsEncCoeff4", "ff_mp4_muxer", "aMaxCwLen", "ijkimp_ff_ijklongurl_protocol", "ff_hls_demuxer", "_ZN3re216unicode_casefoldE", "rgb32to15", "ff_http_protocol", "_ZN5uripp5query18KEY_VALUE_SEP_CHARE", "aBookPsIccFreqDecode", "ff_dnxhd_profiles", "planar2x", "SineTable512", "aMinOfCbPair", "BitMask", "tns_max_bands_tbl_480", "rgb24to16", "ff_tns_max_bands_512", "av_codec_ffversion", "bookSbrEnvBalanceL11T", "p_FDKaacEnc_12000_long_1024", "ff_h264_parser", "tns_max_bands_tbl", "ff_vorbis_channel_layouts", "FDK_sbrDecoder_sbr_huffBook_NoiseBalance11T", "_ZTI10CInfoBlock", "_ZTIN4Json10FastWriterE", "ff_id3v2_4_tags", "ff_tns_max_bands_128", "bookSbrEnvBalanceC10F", "ff_cos_32", "ff_file_protocol", "_ZN3fLB13FLAGS_helpxmlE", "ff_ijkmediadatasource_protocol", "interleaveBytes", "x264_bit_depth", "_ZN3fLB14FLAGS_helpfullE", "FDKaacDec_tnsCoeff3", "_ZTVN3re216RepetitionWalkerE", "ff_cos_8192", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10F", "_ZN3re214unicode_groupsE", "_ZTVN4Json12StreamWriter7FactoryE", "ff_aac_demuxer", "ff_dither_2x2_4", "ff_mpegts_demuxer", "ExponentTable", "FDKaacEnc_huff_ctab6", "_ZTSN4Json9ExceptionE", "_ZN3fLI28FLAGS_tab_completion_columnsE", "ff_jpeg2000_profiles", "_ZN5uripp6urisyn11PATH_TRAITSE", "channelMappingTablePassthrough", "x264_dct8_weight2_tab", "ff_raw_pix_fmt_tags", "p_FDKaacEnc_24000_long_1024", "ff_aac_kbd_long_1024", "ff_ac3_window", "x264_lambda_tab", "ff_h264_golomb_to_inter_cbp", "_ZTVN3re214CoalesceWalkerE", "sbrTuningTableSize", "_ZN6CTimer17s_ullCPUFrequencyE", "x264_cache_mv_func_table", "_ZN3fLB17FLAGS_helppackageE", "FDK_sbrDecoder_sbr_frame_info1_16", "rgb32tobgr15", "FDKaacEnc_specExpMantTableCombElc", "bookSbrEnvBalanceL11F", "ff_h264_quant_rem6", "rgb32tobgr24", "ff_aac_pred_sfb_max", "x264_weight_none", "uriConstPwdA", "_ZN5uripp6urisyn17ENCODE_BEGIN_CHARE", "ff_h264_decoder", "_ZN4Json5Value4nullE", "rgb24tobgr32", "_ZN3re212posix_groupsE", "ff_codec_movsubtitle_tags", "ff_mov_demuxer", "p8_13_20", "_ZN3re211perl_groupsE", "ff_ac3_frame_size_tab", "_ZN4Json5Value6minIntE", "_ZN5uripp9authority19PORT_SEPARATOR_CHARE", "x264_dct4_weight_tab", "v_Huff_envelopeLevelL10T", "_ZN3re216num_posix_groupsE", "ff_h264_chroma422_dc_scan", "ff_cos_32768", "x264_exp2_lut", "_ZN3fLS14FLAGS_flagfileE", "FDK_sbrDecoder_sbr_start_freq_40", "_ZN3srt7sendmsgE", "_ZTVN4Json12StreamWriterE", "aHuffTable", "x264_run_before", "AACcodeBookDescriptionTable", "ff_mpeg4_video_profiles", "bookSbrEnvBalanceC11F", "_ZN3fLB15FLAGS_helpshortE", "v_Huff_envelopeLevelC10T", "FDKaacEnc_huff_ltab5_6", "p_FDKaacEnc_32000_short_128", "avpriv_mpeg4audio_sample_rates", "x264_decimate_table8", "ff_ffrtmphttp_protocol", "ffp_context_class", "ff_h264_mp4toannexb_bsf", "aMaxOfCbPair", "ff_url_protocols", "_ZN4Json5Value7nullRefE", "FDKaacEnc_tnsCoeff3Borders", "ff_mpa_sblimit_table", "aBookPsIidFreqDecode", "ff_aac_profiles", "FDK_sbrDecoder_sbr_huffBook_EnvLevel10T", "ff_hevc_pel_weight", "p_FDKaacEnc_11025_short_128", "_ZTSN4Json10FastWriterE", "SineWindow480", "ff_dca_profiles", "ff_codec_bmp_tags", "ff_h264_chroma_qp", "randomSign", "_ZTVN4Json17CharReaderBuilderE", "kYuvI601Constants", "ff_cos_1024", "_ZN5uripp6urisyn13SCHEME_TRAITSE", "ff_aac_spectral_sizes", "FDKaacEnc_huff_ctab5", "curl_jmpenv", "ff_dither_2x2_8", "ff_id3v2_tags", "_ZN3UDT5ERRORE", "groupBorders20", "_ZN3fLB17FLAGS_nohelpshortE", "FDKaacEnc_huff_ctab4", "ff_h264_golomb_to_intra4x4_cbp", "FDK_sbrDecoder_sbr_frame_info1_15", "ff_cos_2048", "psTuningTable", "ff_cos_131072", "ff_mpa_quant_steps", "x264_cabac_range_lps", "x264_total_zeros_2x4_dc", "ff_aac_eld_window_512_fixed", "_ZTIN3re214CoalesceWalkerE", "srt_msgctrl_default", "_ZTIN3re214SimplifyWalkerE", "qmf_phaseshift_cos_downsamp32", "ff_hevc_decoder", "ff_id3v2_picture_types", "ff_zigzag_direct", "decayScaleFactTable", "quantizedIIDs", "ff_id3v2_4_metadata_conv", "rgb32to16", "tns_max_bands_tbl_512", "ijkimp_ff_ijkhttphook_protocol", "ff_interleaved_dirac_golomb_vlc_code", "ff_aac_codebook_vector_vals", "uriConstParentW", "x264_cpu_names", "_ZN3fLI30FLAGS_notab_completion_columnsE", "dlog", "x264_lambda2_tab", "ff_h264_i_mb_type_info", "_ZN4Json5Value9maxUInt64E", "aaFractDelayPhaseFactorReSubQmf20", "p_FDKaacEnc_88200_long_1024", "p_FDKaacEnc_96000_short_128", "ELDAnalysis480", "qmf_phaseshift_sin32", "_ZTIN4Json12StyledWriterE", "invCount", "yuyvtoyuv422", "ff_cos_256", "_ZN6CTimer17m_bUseMicroSecondE", "_ZN3fLB15FLAGS_noversionE", "rgb15to16", "ff_rtmps_protocol", "x264_hpel_ref0", "ff_aac_kbd_short_128", "ff_cos_512", "uriConstParentA", "ff_codec_movvideo_tags", "av_util_ffversion", "ff_cos_65536", "rgb24to15", "SineWindow960", "ff_rtmpt_protocol", "ff_mpeg2_video_profiles", "aHuffTreeRvlcEscape", "ff_aac_latm_parser", "ff_vorbis_channel_layout_offsets", "FDK_sbrDecoder_sbr_frame_info4_15", "ff_async_protocol", "_ZTSN3re216RepetitionWalkerE", "logger_fa_all", "v_Huff_NoiseLevelL11T", "_ZN3fLB10FLAGS_helpE", "LowDelaySynthesis512", "_ZTSN3re214CoalesceWalkerE", "ScaleFactors", "_ZTVN4Json12StyledWriterE", "ff_tls_openssl_protocol", "x264_decimate_table4", "Curl_crealloc", "ff_ac3_enc_channel_map", "rgb32tobgr16", "bookSbrEnvBalanceL10T", "qmf_phaseshift_cos32", "FDK_sbrDecoder_sbr_start_freq_16", "ff_udp_protocol", "ff_ipod_muxer", "FDKSEEK_END", "_ZN5uripp4path14SEPARATOR_CHARE", "_ZN5uripp5query14PAIRS_SEP_CHARE", "ff_aac_eld_window_480_fixed", "x264_coeff0_token", "rxlog", "ff_avcodec_locked", "x264_last_coeff_flag_offset", "kYvuI601Constants", "x264_dct4_weight2_tab", "x264_cabac_transition", "__clz_tab", "ff_aac_pow2sf_tab", "ff_cos_tabs", "ff_celt_window2", "ff_list_bsf", "aBookPsIidFineTimeDecode", "FDKaacDec_tnsCoeff4", "aaFractDelayPhaseFactorSerReSubQmf20", "ff_cos_4096", "SineWindow120", "FDK_sbrDecoder_sbr_huffBook_EnvLevel11F", "ff_sine_64", "p_FDKaacEnc_44100_long_1024", "FDKaacEnc_huff_ctabscf", "aHuffTreeRvlCodewds"], "importedglobals": ["_ZTVN10__cxxabiv120__si_class_type_infoE", "_ZTISt12out_of_range", "SL_IID_ANDROIDSIMPLEBUFFERQUEUE", "_ZTIv", "_ZTISt16invalid_argument", "_ZTVSt16invalid_argument", "_ZNSt6__ndk14cerrE", "_ZTIb", "_ZTINSt6__ndk111regex_errorE", "_ZTVSt12out_of_range", "SL_IID_ENGINE", "_ZTIi", "_ZNSt6__ndk17codecvtIcc9mbstate_tE2idE", "SL_IID_PLAY", "_ZTISt13runtime_error", "_ZTISt9bad_alloc", "_ZNSt6__ndk15ctypeIcE2idE", "_ZTIl", "_ZTINSt6__ndk112system_errorE", "_ZNSt6__ndk17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE", "_ZTId", "_ZTVSt12length_error", "__sF", "_ZTVN10__cxxabiv117__class_type_infoE", "_ZTINSt6__ndk18ios_baseE", "_ZTVN10__cxxabiv121__vmi_class_type_infoE", "_ZTISt9exception", "_ZTINSt6__ndk119__shared_weak_countE", "_ZTISt8bad_cast", "SL_IID_VOLUME", "_ZTISt12length_error", "_ZNSt6__ndk17collateIcE2idE", "environ", "_ZNSt6__ndk17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE"], "importedfunctions": ["glUniform1i", "log2", "powf", "readdir", "strcasecmp", "unlink", "ANativeWindow_acquire", "eglDestroyContext", "pthread_mutexattr_init", "pthread_cond_timedwait", "ANativeWindow_fromSurface", "_ZNSt6__ndk112system_errorD2Ev", "sscanf", "_ZNSt6__ndk118condition_variable4waitERNS_11unique_lockINS_5mutexEEE", "prctl", "sem_trywait", "if_indextoname", "pthread_condattr_init", "glGetShaderInfoLog", "ANativeWindow_lock", "cosh", "memset", "fscanf", "rename", "inet_pton", "nanosleep", "localtime_r", "fflush", "_ZNSt6__ndk115__thread_structC1Ev", "readlink", "strrchr", "_ZNKSt6__ndk16locale4nameEv", "sem_destroy", "acos", "ftell", "cbrt", "_ZNKSt6__ndk123__match_any_but_newlineIcE6__execERNS_7__stateIcEE", "_ZNKSt6__ndk18ios_base6getlocEv", "strtoull", "getpeername", "malloc", "eglInitialize", "_ZNKSt8bad_cast4whatEv", "__cmsg_nxthdr", "pthread_detach", "fchown", "syscall", "pthread_cond_wait", "pow", "__system_property_get", "glDeleteTextures", "socket", "_ZNSt8bad_castD2Ev", "mkdtemp", "asin", "pthread_setname_np", "glGetShaderiv", "signal", "_ZNKSt6__ndk16locale9has_facetERNS0_2idE", "_Unwind_Resume", "atoi", "sendfile", "memmove", "memchr", "_ZNSt6__ndk18ios_base5clearEj", "recvmsg", "_ZNSt6__ndk119__thread_local_dataEv", "sched_yield", "cos", "_ZNSt6__ndk119__shared_weak_countD2Ev", "pthread_sigmask", "_ZNSt6__ndk118condition_variable10notify_oneEv", "_ZNSt6__ndk15mutex6unlockEv", "arc4random", "chown", "strtod", "_ZNSt6__ndk112__get_sp_mutEPKv", "getrlimit", "pthread_equal", "stat", "eglReleaseThread", "pthread_getschedparam", "_ZNSt6__ndk18ios_baseD2Ev", "pthread_mutexattr_destroy", "_ZNSt6__ndk18__sp_mut4lockEv", "strncpy", "_ZNSt16invalid_argumentD1Ev", "pthread_mutex_init", "pthread_attr_init", "_ZNSt13runtime_errorD2Ev", "glGetProgramiv", "rewind", "pthread_setspecific", "setenv", "_ZNSt6__ndk112system_errorC2ENS_10error_codeE", "pthread_rwlock_wrlock", "setsid", "socketpair", "_ZNSt6__ndk16localeC1ERKS0_", "_ZNSt11logic_errorC2EPKc", "isspace", "abort", "_ZNSt6__ndk16thread4joinEv", "free", "getpwuid_r", "ANativeWindow_getHeight", "glDisable", "memcmp", "_ZNSt6__ndk111regex_errorC1ENS_15regex_constants10error_typeE", "clock_gettime", "lseek", "_ZNSt6__ndk119__shared_weak_count12__add_sharedEv", "glClearColor", "pread", "pthread_cond_destroy", "inet_addr", "_ZNSt6__ndk120__get_collation_nameEPKc", "_ZSt18uncaught_exceptionv", "setgroups", "symlink", "pthread_once", "sprintf", "qsort", "ANativeWindow_release", "_ZdlPv", "fabs", "strcat", "gai_strerror", "glUseProgram", "getnameinfo", "dlopen", "__sfp_handle_exceptions", "isxdigit", "fileno", "sigaddset", "__gxx_personality_v0", "getpagesize", "wcsncmp", "_ZNSt6__ndk15mutex4lockEv", "atol", "_ZNSt9exceptionD2Ev", "connect", "tolower", "__dynamic_cast", "atoll", "inet_ntop", "frexp", "memalign", "readv", "strncmp", "_ZNSt6__ndk112__next_primeEm", "pthread_key_delete", "close", "shutdown", "modf", "posix_memalign", "pthread_atfork", "lseek64", "setsockopt", "eglQuerySurface", "lrintf", "strncasecmp", "_ZNSt6__ndk118condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILl1ELl1000000000EEEEEEE", "bind", "glEnableVertexAttribArray", "pthread_rwlock_unlock", "pthread_condattr_destroy", "usleep", "wcslen", "strftime", "pthread_create", "scandir", "glCreateProgram", "nice", "glTexParameterf", "dup2", "ferror", "sem_init", "sem_post", "snprintf", "realloc", "__isfinite", "_Znam", "fclose", "_ZNSt6__ndk115system_categoryEv", "glDeleteShader", "glDeleteProgram", "glUniformMatrix4fv", "sched_get_priority_max", "setvbuf", "_ZNSt6__ndk16threadD1Ev", "pthread_rwlock_trywrlock", "isnanf", "sinf", "exp2f", "fopen", "atan", "geteuid", "_ZNSt8bad_castD1Ev", "send", "__assert2", "recvfrom", "utime", "glCreateShader", "strtol", "glEnable", "pathconf", "strerror", "_ZNSt11logic_errorC2ERKS_", "clock_getres", "glGetAttribLocation", "ioctl", "slCreateEngine", "glLinkProgram", "_Znwm", "link", "pthread_condattr_setclock", "_ZNSt6__ndk18ios_base34__set_failbit_and_consider_rethrowEv", "getaddrinfo", "_ZNSt6__ndk19to_stringEx", "glCompileShader", "listen", "pwrite", "vsprintf", "fdatasync", "gethostbyname", "fprintf", "hypot", "inet_aton", "strcpy", "glShaderSource", "glGenTextures", "opendir", "feof", "kill", "unsetenv", "sched_get_priority_min", "glActiveTexture", "_ZNSt6__ndk118condition_variableD1Ev", "mkstemp", "freeaddrinfo", "memcpy", "realpath", "log2f", "lstat", "_ZNKSt9exception4whatEv", "strtoll", "_ZNSt6__ndk116generic_categoryEv", "log", "execvp", "glVertexAttribPointer", "pthread_rwlock_init", "cosf", "rand", "ANativeWindow_getFormat", "getrusage", "glGetError", "fsync", "exit", "glGetProgramInfoLog", "pthread_attr_setstacksize", "getsockname", "eglSwapBuffers", "localeconv", "atan2f", "sigaction", "open", "llrint", "glPixelStorei", "_ZNSt6__ndk19to_stringEj", "pthread_cond_signal", "pthread_setschedparam", "_ZNSt6__ndk16localeD1Ev", "_ZNSt6__ndk18ios_base33__set_badbit_and_consider_rethrowEv", "_ZNSt6__ndk111__call_onceERVmPvPFvS2_E", "fread", "_ZdaPv", "__android_log_print", "_ZNKSt6__ndk16locale9use_facetERNS0_2idE", "eglCreateContext", "_ZNSt13runtime_errorC2EPKc", "pthread_rwlock_rdlock", "strcmp", "rmdir", "epoll_wait", "strchr", "eglMakeCurrent", "fcntl", "_ZNSt11logic_errorC2ERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "memrchr", "sigprocmask", "utimes", "_ZNKSt13runtime_error4whatEv", "_ZNSt6__ndk111regex_errorD1Ev", "vprintf", "sendto", "strtok_r", "sched_getaffinity", "dup", "pthread_mutexattr_settype", "strtoul", "mktime", "fseeko", "strpbrk", "__errno", "glBindTexture", "tan", "gethostname", "_ZNSt6__ndk16chrono12system_clock3nowEv", "_ZNSt6__ndk16chrono12steady_clock3nowEv", "strlen", "setgid", "getpid", "_ZNSt6__ndk18ios_base4initEPv", "glTexImage2D", "sqrt", "_ZNSt6__ndk118condition_variable10notify_allEv", "eglGetConfigAttrib", "_ZNSt6__ndk15mutexD1Ev", "eglGetDisplay", "pthread_self", "getchar", "exp", "perror", "eglTerminate", "dlclose", "write", "_ZNSt9bad_allocD1Ev", "getppid", "_ZNSt6__ndk119__shared_weak_count16__release_sharedEv", "fork", "fgets", "lrint", "glClear", "vfprintf", "glCullFace", "fdopen", "eglCreateWindowSurface", "_ZNSt6__ndk115__get_classnameEPKcb", "tanh", "llrintf", "strtof", "pthread_cond_init", "getenv", "srand", "calloc", "_ZNSt12out_of_rangeD1Ev", "pthread_rwlock_destroy", "_ZSt9terminatev", "_ZNSt6__ndk115__thread_structD1Ev", "_ZNKSt6__ndk119__shared_weak_count13__get_deleterERKSt9type_info", "isinf", "eglChooseConfig", "bsearch", "read", "pthread_key_create", "glViewport", "pthread_mutex_trylock", "ANativeWindow_unlockAndPost", "closedir", "pthread_attr_destroy", "strspn", "getcwd", "pthread_mutex_unlock", "pthread_cond_broadcast", "lroundf", "waitpid", "epoll_create", "exp2", "pthread_mutex_lock", "eglDestroySurface", "cbrtf", "_ZNSt12length_errorD1Ev", "epoll_ctl", "sinh", "isatty", "fstat", "fputs", "glGetString", "strdup", "sin", "pthread_getspecific", "strtok", "strerror_r", "chdir", "atof", "sigemptyset", "mkdir", "sigfillset", "__android_log_vprint", "select", "_exit", "isnan", "ANativeWindow_getWidth", "isalpha", "gmtime_r", "ANativeWindow_setBuffersGeometry", "glDrawArrays", "glTexParameteri", "_ZNSt8bad_castC2Ev", "isalnum", "if_nametoindex", "recv", "glUniformMatrix3fv", "gettid", "accept", "sendmsg", "_ZNSt9bad_allocC1Ev", "poll", "log10f", "_ZNSt6__ndk120__throw_system_errorEiPKc", "_ZNSt6__ndk16localeC1Ev", "_ZNSt6__ndk18__sp_mut6unlockEv", "glGetUniformLocation", "atanf", "ftello", "writev", "inet_ntoa", "log10", "ftruncate", "gettimeofday", "sysconf", "pthread_mutex_destroy", "_ZNSt8bad_castC1Ev", "__isnanf", "fwrite", "fseek", "fputc", "pthread_rwlock_tryrdlock", "_ZNSt6__ndk19to_stringEm", "__sched_cpucount", "setuid", "strlcpy", "glAttachShader", "vsnprintf", "chmod", "getsockopt", "eglGetError", "isupper", "strcspn", "basename", "strnlen", "dlsym", "strstr", "sem_wait", "time", "fnmatch", "_ZNSt6__ndk14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi", "access", "pthread_join", "atan2", "fchmod", "pipe"], "exportedfunctions": ["nghttp2_stream_init", "ff_init_desc_hscale", "_ZN4Json12StyledWriter15writeArrayValueERKNS_5ValueE", "_ZN10CSndBufferD2Ev", "av_application_did_http_open", "StariAvVideoEncoderEncode", "avio_write_marker", "_Z20initSbrPrevFrameDataP19SBR_PREV_FRAME_DATAi", "zcalloc", "ARGBGrayRow_C", "SDL_AoutSetStereoVolume", "_ZN13CRcvFreshLossC2Eiii", "SDL_VoutUnlockYUVOverlay", "uv__pwritev", "ijkmp_set_loop", "avcodec_fill_audio_frame", "_Z19FreeWorkBufferCore1PP16CWorkBufferCore1", "FDKpow", "av_stristart", "J4AC_android_media_MediaCodec__BufferInfo__offset__set__catchAll", "avcodec_send_frame", "_ZN5uripp4pathpLERKS0_", "_ZNK4Json5Value8CZString4dataEv", "ff_simple_idct_12", "ScaleAddRow_C", "_Z28FreeRam_Sbr_detectionVectorsPPh", "_Z34FDKsbrEnc_deleteExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPE", "J4AC_android_media_AudioTrack__getPlaybackParams__asGlobalRef__catchAll", "av_audio_fifo_peek_at", "Curl_pgrsSetDownloadCounter", "uv_try_write_cb", "SDL_AoutFreeP", "_Z33FDKaacEnc_CalcBandEnergyOptimLongPKiPiS0_iS1_S1_", "curl_docalloc", "_ZN4CUDT15epoll_add_usockEiiPKi", "J4AC_android_media_MediaFormat__getInteger__catchAll", "uv__dup3", "ff_network_close", "av_dup_packet", "x264_predict_8x8_h_c", "x264_cpu_num_processors", "_Z29FreeRam_aacEnc_PsyOutElementsPP15PSY_OUT_ELEMENT", "_ZN4Json6Reader12decodeStringERNS0_5TokenE", "Curl_unencode_write", "x264_pixel_sad_8x16_neon", "av_bsf_next", "nghttp2_frame_unpack_goaway_payload2", "nghttp2_map_each_free", "J4AC_android_media_MediaCodec__BufferInfo__flags__get", "nghttp2_map_remove", "nghttp2_bufs_remove", "swr_drop_output", "_Z32transportEnc_RegisterSbrCallbackP12TRANSPORTENCPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "Curl_pipeline_leave_read", "uriParseUriW", "_ZN13CUDTExceptionC2ERKS_", "IJK_EGL_releaseWindow", "ijkmp_stari_set_pcm_callback", "ARGBPolynomial", "J4AC_android_os_Bundle__getInt__withCString", "_ZN4CUDT18epoll_update_ssockEiiPKi", "_ZN3re24Prog6GetDFAENS0_9MatchKindE", "ff_mov_read_chan", "_ZN4CUDT10sendSrtMsgEiPji", "_Z17transportEnc_OpenPP12TRANSPORTENC", "x264_frame_expand_border_mod16", "avio_read_to_bprint", "I422ToARGB1555Row_NEON", "_ZNK7CPacket7getTypeEv", "SDL_Android_AudioTrack_get_min_buffer_size", "uv_interface_addresses", "inflateReset", "nghttp2_session_mem_recv", "inflateGetDictionary", "_ZNK5uripp4patheqERKS0_", "_Z12createSbrDecP11SBR_CHANNELP15SBR_HEADER_DATAP19TRANSPOSER_SETTINGSijjii", "setLimiterAttack", "_Z34CBlock_InverseQuantizeSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "av_buffer_realloc", "_Z18FDKaacEnc_QCOutNewPP6QC_OUTiiiPh", "nghttp2_frame_pack_priority_spec", "x264_adaptive_quant_frame", "_ZN10CUDTUnited7cleanupEv", "av_dict_set_int", "aacDecoder_Open", "av_fast_padded_malloc", "ff_af_queue_close", "av_codec_get_pkt_timebase", "ScaleRowDown2_16_C", "ff_hevc_hls_filters", "x264_deblock_h_chroma_mbaff_neon", "J4AC_android_media_MediaCodec__releaseOutputBuffer__catchAll", "_ZN3re24ProgC1Ev", "J4AC_android_os_Bundle__Bundle__asGlobalRef__catchAll", "ff_add_cpb_side_data", "av_opt_set_pixel_fmt", "_Z25FreeRam_aacEnc_PsyElementPP11PSY_ELEMENT", "_ZN4Json12StyledWriter18hasCommentForValueERKNS_5ValueE", "_ZN10CUnitQueueD2Ev", "_ZN4Json12StyledWriter23writeCommentBeforeValueERKNS_5ValueE", "av_image_copy_to_buffer", "nghttp2_hd_inflate_hd_nv", "Curl_getformdata", "ff_parse_key_value", "Curl_retry_request", "ffurl_connect", "ff_h264qpel_init_aarch64", "ff_get_pcm_codec_id", "_ZN5uripp6urisyn6encodeERKNS0_6traitsERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE", "SDL_AoutFree", "_ZN6google15SetUsageMessageERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "av_frame_get_decode_error_flags", "ffp_get_audio_codec_info", "ff_mov_cenc_avc_parse_nal_units", "ijkmp_stop", "HaiCryptCipher_OpenSSL_EVP", "_ZN3re23RE2C2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "sws_getColorspaceDetails", "_ZN4Json4Path11invalidPathERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi", "_ZN16CRendezvousQueue16updateConnStatusE11EReadStatus14EConnectStatusRK7CPacket", "_ZN3re24Prog14MarkSuccessorsEPNS_11SparseArrayIiEES3_PNSt6__ndk16vectorINS5_IiNS4_9allocatorIiEEEENS6_IS8_EEEEPNS_10SparseSetTIvEEPS8_", "uriCompareRangeW", "_ZN6CEPoll4waitEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_lS7_S7_", "ffp_destroy", "_ZN9CRcvQueue11setListenerEP4CUDT", "_Z20CProgramConfig_ResetP14CProgramConfig", "_Z46GetRequiredMemRam_Sbr_prevEnvelopeCompensationv", "uri_TESTING_ONLY_ParseIpSixA", "ff_openssl_deinit", "uv__server_io", "_ZN3re23RE23Arg17parse_short_radixEPKcmPvi", "av_aes_ctr_alloc", "x264_macroblock_write_cabac", "ScalePlaneBilinearUp_16", "ff_h264dsp_init", "J4AC_android_os_Bundle__putInt__catchAll", "ijkav_register_ijksegment_protocol", "av_get_channel_name", "av_get_bytes_per_sample", "x264_validate_levels", "nghttp2_stream_dep_insert", "av_application_will_http_open", "ARGBSobel", "ARGBRect", "_ZN5uripp11domain_nameC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN4Json6ReaderC2Ev", "SDL_AoutSetDefaultLatencySeconds", "_ZN4Json5Value8CZStringC2Ej", "ARGBToRGB565DitherRow_Any_NEON", "uv_idle_start", "Curl_http_setup_conn", "J4AC_java_nio_ByteBuffer__limit", "shuffle_bytes_3210", "SDL_SpeedSamplerAdd", "_Z18FDKaacEnc_PsyClosePP12PSY_INTERNALPP7PSY_OUT", "uv__strdup", "ScaleRowDown2_Any_NEON", "av_get_channel_layout_nb_channels", "SDL_AMediaFormatJava_createVideoFormat", "ijkmp_android_set_surface", "ARGBToBGRA", "x264_param_apply_profile", "SetRow_C", "nghttp2_bufs_add", "ff_simple_idct44_add", "_Z16FDKaacEnc_PsyNewPP12PSY_INTERNALiiPh", "x264_predict_8x8c_p_c", "uriRemoveDotSegmentsExW", "_ZN4Json5Value8CZStringC1ERKS1_", "Curl_resolver_wait_resolv", "_Z24sbrGetSyntheticCodedDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAM", "curl_dofreeaddrinfo", "_ZNK7CPacket17getMsgCryptoFlagsEv", "x264_pixel_satd_16x16_neon", "SDL_VoutUnrefYUVOverlay", "ffp_toggle_buffering", "J4AC_android_media_MediaCodec__flush__catchAll", "av_get_audio_frame_duration2", "ff_codec_open2_recursive", "ffurl_open", "_ZN9CSndUList7insert_ElPK4CUDT", "_Z23FDKhybridSynthesisApplyP18FDK_SYN_HYB_FILTERPKiS2_PiS3_", "av_format_get_video_codec", "_ZN10CUDTUnitedC1Ev", "ff_mp4_read_descr_len", "SDL_AMediaCodec_getSerial", "avio_rb32", "x264_mc_weight_w16_nodenom_neon", "av_opt_freep_ranges", "ComputeCumulativeSumRow_C", "nghttp2_session_callbacks_set_error_callback2", "ScaleRowDown4Box_C", "UYVYToARGB", "_Z29FDKsbrEnc_fastTransientDetectP18FAST_TRAN_DETECTORPKPKiS2_iPh", "nghttp2_hd_emit_newname_block", "av_frame_get_side_data", "SDL_AMediaCodecJava_dequeueOutputBuffer", "ARGB1555ToYRow_C", "nghttp2_session_on_response_headers_received", "_Z42transportEnc_LatmCountTotalBitDemandHeaderP11LATM_STREAMj", "_ZN4Json23BuiltStyledStreamWriter8unindentEv", "_Z23GetRam_aacEnc_QCelementi", "curl_strnequal", "_ZN3re26Regexp10ParseState14PushRepetitionEiiRKNS_11StringPieceEb", "I422ToYUY2", "_ZN3re26Regexp5EqualEPS0_S1_", "av_format_set_control_message_cb", "_ZN3re214ByteMapBuilder5BuildEPhPi", "_ZNK4Json17ValueIteratorBase7isEqualERKS0_", "ScaleARGBRowDownEvenBox_Any_NEON", "_Z9schur_diviii", "sbrDecoder_drcFeedChannel", "_Z8fDivNormii", "ARGB1555ToARGB", "adler32_combine", "avcodec_flush_buffers", "_ZN3re28BitStateD2Ev", "_ZNK5uripp3uri8encodingEv", "Curl_mime_set_subparts", "nghttp2_http_record_request_method", "nghttp2_hd_deflate_change_table_size", "_ZN6google13VersionStringEv", "inflateInit_", "_ZN4Json5ValueC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "srt_send", "_ZN3re26Regexp9HaveMatchEiNS0_10ParseFlagsE", "_ZN3re214ByteMapBuilder7RecolorEi", "ffio_free_dyn_buf", "ff_h264_idct_dc_add_14_c", "ijkmp_get_current_position", "ScaleFilterCols_C", "_ZN3re217ParseUnicodeGroupEPNS_11StringPieceENS_6Regexp10ParseFlagsEPNS_16CharClassBuilderEPNS_12RegexpStatusE", "J4AC_android_media_AudioTrack__play", "ff_get_unscaled_swscale_aarch64", "ff_decode_frame_props", "x264_predict_4x4_ddl_neon", "av_samples_fill_arrays", "J4AC_java_nio_ByteBuffer__limit__catchAll", "_Z26GetRequiredMemRam_PsEncodev", "_ZNK4Json5Value7asInt64Ev", "ScaleRowDown34_0_Box_Any_NEON", "_ZN4Json19StreamWriterBuilder11setDefaultsEPNS_5ValueE", "_ZNK4Json5Value4sizeEv", "sws_getContext", "_Z19aacEncDefaultConfigP13AACENC_CONFIGP10USER_PARAM", "nghttp2_session_get_next_ob_item", "avformat_license", "_ZN4Json5ValueaSES0_", "uv__nonblock_ioctl", "srt_setsockopt", "Curl_mk_dnscache", "uv_os_getenv", "ff_network_wait_fd_timeout", "_Z20FDKsbrEnc_AddVecLeftPiS_S_i", "x264_predict_4x4_dc_c", "_Z29GetRequiredMemRam_ParamStereov", "_ZN6CEPoll12update_usockEiRKiPS0_", "_ZN4Json12StyledWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE", "_ZN10CUDTUnited6acceptEiP8sockaddrPi", "av_get_planar_sample_fmt", "_ZNK4Json17ValueIteratorBase5derefEv", "SDL_AMediaFormatJava_init", "_ZN4Json17ValueIteratorBaseC2Ev", "SDL_AMediaFormatJava_getObject", "ff_simple_idct_put_8", "avcodec_alloc_context3", "Curl_timediff", "FDKprintf", "I422ToARGB", "sbrEncoder_Init", "nghttp2_frame_trail_padlen", "_Z20GetRam_aacEnc_PsyOuti", "Curl_hash_pick", "avio_open", "_Z17FDKaacEnc_psyMainiP11PSY_ELEMENTP11PSY_DYNAMICP17PSY_CONFIGURATIONP15PSY_OUT_ELEMENTPsPii", "ijkmp_android_set_mediacodec_select_callback", "ff_af_queue_remove", "_ZN8CChannelC1Ev", "_ZN4CUDT12getsndbufferEiPmS0_", "nghttp2_session_update_local_settings", "_ZN7logging10FormatTimeEm", "uv_fs_close", "ff_init_desc_chscale", "uv__malloc", "ScaleARGBRowDownEven_C", "Curl_read_plain", "av_url_split", "Curl_follow", "curl_easy_init", "av_register_bitstream_filter", "ff_hevc_set_neighbour_available", "avio_rb64", "_Z32GetRequiredMemRam_Sbr_v_k_masterv", "nghttp2_session_get_stream_remote_window_size", "av_find_program_from_stream", "_ZN3re24Prog8EmitListEiPNS_11SparseArrayIiEEPNSt6__ndk16vectorINS0_4InstENS4_9allocatorIS6_EEEEPNS_10SparseSetTIvEEPNS5_IiNS7_IiEEEE", "ff_get_unscaled_swscale", "_Z25GetRequiredMem_AacEncoderv", "x264_mb_predict_mv", "uv__run_prepare", "ff_ape_write_tag", "av_application_on_tcp_did_open", "ff_mov_cenc_write_packet", "rgb12to15", "ff_h264_direct_dist_scale_factor", "I420ToYUY2", "_ZN4Json18StyledStreamWriter5writeERNSt6__ndk113basic_ostreamIcNS1_11char_traitsIcEEEERKNS_5ValueE", "_Z20InitHybridFilterBankP6HYBRIDaaPKh", "ARGBToRGB565DitherRow_NEON", "ScaleRowDown38_2_Box_Any_NEON", "ff_avcodec_find_decoder", "uriEscapeW", "nghttp2_strerror", "sbrDecoder_Apply", "av_hmac_final", "ScaleFilterCols64_16_C", "uv__epoll_create1", "I422ToRGBARow_Any_NEON", "x264_predict_16x16_v_neon", "nghttp2_session_is_my_stream_id", "Curl_fetch_addr", "nghttp2_frame_headers_free", "ARGBGray", "uv__process_close", "BlendPlaneRow_C", "nghttp2_session_add_settings", "av_program_add_stream_index", "_ZN3UDT13geterror_descEii", "_ZN4CUDT6bstatsEP12CBytePerfMonbb", "av_format_get_metadata_header_padding", "_ZN3re26Regexp19RemoveLeadingRegexpEPS0_", "_Z28GetRequiredMemAACdynamic_RAMv", "_ZN4Json5Value10setCommentEPKcNS_16CommentPlacementE", "J4AC_android_media_AudioTrack__setPlaybackRate__catchAll", "av_strtod", "_Z25FDKsbrEnc_DestroyPSEncodePP11T_PS_ENCODE", "_ZN10CSndBuffer12updInputRateEmii", "av_register_all", "GetARGBBlend", "av_sha512_final", "nghttp2_submit_goaway", "Curl_mime_contenttype", "_ZN12CSndLossList10getLostSeqEv", "ff_interleave_packet_per_dts", "IJK_GLES2_Renderer_isFormat", "_ZN3re24Prog14BuildEntireDFAENS0_9MatchKindERKNSt6__ndk18functionIFvPKibEEE", "uv_pipe_pending_instances", "srt_socket", "ff_h264_idct8_add4_12_c", "ijkmp_set_playback_rate", "_ZN6google21RegisterFlagValidatorEPKdPFbPKcdE", "FDKstrcmp", "_ZN4CUDT13ConnectSignalE18ETransmissionEvent9EventSlot", "_ZN4Json5ValueC2El", "_ZN4CUDT4bakeEPK8sockaddrii", "x264_macroblock_cache_allocate", "destroyLimiter", "ff_simple_idct_10", "ABGRToARGB", "_ZN10CRcvBufferD2Ev", "av_packet_copy_props", "ff_h264_slice_context_init", "av_bsf_free", "_Z31GetRequiredMemRam_SbrDecElementv", "ff_h264_luma_dc_dequant_idct_14_c", "_Z21GetRam_Sbr_envRBufferiPh", "Curl_conn_data_pending", "x264_intra_sa8d_x3_8x8_neon", "_ZN3re24ProgD2Ev", "av_fifo_generic_read", "ijkmp_change_state_l", "av_log_ask_for_sample", "nghttp2_session_get_effective_local_window_size", "ff_init_cabac_encoder", "ff_check_alignment", "uv_queue_work", "StariAvVideoEncoderGetCodecConfig", "_ZN4CUDT15existingSocketsEv", "_ZN3re221FactorAlternationImpl6Round1EPPNS_6RegexpEiNS1_10ParseFlagsEPNSt6__ndk16vectorINS_6SpliceENS5_9allocatorIS7_EEEE", "x264_encoder_reconfig_apply", "x264_pixel_ssd_16x16_neon", "_ZN3UDT6socketEiii", "_ZN4Json6Reader18addErrorAndRecoverERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS0_5TokenENS0_9TokenTypeE", "avpriv_mpegts_parse_open", "uv_free_interface_addresses", "pcmDmx_GetParam", "IJK_GLES2_Renderer_setGravity", "_Z24FreeRam_aacEnc_QCelementPP14QC_OUT_ELEMENT", "swresample_license", "_ZNK3re211StringPiece5rfindERKS0_m", "ScaleARGBCols_NEON", "_ZN4Json12PathArgumentC1Ev", "sws_alloc_context", "avpriv_aac_parse_header", "_ZN8CChannel13setSndBufSizeEi", "_ZN3re26Regexp10ParseState12DoRightParenEv", "uv_ref", "J4AC_android_media_AudioTrack__setSpeed__catchAll", "uv_fs_lstat", "ff_h264_idct_add16_14_c", "sws_normalizeVec", "_ZN3re222MaybeParsePerlCCEscapeEPNS_11StringPieceENS_6Regexp10ParseFlagsE", "Curl_pipeline_penalized", "_Z15drmRead_CrcInitP10STRUCT_DRM", "x264_opencl_close_library", "ff_startcode_find_candidate_c", "_ZN3re23RE2C1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN4Json9OurReaderC2ERKNS_11OurFeaturesE", "av_read_image_line", "x264_frame_expand_border_lowres", "_Z38FDKsbrEnc_InitSbrFastTransientDetectorP18FAST_TRAN_DETECTORiiii", "ff_init_vscale", "SDL_DestroyCondP", "ABGRToYRow_NEON", "nghttp2_session_consume_stream", "_ZN4CUDT12getsockstateEi", "ff_replaygain_export", "_Z29FDKaacEnc_ChannelElementWriteP12TRANSPORTENCP12ELEMENT_INFOPP14QC_OUT_CHANNELP15PSY_OUT_ELEMENTPP15PSY_OUT_CHANNELj17AUDIO_OBJECT_TYPEaPih", "uv__set_process_title", "ffp_packet_queue_init", "ff_stream_encode_params_copy", "ARGBAddRow_C", "_Z25GetRam_aacEnc_ElementBitsi", "_ZN4CUDT8updateCCE18ETransmissionEvent12EventVariant", "ff_rtmp_packet_destroy", "FDKafree", "_ZN5CHash6insertEiP4CUDT", "ff_avcodec_decode_audio4", "_ZN10CUDTUnited12epoll_createEv", "J4A_loadClass__J4AC_android_media_MediaFormat", "_ZN3re23DFA10ResetCacheEPNS0_8RWLockerE", "_Z28transportEnc_WriteAccessUnitP12TRANSPORTENCiii", "_Z30FDKsbrEnc_FindStartAndStopBandiiiiiPiS_", "srt_connect", "nghttp2_session_callbacks_set_on_header_callback", "_Z31FreeAacDecoderStaticChannelInfoPP28CAacDecoderStaticChannelInfo", "_ZNK13CUDTException8getErrnoEv", "ffpipeline_set_surface", "Curl_hash_delete", "uv__inotify_rm_watch", "ijkmp_seek_to_l", "J4A_ThrowIllegalStateException", "avio_flush", "Curl_pgrsLimitWaitTime", "x264_pixel_ssd_4x4_neon", "uncompress", "ff_hevc_set_new_ref", "Curl_http2_request_upgrade", "x264_frame_expand_border_chroma", "_ZN4Json6Reader11getNextCharEv", "SDL_SpeedSampler2GetSpeed", "av_frame_set_channels", "ABGRToYRow_C", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_", "_ZN4Json17ValueIteratorBaseC2ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "J4AC_java_nio_ByteBuffer__allocateDirect", "_ZN6CTimer15condTimedWaitUSEP14pthread_cond_tP15pthread_mutex_tm", "_ZN6CEPoll12remove_usockEiRKi", "rgb24to32", "_ZN3re216CharClassBuilderC1Ev", "x264_predict_8x8c_dc_c", "FDKaacEnc_AacInitDefaultConfig", "_ZN3re23RE23Arg10parse_uintEPKcmPv", "_Z25FDKaacEnc_InitDownsamplerP11DOWNSAMPLERii", "uv_key_set", "_Z10PSEnc_InitP19T_PARAMETRIC_STEREOP14T_PSENC_CONFIGiiPh", "_ZN3re23DFA10StateSaverC2EPS0_PNS0_5StateE", "nghttp2_frame_unpack_settings_entry", "_ZN4Json5ValueC1ERKNS_12StaticStringE", "_Z43GetRequiredMemRam_aacEnc_AdjThrStateElementv", "ffpipenode_free", "_ZN3re28Compiler10BeginRangeEv", "_ZN4Json13ValueIteratorC1ERKS0_", "_Z19drmRead_CrcStartRegP10STRUCT_DRMP13FDK_BITSTREAMi", "_ZN10CRcvBuffer7addDataEP5CUniti", "_ZN3re26Regexp10ParseStateD1Ev", "ffio_init_context", "_ZN9CSndQueue4initEP8CChannelP6CTimer", "_ZN3UDT4recvEiPcii", "_ZN3re26RegexpC1ENS_8RegexpOpENS0_10ParseFlagsE", "x264_encoder_close", "_Z22FDKaacEnc_lookUpPnsUseiiii", "_ZN9CRcvUListC1Ev", "curl_mvsnprintf", "ARGBQuantizeRow_NEON", "ff_rfps_calculate", "Curl_getaddrinfo_ex", "_ZNK4Json5ValueixEj", "ffp_global_set_log_level", "zlibCompileFlags", "_ZN3UDT8recvfileEiRNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "av_get_frame_filename2", "_ZN6CGuard12releaseMutexER15pthread_mutex_t", "RAWToRGB24Row_NEON", "Curl_if2ip", "_ZN3re212StringPrintfEPKcz", "x264_dequant_4x4_dc_neon", "_Z24GetRam_SbrDecWorkBuffer1i", "IJK_GLES2_getVertexShader_default", "avio_free_directory_entry", "nghttp2_session_callbacks_set_on_frame_send_callback", "av_frame_set_best_effort_timestamp", "_ZN4Json10FastWriterC1Ev", "av_stream_get_recommended_encoder_configuration", "Curl_dedotdotify", "_ZN4Json18StyledStreamWriter18hasCommentForValueERKNS_5ValueE", "swr_convert", "FDKatof", "_ZNK4Json5Value8isObjectEv", "_Z8DecodePsP6PS_DECh", "ScaleRowDown4Box_Any_NEON", "Curl_isupper", "ff_hevc_luma_mv_merge_mode", "_Z22FreeRam_Sbr_v_k_masterPPh", "_Z10CPns_ApplyPK8CPnsDataPK8CIcsInfoPiPKsS7_PK16SamplingRateInfoii", "FDKsprintf", "SDL_AMediaCodec_FakeFifo_flush", "curl_free", "FDKfree", "curl_mvaprintf", "_Z26GetRam_aacEnc_BitCntrStatei", "_ZN3re23RE23Arg15parse_short_hexEPKcmPv", "curlx_sotouz", "ff_color_frame", "av_assert0_fpu", "_ZN3re28Compiler3AltENS_4FragES1_", "_ZN4Json4Path12addPathInArgERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorIPKNS_12PathArgumentENS5_ISD_EEEERNS1_11__wrap_iterIPKSD_EENSB_4KindE", "_ZNK4Json5Value5beginEv", "nghttp2_hd_inflate_new", "curl_formfree", "av_sha512_update", "J4AC_android_media_MediaCodec__BufferInfo__flags__set", "Curl_compareheader", "applyLimiter", "av_packet_merge_side_data", "_Z21initSlotBasedRotationP6PS_DECii", "_Z23FDKsbrEnc_Shellsort_intPii", "av_get_pix_fmt_loss", "x264_predict_8x8_dc_c", "ff_amf_write_string2", "nghttp2_session_create_idle_stream", "ff_emulated_edge_mc_16", "ARGBGrayRow_NEON", "swri_audio_convert_alloc", "ffpipeline_set_vout", "x264_param_apply_fastfirstpass", "SDL_VoutFreeYUVOverlay", "_ZN10CSndBuffer21setInputRateSmpPeriodEi", "ff_reduce_index", "ffpipeline_lock_surface", "RGB24ToARGBRow_C", "av_format_get_audio_codec", "av_sdp_create", "CopyPlane_16", "uv_fs_chown", "ijkmp_pause", "Curl_readwrite", "_ZN3re23RE23Arg20parse_longlong_octalEPKcmPv", "_ZN3re213StringAppendFEPNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz", "_Z22aacDecoder_drcSetParamP8CDrcInfo16AACDEC_DRC_PARAMi", "nghttp2_frame_unpack_priority_payload", "x264_zigzag_scan_8x8_frame_neon", "uriParseUriA", "ff_thread_get_format", "SDL_MixAudio", "ScaleRowDown34_Any_NEON", "uv_udp_set_multicast_ttl", "_ZN3re214CoalesceWalker9PostVisitEPNS_6RegexpES2_S2_PS2_i", "uriUnescapeInPlaceExA", "Curl_add_buffer_init", "_ZN4Json6Reader9readArrayERNS0_5TokenE", "av_packet_from_data", "_ZN5uripp5query4findERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ijkav_register_ijktcphook_protocol", "nghttp2_frame_pack_altsvc", "av_image_copy_plane", "J4AC_android_os_Build__VERSION__SDK_INT__get", "StariIjkSetPcmCallback", "I422ToARGB4444Row_C", "_ZNK7CPacket9getMsgSeqEb", "RAWToARGBRow_C", "_ZNK4Json5ValueltERKS0_", "_Z40GetRequiredMemRam_TransportDecoderBufferv", "Curl_set_dns_servers", "_Z21FDKaacEnc_noiseDetectPiS_iPKiPsP11NOISEPARAMSS2_", "curlx_uztosz", "x264_deblock_h_chroma_intra_mbaff_neon", "Curl_ssl_sessionid_lock", "Curl_multi_handlePipeBreak", "_ZN4Json8Features3allEv", "avformat_configuration", "_ZN4Json6Reader10skipSpacesEv", "_Z30FDKaacEnc_InitPsyConfigurationiiiiiiP17PSY_CONFIGURATION7FB_TYPE", "_ZN4Json13ValueIteratorC2ERKNS_18ValueConstIteratorE", "av_copy_packet_side_data", "SDL_Android_AudioTrack_new_from_sdl_spec", "SDL_VoutAndroid_obtainBufferProxy", "nghttp2_submit_push_promise", "uv__signal_loop_fork", "I420Blend", "avcodec_is_open", "J4A_loadClass__J4AC_java_util_ArrayList", "x264_pixel_var2_8x8_neon", "_ZN4Json9OurReader12decodeDoubleERNS0_5TokenERNS_5ValueE", "_Z25GetRam_aacEnc_PsyInternali", "av_application_did_io_tcp_read", "_ZN4Json10FastWriter10writeValueERKNS_5ValueE", "_ZN10CUDTUnited18epoll_remove_usockEii", "_ZN4Json12StyledWriter6indentEv", "_ZNK8CChannel8recvfromEP8sockaddrR7CPacket", "srt_getpeername", "ARGBToRGB24Row_NEON", "_Z24FDKsbrEnc_GetEnvEstDelayP20SBR_EXTRACT_ENVELOPE", "ARGBSetRow_Any_NEON", "_ZN3re26Regexp10ParseState11PushLiteralEi", "SDL_AMediaCodec_FakeFifo_queueInputBuffer", "_ZN3re24Prog10EmptyFlagsERKNS_11StringPieceEPKc", "avcodec_configuration", "_Z27transportEnc_GetChannelModei", "_ZN8Smoother9configureEP4CUDT", "_ZNK4Json5Value6asUIntEv", "_ZN3re26Regexp10ParseState11DoLeftParenERKNS_11StringPieceE", "StariAvVideoEncoderSetDimension", "SDL_AMediaCodec_getOutputFormat", "_ZNK4Json5ValuegeERKS0_", "nghttp2_pq_size", "_ZN4Json9OurReader18addErrorAndRecoverERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS0_5TokenENS0_9TokenTypeE", "nghttp2_map_entry_init", "ff_ps_read_data", "nghttp2_frame_ping_free", "curlx_ultosi", "IJK_GLES2_getFragmentShader_yuv444p10le", "_Z22CProgramConfig_IsValidPK14CProgramConfig", "uv_pipe_getsockname", "nghttp2_session_on_window_update_received", "_ZN3re26Regexp10ParseState14ParsePerlFlagsEPNS_11StringPieceE", "srt_sendmsg", "ffp_set_stream_selected", "_ZN3re216CharClassBuilder10FoldsASCIIEv", "ff_sws_alphablendaway", "avpriv_open", "SDL_AMediaCodec_delete", "ff_h264_idct_add8_12_c", "J4A_FindClass__catchAll", "_ZN3re23DFA9SearchTFTEPNS0_12SearchParamsE", "_Z24FDKsbrEnc_EnvEncodeFrameP11SBR_ENCODERiPsjPjPhi", "J4AC_java_nio_ByteBuffer__getDirectBufferAddress__catchAll", "uv_pipe_connect", "swri_audio_convert_init_aarch64", "_Z23GetRam_TransportEncoderi", "SDL_VoutAndroid_CreateForAndroidSurface", "_ZN8CChannelC2Ev", "ffpipenode_alloc", "uv__udp_close", "_ZNK4Json17CharReaderBuilder8validateEPNS_5ValueE", "MirrorRow_Any_NEON", "nghttp2_stream_change_weight", "SDL_JNI_DeleteLocalRefP", "av_md5_alloc", "_ZN4Json12StreamWriterD1Ev", "x264_opencl_load_library", "ff_af_queue_init", "Curl_cookie_getlist", "curlx_uztosi", "Curl_add_handle_to_pipeline", "uv_os_getppid", "_Z17FDKaacEnc_psyInitP12PSY_INTERNALPP7PSY_OUTii17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPING", "x264_predict_8x16c_v_c", "_ZN3re23RE2D1Ev", "av_timecode_make_smpte_tc_string", "av_cpu_count", "_Z22rescalFilterBankValuesP6PS_DECPPiS2_ii", "_Z37FDKsbrEnc_qmfInverseFilteringDetectorP16SBR_INV_FILT_ESTPPiS1_PaiiiP9INVF_MODE", "_ZN3re23RE23Arg15parse_ulonglongEPKcmPv", "FDKmemclear", "_ZN3re23RE23Arg18parse_short_cradixEPKcmPv", "_ZN3UDT13epoll_releaseEi", "ff_hevc_annexb2mp4_buf", "x264_sei_write", "J4AC_android_media_MediaFormat__setByteBuffer__withCString__catchAll", "_Z28GetRequiredMemRam_SbrChannelv", "_Z5fLog2iiPi", "av_get_bits_per_sample", "av_opt_eval_double", "RGB24ToI420", "_ZN5uripp6schemeC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_pipeline_leave_write", "_ZN3UDT5closeEi", "_ZN5CHashC1Ev", "_ZN4Json18StyledStreamWriter6indentEv", "ff_yuv2rgb_c_init_tables", "_Z38GetRequiredMemRam_PsQmfStatesSynthesisv", "Curl_doing_getsock", "ijkmp_get_meta_l", "ScaleRowDown34_C", "_Z28FDKaacEnc_writeExtensionDataP12TRANSPORTENCP16QC_OUT_EXTENSIONijj17AUDIO_OBJECT_TYPEa", "ScaleFilterCols_NEON", "uv_cond_init", "x264_me_refine_bidir_rd", "avformat_query_codec", "uv__dup", "Curl_close", "x264_field_vsad", "_Z19CProgramConfig_InitP14CProgramConfig", "ffp_set_pcm_muted", "SDL_Delay", "CpuId", "av_frame_is_writable", "uv_ip6_addr", "_ZN6CGuardC1ER15pthread_mutex_tb", "Curl_ssl_free_certinfo", "ff_h264_chroma422_dc_dequant_idct_14_c", "_ZN9CSndUListD1Ev", "_Z31FDK_DRC_Generator_setDrcProfileP8DRC_COMP11DRC_PROFILES1_", "ijkmp_global_set_log_level", "nghttp2_mem_default", "_ZN9CRcvQueueD2Ev", "sbrDecoder_drcDisable", "Curl_strncasecompare", "Curl_resolver_getaddrinfo", "J4AC_android_os_Bundle__getString__asGlobalRef__catchAll", "nghttp2_stream_check_deferred_item", "_Z16CAacDecoder_InitP20AAC_DECODER_INSTANCEPK21CSAudioSpecificConfig", "_ZN4CUDT22fillSrtHandshake_HSRSPEPjmi", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__asCBuffer__catchAll", "uv_try_write", "_ZN4Json5ValueC2Ed", "pcmDmx_GetLibInfo", "_ZNK4Json5Value8isMemberEPKcS2_", "av_get_pcm_codec", "Curl_connected_proxy", "_ZN9CSndUList15getNextProcTimeEv", "SDL_Android_AudioTrack_setSpeed", "x264_zigzag_sub_4x4_frame_neon", "ff_h264_idct8_dc_add_12_c", "ijkmp_get_audio_codec_info", "ff_mdct_init", "nghttp2_session_callbacks_set_on_stream_close_callback", "ffp_set_overlay_format", "ARGBSobelXY", "uv_udp_set_membership", "ffio_read_partial", "_ZN4Json9OurReader11getNextCharEv", "av_audio_fifo_reset", "_ZN12CRcvLossList6removeEii", "srt_bind", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaDataSource__get__catchAll", "x264_opencl_frame_delete", "av_codec_set_pkt_timebase", "_ZN3UDT4sendEiPKcii", "ff_reshuffle_raw_rgb", "av_codec_get_codec_properties", "J4A_loadClass__J4AC_android_os_Build__VERSION", "_ZNK10CRcvBuffer5emptyEv", "Curl_pgrsSetDownloadSize", "x264_predict_lossless_8x8", "x264_opencl_precalculate_frame_cost", "J4AC_android_media_AudioTrack__AudioTrack__asGlobalRef__catchAll", "_Z24GetRam_aacEnc_PsyDynamiciPh", "Curl_ssl_close", "_ZN19CPktTimeWindowTools22initializeWindowArraysEPiS0_S0_mm", "swr_is_initialized", "_ZN4Json12StyledWriter10writeValueERKNS_5ValueE", "ff_hevc_cu_chroma_qp_offset_idx", "ARGBComputeCumulativeSum", "uv__work_submit", "x264_quant_init", "_ZN10CRcvBuffer16readBufferToFileERNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEEi", "monstartup", "SDL_AoutAndroid_CreateForAudioTrack", "sws_getConstVec", "_ZN5uripp8fragmentC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "av_log2", "JNI_OnUnload", "_ZN3re212RegexpStatus4CopyERKS0_", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_12ipv6_addressE", "x264_pixel_hadamard_ac_8x16_neon", "BGRAToARGB", "_Z18adtsRead_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "_Z16adtsRead_CrcInitP11STRUCT_ADTS", "av_vbprintf", "_ZN4Json10LogicErrorC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "J4AC_android_media_MediaCodec__dequeueInputBuffer", "_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi", "ijkmp_android_get_audio_session_id", "uriFixAmbiguityW", "_ZN4CUDT13processSrtMsgEPK7CPacket", "ijkmp_set_stream_selected", "ARGBToUVRow_NEON", "FDKaacEnc_EncodeFrame", "_Z16CPulseData_ApplyP10CPulseDataPKsPi", "_ZN4Json18StyledStreamWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE", "av_find_best_pix_fmt_of_2", "ff_h264_idct_add16intra_14_c", "J4AC_java_util_ArrayList__add", "_ZN9CSndQueueC2Ev", "_Z43FDKsbrEnc_DeleteSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTOR", "ff_h264_get_slice_type", "_ZNK3re23RE220NamedCapturingGroupsEv", "uriPushToStack", "_ZN3re29CharClass3NewEi", "_ZN4Json12StyledWriterC1Ev", "Curl_ssl_init_certinfo", "ff_mov_add_hinted_packet", "_Z20transportEnc_GetConfP12TRANSPORTENCP12CODER_CONFIGP13FDK_BITSTREAMPj", "ff_openssl_init", "av_strndup", "ARGBShuffleRow_Any_NEON", "_ZNK4Json5Value5isIntEv", "sbrDecoder_GetDelay", "_ZN3re24Prog4Inst7InitNopEj", "ff_h264_parse_ref_count", "_ZN4CUDT13epoll_releaseEi", "x264_analyse_init_costs", "inflateCopy", "_Z18FreeRam_SbrElementPP11SBR_ELEMENT", "_ZN7CPacketD2Ev", "_ZNK4Json5Value10getCommentENS_16CommentPlacementE", "_ZN4Json5ValueC1Eb", "ijkmp_inc_ref", "nghttp2_nv_equal", "_ZN4Json18StyledStreamWriterC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "curlx_sitouz", "uv_udp_recv_start", "_ZNK5uripp4path5frontEv", "ff_hevc_sao_offset_abs_decode", "_Z26FDKsbrEnc_InitSbrBitstreamP11COMMON_DATAPhiP11FDK_CRCINFOj", "_ZN4Json9OurReader5matchEPKci", "av_opt_set_channel_layout", "J4AC_android_media_MediaCodec__createByCodecName__withCString__catchAll", "_ZN3re28Compiler12AddRuneRangeEiib", "ARGBSepiaRow_C", "IJK_GLES2_Renderer_create", "_ZNK4Json6Reader25getFormattedErrorMessagesEv", "Curl_async_resolved", "ARGBToABGR", "ffp_wait_stop_l", "av_format_get_opaque", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__withCString__asCBuffer", "ARGBToRGB565Row_C", "x264_dequant_4x4_neon", "ABGRToUVRow_NEON", "_ZN3re29PatchList5PatchEPNS_4Prog4InstES0_j", "_Z18FreeRam_SbrDecoderPP20SBR_DECODER_INSTANCE", "uv_close", "_Z10FDKcrcInitP11FDK_CRCINFOjjj", "NV12ToARGBRow_Any_NEON", "Curl_resolver_init", "nghttp2_check_header_value", "uv_fs_futime", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onNativeInvoke", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaPlayer__get__catchAll", "ffp_packet_queue_get_or_buffering", "_ZN4CUDT8recvmsg2EiPci5ref_tI12SRT_MsgCtrl_E", "_ZN3re214CoalesceWalker4CopyEPNS_6RegexpE", "uv_default_loop", "nghttp2_frame_pack_headers", "_Z13SrtFlagStringi", "J4AC_android_media_AudioTrack__release", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__withCString__catchAll", "Curl_hash_add", "Player_JNI_OnUnload", "Curl_freeaddrinfo", "_Z21CConcealment_GetStateP16CConcealmentInfo", "x264_predict_16x16_dc_neon", "_ZN4CUDT19processSrtMsg_HSREQEPKjmji", "x264_analyse_free_costs", "ff_rtp_get_payload_type", "ff_aac_sbr_init", "uriDissectQueryMallocW", "_Z20FDKaacEnc_codeValuesPsiiP13FDK_BITSTREAM", "Curl_none_cleanup", "ff_h264_sei_uninit", "SDL_AMediaCodecJava_createByCodecName", "av_pix_fmt_desc_get", "_Z27sbrDecoder_drcUpdateChannelP18SBRDEC_DRC_CHANNEL", "ff_simple_idct84_add", "NV12ToARGBRow_C", "nghttp2_session_callbacks_del", "curl_unescape", "ff_frame_thread_init", "ff_sws_init_range_convert", "sbrEncoder_LimitBitRate", "_ZN13CRcvFreshLoss6revokeEii", "_ZN5uripp7convertEd", "SDL_AMediaCodec_FreeInternal", "SDL_AMediaCodec_isInputBuffersValid", "av_pix_fmt_get_chroma_sub_sample", "av_sub_q", "uv_tcp_getpeername", "Curl_get_upload_buffer", "_ZN3re28BitState6SearchERKNS_11StringPieceES3_bbPS1_i", "ff_mov_write_packet", "x264_param_default_preset", "avformat_close_input", "Curl_write_plain", "nghttp2_hd_deflate_bound", "_ZN9CSndQueueC1Ev", "av_strtok", "_Z30FreeRam_aacEnc_AdjustThresholdPP13ADJ_THR_STATE", "uv_is_readable", "_ZN4CUDT5closeEv", "nghttp2_submit_extension", "avcodec_register_all", "_ZN4Json17CharReaderBuilderC2Ev", "nghttp2_session_pop_next_ob_item", "_ZN3re26Regexp15AddRuneToStringEi", "uriIsHostSetW", "YUY2ToYRow_NEON", "_ZN4CUDT12releaseSynchEv", "x264_sync_frame_list_delete", "_Z28FDKsbrEnc_frameInfoGeneratorP18SBR_ENVELOPE_FRAMEPhS1_iPKi", "_Z17GetAACdynamic_RAMi", "swresample_version", "_ZN10CUDTUnited13epoll_releaseEi", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_5queryEPNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "uv_pipe_chmod", "nghttp2_frame_headers_init", "uv_rwlock_destroy", "_ZN4CUDT6setOptE11SRT_SOCKOPTPKvi", "ff_rtmp_calc_digest", "SDL_AMediaFormat_getInt32", "ARGBPolynomialRow_C", "SDL_Android_AudioTrack_set_volume", "sws_isSupportedInput", "x264_intra_sad_x3_16x16", "nghttp2_session_on_origin_received", "_ZN6google22GetCommandLineFlagInfoEPKcPNS_19CommandLineFlagInfoE", "Curl_hash_next_element", "_ZN3UDT11setlogflagsEi", "_ZN3re216CharClassBuilder11RemoveAboveEi", "x264_mb_predict_mv_pskip", "ff_h264_pred_init_aarch64", "srt_recv", "MergeUVRow_NEON", "uv__timer_close", "x264_encoder_delayed_frames", "av_packet_move_ref", "srt_perfmon", "CumulativeSumToAverageRow_C", "_ZN3re24ProgD1Ev", "_Z10setHcrTypeP10CErHcrInfo14MP4_ELEMENT_ID", "J4AC_android_media_AudioTrack__flush__catchAll", "ff_bprint_to_codecpar_extradata", "SDL_AMediaCodecDummy_create", "_ZN9CRcvQueue11setNewEntryEP4CUDT", "avcodec_profile_name", "_Z25adtsWrite_EndRawDataBlockP11STRUCT_ADTSP13FDK_BITSTREAMPi", "_ZN4Json6Reader8addErrorERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS0_5TokenEPKc", "uv_timer_stop", "curl_mime_subparts", "Curl_cookie_cleanup", "MirrorUVRow_C", "x264_frame_delete_list", "_ZN3re23RE23Arg11parse_ulongEPKcmPv", "av_audio_fifo_read", "Curl_checkheaders", "x264_pixel_sad_4x4_neon", "Curl_ssl_data_pending", "Curl_freeset", "av_parse_color", "_ZN3re23RE23Arg14parse_long_hexEPKcmPv", "__gttf2", "_Z23qmfChangeOutScalefactorP15QMF_FILTER_BANKi", "ff_h264_idct8_add4_8_c", "I420ToNV12", "I420ToI444", "srt_resetlogfa", "uv_fs_mkdir", "uv_cond_timedwait", "_Z5f2PowiiPi", "_ZN4Json18StyledStreamWriter15writeWithIndentERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "uv_resident_set_memory", "avio_rb16", "SDL_AMediaCodec_isStarted", "_ZN6google7SetArgvEiPPKc", "av_realloc", "_ZN3re28Compiler10ShortVisitEPNS_6RegexpENS_4FragE", "_ZN3re28Compiler22IsCachedRuneByteSuffixEi", "ff_emulated_edge_mc_8", "av_default_get_category", "ff_hevc_cbf_cb_cr_decode", "av_base64_encode", "aacEncoder_GetParam", "_ZN10CRcvBuffer15setRcvTsbPdModeEmj", "x264_predict_8x8_h_neon", "_ZN3re27runelenEi", "_ZN10CHandShake8store_toEPc5ref_tImE", "_Z19Hcr_State_BODY_ONLYP13FDK_BITSTREAMPv", "av_parse_video_rate", "_ZNK4Json5Value8asDoubleEv", "x264_threadslice_cond_wait", "aacDecoder_SetParam", "ff_h264_idct_add16intra_8_c", "InterpolateRow_C", "ARGBAttenuateRow_C", "Curl_speedcheck", "_ZN3re28Compiler8EndRangeEv", "_Z14CPns_IsPnsUsedPK8CPnsDataii", "ijkmeta_get_children_count_l", "ffp_packet_queue_get", "uv_pipe_bind", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__close", "ffp_set_video_codec_info", "_ZNK4Json17ValueIteratorBase3keyEv", "Curl_http2_setup", "_Z18FreeRam_SbrEncoderPP11SBR_ENCODER", "_ZN6CEPollC2Ev", "_Z18aacDecoder_drcInitP8CDrcInfo", "I422ToI420", "_ZN4CUDTD2Ev", "uv_rwlock_trywrlock", "_ZN4CUDT12startConnectEPK8sockaddri", "nghttp2_session_del", "x264_deblock_v_chroma_intra_neon", "Curl_readrewind", "ff_mov_close_hinting", "uv_check_start", "_ZN3re28Compiler20CachedRuneByteSuffixEhhbi", "_ZN3re27utfruneEPKci", "x264_sei_version_write", "_ZN10CUDTUnited16connect_completeEi", "_ZN4Json5ValueD2Ev", "ff_amf_write_object_end", "ScaleRowDown4Box_16_C", "av_audio_fifo_write", "_ZN4Json9OurReader12decodeStringERNS0_5TokenERNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "av_bprint_escape", "SDL_AoutSetPlaybackVolume", "_ZN3re23DFA9SearchFFFEPNS0_12SearchParamsE", "Curl_mime_duppart", "x264_pixel_avg2_w20_neon", "av_samples_alloc", "ff_hevc_luma_mv_mvp_mode", "_ZN3re216RepetitionWalker9PostVisitEPNS_6RegexpEiiPii", "av_codec_get_tag", "_ZNK4Json6Reader24getLocationLineAndColumnEPKcRiS3_", "ijkmp_set_inject_opaque", "Curl_http_connect", "avformat_get_mov_video_tags", "_ZN14CCryptoControl15FormatKmMessageENSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEim", "SobelRow_NEON", "uv_tcp_open", "av_hwdevice_ctx_create", "_ZN3re23RE23Arg9parse_intEPKcmPv", "x264_coeff_level_run8_neon", "nghttp2_frame_priority_init", "x264_pixel_satd_8x16_neon", "avio_printf", "av_hmac_free", "x264_mc_weight_w20_offsetsub_neon", "x264_encoder_intra_refresh", "uv_read_start", "ARGBAttenuateRow_NEON", "ARGB4444ToUVRow_C", "uv_fs_mkdtemp", "_ZN5uripp9parse_hexERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEmRc", "nghttp2_session_keep_idle_stream", "_ZN6CTimer15getCPUFrequencyEv", "av_dynarray_add_nofree", "RGB24ToYRow_C", "J4A_DeleteGlobalRef__p", "J4A_loadClass__J4AC_sdk_stari_ijk_player_misc_IMediaDataSource", "_Z28GetRequiredMemRam_SbrElementv", "av_parse_cpu_caps", "av_opt_set_dict2", "_Z29FDKsbrEnc_extractSbrEnvelope1P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP18SBR_BITSTREAM_DATAP11ENV_CHANNELP11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATA", "ff_format_output_open", "swscale_license", "shuffle_bytes_1230", "_ZNK4Json4Path4makeERNS_5ValueE", "md5_finish", "av_get_cpu_flags", "RGB24ToARGB", "_Z21FreeRam_Sbr_guideScfbPPh", "NV12ToARGB", "_ZNK4Json5Value9getStringEPPKcS3_", "ff_tls_open_underlying", "_ZN4CUDT8sendCtrlE14UDTMessageTypePvS1_i", "_ZN7CPacket15getPacketVectorEv", "FDKsin", "_Z20aacDecoder_drcPrologP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "ARGBToRAWRow_NEON", "SDL_VoutDisplayYUVOverlay", "sbrEncoder_GetHeader", "_ZN4Json6Reader19readCppStyleCommentEv", "_ZN3re26Regexp3RefEv", "uv_signal_init", "uv_barrier_wait", "_ZN6CTimerD2Ev", "Curl_getoff_all_pipelines", "ff_psdsp_init", "_Z10ReadPsDataP6PS_DECP13FDK_BITSTREAMi", "_ZN4CUDT27processAsyncConnectResponseERK7CPacket", "Curl_cert_hostcheck", "uv__next_timeout", "ff_hevc_cu_chroma_qp_offset_flag", "avpriv_report_missing_feature", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_8fragmentEPNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN4Json6Reader17skipCommentTokensERNS0_5TokenE", "_Z22transportEnc_Latm_InitP11LATM_STREAMP13FDK_BITSTREAMP12CODER_CONFIGj14TRANSPORT_TYPEP13CSTpCallBacks", "av_image_fill_linesizes", "uv__inotify_fork", "_ZN4Json13valueToStringEl", "curl_share_setopt", "_ZN4Json5ValueC2ENS_9ValueTypeE", "nghttp2_session_callbacks_set_on_frame_recv_callback", "_Z22transportEnc_CrcEndRegP12TRANSPORTENCi", "ff_rtp_get_codec_info", "ff_h264_idct_add_10_c", "av_grow_packet", "I422ToYUY2Row_NEON", "_ZN4CUDT11getpeernameEiP8sockaddrPi", "_ZNK4Json5Value14getOffsetLimitEv", "avformat_version", "nghttp2_stream_update_remote_initial_window_size", "av_parse_video_size", "_ZN5uripp3uri13parse_literalERNSt6__ndk111__wrap_iterIPKcEES5_S4_", "x264_coeff_last4_aarch64", "_ZN3re216RepetitionWalker8PreVisitEPNS_6RegexpEiPb", "_ZN5CHash6removeEi", "Curl_is_connected", "_Z25transportEnc_LatmGetFrameP11LATM_STREAMP13FDK_BITSTREAMPi", "ff_silk_free", "ff_hevc_dsp_init", "I400Copy", "_ZN14CCryptoControl7encryptE5ref_tI7CPacketE", "Curl_none_md5sum", "uriComposeQueryCharsRequiredExW", "ScaleRowDown2Linear_NEON", "av_set_cpu_flags_mask", "curl_multi_info_read", "nghttp2_hd_decode_length", "ff_get_buffer", "_Z28FDKhybridAnalysisScaleStatesP18FDK_ANA_HYB_FILTERi", "StariAvAudioEncoderFlush", "av_fast_realloc", "av_small_strptime", "_ZN4Json5Value8CZStringC2EPKcjNS1_17DuplicationPolicyE", "_ZN4CUDT26considerLegacySrtHandshakeEm", "_Z16CopyAlignedBlockP10FDK_BITBUFPhj", "FDKstrstr", "ARGBSobelToPlane", "Scale", "_ZN4Json18StyledStreamWriter10writeValueERKNS_5ValueE", "nghttp2_stream_resume_deferred_item", "_ZNK4Json6Reader24getLocationLineAndColumnEPKc", "nghttp2_bufs_wrap_init2", "uri_TESTING_ONLY_ParseIpSixW", "av_packet_add_side_data", "_Z9fixp_atani", "_Z22FDKsbrEnc_codeEnvelopePaPK8FREQ_RESP17SBR_CODE_ENVELOPEPiiiii", "uv__hrtime", "x264_quant_4x4_trellis", "_Z30GetRequiredMemRam_aacEnc_QCoutv", "av_opt_set_double", "_Z12FDKcrcGetCRCP11FDK_CRCINFO", "_Z21FDKaacEnc_GetPnsParamP11NOISEPARAMSiiiPKiPiii", "_ZN10CUDTUnited8selectExERKNSt6__ndk16vectorIiNS0_9allocatorIiEEEEPS4_S7_S7_l", "ff_thread_init", "SDL_AMediaCodecJava_getObject", "uv_os_free_passwd", "ff_put_guid", "YUY2ToUVRow_NEON", "rgb12tobgr12", "ff_avformat_find_stream_info", "av_buffer_pool_init2", "_Z16getChannelConfig12CHANNEL_MODE", "SDL_CreateMutex", "av_packet_shrink_side_data", "Curl_islower", "HaiCrypt_Clone", "FDKfwrite_EL", "x264_pixel_avg_8x16_neon", "x264_predict_8x8_vl_neon", "x264_deblock_h_luma_intra_neon", "av_audio_fifo_space", "_ZN3re216CharClassBuilder13AddRangeFlagsEiiNS_6Regexp10ParseFlagsE", "BlendPlane", "_ZN4Json17CharReaderBuilderixENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN4Json5ValueC2ERKNS_12StaticStringE", "FDKrewind", "_ZN4CUDT7sendmsgEPKciibm", "nghttp2_rcbuf_decref", "ffp_set_property_int64", "_ZN5uripp5queryC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb", "_ZN4Json6Reader10addCommentEPKcS2_NS_16CommentPlacementE", "ffio_ensure_seekback", "J4A_ReleaseStringUTFChars", "_ZNK3re23RE218CheckRewriteStringERKNS_11StringPieceEPNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE", "av_parser_init", "nghttp2_frame_push_promise_init", "_Z27FreeRam_Sbr_guideVectorDiffPPi", "nghttp2_hd_deflate_del", "ffio_open2_wrapper", "uriFixEmptyTrailSegmentA", "_Z27FreeRam_Sbr_freqBandTableHIPPh", "x264_thread_sync_ratecontrol", "_Z21transportEnc_GetFrameP12TRANSPORTENCPi", "_ZN3re214OnePass_ChecksEv", "SDL_AMediaCodecFake_abort", "Curl_slist_duplicate", "__getf2", "x264_pixel_ssim_wxh", "J4AC_android_media_MediaCodec__createByCodecName", "x264_cabac_encode_terminal_c", "x264_pixel_avg_16x8_neon", "ScaleRowDown38_3_Box_Any_NEON", "_ZN4CUDT11getstreamidEi", "x264_ratecontrol_mb", "x264_load_deinterleave_chroma_fenc_neon", "hcryptCtx_Tx_Init", "av_hwaccel_next", "_ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i", "uv__io_start", "av_frame_get_best_effort_timestamp", "freeifaddrs", "av_log_format_line", "_ZNK7CPacket15getExtendedTypeEv", "ff_me_cmp_init_static", "J4AC_android_media_AudioTrack__getPlaybackParams__catchAll", "_ZN5uripp5queryC1Ev", "ff_float_dsp_init_aarch64", "ffpipeline_get_surface_as_global_ref", "_ZNK3re23RE27DoMatchERKNS_11StringPieceENS0_6AnchorEPmPKPKNS0_3ArgEi", "uv_fs_open", "YUY2ToARGBRow_Any_NEON", "FDKfabs", "ScaleFilterCols_16_C", "uv__getpwuid_r", "ffp_track_statistic_l", "x264_pixel_ssd_8x16_neon", "_ZN6google11GetAllFlagsEPNSt6__ndk16vectorINS_19CommandLineFlagInfoENS0_9allocatorIS2_EEEE", "_Z11imdct_drainP6mdct_tPii", "uv_loop_new", "I422ToRGB565Row_C", "SDL_GetError", "ARGBColorMatrix", "_ZN4Json5ValueD1Ev", "srt_epoll_add_usock", "nghttp2_session_find_stream", "InitCpuFlags", "_ZN3re214ToStringWalker8PreVisitEPNS_6RegexpEiPb", "ff_id3v2_tag_len", "nghttp2_map_init", "nghttp2_session_get_remote_window_size", "ff_h264_set_erpic", "_Z21FDKaacEnc_AdjThrClosePP13ADJ_THR_STATE", "_Z9CalcLdInti", "av_format_get_subtitle_codec", "_ZN10CHandShake4showEv", "_Z27GetRam_aacEnc_PsyOutChanneli", "_ZN10CUDTUnited5CONIDEi", "_Z10HcrInitRomP10CErHcrInfo", "ijkmeta_destroy", "av_application_on_async_read_speed", "_ZN8CChannel13getSndBufSizeEv", "_ZN3re23DFA14FastSearchLoopEPNS0_12SearchParamsE", "av_bsf_send_packet", "_ZN3re26Regexp11NumCapturesEv", "Curl_pipeline_wanted", "_Z13GetRam_ps_deci", "x264_cabac_block_residual_rd_c", "ARGBColorTable", "ijkmp_set_option_int", "ScaleRowDown34_0_Box_C", "_ZN3re213CycleFoldRuneEi", "uriToStringA", "_Z19ToggleReadDirectionh", "uv_async_send", "ABGRToYRow_Any_NEON", "x264_mc_weight_w16_offsetadd_neon", "uv_poll_init", "_Z38transportDec_GetMissingAccessUnitCountPiP12TRANSPORTDEC", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_10ip_addressE", "_ZN3re28Compiler9ByteRangeEiib", "_Z19resetFreqBandTablesP15SBR_HEADER_DATAj", "_ZN6CTimer9interruptEv", "_Z14FreeAacDecoderPP20AAC_DECODER_INSTANCE", "ff_get_v_length", "ff_read_frame_flush", "x264_deblock_v_luma_intra_neon", "hcryptCtx_Rx_Init", "_ZN9CRcvQueue29worker_ProcessAddressedPacketEiP5CUnitPK8sockaddr", "_ZN4Json13ValueIteratorC2ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "_Z22FDKaacEnc_updateBitresP15CHANNEL_MAPPINGP8QC_STATEPP6QC_OUT", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__withCString", "av_stereo3d_type_name", "avcodec_default_get_format", "_ZN3re24Prog9SearchDFAERKNS_11StringPieceES3_NS0_6AnchorENS0_9MatchKindEPS1_PbPNS_10SparseSetTIvEE", "nghttp2_buf_reset", "avio_enum_protocols", "_Z28InvMdctTransformLowDelay_fdkPiiPsS_ii", "uv_mutex_destroy", "ijkmp_android_create", "ff_h264_field_end", "_ZN6google14FlagRegistererC1EPKcS2_S2_S2_PvS3_", "_ZN10CUDTUnited8getErrorEv", "_ZN3re23RE23Arg20parse_longlong_radixEPKcmPvi", "_ZN19CPktTimeWindowTools17getPktRcvSpeed_inEPKiPiS1_mRi", "_ZN3re23DFA9SearchFTTEPNS0_12SearchParamsE", "avio_rl16", "uv_check_stop", "uv_is_writable", "_ZN4Json13ValueIteratorC2ERKS0_", "nghttp2_frame_headers_payload_nv_offset", "_Z18FreeAACdynamic_RAMPPi", "ijkav_register_all", "av_max_alloc", "ff_thread_ref_frame", "_Z23FDK_DRC_Generator_ClosePP8DRC_COMP", "SDL_AMediaCodecFake_queueFakeFrame", "_Z23transportDec_GetLibInfoP8LIB_INFO", "av_codec_get_tag2", "nghttp2_map_each", "x264_quant_8x8_neon", "ff_guess_image2_codec", "curl_share_init", "uv_fs_scandir_next", "_ZN4Json5Value16resolveReferenceEPKc", "SDL_AMediaCodec_writeInputData", "nghttp2_session_callbacks_set_data_source_read_length_callback", "ff_h264_decode_ref_pic_marking", "FDKfprintf", "x264_ratecontrol_mb_qp", "_ZN3UDT7recvmsgEiPciRm", "nghttp2_hd_inflate_hd", "_ZN3re24Prog13MarkDominatorEiPNS_11SparseArrayIiEES3_PNSt6__ndk16vectorINS5_IiNS4_9allocatorIiEEEENS6_IS8_EEEEPNS_10SparseSetTIvEEPS8_", "av_strlcatf", "av_buffer_make_writable", "_ZN4Json23BuiltStyledStreamWriter18hasCommentForValueERKNS_5ValueE", "av_iformat_next", "_ZN4Json5ValueixEPKc", "ff_init_cabac_decoder", "J400ToARGBRow_NEON", "avio_find_protocol_name", "_ZN6CTimer5sleepEv", "uv__tcp_connect", "J4AC_android_media_MediaCodec__createByCodecName__catchAll", "_Z7dct_IIIPiS_iS_", "nghttp2_hd_emit_indname_block", "x264_mc_weight_w8_neon", "av_bprint_init", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__withCString__asCBuffer__catchAll", "Curl_timeleft", "uriHexToLetterW", "Curl_raw_toupper", "_ZNK3re23RE218PossibleMatchRangeEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_i", "x264_lookahead_init", "ff_h264_idct8_add4_9_c", "J4AC_java_util_ArrayList__ArrayList", "_ZN16CRendezvousQueueD2Ev", "_ZN9CRcvQueue8storePktEiP7CPacket", "_Z34FDKaacEnc_PreProcessPnsChannelPairiPiS_S_S_S_P10PNS_CONFIGP8PNS_DATAS3_", "ff_silk_init", "SDL_AMediaCodec_CreateInternal", "_ZN4Json9ExceptionD2Ev", "_ZN6google13Uint64FromEnvEPKcm", "x264_sub4x4_dct_neon", "FDKmemcmp", "SDL_Android_GetApiLevel", "nghttp2_session_set_next_stream_id", "ff_h264_idct_add16intra_10_c", "uv_loop_delete", "nghttp2_http_on_request_headers", "_ZN4CUDT4openEv", "Curl_conncache_unlock", "x264_macroblock_analyse", "av_get_packed_sample_fmt", "curl_pushheader_byname", "sws_scaleVec", "_ZN3re216CharClassBuilder6NegateEv", "avcodec_parameters_free", "ijkmeta_append_child_l", "_ZN5uripp4path9pop_frontEv", "Curl_pretransfer", "av_get_channel_layout", "_ZN10CRcvBuffer7dropMsgEib", "_ZN4Json5Value8CZStringaSES1_", "_Z32FDKsbrEnc_LSI_divide_scale_fractiii", "x264_zigzag_scan_4x4_field_neon", "_ZN4Json6Reader9readTokenERNS0_5TokenE", "HaiCrypt_Rx_Data", "I444Copy", "_Z15DecodeHuffmanCWPA2_KaP13FDK_BITSTREAM", "J4AC_android_os_Bundle__putLong__withCString__catchAll", "ScaleARGBRowDownEvenBox_NEON", "_ZN7CPacket10deallocateEv", "pcmDmx_ReadDvbAncData", "uriHexToLetterA", "rgb16tobgr32", "x264_predict_8x8_v_neon", "_ZN5stari14AvAudioEncoderC1Ev", "ABGRToUVRow_C", "nghttp2_buf_free", "ff_mp4_read_descr", "_Z28GetRam_aacEnc_PsyOutElementsi", "Curl_is_in_callback", "uv_chdir", "_Z10HcrDecoderP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "RGBAToUVRow_C", "_ZN6CGuardD1Ev", "_ZN3re23DFA14BuildAllStatesERKNSt6__ndk18functionIFvPKibEEE", "ff_free_stream", "ff_h264_idct_add16_12_c", "avcodec_get_edge_width", "_ZN4Json17CharReaderBuilder11setDefaultsEPNS_5ValueE", "ff_celt_free", "_ZN3re23NFA6SearchERKNS_11StringPieceES3_bbPS1_i", "uv_check_init", "ff_fft_end", "J4AC_android_media_MediaCodec__BufferInfo__flags__set__catchAll", "avcodec_parameters_to_context", "hcryptCtx_Tx_PostSwitch", "_ZN3re26Regexp10ParseState14ParseCharClassEPNS_11StringPieceEPPS0_PNS_12RegexpStatusE", "nghttp2_hd_inflate_change_table_size", "SDL_AMediaCodecFake_dequeueFakeFrameOnly", "_ZN3UDT7sendmsgEiPKciibm", "_Z28GetRam_Sbr_QmfStatesAnalysisi", "nghttp2_frame_unpack_origin_payload", "_ZN4CUDT23updateAfterSrtHandshakeEii", "_ZN10CHandShake11RdvStateStrENS_15RendezvousStateE", "SDL_VoutAndroid_invalidateAllBuffers", "_Z24slotBasedHybridSynthesisPiS_S_S_P6HYBRID", "uv__preadv", "IJK_GLES2_getFragmentShader_rgb", "_ZN10CSndBuffer8readDataEPPcRiRmi", "Curl_cache_addr", "_ZN12CRcvLossListC1Ei", "_ZN4Json5ValueC1Ei", "rgb64to48_nobswap", "Curl_base64url_encode", "_ZN5uripp3uriC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_strntoupper", "_Z19createLppTransposerP13SBR_LPP_TRANSP19TRANSPOSER_SETTINGSiPhiiiiS3_ijii", "curl_easy_escape", "Curl_conncache_extract_bundle", "_ZN4CUDT8packDataER7CPacketRm", "md5_append", "_ZN9CSndUList6removeEPK4CUDT", "ff_avcodec_decode_video2", "ffp_io_stat_complete_register", "_Z41GetRequiredMemRam_Sbr_guideVectorDetectedv", "x264_predict_8x8_init_aarch64", "x264_sei_frame_packing_write", "_Z17FDKgetWindowSlopeii", "Curl_http2_done", "x264_pixel_ssd_8x8_neon", "_ZNK5uripp10ip_addresslsERNSt6__ndk113basic_ostreamIcNS1_11char_traitsIcEEEE", "RGB565ToYRow_NEON", "Curl_disconnect", "uv_fs_scandir", "ff_mov_read_esds", "_ZN6google27GetCommandLineFlagInfoOrDieEPKc", "x264_opencl_lookahead_init", "srt_bind_peerof", "_ZN3re24Prog16ComputeFirstByteEv", "_Z40GetRequiredMemRam_sbr_QmfStatesSynthesisv", "ff_codec_get_tag", "RAWToRGB24", "avformat_network_deinit", "uv_write", "Curl_failf", "av_pix_fmt_desc_next", "MergeUVRow_C", "_ZN10CRcvBuffer10countBytesEiib", "Curl_ssl_shutdown", "_ZN10CUDTUnited7connectEiPK8sockaddrii", "uv__fs_poll_close", "nghttp2_nv_array_sort", "x264_ratecontrol_end", "SDL_DestroyMutexP", "ScaleRowDown38_3_Box_16_C", "J4AC_android_media_MediaCodec__createByCodecName__asGlobalRef__catchAll", "I400ToI400", "swscale_configuration", "_ZNK4Json5Value8CZString14isStaticStringEv", "ff_hevc_cu_qp_delta_abs", "ffpipeline_create_from_android", "uv__nonblock_fcntl", "avformat_alloc_context", "av_bprint_strftime", "SDL_SetThreadPriority", "_ZN5uripp12ipv6_addressC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "I422ToYUY2Row_C", "ff_slice_thread_init", "av_opt_eval_flags", "_ZN3UDT18getlasterror_errnoEv", "ff_h264_decode_extradata", "av_write_trailer", "_Z30FDKaacEnc_InitPnsConfigurationP10PNS_CONFIGiiiiPKiii", "avpriv_unlock_avformat", "_Z21transportDec_SetParamP12TRANSPORTDEC11TPDEC_PARAMi", "uv__udp_bind", "x264_cabac_init", "_ZN4Json5Value12removeMemberEPKc", "SDL_AoutAndroid_CreateForOpenSLES", "_ZN3re26Regexp20CompileToReverseProgEl", "_ZN3re26Regexp10ParseStateD2Ev", "HaiCrypt_Close", "uv__close", "av_probe_input_format3", "swr_next_pts", "_Z8fixp_cosii", "_ZN10CUDTUnited4bindEiPK8sockaddri", "nghttp2_session_callbacks_set_on_invalid_header_callback", "nghttp2_session_terminate_session2", "srt_getsndbuffer", "ff_http_auth_handle_header", "_ZN6google15DescribeOneFlagERKNS_19CommandLineFlagInfoE", "J4A_ExceptionCheck__catchAll", "nghttp2_session_callbacks_set_select_padding_callback", "_Z30FDKaacEnc_DetermineEncoderModeP12CHANNEL_MODEi", "RGB565ToUVRow_Any_NEON", "ffpipenode_flush", "nghttp2_http_on_remote_end_stream", "ff_codec_get_id", "avcodec_get_class", "x264_lookahead_put_frame", "Curl_llist_init", "_Z25transportDec_GetBitstreamP12TRANSPORTDECj", "_Z10getHcrTypeP10CErHcrInfo", "SDL_CreateCond", "ARGB4444ToARGBRow_Any_NEON", "x264_predict_8x16c_h_c", "J4AC_android_media_MediaCodec__dequeueInputBuffer__catchAll", "_ZN6google28HandleCommandLineCompletionsEv", "_ZN3re26RegexpD2Ev", "curl_mime_filedata", "SDL_VoutFree", "ARGBMultiplyRow_Any_NEON", "_ZN4Json5ValueC1Em", "_ZN3re28Compiler18AddSuffixRecursiveEii", "avpriv_scalarproduct_float_c", "av_bsf_list_append2", "_ZN3re26Regexp5QuestEPS0_NS0_10ParseFlagsE", "uv_fs_rename", "_ZNK4Json5Value8CZString5indexEv", "Curl_resolver_global_cleanup", "av_interleaved_write_frame", "x264_zigzag_sub_4x4ac_frame_neon", "_ZN10CRcvBuffer17getRcvReadyPacketEv", "uv__io_poll", "x264_plane_copy_neon", "_Z22FDKhybridSynthesisInitP18FDK_SYN_HYB_FILTER15FDK_HYBRID_MODEii", "uv_udp_bind", "ff_h264_idct_add_9_c", "_ZN10CUDTSocketC1Ev", "ff_hevc_frame_rps", "FDKfopen", "Curl_expire_done", "uv_sem_init", "Curl_ssl_push_certinfo", "_ZN4CUDTC1Ev", "J4AC_android_os_Bundle__putString__withCString__catchAll", "swri_noise_shaping_double", "av_fifo_space", "av_get_frame_filename", "x264_zigzag_sub_4x4_field_neon", "_ZN5uripp6urisyn6decodeERNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_Z15CLatmDemux_ReadP13FDK_BITSTREAMP10CLatmDemux14TRANSPORT_TYPEP13CSTpCallBacksP21CSAudioSpecificConfigPii", "av_expr_parse_and_eval", "_ZN5uripp9authorityC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN4Json12PathArgumentC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "av_div_q", "uv_fs_poll_start", "ijkmeta_unlock", "_Z42FDKsbrEnc_ResetSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "_ZN6CGuard11releaseCondER14pthread_cond_t", "uv_tcp_init", "nghttp2_session_get_stream", "_ZN4Json9ExceptionD0Ev", "_ZN6google26ProgramInvocationShortNameEv", "_Z20CChannelElement_ReadP13FDK_BITSTREAMPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfo17AUDIO_OBJECT_TYPEPK16SamplingRateInfojjhaP12TRANSPORTDEC", "SDL_VoutAndroid_CreateForANativeWindow", "_ZNK4Json5ValuentEv", "_ZN7CPacketC2Ev", "_ZNK3re23RE27RewriteEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StringPieceEPSA_i", "av_timecode_init", "x264_cabac_encode_bypass_asm", "_Z9mdct_initP6mdct_tPii", "InterpolateRow_16_C", "_ZN5uripp4pathC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "uriDissectQueryMallocExW", "nghttp2_session_get_stream_local_close", "av_demuxer_open", "Curl_ssl_connect", "avio_open_dyn_buf", "_ZN10CUDTUnited5closeEi", "av_fast_mallocz", "SDL_AMediaCodec_getColorFormatName", "_ZNK4Json5ValuegtERKS0_", "_Z26qmfInitSynthesisFilterBankP15QMF_FILTER_BANKPiiiiii", "Curl_http2_setup_req", "ffp_get_property_int64", "_ZN9CRcvQueue4initEiiiiP8CChannelP6CTimer", "_ZN14CCryptoControl5closeEv", "_Z30FDKaacEnc_InitTnsConfigurationiiiiiiiP10TNS_CONFIGP17PSY_CONFIGURATIONii", "_Z18FreeRam_SbrChannelPP11SBR_CHANNEL", "FDKfseek", "_Z37GetRequiredMemRam_Sbr_freqBandTableHIv", "av_opt_eval_float", "av_find_input_format", "FDKstrcpy", "I420Copy", "x264_ratecontrol_slice_type", "_ZN3re23RE211MaxSubmatchERKNS_11StringPieceE", "avio_rl64", "_ZNK4Json6Reader19getStructuredErrorsEv", "av_buffer_default_free", "_ZNK5uripp4pathltERKS0_", "_ZNK4Json9OurReader25getFormattedErrorMessagesEv", "_ZN3re23RE23Arg11parse_ucharEPKcmPv", "SobelXYRow_Any_NEON", "aacEncGetLibInfo", "x264_pixel_sad_x4_16x8_neon", "SobelXYRow_C", "ff_h264_draw_horiz_band", "av_opt_set_video_rate", "_ZN10CRcvBuffer15getPktTsbPdTimeEj", "RGB565ToYRow_Any_NEON", "uv__signal_close", "YUY2ToUVRow_Any_NEON", "uv_signal_stop", "_ZN3re214ToStringWalker9PostVisitEPNS_6RegexpEiiPii", "_Z17transportDec_Open14TRANSPORT_TYPEj", "ff_simple_idct_put_10", "_Z13PSEnc_DestroyPP19T_PARAMETRIC_STEREO", "_Z19CPns_SetCorrelationP8CPnsDataiii", "_Z10CalcLdDatai", "_ZNK4Json4Path7resolveERKNS_5ValueES3_", "MipsCpuCaps", "_Z21qmfSynthesisFilteringP15QMF_FILTER_BANKPPiS2_PK16QMF_SCALE_FACTORiPsiS1_", "_ZN10CUDTUnited18checkBrokenSocketsEv", "_ZN19CPktTimeWindowTools15getBandwidth_inEPKiPim", "ScaleRowDown2Box_Odd_C", "avio_seek", "av_fifo_freep", "RGB565ToI420", "uv__io_stop", "SDL_DestroyCond", "ff_init_vlc_sparse", "x264_predict_8x16c_dc_top_neon", "_ZN6google21RegisterFlagValidatorEPKiPFbPKciE", "_Z17GetRam_SbrChanneli", "uv__work_done", "Curl_llist_remove", "ff_alloc_extradata", "av_color_transfer_name", "x264_ratecontrol_new", "uv_mutex_unlock", "ScaleARGBRowDownEven_NEON", "ff_amf_write_field_name", "x264_sync_frame_list_push", "av_color_range_name", "curlx_uitous", "J4AC_android_media_MediaFormat__setInteger__withCString", "av_application_closep", "_ZN4Json9OurReader12currentValueEv", "srt_strerror", "_ZN3re26Regexp13NamedCapturesEv", "ff_hevc_deblocking_boundary_strengths", "x264_sub8x8_dct_neon", "_Z28FDKaacEnc_DetermineBandWidthPiii19AACENC_BITRATE_MODEiiP15CHANNEL_MAPPING12CHANNEL_MODE", "_Z25CProgramConfig_GetDefaultP14CProgramConfigj", "_ZN3re23RE2C2ERKNS_11StringPieceERKNS0_7OptionsE", "_Z31FDKaacEnc_CalculateFullTonalityPiS_S_PsiPKii", "_Z33FreeRam_aacEnc_AdjThrStateElementPP11ATS_ELEMENT", "Curl_share_lock", "Curl_ssl_sessionid_unlock", "_Z17GetRam_SbrEncoderi", "StariAvVideoEncoderSetParameters", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaPlayer__set__catchAll", "av_append_path_component", "uv__udp_recv_stop", "pcmDmx_SetParam", "_ZN5uripp7convertEl", "avpriv_new_chapter", "_ZNK4Json17ValueIteratorBase10memberNameEv", "_ZN6google9FlagSaverC1Ev", "_ZN4Json17ValueIteratorBase9incrementEv", "av_lockmgr_register", "ffp_video_statistic_l", "uv__platform_invalidate_fd", "J4AC_android_media_AudioTrack__getPlaybackParams", "aacDecoder_GetLibInfo", "uv__sendmmsg", "curl_memdebug", "nghttp2_stream_dep_insert_subtree", "_Z11FDKcrcResetP11FDK_CRCINFO", "ffurl_shutdown", "_Z16CAacDecoder_Open14TRANSPORT_TYPE", "J4AC_android_media_MediaCodec__start", "nghttp2_frame_settings_init", "x264_plane_copy_swap_c", "x264_predict_8x8c_p_neon", "J4AC_android_os_Bundle__getLong__withCString__catchAll", "_Z39GetRequiredMemRam_Sbr_QmfStatesAnalysisv", "J400ToARGBRow_C", "uv__tcp_keepalive", "curl_dofree", "I422ToUYVY", "_Z29FDKsbrEnc_InitSbrCodeEnvelopeP17SBR_CODE_ENVELOPEPiiii", "x264_pixel_ssim_end4_neon", "ff_http_do_new_request", "av_format_set_opaque", "ff_hevc_flush_dpb", "ff_get_format", "_ZN5uripp10ip_addressC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "FDKatoi", "J4AC_java_nio_ByteBuffer__limit__asGlobalRef__catchAll", "nghttp2_frame_data_free", "av_dict_copy", "_ZN5uripp5queryC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb", "avio_wl24", "nghttp2_bufs_addb", "RGB565ToARGBRow_NEON", "_ZN4Json5Value14setOffsetLimitEl", "ff_h264_free_tables", "av_buffer_unref", "_ZN4CUDT12getUDTHandleEi", "nghttp2_frame_unpack_window_update_payload", "av_stream_new_side_data", "ff_h264_idct_add8_8_c", "ARGB4444ToYRow_C", "_ZN3re24ProgC2Ev", "av_color_primaries_name", "ScaleRowDown2Linear_Any_NEON", "av_mul_q", "nghttp2_session_open_stream", "ffp_seek_to_l", "_ZN3re216RepetitionWalker10ShortVisitEPNS_6RegexpEi", "_ZN4CUDT10EmitSignalE18ETransmissionEvent12EventVariant", "x264_mc_weight_w20_neon", "J4AC_android_media_AudioTrack__getPlaybackRate__catchAll", "sws_alloc_set_opts", "x264_me_refine_qpel_refdupe", "av_apply_bitstream_filters", "x264_deblock_h_luma_neon", "_Z15FDKaacEnc_QCNewPP8QC_STATEiPh", "hcryptCtx_Tx_PreSwitch", "x264_sei_pic_timing_write", "_ZN4Json18StyledStreamWriter14isMultineArrayERKNS_5ValueE", "av_chroma_location_name", "_Z23GetRam_aacEnc_PsyStatici", "_ZN6google21RegisterFlagValidatorEPKlPFbPKclE", "Curl_build_unencoding_stack", "_Z20GetRam_SbrDecElementi", "av_frame_set_qp_table", "_ZN6google20GetCommandLineOptionEPKcPNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "_ZN5uripp7convertEx", "_ZN4CUDT13cookieContestEv", "_Z30FDKsbrEnc_AssembleSbrBitstreamP11COMMON_DATAP11FDK_CRCINFOij", "curl_multi_socket_action", "x264_pixel_sad_x4_8x8_neon", "SDL_JNI_OnLoad", "_Z9InitLdIntv", "ffpipeline_free_p", "ff_hevc_annexb2mp4", "uv_write2", "ArmCpuCaps", "uv_udp_send", "Curl_http2_done_sending", "av_fast_malloc", "_Z18FDKaacEnc_bitCountPKsiiPi", "av_md5_sum", "x264_predict_16x16_h_neon", "x264_pixel_sad_x3_4x4_neon", "uv_poll_start", "_ZNK4Json5Value4findEPKcS2_", "shuffle_bytes_3012", "_Z24FDKaacEnc_BlockSwitchingP23BLOCK_SWITCHING_CONTROLiiPKs", "I422ToARGB1555Row_C", "_ZN3re23RE23Arg16parse_ushort_hexEPKcmPv", "HaiCrypt_Tx_Process", "_ZN3re28Compiler10CompileSetEPNS_6RegexpENS_3RE26AnchorEl", "uv_read_stop", "ffp_get_current_position_l", "ScaleARGBRowDown2_NEON", "ff_amf_get_field_value", "J4AC_android_media_AudioTrack__getPlaybackRate", "_ZN4Json18ValueConstIteratorC1Ev", "av_get_packet", "curl_mark_sclose", "_Z10ResetPsDecP6PS_DEC", "_Z22CBlock_FrequencyToTimeP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssiiPi", "uv_get_osfhandle", "curl_mime_data_cb", "x264_weight_scale_plane", "_ZN9CRcvQueue8recvfromEi5ref_tI7CPacketE", "_ZN6google12Int64FromEnvEPKcl", "uv_buf_init", "_ZN4Json23BuiltStyledStreamWriter6indentEv", "ScaleARGBRowDownEvenBox_C", "_ZN6CEPollD1Ev", "nghttp2_session_consume", "ff_metadata_conv", "_ZN10CUnitQueue4initEiii", "uv_req_size", "curlx_sltoui", "I422ToRGBARow_NEON", "I400Mirror", "SDL_AMediaFormat_setInt32", "avpriv_lock_avformat", "x264_mb_mc", "ff_mdct_end", "_Z19FDKaacEnc_calcSfbPeP15PE_CHANNEL_DATAPKiS2_iiiS2_S2_", "SDL_VoutOverlayAMediaCodec_isKindOf", "_ZN4Json9OurReader11readCommentEv", "IJK_EGL_create", "_ZN4CUDT8recvfileEiRNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "Curl_fileinfo_cleanup", "x264_malloc", "ff_hevc_decode_nal_sei", "ff_rtmp_packet_dump", "_ZNK5uripp5query8encodingEv", "_ZN3re24Prog4Inst8InitFailEv", "_ZN4CUDT21interpretSrtHandshakeERK10CHandShakeRK7CPacketPjPm", "_ZN5uripp11domain_nameC1Ev", "_Z33GetRequiredMemRam_Sbr_quotaMatrixv", "_ZN10CUDTUnitedD2Ev", "x264_plane_copy_interleave_neon", "_ZN4Json5Value11CommentInfo10setCommentEPKcm", "_ZN6google26CommandlineFlagsIntoStringEv", "IJK_GLES2_getColorMatrix_bt709", "SobelXRow_NEON", "_ZNK4Json5Value7compareERKS0_", "rgb16tobgr15", "ARGBCopyYToAlphaRow_C", "_ZN10CRcvBuffer17updRcvAvgDataSizeEm", "_ZN4Json9OurReader8addErrorERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS0_5TokenEPKc", "ff_find_stream_index", "_ZN5CHashD2Ev", "ijkmeta_set_string_l", "av_buffer_pool_init", "av_get_default_channel_layout", "_ZN3re23DFA8RWLocker14LockForWritingEv", "uv__stream_init", "ScaleRowDown38_16_C", "_ZN3re23RE23Arg14parse_uint_hexEPKcmPv", "_ZN9CRcvQueue11getNewEntryEv", "_ZN13CRcvFreshLossC1Eiii", "_ZN3re24Prog14SearchBitStateERKNS_11StringPieceES3_NS0_6AnchorENS0_9MatchKindEPS1_i", "_Z20calculateSbrEnvelopeP16QMF_SCALE_FACTORP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAP14SBR_FRAME_DATAPPiS8_iS7_ji", "_ZN3re23RE23Arg19parse_ulonglong_hexEPKcmPv", "av_packet_free", "_ZN10CUnitQueue16getNextAvailUnitEv", "_Z36FDKsbrEnc_WriteEnvChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "ff_thread_report_progress", "_ZNK4Json5Value12asLargestIntEv", "x264_quant_4x4_neon", "_ZN3re23RE23Arg17parse_ulong_octalEPKcmPv", "nghttp2_session_on_request_headers_received", "ARGBMirrorRow_NEON", "srt_addlogfa", "ScaleARGBRowDown2_C", "M420ToARGB", "_ZNK4Json17ValueIteratorBase4nameEv", "ff_get_line", "J4AC_android_os_Bundle__putLong__withCString", "_ZN4Json18StyledStreamWriter9pushValueERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN4Json13valueToStringEi", "_ZN4CUDT15prepareSrtHsMsgEiPjm", "av_log2_16bit", "uv_shutdown", "x264_frame_copy_picture", "av_aes_ctr_get_iv", "_ZN4Json17ValueIteratorBaseC1Ev", "ff_af_queue_add", "_ZN10CUDTUnited12removeSocketEi", "_ZN3re23DFA10StateSaverD1Ev", "aacEncoder_SetParam", "ff_hevc_pred_mode_decode", "_ZN4Json12PathArgumentC1EPKc", "Curl_ssl_false_start", "ff_h264dsp_init_aarch64", "SDL_AoutPauseAudio", "nghttp2_stream_get_previous_sibling", "avcodec_find_encoder_by_name", "curl_global_sslset", "_ZN4Json9OurReader12decodeNumberERNS0_5TokenE", "ff_simple_idct_add_10", "J4AC_android_os_Build__VERSION__SDK_INT__set", "uv_rwlock_wrlock", "x264_me_refine_qpel_rd", "sbrEncoder_IsSingleRatePossible", "uv__utimesat", "ff_set_cmp", "nghttp2_bufs_init2", "ff_sws_rgb2rgb_init", "I444ToARGBRow_NEON", "Curl_parsenetrc", "ff_rtp_enc_name", "ff_combine_frame", "ff_hevc_merge_idx_decode", "_Z31FDKaacEnc_CalculateChaosMeasurePiiS_", "Curl_read", "Curl_protocol_doing", "ffp_get_duration_l", "x264_cqm_delete", "swri_rematrix_init", "_ZN4Json5Value12removeMemberEPKcS2_PS0_", "I420ToBGRA", "ff_h2645_packet_uninit", "SDL_AMediaCodec_releaseOutputBuffer", "Curl_resolv_unlock", "av_frame_set_color_range", "av_format_set_open_cb", "J4A_loadClass__J4AC_android_media_MediaCodec__BufferInfo", "av_utf8_decode", "HaiCrypt_Tx_ManageKeys", "_ZN4CUDT24prepareConnectionObjectsERK10CHandShake13HandshakeSideP13CUDTException", "_Z35GetRequiredMemRam_aacEnc_PsyElementv", "_Z43FDKsbrEnc_CreateSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORi", "av_audio_fifo_alloc", "av_fast_padded_mallocz", "UYVYToNV12", "SobelXRow_C", "_ZN3re214CoalesceWalker10DoCoalesceEPPNS_6RegexpES3_", "av_register_output_format", "avcodec_get_frame_class", "Curl_move_handle_from_send_to_recv_pipe", "uv__udp_finish_close", "ARGBToRGB24Row_Any_NEON", "_ZN3re29CharClass8ContainsEi", "_Z37GetRequiredMemRam_Sbr_guideVectorOrigv", "curl_fdopen", "J4AC_android_media_AudioTrack__AudioTrack__catchAll", "nghttp2_frame_pack_goaway", "_ZN4CUDT22fillSrtHandshake_HSREQEPjmi", "x264_predict_4x4_dc_top_neon", "I422AlphaToARGBRow_C", "uriCopyAuthorityW", "x264_predict_8x8_ddr_neon", "uv_getaddrinfo", "J4AC_android_os_Bundle__getString__withCString__asCBuffer__catchAll", "nghttp2_session_add_item", "ff_h264_unref_picture", "J4AC_android_os_Bundle__getString__withCString__asCBuffer", "av_opt_flag_is_set", "nghttp2_rcbuf_new", "curlx_uztoui", "x264_predict_8x8_hd_neon", "x264_pixel_sa8d_8x8_neon", "_ZN5uripp7convertEm", "x264_predict_8x8_hu_neon", "ffp_set_playback_volume", "_Z24sbrGetChannelPairElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAS2_P13FDK_BITSTREAMji", "Curl_http_auth_act", "x264_deblock_v_chroma_neon", "I400ToARGBRow_Any_NEON", "_ZN3re24Prog18PossibleMatchRangeEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_i", "_ZNK4Json5ValueixEi", "_Z22FDKaacEnc_reduceMinSnrP15CHANNEL_MAPPINGPP14QC_OUT_ELEMENTPP15PSY_OUT_ELEMENTPA2_A60_hiPiii", "Curl_send_plain", "avformat_alloc_output_context2", "av_display_rotation_get", "av_frame_alloc", "_ZN3re23DFA10StateSaverC1EPS0_PNS0_5StateE", "ffp_video_thread", "_ZN5uripp7convertERKNS_4pathE", "ARGB1555ToARGBRow_Any_NEON", "J4AC_android_media_MediaCodec__getOutputFormat", "uv_loop_init", "J4AC_android_media_MediaCodec__stop", "av_samples_set_silence", "ff_ps_ctx_init", "SDL_AoutCloseAudio", "_ZNK4Json5Value14getMemberNamesEv", "srt_recvmsg", "nghttp2_session_client_new2", "Curl_base64_encode", "_ZN4CUDT6unloseERK7CPacket", "J4AC_android_media_MediaFormat__MediaFormat__catchAll", "ARGBCopyAlpha", "x264_opencl_lookahead_delete", "_ZN3UDT10resetlogfaEPKim", "setLimiterNChannels", "ScaleCols_16_C", "_ZN12SmootherBaseC2EP4CUDT", "Curl_splay", "FDKftell", "av_opt_get_dict_val", "_Z23adtsWrite_GetHeaderBitsP11STRUCT_ADTS", "IJK_GLES2_Renderer_create_rgb565", "nghttp2_session_get_stream_user_data", "ff_amf_tag_size", "_ZN3UDT8addlogfaEN7logging5LogFAE", "FDKsbrEnc_EncodeOpd", "_Z10CRvlc_ReadP22CAacDecoderChannelInfoP13FDK_BITSTREAM", "uv_stop", "nghttp2_session_on_goaway_received", "uv_udp_set_broadcast", "ffpipeline_alloc", "ffp_packet_queue_start", "ff_getSwsFunc", "_ZN13CUDTException5clearEv", "x264_predict_4x4_v_c", "_ZNK4Json5ValueixEPKc", "_ZN3UDT18epoll_update_ssockEiiPKi", "J4AC_android_media_AudioTrack__getMaxVolume", "avcodec_pix_fmt_to_codec_tag", "RGBAToUVRow_Any_NEON", "x264_predict_4x4_ddr_neon", "curl_dosend", "_Z26CConcealment_GetFadeFactorP16CConcealmentInfoi", "_Z21transportDec_CrcCheckP12TRANSPORTDEC", "av_aes_crypt", "J420ToABGR", "x264_pixel_init", "ff_amf_match_string", "x264_pixel_hadamard_ac_16x16_neon", "_Z27FreeRam_Sbr_freqBandTableLOPPh", "Curl_resolv", "_ZN3re219ConvertLatin1ToUTF8ERKNS_11StringPieceEPNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "J4AC_java_nio_ByteBuffer__allocate__asGlobalRef__catchAll", "_Z16qmfChangeOutGainP15QMF_FILTER_BANKi", "ff_id3v2_free_extra_meta", "x264_pixel_avg_4x4_neon", "Curl_http2_init_state", "ff_thread_await_progress", "uv__run_check", "_Z19FDKaacEnc_PnsDetectP10PNS_CONFIGP8PNS_DATAiiiPiPKiS3_S3_PsiiiS3_S3_", "x264_predict_4x4_init_aarch64", "av_stream_get_parser", "av_match_list", "_Z21GetRam_Sbr_envYBufferiPh", "NV12ToRGB565Row_Any_NEON", "ffio_close_null_buf", "_Z16autoCorr2nd_realP11ACORR_COEFSPKii", "_Z12ResetPsDeCorP6PS_DEC", "_Z21sbrdecDownSampleLoResPhhS_h", "_ZN3UDT13setloghandlerEPvPFvS0_iPKciS2_S2_E", "sbrDecoder_GetLibInfo", "ARGBLumaColorTable", "SobelXYRow_NEON", "ARGB1555ToUVRow_NEON", "_ZN10CInfoBlockeqERKS_", "x264_predict_16x16_h_c", "curl_fclose", "_ZN4Json23BuiltStyledStreamWriter11writeIndentEv", "ffp_set_subtitle_codec_info", "nghttp2_session_on_push_response_headers_received", "_ZNK5uripp8fragment8encodingEv", "_Z27FreeRam_Sbr_guideVectorOrigPPi", "x264_frame_pop", "nghttp2_hd_deflate_hd_vec", "ff_hevc_slice_rpl", "ff_h264_remove_all_refs", "uv__make_pipe", "_ZN3re24Prog4Inst11InitCaptureEij", "SDL_VoutAndroid_setAMediaCodec", "ff_celt_init", "nghttp2_stream_in_dep_tree", "J4AC_android_media_MediaCodec__configure__catchAll", "Curl_conncache_foreach", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaPlayer__get", "_ZN3UDT11getstreamidEi", "FDKsbrEnc_WritePSBitstream", "J4AC_android_os_Bundle__putString__catchAll", "_Z29GetRam_TransportDecoderBufferi", "_ZN3re216CharClassBuilderC2Ev", "_ZN13CUDTExceptionC1E9CodeMajor9CodeMinori", "ffio_get_checksum", "SDL_SpeedSamplerReset", "_ZNK10CRcvBuffer12debugGetSizeEv", "x264_predict_8x16c_v_neon", "_ZN4Json5Value5clearEv", "swr_set_matrix", "Curl_init_CONNECT", "YUY2ToI422", "RGBAToYRow_C", "SDL_CondWait", "av_frame_free", "av_malloc", "J4AC_android_media_AudioTrack__play__catchAll", "rgb32to24", "x264_predict_8x8c_dc_top_neon", "_ZN4Json5Value12removeMemberEPKcPS0_", "IJK_GLES2_Renderer_renderOverlay", "_ZN16CRendezvousQueueC2Ev", "curl_share_strerror", "ffurl_get_multi_file_handle", "_Z34GetRequiredMemRam_TransportDecoderv", "av_register_input_format", "x264_predict_16x16_v_c", "x264_pixel_vsad_neon", "uv_mutex_init_recursive", "_ZN5uripp7convertEy", "x264_frame_expand_border", "ARGBSubtract", "_ZN5uripp10ip_addressC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_isxdigit", "I420ToI400", "av_free", "av_codec_get_max_lowres", "av_opt_is_set_to_default", "av_format_set_video_codec", "ff_http_match_no_proxy", "x264_prefetch_ref_aarch64", "FDKatan", "_Z28GetRequiredMemRam_SbrEncoderv", "ScaleRowDown34_1_Box_NEON", "ScaleRowDown2Box_16_C", "FDKaacEnc_Initialize", "_Z29GetRequiredMemWorkBufferCore1v", "avio_open_dir", "x264_predict_16x16_p_neon", "nghttp2_session_get_local_settings", "ff_sws_init_input_funcs", "_ZN3UDT12getlasterrorEv", "Curl_conncache_add_conn", "ff_raw_data_read_header", "ff_is_multicast_address", "av_image_fill_pointers", "av_packet_ref", "uv_udp_init", "ffpipeline_is_surface_need_reconfigure_l", "nghttp2_outbound_item_free", "_Z11resetSbrDecP7SBR_DECP15SBR_HEADER_DATAP19SBR_PREV_FRAME_DATAii", "Curl_pipeline_server_blacklisted", "ff_imdct15_uninit", "av_buffer_pool_uninit", "_Z42FDKsbrEnc_PSEnc_ParametricStereoProcessingP19T_PARAMETRIC_STEREOPPsjPP15QMF_FILTER_BANKPPiS7_S1_S4_Pai", "_ZN4Json9OurReader10addCommentEPKcS2_NS_16CommentPlacementE", "uv_udp_init_ex", "x264_deblock_init", "ijkav_register_async_protocol", "Curl_free_request_state", "J4AC_android_os_Build__VERSION__SDK_INT__get__catchAll", "SDL_AMediaCodec_FakeFifo_abort", "_ZN3re26Regexp4SwapEPS0_", "CopyRow_Any_NEON", "nghttp2_map_size", "MaskCpuFlags", "SDL_SpeedSampler2Add", "JNI_OnLoad", "_Z13CalcInvLdDatai", "av_write_image_line", "uv_exepath", "nghttp2_frame_push_promise_free", "J4AC_java_nio_ByteBuffer__allocateDirect__asGlobalRef__catchAll", "Curl_memdup", "x264_picture_alloc", "av_bprintf", "uv_cond_destroy", "Curl_getaddressinfo", "av_reduce", "_ZN10CSndBuffer12dropLateDataERim", "Curl_pipeline_set_site_blacklist", "sws_getIdentityVec", "_Z35GetRam_Sbr_prevEnvelopeCompensationi", "ff_h264_chroma422_dc_dequant_idct_10_c", "FDK_pushBack", "ScaleRowDown38_2_Box_C", "avio_read_dir", "J4AC_android_media_MediaCodec__release__catchAll", "_ZN9CRcvUList6removeEPK4CUDT", "J4AC_android_media_MediaCodec__BufferInfo__presentationTimeUs__set", "curl_mime_encoder", "_Z32FDKaacEnc_FinalizeBitConsumptionP15CHANNEL_MAPPINGP8QC_STATEP6QC_OUTPP14QC_OUT_ELEMENTP12TRANSPORTENC17AUDIO_OBJECT_TYPEja", "curl_sclose", "_ZN4CUDT9constructEv", "InterpolatePlane", "ff_mov_lang_to_iso639", "_ZN4Json11writeStringERKNS_12StreamWriter7FactoryERKNS_5ValueE", "J4AC_android_os_Bundle__Bundle", "_ZN13CUDTException15getErrorMessageEv", "av_base64_decode", "_ZN3re29ApplyFoldEPKNS_8CaseFoldEi", "nghttp2_rcbuf_is_static", "ff_h264_decode_ref_pic_list_reordering", "ff_hevc_decode_nal_vps", "_Z30CAacDecoder_SignalInterruptionP20AAC_DECODER_INSTANCE", "_Z15mul_dbl_sgl_rndis", "_ZN4CUDT21rendezvousSwitchStateE5ref_tI14UDTRequestTypeES0_IbES3_", "_ZN10CSndBufferC2Eii", "ff_h264_idct_add8_422_8_c", "_ZN10CSndBufferC1Eii", "BGRAToI420", "_Z38GetRequiredMemRam_Sbr_detectionVectorsv", "uriComposeQueryCharsRequiredW", "ijkmp_stari_switch_url", "J4AC_android_media_AudioTrack__getAudioSessionId", "av_opt_copy", "av_probe_input_buffer2", "x264_predict_8x16c_init_aarch64", "av_codec_set_codec_descriptor", "_ZN4Json13ValueIteratorC1ERKNS_18ValueConstIteratorE", "Curl_debug", "avcodec_get_name", "av_strlcat", "SDL_AMediaCodecJava_isInputBuffersValid", "uriCopyPathW", "uriToStringCharsRequiredW", "_ZN3re28Compiler7NoMatchEv", "ffp_get_video_codec_info", "SDL_Android_AudioTrack_write", "ffpipeline_select_mediacodec_l", "_Z21FDKhybridAnalysisOpenP18FDK_ANA_HYB_FILTERPijS1_j", "Curl_socket", "x264_plane_copy_interleave_c", "Curl_http2_strerror", "Curl_num_addresses", "av_application_on_io_control", "nghttp2_stream_update_local_initial_window_size", "_Z40GetRequiredMemRam_aacEnc_AdjustThresholdv", "av_get_codec_tag_string", "FDKceil", "_ZN4Json9OurReader12decodeNumberERNS0_5TokenERNS_5ValueE", "av_bsf_init", "x264_threadslice_cond_broadcast", "_ZN4Json17CharReaderBuilderC1Ev", "_ZN3re23RE24InitERKNS_11StringPieceERKNS0_7OptionsE", "_Z8CalcLog2iiPi", "_Z19CProgramConfig_ReadP14CProgramConfigP13FDK_BITSTREAMj", "ff_h264_hl_decode_mb", "av_codec_get_chroma_intra_matrix", "sws_shiftVec", "_Z22FreeRam_aacEnc_QCstatePP8QC_STATE", "nghttp2_session_callbacks_set_on_header_callback2", "x264_pixel_asd8_neon", "nghttp2_submit_settings", "avcodec_descriptor_next", "avio_get_str", "_ZN7CPacket8allocateEm", "_ZN3re23RE27OptionsC1ENS0_13CannedOptionsE", "x264_denoise_dct_neon", "_ZN13CRcvFreshLoss6revokeEi", "SDL_JNI_ThrowException", "_ZN4CUDT13checkNeedDropE5ref_tIbE", "av_frame_copy", "x264_opencl_slicetype_end", "_ZNK5uripp12ipv6_address6stringEb", "_Z49BidirectionalEstimation_UseLowerScfOfCurrentFrameP22CAacDecoderChannelInfo", "x264_pixel_sad_x3_8x16_neon", "x264_pixel_ssim_4x4x2_core_neon", "HalfFloatRow_C", "_ZNK4Json5Value6isBoolEv", "_Z18GetRam_ParamStereoi", "_ZNK4Json5ValueixERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_init_filters", "_ZN3re26Regexp10ParseStateC2ENS0_10ParseFlagsERKNS_11StringPieceEPNS_12RegexpStatusE", "av_reallocp", "FDKmalloc", "_Z15CPulseData_ReadP13FDK_BITSTREAMP10CPulseDataPKsPKvs", "_ZN4Json5ValueC2ERKS0_", "uv__dup2_cloexec", "av_sha_final", "ARGB4444ToARGBRow_NEON", "avcodec_find_decoder", "_Z28FreeRam_PsQmfStatesSynthesisPPi", "ff_urlcontext_child_class_next", "nghttp2_frame_pack_priority", "sbrDecoder_InitElement", "_Z24FDKaacEnc_CodePnsChanneliP10PNS_CONFIGPiS1_S1_S1_", "_ZN9CRcvQueue27worker_TryAsyncRend_OrStoreEiP5CUnitPK8sockaddr", "ScaleRowDown38_C", "_Z37FDKaacEnc_GetChannelModeConfiguration12CHANNEL_MODE", "uv__stream_close", "x264_mc_copy_w8_neon", "I422ToUYVYRow_Any_NEON", "uv_freeaddrinfo", "UYVYToUVRow_NEON", "uv_backend_timeout", "Curl_hostcache_clean", "x264_reference_build_list_optimal", "_ZN3re23RE29QuoteMetaERKNS_11StringPieceE", "ff_silk_decode_superframe", "x264_macroblock_probe_skip", "av_get_pix_fmt", "_Z17GetRam_SbrDecoderi", "av_bprint_channel_layout", "_ZN10CRcvBuffer7readMsgEPci", "_Z21CConcealment_GetDelayP14CConcealParams", "Curl_multi_connchanged", "x264_predict_8x8_vr_neon", "ff_h264_idct_add16_9_c", "_Z17FDKsbrEnc_AddLeftPiS_i", "uriCopyPathA", "x264_intra_sad_x3_8x8c_neon", "_ZN3re28CompilerD1Ev", "avcodec_default_execute", "ff_me_cmp_init", "nghttp2_outbound_queue_push", "_ZN10CInfoBlock6getKeyEv", "x264_mc_weight_w4_offsetsub_neon", "avio_rl24", "ijkmp_shutdown_l", "swr_free", "x264_mb_encode_chroma", "ff_get_qtpalette", "x264_pixel_ssd_nv12", "x264_macroblock_deblock_strength", "_ZN3re23RE23Arg12parse_stringEPKcmPv", "J4A_DeleteLocalRef", "Curl_ssl_delsessionid", "_Z32transportDec_RegisterSscCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAM17AUDIO_OBJECT_TYPEiiiES1_", "x264_cabac_mb_skip", "x264_macroblock_thread_init", "_Z28FDKsbrEnc_initPsBandNrgScaleP11T_PS_ENCODE", "_Z30FreeRam_sbr_QmfStatesSynthesisPPi", "av_guess_frame_rate", "ff_sbr_apply", "ff_h264_idct_add8_10_c", "hcryptCtx_Tx_InjectKM", "_ZN12SrtHSRequest11deserializeEPKcm", "_ZN4CUDT14addressAndSendER7CPacket", "_ZN4Json5ValueC1ERKS0_", "_ZN4Json5Value6appendERKS0_", "ARGBAdd", "ff_h264_idct8_dc_add_8_c", "_ZN4CUDT11postConnectERK7CPacketbP13CUDTExceptionb", "_ZN14ACKWindowTools5storeEPNS_3SeqEmRiS2_ii", "avcodec_encode_audio2", "__multf3", "Curl_recv_has_postponed_data", "SDL_AMediaCodec_create_object_serial", "_ZN4CUDT11checkTimersEv", "avpriv_codec_get_cap_skip_frame_fill_param", "_ZN4Json17CharReaderBuilder10strictModeEPNS_5ValueE", "curl_multi_assign", "Curl_shuffle_addr", "_ZNK13CUDTException12getErrorCodeEv", "av_timecode_make_string", "_Z24FDKaacEnc_updateFillBitsP15CHANNEL_MAPPINGP8QC_STATEPP12ELEMENT_BITSPP6QC_OUT", "I422ToRGB565Row_NEON", "ff_raw_audio_read_header", "x264_sei_avcintra_umid_write", "_Z33Hcr_State_BODY_SIGN_ESC__ESC_WORDP13FDK_BITSTREAMPv", "_ZNK8CChannel12sockoptQueryEii", "ijkmp_dec_ref", "ff_hevc_pred_init", "av_q2intfloat", "nghttp2_priority_spec_default_init", "ffpipeline_get_surface_as_global_ref_l", "_Z30adtsRead_GetRawDataBlockLengthP11STRUCT_ADTSi", "uriRemoveBaseUriW", "ff_mov_write_chan", "nghttp2_is_fatal", "x264_coeff_last15_neon", "_ZN3re23RE23Arg17parse_short_octalEPKcmPv", "_Z21GetRam_Sbr_signMatrixi", "ffp_frame_queue_push", "ffp_pause_l", "nghttp2_pack_settings_payload", "FDKfeof", "SDL_AoutFlushAudio", "nghttp2_stream_attach_item", "x264_pixel_sad_x4_16x16_neon", "nghttp2_frame_unpack_priority_spec", "ScaleRowDown38_NEON", "grow_array", "I422ToABGR", "Curl_multi_max_total_connections", "_ZN3re23DFA8RWLockerD2Ev", "_ZN10CUDTUnited6selectEPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_S7_PK7timeval", "uv__epoll_create", "_ZN4CUDT8sendfileERNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "rgb15to24", "ff_rtp_codec_id", "_ZNK4Json5Value9isNumericEv", "avpriv_frame_get_metadatap", "YUY2ToUV422Row_Any_NEON", "_Z31GetRequiredMemRam_aacEnc_PsyOutv", "srt_close", "_ZN4Json23BuiltStyledStreamWriterC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12CommentStyle4EnumES9_S9_S9_bj", "curl_mime_addpart", "x264_pixel_sad_x3_8x8_neon", "_Z18CConcealment_ApplyP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoPK16SamplingRateInfoihij", "srt_getlasterror", "_Z11SbrCrcCheckP13FDK_BITSTREAMi", "Curl_updatesocket", "swri_realloc_audio", "ARGB1555ToI420", "_Z26transportDec_EndAccessUnitP12TRANSPORTDEC", "ff_prores_idct", "_Z13decodeSbrDataP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAS2_S4_", "nghttp2_session_set_user_data", "uv_timer_start", "ff_imdct_half_c", "_Z17CAacDecoder_CloseP20AAC_DECODER_INSTANCE", "srt_getsockstate", "curl_mime_type", "nghttp2_hd_emit_table_size", "nghttp2_stream_reschedule", "av_opt_set_defaults2", "Curl_hash_clean", "avutil_version", "_ZN16CRendezvousQueue8retrieveEPK8sockaddr5ref_tIiE", "av_frame_get_metadata", "_ZN4CUDT7connectEiPK8sockaddrii", "av_hwdevice_hwconfig_alloc", "av_bmg_get", "nghttp2_frame_ping_init", "SDL_VoutFreeP", "_ZN4Json6Reader10readObjectERNS0_5TokenE", "uv_spawn", "_ZNK4Json5Value15isConvertibleToENS_9ValueTypeE", "x264_dct_init", "nghttp2_session_mem_send", "_Z17transportEnc_InitP12TRANSPORTENCPhi14TRANSPORT_TYPEP12CODER_CONFIGj", "uv_fs_readlink", "ijkmp_set_option", "_Z35Hcr_State_BODY_SIGN_ESC__ESC_PREFIXP13FDK_BITSTREAMPv", "_ZN14CCryptoControl13updateKmStateEim", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_6schemeEPc", "_Z21GetRam_Sbr_v_k_masteri", "x264_cavlc_init", "ff_h264_filter_mb_fast", "sws_freeFilter", "FDK_getFreeBits", "uv_timer_get_repeat", "_Z17ResetLimiterBandsPhS_S_iPK11PATCH_PARAMii", "ABGRToUVRow_Any_NEON", "ffp_queue_picture", "av_opt_next", "_ZN4CUDT8sendmsg2EPKci5ref_tI12SRT_MsgCtrl_E", "av_image_check_size", "J4AC_android_media_AudioTrack__pause", "ff_hevc_clear_refs", "nghttp2_frame_priority_free", "curl_mfprintf", "_ZNK10CSndBuffer14getCurrBufSizeEv", "integral_init8h_neon", "Curl_socket_check", "x264_cabac_encode_decision_c", "uriEqualsUriW", "uriComposeQueryMallocW", "Curl_strcasecompare", "_Z19FDKaacEnc_TnsDetectP8TNS_DATAPK10TNS_CONFIGP8TNS_INFOiPiii", "x264_macroblock_cache_save", "_ZN3re23DFA22RunStateOnByteUnlockedEPNS0_5StateEi", "_ZN3re214SimplifyWalker14SimplifyRepeatEPNS_6RegexpEiiNS1_10ParseFlagsE", "_ZNK3re211StringPiece4copyEPcmm", "FDKtan", "_ZN4Json23BuiltStyledStreamWriter10writeValueERKNS_5ValueE", "_ZN4Json12PathArgumentC2Ev", "ff_yuv2rgb_get_func_ptr", "ff_mov_cenc_write_stbl_atoms", "avcodec_open2", "uriAddBaseUriExA", "_ZN4Json5Value10setCommentEPKcmNS_16CommentPlacementE", "_ZN4Json12RuntimeErrorC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_copy_whiteblacklists", "sws_get_class", "x264_pixel_satd_16x8_neon", "ff_url_join", "_ZN3UDT18epoll_remove_ssockEii", "rgb16tobgr16", "RAWToYRow_C", "_ZN10CSndBuffer13getAvgBufSizeE5ref_tIiES1_", "nghttp2_session_add_window_update", "av_guess_codec", "ijkav_register_ijklongurl_protocol", "av_timecode_check_frame_rate", "SDL_CalculateAudioSpec", "_ZN4Json5Value12removeMemberERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPS0_", "nghttp2_frame_priority_len", "ijkmeta_destroy_p", "_ZN3re26Regexp13ComputeSimpleEv", "Curl_protocol_connect", "I420AlphaToARGB", "uv_tcp_init_ex", "nghttp2_stream_promise_fulfilled", "av_opt_get_sample_fmt", "av_frame_set_sample_rate", "uv_os_setenv", "av_dynarray_add", "curlx_sztosi", "uv__io_feed", "Curl_str2addr", "_ZNK4Json5Value7isInt64Ev", "_ZN3re215PrefixSuccessorEPNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "sws_getDefaultFilter", "Curl_ssl_init", "_ZN3re28CompilerC1Ev", "ff_frame_thread_free", "ff_hevc_cu_transquant_bypass_flag_decode", "_ZN5uripp5queryC2Ev", "_Z25FreeRam_SbrDecWorkBuffer2PPi", "_Z32FDKaacEnc_FreqToBandWithRoundingiiiPKi", "uv__make_close_pending", "Curl_clone_primary_ssl_config", "ffio_open_whitelist", "av_new_program", "_Z14adtsWrite_InitP11STRUCT_ADTSP12CODER_CONFIG", "ARGBToARGB1555Row_NEON", "J4A_loadClass__J4AC_android_media_AudioTrack", "_Z14CPns_ResetDataP8CPnsDataP20CPnsInterChannelData", "av_fifo_size", "nghttp2_session_get_stream_effective_recv_data_length", "nghttp2_session_change_stream_priority", "nghttp2_session_get_root_stream", "IJK_GLES2_checkError", "createLimiter", "FDKatan2", "Curl_cookie_list", "I422ToRGB565", "ffp_get_video_rotate_degrees", "J4AC_android_media_MediaCodec__releaseOutputBuffer", "_ZN4Json5ValueC1EOS0_", "_ZNK4Json6Reader24getFormatedErrorMessagesEv", "_ZN4Json23BuiltStyledStreamWriterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12CommentStyle4EnumES9_S9_S9_bj", "ff_init_desc_no_chr", "_Z13DecodeNonPCWsP13FDK_BITSTREAMP10CErHcrInfo", "_ZN12CSndLossListC1Ei", "x264_predict_8x16c_p_c", "av_bsf_list_append", "_Z21FDKaacEnc_dynBitCountP13BITCNTR_STATEPKsPKjPKiiiiiS6_P12SECTION_DATAS6_S6_S6_j", "uv_tcp_bind", "_ZN3re26Regexp10ParseState7PushDotEv", "_ZNK9CSndQueue8getIpToSEv", "curl_dostrdup", "avcodec_send_packet", "SDL_Android_AudioTrack_play", "_ZN3re23DFA12StateToWorkqEPNS0_5StateEPNS0_5WorkqE", "nghttp2_hd_deflate_init2", "aacEncInfo", "ScalePlaneBilinearDown_16", "_ZN9CRcvQueue15removeConnectorERKib", "J4A_NewGlobalRef__catchAll", "_ZN4Json19StreamWriterBuilderixENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZN3re28BitState9TrySearchEiPKc", "uv_fs_event_init", "_ZN3re23RE2C1ERKNS_11StringPieceE", "_Z40FDKsbrEnc_SbrMissingHarmonicsDetectorQmfP30SBR_MISSING_HARMONICS_DETECTORPPiS2_PaPK14SBR_FRAME_INFOPKhS1_PhS8_iS9_S1_", "_ZN3re23RE2C2EPKc", "_Z25FreeRam_sbr_OverlapBufferPPi", "J4AC_android_os_Bundle__putInt__withCString", "_Z23slotBasedHybridAnalysisPiS_S_S_P6HYBRID", "J4AC_android_os_Bundle__putParcelableArrayList__catchAll", "ff_side_data_update_matrix_encoding", "nghttp2_session_want_write", "_ZN4CUDT11processCtrlER7CPacket", "Curl_hash_start_iterate", "nghttp2_session_callbacks_set_on_frame_not_send_callback", "ff_thread_can_start_frame", "_Z11FreeDrcInfoPP8CDrcInfo", "nghttp2_pq_top", "_ZNK4Json6Reader4goodEv", "J4AC_android_media_MediaFormat__MediaFormat__asGlobalRef__catchAll", "_ZN6google19ReadFlagsFromStringERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcb", "_Z21adtsWrite_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERi", "curl_easy_setopt", "_ZN4Json13valueToStringEj", "curl_easy_pause", "_ZN9CRcvQueue31worker_ProcessConnectionRequestEP5CUnitPK8sockaddr", "uv_poll_init_socket", "_Z19GetRam_aacEnc_QCouti", "_ZN4Json12PathArgumentC1Ej", "uv_fs_copyfile", "ff_opus_parse_packet", "FDKaacEnc_Close", "ff_hevc_sao_type_idx_decode", "J4AC_android_media_AudioTrack__getNativeOutputSampleRate", "_ZNK7CPacket15getMsgOrderFlagEv", "_ZN3re23RE23Arg21parse_longlong_cradixEPKcmPv", "StariAvVideoEncoderPrepare", "_Z20TransmissionEventStr18ETransmissionEvent", "uv_has_ref", "uri_TESTING_ONLY_ParseIpFourW", "curl_getenv", "avcodec_set_dimensions", "ff_h264_luma_dc_dequant_idct_9_c", "Curl_mime_prepare_headers", "_Z23FDKaacEnc_peCalculationP7PE_DATAPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELP9TOOLSINFOP11ATS_ELEMENTi", "StariAvAudioEncoderPrepare", "StariAvVideoEncoderSetKeyFrameInterval", "_ZN3re24Prog10CompileSetEPNS_6RegexpENS_3RE26AnchorEl", "ff_crc04C11DB7_update", "Player_JNI_OnLoad", "_ZN5uripp10append_hexEcRNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "ff_tls_init", "I422ToARGB1555Row_Any_NEON", "ScaleRowDown34_0_Box_NEON", "J4A_GetMethodID__catchAll", "_ZN4Json8FeaturesC2Ev", "uv__eventfd2", "_Z31GetRequiredMemRam_SbrDecChannelv", "av_log_get_level", "_ZN16CRendezvousQueueD1Ev", "av_format_get_control_message_cb", "av_format_inject_global_side_data", "x264_zigzag_init", "_ZN4CUDT21processConnectRequestEPK8sockaddrR7CPacket", "av_frame_get_pkt_duration", "_ZN4Json8FeaturesC1Ev", "_Z23getBitstreamElementList17AUDIO_OBJECT_TYPEahh", "av_add_stable", "av_memcpy_backptr", "nghttp2_nv_compare_name", "uv_print_active_handles", "x264_cabac_block_residual_8x8_rd_c", "ff_hevc_bump_frame", "uv_pipe_pending_count", "nghttp2_session_on_settings_received", "_ZN3UDT10getsockoptEii11SRT_SOCKOPTPvPi", "nghttp2_hd_entry_free", "FDKfflush", "curl_easy_unescape", "uriUnescapeInPlaceW", "av_bitstream_filter_filter", "_ZN9CSndUListC2Ev", "nghttp2_submit_origin", "SobelYRow_C", "x264_predict_16x16_dc_top_neon", "uriComposeQueryMallocExW", "_Z24FDKaacEnc_DistributeBitsP13ADJ_THR_STATEP11ATS_ELEMENTPP15PSY_OUT_CHANNELP7PE_DATAPiS8_iiiiiii", "_ZN3UDT7startupEv", "_ZN3re28Compiler10EmptyWidthENS_7EmptyOpE", "ARGBSubtractRow_NEON", "Curl_str_key_compare", "_ZN3re23RE27ReplaceEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_RKNS_11StringPieceE", "ff_check_pixfmt_descriptors", "_Z25Hcr_State_BODY_SIGN__SIGNP13FDK_BITSTREAMPv", "_ZNK10CRcvBuffer14getRcvDataSizeEv", "_ZN3re214ByteMapBuilder5MergeEv", "Curl_expire", "J4AC_android_media_MediaCodec__BufferInfo__presentationTimeUs__set__catchAll", "J4AC_android_media_MediaCodec__BufferInfo__offset__get", "H420ToARGB", "swri_audio_convert", "avpriv_dict_set_timestamp", "ff_decode_sbr_extension", "ARGBBlendRow_NEON", "_ZN3re26Regexp10ParseState15DoConcatenationEv", "_ZNK7CPacket9getLengthEv", "x264_deblock_h_chroma_422_neon", "ff_h264_pred_direct_motion", "_ZN9CSndUList3popERP8sockaddrR7CPacket", "_ZN3re26Regexp10ParseState10PushDollarEv", "_Z32FDKsbrEnc_InitExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiiiiijiPhj", "x264_dequant_8x8_neon", "av_opt_set_q", "uv__io_close", "_ZN3re23RE2C1EPKc", "Curl_if_is_interface_name", "nghttp2_submit_window_update", "_ZN3re26Regexp10ParseState10DoCollapseENS_8RegexpOpE", "ffurl_alloc", "_Z29CLatmDemux_GetOtherDataLengthP10CLatmDemux", "Curl_ssl_connect_nonblocking", "_ZN4CUDT7sendmsgEiPKciibm", "uv_key_create", "SDL_Android_AudioTrack_getAudioSessionId", "_ZN3re28Compiler5SetupENS_6Regexp10ParseFlagsElNS_3RE26AnchorE", "av_opt_show2", "_Z21GetRequiredMemDrcInfov", "ff_add_index_entry", "uv_fs_fstat", "x264_predict_4x4_v_aarch64", "ff_get_bmp_header", "Curl_rand_hex", "_Z28FDK_DRC_Generator_InitializeP8DRC_COMP11DRC_PROFILES1_ij12CHANNEL_MODE13CHANNEL_ORDERh", "av_bsf_get_by_name", "_ZNK3re211StringPiece5rfindEcm", "avcodec_descriptor_get", "x264_cabac_block_residual_c", "_Z32GetRequiredMemRam_Sbr_signMatrixv", "_ZN3re26Regexp12QuickDestroyEv", "_Z18CConcealment_StoreP16CConcealmentInfoP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "swr_close", "uv_free_cpu_info", "J4AC_android_media_PlaybackParams__setSpeed", "ffp_set_inject_opaque", "ScaleARGBRowDown2Linear_C", "_ZN4CUDT8recvmsg2EPci5ref_tI12SRT_MsgCtrl_E", "_Z29Hcr_State_BODY_SIGN_ESC__BODYP13FDK_BITSTREAMPv", "_ZN3UDT7cleanupEv", "x264_bitstream_init", "x264_decimate_score64_neon", "_ZN3re28Compiler6FinishEv", "ARGBSepiaRow_NEON", "av_application_did_http_seek", "x264_store_interleave_chroma_neon", "get_rotation", "_Z17GetRam_SbrElementi", "ScaleARGBRowDownEven_Any_NEON", "_ZN4Json18StyledStreamWriter8unindentEv", "nghttp2_hd_huff_decode", "ijkmp_get_loop", "_ZN3re26Regexp14RequiredPrefixEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPbPPS0_", "ARGBToYRow_NEON", "avcodec_find_decoder_by_name", "ff_put_bmp_header", "Curl_http2_remove_child", "_ZN3re214CoalesceWalker11CanCoalesceEPNS_6RegexpES2_", "Curl_copy_header_value", "Curl_flush_cookies", "x264_pixel_avg2_w8_neon", "nghttp2_session_callbacks_set_send_data_callback", "sws_allocVec", "SDL_JNI_DeleteGlobalRefP", "_ZN4Json9OurReader10readNumberEb", "_ZN10CRcvBuffer10readBufferEPci", "av_read_play", "ARGBToYRow_Any_NEON", "_Z16maxSubbandSamplePPiS0_iiii", "av_aes_ctr_set_iv", "uv_fs_event_start", "_ZN4CUDT8addEPollEi", "av_buffer_create", "ARGBAttenuateRow_Any_NEON", "_Z16ConnectStatusStr14EConnectStatus", "_Z28FreeRam_aacEnc_PsyOutChannelPP15PSY_OUT_CHANNEL", "nghttp2_hd_inflate_get_table_entry", "J4AC_android_media_AudioTrack__AudioTrack", "av_opt_eval_int64", "ff_avc_parse_nal_units", "uv_timer_init", "_Z10CTns_ApplyP8CTnsDataPK8CIcsInfoPiPK16SamplingRateInfoi", "_ZN6CTimer5rdtscERm", "x264_plane_copy_c", "curl_multi_wait", "x264_add8x8_idct_dc_neon", "avcodec_version", "x264_pixel_sad_4x8_neon", "_ZN10CUDTUnitedD1Ev", "_ZN3re23RE23Arg16parse_long_radixEPKcmPvi", "ff_generate_avci_extradata", "_Z23FDKsbrEnc_frameSplitterPPiS_P22SBR_TRANSIENT_DETECTORPhS3_iiiiiS_", "sws_convertPalette8ToPacked32", "x264_frame_push", "_ZNK4Json5Value8asStringEv", "_ZN3re2lsERNSt6__ndk113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11StringPieceE", "FDKmemset", "ff_bswapdsp_init", "avcodec_string", "J4AC_android_media_AudioTrack__pause__catchAll", "av_frame_move_ref", "av_stream_get_end_pts", "_Z35GetRequiredMemRam_SbrDecWorkBuffer2v", "I420Rect", "_ZN3re214SimplifyWalker4CopyEPNS_6RegexpE", "_ZN4Json5ValueC1Ej", "nghttp2_session_get_next_stream_id", "_ZNK4Json5Value8isUInt64Ev", "_ZN10CUDTSocketD2Ev", "x264_ratecontrol_zone_init", "ffp_packet_queue_put", "av_get_standard_channel_layout", "RGB565ToARGBRow_C", "ff_er_frame_start", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_Rt", "_ZN8CChannel6attachEi", "avformat_get_mov_audio_tags", "curl_multi_socket_all", "ARGBQuantizeRow_C", "_ZN3re26Regexp10ParseState20DoLeftParenNoCaptureEv", "x264_cabac_context_init", "_Z32GetRequiredMemRam_aacEnc_QCstatev", "Curl_http2_init_userset", "_Z32FDKsbrEnc_initFrameInfoGeneratorP18SBR_ENVELOPE_FRAMEiiiiPK8FREQ_REShi", "_ZNK8CChannel6sendtoEPK8sockaddrR7CPacket", "uv_once", "_ZN3re26Regexp5ParseERKNS_11StringPieceENS0_10ParseFlagsEPNS_12RegexpStatusE", "_ZNK5uripp3urilsERNSt6__ndk113basic_ostreamIcNS1_11char_traitsIcEEEE", "ff_ps_apply", "_Z18transportDec_ClosePP12TRANSPORTDEC", "av_probe_input_format", "_Z22adtsWrite_EncodeHeaderP11STRUCT_ADTSP13FDK_BITSTREAMii", "Curl_multi_dump", "inflateGetHeader", "uv_fs_ftruncate", "nghttp2_iv_check", "av_get_audio_frame_duration", "x264_frame_deblock_row", "_ZN10CRcvBuffer7scanMsgE5ref_tIiES1_S0_IbE", "SDL_UnlockMutex", "av_dynarray2_add", "av_pix_fmt_count_planes", "_ZN3re214ByteMapBuilder4MarkEii", "_ZN4Json10FastWriter5writeERKNS_5ValueE", "I420ToI422", "_ZN3re23RE2D2Ev", "ff_hevc_get_ref_list", "_ZN3re24Prog4Inst7InitAltEjj", "Curl_isgraph", "Curl_open", "x264_analyse_weight_frame", "ff_simple_idct_add_12", "ff_thread_await_progress2", "_Z32transportDec_RegisterSbrCallbackP12TRANSPORTDECPFiPvP13FDK_BITSTREAMiii17AUDIO_OBJECT_TYPE14MP4_ELEMENT_IDiES1_", "nghttp2_session_check_request_allowed", "_ZN10CRcvBuffer14isRcvDataReadyE5ref_tImES0_IiE", "avpriv_copy_pce_data", "Curl_global_host_cache_dtor", "_Z25FDKsbrEnc_transientDetectP22SBR_TRANSIENT_DETECTORPPiS1_Phiiii", "_Z27CConcealment_InitCommonDataP14CConcealParams", "J4AC_android_os_Bundle__getInt__catchAll", "_ZN10CUDTUnited13newConnectionEiPK8sockaddrP10CHandShakeRK7CPacket", "_ZN3re28Compiler13Add_80_10ffffEv", "_ZN10CUnitQueue8increaseEv", "Curl_none_cert_status_request", "J4AC_android_media_MediaCodec__BufferInfo__size__set__catchAll", "aacDecoder_Close", "_ZN6CGuard7enterCSER15pthread_mutex_t", "resetLimiter", "_ZN3re28CompilerD0Ev", "x264_load_deinterleave_chroma_fdec_neon", "x264_sub16x16_dct8_neon", "nghttp2_bufs_orb_hold", "nghttp2_session_keep_closed_stream", "ARGBExtractAlphaRow_NEON", "Curl_conncache_find_bundle", "avcodec_encode_video2", "_ZN3re24Prog4Inst13InitByteRangeEiiij", "nghttp2_session_on_data_received", "_Z5fLog2ii", "J4AC_android_media_PlaybackParams__setSpeed__asGlobalRef__catchAll", "av_force_cpu_flags", "_ZNK4Json5Value8isMemberERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_crcEDB88320_update", "x264_coeff_level_run16_neon", "_ZN4Json9OurReader9pushErrorERKNS_5ValueERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE", "av_parse_ratio", "ARGB4444ToI420", "_Z35FDKaacEnc_IntensityStereoProcessingPiS_S_S_S_S_S_S_S_S_S_S_S_iiiPKiiS_S_PP8PNS_DATA", "ff_sbrdsp_init", "x264_macroblock_write_cavlc", "av_realloc_array", "J4AC_android_os_Bundle__getString", "_ZN3re23NFAD2Ev", "curl_easy_perform_ev", "x264_mbtree_fix8_pack_neon", "uv_tcp_connect", "av_codec_get_lowres", "Curl_resolver_getsock", "ff_h264_check_intra4x4_pred_mode", "_ZN4Json18ValueConstIteratorC2ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "J4AC_android_media_AudioTrack__flush", "ff_h264_idct_dc_add_8_c", "nghttp2_priority_spec_check_default", "_ZN4Json18ValueConstIteratorC2ERKNS_13ValueIteratorE", "Curl_hostcache_prune", "J4AC_android_media_AudioTrack__getSampleRate", "uv__prepare_close", "x264_mc_copy_w16_neon", "av_read_frame", "x264_mb_predict_mv_16x16", "av_opt_set_int", "nghttp2_buf_init2", "curl_socketpair", "_Z10imdct_gainPiS_i", "ff_end_tag", "J4AC_android_media_MediaCodec__getOutputFormat__catchAll", "av_display_matrix_flip", "uv_loop_alive", "nghttp2_frame_unpack_settings_payload2", "_Z29transportDec_GetNrOfSubFramesP12TRANSPORTDEC", "av_frame_get_channels", "CopyRow_NEON", "_ZN10CRcvBufferC1EP10CUnitQueuei", "uv__stream_destroy", "uri_TESTING_ONLY_ParseIpFourA", "x264_predict_8x8c_dc_neon", "ff_socket", "av_strstart", "ARGBToARGB1555Row_Any_NEON", "av_get_channel_description", "av_application_on_async_statistic", "J4AC_android_os_Bundle__getLong", "SDL_AMediaCodec_deleteP", "av_get_random_seed", "Curl_ssl_config_matches", "_Z19aacDecoder_drcApplyP8CDrcInfoPvP22CAacDecoderChannelInfoP15CDrcChannelDataPiiii", "_Z36FDKsbrEnc_CountSbrChannelPairElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAS6_P11COMMON_DATAj", "_ZN5uripp7convertEi", "curl_maprintf", "_ZN3UDT12getsockstateEi", "_ZN5uripp8fragmentC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_amf_write_string", "nghttp2_outbound_queue_init", "_Z18resetLppTransposerP13SBR_LPP_TRANShPhhS1_hhj", "avcodec_get_subtitle_rect_class", "J4AC_android_os_Bundle__Bundle__catchAll", "ScaleRowDown34_NEON", "ff_h264_sei_stereo_mode", "_ZN10CUDTUnited9getStatusEi", "_ZN3re28Compiler22UncachedRuneByteSuffixEhhbi", "nghttp2_session_callbacks_set_unpack_extension_callback", "_ZN3re26Regexp10ParseState17MaybeConcatStringEiNS0_10ParseFlagsE", "ff_wav_codec_get_id", "uv_fs_event_stop", "InterpolateRow_Any_NEON", "av_aes_init", "av_opt_set_from_string", "sbrEncoder_Open", "_ZN7CPacketD1Ev", "uv_disable_stdio_inheritance", "_ZNK4Json5Value3getEPKcS2_RKS0_", "x264_lookahead_is_empty", "_ZNK5uripp4path4backEv", "ijkmeta_get_int64_l", "avcodec_license", "_ZN14CCryptoControlD1Ev", "av_opt_eval_q", "_ZN10CIPAddress4ptonEP8sockaddrPKji", "Curl_resolver_cancel", "nghttp2_session_callbacks_new", "x264_pixel_avg_4x8_neon", "av_frame_get_pkt_size", "av_usleep", "Curl_ssl_kill_session", "_ZN12CSndLossList6insertEii", "_ZN6CTimerD1Ev", "curlx_nonblock", "av_packet_alloc", "Curl_connalive", "av_match_name", "_Z31transportDec_GetAuBitsRemainingP12TRANSPORTDECj", "J4AC_java_nio_ByteBuffer__getDirectBufferAddress", "nghttp2_session_pack_data", "_Z20FreeRam_aacEnc_QCoutPP6QC_OUT", "ARGBToYRow_C", "J4AC_android_media_AudioTrack__setStereoVolume", "FDKaacEnc_CalcBitsPerFrame", "nghttp2_session_consume_connection", "av_codec_next", "_ZN10CUDTUnited18epoll_update_usockEiiPKi", "ff_crcA001_update", "av_stristr", "SDL_JNI_DetachThreadEnv", "av_format_get_probe_score", "x264_memcpy_aligned_neon", "J4AC_android_media_MediaFormat__setInteger__catchAll", "ff_tls_deinit", "x264_mc_weight_w20_nodenom_neon", "avcodec_default_get_buffer2", "ARGB4444ToUVRow_Any_NEON", "av_append_packet", "x264_reduce_fraction", "curl_mime_headers", "av_pkt_dump_log2", "_Z18GetRam_bsOutbufferi", "ff_h264_luma_dc_dequant_idct_10_c", "HaiCrypt_Tx_GetKeyFlags", "SDL_JNI_OnUnload", "_Z31CLatmDemux_GetFrameLengthInBitsP10CLatmDemux", "_ZN4Json5Value8CZStringC2EOS1_", "curl_easy_cleanup", "_ZN5uripp5query4sortEv", "ff_listen_bind", "_ZN10CUDTUnited18epoll_update_ssockEiiPKi", "ff_id3v2_parse_apic", "_Z8fDivNormiiPi", "uv_barrier_init", "_Z37GetRequiredMemRam_aacEnc_BitCntrStatev", "curl_global_init", "SDL_JNI_SetupThreadEnv", "_ZN6google26HandleCommandLineHelpFlagsEv", "av_freep", "J4AC_android_media_MediaCodec__getInputBuffers__catchAll", "_ZN4Json18ValueConstIteratoraSERKNS_17ValueIteratorBaseE", "_ZN5uripp6schemeC1Ev", "avpriv_set_systematic_pal2", "_ZN3re24Prog4DumpEv", "av_write_uncoded_frame", "x264_sei_recovery_point_write", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERb", "YUY2ToARGBRow_C", "_ZNK12CRcvLossList13getLossLengthEv", "uriHexdigToIntW", "pthread_barrier_init", "_Z16sbrGetHeaderDataP15SBR_HEADER_DATAP13FDK_BITSTREAMji", "SDL_Android_AudioTrack_free", "_ZN9CSndQueue6sendtoEPK8sockaddrR7CPacket", "J4AC_android_media_AudioTrack__setStereoVolume__catchAll", "av_write_uncoded_frame_query", "av_bsf_list_free", "hcryptCtx_SetSecret", "Curl_printable_address", "avcodec_receive_packet", "nghttp2_frame_origin_free", "Curl_fileinfo_alloc", "_Z34FDKsbrEnc_sbrNoiseFloorEstimateQmfP24SBR_NOISE_FLOOR_ESTIMATEPK14SBR_FRAME_INFOPiPS4_PaiijiP9INVF_MODEj", "ff_h264_idct8_dc_add_14_c", "x264_pixel_var_16x16_neon", "uriResetUriW", "ScaleOffset", "_Z6dst_IVPiiS_", "audiotrack_get_native_output_sample_rate", "Curl_thread_create", "x264_mc_copy_w4_neon", "uv_ip6_name", "_ZN3UDT12setlogstreamERNSt6__ndk113basic_ostreamIcNS0_11char_traitsIcEEEE", "HaiCrypt_Tx_GetBuf", "ffp_get_playable_duration_l", "_ZN3UDT9recvfile2EiPKcPlli", "ff_h264_decode_seq_parameter_set", "hcryptCtx_Tx_CloneKey", "SDL_AMediaCodec_increaseReference", "ConvertFromI420", "_Z31FreeRam_Sbr_guideVectorDetectedPPh", "J4AC_android_media_MediaCodec__createByCodecName__withCString__asGlobalRef__catchAll", "_ZN4Json18StyledStreamWriter11writeIndentEv", "avcodec_find_encoder", "av_lfg_init", "J4AC_android_media_MediaFormat__setByteBuffer__withCString", "_ZN3re23RE23Arg15parse_int_radixEPKcmPvi", "ff_choose_chroma_location", "_ZN4Json5Value11CommentInfoC1Ev", "nghttp2_session_adjust_closed_stream", "_ZN3re214SimplifyWalker8PreVisitEPNS_6RegexpES2_Pb", "ffp_get_master_sync_type", "J4AC_android_media_AudioTrack__getStreamType__catchAll", "_Z16autoCorr2nd_cplxP11ACORR_COEFSPKiS2_i", "_Z29GetRequiredMemRam_bsOutbufferv", "SDL_ProfilerReset", "nghttp2_hd_huff_encode", "Curl_resolv_timeout", "x264_coeff_level_run4_aarch64", "_Z27GetRam_PsQmfStatesSynthesisi", "_ZN5uripp11domain_namepLERKS0_", "FDKprintfErr", "uv_cond_wait", "_Z20CJointStereo_ApplyISPP22CAacDecoderChannelInfoPKsPKhiij", "_ZN6google28SetCommandLineOptionWithModeEPKcS1_NS_15FlagSettingModeE", "Curl_conncache_extract_oldest", "_ZN4Json12StreamWriter7FactoryD1Ev", "ff_simple_idct_put_12", "ff_parse_creation_time_metadata", "RAWToARGBRow_NEON", "FDKgetchar", "srt_setsockflag", "Curl_pipeline_site_blacklisted", "ARGBCopyYToAlpha", "ff_h264_idct_dc_add_10_c", "HalfFloat1Row_Any_NEON", "_ZNK5uripp12ipv6_address8zero_runERmS1_", "x264_dct4x4dc_neon", "x264_encoder_headers", "ff_h264_filter_mb", "av_fifo_generic_peek_at", "_ZN4Json12StreamWriterD2Ev", "x264_slurp_file", "av_audio_fifo_drain", "_ZN3re23RE27ExtractERKNS_11StringPieceERKS0_S3_PNSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE", "FDKafree_L", "av_probe_input_buffer", "ff_data_to_hex", "_ZNK3re212RegexpStatus4TextEv", "ARGBQuantize", "Curl_none_session_free", "_ZN8CChannel13setUDPSockOptEv", "_ZN5uripp12ipv6_addressC2Ev", "_ZN6google7GetArgvEv", "_ZN3re26Regexp6DecrefEv", "_Z21FreeRam_SbrDecChannelPP11SBR_CHANNEL", "Curl_base64_decode", "ffurl_close", "ijk_image_convert", "av_bsf_list_finalize", "_ZN3re24Prog10first_byteEv", "x264_intra_satd_x3_16x16", "SDL_AMediaCodec_flush", "_ZN3re23RE2C1ERKNS_11StringPieceERKNS0_7OptionsE", "ScaleRowDown38_3_Box_NEON", "_ZN3re23DFA9SearchTTFEPNS0_12SearchParamsE", "x264_pixel_ssd_wxh", "pcmDmx_ApplyFrame", "inflateResetKeep", "ff_init_vscale_pfn", "nghttp2_map_free", "_Z25FDKaacEnc_InitElementBitsP8QC_STATEP15CHANNEL_MAPPINGiii", "x264_mbtree_propagate_list_internal_neon", "av_audio_fifo_peek", "J4A_GetSystemAndroidApiLevel", "_ZN3re26RegexpD1Ev", "_ZNK3re23RE25MatchERKNS_11StringPieceEmmNS0_6AnchorEPS1_i", "ff_id3v2_match", "_ZN4Json5ValueC1El", "av_crc_init", "_Z26GetRam_Sbr_freqBandTableLOi", "x264_predict_16x16_init", "_ZN4Json12StyledWriterC2Ev", "avio_close_dir", "nghttp2_pq_remove", "_Z10fixp_atan2ii", "uv__handle_type", "ff_stream_add_bitstream_filter", "nghttp2_hd_deflate_get_dynamic_table_size", "_ZNK4Json5Value13asLargestUIntEv", "_ZN6google21ProgramInvocationNameEv", "x264_pixel_sad_16x16_neon", "_ZN4CUDT11getsocknameEiP8sockaddrPi", "_ZN3re26Regexp17ConcatOrAlternateENS_8RegexpOpEPPS0_iNS0_10ParseFlagsEb", "x264_cabac_encode_terminal_asm", "_ZN3re28BitStateC1EPNS_4ProgE", "Curl_multi_closed", "_Z27CConcealment_SetAttenuationP14CConcealParamsPsS1_", "av_frame_remove_side_data", "_ZN3re23RE23Arg17parse_long_cradixEPKcmPv", "x264_encoder_parameters", "stari_export_symbols", "_Z9CHcr_ReadP13FDK_BITSTREAMP22CAacDecoderChannelInfo", "FDK_toolsGetLibInfo", "av_packet_side_data_name", "_Z30FDKaacEnc_CheckBandEnergyOptimPKiPiS0_iS1_S1_i", "srt_connect_debug", "SDL_AoutSetPlaybackRate", "ff_check_interrupt", "_ZN6google17ReadFromFlagsFileERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcb", "x264_quant_chroma_dc_trellis", "_ZN9CRcvUListC2Ev", "ARGBLumaColorTableRow_C", "inflateUndermine", "uriFixEmptyTrailSegmentW", "_ZN3re23RE23Arg16parse_long_octalEPKcmPv", "ff_opus_parse_extradata", "_ZN4CUDT7setupCCEv", "_Z32FDKsbrEnc_DeleteTonCorrParamExtrP16SBR_TON_CORR_EST", "_ZN4CUDT6socketEiii", "uv__eventfd", "av_compare_mod", "ff_replaygain_export_raw", "x264_pixel_satd_4x4_neon", "Curl_closesocket", "uv__realloc", "J4A_GetStaticMethodID__catchAll", "av_parser_next", "_Z14FDKcrcStartRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "_Z37GetRequiredMemRam_Sbr_guideVectorDiffv", "_ZN4CUDT6sampleEP8CPerfMonb", "ff_ape_parse_tag", "av_fifo_realloc2", "uv_process_kill", "_ZN3UDT6acceptEiP8sockaddrPi", "_ZN4CUDT6getOptE11SRT_SOCKOPTPvRi", "av_find_best_stream", "_ZN10CUDTUnited9updateMuxEP10CUDTSocketPK8sockaddrPKi", "_ZN3re24Prog9DeleteDFAEPNS_3DFAE", "curl_dogetaddrinfo", "nghttp2_session_get_hd_inflate_dynamic_table_size", "ijkmp_set_data_source", "I420ToABGR", "_ZN3re23RE23Arg16parse_uint_octalEPKcmPv", "_ZN3re23RE23Arg10parse_longEPKcmPv", "_ZNK4Json5Value3getERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_", "uv_cpu_info", "_ZN4Json13ValueIteratorC1ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "_ZN4CUDT16DisconnectSignalE18ETransmissionEvent", "J4AC_android_media_MediaCodec__queueInputBuffer", "av_opt_free", "Curl_add_buffer_free", "av_format_set_data_codec", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__close__catchAll", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaDataSource__set__catchAll", "av_guess_format", "Curl_infof", "av_set_options_string", "ff_h264_idct_add16intra_9_c", "avio_get_str16le", "_ZNK8CChannel5closeEv", "_ZN3re26Regexp6RepeatEPS0_NS0_10ParseFlagsEii", "ff_h264_ps_uninit", "av_frame_make_writable", "uv_update_time", "zlibVersion", "J4AC_android_media_AudioTrack__setSpeed", "Curl_resolver_global_init", "av_opt_find", "av_fifo_grow", "_Z20CJointStereo_ApplyMSPP22CAacDecoderChannelInfoPKsPKhiii", "av_codec_set_chroma_intra_matrix", "ff_mov_cenc_avc_write_nal_units", "J4AC_android_os_Bundle__putString__withCString", "uv__loop_configure", "Curl_http_done", "avcodec_descriptor_get_by_name", "_ZN4Json10FastWriter20dropNullPlaceholdersEv", "av_strerror", "_Z30FreeRam_TransportDecoderBufferPPh", "_ZN7CPacket4packE14UDTMessageTypePvS1_i", "nghttp2_rcbuf_del", "_ZN10CUDTUnited6locateEPK8sockaddrii", "_ZN3re23RE23Arg11parse_scharEPKcmPv", "IJK_GLES2_Renderer_use", "_ZN3re28Compiler13FindByteRangeEii", "_ZN4Json5Value8CZStringC1Ej", "_Z25sbrDecoder_drcInitChannelP18SBRDEC_DRC_CHANNEL", "srt_msgctrl_init", "_ZN4CUDT18epoll_update_usockEiiPKi", "av_hwframe_transfer_get_formats", "x264_idct4x4dc_neon", "_ZN14CCryptoControl19processSrtMsg_KMRSPEPKjmi", "nghttp2_submit_shutdown_notice", "uriHexToLetterExW", "_Z35GetRequiredMemRam_aacEnc_AacEncoderv", "x264_encoder_maximum_delayed_frames", "avio_put_str16le", "curl_multi_init", "_Z14Get_AacEncoderi", "_ZN6google9FlagSaverD1Ev", "ffpipeline_open_audio_output", "ff_hevc_unref_frame", "_ZN4CUDT7recvmsgEPciRm", "_ZN13CUDTExceptionC1ERKS_", "I420ToRGB565Dither", "_ZN3UDT6selectEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_S7_PK7timeval", "uv_udp_open", "_Z34GetRequiredMemRam_aacEnc_PsyStaticv", "_ZN3re28Compiler5QuestENS_4FragEb", "curl_global_cleanup", "_ZN3re26Regexp10ParseState8DoFinishEv", "Curl_ipv6_scope", "ff_hex_to_data", "_ZN4Json5ValueixERKNS_12StaticStringE", "av_opt_eval_int", "_ZN9CSndUList6insertElPK4CUDT", "_Z27transportDec_GetAuBitsTotalP12TRANSPORTDECj", "_Z21rescaleSubbandSamplesPPiS0_iiiii", "integral_init4h_neon", "_Z21FDKsbrEnc_UpdateLoResPhPiS_i", "ff_h264_decode_picture_parameter_set", "ff_imdct15_init", "ARGBToUVRow_C", "ARGBShuffleRow_NEON", "sws_getCoefficients", "_ZN4Json12StyledWriter15writeWithIndentERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_bsf_child_class_next", "ScaleRowDown2Linear_16_C", "_ZNK5uripp12ipv6_address5writeERNSt6__ndk113basic_ostreamIcNS1_11char_traitsIcEEEEb", "_ZN6google25AllowCommandLineReparsingEv", "av_frame_set_pkt_duration", "FDK_ResetBitBuffer", "ff_rtmp_check_alloc_array", "avcodec_default_execute2", "_ZN3UDT11getpeernameEiP8sockaddrPi", "x264_weights_analyse", "ff_h264_luma_dc_dequant_idct_12_c", "FDKcalloc", "RAWToRGB24Row_Any_NEON", "avio_handshake", "uriEscapeExA", "ff_hevc_log2_res_scale_abs", "ff_h264_idct8_add4_14_c", "_ZN3re28Compiler16AddRuneRangeUTF8Eiib", "x264_reduce_fraction64", "sbrEncoder_Close", "ScaleRowDown4_NEON", "uv_tcp_nodelay", "J4AC_android_media_MediaFormat__createVideoFormat", "_ZN4CUDT12processCloseEv", "uv_pipe_init", "x264_coeff_level_run15_neon", "J4AC_android_media_MediaCodec__BufferInfo__offset__get__catchAll", "ff_amf_read_string", "Curl_init_do", "_ZN6CEPollC1Ev", "_ZN3re23RE2C2ERKNS_11StringPieceE", "ff_seek_frame_binary", "nghttp2_session_get_last_proc_stream_id", "av_packet_get_side_data", "Curl_multi_pipelining_site_bl", "av_fifo_generic_peek", "J4AC_android_media_MediaFormat__createVideoFormat__withCString__asGlobalRef__catchAll", "aacDecoder_ConfigRaw", "_ZNK4Json5Value6isUIntEv", "av_bitstream_filter_close", "_Z29GetRequiredMemWorkBufferCore2v", "SDL_VoutAMediaCodec_CreateOverlay", "_Z35GetRequiredMemRam_sbr_OverlapBufferv", "aacDecoder_GetFreeBytes", "_Z27FDKaacEnc_GetMonoStereoMode12CHANNEL_MODE", "_ZN4Json6ReaderC2ERKNS_8FeaturesE", "nghttp2_stream_dep_remove_subtree", "ff_hevc_cabac_init", "x264_opencl_flush", "_ZN8CChannelD2Ev", "_Z24CTns_ReadDataPresentFlagP13FDK_BITSTREAMP8CTnsData", "curl_getdate", "_ZN3re23RE23Arg21parse_ulonglong_radixEPKcmPvi", "uriToStringW", "_Z27FDKsbrEnc_getSbrStopFreqRAWii", "_Z23CBlock_ReadSpectralDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "_ZN4Json23BuiltStyledStreamWriter5writeERKNS_5ValueEPNSt6__ndk113basic_ostreamIcNS4_11char_traitsIcEEEE", "ff_alloc_packet", "_ZN16CRendezvousQueueC1Ev", "J4AC_android_media_MediaFormat__setInteger", "_Z16drmRead_CrcCheckP10STRUCT_DRM", "ff_cbrt_tableinit", "SDL_AMediaFormat_deleteP", "ARGBSetRow_NEON", "_ZN3UDT7perfmonEiP8CPerfMonb", "Curl_tcpnodelay", "ff_hevc_merge_flag_decode", "ff_choose_timebase", "uv_loop_close", "_ZN3re216CharClassBuilder12AddCharClassEPS0_", "_ZNK4Json5Value8isStringEv", "ff_urldecode", "hcryptCtx_Rx_ParseKM", "nghttp2_hd_deflate_hd_bufs", "ARGBUnattenuate", "SDL_ProfilerEnd", "_ZN12CRcvLossList6removeEi", "J4A_DeleteLocalRef__p", "ff_avc_mp4_find_startcode", "ff_kbd_window_init_fixed", "inflateInit2_", "uriAddBaseUriExW", "av_get_alt_sample_fmt", "uv_unref", "RGB565ToUVRow_C", "_ZN4CUDT9initSynchEv", "_Z36GetRequiredMemRam_aacEnc_ElementBitsv", "I420ToRGBA", "ff_h264_chroma422_dc_dequant_idct_9_c", "x264_mb_mc_8x8", "x264_frame_pop_unused", "rgb64tobgr48_nobswap", "_ZN6CGuard7leaveCSER15pthread_mutex_t", "av_frame_ref", "Curl_llist_insert_next", "_ZN3re26Regexp9AlternateEPPS0_iNS0_10ParseFlagsE", "uv_sem_post", "nghttp2_session_add_ping", "_Z52BidirectionalEstimation_UseScfOfPrevFrameAsReferenceP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "x264_prefetch_fenc_420_aarch64", "ARGBAttenuate", "uv_strerror", "avio_seek_time", "swri_rematrix_free", "_ZN4Json5Value8CZStringD2Ev", "_ZN3UDT17getlasterror_descEv", "_ZN6CEPoll12update_ssockEiRKiPS0_", "nghttp2_rcbuf_incref", "_ZN3re26Regexp10ParseState9PushCaratEv", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__asGlobalRef__catchAll", "ijkmp_io_stat_complete_register", "_ZN3re24Prog7FlattenEv", "UYVYToUVRow_C", "nghttp2_session_server_new3", "srt_listen", "x264_pixel_avg_4x2_neon", "_Z19FreeWorkBufferCore2PPi", "av_frame_get_sample_rate", "_ZN4Json10FastWriterC2Ev", "av_copy_packet", "av_buffer_allocz", "uriStackToOctet", "ScaleRowDown4_Any_NEON", "_ZN4CUDT6bstatsEiP12CBytePerfMonbb", "av_format_set_metadata_header_padding", "_Z6dct_IVPiiS_", "_ZN14CCryptoControl4initE13HandshakeSideb", "J4A_loadClass__J4AC_sdk_stari_ijk_player_IjkMediaPlayer", "_ZN4Json5Value8CZStringC1EOS1_", "Curl_hash_init", "_ZN6CEPoll6createEv", "av_aes_ctr_init", "J4AC_android_os_Bundle__getString__withCString", "curl_multi_fdset", "ff_get_codec_guid", "ff_h264_idct8_add_9_c", "ff_h264_idct8_dc_add_9_c", "ff_match_2uint16", "ARGBToRGB565Row_Any_NEON", "_Z24GetRam_aacEnc_PsyElementi", "av_get_channel_layout_channel_index", "RAWToARGB", "uv_fs_read", "uv_poll_stop", "uv_backend_fd", "_Z12CPns_InitPnsP8CPnsDataP20CPnsInterChannelDataPiS3_", "_Z41FDKsbrEnc_InitSbrMissingHarmonicsDetectorP30SBR_MISSING_HARMONICS_DETECTORiiiiiiij", "_ZN4Json23BuiltStyledStreamWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE", "_Z36FDKsbrEnc_resetSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEPKhi", "_ZN10CUDTUnited11getsocknameEiP8sockaddrPi", "_ZN3re214SimplifyWalker10ShortVisitEPNS_6RegexpES2_", "_ZN3re23NFAC2EPNS_4ProgE", "_ZN9CSndUList7remove_EPK4CUDT", "pcmDmx_SetMatrixMixdownFromPce", "_ZN4Json9OurReader5parseEPKcS2_RNS_5ValueEb", "_ZN4CUDTD1Ev", "_ZNK4Json5Value12isValidIndexEj", "x264_encoder_reconfig", "avpriv_h264_has_num_reorder_frames", "ijkmeta_get_string_l", "ARGBToRGB24Row_C", "ARGBShadeRow_NEON", "_ZN6CGuard11forceUnlockEv", "_ZN3re28BitState4PushEiPKci", "nghttp2_should_send_window_update", "av_audio_fifo_size", "nghttp2_stream_defer_item", "_ZN5uripp8fragmentC2Ev", "_ZN6google13StringFromEnvEPKcS1_", "_ZN3re23DFA14RunStateOnByteEPNS0_5StateEi", "_ZN7logging13LogDispatcher5ProxyC1ERS0_", "sbrEncoder_GetEstimateBitrate", "ff_put_v", "x264_mc_weight_w8_offsetsub_neon", "sbrDecoder_Header", "av_buffer_pool_get", "x264_pixel_ssd_16x8_neon", "uv_cwd", "_Z21CarryBitToBranchValuehjPjS_", "ff_riff_write_info_tag", "_ZN3re23RE23Arg17parse_stringpieceEPKcmPv", "Curl_conncache_init", "_ZN4Json17ValueIteratorBase9decrementEv", "_Z21FDKaacEnc_countValuesPsii", "ijkmp_create", "_ZN3re23RE23Arg11parse_floatEPKcmPv", "av_hex_dump", "ff_amf_read_number", "x264_rc_analyse_slice", "uv_now", "Curl_none_false_start", "Curl_isprint", "ff_rtmp_packet_read", "uriEqualsUriA", "uv__run_timers", "x264_cabac_encode_init_core", "SDL_AMediaCodec_configure", "swri_noise_shaping_int16", "uv_replace_allocator", "nghttp2_frame_settings_free", "_ZN10CRcvBuffer7ackDataEi", "J4AC_android_media_AudioTrack__getMinBufferSize", "nghttp2_adjust_local_window_size", "_ZN4Json19valueToQuotedStringEPKc", "_Z11DeletePsDecPP6PS_DEC", "ijkmp_get_state", "curl_easy_getinfo", "uv__recvmsg", "Curl_none_shutdown", "uv_idle_stop", "av_d2q", "x264_predict_8x8_v_c", "_Z16FreeRam_PsEncodePP11T_PS_ENCODE", "UYVYToI422", "_ZN5uripp12ipv6_addressC1Ev", "av_frame_get_channel_layout", "_Z8dit_ifftPiiPK8FIXP_SPKi", "uriComposeQueryMallocExA", "IJK_GLES2_Renderer_isValid", "RGB565ToYRow_C", "_ZN6CGuard10createCondER14pthread_cond_t", "_ZN3re26Regexp10ParseState12PushRepeatOpENS_8RegexpOpERKNS_11StringPieceEb", "uriParseUriExA", "ijkmp_global_uninit", "ijkmp_set_property_int64", "_ZN6CTimerC1Ev", "x264_predict_8x8_init", "x264_intra_sad_x3_8x8c", "ScaleRowDown34_16_C", "SDL_AMediaCodec_FakeFifo_destroy", "J4AC_android_media_MediaFormat__createVideoFormat__catchAll", "J4A_GetStaticFieldID__catchAll", "rgb64tobgr48_bswap", "srt_create_socket", "avformat_init_output", "UYVYToUV422Row_C", "nghttp2_frame_origin_init", "av_dict_count", "_ZN10CSndBuffer17addBufferFromFileERNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEEi", "_ZN10CRcvBuffer16getTsbPdTimeBaseEj", "ff_hevc_pcm_flag_decode", "_Z29FDKsbrEnc_extractSbrEnvelope2P15SBR_CONFIG_DATAP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP11ENV_CHANNELS8_P11COMMON_DATAP17SBR_ENV_TEMP_DATAP19SBR_FRAME_TEMP_DATAi", "_ZN10CInfoBlockaSERKS_", "_ZN4Json9OurReader10readObjectERNS0_5TokenE", "ff_h264_idct_add16_10_c", "HaiCryptCipher_OpenSSL_EVP_CTR", "_ZN3re26Regexp7CaptureEPS0_NS0_10ParseFlagsEi", "StariAvAudioEncoderGetCodecConfig", "SDL_Android_AudioTrack_get_target_spec", "x264_pixel_sad_8x4_neon", "_Z16fDivNormHighPreciiPi", "SDL_AMediaCodec_dequeueOutputBuffer", "_ZN3UDT8dellogfaEN7logging5LogFAE", "avcodec_parameters_copy", "av_bprint_append_data", "_ZN3re23NFA12AddToThreadqEPNS_11SparseArrayIPNS0_6ThreadEEEiiiPKcS3_", "J444ToARGB", "avpriv_copy_bits", "ff_simple_idct248_put", "ff_thread_video_encode_frame", "avio_accept", "ARGBSetRow_C", "ff_amf_write_bool", "x264_deblock_h_chroma_neon", "CopyRow_C", "J4AC_android_media_AudioTrack__getMaxVolume__catchAll", "Curl_vsetopt", "x264_lookahead_get_frames", "av_application_will_http_seek", "_ZN6google21ParseCommandLineFlagsEPiPPPcb", "ff_update_cur_dts", "SDL_Android_AudioTrack_flush", "uv__tcp_nodelay", "srt_cleanup", "uv__idle_close", "ScaleAddRow_16_C", "ff_thread_free", "_Z22CAacDecoder_AncDataGetP8CAncDataiPPhPi", "_ZNK4Json5Value7isArrayEv", "I422ToRGB24Row_NEON", "RGBAToYRow_NEON", "_ZN8CChannel13getRcvBufSizeEv", "Curl_ip2addr", "_Z26DrmRawSdcAudioConfig_ParseP21CSAudioSpecificConfigP13FDK_BITSTREAM", "_ZN3re23RE28ConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi", "av_codec_is_encoder", "ScaleSlope", "swr_get_delay", "Curl_isspace", "_ZN3re23RE23Arg18parse_longlong_hexEPKcmPv", "_ZN4Json18ValueConstIteratorC1ERKNS_13ValueIteratorE", "uv__check_close", "av_register_codec_parser", "uriComposeQueryW", "_ZN14CCryptoControlC1EP4CUDTi", "x264_zigzag_scan_4x4_frame_neon", "x264_sei_avcintra_vanc_write", "uv_if_indextoname", "uv_fs_stat", "curl_share_cleanup", "curl_slist_append", "ff_celt_decode_frame", "uv_signal_start_oneshot", "_Z26FreeRam_aacEnc_PsyInternalPP12PSY_INTERNAL", "x264_lookahead_delete", "__umodti3", "Curl_conncache_return_conn", "_ZN4Json6ReaderC1ERKNS_8FeaturesE", "_Z24FDKaacEnc_Transform_RealPKsPiiiS1_iS1_iS1_", "_Z30CLatmDemux_ReadStreamMuxConfigP13FDK_BITSTREAMP10CLatmDemuxP13CSTpCallBacksP21CSAudioSpecificConfigPi", "_ZNK7CPacket13getRexmitFlagEv", "sws_getGaussianVec", "FDK_put", "avpriv_set_pts_info", "J4AC_android_os_Bundle__putParcelableArrayList__withCString__catchAll", "_ZN3re23NFAD1Ev", "Curl_connecthost", "ff_rtmp_packet_write", "_ZN3re23DFA8RWLockerC1EPNS_5MutexE", "x264_cpu_detect", "nghttp2_stream_get_weight", "uriAddBaseUriW", "J4A_NewByteArray__asGlobalRef__catchAll", "J4A_DeleteGlobalRef", "_ZNK8CChannel8getIpTTLEv", "uv_pipe_open", "ff_get_packet_palette", "Curl_http2_init", "J4AC_android_media_MediaFormat__getInteger__withCString__catchAll", "_ZN4Json12PathArgumentC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_http2_setup_conn", "_ZN14CCryptoControlD2Ev", "ARGBToRAWRow_Any_NEON", "nghttp2_hd_deflate_new", "Curl_http_input_auth", "x264_me_refine_bidir_satd", "FDKstrncmp", "x264_sync_frame_list_init", "_ZN3re23RE23Arg15parse_int_octalEPKcmPv", "nghttp2_frame_pack_settings_payload", "x264_cqm_init", "setLimiterThreshold", "_ZN10CUDTUnited10epoll_waitEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_lS7_S7_", "_ZN3UDT5bind2Eii", "J4AC_android_os_Bundle__getInt", "nghttp2_hd_inflate_del", "ijkmp_get_msg", "_Z23FDK_MetadataEnc_ProcessP20FDK_METADATA_ENCODERPsiPK15AACENC_MetaDataPP18AACENC_EXT_PAYLOADPjPi", "ARGB1555ToYRow_Any_NEON", "x264_add16x16_idct_dc_neon", "uv_mutex_lock", "x264_frame_expand_border_filtered", "_ZN4Json6Reader11readCommentEv", "ScaleARGBRowDown2Box_C", "SDL_CondWaitTimeout", "uv_tcp_listen", "SplitUVRow_NEON", "ff_rtp_chain_mux_open", "x264_macroblock_cache_load_interlaced", "_ZN4CUDT4bindEii", "avutil_configuration", "av_expr_free", "_ZN7logging13LogDispatcher5Proxy11ExtractNameENSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "curlx_sltous", "zcfree", "_Z24rvlcReadBitFromBitstreamP13FDK_BITSTREAMPth", "_Z26GetRam_Sbr_guideVectorOrigi", "_ZN12CSndLossListD1Ev", "_Z20adtsRead_CrcStartRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "_Z24FreeRam_TransportDecoderPP12TRANSPORTDEC", "_Z7IcsReadP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfoj", "FDKacos", "ffurl_read", "ARGBToARGB4444Row_C", "nghttp2_hd_inflate_get_num_table_entries", "BGRAToUVRow_NEON", "_ZN4Json13ValueIteratoraSERKS0_", "av_image_fill_max_pixsteps", "x264_frame_push_blank_unused", "Curl_llist_destroy", "pcmDmx_Parse", "uv__count_bufs", "_ZN4CUDT8recvfileERNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "nghttp2_frame_unpack_ping_payload", "_ZN4Json6WriterD2Ev", "_ZN8CChannel8setIpToSEi", "nghttp2_frame_unpack_push_promise_payload", "ff_h264_idct8_add_10_c", "nghttp2_bufs_len", "_Z17adtsRead_CrcCheckP11STRUCT_ADTS", "_Z21transportDec_FillDataP12TRANSPORTDECPhjPji", "x264_mbtree_propagate_cost_neon", "SDL_AMediaCodecFake_dequeueOutputBuffer", "ARGBCopyAlphaRow_C", "av_opt_get", "x264_macroblock_deblock", "Curl_none_close_all", "SDL_AMediaCodec_decreaseReference", "_ZN3re23DFA8RWLockerC2EPNS_5MutexE", "_ZN4Json19StreamWriterBuilderC2Ev", "ScaleRowDown34_1_Box_16_C", "ScaleARGBColsUp2_C", "SDL_AMediaCodec_configure_surface", "ff_h264_get_profile", "ARGBShuffle", "ff_set_dimensions", "uv__signal_loop_cleanup", "_ZN5uripp11domain_nameC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_Z31FDKsbrEnc_ResetTonCorrParamExtrP16SBR_TON_CORR_ESTiiPhiiPS1_Pii", "_Z14RequestTypeStr14UDTRequestType", "_ZN10CInfoBlock7convertEPK8sockaddriPj", "x264_memzero_aligned_neon", "_Z28FDKaacEnc_SyncBlockSwitchingP23BLOCK_SWITCHING_CONTROLS0_ii", "_Z24qmfAnalysisFilteringSlotP15QMF_FILTER_BANKPiS1_PKsiS1_", "av_stereo3d_from_name", "ff_mov_get_channel_layout_tag", "ff_mdct_calc_c", "J4AC_android_media_MediaCodec__BufferInfo__presentationTimeUs__get__catchAll", "_ZN6CTimer16readCPUFrequencyEv", "SDL_WaitThread", "_ZN9CRcvQueue19worker_RetrieveUnitE5ref_tIiES0_IP5CUnitEP8sockaddr", "uv__io_active", "ffio_fdopen", "Curl_ipv6works", "_ZN5uripp11domain_nameC2Ev", "_ZN3re23DFA11CachedStateEPiij", "crc32", "J4A_loadClass__J4AC_android_os_Build", "J4AC_android_media_MediaCodec__BufferInfo__BufferInfo", "swresample_configuration", "Curl_ssl_initsessions", "_Z22FDK_DRC_Generator_CalcP8DRC_COMPPKsiiiiiPiS3_", "_Z21StatisticalEstimationP22CAacDecoderChannelInfo", "Curl_parse_login_details", "ff_h264_build_ref_list", "uv_uptime", "av_hmac_init", "x264_plane_copy_deinterleave_v210_c", "SDL_Android_AudioTrack_stop", "ScaleRowDown38_Any_NEON", "curlx_sltosi", "Curl_resolver_cleanup", "_ZN3UDT18epoll_remove_usockEii", "_ZN3UDT15epoll_add_ssockEiiPKi", "swr_set_channel_mapping", "x264_pixel_sa8d_16x16_neon", "av_pix_fmt_swap_endianness", "ff_h2645_extract_rbsp", "uv__stream_flush_write_queue", "av_gettime_relative_is_monotonic", "ff_get_cpu_flags_aarch64", "MirrorPlane", "x264_pixel_avg2_w16_neon", "av_opt_query_ranges_default", "UYVYToUVRow_Any_NEON", "_ZN10CUDTSocketD1Ev", "uv_barrier_destroy", "Curl_rand", "_ZN10CUDTUnitedC2Ev", "_ZNK8CChannel11getPeerAddrEP8sockaddr", "_ZN3re214LookupCaseFoldEPKNS_8CaseFoldEii", "ARGBToRGB565DitherRow_C", "_ZN3re221FactorAlternationImpl6Round2EPPNS_6RegexpEiNS1_10ParseFlagsEPNSt6__ndk16vectorINS_6SpliceENS5_9allocatorIS7_EEEE", "_Z24FDK_MetadataEnc_GetDelayP20FDK_METADATA_ENCODER", "_ZN9CRcvUListD2Ev", "SDL_DestroyMutex", "ff_celt_flush", "_Z6fLdPowiiii", "Curl_set_dns_local_ip4", "av_mallocz", "Curl_conncache_remove_conn", "ffp_start_l", "_ZN3re26Regexp4StarEPS0_NS0_10ParseFlagsE", "setLimiterRelease", "J420ToARGB", "x264_pixel_sad_x3_8x4_neon", "I444ToARGBRow_Any_NEON", "ff_h264_idct_dc_add_9_c", "Curl_sendpipe_head", "uriRemoveDotSegmentsA", "avcodec_register", "RGBAToI420", "_Z22FreeRam_SbrDynamic_RAMPPi", "ff_hevc_hls_residual_coding", "nghttp2_frame_unpack_altsvc_payload", "Curl_meets_timecondition", "ff_standardize_creation_time", "av_get_pix_fmt_name", "av_log_missing_feature", "_Z30FDKsbrEnc_InitSbrHuffmanTablesP12SBR_ENV_DATAP17SBR_CODE_ENVELOPES2_7AMP_RES", "ff_h264_decode_mb_cavlc", "ijkmp_global_set_inject_callback", "_ZN9CSndUListD2Ev", "_Z25FDKsbrEnc_UpdateFreqScalePhPiiiii", "J4AC_android_media_MediaCodec__release", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__getSize__catchAll", "sbrDecoder_Open", "_Z25aacDecoder_drcMarkPayloadP8CDrcInfoP13FDK_BITSTREAM23AACDEC_DRC_PAYLOAD_TYPE", "av_strncasecmp", "setLimiterSampleRate", "I420ToARGB4444", "_Z24transportDec_CrcStartRegP12TRANSPORTDECi", "_ZN4Json19StreamWriterBuilderD1Ev", "_ZN3re26Regexp10ParseState13DoVerticalBarEv", "ARGBColorMatrixRow_NEON", "x264_param_parse", "ffpipenode_free_p", "_ZNK3re23RE211ProgramSizeEv", "_ZN3re23RE23Arg18parse_ushort_radixEPKcmPvi", "x264_predict_8x8c_h_neon", "_Z21GetRam_SbrDynamic_RAMi", "uv_getrusage", "ff_h264_idct_dc_add_12_c", "ff_hevc_mpm_idx_decode", "ScaleRowDown2Linear_C", "ff_aac_sbr_ctx_close", "uv_loop_size", "ff_hevc_parse_sps", "_ZN10CSndBuffer9addBufferEPKciibm5ref_tIiE", "IJK_GLES2_loadShader", "curl_dorecv", "avpriv_mpegts_parse_close", "_Z16CBlock_GetEscapeP13FDK_BITSTREAMi", "_ZN3re24Prog4Inst4DumpEv", "hcryptCtx_Tx_Refresh", "_ZN4CMD57computeEPKcPh", "ffp_set_property_float", "x264_mb_predict_mv_direct16x16", "_ZN3re26Regexp10ParseState16ParseCCCharacterEPNS_11StringPieceEPiRKS2_PNS_12RegexpStatusE", "ARGBGrayTo", "_Z10KmStateStr12SRT_KM_STATE", "nghttp2_priority_spec_init", "ff_sdp_write_media", "ff_h264_pred_init", "_ZN4Json11OurFeatures3allEv", "_ZN4Json6Reader17readCStyleCommentEv", "uv__pthread_sigmask", "inflate", "_Z7fPowIntiiiPi", "_Z32CLatmDemux_ReadPayloadLengthInfoP13FDK_BITSTREAMP10CLatmDemux", "_ZN4CUDT12getlasterrorEv", "_ZNK3re23RE213ProgramFanoutEPNSt6__ndk13mapIiiNS1_4lessIiEENS1_9allocatorINS1_4pairIKiiEEEEEE", "nghttp2_session_client_new", "_ZNK3re23RE219CapturingGroupNamesEv", "uriToStringCharsRequiredA", "ijkmeta_get_child_l", "ARGBToARGB4444Row_NEON", "ijkmp_android_set_surface_l", "curl_multi_setopt", "curl_strequal", "avio_put_str16be", "x264_pixel_var_8x16_neon", "_ZN6google21RegisterFlagValidatorEPKmPFbPKcmE", "Curl_splayremovebyaddr", "ScaleFilterReduce", "_ZN8SmootherD2Ev", "uv_fs_event_getpath", "_Z5f2Powii", "x264_rdo_init", "ARGB4444ToYRow_Any_NEON", "x264_sei_buffering_period_write", "_ZN10CRcvBuffer17getRcvAvgDataSizeERiS0_", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onNativeInvoke__catchAll", "Curl_wildcard_dtor", "avsubtitle_free", "_ZN4Json5Value11removeIndexEjPS0_", "_ZN4Json9OurReader21readStringSingleQuoteEv", "StariAvVideoEncoderRelease", "IJK_GLES2_Renderer_create_base", "nghttp2_session_recv", "FDKaacEnc_GetVBRBitrate", "curl_easy_reset", "ijkmeta_lock", "ff_frame_thread_encoder_init", "av_log_default_callback", "_ZN4CUDT12epoll_createEv", "ff_hevc_sao_eo_class_decode", "srt_epoll_remove_usock", "ARGBToUVJRow_C", "av_bprint_get_buffer", "ARGBCopy", "ScaleRowDown2Box_Any_NEON", "_Z10ApplyToolsPP22CAacDecoderChannelInfoPK16SamplingRateInfoji", "Curl_all_content_encodings", "nghttp2_stream_get_stream_id", "x264_me_search_ref", "_ZN4CUDT9clearDataEv", "nghttp2_http_on_trailer_headers", "nghttp2_nv_array_del", "uv__io_fork", "_Z26GetRam_Sbr_guideVectorDiffi", "av_read_pause", "_ZN3re212RegexpStatus8CodeTextENS_16RegexpStatusCodeE", "J4AC_android_media_AudioTrack__write__catchAll", "_ZN4CUDT21applyResponseSettingsEv", "ff_amf_read_bool", "_Z34FDKsbrEnc_InitSbrTransientDetectorP22SBR_TRANSIENT_DETECTORjiiP16sbrConfigurationiiiiiii", "uv_mutex_trylock", "_ZN4CUDT13createCrypterE13HandshakeSideb", "Curl_wildcard_init", "nghttp2_session_get_effective_recv_data_length", "av_opt_get_image_size", "_ZN3re23RE23Arg12parse_ushortEPKcmPv", "uv_thread_create", "ff_hevc_ref_idx_lx_decode", "I422AlphaToARGBRow_NEON", "curl_mime_data", "ff_compute_frame_duration", "J4AC_android_media_MediaCodec__dequeueOutputBuffer", "J4A_FindClass__asGlobalRef__catchAll", "J4AC_android_media_AudioTrack__getAudioSessionId__catchAll", "x264_macroblock_thread_allocate", "ScaleColsUp2_16_C", "av_frame_set_colorspace", "ffio_read_indirect", "aacDecoder_AncDataInit", "x264_deblock_strength_neon", "SetRow_Any_NEON", "aacDecoder_AncDataGet", "SobelToPlaneRow_C", "avio_wl16", "nghttp2_stream_get_next_sibling", "nghttp2_hd_inflate_new2", "_ZN4Json10LogicErrorC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_conncache_bundle_size", "J4A_ExceptionCheck__throwAny", "ff_hevc_decode_nal_pps", "av_bsf_list_alloc", "av_channel_layout_extract_channel", "FDKaalloc", "_ZN3re23RE213GlobalReplaceEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_RKNS_11StringPieceE", "av_packet_unpack_dictionary", "srt_bstats", "_Z23GetRam_aacEnc_QCchanneliPh", "uv_sem_destroy", "sbrEncoder_GetInBufferSize", "nghttp2_submit_request", "_ZN16CRendezvousQueue6removeERKib", "x264_pixel_sad_x4_8x4_neon", "ffio_limit", "_Z21aacDecoder_drcGetInfoP8CDrcInfoPaS1_", "YUY2ToUV422Row_NEON", "ScaleARGBCols64_C", "ffp_packet_queue_flush", "uv_os_getpid", "_ZN10CRcvBuffer14getRcvDataSizeERiS0_", "_Z27CLatmDemux_GetNrOfSubFramesP10CLatmDemux", "x264_pixel_avg_16x16_neon", "ff_hevc_sao_offset_sign_decode", "av_bsf_get_class", "ff_amf_write_object_start", "nghttp2_frame_unpack_rst_stream_payload", "uv_udp_try_send", "nghttp2_hd_deflate_init", "FixedDiv_C", "NV21ToARGB", "_ZN3re26Regexp17AlternateNoFactorEPPS0_iNS0_10ParseFlagsE", "x264_intra_sad_x3_16x16_neon", "_ZN4CUDT12destroySynchEv", "_ZN3re26Regexp8SimplifyEv", "nghttp2_session_get_hd_deflate_dynamic_table_size", "_ZN3re23DFA18WorkqToCachedStateEPNS0_5WorkqES2_j", "ffp_packet_queue_destroy", "_ZN3UDT15epoll_add_usockEiiPKi", "Curl_updateconninfo", "RGB565ToARGBRow_Any_NEON", "_Z28FDKaacEnc_InitBlockSwitchingP23BLOCK_SWITCHING_CONTROLi", "SDL_AMediaCodecJava_queueInputBuffer", "UYVYToARGBRow_C", "_ZN4Json9OurReader16recoverFromErrorENS0_9TokenTypeE", "uv__signal_global_once_init", "I422ToBGRA", "Curl_removeHandleFromPipeline", "ScaleARGBFilterCols_C", "aacDecoder_GetStreamInfo", "av_dict_parse_string", "Curl_add_custom_headers", "_ZN4Json5Value8CZStringC2ERKS1_", "uriFreeUriMembersW", "I422ToRGBA", "ARGBUnattenuateRow_C", "ff_h264_chroma422_dc_dequant_idct_12_c", "ScaleARGBRowDown2Linear_Any_NEON", "x264_add8x8_idct_neon", "_ZN4CUDT11removeEPollEi", "ijkmp_dec_ref_p", "srt_getsockopt", "_Z10CTns_ResetP8CTnsData", "_ZN4Json10FastWriter18omitEndingLineFeedEv", "_ZN3UDT9sendfile2EiPKcPlli", "_ZN6CEPoll7releaseEi", "avformat_new_stream", "_ZN3re23DFA13AnalyzeSearchEPNS0_12SearchParamsE", "ff_h264_idct_add8_422_9_c", "_ZN4Json8Features10strictModeEv", "_Z33FDKsbrEnc_CalculateTonalityQuotasP16SBR_TON_CORR_ESTPPiS2_ii", "uv_udp_set_ttl", "srt_clearlasterror", "x264_cabac_encode_init", "curl_mprintf", "_Z22transportEnc_LatmWriteP11LATM_STREAMP13FDK_BITSTREAMiiP13CSTpCallBacks", "_ZN3UDT6bstatsEiP12CBytePerfMonb", "_Z13GetAacDecoderi", "ijkmeta_create", "_ZN4CUDT16fillSrtHandshakeEPjmii", "avcodec_align_dimensions", "J4AC_android_media_MediaCodec__BufferInfo__flags__get__catchAll", "ffurl_seek", "av_timecode_make_mpeg_tc_string", "av_hwdevice_get_hwframe_constraints", "uv__strndup", "_ZN5uripp6schemeC2Ev", "av_get_padded_bits_per_pixel", "_ZN4Json12StreamWriterD0Ev", "x264_deblock_h_chroma_intra_neon", "ff_parse_specific_params", "nghttp2_pq_update", "_ZN4Json6Reader22decodeUnicodeCodePointERNS0_5TokenERPKcS4_Rj", "av_opt_get_video_rate", "_ZN4CUDT8selectExERKNSt6__ndk16vectorIiNS0_9allocatorIiEEEEPS4_S7_S7_l", "av_image_fill_arrays", "uv_thread_self", "uriRemoveBaseUriA", "x264_pixel_hadamard_ac_8x8_neon", "_ZN4Json18ValueConstIteratorC2Ev", "ARGB4444ToARGB", "srt_recvfile", "uv_fs_fdatasync", "Curl_set_dns_local_ip6", "srt_epoll_add_ssock", "_Z31GetRequiredMemRam_Sbr_guideScfbv", "avpriv_request_sample", "ffp_check_buffering_l", "_ZN4CUDT5closeEi", "_Z32GetRequiredMemRam_SbrDynamic_RAMv", "_ZN5stari14AvAudioEncoderC2Ev", "x264_add8x8_idct8_neon", "x264_predict_8x8c_init_aarch64", "srt_accept", "ffp_global_set_log_report", "_Z29FDKaacEnc_CalcSfbMaxScaleSpecPKiS0_Pii", "_ZN4CUDT8sendfileEiRNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "aacEncClose", "_Z29GetRam_aacEnc_AdjustThresholdi", "_Z21FDK_MetadataEnc_ClosePP20FDK_METADATA_ENCODER", "_ZN14CCryptoControl19processSrtMsg_KMREQEPKjmPj5ref_tImEi", "MergeUVPlane", "J4A_loadClass__J4AC_java_nio_Buffer", "ARGBToUV444Row_C", "ScaleRowDown34_1_Box_C", "swr_get_out_samples", "nghttp2_hd_inflate_get_max_dynamic_table_size", "srt_getsockflag", "_ZN4Json9OurReader10readStringEv", "x264_hrd_fullness", "_ZN12CSndLossList13getLossLengthEv", "avio_close_dyn_buf", "x264_intra_sad_x3_8x8", "x264_prefetch_fenc_422_aarch64", "ff_h264_idct8_add_12_c", "_Z21FDKaacEnc_psyMainInitP12PSY_INTERNAL17AUDIO_OBJECT_TYPEP15CHANNEL_MAPPINGiiiiiiijj", "x264_pixel_avg_8x8_neon", "Curl_posttransfer", "x264_mc_weight_w16_offsetsub_neon", "uv__pipe2", "nghttp2_session_add_rst_stream", "x264_deblock_h_chroma_422_intra_neon", "ff_h2645_packet_split", "_ZN9CRcvQueueC1Ev", "av_find_nearest_q_idx", "J4AC_android_media_AudioTrack__write", "_ZNK4Json5Value6isNullEv", "RGB565ToUVRow_NEON", "av_gettime_relative", "av_bitstream_filter_next", "_ZN3UDT11epoll_wait2EiPiS0_S0_S0_lS0_S0_S0_S0_", "av_timecode_get_smpte_from_framenum", "nghttp2_buf_wrap_init", "av_sha512_alloc", "av_codec_set_lowres", "ffp_start_from_l", "inflateSetDictionary", "BGRAToYRow_NEON", "Curl_none_data_pending", "_ZN4Json23BuiltStyledStreamWriter15writeWithIndentERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "J4AC_android_media_AudioTrack__setPlaybackParams", "print_error", "av_hwframe_transfer_data", "J4AC_android_media_MediaCodec__BufferInfo__size__set", "_ZN4CUDT10getsockoptEii11SRT_SOCKOPTPvPi", "_Z35GetRequiredMemAacDecoderChannelInfov", "Curl_conncache_close_all_connections", "uv__open_file", "uriCompareRangeA", "av_interleaved_write_uncoded_frame", "curl_msnprintf", "nghttp2_bufs_wrap_free", "uv__fs_scandir_cleanup", "uv__platform_loop_init", "nghttp2_frame_pack_push_promise", "_Z21FDKsbrEnc_AddVecRightPiS_S_i", "av_rescale_q_rnd", "uriRemoveDotSegmentsExA", "x264_copy_column8", "av_display_rotation_set", "ijkmp_set_property_float", "_Z11ApplyPsSlotP6PS_DECPPiS2_S1_S1_", "uriIsHostSetA", "inflate_table", "uv_if_indextoiid", "_Z17drmRead_CrcEndRegP10STRUCT_DRMP13FDK_BITSTREAMi", "_ZN16CRendezvousQueue6insertERKiP4CUDTiPK8sockaddrm", "av_buffer_get_ref_count", "J422ToARGB", "ScaleARGBFilterCols_Any_NEON", "_ZNK5uripp9authoritylsERNSt6__ndk113basic_ostreamIcNS1_11char_traitsIcEEEE", "_ZN10CUDTUnited9newSocketEii", "av_packet_clone", "_ZN3re23DFA9SearchFFTEPNS0_12SearchParamsE", "CopyPlane", "x264_log", "Curl_multi_content_length_penalty_size", "_ZN4Json5ValueixERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "uv_fs_poll_getpath", "_ZN4Json5Value5beginEv", "_ZN8CChannel8setIpTTLEi", "ijkmeta_reset", "av_frame_new_side_data", "_ZN6google12Int32FromEnvEPKci", "av_opt_get_int", "ff_h264qpel_init", "ff_alloc_entries", "YUY2ToYRow_C", "SDL_GetTickHR", "_ZN5uripp7convertEj", "curlx_ultous", "HalfFloatRow_Any_NEON", "inflate_fast", "Curl_ssl_set_engine", "curlx_uitosi", "ff_hevc_compute_poc", "ff_mov_cenc_init", "_ZN4Json12StyledWriter5writeERKNS_5ValueE", "_ZN3re26Regexp12CaptureNamesEv", "ff_h264chroma_init_aarch64", "_ZNK3re211StringPiece6substrEmm", "avcodec_receive_frame", "Curl_multi_chunk_length_penalty_size", "ff_h264_luma_dc_dequant_idct_8_c", "x264_predict_8x16c_p_neon", "SDL_Android_AudioTrack_pause", "_ZN4Json5ValueC2EOS0_", "_ZN4CUDT5tsbpdEPv", "_ZN3UDT7recvmsgEiPci", "J4AC_android_media_MediaCodec__BufferInfo__size__get", "J4AC_android_media_MediaFormat__setByteBuffer__catchAll", "_ZN10CRcvBuffer7readMsgEPci5ref_tI12SRT_MsgCtrl_E", "_ZN6google19AppendFlagsIntoFileERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKc", "Curl_none_engines_list", "J4AC_android_media_AudioTrack__stop__catchAll", "_ZN3re26Regexp13CompileToProgEl", "Curl_multi_add_perform", "I444ToI420", "_Z27CConcealment_GetLastFrameOkP16CConcealmentInfoi", "Curl_setup_conn", "_ZN10CRcvBufferC2EP10CUnitQueuei", "pthread_barrier_destroy", "_Z21createSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPEP15SBR_HEADER_DATAij", "uriFreeQueryListW", "_ZN3re23RE23Arg15parse_ulong_hexEPKcmPv", "_ZN5uripp12ipv6_addressC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ARGBToUVRow_Any_NEON", "_ZN3re23NFA13FormatCaptureEPPKc", "x264_mc_weight_w8_offsetadd_neon", "_Z38GetRequiredMemRam_aacEnc_PsyOutChannelv", "SDL_VoutAndroid_releaseBufferProxyP_l", "x264_frame_init_lowres_core_neon", "avformat_open_input", "av_int_list_length_for_size", "J4AC_android_media_AudioTrack__getNativeOutputSampleRate__catchAll", "native_window_get_desc", "x264_param2string", "nghttp2_put_uint16be", "x264_pps_write", "J4AC_android_media_MediaCodec__BufferInfo__BufferInfo__catchAll", "_ZN10CSndBufferD1Ev", "ff_h264_chroma_dc_dequant_idct_14_c", "avformat_match_stream_specifier", "nghttp2_get_uint16", "avcodec_encode_subtitle", "av_asprintf", "av_pkt_dump2", "_ZN9CSndQueueD2Ev", "ffp_create", "ff_mov_cenc_write_sinf_tag", "aacDecoder_DecodeFrame", "J4A_ReleaseStringUTFChars__p", "FDK_get32", "_ZNK4Json17ValueIteratorBase10memberNameEPPKc", "_Z15FDKaacEnc_BCNewPP13BITCNTR_STATEPh", "Curl_single_getsock", "Curl_none_init", "_ZN3re23RE23Arg21parse_ulonglong_octalEPKcmPv", "ff_silk_flush", "J4A_loadClass__J4AC_android_media_MediaCodec", "av_add_index_entry", "Curl_checkProxyheaders", "J4A_loadClass__J4AC_android_os_Bundle", "Curl_global_host_cache_init", "UYVYToARGBRow_Any_NEON", "Curl_strerror", "_ZN4CUDT4recvEPci", "x264_intra_sad_x3_8x8_neon", "x264_predict_16x16_dc_left_neon", "Curl_resolver_is_resolved", "ffp_get_loop", "ffio_rewind_with_probe_data", "uv_signal_start", "curl_fopen", "RGB24ToUVRow_C", "Curl_version_init", "ff_accept", "_ZNK4Json5ValueeqERKS0_", "_Z23PredictiveInterpolationP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfo", "curl_pushheader_bynum", "_ZN4Json9OurReader22decodeUnicodeCodePointERNS0_5TokenERPKcS4_Rj", "FDK_pushForward", "_ZN3re23DFA9DumpStateEPNS0_5StateE", "uv_fs_utime", "ff_hevc_res_scale_sign_flag", "nghttp2_frame_pack_frame_hd", "curl_easy_send", "_Z22FDK_DRC_Generator_OpenPP8DRC_COMP", "_ZN3re23DFA10StateSaverD2Ev", "nghttp2_hd_inflate_free", "av_rescale_q", "hcryptMsg_STA_MsgInfo", "_ZN4CUDT14receiveMessageEPci5ref_tI12SRT_MsgCtrl_E", "Curl_loadhostpairs", "J4AC_android_os_Build__VERSION__SDK_INT__set__catchAll", "x264_intra_sad_x3_4x4_neon", "x264_coeff_last16_neon", "_Z22imdct_adapt_parametersP6mdct_tPiS1_iPK8FIXP_SPKi", "x264_slicetype_analyse", "x264_predict_lossless_chroma", "x264_zigzag_sub_4x4ac_field_neon", "x264_predict_8x16c_dc_c", "curl_version", "av_pix_fmt_desc_get_id", "_ZN3re23DFA8RWLockerD1Ev", "ff_hevc_part_mode_decode", "J4AC_android_media_MediaCodec__getInputBuffers__asGlobalRef__catchAll", "sbrEncoder_GetInputDataDelay", "FDKfree_L", "avio_closep", "J4AC_android_media_MediaFormat__createVideoFormat__withCString", "uv_loop_fork", "_ZN5uripp4pathC2Ev", "_ZN4Json5Value16resolveReferenceEPKcS2_", "_ZN4Json6Reader5parseERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS_5ValueEb", "_ZN10CRcvBufferD1Ev", "J4AC_android_media_MediaCodec__start__catchAll", "curl_formget", "x264_frame_push_unused", "_ZNK12SrtHSRequest9serializeEPcm", "_Z28CProgramConfig_LookupElementP14CProgramConfigjjjPhP18AUDIO_CHANNEL_TYPES1_S1_P14MP4_ELEMENT_IDS4_", "curl_multi_strerror", "_ZN4CUDT10setsockoptEii11SRT_SOCKOPTPKvi", "ARGB1555ToARGBRow_NEON", "uv_is_active", "ijkmp_get_playable_duration", "ffio_init_checksum", "ARGBAddRow_Any_NEON", "hcryptCtx_Tx_Rekey", "J4AC_android_media_MediaCodec__queueInputBuffer__catchAll", "x264_sync_frame_list_pop", "_ZN4CUDT26processAsyncConnectRequestE11EReadStatus14EConnectStatusRK7CPacketPK8sockaddr", "RGB24ToARGBRow_Any_NEON", "_ZN3re28BitStateD1Ev", "nghttp2_buf_reserve", "_Z17FDKaacEnc_QCClosePP8QC_STATEPP6QC_OUT", "avpriv_get_raw_pix_fmt_tags", "Curl_pgrsSetUploadCounter", "ffio_open_null_buf", "_Z24GetRequiredMemAacDecoderv", "av_packet_free_side_data", "av_probe_input_format2", "ff_get_wav_header", "_ZN4Json17CharReaderBuilderD0Ev", "J4AC_android_media_AudioTrack__getMinVolume__catchAll", "nghttp2_hd_inflate_hd2", "av_frame_set_decode_error_flags", "x264_pixel_ssd_4x8_neon", "ijkmp_prepare_async", "uv_fs_access", "ff_side_data_set_encoder_stats", "ff_mov_iso639_to_lang", "_Z11CreatePsDecPP6PS_DECi", "HaiCrypt_ExtractConfig", "Curl_ssl_random", "nghttp2_session_terminate_session", "I420Scale_16", "_ZN3re26Regexp10ParseState12PushSimpleOpENS_8RegexpOpE", "ScalePlane", "av_packet_unref", "_ZN3re210chartoruneEPiPKc", "_ZN12CSndLossListC2Ei", "_Z23sbrDecoder_drcApplySlotP18SBRDEC_DRC_CHANNELPiS1_iii", "sws_freeContext", "_Z13IcsReadMaxSfbP13FDK_BITSTREAMP8CIcsInfoPK16SamplingRateInfo", "NV12ToI420", "x264_pixel_sad_x3_16x8_neon", "avformat_seek_file", "curlx_uztoul", "av_bprint_clear", "avcodec_chroma_pos_to_enum", "x264_intra_satd_x3_8x16c_neon", "ff_sws_init_output_funcs", "sws_init_context", "av_fifo_free", "nghttp2_stream_dep_add", "ARGB1555ToARGBRow_C", "x264_macroblock_tree_read", "nghttp2_session_callbacks_set_before_frame_send_callback", "_Z20resetSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "av_seek_frame", "uv_recv_buffer_size", "_ZNK7CPacket5cloneEv", "Curl_multi_max_host_connections", "nghttp2_cpymem", "_Z21GetRam_Sbr_envYBufferi", "uv_fs_symlink", "_ZN10CRcvBuffer14getRcvFirstMsgE5ref_tImES0_IbES0_IiES3_", "_ZN3re23DFA18PossibleMatchRangeEPNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_i", "av_buffer_alloc", "J4AC_android_os_Bundle__getString__asCBuffer", "ffp_is_flush_packet", "av_escape", "Curl_conncache_find_first_connection", "ff_init_desc_cfmt_convert", "x264_pixel_sad_8x8_neon", "ARGBToUVJRow_NEON", "ff_h264_decode_init", "_ZN4CUDT4bindEiPK8sockaddri", "uv_cancel", "uv_prepare_start", "ff_thread_decode_frame", "_ZN10CUnitQueueC1Ev", "x264_predict_8x8c_dc_left_neon", "_ZN3re23RE23Arg19parse_ushort_cradixEPKcmPv", "ffpipenode_run_sync", "av_bprint_finalize", "nghttp2_session_get_remote_settings", "uriComposeQueryExW", "SobelRow_Any_NEON", "Curl_http2_switched", "av_application_close", "av_timecode_init_from_string", "Curl_mime_size", "sws_addVec", "_ZN3UDT12epoll_createEv", "_ZN10CUDTUnited4bindEii", "x264_zigzag_sub_8x8_frame_neon", "nghttp2_session_callbacks_set_on_invalid_frame_recv_callback", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERx", "_ZN3re26Regexp10ParseState10PushRegexpEPS0_", "avpriv_find_start_code", "_ZN4Json19StreamWriterBuilderD2Ev", "nghttp2_session_upgrade", "av_frame_get_color_range", "_ZN9CRcvUListD1Ev", "ff_h264_chroma_dc_dequant_idct_9_c", "av_frame_copy_props", "I420ToNV21", "_ZN4Json5Value11CommentInfoD1Ev", "_ZN10CUDTUnited6lookupEi", "_ZN3re28Compiler7LiteralEib", "av_opt_get_channel_layout", "_ZN5uripp4pathpLERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "av_aes_ctr_set_random_iv", "_ZNK3re211StringPiece4findERKS0_m", "ff_hevc_cu_qp_delta_sign_flag", "_Z8fixp_sinii", "av_dict_free", "ffp_set_loop", "Curl_splaygetbest", "avio_check", "_ZN4Json17CharReaderBuilderD2Ev", "YUY2ToI420", "_ZN4Json5Value13nullSingletonEv", "av_opt_find2", "av_sha_update", "av_timegm", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_3uriEPNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN6CTimer7sleeptoEm", "_ZN10CIPAddress4showEPK8sockaddr", "J400ToARGBRow_Any_NEON", "ijkmp_android_set_volume", "av_add_q", "nghttp2_session_get_local_window_size", "ff_start_tag", "_Z14FreeRam_ps_decPP6PS_DEC", "ffp_prepare_async_l", "_ZN3re23DFAC2EPNS_4ProgENS1_9MatchKindEl", "x264_frame_cond_broadcast", "uv__epoll_ctl", "rgb15tobgr15", "Curl_isdigit", "av_get_bits_per_pixel", "_Z24GetRam_SbrDecWorkBuffer2i", "_Z17aliasingReductionPiP13ENV_CALC_NRGSS_i", "uv_pipe_pending_type", "nghttp2_hd_inflate_init", "_Z20FDK_MetadataEnc_OpenPP20FDK_METADATA_ENCODER", "uv_print_all_handles", "ff_imdct_calc_c", "_ZN10CHandShakeC1Ev", "_ZN6CTimer4tickEv", "_ZN4Json13ValueIteratorC1Ev", "_ZN5uripp6urisyn5parseERKNS0_6traitsERNSt6__ndk111__wrap_iterIPKcEES8_RNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEPc", "ScalePlaneBilinearDown", "uriComposeQueryCharsRequiredExA", "_ZNK4Json5Value14toStyledStringEv", "nghttp2_frame_unpack_goaway_payload", "_ZNK4Json5Value7asFloatEv", "nghttp2_hd_table_get", "srt_setloghandler", "_ZN3re28BitState9GrowStackEv", "x264_mc_weight_w16_neon", "ff_thread_report_progress2", "_ZN10CUDTUnited15epoll_add_usockEiiPKi", "_ZN14CCryptoControl15createCryptoCtxE5ref_tIP18hcrypt_Session_strEm18HaiCrypt_CryptoDir", "ffp_set_option_int", "av_bitstream_filter_init", "Curl_connect_free", "_ZN9CRcvQueue10ifNewEntryEv", "ff_thread_release_buffer", "x264_pixel_avg_4x16_neon", "_Z32FDKsbrEnc_CreateTonCorrParamExtrP16SBR_TON_CORR_ESTi", "SDL_Init_AoutAndroid", "SDL_JNI_ThrowIllegalStateException", "ARGBBlendRow_C", "ffp_audio_statistic_l", "_Z35FDKaacEnc_PostProcessPnsChannelPairiP10PNS_CONFIGP8PNS_DATAS2_PiS3_", "avio_feof", "sws_isSupportedEndiannessConversion", "_ZN6google21RegisterFlagValidatorEPKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPFbPKcRS7_E", "_ZN4Json18ValueConstIteratorC1ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "_ZN3re23DFAC1EPNS_4ProgENS1_9MatchKindEl", "_ZN6google13DoubleFromEnvEPKcd", "avpriv_toupper4", "curl_msprintf", "_ZN4Json5ValueC2Ei", "_Z29FDKsbrEnc_initInvFiltDetectorP16SBR_INV_FILT_ESTPiij", "_Z12deleteSbrDecP11SBR_CHANNEL", "Curl_setup_transfer", "av_hmac_alloc", "_ZN4CUDT18epoll_remove_ssockEii", "ff_h264_execute_decode_slices", "av_frame_get_qp_table", "avio_size", "nghttp2_bufs_realloc", "_ZN4CUDT6selectEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_S7_PK7timeval", "_ZN4Json9OurReader12decodeStringERNS0_5TokenE", "ffp_io_stat_register", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__postEventFromNative", "_ZN4CUDT7startupEv", "uv_fs_fsync", "Curl_set_dns_interface", "uv__socket", "avpriv_mpeg4audio_get_config", "RGBAToYRow_Any_NEON", "_ZN3re23RE23Arg16parse_int_cradixEPKcmPv", "avio_w8", "nghttp2_bufs_advance", "Curl_pipeline_checkget_read", "ffpipeline_open_video_decoder", "av_md5_final", "_ZN3re23DFAD1Ev", "SDL_AMediaFormat_setBuffer", "_ZN4Json9OurReader12decodeDoubleERNS0_5TokenE", "avpriv_bprint_to_extradata", "av_vlog", "uv_pipe_listen", "av_bsf_list_parse_str", "avformat_get_riff_video_tags", "_ZNK4Json5ValueneERKS0_", "_ZN4Json5ValueixEj", "nghttp2_http_on_response_headers", "av_calloc", "ff_mp4_read_dec_config_descr", "_Z22CProgramConfig_ComparePK14CProgramConfigS1_", "_ZN6CEPollD2Ev", "av_md5_update", "Curl_mime_cleanpart", "nghttp2_frame_altsvc_free", "av_bprint_init_for_buffer", "_ZN3re26Regexp10ParseState8IsMarkerENS_8RegexpOpE", "av_expr_parse", "HaiCryptCipher_Get_Instance", "ff_h264_pred_weight_table", "FDKfread", "_ZN8CChannelD1Ev", "_Z35FDKaacEnc_calcSfbQuantEnergyAndDistPiPsiiS_S_", "FDKfclose", "x264_pps_init", "x264_predict_8x8c_v_c", "Curl_http_readwrite_headers", "_ZN3re28Compiler18AddRuneRangeLatin1Eiib", "J4AC_android_os_Bundle__getString__catchAll", "av_write_frame", "ff_isom_write_avcc", "RAWToARGBRow_Any_NEON", "ff_isom_write_vpcc", "av_init_packet", "av_dict_set", "_ZN4Json6Reader5matchEPKci", "uv__platform_loop_delete", "ARGBSubtractRow_Any_NEON", "_ZN3re28fullruneEPKci", "uv_rwlock_tryrdlock", "ff_configure_buffers_for_index", "avio_rl32", "_ZN10CUnitQueue6shrinkEv", "ff_read_riff_info", "ffp_set_pcm_callback", "uv_prepare_stop", "av_fifo_generic_write", "_ZN4CUDT17processRendezvousE5ref_tI7CPacketERKS1_PK8sockaddrb11EReadStatus", "Curl_pgrsTime", "_Z6dct_IIPiS_iS_", "rgb64to48_bswap", "curl_mvprintf", "x264_opencl_slicetype_prep", "Curl_share_unlock", "_ZN9CRcvQueueD1Ev", "J4AC_android_os_Bundle__getLong__withCString", "av_strnstr", "uv_tcp_keepalive", "inflateMark", "_ZNK4Json5Value5asIntEv", "_ZN7CPacket9setLengthEm", "avpriv_mpegts_parse_packet", "_ZN6google21RegisterFlagValidatorEPKbPFbPKcbE", "StariAvVideoEncoderSetFrameRate", "ff_id3v2_read_dict", "x264_macroblock_bipred_init", "uriDissectQueryMallocExA", "_ZN4Json5ValueC2Em", "J4A_LoadAll__catchAll", "Curl_add_buffer_send", "FDKstrchr", "_Z25AudioSpecificConfig_ParseP21CSAudioSpecificConfigP13FDK_BITSTREAMiP13CSTpCallBacks", "av_get_token", "nghttp2_version", "_ZN4Json17ValueIteratorBase4copyERKS0_", "I420ToARGB1555", "ARGBToYJRow_Any_NEON", "SDL_DetachThread", "nghttp2_stream_get_state", "J4A_NewByteArray__catchAll", "_ZN3re26Regexp14SimplifyRegexpERKNS_11StringPieceENS0_10ParseFlagsEPNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPNS_12RegexpStatusE", "YUY2ToUV422Row_C", "_ZN3re23RE210FullMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi", "uriFixAmbiguityA", "nghttp2_session_reprioritize_stream", "ff_hevc_set_qPy", "Curl_pgrsDone", "_Z24FDKaacEnc_WriteBitstreamP12TRANSPORTENCP15CHANNEL_MAPPINGP6QC_OUTP7PSY_OUTP8QC_STATE17AUDIO_OBJECT_TYPEja", "_ZN4Json19StreamWriterBuilderC1Ev", "Curl_saferealloc", "_Z16FDKaacEnc_QCInitP8QC_STATEP7QC_INIT", "uriFreeQueryListA", "_ZN3re214SimplifyWalker9PostVisitEPNS_6RegexpES2_S2_PS2_i", "x264_cabac_encode_decision_asm", "IJK_GLES2_loadOrtho", "J4AC_android_media_MediaCodec__getInputBuffers", "ff_amf_get_string", "av_application_on_http_event", "ffio_open_dyn_packet_buf", "x264_add8x4_idct_neon", "ff_h264_idct_add8_14_c", "x264_intra_sa8d_x3_8x8", "_ZN3re28Compiler4PlusENS_4FragEb", "_ZNK8CChannel10ioctlQueryEi", "nghttp2_buf_init", "_ZNK4Json5Value10hasCommentENS_16CommentPlacementE", "ff_hevc_inter_pred_idc_decode", "I422Copy", "_ZNK4Json5Value5emptyEv", "Curl_thread_join", "_ZN4Json5Value14setOffsetStartEl", "nghttp2_bufs_free", "_ZN3re23RE23Arg16parse_uint_radixEPKcmPvi", "av_frame_get_plane_buffer", "_ZN9CRcvQueueC2Ev", "UYVYToYRow_C", "nghttp2_map_insert", "FDKprintDisclaimer", "sws_convertPalette8ToPacked24", "av_opt_get_double", "nghttp2_hd_deflate_free", "uv_os_homedir", "Curl_resolver_duphandle", "curl_escape", "av_stream_get_codec_timebase", "srt_rendezvous", "ff_simple_idct_add_8", "nghttp2_pq_each", "_Z19FDKaacEnc_AdjThrNewPP13ADJ_THR_STATEi", "_ZN3UDT17getlasterror_codeEv", "HaiCrypt_Create", "x264_param_default", "x264_pixel_avg2_w4_neon", "ijkmp_io_stat_register", "_ZN3re28Compiler8PreVisitEPNS_6RegexpENS_4FragEPb", "RGBAToUVRow_NEON", "_Z23CAacDecoder_DecodeFrameP20AAC_DECODER_INSTANCEjPsii", "_Z20FDKaacEnc_DownsampleP11DOWNSAMPLERPsiiS1_Pii", "_Z38FDKsbrEnc_WriteEnvSingleChannelElementP15SBR_HEADER_DATAP19T_PARAMETRIC_STEREOP18SBR_BITSTREAM_DATAP12SBR_ENV_DATAP11COMMON_DATAj", "I422ToRGB24Row_C", "uriUnescapeInPlaceExW", "J4AC_android_media_AudioTrack__stop", "ff_free_filters", "Curl_isalnum", "IJK_GLES2_Renderer_create_yuv420p", "I422ToRGB565Row_Any_NEON", "ffurl_get_protocols", "_ZN4Json4Path8makePathERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorIPKNS_12PathArgumentENS5_ISD_EEEE", "sws_setColorspaceDetails", "x264_predict_8x8c_init", "RGBAToARGB", "ff_mov_init_hinting", "J4AC_android_media_MediaCodec__configure", "_ZN4Json5ValueC1EPKc", "swri_noise_shaping_int32", "_Z37GetRequiredMemRam_Sbr_freqBandTableLOv", "av_codec_get_seek_preroll", "curl_multi_perform", "FDK_putBwd", "uv_pipe_getpeername", "ff_add_param_change", "SDL_AMediaCodec_dequeueInputBuffer", "__addtf3", "avio_alloc_context", "nghttp2_frame_window_update_free", "ff_hevc_cbf_luma_decode", "_Z26GetRam_Sbr_freqBandTableHIi", "_Z21deleteSbrEnvelopeCalcP22SBR_CALCULATE_ENVELOPE", "_Z7sbr_decP7SBR_DECPsS1_S0_S1_iiP15SBR_HEADER_DATAP14SBR_FRAME_DATAP19SBR_PREV_FRAME_DATAiP6PS_DECji", "J4AC_android_media_MediaCodec__BufferInfo__presentationTimeUs__get", "ffp_frame_queue_peek_writable", "av_rescale_delta", "ff_hevc_prev_intra_luma_pred_flag_decode", "_ZN8SmootherD1Ev", "Curl_persistconninfo", "_ZN4Json4PathC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_12PathArgumentESC_SC_SC_SC_", "av_opt_set_dict_val", "_Z7dit_fftPiiPK8FIXP_SPKi", "_ZN14ACKWindowTools11acknowledgeEPNS_3SeqEmRiS2_iS2_", "_ZN6CTimer5sleepEm", "_Z22CChannelElement_DecodePP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoP16SamplingRateInfoji", "nghttp2_stream_dep_find_ancestor", "_Z29FreeRam_aacEnc_PsyInputBufferPPs", "_ZN3re214CoalesceWalker10ShortVisitEPNS_6RegexpES2_", "_ZNK4Json5ValueleERKS0_", "uv__epoll_wait", "J4A_loadClass__J4AC_android_media_PlaybackParams", "x264_cabac_encode_bypass_c", "uv_rwlock_rdlock", "av_hwdevice_ctx_alloc", "nghttp2_stream_dep_add_subtree", "_Z30FDKsbrEnc_resetInvFiltDetectorP16SBR_INV_FILT_ESTPii", "_ZN3re26utflenEPKc", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj", "av_frame_clone", "nghttp2_session_set_local_window_size", "nghttp2_get_uint32", "ScaleRowDown4_C", "YUY2ToARGBRow_NEON", "nghttp2_frame_iv_copy", "ff_rotate_slice", "ff_bsf_get_packet", "_ZN3re26Regexp13LeadingStringEPS0_PiPNS0_10ParseFlagsE", "_ZN3re23RE23Arg12parse_doubleEPKcmPv", "J4AC_android_os_Bundle__getLong__catchAll", "_ZN12CSndLossListD2Ev", "_Z23CAacDecoder_SyncQmfModeP20AAC_DECODER_INSTANCE", "ScaleARGBRowDown2Box_Any_NEON", "_ZN4Json12StyledWriter8unindentEv", "FDK_getBwd", "_Z22adifWrite_EncodeHeaderP9ADIF_INFOP13FDK_BITSTREAMi", "ijk_tcp_getaddrinfo_nonblock", "SDL_VoutAndroid_peekAMediaCodec", "J4A_ThrowExceptionOfClass", "Curl_httpchunk_read", "pcmDmx_Reset", "_ZNK4Json17ValueIteratorBase15computeDistanceERKS0_", "IJK_GLES2_Renderer_create_yuv444p10le", "_ZN12CRcvLossListD2Ev", "_Z34FDKsbrEnc_CreateExtractSbrEnvelopeP20SBR_EXTRACT_ENVELOPEiiPh", "av_basename", "ff_hevc_split_coding_unit_flag_decode", "uv__inotify_add_watch", "ffurl_write", "nghttp2_bufs_init", "FDKabs", "_ZN3re216CharClassBuilder4CopyEv", "SDL_Vout_CreateOverlay", "_ZN6google20SetCommandLineOptionEPKcS1_", "SDL_AMediaCodecJava_releaseOutputBuffer", "nghttp2_frame_rst_stream_free", "_Z28FDKaacEnc_MsStereoProcessingPP8PSY_DATAPP15PSY_OUT_CHANNELPKiPiS7_iiiS6_", "_ZN10CUDTUnited7startupEv", "ijkmp_shutdown", "_ZN8CChannelC2Ei", "nghttp2_check_header_name", "_ZNK4Json5Value4typeEv", "ff_http_averror", "zError", "_ZN4CUDT7cleanupEv", "_ZN3re213SStringPrintfEPNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz", "_ZN8Smoother5CheckEv", "x264_me_refine_qpel", "_Z21FDKhybridAnalysisInitP18FDK_ANA_HYB_FILTER15FDK_HYBRID_MODEiii", "x264_intra_sad_x3_8x16c", "av_sha_init", "ff_avc_find_startcode", "_ZN3re23DFA10ClearCacheEv", "av_get_channel_layout_string", "_ZNK4Json5Value9asCStringEv", "x264_ratecontrol_start", "ScalePlaneBilinearUp", "avio_wb32", "HalfFloat1Row_NEON", "x264_frame_unshift", "_ZN6google12ProgramUsageEv", "_ZN4Json17ValueIteratorBaseC1ERKNSt6__ndk114__map_iteratorINS1_15__tree_iteratorINS1_12__value_typeINS_5Value8CZStringES5_EEPNS1_11__tree_nodeIS7_PvEElEEEE", "adler32_combine64", "x264_pixel_satd_4x16_neon", "_ZN3UDT8sendfileEiRNSt6__ndk113basic_fstreamIcNS0_11char_traitsIcEEEERlli", "nghttp2_outbound_item_init", "nghttp2_frame_pack_origin", "_ZN3re28Compiler3NopEv", "_ZNK5uripp3uri7is_nullEv", "uriParseIpFourAddressA", "uv_fs_link", "FDK_byteAlign", "ff_init_desc_fmt_convert", "avformat_queue_attached_pictures", "_Z26CBlock_ReadScaleFactorDataP22CAacDecoderChannelInfoP13FDK_BITSTREAMj", "SDL_AMediaCodecJava_dequeueInputBuffer", "_ZN3re26Regexp7DestroyEv", "FDKaalloc_L", "SDL_CondBroadcast", "x264_frame_pop_blank_unused", "ScaleRowDown2Box_Odd_NEON", "ScaleRowDown4_16_C", "nghttp2_frame_pack_settings", "I420AlphaToABGR", "curl_multi_timeout", "_ZN12CRcvLossList12getLossArrayEPiRii", "_Z21FreeRam_SbrDecElementPP19SBR_DECODER_ELEMENT", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__getSize", "_ZN10CUDTUnited17updateListenerMuxEP10CUDTSocketPKS0_", "setup_find_stream_info_opts", "uv__udp_try_send", "_ZN6CTimer7getTimeEv", "nghttp2_map_find", "_Z16FDKaacEnc_QCMainP8QC_STATEPP7PSY_OUTPP6QC_OUTiP15CHANNEL_MAPPING17AUDIO_OBJECT_TYPEja", "_Z21FDKsbrEnc_UpdateHiResPhPiS_iS0_", "av_dump_format", "x264_pixel_satd_4x8_neon", "SDL_AMediaCodec_FakeFifo_dequeueInputBuffer", "ff_mp4_parse_es_descr", "_Z4fPowiiiiPi", "Curl_urldecode", "x264_predict_8x16c_dc_neon", "_ZN3re23RE23Arg18parse_ulong_cradixEPKcmPv", "_Z26FreeRam_aacEnc_ElementBitsPP12ELEMENT_BITS", "Curl_pgrsUpdate", "Curl_multi_handle", "uv_fs_poll_init", "_Z30CProgramConfig_GetElementTablePK14CProgramConfigP14MP4_ELEMENT_IDiPh", "SDL_ProfilerBegin", "I422AlphaToARGBRow_Any_NEON", "uv_fileno", "_ZN3re28CompilerC2Ev", "_ZN4CUDT11processDataEP5CUnit", "_ZN14CCryptoControlC2EP4CUDTi", "avpriv_find_pix_fmt", "RGBColorMatrix", "SDL_SpeedSampler2Reset", "_Z30FDKaacEnc_codeScalefactorDeltaiP13FDK_BITSTREAM", "ARGBShadeRow_C", "av_guess_sample_aspect_ratio", "ARGBShuffleRow_C", "av_sha512_init", "uv_fs_fchown", "_ZN3UDT10resetlogfaENSt6__ndk13setIN7logging5LogFAENS0_4lessIS3_EENS0_9allocatorIS3_EEEE", "uv_accept", "nghttp2_mem_calloc", "_Z26FDKaacEnc_AdjustThresholdsPP11ATS_ELEMENTPP14QC_OUT_ELEMENTP6QC_OUTPP15PSY_OUT_ELEMENTiiP15CHANNEL_MAPPING", "_ZN3re24Prog14ComputeByteMapEv", "Curl_pin_peer_pubkey", "avio_pause", "ff_init_ff_sine_windows", "x264_nal_encode", "x264_pixel_var_8x8_neon", "ff_avc_write_annexb_extradata", "_Z17FDKaacEnc_TnsSyncP8TNS_DATAPKS_P8TNS_INFOS4_iiPK10TNS_CONFIG", "av_packet_new_side_data", "_ZN5uripp9authorityC1Ev", "ff_hevc_hls_mvd_coding", "YUY2ToARGB", "_ZN3re26Regexp19RemoveLeadingStringEPS0_i", "nghttp2_session_adjust_idle_stream", "_ZN3re216CharClassBuilder12GetCharClassEv", "x264_encoder_encode", "x264_quant_2x2_dc_neon", "FDK_getBitCnt", "SDL_AMediaCodec_FakeFifo_dequeueOutputBuffer", "ff_amf_write_null", "J4AC_android_media_MediaCodec__stop__catchAll", "ff_hevc_mvp_lx_flag_decode", "avpriv_float_dsp_alloc", "uv__accept", "x264_ratecontrol_delete", "_ZN9CSndQueue6workerEPv", "uv_idle_init", "ff_sine_window_init", "_Z18transportEnc_ClosePP12TRANSPORTENC", "SobelYRow_NEON", "_ZN3re24Prog11DumpByteMapEv", "av_hmac_update", "uv_run", "x264_sub8x8_dct8_neon", "RAWToRGB24Row_C", "_ZN3re23RE23Arg18parse_ushort_octalEPKcmPv", "ff_h264_idct_add8_422_12_c", "_ZN4Json6ReaderC1Ev", "ARGBToI420", "_Z20qmfAnalysisFilteringP15QMF_FILTER_BANKPPiS2_P16QMF_SCALE_FACTORPKsiS1_", "_Z37FDKsbrEnc_deleteSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATE", "swri_get_dither", "ScaleRowDown4Box_NEON", "ff_unlock_avcodec", "uv__stream_open", "_ZN9CRcvUList6updateEPK4CUDT", "curl_mime_filename", "Curl_ssl_set_engine_default", "_ZNK3re23RE223NumberOfCapturingGroupsEv", "curl_easy_strerror", "Curl_hash_str", "av_strdup", "ff_h264_decode_slice_header", "ScaleColsUp2_C", "_Z23FDKaacEnc_psyInitStatesP12PSY_INTERNALP10PSY_STATIC17AUDIO_OBJECT_TYPE", "_ZN3re29CharClass6NegateEv", "_ZN4Json23BuiltStyledStreamWriter23writeCommentBeforeValueERKNS_5ValueE", "_ZNK4Json5Value8CZString6lengthEv", "av_stream_get_side_data", "curlx_uitouc", "_Z22transportDec_GetFormatP12TRANSPORTDEC", "nghttp2_bufs_wrap_init", "av_hwframe_ctx_init", "FDK_DeleteBitBuffer", "_Z21adifRead_DecodeHeaderP11CAdifHeaderP14CProgramConfigP13FDK_BITSTREAM", "avpriv_io_move", "curl_easy_perform", "_ZNK4Json19StreamWriterBuilder15newStreamWriterEv", "Curl_cookie_freelist", "_Z25FDKsbrEnc_Shellsort_fractPii", "ARGBToRGB565Row_NEON", "curlx_uztoso", "__udivti3", "_Z25CAacDecoder_GetStreamInfoP20AAC_DECODER_INSTANCE", "nghttp2_session_resume_data", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_9authorityE", "swr_inject_silence", "av_hwdevice_ctx_init", "av_dict_get_string", "nghttp2_stream_detach_item", "ffpipeline_set_surface_need_reconfigure_l", "_ZN8CChannel4openEPK8sockaddr", "nghttp2_session_want_read", "x264_frame_cond_wait", "_Z23GetRam_TransportDecoderi", "av_image_get_buffer_size", "avio_close", "nghttp2_bufs_addb_hold", "_ZN12CRcvLossList6insertEii", "avio_put_str", "_Z28GetRam_aacEnc_PsyInputBufferi", "srt_getsockname", "_ZN10CRcvBuffer14isRcvDataReadyEv", "uv_loop_configure", "RAWToUVRow_Any_NEON", "_Z19sbrDecoder_drcApplyP18SBRDEC_DRC_CHANNELPPiS2_iS1_", "av_opt_set_dict", "ff_ntp_time", "uv__make_socketpair", "uriAddBaseUriA", "Curl_gmtime", "ffp_set_playback_rate", "_Z24FreeRam_aacEnc_PsyStaticPP10PSY_STATIC", "srt_epoll_release", "x264_threadpool_init", "_Z26transportEnc_GetStaticBitsP12TRANSPORTENCi", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_4pathEPNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "ff_h264chroma_init", "SDL_VoutFFmpeg_CreateOverlay", "ff_hevc_decode_nal_sps", "Curl_llist_move", "nghttp2_frame_add_pad", "_Z29FreeRam_Sbr_QmfStatesAnalysisPPs", "curl_mvfprintf", "_ZN5uripp8fragmentC1Ev", "x264_threads_merge_ratecontrol", "ff_raw_read_partial_packet", "avio_rb24", "ff_fft_init", "_ZN3re23DFA10AddToQueueEPNS0_5WorkqEij", "_Z22FDKhybridAnalysisCloseP18FDK_ANA_HYB_FILTER", "srt_bistats", "SDL_AoutAndroid_IsObjectOfOpenSLES", "nghttp2_submit_rst_stream", "SDL_VoutLockYUVOverlay", "RGB24ToUVRow_NEON", "Curl_mime_add_header", "_Z35transportEnc_LatmAdjustSubframeBitsP11LATM_STREAMPi", "curl_mime_init", "_Z17FreeOverlapBufferPPi", "swr_build_matrix", "av_bprint_chars", "_ZN6google26ShowUsageWithFlagsRestrictEPKcS1_", "swri_audio_convert_free", "_Z20GetRam_Sbr_guideScfbi", "x264_mc_chroma_neon", "_ZN3re29PatchList2MkEj", "_ZNK5uripp12ipv6_address7is_nullEv", "_Z22FDKaacEnc_SpreadingMaxiPKiS0_Pi", "_ZN6CGuardD2Ev", "FDKstrncpy", "ARGBAffineRow_C", "_ZN3UDT7connectEiPK8sockaddri", "ff_hevc_end_of_slice_flag_decode", "ff_init_buffer_info", "I400ToI420", "ARGBAddRow_NEON", "J422ToABGR", "x264_intra_satd_x3_8x8c_neon", "nghttp2_bufs_init3", "Curl_add_bufferf", "av_frame_get_colorspace", "moncleanup", "ARGB1555ToYRow_NEON", "Curl_conncache_size", "uv_fs_rmdir", "_Z12PSEnc_CreatePP19T_PARAMETRIC_STEREO", "RGB24ToUVRow_Any_NEON", "SDL_VoutAndroid_SetAndroidSurface", "ARGBToUV444Row_Any_NEON", "Curl_safe_strcasecompare", "_ZNK3re23RE211ReverseProgEv", "avcodec_copy_context", "_ZN5CHash4initEi", "swri_dither_init", "_Z19FDKaacEnc_PsyOutNewPP7PSY_OUTiiiPh", "nghttp2_frame_unpack_settings_payload", "ff_frame_thread_encoder_free", "uv_fs_req_cleanup", "_Z24FDKaacEnc_CalcFormFactorPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELi", "_ZN4Json9OurReaderC1ERKNS_11OurFeaturesE", "_ZN4Json10FastWriter23enableYAMLCompatibilityEv", "uv__getiovmax", "nghttp2_session_on_priority_received", "_ZN3re26Regexp6IncrefEv", "ScaleRowDown38_2_Box_NEON", "Curl_multi_pipelining_server_bl", "avcodec_decode_subtitle2", "av_free_packet", "sbrDecoder_SetParam", "Curl_speedinit", "_Z28transportDec_OutOfBandConfigP12TRANSPORTDECPhjj", "av_memdup", "nghttp2_frame_extension_init", "Curl_ssl_getsessionid", "x264_noise_reduction_update", "inflatePrime", "_ZNK4Json5Value3getEPKcRKS0_", "Curl_addrinfo_callback", "ffio_read_size", "nghttp2_session_callbacks_set_on_begin_frame_callback", "RGBColorTableRow_C", "ff_alloc_dir_entry", "swri_rematrix", "_ZN10CUDTUnited18epoll_remove_ssockEii", "Curl_chunked_strerror", "_ZN4Json9OurReader9readArrayERNS0_5TokenE", "srt_sendfile", "uv__poll_close", "_ZN3UDT10setsockoptEii11SRT_SOCKOPTPKvi", "x264_predict_8x16c_dc_left_neon", "swscale_version", "av_frame_set_metadata", "uv__tcp_close", "nghttp2_hd_inflate_get_dynamic_table_size", "_ZN6google11BoolFromEnvEPKcb", "av_reallocp_array", "StariAvAudioEncoderCreate", "_ZN4Json6Reader5parseEPKcS2_RNS_5ValueEb", "IJK_GLES2_Renderer_reset", "_ZNK3re29Bitmap25614FindNextSetBitEi", "nghttp2_bufs_remove_copy", "uriResetUriA", "ffp_statistic_l", "nghttp2_http2_strerror", "ScaleRowDown2_NEON", "ff_h264_idct_add8_9_c", "_Z21GetRam_aacEnc_QCstatei", "av_format_get_data_codec", "uriRemoveDotSegmentsAbsoluteW", "av_samples_copy", "ff_h264_chroma422_dc_dequant_idct_8_c", "ScaleRowDown34_1_Box_Any_NEON", "crc32_combine", "ff_socket_nonblock", "ffp_set_option", "_ZN4Json9OurReader9readValueEv", "av_fifo_drain", "FDK_getValidBits", "ff_listen_connect", "nghttp2_session_on_altsvc_received", "_Z12invSqrtNorm2iPi", "ijkmp_is_playing", "_Z18CRvlc_ElementCheckPP22CAacDecoderChannelInfoPP28CAacDecoderStaticChannelInfoji", "x264_predict_4x4_h_c", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__postEventFromNative__catchAll", "_Z28FDKaacEnc_AdaptThresholdsVBRPP14QC_OUT_CHANNELPP15PSY_OUT_CHANNELP11ATS_ELEMENTP9TOOLSINFOP7PE_DATAi", "x264_mc_init", "ARGBToARGB4444Row_Any_NEON", "_Z9fMultNormiiPi", "ffurl_closep", "Curl_pgrsResetTransferSizes", "_Z26FDKsbrEnc_TonCorrParamExtrP16SBR_TON_CORR_ESTP9INVF_MODEPiS3_PhS4_PK14SBR_FRAME_INFOS4_S4_i9XPOS_MODEj", "IJK_GLES2_printString", "_ZN10CSndBuffer7ackDataEi", "uv_sem_wait", "ff_hevc_no_residual_syntax_flag_decode", "x264_predict_4x4_init", "J4AC_android_media_MediaCodec__BufferInfo__size__get__catchAll", "curl_socket", "x264_predict_lossless_16x16", "nghttp2_mem_free", "nghttp2_mem_realloc", "x264_macroblock_encode_p4x4", "uv_prepare_init", "ARGB4444ToYRow_NEON", "nghttp2_session_get_outbound_queue_size", "nghttp2_stream_get_first_child", "NV21ToARGBRow_Any_NEON", "x264_cqm_parse_file", "_ZN4CUDT20updateSrtRcvSettingsEv", "_ZN4Json18StyledStreamWriterC2ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_Z19FDKaacEnc_TnsEncodeP8TNS_INFOP8TNS_DATAiPK10TNS_CONFIGiPiii", "nghttp2_hd_entry_init", "_ZN3re26Regexp10ParseStateC1ENS0_10ParseFlagsERKNS_11StringPieceEPNS_12RegexpStatusE", "x264_sps_write", "ff_gen_search", "av_color_space_name", "rgb48tobgr48_nobswap", "IJK_EGL_display", "Curl_conncache_destroy", "_ZN3re214SimplifyWalker17SimplifyCharClassEPNS_6RegexpE", "HalfFloatPlane", "_ZN3UDT11setloglevelEN7logging8LogLevel4typeE", "Curl_splayinsert", "x264_predict_8x8c_h_c", "_Z29GetRam_aacEnc_MergeGainLookUpiPh", "_ZN5uripp10ip_addressC1Ev", "av_frame_set_pkt_pos", "M420ToI420", "x264_frame_new_slice", "FixedDiv1_C", "av_codec_get_codec_descriptor", "_ZNK4Json4Path7resolveERKNS_5ValueE", "ijkmp_get_property_float", "ff_hevc_intra_chroma_pred_mode_decode", "x264_nal_escape_neon", "J4AC_android_media_MediaCodec__dequeueOutputBuffer__catchAll", "BGRAToUVRow_C", "SDL_AMediaCodecJava_getOutputFormat", "_ZN10CIPAddress5ipcmpEPK8sockaddrS2_i", "Curl_ssl_cleanup", "_ZN4Json9OurReader17skipCommentTokensERNS0_5TokenE", "_ZN4Json6Reader12decodeStringERNS0_5TokenERNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE", "nghttp2_http_on_header", "SplitUVRow_Any_NEON", "_ZN3re28Compiler7CaptureENS_4FragEi", "_ZN7CPacketC1Ev", "Curl_pgrsSetUploadSize", "ffpipeline_unlock_surface", "x264_slicetype_decide", "J4AC_android_os_Bundle__putParcelableArrayList", "J4AC_android_os_Bundle__getString__asCBuffer__catchAll", "ijkmp_global_init", "Curl_add_buffer", "x264_quant_luma_dc_trellis", "J4AC_android_os_Bundle__getInt__withCString__catchAll", "ff_h264_decode_init_vlc", "_Z39GetRequiredMemRam_aacEnc_PsyOutElementsv", "_ZN3re210runetocharEPcPKi", "_ZN4CUDT22processConnectResponseERK7CPacketP13CUDTExceptionb", "ScaleCols_C", "getLimiterDelay", "ARGBSubtractRow_C", "_ZN6CEPoll13update_eventsERKiRNSt6__ndk13setIiNS2_4lessIiEENS2_9allocatorIiEEEEib", "x264_zigzag_interleave_8x8_cavlc_neon", "_Z19fillHybridDelayLinePPiS0_S_S_S_S_P6HYBRID", "_ZN4Json9OurReader9readTokenERNS0_5TokenE", "avcodec_parameters_alloc", "ScaleARGBCols_C", "FDKlog", "ScaleARGBFilterCols_NEON", "I422ToRGBARow_C", "H420ToABGR", "Curl_verboseconnect", "_ZN3UDT6listenEii", "nghttp2_stream_dep_remove", "rgb15tobgr32", "_ZN10CHandShakeC2Ev", "_ZN8CChannel13setRcvBufSizeEi", "srt_setloglevel", "_ZNK4Json17ValueIteratorBase5indexEv", "x264_pixel_ssd_nv12_core_neon", "_ZN10CUDTSocketC2Ev", "av_packet_split_side_data", "_Z27FreeRam_aacEnc_BitCntrStatePP13BITCNTR_STATE", "SDL_getenv", "avpriv_get_trc_function_from_trc", "_ZN3re23DFA14SlowSearchLoopEPNS0_12SearchParamsE", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__readAt", "nghttp2_session_on_rst_stream_received", "RAWToI420", "uv_tcp_simultaneous_accepts", "av_new_packet", "uv__cloexec_ioctl", "CanonicalFourCC", "SDL_AMediaFormat_delete", "_ZN4Json6Reader10readStringEv", "FDKstrlen", "_Z9shellsortPhh", "_ZN3re29CharClass6DeleteEv", "sws_isSupportedOutput", "_ZN3re23DFA9SearchTFFEPNS0_12SearchParamsE", "_ZN4Json6Reader5parseERNSt6__ndk113basic_istreamIcNS1_11char_traitsIcEEEERNS_5ValueEb", "srt_epoll_wait", "_ZN4CUDT4recvEiPcii", "FDKsbrEnc_EncodeIcc", "_ZN3re26Regexp10NewLiteralEiNS0_10ParseFlagsE", "_ZN3re28Compiler4CopyENS_4FragE", "curl_mvsprintf", "uv__close_nocheckstdio", "FFmpegApi_global_init", "ff_hevc_sao_band_position_decode", "FDK_setBitCnt", "x264_intra_satd_x3_16x16_neon", "FDKatol", "Curl_he2ai", "FDKaacEnc_LimitBitrate", "IJK_GLES2_Renderer_setupGLES", "x264_ratecontrol_qp", "ff_hevc_hls_filter", "ff_h264_idct_add8_422_14_c", "av_dict_get", "nghttp2_frame_unpack_frame_hd", "_ZN4Json5ValueC1Ed", "curl_multi_socket", "uv_thread_equal", "ff_avc_parse_nal_units_buf", "_ZN3re24Prog13SearchOnePassERKNS_11StringPieceES3_NS0_6AnchorENS0_9MatchKindEPS1_i", "_ZN3re26Regexp4PlusEPS0_NS0_10ParseFlagsE", "_Z30GetAacDecoderStaticChannelInfoi", "uv_kill", "FDKexp", "uriComposeQueryA", "_Z25transportEnc_GetBitstreamP12TRANSPORTENC", "_Z28FDKaacEnc_InitPreEchoControlPiS_iS_S_", "av_find_default_stream_index", "curl_accept", "avio_get_str16be", "av_frame_get_pkt_pos", "_ZNK4Json19StreamWriterBuilder8validateEPNS_5ValueE", "av_image_copy", "_ZN3UDT10epoll_waitEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_lS7_S7_", "x264_predict_16x16_dc_c", "_ZN4Json13valueToStringEm", "ff_put_wav_header", "x264_zigzag_sub_8x8_field_neon", "ff_udp_set_remote_url", "nghttp2_session_check_server_session", "_ZN3UDT8selectExERKNSt6__ndk16vectorIiNS0_9allocatorIiEEEEPS4_S7_S7_l", "ff_videodsp_init_aarch64", "nghttp2_frame_rst_stream_init", "FDK_CreateBitBuffer", "_ZN3re28Compiler9AllocInstEi", "_ZN10CUDTUnited6listenEii", "_ZN4Json15parseFromStreamERKNS_10CharReader7FactoryERNSt6__ndk113basic_istreamIcNS4_11char_traitsIcEEEEPNS_5ValueEPNS4_12basic_stringIcS7_NS4_9allocatorIcEEEE", "x264_zigzag_scan_8x8_field_neon", "_ZN5uripp6schemeC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "uriFreeUriMembersA", "_ZN6google14FlagRegistererC2EPKcS2_S2_S2_PvS3_", "_Z24GetRam_sbr_OverlapBufferi", "x264_opencl_finalize_cost", "_ZN4Json5Value11swapPayloadERS0_", "_ZN3re23RE23Arg11parse_shortEPKcmPv", "_ZN4Json5Value8CZStringD1Ev", "ARGBMultiply", "curl_version_info", "_ZN7logging13LogDispatcherclEv", "SDL_Android_AudioTrack_new_from_spec", "_ZN4Json15throwLogicErrorERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_Z23FDKaacEnc_AdjustBitrateP8QC_STATEP15CHANNEL_MAPPINGPiiii", "_Z22GetRam_Sbr_quotaMatrixi", "av_mastering_display_metadata_alloc", "x264_pixel_sa8d_satd_16x16_neon", "J4AC_android_media_AudioTrack__getMinVolume", "ARGBMultiplyRow_NEON", "RGB565ToARGB", "_ZN4CUDTC2Ev", "ff_avformat_open_input", "_Z23transportEnc_GetLibInfoP8LIB_INFO", "av_timecode_adjust_ntsc_framenum2", "_Z21transportEnc_writePCEP13FDK_BITSTREAM12CHANNEL_MODEiiiiij", "ff_thread_flush", "hcryptCtx_GenSecret", "Curl_connect", "_ZN14CCryptoControl13regenCryptoKmEbb", "_ZN3re23DFA21RunWorkqOnEmptyStringEPNS0_5WorkqES2_j", "x264_intra_satd_x3_8x16c", "srt_epoll_remove_ssock", "_Z26transportEnc_EndAccessUnitP12TRANSPORTENCPi", "av_aes_ctr_increment_iv", "ffurl_handshake", "ScaleARGBRowDown2_Any_NEON", "Curl_timediff_us", "Curl_none_set_engine_default", "uv_rwlock_rdunlock", "_Z29GetRam_sbr_QmfStatesSynthesisi", "uriParseIpFourAddressW", "uv__pipe_close", "SDL_AoutOpenAudio", "J400ToARGB", "Curl_ssl_push_certinfo_len", "ff_get_guid", "avio_skip", "nghttp2_session_callbacks_set_send_callback", "x264_predict_8x8c_v_aarch64", "_Z23adifWrite_GetHeaderBitsP9ADIF_INFO", "av_gettime", "_ZN10CSndBuffer8increaseEv", "uriDissectQueryMallocA", "Curl_ipvalid", "x264_pixel_sad_x4_4x8_neon", "x264_macroblock_encode", "ffpipeline_set_volume", "I420ToRGB565", "Curl_ssl_version", "ff_h264_chroma_dc_dequant_idct_10_c", "av_fifo_reset", "uv__udp_recv_start", "nghttp2_session_close_stream_if_shut_rdwr", "avio_r8", "ff_riff_write_info", "pthread_barrier_wait", "uv__inotify_init", "_ZNK8CChannel8getIpToSEv", "_ZN6google30ReparseCommandLineNonHelpFlagsEv", "FDKsbrEnc_EncodeIpd", "_Z20imdct_copy_ov_and_nrP6mdct_tPii", "_ZN4Json13valueToStringEd", "_ZN3re23DFA10StateSaver7RestoreEv", "avformat_get_class", "_ZN4Json5Value4swapERS0_", "ff_get_extradata", "_Z34CLatmDemux_GetOtherDataPresentFlagP10CLatmDemux", "av_opt_get_q", "avio_wl32", "StariAvAudioEncoderSetSampleRate", "ff_er_add_slice", "ScaleARGBRowDown2Box_NEON", "x264_predict_16x16_init_aarch64", "srt_startup", "ff_h264_init_cabac_states", "_ZN4Json9OurReader9pushErrorERKNS_5ValueERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEES3_", "_Z25qmfInitAnalysisFilterBankP15QMF_FILTER_BANKPsiiiii", "_ZN3re23DFAD2Ev", "UYVYToYRow_Any_NEON", "uriComposeQueryMallocA", "av_opt_serialize", "uv_os_get_passwd", "_ZN4CUDT4sendEiPKcii", "J4AC_android_os_Bundle__getString__withCString__catchAll", "ff_h264_chroma_dc_dequant_idct_12_c", "uv_hrtime", "av_sample_fmt_is_planar", "ijkmp_get_weak_thiz", "av_get_time_base_q", "ScaleRowDown2Box_C", "ff_prefetch_aarch64", "uv__accept4", "ff_h264_alloc_tables", "av_packet_rescale_ts", "nghttp2_increase_local_window_size", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaPlayer__set", "inflateSync", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERm", "nghttp2_session_callbacks_set_on_invalid_header_callback2", "J4AC_android_media_MediaCodec__BufferInfo__offset__set", "nghttp2_mem_free2", "nghttp2_priority_spec_normalize_weight", "x264_intra_satd_x3_4x4", "avformat_find_stream_info", "FDK_Feed", "av_strlcpy", "uv_inet_ntop", "ARGB4444ToARGBRow_C", "Curl_expire_clear", "FDKaacEnc_Open", "nghttp2_session_get_stream_remote_close", "Curl_getaddrinfo", "_ZN4Json12StreamWriter7FactoryD0Ev", "x264_macroblock_thread_free", "_ZN5uripp10ip_addressC2Ev", "uv_stream_set_blocking", "FDKfread_EL", "ARGBMultiplyRow_C", "ff_kbd_window_init", "curlx_ultouc", "_ZNK4Json5Value10isIntegralEv", "Curl_httpchunk_init", "x264_cabac_encode_flush", "_Z24FreeRam_TransportEncoderPP12TRANSPORTENC", "uv__epoll_pwait", "_ZN4Json6Reader12decodeDoubleERNS0_5TokenERNS_5ValueE", "_ZN4Json17CharReaderBuilderD1Ev", "ff_mov_get_lpcm_codec_id", "_Z17FDKaacEnc_BCClosePP13BITCNTR_STATE", "av_compare_ts", "ijkmp_global_set_log_report", "x264_sub8x16_dct_dc_neon", "J4AC_android_os_Bundle__putInt__withCString__catchAll", "SDL_AMediaCodec_start", "_ZN3re28Compiler5MatchEi", "J4AC_java_util_ArrayList__add__catchAll", "ff_interleave_add_packet", "uv_fs_chmod", "FDKsbrEnc_EncodeIid", "NV21ToARGBRow_NEON", "x264_coeff_last64_neon", "Curl_http2_add_child", "av_format_set_audio_codec", "nghttp2_pq_push", "_ZNK4Json9Exception4whatEv", "_Z19FDKaacEnc_QCOutInitPP6QC_OUTiPK15CHANNEL_MAPPING", "J4AC_java_util_ArrayList__ArrayList__catchAll", "RGB24ToYRow_Any_NEON", "StariAvAudioEncoderEncode", "avpriv_put_string", "_Z26FDKaacEnc_QuantizeSpectrumiiiPiS_iS_Psi", "SDL_Android_NativeWindow_display_l", "nghttp2_submit_altsvc", "SDL_VoutAndroid_releaseBufferProxyP", "nghttp2_session_get_stream_raw", "ff_set_sar", "av_get_picture_type_char", "_ZN8CChannelC1Ei", "_ZN6CGuard11createMutexER15pthread_mutex_t", "ff_hevc_frame_nb_refs", "_ZN3re23DFA9DumpWorkqEPNS0_5WorkqE", "_Z24CBlock_ScaleSpectralDataP22CAacDecoderChannelInfoP16SamplingRateInfo", "_ZN7CPacket17setMsgCryptoFlagsE17EncryptionKeySpec", "J4AC_android_media_MediaFormat__setByteBuffer", "x264_pixel_hadamard_ac_16x8_neon", "ffp_get_property_float", "av_opt_child_class_next", "IJK_GLES2_Renderer_create_rgbx8888", "ff_h264_direct_ref_list_init", "StariAvVideoEncoderFlush", "uv_is_closing", "getifaddrs", "av_crc_get_table", "_ZNK4Json5Value8CZStringltERKS1_", "avcodec_decode_audio4", "ff_h264_idct8_dc_add_10_c", "avutil_license", "Curl_http2_cleanup_dependencies", "_ZN4Json6Reader12decodeNumberERNS0_5TokenERNS_5ValueE", "nghttp2_stream_get_parent", "av_log", "ScaleFilterCols_Any_NEON", "ARGBToYJRow_NEON", "uv_os_tmpdir", "uv__recvmmsg", "MergeUVRow_Any_NEON", "av_opt_set_sample_fmt", "x264_opencl_lowres_init", "uv__getaddrinfo_translate_error", "_ZN6google8GetArgv0Ev", "_ZNK10CRcvBuffer15getAvailBufSizeEv", "ijkmeta_set_avformat_context_l", "_Z14MessageTypeStr14UDTMessageTypej", "_ZN3re26Regexp10ParseState16PushWordBoundaryEb", "ff_h264_ref_picture", "uv_timer_again", "nghttp2_session_get_stream_effective_local_window_size", "I422ToARGBRow_Any_NEON", "av_realloc_f", "av_xiphlacing", "x264_predict_lossless_4x4", "_ZN3re23RE213PartialMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi", "J4AC_android_media_AudioTrack__setPlaybackParams__catchAll", "_ZN4CUDT18epoll_remove_usockEii", "ff_h264_flush_change", "av_fifo_alloc_array", "x264_intra_sad_x3_4x4", "ff_h264_idct8_add4_10_c", "av_d2str", "curl_multi_cleanup", "av_opt_query_ranges", "_Z20FDKaacEnc_AdjThrInitP13ADJ_THR_STATEiPP12ELEMENT_BITSiiiiiii", "av_rescale_rnd", "_ZN13CUDTExceptionD1Ev", "nghttp2_submit_response", "av_hwframe_ctx_alloc", "_ZN3re23RE23Arg10parse_charEPKcmPv", "nghttp2_session_destroy_stream", "av_log_get_flags", "ffp_toggle_buffering_l", "_ZN4Json5ValueixEi", "_ZN5uripp3uriC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "ff_h264_idct_add8_422_10_c", "RAWToUVRow_C", "_ZNK7CPacket14getMsgBoundaryEv", "x264_picture_clean", "av_opt_set_bin", "J4AC_android_os_Bundle__putLong__catchAll", "_ZN4Json5ValueC2Ej", "_Z22FDKaacEnc_prepareSfbPeP15PE_CHANNEL_DATAPKiS2_S2_S2_iii", "nghttp2_frame_altsvc_init", "_ZN4CUDT14checkSndTimersE15Whether2RegenKm", "x264_deblock_v_luma_neon", "av_get_media_type_string", "I422ToARGB4444Row_NEON", "_ZN6google18ShowUsageWithFlagsEPKc", "J4AC_android_media_MediaFormat__getInteger", "ff_mpeg4video_split", "J4AC_java_nio_ByteBuffer__allocateDirect__catchAll", "_Z3fftiPiS_", "_Z36FreeRam_Sbr_prevEnvelopeCompensationPPh", "nghttp2_bufs_reset", "avio_wb24", "x264_encoder_invalidate_reference", "uriHexToLetterExA", "av_rescale", "avpriv_io_delete", "_ZN3re23DFA14RunWorkqOnByteEPNS0_5WorkqES2_ijPb", "av_sha_alloc", "ffurl_get_file_handle", "_ZN3re26Regexp10ParseState13DoAlternationEv", "x264_add16x16_idct8_neon", "ff_h264_idct_add_14_c", "_ZN4Json5ValueC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "nghttp2_hd_deflate_hd", "ff_videodsp_init", "uv_thread_join", "_ZN7logging13LogDispatcher19CreateLogLinePrefixERNSt6__ndk119basic_ostringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "x264_ratecontrol_summary", "av_opt_child_next", "nghttp2_stream_dep_distributed_weight", "av_strcasecmp", "YUY2ToYRow_Any_NEON", "Curl_fillreadbuffer", "sws_getCachedContext", "ScaleRowDown2_C", "IJK_GLES2_Renderer_free", "_ZN4Json5ValueC1EPKcS2_", "_ZN4CUDT6listenEii", "av_nearer_q", "nghttp2_put_uint32be", "I400ToARGB", "av_crc", "ScaleAddRows_NEON", "_ZN5CHashD1Ev", "ff_er_frame_end", "_Z23HcrGetABitFromBitstreamP13FDK_BITSTREAMPtS1_h", "_ZN9CSndUListC1Ev", "I444ToARGB", "Curl_ssl_getsock", "_ZN4Json6Reader9pushErrorERKNS_5ValueERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEES3_", "ffurl_accept", "avpriv_align_put_bits", "ff_fetch_timestamp", "J4AC_android_os_Bundle__putLong", "av_aes_ctr_free", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN3re28Compiler3CatENS_4FragES1_", "_Z9CTns_ReadP13FDK_BITSTREAMP8CTnsDataPK8CIcsInfoj", "nghttp2_pq_init", "avformat_network_init", "StariAvAudioEncoderSetBitrate", "_ZN14CCryptoControl7decryptE5ref_tI7CPacketE", "_ZN4Json6WriterD1Ev", "Curl_getconnectinfo", "_ZN3re28Compiler7DotStarEv", "ffp_get_master_clock", "ff_sws_init_swscale_aarch64", "_ZN3re29PatchList6AppendEPNS_4Prog4InstES0_S0_", "hcryptMsg_SRT_MsgInfo", "J4AC_java_util_ArrayList__ArrayList__asGlobalRef__catchAll", "nghttp2_rcbuf_new2", "curl_mime_free", "nghttp2_session_upgrade2", "ff_inet_aton", "ff_udp_get_local_port", "_ZN6google8GetArgvsEv", "av_packet_pack_dictionary", "ijkmp_stari_set_pcm_muted", "av_log_set_level", "ffp_destroy_p", "Curl_hash_clean_with_criterium", "NV12ToRGB565Row_C", "curl_easy_recv", "aacEncOpen", "nghttp2_session_set_stream_user_data", "I400ToARGBRow_C", "swr_alloc", "_Z24FDKsbrEnc_CreatePSEncodePP11T_PS_ENCODE", "av_filename_number_test", "_Z27FDKsbrEnc_PSEnc_WritePSDataP19T_PARAMETRIC_STEREOP13FDK_BITSTREAM", "_ZN4Json12PathArgumentC2Ej", "_ZNK5uripp5query4findERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "curl_domalloc", "ff_hevc_decode_short_term_rps", "_Z12fixp_cos_siniiPiS_", "InterpolateRow_NEON", "_Z18GetWorkBufferCore1i", "ff_parse_mpeg2_descriptor", "av_application_on_tcp_will_open", "_ZN3re23DFA19AnalyzeSearchHelperEPNS0_12SearchParamsEPNS0_9StartInfoEj", "_ZNK4Json5Value8CZStringeqERKS1_", "av_codec_is_decoder", "Curl_ssl_cert_status_request", "_Z29Hcr_State_BODY_SIGN_ESC__SIGNP13FDK_BITSTREAMPv", "RGBColorTable", "_ZNK4Json9OurReader24getLocationLineAndColumnEPKc", "ScaleRowDown34_0_Box_16_C", "nghttp2_frame_goaway_init", "x264_ratecontrol_init_reconfigurable", "_Z26sbrGetSingleChannelElementP15SBR_HEADER_DATAP14SBR_FRAME_DATAP13FDK_BITSTREAMP6PS_DECji", "J4AC_android_os_Bundle__putInt", "x264_pixel_ssd_8x4_neon", "x264_quant_4x4x4_neon", "x264_prefetch_fenc", "nghttp2_hd_huff_decode_context_init", "ff_rtmp_packet_create", "_ZN6google24ShutDownCommandLineFlagsEv", "ARGBColorMatrixRow_C", "avpriv_get_gamma_from_trc", "ffpipeline_set_mediacodec_select_callback", "ARGBMirrorRow_Any_NEON", "_ZN4Json5ValueC2EPKc", "uv__loop_close", "uv__udp_send", "av_buffer_ref", "uv__async_close", "SDL_VoutSetOverlayFormat", "uv_os_unsetenv", "ffurl_size", "x264_mc_weight_w4_neon", "ff_amf_write_number", "_Z32FDK_DRC_Generator_getCompProfileP8DRC_COMP", "FDK_get", "UYVYToYRow_NEON", "_Z30FDKaacEnc_EstimateScaleFactorsPP15PSY_OUT_CHANNELPP14QC_OUT_CHANNELiii", "_ZN3re24Prog8OptimizeEv", "_Z35FDKsbrEnc_InitSbrNoiseFloorEstimateP24SBR_NOISE_FLOOR_ESTIMATEiPKhiiiij", "uv_fs_sendfile", "_ZN3re24Prog4Inst9InitMatchEi", "ff_format_io_close", "av_hwframe_constraints_free", "J4AC_android_media_MediaFormat__getInteger__withCString", "sbrEncoder_EncodeFrame", "_Z12FDKcrcEndRegP11FDK_CRCINFOP13FDK_BITSTREAMi", "ARGBMirror", "uriRemoveDotSegmentsW", "J4A_GetFieldID__catchAll", "x264_sps_init", "nghttp2_frame_unpack_altsvc_payload2", "_ZN4Json17throwRuntimeErrorERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN4Json6Reader9readValueEv", "I420Scale", "I422ToARGB4444Row_Any_NEON", "nghttp2_frame_unpack_headers_payload", "ff_fft_init_aarch64", "SDL_AMediaCodec_decreaseReferenceP", "_Z32transportDec_RegisterAscCallbackP12TRANSPORTDECPFiPvPK21CSAudioSpecificConfigES1_", "av_dirname", "_ZN10CSndBuffer14getCurrBufSizeE5ref_tIiES1_", "I400ToARGBRow_NEON", "ffio_set_buf_size", "ijkmeta_set_int64_l", "_ZN10CUnitQueueD1Ev", "_Z30CBlock_FrequencyToTimeLowDelayP28CAacDecoderStaticChannelInfoP22CAacDecoderChannelInfoPssc", "ff_rtmp_calc_digest_pos", "J4AC_java_nio_ByteBuffer__allocate__catchAll", "_ZN10CUDTUnited14garbageCollectEPv", "sbrDecoder_Parse", "av_aes_alloc", "ARGBToRAWRow_C", "_ZN10CRcvBuffer22addRcvTsbPdDriftSampleEjR15pthread_mutex_t", "nghttp2_hd_deflate_get_num_table_entries", "SetPlane", "_ZN4Json18StyledStreamWriter15writeArrayValueERKNS_5ValueE", "ARGBSepia", "StariAvVideoEncoderCreate", "Curl_conncontrol", "ffp_packet_queue_abort", "Curl_cookie_clearsess", "ScaleRowDown2Box_NEON", "ff_ps_init", "avcodec_decode_video2", "ijkmp_set_playback_volume", "uv__socket_sockopt", "_Z19FreeRam_ParamStereoPP19T_PARAMETRIC_STEREO", "_Z21transportEnc_writeASCP13FDK_BITSTREAMP12CODER_CONFIGP13CSTpCallBacks", "uv_listen", "x264_hpel_filter_neon", "_Z23GetRam_aacEnc_BitLookUpiPh", "ARGB4444ToUVRow_NEON", "nghttp2_session_close_stream", "rgb48tobgr48_bswap", "nghttp2_frame_hd_init", "uv_send_buffer_size", "_Z23FreeRam_Sbr_quotaMatrixPPi", "aacEncEncode", "Android420ToI420", "_ZN3re26Regexp6ConcatEPPS0_iNS0_10ParseFlagsE", "_Z22FDKhybridAnalysisApplyP18FDK_ANA_HYB_FILTERPKiS2_PiS3_", "ff_aac_sbr_ctx_init", "_ZNK5uripp4path12match_prefixERKS0_", "Curl_getinfo", "_Z23transportEnc_GetPCEBits12CHANNEL_MODEii", "ff_mov_read_stsd_entries", "av_codec_get_id", "_ZN4Json5ValueC2Eb", "ff_amf_read_null", "curl_memlog", "IJK_GLES2_Renderer_freeP", "UYVYToARGBRow_NEON", "x264_sub16x16_dct_neon", "_ZN3UDT11setstreamidEiRKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN4Json5Value8CZString4swapERS1_", "Curl_setstropt", "_ZN3UDT18epoll_update_usockEiiPKi", "av_buffer_is_writable", "av_get_profile_name", "Curl_client_write", "ff_raw_video_read_header", "_ZN4Json5Value11CommentInfoC2Ev", "_ZN4Json6Reader27decodeUnicodeEscapeSequenceERNS0_5TokenERPKcS4_Rj", "uriComposeQueryExA", "Curl_pgrsStartNow", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaDataSource__get", "uv__inotify_init1", "_ZNK4Json5Value14getOffsetStartEv", "curl_memlimit", "curl_slist_free_all", "SplitUVPlane", "_ZNK4Json5Value8isMemberEPKc", "aacDecoder_Fill", "ff_alloc_a53_sei", "swri_resample_dsp_init", "ffp_is_paused_l", "_ZN4Json12PathArgumentC2EPKc", "ff_reset_entries", "_ZNK7CPacket15getControlFlagsEv", "UYVYToUV422Row_Any_NEON", "ijkav_register_ijkhttphook_protocol", "Curl_initinfo", "av_parser_change", "av_log_set_flags", "av_gcd", "Curl_isalpha", "nghttp2_bufs_next_present", "FDKmemmove", "_ZN4CUDT15epoll_add_ssockEiiPKi", "md5_init", "nghttp2_submit_headers", "nghttp2_session_callbacks_set_on_data_chunk_recv_callback", "_ZN5uripp4pathC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "x264_predict_8x16c_h_neon", "_ZN3re24Prog30TEST_dfa_should_bail_when_slowEb", "nghttp2_http_on_data_chunk", "ff_init_slice_from_src", "_Z24FDKaacEnc_PreEchoControlPiiiisS_iS_", "Curl_write", "_ZN3re23NFAC1EPNS_4ProgE", "H422ToARGB", "x264_macroblock_encode_p8x8", "av_parse_time", "_ZN4CUDT19processSrtMsg_HSRSPEPKjmji", "J4AC_android_media_AudioTrack__getStreamType", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERy", "I420ToUYVY", "_ZN5uripp3uriC2Ev", "av_stream_get_r_frame_rate", "uv__io_init", "av_bsf_receive_packet", "_ZN4Json9ExceptionC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "av_opt_set_defaults", "uv_fs_realpath", "x264_decimate_score15_neon", "nghttp2_stream_get_sum_dependency_weight", "_ZN6CEPoll9add_ssockEiRKiPS0_", "_ZN4CUDT7perfmonEiP8CPerfMonb", "nghttp2_frame_pack_ping", "FDKaacEnc_CalcBitrate", "SDL_AMediaCodec_FakeFifo_size", "Curl_slist_append_nodup", "uv__cloexec_fcntl", "nghttp2_outbound_queue_pop", "_ZN3UDT13connect_debugEiPK8sockaddrii", "HaiCrypt_Rx_Process", "_ZN10CSndBuffer8readDataEPPciRiRmS2_", "_ZN5uripp4path5clearEv", "ScalePlane_16", "_ZN3re26Regexp15StarPlusOrQuestENS_8RegexpOpEPS0_NS0_10ParseFlagsE", "FDK_Fetch", "uv_rwlock_wrunlock", "_Z21FDKaacEnc_calcSfbDistPiPsiii", "ff_h264_idct8_add_14_c", "uv_udp_set_multicast_loop", "_Z35GetRequiredMemRam_SbrDecWorkBuffer1v", "nghttp2_hd_deflate_get_table_entry", "ff_thread_finish_setup", "_Z23FDKaacEnc_QCMainPrepareP12ELEMENT_INFOP11ATS_ELEMENTP15PSY_OUT_ELEMENTP14QC_OUT_ELEMENT17AUDIO_OBJECT_TYPEja", "_ZN4Json5Value3endEv", "ScaleFilterCols64_C", "inflateEnd", "inflateReset2", "_Z12LdDataVectorPiS_i", "_Z28CConcealment_InitChannelDataP16CConcealmentInfoP14CConcealParamsi", "NV12ToARGBRow_NEON", "nghttp2_pq_pop", "uv__io_check_fd", "nghttp2_session_get_stream_local_window_size", "ff_avcodec_find_decoder_by_name", "_ZN10CRcvBuffer14getRcvReadyMsgE5ref_tImES0_IiE", "x264_pixel_sad_x4_4x4_neon", "_ZN3UDT4bindEiPK8sockaddri", "ff_h264_idct8_add_8_c", "filter_codec_opts", "av_mastering_display_metadata_create_side_data", "I422ToRGB24Row_Any_NEON", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS_4pathE", "uriEscapeA", "_ZN4CUDT13receiveBufferEPci", "swr_get_class", "ff_aac_ac3_parse", "av_image_get_linesize", "ff_hevc_output_frame", "SysStrError", "_ZN4Json12StyledWriter11writeIndentEv", "_ZN7logging13LogDispatcher5ProxyC2ERS0_", "_Z22transportDec_CrcEndRegP12TRANSPORTDECi", "_ZN4CUDT23checkUpdateCryptoKeyLenEPKci", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__withCString__asGlobalRef__catchAll", "_Z25FreeRam_SbrDecWorkBuffer1PPi", "av_get_output_timestamp", "integral_init4v_neon", "_Z30GetRam_Sbr_guideVectorDetectedi", "x264_coeff_last8_aarch64", "hcryptCtx_Tx_Switch", "Curl_mime_initpart", "avcodec_enum_to_chroma_pos", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__catchAll", "_Z21adtsRead_DecodeHeaderP11STRUCT_ADTSP21CSAudioSpecificConfigP13FDK_BITSTREAMi", "_ZN5uripp4pathC1Ev", "ijkmp_version", "uriEscapeExW", "uv__async_stop", "MirrorUVRow_NEON", "Curl_http", "Curl_poll", "RAWToUVRow_NEON", "nghttp2_frame_window_update_init", "ARGBToUVJRow_Any_NEON", "x264_frame_init_lowres", "_ZN4Json9OurReader19readCppStyleCommentEv", "nghttp2_frame_pack_rst_stream", "_ZN3re26Regexp17FactorAlternationEPPS0_iNS0_10ParseFlagsE", "_ZNK12CRcvLossList15getFirstLostSeqEv", "SDL_VoutFillFrameYUVOverlay", "_ZN5CHashC2Ev", "_ZN4CUDT8sendmsg2EiPKci5ref_tI12SRT_MsgCtrl_E", "integral_init8v_neon", "uv__tcp_bind", "_Z10GetDrcInfoi", "J4AC_android_media_MediaFormat__setInteger__withCString__catchAll", "_ZN3re26Regexp13LeadingRegexpEPS0_", "ff_mov_cenc_free", "av_fifo_alloc", "_Z6fLdPowiiiiPi", "_ZN10CSndBuffer12getInputRateE5ref_tIiES0_ImE", "Curl_set_in_callback", "nghttp2_stream_shutdown", "_Z20FDK_MetadataEnc_InitP20FDK_METADATA_ENCODERiiijjj12CHANNEL_MODE13CHANNEL_ORDER", "_ZN3re26Regexp8ToStringEv", "_ZN9CSndUList6updateEPK4CUDTNS_11ERescheduleE", "uv_fs_write", "av_get_sample_fmt_string", "av_shrink_packet", "ff_h264_update_thread_context", "_ZN4Json6WriterD0Ev", "_ZN4CUDT20updateSrtSndSettingsEv", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec__asCBuffer", "SDL_AoutGetAudioPerSecondCallBacks", "_ZN3re221FactorAlternationImpl6Round3EPPNS_6RegexpEiNS1_10ParseFlagsEPNSt6__ndk16vectorINS_6SpliceENS5_9allocatorIS7_EEEE", "uriUnescapeInPlaceA", "ff_h264_idct_add16intra_12_c", "nghttp2_session_server_new", "x264_pixel_satd_8x4_neon", "rgb16to24", "ffio_read_varlen", "FDKcalloc_L", "_ZN3re23RE23Arg17parse_ulong_radixEPKcmPvi", "sws_cloneVec", "ff_hevc_split_transform_flag_decode", "_Z20GetRam_SbrDecChanneli", "Curl_http_output_auth", "I422ToARGBRow_NEON", "NV12ToRGB565Row_NEON", "_ZN9CRcvUList6insertEPK4CUDT", "avcodec_get_type", "x264_frame_shift", "uv_tcp_getsockname", "_ZN4Json9OurReader17readCStyleCommentEv", "_Z8sqrtFixpi", "nghttp2_session_on_ping_received", "x264_frame_filter", "avformat_write_header", "x264_mc_weight_w4_offsetadd_neon", "adler32", "ijkmp_seek_to", "crc32_combine64", "_ZN4JsonrsERNSt6__ndk113basic_istreamIcNS0_11char_traitsIcEEEERNS_5ValueE", "ff_hevc_save_states", "FDKfwrite", "_ZNK4Json9OurReader19getStructuredErrorsEv", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__onSelectCodec", "Curl_ssl_tls13_ciphersuites", "_ZN4Json5Value10setCommentERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_16CommentPlacementE", "sws_freeVec", "I444ToABGR", "ARGB1555ToUVRow_Any_NEON", "uv_cond_broadcast", "_ZN4Json6Reader10readNumberEv", "_Z29aacDecoder_drcInitChannelDataP15CDrcChannelData", "sws_scale", "avcodec_free_context", "_ZN4CUDT6unloseEii", "I422ToYUY2Row_Any_NEON", "HaiCrypt_Tx_Data", "_Z22CBlock_ReadSectionDataP13FDK_BITSTREAMP22CAacDecoderChannelInfoPK16SamplingRateInfoj", "uriRemoveDotSegmentsAbsoluteA", "av_register_hwaccel", "av_hex_dump_log", "_Z13lppTransposerP13SBR_LPP_TRANSP16QMF_SCALE_FACTORPPiS3_S4_iiiiiP9INVF_MODES6_", "_ZN5uripp4path8pop_backERKS0_", "ARGBToARGB1555Row_C", "StariAvVideoEncoderSetBitrate", "J4AC_android_media_AudioTrack__getSampleRate__catchAll", "ScalePlaneVertical", "J4AC_android_os_Bundle__putString", "I420ToRGB24", "uv_ip4_addr", "NV21ToARGBRow_C", "x264_threads_distribute_ratecontrol", "_ZN5uripp9authorityC2Ev", "srt_epoll_update_usock", "_Z21HcrMuteErroneousLinesP10CErHcrInfo", "ff_hyscale_fast_c", "I420Interpolate", "_Z25FreeAacDecoderChannelInfoPP22CAacDecoderChannelInfo", "avformat_transfer_internal_stream_timing_info", "ScaleRowDown38_3_Box_C", "UYVYToI420", "_ZN4Json5Value6resizeEj", "sws_printVec2", "ARGBBlur", "ff_h264_sei_decode", "nghttp2_stream_next_outbound_item", "ff_metadata_conv_ctx", "_ZN10CRcvBuffer8skipDataEi", "_ZN4Json19StreamWriterBuilderD0Ev", "_ZN5uripp7convertEb", "x264_macroblock_cache_free", "_Z21CreateStreamMuxConfigP11LATM_STREAMP13FDK_BITSTREAMiP13CSTpCallBacks", "_ZN4CUDT6acceptEiP8sockaddrPi", "_Z14InitInvSqrtTabv", "BGRAToYRow_C", "_ZN4Json9ExceptionD1Ev", "ff_rgb24toyv12_c", "_ZN6google28ParseCommandLineNonHelpFlagsEPiPPPcb", "x264_opencl_motionsearch", "av_image_check_sar", "_ZNK5uripp9authority6stringEv", "IJK_EGL_freep", "nghttp2_submit_data", "FDK_Copy", "avpriv_strtod", "_ZN14CCryptoControl20createFakeSndContextEv", "_ZN4Json12StreamWriter7FactoryD2Ev", "_ZN4Json6Reader12currentValueEv", "av_get_sample_fmt", "I420ToRAW", "IJK_EGL_free", "ijkav_register_ijkmediadatasource_protocol", "av_version_info", "FDK_InitBitBuffer", "av_codec_set_seek_preroll", "nghttp2_hd_deflate_new2", "ff_free_vlc", "ff_alloc_packet2", "av_opt_set", "_Z11imdct_blockP6mdct_tPiS1_PKsiiiPK8FIXP_SPKiS6_ii", "ff_codec_guid_get_id", "ff_slice_thread_free", "_ZN3re23RE27OptionsC2ENS0_13CannedOptionsE", "av_index_search_timestamp", "nghttp2_session_callbacks_set_on_extension_chunk_recv_callback", "_ZNK3re211StringPiece4findEcm", "nghttp2_frame_extension_free", "avio_open2", "_ZN4Json13valueToStringEb", "_ZN13CUDTExceptionC2E9CodeMajor9CodeMinori", "_ZN6google16SetVersionStringERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_ZN3re214SimplifyWalker7Concat2EPNS_6RegexpES2_NS1_10ParseFlagsE", "_ZN4CUDT18createSrtHandshakeE5ref_tI7CPacketES0_I10CHandShakeEiiPKjm", "av_frame_set_channel_layout", "uv__free", "uv_udp_set_multicast_interface", "_ZN4CUDT11setstreamidEiRKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_Z22CConcealment_GetMethodP14CConcealParams", "nghttp2_submit_trailer", "_Z17CJointStereo_ReadP13FDK_BITSTREAMP16CJointStereoDataiij", "av_get_known_color_name", "Curl_iscntrl", "ff_simple_idct48_add", "ff_write_chained", "ijkmp_get_property_int64", "I420ToARGB", "ARGBExtractAlpha", "uv_err_name", "ff_reget_buffer", "x264_intra_sad_x3_8x16c_neon", "get_crc_table", "RGB24ToARGBRow_NEON", "J4A_ThrowException", "curl_formadd", "_Z30FDKsbrEnc_InitTonCorrParamExtriP16SBR_TON_CORR_ESTP15SBR_CONFIG_DATAiiiiij", "_ZNK12CRcvLossList4findEii", "_ZN4Json23BuiltStyledStreamWriter14isMultineArrayERKNS_5ValueE", "uv__fs_event_close", "RAWToYRow_Any_NEON", "StariAvAudioEncoderRelease", "x264_plane_copy_deinterleave_rgb_neon", "ff_h264_idct_add_8_c", "_ZN4Json13ValueIteratorC2Ev", "_Z34GetRequiredMemRam_TransportEncoderv", "Curl_unencode_cleanup", "Curl_none_set_engine", "_ZN3re26Regexp13LiteralStringEPiiNS0_10ParseFlagsE", "sbrEncoder_UpdateBuffers", "Curl_pipeline_set_server_blacklist", "uriHexdigToIntA", "_ZN6google9FlagSaverD2Ev", "uv_cond_signal", "_ZN4Json5ValueC1ENS_9ValueTypeE", "srt_getlasterror_str", "_Z21FreeRam_aacEnc_PsyOutPP7PSY_OUT", "ff_find_last_ts", "x264_cabac_encode_ue_bypass", "_Z25Hcr_State_BODY_SIGN__BODYP13FDK_BITSTREAMPv", "av_log_set_callback", "_ZN9CSndQueueD1Ev", "_ZN6CGuardC2ER15pthread_mutex_tb", "_Z22FDKsbrEnc_InitPSEncodeP11T_PS_ENCODE8PS_BANDSi", "nghttp2_session_on_headers_received", "_Z26CChannel_CodebookTableInitP22CAacDecoderChannelInfo", "uv_handle_size", "UYVYToUV422Row_NEON", "I422ToUYVYRow_NEON", "x264_predict_8x8_dc_neon", "_ZN4Json4PathC2ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_12PathArgumentESC_SC_SC_SC_", "_ZN4Json5Value12removeMemberERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZNK4Json5Value3getEjRKS0_", "uv__open_cloexec", "_ZNK14CCryptoControl5CONIDEv", "SDL_AMediaCodec_queueInputBuffer", "_ZNK3re23RE27Options10ParseFlagsEv", "_Z21GetRam_Sbr_envIBufferiPh", "_Z18FDKsbrEnc_AddRightPiS_i", "SDL_AMediaCodec_isSameSerial", "hcryptCtx_Tx_ManageKM", "x264_mc_weight_w4_nodenom_neon", "_ZNK7CPacket11getAckSeqNoEv", "_ZN6CTimer12waitForEventEv", "_ZN10CHandShake9load_fromEPKcm", "Curl_ssl_engines_list", "x264_weighted_reference_duplicate", "ScaleFilterRows_NEON", "SDL_AoutAndroid_IsObjectOfAudioTrack", "_Z34GetRequiredMemRam_aacEnc_QCelementv", "ARGBMirrorRow_C", "ffpipeline_free", "av_format_set_subtitle_codec", "ff_rtmp_packet_read_internal", "SplitUVRow_C", "SDL_VoutAndroid_SetNativeWindow", "ARGBInterpolate", "_Z24AudioSpecificConfig_InitP21CSAudioSpecificConfig", "_ZNK7CPacket15getMsgTimeStampEv", "SDL_CondSignal", "SDL_AMediaCodec_isConfigured", "avio_wb16", "_ZN3re24Prog4Inst14InitEmptyWidthENS_7EmptyOpEj", "_ZN4CUDTC1ERKS_", "CopyRow_16_C", "sws_convVec", "_ZN10CUDTUnited6locateEi", "_ZN3re23RE23Arg13parse_int_hexEPKcmPv", "av_bsf_get_null_filter", "_ZN12CRcvLossListD1Ev", "ARGBExtractAlphaRow_Any_NEON", "avformat_get_riff_audio_tags", "IJK_GLES2_Renderer_create_rgb888", "SetRow_NEON", "curl_dorealloc", "uriWriteQuadToDoubleByte", "_ZN3re23RE23Arg10parse_nullEPKcmPv", "_ZN3re23DFA6SearchERKNS_11StringPieceES3_bbbPbPPKcPNS_10SparseSetTIvEE", "x264_pixel_sad_x4_8x16_neon", "curl_multi_add_handle", "_ZN3re23RE23Arg14parse_longlongEPKcmPv", "srt_dellogfa", "_Z24transportEnc_CrcStartRegP12TRANSPORTENCi", "srt_setlogflags", "Curl_cookie_loadfiles", "_Z12CRvlc_DecodeP22CAacDecoderChannelInfoP28CAacDecoderStaticChannelInfoP13FDK_BITSTREAM", "av_hwframe_get_buffer", "x264_intra_satd_x3_4x4_neon", "SDL_Android_AudioTrack_reserve_byte_buffer", "ff_thread_get_buffer", "uriCopyAuthorityA", "J4AC_android_media_MediaCodec__BufferInfo__BufferInfo__asGlobalRef__catchAll", "x264_predict_4x4_h_aarch64", "nghttp2_frame_data_init", "_ZN4Json23BuiltStyledStreamWriter9pushValueERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "x264_frame_delete", "J4AC_android_media_MediaFormat__createVideoFormat__withCString__catchAll", "_ZN3re26Regexp10ParseState12FinishRegexpEPS0_", "Curl_cookie_clearall", "_ZN14CCryptoControl14sendKeysToPeerE15Whether2RegenKm", "_Z26FDKaacEnc_CalcBandNrgMSOptPKiS0_PiS1_S0_iS1_S1_iS1_S1_", "uv_timer_set_repeat", "x264_sub8x8_dct_dc_neon", "SobelRow_C", "_ZN3re26RegexpC2ENS_8RegexpOpENS0_10ParseFlagsE", "x264_threadpool_run", "SDL_VoutOverlayAMediaCodec_releaseFrame_l", "av_get_sample_fmt_name", "_Z7HcrInitP10CErHcrInfoP22CAacDecoderChannelInfoPK16SamplingRateInfoP13FDK_BITSTREAM", "ARGBToUV444Row_NEON", "_Z32CLatmDemux_ReadAuChunkLengthInfoP13FDK_BITSTREAM", "x264_free", "_ZN4Json9ExceptionC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "_ZNK4Json5Value6asBoolEv", "ijkmp_start", "nghttp2_session_server_new2", "ff_hevc_skip_flag_decode", "ffpipenode_create_video_decoder_from_android_mediacodec", "_Z20scalFilterBankValuesP6PS_DECPPiS2_iiiPaS3_iS1_i", "ff_hevc_reset_sei", "avformat_free_context", "_ZN12CRcvLossListC2Ei", "nghttp2_session_callbacks_set_on_begin_headers_callback", "Curl_cookie_init", "SDL_AoutGetLatencySeconds", "x264_rd_cost_part", "J4AC_android_media_PlaybackParams__setSpeed__catchAll", "_ZN10CUnitQueueC2Ev", "Curl_ratelimit", "_Z28FDKaacEnc_InitChannelMapping12CHANNEL_MODE13CHANNEL_ORDERP15CHANNEL_MAPPING", "_Z30transportDec_GetBufferFullnessP12TRANSPORTDEC", "SobelToPlaneRow_NEON", "sws_subVec", "_ZN3re28Compiler9AddSuffixEi", "_ZN3re28BitStateC2EPNS_4ProgE", "_Z24GetRequiredMemRam_ps_decv", "av_md5_init", "Curl_ssl_close_all", "ijkmp_get_video_codec_info", "ff_hcscale_fast_c", "ff_h264_decode_mb_cabac", "YUY2ToUVRow_C", "x264_encoder_open_148", "_ZN4JsonlsERNSt6__ndk113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_5ValueE", "_ZN3re28Compiler4StarENS_4FragEb", "ARGBBlend", "_ZN4CUDT10epoll_waitEiPNSt6__ndk13setIiNS0_4lessIiEENS0_9allocatorIiEEEES7_lS7_S7_", "_ZN3re23DFA9SearchFTFEPNS0_12SearchParamsE", "uv__calloc", "av_oformat_next", "NV21ToI420", "_Z22FreeRam_Sbr_signMatrixPPi", "uv_inet_pton", "rgb15tobgr16", "StariAvAudioEncoderSetChannelCount", "ff_network_wait_fd", "uv__run_idle", "ff_read_packet", "_ZN3re26Regexp12NewCharClassEPNS_9CharClassENS0_10ParseFlagsE", "J4AC_android_os_Bundle__getString__withCString__asGlobalRef__catchAll", "av_opt_ptr", "ARGBToYJRow_C", "nghttp2_hd_deflate_get_max_dynamic_table_size", "srt_sendmsg2", "av_samples_alloc_array_and_samples", "J4A_loadClass__J4AC_java_nio_ByteBuffer", "MirrorRow_NEON", "uv_fs_poll_stop", "ff_listen", "Curl_sendf", "Curl_none_check_cxn", "_Z32GetRam_aacEnc_AdjThrStateElementi", "Curl_recv_plain", "ff_http_init_auth_state", "uv_key_get", "_ZN3re23DFA9SearchTTTEPNS0_12SearchParamsE", "_ZN5uripp5parseERNSt6__ndk111__wrap_iterIPKcEES4_RNS_11domain_nameE", "_Z9CPns_ReadP8CPnsDataP13FDK_BITSTREAMPK19CodeBookDescriptionPshii", "_ZNK4Json9OurReader24getLocationLineAndColumnEPKcRiS3_", "av_fmt_ctx_get_duration_estimation_method", "_ZN13CUDTExceptionD2Ev", "J4AC_android_media_AudioTrack__getMinBufferSize__catchAll", "curl_multi_remove_handle", "avcodec_align_dimensions2", "av_get_exact_bits_per_sample", "uv_walk", "av_default_item_name", "uriGetOctetValue", "Curl_free_primary_ssl_config", "uriParseUriExW", "x264_threadpool_wait", "x264_mbtree_fix8_unpack_neon", "_ZN3re28Compiler14ByteRangeEqualEii", "_ZN3re27CEscapeERKNS_11StringPieceE", "J4AC_android_media_MediaFormat__createVideoFormat__asGlobalRef__catchAll", "_Z22FreeRam_Sbr_envYBufferPPi", "J4AC_sdk_stari_ijk_player_IjkMediaPlayer__mNativeMediaDataSource__set", "_Z27GetRam_Sbr_detectionVectorsi", "ffp_get_meta_l", "Curl_ssl_backend", "ff_h264_chroma_dc_dequant_idct_8_c", "hcryptCtx_Rx_Rekey", "_ZN4Json12StreamWriterC2Ev", "J4AC_android_media_MediaCodec__flush", "nghttp2_nv_array_copy", "ff_h264_idct_add16_8_c", "ff_rfps_add_frame", "_ZN9CRcvQueue14removeListenerEPK4CUDT", "av_fopen_utf8", "SDL_AMediaCodec_stop", "SDL_AoutGetAudioSessionId", "Curl_protocol_getsock", "_ZN6google10GetArgvSumEv", "_ZN6CTimer12triggerEventEv", "_Z22CConcealment_SetParamsP14CConcealParamsiiiii", "_ZN4CUDT16acceptAndRespondEPK8sockaddrP10CHandShakeRK7CPacket", "FDKfgets", "ScaleARGBFilterCols64_C", "av_frame_get_buffer", "nghttp2_downcase", "Curl_hash_destroy", "nghttp2_session_terminate_session_with_reason", "_ZN6CEPoll12remove_ssockEiRKi", "x264_pixel_sad_4x16_neon", "av_expr_eval", "_Z16GetOverlapBufferi", "_Z19getSamplingRateInfoP16SamplingRateInfojjj", "Curl_none_random", "_Z14initHeaderDataP15SBR_HEADER_DATAiiij", "_ZN6CEPoll9add_usockEiRKiPS0_", "_Z20aacDecoder_drcEpilogP8CDrcInfoP13FDK_BITSTREAMPP28CAacDecoderStaticChannelInfohPhi", "_ZN4Json6Reader12decodeNumberERNS0_5TokenE", "nghttp2_pq_free", "av_aes_ctr_crypt", "nghttp2_stream_free", "_Z15Free_AacEncoderPP10AACENCODER", "J4AC_java_nio_ByteBuffer__assignData__catchAll", "ff_network_init", "ff_http_auth_create_response", "nghttp2_session_callbacks_set_recv_callback", "nghttp2_bufs_orb", "SDL_AMediaCodec_FakeFifo_init", "x264_mc_weight_w20_offsetadd_neon", "ARGBShade", "nghttp2_session_callbacks_set_error_callback", "_ZNK10CRcvBuffer20getRcvAvgPayloadSizeEv", "av_application_open", "_ZN4Json9OurReader27decodeUnicodeEscapeSequenceERNS0_5TokenERPKcS4_Rj", "uv_udp_recv_stop", "SDL_LockMutex", "nghttp2_bufs_seek_last_present", "_Z18GetWorkBufferCore2i", "_ZN5uripp8isspacesEPKc", "_Z18FDKsbrEnc_PSEncodeP11T_PS_ENCODEP8T_PS_OUTPhjPA2_A2_Piii", "_ZN10CInfoBlock5cloneEv", "av_frame_side_data_name", "avio_wl64", "J4AC_android_media_MediaCodec__getOutputFormat__asGlobalRef__catchAll", "FDKfloor", "_ZN3re216CharClassBuilder8ContainsEi", "ijkmp_get_duration", "Curl_pipeline_checkget_write", "uv_mutex_init", "ffpipenode_create_video_decoder_from_ffplay", "uv_async_init", "nghttp2_submit_ping", "ffio_fill", "_Z19adtsWrite_CrcEndRegP11STRUCT_ADTSP13FDK_BITSTREAMi", "J4AC_android_media_AudioTrack__setPlaybackRate", "_ZN4CUDT14setListenStateEv", "ff_id3v1_read", "x264_filler_write", "IJK_EGL_terminate", "uriComposeQueryCharsRequiredA", "_ZN3re24Prog14DumpUnanchoredEv", "srt_epoll_update_ssock", "RAWToYRow_NEON", "av_parser_parse2", "swr_init", "x264_sps_init_reconfigurable", "av_stream_set_recommended_encoder_configuration", "J4AC_android_media_MediaFormat__MediaFormat", "av_opt_set_image_size", "Curl_add_timecondition", "_Z34FDKaacEnc_CalcBandEnergyOptimShortPKiPiS0_iS1_", "_ZN4Json12StyledWriter9pushValueERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "x264_add16x16_idct_neon", "HalfFloatRow_NEON", "ScalePlaneVertical_16", "x264_expand_border_mbpair", "ff_mov_get_channel_layout", "av_find_info_tag", "x264_pixel_sad_x3_4x8_neon", "NV12ToRGB565", "Curl_wait_ms", "nghttp2_rcbuf_get_buf", "_ZN4Json5ValueC2EPKcS2_", "_ZN9CRcvQueue17registerConnectorERKiP4CUDTiPK8sockaddrm", "BGRAToYRow_Any_NEON", "ScaleARGBCols_Any_NEON", "x264_decimate_score16_neon", "I422ToUYVYRow_C", "_Z24GetRam_aacEnc_AacEncoderi", "J4AC_java_nio_ByteBuffer__allocate", "_Z17decodeRVLCodewordP13FDK_BITSTREAMP11CErRvlcInfo", "av_bsf_alloc", "av_opt_is_set_to_default_by_name", "BGRAToUVRow_Any_NEON", "nghttp2_session_callbacks_set_pack_extension_callback", "_Z39GetRequiredMemRam_aacEnc_PsyInputBufferv", "avcodec_parameters_from_context", "av_buffer_get_opaque", "nghttp2_session_client_new3", "Curl_recvpipe_head", "av_audio_fifo_realloc", "avio_read", "x264_pixel_satd_8x8_neon", "nghttp2_stream_check_deferred_by_flow_control", "J4AC_android_media_MediaCodec__createByCodecName__withCString", "I420Mirror", "SDL_JNI_GetJvm", "YUY2ToNV12", "uv_fs_unlink", "hcryptCtx_Tx_AsmKM", "_ZN6CTimerC2Ev", "av_get_colorspace_name", "nghttp2_hd_inflate_end_headers", "ARGBColorTableRow_C", "FDKcos", "_ZN4Json12RuntimeErrorC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "Curl_http2_ver", "x264_mc_init_aarch64", "_ZN12CSndLossList6removeEi", "_ZN4CUDTC2ERKS_", "x264_macroblock_slice_init", "_ZN4Json6Reader16recoverFromErrorENS0_9TokenTypeE", "x264_quant_8x8_trellis", "FDKsqrt", "ijkmp_set_weak_thiz", "nghttp2_session_send", "pcmDmx_Open", "ff_lock_avcodec", "x264_predict_8x16c_init", "_Z21sbrdecUpdateFreqScalePhS_jP15SBR_HEADER_DATAj", "_ZN4Json5Value8CZStringC1EPKcjNS1_17DuplicationPolicyE", "_Z24GetAacDecoderChannelInfoi", "_ZN3re28Compiler7CompileEPNS_6RegexpEbl", "_Z23CAacDecoder_AncDataInitP8CAncDataPhi", "x264_mb_predict_mv_ref16x16", "Curl_cookie_add", "_ZN3re24Prog9SearchNFAERKNS_11StringPieceES3_NS0_6AnchorENS0_9MatchKindEPS1_i", "curl_global_init_mem", "Curl_protocol_connecting", "nghttp2_session_on_push_promise_received", "avio_wb64", "ScaleARGBRowDown2Linear_NEON", "ff_simple_idct_8", "_Z19FreeRam_bsOutbufferPPh", "av_opt_get_key_value", "_ZN10CSndBuffer13updAvgBufSizeEm", "_ZN5uripp9authorityC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE", "avio_write", "SDL_AMediaCodecFake_flushFakeFrames", "uv_key_delete", "_ZN9CRcvQueue6workerEPv", "_Z27GetRequiredMemOverlapBufferv", "_ZNK5uripp10ip_address6stringEv", "_ZN10CUDTUnited8setErrorEP13CUDTException", "ffp_global_uninit", "_ZN4Json6Reader12decodeDoubleERNS0_5TokenE", "Curl_thread_destroy", "ffp_global_set_inject_callback", "av_frame_set_pkt_size", "sbrDecoder_Close", "_ZN3re23RE23Arg22parse_ulonglong_cradixEPKcmPv", "_ZN4Json5Value11CommentInfoD2Ev", "_ZN5uripp3uriC1Ev", "_ZN5uripp7convertERKNSt6__ndk112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERd", "_Z28FDKsbrEnc_getSbrStartFreqRAWii", "_ZN4Json6Reader9pushErrorERKNS_5ValueERKNSt6__ndk112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE", "nghttp2_hd_huff_encode_count", "ff_h264_idct_add_12_c", "uv_fs_fchmod", "sbrEncoder_GetLibInfo", "x264_threadpool_delete", "x264_add4x4_idct_neon", "ARGB1555ToUVRow_C", "nghttp2_frame_pack_window_update", "av_parse_cpu_flags", "ffurl_open_whitelist", "ff_hevc_sao_merge_flag_decode", "av_image_alloc", "x264_macroblock_cache_load_progressive", "av_hmac_calc", "av_match_ext", "nghttp2_session_detach_idle_stream", "_ZN3re24Prog9IsOnePassEv", "ff_imdct15_init_aarch64", "x264_mc_weight_w8_nodenom_neon", "avcodec_close", "_ZNK8CChannel11getSockAddrEP8sockaddr", "_ZNK4Json17CharReaderBuilder13newCharReaderEv", "Curl_llist_count", "_Z41GetRequiredMemAacDecoderStaticChannelInfov", "_ZNK4Json5Value3endEv", "x264_plane_copy_deinterleave_neon", "av_format_get_open_cb", "_ZN3re26Regexp10ParseState12ParseCCRangeEPNS_11StringPieceEPNS_9RuneRangeERKS2_PNS_12RegexpStatusE", "_Z24FDKaacEnc_groupShortDataPiP13SFB_THRESHOLDP10SFB_ENERGYS3_S3_iiPKiS5_S_S_S_iS5_i", "_ZN5CHash6lookupEi", "_ZN4Json9OurReader10skipSpacesEv", "ff_parse_close", "x264_sei_dec_ref_pic_marking_write", "x264_intra_satd_x3_8x8c", "_ZN3re216CharClassBuilder8AddRangeEii", "ff_init_gamma_convert", "av_stereo3d_alloc", "_ZNK4Json9OurReader4goodEv", "swri_noise_shaping_float", "inject_callback", "_ZN4Json12StyledWriter14isMultineArrayERKNS_5ValueE", "srt_recvmsg2", "srt_epoll_create", "_Z15GetRam_PsEncodei", "x264_predict_8x8_ddl_neon", "uv_udp_getsockname", "x264_picture_init", "uv_os_gethostname", "nghttp2_submit_priority", "MirrorRow_C", "ARGBExtractAlphaRow_C", "uv_translate_sys_error", "Curl_mime_rewind", "uv_rwlock_init", "ff_hevc_rem_intra_luma_pred_mode_decode", "avpriv_tempfile", "ff_index_search_timestamp", "_ZN3UDT11getsocknameEiP8sockaddrPi", "Curl_init_userdefined", "av_parser_close", "Curl_ssl_addsessionid", "av_stereo3d_create_side_data", "ffp_global_init", "avcodec_get_context_defaults3", "_Z25qmfSynthesisFilteringSlotP15QMF_FILTER_BANKPKiS2_iiPsiPi", "x264_pixel_avg_8x4_neon", "av_frame_unref", "av_get_pix_fmt_string", "YUY2ToY", "inflateSyncPoint", "_Z32GetRequiredMemRam_Sbr_envYBufferv", "_ZN6google9FlagSaverC2Ev", "I422ToARGBRow_C", "x264_predict_4x4_dc_neon", "av_samples_get_buffer_size", "SDL_CreateThreadEx", "uv_sem_trywait", "_Z36GetRequiredMemRam_aacEnc_PsyInternalv", "uv_ip4_name", "nghttp2_session_add_goaway", "nghttp2_frame_goaway_free", "_Z30FDKaacEnc_getChannelAssignment12CHANNEL_MODE13CHANNEL_ORDER", "ff_id3v2_read", "ff_h264_check_intra_pred_mode", "swr_set_compensation", "av_log_format_line2", "_ZN7CPacket14MessageFlagStrEv", "curl_mime_name", "_ZN10CUDTUnited15epoll_add_ssockEiiPKi", "FDKmemcpy", "J4AC_android_media_AudioTrack__release__catchAll", "_ZNK4Json5Value8asUInt64Ev", "_ZN4CUDT13addLossRecordERNSt6__ndk16vectorIiNS0_9allocatorIiEEEEii", "ffp_set_audio_codec_info", "ff_bsf_get_packet_ref", "IJK_GLES2_getFragmentShader_yuv420p", "Curl_ssl_check_cxn", "curl_easy_duphandle", "_ZN3re29PatchList5DerefEPNS_4Prog4InstES0_", "_ZN3re24Prog6FanoutEPNS_11SparseArrayIiEE", "ff_isom_write_hvcc", "_Z28GetRequiredMemRam_SbrDecoderv", "_ZNK4Json5Value8isDoubleEv", "ScaleRowDown38_2_Box_16_C", "ff_make_absolute_url", "ffurl_read_complete", "x264_predict_16x16_p_c", "_ZN3re28CompilerD2Ev", "_ZN4Json18StyledStreamWriter23writeCommentBeforeValueERKNS_5ValueE", "RGB24ToYRow_NEON", "H422ToABGR", "J4AC_sdk_stari_ijk_player_misc_IMediaDataSource__readAt__catchAll", "x264_quant_4x4_dc_neon", "av_application_alloc", "x264_pixel_ssd_4x16_neon", "_ZNK9CSndQueue8getIpTTLEv", "_ZN4CUDT7recvmsgEiPciRm", "_ZN4Json23BuiltStyledStreamWriter15writeArrayValueERKNS_5ValueE", "nghttp2_mem_malloc", "av_cpb_properties_alloc", "Curl_now", "_ZN3re23RE23Arg17parse_uint_cradixEPKcmPv", "curlx_strtoofft", "ffp_stop_l", "ff_h264_init_poc", "_ZN10CUDTUnited11getpeernameEiP8sockaddrPi", "_Z4ifftiPiS_", "av_stream_set_r_frame_rate", "_Z25FreeRam_aacEnc_AacEncoderPP7AAC_ENC", "av_application_on_io_traffic", "uv__async_fork", "x264_pixel_var2_8x16_neon", "nghttp2_pq_empty", "I444ToARGBRow_C", "_Z27transportDec_ReadAccessUnitP12TRANSPORTDECj", "x264_pixel_sad_16x8_neon", "av_opt_get_pixel_fmt", "avformat_flush", "ff_init_ff_cos_tabs", "SobelToPlaneRow_Any_NEON", "_ZN4Json5Value9initBasicENS_9ValueTypeEb", "x264_ratecontrol_set_weights", "SDL_JNI_NewObjectAsGlobalRef", "J4AC_android_os_Bundle__putParcelableArrayList__withCString", "_Z31FDK_DRC_Generator_getDrcProfileP8DRC_COMP", "Curl_mime_read", "pcmDmx_Close", "x264_pixel_sad_x3_16x16_neon", "IJK_GLES2_getColorMatrix_bt601", "_ZN10CIPAddress4ntopEPK8sockaddrPji", "swr_alloc_set_opts", "ff_h264_execute_ref_pic_marking", "ABGRToI420", "url_feof", "_ZNK5uripp4path8encodingEv", "ff_interleaved_peek", "av_audio_fifo_free", "convert_hevc_nal_units"], "allstrings": ["sdk/stari", "/flv/JNIAudioDataHeader", "(IIIII)[B", "([B[I[I[I[I[I)I", "basic_string", "/avc/JNIByteStream", "(J)Z", "(J)I", "(J)V", "(J[BZ)V", "(J[Z)[B", "peek", "(J)[B", "(J[BZ)I", "/net/JNICares", "(Ljava/lang/Object;)I", "/avc/JNIDecoderConfigurationRecord", "getConfigurationVersion", "setConfigurationVersion", "(JI)V", "getProfileIndicator", "setProfileIndicator", "getProfileCompatibility", "setProfileCompatibility", "getLevelIndicator", "setLevelIndicator", "getLengthSize", "setLengthSize", "getSPSCount", "getPPSCount", "getSPS", "(JI)[B", "getPPS", "putSPS", "(J[B)V", "putPPS", "clearSPS", "clearPPS", "(J[B)I", "/net/JNIKaxStreamer", "java/lang/String", "getProtocols", "()[Ljava/lang/String;", "([BZZ)J", "sendAudio", "(JJ[BJI)Z", "sendVideo", "sendData", "(JJ[BJ)Z", "dispose", "estimateBitrate", "(J[I)Z", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_1NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_2NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_3NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_4NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_5NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_6NS_9allocatorIbEEEE", "ZN12_GLOBAL__N_117DEFAULT_AV_LOGGEREPviPKcSt9__va_listE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIPlayer11PcmCallbackEPviiPcilE3$_0NS_9allocatorIbEEEE", "ZN5stari9JNIPlayer11PcmCallbackEPviiPcilE3$_0", "/player/JNIPlayer", "static void stari::JNIPlayer::PcmCallback(void *, int, int, char *, int, Int64)", "\"pcm:\", len, \" bytes, extrats:\", extrats, \", player id:\", player->id_", "pcm:", " bytes, extrats:", ", player id:", "void (anonymous namespace)::DEFAULT_AV_LOGGER(void *, int, const char *, va_list)", "\"player:\", line", "player:", "([B[B)V", "getExtraTime", "(J)J", "setPcmCallback", "setPcmMuted", "(JZ)V", "NSt6__ndk114basic_iostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_istreamIcNS_11char_traitsIcEEEE", "NSt6__ndk19basic_iosIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_streambufIcNS_11char_traitsIcEEEE", "/net/JNIQos", "(IJ[I[J[J[J[J[J[J[J[J[J)V", "/avc/JNISample", "(I)J", "/net/JNIStream", "static int stari::JNIStream::CreateStream(JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean, jbyteArray, jobjectArray, jint, jobject)", "\"find class failed\"", "find class failed", "pushUrl", "streamUrl", "\"find field failed\"", "find field failed", "static int stari::JNIStream::SetHosts(JNIEnv *, jclass, jobject)", "\"find host info class failed\"", "find host info class failed", "token", "hostids", "hosturls", "static int stari::JNIStream::GetHosts(JNIEnv *, jclass, jobject)", "addStreamAccessHost", "([B)Z", "removeStreamAccessHost", "setFlagsOption", "setClientInfo", "([B[B[B[B[B[B[B[B)V", "createStream", "([B[BZ[B[Ljava/lang/String;ILjava/lang/Object;)I", "setHosts", "getHosts", "(Ljava/lang/Object;[B[B)J", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream12CreateStreamEP7_JNIEnvP7_jclassP11_jbyteArrayS9_hS9_P13_jobjectArrayiP8_jobjectE3$_0NS_9allocatorIbEEEE", "ZN5stari9JNIStream12CreateStreamEP7_JNIEnvP7_jclassP11_jbyteArrayS6_hS6_P13_jobjectArrayiP8_jobjectE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream12CreateStreamEP7_JNIEnvP7_jclassP11_jbyteArrayS9_hS9_P13_jobjectArrayiP8_jobjectE3$_1NS_9allocatorIbEEEE", "ZN5stari9JNIStream12CreateStreamEP7_JNIEnvP7_jclassP11_jbyteArrayS6_hS6_P13_jobjectArrayiP8_jobjectE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream8SetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_2NS_9allocatorIbEEEE", "ZN5stari9JNIStream8SetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream8SetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_3NS_9allocatorIbEEEE", "ZN5stari9JNIStream8SetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream8GetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_4NS_9allocatorIbEEEE", "ZN5stari9JNIStream8GetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari9JNIStream8GetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_5NS_9allocatorIbEEEE", "ZN5stari9JNIStream8GetHostsEP7_JNIEnvP7_jclassP8_jobjectE3$_5", "/player/JNIUtils", "getVersion", "()[B", "/flv/JNIVideoDataHeader", "(IIIJ)[B", "([B[I[I[I[J)I", "onConnected", "(ILjava/lang/String;)V", "stari::KaxStreamer::~KaxStreamer()", "auto stari::KaxStreamer::KaxStreamer(kax::Streamer *, jobject)::(anonymous class)::operator()(int, const std::string &) const", "\"onConnect\"", "onConnect", "auto stari::KaxStreamer::KaxStreamer(kax::Streamer *, jobject)::(anonymous class)::operator()(int, const char *) const", "\"onClose, message:\", message", "onClose, message:", "NSt6__ndk120__shared_ptr_pointerIPN3arc10SlotHandleENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc10SlotHandleEEE", "NSt6__ndk110__function6__funcIZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectE3$_0NS_9allocatorIS9_EEFviRKNS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEEEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectENK3$_0clEiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlS1_E_NSD_IbEEEE", "ZZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectENK3$_0clEiRKNSt6__ndk112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEUlPbE_", "ZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectE3$_0", "NSt6__ndk110__function6__funcIZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectE3$_1NS_9allocatorIS9_EEFviPKcEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectENK3$_1clEiPKcEUlS1_E_NS_9allocatorIbEEEE", "ZZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectENK3$_1clEiPKcEUlPbE_", "ZN5stari11KaxStreamerC1EPN3kax8StreamerEP8_jobjectE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari11KaxStreamerD1EvE3$_2NS_9allocatorIbEEEE", "ZN5stari11KaxStreamerD1EvE3$_2", "NSt6__ndk110__function6__baseIFviRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE", "NSt6__ndk110__function6__baseIFviPKcEEE", "N5stari15PlayerInterfaceE", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E0_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE0_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E1_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE1_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E2_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE2_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E3_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE3_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E4_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE4_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E5_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE5_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E6_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE6_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E7_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE7_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E8_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE8_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E9_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE9_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E10_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE10_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E11_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE11_", "NSt6__ndk120__shared_ptr_pointerIPbZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlS1_E12_NS_9allocatorIbEEEE", "ZZN5stari15PlayerInterfaceC1EP7_JNIEnvP8_jobjectENK3$_0clEPvEUlPbE12_", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari15PlayerInterface7SetDataEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN5stari15PlayerInterface7SetDataEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari15PlayerInterface7SetDataEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_IbEEEE", "ZN5stari15PlayerInterface7SetDataEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "virtual void stari::PlayerInterface::SetData(UInt32, const std::string &)", "\"data not json, data:\", data", "data not json, data:", "extrats", "switch", "\"decode failed\"", "auto stari::PlayerInterface::PlayerInterface(JNIEnv *, jobject)::(anonymous class)::operator()(void *) const", "\"FFP_MSG_FLUSH:\"", "FFP_MSG_FLUSH:", "\"FFP_MSG_ERROR: \", msg.arg1", "FFP_MSG_ERROR: ", "\"FFP_MSG_PREPARED:\"", "FFP_MSG_PREPARED:", "\"FFP_MSG_COMPLETED:\"", "FFP_MSG_COMPLETED:", "\"FFP_MSG_VIDEO_SIZE_CHANGED: \", msg.arg1, \", \", msg.arg2", "FFP_MSG_VIDEO_SIZE_CHANGED: ", "\"FFP_MSG_SAR_CHANGED: \", msg.arg1, \", \", msg.arg2", "FFP_MSG_SAR_CHANGED: ", "\"FFP_MSG_VIDEO_RENDERING_START:\"", "FFP_MSG_VIDEO_RENDERING_START:", "\"FFP_MSG_AUDIO_RENDERING_START:\"", "FFP_MSG_AUDIO_RENDERING_START:", "\"FFP_MSG_VIDEO_ROTATION_CHANGED: \", msg.arg1", "FFP_MSG_VIDEO_ROTATION_CHANGED: ", "\"FFP_MSG_BUFFERING_START:\"", "FFP_MSG_BUFFERING_START:", "\"FFP_MSG_BUFFERING_END:\"", "FFP_MSG_BUFFERING_END:", "\"FFP_MSG_SEEK_COMPLETE:\"", "FFP_MSG_SEEK_COMPLETE:", "\"FFP_MSG_SWITCH_URL:\", (char *)msg.obj", "FFP_MSG_SWITCH_URL:", "\"unknown FFP_MSG_xxx(\", msg.what, \")\"", "unknown FFP_MSG_xxx(", "allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size", "N3kax6PlayerE", "N3arc6SignalIJFvPN3kax6PlayerEEEEE", "N3arc6SignalIJFvPN3kax6PlayerEbEEEE", "N3arc6SignalIJFvPN3kax6PlayerEiiEEEE", "N3arc6SignalIJFvPN3kax6PlayerEiEEEE", "NSt6__ndk117bad_function_callE", "20190701", "1.0a.201907015470ef3", "N5stari10JavaMethodE", "libfdk_aac", "N5stari14AvAudioEncoderE", "preset", "superfast", "tune", "zerolatency", "sc_threshold", "aq-mode", "autovariance", "aq-strength", "weightp", "x264-params", "partitions=i4x4|i8x8|p8x8|p4x4:ratetol=0.1:deblock=3,3", "void stari::AvVideoEncoder::SetParameters(const char *, const char *)", "\"key:\", key, \", value:\", value", "key:", ", value:", "N5stari14AvVideoEncoderE", "NSt6__ndk120__shared_ptr_pointerIPbZN5stari14AvVideoEncoder13SetParametersEPKcS5_E3$_0NS_9allocatorIbEEEE", "ZN5stari14AvVideoEncoder13SetParametersEPKcS2_E3$_0", "sdk/stari/ijk/player/IjkMediaPlayer", "mNativeMediaPlayer", "mNativeMediaDataSource", "postEventFromNative", "(Ljava/lang/Object;IIILjava/lang/Object;)V", "onSelectCodec", "(Ljava/lang/Object;Ljava/lang/String;II)Ljava/lang/String;", "onNativeInvoke", "(Ljava/lang/Object;ILandroid/os/Bundle;)Z", "J4ALoader: OK: '%s' loaded\n", "sdk.stari.ijk.player.IjkMediaPlayer", "0.7.6", "IJKMEDIA", "%s(%p)\n", "ijkmp_set_inject_opaque", "%s()=void\n", "ijkmp_get_video_codec_info", "ijkmp_get_audio_codec_info", "%s(%f)\n", "ijkmp_set_playback_rate", "ijkmp_set_playback_volume", "%s(%d, %d)\n", "ijkmp_set_stream_selected", "%s(%d, %d)=%d\n", "ijkmp_get_meta_l", "ijkmp_shutdown_l()\n", "ijkmp_shutdown_l()=void\n", "ijkmp_dec_ref(): ref=0\n", "ijkmp_set_data_source(url=\"%s\")\n", "ijkmp_set_data_source(url=\"%s\")=%d\n", "ijkmp_prepare_async()\n", "ijkmp_prepare_async()=%d\n", "ijkmp_start()\n", "ijkmp_start()=%d\n", "ijkmp_pause()\n", "ijkmp_pause()=%d\n", "ijkmp_stop()\n", "ijkmp_stop()=%d\n", "ijkmp_seek_to(%ld)\n", "ijkmp_seek_to(%ld)=%d\n", "ijkmp_get_msg: FFP_MSG_PREPARED\n", "FFP_MSG_PREPARED: expecting mp_state==MP_STATE_ASYNC_PREPARING\n", "ijkmp_get_msg: FFP_MSG_COMPLETED\n", "ijkmp_get_msg: FFP_MSG_SEEK_COMPLETE\n", "ijkmp_get_msg: FFP_REQ_START\n", "ijkmp_get_msg: FFP_REQ_START: restart from beginning\n", "ijkmp_get_msg: FFP_REQ_START: restart from seek pos\n", "ijkmp_get_msg: FFP_REQ_START: start on fly\n", "ijkmp_get_msg: FFP_REQ_PAUSE\n", "ijkmp_get_msg: FFP_REQ_SEEK\n", "ijkmp_get_msg: FFP_REQ_SEEK: seek to %d\n", "ff_msg_loop", "FindClass::NewGlobalRef failed: %s", "_setDataSource", "(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V", "(I)V", "(Lsdk/stari/ijk/player/misc/IMediaDataSource;)V", "(Landroid/view/Surface;)V", "_pause", "isPlaying", "getCurrentPosition", "getDuration", "(FF)V", "(Ljava/lang/Object;)V", "(ILjava/lang/String;Ljava/lang/String;)V", "(ILjava/lang/String;J)V", "_getColorFormatName", "(I)Ljava/lang/String;", "()Ljava/lang/String;", "()Landroid/os/Bundle;", "_getPropertyFloat", "(IF)F", "_setPropertyFloat", "(IF)V", "_getPropertyLong", "(IJ)J", "_setPropertyLong", "(IJ)V", "_setStreamSelected", "(IZ)V", "(Ljava/lang/String;)V", "IjkMediaPlayer_setDataSourceAndHeaders", "java/lang/IllegalArgumentException", "mpjni: setDataSource: null path", "java/lang/IllegalStateException", "mpjni: setDataSource: null mp", "java/lang/OutOfMemoryError", "mpjni: setDataSource: path.string oom", "setDataSource: path %s", "sdk/stari/ijk/player/IjkMediaException", "IjkMediaPlayer_setDataSourceFd", "mpjni: setDataSourceFd: null fd", "mpjni: setDataSourceFd: null mp", "setDataSourceFd: dup(%d)=%d\n", "pipe:%d", "IjkMediaPlayer_setDataSourceCallback", "mpjni: setDataSourceCallback: null fd", "mpjni: setDataSourceCallback: null mp", "mpjni: jni_set_media_data_source: NewGlobalRef", "setDataSourceCallback: %ld\n", "ijkmediadatasource:%ld", "IjkMediaPlayer_setVideoSurface", "IjkMediaPlayer_prepareAsync", "mpjni: prepareAsync: null mp", "IjkMediaPlayer_start", "mpjni: start: null mp", "mpjni: stop: null mp", "IjkMediaPlayer_seekTo", "mpjni: seekTo: null mp", "mpjni: pause: null mp", "IjkMediaPlayer_release", "IjkMediaPlayer_reset", "IjkMediaPlayer_setVolume", "IjkMediaPlayer_getAudioSessionId", "IjkMediaPlayer_native_init", "IjkMediaPlayer_native_setup", "mpjni: native_setup: ijkmp_create() failed", "message_loop", "message_loop exit", "FFP_MSG_FLUSH:\n", "FFP_MSG_ERROR: %d\n", "FFP_MSG_PREPARED:\n", "FFP_MSG_COMPLETED:\n", "FFP_MSG_VIDEO_SIZE_CHANGED: %d, %d\n", "FFP_MSG_SAR_CHANGED: %d, %d\n", "FFP_MSG_VIDEO_RENDERING_START:\n", "FFP_MSG_AUDIO_RENDERING_START:\n", "FFP_MSG_VIDEO_ROTATION_CHANGED: %d\n", "FFP_MSG_BUFFERING_START:\n", "FFP_MSG_BUFFERING_END:\n", "FFP_MSG_SEEK_COMPLETE:\n", "unknown FFP_MSG_xxx(%d)\n", "%s: SetupThreadEnv failed\n", "%s: onSelectCodec failed\n", "IjkMediaPlayer_native_finalize", "IjkMediaPlayer_setOption", "mpjni: setOption: null mp", "mpjni: setOption: name.string oom", "IjkMediaPlayer_setOptionLong", "mpjni: setOptionLong: null mp", "mpjni: setOptionLong: name.string oom", "IjkMediaPlayer_getVideoCodecInfo", "mpjni: getVideoCodecInfo: null mp", "IjkMediaPlayer_getAudioCodecInfo", "mpjni: getAudioCodecInfo: null mp", "IjkMediaPlayer_getMediaMeta", "mpjni: getMediaMeta: null mp", "duration_us", "start_us", "timedtext", "codec_name", "codec_profile", "codec_level", "codec_long_name", "codec_pixel_format", "codec_profile_id", "fps_num", "fps_den", "tbr_num", "tbr_den", "sar_num", "sar_den", "IjkMediaPlayer_setLoopCount", "IjkMediaPlayer_getLoopCount", "failed to %s %d", "deselect", "IjkMediaPlayer_native_profileBegin", "mpjni: monstartup: libName.string oom", "monstartup: %s\n", "IjkMediaPlayer_native_profileEnd", "moncleanup\n", "%s(%d)\n", "IjkMediaPlayer_native_setLogLevel", "%s: J4AC_Bundle__Bundle__catchAll failed for case %d\n", "inject_callback", "segment_index", "retry_counter", "http_code", "family", "sdk/stari/ijk/player/ffmpeg/FFmpegApi", "av_base64_encode", "([B)Ljava/lang/String;", "zDFFPlayer", "av_version_info: %s\n", "ijk_version_info: %s\n", "ffp_destroy_ffplayer: force stream_close()", "ijkapplication", "ffp_set_overlay_format: unknown chroma fourcc: %d\n", "rtsp", "remove 'timeout' option for rtmp.\n", "%s too long url\n", "ffp_prepare_async_l", "ijklongurl:", "ijklongurl-url", "===== versions =====\n", "ijkplayer", "FFmpeg", "libavutil", "libavcodec", "libavformat", "libswscale", "libswresample", "===== options =====\n", "player-opts", "format-opts", "codec-opts ", "sws-opts   ", "swr-opts   ", "===================\n", "ffp_prepare_async_l: stream_open failed OOM", "stream_seek %ld(%d) + %ld, \n", "ffp_toggle_buffering_l: start\n", "buffering:%d, audio queue:%d, size:%d, video queue:%d, size:%d\n", "ffp_toggle_buffering_l: end\n", "%s, %s", "VideoCodec: %s\n", "AudioCodec: %s\n", "SubtitleCodec: %s\n", "Unknown rotate degress: %d\n", "invalid stream index %d >= stream number (%d)\n", "select invalid stream %d of video type %d\n", "select invalid stream %d of audio type %d\n", "SDL_CreateMutex(): %s\n", "disable audio", "disable video", "nodisp", "disable graphical display", "non spec compliant optimizations", "set number of times the playback shall be looped", "infbuf", "don't limit the input buffer size (useful with realtime streams)", "framedrop", "drop frames when cpu is too slow", "seek-at-start", "set offset of player should be seeked", "decode subtitle stream", "rdftspeed", "rdft speed, in msecs", "drop frames in video whose fps is greater than max-fps", "overlay-format", "fourcc of overlay format", "fcc-_es2", "fcc-i420", "fcc-yv12", "fcc-rv16", "fcc-rv24", "fcc-rv32", "start-on-prepared", "automatically start playing on prepared", "video-pictq-size", "max picture queue frame count", "max-buffer-size", "max buffer size should be pre-read", "audio-min-frames", "minimal frames to stop pre-reading", "video-min-frames", "first-high-water-mark-ms", "first chance to wakeup read_thread", "next-high-water-mark-ms", "second chance to wakeup read_thread", "last-high-water-mark-ms", "last chance to wakeup read_thread", "packet-buffering", "pause output until enough packets have been read after stalling", "sync-av-start", "synchronise a/v start time", "force format", "no-time-adjust", "return player's real time from the media stream instead of the adjusted time", "preset-5-1-center-mix-level", "preset center-mix-level for 5.1 channel", "videotoolbox", "VideoToolbox: enable", "videotoolbox-max-frame-width", "VideoToolbox: max width of output frame", "videotoolbox-async", "VideoToolbox: use kVTDecodeFrame_EnableAsynchronousDecompression()", "videotoolbox-wait-async", "VideoToolbox: call VTDecompressionSessionWaitForAsynchronousFrames()", "videotoolbox-handle-resolution-change", "VideoToolbox: handle resolution change automatically", "MediaCodec: enable H264 (deprecated by 'mediacodec-avc')", "mediacodec-auto-rotate", "MediaCodec: auto rotate frame depending on meta", "mediacodec-all-videos", "MediaCodec: enable all videos", "mediacodec-avc", "MediaCodec: enable H264", "mediacodec-hevc", "MediaCodec: enable HEVC", "mediacodec-mpeg2", "MediaCodec: enable MPEG2VIDEO", "mediacodec-mpeg4", "MediaCodec: enable MPEG4", "mediacodec-handle-resolution-change", "MediaCodec: handle resolution change automatically", "OpenSL ES: enable", "wait for read_tid\n", "wait for video_refresh_tid\n", "unknown option category %d\n", "%-*s: %s\n", "%-*s: %u.%u.%u\n", "%-*s: %-*s = %s\n", "SDL_CreateCond(): %s\n", "ff_vout", "ff_read", "SDL_CreateThread(): %s\n", "%7.2f %s:%7.3f fd=%4d aq=%5dKB vq=%5dKB sq=%5dB f=%ld/%ld   \r", "vfps[ffplay]", "Could not allocate context.\n", "scan_all_pmts", "Option %s not found.\n", "%s: could not find codec parameters\n", "max_frame_duration: %.3f\n", "%s: could not seek to position %0.3f\n", "multiple video stream found, prefer first h264 stream: %d\n", "Failed to open file '%s' or configure filtergraph\n", "%s: error while seeking\n", "ffp_toggle_buffering: eof\n", "ffp_toggle_buffering: error: %d\n", "ffp_toggle_buffering: completed: OK\n", "av_read_frame error: %x(%c,%c,%c,%c): %s\n", "drop packet, pkt->stream_index:%d", "rtp:", "udp:", "AVERROR(ENOMEM)", "AVERROR(EINVAL)", "AVERROR(EAGAIN)", "AVERROR(ETIMEDOUT)", "AVERROR_EOF", "AVERROR_EXIT", "buffering, audio nb_packets:%d , size:%d, duration:%lld, video nb_packets:%d, size:%d, duration:%lld\n", "Cannot initialize the conversion context\n", "Video: first frame decoded\n", "Error: the video system does not support an image\nsize of %dx%d pixels. Try using -lowres or -vf \"scale=w:h\"\nto reduce the image size.\n", "meet flush packet, q->nb_packets:%d , size:%d\n", "vdps[avcodec]", "No codec could be found with name '%s'\n", "No codec could be found with id %d\n", "The maximum value for lowres supported by the decoder is %d\n", "refcounted_frames", "ff_audio_dec", "ff_video_dec", "fps: %lf (too high)\n", "fps: %lf (normal)\n", "ff_subtitle_dec", "SDL_AUDIO_CHANNELS", "Invalid sample rate or channel count!\n", "SDL_OpenAudio (%d channels, %d Hz): %s\n", "No more combinations to try, audio open failed\n", "SDL advised audio format %d is not supported!\n", "SDL advised channel count %d is not supported!\n", "av_samples_get_buffer_size failed\n", "buffering, audio sample queue will empty", "Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz %s %d channels!\n", "center_mix_level", "av_samples_get_buffer_size() failed\n", "swr_set_compensation() failed\n", "swr_convert() failed\n", "audio buffer is probably too small\n", "avcodec/Audio: first frame decoded\n", "diff=%f adiff=%f sample_diff=%d apts=%0.3f %f\n", "SDL_JNI_GetJvm: AttachCurrentThread: NULL jvm", "%s: [%d]\n", "SDL_JNI_DetachThreadEnv", "Discarding pending exception (%s) to throw", "Unable to find exception class %s", "Failed throwing '%s' '%s'", "SDL_Android_GetApiLevel: SetupThreadEnv failed", "API-Level: %d\n", "%s: [%d] didn't call SDL_JNI_DetachThreadEnv() explicity\n", "SDL_JNI_ThreadDestroyed", "Format12bitRGB444", "Format16bitARGB4444", "Format16bitARGB1555", "Format16bitRGB565", "Format16bitBGR565", "Format18bitRGB666", "Format18bitARGB1665", "Format19bitARGB1666", "Format24bitRGB888", "Format24bitBGR888", "Format24bitARGB1887", "Format25bitARGB1888", "Format32bitBGRA8888", "Format32bitARGB8888", "FormatYUV411Planar", "FormatYUV411PackedPlanar", "FormatYUV420Planar", "FormatYUV420PackedPlanar", "FormatYUV420SemiPlanar", "FormatYUV422Planar", "FormatYUV422PackedPlanar", "FormatYUV422SemiPlanar", "FormatYCbYCr", "FormatYCrYCb", "FormatCbYCrY", "FormatCrYCbY", "FormatYUV444Interleaved", "FormatRawBayer8bit", "FormatRawBayer10bit", "FormatRawBayer8bitcompressed", "FormatL2", "FormatL4", "FormatL8", "FormatL16", "FormatL24", "FormatL32", "FormatYUV422PackedSemiPlanar", "Format18BitBGR666", "Format24BitARGB6666", "Format24BitABGR6666", "FormatSurface", "FormatYUV420Flexible", "INTEL_FormatYUV420PackedSemiPlanar", "INTEL_FormatYUV420PackedSemiPlanar_Tiled", "QCOM_FormatYVU420SemiPlanar", "QCOM_FormatYVU420PackedSemiPlanar32m4ka", "QCOM_FormatYUV420PackedSemiPlanar16m2ka", "QCOM_FormatYUV420PackedSemiPlanar64x32Tile2m8ka", "QCOM_FORMATYUV420PackedSemiPlanar32m", "QCOM_FORMATYUV420PackedSemiPlanar32mMultiView", "SEC_FormatNV12TPhysicalAddress", "SEC_FormatNV12LPhysicalAddress", "SEC_FormatNV12LVirtualAddress", "SEC_FormatNV12Tiled", "SEC_FormatNV21LPhysicalAddress", "SEC_FormatNV21Linear", "TI_FormatYUV420PackedSemiPlanar", "FormatUnknown", "pthread_getschedparam() failed", "pthread_setschedparam() failed", "SDL_RunThread: [%d] %s\n", "%s: %.2f\n", "aprof-fake", "fake-monstartup %s\n", "fake-momcleanup\n", "%s: Failed: msg: '%s'\n", "J4A_ThrowExceptionOfClass", "pending exception throwed.\n", "%s: failed\n", "J4A_ThrowException", "J4A_NewGlobalRef__catchAll", "J4A_FindClass__catchAll", "%s: failed: %s\n", "J4A_FindClass__asGlobalRef__catchAll", "%s: failed: %s %s\n", "J4A_GetMethodID__catchAll", "J4A_GetStaticMethodID__catchAll", "J4A_GetFieldID__catchAll", "J4A_GetStaticFieldID__catchAll", "android/media/AudioTrack", "<init>", "(IIIIII)V", "getMinBufferSize", "(III)I", "getMaxVolume", "getMinVolume", "getNativeOutputSampleRate", "(I)I", "([BII)I", "setStereoVolume", "(FF)I", "getPlaybackParams", "()Landroid/media/PlaybackParams;", "setPlaybackParams", "(Landroid/media/PlaybackParams;)V", "getStreamType", "getSampleRate", "getPlaybackRate", "setPlaybackRate", "android.media.AudioTrack", "android/media/MediaCodec$BufferInfo", "presentationTimeUs", "android.media.MediaCodec$BufferInfo", "J4ALoader: Ignore: '%s' need API %d\n", "android.media.MediaCodec", "android/media/MediaCodec", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "()Landroid/media/MediaFormat;", "getInputBuffers", "()[Ljava/nio/ByteBuffer;", "(IIIJI)V", "(Landroid/media/MediaCodec$BufferInfo;J)I", "android.media.MediaFormat", "android/media/MediaFormat", "(Ljava/lang/String;II)Landroid/media/MediaFormat;", "getInteger", "(Ljava/lang/String;)I", "setInteger", "(Ljava/lang/String;I)V", "setByteBuffer", "(Ljava/lang/String;Ljava/nio/ByteBuffer;)V", "android.media.PlaybackParams", "android/media/PlaybackParams", "(F)Landroid/media/PlaybackParams;", "android/os/Build$VERSION", "SDK_INT", "android.os.Build$VERSION", "android/os/Build", "android.os.Build", "android/os/Bundle", "getInt", "(Ljava/lang/String;I)I", "putInt", "getString", "(Ljava/lang/String;)Ljava/lang/String;", "putString", "(Ljava/lang/String;Ljava/lang/String;)V", "putParcelableArrayList", "(Ljava/lang/String;Ljava/util/ArrayList;)V", "getLong", "(Ljava/lang/String;)J", "putLong", "(Ljava/lang/String;J)V", "android.os.Bundle", "java/nio/Buffer", "java.nio.Buffer", "java/nio/ByteBuffer", "allocate", "(I)Ljava/nio/ByteBuffer;", "allocateDirect", "(I)Ljava/nio/Buffer;", "java.nio.ByteBuffer", "java/util/ArrayList", "(Ljava/lang/Object;)Z", "java.util.ArrayList", "sdk/stari/ijk/player/misc/IMediaDataSource", "readAt", "(J[BII)I", "getSize", "sdk.stari.ijk.player.misc.IMediaDataSource", "===== custom modules begin =====\n", "===== custom modules end =====\n", "skip     demuxer : %s (duplicated)\n", "register demuxer : %s\n", "ijklivehook", "Live Hook Controller", "LiveHook demuxer", "AVApplicationContext", "ijklivehook:", "formatprobesize", "analyzeduration", "fpsprobesize", "max_ts_probe", "livehook %s\n", "async:", "ffurl_open_whitelist failed : %s, %s\n", "pthread_mutex_init failed : %s\n", "pthread_cond_init failed : %s\n", "pthread_create failed : %s\n", "async_seek: AVSEEK_SIZE: %ld\n", "async_seek: %ld\n", "async_seek: fask_seek %ld from %d dist:%d/%d\n", "pthread_join(): %s\n", "async-forwards-capacity", "max bytes that may be read forward in background", "async-backwards-capacity", "max bytes that may be seek backward without seeking in inner protocol", "ijktcphook", "ijkhttphook", "ijktcphook:", "tcp:", "ijkinject-segment-index", "test fail point:%ld\n", "TcpHook", "ijktcphook-test-fail-point", "test fail point, in bytes", "ijkhttphook:", "ijkhttphook:https:", "http:", "%s: will reconnect at start\n", "ijkhttphook_open", "%s: did reconnect at start: %d\n", "%s %s (%s)\n", "remain", "%s: will reconnect(%d) at %ld\n", "ijkhttphook_read", "%s: did reconnect(%d) at %ld: %d\n", "%s: will reseek(%d) at pos=%ld, whence=%d\n", "ijkhttphook_seek", "%s: did reseek(%d) at pos=%ld, whence=%d: %ld\n", "HttpHook", "segment index of current url", "ijkhttphook-test-fail-point", "ijkmediadatasource", "ijkmediadatasource:", "%s: SDL_JNI_SetupThreadEnv: failed", "ijkmds_open", "ijkmds_read", "ijkmds_seek", "%s: AVSEEK_SIZE: %ld\n", "%s: %ld\n", "ijkmds_close", "IjkMediaDataSource", "ijklongurl", "LongUrl", "real url to access", "Array too big.\n", "Could not alloc buffer.\n", "Odd rotation angle.\nIf you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)", "Invalid stream specifier: %s.\n", "ijkmp_set_android_surface(surface=%p)", "ijkmp_set_android_surface(surface=%p)=void", "ijkmp_android_set_volume(%f, %f)", "ijkmp_android_set_volume(%f, %f)=void", "%s()", "ijkmp_android_get_audio_session_id", "%s()=%d", "ijkmp_android_set_mediacodec_select_callback()", "ijkmp_android_set_mediacodec_select_callback()=void", "ffpipeline_create_from_android()\n", "ffpipeline-android:create SDL_CreateMutex failed\n", "ffpipeline_get_surface_as_global_ref_l", "ffpipeline_set_vout", "%s()\n", "ffpipeline_set_surface", "ffpipeline_is_surface_need_reconfigure_l", "ffpipeline_set_surface_need_reconfigure_l", "ffpipeline_set_mediacodec_select_callback", "ffpipeline_select_mediacodec_l", "ffpipeline_set_volume", "ffpipeline_android_media", "amediacodec-pipeline:destroy: SetupThreadEnv failed\n", "%s.%s: invalid pipeline\n", "%s.%s: unsupported method\n", "NAL unit size does not match Input Metadata size", "Output buffer too small", "ffpipenode_create_video_decoder_from_android_mediacodec()\n", "%s: MediaCodec: AVC/H264 is disabled. codec_id:%d \n", "ffpipenode_create_video_decoder_from_android_mediacodec", "%s: MediaCodec: H264_BASELINE: enabled\n", "%s: MediaCodec: H264_CONSTRAINED_BASELINE: enabled\n", "%s: MediaCodec: H264_MAIN: enabled\n", "%s: MediaCodec: H264_EXTENDED: enabled\n", "%s: MediaCodec: H264_HIGH: enabled\n", "%s: MediaCodec: H264_HIGH_10: disabled\n", "%s: MediaCodec: H264_HIGH_10_INTRA: disabled\n", "%s: MediaCodec: H264_HIGH_10_422: disabled\n", "%s: MediaCodec: H264_HIGH_10_444: disabled\n", "%s: MediaCodec: H264_HIGH_444_PREDICTIVE: disabled\n", "%s: MediaCodec: H264_HIGH_444_INTRA: disabled\n", "%s: MediaCodec: H264_CAVLC_444: disabled\n", "%s: MediaCodec: (%d) unknown profile: disabled\n", "video/avc", "%s: MediaCodec/HEVC is disabled. codec_id:%d \n", "video/hevc", "%s: MediaCodec/MPEG2VIDEO is disabled. codec_id:%d \n", "video/mpeg2", "%s: MediaCodec/MPEG4 is disabled. codec_id:%d \n", "%s: divx is not supported \n", "video/mp4v-es", "%s:create: not H264 or H265/HEVC, codec_id:%d \n", "%s:create: SetupThreadEnv failed\n", "%s:open_video_decoder: SDL_CreateCond() failed\n", "amc: recreate_format_l failed\n", "amc: no suitable codec\n", "func_run_sync", "amediacodec_input_thread", "%s: SDL_CreateThreadEx failed\n", "MediaCodec: %s: exit: %d", "enqueue_thread_func", "AV_PKT_DATA_NEW_EXTRADATA: %d x %d\n", "%s: same surface, reuse previous surface\n", "feed_input_buffer", "%s: recreate aformat\n", "%s: reconfigure_codec failed\n", "%s: SDL_AMediaCodec_getInputBuffer failed\n", "drain_output_buffer_l", "AMEDIACODEC__INFO_OUTPUT_BUFFERS_CHANGED\n", "AMEDIACODEC__INFO_OUTPUT_FORMAT_CHANGED\n", "color-format", "stride", "slice-height", "crop-left", "crop-top", "crop-right", "crop-bottom", "AMEDIACODEC__INFO_OUTPUT_FORMAT_CHANGED\n    width-height: (%d x %d)\n    color-format: (%s: 0x%x)\n    stride:       (%d)\n    slice-height: (%d)\n    crop:         (%d, %d, %d, %d)\n", "vdps[MediaCodec]", "AMediaFormat: %s, %dx%d\n", "%s:sps_pps_buffer: alloc failed\n", "recreate_format_l", "%s:convert_sps_pps: failed\n", "%s:convert_hevc_nal_units: failed\n", "csd-0", "csd-0[%d]: %02x%02x%02x%02x\n", "csd-0: naked\n", "no buffer(%d)\n", "amc: rotate in decoder: %d\n", "rotation-degrees", "amc: rotate notify: %d\n", "PPS too small after processing SPS/PPS %u", "SPS is too small %u", "SPS size does not match NAL specified size %u", "Output SPS/PPS buffer too small", "%s:open_video_decoder: create_codec failed\n", "reconfigure_codec_l", "quirk: reconfigure with new codec", "%s:configure_surface: failed\n", "%s:SDL_AMediaCodec_start: failed\n", "%s:new acodec: %p\n", "OMX.TI.DUCATI1.", "using buffered output for %s", "aout_open_audio: AttachCurrentThread: failed", "aout_open_audio_n: failed to new AudioTrcak()", "aout_open_audio_n: failed to getMinBufferSize()", "aout_open_audio_n: failed to allocate buffer", "audio_session_id = %d\n", "ff_aout_android", "aout_open_audio_n: failed to create audio thread", "aout_thread: SDL_AndroidJni_SetupEnv: failed", "AudioTrack: not all data copied %d/%d", "SDL_AoutAndroid_CreateForOpenSLES", "%s: slObject->Realize() failed", "%s: slObject->GetInterface() failed", "%s: slEngine->CreateOutputMix() failed", "%s: slOutputMixObject->Realize() failed", "OpenSL-ES: native sample rate %d Hz\n", "%s: not AUDIO_S16SYS", "aout_open_audio", "%s: not 1,2 channel", "%s: unsupport freq %d Hz", "OpenSL-ES: force resample %lu to native sample rate %d\n", "%s, invalid channel %d", "%s: slEngine->CreateAudioPlayer() failed", "%s: slPlayerObject->Realize() failed", "%s: slPlayerObject->GetInterface(SL_IID_PLAY) failed", "%s: slPlayerObject->GetInterface(SL_IID_VOLUME) failed", "%s: slPlayerObject->GetInterface(SL_IID_ANDROIDSIMPLEBUFFERQUEUE) failed", "%s: slBufferQueueItf->RegisterCallback() failed", "OpenSL-ES: bytes_per_frame  = %d bytes\n", "OpenSL-ES: milli_per_buffer = %d ms\n", "OpenSL-ES: frame_per_buffer = %d frames\n", "OpenSL-ES: bytes_per_buffer = %d bytes\n", "OpenSL-ES: buffer_capacity  = %d bytes\n", "%s: failed to alloc buffer %d\n", "%s: slBufferQueueItf->Enqueue(000...) failed", "ff_aout_opensles", "%s: failed to SDL_CreateThreadEx", "%s: slBufferQueueItf->GetState() failed\n", "aout_thread_n", "slVolumeItf->SetVolumeLevel((%f, %f) -> %d)\n", "slVolumeItf->SetVolumeLevel failed %d\n", "SL_RESULT_BUFFER_INSUFFICIENT\n", "slBufferQueueItf->Enqueue() = %d\n", "aout_set_volume(%f, %f)", "%s failed\n", "aout_get_latency_seconds", "%s(): ref=%d\n", "SDL_AMediaCodec_increaseReference", "SDL_AMediaCodec_decreaseReference", "SDL_AMediaCodecDummy_create", "AMediaCodecDummy", "%s: SetupThreadEnv failed", "SDL_AMediaCodecJava_getOutputFormat", "SDL_AMediaCodecJava_dequeueInputBuffer", "%s: dequeueInputBuffer failed", "SDL_AMediaCodecJava_queueInputBuffer: SetupThreadEnv failed", "SDL_AMediaCodecJava_dequeueOutputBuffer", "%s: Exception\n", "%s: INFO_OUTPUT_BUFFERS_CHANGED\n", "%s: INFO_OUTPUT_FORMAT_CHANGED\n", "%s(%d, %s): SetupThreadEnv failed", "SDL_AMediaCodecJava_releaseOutputBuffer", "false", "%s: releaseOutputBuffer\n", "SDL_AMediaCodecJava_createByCodecName", "SDL_AMediaCodecJava_init", "AMediaCodecJava", "SDL_AMediaCodecJava_delete", "SDL_AMediaCodecJava_delete: SetupThreadEnv failed", "SDL_AMediaCodecJava_configure_surface", "configure acodec:%p format:%p: surface:%p", "SDL_AMediaCodecJava_start", "%s: start failed", "SDL_AMediaCodecJava_stop", "%s: stop", "SDL_AMediaCodecJava_flush", "%s: flush", "SDL_AMediaCodecJava_writeInputData", "%s: idx(%d) < count(%d)\n", "%s: GetObjectArrayElement failed\n", "SDL_AMediaFormatJava_init", "SDL_AMediaFormatJava_createVideoFormat", "max-input-size", "SDL_AMediaFormatJava_delete", "SDL_AMediaFormatJava_getInt32", "%s: getAndroidMediaFormat: failed", "%s: CallIntMethod: failed", "SDL_AMediaFormatJava_setInt32", "%s: CallVoidMethod: failed", "SDL_AMediaFormatJava_setBuffer", "%s: call jmid_setByteBuffer: failed", "ANativeWindow_Vout", "func_display_overlay_l: NULL native_window", "func_display_overlay_l: NULL overlay", "func_display_overlay_l: invalid overlay dimensions(%d, %d)", "%s: [%d] ???????? proxy %d: vout: %d idx: %d render: %s fake: %s", "SDL_VoutAndroid_releaseBufferProxy_l", "%s: [%d] invalid AMediaCodec buffer index %d\n", "%s: [%d] !!!!!!!! proxy %d: vout: %d idx: %d render: %s, fake: %s", "%s: ANativeWindow_fromSurface: failed\n", "SDL_VoutAndroid_SetAndroidSurface", "SDL_VoutAMediaCodec_CreateOverlay(w=%d, h=%d, fmt=_AMC vout=%p)\n", "overlay allocation failed", "SDL_CreateMutex failed", "SDL_VoutOverlayAMediaCodec_isKindOf", "SDL_VoutOverlayAMediaCodec_releaseFrame_l", "AndroidMediaCodecVoutOverlay", "func_fill_frame", "SDL_VoutFFmpeg_CreateOverlay(w=%d, h=%d, fmt=%.4s(0x%x, dp=%p)\n", "SDL_VoutFFmpeg_CreateOverlay(...): unknown format %.4s(0x%x)\n", "overlay->opaque->frame allocation failed\n", "FFmpegVoutOverlay", "SDL_Overlay(ffmpeg): overlay_free_l(%p)\n", "SDL_VoutFFmpeg_ConvertPicture: unexpected overlay format %s(%d)", "OOM in opaque_obtain_managed_frame_buffer", "sws_getCachedContext failed", "non-neon image convert %s -> %s", "[EGL] elgMakeCurrent() failed (cached)\n", "[EGL] eglGetDisplay failed\n", "[EGL] eglInitialize failed\n", "[EGL] eglInitialize %d.%d\n", "[EGL] eglChooseConfig failed\n", "[EGL] eglGetConfigAttrib() returned error %d", "[EGL] ANativeWindow_setBuffersGeometry(f=%d);", "[EGL] ANativeWindow_setBuffersGeometry(format) returned error %d", "[EGL] eglCreateWindowSurface failed\n", "[EGL] eglCreateContext failed\n", "[EGL] elgMakeCurrent() failed (new)\n", "[EGL] IJK_EGL_prepareRenderer failed\n", "[EGL] IJK_GLES2_render failed\n", "[EGL] Could not create render.", "[EGL] Could not use render.", "[EGL] IJK_EGL_setSurfaceSize(%d, %d) failed\n", "glViewport", "ANativeWindow_setBuffersGeometry(w=%d,h=%d) -> (w=%d,h=%d);", "[EGL] ANativeWindow_setBuffersGeometry() returned error %d", "[EGL] eglQuerySurface(EGL_WIDTH) returned error %d", "[EGL] eglQuerySurface(EGL_HEIGHT) returned error %d", "ijksegment", "ijksegment:", "Inject", "audiotrack_get_native_output_sample_rate", "SDL_Android_AudioTrack: %s", "CHANNEL_OUT_MONO", "CHANNEL_OUT_STEREO", "%s: invalid channel %d", "SDL_Android_AudioTrack_new_from_spec", "ENCODING_PCM_16BIT", "ENCODING_PCM_8BIT", "%s: invalid format %d", "%s: invalid sample rate %d", "%s: mallocz faild.\n", "%s: J4AC_AudioTrack__getMinBufferSize: return %d:", "%s: init volume as %f/(%f,%f)", "%s failed %d < %d\n", "SDL_Android_AudioTrack_write", "2-chan", "1-chan", "AUDIO_U8", "AUDIO_F32", "ENCODING_PCM_FLOAT", "SDL_Android_NativeWindow_display_l: NULL overlay", "SDL_Android_NativeWindow_display_l: invalid overlay dimensions(%d, %d)", "SDL_Android_NativeWindow_display_l: unknown overlay format: %d", "ANativeWindow_setBuffersGeometry: w=%d, h=%d, f=%.4s(0x%x) => w=%d, h=%d, f=%.4s(0x%x)", "SDL_Android_NativeWindow_display_l: ANativeWindow_setBuffersGeometry: failed %d", "SDL_Android_NativeWindow_display_l: unknown hal format %d", "SDL_Android_NativeWindow_display_l: ANativeWindow_lock: failed %d", "unexpected native window buffer (%p)(w:%d, h:%d, fmt:'%.4s'0x%x), expecting (w:%d, h:%d, fmt:'%.4s'0x%x)", "SDL_Android_NativeWindow_display_l: ANativeWindow_unlockAndPost: failed %d", "HAL_YV12", "HAL_RGB_565", "RV16", "HAL_RGBX_8888", "HAL_RGBA_8888", "HAL_BGRA_8888", "RV32", "[GLES2] after %s() glError (0x%x)\n", "[GLES2] %s = %s\n", "glAttachShader(vertex)", "glAttachShader(fragment)", "glLinkProgram", "av4_Position", "glGetAttribLocation(av4_Position)", "av2_Texcoord", "glGetAttribLocation(av2_Texcoord)", "um4_ModelViewProjection", "glGetUniformLocation(um4_ModelViewProjection)", "Vendor", "Renderer", "[GLES2] unknown format %4s(%d)\n", "glClearColor", "glEnable(GL_CULL_FACE)", "glCullFace", "glUniformMatrix4fv(um4_mvp)", "glClear", "glDrawArrays", "[GLES2][Program] empty info\n", "[GLES2][Program] error %s\n", "glVertexAttribPointer(av2_texcoord)", "glEnableVertexAttribArray(av2_texcoord)", "[GLES2] unknown gravity %d\n", "[GLES2] invalid width/height for gravity aspect\n", "IJK_GLES2_Renderer_TexCoords_cropRight\n", "us2_SamplerX", "glGetUniformLocation(us2_SamplerX)", "create render rgb888\n", "create render rgbx8888\n", "use render rgb\n", "glUseProgram", "[rgb565] unexpected format %x\n", "[rgb888] unexpected format %x\n", "[rgbx8888] unexpected format %x\n", "create render yuv420p\n", "us2_SamplerY", "glGetUniformLocation(us2_SamplerY)", "us2_SamplerZ", "glGetUniformLocation(us2_SamplerZ)", "um3_ColorConversion", "glGetUniformLocation(um3_ColorConversionMatrix)", "use render yuv420p\n", "[yuv420p] unexpected format %x\n", "create render yuv444p10le\n", "use render yuv420p10le\n", "[yuv420p10le] unexpected format %x\n", "glBindTexture", "glTexImage2D", "glCreateShader", "glShaderSource", "glCompileShader", "[GLES2][Shader] empty info\n", "[GLES2][Shader] error %s\n", "precision highp float; varying highp vec2 vv2_Texcoord; attribute highp vec4 av4_Position; attribute highp vec2 av2_Texcoord; uniform mat4 um4_ModelViewProjection; void main() { gl_Position = um4_ModelViewProjection * av4_Position; vv2_Texcoord = av2_Texcoord.xy; }", "%s %f", "J4AC_android_media_AudioTrack__setSpeed", "J4AC_android_media_AudioTrack__setSpeed__catchAll", "precision highp float; varying highp vec2 vv2_Texcoord; uniform lowp sampler2D us2_SamplerX; void main() { gl_FragColor = vec4(texture2D(us2_SamplerX, vv2_Texcoord).rgb, 1); }", "precision highp float; varying highp vec2 vv2_Texcoord; uniform mat3 um3_ColorConversion; uniform lowp sampler2D us2_SamplerX; uniform lowp sampler2D us2_SamplerY; uniform lowp sampler2D us2_SamplerZ; void main() { mediump vec3 yuv; lowp vec3 rgb; yuv.x = (texture2D(us2_SamplerX, vv2_Texcoord).r - (16.0 / 255.0)); yuv.y = (texture2D(us2_SamplerY, vv2_Texcoord).r - 0.5); yuv.z = (texture2D(us2_SamplerZ, vv2_Texcoord).r - 0.5); rgb = um3_ColorConversion * yuv; gl_FragColor = vec4(rgb, 1); }", "precision highp float; varying highp vec2 vv2_Texcoord; uniform mat3 um3_ColorConversion; uniform lowp sampler2D us2_SamplerX; uniform lowp sampler2D us2_SamplerY; uniform lowp sampler2D us2_SamplerZ; void main() { mediump vec3 yuv_l; mediump vec3 yuv_h; mediump vec3 yuv; lowp vec3 rgb; yuv_l.x = texture2D(us2_SamplerX, vv2_Texcoord).r; yuv_h.x = texture2D(us2_SamplerX, vv2_Texcoord).a; yuv_l.y = texture2D(us2_SamplerY, vv2_Texcoord).r; yuv_h.y = texture2D(us2_SamplerY, vv2_Texcoord).a; yuv_l.z = texture2D(us2_SamplerZ, vv2_Texcoord).r; yuv_h.z = texture2D(us2_SamplerZ, vv2_Texcoord).a; yuv = (yuv_l * 255.0 + yuv_h * 255.0 * 256.0) / (1023.0) - vec3(16.0 / 255.0, 0.5, 0.5); rgb = um3_ColorConversion * yuv; gl_FragColor = vec4(rgb, 1); }", " neon", " asimd", " msa", "ASEs implemented", "LIBYUV_DISABLE_NEON", "LIBYUV_DISABLE_ASM", "IYUVI420YU12I420YU16I422YU24I444YUYVYUY2yuvsYUY2HDYCUYVY2vuyUYVYJPEGMJPGdmb1MJPGBA81BGGRRGB3raw BGR324BG", " BGRA", ".flv", "static bool kax::Export::AddStreamAccessHost(const std::string &)", "\"uri parse failed, host:\", host", "uri parse failed, host:", "static bool kax::Export::RemoveStreamAccessHost(const std::string &)", "static bool kax::Export::ReportPlayUrl(const std::string &, const std::string &, kax::Player *)", "\"uri parse failed, url:\", url", "uri parse failed, url:", "NSt6__ndk110__function6__funcIZN3kax6Export14CreateStreamerERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbE3$_0NS7_ISC_EEFvvEEE", "ZN3kax6Export14CreateStreamerERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbbE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax6Export19AddStreamAccessHostERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN3kax6Export19AddStreamAccessHostERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax6Export22RemoveStreamAccessHostERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_IbEEEE", "ZN3kax6Export22RemoveStreamAccessHostERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax6Export13ReportPlayUrlERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_PNS2_6PlayerEE3$_3NS7_IbEEEE", "ZN3kax6Export13ReportPlayUrlERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_PNS_6PlayerEE3$_3", "NSt6__ndk110__function6__baseIFvvEEE", "fff?kax_buffering_timeout", "GFLAGS_NAMESPACE::int32", "Timeout to init buffering", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/playerdelegate.cpp", "kax_speed_change", "bool", "enable player speed change", "void kax::PlayerDelegate::OnRendering(kax::Player *, bool)", "\"rendering:\", duration_cast<milliseconds>(renderTime_ - openTime_).count(), \"ms\"", "rendering:", "void kax::PlayerDelegate::OnCompletion(kax::Player *)", "void kax::PlayerDelegate::OnBuffering(kax::Player *, bool)", "\"buffering:\", start", "buffering:", "void kax::PlayerDelegate::OnBufferingTime(kax::Player *, int)", "\"duration:\", duration", "void kax::PlayerDelegate::OnError(kax::Player *, int)", "\"what:\", what", "what:", "void kax::PlayerDelegate::OnClose(kax::Player *)", "void kax::PlayerDelegate::Dump()", "\"buffering: \", 100.0 * bufferDuration_.count() / duration.count(), \"%\"", "buffering: ", "N3kax14PlayerDelegateE", "NSt6__ndk110__function6__funcIZN3kax14PlayerDelegateC1EPNS2_6PlayerEE3$_0NS_9allocatorIS6_EEFvvEEE", "ZN3kax14PlayerDelegateC1EPNS_6PlayerEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate11OnRenderingEPNS2_6PlayerEbE3$_1NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate11OnRenderingEPNS_6PlayerEbE3$_1", "NSt6__ndk110__function6__funcIZN3kax14PlayerDelegate11OnRenderingEPNS2_6PlayerEbE3$_2NS_9allocatorIS6_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax14PlayerDelegate11OnRenderingEPNS2_6PlayerEbENK3$_2clEvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZZN3kax14PlayerDelegate11OnRenderingEPNS_6PlayerEbENK3$_2clEvEUlvE_", "ZN3kax14PlayerDelegate11OnRenderingEPNS_6PlayerEbE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate12OnCompletionEPNS2_6PlayerEE3$_3NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate12OnCompletionEPNS_6PlayerEE3$_3", "NSt6__ndk110__function6__funcIZN3kax14PlayerDelegate12OnCompletionEPNS2_6PlayerEE3$_4NS_9allocatorIS6_EEFvvEEE", "ZN3kax14PlayerDelegate12OnCompletionEPNS_6PlayerEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate11OnBufferingEPNS2_6PlayerEbE3$_5NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate11OnBufferingEPNS_6PlayerEbE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate15OnBufferingTimeEPNS2_6PlayerEiE3$_6NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate15OnBufferingTimeEPNS_6PlayerEiE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate7OnErrorEPNS2_6PlayerEiE3$_7NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate7OnErrorEPNS_6PlayerEiE3$_7", "NSt6__ndk110__function6__funcIZN3kax14PlayerDelegate7OnErrorEPNS2_6PlayerEiE3$_8NS_9allocatorIS6_EEFvvEEE", "ZN3kax14PlayerDelegate7OnErrorEPNS_6PlayerEiE3$_8", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate7OnCloseEPNS2_6PlayerEE3$_9NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate7OnCloseEPNS_6PlayerEE3$_9", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlayerDelegate4DumpEvE4$_10NS_9allocatorIbEEEE", "ZN3kax14PlayerDelegate4DumpEvE4$_10", "N3kix11ExitWatcherIN3kax14PlayerDelegateEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax14PlayerDelegateEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax14PlayerDelegateEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEbEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiiEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_iiEEUlS6_iiE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEiiEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEiiEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_iiEEUlS3_iiE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_iEEUlS6_iE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEiEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_iEEUlS3_iE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14PlayerDelegateEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14PlayerDelegateEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax14PlayerDelegateEFvvEEE", "NSt6__ndk114unary_functionIPN3kax14PlayerDelegateEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kix5TimerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix5TimerEEE", "N3kax13PlayerManagerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax14PlayerDelegateENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14PlayerDelegateEEE", "skax", "ssrt", "N3kax12_GLOBAL__N_17DerivedINS_10MeProtocolEEE", "N3kax12_GLOBAL__N_17DerivedINS_11KaxProtocolEEE", "RemoteLogger", "Whether to enable remote logging.", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/remotelogger.cpp", "http://log.disigma.org:8848/probe", "RemoteLoggerProbe", "Remote log probe address.", "StderrLogger", "Whether to output logs to stderr.", "N3kax12RemoteLoggerE", "NSt6__ndk110__function6__funcIZN3kax12RemoteLogger7PrinterEmhNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_S9_E3$_2NS7_ISA_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax12RemoteLogger7PrinterEmhNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_S9_ENK3$_2clEvEUlPKciE_NS7_ISD_EEFvSC_iEEE", "ZZN3kax12RemoteLogger7PrinterEmhNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_ENK3$_2clEvEUlPKciE_", "NSt6__ndk110__function6__funcIZZN3kax12RemoteLogger7PrinterEmhNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_S9_ENK3$_2clEvEUlPKciE0_NS7_ISD_EEFvSC_iEEE", "ZZN3kax12RemoteLogger7PrinterEmhNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_ENK3$_2clEvEUlPKciE0_", "ZN3kax12RemoteLogger7PrinterEmhNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_E3$_2", "NSt6__ndk110__function6__funcIZN3kax12RemoteLogger7PrinterEmhNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_S9_E3$_3NS7_ISA_EEFvvEEE", "ZN3kax12RemoteLogger7PrinterEmhNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_E3$_3", "NSt6__ndk110__function6__funcIZN3kax12RemoteLogger2GoEvE3$_4NS_9allocatorIS4_EEFvPciRiEEE", "ZN3kax12RemoteLogger2GoEvE3$_4", "NSt6__ndk110__function6__funcIZN3kax12RemoteLogger2GoEvE3$_5NS_9allocatorIS4_EEFvPKciEEE", "ZN3kax12RemoteLogger2GoEvE3$_5", "N3kix11ExitWatcherIN3kax12RemoteLoggerEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12RemoteLoggerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12RemoteLoggerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12RemoteLoggerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12RemoteLoggerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12RemoteLoggerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12RemoteLoggerEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11HttpRequestENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11HttpRequestEEE", "NSt6__ndk110__function6__baseIFvPKciEEE", "NSt6__ndk110__function6__baseIFvPciRiEEE", "kax_report_retry_interval", "default retry interval for getting report url", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/reportprotocol.cpp", "N3kax14ReportProtocolE", "NSt6__ndk110__function6__funcIZN3kax14ReportProtocolC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_PNS2_6PlayerEE3$_0NS7_ISE_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax14ReportProtocolC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_PNS2_6PlayerEENK3$_0clEvEUlvE_NS7_ISF_EEFvvEEE", "ZZN3kax14ReportProtocolC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_PNS_6PlayerEENK3$_0clEvEUlvE_", "ZN3kax14ReportProtocolC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_PNS_6PlayerEE3$_0", "NSt6__ndk110__function6__funcIZN3kax14ReportProtocolD1EvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kax14ReportProtocolD1EvE3$_1", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_14ReportProtocolEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_14ReportProtocolEEERS5_PT_MS9_FvS3_EEUlS3_E_", "int kax::StreamAccessorManager::CreateStream(const std::string &, const std::string &, bool, const std::string &, const std::vector<std::string> &, UInt32, std::string &, std::string &, std::string &)", "\"unknown host:\", host", "unknown host:", "std::string kax::StreamAccessorManager::Play(const std::string &, const std::string &, const std::function<bool ()> &)", "std::string kax::StreamAccessorManager::GetReportUrl(const std::string &)", "auto kax::StreamAccessorManager::SetStreamHosts(std::string, std::string, std::map<std::string, std::string>)::(anonymous class)::operator()() const", "\"client info change, ignore hosts cache\"", "client info change, ignore hosts cache", "auto kax::StreamAccessorManager::GetStreamHosts(std::string &, std::string &, std::map<std::string, std::string> &)::(anonymous class)::operator()() const", "\"client is null\"", "client is null", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManagerD1EvE3$_0NS_9allocatorIS4_EEFvvEEE", "ZN3kax21StreamAccessorManagerD1EvE3$_0", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManager13AddAccessHostENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_ISA_EEFvvEEE", "ZN3kax21StreamAccessorManager13AddAccessHostENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManager16RemoveAccessHostENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_ISA_EEFvvEEE", "ZN3kax21StreamAccessorManager16RemoveAccessHostENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManager13SetClientInfoERKNS2_10ClientInfoEE3$_3NS_9allocatorIS7_EEFvvEEE", "ZN3kax21StreamAccessorManager13SetClientInfoERKNS_10ClientInfoEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax21StreamAccessorManager12CreateStreamERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_bSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_4NS7_IbEEEE", "ZN3kax21StreamAccessorManager12CreateStreamERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_bS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax21StreamAccessorManager4PlayERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_RKNS_8functionIFbvEEEE3$_5NS7_IbEEEE", "ZN3kax21StreamAccessorManager4PlayERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_8functionIFbvEEEE3$_5", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManager14SetStreamHostsENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_3mapIS9_S9_NS_4lessIS9_EENS7_INS_4pairIKS9_S9_EEEEEEE3$_6NS7_ISI_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax21StreamAccessorManager14SetStreamHostsENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_3mapIS9_S9_NS_4lessIS9_EENS7_INS_4pairIKS9_S9_EEEEEEENK3$_6clEvEUlS1_E_NS7_IbEEEE", "ZZN3kax21StreamAccessorManager14SetStreamHostsENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIKS7_S7_EEEEEEENK3$_6clEvEUlPbE_", "ZN3kax21StreamAccessorManager14SetStreamHostsENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIKS7_S7_EEEEEEE3$_6", "NSt6__ndk110__function6__funcIZN3kax21StreamAccessorManager14GetStreamHostsERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESA_RNS_3mapIS9_S9_NS_4lessIS9_EENS7_INS_4pairIKS9_S9_EEEEEEE3$_7NS7_ISK_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax21StreamAccessorManager14GetStreamHostsERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESA_RNS_3mapIS9_S9_NS_4lessIS9_EENS7_INS_4pairIKS9_S9_EEEEEEENK3$_7clEvEUlS1_E_NS7_IbEEEE", "ZZN3kax21StreamAccessorManager14GetStreamHostsERNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_RNS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIKS7_S7_EEEEEEENK3$_7clEvEUlPbE_", "ZN3kax21StreamAccessorManager14GetStreamHostsERNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_RNS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIKS7_S7_EEEEEEE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax21StreamAccessorManager12GetReportUrlERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_8NS7_IbEEEE", "ZN3kax21StreamAccessorManager12GetReportUrlERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_8", "NSt6__ndk120__shared_ptr_pointerIPN3kax14StreamAccessorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14StreamAccessorEEE", "NSt6__ndk120__shared_ptr_emplaceIN3kax10ClientInfoENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax10ClientInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax10ClientInfoEEE", "StreamProtocols", "Override the default stream protocol list when not empty.", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/streamer.cpp", "srtmp", "NSt6__ndk119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "kax_region", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/utils.cpp", "kversion", "sversion", "reachability", "1.0.201907015470ef3", "playing event report interval", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/baseprotocol.cpp", "kax_latency_report_interval", "play latency event report interval", "void kax::BaseProtocol::ReportTo(std::string, std::string)", "\"player not register\"", "player not register", "playid", "kartun", "buffertime", "watchtime", "connecttime", "video_render", "audio_render", "playing", "user exit", "container size overflow", "auto kax::BaseProtocol::ReportTo(std::string, std::string)::(anonymous class)::operator()(int) const", "\"time synchronize fail, reason:\", reason", "time synchronize fail, reason:", "complete", "event", "rendering", "N3kax12BaseProtocolE", "NSt6__ndk120__shared_ptr_pointerIPN3kax6PlayerEZNS1_12BaseProtocolC1ES3_bE3$_0NS_9allocatorIS2_EEEE", "ZN3kax12BaseProtocolC1EPNS_6PlayerEbE3$_0", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocolD1EvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kax12BaseProtocolD1EvE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax12BaseProtocol8ReportToENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_E3$_2NS7_IbEEEE", "ZN3kax12BaseProtocol8ReportToENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_E3$_2", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol8ReportToENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_E3$_3NS7_ISA_EEFvNS_6chrono8durationIxNS_5ratioILl1ELl1000000EEEEESG_EEE", "ZN3kax12BaseProtocol8ReportToENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_E3$_3", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol8ReportToENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_E3$_4NS7_ISA_EEFviEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax12BaseProtocol8ReportToENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_ENK3$_4clEiEUlS1_E_NS7_IbEEEE", "ZZN3kax12BaseProtocol8ReportToENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_ENK3$_4clEiEUlPbE_", "ZN3kax12BaseProtocol8ReportToENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_E3$_4", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol11OnRenderingEPNS2_6PlayerEbE3$_5NS_9allocatorIS6_EEFvvEEE", "ZN3kax12BaseProtocol11OnRenderingEPNS_6PlayerEbE3$_5", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol11OnBufferingEPNS2_6PlayerEbE3$_6NS_9allocatorIS6_EEFvvEEE", "ZN3kax12BaseProtocol11OnBufferingEPNS_6PlayerEbE3$_6", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol12OnCompletionEPNS2_6PlayerEE3$_7NS_9allocatorIS6_EEFvvEEE", "ZN3kax12BaseProtocol12OnCompletionEPNS_6PlayerEE3$_7", "NSt6__ndk110__function6__funcIZN3kax12BaseProtocol7OnErrorEPNS2_6PlayerEiE3$_8NS_9allocatorIS6_EEFvvEEE", "ZN3kax12BaseProtocol7OnErrorEPNS_6PlayerEiE3$_8", "N3kax8ProtocolE", "N3kix11ExitWatcherIN3kax12BaseProtocolEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12BaseProtocolEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12BaseProtocolEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_iEEUlS6_iE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_iEEUlS3_iE_", "NSt6__ndk120__shared_ptr_pointerIPN7msgpack2v14zoneENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN7msgpack2v14zoneEEE", "N7msgpack2v123container_size_overflowE", "NSt6__ndk110__function6__baseIFvNS_6chrono8durationIxNS_5ratioILl1ELl1000000EEEEES6_EEE", "NSt6__ndk110__function6__baseIFviEEE", "N7msgpack2v110type_errorE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12BaseProtocolEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12BaseProtocolEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12BaseProtocolEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12BaseProtocolEvEE", "kax_segment_divide_interval", "Segment divide interval", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/externalstreamer.cpp", "virtual void kax::ExternalStreamer::SendVideo(UInt32, const std::string &, UInt32, Int32)", "\"video header decode failed\"", "video header decode failed", "\"force segment, drop video inter frame\"", "force segment, drop video inter frame", "N3kax16ExternalStreamerE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax16ExternalStreamer9SendVideoEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjiE3$_0NS7_IbEEEE", "ZN3kax16ExternalStreamer9SendVideoEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjiE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax16ExternalStreamer9SendVideoEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjiE3$_1NS7_IbEEEE", "ZN3kax16ExternalStreamer9SendVideoEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjiE3$_1", "N3kax8StreamerE", "N3arc6SignalIJFviRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEE", "N3arc6SignalIJFviPKcEEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE4BindIN3kax16ExternalStreamerEEERSD_PT_MSI_FviSB_EEUliSB_E_NS7_ISM_EESC_EE", "ZN3arc4SlotIJFviRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE4BindIN3kax16ExternalStreamerEEERSB_PT_MSG_FviS9_EEUliS9_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax16ExternalStreamerEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax16ExternalStreamerEEERS4_PT_MS9_FviS2_EEUliS2_E_", "N3kax11HttpRequestE", "kax_preload_requests", "Max concurrent preload request", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/kaxpreloader.cpp", "kax_preload_sessions", "Max saved preload session", "void kax::KaxPreloader::GetSpecific(const std::string &)", "\"wait to session:\", url", "wait to session:", "void kax::KaxPreloader::StartSession(const std::string &)", "\"erase session:\", iterator->first", "erase session:", "\"session:\", url", "N3kax12KaxPreloaderE", "NSt6__ndk110__function6__funcIZN3kax12KaxPreloader3AddENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_E3$_0NS7_ISA_EEFvvEEE", "ZN3kax12KaxPreloader3AddENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_E3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax12KaxPreloader11GetSpecificERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN3kax12KaxPreloader11GetSpecificERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax12KaxPreloader12StartSessionERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_IbEEEE", "ZN3kax12KaxPreloader12StartSessionERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax12KaxPreloader12StartSessionERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_3NS7_IbEEEE", "ZN3kax12KaxPreloader12StartSessionERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_3", "N3kax9PreloaderE", "Kax-Action: *PRELOAD", "void kax::KaxPreloadSession::OnBody(const char *, int)", "\"no sequence header, url:\", url_", "no sequence header, url:", "void kax::KaxPreloadSession::OnTag(const flv::Tag &)", "\"audio decode failed, url:\", url_", "audio decode failed, url:", "\"video decode failed, url:\", url_", "video decode failed, url:", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax17KaxPreloadSessionEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax17KaxPreloadSessionEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "NSt6__ndk111__end_stateIcEE", "NSt6__ndk16__nodeIcEE", "NSt6__ndk120__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteINS_13__empty_stateIcEEEE", "NSt6__ndk113__empty_stateIcEE", "NSt6__ndk116__owns_one_stateIcEE", "NSt6__ndk115__has_one_stateIcEE", "NSt6__ndk110__l_anchorIcEE", "NSt6__ndk110__r_anchorIcEE", "NSt6__ndk115__word_boundaryIcNS_12regex_traitsIcEEEE", "NSt6__ndk111__lookaheadIcNS_12regex_traitsIcEEEE", "NSt6__ndk123__match_any_but_newlineIcEE", "NSt6__ndk118__match_char_icaseIcNS_12regex_traitsIcEEEE", "NSt6__ndk120__match_char_collateIcNS_12regex_traitsIcEEEE", "NSt6__ndk112__match_charIcEE", "NSt6__ndk116__back_ref_icaseIcNS_12regex_traitsIcEEEE", "NSt6__ndk118__back_ref_collateIcNS_12regex_traitsIcEEEE", "NSt6__ndk110__back_refIcEE", "NSt6__ndk120__bracket_expressionIcNS_12regex_traitsIcEEEE", "NSt6__ndk128__begin_marked_subexpressionIcEE", "NSt6__ndk126__end_marked_subexpressionIcEE", "NSt6__ndk16__loopIcEE", "NSt6__ndk117__owns_two_statesIcEE", "NSt6__ndk117__repeat_one_loopIcEE", "NSt6__ndk111__alternateIcEE", "NSt6__ndk121__empty_non_own_stateIcEE", "NSt6__ndk111__match_anyIcEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax17KaxPreloadSession6OnBodyEPKciE3$_0NS_9allocatorIbEEEE", "ZN3kax17KaxPreloadSession6OnBodyEPKciE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax17KaxPreloadSession5OnTagERKN3flv3TagEE3$_1NS_9allocatorIbEEEE", "ZN3kax17KaxPreloadSession5OnTagERKN3flv3TagEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax17KaxPreloadSession5OnTagERKN3flv3TagEE3$_2NS_9allocatorIbEEEE", "ZN3kax17KaxPreloadSession5OnTagERKN3flv3TagEE3$_2", "Min cached buffer time", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/kaxprotocol.cpp", "kax_max_buffer_time", "Max cached buffer time", "kax_max_buffer_bytes", "Max buffered bytes", "kax_retry_timeout", "Play retry timeout", "me_accesstime", "void kax::KaxProtocol::OnTag(flv::Tag &)", "\"drop video frame timestamp:\", tag.GetTagHeader().GetTimestamp(), \", maxVideoTime:\", (UInt32)maxVideoTime_, \", size:\", tag.GetData().size()", "drop video frame timestamp:", ", maxVideoTime:", ", size:", "\"decode video failed\"", "decode video failed", "\"drop audio frame timestamp:\", tag.GetTagHeader().GetTimestamp(), \", maxAudioTime:\", (UInt32)maxAudioTime_, \", size:\", tag.GetData().size()", "drop audio frame timestamp:", ", maxAudioTime:", "\"decode audio failed\"", "decode audio failed", "\"skip flv tag type:\", tag.GetTagHeader().GetTagType()", "skip flv tag type:", "\"pause, audio buffer time: \", maxAudioTime_ - minAudioTime_, \" ms\", \", cachedBytes_: \", cachedBytes_/1024, \" KB\"", "pause, audio buffer time: ", ", cachedBytes_: ", "\"pause, video buffer time: \", maxVideoTime_ - minVideoTime_, \" ms\"", "pause, video buffer time: ", "void kax::KaxProtocol::OnClose(int, const char *)", "auto kax::KaxProtocol::Open(URLContext *, const char *, int)::(anonymous class)::operator()() const", "\"report url:\", report", "report url:", "N3kax11KaxProtocolE", "NSt6__ndk110__function6__funcIZN3kax11KaxProtocolC1EvE3$_0NS_9allocatorIS4_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax11KaxProtocolC1EvENK3$_0clEvEUlvE_NS_9allocatorIS5_EEFvvEEE", "ZZN3kax11KaxProtocolC1EvENK3$_0clEvEUlvE_", "ZN3kax11KaxProtocolC1EvE3$_0", "NSt6__ndk110__function6__funcIZN3kax11KaxProtocol4OpenEP10URLContextPKciE3$_1NS_9allocatorIS8_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax11KaxProtocol4OpenEP10URLContextPKciENK3$_1clEvEUlS1_E_NS_9allocatorIbEEEE", "ZZN3kax11KaxProtocol4OpenEP10URLContextPKciENK3$_1clEvEUlPbE_", "ZN3kax11KaxProtocol4OpenEP10URLContextPKciE3$_1", "NSt6__ndk110__function6__funcIZN3kax11KaxProtocol4ReadEP10URLContextPhiE3$_2NS_9allocatorIS7_EEFvvEEE", "ZN3kax11KaxProtocol4ReadEP10URLContextPhiE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_3NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_4NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_5NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_6NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_7NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_8NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_8", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_9NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol5OnTagERN3flv3TagEE3$_9", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11KaxProtocol7OnCloseEiPKcE4$_10NS_9allocatorIbEEEE", "ZN3kax11KaxProtocol7OnCloseEiPKcE4$_10", "NSt6__ndk110__function6__funcIZN3kax11KaxProtocol7OnCloseEiPKcE4$_11NS_9allocatorIS6_EEFvvEEE", "ZN3kax11KaxProtocol7OnCloseEiPKcE4$_11", "NSt6__ndk110__function6__funcIZN3kax11KaxProtocol11OnBufferingEPNS2_6PlayerEbE4$_12NS_9allocatorIS6_EEFvvEEE", "ZN3kax11KaxProtocol11OnBufferingEPNS_6PlayerEbE4$_12", "N3kix11ExitWatcherIN3kax11KaxProtocolEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax11KaxProtocolEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax11KaxProtocolEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_11KaxProtocolEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_11KaxProtocolEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11KaxProtocolEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax11KaxProtocolEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax11KaxProtocolEFvvEEE", "NSt6__ndk114unary_functionIPN3kax11KaxProtocolEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax7SessionENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax7SessionEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvRN3flv6HeaderEEEE4BindIN3kax11KaxProtocolEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvRN3flv6HeaderEEEE", "ZN3arc4SlotIJFvRN3flv6HeaderEEEE4BindIN3kax11KaxProtocolEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvRN3flv3TagEEEE4BindIN3kax11KaxProtocolEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvRN3flv3TagEEEE", "ZN3arc4SlotIJFvRN3flv3TagEEEE4BindIN3kax11KaxProtocolEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax11KaxProtocolEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax11KaxProtocolEEERS4_PT_MS9_FviS2_EEUliS2_E_", "N3kax10MeProtocolE", "NSt6__ndk110__function6__funcIZN3kax10MeProtocol4OpenEP10URLContextPKciE3$_0NS_9allocatorIS8_EEFbvEEE", "ZN3kax10MeProtocol4OpenEP10URLContextPKciE3$_0", "NSt6__ndk110__function6__baseIFbvEEE", "c9ec446e-c821-11e7-b326-df85871e21f2", "N3kax12RtmpStreamerE", "NSt6__ndk110__function6__funcIZN3kax12RtmpStreamerC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISA_EEFviRKS9_EEE", "NSt6__ndk110__function6__funcIZZN3kax12RtmpStreamerC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_0clEiRKS9_EUlvE_NS7_ISD_EEFvvEEE", "ZZN3kax12RtmpStreamerC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_0clEiRKS7_EUlvE_", "ZN3kax12RtmpStreamerC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk110__function6__funcIZN3kax12RtmpStreamerC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_ISA_EEFviPKcEEE", "NSt6__ndk110__function6__funcIZZN3kax12RtmpStreamerC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_1clEiPKcEUlvE_NS7_ISD_EEFvvEEE", "ZZN3kax12RtmpStreamerC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_1clEiPKcEUlvE_", "ZN3kax12RtmpStreamerC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kax12RtmpStreamer5CloseEvE3$_2NS_9allocatorIS4_EEFvvEEE", "ZN3kax12RtmpStreamer5CloseEvE3$_2", "skaxi", "skas", "auto kax::SrtmpStreamer::SrtmpStreamer(const std::string &)::(anonymous class)::operator()()::(anonymous class)::operator()() const", "\"timeout, rtmpConnected:\", rtmpConnected_", "timeout, rtmpConnected:", "auto kax::SrtmpStreamer::ConnectSrt(const std::string &)::(anonymous class)::operator()(int, const std::string &) const", "\"srt onConnet\"", "srt onConnet", "auto kax::SrtmpStreamer::ConnectSrt(const std::string &)::(anonymous class)::operator()(int, const char *) const", "\"srt onClose\"", "srt onClose", "auto kax::SrtmpStreamer::ConnectRtmp(const std::string &)::(anonymous class)::operator()(int, const std::string &) const", "\"rtmp onConnet\"", "rtmp onConnet", "auto kax::SrtmpStreamer::ConnectRtmp(const std::string &)::(anonymous class)::operator()(int, const char *) const", "\"rtmp onClose\"", "rtmp onClose", "N3kax13SrtmpStreamerE", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamerC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISC_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax13SrtmpStreamerC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_0clEvEUlvE_NS7_ISD_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZZN3kax13SrtmpStreamerC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_0clEvENKUlvE_clEvEUlS1_E_NS7_IbEEEE", "ZZZN3kax13SrtmpStreamerC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_0clEvENKUlvE_clEvEUlPbE_", "ZZN3kax13SrtmpStreamerC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_0clEvEUlvE_", "ZN3kax13SrtmpStreamerC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamerD1EvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kax13SrtmpStreamerD1EvE3$_1", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamer10ConnectSrtERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_ISC_EEFviSB_EEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax13SrtmpStreamer10ConnectSrtERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_2clEiSB_EUlS1_E_NS7_IbEEEE", "ZZN3kax13SrtmpStreamer10ConnectSrtERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_2clEiS9_EUlPbE_", "ZN3kax13SrtmpStreamer10ConnectSrtERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamer10ConnectSrtERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_3NS7_ISC_EEFviPKcEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax13SrtmpStreamer10ConnectSrtERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_3clEiPKcEUlS1_E_NS7_IbEEEE", "ZZN3kax13SrtmpStreamer10ConnectSrtERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_3clEiPKcEUlPbE_", "ZN3kax13SrtmpStreamer10ConnectSrtERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_3", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamer11ConnectRtmpERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_4NS7_ISC_EEFviSB_EEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax13SrtmpStreamer11ConnectRtmpERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_4clEiSB_EUlS1_E_NS7_IbEEEE", "ZZN3kax13SrtmpStreamer11ConnectRtmpERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_4clEiS9_EUlPbE_", "ZN3kax13SrtmpStreamer11ConnectRtmpERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_4", "NSt6__ndk110__function6__funcIZN3kax13SrtmpStreamer11ConnectRtmpERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_5NS7_ISC_EEFviPKcEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax13SrtmpStreamer11ConnectRtmpERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_5clEiPKcEUlS1_E_NS7_IbEEEE", "ZZN3kax13SrtmpStreamer11ConnectRtmpERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_5clEiPKcEUlPbE_", "ZN3kax13SrtmpStreamer11ConnectRtmpERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPN3kax11SrtStreamerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11SrtStreamerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax12RtmpStreamerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax12RtmpStreamerEEE", "kax::SrtSession::SrtSession(const std::string &)", "\"create srt socket failed\", srt_strerror(socket_, errno)", "create srt socket failed", "void kax::SrtSession::OnPoll()", "\"connection lost, state:\", state", "connection lost, state:", "connection lost", "malform flv header", "malform flv tag", "meet end tag", "N3kax10SrtSessionE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10SrtSessionC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_IbEEEE", "ZN3kax10SrtSessionC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk110__function6__funcIZN3kax10SrtSessionD1EvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kax10SrtSessionD1EvE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10SrtSession6OnPollEvE3$_2NS_9allocatorIbEEEE", "ZN3kax10SrtSession6OnPollEvE3$_2", "NSt6__ndk110__function6__funcIZN3kax10SrtSession6OnDataEPKciE3$_3NS_9allocatorIS6_EEFvvEEE", "ZN3kax10SrtSession6OnDataEPKciE3$_3", "NSt6__ndk110__function6__funcIZN3kax10SrtSession6OnDataEPKciE3$_4NS_9allocatorIS6_EEFvvEEE", "ZN3kax10SrtSession6OnDataEPKciE3$_4", "NSt6__ndk110__function6__funcIZN3kax10SrtSession5CloseEPKciE3$_5NS_9allocatorIS6_EEFvvEEE", "ZN3kax10SrtSession5CloseEPKciE3$_5", "N3kax7SessionE", "N3arc6SignalIJFvRN3flv6HeaderEEEEE", "N3arc6SignalIJFvRN3flv3TagEEEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax10SrtSessionEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kix8ResolverEEEE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax10SrtSessionEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk120__shared_ptr_emplaceIN3kax8SrtRelayENS_9allocatorIS2_EEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax10SrtSessionEFvvEJPS4_EEENS_9allocatorIS8_EEFviEEE", "NSt6__ndk16__bindIMN3kax10SrtSessionEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax10SrtSessionEFvvEEE", "NSt6__ndk114unary_functionIPN3kax10SrtSessionEvEE", "NSt6__ndk120__shared_ptr_emplaceIN3flv6HeaderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN3flv3TagENS_9allocatorIS2_EEEE", "app exit", "domain name not resolved", "void kax::SrtStreamer::Send(const flv::Tag &, UInt32)", "void kax::SrtStreamer::SendFrames()", "\"drop inter frame\"", "drop inter frame", "user closed", "N3kax11SrtStreamerE", "NSt6__ndk110__function6__funcIZN3kax11SrtStreamerD1EvE3$_0NS_9allocatorIS4_EEFvvEEE", "ZN3kax11SrtStreamerD1EvE3$_0", "NSt6__ndk110__function6__funcIZN3kax11SrtStreamer5StartEvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kax11SrtStreamer5StartEvE3$_1", "NSt6__ndk110__function6__funcIZN3kax11SrtStreamer5CloseEvE3$_2NS_9allocatorIS4_EEFvvEEE", "ZN3kax11SrtStreamer5CloseEvE3$_2", "NSt6__ndk110__function6__funcIZN3kax11SrtStreamer6OnPollEvE3$_3NS_9allocatorIS4_EEFvvEEE", "ZN3kax11SrtStreamer6OnPollEvE3$_3", "NSt6__ndk110__function6__funcIZN3kax11SrtStreamer6OnPollEvE3$_4NS_9allocatorIS4_EEFvvEEE", "ZN3kax11SrtStreamer6OnPollEvE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11SrtStreamer4SendERKN3flv3TagEjE3$_5NS_9allocatorIbEEEE", "ZN3kax11SrtStreamer4SendERKN3flv3TagEjE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11SrtStreamer10SendFramesEvE3$_6NS_9allocatorIbEEEE", "ZN3kax11SrtStreamer10SendFramesEvE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11SrtStreamer10SendFramesEvE3$_7NS_9allocatorIbEEEE", "ZN3kax11SrtStreamer10SendFramesEvE3$_7", "N3kix11ExitWatcherIN3kax11SrtStreamerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax13FaxStreamInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax13FaxStreamInfoEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax11SrtStreamerEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax11SrtStreamerEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax11SrtStreamerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax11SrtStreamerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11SrtStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFviEEE", "NSt6__ndk16__bindIMN3kax11SrtStreamerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax11SrtStreamerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax11SrtStreamerEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11SrtStreamer10MediaFrameENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN3kax11SrtStreamer10MediaFrameEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11SrtStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk120__shared_ptr_emplaceIN3kax13FaxStreamInfoENS_9allocatorIS2_EEEE", "timeout for access request", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/streamaccessor.cpp", "kax_play_access_timeout", "timeout for play request", "\\[streamid\\]", "http://", "int kax::StreamAccessor::Create(const std::string &, bool, const std::string &, const std::vector<std::string> &, UInt32, std::string &, std::string &, std::string &)", "\"client info invalid\"", "client info invalid", "\"curl init failed\"", "curl init failed", "/stream/create", "\"result:\", description, \", code:\", rescode, \", timeout:\", timeout", ", code:", ", timeout:", "response not json:", "\"response not json, response:\", response", "response not json, response:", "push_uri", "stream_uri", "push uri parse failed", "reporter", "\"result not integer\", response", "result not integer", "\"exception, response:\", response", "std::string kax::StreamAccessor::Play(const std::string &, const std::function<bool ()> &)", "\"wait for streamuri \", streamuri, \" timeout or interrupt\"", "wait for streamuri ", " timeout or interrupt", "\"invalid streamuri:\", streamuri", "invalid streamuri:", "\"hostid:\", hostid, \" not found, streamuri:\", streamuri", "hostid:", " not found, streamuri:", "void kax::StreamAccessor::SetHosts(const std::string &, const std::string &, const std::map<std::string, std::string> &)", "\"get hosts success, ignore hosts cache\"", "get hosts success, ignore hosts cache", "streamid", "void kax::StreamAccessor::OnFinish(const char *, int)", "\"response not json:\", response", "reporter_region", "\"id:\", host[\"id\"].asString(), \", url:\", hosturl", "lifetime", "\"access failed, result:\", result", "access failed, result:", "\"access failed, result invalid\"", "access failed, result invalid", "\"parse exception, response:\", response", "parse exception, response:", "\"rescode:\", rescode, \", message:\", message", "void kax::StreamAccessor::GetAccess()", "/stream/access", "N3kax14StreamAccessorE", "NSt6__ndk110__function6__funcIZN3kax14StreamAccessorC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISC_EEFvvEEE", "ZN3kax14StreamAccessorC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_1NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_2NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_3NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_4NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_5NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor6CreateERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbSB_RKNS_6vectorIS9_NS7_IS9_EEEEjRS9_SH_SH_E3$_6NS7_IbEEEE", "ZN3kax14StreamAccessor6CreateERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_RKNS1_6vectorIS7_NS5_IS7_EEEEjRS7_SF_SF_E3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor4PlayERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_8functionIFbvEEEE3$_7NS7_IbEEEE", "ZN3kax14StreamAccessor4PlayERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFbvEEEE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor4PlayERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_8functionIFbvEEEE3$_8NS7_IbEEEE", "ZN3kax14StreamAccessor4PlayERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFbvEEEE3$_8", "NSt6__ndk110__function6__funcIZN3kax14StreamAccessor4PlayERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_8functionIFbvEEEE3$_9NS7_ISH_EEFvvEEE", "ZN3kax14StreamAccessor4PlayERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFbvEEEE3$_9", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor4PlayERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_8functionIFbvEEEE4$_10NS7_IbEEEE", "ZN3kax14StreamAccessor4PlayERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFbvEEEE4$_10", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8SetHostsERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESB_RKNS_3mapIS9_S9_NS_4lessIS9_EENS7_INS_4pairISA_S9_EEEEEEE4$_11NS7_IbEEEE", "ZN3kax14StreamAccessor8SetHostsERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIS8_S7_EEEEEEE4$_11", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_12NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_12", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_13NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_13", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_14NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_14", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_15NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_15", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_16NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_16", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor8OnFinishEPKciE4$_17NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_17", "NSt6__ndk110__function6__funcIZN3kax14StreamAccessor8OnFinishEPKciE4$_18NS_9allocatorIS6_EEFvvEEE", "ZN3kax14StreamAccessor8OnFinishEPKciE4$_18", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14StreamAccessor9GetAccessEvE4$_19NS_9allocatorIbEEEE", "ZN3kax14StreamAccessor9GetAccessEvE4$_19", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax14StreamAccessorEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax14StreamAccessorEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14StreamAccessorEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14StreamAccessorEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax14StreamAccessorEFvvEEE", "NSt6__ndk114unary_functionIPN3kax14StreamAccessorEvEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax14StreamAccessorEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax14StreamAccessorEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "void kax::BaseStreamer::Sync()", "\"audiodiff:\", audiodiff.count(), \", videodiff:\", videodiff.count()", "audiodiff:", ", videodiff:", "N3kax12BaseStreamerE", "NSt6__ndk110__function6__funcIZN3kax12BaseStreamerC1EvE3$_0NS_9allocatorIS4_EEFviRKNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEEE", "ZN3kax12BaseStreamerC1EvE3$_0", "NSt6__ndk110__function6__funcIZN3kax12BaseStreamer8ReportToERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_ISC_EEFvvEEE", "NSt6__ndk110__function6__funcIZZN3kax12BaseStreamer8ReportToERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_1clEvEUlNS_6chrono8durationIxNS_5ratioILl1ELl1000000EEEEESH_E_NS7_ISI_EEFvSH_SH_EEE", "ZZN3kax12BaseStreamer8ReportToERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_1clEvEUlNS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEESF_E_", "ZN3kax12BaseStreamer8ReportToERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kax12BaseStreamer10AdjustTimeEiibE3$_2NS_9allocatorIS4_EEFvvEEE", "ZN3kax12BaseStreamer10AdjustTimeEiibE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax12BaseStreamer4SyncEvE3$_3NS_9allocatorIbEEEE", "ZN3kax12BaseStreamer4SyncEvE3$_3", "N3kix11ExitWatcherIN3kax12BaseStreamerEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12BaseStreamerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12BaseStreamerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12BaseStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12BaseStreamerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12BaseStreamerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12BaseStreamerEvEE", "kax_ip4_only", "Allow IPv4 only when resolve addresses", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/curlhttprequest.cpp", "kax_allow_gzip", "Allow gzip in http request", "N3kax15CurlHttpRequestE", "NSt6__ndk110__function6__funcIZN3kax15CurlHttpRequestC1EPNS2_15CurlHttpServiceEE3$_2NS_9allocatorIS6_EEFvvEEE", "ZN3kax15CurlHttpRequestC1EPNS_15CurlHttpServiceEE3$_2", "NSt6__ndk110__function6__funcINS_6__bindIRZN3kax15CurlHttpRequestD1EvE3$_3JRPvRPPS4_EEENS_9allocatorISC_EEFvvEEE", "NSt6__ndk16__bindIRZN3kax15CurlHttpRequestD1EvE3$_3JRPvRPPS2_EEE", "NSt6__ndk118__weak_result_typeIZN3kax15CurlHttpRequestD1EvE3$_3EE", "NSt6__ndk122__weak_result_type_impIZN3kax15CurlHttpRequestD1EvE3$_3Lb0EEE", "NSt6__ndk134__maybe_derive_from_unary_functionIZN3kax15CurlHttpRequestD1EvE3$_3Lb0EEE", "NSt6__ndk135__maybe_derive_from_binary_functionIZN3kax15CurlHttpRequestD1EvE3$_3Lb0EEE", "N3kax15CurlHttpService6HandleE", "N3arc3any6holderINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N3arc3any11placeholderE", "NSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk121__basic_string_commonILb1EEE", "N3kax15CurlHttpServiceE", "NSt6__ndk110__function6__funcIZN3kax15CurlHttpServiceD1EvE3$_0NS_9allocatorIS4_EEFvvEEE", "ZN3kax15CurlHttpServiceD1EvE3$_0", "N3kax11HttpServiceE", "NSt6__ndk110__function6__funcINS_6__bindIRF9CURLMcodePvS4_EJRS4_S7_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIRF9CURLMcodePvS2_EJRS2_S5_EEE", "NSt6__ndk118__weak_result_typeIPF9CURLMcodePvS2_EEE", "NSt6__ndk115binary_functionIPvS1_9CURLMcodeEE", "fax_connect_timeout", "Connect timeout when use fax protocol", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/faxsession.cpp", "?uid=", "&uid=", "?reconnect=true", "&reconnect=true", "void kax::FaxSession::OnFinish(const char *, int)", "\"retry connect, message: \", message, \", rescode: \", rescode", "retry connect, message: ", ", rescode: ", "auto kax::FaxSession::OnFinish(const char *, int)::(anonymous class)::operator()() const", "\"reconnect: \", url_", "reconnect: ", "N3kax10FaxSessionE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10FaxSession8OnFinishEPKciE3$_0NS_9allocatorIbEEEE", "ZN3kax10FaxSession8OnFinishEPKciE3$_0", "NSt6__ndk110__function6__funcIZN3kax10FaxSession8OnFinishEPKciE3$_1NS_9allocatorIS6_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10FaxSession8OnFinishEPKciENK3$_1clEvEUlS1_E_NS_9allocatorIbEEEE", "ZZN3kax10FaxSession8OnFinishEPKciENK3$_1clEvEUlPbE_", "ZN3kax10FaxSession8OnFinishEPKciE3$_1", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax10FaxSessionEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax10FaxSessionEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "N3kax13FaxStreamInfoE", "N3kax10StreamInfoE", "kax_startup_duration", "Default duration", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/kaxloader.cpp", "kax_session_timeout", "Session expire duration", "kax_segment_threads", "Max connection for segment downloading", "kax_segment_timeout_duration", "Segment timeout by duration count", "kax_segment_abort_tolarent", "Segment abort tolarent", "kax_adaptation_random", "Adaptation random or not", "kax_adaptation_force_stream", "Force downloading stream index", "kax_loader_goon_factor", "Kax loader goon timer factor", "adaptation", "redirections", "void kax::KaxLoader::Go(bool)", "\"(invalid_url) url:\", url", "(invalid_url) url:", "segment sequence:", " is too old:", " ms, skip ", " fragments", "void kax::KaxLoader::Goon()", "os.str()", "void kax::KaxLoader::OnRefresh()", "\"(refresh) sequences: \", stream.str(), \" durations:\", durations.str(), \" loadTime:\", averageLoadTime_, \" connectTime:\", averageConnectTime_", "(refresh) sequences: ", " durations:", " loadTime:", " connectTime:", "void kax::KaxLoader::OnFail(UInt32, const std::string &)", "\"(fail)\"", "(fail)", "void kax::KaxLoader::OnEnd()", "\"(eos)\"", "(eos)", "void kax::KaxLoader::OnAbort()", "\"(abort)\"", "(abort)", "playlist expire", "void kax::KaxLoader::OnExpire()", "\"(segment_expire)\"", "(segment_expire)", "void kax::KaxLoader::Deliver()", "\"(deliver) sequence:\", loader->GetSequence(), \" success:\", loader->Success()", "(deliver) sequence:", " success:", "\"redirect url, sequence:\", loader->GetSequence()", "redirect url, sequence:", "std::string kax::KaxLoader::ChooseAlternate(const kix::Segment &, UInt32 &)", "\"select bandwidths[\", id, \"]:\", bandwidths[id], \" but url is empty, skip\"", "select bandwidths[", " but url is empty, skip", "NSt6__ndk119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11HttpServiceENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11HttpServiceEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax15PlaylistTrackerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax15PlaylistTrackerEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN3kax9KaxLoaderEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN3kax9KaxLoaderEEERS2_PT_MS7_FvvEEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE4BindIN3kax9KaxLoaderEEERSD_PT_MSI_FvjSB_EEUljSB_E_NS7_ISM_EESC_EE", "NSt6__ndk110__function6__baseIFvjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE", "ZN3arc4SlotIJFvjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE4BindIN3kax9KaxLoaderEEERSB_PT_MSG_FvjS9_EEUljS9_E_", "NSt6__ndk120__shared_ptr_pointerIPN3kax10AbrManagerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax10AbrManagerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax13SegmentLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax13SegmentLoaderEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvhPN3kax13SegmentLoaderEjEEE4BindINS4_9KaxLoaderEEERS8_PT_MSC_FvhS6_jEEUlhS6_jE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvhPN3kax13SegmentLoaderEjEEE", "ZN3arc4SlotIJFvhPN3kax13SegmentLoaderEjEEE4BindINS1_9KaxLoaderEEERS5_PT_MS9_FvhS3_jEEUlhS3_jE_", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader2GoEbE3$_0NS_9allocatorIbEEEE", "ZN3kax9KaxLoader2GoEbE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader4GoonEvE3$_1NS_9allocatorIbEEEE", "ZN3kax9KaxLoader4GoonEvE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader4GoonEvE3$_2NS_9allocatorIbEEEE", "ZN3kax9KaxLoader4GoonEvE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader9OnRefreshEvE3$_3NS_9allocatorIbEEEE", "ZN3kax9KaxLoader9OnRefreshEvE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader6OnFailEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_4NS7_IbEEEE", "ZN3kax9KaxLoader6OnFailEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader5OnEndEvE3$_5NS_9allocatorIbEEEE", "ZN3kax9KaxLoader5OnEndEvE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader7OnAbortEvE3$_6NS_9allocatorIbEEEE", "ZN3kax9KaxLoader7OnAbortEvE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader8OnExpireEvE3$_7NS_9allocatorIbEEEE", "ZN3kax9KaxLoader8OnExpireEvE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader7DeliverEvE3$_8NS_9allocatorIbEEEE", "ZN3kax9KaxLoader7DeliverEvE3$_8", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader7DeliverEvE3$_9NS_9allocatorIbEEEE", "ZN3kax9KaxLoader7DeliverEvE3$_9", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax9KaxLoader15ChooseAlternateERKN3kix7SegmentERjE4$_10NS_9allocatorIbEEEE", "ZN3kax9KaxLoader15ChooseAlternateERKN3kix7SegmentERjE4$_10", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax9KaxLoaderEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax9KaxLoaderEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax9KaxLoaderEFvvEEE", "NSt6__ndk114unary_functionIPN3kax9KaxLoaderEvEE", "void kax::KaxLoaderInfo::Dump()", "stream.str()", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13KaxLoaderInfo4DumpEvE3$_0NS_9allocatorIbEEEE", "ZN3kax13KaxLoaderInfo4DumpEvE3$_0", "kax::KaxSession::KaxSession(const std::string &, kax::BaseProtocol *)", "\"(create) url:\", url, \" real:\", url_", "(create) url:", " real:", "void kax::KaxSession::OnStreamEnd(int, const char *)", "\"(stream_end) reason:\", reason, \" message:\", message", "(stream_end) reason:", "N3kax10KaxSessionE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10KaxSessionC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS2_12BaseProtocolEE3$_0NS7_IbEEEE", "ZN3kax10KaxSessionC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_12BaseProtocolEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10KaxSession11OnStreamEndEiPKcE3$_1NS_9allocatorIbEEEE", "ZN3kax10KaxSession11OnStreamEndEiPKcE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax10KaxSession11OnStreamEndEiPKcE3$_2NS_9allocatorIbEEEE", "ZN3kax10KaxSession11OnStreamEndEiPKcE3$_2", "NSt6__ndk120__shared_ptr_pointerIPN3kax9KaxLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax9KaxLoaderEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN3kax10KaxSessionEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN3kax10KaxSessionEEERS2_PT_MS7_FvvEEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvjjbPN3kix10RingBufferEEEE4BindIN3kax10KaxSessionEEERS8_PT_MSD_FvjjbS6_EEUljjbS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvjjbPN3kix10RingBufferEEEE", "ZN3arc4SlotIJFvjjbPN3kix10RingBufferEEEE4BindIN3kax10KaxSessionEEERS5_PT_MSA_FvjjbS3_EEUljjbS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax10KaxSessionEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax10KaxSessionEEERS4_PT_MS9_FviS2_EEUliS2_E_", "kax::NtpReporter::NtpReporter(const std::string &)", "\"address error: \", url", "address error: ", "auto kax::NtpReporter::NtpReporter(const std::string &)::(anonymous class)::operator()(const sockaddr *, char *, UInt32, kix::UdpTransport *) const", "\"onread\"", "onread", "\"invalid response\"", "invalid response", "N3kax11NtpReporterE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_IbEEEE", "ZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk110__function6__funcIZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_ISC_EEFvPK8sockaddrPcjPN3kix12UdpTransportEEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E_NS7_IbEEEE", "ZZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E0_NS7_IbEEEE", "ZZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE0_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E1_NS7_IbEEEE", "ZZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_1clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE1_", "ZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kax11NtpReporterC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_ISC_EEFvvEEE", "ZN3kax11NtpReporterC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "N3kax8ReporterE", "NSt6__ndk110__function6__baseIFvPK8sockaddrPcjPN3kix12UdpTransportEEEE", "\"invalid url: \", url", "invalid url: ", "void kax::NtpTimeSynchronizer::Sync(Int64)", "\"distance:\", distance", "distance:", "void kax::NtpTimeSynchronizer::Fail(int)", "\"reason:\", reason", "void kax::NtpTimeSynchronizer::Done()", "\"done\"", "auto kax::NtpTimeSynchronizer::Go(const std::string &)::(anonymous class)::operator()(const sockaddr *, char *, UInt32, kix::UdpTransport *) const", "\"error reading ntp packet, size: \", size", "error reading ntp packet, size: ", "\"delay:\", delay / TIME_FACTOR, \"us\"", "delay:", "auto kax::NtpTimeSynchronizer::Go(const std::string &)::(anonymous class)::operator()() const", "\"onsend\"", "onsend", "N3kax19NtpTimeSynchronizerE", "NSt6__ndk110__function6__funcIZN3kax19NtpTimeSynchronizerC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISC_EEFvvEEE", "ZN3kax19NtpTimeSynchronizerC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_IbEEEE", "ZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk110__function6__funcIZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_3NS7_ISC_EEFvPK8sockaddrPcjPN3kix12UdpTransportEEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E_NS7_IbEEEE", "ZZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E0_NS7_IbEEEE", "ZZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE0_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlS1_E1_NS7_IbEEEE", "ZZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_3clEPK8sockaddrPcjPN3kix12UdpTransportEEUlPbE1_", "ZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_3", "NSt6__ndk110__function6__funcIZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_4NS7_ISC_EEFvvEEE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax19NtpTimeSynchronizer2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3$_4clEvEUlS1_E_NS7_IbEEEE", "ZZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENK3$_4clEvEUlPbE_", "ZN3kax19NtpTimeSynchronizer2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax19NtpTimeSynchronizer4SyncElE3$_5NS_9allocatorIbEEEE", "ZN3kax19NtpTimeSynchronizer4SyncElE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax19NtpTimeSynchronizer4FailEiE3$_6NS_9allocatorIbEEEE", "ZN3kax19NtpTimeSynchronizer4FailEiE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax19NtpTimeSynchronizer4DoneEvE3$_7NS_9allocatorIbEEEE", "ZN3kax19NtpTimeSynchronizer4DoneEvE3$_7", "N3kax16TimeSynchronizerE", "kax_playlist_threads", "Max connection for playlist refreshing", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/playlisttracker.cpp", "void kax::PlaylistTracker::OnLoad(kix::RingBuffer *, UInt32, kax::PlaylistLoader *)", "\"(load) eos\"", "(load) eos", "\"(load) no refresh\"", "(load) no refresh", "\"(parse_failed): data:\", buffer->Count()", "(parse_failed): data:", "\"(load_failed)\"", "(load_failed)", "playlist ", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE4BindINS7_15PlaylistTrackerEEERSB_PT_MSF_FvS6_jS9_EEUlS6_jS9_E_NS_9allocatorISJ_EESA_EE", "NSt6__ndk110__function6__baseIFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE", "ZN3arc4SlotIJFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE4BindINS4_15PlaylistTrackerEEERS8_PT_MSC_FvS3_jS6_EEUlS3_jS6_E_", "NSt6__ndk120__shared_ptr_pointerIPN3kax14PlaylistLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14PlaylistLoaderEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax15PlaylistTrackerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax15PlaylistTrackerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax15PlaylistTrackerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax15PlaylistTrackerEvEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS2_14PlaylistLoaderEE3$_0NS_9allocatorIbEEEE", "ZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS_14PlaylistLoaderEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS2_14PlaylistLoaderEE3$_1NS_9allocatorIbEEEE", "ZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS_14PlaylistLoaderEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS2_14PlaylistLoaderEE3$_2NS_9allocatorIbEEEE", "ZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS_14PlaylistLoaderEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS2_14PlaylistLoaderEE3$_3NS_9allocatorIbEEEE", "ZN3kax15PlaylistTracker6OnLoadEPN3kix10RingBufferEjPNS_14PlaylistLoaderEE3$_3", "NetConnection.Connect.Rejected", "virtual void kax::RtmpConnection::OnVideo(UInt32, const std::string &, tincan::NetStream *)", "virtual void kax::RtmpConnection::OnAudio(UInt32, const std::string &, tincan::NetStream *)", "Invalid url", "N3kax14RtmpConnectionE", "NSt6__ndk110__function6__funcIZN3kax14RtmpConnectionC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISC_EEFvvEEE", "ZN3kax14RtmpConnectionC1ERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk110__function6__funcIZN3kax14RtmpConnection9SendAudioEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3$_1NS7_ISC_EEFvvEEE", "ZN3kax14RtmpConnection9SendAudioEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjE3$_1", "NSt6__ndk110__function6__funcIZN3kax14RtmpConnection9SendVideoEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3$_2NS7_ISC_EEFvvEEE", "ZN3kax14RtmpConnection9SendVideoEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjE3$_2", "NSt6__ndk110__function6__funcIZN3kax14RtmpConnection6DeleteEvE3$_3NS_9allocatorIS4_EEFvvEEE", "ZN3kax14RtmpConnection6DeleteEvE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14RtmpConnection7OnVideoEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6tincan9NetStreamEE3$_4NS7_IbEEEE", "ZN3kax14RtmpConnection7OnVideoEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPN6tincan9NetStreamEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14RtmpConnection7OnAudioEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN6tincan9NetStreamEE3$_5NS7_IbEEEE", "ZN3kax14RtmpConnection7OnAudioEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPN6tincan9NetStreamEE3$_5", "N6tincan20NetConnectionHandlerE", "N6tincan16NetStreamHandlerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax14RtmpStreamInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14RtmpStreamInfoEEE", "N3amf4DataE", "N3kax11RtmpServiceE", "N5tinet5EventE", "thread constructor failed", "N3kax14RtmpStreamInfoE", "kax::SegmentLoader::~SegmentLoader()", "\"(abort) sequence:\", sequence_, \" duration:\", duration", "(abort) sequence:", " duration:", "bool kax::SegmentLoader::Go(const std::string &, UInt32)", "\"(go) sequence:\", sequence_, \" url:\", url, \" offset:\", offset", "(go) sequence:", " offset:", "Kax-Sequence:", "void kax::SegmentLoader::OnHeader(const char *, int)", "\"(header) sequence:\", sequence_", "(header) sequence:", "Kax-Disequence:", "\"(header) disequence:\", disequence_", "(header) disequence:", "content-range: bytes", "%d-%d/%d", "\"(connect) sequence:\", sequence_", "(connect) sequence:", "no sequence", "void kax::SegmentLoader::OnFinish(const char *, int)", "\"(success) rescode:\", rescode, \" sequence:\", sequence_, \" duration:\", duration, \" message:\", message", "(success) rescode:", "\"(fail) rescode:\", rescode, \" sequence:\", sequence_, \" duration:\", duration, \" message:\", message", "(fail) rescode:", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax13SegmentLoaderEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax13SegmentLoaderEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoaderD1EvE3$_0NS_9allocatorIbEEEE", "ZN3kax13SegmentLoaderD1EvE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3$_1NS7_IbEEEE", "ZN3kax13SegmentLoader2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader8OnHeaderEPKciE3$_2NS_9allocatorIbEEEE", "ZN3kax13SegmentLoader8OnHeaderEPKciE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader8OnHeaderEPKciE3$_3NS_9allocatorIbEEEE", "ZN3kax13SegmentLoader8OnHeaderEPKciE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader8OnHeaderEPKciE3$_4NS_9allocatorIbEEEE", "ZN3kax13SegmentLoader8OnHeaderEPKciE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader8OnFinishEPKciE3$_5NS_9allocatorIbEEEE", "ZN3kax13SegmentLoader8OnFinishEPKciE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13SegmentLoader8OnFinishEPKciE3$_6NS_9allocatorIbEEEE", "ZN3kax13SegmentLoader8OnFinishEPKciE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS7_S7_EUlS1_E_NS_9allocatorIbEEEE", "ZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS4_S4_EUlPbE_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS7_S7_EUlS1_E0_NS_9allocatorIbEEEE", "ZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS4_S4_EUlPbE0_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS7_S7_EUlS1_E1_NS_9allocatorIbEEEE", "ZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS4_S4_EUlPbE1_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS7_S7_EUlS1_E2_NS_9allocatorIbEEEE", "ZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS4_S4_EUlPbE2_", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS7_S7_EUlS1_E3_NS_9allocatorIbEEEE", "ZZN3kax10SrtServiceC1EvENK3$_0clEPviPKciS4_S4_EUlPbE3_", "auto kax::SrtService::SrtService()::(anonymous class)::operator()(void *, int, const char *, int, const char *, const char *) const", "file, \":\", line, \" [\", area, \"] \", message", "kax_stream_adapt_fragments", "fragment count of stream adaptation bitrate", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/dynamicabrmanager.cpp", "virtual UInt32 kax::DynamicAbrManager::GetStream(const AbrManager::Bandwidths &)", "\"upgrade to stream:\", currentStream_", "upgrade to stream:", "\"downgrade to stream:\", currentStream_", "downgrade to stream:", "N3kax17DynamicAbrManagerE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax17DynamicAbrManager9GetStreamERKNS_6vectorIjNS_9allocatorIjEEEEE3$_0NS5_IbEEEE", "ZN3kax17DynamicAbrManager9GetStreamERKNSt6__ndk16vectorIjNS1_9allocatorIjEEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax17DynamicAbrManager9GetStreamERKNS_6vectorIjNS_9allocatorIjEEEEE3$_1NS5_IbEEEE", "ZN3kax17DynamicAbrManager9GetStreamERKNSt6__ndk16vectorIjNS1_9allocatorIjEEEEE3$_1", "N3kax10AbrManagerE", "kax_stream_adapt_interval", "Interval to change adapt stream", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/kaxabrmanager.cpp", "virtual UInt32 kax::KaxAbrManager::GetStream(const AbrManager::Bandwidths &)", "\"real bandwidth:\", realBandwidth", "real bandwidth:", "\"bandwidth switch from:\", currentStream_, \" to:\", i, \" bandwidth:\", bandwidths[i]", "bandwidth switch from:", " to:", "N3kax13KaxAbrManagerE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13KaxAbrManager9GetStreamERKNS_6vectorIjNS_9allocatorIjEEEEE3$_0NS5_IbEEEE", "ZN3kax13KaxAbrManager9GetStreamERKNSt6__ndk16vectorIjNS1_9allocatorIjEEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax13KaxAbrManager9GetStreamERKNS_6vectorIjNS_9allocatorIjEEEEE3$_1NS5_IbEEEE", "ZN3kax13KaxAbrManager9GetStreamERKNSt6__ndk16vectorIjNS1_9allocatorIjEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPN3kax18BandwidthEstimatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax18BandwidthEstimatorEEE", "kax_playlist_load_timeout", "Timeout for playlist loading", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/playlistloader.cpp", "request timeout", "bool kax::PlaylistLoader::Go(const std::string &)", "\"(go) url:\", url", "(go) url:", "void kax::PlaylistLoader::OnFinish(const char *, int)", "\"(success) rescode:\", rescode, \" message:\", message", "\"(fail) rescode:\", rescode, \" message:\", message", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax14PlaylistLoaderEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax14PlaylistLoaderEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14PlaylistLoaderEFvPKciEJPS4_RA16_S5_RKjEEENS_9allocatorISE_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14PlaylistLoaderEFvPKciEJPS2_RA16_S3_RKjEEE", "NSt6__ndk118__weak_result_typeIMN3kax14PlaylistLoaderEFvPKciEEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlaylistLoader2GoERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_IbEEEE", "ZN3kax14PlaylistLoader2GoERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlaylistLoader8OnFinishEPKciE3$_1NS_9allocatorIbEEEE", "ZN3kax14PlaylistLoader8OnFinishEPKciE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kax14PlaylistLoader8OnFinishEPKciE3$_2NS_9allocatorIbEEEE", "ZN3kax14PlaylistLoader8OnFinishEPKciE3$_2", "Initial bandwidth", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/kax/1.0/sources/ewmabandwidthestimator.cpp", "kax_min_bandwidth", "Minimum estimate bandwidth", "N3kax22EwmaBandwidthEstimatorE", "N3kax18BandwidthEstimatorE", "N3kix11ExitMonitorE", "N3arc6SignalIJFvvEEEE", "N3kix14KixExitMonitorE", "NSt6__ndk110__function6__funcIZN3kix14KixExitMonitor5StartEvE3$_0NS_9allocatorIS4_EEFvvEEE", "ZN3kix14KixExitMonitor5StartEvE3$_0", "NSt6__ndk110__function6__funcIZN3kix14KixExitMonitor4ExitEvE3$_1NS_9allocatorIS4_EEFvvEEE", "ZN3kix14KixExitMonitor4ExitEvE3$_1", "static void kix::MainLoop::Exec(const std::function<void ()> &)", "\"thread id:\", std::this_thread::get_id()", "thread id:", "NSt6__ndk110__function6__funcIZN3kix8MainLoop4ExecEN3arc5ScopeERKNS_8functionIFvvEEEE3$_0NS_9allocatorISB_EES7_EE", "ZN3kix8MainLoop4ExecEN3arc5ScopeERKNSt6__ndk18functionIFvvEEEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix8MainLoop4ExecERKNS_8functionIFvvEEEE3$_1NS_9allocatorIbEEEE", "ZN3kix8MainLoop4ExecERKNSt6__ndk18functionIFvvEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kix8MainLoop7PerformEN3arc5ScopeERKNS_8functionIFvvEEEE3$_2NS_9allocatorISB_EES7_EE", "ZN3kix8MainLoop7PerformEN3arc5ScopeERKNSt6__ndk18functionIFvvEEEE3$_2", "NSt6__ndk110__function6__funcIZN3kix8MainLoop7PerformERKNS_8functionIFvvEEEE3$_3NS_9allocatorIS9_EES5_EE", "ZN3kix8MainLoop7PerformERKNSt6__ndk18functionIFvvEEEE3$_3", "static bool kix::Playlist::Parse(UInt8, const std::string &, kix::Playlist &, const std::string &)", "\"parse playlist with unsupported format \", (int) format", "parse playlist with unsupported format ", "static bool kix::Playlist::Generate(UInt8, const std::string &, const kix::Playlist &, std::string &)", "\"generate playlist with unsupported format \", (int) format", "generate playlist with unsupported format ", "disequence", "segments", "discontinuity", "adaptations", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix8Playlist5ParseEhRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERS3_SB_E3$_0NS7_IbEEEE", "ZN3kix8Playlist5ParseEhRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERS0_S9_E3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix8Playlist8GenerateEhRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS3_RS9_E3$_1NS7_IbEEEE", "ZN3kix8Playlist8GenerateEhRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_RS7_E3$_1", "NSt6__ndk120__shared_ptr_pointerIPN3kix13CaresResolverENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix13CaresResolverEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kix10UvResolverENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix10UvResolverEEE", "N3kix10RingBufferE", "bool kix::UdpTransport::Go()", "\"uv_udp_recv_start:\", uv_strerror(result)", "uv_udp_recv_start:", "int kix::UdpTransport::Send(char *, UInt32, sockaddr *)", "\"send failed:\", uv_strerror(result)", "send failed:", "auto kix::UdpTransport::Go()::(anonymous class)::operator()(uv_udp_t *, ssize_t, const uv_buf_t *, const struct sockaddr *, unsigned int) const", "\"Read error \", uv_err_name((int) nread)", "Read error ", "N3kix12UdpTransportE", "NSt6__ndk120__shared_ptr_pointerIPbZZN3kix12UdpTransport2GoEvENK3$_2clEP8uv_udp_slPK8uv_buf_tPK8sockaddrjEUlS1_E_NS_9allocatorIbEEEE", "ZZN3kix12UdpTransport2GoEvENK3$_2clEP8uv_udp_slPK8uv_buf_tPK8sockaddrjEUlPbE_", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12UdpTransport2GoEvE3$_3NS_9allocatorIbEEEE", "ZN3kix12UdpTransport2GoEvE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12UdpTransport4SendEPcjP8sockaddrE3$_4NS_9allocatorIbEEEE", "ZN3kix12UdpTransport4SendEPcjP8sockaddrE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12UdpTransport4SendEPcjP8sockaddrE3$_6NS_9allocatorIbEEEE", "ZN3kix12UdpTransport4SendEPcjP8sockaddrE3$_6", "N3kix16UvNetworkMonitorE", "NSt6__ndk110__function6__funcIZN3kix16UvNetworkMonitorD1EvE3$_0NS_9allocatorIS4_EEFvvEEE", "ZN3kix16UvNetworkMonitorD1EvE3$_0", "N3kix14NetworkMonitorE", "void kix::BaseResolver<kix::UvResolver>::Update(bool, std::vector<__kernel_sockaddr_storage>) [ThatResolver = kix::UvResolver]", "\"domain:\", domain_, \", resolve:\", ips", "domain:", ", resolve:", "N3kix10UvResolverE", "N3kix12BaseResolverINS_10UvResolverEEE", "N3kix8ResolverE", "N3kix11ExitWatcherINS_12BaseResolverINS_10UvResolverEEEEE", "N3arc6SignalIJFvPN3kix8ResolverEEEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_12BaseResolverINS2_10UvResolverEEEEC1EvEUlvE_NS_9allocatorIS8_EEFvvEEE", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEE6OnExitEvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6OnExitEvEUlvE_", "ZN3kix11ExitWatcherINS_12BaseResolverINS_10UvResolverEEEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE0_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE0_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix12BaseResolverINS3_10UvResolverEEEFvvEJPS6_EEENS_9allocatorISA_EEFvvEEE", "NSt6__ndk16__bindIMN3kix12BaseResolverINS1_10UvResolverEEEFvvEJPS4_EEE", "NSt6__ndk118__weak_result_typeIMN3kix12BaseResolverINS1_10UvResolverEEEFvvEEE", "NSt6__ndk114unary_functionIPN3kix12BaseResolverINS1_10UvResolverEEEvEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix10UvResolverEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kix10UvResolverEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kix10UvResolverEFvvEEE", "NSt6__ndk114unary_functionIPN3kix10UvResolverEvEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12BaseResolverINS2_10UvResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlS1_E_NS8_IbEEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlPbE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlvE_NS8_ISB_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlvE_", "kix_dns_refresh_interval", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/live/kix/1.0/sources/baseresolver.cpp", "kix::CaresResolver::CaresResolver(std::string)", "\"ares_init_options result:\", result", "ares_init_options result:", "void kix::CaresResolver::OnResult(int, int, struct hostent *)", "\"status:\", status", "void kix::BaseResolver<kix::CaresResolver>::Update(bool, std::vector<__kernel_sockaddr_storage>) [ThatResolver = kix::CaresResolver]", "N3kix13CaresResolverE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix13CaresResolverC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN3kix13CaresResolverC1ENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk110__function6__funcIZN3kix13CaresResolver17HandleSocketStateEiiiE3$_3NS_9allocatorIS4_EEFvvEEE", "ZN3kix13CaresResolver17HandleSocketStateEiiiE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix13CaresResolver8OnResultEiiP7hostentE3$_4NS_9allocatorIbEEEE", "ZN3kix13CaresResolver8OnResultEiiP7hostentE3$_4", "N3kix12BaseResolverINS_13CaresResolverEEE", "N3kix11ExitWatcherINS_12BaseResolverINS_13CaresResolverEEEEE", "N3kix11ExitWatcherINS_13CaresResolverEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_12BaseResolverINS2_13CaresResolverEEEEC1EvEUlvE_NS_9allocatorIS8_EEFvvEEE", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEE6OnExitEvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6OnExitEvEUlvE_", "ZN3kix11ExitWatcherINS_12BaseResolverINS_13CaresResolverEEEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE0_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE0_", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_13CaresResolverEEC1EvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix11ExitWatcherINS_13CaresResolverEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix12BaseResolverINS3_13CaresResolverEEEFvvEJPS6_EEENS_9allocatorISA_EEFvvEEE", "NSt6__ndk16__bindIMN3kix12BaseResolverINS1_13CaresResolverEEEFvvEJPS4_EEE", "NSt6__ndk118__weak_result_typeIMN3kix12BaseResolverINS1_13CaresResolverEEEFvvEEE", "NSt6__ndk114unary_functionIPN3kix12BaseResolverINS1_13CaresResolverEEEvEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix13CaresResolverEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kix13CaresResolverEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kix13CaresResolverEFvvEEE", "NSt6__ndk114unary_functionIPN3kix13CaresResolverEvEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12BaseResolverINS2_13CaresResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlS1_E_NS8_IbEEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlPbE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlvE_NS8_ISB_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlvE_", "virtual void kix::KixMainLoop::Run()", "virtual void kix::KixMainLoop::RunAsync()", "virtual void kix::KixMainLoop::Execute(const std::function<void ()> &)", "N3kix11KixMainLoopE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix11KixMainLoop3RunEvE3$_0NS_9allocatorIbEEEE", "ZN3kix11KixMainLoop3RunEvE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix11KixMainLoop8RunAsyncEvE3$_1NS_9allocatorIbEEEE", "ZN3kix11KixMainLoop8RunAsyncEvE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix11KixMainLoop7ExecuteERKNS_8functionIFvvEEEE3$_2NS_9allocatorIbEEEE", "ZN3kix11KixMainLoop7ExecuteERKNSt6__ndk18functionIFvvEEEE3$_2", "NSt6__ndk110__function6__funcIZN3kix11KixMainLoop9TerminateEvE3$_3NS_9allocatorIS4_EEFvvEEE", "ZN3kix11KixMainLoop9TerminateEvE3$_3", "N3kix8MainLoopE", "N3kix8KixTimerE", "N3kix5TimerE", "\"idle is null\"", "idle is null", "N3kix9TaskQueueE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix9TaskQueue4ExecERKNS_8functionIFvvEEEE3$_2NS_9allocatorIbEEEE", "ZN3kix9TaskQueue4ExecERKNSt6__ndk18functionIFvvEEEE3$_2", "android/net/ConnectivityManager", "getActiveNetwork", "()Landroid/net/Network;", "getLinkProperties", "(Landroid/net/Network;)Landroid/net/LinkProperties;", "android/net/LinkProperties", "getDnsServers", "()Ljava/util/List;", "java/util/List", "(I)Ljava/lang/Object;", "java/net/InetAddress", "getHostAddress", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/cares/1.14.0/ares_destroy.c", "ares_destroy", "ares__is_list_empty(&(channel->all_queries))", "ares__is_list_empty(&(channel->queries_by_qid[i]))", "ares__is_list_empty(&(channel->queries_by_timeout[i]))", "ares__destroy_servers_state", "ares__is_list_empty(&server->queries_to_server)", "/etc/hosts", "RES_OPTIONS", "ndots:", "retrans:", "retry:", "%s%u", "net.dns", "255.255.255.255", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/cares/1.14.0/ares_process.c", "handle_error", "query->server == whichserver", "ares__is_list_empty(&list_head)", "end_query", "sendreq->data_storage == NULL", "0123456789abcdef", "0123456789", "0123456789abcdef", "0123456789ABCDEF", "0123456789", "0123456789", "NSt6__ndk113basic_fstreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_filebufIcNS_11char_traitsIcEEEE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/srt/1.3.1/srtcore/api.cpp", "newConnection", "IPE: newConnection by listener socket id=", " which DOES NOT EXIST.", "newConnection: listen backlog=", " EXCEEDED", "IPE: newConnection: unexpected exception (probably std::bad_alloc)", "ACCEPT ERROR", "IPE when mapping a socket", "IPE when inserting a socket", "newConnection: connection rejected due to: ", "removeSocket", "IPE: For socket %", " MUXER id=", " NOT FOUND!", "socket: UNEXPECTED EXCEPTION: ", "bind: UNEXPECTED EXCEPTION: ", "bind/udp: UNEXPECTED EXCEPTION: ", "listen: UNEXPECTED EXCEPTION: ", "accept", "accept: UNEXPECTED EXCEPTION: ", "connect: UNEXPECTED EXCEPTION: ", "close: UNEXPECTED EXCEPTION: ", "getpeername", "getpeername: UNEXPECTED EXCEPTION: ", "getsockname", "getsockname: UNEXPECTED EXCEPTION: ", "getsockopt", "getsockopt: UNEXPECTED EXCEPTION: ", "setsockopt", "setsockopt: UNEXPECTED EXCEPTION: ", "send: UNEXPECTED EXCEPTION: ", "recv: UNEXPECTED EXCEPTION: ", "sendmsg", "sendmsg: UNEXPECTED EXCEPTION: ", "recvmsg", "recvmsg: UNEXPECTED EXCEPTION: ", "sendfile: UNEXPECTED EXCEPTION: ", "recvfile: UNEXPECTED EXCEPTION: ", "select: UNEXPECTED EXCEPTION: ", "selectEx: UNEXPECTED EXCEPTION: ", "epoll_create", "epoll_create: UNEXPECTED EXCEPTION: ", "epoll_add_usock", "epoll_add_usock: UNEXPECTED EXCEPTION: ", "epoll_add_ssock", "epoll_add_ssock: UNEXPECTED EXCEPTION: ", "epoll_update_usock", "epoll_update_usock: UNEXPECTED EXCEPTION: ", "epoll_update_ssock", "epoll_update_ssock: UNEXPECTED EXCEPTION: ", "epoll_remove_usock", "epoll_remove_usock: UNEXPECTED EXCEPTION: ", "epoll_remove_ssock", "epoll_remove_ssock: UNEXPECTED EXCEPTION: ", "epoll_wait", "epoll_wait: UNEXPECTED EXCEPTION: ", "epoll_release", "epoll_release: UNEXPECTED EXCEPTION: ", "perfmon", "perfmon: UNEXPECTED EXCEPTION: ", "bstats", "bstats: UNEXPECTED EXCEPTION: ", "getUDTHandle", "getUDTHandle: UNEXPECTED EXCEPTION: ", "getsockstate", "getsockstate: UNEXPECTED EXCEPTION: ", "bitset set argument out of range", "13CUDTException", "NOT RECEIVED", "DECRYPTION FAILED", "tsppd wrap period ends", "tsppd wrap period begins", "UNKNOWN.c++", " CONTROL size=", " arg=", " DATA size=", " seq=", " [REXMIT]", ": connection time out", ": connection rejected", ": unable to create/configure SRT socket", ": abort for security reasons", "Connection was broken", "Connection does not exist", "System resource failure", ": unable to create new threads", ": unable to allocate buffers", "File system failure", ": cannot seek read position", ": failure in read", ": cannot seek write position", ": failure in write", "Operation not supported", ": Cannot do this operation on a BOUND socket", ": Cannot do this operation on a CONNECTED socket", ": Bad parameters", ": Invalid socket ID", ": Cannot do this operation on an UNBOUND socket", ": Socket is not in listening state", ": Listen/accept is not supported in rendezous connection setup", ": Cannot call connect on UNBOUND socket in rendezvous connection setup", ": Incorrect use of Message API (sendmsg/recvmsg).", ": Incorrect use of Buffer API (send/recv) or File API (sendfile/recvfile).", ": Another socket is already listening on the same port", ": Message is too large to send (it must be less than the SRT send buffer size)", ": Invalid epoll ID", "Non-blocking call failure", ": no buffer available for sending", ": no data available for reading", ": transmission timed out", "The peer side has signalled an error", "Unknown error", "(unsupported sockaddr type)", "keepalive", "lossreport", "cgwarning", "ackack", "dropreq", "peererror", "EXT:none", "EXT:hsreq", "EXT:hsrsp", "EXT:kmreq", "EXT:kmrsp", "EXT:sid", "EXT:smoother", "EXT:unknown", "INDUCED/CONCLUDING", "ACCEPTED", "RENDEZVOUS (HSv5)", "REJECTED", "checktimer", "receive", "SRT.b", "SRT.c", "SRT.d", "SRT.t", "SRT.r", "1.3.1", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/srt/1.3.1/srtcore/core.cpp", "setOpt", "Invalid value for option SRTO_PBKEYLEN: ", "; allowed are: 0, 16, 24, 32", "SRTO_PAYLOADSIZE: value exceeds SRT_LIVE_MAX_PLSIZE, maximum payload per MTU.", "SRTO_KMREFRESHRATE=0x", ": setting SRTO_KMPREANNOUNCE=0x", " exceeds KmRefresh/2, 0x", " - OPTION REJECTED.", "fillSrtHandshake", "IPE: fillSrtHandshake: buffer too small: ", " (expected: ", "IPE: createSrtHandshake/sendSrtMsg called with value ", "fillSrtHandshake_HSRSP", "IPE: fillSrtHandshake_HSRSP: m_ullRcvPeerStartTime NOT SET!", "sendSrtMsg", "sndSrtMsg: cmd=%d unsupported", "createSrtHandshake", "createSrtHandshake: IPE: EXTENSION SET WHEN peer reports version 4 - fixing...", "createSrtHandshake: IPE (non-fatal): Attempting to craft HSRSP without received HSREQ. BLOCKING extensions.", "IPE: SRT_CMD_HSREQ was requested to be sent in HSv5 by an INITIATOR side!", ",SMOOTHER", ",KMX", "createSrtHandshake: stream id too long, limited to ", "createSrtHandshake: IPE: all keys have expired, no KM to send.", "createSrtHandshake: Agent has PW, but Peer sent no KMREQ. Sending error KMRSP response", "createSrtHandshake: IPE: srtkm_cmd=SRT_CMD_KMRSP and no kmdata!", "createSrtHandshake: IPE: wrong value of srtkm_cmd: ", "processSrtMsg", "KMREQ failed to process the request - ignoring", "processSrtMsg_HSREQ", "HSREQ/rcv: cmd=%d(HSREQ) len=%zu invalid", "HSREQ/rcv: cmd=%d(HSREQ) len=%zu vers=0x%x opts=0x%x delay=%d", "HSREQ/rcv: With HSv4 version >= ", "HSREQ/rcv: With HSv5 version must be >= ", "HSREQ/rcv: Peer version: ", " is too old for requested: ", " - REJECTING", "HSREQ/rcv: Agent uses ", "MESSAGE", " API, but the Peer declares ", " API. Not compatible transmission type, rejecting.", "HSREQ/rcv: Peer sent only VERSION + FLAGS HSREQ, but TSBPD flags are set. Rejecting.", "HSREQ/rcv: Peer sent only VERSION + FLAGS HSREQ, not getting any TSBPD settings.", "HSREQ/rcv: Agent did not set rcv-TSBPD - ignoring proposed latency from peer", "processSrtMsg_HSRSP", "HSRSP/rcv: With HSv4 version >= 1.2.0 is not acceptable.", "HSRSP/rcv: cmd=%d(HSRSP) len=%zu invalid", "HSRSP/rcv: BUG? Peer (responder) declares sending latency, but Agent turned off TSBPD.", "interpretSrtHandshake", "HS VERSION = 0, meaning the handshake has been rejected.", "HS VERSION=", " but no handshake extension found!", " but no handshake extension flags are set!", "HS-ext HSREQ found but invalid size: ", "interpretSrtHandshake: process HSREQ returned unexpected value ", "HS-ext HSRSP found but invalid size: ", "interpretSrtHandshake: no HSREQ/HSRSP block found in the handshake msg!", "HS KMREQ: Peer declares encryption, but agent does not.", "IPE: HS/KMREQ extracted without passing target buffer!", "HS KMREQ expected - none found!", "SMOOTHER BLOCK REPEATED!", "PEER'S SMOOTHER '", "' does not match AGENT'S SMOOTHER '", "HS EXT: Agent declares encryption, but Peer does not (Agent can still receive unencrypted packets from Peer).", "HS EXT: Agent uses '", "' smoother, but peer DID NOT DECLARE smoother (assuming 'live').", "startConnect", "createSrtHandshake failed - REJECTING.", "processAsyncConnectRequest", "processAsyncConnectRequest: REJECT reported from processRendezvous, not processing further.", "processAsyncConnectRequest: REJECT reported from HS processing, not processing further.", "IPE: processAsyncConnectRequest: createSrtHandshake failed, dismissing.", "processRendezvous", "COOKIE CONTEST UNRESOLVED: can't assign connection roles, please wait another minute.", "IPE: rst=RST_OK, but the packet has set -1 length - REJECTING (REQ-TIME: LOW)", "processRendezvous: IPE: PERIODIC HS: NO KMREQ RECORDED KMSTATE: RCV=", "IPE: KMX data not aligned to 4 bytes! size=", "IPE: INITIATOR responding AGREEMENT should declare no extensions to HS", "createSrtHandshake failed (IPE?), connection rejected. REQ-TIME: LOW", "processConnectResponse", "processConnectResponse: received non-addresed packet not UMSG_HANDSHAKE: ", "processConnectResponse: HANDSHAKE data buffer too small - possible blueboxing. Rejecting.", "MSS size ", "exceeds MTU size!", "processConnectResponse: Rendezvous-point received INDUCTION handshake (expected WAVEAHAND). Rejecting.", "processConnectResponse: Listener HSv5 did not set the SRT_MAGIC_CODE", "postConnect", "Connection established to: ", "checkUpdateCryptoKeyLen", ": PBKEYLEN conflict - OVERRIDDEN ", " by ", " from PEER (as AGENT is not SRTO_SENDER)", ": PBKEYLEN conflict - keep ", "; peer-advertised PBKEYLEN ", " rejected because Agent is SRTO_SENDER", ": IPE: enc_flags outside allowed 2, 3, 4: ", "WAVING -> WAVEAHAND or CONCLUSION", "rendezvousSwitchState", "rendezvousSwitchState: (IPE!){RESPONDER}[ATTENTION] awaits CONCLUSION+HSREQ, got CONCLUSION, remain in [ATTENTION]", "RENDEZVOUS COOKIE DRAW! Cannot resolve to a valid state.", "ATTENTION -> WAVEAHAND(conclusion), CONCLUSION(agreement/conclusion), AGREEMENT (done/conclusion)", "FINE -> CONCLUSION(agreement), AGREEMENT(done)", "INITIATED -> AGREEMENT(done)", "tsbpd", "RCV-DROPPED packet delay=", "acceptAndRespond", "acceptAndRespond: error creating handshake response", "checkNeedDrop", "The SRTO_TLPKTDROP flag can only be used with message API.", "SND-DROPPED ", " packets - lost delaying for ", "INVALID: Data size for sending declared with length: ", "Message length (", ") exceeds the size of sending buffer: ", ". Use SRTO_SNDBUF if needed.", "IPE: sendmsg: the loop exited, while not enough size, still connected, peer healthy. Impossible.", "Length of '", "' supplied to srt_recv.", "' supplied to srt_recvmsg.", "Encryption is required, but the peer did not supply correct credentials. Sending rejected.", "Reading from file is incompatible with TSBPD mode and would cause a deadlock\n", "updateCC: CAN'T DO UPDATE - smoother ", "ready", "NOT READY", "; sending buffer ", "NOT CREATED", "created", "sendCtrl(lite):", "sendCtrl: ", "processCtrl", "ATTACK/IPE: incoming ack seq ", " exceeds current ", "Received UMSG_ACK payload is not evened up to 4-byte based field size - cutting to ", " fields", "Invalid ACK size ", " fields - less than minimum required!", "IPE: ACK node overwritten when acknowledging ", " (ack extracted: ", "processCtrl/HS: IPE???: RESPONDER should receive all its handshakes in handshake phase.", "reXmit", "normal", "ENCRYPT FAILED - packet won't be sent, size=", " (encrypted)", "SRT:TsbPd", "REXMITTED", "RXS-UNKNOWN", "BELATED", "processData", "SEQUENCE DISCREPANCY, reception no longer possible. REQUESTING TO CLOSE.", "No room to store incoming packet: offset=", " avail=", " ack.seq=", " pkt.seq=", " rcv-remain=", "UNACKED", "processConnectRequest", "processConnectRequest: the packet received as handshake is not a handshake message", "UU:newConnection: rsp(REJECT): %d", "listen ret: ", "!!FATAL!!", "unknown:0", "??? (%d)", ": cmd=", ") len=", " KmState: SND=", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/srt/1.3.1/srtcore/crypto.cpp", "updateKmState", "processSrtMsg_KMREQ", "processSrtMsg_KMREQ: size of the KM (", ") is too small, must be >", "processSrtMsg_KMREQ: Received SEK is empty - REJECTING!", "processSrtMsg_KMREQ: Agent does not declare encryption - won't decrypt incoming packets!", "processSrtMsg_KMREQ: Can't create RCV CRYPTO CTX - must reject...", "KMREQ/rcv: (snd) Rx process failure - BADSECRET", "KMREQ/rcv: (snd) Rx process failure (IPE) - NOSECRET", "processSrtMsg_KMREQ: Can't create SND CRYPTO CTX - WILL NOT SEND-ENCRYPT correctly!", " SndKeyLen=", " TX CRYPTO CTX CLONED FROM RX", "processSrtMsg_KMRSP", "processSrtMsg_KMRSP: IPE: unknown peer error state: ", "processSrtMsg_KMRSP: received failure report. STATE: ", "processSrtMsg_KMRSP: IPE??? KM response key matches no key", "regenCryptoKm", "regenCryptoKm: IPE: applying key generated in snd crypto into rcv crypto: failed code=", "createCryptoCtx", "cryptoCtx: missing secret (", ") or key length (", "cryptoCtx: could not create ", " crypto ctx", "SECURITY UPDATE: Peer has surprised Agent with encryption, but KMX is pending - current packet size=", " dropped", "SECURITY FAILURE: Agent has no PW, but Peer sender has declared one, can't decrypt", "SECURITY STATUS: ", " - can't decrypt packet.", "decrypt ERROR (IPE): HaiCrypt_Rx_Data failure=", " - returning failed decryption", "TSBPD-snd", "TSBPD-rcv", "TLPktDrop", "NAKReport", "ReXmitFlag", "StreamAPI", "+unknown", "waveahand", "conclusion", "agreement", "ERROR:invalid", "ERROR:reject", "done(HSv5RDV)", "INVALID", "waving", "attention", "initiated", "version=", " type=", " ISN=", " MSS=", " FLW=", " reqtype=", " srcID=", " cookie=", " srcIP=", "HSREQ ", "KMREQ ", "(no extensions)", "PB_SUBSEQUENT", "PB_LAST", "PB_SOLO", "ORD_RELAXED", "ORD_REQUIRED", "EK_EVEN", "EK_ODD", "SN_ORIGINAL", "SN_REXMIT", "SRT:SndQ:worker", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/srt/1.3.1/srtcore/queue.cpp", "updateConnStatus", "RendezvousQueue: processAsyncConnectRequest FAILED. Setting TTL as EXPIRED.", "SRT:RcvQ:worker", "CChannel reported ERROR DURING TRANSMISSION - IPE. INTERRUPTING worker anyway.", "worker_RetrieveUnit", "LOCAL STORAGE DEPLETED. Dropping 1 packet: ", "worker_ProcessConnectionRequest", "PASSING request from: ", " to agent:", "Listener managed the connection request from: ", "worker_TryAsyncRend_OrStore", "IPE: AsyncOrRND: packet SWITCHED TO CONNECTED, but ID=", " is still not present in the socket ID dispatch hash - DISREGARDING", "TARGET=", "CONTROL: ", "DATA: msg=", "checkTransArgs", "LiveSmoother: invalid API use. Only sendmsg/recvmsg allowed.", "LiveSmoother: payload size: ", " exceeds maximum allowed ", "LiveSmoother: buffer size: ", " is too small for the maximum possible ", "slowdownSndPeriod", "IPE: FileSmoother: empty loss list!", "12SmootherBase", "12LiveSmoother", "15ObjectEventSlotI12LiveSmootherE", "13EventSlotBase", "12FileSmoother", "15ObjectEventSlotI12FileSmootherE", "ERROR CODE %d", "10CInfoBlock", "rtmpe", "N4rtmp8ProtocolE", "N7tincani8ProtocolE", "N4rtmp6ServerE", "N7tincani6ServerE", "N5tinet18TcpAcceptorHandlerE", "N4rtmp10ConnectionE", "N7tincani10ConnectionE", "N4rtmp9ConnectorE", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector6OnReadEPN5tinet9TcpSocketEE3$_0NS_9allocatorIbEEEE", "ZN4rtmp9Connector6OnReadEPN5tinet9TcpSocketEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector27OnWindowAcknowledgementSizeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_1NS7_IbEEEE", "ZN4rtmp9Connector27OnWindowAcknowledgementSizeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector13OnUserControlERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_2NS7_IbEEEE", "ZN4rtmp9Connector13OnUserControlERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector15OnHandshakeDoneEvE3$_3NS_9allocatorIbEEEE", "ZN4rtmp9Connector15OnHandshakeDoneEvE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector15OnHandshakeDoneEvE3$_4NS_9allocatorIbEEEE", "ZN4rtmp9Connector15OnHandshakeDoneEvE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector18OnKeepAliveTimeoutEPN5tinet5TimerEE3$_5NS_9allocatorIbEEEE", "ZN4rtmp9Connector18OnKeepAliveTimeoutEPN5tinet5TimerEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9Connector18OnKeepAliveTimeoutEPN5tinet5TimerEE3$_6NS_9allocatorIbEEEE", "ZN4rtmp9Connector18OnKeepAliveTimeoutEPN5tinet5TimerEE3$_6", "virtual void rtmp::Connector::OnRead(tinet::TcpSocket *)", "\"Exception occured when reading from net\"", "Exception occured when reading from net", "void rtmp::Connector::OnWindowAcknowledgementSize(const std::string &)", "\"Error decoding WindowAcknowledgementSize\"", "Error decoding WindowAcknowledgementSize", "void rtmp::Connector::OnUserControl(const std::string &)", "\"Error decoding usercontrol, event:\", packet.GetEvent()", "Error decoding usercontrol, event:", "void rtmp::Connector::OnHandshakeDone()", "\"handshake complete, initiator:\", initiator_", "handshake complete, initiator:", "\"Unexpected connection type: \", connectionType_", "Unexpected connection type: ", "void rtmp::Connector::OnKeepAliveTimeout(tinet::Timer *)", "\"Close on write exception\"", "Close on write exception", "\"Close on keepalive timeout\"", "Close on keepalive timeout", "N5tinet16TcpSocketHandlerE", "N5tinet19CallbackTimerTask_0IN4rtmp9ConnectorEEE", "N5tinet9TimerTaskE", "N4rtmp13DefaultStreamE", "N7tincani6StreamE", "bool rtmp::Handshaker::OnKeying(tinet::Reader &, tinet::Writer &)", "\"version :\", request.GetVersion()", "version :", "\"Error decoding Handshake Keying, initiator:\", initiator_", "Error decoding Handshake Keying, initiator:", "bool rtmp::Handshaker::OnVerify(tinet::Reader &, tinet::Writer &)", "\"Error decoding HandshakeVerify\"", "Error decoding HandshakeVerify", "bool rtmp::Handshaker::KeyExchange(const UInt8 *, UInt8 *, UInt8 *, UInt8 *)", "\"KeyExchange failed\"", "KeyExchange failed", "N4rtmp10HandshakerE", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp10Handshaker8OnKeyingERN5tinet6ReaderERNS4_6WriterEE3$_0NS_9allocatorIbEEEE", "ZN4rtmp10Handshaker8OnKeyingERN5tinet6ReaderERNS1_6WriterEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp10Handshaker8OnKeyingERN5tinet6ReaderERNS4_6WriterEE3$_1NS_9allocatorIbEEEE", "ZN4rtmp10Handshaker8OnKeyingERN5tinet6ReaderERNS1_6WriterEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp10Handshaker8OnVerifyERN5tinet6ReaderERNS4_6WriterEE3$_2NS_9allocatorIbEEEE", "ZN4rtmp10Handshaker8OnVerifyERN5tinet6ReaderERNS1_6WriterEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp10Handshaker11KeyExchangeEPKhPhS6_S6_E3$_3NS_9allocatorIbEEEE", "ZN4rtmp10Handshaker11KeyExchangeEPKhPhS3_S3_E3$_3", "[Hello](plain)", "[Hello](encrypted)", "[Hello](unknown)", "N4rtmp5HelloE", "N5tinet6PacketE", "ignoreClientHandshake", "ignore rtmp client handshake on server side", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/tincan/rtmp/2.0/sources/keying.cpp", "virtual bool rtmp::Keying::Unpack(tinet::Reader &)", "noVerify", "Keying", "N4rtmp6KeyingE", "rtmp::Message *rtmp::MessageReader::Read()", "\"Error reading on flow\"", "Error reading on flow", "bool rtmp::MessageReader::ReadBasicHeader()", "\"Too many flows: \", flows_.size()", "Too many flows: ", "\"First chunk must have type of FULL or SAME_STREAM\"", "First chunk must have type of FULL or SAME_STREAM", "void rtmp::MessageReader::ProcessMessage(rtmp::Message *)", "\"Error decoding SetChunkSize\"", "Error decoding SetChunkSize", "\"Error decoding AbortMessage\"", "Error decoding AbortMessage", "N4rtmp13MessageReaderE", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp13MessageReader4ReadEvE3$_0NS_9allocatorIbEEEE", "ZN4rtmp13MessageReader4ReadEvE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp13MessageReader15ReadBasicHeaderEvE3$_1NS_9allocatorIbEEEE", "ZN4rtmp13MessageReader15ReadBasicHeaderEvE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp13MessageReader15ReadBasicHeaderEvE3$_2NS_9allocatorIbEEEE", "ZN4rtmp13MessageReader15ReadBasicHeaderEvE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp13MessageReader14ProcessMessageEPNS2_7MessageEE3$_3NS_9allocatorIbEEEE", "ZN4rtmp13MessageReader14ProcessMessageEPNS_7MessageEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp13MessageReader14ProcessMessageEPNS2_7MessageEE3$_4NS_9allocatorIbEEEE", "ZN4rtmp13MessageReader14ProcessMessageEPNS_7MessageEE3$_4", "N4rtmp13MessageWriterE", "N4rtmp10OutputFlowE", "N4rtmp16PlainInputBufferE", "N5tinet11InputBufferE", "N4rtmp17PlainOutputBufferE", "N5tinet12OutputBufferE", "N4rtmp12SetChunkSizeE", "N4rtmp16SetPeerBandWidthE", "N4rtmp8TotalQosE", "N7tincani3QosE", "N4rtmp11UserControlE", "virtual bool rtmp::Verify::Unpack(tinet::Reader &)", "N4rtmp6VerifyE", "N4rtmp8VideoQosE", "N4rtmp25WindowAcknowledgementSizeE", "N4rtmp12AbortMessageE", "N4rtmp15AcknowledgementE", "N4rtmp8AudioQosE", "Genuine Adobe Flash Player 001", "Genuine Adobe Flash Media Server 001", "N4rtmp20DiffieHellmanContextE", "N4rtmp20EncryptedInputBufferE", "N4rtmp21EncryptedOutputBufferE", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9InputFlow21ReadMessageHeaderFullEPN5tinet11InputBufferEE3$_0NS_9allocatorIbEEEE", "ZN4rtmp9InputFlow21ReadMessageHeaderFullEPN5tinet11InputBufferEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9InputFlow27ReadMessageHeaderSameStreamEPN5tinet11InputBufferEE3$_1NS_9allocatorIbEEEE", "ZN4rtmp9InputFlow27ReadMessageHeaderSameStreamEPN5tinet11InputBufferEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9InputFlow27ReadMessageHeaderSameLengthEPN5tinet11InputBufferEE3$_2NS_9allocatorIbEEEE", "ZN4rtmp9InputFlow27ReadMessageHeaderSameLengthEPN5tinet11InputBufferEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN4rtmp9InputFlow27ReadMessageHeaderContinuousEPN5tinet11InputBufferEE3$_3NS_9allocatorIbEEEE", "ZN4rtmp9InputFlow27ReadMessageHeaderContinuousEPN5tinet11InputBufferEE3$_3", "bool rtmp::InputFlow::ReadMessageHeaderFull(tinet::InputBuffer *)", "\"length of this message exceeded: \", messageLength_, \" > \", Constants::MAX_MESSAGE_LENGTH", "length of this message exceeded: ", "bool rtmp::InputFlow::ReadMessageHeaderSameStream(tinet::InputBuffer *)", "bool rtmp::InputFlow::ReadMessageHeaderSameLength(tinet::InputBuffer *)", "bool rtmp::InputFlow::ReadMessageHeaderContinuous(tinet::InputBuffer *)", "[]:invalid URI authority: \"", "invalid domain name: \"", ".invalid IP address: \"", ":invalid IP v6 address: \"", "/invalid URI path: \"", "attempt to access empty URI path", ") invalid segment encoding (using as is)", ") missing key (ignoring value)", ") missing \"", "\" (ignoring key)", ") invalid key encoding (using as is)", ") invalid value encoding (using as is)", "invalid URI scheme: \"", "invalid URI: \"", "URI \"", "cannot convert to bool: ", "cannot convert to int, out of range: ", "cannot convert to int, invalid chars: ", "cannot convert to unsigned int, out of range: ", "cannot convert to unsigned int, invalid chars: ", "cannot convert to long long int, out of range: ", "cannot convert to long long int, invalid chars: ", "cannot convert to unsigned long long int, out of range: ", "cannot convert to unsigned long long int, invalid chars: ", "cannot convert to double, out of range: ", "cannot convert to double, invalid chars: ", "invalid URI fragment: \"", ", invalid encoding (using as is)", "FMLE/3.0 (compatible; FMSc/1.0)", "app://flash.swf", "rtmp://localhost/test", "N6tincan10ClientInfoE", "N6tincan15DefaultInstanceE", "N6tincan8InstanceE", "N7tincani13ServerHandlerE", "N6tincan20DefaultNetConnectionE", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection9OnMessageEhRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7tincani10ConnectionEE3$_0NS7_IbEEEE", "ZN6tincan20DefaultNetConnection9OnMessageEhRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPN7tincani10ConnectionEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection13OnUserControlERN5tinet6ReaderEE3$_1NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection13OnUserControlERN5tinet6ReaderEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection9OnCommandEhRN5tinet6ReaderEE3$_2NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection9OnCommandEhRN5tinet6ReaderEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection15OnClientCommandERNS2_7CommandEE3$_3NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection15OnClientCommandERNS_7CommandEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection15OnClientCommandERNS2_7CommandEE3$_4NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection15OnClientCommandERNS_7CommandEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection15OnClientCommandERNS2_7CommandEE3$_5NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection15OnClientCommandERNS_7CommandEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection11OnFCPublishERNS2_7CommandEE3$_6NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection11OnFCPublishERNS_7CommandEE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_7NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection8OnResultERNS_7CommandEPNS_11TransactionEE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_8NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection8OnResultERNS_7CommandEPNS_11TransactionEE3$_8", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_9NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection8OnResultERNS_7CommandEPNS_11TransactionEE3$_9", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection20OnCreateStreamResultERNS2_7CommandEPNS2_11TransactionEE4$_10NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection20OnCreateStreamResultERNS_7CommandEPNS_11TransactionEE4$_10", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection7OnErrorERNS2_7CommandEPNS2_11TransactionEE4$_11NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection7OnErrorERNS_7CommandEPNS_11TransactionEE4$_11", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection7OnErrorERNS2_7CommandEPNS2_11TransactionEE4$_12NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection7OnErrorERNS_7CommandEPNS_11TransactionEE4$_12", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection7OnErrorERNS2_7CommandEPNS2_11TransactionEE4$_13NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection7OnErrorERNS_7CommandEPNS_11TransactionEE4$_13", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection14OnClientStatusERNS2_7CommandEE4$_14NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection14OnClientStatusERNS_7CommandEE4$_14", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection15OnServerCommandERNS2_7CommandEE4$_15NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection15OnServerCommandERNS_7CommandEE4$_15", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection15OnServerCommandERNS2_7CommandEE4$_16NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection15OnServerCommandERNS_7CommandEE4$_16", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection9OnConnectERNS2_7CommandEE4$_17NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection9OnConnectERNS_7CommandEE4$_17", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection14OnCreateStreamERNS2_7CommandEE4$_18NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection14OnCreateStreamERNS_7CommandEE4$_18", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection14OnCreateStreamERNS2_7CommandEE4$_19NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection14OnCreateStreamERNS_7CommandEE4$_19", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection14OnDeleteStreamERNS2_7CommandEE4$_20NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection14OnDeleteStreamERNS_7CommandEE4$_20", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection14OnDeleteStreamERNS2_7CommandEE4$_21NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection14OnDeleteStreamERNS_7CommandEE4$_21", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan20DefaultNetConnection16OnUnknownCommandERNS2_7CommandEPNS2_11TransactionEE4$_22NS_9allocatorIbEEEE", "ZN6tincan20DefaultNetConnection16OnUnknownCommandERNS_7CommandEPNS_11TransactionEE4$_22", "objectEncoding", "Connection succeeded", "application not found", "virtual void tincan::DefaultNetConnection::OnMessage(UInt8, const std::string &, tincani::Connection *)", "\"un handle message type:\", type", "un handle message type:", "void tincan::DefaultNetConnection::OnUserControl(tinet::Reader &)", "\"Error decoding UserControl\"", "Error decoding UserControl", "void tincan::DefaultNetConnection::OnCommand(UInt8, tinet::Reader &)", "\"command decode failed\"", "command decode failed", "void tincan::DefaultNetConnection::OnClientCommand(tincan::Command &)", "\"receive command:\", command.GetName(), \", while connection not established\"", "receive command:", ", while connection not established", "\"transaction not found, id:\", command.GetTransactionId(), \", command type:\", commandType", "transaction not found, id:", ", command type:", "\"unsupported command:\", commandType", "unsupported command:", "void tincan::DefaultNetConnection::OnFCPublish(tincan::Command &)", "\"code:\", code, \", desp:\", desp.data()", ", desp:", "void tincan::DefaultNetConnection::OnResult(tincan::Command &, tincan::Transaction *)", "\"_result transaction id:\", command.GetTransactionId(), \" not found\"", "_result transaction id:", "\"status:\", status_, \" not open\"", " not open", "\"unknown command:\", commandType", "unknown command:", "void tincan::DefaultNetConnection::OnCreateStreamResult(tincan::Command &, tincan::Transaction *)", "\"id:\", id", "void tincan::DefaultNetConnection::OnError(tincan::Command &, tincan::Transaction *)", "\"_error transaction id:\", command.GetTransactionId(), \" not found\"", "_error transaction id:", "\"action command type:\", CommandType::Translate(action->GetCommandType())", "action command type:", "void tincan::DefaultNetConnection::OnClientStatus(tincan::Command &)", "void tincan::DefaultNetConnection::OnServerCommand(tincan::Command &)", "void tincan::DefaultNetConnection::OnConnect(tincan::Command &)", "\"connect more than once\"", "connect more than once", "void tincan::DefaultNetConnection::OnCreateStream(tincan::Command &)", "\"client not support create stream command\"", "client not support create stream command", "\"create stream failed\"", "create stream failed", "void tincan::DefaultNetConnection::OnDeleteStream(tincan::Command &)", "\"client not support delete stream command\"", "client not support delete stream command", "\"delete stream:\", id, \" not found\"", "delete stream:", "void tincan::DefaultNetConnection::OnUnknownCommand(tincan::Command &, tincan::Transaction *)", "command.Dump()", "N6tincan13NetConnectionE", "N7tincani17ConnectionHandlerE", "N6tincan16DefaultNetStreamE", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream9OnCommandEhjRN5tinet6ReaderEE3$_0NS_9allocatorIbEEEE", "ZN6tincan16DefaultNetStream9OnCommandEhjRN5tinet6ReaderEE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream9OnCommandEhjRN5tinet6ReaderEE3$_1NS_9allocatorIbEEEE", "ZN6tincan16DefaultNetStream9OnCommandEhjRN5tinet6ReaderEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream8OnStatusERNS2_7CommandEE3$_2NS_9allocatorIbEEEE", "ZN6tincan16DefaultNetStream8OnStatusERNS_7CommandEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream6OnDataEhjRN5tinet6ReaderEE3$_3NS_9allocatorIbEEEE", "ZN6tincan16DefaultNetStream6OnDataEhjRN5tinet6ReaderEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream6OnDataEhjRN5tinet6ReaderEE3$_4NS_9allocatorIbEEEE", "ZN6tincan16DefaultNetStream6OnDataEhjRN5tinet6ReaderEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream7OnVideoEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_5NS7_IbEEEE", "ZN6tincan16DefaultNetStream7OnVideoEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan16DefaultNetStream7OnAudioEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_6NS7_IbEEEE", "ZN6tincan16DefaultNetStream7OnAudioEjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_6", "details", "NetStream.Play.Start", "play start", "NetStream.Play.Reset", "play reset", "NetStream.Publish.Start", "publish start", "NetStream.Publish.Reset", "publish reset", "NetStream.Play.PublishNotify", "publish notify", "NetStream.Play.UnpublishNotify", "publish unnotify", "NetStream.Publish.BadName", "publish badname", "void tincan::DefaultNetStream::OnCommand(UInt8, UInt32, tinet::Reader &)", "\"read command failed\"", "read command failed", "\"un handle command:\", commandType", "un handle command:", "void tincan::DefaultNetStream::OnStatus(tincan::Command &)", "\"Unknown status:\", code.data()", "Unknown status:", "void tincan::DefaultNetStream::OnData(UInt8, UInt32, tinet::Reader &)", "\"receive data while status is:\", status_", "receive data while status is:", "\"read data failed\"", "read data failed", "void tincan::DefaultNetStream::OnVideo(UInt32, const std::string &)", "\"receive video while status is:\", status_", "receive video while status is:", "void tincan::DefaultNetStream::OnAudio(UInt32, const std::string &)", "\"receive audio while status is:\", status_", "receive audio while status is:", "N6tincan9NetStreamE", "N7tincani13StreamHandlerE", "N6tincan15DefaultResponseE", "N6tincan8ResponseE", "FMS/5,0,1,1076", "N6tincan10ServerInfoE", "N5tinet19CallbackTimerTask_0IN6tincan11TransactionEEE", "N6tincan11UserControlE", "swfUrl", "tcUrl", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "fmsVer", "\"class\": \"Command\", ", "\"name\": \"", "\"id\": ", "\"info\": ", "\"args\": [", "N6tincan7CommandE", "deleteStream", "closeStream", "receiveAudio", "receiveVideo", "_result", "setPeerInfo", "releaseStream", "onFCPublish", "onFCSubscribe", "tincan::Connector::Connector(tincan::DefaultNetConnection *, const std::string &, amf::Array &, void *)", "\"connect url:\", url, \" failed\"", "connect url:", "virtual void tincan::Connector::OnMessage(UInt8, const std::string &, tincani::Connection *)", "void tincan::Connector::OnCommand(UInt8, tinet::Reader &)", "\"receive close command\"", "receive close command", "void tincan::Connector::OnResult(tincan::Command &, tincan::Transaction *)", "\"result status error\"", "result status error", "\"connectTransactionId:\", command.GetTransactionId(), \" error\"", "connectTransactionId:", "\"code:\", code", "N6tincan9ConnectorE", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9ConnectorC1EPNS2_20DefaultNetConnectionERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERN3amf5ArrayEPvE3$_0NS9_IbEEEE", "ZN6tincan9ConnectorC1EPNS_20DefaultNetConnectionERKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERN3amf5ArrayEPvE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector9OnMessageEhRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7tincani10ConnectionEE3$_1NS7_IbEEEE", "ZN6tincan9Connector9OnMessageEhRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPN7tincani10ConnectionEE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_2NS_9allocatorIbEEEE", "ZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_2", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_3NS_9allocatorIbEEEE", "ZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_3", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_4NS_9allocatorIbEEEE", "ZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_4", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_5NS_9allocatorIbEEEE", "ZN6tincan9Connector9OnCommandEhRN5tinet6ReaderEE3$_5", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_6NS_9allocatorIbEEEE", "ZN6tincan9Connector8OnResultERNS_7CommandEPNS_11TransactionEE3$_6", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_7NS_9allocatorIbEEEE", "ZN6tincan9Connector8OnResultERNS_7CommandEPNS_11TransactionEE3$_7", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_8NS_9allocatorIbEEEE", "ZN6tincan9Connector8OnResultERNS_7CommandEPNS_11TransactionEE3$_8", "NSt6__ndk120__shared_ptr_pointerIPbZN6tincan9Connector8OnResultERNS2_7CommandEPNS2_11TransactionEE3$_9NS_9allocatorIbEEEE", "ZN6tincan9Connector8OnResultERNS_7CommandEPNS_11TransactionEE3$_9", "N5tinet15CallbackEvent_0IN6tincan9ConnectorEEE", "NetConnection.Connect.Success", "\"class\": \"Data\", ", "N6tincan4DataE", "N3amf5ArrayE", "NSt6__ndk16vectorIN3amf7VariantENS_9allocatorIS2_EEEE", "NSt6__ndk113__vector_baseIN3amf7VariantENS_9allocatorIS2_EEEE", "NSt6__ndk120__vector_base_commonILb1EEE", "N3amf7BooleanE", "N3amf10NoEncodingE", "N3amf8EncodingE", "N3amf8NoReaderE", "N3amf6ReaderE", "N3amf8NoWriterE", "N3amf6WriterE", "N3amf4NullE", "N3amf6NumberE", "N3amf6ObjectE", "NSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3amf7VariantENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE", "N3amf6StringE", "N3amf8AnyValueINS_5EmptyEEE", "N3amf3AnyE", "N3amf8AnyValueINS_4NullEEE", "N3amf8AnyValueINS_7BooleanEEE", "N3amf8AnyValueINS_6NumberEEE", "N3amf8AnyValueINS_6StringEEE", "N3amf8AnyValueINS_5ArrayEEE", "N3amf8AnyValueINS_6ObjectEEE", "N3amf8AnyValueINS_9ByteArrayEEE", "N3amf8AnyValueINS_11UnsupportedEEE", "N3amf12AMF0EncodingE", "N3amf10AMF0ReaderE", "N3amf12AMF3EncodingE", "N3amf10AMF3ReaderE", "NSt6__ndk120__shared_ptr_pointerIPbZN3amf10AMF3Reader10ReadObjectERNS2_7VariantERN5tinet6ReaderEE3$_0NS_9allocatorIbEEEE", "ZN3amf10AMF3Reader10ReadObjectERNS_7VariantERN5tinet6ReaderEE3$_0", "bool amf::AMF3Reader::ReadObject(amf::Variant &, tinet::Reader &)", "\"Indeterminable object class: \", className.As<String>()", "Indeterminable object class: ", "N3amf9ByteArrayE", "#ByteArray", "N3amf5EmptyE", "N3amf11UnsupportedE", "#Unsupported", "N5tinet8InBufferE", "N5tinet6ReaderE", "N5tinet13SocketAddressE", "N5tinet12StringBufferE", "N5tinet6WriterE", "N5tinet14DefaultServiceE", "N5tinet7ServiceE", "N5tinet18DefaultTcpAcceptorE", "N5tinet11TcpAcceptorE", "N5tinet15SelectorHandlerE", "N5tinet15CallbackEvent_1INS_18DefaultTcpAcceptorEN3arc5ScopeEEE", "Try again", "Broken pipe", "Transport endpoint is not connected", "Connection refused", "Connection reset by peer", "N5tinet16DefaultTcpSocketE", "N5tinet9TcpSocketE", "N5tinet12FlushHandlerE", "N5tinet19CallbackTimerTask_0INS_16DefaultTcpSocketEEE", "N5tinet15CallbackEvent_1INS_16DefaultTcpSocketEN3arc5ScopeEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN5tinet16DefaultTcpSocketEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN5tinet16DefaultTcpSocketEEERS2_PT_MS7_FvvEEUlvE_", "epoll", "kqueue", "wheel", "linked", "N5tinet19DefaultClassManagerE", "N5tinet11ClassLoaderINS_8SelectorEEE", "N5tinet11ClassLoaderINS_12TimerManagerEEE", "N5tinet11ClassLoaderINS_9EventLoopEEE", "N5tinet11ClassLoaderINS_13BufferManagerEEE", "N5tinet11ClassLoaderINS_9AsyncLoopEEE", "N5tinet16DefaultEventLoopE", "N5tinet9EventLoopE", "N5tinet13EPollSelectorE", "N5tinet8SelectorE", "N5tinet19LinkedBufferManagerE", "N5tinet13BufferManagerE", "N5tinet15LinkedBufferOutE", "N5tinet9BufferOutE", "N5tinet12NullSelectorE", "N5tinet14SelectSelectorE", "N5tinet11UvAsyncLoopE", "N5tinet9AsyncLoopE", "N5tinet14UvAsyncTriggerE", "N5tinet12AsyncTriggerE", "N5tinet11UvEventLoopE", "N5tinet10UvSelectorE", "N5tinet14UvTimerManagerE", "N5tinet12TimerManagerE", "N5tinet17WheelTimerManagerE", "N5tinet16DefaultAsyncLoopE", "NSt6__ndk120__shared_ptr_pointerIPNS_5queueIPN5tinet19DefaultAsyncTriggerENS_5dequeIS4_NS_9allocatorIS4_EEEEEENS_14default_deleteIS9_EENS6_IS9_EEEE", "NSt6__ndk114default_deleteINS_5queueIPN5tinet19DefaultAsyncTriggerENS_5dequeIS4_NS_9allocatorIS4_EEEEEEEE", "N5tinet19DefaultAsyncTriggerE", "N5tinet14LinkedBlockOutE", "N5tinet8BlockOutE", "N5tinet14LinkedBufferInE", "N5tinet8BufferInE", "N5tinet7UvTimerE", "N5tinet5TimerE", "N5tinet5WheelE", "N5tinet9WheelItemE", "N5tinet10WheelTimerE", "N5tinet13LinkedBlockInE", "N5tinet7BlockInE", "bad_any_cast: failed conversion using any_cast", "N3arc12bad_any_castE", "NSt6__ndk120__shared_ptr_pointerIPbZN3arc12_GLOBAL__N_19NormalizeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_IbEEEE", "ZN3arc12_GLOBAL__N_19NormalizeERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "arc_conf_type", "Config file format", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/arc/2.0/sources/config.cpp", "conf/config", "arc_conf_file", "Config file path", "arc_conf_reload_interval", "Config file reload interval", "operator[^A-Za-z0-9_][^\\(]*\\(\\)", "\\(\\) [^\\(\\)]*$", "[^ ]+ ", "\\(\\)::", "json", "NSt6__ndk120__shared_ptr_pointerIPbZN3arc10JsonConfig6ReloadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbE3$_0NS7_IbEEEE", "ZN3arc10JsonConfig6ReloadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbE3$_0", "NSt6__ndk120__shared_ptr_pointerIPbZN3arc10JsonConfig6ReloadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbE3$_1NS7_IbEEEE", "ZN3arc10JsonConfig6ReloadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbE3$_1", "NSt6__ndk120__shared_ptr_pointerIPbZN3arc10JsonConfig6ReloadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbE3$_2NS7_IbEEEE", "ZN3arc10JsonConfig6ReloadERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbE3$_2", "virtual void arc::JsonConfig::Reload(const std::string &, bool)", "\" path: \", path, \" key: \", key + \".\" + itVal.name(), \" value: type(\", itVal->type(), \")\"", " path: ", " key: ", " value: type(", "\" path: \", path, \" key: \", key + \".\" + it.name(), \" value: type(\", it->type(), \")\"", "\" path: \", path, \" error: root is not object or parse failed\"", " error: root is not object or parse failed", "NSt6__ndk114basic_ifstreamIcNS_11char_traitsIcEEEE", "N3arc3any6holderIlEE", "N3arc3any6holderIdEE", "N3arc3any6holderIbEE", "N3arc3any6holderINSt6__ndk16vectorIS0_NS2_9allocatorIS0_EEEEEE", "NSt6__ndk16vectorIN3arc3anyENS_9allocatorIS2_EEEE", "NSt6__ndk113__vector_baseIN3arc3anyENS_9allocatorIS2_EEEE", "N3arc3any6holderINSt6__ndk113unordered_mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4hashIS9_EENS2_8equal_toIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEE", "NSt6__ndk113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3arc3anyENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEE", "__root__", "dropped logs from ", "LoggerManager::Drop", "anonymous", "N3arc13LoggerManagerE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10LoggerNodeENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10LoggerFileENS_9allocatorIS2_EEEE", "arc_loglevel", "Set default logger level [verbose, debug, info, warning, error, fatal]", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/arc/2.0/sources/loggernode.cpp", "virtual UInt8 arc::LoggerNode::GetInheritLevel() const", "log_level", "N3arc10LoggerNodeE", "NSt6__ndk110__function6__funcIZN3arc10LoggerNode5PrintEhNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_0NS7_ISA_EEFvmEEE", "ZN3arc10LoggerNode5PrintEhNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0", "N3arc6LoggerE", "NSt6__ndk110__function6__baseIFvmEEE", "NSt6__ndk120__shared_ptr_pointerIPN3arc11ScopeHandleENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc11ScopeHandleEEE", "N3arc12_GLOBAL__N_114SingletonStackE", "NSt6__ndk15stackIN3arc12_GLOBAL__N_17PointerENS_5dequeIS3_NS_9allocatorIS3_EEEEEE", "N3arc10SlotHandleE", "Index out of range.", "N3arc16uri_syntax_errorE", "/.@%;=", "/.@&%;=", "/.@&l;=%", "N3arc10BaseConfigE", "N3arc10BaseConfig8ConfigerE", "N3arc6ConfigE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10BaseConfig8ConfigerENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN3arc3anyENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc3anyEEE", "NSt6__ndk120__shared_ptr_emplaceIN3arc3anyENS_9allocatorIS2_EEEE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/re2.cc", "Unknown encoding ", "Error parsing '", "Error compiling '", "pattern too large - compile failed", "\\x00", "Invalid RE2: ", "RE2: invalid startpos, endpos pair. [", "startpos: ", "endpos: ", "text size: ", "DFA out of memory: size ", "bytemap range ", "list count ", "SearchDFA inconsistency", "SearchOnePass inconsistency", "SearchBitState inconsistency", "SearchNFA inconsistency", "Rewrite schema error: '\\' not allowed at end.", "Rewrite schema error: '\\' must be followed by a digit or '\\'.", "Rewrite schema requests %d matches, but the regexp only has %d parenthesized subexpressions.", "requested group ", " in regexp ", "invalid rewrite pattern: ", "Error reverse compiling '", "pattern too large - reverse compile failed", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/regexp.cc", "Regexp not destroyed.", "Bad reference count ", "Unexpected op in Regexp::Equal: ", "no error", "unexpected error", "invalid escape sequence", "invalid character class", "invalid character class range", "missing ]", "missing )", "trailing \\", "no argument for repetition operator", "invalid repetition size", "bad repetition operator", "invalid perl operator", "invalid UTF-8", "invalid named capture group", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/walker-inl.h", "Stack not empty.", "NumCapturesWalker::ShortVisit called", "NamedCapturesWalker::ShortVisit called", "CaptureNamesWalker::ShortVisit called", "Walk NULL", "N3re217NumCapturesWalkerE", "N3re26Regexp6WalkerIiEE", "N3re219NamedCapturesWalkerE", "N3re218CaptureNamesWalkerE", "Job stack overflow.", "Unexpected opcode: ", " arg ", "Bad arg in kInstAltMatch: ", "Bad arg in kInstCapture: ", "N3re28CompilerE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/compile.cc", "should never happen", "Compiler::Copy called!", "No ranges in char class", "Missing case in Compiler: ", "hello, world", "N3re26Regexp6WalkerINS_4FragEEE", " flag=%#x", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/dfa.cc", "unhandled opcode: ", "DeadState in RunStateOnByte", "NULL state in RunStateOnByte", "Unexpected special state in RunStateOnByte", "StateSaver failed to restore state.", "context does not contain text", "Failed to analyze start state.", "RunStateOnByteUnlocked failed after ResetCache", "RunStateOnByteUnlocked failed after Reset", "unhandled ", " in AddToThreadq", "(?,?)", "(%d,?)", "(%d,%d)", "Bad args: nsubmatch=", "Unexpected opcode in short circuit: ", " in ComputeFirstByte", " in Prog::Fanout()", "Unhandled ", " in step", "Cannot use SearchOnePass for unanchored matches.", "N3re216RepetitionWalkerE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/parse.cc", "RepetitionWalker::ShortVisit called", "Concat of ", "unknown round: ", "RE2: unexpected op: ", "Bad call to ParseState::ParsePerlFlags", "AddFoldedRange recurses too much.", "Bad hex digit ", "[:alnum:]", "[:^alnum:]", "[:alpha:]", "[:^alpha:]", "[:ascii:]", "[:^ascii:]", "[:blank:]", "[:^blank:]", "[:cntrl:]", "[:^cntrl:]", "[:digit:]", "[:^digit:]", "[:graph:]", "[:^graph:]", "[:lower:]", "[:^lower:]", "[:print:]", "[:^print:]", "[:punct:]", "[:^punct:]", "[:space:]", "[:^space:]", "[:upper:]", "[:^upper:]", "[:word:]", "[:^word:]", "[:xdigit:]", "[:^xdigit:]", "altmatch -> %d | %d", "byte%s [%02x-%02x] -> %d", "capture %d -> %d", "emptywidth %#x -> %d", "match! %d", "nop -> %d", "[%02x-%02x] -> %d\n", "%d. %s\n", "%d+ %s\n", "N3re214SimplifyWalkerE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/simplify.cc", "Simplify failed on ", "Case not handled in ComputeSimple: ", "CoalesceWalker::ShortVisit called", "DoCoalesce failed: r1->op() is ", "DoCoalesce failed: r2->op() is ", "SimplifyWalker::ShortVisit called", "Simplify case not handled: ", "Malformed repeat ", "N3re26Regexp6WalkerIPS0_EE", "N3re214ToStringWalkerE", " [truncated]", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/re2/2018.04.01/re2/tostring.cc", "kRegexpCapture cap() == 0", "[^\\x00-\\x{10ffff}]", "(?:)", "Bad final char: ", "{%d,}", "{%d}", "{%d,%d}", "(?-m:^)", "(?-m:$)", "(?HaveMatch:%d)", "(){}[]*+?|.^$\\", "[]^-\\", "\\x%02x", "\\x{%x}", "Adlam", "Ahom", "Anatolian_Hieroglyphs", "Arabic", "Armenian", "Avestan", "Balinese", "Bamum", "Bassa_Vah", "Batak", "Bengali", "Bhaiksuki", "Bopomofo", "Brahmi", "Braille", "Buginese", "Buhid", "Canadian_Aboriginal", "Carian", "Caucasian_Albanian", "Chakma", "Cham", "Cherokee", "Common", "Coptic", "Cuneiform", "Cypriot", "Cyrillic", "Deseret", "Devanagari", "Duployan", "Egyptian_Hieroglyphs", "Elbasan", "Ethiopic", "Georgian", "Glagolitic", "Gothic", "Grantha", "Greek", "Gujarati", "Gurmukhi", "Hangul", "Hanunoo", "Hatran", "Hebrew", "Hiragana", "Imperial_Aramaic", "Inherited", "Inscriptional_Pahlavi", "Inscriptional_Parthian", "Javanese", "Kaithi", "Kannada", "Katakana", "Kayah_Li", "Kharoshthi", "Khmer", "Khojki", "Khudawadi", "Latin", "Lepcha", "Limbu", "Linear_A", "Linear_B", "Lisu", "Lycian", "Lydian", "Mahajani", "Malayalam", "Mandaic", "Manichaean", "Marchen", "Masaram_Gondi", "Meetei_Mayek", "Mende_Kikakui", "Meroitic_Cursive", "Meroitic_Hieroglyphs", "Miao", "Modi", "Mongolian", "Multani", "Myanmar", "Nabataean", "New_Tai_Lue", "Newa", "Nushu", "Ogham", "Ol_Chiki", "Old_Hungarian", "Old_Italic", "Old_North_Arabian", "Old_Permic", "Old_Persian", "Old_South_Arabian", "Old_Turkic", "Oriya", "Osage", "Osmanya", "Pahawh_Hmong", "Palmyrene", "Pau_Cin_Hau", "Phags_Pa", "Phoenician", "Psalter_Pahlavi", "Rejang", "Runic", "Samaritan", "Saurashtra", "Sharada", "Shavian", "Siddham", "SignWriting", "Sinhala", "Sora_Sompeng", "Soyombo", "Sundanese", "Syloti_Nagri", "Syriac", "Tagalog", "Tagbanwa", "Tai_Le", "Tai_Tham", "Tai_Viet", "Takri", "Tamil", "Tangut", "Telugu", "Thaana", "Thai", "Tibetan", "Tifinagh", "Tirhuta", "Ugaritic", "Warang_Citi", "Zanabazar_Square", "-%-'-'-----", ",.,0,^,", " \n ( ) / / _ _ ", "( ( ) )  ", " \n / / _ _ ", "N4Json17CharReaderBuilderE", "Exceeded stackLimit in readValue().", "Syntax error: value, object or array expected.", "Missing ':' after object member name", "Missing ',' or '}' in object declaration", "Missing '}' or object member name", "Missing ',' or ']' in array declaration", "' is not a number.", "Empty escape sequence in string", "Bad escape sequence in string", "additional six characters expected to parse unicode surrogate pair.", "expecting another \\u token to begin the second half of a unicode surrogate pair", "Bad unicode escape sequence in string: four digits expected.", "Bad unicode escape sequence in string: hexadecimal digit expected.", "Line %d, Column %d", "See ", " for detail.\n", "Extra non-whitespace after JSON value.", "keylength >= 2^30", "Duplicate key: '", "Unable to parse token length", "collectComments", "allowComments", "strictRoot", "allowDroppedNullPlaceholders", "allowNumericKeys", "allowSingleQuotes", "stackLimit", "failIfExtra", "rejectDupKeys", "allowSpecialFloats", "Error from reader: %s", "N4Json10CharReader7FactoryE", "N4Json13OurCharReaderE", "N4Json10CharReaderE", "N4Json9ExceptionE", "assert json failed", "in Json::Value::setComment(): Comments must start with /", "Null Value Passed to Value Constructor", "in Json::Value::asCString(): requires stringValue", "Type is not convertible to string", "LargestInt out of Int range", "LargestUInt out of Int range", "double out of Int range", "Value is not convertible to Int.", "LargestInt out of UInt range", "LargestUInt out of UInt range", "double out of UInt range", "Value is not convertible to UInt.", "LargestUInt out of Int64 range", "double out of Int64 range", "Value is not convertible to Int64.", "LargestInt out of UInt64 range", "double out of UInt64 range", "Value is not convertible to UInt64.", "Value is not convertible to double.", "Value is not convertible to float.", "Value is not convertible to bool.", "in Json::Value::clear(): requires complex value", "in Json::Value::resize(): requires arrayValue", "in Json::Value::operator[](ArrayIndex): requires arrayValue", "in Json::Value::operator[](int index): index cannot be negative", "in Json::Value::operator[](ArrayIndex)const: requires arrayValue", "in Json::Value::operator[](int index) const: index cannot be negative", "in Json::Value::resolveReference(): requires objectValue", "in Json::Value::resolveReference(key, end): requires objectValue", "in Json::Value::find(key, end, found): requires objectValue or nullValue", "in Json::Value::removeMember(): requires objectValue", "in Json::Value::getMemberNames(), value must be objectValue", "in Json::Value::duplicateStringValue(): Failed to allocate string value buffer", "in Json::Value::duplicateAndPrefixStringValue(): length too big for prefixing", "in Json::Value::duplicateAndPrefixStringValue(): Failed to allocate string value buffer", "N4Json12RuntimeErrorE", "N4Json10LogicErrorE", "N4Json10FastWriterE", "N4Json6WriterE", "N4Json12StyledWriterE", "N4Json23BuiltStyledStreamWriterE", "N4Json12StreamWriterE", "N4Json12StreamWriter7FactoryE", "N4Json19StreamWriterBuilderE", "indentation", "commentStyle", "enableYAMLCompatibility", "dropNullPlaceholders", "useSpecialFloats", "commentStyle must be 'All' or 'None'", "%%.%dg", "-Infinity", "-1e+9999", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/threadpool.c", "void uv__queue_done(struct uv__work *, int)", "uv__has_active_reqs(req->loop)", "E2BIG", "EACCES", "EADDRINUSE", "EADDRNOTAVAIL", "EAFNOSUPPORT", "EAGAIN", "EAI_ADDRFAMILY", "EAI_AGAIN", "EAI_BADFLAGS", "EAI_BADHINTS", "EAI_CANCELED", "EAI_FAIL", "EAI_FAMILY", "EAI_MEMORY", "EAI_NODATA", "EAI_NONAME", "EAI_OVERFLOW", "EAI_PROTOCOL", "EAI_SERVICE", "EAI_SOCKTYPE", "EALREADY", "EBADF", "EBUSY", "ECANCELED", "ECHARSET", "ECONNABORTED", "ECONNREFUSED", "ECONNRESET", "EDESTADDRREQ", "EEXIST", "EFBIG", "EHOSTUNREACH", "EINTR", "EINVAL", "EISCONN", "EISDIR", "ELOOP", "EMFILE", "EMSGSIZE", "ENAMETOOLONG", "ENETDOWN", "ENETUNREACH", "ENFILE", "ENOBUFS", "ENODEV", "ENOENT", "ENOMEM", "ENONET", "ENOPROTOOPT", "ENOSPC", "ENOSYS", "ENOTCONN", "ENOTDIR", "ENOTEMPTY", "ENOTSOCK", "ENOTSUP", "EPERM", "EPIPE", "EPROTO", "EPROTONOSUPPORT", "EPROTOTYPE", "ERANGE", "EROFS", "ESHUTDOWN", "ESPIPE", "ESRCH", "ETIMEDOUT", "ETXTBSY", "EXDEV", "ENXIO", "EMLINK", "EHOSTDOWN", "EREMOTEIO", "ENOTTY", "argument list too long", "permission denied", "address already in use", "address not available", "address family not supported", "resource temporarily unavailable", "temporary failure", "bad ai_flags value", "invalid value for hints", "request canceled", "permanent failure", "ai_family not supported", "out of memory", "no address", "unknown node or service", "argument buffer overflow", "resolved protocol is unknown", "service not available for socket type", "socket type not supported", "connection already in progress", "bad file descriptor", "resource busy or locked", "operation canceled", "invalid Unicode character", "software caused connection abort", "connection refused", "connection reset by peer", "destination address required", "bad address in system call argument", "file too large", "host is unreachable", "interrupted system call", "invalid argument", "i/o error", "socket is already connected", "illegal operation on a directory", "too many symbolic links encountered", "too many open files", "message too long", "name too long", "network is down", "network is unreachable", "file table overflow", "no buffer space available", "no such device", "no such file or directory", "not enough memory", "machine is not on the network", "protocol not available", "no space left on device", "function not implemented", "socket is not connected", "not a directory", "directory not empty", "socket operation on non-socket", "operation not supported on socket", "operation not permitted", "broken pipe", "protocol error", "protocol not supported", "protocol wrong type for socket", "result too large", "read-only file system", "cannot send after transport endpoint shutdown", "invalid seek", "no such process", "connection timed out", "text file is busy", "cross-device link not permitted", "unknown error", "end of file", "no such device or address", "too many links", "host is down", "remote I/O error", "inappropriate ioctl for device", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/uv-common.c", "void uv_loop_delete(uv_loop_t *)", "err == 0", "Unknown system error %d", "Unknown system error", "fs_event", "fs_poll", "prepare", "signal", "<unknown>", "[%c%c%c] %-8s %p\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/async.c", "/proc/self/fd/%d", "void uv__async_io(uv_loop_t *, uv__io_t *, unsigned int)", "w == &loop->async_io_watcher", "void uv_close(uv_handle_t *, uv_close_cb)", "!uv__is_closing(handle)", "void uv__make_close_pending(uv_handle_t *)", "handle->flags & UV_CLOSING", "!(handle->flags & UV_CLOSED)", "int uv__accept(int)", "sockfd >= 0", "int uv__close_nocheckstdio(int)", "fd > -1", "int uv__close(int)", "fd > STDERR_FILENO", "void uv__io_init(uv__io_t *, uv__io_cb, int)", "fd >= -1", "void uv__io_start(uv_loop_t *, uv__io_t *, unsigned int)", "0 == (events & ~(POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI))", "0 != events", "w->fd >= 0", "w->fd < INT_MAX", "void uv__io_stop(uv_loop_t *, uv__io_t *, unsigned int)", "loop->watchers[w->fd] == w", "loop->nfds > 0", "int uv__io_active(const uv__io_t *, unsigned int)", "HOME", "TMPDIR", "TEMP", "TEMPDIR", "/data/local/tmp", "void uv__finish_close(uv_handle_t *)", "void uv__getaddrinfo_done(struct uv__work *, int)", "req->retcode == 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/loop.c", "void uv__loop_close(uv_loop_t *)", "QUEUE_EMPTY(&loop->wq) && \"thread pool work queue not empty!\"", "!uv__has_active_reqs(loop)", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/poll.c", "int uv_poll_stop(uv_poll_t *)", "int uv_poll_start(uv_poll_t *, int, uv_poll_cb)", "(pevents & ~(UV_READABLE | UV_WRITABLE | UV_DISCONNECT | UV_PRIORITIZED)) == 0", "int uv_spawn(uv_loop_t *, uv_process_t *, const uv_process_options_t *)", "options->file != NULL", "!(options->flags & ~(UV_PROCESS_DETACHED | UV_PROCESS_SETGID | UV_PROCESS_SETUID | UV_PROCESS_WINDOWS_HIDE | UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS))", "err == pid", "int uv__process_init_stdio(uv_stdio_container_t *, int *)", "container->data.stream != NULL", "0 && \"Unexpected flags\"", "void uv__chld(uv_signal_t *, int)", "signum == SIGCHLD", "QUEUE_EMPTY(&pending)", "/dev/null", "void uv__write_int(int, int)", "n == sizeof(val)", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/signal.c", "int uv_signal_stop(uv_signal_t *)", "void uv__signal_event(uv_loop_t *, uv__io_t *, unsigned int)", "!(handle->flags & UV_CLOSING)", "int uv__signal_start(uv_signal_t *, uv_signal_cb, int, int)", "void uv__signal_handler(int)", "r == sizeof msg || (r == -1 && (errno == EAGAIN || errno == EWOULDBLOCK))", "void uv__signal_stop(uv_signal_t *)", "ret == 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/stream.c", "int uv__stream_open(uv_stream_t *, int, int)", "void uv__stream_destroy(uv_stream_t *)", "!uv__io_active(&stream->io_watcher, POLLIN | POLLOUT)", "stream->flags & UV_CLOSED", "uv__has_active_reqs(stream->loop)", "stream->write_queue_size == 0", "void uv__server_io(uv_loop_t *, uv__io_t *, unsigned int)", "events & POLLIN", "stream->accepted_fd == -1", "!(stream->flags & UV_CLOSING)", "int uv_accept(uv_stream_t *, uv_stream_t *)", "server->loop == client->loop", "queued_fds->offset > 0", "int uv_shutdown(uv_shutdown_t *, uv_stream_t *, uv_shutdown_cb)", "stream->type == UV_TCP || stream->type == UV_TTY || stream->type == UV_NAMED_PIPE", "uv__stream_fd(stream) >= 0", "int uv_write2(uv_write_t *, uv_stream_t *, const uv_buf_t *, unsigned int, uv_stream_t *, uv_write_cb)", "nbufs > 0", "(stream->type == UV_TCP || stream->type == UV_NAMED_PIPE || stream->type == UV_TTY) && \"uv_write (unix) does not yet support other types of streams\"", "!(stream->flags & UV_STREAM_BLOCKING)", "int uv_try_write(uv_stream_t *, const uv_buf_t *, unsigned int)", "int uv_read_start(uv_stream_t *, uv_alloc_cb, uv_read_cb)", "stream->type == UV_TCP || stream->type == UV_NAMED_PIPE || stream->type == UV_TTY", "alloc_cb", "void uv__stream_close(uv_stream_t *)", "!uv__io_active(&handle->io_watcher, POLLIN | POLLOUT)", "void uv__write_callbacks(uv_stream_t *)", "void uv__stream_io(uv_loop_t *, uv__io_t *, unsigned int)", "void uv__stream_connect(uv_stream_t *)", "stream->type == UV_TCP || stream->type == UV_NAMED_PIPE", "void uv__read(uv_stream_t *)", "stream->alloc_cb != NULL", "ignoring non-SCM_RIGHTS ancillary data: %d\n", "int uv__stream_recv_cmsg(uv_stream_t *, struct msghdr *)", "start + CMSG_LEN(count * sizeof(*pi)) == end", "void uv__drain(uv_stream_t *)", "stream->shutdown_req", "void uv__write(uv_stream_t *)", "req->handle == stream", "fd_to_send >= 0", "req->write_index < req->nbufs", "stream->write_queue_size >= len", "n == 0 || n == -1", "size_t uv__write_req_size(uv_write_t *)", "req->handle->write_queue_size >= size", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/tcp.c", "int uv__tcp_connect(uv_connect_t *, uv_tcp_t *, const struct sockaddr *, unsigned int, uv_connect_cb)", "handle->type == UV_TCP", "UV_TCP_SINGLE_ACCEPT", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/thread.c", "int pthread_barrier_wait(pthread_barrier_t *)", "rc == 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/udp.c", "void uv__udp_finish_close(uv_udp_t *)", "handle->io_watcher.fd == -1", "handle->send_queue_size == 0", "handle->send_queue_count == 0", "int uv__udp_send(uv_udp_send_t *, uv_udp_t *, const uv_buf_t *, unsigned int, const struct sockaddr *, unsigned int, uv_udp_send_cb)", "addrlen <= sizeof(req->addr)", "uv__has_active_reqs(handle->loop)", "int uv__udp_try_send(uv_udp_t *, const uv_buf_t *, unsigned int, const struct sockaddr *, unsigned int)", "int uv_udp_set_multicast_interface(uv_udp_t *, const char *)", "0 && \"unexpected address family\"", "void uv__udp_run_completed(uv_udp_t *)", "!(handle->flags & UV_UDP_PROCESSING)", "int uv__udp_maybe_deferred_bind(uv_udp_t *, int, unsigned int)", "0 && \"unsupported address family\"", "void uv__udp_sendmsg(uv_udp_t *)", "q != NULL", "void uv__udp_io(uv_loop_t *, uv__io_t *, unsigned int)", "handle->type == UV_UDP", "void uv__udp_recvmsg(uv_udp_t *)", "handle->recv_cb != NULL", "handle->alloc_cb != NULL", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/linux-core.c", "void uv__platform_invalidate_fd(uv_loop_t *, int)", "loop->watchers != NULL", "void uv__io_poll(uv_loop_t *, int)", "QUEUE_EMPTY(&loop->watcher_queue)", "w->pevents != 0", "w->fd < (int) loop->nwatchers", "op == UV__EPOLL_CTL_ADD", "timeout >= -1", "timeout != -1", "no_epoll_wait == 0 || no_epoll_pwait == 0", "(unsigned) fd < loop->nwatchers", "timeout > 0", "/proc/self/stat", "/proc/stat", "/sys/devices/system/cpu/cpu%u/cpufreq/scaling_cur_freq", "int read_times(FILE *, unsigned int, uv_cpu_info_t *)", "clock_ticks != (unsigned long) -1", "clock_ticks != 0", "cpu%u ", "r == 1", "%lu %lu %lu %lu %lu %lu", "num == numcpus", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/unix/linux-inotify.c", "int uv__inotify_fork(uv_loop_t *, void *)", "tmp_path != NULL", "int uv_fs_event_stop(uv_fs_event_t *)", "w != NULL", "void uv__inotify_read(uv_loop_t *, uv__io_t *, unsigned int)", "errno == EAGAIN || errno == EWOULDBLOCK", "/proc/self/exe", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/libuv/1.20.3/src/fs-poll.c", "int uv_fs_poll_stop(uv_fs_poll_t *)", "ctx != NULL", "ctx->parent_handle != NULL", "int uv_fs_poll_getpath(uv_fs_poll_t *, char *, size_t *)", "void timer_cb(uv_timer_t *)", "ctx->parent_handle->poll_ctx == ctx", "%u.%u.%u.%u", "0123456789", "0123456789abcdef", "0123456789ABCDEF", "int uv_fs_access(uv_loop_t *, uv_fs_t *, const char *, int, uv_fs_cb)", "int uv_fs_chmod(uv_loop_t *, uv_fs_t *, const char *, int, uv_fs_cb)", "int uv_fs_chown(uv_loop_t *, uv_fs_t *, const char *, uv_uid_t, uv_gid_t, uv_fs_cb)", "int uv_fs_lstat(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_mkdir(uv_loop_t *, uv_fs_t *, const char *, int, uv_fs_cb)", "int uv_fs_open(uv_loop_t *, uv_fs_t *, const char *, int, int, uv_fs_cb)", "int uv_fs_scandir(uv_loop_t *, uv_fs_t *, const char *, int, uv_fs_cb)", "int uv_fs_readlink(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_realpath(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_rmdir(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_stat(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_unlink(uv_loop_t *, uv_fs_t *, const char *, uv_fs_cb)", "int uv_fs_utime(uv_loop_t *, uv_fs_t *, const char *, double, double, uv_fs_cb)", "void uv__fs_done(struct uv__work *, int)", "req->result == 0", "N4cata16filesystem_errorE", "NSt6__ndk120__shared_ptr_emplaceIN4cata16filesystem_error11informationENS_9allocatorIS3_EEEE", "bool", "xxint32", "xint64", "xuint64", "double", "string", "ERROR: ", "load flags from file", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/gflags/2.1.2/src/gflags.cc", "set flags from the environment [use 'export FLAGS_flag1=value']", "tryfromenv", "set flags from the environment if present", "undefok", "comma-separated list of flag names that it is okay to specify on the command line even if the program does not define a flag with that name.  IMPORTANT: flags in this list that have arguments MUST use the flag=value format", "ERROR: SetUsageMessage() called twice\n", "Warning: SetUsageMessage() never called", "ERROR: SetVersionString() called twice\n", "FATAL ERROR: flag name '%s' doesn't exist\n", "ERROR: flag '%s' was defined more than once (in files '%s' and '%s').\n", "ERROR: something wrong with flag '%s' in file '%s'.  One possibility: file '%s' is being linked both statically and dynamically into this executable.\n", "%.17g", "%s set to %s", "%sillegal value '%s' specified for %s flag '%s'\n", "%sfailed validation of new value '%s' for flag '%s'\n", "%s set to %s\n", "ERROR: empty flaglist entry\n", "ERROR: flag \"%*s\" begins with '-'\n", "%sunknown command line flag '%s' (via --fromenv or --tryfromenv)\n", "FLAGS_", " not found in environment\n", "%sinfinite recursion on environment flag '%s'\n", "%sunknown command line flag '%s'\n", "%sboolean value (%s) specified for %s command line flag\n", "Ignoring RegisterValidateFunction() for flag pointer ", ": no flag found at that address", "Ignoring RegisterValidateFunction() for flag '", "': validate-fn already registered", " is missing its argument", "; flag description: ", "Did you really mean to set flag '", "' to the value '", " must be set on the commandline (default value fails validation)\n", "ERROR: error parsing env variable '%s' with value '%s'\n", "show help on all flags [tip: all flags can have two dashes]", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/gflags/2.1.2/src/gflags_reporting.cc", "helpfull", "show help on all flags -- same as -help", "helpshort", "show help on only the main module for this program", "helpon", "show help on the modules named by this flag value", "helpmatch", "show help on modules whose name contains the specified substr", "helppackage", "show help on all modules in the main package", "helpxml", "produce an xml version of help", "show version and build info and exit", "    -%s (%s)", "\n      ", "currently", "Multiple packages contain a file=", "Unable to find a package for file=", "%s: \"%s\"", "\n  Flags from %s:\n", "\n  No modules matched: use -help\n", "-main.", "_main.", "<?xml version=\"1.0\"?>\n", "<AllFlags>\n", "<program>%s</program>\n", "<usage>%s</usage>\n", "</AllFlags>\n", "&amp;", "&lt;", "<flag>", "meaning", "current", "</flag>", "<%s>%s</%s>", "%s version %s\n", "tab_completion_word", "If non-empty, HandleCommandLineCompletions() will hijack the process and attempt to do bash-style command line flag completion on this value.", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/gflags/2.1.2/src/gflags_completions.cc", "tab_completion_columns", "Number of columns to use in output for tab completion", "--%s", "-test.", "_test.", "-unittest.", "_unittest.", "-* Matching module flags *-", "-* Matching package flags *-", "-* Commonly used flags *-", "-* Matching sub-package flags *-", "================================", "-* Other flags *-", "~ (Remaining flags hidden) ~", " default:", "%s Details for '--%s':\n%s    defined: %s", "%s--%s [%s%s%s] ", "\n    ", "\n     \n", "Error: curl_global_init failed\n", "Error: Curl_open failed\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/easy.c", "Error: Curl_ssl_init failed\n", "Error: win32_init failed\n", "Error: resolver_global_init failed\n", "easy handle already used in multi handle", "socket cb: socket %d REMOVED\n", "socket cb: socket %d UPDATED as %s%s\n", "socket cb: socket %d ADDED as %s%s\n", "call curl_multi_socket_action(socket %d)\n", "CONNECT_ONLY is required!", "Failed to get recent socket", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/memdebug.c", "curl_domalloc", "wantedsize != 0", "MEM %s:%d malloc(%zu) = %p\n", "curl_docalloc", "wanted_elements != 0", "wanted_size != 0", "MEM %s:%d calloc(%zu,%zu) = %p\n", "curl_dostrdup", "str != ((void*)0)", "MEM %s:%d strdup(%p) (%zu) = %p\n", "curl_dorealloc", "MEM %s:%d realloc(%p, %zu) = %p\n", "MEM %s:%d free(%p)\n", "FD %s:%d socket() = %d\n", "SEND %s:%d send(%lu) = %ld\n", "RECV %s:%d recv(%lu) = %ld\n", "FD %s:%d socketpair() = %d %d\n", "FD %s:%d accept() = %d\n", "FD %s:%d sclose(%d)\n", "FILE %s:%d fopen(\"%s\",\"%s\") = %p\n", "FILE %s:%d fdopen(\"%d\",\"%s\") = %p\n", "curl_fclose", "file != ((void*)0)", "FILE %s:%d fclose(%p)\n", "LIMIT %s:%d %s reached memlimit\n", "getpeername() failed with errno %d: %s", "getsockname() failed with errno %d: %s", "ssrem inet_ntop() failed with errno %d: %s", "ssloc inet_ntop() failed with errno %d: %s", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/connect.c", "Curl_is_connected", "sockindex >= 0 && sockindex <= 1", "Connection time-out", "After %ldms connect time, move on!\n", "Connection failed\n", "connect to %s port %ld failed: %s\n", "Failed to connect to %s port %ld: %s", "Could not set TCP_NODELAY: %s\n", "TCP_NODELAY set\n", "Curl_getconnectinfo", "Kill stream: %s\n", "Marked for [%s]: %s\n", "closure", "keep alive", "sa_addr inet_ntop() failed with errno %d: %s", "  Trying %s...\n", "Immediate connect fail for %s: %s\n", "Failed to set SO_KEEPALIVE on fd %d\n", "Failed to set TCP_KEEPIDLE on fd %d\n", "Failed to set TCP_KEEPINTVL on fd %d\n", "host!", "Couldn't bind to interface '%s'", "Local Interface %s is ip %s using address family %i\n", "Name '%s' family %i resolved to '%s' family %i\n", "Couldn't bind to '%s'", "Local port: %hu\n", "Bind to local port %hu failed, trying next\n", "bind failed with errno %d: %s", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/multi.c", "Removed with partial response", "Curl_expire", "id < EXPIRE_LAST", "Internal error removing splay node = %d\n", "Internal error clearing splay node = %d\n", "Expire cleared\n", "* Multi status: %d handles, %d alive\n", "handle %p, state %s, %d sockets\n", "INTERNAL CONFUSION\n", "[%s %s] ", "RECVING", "SENDING", "STATE: %s => %s handle %p; line %d (connection #%ld)\n", "multi_done", "*connp", "multi_done\n", "Connection still in use %zu/%zu, no more multi_done now!\n", "Connection #%ld to host %s left intact", "process_pending_handles", "data->mstate == CURLM_STATE_CONNECT_PEND", "In state %d with no easy_conn, bail out!\n", "multi changed, check CONNECT_PEND queue!\n", "Resolving timed out after %ld milliseconds", "Connection timed out after %ld milliseconds", "Operation timed out after %ld milliseconds with %ld out of %ld bytes received", "Operation timed out after %ld milliseconds with %ld bytes received", "Disconnected with pending data", "Hostname '%s' was found in DNS cache\n", "CONNECT_ONLY", "Transfer returned error", "Aborted by callback", "multi_runsingle", "!data->easy_conn", "Re-used connection seems dead, get a new one\n", "Reconnect dead connection", "INIT", "WAITRESOLVE", "WAITCONNECT", "WAITPROXYCONNECT", "SENDPROTOCONNECT", "WAITDO", "DOING", "DO_MORE", "DO_DONE", "WAITPERFORM", "TOOFAST", "COMPLETED", "MSGSENT", "Unsupported protocol", "Failed initialization", "URL using bad/illegal format or missing URL", "A requested feature, protocol or option was not found built-in in this libcurl due to a build-time decision.", "Couldn't resolve proxy name", "Couldn't resolve host name", "Couldn't connect to server", "Weird server reply", "Access denied to remote resource", "FTP: The server failed to connect to data port", "FTP: Accepting server connect has timed out", "FTP: The server did not accept the PRET command.", "FTP: unknown PASS reply", "FTP: unknown PASV reply", "FTP: unknown 227 response format", "FTP: can't figure out the host in the PASV response", "Error in the HTTP2 framing layer", "FTP: couldn't set file type", "Transferred a partial file", "FTP: couldn't retrieve (RETR failed) the specified file", "Quote command returned error", "HTTP response code said error", "Failed writing received data to disk/application", "Upload failed (at start/before it took off)", "Failed to open/read local data from file/application", "Out of memory", "Timeout was reached", "FTP: command PORT failed", "FTP: command REST failed", "Requested range was not delivered by the server", "Internal problem setting up the POST", "SSL connect error", "Couldn't resume download", "Couldn't read a file:// file", "LDAP: cannot bind", "LDAP: search failed", "A required function in the library was not found", "Operation was aborted by an application callback", "A libcurl function was given a bad argument", "Failed binding local connection end", "Number of redirects hit maximum amount", "An unknown option was passed in to libcurl", "Malformed telnet option", "SSL peer certificate or SSH remote key was not OK", "Server returned nothing (no headers, no data)", "SSL crypto engine not found", "Can not set SSL crypto engine as default", "Failed to initialise SSL crypto engine", "Failed sending data to the peer", "Failure when receiving data from the peer", "Problem with the local SSL certificate", "Couldn't use specified SSL cipher", "Peer certificate cannot be authenticated with given CA certificates", "Problem with the SSL CA cert (path? access rights?)", "Unrecognized or bad HTTP Content or Transfer-Encoding", "Invalid LDAP URL", "Maximum file size exceeded", "Requested SSL level failed", "Failed to shut down the SSL connection", "Failed to load CRL file (path? access rights?, format?)", "Issuer check against peer certificate failed", "Send failed since rewinding of the data stream failed", "Login denied", "TFTP: File Not Found", "TFTP: Access Violation", "Disk full or allocation exceeded", "TFTP: Illegal operation", "TFTP: Unknown transfer ID", "Remote file already exists", "TFTP: No such user", "Conversion failed", "Caller must register CURLOPT_CONV_ callback options", "Remote file not found", "Error in the SSH layer", "Socket not ready for send/recv", "RTSP CSeq mismatch or invalid CSeq", "RTSP session error", "Unable to parse FTP file list", "Chunk callback failed", "The max connection limit is reached", "SSL public key does not match pinned public key", "SSL server certificate status verification FAILED", "Stream error in the HTTP/2 framing layer", "API function called from within callback", "Please call curl_multi_perform() soon", "Invalid multi handle", "Invalid easy handle", "Internal error", "Invalid socket argument", "Unknown option", "The easy handle is already added to a multi handle", "Unknown share option", "Share currently in use", "Invalid share handle", "Feature not enabled in this library", "CURLSHcode unknown", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/strerror.c", "Curl_strerror", "err >= 0", "Unknown error %d", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/hostip6.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/strdup.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/curl_addrinfo.c", "Curl_he2ai", "(he->h_name != ((void*)0)) && (he->h_addr_list != ((void*)0))", "Curl_ip2addr", "inaddr && hostname", "ADDR %s:%d freeaddrinfo(%p)\n", "ADDR %s:%d getaddrinfo() = %p\n", "ADDR %s:%d getaddrinfo() failed\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/slist.c", "Curl_slist_append_nodup", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/warnless.c", "curlx_ultous", "ulnum <= (unsigned long) 0xFFFF", "curlx_ultouc", "ulnum <= (unsigned long) 0xFF", "curlx_ultosi", "ulnum <= (unsigned long) 0x7FFFFFFF", "curlx_uztoso", "uznum <= (size_t) 0x7FFFFFFFFFFFFFFFL", "curlx_uztosi", "uznum <= (size_t) 0x7FFFFFFF", "curlx_uztoui", "uznum <= (size_t) 0xFFFFFFFF", "curlx_sltosi", "slnum >= 0", "(unsigned long) slnum <= (unsigned long) 0x7FFFFFFF", "curlx_sltoui", "(unsigned long) slnum <= (unsigned long) 0xFFFFFFFF", "curlx_sltous", "(unsigned long) slnum <= (unsigned long) 0xFFFF", "curlx_uztosz", "curlx_sotouz", "sonum >= 0", "curlx_sztosi", "sznum >= 0", "(size_t) sznum <= (size_t) 0x7FFFFFFF", "curlx_uitous", "uinum <= (unsigned int) 0xFFFF", "curlx_uitouc", "uinum <= (unsigned int) 0xFF", "curlx_uitosi", "uinum <= (unsigned int) 0x7FFFFFFF", "curlx_sitouz", "sinum >= 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/asyn-thread.c", "Curl_resolver_wait_resolv", "conn && td", "asynch resolve failed", "Curl_resolver_is_resolved", "getaddrinfo() thread failed to start\n", "Could not resolve %s: %s", "init_thread_sync_data", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/conncache.c", "Curl_conncache_unlock", "Curl_conncache_size", "!(data)->state.conncache_lock", "Curl_conncache_bundle_size", "!(conn->data)->state.conncache_lock", "Curl_conncache_find_bundle", "Added connection %ld. The cache now contains %zu members\n", "Curl_conncache_add_conn", "Curl_conncache_remove_conn", "Curl_conncache_foreach", "Connection cache is full, closing the oldest one.\n", "Curl_conncache_extract_oldest", "kill all", "hashkey", "len > 32", "%ld%s", "bundle_create", "*cb_ptr == ((void*)0)", "Conn: %ld (%p) Receive pipe weight: (%ld/%ld), penalized: %s\n", "TRUE", "FALSE", "%p is at send pipe head B!\n", "Site %s:%d is pipeline blacklisted\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/pipeline.c", "Server %s is blacklisted\n", "Server %s is not blacklisted\n", "0123456789ABCDEF", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/mime.c", "Can't add itself as a subpart!", "Content-Type", ".gif", "image/gif", ".jpg", "image/jpeg", ".jpeg", ".png", "image/png", ".svg", "image/svg+xml", "text/plain", ".htm", "text/html", ".pdf", "application/pdf", ".xml", "application/xml", "multipart/mixed", "application/octet-stream", "Content-Disposition", "multipart/", "attachment", "Content-Disposition: %s%s%s%s%s%s%s", "; name=\"", "; filename=\"", "Content-Transfer-Encoding", "Content-Transfer-Encoding: %s", "multipart/form-data", "binary", "7bit", "base64", "quoted-printable", "\r\n--", "--\r\n", "Content-Type: %s%s%s", "; boundary=", "SESS", "Set-Cookie:", "CURLOPT_SSL_VERIFYHOST no longer supports 1 as value!", "Error: realloc of buffer failed\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/vtls/vtls.c", "Curl_ssl_getsessionid", "((CURLPROXY_HTTPS == conn->http_proxy.proxytype && ssl_connection_complete != conn->proxy_ssl[conn->sock[1] == -1 ? 0 : 1].state) ? data->set.proxy_ssl.primary.sessionid : data->set.ssl.primary.sessionid)", "Curl_ssl_addsessionid", "Curl_ssl_close", "(sockindex <= 1) && (sockindex >= -1)", "\t public key hash: sha256//%s\n", ";sha256//", "ssl_connect_init_proxy", "conn->bits.proxy_ssl_connected[sockindex]", "Unrecognized parameter value passed via CURLOPT_SSLVERSION", "CURL_SSLVERSION_MAX incompatible with CURL_SSLVERSION", "-----BEGIN PUBLIC KEY-----", "\n-----END PUBLIC KEY-----", "CURL_SSL_BACKEND", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/base64.c", "%c%c==", "%c%c%c=", "%c%c%c%c", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", "Shuffling %i addresses", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/hostip.c", "Hostname %s was found in DNS cache\n", "LocalHost", "localhost", "%255[^:]:%d", "Couldn't parse CURLOPT_RESOLVE removal entry '%s'!\n", "Resolve address '%s' found illegal!\n", "Couldn't parse CURLOPT_RESOLVE entry '%s'!\n", "RESOLVE %s:%d is - old addresses discarded!\n", "Added %s:%d:%s to DNS cache\n", "Hostname in DNS cache was stale, zapped\n", "%s:%d", "freednsentry", "dns && (dns->inuse>0)", "** Resuming transfer from byte position %ld\n", "  %% Total    %% Received %% Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n", "\r%3ld %s  %3ld %s  %3ld %s  %s  %s %s %s %s %s", "--:--:--", "%2ld:%02ld:%02ld", "%3ldd %02ldh", "%7ldd", "%5ld", "%4ldk", "%2ld.%0ldM", "%4ldM", "%2ld.%0ldG", "%4ldG", "%4ldT", "%4ldP", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/cookie.c", "%4095[^;\r\n=] =%4095[^;\r\n]", "oversized cookie dropped, name/val %zu + %zu bytes\n", "secure", "httponly", "domain", "skipped cookie with bad tailmatch domain: %s\n", "max-age", "expires", "#HttpOnly_", "%s cookie %s=\"%s\" for domain %s, path %s, expire %ld\n", "Replaced", "Added", "WARNING: failed to save cookies in %s\n", "%s%s%s\t%s\t%s\t%s\t%ld\t%s\t%s", "# Netscape HTTP Cookie File\n# https://curl.haxx.se/docs/http-cookies.html\n# This file was generated by libcurl! Edit at your own risk.\n\n", "#\n# Fatal libcurl error\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/http.c", "Curl_http_setup_conn", "data->req.protop == ((void*)0)", "The requested URL returned error: %d", "Curl_http_output_auth", "Basic", "Authentication problem. Ignoring this.\n", "Bearer", "Curl_add_buffer_send", "socketindex <= 1", "size > included_body_bytes", "HTTP default", "Empty reply from server", "Host:", "Content-Type:", "Content-Length:", "Transfer-Encoding:", "Authorization:", "Invalid TIMEVALUE", "If-Modified-Since", "If-Unmodified-Since", "Last-Modified", "%s: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n", "HTTP/2 over clean TCP\n", "Curl_http", "HEAD", "(httpreq > HTTPREQ_NONE) && (httpreq < HTTPREQ_LAST)", "User-Agent", "Referer", "Referer: %s\r\n", "Accept-Encoding", "Accept-Encoding: %s\r\n", "Connection: %s%sTE\r\nTE: gzip\r\n", "chunked", "Chunky upload is not supported by HTTP 1.0", "Transfer-Encoding: chunked\r\n", "Host:%s\r\n", "Host: %s%s%s\r\n", "Host: %s%s%s:%d\r\n", "Accept", "Accept: */*\r\n", "Could not seek stream", "Could only read %ld bytes from the input", "File already completely uploaded", "Range: bytes=%s\r\n", "Content-Range", "Content-Range: bytes 0-%ld/%ld\r\n", "Content-Range: bytes %s%ld/%ld\r\n", "Content-Range: bytes %s/%ld\r\n", "ftp://%s:%s@%s", "%s HTTP/%s\r\n%s%s%s%s%s%s%s%s%s%s%s", "Proxy-Connection", "Proxy-Connection: Keep-Alive\r\n", "%s%s=%s", "Content-Length", "Content-Length: %ld\r\n", "Failed sending PUT request", "Content-Length: 0\r\n\r\n", "Failed sending POST request", "Expect", "Expect:", "100-continue", "Content-Type: application/x-www-form-urlencoded\r\n", "%x\r\n", "Failed sending HTTP POST request", "Failed sending HTTP request", "upload completely sent off: %ld out of %ld bytes\n", "bad HTTP: No end-of-message indicator", "Received 101\n", "no chunk, no close, no size. Assume close to signal end\n", "HTTP error before end of send, keep sending\n", "HTTP error before end of send, stop sending\n", "Stop sending data before everything sent", "Keep sending data to get tossed away!\n", " HTTP/%1d.%1d%c%3d", " HTTP/2 %d", "Lying server, not serving HTTP/2\n", " HTTP %3d", "Unsupported HTTP version in response\n", " RTSP/%1d.%1d%c%3d", "HTTP 1.0, assume close after body\n", "HTTP/1.0 close after body", "HTTP/2 found, allow multiplexing\n", "HTTP 1.1 or later with persistent connection, pipelining supported\n", "overflow content-length", "Overflow Content-Length: value!\n", "Invalid Content-Length: value", "Server:", "Proxy-Connection:", "Proxy-Connection keep-alive", "HTTP/1.0 proxy connection set to keep alive!\n", "Proxy-Connection: asked to close after done", "HTTP/1.1 proxy connection set close!\n", "HTTP/1.0 connection set to keep alive!\n", "Connection: close used", "Content-Encoding:", "Content-Range:", "Last-Modified:", "WWW-Authenticate:", "Proxy-authenticate:", "Location:", "Curl_http_readwrite_headers", "!data->req.newurl", "Mid-auth HTTP and much data left to send", "Proxy-authorization", "Authorization", "%s auth using %s with user '%s'\n", "Proxy", "%s:%s", "%sAuthorization: Basic %s\r\n", "Proxy-", "Authorization: Bearer %s\r\n", "http_should_fail", "(httpcode == 401) || (httpcode == 407)", "TCP6", "TCP4", "PROXY %s %s %s %li %li\r\n", "https_connecting", "(conn) && (conn->handler->flags & (1<<0))", "Failed HTTPS connection", "Expect: 100-continue\r\n", "Rejected %zu bytes header (max is %d)!", "Failed to alloc memory for big header!", "HTTP/", "The requested URL returned error: %s", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/sendf.c", "Send failure: %s", "Recv failure: %s", "Curl_client_write", "type <= 3", "Write callback asked for PAUSE when not supported!", "Failed writing body (%zu != %zu)", "Failed writing header", "pausewrite", "i < 3", "Paused %zu bytes in buffer for type %02x\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/url.c", "Error: calloc of Curl_easy failed\n", "Error: resolver_init failed\n", "Error: malloc of buffer failed\n", "Error: malloc of headerbuff failed\n", "DISCONNECT without easy handle, ignoring\n", "Curl_disconnect when inuse: %zu\n", "Closing connection %ld\n", "Curl_disconnect", "conn->data == data", "Connected to %s (%s) port %ld (#%ld)\n", "User-Agent: %s\r\n", "%s://%s", "Found connection %ld, with requests in the pipe (%zu)\n", "We can reuse, but we want a new connection anyway\n", "Re-using existing connection! (#%ld) with %s %s\n", "No more connections allowed to host: %zu\n", "No connections available in cache\n", "No connections available.\n", "Default to force-close", "<no protocol>", "Illegal characters found in URL", "Bad URL, colon is first character", "file:", "%*15[^\n/:]:%[^\n]", "Bad URL", "localhost/", "127.0.0.1/", "Invalid file://hostname/, expected localhost or 127.0.0.1 or none", "File drive letters are only accepted in MSDOS/Windows.", "%15[^\n/:]:%3[/]%[^\n/?#]%[^\n]", "<url> malformed", "FTP.", "DICT.", "DICT", "LDAP.", "LDAP", "IMAP.", "IMAP", "SMTP.", "smtp", "POP3.", "pop3", "Unwillingly accepted illegal URL using %zu slash%s!\n", "%s://%s%s", "Rebuilt URL to: %s\n", "Please URL encode %% as %%25, see RFC 6874.\n", "Invalid network interface: %s; %s\n", "Invalid IPv6 address format\n", "Protocol \"%s\" not supported or disabled in libcurl", "parse_url_login", "!**user", "!**passwd", "!**options", "conn->handler", "Option DISALLOW_USERNAME_IN_URL is set and url contains username.", "[%*45[0123456789abcdefABCDEF:.]%c", "IPv6 closing bracket followed by '%c'", "IPv6 numerical address used in URL without brackets", ";type=%c", "%s://%s%s%s:%d%s%s%s", "Port number out of range", "Port number ended with '%c'", "Couldn't find host %s in the .netrc file; using defaults\n", "ftp@example.com", "Connecting to hostname: %s\n", "Connecting to port: %d\n", "No valid port number in connect to host string (%s)\n", "IDN support not present, can't parse Unicode domains\n", "Host name '%s' contains bad letter", "Connection %ld seems to be dead!\n", "Found bundle for host %s: %p [%s]\n", "can pipeline", "can multiplex", "serially", "Server doesn't support multi-use yet, wait\n", "Server doesn't support multi-use (yet)\n", "Could pipeline, but not asked to!\n", "Could multiplex, but not asked to!\n", "Connection #%ld is still name resolving, can't reuse\n", "Connection #%ld isn't open enough, can't reuse\n", "BAD! Unconnected #%ld has a non-empty recv pipeline!\n", "Connection #%ld has different SSL parameters, can't reuse\n", "Connection #%ld has not started SSL connect, can't reuse\n", "Pipe is full, skip (%zu)\n", "MAX_CONCURRENT_STREAMS reached, skip (%zu)\n", "Penalized, skip\n", "Multiplexed connection found!\n", "Found pending candidate for reuse and CURLOPT_PIPEWAIT is set\n", "gethandleathead", "((e) && ((e)->magic == 0xc0dedbadU))", "Couldn't resolve host '%s'", "Couldn't resolve proxy '%s'", "resolve_server", "conn->dns_entry == ((void*)0)", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/if2ip.c", "Operation too slow. Less than %ld bytes/sec transferred the last %ld seconds", "libcurl/7.61.1-DEV", " zlib/%s", "aarch64-none-linux-android", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/getenv.c", "%%%02X", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", "(nil)", "(nil)", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/mprintf.c", ".%ld", "dprintf_formatf", "strlen(work) <= sizeof(work)", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/netrc.c", ".netrc", "machine", "password", "operation aborted by callback", "Read callback asked for PAUSE when not supported!", "read function returned funny value", "%x%s", "Signaling end of chunked upload via terminating chunk.\n", "Cannot rewind mime/post data", "seek callback returned error %d", "the ioctl callback returned %d\n", "ioctl callback returned error %d", "necessary data rewind wasn't possible", "The requested document is not new enough\n", "The requested document is not old enough\n", "Curl_readwrite: forcibly told to drain data\n", "select/poll returned error", "Done waiting for 100-continue\n", "transfer closed with %ld bytes remaining to read", "transfer closed with outstanding read data remaining", "Curl_single_getsock", "conn->sockfd != -1", "conn->writesockfd != -1", "No URL set!", "Maximum (%ld) redirects followed", "Issue another request to this URL: '%s'\n", "Switch from POST to GET\n", "Disables POST, goes with %s\n", "REFUSED_STREAM, retrying a fresh connect\n", "Connection died, retrying a fresh connect\n", "retry", "Curl_setup_transfer", "conn != ((void*)0)", "readwrite_data: we're done!\n", "nread <= 0, server closed connection, bailing\n", "Rewinding stream by : %zd bytes on url %s (zero-length body)\n", "Excess found in a non pipelined read: excess = %zd url = %s (zero-length body)\n", "ignoring body", "Ignoring the response-body\n", "The entire document is already downloaded", "HTTP server doesn't seem to support byte ranges. Cannot resume.", "Simulate a HTTP 304 response!\n", "Simulated 304 handling", "Failed writing data", "%s in chunked-encoding", "Leftovers after chunking: %zu bytes\n", "Rewinding %zu bytes\n", "Increasing bytecount by %zu from hbuflen\n", "Rewinding stream by : %zu bytes on url %s (size = %ld, maxdownload = %ld, bytecount = %ld, nread = %zd)\n", "Excess found in a non pipelined read: excess = %zu, size = %ld, maxdownload = %ld, bytecount = %ld\n", "we are done reading and this is set to close, stop send\n", "read_rewind", "conn->read_pos >= thismuch", "Buffer after stream rewind (read_pos = %zu): [%s]\n", "Failed to alloc scratch buffer!", "We are completely uploaded and fine\n", "%15[^?&/:]://%c", "%%%02x", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/wildcard.c", "Curl_wildcard_dtor", "wc->protdata == ((void*)0)", "Too long hexadecimal number", "Illegal or missing hexadecimal sequence", "Malformed encoding found", "Write error", "Bad content-encoding found", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/hash.c", "1.2.3", "Error while processing content unencoding: %s", "Error while processing content unencoding: Unknown failure within decompression software.", "x-gzip", "1.2.0.4", "Unrecognized content encoding type. libcurl understands %s content encodings.", "%31[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]", "%02d:%02d:%02d%n", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "AHST", "IDLW", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/curl_threads.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/rand.c", "Curl_rand", "num > 0", "0123456789abcdef", "Curl_rand_hex", "num > 1", "CURL_ENTROPY", "WARNING: Using weak random seed\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/dotdot.c", "/../", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/http2.c", "stopped the pause stream!\n", "http/2: failed to clear user_data for stream %d!\n", "Curl_http2_done", "Couldn't initialize nghttp2 callbacks!", "Couldn't initialize nghttp2!", "nghttp2 unexpectedly failed on pack_settings_payload", "Connection: Upgrade, HTTP2-Settings\r\nUpgrade: %s\r\nHTTP2-Settings: %s\r\n", "Using HTTP2, server supports multi-use\n", "Connection state changed (HTTP/2 confirmed)\n", "nghttp2_session_upgrade() failed: %s(%d)", "http/2: failed to set user_data for stream %d!\n", "Curl_http2_switched", "nghttp2_submit_settings() failed: %s(%d)", "nghttp2_session_set_local_window_size() failed: %s(%d)", "connection buffer size is too small to store data following HTTP Upgrade response header: buflen=%zu, datalen=%zu", "Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=%zu\n", "nghttp2_session_mem_recv() failed: %s(%d)", "nghttp2_session_send() failed: %s(%d)", "Curl_http2_add_child", "!*tail", "Curl_http2_remove_child", "child->set.stream_depends_on == parent", "drained_transfer", "httpc->drain_total >= data->state.drain", "Failed sending HTTP2 data", "Connection state changed (MAX_CONCURRENT_STREAMS == %u)!\n", "drain_this", "failed to duplicate handle\n", "Internal NULL stream!\n", "failed to add handle to multi\n", "failed to set user_data for stream %d\n", "on_data_chunk_recv", "on_stream_close", "Internal NULL stream! 5\n", ":status", "stream->status_code != -1", "HTTP/2 ", "http2 error: %.*s\n", "%d bytes stray data read before trying h2 connection\n", "h2_process_pending_input: nghttp2_session_mem_recv() returned %zd:%s\n", "GOAWAY received", "http2_recv", "httpc->pause_stream_id == stream->stream_id", "%zd data bytes written\n", "Failed receiving HTTP2 data", "http2_handle_stream_close", "data->state.drain == 0", "REFUSED_STREAM", "HTTP/2 stream %d was not closed cleanly: %s (err %u)", "HTTP/2 stream %d was closed cleanly, but before getting  all response header fields, treated as error", "stream %d closed\n", ":method", "Failed sending HTTP request: Header overflow", ":path", ":scheme", ":authority", "trailers", "http2_send: Warning: The cumulative length of all headers exceeds %zu bytes and that could cause the stream to be rejected.\n", "Using Stream ID: %x (easy handle %p)\n", "proxy-connection", "transfer-encoding", "SSLKEYLOGFILE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/vtls/openssl.c", "BoringSSL", "SSL_ERROR_WANT_READ\n", "SSL_ERROR_WANT_WRITE\n", "BoringSSL SSL_read on shutdown: %s, errno %d", "SSL shutdown timeout", "select/poll on SSL socket, errno: %d", "SSL_get_shutdown() returned SSL_SENT_SHUTDOWN\n", "SSL_get_shutdown() returned SSL_RECEIVED_SHUTDOWN\n", "SSL_get_shutdown() returned SSL_SENT_SHUTDOWN|SSL_RECEIVED__SHUTDOWN\n", "SSL_ERROR_NONE", "SSL_ERROR_SSL", "SSL_ERROR_WANT_READ", "SSL_ERROR_WANT_WRITE", "SSL_ERROR_WANT_X509_LOOKUP", "SSL_ERROR_SYSCALL", "SSL_ERROR_ZERO_RETURN", "SSL_ERROR_WANT_CONNECT", "SSL_ERROR_WANT_ACCEPT", "SSL_ERROR unknown", "libcurl is now using a weak random seed!\n", "Curl_ossl_connect", "SSL connection timeout", "ossl_connect_step1", "ssl_connect_1 == connssl->connecting_state", "BoringSSL was built without SSLv2 support", "Unrecognized parameter passed via CURLOPT_SSLVERSION", "SSL: couldn't create a context: %s", "ALPN, offering %s\n", "http/1.1", "ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH", "failed setting cipher list: %s", "Cipher selection: %s\n", "error setting certificate verify locations:\n  CAfile: %s\n  CApath: %s", "error setting certificate verify locations, continuing anyway:\n", "successfully set certificate verify locations:\n", "  CAfile: %s\n  CApath: %s\n", "error loading CRL file: %s", "successfully load CRL file:\n", "  CRLfile: %s\n", "error signaled by ssl ctx callback", "SSL: couldn't create a context (handle)!", "WARNING: failed to configure server name indication (SNI) TLS extension\n", "SSL: SSL_set_session failed: %s", "SSL re-using session ID\n", "ssl_connection_complete == conn->proxy_ssl[sockindex].state", "handle != ((void*)0)", "bio != ((void*)0)", "SSL: SSL_set_fd failed: %s", "SSLv2", "TLSv1.0", "TLSv1.1", "TLSv1.3", "Change cipher spec", "%s (%s), %s, %s (%d):\n", "TLS header", "TLS change cipher", "TLS alert", "TLS handshake", "TLS app data", "TLS Unknown", "Hello request", "Client hello", "Server hello", "Newsession Ticket", "Server key exchange", "Client key exchange", "Request CERT", "Server finished", "CERT verify", "Finished", "Certificate Status", "Encrypted Extensions", "Key update", "Next protocol", "NPN, negotiated HTTP2 (%s)\n", "NPN, negotiated HTTP1.1\n", "NPN, no overlap, use HTTP1.1\n", "could not load PEM client certificate, BoringSSL error %s, (no key found, wrong pass phrase, or wrong file format?)", "could not load ASN1 client certificate, BoringSSL error %s, (no key found, wrong pass phrase, or wrong file format?)", "file type ENG for certificate not implemented", "BIO_new return NULL, BoringSSL error %s", "could not open PKCS12 file '%s'", "error reading PKCS12 file '%s'", "could not parse PKCS12 file, check password, BoringSSL error %s", "could not load PKCS12 client certificate, BoringSSL error %s", "unable to use private key from PKCS12 file '%s'", "private key from PKCS12 file '%s' does not match certificate in same file", "cannot add certificate to client CA list", "cannot add certificate to certificate chain", "not supported file type '%s' for certificate", "unable to set private key file: '%s' type %s", "file type ENG for private key not supported", "file type P12 for private key not supported", "not supported file type for private key", "unable to create an SSL structure", "Private key does not match the certificate public key", "passwd_callback", "0 == encrypting", "ossl_connect_step2", "ssl_connect_2 == connssl->connecting_state || ssl_connect_2_reading == connssl->connecting_state || ssl_connect_2_writing == connssl->connecting_state", "SSL certificate problem: %s", "SSL certificate verification failed", "BoringSSL SSL_connect: %s in connection to %s:%ld ", "SSL connection using %s / %s\n", "ALPN, server accepted to use %.*s\n", "ALPN, server did not agree to a protocol\n", "ossl_connect_step3", "ssl_connect_3 == connssl->connecting_state", "old SSL session ID is stale, removing\n", "failed to store ssl session", "SSL: couldn't get peer certificate!", "%s certificate:\n", " subject: %s\n", "[NONE]", " start date: %.*s\n", " expire date: %.*s\n", "SSL: couldn't get X509-issuer name!", " issuer: %s\n", "SSL: Unable to open issuer cert (%s)", "SSL: Unable to read issuer cert (%s)", "SSL: Certificate issuer check failed (%s)", " SSL certificate issuer check ok (%s)\n", "SSL certificate verify result: %s (%ld)", " SSL certificate verify result: %s (%ld), continuing anyway.\n", " SSL certificate verify ok.\n", "SSL: public key does not match pinned public key!", "Subject", "Serial Number", "Signature Algorithm", "Public Key Algorithm", "Start date", "Expire date", "   Unable to load public key\n", "RSA Public Key", "pub_key", "%02x:", "%s%c", "%s(%s)", " subjectAltName: host \"%s\" matched cert's IP address!\n", " subjectAltName does not match %s\n", "SSL: no alternative certificate subject name matches target host name '%s'", "SSL: illegal cert name field", "SSL: unable to obtain common name from peer certificate", "SSL: certificate subject name '%s' does not match target host name '%s'", " common name: %s (matched)\n", " subjectAltName: host \"%s\" matched cert's \"%s\"\n", "BoringSSL SSL_read: %s, errno %d", "SSL_write() returned SYSCALL, errno = %d", "Error: %s does not support double SSL tunneling.", "SSL_write() error: %s", "BoringSSL SSL_write: %s, errno %d", "SSL Engine not supported", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/fileinfo.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/curl/7.61.1/lib/hostcheck.c", "xn--", "nghttp2_session_reprioritize_stream", "pri_spec->stream_id != stream->stream_id", "dep_stream", "nghttp2_session_add_rst_stream", "headers_frame->hd.type == NGHTTP2_HEADERS", "nghttp2_session_open_stream", "stream->state == NGHTTP2_STREAM_IDLE", "nghttp2_stream_in_dep_tree(stream)", "nghttp2_session_adjust_closed_stream", "head_stream", "nghttp2_session_adjust_idle_stream", "nghttp2_session_mem_send", "nghttp2_is_fatal(rv)", "request HEADERS: stream_id == 0", "request HEADERS: client received request", "request HEADERS: invalid stream_id", "HEADERS: stream closed", "request HEADERS: max concurrent streams exceeded", "request HEADERS: depend on itself", "nghttp2_session_on_response_headers_received", "stream->state == NGHTTP2_STREAM_OPENING && nghttp2_session_is_my_stream_id(session, frame->hd.stream_id)", "nghttp2_session_on_push_response_headers_received", "stream->state == NGHTTP2_STREAM_RESERVED", "push response HEADERS: stream_id == 0", "HEADERS: no HEADERS allowed from client in reserved state", "push response HEADERS: max concurrent streams exceeded", "PRIORITY: stream_id == 0", "RST_STREAM: stream_id == 0", "RST_STREAM: stream in idle", "SETTINGS: stream_id != 0", "SETTINGS: ACK and payload != 0", "SETTINGS: unexpected ACK", "SETTINGS: invalid SETTINGS_ENBLE_PUSH", "SETTINGS: server attempted to enable push", "SETTINGS: too large SETTINGS_INITIAL_WINDOW_SIZE", "SETTINGS: invalid SETTINGS_MAX_FRAME_SIZE", "PUSH_PROMISE: stream_id == 0", "PUSH_PROMISE: push disabled", "PUSH_PROMISE: invalid stream_id", "PUSH_PROMISE: invalid promised_stream_id", "PUSH_PROMISE: stream in idle", "PUSH_PROMISE: stream closed", "PING: stream_id != 0", "GOAWAY: stream_id != 0", "GOAWAY: invalid last_stream_id", "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n", "Remote peer returned unexpected data while we expected SETTINGS frame.  Perhaps, peer does not support HTTP/2 properly.", "SETTINGS expected", "too large frame size", "DATA: insufficient padding space", "HEADERS: insufficient padding space", "PUSH_PROMISE: insufficient padding space", "CONTINUATION: unexpected", "HEADERS: invalid padding", "PUSH_PROMISE: invalid padding", "nghttp2_session_mem_recv", "iframe->state == NGHTTP2_IB_IGN_ALL", "nghttp2_buf_avail(&iframe->lbuf) > 0", "unexpected non-CONTINUATION frame or stream_id is invalid", "DATA: invalid padding", "nghttp2_session_recv", "proclen == readlen", "nghttp2_session_add_settings", "nghttp2_session_pack_data", "bufs->head == bufs->cur", "&session->aob.framebufs == bufs", "nghttp2_buf_avail(buf) >= datamax", "nghttp2_session_set_stream_user_data", "nghttp2_session_get_remote_settings", "nghttp2_session_get_local_settings", "nghttp2_session_upgrade", "nghttp2_session_upgrade2", "nghttp2_session_mem_send_internal", "session_prep_frame", "stream->item == item", "session->remote_window_size > 0", "session->last_sent_stream_id < frame->hd.stream_id", "session->obq_flood_counter_ > 0", "session->last_sent_stream_id + 2 <= frame->push_promise.promised_stream_id", "session_pack_extension", "session->callbacks.pack_extension_callback", "buf->pos == buf->last", "session_after_frame_sent1", "session_close_stream_on_goaway", "rv == 0", "find_stream_on_goaway_func", "stream->closed_next == NULL", "stream->closed_prev == NULL", "WINDOW_UPDATE: window_size_increment == 0", "WINDOW_UPDATE to idle stream", "WINDOW_UPADATE to reserved stream", "DATA: stream_id == 0", "DATA: stream in idle", "DATA: stream closed", "DATA: stream in half-closed(remote)", "DATA: stream not opened", "DATA: stream in reserved", "HEADERS: could not unpack", "PUSH_PROMISE: could not unpack", "Ignoring received invalid HTTP header field: frame type: %u, stream: %d, name: [%.*s], value: [%.*s]", "Invalid HTTP header field was received: frame type: %u, stream: %d, name: [%.*s], value: [%.*s]", "session_after_header_block_received", "!session->server", "session_process_settings_frame", "i < iframe->niv", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_submit.c", "nghttp2_submit_origin", "(size_t)(p - (uint8_t *)ov_copy) == nov * sizeof(nghttp2_origin_entry) + len + nov", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_helper.c", "nghttp2_increase_local_window_size", "delta >= 0", "Invalid argument", "Out of buffer space", "Unsupported SPDY version", "Operation would block", "Protocol error", "Invalid frame octets", "Data transfer deferred", "No more Stream ID available", "Stream was already closed or invalid", "Stream is closing", "The transmission is not allowed for this stream", "Stream ID is invalid", "Invalid stream state", "Another DATA frame has already been deferred", "request HEADERS is not allowed", "GOAWAY has already been sent", "Invalid header block", "Invalid state", "The user callback function failed due to the temporal error", "The length of the frame is invalid", "Header compression/decompression error", "Flow control error", "Insufficient buffer size given to function", "Callback was paused by the application", "Too many inflight SETTINGS", "Server push is disabled by peer", "DATA or HEADERS frame has already been submitted for the stream", "The current session is closing", "Invalid HTTP header field was received", "Violation in HTTP messaging rule", "Stream was refused", "Cancel", "When a local endpoint expects to receive SETTINGS frame, it receives an other type of frame", "The user callback function failed", "Received bad client magic byte string", "Flooding was detected in this HTTP/2 session, and it must be closed", "Unknown error code", "NO_ERROR", "PROTOCOL_ERROR", "INTERNAL_ERROR", "FLOW_CONTROL_ERROR", "SETTINGS_TIMEOUT", "STREAM_CLOSED", "FRAME_SIZE_ERROR", "CANCEL", "COMPRESSION_ERROR", "CONNECT_ERROR", "ENHANCE_YOUR_CALM", "INADEQUATE_SECURITY", "HTTP_1_1_REQUIRED", "nghttp2_hd_table_get", "INDEX_RANGE_VALID(context, idx)", "hd_ringbuf_get", "idx < ringbuf->len", "/index.html", "accept-charset", "accept-encoding", "gzip, deflate", "accept-language", "accept-ranges", "access-control-allow-origin", "allow", "cache-control", "content-disposition", "content-encoding", "content-language", "content-location", "content-range", "content-type", "etag", "expect", "from", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "last-modified", "link", "max-forwards", "proxy-authenticate", "proxy-authorization", "referer", "retry-after", "set-cookie", "strict-transport-security", "user-agent", "vary", "www-authenticate", ":pat", "allo", "serve", "accep", "expec", ":metho", ":schem", "upgrad", "refres", "refere", ":statu", "if-rang", "if-matc", "keep-aliv", "set-cooki", "user-agen", ":authorit", "retry-afte", "content-typ", "max-forward", "last-modifie", "content-rang", "if-none-matc", "cache-contro", "accept-range", "content-lengt", "accept-charse", "accept-languag", "accept-encodin", "content-languag", "www-authenticat", "content-encodin", "content-locatio", "proxy-connectio", "if-modified-sinc", "transfer-encodin", "proxy-authenticat", "if-unmodified-sinc", "content-dispositio", "proxy-authorizatio", "strict-transport-securit", "access-control-allow-origi", "pack_first_byte", "emit_string", "enclen == len", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_hd_huffman.c", "nghttp2_hd_huff_encode", "avail", "1.33.0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_http.c", "nghttp2_http_on_header", "nv->name->len > 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_rcbuf.c", "nghttp2_rcbuf_decref", "rcbuf->ref > 0", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_pq.c", "nghttp2_pq_remove", "pq->q[item->index] == item", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_frame.c", "nghttp2_frame_pack_headers", "nghttp2_frame_pack_priority", "nghttp2_buf_avail(buf) >= NGHTTP2_PRIORITY_SPECLEN", "nghttp2_frame_pack_rst_stream", "nghttp2_buf_avail(buf) >= 4", "nghttp2_frame_pack_settings", "nghttp2_frame_pack_push_promise", "nghttp2_frame_pack_ping", "nghttp2_buf_avail(buf) >= 8", "nghttp2_frame_pack_goaway", "nghttp2_frame_pack_window_update", "nghttp2_frame_pack_altsvc", "nghttp2_buf_avail(buf) >= 2 + altsvc->origin_len + altsvc->field_value_len", "nghttp2_frame_pack_origin", "nghttp2_buf_len(buf) == NGHTTP2_FRAME_HDLEN + frame->hd.length", "nghttp2_frame_add_pad", "nghttp2_buf_avail(buf) >= padlen - 1", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/nghttp2/1.33.0/lib/nghttp2_stream.c", "nghttp2_stream_reschedule", "stream->queued", "nghttp2_stream_attach_item", "(stream->flags & NGHTTP2_STREAM_FLAG_DEFERRED_ALL) == 0", "stream->item == NULL", "nghttp2_stream_defer_item", "stream->item", "nghttp2_stream_resume_deferred_item", "nghttp2_stream_dep_remove", "stream->dep_prev", "nghttp2_stream_dep_remove_subtree", "insert_link_dep", "stream->sib_prev == NULL", "stream_obq_remove", "unlink_dep", "nghttp2_outbound_item_free", "Slice parameters %d, %d are invalid\n", "bad src image pointers\n", "bad dst image pointers\n", "Slices start in the middle!\n", "Assertion %s failed at %s:%d\n", "dstY >= ret", "src/libswscale/swscale.c", "ret >= 0", "c->dstH >= dstY", "desc", "src/libswscale/swscale_internal.h", "Warning: dstStride is not aligned!\n         ->cannot do aligned memory accesses anymore\n", "(lastLumSrcY - firstLumSrcY + 1) <= hout_slice->plane[0].available_lines", "(lastChrSrcY - firstChrSrcY + 1) <= hout_slice->plane[1].available_lines", "--disable-all --enable-gpl --enable-nonfree --enable-avutil --enable-avcodec --enable-avformat --enable-swresample --enable-swscale --enable-network --enable-openssl --enable-libx264 --enable-libfdk_aac --enable-encoder=libx264 --enable-encoder=libfdk_aac --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=libfdk_aac --enable-protocol=hls --enable-protocol=udp --enable-protocol=http --enable-protocol=https --enable-protocol=file --enable-protocol=tls_openssl --enable-muxer=ipod --enable-muxer=mp4 --enable-demuxer=m4v --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=mpegts --enable-demuxer=flv --enable-demuxer=hevc --enable-parser=hevc --disable-iconv --disable-debug --disable-doc --enable-cross-compile --enable-rdft --strip=/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/sdk/bin/a64-android-strip --cc=/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/sdk/bin/a64-android-cc --nm=/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/sdk/bin/a64-android-nm --ar=/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/sdk/bin/a64-android-ar --ranlib='\"/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/sdk/bin/a64-android-ranlib\"' --enable-runtime-cpudetect --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=flv --disable-decoder=h263 --enable-decoder=h264 --enable-decoder=opus --enable-demuxer=aac --enable-demuxer=flv --enable-demuxer=latm --enable-demuxer=live_flv --enable-parser=aac --enable-parser=aac_latm --enable-parser=h264 --enable-protocol=async --enable-protocol=ffrtmphttp --enable-protocol=rtmp --enable-protocol=rtmpt --enable-optimizations --disable-bsfs --enable-bsf=aac_adtstoasc --enable-bsf=h264_mp4toannexb --enable-bsf=hevc_mp4toannexb --enable-pic --target-os=android --arch=aarch64 --disable-neon --extra-libs=' -lssl -lcrypto -lm -ldl' --extra-cflags=' -I/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/ffmpeg/ff3.2 -include include.h -I/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/archive/a64-android/crypto-1.0.2x/headers -I/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/archive/a64-android/ssl-1.0.2x/headers -Wno-sometimes-uninitialized -Wno-deprecated-declarations -Wno-unused-function -Wno-implicit-function-declaration -Wno-ignored-optimization-argument -U_FILE_OFFSET_BITS -Wno-incompatible-pointer-types-discards-qualifiers -fvisibility=default -fPIC -I/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/ffmpeg/ff3.2/.build/a64-android' --extra-ldflags=' -L/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/ffmpeg/ff3.2/.build/a64-android' --prefix=/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/media/ffmpeg/ff3.2/.build/a64-android/targets --enable-static --disable-shared", "libswscale license: nonfree and unredistributable", "YUV color matrix differs for YUV->YUV, using intermediate RGB to convert\n", "deprecated pixel format used, make sure you did set range correctly\n", "%s is not supported as input pixel format\n", "%s is not supported as output pixel format\n", "Exactly one scaler algorithm must be chosen, got %X\n", "%dx%d -> %dx%d is invalid scaling dimension\n", "Forcing full internal H chroma due to odd output size\n", "Forcing full internal H chroma due to input having non subsampled chroma\n", "Desired dithering only supported in full chroma interpolation for destination format '%s'\n", "Ordered dither is not supported in full chroma interpolation for destination format '%s'\n", "%s output is not supported with half chroma resolution, switching to full\n", "full chroma interpolation for destination format '%s' not yet implemented\n", "Cannot allocate memory.\n", "c->chrDstH <= dstH", "src/libswscale/utils.c", "ehh flags invalid?!", "%s scaler, from %s to %s%s ", "dithered ", "using %s\n", "%dx%d -> %dx%d\n", "lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "using alpha blendaway %s -> %s special converter\n", "using unscaled %s -> %s special converter\n", "%1.3f ", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "sizeFactor > 0", "filterSize > 0", "filter2Size > 0", "minFilterSize > 0", "SwScaler: reducing / aligning filtersize %d -> %d\n", "(*filterPos)[i] >= 0", "(*filterPos)[i] < srcW", "(*filterPos)[i] + j < srcW || !filter[i * filterSize + j]", "SwScaler: zero vector in scaling\n", "sws: initFilter failed\n", "area averaging", "bicubic", "luma bicubic / chroma bilinear", "fast bilinear", "Gaussian", "Lanczos", "nearest neighbor / point", "experimental", "Optimized 2 tap filter code cannot be used\n", "No accelerated colorspace conversion found from %s to %s.\n", "%ibpp not supported by yuv2rgb\n", "plane_count == nb_components - 1", "src/libswscale/alphablend.c", "SWScaler", "swscaler", "sws_flags", "scaler flags", "fast_bilinear", "nearest neighbor", "averaging area", "bicublin", "luma bicubic, chroma bilinear", "gauss", "lanczos", "natural bicubic spline", "print_info", "print info", "accurate_rnd", "accurate rounding", "full_chroma_int", "full chroma interpolation", "full_chroma_inp", "full chroma input", "bitexact", "error_diffusion", "error diffusion dither", "srcw", "source width", "srch", "source height", "dstw", "destination width", "dsth", "destination height", "src_format", "source format", "dst_format", "destination format", "src_range", "source is full range", "dst_range", "destination is full range", "param0", "scaler param 0", "param1", "scaler param 1", "source vertical chroma position in luma grid/256", "source horizontal chroma position in luma grid/256", "destination vertical chroma position in luma grid/256", "destination horizontal chroma position in luma grid/256", "sws_dither", "set dithering algorithm", "leave choice to sws", "bayer", "bayer dither", "error diffusion", "a_dither", "arithmetic addition dither", "x_dither", "arithmetic xor dither", "gamma correct scaling", "alphablend", "mode for alpha -> non alpha", "ignore alpha", "uniform_color", "blend onto a uniform color", "blend onto a checkerboard", "n == s->plane[ii].available_lines", "src/libswscale/slice.c", "src/libswscale/swscale_unscaled.c", "!(srcStride[0] % 2 || srcStride[1] % 2 || srcStride[2] % 2 || dstStride[0] % 2 || dstStride[1] % 2)", "!(dstStride[0] % 2 || dstStride[1] % 2)", "internal error %s -> %s converter\n", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "srcSliceH > 1", "URLContext", "protocol_whitelist", "!(e=av_dict_get(*options, \"protocol_whitelist\", ((void*)0), 0)) || (uc->protocol_whitelist && !strcmp(uc->protocol_whitelist, e->value))", "src/libavformat/avio.c", "!(e=av_dict_get(*options, \"protocol_blacklist\", ((void*)0), 0)) || (uc->protocol_blacklist && !strcmp(uc->protocol_blacklist, e->value))", "Protocol not on whitelist '%s'!\n", "Protocol blacklisted '%s'!\n", "Setting default whitelist '%s'\n", "No default whitelist set\n", "https protocol not found, recompile FFmpeg with openssl, gnutls or securetransport enabled.\n", "!whitelist || !(e=av_dict_get(*options, \"protocol_whitelist\", ((void*)0), 0)) || !strcmp(whitelist, e->value)", "!blacklist || !(e=av_dict_get(*options, \"protocol_blacklist\", ((void*)0), 0)) || !strcmp(blacklist, e->value)", "List of protocols that are allowed to be used", "List of protocols that are not allowed to be used", "rw_timeout", "Timeout for IO operations (in microseconds)", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.", "subfile,", "Impossible to open the '%s' protocol for reading\n", "Impossible to open the '%s' protocol for writing\n", "subfile", "Key '%s' not found.\n", "Error parsing options string %s\n", "AVIOContext", "!s->write_flag", "src/libavformat/aviobuf.c", "Statistics: %d seeks, %d writeouts\n", "Statistics: %ld bytes read, %d seeks\n", "Invalid UTF8 sequence in avio_put_str16%s\n", "Failed to decrease buffer size\n", "len >= s->orig_buffer_size", "Output", "  Duration: ", "%02d:%02d:%02d.%02d", ", start: ", "%s%d.%06d", ", bitrate: ", "    Chapter #%d:%d: ", "start %f, ", "end %f\n", "  Program %d %s\n", "  No Program\n", "%08x ", " %02x", "stream #%d:\n", "  keyframe=%d\n", "  duration=%0.3f\n", "  dts=", "%0.3f", "  pts=", "  size=%d\n", "%sMetadata:\n", "\n%s  %-16s: ", "dump_separator", "    Stream #%d:%d", "[0x%x]", ", %d, %d/%d", ", SAR %d:%d DAR %d:%d", "fps, ", "tbr, ", "tbn, ", " (dub)", " (original)", " (comment)", " (lyrics)", " (karaoke)", " (forced)", " (hearing impaired)", " (visual impaired)", " (clean effects)", "%1.4f %s", "%3.2f %s", "%1.0f %s", "%1.0fk %s", "%sSide data:\n", "%s  ", "palette", "new extradata", "paramchange: ", "H.263 macroblock info", "replaygain: ", "displaymatrix: rotation of %.2f degrees", "stereo3d: ", "audio service type: ", "quality factor: %d, pict_type: %c", "cpb: ", "unknown side data type %d (%d bytes)", "channel count %u, ", "channel layout: %s, ", "sample_rate %u, ", "width %u height %u", "unknown param", "invalid data", "track gain", "track peak", "album gain", "album peak", "%s - ", " (inverted)", "effects", "visually impaired", "hearing impaired", "dialogue", "comentary", "emergency", "voice over", "karaoke", "bitrate max/min/avg: %d/%d/%d buffer size: %d vbv_delay: %ld", "Mastering Display Metadata, has_primaries:%d has_luminance:%d r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f) min_luminance=%f, max_luminance=%f\n", "live RTMP FLV (Flash Video)", "flv_metadata", "Allocate streams according to the onMetaData array", "NGINX RTMP", "type:%d, size:%d, last:%d, dts:%ld pos:%ld\n", "Adjusting next position due to index mismatch\n", "OnTextData packet", "Skipping flv packet: type %d, size %d, flags %d.\n", "%s stream discovered after head already parsed\n", "%d %X %d \n", "Negative cts, previous timestamps might be wrong.\n", "invalid timestamps %ld %ld\n", "Omnia A/XE", "Packet mismatch %d %d %d\n", "Found invalid index entries, clearing the index.\n", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Unknown type %s\n", "AMF_DATA_TYPE_STRING parsing failed\n", "Keyframe index parsing failed\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_OBJECT\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_MIXEDARRAY, found %d\n", "unsupported amf type %d\n", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "stereo", "Open Broadcaster Software v0.%d", "metadatacreator", "MEGA", "filesize", "framerate", "keyframes have been paresed\n", "!flv->keyframe_times", "src/libavformat/flvdec.c", "!flv->keyframe_filepositions", "Invalid keyframes object, skipping.\n", "keyframe stream hasn't been created\n", "flv->last_keyframe_stream_index <= s->nb_streams", "Skipping duplicate index\n", "Audio codec (%x)", "Video codec (%x)", "live_flvdec", "ssegment", "image2", "Probing %s score:%d size:%d\n", "Probing %s score:%d increased to %d due to MIME type\n", "Specified probe size value %u cannot be < %u\n", "mime_type", "Format %s detected only with low score of %d, misdetection possible!\n", "Format %s probed with size=%d and score=%d\n", "hevc,h265,265", "hevc demuxer", "hls,applehttp", "Apple HTTP Live Streaming", "live_start_index", "segment index to start live streams at (negative values are from the end)", "#EXTM3U", "#EXT-X-STREAM-INF:", "#EXT-X-TARGETDURATION:", "#EXT-X-MEDIA-SEQUENCE:", "cookies", "http_proxy", "seekable", "Empty playlist\n", "variant_bitrate", "Error when loading first segment '%s'\n", "No expected HTTP requests have been made\n", "#EXT-X-KEY:", "AES-128", "SAMPLE-AES", "#EXT-X-MEDIA:", "#EXT-X-PLAYLIST-TYPE:", "EVENT", "#EXT-X-MAP:", "#EXT-X-ENDLIST", "#EXT-X-DISCONTINUITY", "#EXTINF:", "#EXT-X-BYTERANGE:", "BANDWIDTH=", "AUDIO=", "VIDEO=", "SUBTITLES=", "METHOD=", "URI=", "TYPE=", "GROUP-ID=", "ASSOC-LANGUAGE=", "NAME=", "DEFAULT=", "FORCED=", "CHARACTERISTICS=", "SUBTITLES", "public.accessibility.describes-music-and-sound", "public.accessibility.describes-video", "BYTERANGE=", "user_agent", "No longer receiving playlist %d\n", "Failed to reload playlist %d\n", "skipping %d segments ahead, expired from playlists\n", "Failed to open segment of playlist %d\n", "Failed to open an initialization section in playlist %d\n", "Downloading an initialization section of size %ld\n", "end_offset", "HLS request for url '%s', offset %ld, playlist %d\n", "Unable to read key file %s\n", "Unable to open key file %s\n", "crypto+%s", "crypto:%s", "SAMPLE-AES encryption is not supported yet\n", "Unable to seek to offset %ld of HLS segment '%s'\n", "Could not read complete segment.\n", "Too large HLS ID3 tag (%d > %ld bytes)\n", "Stripped %d HLS ID3 bytes\n", "Stripped additional %d HLS ID3 bytes\n", "!pls->id3_deferred_extra", "src/libavformat/hls.c", "Changing ID3 metadata in HLS audio elementary stream", "PRIV", "Invalid HLS ID3 audio timestamp %ld\n", "APIC", "A HLS playlist item '%s' referred to an external file '%s'. Opening this file was forbidden for security reasons\n", "comment", "stream index inconsistency: index %d, %d main streams, %d subdemuxer streams\n", "Now receiving playlist %d, segment %d\n", "com.apple.streaming.transportStreamTimestamp", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TDATTIMETORYTRDATSIZTYER", "image/gif", "image/jpeg", "image/jpg", "image/png", "image/tiff", "image/bmp", "TALB", "TCOM", "TCON", "genre", "TCOP", "copyright", "TENC", "encoded_by", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "USLT", "lyrics", "TCMP", "compilation", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "album-sort", "TSOP", "artist-sort", "TSOT", "title-sort", "Other", "32x32 pixels 'file icon'", "Other file icon", "Cover (front)", "Cover (back)", "Leaflet page", "Media (e.g. label side of CD)", "Lead artist/lead performer/soloist", "Artist/performer", "Conductor", "Band/Orchestra", "Composer", "Lyricist/text writer", "Recording Location", "During recording", "During performance", "Movie/video screen capture", "A bright coloured fish", "Illustration", "Band/artist logotype", "Publisher/Studio logotype", "id3v2 ver:%d flags:%02X len:%d\n", "invalid extended header length", "extended header too long.", "Invalid empty frame %s, skipping.\n", "encrypted", "encrypted and compressed", "Skipping %s ID3v2 frame %s.\n", "COMM", "Failed to alloc %d bytes\n", "Compresssed frame %s tlen=%d dlen=%ld\n", "Failed to alloc %ld bytes\n", "Failed to read compressed tag\n", "Failed to uncompress tag: %d\n", "invalid frame id, assuming padding\n", "ID3v2.%d tag skipped, cannot handle %s\n", "Error reading frame %s, skipped\n", "TXXX", "Error opening memory stream\n", "Cannot read BOM value, input too short\n", "Incorrect BOM value\n", "Unknown encoding\n", "lyrics-%s%s%s", "Error reading lyrics, skipped\n", "Error reading comment frame, skipped\n", "TYER", "TDAT", "-%.2s-%.2s", " %.2s:%.2s", "GEOB", "CHAP", "Failed to alloc %zu bytes\n", "Error reading GEOB frame, data truncated.\n", "Unknown attached picture mimetype: %s, skipping.\n", "Unknown attached picture type %d.\n", "Error decoding attached picture description.\n", "No AVFormatContext, skipped ID3 chapter data\n", "ijkav_register_##x##_protocol: ABI mismatch.\n", "raw MPEG-4 video", "m4v demuxer", "pAinvalid size %ld in stsd\n", "size=%ld 4CC= %c%c%c%c/0x%08x codec_type=%d\n", "mov,mp4,m4a,3gp,3g2,mj2", "QuickTime / MOV", "multiple fourcc not supported\n", "Concatenated H.264 or H.265 might not play correctly.\n", "Planar Y'CbCr 8-bit 4:2:0", "Sorenson H263", "compatible_brands", "audio channels %d\n", "version =%d, isom =%d\n", "qt  ", "ignoring multiple glbl\n", "reel_name", "Atoms too deeply nested\n", "Detected moov in a free atom.\n", "Broken file, trak/mdat not at top-level\n", "type: %08x '%.4s' parent:'%.4s' sz: %ld %ld %ld\n", "overread end of atom '%.4s' by %ld bytes\n", "ignored unknown aclr value (%d)\n", "aclr not decoded - incomplete atom\n", "aclr not decoded - unable to add atom to extradata\n", "aclr not decoded - unexpected size %ld\n", "truncated extradata\n", "Duplicated STCO atom\n", "nclx", "nclc", "unsupported color_parameter_type %s\n", "%s: pri %d trc %d matrix %d", " full %u", "track[%i].ctts.entries = %i\n", "ignoring CTTS entry with count=%d duration=%d\n", "count=%d, duration=%d\n", "CTTS invalid\n", "dts shift %d\n", "mov_update_dts_shift(): dts_shift set to %d\n", "type %.4s size %d\n", "volume %s, len %d\n", "filename %s, len %d\n", "nlvl from %d, nlvl to %d\n", "type %d, len %d\n", "path %s\n", "dir %s\n", "Unknown dref type 0x08%x size %d\n", "Duplicated ELST atom\n", "track[%i].edit_count = %i\n", "duration=%ld time=%ld rate=%f\n", "enda %d\n", "Unknown MOV field order 0x%04x\n", "[aax] file checksum == ", "[aax] activation_bytes option is missing!\n", "[aax] activation_bytes value needs to be 4 bytes!\n", "[aax] audible_fixed_key value needs to be 16 bytes!\n", "[aax] mismatch in checksums!\n", "[aax] error in drm blob decryption!\n", "ISO: File Type Major Brand: %.4s\n", "major_brand", "minor_version", "ctype= %.4s (0x%08x)\n", "stype= %.4s\n", "handler_name", "Multiple mdhd?\n", "Version %d", "stream has moof boxes, will look for a mfra\n", "found a moof box but failed to read the mfra (may be a live ismv)\n", "found a moof box but stream is not seekable, can not look for mfra\n", "moof offset %lx\n", "doesn't look like mfra (unreasonable size)\n", "doesn't look like mfra (size mismatch)\n", "doesn't look like mfra (tag mismatch)\n", "stream has mfra\n", "failed to seek back after looking for mfra\n", "found tfra\n", "Found duplicated MOOV Atom. Skipped it\n", "time scale = %i\n", "sample aspect ratio already set to %d:%d, ignoring 'pasp' atom (%d:%d)\n", "sidx version %u", "could not find corresponding track id %d\n", "sidx reference_type 1", "Duplicated STPS atom\n", "track[%i].stsc.entries = %i\n", "Duplicated STSC atom\n", "invalid STSD entries %d\n", "Duplicate STSD\n", "keyframe_count = %d\n", "Duplicated STSS atom\n", "sample_size = %d sample_count = %d\n", "Invalid sample field size %d\n", "Duplicated STSZ atom\n", "track[%i].stts.entries = %i\n", "Duplicated STTS atom\n", "Invalid sample_count=%d\n", "sample_count=%d, sample_duration=%d\n", "could not find corresponding trex\n", "found fragment index for track %u\n", "found fragment index entry for track %u and moof_offset %ld\n", "track %u has a fragment index but it doesn't have an (in-order) entry for moof_offset %ld\n", "frag flags 0x%x\n", "stream %d, missing mandatory atoms, broken header\n", "stream %d, error opening alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d\n", "Skipped opening external track: stream %d, alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d.Set enable_drefs to allow this.\n", "stream %d, timescale not set\n", "STSZ sample size %d invalid (too large), ignoring\n", "STSZ sample size %d invalid (too small), ignoring\n", "wrong sample count\n", "Sample size %u is too large\n", "AVIndex stream %d, sample %d, offset %lx, dts %ld, size %d, distance %d, keyframe %d\n", "Invalid SampleDelta %d in STTS, at %d st:%d\n", "error unaligned chunk\n", "Zero bytes per frame, but %d samples per frame", "wrong chunk count %d\n", "AVIndex stream %d, chunk %d, offset %lx, dts %ld, size %d, duration %d\n", "Offset DTS by ctts[%d].duration: %d\n", "Processing st: %d, edit list %ld - media time: %ld, duration: %ld\n", "Missing key frame while reordering index according to edit list\n", "shifted frame pts, curr_cts: %ld @ %ld, ctts: %d, ctts_count: %ld\n", "Cannot add CTTS entry %ld - {%ld, %d}\n", "skip %d audio samples from curr_cts: %ld\n", "drop a frame at curr_cts: %ld @ %ld\n", "Cannot reallocate frame duration buffer\n", "Cannot add index entry\n", "Support for mvhd.timescale = 0 with editlists", "end_index >= 0 && end_index <= st->nb_index_entries", "src/libavformat/mov.c", "Reference with mismatching origin, %s not tried for security reasons, set demuxer option use_absolute_path to allow it anyway\n", "Using absolute path on user request, this is a possible security issue\n", "Absolute path %s not tried for security reasons, set demuxer option use_absolute_path to allow absolute paths\n", "flags 0x%x entries %d\n", "first sample flags 0x%x\n", "found frag time %ld sc->dts_shift %d ctts.duration %d sc->time_offset %ld flags & MOV_TRUN_SAMPLE_CTS %d\n", "calculated into dts %ld\n", "found frag time %ld, using it for dts\n", "Failed to add index entry\n", "Unsupported DTS audio channel layout", "get_wav_header failed\n", "unknown compression for cmov atom !\n", "Duplicated SBGP atom\n", "systemBitrate=\"", "iTunSMPB", "%*X %X %X %X", "cdec", "Unhandled or malformed custom metadata of size %ld\n", "ignoring 'frma' atom of '%.4s', stream has codec id %d\n", "ignoring 'frma' atom of '%.4s', stream format is '%.4s'\n", "duplicate senc atom\n", "senc atom size %ld too small\n", "failed to read the auxiliary info", "duplicate saiz atom\n", "failed to read the auxiliary info sizes", "premiere_version", "quicktime_version", "account_type", "account_id", "category", "episode_uid", "firmware", "hd_video", "keywords", "synopsis", "podcast", "gapless_playback", "purchase_date", "rating", "sort_album_artist", "sort_album", "sort_artist", "sort_composer", "sort_name", "sort_show", "media_type", "episode_id", "episode_sort", "season_number", "producer", "chapter", "director", "disclaimer", "edit_date", "original_format", "grouping", "host_computer", "make", "original_artist", "performers", "playback_requirements", "original_source", "Error parsing cover art.\n", "The index of 'data' is out of range: %d >= %d.\n", "UDTA parsing failed retrying raw\n", "%.4s", "Failed to store the number (%d) in string.\n", "Failed to store the number (%u) in string.\n", "Failed to store the float32 number (%f) in string.\n", "%s-%s", "HandBrake %d.%d.%d", "lang \"%3s\" ", "tag \"%s\" value \"%s\" atom \"%.4s\" %d %ld\n", "loci too short\n", "place name too long\n", "loci too short (%u bytes left, need at least %d)\n", "%+08.4f%+09.4f", "Unknown cover type: 0x%x.\n", "The 'keys' atom with the invalid key count: %d\n", "The key# %d in meta has invalid size: %d\n", "use_absolute_path", "allow using absolute path when opening alias, this is a possible security issue", "seek_streams_individually", "Seek each stream individually to the to the closest point", "ignore_editlist", "ignore_chapters", "use_mfra_for", "use mfra for fragment timestamps", "export_all", "Export unrecognized metadata entries", "export_xmp", "Export full XMP metadata", "activation_bytes", "Secret bytes for Audible AAX files", "audible_fixed_key", "Fixed key used for handling Audible AAX files", "77214d4b196a87cd520045fd20a51d67", "decryption_key", "The media decryption key (hex)", "enable_drefs", "Enable external track support.", "Found media data tag MPEG indicating this is a MOV-packed MPEG-PS.\n", "Invalid decryption key len %d expected %d\n", "error reading header\n", "moov atom not found\n", "on_parse_exit_offset=%ld\n", "Forcing full parsing for mp3 stream\n", "Referenced QT chapter track not found\n", "Failed to retrieve first frame\n", "ignoring stream duration which is shorter than chapters\n", "Chapter %d not found in file\n", "size: %dx%d\n", "palette: ", "%06x%s", "stream %d, offset 0x%lx: partial file\n", "Nonkey frame from stream %d discarded due to AVDISCARD_NONKEY\n", "Cannot append palette to packet\n", "stream %d, sample %d, dts %ld\n", "root atom offset 0x%lx: partial file\n", "read fragments, offset 0x%lx\n", "failed to read iv from the auxiliary info\n", "failed to read subsample count from the auxiliary info\n", "failed to read subsample from the auxiliary info\n", "subsample size exceeds the packet size left\n", "leftover packet bytes after subsample processing\n", "stream %d, timestamp %ld, sample %d\n", "stream %d, found sample %d\n", "current sample %d greater than the number of auxiliary info sample sizes %zu\n", "auxiliary info offset %zu greater than auxiliary info size %zu\n", "chan: layout=%u bitmap=%u num_descr=%u\n", "reached EOF while reading channel layout\n", "avc1\r", "text", "\fencd", "avc1\r", "mp4a", "tx3g", "avc1k", "VP6A]", "VP6F", "yuv2", "yuvs", "2vuy", "raw  ", "BGRA ", "RGBA ", "ABGR ", "b48r0", "fatal error, input is not a single packet, implement a AVParser for it\n", "Malformed AAC bitstream detected: use the audio bitstream filter 'aac_adtstoasc' to fix it ('-bsf:a aac_adtstoasc' option with ffmpeg)\n", "aac bitstream error\n", "Track %d starts with a nonzero dts %ld, while the moov already has been written. Set the delay_moov flag to handle this case.\n", "pts has no value\n", "video/mp4", "ipod", "iPod H.264 MP4 (MPEG-4 Part 14)", "m4v,m4a", "Application provided duration: %ld / timestamp: %ld is out of range for mov/mp4 format\n", "Application provided duration: %ld is invalid\n", "mov muxer", "movflags", "MOV muxer flags", "rtphint", "Add RTP hint tracks", "moov_size", "maximum moov size so it can be placed at the begin", "empty_moov", "Make the initial moov atom empty", "frag_keyframe", "Fragment at video keyframes", "separate_moof", "Write separate moof/mdat atoms for each track", "frag_custom", "Flush fragments on caller requests", "isml", "Create a live smooth streaming feed (for pushing to a publishing point)", "faststart", "Run a second pass to put the index (moov atom) at the beginning of the file", "omit_tfhd_offset", "Omit the base data offset in tfhd atoms", "disable_chpl", "Disable Nero chapter atom", "default_base_moof", "Set the default-base-is-moof flag in tfhd atoms", "dash", "Write DASH compatible fragmented MP4", "frag_discont", "Signal that the next fragment is discontinuous from earlier ones", "delay_moov", "Delay writing the initial moov until the first fragment is cut, or until the first fragment flush", "global_sidx", "Write a global sidx index at the start of the file", "write_colr", "Write colr atom (Experimental, may be renamed or changed, do not use from scripts)", "write_gama", "Write deprecated gama atom", "use_metadata_tags", "Use mdta atom for metadata.", "rtpflags", "RTP muxer flags", "Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC", "rfc2190", "Use RFC 2190 packetization instead of RFC 4629 for H.263", "skip_rtcp", "Don't send RTCP sender reports", "h264_mode0", "Use mode 0 for H.264 in RTP", "send_bye", "Send RTCP BYE packets when finishing", "skip_iods", "Skip writing iods atom.", "iods_audio_profile", "iods audio profile atom.", "iods_video_profile", "iods video profile atom.", "Maximum fragment duration", "min_frag_duration", "Minimum fragment duration", "frag_size", "Maximum fragment size", "ism_lookahead", "Number of lookahead entries for ISM files", "video_track_timescale", "set timescale of all video tracks", "Override major brand", "use_editlist", "use edit list", "fragment_index", "Fragment number of the next fragment", "mov_gamma", "gamma value for gama atom", "frag_interleave", "Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead)", "encryption_scheme", "Configures the encryption scheme, allowed values are none, cenc-aes-ctr", "encryption_key", "The media encryption key (hex)", "encryption_kid", "The media encryption key identifier (hex)", "use_stream_ids_as_track_ids", "use stream ids as track ids", "write_tmcd", "force or disable writing tmcd", "palette:", "%06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x", "PSP mode need one video and one audio stream\n", "3gp6", "3gp4", "3g2b", "3g2a", "M4V ", "M4A ", "Frame rate %f outside supported range\n", "wide", "timecode: tbc=%d/%d invalid, fallback on %d/%d\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n", "<head>\n", "<meta name=\"creator\" content=\"%s\" />\n", "Lavf57.56.100", "</head>\n", "<body>\n", "<switch>\n", "<%s systemBitrate=\"%ld\">\n", "systemBitrate", "trackID", "systemLanguage", "CodecPrivateData", "FourCC", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "</%s>\n", "</switch>\n", "</body>\n", "</smil>\n", "<param name=\"%s\" value=\"%d\" valuetype=\"data\"/>\n", "<param name=\"%s\" value=\"%s\" valuetype=\"data\"/>\n", "Not writing any edit list even though one would have been required\n", "track width is too large\n", "track height is too large\n", "EDTS using dts:%ld cts:%d instead of dts:%ld cts:%ld tid:%d\n", "av_rescale_rnd(start_dts, 1000, track->timescale, AV_ROUND_DOWN) <= 0", "src/libavformat/movenc.c", "FATAL error, file duration too long for timebase, this file will not be\nplayable with quicktime. Choose a different timebase or a different\ncontainer format\n", "dhlr", "url ", "DataHandler", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "clcp", "ClosedCaptionHandler", "sbtl", "subp", "SubtitleHandler", "HintHandler", "TimeCodeHandler", "Unknown hldr_type for %s / 0x%04X, writing dummy values\n", "Lucida Grande", "Not writing 'gama' atom. Format is not MOV.\n", "Not writing 'colr' atom. Format is not MOV or MP4.\n", "XDCAM", " HD422", " %d%c", "Could not locate DNxHD bit stream in vos_data\n", "Could not locate DNxHD bit stream, vos_data too small\n", "moov atom written before any packets, unable to write correct dvc1 atom. Set the delay_moov flag to fix this.\n", "Internal error, put_bits buffer too small\n", "s->buf_ptr < s->buf_end", "src/libavcodec/put_bits.h", "DpxE", "gamma value %g\n", "writing gama value %d\n", "track->mode == 0x02", "gamma value unknown, unable to write gama atom\n", "color primaries unspecified, assuming bt709\n", "color primaries unspecified, assuming bt470bg\n", "color primaries unspecified, assuming smpte170\n", "color primaries unspecified, unable to assume anything\n", "track->mode == 0x02 || track->mode == 0x01", "next_dts >= 0", "next_dts <= 0x7fffffff", "not writing 'chan' tag due to lack of channel information\n", "fps %d is too large\n", "reel_name length %lu is too large\n", "stss", "stps", "a=control:streamid=%d\r\n", "Lavc57.64.100", "2006/04/01 11:11:11", "perf", "titl", "author", "gnre", "dscp", "albm", "cprt", "yrrc", "earth", "malformed location metadata\n", "aART", "encoding_tool", "ldes", "tvsh", "tven", "tvnn", "tves", "tvsn", "stik", "hdvd", "pgap", "cpil", "disk", "trkn", "tmpo", "Estimating the duration of the last packet in a fragment, consider setting the duration field in AVPacket instead.\n", "Non-consecutive fragments, writing incorrect sidx\n", "Starting second pass: moving the moov atom to the beginning of the file\n", "reserved_moov_size is too small, needed %ld additional\n", "Starting second pass: inserting sidx atoms\n", "Unable to re-open %s output file for the second pass (faststart)\n", "Empty MOOV enabled; disabling automatic bitstream filtering\n", "No meaningful edit list will be written when using empty_moov without delay_moov\n", "Sample interleaving in fragments is mutually exclusive with omit_tfhd_offset and separate_moof\n", "muxer does not support non seekable output\n", "You requested a copy of the original timecode track so timecode metadata are now ignored\n", "Invalid encryption key len %d expected %d\n", "Invalid encryption kid len %d expected %d\n", "unsupported encryption scheme %s\n", "Could not find tag for codec %s in stream #%d, codec not currently supported in container\n", "D-10/IMX must use 720x608 or 720x512 video resolution\n", "Resolution %dx%d too large for mov/mp4\n", "WARNING codec timebase is very high. If duration is too long,\nfile may not be playable by quicktime. Specify a shorter timebase\nor choose different container.\n", "VP9 in MP4 support is experimental, add '-strict %d' if you want to use it.\n", "track %d: codec frame size is not set\n", "track %d: codec block align is not set for adpcm\n", "track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n", "track %d: muxing mp3 at %dhz is not standard in MP4\n", "Warning, extension is not .m4a, .m4v nor  .m4b Quicktime/Ipod might not play the file\n", "Using MS style video codec tag, the file may be unplayable!\n", "Using MS style audio codec tag, the file may be unplayable!\n", "unsupported height for dv codec\n", "%s rawvideo cannot be written to mov, output file will be unreadable\n", "aac_adtstoasc", "mp4 muxer", "ipod muxer", "CENC-AVC: remaining size %d smaller than nal length+type %d\n", "CENC-AVC: nal size %d remaining %d\n", "Unable to initialize hinting of stream %d\n", "rtpo", "drac", "HEVC", "VC-1", "src/libavformat/mpegts.c", "DVB subtitles with multiple languages", "Opus in MPEG-TS - channel_config_code > 0x8", "mpegts", "mpegtsraw", "raw MPEG-TS (MPEG-2 Transport Stream)", "Filter: pid=0x%x type=%d\n", "pid %x is not PES\n", "Tag %x length violation new length %d bytes remaining %d\n", "Maximum MP4 descriptor level exceeded\n", "Found tag %x expected %x\n", "Predefined SLConfigDescriptor", "SDT:\n", "service_name", "service_provider", "PAT:\n", "sid=0x%x pid=0x%x\n", "PMT: len %i\n", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "pcr_pid=0x%x\n", "program tag: 0x%02x len=%d\n", "pid=%x pes_code=%#x\n", "pid=%x stream_type=%x probing\n", "PES packet size mismatch\n", "cannot set stream info, internal codec is open\n", "stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n", "Continuity check failed for pid %d expected %d got %d\n", "pos >= 188", "All programs have pmt, headers found\n", "mpegts demuxer", "resync_size", "set size limit for looking up a new synchronization", "fix_teletext_pts", "try to fix pts values of dvb teletext streams", "ts_packetsize", "output option carrying the raw packet size", "scan and combine all PMTs", "skip_changes", "skip changing / adding streams / programs", "skip_clear", "skip clearing programs", "Failed to allocate buffers for seekback\n", "Could not detect TS packet size, defaulting to non-FEC/DVHS\n", "tuning done\n", "start=%0.3f pcr=%0.3f incr=%d\n", "score: %d, dvhs_score: %d, fec_score: %d \n", "Unable to seek back to the start\n", "Skipping after seek\n", "max resync size reached, could not find sync byte\n", "changing packet size to %d\n", "mpegtsraw demuxer", "compute_pcr", "compute exact PCR for each transport stream packet", "Unable to find a suitable output format for '%s'\n", "Out of memory\n", "pkt->size == ((-0x7fffffff-1) / 3 * 2 + (int)sizeof(AVFrame))", "src/libavformat/mux.c", "Delay between the first packet and last packet in the muxing queue is %ld > %ld: forcing output\n", "av_interleaved_write_frame size:%d dts:%s pts:%s\n", "av_interleaved_write_frame FLUSH\n", "s->oformat", "Setting the AVFormatContext to bitexact mode, because the AVCodecContext is in that mode. This behavior will change in the future. To keep the current behavior, set AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n", "No streams to mux were specified\n", "Using AVStream.codec.time_base as a timebase hint to the muxer is deprecated. Set AVStream.time_base instead.\n", "Using AVStream.codec to pass codec parameters to muxers is deprecated, use AVStream.codecpar instead.\n", "sample rate not set\n", "dimensions not set\n", "Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\n", "Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n", "encoder-", "Invalid packet stream index: %d\n", "Received a packet for an attachment stream.\n", "Failed to send packet to filter %s for stream %d", "Timestamps are unset in a packet for stream %d. This is deprecated and will stop working in the future. Fix your code to set the timestamps properly\n", "compute_muxer_pkt_fields: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n", "Packet with invalid duration %ld in stream %d\n", "Encoder did not produce proper pts, making some up.\n", "Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n", "pts (%s) < dts (%s) in stream %d\n", "av_write_frame: pts2:%s dts2:%s\n", "failed to avoid negative pts %s in stream %d.\nTry -avoid_negative_ts 1 as a possible workaround.\n", "Packets poorly interleaved, failed to avoid negative timestamp %s in stream %d.\nTry -max_interleave_delta 0 as a possible workaround.\n", "NOPTS", "Using network protocols without global network initialization. Please use avformat_network_init(), this will become mandatory later.\n", "Failed to set close on exec\n", "setsockopt(SO_REUSEADDR) failed\n", "ff_socket_nonblock failed\n", "Connection to %s failed (%s), trying next address\n", "Connection to %s failed: %s\n", "AVFormatContext", "avioflags", "reduce buffering", "set probing size", "number of bytes to probe file format", "set packet size", "fflags", "flush_packets", "reduce the latency by flushing out packets immediately", "ignidx", "ignore index", "genpts", "generate pts", "nofillin", "do not fill in missing values that can be exactly calculated", "noparse", "disable AVParsers, this needs nofillin too", "igndts", "ignore dts", "discardcorrupt", "discard corrupted frames", "sortdts", "try to interleave outputted packets by dts", "keepside", "don't merge side data", "fastseek", "fast but inaccurate seeks", "enable RTP MP4A-LATM payload", "nobuffer", "reduce the latency introduced by optional buffering", "seek2any", "allow seeking to non-keyframes on demuxer level when supported", "do not write random/volatile data", "shortest", "stop muxing with the shortest stream", "autobsf", "add needed bsfs automatically (delays header until each stream's first packet is written)", "specify how many microseconds are analyzed to probe the input", "cryptokey", "decryption key", "indexmem", "max memory used for timestamp index (per stream)", "rtbufsize", "max memory used for buffering real-time frames", "fdebug", "print specific debug info", "max_delay", "maximum muxing or demuxing delay in microseconds", "start_time_realtime", "wall-clock time when stream begins (PTS==0)", "number of frames used to probe fps", "audio_preload", "microseconds by which audio packets should be interleaved earlier", "chunk_duration", "microseconds for each chunk", "chunk_size", "size in bytes for each chunk", "f_err_detect", "set error detection flags (deprecated; use err_detect, save via avconv)", "set error detection flags", "crccheck", "verify embedded CRCs", "detect bitstream specification deviations", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "ignore_err", "ignore errors", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder shouldn't do as an error", "use_wallclock_as_timestamps", "use wallclock as timestamps", "skip_initial_bytes", "set number of bytes to skip before reading header and frames", "correct_ts_overflow", "correct single timestamp overflows", "enable flushing of the I/O context after each packet", "metadata_header_padding", "set number of bytes to be written as padding in a metadata header", "output_ts_offset", "set output timestamp offset", "max_interleave_delta", "maximum buffering duration for interleaving", "f_strict", "how strictly to follow the standards (deprecated; use strict, save via avconv)", "how strictly to follow the standards", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "unofficial", "allow unofficial extensions", "allow non-standardized experimental variants", "maximum number of packets to read while waiting for the first timestamp", "avoid_negative_ts", "shift timestamps so they start at 0", "enabled when required by target format", "do not change timestamps", "make_non_negative", "shift timestamps so they are non negative", "make_zero", "set information dump field separator", "codec_whitelist", "List of decoders that are allowed to be used", "format_whitelist", "List of demuxers that are allowed to be used", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "VSM4\r", "FMP4\r", "DIVX\r", "DX50\r", "XVID\r", "MP4S\r", "M4S2\r", "ZMP4\r", "DIV1\r", "BLZ0\r", "mp4v\r", "UMP4\r", "WV1F\r", "SEDG\r", "RMP4\r", "3IV2\r", "WAWV\r", "FFDS\r", "FVFW\r", "DCOD\r", "MVXM\r", "PM4V\r", "SMP4\r", "DXGM\r", "VIDM\r", "M4T3\r", "GEOX\r", "G264\r", "HDX4\r", "DM4V\r", "DMK2\r", "DYM4\r", "DIGI\r", "EPHV\r", "EM4A\r", "M4CC\r", "SN40\r", "VSPX\r", "ULDX\r", "GEOV\r", "SIPP\r", "SM4V\r", "XVIX\r", "DreX\r", "QMP4\r", "PLV1\r", "GLV4\r", "GMP4\r", "MNM4\r", "JR24\n", "JPGL\f", "MJLS\f", "HFYUD", "IV32p", "IV41q", "VP30[", "VP50\\", "VP60\\", "VP61\\", "VP62k", "VP6A]", "VP6F]", "VP90 ", "ASV1!", "ASV2$", "VCR1\"", "FFV1*", "Xxanr", "LM20.", "mrle.", "MSVC/", "msvc/", "CRAM/", "cram/", "WHAM/", "wham,", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "SNOW#", "S263W", "svq19", "tscc:", "ULTI<", "VIXL=", "QPEG=", "Q1.0=", "Q1.1H", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "VMnc^", "tga >", "MPNG>", "PNG1>", "png %", "CLJRu", "drac+", "azpr+", "RPZA+", "rpza\u000b", "SP54|", "AURA}", "LAGSl", "ZECO", "Y41P3", "CUVCF", "YLC0", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "wav header size < 14", "WAVEFORMATEX support for RIFX files", "Invalid sample rate: %d\n", "INFO subchunk truncated\n", "too big INFO subchunk\n", "truncated file\n", "out of memory, unable to read INFO tag\n", "premature end of file while reading INFO tag\n", "unknown subformat:%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x {%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x}\n", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "(start&1) == 0", "src/libavformat/riffenc.c", "requested bits_per_coded_sample (%d) and actually stored (%d) differ\n", "BottomUp", "ffrtmphttp", "https,http,tcp,tls", "/open/1", "Cache-Control: no-cache\r\nContent-type: application/x-fcs\r\nUser-Agent: Shockwave Flash\r\n", "multiple_requests", "post_data", "/%s/%s/%d", "ffrtmphttp_tls", "Use a HTTPS tunneling connection (RTMPTS).", "rtmpt", "rtmpte", "rtmpts", "Detected librtmp style URL parameters, these aren't supported by the libavformat internal RTMP handler currently enabled. See the documentation for the correct way to pass parameters.\n", "rtmp_listen not available for %s\n", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "?listen&listen_timeout=%d", "Cannot open connection %s\n", "slist=", "/ondemand/", "ondemand", ".f4v", ".mp4", "mp4:", "%s %d,%d,%d,%d", "FMLE/3.0 (compatible; %s)", "Proto = %s, path = %s, app = %s, fname = %s\n", "Cannot open connection %s.\n", "Genuine Adobe Flash Player 001", "rtmp_swfhash", "1.2.8", "Handshaking...\n", "Cannot write RTMP handshake request\n", "Cannot read RTMP handshake response\n", "Type answer %d\n", "Server version %d.%d.%d.%d\n", "Server response validating failed\n", "Signature mismatch\n", "Hash of the decompressed SWF file is not 32 bytes long.\n", "Unable to read handshake\n", "RTMP protocol version mismatch\n", "Unable to write answer - RTMP S0\n", "RTMP Handshake C1 Error\n", "RTMP Handshake S1 Error\n", "RTMP Handshake S2 Error\n", "RTMP Handshake C2 Error\n", "Erroneous C2 Message epoch does not match up with C1 epoch\n", "Erroneous C2 Message random does not match up\n", "Erroneous Message size %d not following standard\n", "Unable to write answer\n", "nonprivate", "flashVer", "fpad", "Invalid AMF parameter: %s\n", "buf_size >= 0", "src/libavcodec/bytestream.h", "received abort message\n", "received acknowledgement\n", "Unknown control message type (%d)\n", "Unable to read command string\n", "Expecting connect, got %s\n", "SeqNum not found\n", "App field not found in connect\n", "App field don't match up: %s <-> %s\n", "FMS/3,0,1,123", "Connection succeeded.", "onBWDone", "Too short chunk size change packet (%d)\n", "Incorrect chunk size %d\n", "New incoming chunk size = %d\n", "Too short server bandwidth report packet (%d)\n", "Incorrect server bandwidth %d\n", "Server bandwidth = %d\n", "Client bandwidth report packet is less than 4 bytes long (%d)\n", "Incorrect client bandwidth %d\n", "Client bandwidth = %d\n", "Sending bytes read report\n", "received bytes read report\n", "Unknown packet type received 0x%02X\n", "Too short ping packet (%d)\n", "Ignoring SWFVerification request.\n", "Sending SWF verification...\n", "onStatus", "_checkbw", "getStreamLength", "Server error: %s\n", "authmod=adobe", "authmod=llnw", "Unknown connect error (unsupported authentication method?)\n", "No credentials set\n", "?reason=authfailed", "Incorrect username/password\n", "?reason=nosuchuser", "Incorrect username\n", "Authentication failed\n", "code=403 need auth", "?authmod=%s&user=%s", "?reason=needauth", "No auth parameters found\n", "salt", "challenge", "nonce", "Ignoring unsupported var %s\n", "Variable %s has NULL value\n", "%08x", "?authmod=%s&user=%s&challenge=%s&response=%s", "&opaque=%s", "00000001", "/_definst_", "?authmod=%s&user=%s&nonce=%s&cnonce=%s&nc=%s&response=%s", "Unexpected reply on connect()\n", "Unexpected reply on getStreamLength()\n", "Releasing stream...\n", "FCPublish stream...\n", "Creating stream...\n", "Sending publish command for '%s'\n", "Sending play command for '%s'\n", "NetStream.Play.Stop", "NetStream.Seek.Notify", "Error in PT_INVOKE\n", "Unable to find / in url %s, bad format\n", "Unexpected stream %s, expecting %s\n", "Unable to create response packet\n", "%s is now published", "clientid", "@setDataFrame", "Incomplete flv packets in RTMP_PT_METADATA packet\n", "|RtmpSampleAccess", "UnPublishing stream...\n", "FCUnpublish", "Deleting stream...\n", "Pause at timestamp %d\n", "Unable to send pause command at timestamp %d\n", "Sending pause command for timestamp %d\n", "Seek on stream index %d at timestamp %ld with flags %08x\n", "Unable to send seek command on stream index %d at timestamp %ld with flags %08x\n", "Sending seek command for timestamp %ld\n", "rtmp_app", "Name of application to connect to on the RTMP server", "rtmp_buffer", "Set buffer time in milliseconds. The default is 3000.", "rtmp_conn", "Append arbitrary AMF data to the Connect message", "rtmp_flashver", "Version of the Flash plugin used to run the SWF player.", "rtmp_flush_interval", "Number of packets flushed in the same request (RTMPT only).", "rtmp_live", "Specify that the media is a live stream.", "both", "live stream", "recorded", "recorded stream", "rtmp_pageurl", "URL of the web page in which the media was embedded. By default no value will be sent.", "rtmp_playpath", "Stream identifier to play or to publish", "rtmp_subscribe", "Name of live stream to subscribe to. Defaults to rtmp_playpath.", "SHA256 hash of the decompressed SWF file (32 bytes).", "rtmp_swfsize", "Size of the decompressed SWF file, required for SWFVerification.", "rtmp_swfurl", "URL of the SWF player. By default no value will be sent", "rtmp_swfverify", "URL to player swf file, compute hash/size automatically.", "rtmp_tcurl", "URL of the target stream. Defaults to proto://host[:port]/app.", "rtmp_listen", "Listen for incoming rtmp connections", "Maximum timeout (in seconds) to wait for incoming connections. -1 is infinite. Implies -rtmp_listen 1", "pthread_cond_timedwait failed: %d\n", "src/libavformat/tcp.c", "Port missing in uri\n", "listen_timeout", "Failed to resolve hostname %s: %s\n", "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN", "terminated by application in AVAPP_CTRL_DID_TCP_OPEN", "sc->listen", "Listen for incoming connections", "set timeout (in microseconds) of socket I/O operations", "Connection awaiting timeout (in milliseconds)", "send_buffer_size", "Socket send buffer size (in bytes)", "recv_buffer_size", "Socket receive buffer size (in bytes)", "addrinfo_one_by_one", "parse addrinfo one by one in getaddrinfo()", "addrinfo_timeout", "set timeout (in microseconds) for getaddrinfo()", "SSL_CTX_load_verify_locations %s\n", "Unable to load cert file %s: %s\n", "Unable to load key file %s: %s\n", "Unable to negotiate TLS/SSL session\n", "urlprotocol bio", "ca_file", "Certificate Authority database file", "cafile", "tls_verify", "Verify the peer certificate", "cert_file", "Certificate file", "key_file", "Private key file", "verifyhost", "Verify against a specific hostname", "udplite", "getaddrinfo(%s, %s): %s\n", "overrun_nonfatal", "'overrun_nonfatal' option was set but it is not supported on this build (pthread support is required)\n", "udplite_coverage", "localport", "pkt_size", "fifo_size", "'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)\n", "'bitrate' option was set but it is not supported on this build (pthread support is required)\n", "burst_bits", "localaddr", "broadcast", "socket option UDPLITE_SEND_CSCOV not available", "socket option UDPLITE_RECV_CSCOV not available", "bind failed", "Simultaneously including and excluding multicast sources is not supported\n", "setsockopt(SO_SNDBUF)", "setsockopt(SO_RECVBUF)", "getsockopt(SO_RCVBUF)", "end receive buffer size reported is %d\n", "attempted to set receive buffer to size %d but it only ended up set as %d", "getnameinfo: %s\n", "setsockopt(IP_MULTICAST_TTL)", "setsockopt(IPV6_MULTICAST_HOPS)", "setsockopt(MCAST_JOIN_SOURCE_GROUP)", "setsockopt(MCAST_BLOCK_SOURCE)", "setsockopt(IP_ADD_MEMBERSHIP)", "setsockopt(IPV6_ADD_MEMBERSHIP)", "setsockopt(IP_DROP_MEMBERSHIP)", "setsockopt(IPV6_DROP_MEMBERSHIP)", "System data size (in bytes)", "Bits to send per second", "Max length of bursts in bits (when using bitrate)", "Local port", "local_port", "Local address", "choose UDPLite head size which should be validated by checksum", "Maximum UDP packet size", "explicitly allow reusing UDP sockets", "reuse_socket", "explicitly allow or disallow broadcast destination", "Time to live (multicast only)", "set if connect() should be called on socket", "set the UDP receiving circular buffer size, expressed as a number of packets with size of 188 bytes", "survive in case of UDP receiving circular buffer overrun", "set raise error timeout (only in read mode)", "Source list", "Block list", "%s://", "0123456789ABCDEF0123456789abcdef", "$tIlibavformat license: nonfree and unredistributable", "!dst->codec_whitelist && !dst->format_whitelist && !dst->protocol_whitelist && !dst->protocol_blacklist", "src/libavformat/utils.c", "Failed to duplicate black/whitelist\n", "Truncating packet of size %d to %ld\n", "Format not on whitelist '%s'\n", "Attached picture on stream %d has invalid size, ignoring\n", "Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\n", "demuxer does not support additional id3 data, skipping\n", "st->request_probe <= 0", "Dropped corrupted packet (stream = %d)\n", "Invalid stream index %d\n", "st->internal->avctx->ticks_per_frame", "s->iformat", "index == 0 || ie[-1].timestamp < timestamp", "Protocol name not provided, cannot determine if input is local or a network protocol, buffers and access patterns cannot be configured optimally without knowing the protocol\n", "Reconfiguring buffers to size %ld\n", "read_seek: %d %s\n", "using cached pos_min=0x%lx dts_min=%s\n", "index < st->nb_index_entries", "using cached pos_max=0x%lx pos_limit=0x%lx dts_max=%s\n", "tmp_pos > pos_max", "gen_seek: %d %s\n", "ts_min < ts_max", "pos_min=0x%lx pos_max=0x%lx dts_min=%s dts_max=%s\n", "pos_limit <= pos_max", "%ld %ld %ld / %s %s %s target:%s limit:%ld start:%ld noc:%d\n", "read_timestamp() failed in the middle\n", "Failed to read extradata of size %d\n", "rfps: %f %f\n", "Setting avg frame rate based on r frame rate\n", "Before avformat_find_stream_info() pos: %ld bytes read:%ld seeks:%d nb_streams:%d\n", "parser not found for codec %s, packets or times may be invalid.\n", "Failed to open codec in av_find_stream_info\n", "interrupted\n", "All info found\n", "Probe buffer size limit of %ld bytes reached\n", "Stream #%d: not enough frames to estimate rate; consider increasing probesize\n", "Non-increasing DTS in stream %d: packet %d with DTS %ld, packet %d with DTS %ld\n", "DTS discontinuity in stream %d: packet %d with DTS %ld, packet %d with DTS %ld\n", "max_analyze_duration %ld reached at %ld microseconds st:%d\n", "decoding for stream %d failed\n", "Could not find codec parameters for stream %d (%s): %s\nConsider increasing the value for the 'analyzeduration' and 'probesize' options\n", "After avformat_find_stream_info() pos: %ld bytes read:%ld seeks:%d frames:%d\n", "s->nb_streams>0", "s->streams[ s->nb_streams - 1 ] == st", "new_program: id=0x%04x\n", "Chapter end time %ld before start %ld\n", "stream index %d is not valid\n", "%0*d", " \t\r\n", "st:%d removing common factor %d from timebase\n", "st:%d has too large timebase, reducing\n", "Ignoring attempt to set invalid timebase %d/%d for st:%d\n", "Unknown bitstream filter '%s'\n", "Automatically inserted bitstream filter '%s'; args='%s'\n", "Failed to open bitstream filter %s for stream %d with codec %s", "copy", "Failed to parse creation_time %s\n", "Invalid palette side data\n", "mov,mp4,3gp,3g2,psp,ipod,ismv,f4v", "Custom AVIOContext makes no sense and will be ignored with AVFMT_NOFILE format.\n", "probing stream %d pp:%d\n", "Failed to reallocate probe buffer for stream %d\n", "nothing to probe for stream %d\n", "probed stream %d\n", "probed stream %d failed\n", "dvbsub", "dvbtxt", "eac3", "loas", "mpegvideo", "truehd", "Probe with size=%d, packets=%d detected %s with score=%d\n", "*pkt_buffer", "Demuxer context update while decoder is open, closing and trying to re-open\n", "Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\n", "ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%ld, flags=%d\n", "demuxer injecting skip %d / discard %d\n", "Could not inject global side data\n", "read_frame_internal stream=%d, pts=%s, dts=%s, size=%d, duration=%ld, flags=%d\n", "DTS %li < %li out of order\n", "invalid dts/pts combination %li\n", "IN delayed:%d pts:%s, dts:%s cur_dts:%s st:%d pc:%p duration:%ld delay:%d onein_oneout:%d\n", "OUTdelayed:%d/%d pts:%s, dts:%s cur_dts:%s\n", "first_dts %s not matching first dts %s (pts %s, duration %ld) in the queue\n", "first_dts %s but no packet with dts in the queue\n", "st->index_entries", "seek_frame_generic failed as this stream seems to contain no keyframes after the target timestamp, %d non keyframes found\n", "unknown codec", "unspecified frame size", "unspecified sample format", "unspecified sample rate", "unspecified number of channels", "no decodable DTS frames", "unspecified size", "unspecified pixel format", "no frame in rv30/40 and no sar", "stream %d: start_time: %0.3f duration: %0.3f\n", "format: start_time: %0.3f duration: %0.3f bitrate=%ld kb/s\n", "start time for stream %d is not set in estimate_timings_from_pts\n", "stream %d : no PTS found at end of file, duration not set\n", "stream %d : no TS found at start of file, duration not set\n", "Estimating duration from bitrate, this may be inaccurate\n", "Ignoring outlier non primary stream starttime %f\n", "Ignoring outlier non primary stream endtime %f\n", "Unsupported pixel format (%d)\n", "Unsupported color space (%d)\n", "raw ADTS AAC (Advanced Audio Coding)", "audio/aac,audio/aacp,audio/x-aac", "APETAGEX", "Unsupported tag version. (>=%d)\n", "Tag size is way too big\n", "Invalid tag size %u.\n", "Too many tag fields (%u)\n", "APE Tag is a header\n", "Non ASCII keys are not allowed\n", "Invalid APE tag key '%s'.\n", "APE tag size too large.\n", "Skipping binary tag '%s'.\n", "Error reading cover art.\n", "ffurl_open failed : %s, %s\n", "file,crypto", "truncate", "truncate existing files on write", "set I/O operation maximum block size", "follow", "Follow a file as it is being written", "configurationVersion:                %u\n", "general_profile_space:               %u\n", "general_tier_flag:                   %u\n", "general_profile_idc:                 %u\n", "general_profile_compatibility_flags: 0x%08x\n", "general_constraint_indicator_flags:  0x%012lx\n", "general_level_idc:                   %u\n", "min_spatial_segmentation_idc:        %u\n", "parallelismType:                     %u\n", "chromaFormat:                        %u\n", "bitDepthLumaMinus8:                  %u\n", "bitDepthChromaMinus8:                %u\n", "avgFrameRate:                        %u\n", "constantFrameRate:                   %u\n", "numTemporalLayers:                   %u\n", "temporalIdNested:                    %u\n", "lengthSizeMinusOne:                  %u\n", "numOfArrays:                         %u\n", "array_completeness[%u]:               %u\n", "NAL_unit_type[%u]:                    %u\n", "numNalus[%u]:                         %u\n", "nalUnitLength[%u][%u]:                 %u\n", "hls+", "hls://", "No nested protocol specified. Specify e.g. hls+http://%s\n", "Unsupported url %s\n", "Using the hls protocol is discouraged, please try using the hls demuxer instead. The hls demuxer should be more complete and work as well as the protocol implementation. (If not, please report it.) To use the demuxer, simply use %s as url.\n", "skipping %d segments ahead, expired from playlist\n", "opening %s\n", "Unable to open %s\n", "no_proxy", "Lavf/57.56.100", "the user-agent option is deprecated, please use user_agent option\n", "\r\nUser-Agent: ", "\r\nAccept: ", "\r\nRange: ", "Range: bytes=%ld-", "\r\nExpect: ", "\r\nConnection: ", "Connection: keep-alive\r\n", "Connection: close\r\n", "\r\nHost: ", "Host: %s\r\n", "\r\nContent-Length: ", "Content-Length: %d\r\n", "\r\nContent-Type: ", "Content-Type: %s\r\n", "\r\nCookie: ", "Cookie: %s\r\n", "\r\nIcy-MetaData: ", "Icy-MetaData: %d\r\n", "%s %s HTTP/1.1\r\n%s%s%s%s%s\r\n", "request: %s\n", "try to fix missing 'Content-Range' at server side (%ld,%ld) => (%ld,%ld)", "Unable to parse '%s'\n", "path=", "domain=", "Invalid cookie found, no value, path or domain specified\n", "%s; %s", "header='%s'\n", "Received method: %s\n", "Received and expected HTTP method do not match. (%s expected, %s received)\n", "Autodetected %s HTTP method\n", "Received and autodetected HTTP method did not match (%s autodetected %s received)\n", "Requested resource: %s\n", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "http_code=%d\n", "Accept-Ranges", "WWW-Authenticate", "Authentication-Info", "Proxy-Authenticate", "AkamaiGHost", "MediaGateway", "Set-Cookie", "Icy-MetaInt", "Icy-", "Content-Encoding", "HTTP error %d %s\n", "bytes ", "Error during zlib initialisation: %s\n", "Your zlib was compiled without gzip support.\n", "Unknown content coding: %s\n", "No trailing CRLF found in HTTP header.\n", "src/libavformat/http.c", "Lower protocol\n", "Read headers\n", "Reply code: %d\n", "Forbidden", "Internal server error", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nContent-Length: %zu\r\n%s\r\n%03d %s\r\n", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nTransfer-Encoding: chunked\r\n%s\r\n", "HTTP reply header: \n%s----\n", "icy_metadata_packet", "Chunked encoding data size: %ld'\n", "Will reconnect at %ld error=%s.\n", "Failed to reconnect at %ld.\n", "inflate return value: %d, %s\n", "Stream ends prematurely at %ld, should be %ld\n", "control seekability of connection", "chunked_post", "use chunked transfer-encoding for posts", "set HTTP proxy to tunnel through", "set custom HTTP headers, can override built in default headers", "content_type", "set a specific content type for the POST messages", "override User-Agent header", "use persistent connections", "set custom HTTP post data", "export the MIME type", "set cookies to be sent in applicable future requests, use newline delimited Set-Cookie HTTP field value syntax", "request ICY metadata", "icy_metadata_headers", "return ICY metadata headers", "return current ICY metadata packet", "metadata read from the bitstream", "auth_type", "HTTP authentication type", "No auth method set, autodetect", "basic", "HTTP basic authentication", "send_expect_100", "Force sending an Expect: 100-continue header for POST", "The actual location of the data received", "initial byte offset", "try to limit the request to bytes preceding this offset", "Override the HTTP method or set the expected HTTP method from a client", "reconnect", "auto reconnect after disconnect before EOF", "reconnect_at_eof", "auto reconnect at EOF", "reconnect_streamed", "auto reconnect streamed / non seekable streams", "reconnect_delay_max", "max reconnect delay in seconds after which to give up", "listen on HTTP", "The resource requested by a client", "reply_code", "The http status code to return to a client", "http-tcp-hook", "hook protocol on tcp", "Authorization: Basic ", "realm=", "opaque=", "algorithm=", "qop=", "stale=", "nextnonce=", "MD5-sess", "auth-int", "Authorization: Digest ", "username=\"%s\"", ", realm=\"%s\"", ", nonce=\"%s\"", ", uri=\"%s\"", ", response=\"%s\"", ", algorithm=\"%s\"", ", opaque=\"%s\"", ", qop=\"%s\"", ", cnonce=\"%s\"", ", nc=%s", "Blues", "Classic Rock", "Dance", "Disco", "Grunge", "Hip-Hop", "New Age", "Oldies", "Reggae", "Alternative", "Death Metal", "Pranks", "Soundtrack", "Euro-Techno", "Ambient", "Trip-Hop", "Vocal", "Jazz+Funk", "Trance", "Classical", "Instrumental", "Acid", "Game", "Sound Clip", "Gospel", "AlternRock", "Space", "Meditative", "Instrumental Pop", "Instrumental Rock", "Ethnic", "Darkwave", "Techno-Industrial", "Electronic", "Pop-Folk", "Eurodance", "Dream", "Southern Rock", "Comedy", "Cult", "Top 40", "Christian Rap", "Pop/Funk", "Jungle", "Native American", "Cabaret", "New Wave", "Psychadelic", "Rave", "Showtunes", "Trailer", "Lo-Fi", "Tribal", "Acid Punk", "Acid Jazz", "Polka", "Retro", "Musical", "Rock & Roll", "Hard Rock", "Folk-Rock", "National Folk", "Swing", "Fast Fusion", "Bebob", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Gothic Rock", "Progressive Rock", "Psychedelic Rock", "Symphonic Rock", "Slow Rock", "Big Band", "Chorus", "Easy Listening", "Acoustic", "Humour", "Chanson", "Opera", "Chamber Music", "Sonata", "Symphony", "Booty Bass", "Primus", "Porn Groove", "Satire", "Slow Jam", "Club", "Tango", "Samba", "Folklore", "Power Ballad", "Rhythmic Soul", "Freestyle", "Duet", "Punk Rock", "Drum Solo", "A capella", "Euro-House", "Dance Hall", "Drum & Bass", "Club-House", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Polsk Punk", "Beat", "Christian Gangsta", "Heavy Metal", "Black Metal", "Crossover", "Contemporary Christian", "Christian Rock", "Merengue", "Salsa", "Thrash Metal", "Anime", "JPop", "SynthPop", "ljpg", "pgmyuv", "mpg1-img", "mpg2-img", "mpg4-img", "pict", "im24", "im32", "sunras", "yuv10", "xface", "v410", "dmb1\t", "SVQ3\r", "mp4v\r", "DIVX\r", "XVID\r", "VP31+", "rpza,", "cvid1", "8BPS2", "smc 8", "rle1.", "WRLE;", "mp2vY", "mjp2^", "tga a", "tiffb", "gif >", "png >", "MNG G", "vc-1X", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "Shr7", "sac3", "alac", ".mp1", "twos", "lpcm", "lpcm\r", "in24\f", "in24\t", "ssmv", "c608", "MPEG-4 description: tag=0x%02x len=%d\n", "esds object type id 0x%02x\n", "Specific MPEG-4 header len=%d\n", "mp4a config channels %d obj %d ext obj %d sample rate %d ext sample rate %d\n", "RTMP packet type '%s'(%d) for channel %d, timestamp %d, extra field %d size %d\n", "Server BW = %d\n", "Client BW = %d\n", " %02X", "chunk size", "bytes read", "server bandwidth", "client bandwidth", "audio packet", "video packet", "Flex shared stream", "Flex shared object", "Flex shared message", "notification", "invoke", " number %g\n", " bool %d\n", " string '%s'\n", " NULL\n", "  %s: ", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "?listen=1", "incorrect header check", "unknown compression method", "invalid window size", "unknown header flags set", "header crc mismatch", "invalid block type", "invalid stored block lengths", "too many length or distance symbols", "invalid code lengths set", "invalid bit length repeat", "invalid code -- missing end-of-block", "invalid literal/lengths set", "invalid distances set", "invalid literal/length code", "invalid distance code", "invalid distance too far back", "incorrect data check", "incorrect length check", " inflate 1.2.8 Copyright 1995-2013 Mark Adler ", "need dictionary", "stream end", "file error", "stream error", "data error", "insufficient memory", "buffer error", "incompatible version", "ssl_client", "ssl_server", "DEFAULT", "(NONE)", "ECDHE_ECDSA", "ECDHE_RSA", "ECDHE_PSK", "GENERIC", "TLS_", "_WITH_", "3DES(168)", "AES(128)", "AES(256)", "AESGCM(128)", "AESGCM(256)", "ChaCha20-Poly1305-Old", "ChaCha20-Poly1305", "AEAD", "Buffer too small", "%-23s Kx=%-8s Au=%-4s Enc=%-9s Mac=%-4s\n", "TLSv1/SSLv3", "NULL-SHA", "DES-CBC3-SHA", "DHE-RSA-AES256-SHA256", "AEAD-AES128-GCM-SHA256", "AEAD-AES256-GCM-SHA384", "AEAD-CHACHA20-POLY1305-SHA256", "ECDHE-ECDSA-AES128-SHA", "ECDHE-ECDSA-AES256-SHA", "ECDHE-RSA-AES128-SHA", "ECDHE-RSA-AES256-SHA", "ECDHE-ECDSA-AES128-SHA256", "ECDHE-ECDSA-AES256-SHA384", "ECDHE-RSA-AES128-SHA256", "ECDHE-RSA-AES256-SHA384", "ECDHE-ECDSA-AES128-GCM-SHA256", "ECDHE-ECDSA-AES256-GCM-SHA384", "ECDHE-RSA-AES128-GCM-SHA256", "ECDHE-RSA-AES256-GCM-SHA384", "ECDHE-PSK-AES128-CBC-SHA", "ECDHE-PSK-AES256-CBC-SHA", "ECDHE-RSA-CHACHA20-POLY1305", "ECDHE-ECDSA-CHACHA20-POLY1305", "ECDHE-PSK-CHACHA20-POLY1305", "kRSA", "kDHE", "kEDH", "kECDHE", "kEECDH", "kPSK", "aRSA", "aECDSA", "aPSK", "AES128", "AES256", "AESGCM", "CHACHA20", "HIGH", "FIPS", "3DES_EDE_CBC", "AES_128_CBC", "AES_256_CBC", "CHACHA20_POLY1305", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_ecdh.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_file.c", "SSL SESSION PARAMETERS", " /home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_lib.c", "RSA ", "DTLSv1", "DTLSv1.2", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_rsa.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_session.c", "TICKET TOO LARGE", "before connect initialization", "SSL negotiation finished successfully", "SSL renegotiate ciphers", "SSLv3 write client hello A", "SSLv3 write client hello B", "SSLv3 read server hello A", "SSLv3 read server certificate A", "SSLv3 read server key exchange A", "SSLv3 read server certificate request A", "SSLv3 read server session ticket A", "SSLv3 read server done A", "SSLv3 write client certificate A", "SSLv3 write client certificate B", "SSLv3 write client key exchange A", "SSLv3 write client key exchange B", "SSLv3 write certificate verify A", "SSLv3 write certificate verify B", "SSLv3 write change cipher spec", "SSLv3 write finished A", "SSLv3 write finished B", "SSLv3 read change cipher spec", "SSLv3 read finished A", "SSLv3 flush data", "SSLv3 read client hello A", "SSLv3 read client hello B", "SSLv3 read client hello C", "SSLv3 write hello request A", "SSLv3 write hello request B", "SSLv3 write hello request C", "SSLv3 write server hello A", "SSLv3 write server hello B", "SSLv3 write certificate A", "SSLv3 write certificate B", "SSLv3 write key exchange A", "SSLv3 write key exchange B", "SSLv3 write certificate request A", "SSLv3 write certificate request B", "SSLv3 write session ticket A", "SSLv3 write session ticket B", "SSLv3 write server done A", "SSLv3 write server done B", "SSLv3 read client certificate A", "SSLv3 read client key exchange A", "SSLv3 read client key exchange B", "SSLv3 read certificate verify A", "DTLS1 read hello verify request A", "unknown state", "AINIT ", "CINIT ", "SSLOK ", "3FLUSH", "3WCH_A", "3WCH_B", "3RSH_A", "3RSC_A", "3RSKEA", "3RCR_A", "3RSD_A", "3WCC_A", "3WCC_B", "3WCKEA", "3WCKEB", "3WCV_A", "3WCV_B", "3WCCS_", "3WFINA", "3WFINB", "3RCCS_", "3RFINA", "3WHR_A", "3WHR_B", "3WHR_C", "3RCH_A", "3RCH_B", "3RCH_C", "3WSH_A", "3WSH_B", "3WSC_A", "3WSC_B", "3WSKEA", "3WSKEB", "3WCR_A", "3WCR_B", "3WSD_A", "3WSD_B", "3RCC_A", "3RCKEA", "3RCV_A", "DRCHVA", "UNKWN ", "close notify", "unexpected_message", "bad record mac", "decompression failure", "handshake failure", "no certificate", "bad certificate", "unsupported certificate", "certificate revoked", "certificate expired", "certificate unknown", "illegal parameter", "decryption failed", "record overflow", "unknown CA", "access denied", "decode error", "decrypt error", "export restriction", "protocol version", "insufficient security", "internal error", "inappropriate fallback", "user canceled", "no renegotiation", "unsupported extension", "certificate unobtainable", "unrecognized name", "bad certificate status response", "bad certificate hash value", "unknown PSK identity", "certificate required", "key expansion", "extended master secret", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/t1_enc.c", "client finished", "server finished", "Resumption", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/t1_lib.c", "extension %u", "extension :%u", "TLS 1.3, client CertificateVerify", "TLS 1.3, Channel ID", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/tls13_both.c", "got type %d, wanted type %d", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/tls13_client.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/tls13_enc.c", "CLIENT_HANDSHAKE_TRAFFIC_SECRET", "SERVER_HANDSHAKE_TRAFFIC_SECRET", "CLIENT_TRAFFIC_SECRET_0", "SERVER_TRAFFIC_SECRET_0", "client handshake traffic secret", "server handshake traffic secret", "client application traffic secret", "server application traffic secret", "exporter master secret", "application traffic secret", "resumption master secret", "TLS 1.3, ", "finished", "resumption psk binder key", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/handshake_client.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/d1_both.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/d1_srtp.c", "SRTP_AES128_CM_SHA1_80", "SRTP_AES128_CM_SHA1_32", "SRTP_AEAD_AES_128_GCM", "SRTP_AEAD_AES_256_GCM", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/dtls_record.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/s3_both.c", "CLIENT_RANDOM", "GET ", "POST ", "HEAD ", "PUT ", "CONNE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/s3_enc.c", "SRVR", "CLNT", "666666666666666666666666666666666666666666666666\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_aead_ctx.c", "NOT RESUMABLE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/ssl_buffer.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/tls_record.c", "SSL alert number ", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/tls13_server.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/ssl/d1_lib.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ex_data.c", "No old-style OpenSSL locks anymore", "lib(%u)", "reason(%u)", "error:%08x:%s:OPENSSL_internal:%s", "OPENSSL_internal", "malloc failure", "function should not have been called", "passed a null parameter", "%lu:%s:%s:%d:%s\n", "invalid library (0)", "unknown library", "system library", "bignum routines", "RSA routines", "Diffie-Hellman routines", "public key routines", "memory buffer routines", "object identifier routines", "PEM routines", "X.509 certificate routines", "ASN.1 encoding routines", "configuration file routines", "common libcrypto routines", "elliptic curve routines", "SSL routines", "BIO routines", "PKCS7 routines", "PKCS8 routines", "X509 V3 routines", "random number generator", "ENGINE routines", "OCSP routines", "UI routines", "COMP routines", "ECDSA routines", "ECDH routines", "HMAC routines", "Digest functions", "Cipher functions", "HKDF functions", "User defined functions", "ASN1_LENGTH_MISMATCH", "AUX_ERROR", "BAD_GET_ASN1_OBJECT_CALL", "BAD_OBJECT_HEADER", "BMPSTRING_IS_WRONG_LENGTH", "BN_LIB", "BOOLEAN_IS_WRONG_LENGTH", "BUFFER_TOO_SMALL", "CONTEXT_NOT_INITIALISED", "DECODE_ERROR", "DEPTH_EXCEEDED", "DIGEST_AND_KEY_TYPE_NOT_SUPPORTED", "ENCODE_ERROR", "ERROR_GETTING_TIME", "EXPECTING_AN_ASN1_SEQUENCE", "EXPECTING_AN_INTEGER", "EXPECTING_AN_OBJECT", "EXPECTING_A_BOOLEAN", "EXPECTING_A_TIME", "EXPLICIT_LENGTH_MISMATCH", "EXPLICIT_TAG_NOT_CONSTRUCTED", "FIELD_MISSING", "FIRST_NUM_TOO_LARGE", "HEADER_TOO_LONG", "ILLEGAL_BITSTRING_FORMAT", "ILLEGAL_BOOLEAN", "ILLEGAL_CHARACTERS", "ILLEGAL_FORMAT", "ILLEGAL_HEX", "ILLEGAL_IMPLICIT_TAG", "ILLEGAL_INTEGER", "ILLEGAL_NESTED_TAGGING", "ILLEGAL_NULL", "ILLEGAL_NULL_VALUE", "ILLEGAL_OBJECT", "ILLEGAL_OPTIONAL_ANY", "ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE", "ILLEGAL_TAGGED_ANY", "ILLEGAL_TIME_VALUE", "INTEGER_NOT_ASCII_FORMAT", "INTEGER_TOO_LARGE_FOR_LONG", "INVALID_BIT_STRING_BITS_LEFT", "INVALID_BMPSTRING_LENGTH", "INVALID_DIGIT", "INVALID_MODIFIER", "INVALID_NUMBER", "INVALID_OBJECT_ENCODING", "INVALID_SEPARATOR", "INVALID_TIME_FORMAT", "INVALID_UNIVERSALSTRING_LENGTH", "INVALID_UTF8STRING", "LIST_ERROR", "MISSING_ASN1_EOS", "MISSING_EOC", "MISSING_SECOND_NUMBER", "MISSING_VALUE", "MSTRING_NOT_UNIVERSAL", "MSTRING_WRONG_TAG", "NESTED_ASN1_ERROR", "NESTED_ASN1_STRING", "NON_HEX_CHARACTERS", "NOT_ASCII_FORMAT", "NOT_ENOUGH_DATA", "NO_MATCHING_CHOICE_TYPE", "NULL_IS_WRONG_LENGTH", "OBJECT_NOT_ASCII_FORMAT", "ODD_NUMBER_OF_CHARS", "SECOND_NUMBER_TOO_LARGE", "SEQUENCE_LENGTH_MISMATCH", "SEQUENCE_NOT_CONSTRUCTED", "SEQUENCE_OR_SET_NEEDS_CONFIG", "SHORT_LINE", "STREAMING_NOT_SUPPORTED", "STRING_TOO_LONG", "STRING_TOO_SHORT", "TAG_VALUE_TOO_HIGH", "TIME_NOT_ASCII_FORMAT", "TOO_LONG", "TYPE_NOT_CONSTRUCTED", "TYPE_NOT_PRIMITIVE", "UNEXPECTED_EOC", "UNIVERSALSTRING_IS_WRONG_LENGTH", "UNKNOWN_FORMAT", "UNKNOWN_MESSAGE_DIGEST_ALGORITHM", "UNKNOWN_SIGNATURE_ALGORITHM", "UNKNOWN_TAG", "UNSUPPORTED_ANY_DEFINED_BY_TYPE", "UNSUPPORTED_PUBLIC_KEY_TYPE", "UNSUPPORTED_TYPE", "WRONG_PUBLIC_KEY_TYPE", "WRONG_TAG", "WRONG_TYPE", "BAD_FOPEN_MODE", "BROKEN_PIPE", "CONNECT_ERROR", "ERROR_SETTING_NBIO", "INVALID_ARGUMENT", "IN_USE", "KEEPALIVE", "NBIO_CONNECT_ERROR", "NO_HOSTNAME_SPECIFIED", "NO_PORT_SPECIFIED", "NO_SUCH_FILE", "NULL_PARAMETER", "SYS_LIB", "UNABLE_TO_CREATE_SOCKET", "UNINITIALIZED", "UNSUPPORTED_METHOD", "WRITE_TO_READ_ONLY_BIO", "ARG2_LT_ARG3", "BAD_ENCODING", "BAD_RECIPROCAL", "BIGNUM_TOO_LONG", "BITS_TOO_SMALL", "CALLED_WITH_EVEN_MODULUS", "DIV_BY_ZERO", "EXPAND_ON_STATIC_BIGNUM_DATA", "INPUT_NOT_REDUCED", "INVALID_RANGE", "NEGATIVE_NUMBER", "NOT_A_SQUARE", "NOT_INITIALIZED", "NO_INVERSE", "PRIVATE_KEY_TOO_LARGE", "P_IS_NOT_PRIME", "TOO_MANY_ITERATIONS", "TOO_MANY_TEMPORARY_VARIABLES", "AES_KEY_SETUP_FAILED", "BAD_DECRYPT", "BAD_KEY_LENGTH", "CTRL_NOT_IMPLEMENTED", "CTRL_OPERATION_NOT_IMPLEMENTED", "DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH", "INITIALIZATION_ERROR", "INPUT_NOT_INITIALIZED", "INVALID_AD_SIZE", "INVALID_KEY_LENGTH", "INVALID_NONCE_SIZE", "INVALID_OPERATION", "IV_TOO_LARGE", "NO_CIPHER_SET", "NO_DIRECTION_SET", "OUTPUT_ALIASES_INPUT", "TAG_TOO_LARGE", "TOO_LARGE", "UNSUPPORTED_AD_SIZE", "UNSUPPORTED_INPUT_SIZE", "UNSUPPORTED_KEY_SIZE", "UNSUPPORTED_NONCE_SIZE", "UNSUPPORTED_TAG_SIZE", "WRONG_FINAL_BLOCK_LENGTH", "LIST_CANNOT_BE_NULL", "MISSING_CLOSE_SQUARE_BRACKET", "MISSING_EQUAL_SIGN", "NO_CLOSE_BRACE", "UNABLE_TO_CREATE_NEW_SECTION", "VARIABLE_HAS_NO_VALUE", "BAD_GENERATOR", "INVALID_PUBKEY", "MODULUS_TOO_LARGE", "NO_PRIVATE_VALUE", "BAD_Q_VALUE", "BAD_VERSION", "MISSING_PARAMETERS", "NEED_NEW_SETUP_VALUES", "BIGNUM_OUT_OF_RANGE", "COORDINATES_OUT_OF_RANGE", "D2I_ECPKPARAMETERS_FAILURE", "EC_GROUP_NEW_BY_NAME_FAILURE", "GROUP2PKPARAMETERS_FAILURE", "GROUP_MISMATCH", "I2D_ECPKPARAMETERS_FAILURE", "INCOMPATIBLE_OBJECTS", "INVALID_COFACTOR", "INVALID_COMPRESSED_POINT", "INVALID_COMPRESSION_BIT", "INVALID_ENCODING", "INVALID_FIELD", "INVALID_FORM", "INVALID_GROUP_ORDER", "INVALID_PRIVATE_KEY", "MISSING_PRIVATE_KEY", "NON_NAMED_CURVE", "PKPARAMETERS2GROUP_FAILURE", "POINT_AT_INFINITY", "POINT_IS_NOT_ON_CURVE", "SLOT_FULL", "UNDEFINED_GENERATOR", "UNKNOWN_GROUP", "UNKNOWN_ORDER", "WRONG_CURVE_PARAMETERS", "WRONG_ORDER", "KDF_FAILED", "POINT_ARITHMETIC_FAILURE", "BAD_SIGNATURE", "NOT_IMPLEMENTED", "RANDOM_NUMBER_GENERATION_FAILED", "OPERATION_NOT_SUPPORTED", "COMMAND_NOT_SUPPORTED", "DIFFERENT_KEY_TYPES", "DIFFERENT_PARAMETERS", "EXPECTING_AN_EC_KEY_KEY", "EXPECTING_AN_RSA_KEY", "EXPECTING_A_DSA_KEY", "ILLEGAL_OR_UNSUPPORTED_PADDING_MODE", "INVALID_DIGEST_LENGTH", "INVALID_DIGEST_TYPE", "INVALID_KEYBITS", "INVALID_MGF1_MD", "INVALID_PADDING_MODE", "INVALID_PSS_SALTLEN", "KEYS_NOT_SET", "NO_DEFAULT_DIGEST", "NO_KEY_SET", "NO_MDC2_SUPPORT", "NO_NID_FOR_CURVE", "NO_OPERATION_SET", "NO_PARAMETERS_SET", "OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE", "OPERATON_NOT_INITIALIZED", "UNKNOWN_PUBLIC_KEY_TYPE", "UNSUPPORTED_ALGORITHM", "OUTPUT_TOO_LARGE", "UNKNOWN_NID", "BAD_BASE64_DECODE", "BAD_END_LINE", "BAD_IV_CHARS", "BAD_PASSWORD_READ", "CIPHER_IS_NULL", "ERROR_CONVERTING_PRIVATE_KEY", "NOT_DEK_INFO", "NOT_ENCRYPTED", "NOT_PROC_TYPE", "NO_START_LINE", "READ_KEY", "SHORT_HEADER", "UNSUPPORTED_CIPHER", "UNSUPPORTED_ENCRYPTION", "BAD_PKCS12_DATA", "BAD_PKCS12_VERSION", "CIPHER_HAS_NO_OBJECT_IDENTIFIER", "CRYPT_ERROR", "ENCRYPT_ERROR", "ERROR_SETTING_CIPHER_PARAMS", "INCORRECT_PASSWORD", "KEYGEN_FAILURE", "KEY_GEN_ERROR", "METHOD_NOT_SUPPORTED", "MISSING_MAC", "MULTIPLE_PRIVATE_KEYS_IN_PKCS12", "PKCS12_PUBLIC_KEY_INTEGRITY_NOT_SUPPORTED", "PKCS12_TOO_DEEPLY_NESTED", "PRIVATE_KEY_DECODE_ERROR", "PRIVATE_KEY_ENCODE_ERROR", "UNKNOWN_ALGORITHM", "UNKNOWN_CIPHER", "UNKNOWN_CIPHER_ALGORITHM", "UNKNOWN_DIGEST", "UNKNOWN_HASH", "UNSUPPORTED_PRIVATE_KEY_ALGORITHM", "BAD_E_VALUE", "BAD_FIXED_HEADER_DECRYPT", "BAD_PAD_BYTE_COUNT", "BAD_RSA_PARAMETERS", "BLOCK_TYPE_IS_NOT_01", "BN_NOT_INITIALIZED", "CANNOT_RECOVER_MULTI_PRIME_KEY", "CRT_PARAMS_ALREADY_GIVEN", "CRT_VALUES_INCORRECT", "DATA_LEN_NOT_EQUAL_TO_MOD_LEN", "DATA_TOO_LARGE", "DATA_TOO_LARGE_FOR_KEY_SIZE", "DATA_TOO_LARGE_FOR_MODULUS", "DATA_TOO_SMALL", "DATA_TOO_SMALL_FOR_KEY_SIZE", "DIGEST_TOO_BIG_FOR_RSA_KEY", "D_E_NOT_CONGRUENT_TO_1", "EMPTY_PUBLIC_KEY", "FIRST_OCTET_INVALID", "INCONSISTENT_SET_OF_CRT_VALUES", "INTERNAL_ERROR", "INVALID_MESSAGE_LENGTH", "KEY_SIZE_TOO_SMALL", "LAST_OCTET_INVALID", "MUST_HAVE_AT_LEAST_TWO_PRIMES", "NO_PUBLIC_EXPONENT", "NULL_BEFORE_BLOCK_MISSING", "N_NOT_EQUAL_P_Q", "OAEP_DECODING_ERROR", "ONLY_ONE_OF_P_Q_GIVEN", "OUTPUT_BUFFER_TOO_SMALL", "PADDING_CHECK_FAILED", "PKCS_DECODING_ERROR", "SLEN_CHECK_FAILED", "SLEN_RECOVERY_FAILED", "UNKNOWN_ALGORITHM_TYPE", "UNKNOWN_PADDING_TYPE", "VALUE_MISSING", "WRONG_SIGNATURE_LENGTH", "APP_DATA_IN_HANDSHAKE", "ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT", "BAD_ALERT", "BAD_CHANGE_CIPHER_SPEC", "BAD_DATA_RETURNED_BY_CALLBACK", "BAD_DH_P_LENGTH", "BAD_DIGEST_LENGTH", "BAD_ECC_CERT", "BAD_ECPOINT", "BAD_HANDSHAKE_RECORD", "BAD_HELLO_REQUEST", "BAD_LENGTH", "BAD_PACKET_LENGTH", "BAD_RSA_ENCRYPT", "BAD_SRTP_MKI_VALUE", "BAD_SRTP_PROTECTION_PROFILE_LIST", "BAD_SSL_FILETYPE", "BAD_WRITE_RETRY", "BIO_NOT_SET", "BLOCK_CIPHER_PAD_IS_WRONG", "BUFFERED_MESSAGES_ON_CIPHER_CHANGE", "CANNOT_PARSE_LEAF_CERT", "CA_DN_LENGTH_MISMATCH", "CA_DN_TOO_LONG", "CCS_RECEIVED_EARLY", "CERTIFICATE_VERIFY_FAILED", "CERT_CB_ERROR", "CERT_LENGTH_MISMATCH", "CHANNEL_ID_NOT_P256", "CHANNEL_ID_SIGNATURE_INVALID", "CIPHER_OR_HASH_UNAVAILABLE", "CLIENTHELLO_PARSE_FAILED", "CLIENTHELLO_TLSEXT", "CONNECTION_REJECTED", "CONNECTION_TYPE_NOT_SET", "CUSTOM_EXTENSION_ERROR", "DATA_LENGTH_TOO_LONG", "DECRYPTION_FAILED", "DECRYPTION_FAILED_OR_BAD_RECORD_MAC", "DH_PUBLIC_VALUE_LENGTH_IS_WRONG", "DH_P_TOO_LONG", "DIGEST_CHECK_FAILED", "DOWNGRADE_DETECTED", "DTLS_MESSAGE_TOO_BIG", "DUPLICATE_EXTENSION", "DUPLICATE_KEY_SHARE", "ECC_CERT_NOT_FOR_SIGNING", "EMS_STATE_INCONSISTENT", "ENCRYPTED_LENGTH_TOO_LONG", "ERROR_ADDING_EXTENSION", "ERROR_IN_RECEIVED_CIPHER_LIST", "ERROR_PARSING_EXTENSION", "EXCESSIVE_MESSAGE_SIZE", "EXTRA_DATA_IN_MESSAGE", "FRAGMENT_MISMATCH", "GOT_NEXT_PROTO_WITHOUT_EXTENSION", "HANDSHAKE_FAILURE_ON_CLIENT_HELLO", "HTTPS_PROXY_REQUEST", "HTTP_REQUEST", "INAPPROPRIATE_FALLBACK", "INVALID_ALPN_PROTOCOL", "INVALID_COMMAND", "INVALID_COMPRESSION_LIST", "INVALID_MESSAGE", "INVALID_OUTER_RECORD_TYPE", "INVALID_SCT_LIST", "INVALID_SSL_SESSION", "INVALID_TICKET_KEYS_LENGTH", "LENGTH_MISMATCH", "LIBRARY_HAS_NO_CIPHERS", "MISSING_EXTENSION", "MISSING_KEY_SHARE", "MISSING_RSA_CERTIFICATE", "MISSING_TMP_DH_KEY", "MISSING_TMP_ECDH_KEY", "MIXED_SPECIAL_OPERATOR_WITH_GROUPS", "MTU_TOO_SMALL", "NEGOTIATED_BOTH_NPN_AND_ALPN", "NESTED_GROUP", "NO_CERTIFICATES_RETURNED", "NO_CERTIFICATE_ASSIGNED", "NO_CERTIFICATE_SET", "NO_CIPHERS_AVAILABLE", "NO_CIPHERS_PASSED", "NO_CIPHERS_SPECIFIED", "NO_CIPHER_MATCH", "NO_COMMON_SIGNATURE_ALGORITHMS", "NO_COMPRESSION_SPECIFIED", "NO_GROUPS_SPECIFIED", "NO_METHOD_SPECIFIED", "NO_P256_SUPPORT", "NO_PRIVATE_KEY_ASSIGNED", "NO_RENEGOTIATION", "NO_REQUIRED_DIGEST", "NO_SHARED_CIPHER", "NO_SHARED_GROUP", "NULL_SSL_CTX", "NULL_SSL_METHOD_PASSED", "OLD_SESSION_CIPHER_NOT_RETURNED", "OLD_SESSION_PRF_HASH_MISMATCH", "OLD_SESSION_VERSION_NOT_RETURNED", "PARSE_TLSEXT", "PATH_TOO_LONG", "PEER_DID_NOT_RETURN_A_CERTIFICATE", "PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE", "PRE_SHARED_KEY_MUST_BE_LAST", "PROTOCOL_IS_SHUTDOWN", "PSK_IDENTITY_BINDER_COUNT_MISMATCH", "PSK_IDENTITY_NOT_FOUND", "PSK_NO_CLIENT_CB", "PSK_NO_SERVER_CB", "READ_TIMEOUT_EXPIRED", "RECORD_LENGTH_MISMATCH", "RECORD_TOO_LARGE", "RENEGOTIATION_EMS_MISMATCH", "RENEGOTIATION_ENCODING_ERR", "RENEGOTIATION_MISMATCH", "REQUIRED_CIPHER_MISSING", "RESUMED_EMS_SESSION_WITHOUT_EMS_EXTENSION", "RESUMED_NON_EMS_SESSION_WITH_EMS_EXTENSION", "SCSV_RECEIVED_WHEN_RENEGOTIATING", "SERVERHELLO_TLSEXT", "SESSION_ID_CONTEXT_UNINITIALIZED", "SESSION_MAY_NOT_BE_CREATED", "SHUTDOWN_WHILE_IN_INIT", "SIGNATURE_ALGORITHMS_EXTENSION_SENT_BY_SERVER", "SRTP_COULD_NOT_ALLOCATE_PROFILES", "SRTP_UNKNOWN_PROTECTION_PROFILE", "SSL3_EXT_INVALID_SERVERNAME", "SSLV3_ALERT_BAD_CERTIFICATE", "SSLV3_ALERT_BAD_RECORD_MAC", "SSLV3_ALERT_CERTIFICATE_EXPIRED", "SSLV3_ALERT_CERTIFICATE_REVOKED", "SSLV3_ALERT_CERTIFICATE_UNKNOWN", "SSLV3_ALERT_CLOSE_NOTIFY", "SSLV3_ALERT_DECOMPRESSION_FAILURE", "SSLV3_ALERT_HANDSHAKE_FAILURE", "SSLV3_ALERT_ILLEGAL_PARAMETER", "SSLV3_ALERT_NO_CERTIFICATE", "SSLV3_ALERT_UNEXPECTED_MESSAGE", "SSLV3_ALERT_UNSUPPORTED_CERTIFICATE", "SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION", "SSL_HANDSHAKE_FAILURE", "SSL_SESSION_ID_CONTEXT_TOO_LONG", "TLSV1_ALERT_ACCESS_DENIED", "TLSV1_ALERT_DECODE_ERROR", "TLSV1_ALERT_DECRYPTION_FAILED", "TLSV1_ALERT_DECRYPT_ERROR", "TLSV1_ALERT_EXPORT_RESTRICTION", "TLSV1_ALERT_INAPPROPRIATE_FALLBACK", "TLSV1_ALERT_INSUFFICIENT_SECURITY", "TLSV1_ALERT_INTERNAL_ERROR", "TLSV1_ALERT_NO_RENEGOTIATION", "TLSV1_ALERT_PROTOCOL_VERSION", "TLSV1_ALERT_RECORD_OVERFLOW", "TLSV1_ALERT_UNKNOWN_CA", "TLSV1_ALERT_USER_CANCELLED", "TLSV1_BAD_CERTIFICATE_HASH_VALUE", "TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE", "TLSV1_CERTIFICATE_REQUIRED", "TLSV1_CERTIFICATE_UNOBTAINABLE", "TLSV1_UNKNOWN_PSK_IDENTITY", "TLSV1_UNRECOGNIZED_NAME", "TLSV1_UNSUPPORTED_EXTENSION", "TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST", "TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG", "TOO_MANY_EMPTY_FRAGMENTS", "TOO_MANY_KEY_UPDATES", "TOO_MANY_WARNING_ALERTS", "TOO_MUCH_SKIPPED_EARLY_DATA", "UNABLE_TO_FIND_ECDH_PARAMETERS", "UNEXPECTED_EXTENSION", "UNEXPECTED_MESSAGE", "UNEXPECTED_OPERATOR_IN_GROUP", "UNEXPECTED_RECORD", "UNKNOWN_ALERT_TYPE", "UNKNOWN_CERTIFICATE_TYPE", "UNKNOWN_CIPHER_RETURNED", "UNKNOWN_CIPHER_TYPE", "UNKNOWN_KEY_EXCHANGE_TYPE", "UNKNOWN_PROTOCOL", "UNKNOWN_SSL_VERSION", "UNKNOWN_STATE", "UNSAFE_LEGACY_RENEGOTIATION_DISABLED", "UNSUPPORTED_COMPRESSION_ALGORITHM", "UNSUPPORTED_ELLIPTIC_CURVE", "UNSUPPORTED_PROTOCOL", "UNSUPPORTED_PROTOCOL_FOR_CUSTOM_KEY", "WRONG_CERTIFICATE_TYPE", "WRONG_CIPHER_RETURNED", "WRONG_CURVE", "WRONG_MESSAGE_TYPE", "WRONG_SIGNATURE_TYPE", "WRONG_SSL_VERSION", "WRONG_VERSION_NUMBER", "X509_LIB", "X509_VERIFICATION_SETUP_PROBLEMS", "AKID_MISMATCH", "BAD_PKCS7_VERSION", "BAD_X509_FILETYPE", "BASE64_DECODE_ERROR", "CANT_CHECK_DH_KEY", "CERT_ALREADY_IN_HASH_TABLE", "CRL_ALREADY_DELTA", "CRL_VERIFY_FAILURE", "IDP_MISMATCH", "INVALID_DIRECTORY", "INVALID_FIELD_NAME", "INVALID_PSS_PARAMETERS", "INVALID_TRUST", "ISSUER_MISMATCH", "KEY_TYPE_MISMATCH", "KEY_VALUES_MISMATCH", "LOADING_CERT_DIR", "LOADING_DEFAULTS", "NAME_TOO_LONG", "NEWER_CRL_NOT_NEWER", "NOT_PKCS7_SIGNED_DATA", "NO_CERTIFICATES_INCLUDED", "NO_CERT_SET_FOR_US_TO_VERIFY", "NO_CRLS_INCLUDED", "NO_CRL_NUMBER", "PUBLIC_KEY_DECODE_ERROR", "PUBLIC_KEY_ENCODE_ERROR", "SHOULD_RETRY", "UNKNOWN_KEY_TYPE", "UNKNOWN_PURPOSE_ID", "UNKNOWN_TRUST_ID", "WRONG_LOOKUP_TYPE", "BAD_IP_ADDRESS", "BAD_OBJECT", "BN_DEC2BN_ERROR", "BN_TO_ASN1_INTEGER_ERROR", "CANNOT_FIND_FREE_FUNCTION", "DIRNAME_ERROR", "DISTPOINT_ALREADY_SET", "DUPLICATE_ZONE_ID", "ERROR_CONVERTING_ZONE", "ERROR_CREATING_EXTENSION", "ERROR_IN_EXTENSION", "EXPECTED_A_SECTION_NAME", "EXTENSION_EXISTS", "EXTENSION_NAME_ERROR", "EXTENSION_NOT_FOUND", "EXTENSION_SETTING_NOT_SUPPORTED", "EXTENSION_VALUE_ERROR", "ILLEGAL_EMPTY_EXTENSION", "ILLEGAL_HEX_DIGIT", "INCORRECT_POLICY_SYNTAX_TAG", "INVALID_BOOLEAN_STRING", "INVALID_EXTENSION_STRING", "INVALID_MULTIPLE_RDNS", "INVALID_NAME", "INVALID_NULL_ARGUMENT", "INVALID_NULL_NAME", "INVALID_NULL_VALUE", "INVALID_NUMBERS", "INVALID_OBJECT_IDENTIFIER", "INVALID_OPTION", "INVALID_POLICY_IDENTIFIER", "INVALID_PROXY_POLICY_SETTING", "INVALID_PURPOSE", "INVALID_SECTION", "INVALID_SYNTAX", "ISSUER_DECODE_ERROR", "NEED_ORGANIZATION_AND_NUMBERS", "NO_CONFIG_DATABASE", "NO_ISSUER_CERTIFICATE", "NO_ISSUER_DETAILS", "NO_POLICY_IDENTIFIER", "NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED", "NO_PUBLIC_KEY", "NO_SUBJECT_DETAILS", "ODD_NUMBER_OF_DIGITS", "OPERATION_NOT_DEFINED", "OTHERNAME_ERROR", "POLICY_LANGUAGE_ALREADY_DEFINED", "POLICY_PATH_LENGTH", "POLICY_PATH_LENGTH_ALREADY_DEFINED", "POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY", "SECTION_NOT_FOUND", "UNABLE_TO_GET_ISSUER_DETAILS", "UNABLE_TO_GET_ISSUER_KEYID", "UNKNOWN_BIT_STRING_ARGUMENT", "UNKNOWN_EXTENSION", "UNKNOWN_EXTENSION_NAME", "UNKNOWN_OPTION", "UNSUPPORTED_OPTION", "USER_TOO_LONG", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "sha224", "sha256", "sha384", "sha512", "MD5-SHA1", "md5-sha1", "DSA-SHA", "dsaWithSHA", "DSA-SHA1", "dsaWithSHA1", "ecdsa-with-SHA1", "RSA-MD5", "md5WithRSAEncryption", "RSA-SHA1", "sha1WithRSAEncryption", "RSA-SHA224", "sha224WithRSAEncryption", "RSA-SHA256", "sha256WithRSAEncryption", "RSA-SHA384", "sha384WithRSAEncryption", "RSA-SHA512", "sha512WithRSAEncryption", "des-cbc", "des-ede3-cbc", "3des", "aes-128-cbc", "aes-256-cbc", "aes-128-ctr", "aes-256-ctr", "aes-128-ecb", "aes-256-ecb", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/cipher/aead.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/cipher/e_chacha20poly1305.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/cipher/e_tls.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/cipher/e_ssl3.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/conf/conf.c", "line ", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/bn.c", "0123456789abcdef", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/ctx.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/div.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/shift.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bio/bio.c", "memory buffer", "fopen('", "FILE pointer", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bio/printf.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bio/socket_helper.c", "/dev/urandom", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_d2i_fp.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_i2d_fp.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_int.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_object.c", "<INVALID>", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/asn1_lib.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/tasn_dec.c", "Field=", ", Type=", "ASN1_OCTET_STRING", "ASN1_INTEGER", "ASN1_ENUMERATED", "ASN1_BIT_STRING", "ASN1_UTF8STRING", "ASN1_PRINTABLESTRING", "ASN1_T61STRING", "ASN1_IA5STRING", "ASN1_GENERALSTRING", "ASN1_UTCTIME", "ASN1_GENERALIZEDTIME", "ASN1_VISIBLESTRING", "ASN1_UNIVERSALSTRING", "ASN1_BMPSTRING", "ASN1_NULL", "ASN1_OBJECT", "ASN1_ANY", "ASN1_SEQUENCE", "ASN1_PRINTABLE", "DISPLAYTEXT", "DIRECTORYSTRING", "ASN1_BOOLEAN", "ASN1_TBOOLEAN", "ASN1_FBOOLEAN", "ASN1_OCTET_STRING_NDEF", "ASN1_SEQUENCE_ANY", "ASN1_SET_ANY", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/tasn_utl.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/dh/dh.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/rsa/rsa.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/rsa/rsa_impl.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/rsa/blinding.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/rsa/padding.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/rsa/rsa_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/ec.c", "NIST P-521", "NIST P-384", "NIST P-256", "NIST P-224", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/ec_key.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/ec_montgomery.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/oct.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/p224-64.c", "}O-+`Zt", "&p^?CSI", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/p256-64.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/simple.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/wnaf.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ecdsa/ecdsa.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ecdsa/ecdsa_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/digestsign.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/evp.c", "algorithm %d", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/evp_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/evp_ctx.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/p_dsa_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/p_ec.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/p_ec_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/p_rsa_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/hkdf/hkdf.c", "NEW CERTIFICATE REQUEST", "X509 CRL", "RSA PRIVATE KEY", "RSA PUBLIC KEY", "DSA PRIVATE KEY", "DSA PARAMETERS", "EC PRIVATE KEY", "DH PARAMETERS", "ENCRYPTED", "MIC-CLEAR", "MIC-ONLY", "BAD-TYPE", "Proc-Type: 4,", "0123456789ABCDEF", "DEK-Info: ", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pem/pem_lib.c", "Expecting: ", "Proc-Type: ", "-----BEGIN ", "-----\n", "-----END ", "ANY PRIVATE KEY", "ENCRYPTED PRIVATE KEY", "X509 CERTIFICATE", "TRUSTED CERTIFICATE", "PKCS7", "PKCS #7 SIGNED DATA", "DES-EDE3-CBC", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pem/pem_oth.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pem/pem_pkey.c", "CERTIFICATE PAIR", "\\W%08lX", "\\U%04lX", "\\%02X", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/by_file.c", "Load file into cache", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/t_x509.c", "Certificate:\n", "    Data:\n", "%8sVersion: %lu (0x%lx)\n", "        Serial Number:", " (Negative)", "\n%12s%s", "%02x%c", "        Issuer:%c", "        Validity\n", "            Not Before: ", "\n            Not After : ", "        Subject:%c", "        Subject Public Key Info:\n", "%12sPublic Key Algorithm: ", "%12sUnable to load Public Key\n", "%8sIssuer Unique ID: ", "%8sSubject Unique ID: ", "X509v3 extensions", "        Subject OCSP hash: ", "\n        Public key OCSP hash: ", "    Signature Algorithm: ", "Bad time value", "%s %2d %02d:%02d:%02d%.*s %d%s", " GMT", "%s %2d %02d:%02d:%02d %d%s", "%*sTrusted Uses:\n%*s", "%*sNo Trusted Uses.\n", "%*sRejected Uses:\n%*s", "%*sNo Rejected Uses.\n", "%*sAlias: %s\n", "%*sKey Id: ", "%s%02X", "%02x%s", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_cmp.c", "/etc/ssl/private", "/etc/ssl", "/etc/ssl/certs", "/etc/ssl/cert.pem", "SSL_CERT_DIR", "SSL_CERT_FILE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_lu.c", "NO X509_NAME", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_obj.c", "unable to get certificate CRL", "unable to decrypt certificate's signature", "unable to decrypt CRL's signature", "unable to decode issuer public key", "certificate signature failure", "CRL signature failure", "certificate is not yet valid", "CRL is not yet valid", "certificate has expired", "CRL has expired", "format error in certificate's notBefore field", "format error in certificate's notAfter field", "format error in CRL's lastUpdate field", "format error in CRL's nextUpdate field", "self signed certificate", "self signed certificate in certificate chain", "unable to get local issuer certificate", "unable to verify the first certificate", "certificate chain too long", "invalid CA certificate", "invalid non-CA certificate (has CA markings)", "proxy path length constraint exceeded", "proxy certificates not allowed, please set the appropriate flag", "unsupported certificate purpose", "certificate not trusted", "certificate rejected", "application verification failure", "subject issuer mismatch", "authority and subject key identifier mismatch", "authority and issuer serial number mismatch", "key usage does not include certificate signing", "unable to get CRL issuer certificate", "unhandled critical extension", "key usage does not include CRL signing", "key usage does not include digital signature", "unhandled critical CRL extension", "invalid or inconsistent certificate extension", "invalid or inconsistent certificate policy extension", "no explicit policy", "Different CRL scope", "Unsupported extension feature", "RFC 3779 resource not subset of parent's resources", "permitted subtree violation", "excluded subtree violation", "name constraints minimum and maximum not supported", "unsupported name constraint type", "unsupported or invalid name constraint syntax", "unsupported or invalid name syntax", "CRL path validation error", "Suite B: certificate version invalid", "Suite B: invalid public key algorithm", "Suite B: invalid ECC curve", "Suite B: invalid signature algorithm", "Suite B: curve not allowed for this LOS", "Suite B: cannot sign P-384 with P-256", "Hostname mismatch", "Email address mismatch", "IP address mismatch", "Invalid certificate verification context", "Issuer certificate lookup error", "error number %ld", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_v3.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_vfy.c", "pkcs7", "smime_sign", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509name.c", "name=", "X509_ALGOR", "X509_ALGORS", "X509_REVOKED", "X509_CRL_INFO", "X509_CRL", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x_crl.c", "serialNumber", "revocationDate", "sig_alg", "lastUpdate", "nextUpdate", "X509_EXTENSION", "X509_EXTENSIONS", "critical", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x_info.c", "X509_NAME_ENTRY", "X509_NAME_ENTRIES", "X509_NAME_INTERNAL", "RDNS", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x_name.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x_pkey.c", "X509_PUBKEY", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x_pubkey.c", "public_key", "X509_REQ_INFO", "X509_REQ", "subject", "pubkey", "attributes", "req_info", "X509_SIG", "digest", "NETSCAPE_SPKAC", "NETSCAPE_SPKI", "spkac", "sig_algor", "X509_CINF", "X509", "validity", "issuerUID", "subjectUID", "cert_info", "X509_CERT_AUX", "X509_CERT_PAIR", "trust", "alias", "keyid", "reverse", "serial", "CERTIFICATEPOLICIES", "POLICYINFO", "POLICYQUALINFO", "USERNOTICE", "NOTICEREF", "%*sPolicy: ", "%*s%s\n", "Non Critical", "%*sNo Qualifiers\n", "policyid", "qualifiers", "pqualid", "d.cpsuri", "d.usernotice", "d.other", "noticeref", "exptext", "noticenos", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_cpols.c", "section:", ",name:", ",value:", "ia5org", "policyIdentifier", "userNotice", "explicitText", "noticeNumbers", "%*sCPS: %s\n", "%*sUser Notice:\n", "%*sUnknown Qualifier: ", "%*sOrganization: %s\n", "%*sNumber%s: ", "%*sExplicit Text: %s\n", "DIST_POINT_NAME", "CRL_DIST_POINTS", "ISSUING_DIST_POINT", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_crld.c", "CRLissuer", "Unused", "Key Compromise", "keyCompromise", "CA Compromise", "CACompromise", "Affiliation Changed", "affiliationChanged", "Superseded", "superseded", "Cessation Of Operation", "cessationOfOperation", "Certificate Hold", "certificateHold", "Privilege Withdrawn", "privilegeWithdrawn", "AA Compromise", "AACompromise", "name.fullname", "name.relativename", "distpoint", "CRLDistributionPoints", "onlyuser", "onlyCA", "onlysomereasons", "indirectCRL", "onlyattr", "onlyAA", "%*sOnly User Certificates\n", "%*sOnly CA Certificates\n", "%*sIndirect CRL\n", "Only Some Reasons", "%*sOnly Attribute Certificates\n", "%*s<EMPTY>\n", "%*sFull Name:\n", "%*sRelative Name:\n%*s", "%*s%s:\n%*s", "%*sCRL Issuer:\n", "EDIPARTYNAME", "GENERAL_NAME", "GENERAL_NAMES", "type_id", "nameAssigner", "partyName", "d.otherName", "d.rfc822Name", "d.dNSName", "d.x400Address", "d.directoryName", "d.ediPartyName", "d.uniformResourceIdentifier", "d.iPAddress", "d.registeredID", "GeneralNames", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_lib.c", "NAME_CONSTRAINTS", "minimum", "maximum", "permittedSubtrees", "excludedSubtrees", "excluded", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_ncons.c", "Permitted", "Excluded", "%*s%s:\n", "%d.%d.%d.%d/%d.%d.%d.%d", "IP Address:<invalid>", "%*sPath Length Constraint: ", "%*sPolicy Language: ", "%*sPolicy Text: %s\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_pci.c", "pathlen", "hex:", "text:", "PROXY_POLICY", "PROXY_CERT_INFO_EXTENSION", "policyLanguage", "pcPathLengthConstraint", "proxyPolicy", "POLICY_CONSTRAINTS", "requireExplicitPolicy", "inhibitPolicyMapping", "Require Explicit Policy", "Inhibit Policy Mapping", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_pcons.c", "PKEY_USAGE_PERIOD", "notBefore", "notAfter", "Not After: ", "POLICY_MAPPING", "POLICY_MAPPINGS", "issuerDomainPolicy", "subjectDomainPolicy", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_pmaps.c", "%*s%s", "%*s<Parse Error>", "%*s<Not Supported>", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_purp.c", "SSL client", "sslclient", "Netscape SSL server", "nssslserver", "S/MIME signing", "smimesign", "S/MIME encryption", "smimeencrypt", "crlsign", "Any Purpose", "OCSP helper", "ocsphelper", "Time Stamp signing", "timestampsign", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_skey.c", "SXNETID", "SXNET", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_sxnet.c", "zone", "%*sVersion: %ld (0x%lX)", "\n%*sZone: %s, User: ", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_utl.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pkcs8/pkcs8.c", "PKCS8_PRIV_KEY_INFO", "pkeyalg", "pkey", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pkcs8/p5_pbev2.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/bn_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/gcd.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/montgomery.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/bn/prime.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/obj/obj.c", "UNDEF", "undefined", "rsadsi", "RSA Data Security, Inc.", "pkcs", "RSA Data Security, Inc. PKCS", "rsaEncryption", "RSA-MD2", "md2WithRSAEncryption", "PBE-MD2-DES", "pbeWithMD2AndDES-CBC", "PBE-MD5-DES", "pbeWithMD5AndDES-CBC", "X500", "directory services (X.500)", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs7-data", "pkcs7-signedData", "pkcs7-envelopedData", "pkcs7-signedAndEnvelopedData", "pkcs7-digestData", "pkcs7-encryptedData", "pkcs3", "dhKeyAgreement", "DES-ECB", "des-ecb", "DES-CFB", "des-cfb", "DES-EDE", "des-ede", "DES-EDE3", "des-ede3", "IDEA-CBC", "idea-cbc", "IDEA-CFB", "idea-cfb", "IDEA-ECB", "idea-ecb", "rc2-cbc", "RC2-ECB", "rc2-ecb", "RC2-CFB", "rc2-cfb", "RC2-OFB", "rc2-ofb", "RSA-SHA", "shaWithRSAEncryption", "DES-EDE-CBC", "des-ede-cbc", "DES-OFB", "des-ofb", "IDEA-OFB", "idea-ofb", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "Netscape Communications Corp.", "nsCertExt", "Netscape Certificate Extension", "nsDataType", "Netscape Data Type", "DES-EDE-CFB", "des-ede-cfb", "DES-EDE3-CFB", "des-ede3-cfb", "DES-EDE-OFB", "des-ede-ofb", "DES-EDE3-OFB", "des-ede3-ofb", "DSA-old", "dsaEncryption-old", "PBE-SHA1-RC2-64", "pbeWithSHA1AndRC2-CBC", "PBKDF2", "DSA-SHA1-old", "dsaWithSHA1-old", "nsCertType", "Netscape Cert Type", "nsBaseUrl", "Netscape Base Url", "nsRevocationUrl", "Netscape Revocation Url", "nsCaRevocationUrl", "Netscape CA Revocation Url", "nsRenewalUrl", "Netscape Renewal Url", "nsCaPolicyUrl", "Netscape CA Policy Url", "nsSslServerName", "Netscape SSL Server Name", "nsComment", "Netscape Comment", "nsCertSequence", "Netscape Certificate Sequence", "DESX-CBC", "desx-cbc", "id-ce", "subjectKeyIdentifier", "X509v3 Subject Key Identifier", "keyUsage", "X509v3 Key Usage", "privateKeyUsagePeriod", "X509v3 Private Key Usage Period", "subjectAltName", "X509v3 Subject Alternative Name", "issuerAltName", "X509v3 Issuer Alternative Name", "basicConstraints", "X509v3 Basic Constraints", "crlNumber", "X509v3 CRL Number", "certificatePolicies", "X509v3 Certificate Policies", "authorityKeyIdentifier", "X509v3 Authority Key Identifier", "BF-CBC", "bf-cbc", "BF-ECB", "bf-ecb", "BF-CFB", "bf-cfb", "BF-OFB", "bf-ofb", "mdc2", "RSA-MDC2", "mdc2WithRSA", "rc4-40", "RC2-40-CBC", "rc2-40-cbc", "givenName", "surname", "initials", "crlDistributionPoints", "X509v3 CRL Distribution Points", "RSA-NP-MD5", "md5WithRSA", "CAST5-CBC", "cast5-cbc", "CAST5-ECB", "cast5-ecb", "CAST5-CFB", "cast5-cfb", "CAST5-OFB", "cast5-ofb", "pbeWithMD5AndCast5CBC", "RSA-SHA1-2", "sha1WithRSA", "dsaEncryption", "ripemd160", "RSA-RIPEMD160", "ripemd160WithRSA", "RC5-CBC", "rc5-cbc", "RC5-ECB", "rc5-ecb", "RC5-CFB", "rc5-cfb", "RC5-OFB", "rc5-ofb", "zlib compression", "extendedKeyUsage", "X509v3 Extended Key Usage", "PKIX", "id-kp", "serverAuth", "TLS Web Server Authentication", "clientAuth", "TLS Web Client Authentication", "codeSigning", "emailProtection", "E-mail Protection", "timeStamping", "msCodeInd", "Microsoft Individual Code Signing", "msCodeCom", "Microsoft Commercial Code Signing", "msCTLSign", "Microsoft Trust List Signing", "msSGC", "Microsoft Server Gated Crypto", "msEFS", "Microsoft Encrypted File System", "nsSGC", "Netscape Server Gated Crypto", "deltaCRL", "X509v3 Delta CRL Indicator", "CRLReason", "X509v3 CRL Reason Code", "invalidityDate", "Invalidity Date", "SXNetID", "Strong Extranet ID", "PBE-SHA1-RC4-128", "pbeWithSHA1And128BitRC4", "PBE-SHA1-RC4-40", "pbeWithSHA1And40BitRC4", "PBE-SHA1-3DES", "pbeWithSHA1And3-KeyTripleDES-CBC", "PBE-SHA1-2DES", "pbeWithSHA1And2-KeyTripleDES-CBC", "PBE-SHA1-RC2-128", "pbeWithSHA1And128BitRC2-CBC", "PBE-SHA1-RC2-40", "pbeWithSHA1And40BitRC2-CBC", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "id-qt-cps", "Policy Qualifier CPS", "id-qt-unotice", "Policy Qualifier User Notice", "RC2-64-CBC", "rc2-64-cbc", "SMIME-CAPS", "S/MIME Capabilities", "PBE-MD2-RC2-64", "pbeWithMD2AndRC2-CBC", "PBE-MD5-RC2-64", "pbeWithMD5AndRC2-CBC", "PBE-SHA1-DES", "pbeWithSHA1AndDES-CBC", "msExtReq", "Microsoft Extension Request", "extReq", "dnQualifier", "id-pe", "id-ad", "authorityInfoAccess", "Authority Information Access", "OCSP", "caIssuers", "CA Issuers", "OCSPSigning", "OCSP Signing", "member-body", "ISO Member Body", "ISO-US", "ISO US Member Body", "X9-57", "X9.57", "X9cm", "X9.57 CM ?", "pkcs1", "pkcs5", "SMIME", "S/MIME", "id-smime-mod", "id-smime-ct", "id-smime-aa", "id-smime-alg", "id-smime-cd", "id-smime-spq", "id-smime-cti", "id-smime-mod-cms", "id-smime-mod-ess", "id-smime-mod-oid", "id-smime-mod-msg-v3", "id-smime-mod-ets-eSignature-88", "id-smime-mod-ets-eSignature-97", "id-smime-mod-ets-eSigPolicy-88", "id-smime-mod-ets-eSigPolicy-97", "id-smime-ct-receipt", "id-smime-ct-authData", "id-smime-ct-publishCert", "id-smime-ct-TSTInfo", "id-smime-ct-TDTInfo", "id-smime-ct-contentInfo", "id-smime-ct-DVCSRequestData", "id-smime-ct-DVCSResponseData", "id-smime-aa-receiptRequest", "id-smime-aa-securityLabel", "id-smime-aa-mlExpandHistory", "id-smime-aa-contentHint", "id-smime-aa-msgSigDigest", "id-smime-aa-encapContentType", "id-smime-aa-contentIdentifier", "id-smime-aa-macValue", "id-smime-aa-equivalentLabels", "id-smime-aa-contentReference", "id-smime-aa-encrypKeyPref", "id-smime-aa-signingCertificate", "id-smime-aa-smimeEncryptCerts", "id-smime-aa-timeStampToken", "id-smime-aa-ets-sigPolicyId", "id-smime-aa-ets-commitmentType", "id-smime-aa-ets-signerLocation", "id-smime-aa-ets-signerAttr", "id-smime-aa-ets-otherSigCert", "id-smime-aa-ets-contentTimestamp", "id-smime-aa-ets-CertificateRefs", "id-smime-aa-ets-RevocationRefs", "id-smime-aa-ets-certValues", "id-smime-aa-ets-revocationValues", "id-smime-aa-ets-escTimeStamp", "id-smime-aa-ets-certCRLTimestamp", "id-smime-aa-ets-archiveTimeStamp", "id-smime-aa-signatureType", "id-smime-aa-dvcs-dvc", "id-smime-alg-ESDHwith3DES", "id-smime-alg-ESDHwithRC2", "id-smime-alg-3DESwrap", "id-smime-alg-RC2wrap", "id-smime-alg-ESDH", "id-smime-alg-CMS3DESwrap", "id-smime-alg-CMSRC2wrap", "id-smime-cd-ldap", "id-smime-spq-ets-sqt-uri", "id-smime-spq-ets-sqt-unotice", "id-smime-cti-ets-proofOfOrigin", "id-smime-cti-ets-proofOfReceipt", "id-smime-cti-ets-proofOfDelivery", "id-smime-cti-ets-proofOfSender", "id-smime-cti-ets-proofOfApproval", "id-smime-cti-ets-proofOfCreation", "id-pkix-mod", "id-qt", "id-it", "id-pkip", "id-alg", "id-cmc", "id-on", "id-pda", "id-aca", "id-qcs", "id-cct", "id-pkix1-explicit-88", "id-pkix1-implicit-88", "id-pkix1-explicit-93", "id-pkix1-implicit-93", "id-mod-crmf", "id-mod-cmc", "id-mod-kea-profile-88", "id-mod-kea-profile-93", "id-mod-cmp", "id-mod-qualified-cert-88", "id-mod-qualified-cert-93", "id-mod-attribute-cert", "id-mod-timestamp-protocol", "id-mod-ocsp", "id-mod-dvcs", "id-mod-cmp2000", "biometricInfo", "Biometric Info", "qcStatements", "ac-auditEntity", "ac-targeting", "aaControls", "sbgp-ipAddrBlock", "sbgp-autonomousSysNum", "sbgp-routerIdentifier", "textNotice", "ipsecEndSystem", "IPSec End System", "ipsecTunnel", "IPSec Tunnel", "ipsecUser", "IPSec User", "id-it-caProtEncCert", "id-it-signKeyPairTypes", "id-it-encKeyPairTypes", "id-it-preferredSymmAlg", "id-it-caKeyUpdateInfo", "id-it-currentCRL", "id-it-unsupportedOIDs", "id-it-subscriptionRequest", "id-it-subscriptionResponse", "id-it-keyPairParamReq", "id-it-keyPairParamRep", "id-it-revPassphrase", "id-it-implicitConfirm", "id-it-confirmWaitTime", "id-it-origPKIMessage", "id-regCtrl", "id-regInfo", "id-regCtrl-regToken", "id-regCtrl-authenticator", "id-regCtrl-pkiPublicationInfo", "id-regCtrl-pkiArchiveOptions", "id-regCtrl-oldCertID", "id-regCtrl-protocolEncrKey", "id-regInfo-utf8Pairs", "id-regInfo-certReq", "id-alg-des40", "id-alg-noSignature", "id-alg-dh-sig-hmac-sha1", "id-alg-dh-pop", "id-cmc-statusInfo", "id-cmc-identification", "id-cmc-identityProof", "id-cmc-dataReturn", "id-cmc-transactionId", "id-cmc-senderNonce", "id-cmc-recipientNonce", "id-cmc-addExtensions", "id-cmc-encryptedPOP", "id-cmc-decryptedPOP", "id-cmc-lraPOPWitness", "id-cmc-getCert", "id-cmc-getCRL", "id-cmc-revokeRequest", "id-cmc-regInfo", "id-cmc-responseInfo", "id-cmc-queryPending", "id-cmc-popLinkRandom", "id-cmc-popLinkWitness", "id-cmc-confirmCertAcceptance", "id-on-personalData", "id-pda-dateOfBirth", "id-pda-placeOfBirth", "id-pda-gender", "id-pda-countryOfCitizenship", "id-pda-countryOfResidence", "id-aca-authenticationInfo", "id-aca-accessIdentity", "id-aca-chargingIdentity", "id-aca-group", "id-aca-role", "id-qcs-pkixQCSyntax-v1", "id-cct-crs", "id-cct-PKIData", "id-cct-PKIResponse", "ad_timestamping", "AD Time Stamping", "AD_DVCS", "ad dvcs", "basicOCSPResponse", "Basic OCSP Response", "OCSP Nonce", "CrlID", "OCSP CRL ID", "acceptableResponses", "Acceptable OCSP Responses", "noCheck", "OCSP No Check", "archiveCutoff", "OCSP Archive Cutoff", "serviceLocator", "OCSP Service Locator", "extendedStatus", "Extended OCSP Status", "trustRoot", "Trust Root", "rsaSignature", "X500algorithms", "directory services - algorithms", "IANA", "iana", "Directory", "mgmt", "Management", "Experimental", "Private", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "selected-attribute-types", "Selected Attribute Types", "clearance", "RSA-MD4", "md4WithRSAEncryption", "ac-proxying", "subjectInfoAccess", "Subject Information Access", "id-aca-encAttrs", "policyConstraints", "X509v3 Policy Constraints", "targetInformation", "X509v3 AC Targeting", "noRevAvail", "X509v3 No Revocation Available", "ansi-X9-62", "ANSI X9.62", "prime-field", "characteristic-two-field", "id-ecPublicKey", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "CSPName", "Microsoft CSP Name", "AES-128-ECB", "AES-128-OFB", "aes-128-ofb", "AES-128-CFB", "aes-128-cfb", "AES-192-ECB", "aes-192-ecb", "aes-192-cbc", "AES-192-OFB", "aes-192-ofb", "AES-192-CFB", "aes-192-cfb", "AES-256-ECB", "AES-256-OFB", "aes-256-ofb", "AES-256-CFB", "aes-256-cfb", "holdInstructionCode", "Hold Instruction Code", "holdInstructionNone", "Hold Instruction None", "holdInstructionCallIssuer", "Hold Instruction Call Issuer", "holdInstructionReject", "Hold Instruction Reject", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "rfc822Mailbox", "favouriteDrink", "roomNumber", "photo", "userClass", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "documentPublisher", "x500UniqueIdentifier", "mime-mhs", "MIME MHS", "mime-mhs-headings", "mime-mhs-bodies", "id-hex-partial-message", "id-hex-multipart-message", "generationQualifier", "pseudonym", "id-set", "Secure Electronic Transactions", "set-ctype", "content types", "set-msgExt", "message extensions", "set-attr", "set-policy", "set-certExt", "certificate extensions", "set-brand", "setct-PANData", "setct-PANToken", "setct-PANOnly", "setct-OIData", "setct-PI", "setct-PIData", "setct-PIDataUnsigned", "setct-HODInput", "setct-AuthResBaggage", "setct-AuthRevReqBaggage", "setct-AuthRevResBaggage", "setct-CapTokenSeq", "setct-PInitResData", "setct-PI-TBS", "setct-PResData", "setct-AuthReqTBS", "setct-AuthResTBS", "setct-AuthResTBSX", "setct-AuthTokenTBS", "setct-CapTokenData", "setct-CapTokenTBS", "setct-AcqCardCodeMsg", "setct-AuthRevReqTBS", "setct-AuthRevResData", "setct-AuthRevResTBS", "setct-CapReqTBS", "setct-CapReqTBSX", "setct-CapResData", "setct-CapRevReqTBS", "setct-CapRevReqTBSX", "setct-CapRevResData", "setct-CredReqTBS", "setct-CredReqTBSX", "setct-CredResData", "setct-CredRevReqTBS", "setct-CredRevReqTBSX", "setct-CredRevResData", "setct-PCertReqData", "setct-PCertResTBS", "setct-BatchAdminReqData", "setct-BatchAdminResData", "setct-CardCInitResTBS", "setct-MeAqCInitResTBS", "setct-RegFormResTBS", "setct-CertReqData", "setct-CertReqTBS", "setct-CertResData", "setct-CertInqReqTBS", "setct-ErrorTBS", "setct-PIDualSignedTBE", "setct-PIUnsignedTBE", "setct-AuthReqTBE", "setct-AuthResTBE", "setct-AuthResTBEX", "setct-AuthTokenTBE", "setct-CapTokenTBE", "setct-CapTokenTBEX", "setct-AcqCardCodeMsgTBE", "setct-AuthRevReqTBE", "setct-AuthRevResTBE", "setct-AuthRevResTBEB", "setct-CapReqTBE", "setct-CapReqTBEX", "setct-CapResTBE", "setct-CapRevReqTBE", "setct-CapRevReqTBEX", "setct-CapRevResTBE", "setct-CredReqTBE", "setct-CredReqTBEX", "setct-CredResTBE", "setct-CredRevReqTBE", "setct-CredRevReqTBEX", "setct-CredRevResTBE", "setct-BatchAdminReqTBE", "setct-BatchAdminResTBE", "setct-RegFormReqTBE", "setct-CertReqTBE", "setct-CertReqTBEX", "setct-CertResTBE", "setct-CRLNotificationTBS", "setct-CRLNotificationResTBS", "setct-BCIDistributionTBS", "setext-genCrypt", "generic cryptogram", "setext-miAuth", "merchant initiated auth", "setext-pinSecure", "setext-pinAny", "setext-track2", "setext-cv", "additional verification", "set-policy-root", "setCext-hashedRoot", "setCext-certType", "setCext-merchData", "setCext-cCertRequired", "setCext-tunneling", "setCext-setExt", "setCext-setQualf", "setCext-PGWYcapabilities", "setCext-TokenIdentifier", "setCext-Track2Data", "setCext-TokenType", "setCext-IssuerCapabilities", "setAttr-Cert", "setAttr-PGWYcap", "payment gateway capabilities", "setAttr-TokenType", "setAttr-IssCap", "issuer capabilities", "set-rootKeyThumb", "set-addPolicy", "setAttr-Token-EMV", "setAttr-Token-B0Prime", "setAttr-IssCap-CVM", "setAttr-IssCap-T2", "setAttr-IssCap-Sig", "setAttr-GenCryptgrm", "generate cryptogram", "setAttr-T2Enc", "encrypted track 2", "setAttr-T2cleartxt", "cleartext track 2", "setAttr-TokICCsig", "ICC or token signature", "setAttr-SecDevSig", "secure device signature", "set-brand-IATA-ATA", "set-brand-Diners", "set-brand-AmericanExpress", "set-brand-JCB", "set-brand-Visa", "set-brand-MasterCard", "set-brand-Novus", "DES-CDMF", "des-cdmf", "rsaOAEPEncryptionSET", "JOINT-ISO-ITU-T", "joint-iso-itu-t", "international-organizations", "International Organizations", "msSmartcardLogin", "Microsoft Smartcardlogin", "msUPN", "Microsoft Universal Principal Name", "AES-128-CFB1", "aes-128-cfb1", "AES-192-CFB1", "aes-192-cfb1", "AES-256-CFB1", "aes-256-cfb1", "AES-128-CFB8", "aes-128-cfb8", "AES-192-CFB8", "aes-192-cfb8", "AES-256-CFB8", "aes-256-cfb8", "DES-CFB1", "des-cfb1", "DES-CFB8", "des-cfb8", "DES-EDE3-CFB1", "des-ede3-cfb1", "DES-EDE3-CFB8", "des-ede3-cfb8", "street", "streetAddress", "postalCode", "id-ppl", "proxyCertInfo", "Proxy Certificate Information", "id-ppl-anyLanguage", "Any language", "id-ppl-inheritAll", "Inherit all", "nameConstraints", "X509v3 Name Constraints", "id-ppl-independent", "Independent", "identified-organization", "certicom-arc", "wap-wsg", "id-characteristic-two-basis", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "wap-wsg-idm-ecid-wtls1", "wap-wsg-idm-ecid-wtls3", "wap-wsg-idm-ecid-wtls4", "wap-wsg-idm-ecid-wtls5", "wap-wsg-idm-ecid-wtls6", "wap-wsg-idm-ecid-wtls7", "wap-wsg-idm-ecid-wtls8", "wap-wsg-idm-ecid-wtls9", "wap-wsg-idm-ecid-wtls10", "wap-wsg-idm-ecid-wtls11", "wap-wsg-idm-ecid-wtls12", "anyPolicy", "X509v3 Any Policy", "policyMappings", "X509v3 Policy Mappings", "inhibitAnyPolicy", "X509v3 Inhibit Any Policy", "Oakley-EC2N-3", "ipsec3", "Oakley-EC2N-4", "ipsec4", "CAMELLIA-128-CBC", "camellia-128-cbc", "CAMELLIA-192-CBC", "camellia-192-cbc", "CAMELLIA-256-CBC", "camellia-256-cbc", "CAMELLIA-128-ECB", "camellia-128-ecb", "CAMELLIA-192-ECB", "camellia-192-ecb", "CAMELLIA-256-ECB", "camellia-256-ecb", "CAMELLIA-128-CFB", "camellia-128-cfb", "CAMELLIA-192-CFB", "camellia-192-cfb", "CAMELLIA-256-CFB", "camellia-256-cfb", "CAMELLIA-128-CFB1", "camellia-128-cfb1", "CAMELLIA-192-CFB1", "camellia-192-cfb1", "CAMELLIA-256-CFB1", "camellia-256-cfb1", "CAMELLIA-128-CFB8", "camellia-128-cfb8", "CAMELLIA-192-CFB8", "camellia-192-cfb8", "CAMELLIA-256-CFB8", "camellia-256-cfb8", "CAMELLIA-128-OFB", "camellia-128-ofb", "CAMELLIA-192-OFB", "camellia-192-ofb", "CAMELLIA-256-OFB", "camellia-256-ofb", "subjectDirectoryAttributes", "X509v3 Subject Directory Attributes", "issuingDistributionPoint", "X509v3 Issuing Distribution Point", "certificateIssuer", "X509v3 Certificate Issuer", "KISA", "kisa", "SEED-ECB", "seed-ecb", "SEED-CBC", "seed-cbc", "SEED-OFB", "seed-ofb", "SEED-CFB", "seed-cfb", "id-PasswordBasedMAC", "password based MAC", "id-DHBasedMac", "Diffie-Hellman based MAC", "id-it-suppLangTags", "caRepository", "CA Repository", "id-smime-ct-compressedData", "id-ct-asciiTextWithCRLF", "id-aes128-wrap", "id-aes192-wrap", "id-aes256-wrap", "ecdsa-with-Recommended", "ecdsa-with-Specified", "ecdsa-with-SHA224", "ecdsa-with-SHA256", "ecdsa-with-SHA384", "ecdsa-with-SHA512", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "id-GostR3411-94-with-GostR3410-2001", "GOST R 34.11-94 with GOST R 34.10-2001", "id-GostR3411-94-with-GostR3410-94", "GOST R 34.11-94 with GOST R 34.10-94", "md_gost94", "GOST R 34.11-94", "id-HMACGostR3411-94", "HMAC GOST 34.11-94", "gost2001", "gost89", "GOST 28147-89", "gost89-cnt", "gost-mac", "GOST 28147-89 MAC", "prf-gostr3411-94", "GOST R 34.11-94 PRF", "id-GostR3410-2001DH", "GOST R 34.10-2001 DH", "id-GostR3410-94DH", "GOST R 34.10-94 DH", "id-Gost28147-89-CryptoPro-KeyMeshing", "id-Gost28147-89-None-KeyMeshing", "id-GostR3411-94-TestParamSet", "id-GostR3411-94-CryptoProParamSet", "id-Gost28147-89-TestParamSet", "id-Gost28147-89-CryptoPro-A-ParamSet", "id-Gost28147-89-CryptoPro-B-ParamSet", "id-Gost28147-89-CryptoPro-C-ParamSet", "id-Gost28147-89-CryptoPro-D-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet", "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet", "id-Gost28147-89-CryptoPro-RIC-1-ParamSet", "id-GostR3410-94-TestParamSet", "id-GostR3410-94-CryptoPro-A-ParamSet", "id-GostR3410-94-CryptoPro-B-ParamSet", "id-GostR3410-94-CryptoPro-C-ParamSet", "id-GostR3410-94-CryptoPro-D-ParamSet", "id-GostR3410-94-CryptoPro-XchA-ParamSet", "id-GostR3410-94-CryptoPro-XchB-ParamSet", "id-GostR3410-94-CryptoPro-XchC-ParamSet", "id-GostR3410-2001-TestParamSet", "id-GostR3410-2001-CryptoPro-A-ParamSet", "id-GostR3410-2001-CryptoPro-B-ParamSet", "id-GostR3410-2001-CryptoPro-C-ParamSet", "id-GostR3410-2001-CryptoPro-XchA-ParamSet", "id-GostR3410-2001-CryptoPro-XchB-ParamSet", "id-GostR3410-94-a", "id-GostR3410-94-aBis", "id-GostR3410-94-b", "id-GostR3410-94-bBis", "id-Gost28147-89-cc", "GOST 28147-89 Cryptocom ParamSet", "gost94cc", "GOST 34.10-94 Cryptocom", "gost2001cc", "GOST 34.10-2001 Cryptocom", "id-GostR3411-94-with-GostR3410-94-cc", "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom", "id-GostR3411-94-with-GostR3410-2001-cc", "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom", "id-GostR3410-2001-ParamSet-cc", "GOST R 3410-2001 Parameter Set Cryptocom", "HMAC", "hmac", "LocalKeySet", "Microsoft Local Key set", "freshestCRL", "X509v3 Freshest CRL", "id-on-permanentIdentifier", "Permanent Identifier", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "id-alg-PWRI-KEK", "CMAC", "cmac", "id-aes128-GCM", "aes-128-gcm", "id-aes128-CCM", "aes-128-ccm", "id-aes128-wrap-pad", "id-aes192-GCM", "aes-192-gcm", "id-aes192-CCM", "aes-192-ccm", "id-aes192-wrap-pad", "id-aes256-GCM", "aes-256-gcm", "id-aes256-CCM", "aes-256-ccm", "id-aes256-wrap-pad", "AES-128-CTR", "AES-192-CTR", "aes-192-ctr", "AES-256-CTR", "id-camellia128-wrap", "id-camellia192-wrap", "id-camellia256-wrap", "anyExtendedKeyUsage", "Any Extended Key Usage", "MGF1", "mgf1", "RSASSA-PSS", "rsassaPss", "AES-128-XTS", "aes-128-xts", "AES-256-XTS", "aes-256-xts", "RC4-HMAC-MD5", "rc4-hmac-md5", "AES-128-CBC-HMAC-SHA1", "aes-128-cbc-hmac-sha1", "AES-192-CBC-HMAC-SHA1", "aes-192-cbc-hmac-sha1", "AES-256-CBC-HMAC-SHA1", "aes-256-cbc-hmac-sha1", "RSAES-OAEP", "rsaesOaep", "dhpublicnumber", "X9.42 DH", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "dhSinglePass-stdDH-sha1kdf-scheme", "dhSinglePass-stdDH-sha224kdf-scheme", "dhSinglePass-stdDH-sha256kdf-scheme", "dhSinglePass-stdDH-sha384kdf-scheme", "dhSinglePass-stdDH-sha512kdf-scheme", "dhSinglePass-cofactorDH-sha1kdf-scheme", "dhSinglePass-cofactorDH-sha224kdf-scheme", "dhSinglePass-cofactorDH-sha256kdf-scheme", "dhSinglePass-cofactorDH-sha384kdf-scheme", "dhSinglePass-cofactorDH-sha512kdf-scheme", "dh-std-kdf", "dh-cofactor-kdf", "X25519", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_dup.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_enum.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_gentm.c", "%04d%02d%02d%02d%02d%02dZ", "minsize=", "maxsize=", "MASK:", "nombstr", "pkix", "utf8only", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_strnid.c", "ASN1_TIME", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_time.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/a_utctm.c", "%02d%02d%02d%02d%02d%02dZ", "BIT STRING", "OCTET STRING", "OBJECT DESCRIPTOR", "EXTERNAL", "REAL", "<ASN1 11>", "<ASN1 13>", "<ASN1 14>", "<ASN1 15>", "NUMERICSTRING", "VIDEOTEXSTRING", "GRAPHICSTRING", "<ASN1 29>", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/dh/dh_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/dsa/dsa.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/dsa/dsa_asn1.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/ec/ec_asn1.c", "Private Key", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/evp/print.c", "Private-Key: (%d bit)\n", "modulus:", "publicExponent:", "Public-Key: (%d bit)\n", "Modulus:", "privateExponent:", "prime1:", "prime2:", "exponent1:", "exponent2:", "coefficient:", "otherPrimeInfos:\n", "otherPrimeInfo (prime %u):\n", "prime:", "exponent:", "coeff:", "%s 0\n", "%s %s%lu (%s0x%lx)\n", "Private-Key", "Public-Key", "%s: (%d bit)\n", "priv:", "pub: ", "P:   ", "Q:   ", "G:   ", "ECDSA-Parameters", "%s algorithm unsupported\n", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pem/pem_info.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/pem/pem_pk8.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/a_digest.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/a_sign.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/a_verify.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/algorithm.c", "Load certs from files in a directory", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/by_dir.c", "%s%c%08lx.%s%d", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/i2d_pr.c", "RSA_PSS_PARAMS", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/rsa_pss.c", " (INVALID PSS PARAMETERS)\n", "Hash Algorithm: ", "Mask Algorithm: ", " with ", "mgf1 with sha1 (default)", "Salt Length: 0x", "14 (default)", "Trailer Field: 0x", "BC (default)", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_req.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_trs.c", "compatible", "SSL Client", "SSL Server", "S/MIME email", "Object Signer", "OCSP responder", "OCSP request", "TSA server", "X509_ATTRIBUTE", "value.set", "value.single", "X509_VAL", "always", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_akey.c", "X400Name", "EdiPartyName", "DirName", "IP Address", "Registered ID", "othername:<unsupported>", "X400Name:<unsupported>", "EdiPartyName:<unsupported>", "email:%s", "DNS:%s", "URI:%s", "DirName: ", "IP Address:%d.%d.%d.%d", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_alt.c", "dirName", "BASIC_CONSTRAINTS", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_bcons.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_bitst.c", "Object Signing", "objsign", "SSL CA", "sslCA", "S/MIME CA", "emailCA", "Object Signing CA", "objCA", "Digital Signature", "digitalSignature", "Non Repudiation", "nonRepudiation", "Key Encipherment", "keyEncipherment", "Data Encipherment", "dataEncipherment", "Key Agreement", "keyAgreement", "Certificate Sign", "keyCertSign", "CRL Sign", "cRLSign", "Encipher Only", "encipherOnly", "Decipher Only", "decipherOnly", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_conf.c", ", value=", ",section=", "critical,", "DER:", "ASN1:", "Unspecified", "unspecified", "Remove From CRL", "removeFromCRL", "EXTENDED_KEY_USAGE", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_extku.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_ia5.c", "ACCESS_DESCRIPTION", "AUTHORITY_INFO_ACCESS", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509v3/v3_info.c", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/asn1/asn_pack.c", "tag=", "ASCII", "UTF8", "BITLIST", "BOOL", "ENUM", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIV", "UTF8String", "VISIBLE", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORMAT", "Char=", "string=", "/home/worker/data/gitlab/make/7b1ea9ec/1/disigma/nightly/arc/boringssl/2987/crypto/x509/x509_att.c", "src/libavcodec/avpacket.c", "Palette", "New Extradata", "Param Change", "H263 MB Info", "Replay Gain", "Display Matrix", "Stereo 3D", "Audio Service Type", "Skip Samples", "JP Dual Mono", "Strings Metadata", "Subtitle Position", "Matroska BlockAdditional", "WebVTT ID", "WebVTT Settings", "Metadata Update", "MPEGTS Stream ID", "Mastering display metadata", "p-pkt->data == pkt->size", "size<=0x7fffffff - 5 && p - pkt->data >= size", "private_spspps_buf", "Codec '%s' (%d) is not supported by the bitstream filter '%s'. Supported codecs are: ", "%s (%d) ", "pkt->data || pkt->side_data", "src/libavcodec/bsf.c", "A non-NULL packet sent after an EOF.\n", "bsf_list", "AVBSFContext", "bsf_list(", "mpeg1video", "MPEG-1 video", "mpeg2video", "MPEG-2 video", "mpegvideo_xvmc", "MPEG-1/2 video XvMC (X-Video Motion Compensation)", "h261", "H.261", "h263", "H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "rv10", "RealVideo 1.0", "rv20", "RealVideo 2.0", "Motion JPEG", "mjpegb", "Apple MJPEG-B", "MPEG-4 part 2", "rawvideo", "raw video", "msmpeg4v1", "MPEG-4 part 2 Microsoft variant version 1", "msmpeg4v2", "MPEG-4 part 2 Microsoft variant version 2", "msmpeg4v3", "MPEG-4 part 2 Microsoft variant version 3", "wmv1", "Windows Media Video 7", "wmv2", "Windows Media Video 8", "h263p", "h263i", "Intel H.263", "flv1", "FLV / Sorenson Spark / Sorenson H.263 (Flash Video)", "svq1", "Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1", "svq3", "Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3", "dvvideo", "DV (Digital Video)", "huffyuv", "HuffYUV", "Creative YUV (CYUV)", "indeo3", "Intel Indeo 3", "On2 VP3", "theora", "Theora", "asv1", "ASUS V1", "asv2", "ASUS V2", "ffv1", "FFmpeg video codec #1", "vcr1", "ATI VCR1", "cljr", "Cirrus Logic AccuPak", "mdec", "Sony PlayStation MDEC (Motion DECoder)", "id RoQ video", "interplayvideo", "Interplay MVE video", "xan_wc3", "Wing Commander III / Xan", "xan_wc4", "Wing Commander IV / Xxan", "rpza", "QuickTime video (RPZA)", "cinepak", "Cinepak", "ws_vqa", "Westwood Studios VQA (Vector Quantized Animation) video", "msrle", "Microsoft RLE", "msvideo1", "Microsoft Video 1", "idcin", "id Quake II CIN video", "8bps", "QuickTime 8BPS video", "QuickTime Graphics (SMC)", "flic", "Autodesk Animator Flic video", "truemotion1", "Duck TrueMotion 1.0", "vmdvideo", "Sierra VMD video", "mszh", "LCL (LossLess Codec Library) MSZH", "zlib", "LCL (LossLess Codec Library) ZLIB", "qtrle", "QuickTime Animation (RLE) video", "snow", "Snow", "tscc", "TechSmith Screen Capture Codec", "IBM UltiMotion", "qdraw", "Apple QuickDraw", "vixl", "Miro VideoXL", "qpeg", "Q-team QPEG", "ffvhuff", "Huffyuv FFmpeg variant", "rv30", "RealVideo 3.0", "rv40", "RealVideo 4.0", "SMPTE VC-1", "Windows Media Video 9", "loco", "LOCO", "wnv1", "Winnov WNV1", "aasc", "Autodesk RLE", "indeo2", "Intel Indeo 2", "fraps", "Fraps", "truemotion2", "Duck TrueMotion 2.0", "BMP (Windows and OS/2 bitmap)", "image/x-ms-bmp", "cscd", "CamStudio", "mmvideo", "American Laser Games MM Video", "zmbv", "Zip Motion Blocks Video", "AVS (Audio Video Standard) video", "smackvideo", "Smacker video", "NuppelVideo/RTJPEG", "kmvc", "Karl Morton's video codec", "flashsv", "Flash Screen Video v1", "cavs", "Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)", "jpeg2000", "JPEG 2000", "image/jp2", "vmnc", "VMware Screen Codec / VMware Video", "On2 VP5", "On2 VP6", "vp6f", "On2 VP6 (Flash version)", "dsicinvideo", "Delphine Software International CIN video", "tiertexseqvideo", "Tiertex Limited SEQ video", "Feeble Files/ScummVM DXA", "dnxhd", "VC3/DNxHD", "Nintendo Gamecube THP video", "Interplay C93", "bethsoftvid", "Bethesda VID video", "vp6a", "On2 VP6 (Flash version, with alpha channel)", "AMV Video", "Beam Software VB", "indeo4", "Intel Indeo Video Interactive 4", "indeo5", "Intel Indeo Video Interactive 5", "mimic", "Mimic", "RL2 video", "escape124", "Escape 124", "daala", "Daala", "dirac", "Dirac", "Brute Force & Ignorance", "Electronic Arts CMV video", "motionpixels", "Motion Pixels video", "Electronic Arts TGV video", "Electronic Arts TGQ video", "Electronic Arts TQI video", "aura", "Auravision AURA", "aura2", "Auravision Aura 2", "v210x", "Uncompressed 4:2:2 10-bit", "8088flex TMV", "v210", "Electronic Arts Madcow Video", "frwu", "Forward Uncompressed", "flashsv2", "Flash Screen Video v2", "cdgraphics", "CD Graphics video", "r210", "Uncompressed RGB 10-bit", "Deluxe Paint Animation", "binkvideo", "Bink video", "iff_ilbm", "IFF ACBM/ANIM/DEEP/ILBM/PBM/RGB8/RGBN", "kgv1", "Kega Game Video", "Psygnosis YOP Video", "On2 VP8", "Google VP9", "pictor", "Pictor/PC Paint", "a64_multi", "Multicolor charset for Commodore 64", "a64_multi5", "Multicolor charset for Commodore 64, extended with 5th color (colram)", "r10k", "AJA Kona 10-bit RGB Codec", "m101", "Matrox Uncompressed SD", "mvc1", "Silicon Graphics Motion Video Compressor 1", "mvc2", "Silicon Graphics Motion Video Compressor 2", "mxpeg", "Mobotix MxPEG video", "lagarith", "Lagarith lossless", "prores", "Apple ProRes (iCodec Pro)", "Bitmap Brothers JV video", "Chronomaster DFA", "utvideo", "Ut Video", "bmv_video", "Discworld II BMV video", "vble", "VBLE Lossless Codec", "dxtory", "Dxtory", "v410", "Uncompressed 4:4:4 10-bit", "cdxl", "Commodore CDXL video", "zerocodec", "ZeroCodec Lossless Video", "mss1", "MS Screen 1", "msa1", "MS ATC Screen", "tscc2", "TechSmith Screen Codec 2", "mts2", "MS Expression Encoder Screen", "cllc", "Canopus Lossless Codec", "mss2", "MS Windows Media Video V9 Screen", "Apple Intermediate Codec", "y41p", "Uncompressed YUV 4:1:1 12-bit", "escape130", "Escape 130", "avrp", "Avid 1:1 10-bit RGB Packer", "012v", "avui", "Avid Meridien Uncompressed", "ayuv", "Uncompressed packed MS 4:4:4:4", "targa_y216", "Pinnacle TARGA CineWave YUV16", "v308", "Uncompressed packed 4:4:4", "v408", "Uncompressed packed QT 4:4:4:4", "yuv4", "Uncompressed packed 4:2:0", "avrn", "Avid AVI Codec", "cpia", "CPiA video format", "X-face image", "smvjpeg", "Sigmatel Motion Video", "Go2Meeting", "hnm4video", "HNM 4 video", "H.265 / HEVC (High Efficiency Video Coding)", "Mirillis FIC", "paf_video", "Amazing Studio Packed Animation File Video", "On2 VP7", "sanm", "LucasArts SANM/SMUSH video", "sgirle", "SGI RLE 8-bit", "Canopus HQX", "hq_hqa", "Canopus HQ/HQA", "Vidvox Hap decoder", "Resolume DXV", "screenpresso", "Screenpresso", "wrapped_avframe", "AVFrame to AVPacket passthrough", "rscc", "innoHeim/Rsupport Screen Capture Codec", "magicyuv", "MagicYUV video", "truemotion2rt", "Duck TrueMotion 2.0 Real Time", "cfhd", "Cineform HD", "sheervideo", "BitJazz SheerVideo", "YUY2 Lossless Codec", "alias_pix", "Alias/Wavefront PIX image", "ansi", "ASCII/ANSI art", "brender_pix", "BRender PIX image", "DirectDraw Surface image decoder", "DPX (Digital Picture Exchange) image", "OpenEXR image", "GIF (Graphics Interchange Format)", "jpegls", "JPEG-LS", "ljpeg", "Lossless JPEG", "PAM (Portable AnyMap) image", "image/x-portable-pixmap", "PBM (Portable BitMap) image", "PC Paintbrush PCX image", "image/x-pcx", "PGM (Portable GrayMap) image", "PGMYUV (Portable GrayMap YUV) image", "PNG (Portable Network Graphics) image", "PPM (Portable PixelMap) image", "V.Flash PTX image", "SGI image", "sp5x", "Sunplus JPEG (SP5X)", "sunrast", "Sun Rasterfile image", "Truevision Targa image", "image/x-targa", "image/x-tga", "tdsc", "TDSC", "TIFF image", "image/tiff", "Renderware TXD (TeXture Dictionary) image", "vc1image", "Windows Media Video 9 Image v2", "WebP", "image/webp", "wmv3image", "Windows Media Video 9 Image", "XBM (X BitMap) image", "XWD (X Window Dump) image", "image/x-xwindowdump", "apng", "APNG (Animated Portable Network Graphics) image", "pcm_s16le", "PCM signed 16-bit little-endian", "pcm_s16be", "PCM signed 16-bit big-endian", "pcm_u16le", "PCM unsigned 16-bit little-endian", "pcm_u16be", "PCM unsigned 16-bit big-endian", "pcm_s8", "PCM signed 8-bit", "pcm_u8", "PCM unsigned 8-bit", "pcm_mulaw", "PCM mu-law / G.711 mu-law", "pcm_alaw", "PCM A-law / G.711 A-law", "pcm_s32le", "PCM signed 32-bit little-endian", "pcm_s32be", "PCM signed 32-bit big-endian", "pcm_s64le", "PCM signed 64-bit little-endian", "pcm_s64be", "PCM signed 64-bit big-endian", "pcm_u32le", "PCM unsigned 32-bit little-endian", "pcm_u32be", "PCM unsigned 32-bit big-endian", "pcm_s24le", "PCM signed 24-bit little-endian", "pcm_s24be", "PCM signed 24-bit big-endian", "pcm_u24le", "PCM unsigned 24-bit little-endian", "pcm_u24be", "PCM unsigned 24-bit big-endian", "pcm_s24daud", "PCM D-Cinema audio signed 24-bit", "pcm_zork", "PCM Zork", "pcm_s16be_planar", "PCM signed 16-bit big-endian planar", "pcm_s16le_planar", "PCM signed 16-bit little-endian planar", "pcm_s24le_planar", "PCM signed 24-bit little-endian planar", "pcm_s32le_planar", "PCM signed 32-bit little-endian planar", "pcm_dvd", "PCM signed 20|24-bit big-endian", "pcm_f32be", "PCM 32-bit floating point big-endian", "pcm_f32le", "PCM 32-bit floating point little-endian", "pcm_f64be", "PCM 64-bit floating point big-endian", "pcm_f64le", "PCM 64-bit floating point little-endian", "pcm_bluray", "PCM signed 16|20|24-bit big-endian for Blu-ray media", "pcm_lxf", "PCM signed 20-bit little-endian planar", "s302m", "SMPTE 302M", "pcm_s8_planar", "PCM signed 8-bit planar", "adpcm_ima_qt", "ADPCM IMA QuickTime", "adpcm_ima_wav", "ADPCM IMA WAV", "adpcm_ima_dk3", "ADPCM IMA Duck DK3", "adpcm_ima_dk4", "ADPCM IMA Duck DK4", "adpcm_ima_ws", "ADPCM IMA Westwood", "adpcm_ima_smjpeg", "ADPCM IMA Loki SDL MJPEG", "adpcm_ms", "ADPCM Microsoft", "adpcm_4xm", "ADPCM 4X Movie", "adpcm_xa", "ADPCM CDROM XA", "adpcm_adx", "SEGA CRI ADX ADPCM", "adpcm_ea", "ADPCM Electronic Arts", "adpcm_g726", "G.726 ADPCM", "adpcm_ct", "ADPCM Creative Technology", "adpcm_swf", "ADPCM Shockwave Flash", "adpcm_yamaha", "ADPCM Yamaha", "adpcm_sbpro_4", "ADPCM Sound Blaster Pro 4-bit", "adpcm_sbpro_3", "ADPCM Sound Blaster Pro 2.6-bit", "adpcm_sbpro_2", "ADPCM Sound Blaster Pro 2-bit", "adpcm_thp", "ADPCM Nintendo THP", "adpcm_thp_le", "ADPCM Nintendo THP (Little-Endian)", "adpcm_ima_amv", "ADPCM IMA AMV", "adpcm_ea_r1", "ADPCM Electronic Arts R1", "adpcm_ea_r3", "ADPCM Electronic Arts R3", "adpcm_ea_r2", "ADPCM Electronic Arts R2", "adpcm_ima_ea_sead", "ADPCM IMA Electronic Arts SEAD", "adpcm_ima_ea_eacs", "ADPCM IMA Electronic Arts EACS", "adpcm_ea_xas", "ADPCM Electronic Arts XAS", "adpcm_ea_maxis_xa", "ADPCM Electronic Arts Maxis CDROM XA", "adpcm_ima_iss", "ADPCM IMA Funcom ISS", "adpcm_g722", "G.722 ADPCM", "adpcm_ima_apc", "ADPCM IMA CRYO APC", "adpcm_afc", "ADPCM Nintendo Gamecube AFC", "adpcm_ima_oki", "ADPCM IMA Dialogic OKI", "adpcm_dtk", "ADPCM Nintendo Gamecube DTK", "adpcm_ima_rad", "ADPCM IMA Radical", "adpcm_g726le", "G.726 ADPCM little-endian", "adpcm_vima", "LucasArts VIMA audio", "adpcm_psx", "ADPCM Playstation", "adpcm_aica", "ADPCM Yamaha AICA", "adpcm_ima_dat4", "ADPCM IMA Eurocom DAT4", "amr_nb", "AMR-NB (Adaptive Multi-Rate NarrowBand)", "amr_wb", "AMR-WB (Adaptive Multi-Rate WideBand)", "ra_144", "RealAudio 1.0 (14.4K)", "ra_288", "RealAudio 2.0 (28.8K)", "roq_dpcm", "DPCM id RoQ", "interplay_dpcm", "DPCM Interplay", "xan_dpcm", "DPCM Xan", "sol_dpcm", "DPCM Sol", "sdx2_dpcm", "DPCM Squareroot-Delta-Exact", "MP2 (MPEG audio layer 2)", "ATSC A/52A (AC-3)", "DCA (DTS Coherent Acoustics)", "vorbis", "Vorbis", "dvaudio", "DV audio", "wmav1", "Windows Media Audio 1", "wmav2", "Windows Media Audio 2", "mace3", "MACE (Macintosh Audio Compression/Expansion) 3:1", "mace6", "MACE (Macintosh Audio Compression/Expansion) 6:1", "vmdaudio", "Sierra VMD audio", "flac", "FLAC (Free Lossless Audio Codec)", "mp3adu", "ADU (Application Data Unit) MP3 (MPEG audio layer 3)", "mp3on4", "MP3onMP4", "shorten", "Shorten", "alac", "ALAC (Apple Lossless Audio Codec)", "westwood_snd1", "Westwood Audio (SND1)", "qdm2", "QDesign Music Codec 2", "cook", "Cook / Cooker / Gecko (RealAudio G2)", "truespeech", "DSP Group TrueSpeech", "TTA (True Audio)", "smackaudio", "Smacker audio", "qcelp", "QCELP / PureVoice", "wavpack", "WavPack", "dsicinaudio", "Delphine Software International CIN audio", "IMC (Intel Music Coder)", "musepack7", "Musepack SV7", "MLP (Meridian Lossless Packing)", "gsm_ms", "GSM Microsoft variant", "atrac3", "ATRAC3 (Adaptive TRansform Acoustic Coding 3)", "voxware", "Voxware RT29 Metasound", "Monkey's Audio", "nellymoser", "Nellymoser Asao", "musepack8", "Musepack SV8", "speex", "Speex", "wmavoice", "Windows Media Audio Voice", "wmapro", "Windows Media Audio 9 Professional", "wmalossless", "Windows Media Audio Lossless", "atrac3p", "ATRAC3+ (Adaptive TRansform Acoustic Coding 3+)", "ATSC A/52B (AC-3, E-AC-3)", "sipr", "RealAudio SIPR / ACELP.NET", "MP1 (MPEG audio layer 1)", "twinvq", "VQF TwinVQ", "TrueHD", "mp4als", "MPEG-4 Audio Lossless Coding (ALS)", "atrac1", "ATRAC1 (Adaptive TRansform Acoustic Coding)", "binkaudio_rdft", "Bink Audio (RDFT)", "binkaudio_dct", "Bink Audio (DCT)", "aac_latm", "AAC LATM (Advanced Audio Coding LATM syntax)", "qdmc", "QDesign Music", "celt", "Constrained Energy Lapped Transform (CELT)", "g723_1", "G.723.1", "dss_sp", "Digital Speech Standard - Standard Play mode (DSS SP)", "g729", "G.729", "8svx_exp", "8SVX exponential", "8svx_fib", "8SVX fibonacci", "bmv_audio", "Discworld II BMV audio", "ralf", "RealAudio Lossless", "IAC (Indeo Audio Coder)", "ilbc", "iLBC (Internet Low Bitrate Codec)", "wavesynth", "Wave synthesis pseudo-codec", "sonic", "Sonic", "sonicls", "Sonic lossless", "opus", "Opus (Opus Interactive Audio Codec)", "comfortnoise", "RFC 3389 Comfort Noise", "TAK (Tom's lossless Audio Kompressor)", "metasound", "Voxware MetaSound", "paf_audio", "Amazing Studio Packed Animation File Audio", "On2 Audio for Video Codec", "evrc", "EVRC (Enhanced Variable Rate Codec)", "SMV (Selectable Mode Vocoder)", "4GV (Fourth Generation Vocoder)", "dsd_lsbf", "DSD (Direct Stream Digital), least significant bit first", "dsd_msbf", "DSD (Direct Stream Digital), most significant bit first", "dsd_lsbf_planar", "DSD (Direct Stream Digital), least significant bit first, planar", "dsd_msbf_planar", "DSD (Direct Stream Digital), most significant bit first, planar", "interplayacm", "Interplay ACM", "xma1", "Xbox Media Audio 1", "xma2", "Xbox Media Audio 2", "DST (Direct Stream Transfer)", "adpcm_mtaf", "ADPCM MTAF", "dvd_subtitle", "DVD subtitles", "dvb_subtitle", "DVB subtitles", "raw UTF-8 text", "xsub", "XSUB", "ASS (Advanced SSA) subtitle", "SSA (SubStation Alpha) subtitle", "mov_text", "MOV text", "hdmv_pgs_subtitle", "HDMV Presentation Graphic Stream subtitles", "dvb_teletext", "DVB teletext", "SubRip subtitle with embedded timing", "subrip", "SubRip subtitle", "microdvd", "MicroDVD subtitle", "mpl2", "MPL2 subtitle", "eia_608", "EIA-608 closed captions", "jacosub", "JACOsub subtitle", "PJS (Phoenix Japanimation Society) subtitle", "sami", "SAMI subtitle", "realtext", "RealText subtitle", "Spruce subtitle format", "subviewer1", "SubViewer v1 subtitle", "subviewer", "SubViewer subtitle", "vplayer", "VPlayer subtitle", "webvtt", "WebVTT subtitle", "hdmv_text_subtitle", "HDMV Text subtitle", "TrueType font", "application/x-truetype-font", "application/x-font", "bintext", "Binary text", "xbin", "eXtended BINary text", "iCEDraw text", "OpenType font", "application/vnd.ms-opentype", "SMPTE 336M Key-Length-Value (KLV) metadata", "dvd_nav_packet", "DVD Nav packet", "timed_id3", "timed ID3 metadata", "bin_data", "binary data", "scte_35", "SCTE 35 Message Queue", "h264_mp4toannexb", "The input looks like it is Annex B already\n", "Invalid extradata size: %d\n", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "SPS not present in the stream, nor in AVCC, stream may be unreadable\n", "PPS not present in the stream, nor in AVCC, stream may be unreadable\n", "AVC-parser: nal size %d remaining %d\n", "Q264", "pps_id %u out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "missing picture in access unit with size %d\n", "Invalid nal size %d\n", "Invalid UE golomb code\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count %d overflow\n", "illegal memory management control operation %d\n", "Truncating likely oversized SPS\n", "sps_id %u out of range\n", "chroma_format_idc %u", "separate color planes are not supported\n", "Different chroma and luma bit depth", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %d\n", "illegal POC type %d\n", "too many reference frames %d\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%d r:%d t:%d b:%d\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "Overread %s by %d bits\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %d/%d b%d reo:%d\n", "MB-AFF", "PIC-AFF", "Truncating likely oversized PPS (%zu > %zu)\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d\n", "FMO not supported\n", "reference overflow (pps)\n", "pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n", "CABAC", "CAVLC", "LPAR", "CONSTR", "REDU", "8x8DCT", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n", "Clipping illegal num_reorder_frames %d\n", "cpb_count %d invalid\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "Gray", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "SPS unavailable in decode_picture_timing\n", "ct_type:%X pic_struct:%d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "non-existing SPS %d referenced in buffering period\n", "Error resilience with slice threads is enabled. It is unsafe and unsupported and may crash. Use it at your own risk\n", "Reference not available for error concealing\n", "Reference invalid\n", "H264 Decoder", "is_avc", "is avc", "nal_length_size", "enable_er", "Enable error resilience on damaged frames (unsafe)", "buf_index <= buf_size", "src/libavcodec/h264dec.c", "no frame!\n", "Duplicating field %d to fill missing\n", "pict->buf[0] || !*got_frame", "stereo_mode", "Error splitting the input into NAL units.\n", "Invalid inter IDR frame\n", "invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n", "data partitioning", "SPS decoding failure, trying again with the complete NAL\n", "Unknown NAL code: %d (%d bits)\n", "decode_slice_header error\n", "Green Metadata Info SEI message\n", "  green_metadata_type: %d\n", "  green_metadata_period_type: %d\n", "  green_metadata_num_seconds: %d\n", "  green_metadata_num_pictures: %d\n", "  SEI GREEN Complexity Metrics: %f %f %f %f\n", "  xsd_metric_type: %d\n", "  xsd_metric_value: %f\n", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "no picture %s\n", "src/libavcodec/h264dsp.c", "apply_defdispwin", "Apply default display window from VUI", "strict-displaywin", "stricly apply default display window size", "Invalid NAL unit size in extradata.\n", "Decoding nal unit %d %d from hvcC failed\n", "Error parsing NAL unit #%d.\n", "First slice in a frame missing.\n", "Non-matching NAL types of the VCL NALUs: %d %d\n", "Error constructing the reference lists for the current slice.\n", "Skipping NAL unit %d\n", "PPS id out of range: %d\n", "PPS changed between slices.\n", "Invalid slice segment address: %u.\n", "Unknown slice type: %d.\n", "Inter slices in an IRAP frame.\n", "Ignoring POC change between slices: %d -> %d\n", "No ref lists in the SPS.\n", "Invalid long term RPS.\n", "Too many refs: %d/%d.\n", "Zero refs for a frame with P or B slices.\n", "Invalid collocated_ref_idx: %d.\n", "Invalid number of merging MVP candidates: %d.\n", "Independent slice segment missing.\n", "num_entry_point_offsets %d is invalid\n", "offset_len %d is invalid\n", "Failed to allocate memory\n", "too many slice_header_extension_data_bytes\n", "The slice_qp %d is outside the valid range [%d, 51].\n", "Impossible slice segment.\n", "Overread slice header by %d bits\n", "luma_log2_weight_denom %d is invalid\n", "Error constructing the frame RPS.\n", "Mastering Display Metadata:\n", "r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f)\n", "WPP ctb addresses are wrong (%d %d %d %d)\n", "entry_point_offset table is corrupted\n", "The cu_qp_delta %d is outside the valid range [%d, %d].\n", "cu_chroma_qp_offset_idx not yet tested.\n", "Impossible initial tile.\n", "Previous slice segment missing\n", "hardware accelerator failed to decode picture\n", "Decoded frame with POC %d.\n", "Verifying checksum for frame with POC %d: ", "plane %d - correct ", "mismatching checksum of plane %d - ", " != ", "(-39@H", "Invalid NAL unit type in extradata: %d\n", "No parameter sets in the extradata\n", "SPS id out of range: %d\n", "missing picture in access unit\n", "Invalid value of delta_idx in slice header RPS: %d > %d.\n", "Invalid value of abs_delta_rps: %d\n", "Too many refs in a short term RPS.\n", "Decoding VPS\n", "Truncating likely oversized VPS (%td > %zu)\n", "vps_reserved_three_2bits is not three\n", "vps_reserved_ffff_16bits is not 0xffff\n", "vps_max_sub_layers out of range: %d\n", "vps_max_dec_pic_buffering_minus1 out of range: %d\n", "vps_max_num_reorder_pics out of range: %d\n", "too many layer_id_included_flags\n", "vps_num_hrd_parameters %d is invalid\n", "Overread VPS by %d bits\n", "VPS %d does not exist\n", "sps_max_sub_layers out of range: %d\n", "chroma_format_idc %d is invalid\n", "discarding sps conformance window, original values are l:%u r:%u t:%u b:%u\n", "Luma bit depth (%d) is different from chroma bit depth (%d), this is unsupported.\n", "log2_max_pic_order_cnt_lsb_minus4 out range: %d\n", "sps_max_dec_pic_buffering_minus1 out of range: %d\n", "sps_max_num_reorder_pics out of range: %d\n", "Invalid value %d for log2_min_cb_size", "Invalid value %d for log2_diff_max_min_coding_block_size", "Invalid value for log2_min_tb_size", "Invalid value %d for log2_diff_max_min_transform_block_size", "PCM bit depth (%d) is greater than normal bit depth (%d)\n", "Too many short term RPS: %d.\n", "num_long_term_ref_pics_sps %d is out of range.\n", "extended_precision_processing_flag not yet implemented\n", "high_precision_offsets_enabled_flag not yet implemented\n", "cabac_bypass_alignment_enabled_flag not yet implemented\n", "Reducing left output window to %d chroma samples to preserve alignment.\n", "Invalid visible frame dimensions: %dx%d.\n", "Displaying the whole video surface.\n", "CTB size out of range: 2^%d\n", "log2_ctb_size %d differs from the bounds of any known profile\n", "log2_ctb_size %d", "Invalid coded frame dimensions.\n", "max_transform_hierarchy_depth_inter out of range: %d\n", "max_transform_hierarchy_depth_intra out of range: %d\n", "max transform block size out of range: %d\n", "Overread SPS by %d bits\n", "Decoding SPS\n", "Truncating likely oversized SPS (%td > %zu)\n", "Parsed SPS: id %d; coded wxh: %dx%d; cropped wxh: %dx%d; pix_fmt: %s.\n", "Decoding PPS\n", "Truncating likely oversized PPS (%td > %zu)\n", "SPS %u does not exist.\n", "diff_cu_qp_delta_depth %d is invalid\n", "pps_cb_qp_offset out of range: %d\n", "pps_cr_qp_offset out of range: %d\n", "num_tile_columns_minus1 out of range: %d\n", "num_tile_rows_minus1 out of range: %d\n", "Invalid tile widths.\n", "Invalid tile heights.\n", "pps_beta_offset_div2 out of range: %d\n", "pps_tc_offset_div2 out of range: %d\n", "log2_parallel_merge_level_minus2 out of range: %d\n", "Overread PPS by %d bits\n", "PTL information too short\n", "PTL information for sublayer %i too short\n", "Not enough data for sublayer %i level_idc\n", "Main profile bitstream\n", "Main 10 profile bitstream\n", "Main Still Picture profile bitstream\n", "Range Extension profile bitstream\n", "Unknown HEVC profile: %d\n", "nb_cpb %d invalid\n", "4:2:0, 4:2:2, 4:4:4 supports are currently specified for 8, 10 and 12 bits.\n", "chroma_format_idc is %d, depth is %d", "Invalid delta in scaling list data: %d.\n", "Decoding VUI\n", "Unknown SAR index: %u.\n", "Invalid default display window\n", "discarding vui default display window, original values are l:%u r:%u t:%u b:%u\n", "Strange VUI timing information, retrying...\n", "Retry got %i/%i fps\n", "!(s->sps_list[id] && s->sps == (HEVCSPS*)s->sps_list[id]->data)", "src/libavcodec/hevc_ps.c", "chroma_qp_offset_list_len_minus1 shall be in the range [0, 5].\n", "cb_qp_offset_list not tested yet.\n", "Duplicate POC in a sequence: %d.\n", "Output frame with POC %d.\n", "Zero refs in the frame RPS.\n", "Invalid reference index.\n", "!frame->hwaccel_picture_private", "src/libavcodec/hevc_refs.c", "Error allocating frame, DPB full.\n", "Could not find ref with POC %d\n", "Decoding SEI\n", "Skipped PREFIX SEI %d\n", "BOTTOM Field\n", "TOP Field\n", "num_sps_ids_minus1 %d invalid\n", "active_parameter_set_id %d invalid\n", "Skipped SUFFIX SEI %d\n", "libfdk-aac decoder", "conceal", "Error concealment method", "spectral", "Spectral muting", "Noise Substitution", "energy", "Energy Interpolation", "drc_boost", "Dynamic Range Control: boost, where [0] is none and [127] is max boost", "drc_cut", "Dynamic Range Control: attenuation factor, where [0] is none and [127] is max compression", "drc_level", "Dynamic Range Control: reference level, quantized to 0.25dB steps where [0] is 0dB and [127] is -31.75dB", "drc_heavy", "Dynamic Range Control: heavy compression, where [1] is on (RF mode) and [0] is off", "level_limit", "Signal level limiting", "Error opening decoder\n", "Unable to set extradata\n", "Unable to set error concealment method\n", "Invalid request_channel_layout\n", "Unable to set output channels in the decoder\n", "Unable to allocate ancillary buffer for the decoder\n", "Unable to register downmix ancillary buffer in the decoder\n", "Unable to set DRC boost factor in the decoder\n", "Unable to set DRC attenuation factor in the decoder\n", "Unable to set DRC reference level in the decoder\n", "Unable to set DRC heavy compression in the decoder\n", "Unable to set in signal level limiting in the decoder\n", "aacDecoder_Fill() failed: %x\n", "aacDecoder_DecodeFrame() failed: %x\n", "Unable to get stream info\n", "Stream info not initialized\n", "unknown channel type\n", "%d channels - front:%d side:%d back:%d lfe:%d top:%d\n", "unsupported number of front channels: %d\n", "unsupported number of side channels: %d\n", "unsupported number of back channels: %d\n", "unsupported number of LFE channels: %d\n", "unsupported channel configuration\n", "failed to clear buffer when flushing\n", "afterburner", "Afterburner (improved quality)", "eld_sbr", "Enable SBR for ELD (for SBR in other configurations, use the -profile parameter)", "SBR/PS signaling style", "Choose signaling implicitly (explicit hierarchical by default, implicit if global header is disabled)", "implicit", "Implicit backwards compatible signaling", "explicit_sbr", "Explicit SBR, implicit PS signaling", "explicit_hierarchical", "Explicit hierarchical signaling", "Output LATM/LOAS encapsulated data", "header_period", "StreamMuxConfig and PCE repetition period (in frames)", "VBR mode (1-5)", "HE-AAC", "HE-AACv2", "Unable to open the encoder: %s\n", "Unable to set the AOT %d: %s\n", "Unable to enable SBR for ELD: %s\n", "Unable to set the sample rate %d: %s\n", "Unsupported number of channels %d\n", "Unable to set channel mode %d: %s\n", "Unable to set wav channel order %d: %s\n", "VBR quality %d out of range, should be 1-5\n", "Note, the VBR setting is unsupported and only works with some parameter combinations\n", "Unable to set the VBR bitrate mode %d: %s\n", "Unable to set the bitrate %ld: %s\n", "Unable to set the transmux format: %s\n", "Unable to set header period: %s\n", "Unable to set signaling mode %d: %s\n", "Unable to set afterburner to %d: %s\n", "cutoff valid range is %d-20000\n", "Unable to set the encoder bandwidth to %d: %s\n", "Unable to initialize the encoder: %s\n", "Unable to get encoder info: %s\n", "Invalid handle", "Memory allocation error", "Unsupported parameter", "Invalid config", "Initialization error", "AAC library initialization error", "SBR library initialization error", "Transport library initialization error", "Metadata library initialization error", "Encoding error", "End of file", "Unable to encode frame: %s\n", "libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10", "Set the encoding preset (cf. x264 --fullhelp)", "medium", "Tune the encoding params (cf. x264 --fullhelp)", "Set profile restrictions (cf. x264 --fullhelp) ", "fastfirstpass", "Use fast settings when encoding first pass", "Specify level (as defined by Annex A)", "passlogfile", "Filename for 2 pass stats", "wpredp", "Weighted prediction for P-frames", "a53cc", "Use A53 Closed Captions (if available)", "x264opts", "x264 options", "Select the quality for constant quality mode", "crf_max", "In CRF mode, prevents VBV from lowering quality beyond this point.", "Constant quantization parameter rate control method", "AQ method", "aq_mode", "Variance AQ (complexity mask)", "Auto-variance AQ", "autovariance-biased", "Auto-variance AQ with bias to dark scenes", "AQ strength. Reduces blocking and blurring in flat and textured areas.", "Use psychovisual optimizations.", "psy-rd", "Strength of psychovisual optimization, in <psy-rd>:<psy-trellis> format.", "rc-lookahead", "Number of frames to look ahead for frametype and ratecontrol", "weightb", "Weighted prediction for B-frames.", "Weighted prediction analysis method.", "simple", "smart", "ssim", "Calculate and print SSIM stats.", "intra-refresh", "Use Periodic Intra Refresh instead of IDR frames.", "bluray-compat", "Bluray compatibility workarounds.", "b-bias", "Influences how often B-frames are used", "b-pyramid", "Keep some B-frames as references.", "b_pyramid", "Strictly hierarchical pyramid", "Non-strict (not Blu-ray compatible)", "mixed-refs", "One reference per partition, as opposed to one reference per macroblock", "8x8dct", "High profile 8x8 transform.", "fast-pskip", "Use access unit delimiters.", "mbtree", "Use macroblock tree ratecontrol.", "deblock", "Loop filter parameters, in <alpha:beta> form.", "cplxblur", "Reduce fluctuations in QP (before curve compression)", "partitions", "A comma-separated list of partitions to consider. Possible values: p8x8, p4x4, b8x8, i8x8, i4x4, none, all", "direct-pred", "Direct MV prediction mode", "spatial", "temporal", "slice-max-size", "Limit the size of each slice in bytes", "nal-hrd", "Signal HRD information (requires vbv-bufsize; cbr not allowed in .mp4)", "avcintra-class", "AVC-Intra class 50/100/200", "motion-est", "Set motion estimation method", "tesa", "forced-idr", "If forcing keyframes, force them as IDR frames.", "Coder type", "cavlc", "cabac", "b_strategy", "Strategy to choose between I/P/B-frames", "chromaoffset", "QP difference between chroma and luma", "Scene change threshold", "noise_reduction", "Noise reduction", "Override the x264 configuration using a :-separated list of key=value parameters", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "trellis", "me_range", "me_method", "subq", "keyint_min", "thread_type", "+cgop", "rc_init_occupancy", "-qscale is ignored, -crf is recommended.\n", "Error setting preset/tune %s/%s.\n", "Possible presets:", "Possible tunes:", "Error parsing option '%s' with value '%s'.\n", "Failed to parse level\n", "baseline", "high", "high10", "high422", "high444", "Error setting profile %s.\n", "Possible profiles:", "%4095[^:=]=%4095[^:]", "bad option '%s': '%s'\n", "bad value for '%s': '%s'\n", "Error parsing option '%s = %s'.\n", "ultrafast", "veryfast", "faster", "slower", "veryslow", "placebo", "animation", "grain", "stillimage", "psnr", "fastdecode", "Not enough memory for closed captions, skipping\n", "Ignoring unsupported inverted stereo value %d\n", "Error: nal buffer is too small\n", "dest->subtitle_header_size == src->subtitle_header_size", "src/libavcodec/options.c", "AVCodecContext", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "use 1/4-pel motion compensation", "use loop filter", "use fixed qscale", "use gmc", "always try a mb with mv=<0,0>", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "error[?] variables will be set during encoding", "Input bitstream might be randomly truncated", "normalize adaptive quantization", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "closed GOP", "output_corrupt", "Output even potentially corrupted frames", "allow non-spec-compliant speedup tricks", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "export_mvs", "export motion vectors through frame side data", "skip_manual", "do not skip samples and export skip information as frame side data", "ass_ro_flush_noop", "do not reset ASS ReadOrder field on flush", "set motion estimation method", "zero motion estimation (fastest)", "full motion estimation (slowest)", "epzs", "EPZS motion estimation", "esa motion estimation (alias for full)", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter motion estimation", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "set cutoff bandwidth", "frame_size", "frame_number", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "video quantizer scale blur (VBR)", "minimum video quantizer scale (VBR)", "maximum video quantizer scale (VBR)", "maximum difference between the quantizer scales (VBR)", "set maximum number of B-frames between non-B-frames", "QP factor between P- and B-frames", "rc_strategy", "ratecontrol method", "strategy to choose between I/P/B-frames", "RTP payload size in bytes", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "work around not autodetected encoder bugs", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "mpeg_quant", "use MPEG quantizers instead of H.263", "qsquish", "deprecated, use encoder private options instead", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "maximum bitrate (in bits/s). Used for VBV together with bufsize.", "minrate", "minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "set ratecontrol buffer size (in bits)", "rc_buf_aggressivity", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "rc_init_cplx", "DCT algorithm", "autoselect a good one", "fastint", "fast integer", "accurate integer", "altivec", "faan", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "select IDCT implementation", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "deprecated, for compatibility only", "faani", "floating point AAN IDCT", "simpleauto", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "use strong deblock filter for damaged MBs", "favor_inter", "favor predicting from the previous frame", "bits_per_coded_sample", "prediction method", "plane", "median", "aspect", "sample aspect ratio", "picture info", "rate control", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "green_metadata", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "picture buffer allocations", "thread_ops", "threading operations", "nomc", "skip motion compensation", "vismv", "visualize motion vectors (MVs) (deprecated)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "cmp_func", "subcmp", "sub-pel ME compare function", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "pre motion estimation", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast", "sum of squared errors", "satd", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "vsad", "sum of absolute vertical differences", "vsse", "sum of squared vertical differences", "nsse", "noise preserving sum of squared differences", "dctmax", "msad", "sum of absolute differences, median predicted", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "sub-pel motion estimation quality", "dtg_active_format", "limit motion vectors range (1023 for DivX player)", "ibias", "intra quant bias", "pbias", "inter quant bias", "global_quality", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate-based coder", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp", "use fewest bits", "use best rate distortion", "stream_codec_tag", "scene change threshold", "noise reduction", "number of bits which should be loaded into the rc buffer before decoding starts", "set the number of threads", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "aac_main", "aac_ssr", "aac_ltp", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "skip_threshold", "frame skip threshold", "skip_factor", "frame skip factor", "skip_exp", "frame skip exponent", "skipcmp", "frame skip compare function", "border_mask", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "mepc", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "discard no frame", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "nointra", "discard all frames except I frames", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "brd_scale", "downscale frames for dynamic B-frame decision", "minimum interval between IDR-frames", "reference frames to consider for motion compensation", "chroma QP offset from luma", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "b_sensitivity", "adjust sensitivity of b_frame_strategy 1", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "color_primaries", "color primaries", "color_primaries_type", "bt709", "BT.709", "bt470m", "BT.470 M", "bt470bg", "BT.470 BG", "smpte170m", "SMPTE 170 M", "smpte240m", "SMPTE 240 M", "Film", "bt2020", "BT.2020", "smpte428_1", "SMPTE ST 428-1", "smpte431", "SMPTE 431-2", "smpte432", "SMPTE 422-1", "color_trc", "color transfer characteristics", "color_trc_type", "gamma22", "gamma28", "log_sqrt", "Log square root", "iec61966_2_4", "IEC 61966-2-4", "bt1361", "BT.1361", "iec61966_2_1", "IEC 61966-2-1", "bt2020_10bit", "BT.2020 - 10 bit", "bt2020_12bit", "BT.2020 - 12 bit", "smpte2084", "SMPTE ST 2084", "arib-std-b67", "ARIB STD-B67", "colorspace", "color space", "colorspace_type", "ycocg", "YCOCG", "bt2020_ncl", "BT.2020 NCL", "bt2020_cl", "BT.2020 CL", "smpte2085", "SMPTE 2085", "color_range", "color range", "color_range_type", "MPEG (219*2^(n-8))", "JPEG (2^n-1)", "chroma_sample_location", "chroma sample location", "chroma_sample_location_type", "Left", "Center", "topleft", "Top-left", "bottomleft", "Bottom-left", "Bottom", "log_level_offset", "set the log level offset", "slices", "set the number of slices, used in parallelized encoding", "select multithreading type", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Dialogue", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "sub_text_format", "set decoded text subtitle format", "ass_with_timings", "side_data_only_packets", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "set pixel format", "video_size", "set video size", "AVFrame", "best_effort_timestamp", "pkt_pos", "sample_aspect_ratio", "AVSubtitleRect", "forced", "Opus", "in_sample_fmt", "out_sample_fmt", "in_channel_layout", "out_channel_layout", "out_sample_rate", "filter_size", "Error parsing the packet header.\n", "Mismatching coded sample count in substream %d.\n", "Error flushing the resampler.\n", "Error decoding an Opus frame.\n", "Wrong number of flushed samples: %d\n", "Wrong number of CELT delay samples.\n", "Error decoding a SILK frame.\n", "Error resampling SILK data.\n", "Invalid redundancy frame size.\n", "Spurious CELT delay samples present.\n", "Error opening the resampler.\n", "Error feeding initial silence to the resampler.\n", "Error decoding the redundancy frame.\n", "index > -0x20000000", "src/libavcodec/parser.c", "Failed to reallocate parser buffer to %d\n", "Main", "DTS-ES", "DTS 96/24", "DTS-HD HRA", "DTS-HD MA", "DTS Express", "DNXHD", "DNXHR LB", "DNXHR SQ", "DNXHR HQ", "DNXHR HQX", "DNXHR 444", "Constrained Baseline", "Extended", "High 10", "High 10 Intra", "High 4:2:2", "High 4:2:2 Intra", "High 4:4:4", "High 4:4:4 Predictive", "High 4:4:4 Intra", "CAVLC 4:4:4", "Multiview High", "Stereo High", "Main 10", "Main Still Picture", "Rext", "JPEG 2000 codestream restriction 0", "JPEG 2000 codestream restriction 1", "JPEG 2000 no codestream restrictions", "JPEG 2000 digital cinema 2K", "JPEG 2000 digital cinema 4K", "Spatially Scalable", "SNR Scalable", "Simple", "Reserved", "Simple Scalable Profile", "Main Profile", "N-bit Profile", "Simple Face Animation Profile", "Basic Animated Texture Profile", "Hybrid Profile", "Advanced Real Time Simple Profile", "Code Scalable Profile", "Advanced Coding Profile", "Advanced Core Profile", "Advanced Scalable Texture Profile", "Simple Studio Profile", "Advanced Simple Profile", "Complex", "Advanced", "Profile 0", "Profile 1", "Profile 2", "Profile 3", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "Final thread update failed\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "src/libavcodec/pthread_frame.c", "A frame threaded decoder did not free the frame on failure. This is a bug, please report it.\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "p->thread_count == avctx->thread_count", "src/libavcodec/pthread_slice.c", "I420", "IYUV", "yv12", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "YUYVw", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "\fRGBt", "RBA@v", "BRA@s", "@RBAu", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "0BGR ", "Y3\u000b\tE", "\t\u000b3YP", "Y3\n\tO", "\t\n3YL", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "XYZ$o", "DVOO.", "L555,", "L565+", "b16g)", "b48rs", "I422!", "I444\f", "J420\r", "J422\"", "J444Z", "YUVA#", "I40AY", "RGB2.", "RV15,", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "I4AB:", "I4FL;", "I4FB,", "Failed to set dimensions %d %d\n", "ignoring invalid SAR: %d/%d\n", "desc->flags & (1 << 4)", "src/libavcodec/utils.c", "ignoring invalid SAR: %u/%u\n", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "reget_buffer() failed\n", "n >= 1", "Format returned from get_buffer() does not match the format of provided AVHWFramesContext\n", "choices[n] != AV_PIX_FMT_NONE", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Codec (%s) not on whitelist '%s'\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The 'vismv' option is deprecated, see the codecview filter instead.\n", "The encoder timebase is not set.\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Specified sample rate %d is not supported\n", "Channel layout not specified\n", "Specified channel layout '%s' is not supported\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "Specified number of channels %d is not supported\n", "Specified bit depth %d not possible with the specified pixel formats depth %d\n", "Bitrate %ld is extremely low, maybe you mean %ldk\n", "ticks_per_frame %d too large for the timebase %d/%d.", "Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n", "gray decoding requested but not enabled at configuration time\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "*(const AVClass **)avctx->priv_data == codec->priv_class", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %ld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %ld)\n", "Failed to allocate packet of size %ld\n", "This encoder requires using the avcodec_send_frame() API.\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "avctx->codec->encode2", "Provided packet is too small, needs to be %d\n", "AVFrame.format is not set\n", "AVFrame.width or height is not set\n", "ret <= 0", "start_display_time must be 0.\n", "Invalid media type for video\n", "This decoder requires using the avcodec_send_packet() API.\n", "!picture->extended_data || picture->extended_data == picture->data", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "ret <= tmp.size", "skip %d / discard %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "ret <= avpkt->size", "Multiple frames in a packet.\n", "Invalid media type for subtitles\n", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "Codec 0x%x is not in the full list.\n", "unknown_codec", "[%d]", ", %d reference frame%s", " (%s / 0x%04X)", "%d bpc, ", "%s/%s/%s, ", "top first", "bottom first", "top coded first (swapped)", "bottom coded first (swapped)", " (%dx%d)", " [SAR %d:%d DAR %d:%d]", ", q=%d-%d", ", Closed Captions", ", lossless", "%d Hz, ", " (%d bit)", ", delay %d", ", padding %d", ", %dx%d", ", pass 1", ", pass 2", ", %ld kb/s", ", max. %ld kb/s", "libavcodec license: nonfree and unredistributable", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n", "Insufficient thread locking. At least %d threads are calling avcodec_open2() at the same time right now.\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "!dst->progress", "p <= end", "val || !min_size", "src/libavutil/mem_internal.h", "pic->data[*]!=NULL in avcodec_default_get_buffer\n", "Unable to get pixel format descriptor for format %s\n", "default_get_buffer called on pic %p\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "video_get_buffer: image parameters invalid\n", "pic->data[*]!=NULL in get_buffer_internal\n", "frame->data[i]", "Buffer returned by get_buffer2() did not zero unused plane pointers\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "Hardware accelerated decoding with frame threading is known to be unstable and its use is discouraged.\n", "Could not find an AVHWAccel for the pixel format: %s", "Ignoring experimental hwaccel: %s\n", "This decoder does not support parameter changes, but PARAM_CHANGE side data was sent to it.\n", "Invalid channel count", "Invalid sample rate", "PARAM_CHANGE side data too small.\n", "Error applying parameter changes.\n", "requesting subtitles recoding without iconv", "Dialogue: ", "Dialogue: %ld,", "9:59:59.99,", "%d:%02d:%02d.%02d,", "!avctx->internal->buffer_frame->buf[0]", "!avctx->internal->buffer_pkt->data || avctx->internal->buffer_pkt->buf", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "Input packet too small\n", "@AAC decoder", "dual_mono_mode", "Select the channel to decode for dual mono", "autoselection", "Select Main/Left channel", "Select Sub/Right channel", "Select both channels", "Too many channels\n", "Audio specific config size is invalid\n", "invalid sampling rate index %d\n", "invalid low delay sampling rate index %d\n", "Audio object type %s%d", "SBR+", "960/120 MDCT window", "AAC data resilience (flags %x)", "epConfig %d", "Sample rate index in program config element does not match the sample rate index configured by the container.\n", "decode_pce: Input buffer exhausted before END element found\n", "Low Delay SBR", "invalid default channel configuration (%d)\n", "Assuming an incorrectly encoded 7.1 channel layout instead of a spec-compliant 7.1(wide) layout, use -strict %d to decode according to the specification instead.\n", "Remapped id too large\n", "Unknown ER channel configuration %d", "channel element %d.%d is not allocated\n", "no frame data found\n", "mono with CPE\n", "stereo with SCE\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to LFE[0]\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to SCE[1]\n", "Pulse tool not allowed in eight short sequence.\n", "Pulse data corrupt or invalid.\n", "Reserved bit set.\n", "AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found.\n", "Prediction is not allowed in AAC-LC.\n", "LTP in ER AAC LD not yet implemented.\n", "Number of scalefactor bands in group (%d) exceeds limit (%d).\n", "Invalid Predictor Reset Group.\n", "invalid band type\n", "decode_band_types: Input buffer exhausted before END element found\n", "Number of bands (%d) exceeds limit (%d).\n", "If you heard an audible artifact, there may be a bug in the decoder. Clipped intensity stereo position (%d -> %d)", "If you heard an audible artifact, there may be a bug in the decoder. Clipped noise gain (%d -> %d)", "Scalefactor (%d) out of range.\n", "TNS filter order %d is greater than maximum %d.\n", "error in spectral data, ESC overflow\n", "ms_present = 3 is reserved.\n", "ChannelElement %d.%d missing \n", "Dependent coupling is not supported together with LTP\n", "Error decoding AAC frame header.\n", "Elem type:%x id:%x\n", "Not evaluating a further program_config_element as this construct is dubious at best.\n", "TYPE_FIL: Input buffer exhausted before END element found\n", "More than one AAC RDB per ADTS frame", "skip_data_stream_element: Input buffer exhausted before END element found\n", "extension type: %d len:%d\n", "SBR was found before the first channel element.\n", "SBR signaled to be not-present but was found in the bitstream.\n", "Implicit SBR was found with a first occurrence after the first frame.\n", "FILL:%s\n", "libfaac %d.%d", "ADTS header detected, probably as result of configuration misparsing\n", "no decoder config found\n", "incomplete frame\n", "frame length mismatch %d << %d\n", "Multiple programs", "Multiple layers", "Non-byte-aligned audio-specific config", "audio config changed\n", "initializing latmctx\n", "element type mismatch %d != %d\n", "No quantized data read for sbr_dequant.\n", "sbr->data[ch].bs_num_env > 0", "src/libavcodec/aacsbr_template.c", "SBR reset failed. Switching SBR to pure upsampling mode.\n", "Unsupported sample rate for SBR: %d\n", "Invalid bs_stop_freq: %d\n", "Invalid bitstream, too many QMF subbands: %d\n", "Invalid num_bands_0: %d\n", "Invalid vDk0[%d]: %d\n", "Invalid vDk1[%d]: %d\n", "Invalid n_master: %d\n", "Invalid bitstream, crossover band index beyond array bounds: %d\n", "Stop frequency border too high: %d\n", "Start frequency border too high: %d\n", "Too many noise floor scale factors: %d\n", "patch construction failed\n", "Too many patches: %d\n", "Invalid bitstream - cannot apply SBR to element type %d\n", "SBR Extension over read.\n", "Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n", "Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n", "bs_pointer >= 0", "Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n", "Not strictly monotone time borders\n", "env_facs_q %d is invalid\n", "noise_facs_q %d is invalid\n", "Parametric Stereo signaled to be not-present but was found in the bitstream.\n", "Reserved SBR extensions", "envelope scalefactor overflow in dequant\n", "temp1 <= 1E20", "src/libavcodec/aacsbr.c", "ERROR : no subband found for frequency %d\n", "kx != f_table{high,low}[0]. Derived frequency tables were not regenerated.\n", "))/113//+++((", "Queue input is backward in time\n", "Trying to remove %d samples, but the queue is empty\n", "!afq->frame_count", "src/libavcodec/audio_frame_queue.c", "afq->remaining_samples == afq->remaining_delay", "Trying to remove %d more samples than there are in the queue\n", "src/libavcodec/bitstream.c", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code %x for %d in init_vlc\n", "needed %d had %d\n", "n <= s->buf_end - s->buf_ptr", "incorrect codes\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "src/libavcodec/error_resilience.c", "s->quarter_sample", "guess_dc() is out of memory\n", "Forcing thread count to 1 for MJPEG encoding, use -thread_type slice or a constant quantizer if you want to use multiple cpu cores\n", "MJPEG CBR encoding works badly with frame multi-threading, consider using -threads 1, -thread_type slice or a constant quantizer.\n", "non_deterministic", "Forcing thread count to 1 for huffyuv encoding with first pass or context 1\n", "!avctx->internal->frame_thread_encoder", "src/libavcodec/frame_thread_encoder.c", "!thread_avctx->internal->frame_thread_encoder", "ff_frame_thread_encoder_init failed\n", "nal->skipped_bytes_pos_size >= nal->skipped_bytes", "src/libavcodec/h2645_parse.c", "Exceeded next NALFF position, re-syncing.\n", "No start code is found.\n", "NALFF: Consumed only %d bytes instead of %d\n", "Invalid NAL unit %d, skipping.\n", "nal_unit_type: %d(%s), nuh_layer_id: %d, temporal_id: %d\n", "TRAIL_N", "TRAIL_R", "STSA_N", "STSA_R", "RADL_N", "RADL_R", "RASL_N", "RASL_R", "BLA_W_LP", "BLA_W_RADL", "BLA_N_LP", "IDR_W_RADL", "IDR_N_LP", "CRA_NUT", "EOS_NUT", "EOB_NUT", "FD_NUT", "SEI_PREFIX", "SEI_SUFFIX", "nal_unit_type: %d, nal_ref_idc: %d\n", "Not enough data for an intra PCM block.\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "gray chroma\n", "dquant out of range (%d) at %d %d\n", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "co located POCs unavailable\n", "(Pluma_log2_weight_denom %d is out of range\n", "chroma_log2_weight_denom %d is out of range\n", "top block unavailable for requested intra mode %d\n", "left block unavailable for requested intra4x4 mode %d\n", "out of range intra chroma pred mode\n", "top block unavailable for requested intra mode\n", "left block unavailable for requested intra mode\n", "reference overflow %u > %u or %u > %u\n", "avcC %d too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "SPS decoding failure, trying again after escaping the NAL\n", "Ignoring NAL type %d in extradata\n", "src/libavcodec/h264_picture.c", "src->f->buf[0]", "long_term_pic_idx overflow\n", "src/libavcodec/h264_refs.c", "reference picture missing during reorder\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(sl->ref_list[list][index].parent->f->buf[0]) > 0", "reference count overflow\n", "illegal modification_of_pic_nums_idc %u\n", "no mmco here\n", "mmco:%d %d %d\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to short and long at the same time\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "illegal short term buffer state detected\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "illegal long ref in memory management control operation %d\n", "short term list:\n", "%u fn:%d poc:%d %p\n", "long term list:\n", "len <= 32", "Discarding mismatching reference\n", "index < def_len", "%d %d %p\n", "remove short %d count %d\n", "h264_slice_header_init() failed", "Too many fields\n", "Cannot decode multiple access units as slice threads\n", "Broken frame packetizing\n", "sl == h->slice_ctx", "src/libavcodec/h264_slice.c", "PPS changed between slices\n", "SPS changed in the middle of the frame\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on slice %d\n", "Invalid mix of IDR and non-IDR slices\n", "first_mb_in_slice overflow\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", " fix", " IDR", "SPAT", "context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height", "Could not allocate memory\n", "VDPAU decoding does not support video colorspace.\n", "Unsupported bit depth %d\n", "context_init() failed.\n", "!h->setup_finished", "slice type %d too large at %d\n", "A non-intra slice in an IDR NAL unit.\n", "Frame num change from %d to %d\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "cabac_init_idc %u overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "h->cur_pic_ptr", "h->cur_pic_ptr->f->buf[0]", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "changing width %d -> %d / height %d -> %d on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "sps->crop_right + sps->crop_left < (unsigned)h->width", "sps->crop_top + sps->crop_bottom < (unsigned)h->height", "Attempt to start a frame outside SETUP state\n", "no frame buffer available\n", "!pic->f->data[0]", "!pic->hwaccel_picture_private", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3)", "Slice overlaps with next at %d\n", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream %td\n", "error while decoding MB %d %d\n", "src/libavcodec/kbdwin.c", "Multichannel configuration without extradata.\n", "Extradata version %d", "Zero channel count specified in the extradata\n", "Channel mapping 0 is only specified for up to 2 channels\n", "Invalid stream/stereo stream count: %d/%d\n", "Channel mapping 1 is only specified for up to 8 channels\n", "Channel mapping 2 is only specified for channel counts which can be written as (n + 1)^2 for nonnegative integer n\n", "Mapping type %d", "Invalid channel map for output channel %d: %d\n", "p@Invalid number of coded channels: %d\n", "Invalid start/end band: %d %d\n", "Invalid CELT frame size: %d\n", "Invalid number of output channels: %d\n", "LBRR frames present; this is unsupported\n", "icc_mode %d is reserved.\n", "ps extension overflow %d\n", "iid_par invalid\n", "icc_par invalid\n", "Expected to read %d PS bits actually read %d.\n", "illegal iid\n", "illegal icc\n", "cabac decode of qscale diff failed at %d %d\n", "overflow in decode_cabac_mb_mvd\n", "(knN", "x264_2pass.log", "invalid profile: %s\n", "%s profile doesn't support lossless\n", "%s profile doesn't support 4:4:4\n", "%s profile doesn't support 4:2:2\n", "baseline profile doesn't support interlacing\n", "baseline profile doesn't support fake interlacing\n", "lookahead-threads", "sliced-threads", "sync-lookahead", "n-deterministic", "cpu-independent", "level-idc", "overscan", "videoformat", "fullrange", "colorprim", "colormatrix", "chromaloc", "frameref", "dpb-size", "min-keyint", "keyint-min", "scenecut", "bframes", "b-adapt", "open-gop", "slice-max-mbs", "slice-min-mbs", "slices-max", "cabac-idc", "constrained-intra", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "dump-yuv", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "weight-b", "chroma-qp-offset", "merange", "me-range", "mvrange", "mv-range", "mvrange-thread", "mv-range-thread", "subme", "%f:%f", "%f,%f", "%f|%f", "chroma-me", "dct-decimate", "deadzone-inter", "deadzone-intra", "qp_constant", "crf-max", "qpmin", "qp-min", "qpmax", "qp-max", "qpstep", "qp-step", "ratetol", "vbv-maxrate", "vbv-bufsize", "vbv-init", "ipratio", "ip-factor", "pbratio", "pb-factor", "cplx-blur", "crop-rect", "sps-id", "global-header", "repeat-headers", "force-cfr", "filler", "pic-struct", "fake-interlaced", "frame-packing", "stitchable", "opencl", "opencl-clbin", "opencl-device", "malloc of size %d failed\n", "%dx%d ", "fps=%u/%u ", "timebase=%u/%u ", "bitdepth=%d ", "opencl=%d ", "cabac=%d", " ref=%d", " deblock=%d:%d:%d", " analyse=%#x:%#x", " me=%s", " subme=%d", " psy=%d", " psy_rd=%.2f:%.2f", " mixed_ref=%d", " me_range=%d", " chroma_me=%d", " trellis=%d", " 8x8dct=%d", " cqm=%d", " deadzone=%d,%d", " fast_pskip=%d", " chroma_qp_offset=%d", " threads=%d", " lookahead_threads=%d", " sliced_threads=%d", " slices=%d", " slices_max=%d", " slice_max_size=%d", " slice_max_mbs=%d", " slice_min_mbs=%d", " nr=%d", " decimate=%d", " interlaced=%s", " bluray_compat=%d", " stitchable=%d", " constrained_intra=%d", " bframes=%d", " b_pyramid=%d b_adapt=%d b_bias=%d direct=%d weightb=%d open_gop=%d", " weightp=%d", " keyint=infinite", " keyint=%d", " keyint_min=%d scenecut=%d intra_refresh=%d", " rc_lookahead=%d", " rc=%s mbtree=%d", "2pass", " crf=%.1f", " bitrate=%d ratetol=%.1f", " qcomp=%.2f qpmin=%d qpmax=%d qpstep=%d", " cplxblur=%.1f qblur=%.1f", " vbv_maxrate=%d vbv_bufsize=%d", " crf_max=%.1f", " qp=%d", " nal_hrd=%s filler=%d", " crop_rect=%u,%u,%u,%u", " frame-packing=%d", " ip_ratio=%.2f", " pb_ratio=%.2f", " aq=%d", " zones=%s", " zones", "invalid preset '%s'\n", ",./-+", "touhou", "invalid tune '%s'\n", "only 1 psy tuning can be used: ignoring tune %s\n", "undef", "component", "secam", "smpte428", "log100", "log316", "iec61966-2-4", "bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-12", "YCgCo", "bt2020nc", "bt2020c", "x264 [%s]: ", "AVC-Intra SEI is too large (%d)\n", "frame MB size (%dx%d) > level limit (%d)\n", "DPB size (%d frames, %d mbs) > level limit (%d frames, %d mbs)\n", "VBV bitrate (%ld) > level limit (%d)\n", "VBV buffer (%ld) > level limit (%d)\n", "MV range (%ld) > level limit (%d)\n", "fake interlaced (%ld) > level limit (%d)\n", "MB rate (%ld) > level limit (%d)\n", "using cpu capabilities:", "SSE2", "SSE3", "SSE4.1", "BMI1", " none!", "MV cost test failed: x264 has been miscompiled!\n", "CLZ test failed: x264 has been miscompiled!\n", "failed to load OpenCL\n", "HRD bitrate: %i bits/sec\n", "CPB size: %i bits\n", "dump_yuv: can't write to %s\n", "dump_yuv: incompatible with non-regular file %s\n", "profile %s, level %s\n", "4:0:0", "profile %s, level %s, %s %d-bit\n", "x264_encoder_invalidate_reference is not supported with B-frames enabled\n", "x264_encoder_invalidate_reference is not supported with intra refresh enabled\n", "lookahead thread is already stopped\n", "non-strictly-monotonic PTS\n", "../../encoder/encoder.c", "x264_encoder_close", "h->thread[i]->fenc->i_reference_count == 1", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f  PSNR Mean Y:%5.2f U:%5.2f V:%5.2f Avg:%5.2f Global:%5.2f\n", "frame %c:%-5d Avg QP:%5.2f  size:%6.0f\n", "consecutive B-frames:%s\n", "mb I  %s\n", "mb P  %s  P16..4: %4.1f%% %4.1f%% %4.1f%% %4.1f%% %4.1f%%    skip:%4.1f%%\n", "  B16..8: %4.1f%% %4.1f%% %4.1f%%  direct:%4.1f%%  skip:%4.1f%%", "  L0:%4.1f%% L1:%4.1f%% BI:%4.1f%%", "mb B  %s\n", " inter:%.1f%%", " skip:%.1f%%", "field mbs: intra: %.1f%%%s\n", "8x8 transform intra:%.1f%%%s\n", "direct mvs  spatial:%.1f%% temporal:%.1f%%\n", " inter: %.1f%% %.1f%% %.1f%%", "coded y,%s,%s intra: %.1f%% %.1f%% %.1f%%%s\n", "uvDC", "uvAC", "i16 v,h,dc,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i%d v,h,dc,ddl,ddr,vr,hd,vl,hu: %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "i8c dc,h,v,p: %2.0f%% %2.0f%% %2.0f%% %2.0f%%\n", "Weighted P-Frames: Y:%.1f%% UV:%.1f%%\n", "ref %c L%d:%s\n", "SSIM Mean Y:%.7f (%6.3fdb)\n", "PSNR Mean Y:%6.3f U:%6.3f V:%6.3f Avg:%6.3f Global:%6.3f kb/s:%.2f\n", "(*frame)->i_reference_count > 0", "pf_log not set! did you forget to call x264_param_default?\n", "invalid width x height (%dx%d)\n", "invalid CSP (only I420/YV12/NV12/NV21/I422/YV16/NV16/I444/YV24/BGR/BGRA/RGB supported)\n", "width not divisible by %d (%dx%d)\n", "height not divisible by %d (%dx%d)\n", "invalid crop-rect %u,%u,%u,%u\n", "crop-rect %u,%u,%u,%u not divisible by %dx%d\n", "OpenCL: frame size is too small, disabling opencl\n", "OpenCL: device id and device skip count configured; dropping skip\n", "ignoring unknown frame packing value\n", "cropped resolution %dx%d not compatible with tile format frame packing\n", "broken ffmpeg default settings detected\n", "use an encoding preset (e.g. -vpre medium)\n", "preset usage: -vpre <speed> -vpre <profile>\n", "speed presets are listed in x264 --help\n", "profile is optional; x264 defaults to high\n", "no ratecontrol method specified\n", "%2d-bit AVC-Intra is not widely compatible\n", "10-bit x264 is required to encode AVC-Intra\n", "bitrate not specified\n", "VBV is incompatible with constant QP, ignored.\n", "VBV maxrate unspecified, assuming CBR\n", "VBV bufsize set but maxrate unspecified, ignored\n", "max bitrate less than average bitrate, assuming CBR\n", "VBV maxrate specified, but no bufsize, ignored\n", "interlace + slice-min-mbs is not implemented\n", "slice-min-mbs > row mb size (%d) not implemented\n", "subme=0 + direct=temporal is not supported\n", "b-pyramid normal + intra-refresh is not supported\n", "ref > 1 + intra-refresh is not supported\n", "intra-refresh is not compatible with open-gop\n", "lookaheadless mb-tree requires intra refresh or infinite keyint\n", "--%s used with psy on: results will be invalid!\n", "--ssim used with AQ off: results will be invalid!\n", "--psnr used with AQ on: results will be invalid!\n", "--tune %s should be used if attempting to benchmark %s!\n", "invalid level_idc: %d\n", "interlace + me=esa is not implemented\n", "interlace + weightp is not implemented\n", "using mv_range_thread = %d\n", "NAL HRD parameters require VBV parameters\n", "CBR HRD requires constant bitrate\n", "cannot create valid sample aspect ratio\n", "using SAR=%d/%d\n", "x264_reference_build_list", "h->i_ref[0] + h->i_ref[1] <= X264_REF_MAX", "x264_weighted_pred_init", "x264_clip3( denom, 0, 7 ) == denom", "h->sh.weight[j][i].i_denom == denom", "slice-max-size violated (frame %d, cause: slice-min-mbs)\n", "x264_slice_header_write", "(first_y&1) == 0", "invalid DTS: PTS is less than DTS\n", " PSNR Y:%5.2f U:%5.2f V:%5.2f", " SSIM Y:%.5f", "frame=%4d QP=%.2f NAL=%d Slice:%c Poc:%-3d I:%-4d P:%-4d SKIP:%-4d size=%d bytes%s\n", "I16..4%s: %4.1f%% %4.1f%% %4.1f%%", "..PCM", "../../encoder/lookahead.c", "x264_lookahead_shift", "dst->i_size < dst->i_max_size", "src->i_size", "libOpenCL.so", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "OpenCL: Unable to query installed platforms\n", "OpenCL: malloc of installed platforms buffer failed\n", "OpenCL: %s does not support required image formats\n", "x264_lookahead.clbin", "OpenCL: Unable to find a compatible device\n", "OpenCL: %s\n", "OpenCL: fatal error, aborting encode\n", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "OpenCL: Unable to compile kernel '%s' (%d)\n", "OpenCL: Unable to allocate page-locked buffer, error '%d'\n", "OpenCL: Unable to map page-locked buffer, error '%d'\n", "Advanced Micro Devices, Inc.", "OpenCL acceleration disabled, switchable graphics detected\n", "OpenCL acceleration enabled with %s %s %s\n", "(SI)", "Compiling OpenCL kernels...\n", "OpenCL: unable to create program\n", "-DVECTORIZE=1", "OpenCL: Compilation failed, unable to query build log\n", "OpenCL: Compilation failed, unable to alloc build log\n", "OpenCL: Compilation failed, unable to get build log\n", "x264_kernel_build_log.txt", "OpenCL: Compilation failed, unable to create file x264_kernel_build_log.txt\n", "OpenCL: kernel build errors written to x264_kernel_build_log.txt\n", "libatiadlxx.so", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "OpenCL: unable to open clbin file for write\n", "OpenCL: Unable to query program binary size, no cache file generated\n", "OpenCL: Unable to query program binary, no cache file generated\n", "#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable\nconstant sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;\n/* 7.18.1.1  Exact-width integer types */\ntypedef signed char int8_t;\ntypedef unsigned char   uint8_t;\ntypedef short  int16_t;\ntypedef unsigned short  uint16_t;\ntypedef int  int32_t;\ntypedef unsigned   uint32_t;\ntypedef uint8_t  pixel;\ntypedef uint16_t sum_t;\ntypedef uint32_t sum2_t;\n#define LOWRES_COST_MASK ((1<<14)-1)\n#define LOWRES_COST_SHIFT 14\n#define COST_MAX (1<<28)\n#define PIXEL_MAX 255\n#define BITS_PER_SUM (8 * sizeof(sum_t))\n/* Constants for offsets into frame statistics buffer */\n#define COST_EST    0\n#define COST_EST_AQ 1\n#define INTRA_MBS   2\n#define COPY2_IF_LT( x, y, a, b )\\\nif((y)<(x))\\\n{\\\n(x) = (y);\\\n(a) = (b);\\\n}\nconstant int2 dia_offs[4] =\n{\n{0, -1}, {-1, 0}, {1, 0}, {0, 1},\n};\ninline pixel x264_clip_pixel( int x )\n{\nreturn (pixel) clamp( x, (int) 0, (int) PIXEL_MAX );\n}\ninline int2 x264_median_mv( short2 a, short2 b, short2 c )\n{\nshort2 t1 = min(a, b);\nshort2 t2 = min(max(a, b), c);\nreturn convert_int2(max(t1, t2));\n}\ninline sum2_t abs2( sum2_t a )\n{\nsum2_t s = ((a >> (BITS_PER_SUM - 1)) & (((sum2_t)1 << BITS_PER_SUM) + 1)) * ((sum_t)-1);\nreturn (a + s) ^ s;\n}\n#define HADAMARD4( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nsum2_t t0 = s0 + s1;\\\nsum2_t t1 = s0 - s1;\\\nsum2_t t2 = s2 + s3;\\\nsum2_t t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define HADAMARD4V( d0, d1, d2, d3, s0, s1, s2, s3 ) {\\\nint2 t0 = s0 + s1;\\\nint2 t1 = s0 - s1;\\\nint2 t2 = s2 + s3;\\\nint2 t3 = s2 - s3;\\\nd0 = t0 + t2;\\\nd2 = t0 - t2;\\\nd1 = t1 + t3;\\\nd3 = t1 - t3;\\\n}\n#define SATD_C_8x4_Q( name, q1, q2 )\\\nint name( q1 pixel *pix1, int i_pix1, q2 pixel *pix2, int i_pix2 )\\\n{\\\nsum2_t tmp[4][4];\\\nsum2_t a0, a1, a2, a3;\\\nsum2_t sum = 0;\\\nfor( int i = 0; i < 4; i++, pix1 += i_pix1, pix2 += i_pix2 )\\\n{\\\na0 = (pix1[0] - pix2[0]) + ((sum2_t)(pix1[4] - pix2[4]) << BITS_PER_SUM);\\\na1 = (pix1[1] - pix2[1]) + ((sum2_t)(pix1[5] - pix2[5]) << BITS_PER_SUM);\\\na2 = (pix1[2] - pix2[2]) + ((sum2_t)(pix1[6] - pix2[6]) << BITS_PER_SUM);\\\na3 = (pix1[3] - pix2[3]) + ((sum2_t)(pix1[7] - pix2[7]) << BITS_PER_SUM);\\\nHADAMARD4( tmp[i][0], tmp[i][1], tmp[i][2], tmp[i][3], a0, a1, a2, a3 );\\\n}\\\nfor( int i = 0; i < 4; i++ )\\\n{\\\nHADAMARD4( a0, a1, a2, a3, tmp[0][i], tmp[1][i], tmp[2][i], tmp[3][i] );\\\nsum += abs2( a0 ) + abs2( a1 ) + abs2( a2 ) + abs2( a3 );\\\n}\\\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\\\n}\n/*\n* Utility function to perform a parallel sum reduction of an array of integers\n*/\nint parallel_sum( int value, int x, volatile local int *array )\n{\narray[x] = value;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint dim = get_local_size( 0 );\nwhile( dim > 1 )\n{\ndim >>= 1;\nif( x < dim )\narray[x] += array[x + dim];\nif( dim > 32 )\nbarrier( CLK_LOCAL_MEM_FENCE );\n}\nreturn array[0];\n}\nint mv_cost( uint2 mvd )\n{\nfloat2 mvdf = (float2)(mvd.x, mvd.y) + 1.0f;\nfloat2 cost = round( log2(mvdf) * 2.0f + 0.718f + (float2)(!!mvd.x, !!mvd.y) );\nreturn (int) (cost.x + cost.y);\n}\n/* Hierarchical (iterative) OpenCL lowres motion search */\ninline int find_downscale_mb_xy( int x, int y, int mb_width, int mb_height )\n{\n/* edge macroblocks might not have a direct descendant, use nearest */\nx = select( x >> 1, (x - (mb_width&1)) >> 1, x == mb_width-1 );\ny = select( y >> 1, (y - (mb_height&1)) >> 1, y == mb_height-1 );\nreturn (mb_width>>1) * y + x;\n}\n/* Four threads calculate an 8x8 SAD.  Each does two rows */\nint sad_8x8_ii_coop4( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos, int idx, local int16_t *costs )\n{\nfrefpos.y += idx << 1;\nfencpos.y += idx << 1;\nint cost = 0;\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge.  The GPU clamps reads from\n* (-1, 0) to (0,0), so you get pixels [0, 1, 2, 3] when what you really\n* want are [0, 0, 1, 2]\n*/\nfor( int y = 0; y < 2; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\npixel ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\n}\nelse\n{\nuint4 enc, ref, costs = 0;\nenc = read_imageui( fenc, sampler, fencpos );\nref = read_imageui( fref, sampler, frefpos );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 0) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 0) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(0, 1) );\ncosts += abs_diff( enc, ref );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, 1) );\nref = read_imageui( fref, sampler, frefpos + (int2)(4, 1) );\ncosts += abs_diff( enc, ref );\ncost = costs.s0 + costs.s1 + costs.s2 + costs.s3;\n}\ncosts[idx] = cost;\nreturn costs[0] + costs[1] + costs[2] + costs[3];\n}\n/* One thread performs 8x8 SAD */\nint sad_8x8_ii( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref, int2 frefpos )\n{\nif( frefpos.x < 0 )\n{\n/* slow path when MV goes past left edge */\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) ).s0;\nuint ref = read_imageui( fref, sampler, frefpos + (int2)(x, y) ).s0;\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost;\n}\nelse\n{\nuint4 enc, ref, cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x += 4 )\n{\nenc = read_imageui( fenc, sampler, fencpos + (int2)(x, y) );\nref = read_imageui( fref, sampler, frefpos + (int2)(x, y) );\ncost += abs_diff( enc, ref );\n}\n}\nreturn cost.s0 + cost.s1 + cost.s2 + cost.s3;\n}\n}\n/*\n* hierarchical motion estimation\n*\n* Each kernel launch is a single iteration\n*\n* MB per work group is determined by lclx / 4 * lcly\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*/\nkernel void hierarchical_motion( read_only image2d_t  fenc,\nread_only image2d_t  fref,\nconst global short2 *in_mvs,\nglobal short2       *out_mvs,\nglobal int16_t      *out_mv_costs,\nglobal short2       *mvp_buffer,\nlocal int16_t       *cost_local,\nlocal short2        *mvc_local,\nint                  mb_width,\nint                  lambda,\nint                  me_range,\nint                  scale,\nint                  b_shift_index,\nint                  b_first_iteration,\nint                  b_reverse_references )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\nconst int mb_size = 8;\nint2 coord = (int2)(mb_x, mb_y) * mb_size;\nconst int mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += 4 * mb_in_group;\nint i_mvc = 0;\nmvc_local += 4 * mb_in_group;\nmvc_local[mb_i] = 0;\nint2 mvp =0;\nif( !b_first_iteration )\n{\n#define MVC( DX, DY )\\\n{\\\nint px = mb_x + DX;\\\nint py = mb_y + DY;\\\nmvc_local[i_mvc] = b_shift_index ? in_mvs[find_downscale_mb_xy( px, py, mb_width, mb_height )] : \\\nin_mvs[mb_width * py + px];\\\nmvc_local[i_mvc] >>= (short) scale;\\\ni_mvc++;\\\n}\n/* Find MVP from median of MVCs */\nif( b_reverse_references )\n{\n/* odd iterations: derive MVP from down and right */\nif( mb_x < mb_width - 1 )\nMVC( 1, 0 );\nif( mb_y < mb_height - 1 )\n{\nMVC( 0, 1 );\nif( mb_x > b_shift_index )\nMVC( -1, 1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, 1 );\n}\n}\nelse\n{\n/* even iterations: derive MVP from up and left */\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > b_shift_index )\nMVC( -1, -1 );\n}\n}\n#undef MVC\nmvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\n}\n/* current mvp matches the previous mvp and we have not changed scale.  We know\n* we're going to arrive at the same MV again, so just copy the previous\n* result to our output. */\nif( !b_shift_index && mvp.x == mvp_buffer[mb_xy].x && mvp.y == mvp_buffer[mb_xy].y )\n{\nout_mvs[mb_xy] = in_mvs[mb_xy];\nreturn;\n}\nmvp_buffer[mb_xy] = convert_short2_sat(mvp);\nint2 mv_min = -mb_size * (int2)(mb_x, mb_y) - 4;\nint2 mv_max = mb_size * ((int2)(mb_width, mb_height) - (int2)(mb_x, mb_y) - 1) + 4;\nint2 bestmv = clamp(mvp, mv_min, mv_max);\nint2 refcrd = coord + bestmv;\n/* measure cost at bestmv */\nint bcost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\nlambda * mv_cost( abs_diff( bestmv, mvp ) << (2 + scale) );\ndo\n{\n/* measure costs at offsets from bestmv */\nrefcrd = coord + bestmv + dia_offs[mb_i];\nint2 trymv = bestmv + dia_offs[mb_i];\nint cost = sad_8x8_ii( fenc, coord, fref, refcrd ) +\nlambda * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\ncost_local[mb_i] = (cost<<2) | mb_i;\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\nif( (cost >> 2) >= bcost )\nbreak;\nbestmv += dia_offs[cost&3];\nbcost = cost>>2;\nif( bestmv.x >= mv_max.x || bestmv.x <= mv_min.x || bestmv.y >= mv_max.y || bestmv.y <= mv_min.y )\nbreak;\n}\nwhile( --me_range > 0 );\nint2 trymv = 0, diff = 0;\n#define COST_MV_NO_PAD( L )\\\ntrymv = clamp( trymv, mv_min, mv_max );\\\ndiff = convert_int2_sat(abs_diff( mvp, trymv ));\\\nif( diff.x > 1 || diff.y > 1 ) {\\\nint2 refcrd = coord + trymv;\\\nint cost = sad_8x8_ii_coop4( fenc, coord, fref, refcrd, mb_i, cost_local ) +\\\nL * mv_cost( abs_diff( trymv, mvp ) << (2 + scale) );\\\nif( cost < bcost ) { bcost = cost; bestmv = trymv; } }\nCOST_MV_NO_PAD( 0 );\nif( !b_first_iteration )\n{\n/* try cost at previous iteration's MV, if MVP was too far away */\nint2 prevmv = b_shift_index ? convert_int2_sat(in_mvs[find_downscale_mb_xy( mb_x, mb_y, mb_width, mb_height )]) : convert_int2_sat(in_mvs[mb_xy]);\nprevmv >>= scale;\ntrymv = prevmv;\nCOST_MV_NO_PAD( lambda );\n}\nfor( int i = 0; i < i_mvc; i++ )\n{\n/* try cost at each candidate MV, if MVP was too far away */\ntrymv = convert_int2_sat( mvc_local[i] );\nCOST_MV_NO_PAD( lambda );\n}\nif( mb_i == 0 )\n{\nbestmv <<= scale;\nout_mvs[mb_xy] = convert_short2_sat(bestmv);\nout_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n}\n/* OpenCL lowres subpel Refine */\n/* Each thread performs 8x8 SAD.  4 threads per MB, so the 4 DIA HPEL offsets are\n* calculated simultaneously */\nint sad_8x8_ii_hpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefpos = qpos >> 2;\nint hpel_idx = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nuint mask_shift = 8 * hpel_idx;\nuint4 cost4 = 0;\nfor( int y = 0; y < 8; y++ )\n{\nuint4 enc, val4;\nenc = read_imageui( fenc, sampler, fencpos + (int2)(0, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(0, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(1, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(2, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(3, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\nenc = read_imageui( fenc, sampler, fencpos + (int2)(4, y));\nval4.s0 = (read_imageui( fref_planes, sampler, frefpos + (int2)(4, y)).s0 >> mask_shift) & 0xFF;\nval4.s1 = (read_imageui( fref_planes, sampler, frefpos + (int2)(5, y)).s0 >> mask_shift) & 0xFF;\nval4.s2 = (read_imageui( fref_planes, sampler, frefpos + (int2)(6, y)).s0 >> mask_shift) & 0xFF;\nval4.s3 = (read_imageui( fref_planes, sampler, frefpos + (int2)(7, y)).s0 >> mask_shift) & 0xFF;\ncost4 += abs_diff( enc, val4 );\n}\nreturn cost4.s0 + cost4.s1 + cost4.s2 + cost4.s3;\n}\n/* One thread measures 8x8 SAD cost at a QPEL offset into an HPEL plane */\nint sad_8x8_ii_qpel( read_only image2d_t fenc, int2 fencpos, read_only image2d_t fref_planes, int2 qpos )\n{\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x & 2) >> 1) + (qpos.y & 2);\nint2 qposB = qpos + ((qpos & 1) << 1);\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x & 2) >> 1) + (qposB.y & 2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nint cost = 0;\nfor( int y = 0; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\nuint enc = read_imageui( fenc, sampler, fencpos + (int2)(x, y)).s0;\nuint vA = (read_imageui( fref_planes, sampler, frefApos + (int2)(x, y)).s0 >> mask_shift0) & 0xFF;\nuint vB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(x, y)).s0 >> mask_shift1) & 0xFF;\ncost += abs_diff( enc, rhadd( vA, vB ) );\n}\n}\nreturn cost;\n}\n/* Four threads measure 8x8 SATD cost at a QPEL offset into an HPEL plane\n*\n* Each thread collects 1/4 of the rows of diffs and processes one quarter of\n* the transforms\n*/\nint satd_8x8_ii_qpel_coop4( read_only image2d_t fenc,\nint2 fencpos,\nread_only image2d_t fref_planes,\nint2 qpos,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nint2 frefApos = qpos >> 2;\nint hpelA = ((qpos.x&2)>>1) + (qpos.y&2);\nint2 qposB = qpos + (int2)(((qpos.x&1)<<1), ((qpos.y&1)<<1));\nint2 frefBpos = qposB >> 2;\nint hpelB = ((qposB.x&2)>>1) + (qposB.y&2);\nuint mask_shift0 = 8 * hpelA, mask_shift1 = 8 * hpelB;\nuint vA, vB;\nuint a0, a1;\nuint enc;\nsum2_t sum = 0;\n#define READ_DIFF( OUT, X )\\\nenc = read_imageui( fenc, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref_planes, sampler, frefApos + (int2)(X, idx) ).s0 >> mask_shift0) & 0xFF;\\\nvB = (read_imageui( fref_planes, sampler, frefBpos + (int2)(X, idx) ).s0 >> mask_shift1) & 0xFF;\\\nOUT = enc - rhadd( vA, vB );\n#define READ_DIFF_EX( OUT, a, b )\\\n{\\\nREAD_DIFF( a0, a );\\\nREAD_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\\\n}\n#define ROW_8x4_SATD( a, b )\\\n{\\\nfencpos.y += a;\\\nfrefApos.y += b;\\\nfrefBpos.y += b;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\\\n}\nROW_8x4_SATD( 0, 0 );\nROW_8x4_SATD( 4, 4 );\n#undef READ_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\nconstant int2 hpoffs[4] =\n{\n{0, -2}, {-2, 0}, {2, 0}, {0, 2}\n};\n/* sub pixel refinement of motion vectors, output MVs and costs are moved from\n* temporary buffers into final per-frame buffer\n*\n* global launch dimensions:  [mb_width * 4, mb_height]\n*\n* With X being the source 16x16 pixels, F is the lowres pixel used by the\n* motion search.  We will now utilize the H V and C pixels (stored in separate\n* planes) to search at half-pel increments.\n*\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*  V C V C V\n* X X X X X X\n*  F H F H F\n* X X X X X X\n*\n* The YX HPEL bits of the motion vector selects the plane we search in.  The\n* four planes are packed in the fref_planes 2D image buffer.  Each sample\n* returns:  s0 = F, s1 = H, s2 = V, s3 = C */\nkernel void subpel_refine( read_only image2d_t   fenc,\nread_only image2d_t   fref_planes,\nconst global short2  *in_mvs,\nconst global int16_t *in_sad_mv_costs,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nlocal short2         *mvc_local,\nglobal short2        *fenc_lowres_mv,\nglobal int16_t       *fenc_lowres_mv_costs,\nint                   mb_width,\nint                   lambda,\nint                   b,\nint                   ref,\nint                   b_islist1 )\n{\nint mb_x = get_global_id( 0 ) >> 2;\nif( mb_x >= mb_width )\nreturn;\nint mb_height = get_global_size( 1 );\nint mb_i = get_global_id( 0 ) & 3;\nint mb_y = get_global_id( 1 );\nint mb_xy = mb_y * mb_width + mb_x;\n/* fenc_lowres_mv and fenc_lowres_mv_costs are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors.  The kernel will be passed the correct\n* directional buffer for the direction of the search: list1 or list0\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs[(b - p0 - 1) * mb_count] */\nfenc_lowres_mv +=       (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\nfenc_lowres_mv_costs += (b_islist1 ? (ref-b-1) : (b-ref-1)) * mb_width * mb_height;\n/* Adjust pointers into local memory buffers for this thread's data */\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\nmvc_local += mb_in_group * 4;\nint i_mvc = 0;\nmvc_local[0] = mvc_local[1] = mvc_local[2] = mvc_local[3] = 0;\n#define MVC( DX, DY ) mvc_local[i_mvc++] = in_mvs[mb_width * (mb_y + DY) + (mb_x + DX)];\nif( mb_x > 0 )\nMVC( -1, 0 );\nif( mb_y > 0 )\n{\nMVC( 0, -1 );\nif( mb_x < mb_width - 1 )\nMVC( 1, -1 );\nif( mb_x > 0 )\nMVC( -1, -1 );\n}\n#undef MVC\nint2 mvp = (i_mvc <= 1) ? convert_int2_sat(mvc_local[0]) : x264_median_mv( mvc_local[0], mvc_local[1], mvc_local[2] );\nint bcost =  in_sad_mv_costs[mb_xy];\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint2 bmv = convert_int2_sat( in_mvs[mb_xy] );\n/* Make mvp and bmv QPEL MV */\nmvp <<= 2; bmv <<= 2;\n#define HPEL_QPEL( ARR, FUNC )\\\n{\\\nint2 trymv = bmv + ARR[mb_i];\\\nint2 qpos = (coord << 2) + trymv;\\\nint cost = FUNC( fenc, coord, fref_planes, qpos ) + lambda * mv_cost( abs_diff( trymv, mvp ) );\\\ncost_local[mb_i] = (cost<<2) + mb_i;\\\ncost = min( cost_local[0], min( cost_local[1], min( cost_local[2], cost_local[3] ) ) );\\\nif( (cost>>2) < bcost )\\\n{\\\nbmv += ARR[cost&3];\\\nbcost = cost>>2;\\\n}\\\n}\nHPEL_QPEL( hpoffs, sad_8x8_ii_hpel );\nHPEL_QPEL( dia_offs, sad_8x8_ii_qpel );\nfenc_lowres_mv[mb_xy] = convert_short2_sat( bmv );\n/* remeasure cost of bmv using SATD */\nint2 qpos = (coord << 2) + bmv;\ncost_local[mb_i] = satd_8x8_ii_qpel_coop4( fenc, coord, fref_planes, qpos, satd_local, mb_i );\nbcost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\nbcost += lambda * mv_cost( abs_diff( bmv, mvp ) );\nfenc_lowres_mv_costs[mb_xy] = min( bcost, LOWRES_COST_MASK );\n}\n/* Lookahead lowres intra analysis\n*\n* Each intra analysis function has been implemented twice, once for scalar GPUs\n* (NV) and once for vectorized GPUs (AMD pre-Southern Islands).  x264 detects\n* the GPU type and sets the -DVECTORIZE compile flag accordingly.\n*\n* All the intra analysis functions were based on their C versions in pixel.c\n* and produce the exact same results.\n*/\n/* force all clamp arguments and return value to int, prevent ambiguous types */\n#define clamp_int( X, MIN, MAX ) (int) clamp( (int)(X), (int)(MIN), (int)(MAX) )\n#if VECTORIZE\nint satd_8x4_intra_lr( const local pixel *data, int data_stride, int8 pr0, int8 pr1, int8 pr2, int8 pr3 )\n{\nint8 a_v, d_v;\nint2 tmp00, tmp01, tmp02, tmp03, tmp10, tmp11, tmp12, tmp13;\nint2 tmp20, tmp21, tmp22, tmp23, tmp30, tmp31, tmp32, tmp33;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr0).s04152637;\nHADAMARD4V( tmp00, tmp01, tmp02, tmp03, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr1).s04152637;\nHADAMARD4V( tmp10, tmp11, tmp12, tmp13, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr2).s04152637;\nHADAMARD4V( tmp20, tmp21, tmp22, tmp23, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\ndata += data_stride;\nd_v = convert_int8( vload8( 0, data ) );\na_v.s01234567 = (d_v - pr3).s04152637;\nHADAMARD4V( tmp30, tmp31, tmp32, tmp33, a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi );\nuint8 sum_v;\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp00, tmp10, tmp20, tmp30 );\nsum_v = abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp01, tmp11, tmp21, tmp31 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp02, tmp12, tmp22, tmp32 );\nsum_v += abs( a_v );\nHADAMARD4V( a_v.lo.lo, a_v.lo.hi, a_v.hi.lo, a_v.hi.hi, tmp03, tmp13, tmp23, tmp33 );\nsum_v += abs( a_v );\nuint4 sum2 = sum_v.hi + sum_v.lo;\nuint2 sum3 = sum2.hi + sum2.lo;\nreturn ( sum3.hi + sum3.lo ) >> 1;\n}\n#else\nSATD_C_8x4_Q( satd_8x4_lp, const local, private )\n#endif\n/****************************************************************************\n* 8x8 prediction for intra luma block\n****************************************************************************/\n#define F1            rhadd\n#define F2( a, b, c ) ( a+2*b+c+2 )>>2\n#if VECTORIZE\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = ( 2 + top[0] + 2*top[1] + top[2] ) >> 2;\npr0.s1 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr0.s2 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr0.s3 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr0.s4 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s5 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s6 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s7 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s0 = ( 2 + top[1] + 2*top[2] + top[3] ) >> 2;\npr1.s1 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr1.s2 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr1.s3 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr1.s4 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s5 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s6 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s7 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s0 = ( 2 + top[2] + 2*top[3] + top[4] ) >> 2;\npr2.s1 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr2.s2 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr2.s3 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr2.s4 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s5 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s6 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s7 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s0 = ( 2 + top[3] + 2*top[4] + top[5] ) >> 2;\npr3.s1 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr3.s2 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr3.s3 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr3.s4 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s5 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s6 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s7 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = ( 2 + top[4] + 2*top[5] + top[6] ) >> 2;\npr0.s1 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr0.s2 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr0.s3 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr0.s4 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr0.s5 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr0.s6 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr0.s7 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s0 = ( 2 + top[5] + 2*top[6] + top[7] ) >> 2;\npr1.s1 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr1.s2 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr1.s3 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr1.s4 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr1.s5 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr1.s6 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr1.s7 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s0 = ( 2 + top[6] + 2*top[7] + top[8] ) >> 2;\npr2.s1 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr2.s2 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr2.s3 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr2.s4 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr2.s5 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr2.s6 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr2.s7 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s0 = ( 2 + top[7] + 2*top[8] + top[9] ) >> 2;\npr3.s1 = ( 2 + top[8] + 2*top[9] + top[10] ) >> 2;\npr3.s2 = ( 2 + top[9] + 2*top[10] + top[11] ) >> 2;\npr3.s3 = ( 2 + top[10] + 2*top[11] + top[12] ) >> 2;\npr3.s4 = ( 2 + top[11] + 2*top[12] + top[13] ) >> 2;\npr3.s5 = ( 2 + top[12] + 2*top[13] + top[14] ) >> 2;\npr3.s6 = ( 2 + top[13] + 2*top[14] + top[15] ) >> 2;\npr3.s7 = ( 2 + top[14] + 3*top[15] ) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr3.s0 = F2( left[1], left[2], left[3] );\npr2.s0 = pr3.s1 = F2( left[0], left[1], left[2] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[1], left[0], left_top );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( top[3], top[4], top[5] );\npr0.s6 = pr1.s7 = F2( top[4], top[5], top[6] );\npr0.s7 = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr3.s0 = F2( left[5], left[6], left[7] );\npr2.s0 = pr3.s1 = F2( left[4], left[5], left[6] );\npr1.s0 = pr2.s1 = pr3.s2 = F2( left[3], left[4], left[5] );\npr0.s0 = pr1.s1 = pr2.s2 = pr3.s3 = F2( left[2], left[3], left[4] );\npr0.s1 = pr1.s2 = pr2.s3 = pr3.s4 = F2( left[1], left[2], left[3] );\npr0.s2 = pr1.s3 = pr2.s4 = pr3.s5 = F2( left[0], left[1], left[2] );\npr0.s3 = pr1.s4 = pr2.s5 = pr3.s6 = F2( left[1], left[0], left_top );\npr0.s4 = pr1.s5 = pr2.s6 = pr3.s7 = F2( left[0], left_top, top[0] );\npr0.s5 = pr1.s6 = pr2.s7 = F2( left_top, top[0], top[1] );\npr0.s6 = pr1.s7 = F2( top[0], top[1], top[2] );\npr0.s7 = F2( top[1], top[2], top[3] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr2.s0 = F2( left[1], left[0], left_top );\npr3.s0 = F2( left[2], left[1], left[0] );\npr1.s0 = pr3.s1 = F2( left[0], left_top, top[0] );\npr0.s0 = pr2.s1 = F1( left_top, top[0] );\npr1.s1 = pr3.s2 = F2( left_top, top[0], top[1] );\npr0.s1 = pr2.s2 = F1( top[0], top[1] );\npr1.s2 = pr3.s3 = F2( top[0], top[1], top[2] );\npr0.s2 = pr2.s3 = F1( top[1], top[2] );\npr1.s3 = pr3.s4 = F2( top[1], top[2], top[3] );\npr0.s3 = pr2.s4 = F1( top[2], top[3] );\npr1.s4 = pr3.s5 = F2( top[2], top[3], top[4] );\npr0.s4 = pr2.s5 = F1( top[3], top[4] );\npr1.s5 = pr3.s6 = F2( top[3], top[4], top[5] );\npr0.s5 = pr2.s6 = F1( top[4], top[5] );\npr1.s6 = pr3.s7 = F2( top[4], top[5], top[6] );\npr0.s6 = pr2.s7 = F1( top[5], top[6] );\npr1.s7 = F2( top[5], top[6], top[7] );\npr0.s7 = F1( top[6], top[7] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr2.s0 = F2( left[5], left[4], left[3] );\npr3.s0 = F2( left[6], left[5], left[4] );\npr0.s0 = pr2.s1 = F2( left[3], left[2], left[1] );\npr1.s0 = pr3.s1 = F2( left[4], left[3], left[2] );\npr0.s1 = pr2.s2 = F2( left[1], left[0], left_top );\npr1.s1 = pr3.s2 = F2( left[2], left[1], left[0] );\npr1.s2 = pr3.s3 = F2( left[0], left_top, top[0] );\npr0.s2 = pr2.s3 = F1( left_top, top[0] );\npr1.s3 = pr3.s4 = F2( left_top, top[0], top[1] );\npr0.s3 = pr2.s4 = F1( top[0], top[1] );\npr1.s4 = pr3.s5 = F2( top[0], top[1], top[2] );\npr0.s4 = pr2.s5 = F1( top[1], top[2] );\npr1.s5 = pr3.s6 = F2( top[1], top[2], top[3] );\npr0.s5 = pr2.s6 = F1( top[2], top[3] );\npr1.s6 = pr3.s7 = F2( top[2], top[3], top[4] );\npr0.s6 = pr2.s7 = F1( top[3], top[4] );\npr1.s7 = F2( top[3], top[4], top[5] );\npr0.s7 = F1( top[4], top[5] );\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n#undef PRED\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left_top, left[0] ); pr0.s1 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr0.s2 = F2( top[1], top[0], left_top ); pr0.s3 = F2( top[2], top[1], top[0] );\npr0.s4 = F2( top[3], top[2], top[1] ); pr0.s5 = F2( top[4], top[3], top[2] );\npr0.s6 = F2( top[5], top[4], top[3] ); pr0.s7 = F2( top[6], top[5], top[4] );\npr1.s0 = F1( left[0], left[1] ); pr1.s1 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s2 = F1( left_top, left[0] ); pr1.s3 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr1.s4 = F2( top[1], top[0], left_top ); pr1.s5 = F2( top[2], top[1], top[0] );\npr1.s6 = F2( top[3], top[2], top[1] ); pr1.s7 = F2( top[4], top[3], top[2] );\npr2.s0 = F1( left[1], left[2] ); pr2.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s2 = F1( left[0], left[1] ); pr2.s3 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr2.s4 = F1( left_top, left[0] ); pr2.s5 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\npr2.s6 = F2( top[1], top[0], left_top ); pr2.s7 = F2( top[2], top[1], top[0] );\npr3.s0 = F1( left[2], left[3] ); pr3.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s2 = F1( left[1], left[2] ); pr3.s3 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr3.s4 = F1( left[0], left[1] ); pr3.s5 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr3.s6 = F1( left_top, left[0] ); pr3.s7 = (left[0] + 2 * left_top + top[0] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[3], left[4] ); pr0.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s2 = F1( left[2], left[3] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[1], left[2] ); pr0.s5 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s6 = F1( left[0], left[1] ); pr0.s7 = (left_top + 2 * left[0] + left[1] + 2) >> 2;\npr1.s0 = F1( left[4], left[5] ); pr1.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s2 = F1( left[3], left[4] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[2], left[3] ); pr1.s5 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s6 = F1( left[1], left[2] ); pr1.s7 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr2.s0 = F1( left[5], left[6] ); pr2.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s2 = F1( left[4], left[5] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[3], left[4] ); pr2.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s6 = F1( left[2], left[3] ); pr2.s7 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr3.s0 = F1( left[6], left[7] ); pr3.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s2 = F1( left[5], left[6] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[4], left[5] ); pr3.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s6 = F1( left[3], left[4] ); pr3.s7 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\nreturn satd + satd_8x4_intra_lr( src + (src_stride << 2), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( top[0], top[1] );\npr1.s0 = F2( top[0], top[1], top[2] );\npr2.s0 = pr0.s1 = F1( top[1], top[2] );\npr3.s0 = pr1.s1 = F2( top[1], top[2], top[3] );\npr2.s1 = pr0.s2 = F1( top[2], top[3] );\npr3.s1 = pr1.s2 = F2( top[2], top[3], top[4] );\npr2.s2 = pr0.s3 = F1( top[3], top[4] );\npr3.s2 = pr1.s3 = F2( top[3], top[4], top[5] );\npr2.s3 = pr0.s4 = F1( top[4], top[5] );\npr3.s3 = pr1.s4 = F2( top[4], top[5], top[6] );\npr2.s4 = pr0.s5 = F1( top[5], top[6] );\npr3.s4 = pr1.s5 = F2( top[5], top[6], top[7] );\npr2.s5 = pr0.s6 = F1( top[6], top[7] );\npr3.s5 = pr1.s6 = F2( top[6], top[7], top[8] );\npr2.s6 = pr0.s7 = F1( top[7], top[8] );\npr3.s6 = pr1.s7 = F2( top[7], top[8], top[9] );\npr2.s7 = F1( top[8], top[9] );\npr3.s7 = F2( top[8], top[9], top[10] );\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( top[2], top[3] );\npr1.s0 = F2( top[2], top[3], top[4] );\npr2.s0 = pr0.s1 = F1( top[3], top[4] );\npr3.s0 = pr1.s1 = F2( top[3], top[4], top[5] );\npr2.s1 = pr0.s2 = F1( top[4], top[5] );\npr3.s1 = pr1.s2 = F2( top[4], top[5], top[6] );\npr2.s2 = pr0.s3 = F1( top[5], top[6] );\npr3.s2 = pr1.s3 = F2( top[5], top[6], top[7] );\npr2.s3 = pr0.s4 = F1( top[6], top[7] );\npr3.s3 = pr1.s4 = F2( top[6], top[7], top[8] );\npr2.s4 = pr0.s5 = F1( top[7], top[8] );\npr3.s4 = pr1.s5 = F2( top[7], top[8], top[9] );\npr2.s5 = pr0.s6 = F1( top[8], top[9] );\npr3.s5 = pr1.s6 = F2( top[8], top[9], top[10] );\npr2.s6 = pr0.s7 = F1( top[9], top[10] );\npr3.s6 = pr1.s7 = F2( top[9], top[10], top[11] );\npr2.s7 = F1( top[10], top[11] );\npr3.s7 = F2( top[10], top[11], top[12] );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = F1( left[0], left[1] ); pr0.s1 = (left[0] + 2 * left[1] + left[2] + 2) >> 2;\npr0.s2 = F1( left[1], left[2] ); pr0.s3 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr0.s4 = F1( left[2], left[3] ); pr0.s5 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr0.s6 = F1( left[3], left[4] ); pr0.s7 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s0 = F1( left[1], left[2] ); pr1.s1 = (left[1] + 2 * left[2] + left[3] + 2) >> 2;\npr1.s2 = F1( left[2], left[3] ); pr1.s3 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr1.s4 = F1( left[3], left[4] ); pr1.s5 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr1.s6 = F1( left[4], left[5] ); pr1.s7 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s0 = F1( left[2], left[3] ); pr2.s1 = (left[2] + 2 * left[3] + left[4] + 2) >> 2;\npr2.s2 = F1( left[3], left[4] ); pr2.s3 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr2.s4 = F1( left[4], left[5] ); pr2.s5 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr2.s6 = F1( left[5], left[6] ); pr2.s7 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s0 = F1( left[3], left[4] ); pr3.s1 = (left[3] + 2 * left[4] + left[5] + 2) >> 2;\npr3.s2 = F1( left[4], left[5] ); pr3.s3 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr3.s4 = F1( left[5], left[6] ); pr3.s5 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr3.s6 = F1( left[6], left[7] ); pr3.s7 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npr0.s0 = F1( left[4], left[5] ); pr0.s1 = (left[4] + 2 * left[5] + left[6] + 2) >> 2;\npr0.s2 = F1( left[5], left[6] ); pr0.s3 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr0.s4 = F1( left[6], left[7] ); pr0.s5 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr0.s6 = left[7]; pr0.s7 = left[7];\npr1.s0 = F1( left[5], left[6] ); pr1.s1 = (left[5] + 2 * left[6] + left[7] + 2) >> 2;\npr1.s2 = F1( left[6], left[7] ); pr1.s3 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr1.s4 = left[7]; pr1.s5 = left[7];\npr1.s6 = left[7]; pr1.s7 = left[7];\npr2.s0 = F1( left[6], left[7] ); pr2.s1 = (left[6] + 2 * left[7] + left[7] + 2) >> 2;\npr2.s2 = left[7]; pr2.s3 = left[7];\npr2.s4 = left[7]; pr2.s5 = left[7];\npr2.s6 = left[7]; pr2.s7 = left[7];\npr3 = (int8)left[7];\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nconst local pixel *src_l = src;\nint8 pr0, pr1, pr2, pr3;\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1]; src += src_stride;\nint satd = satd_8x4_intra_lr( src_l, src_stride, pr0, pr1, pr2, pr3 );\npr0 = (int8)src[-1]; src += src_stride;\npr1 = (int8)src[-1]; src += src_stride;\npr2 = (int8)src[-1]; src += src_stride;\npr3 = (int8)src[-1];\nreturn satd + satd_8x4_intra_lr( src_l + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nint8 pred = convert_int8( vload8( 0, &src[-src_stride] ));\nreturn satd_8x4_intra_lr( src, src_stride, pred, pred, pred, pred ) +\nsatd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pred, pred, pred, pred );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nint pix = i00;\nint8 pr0, pr1, pr2, pr3;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nint satd = satd_8x4_intra_lr( src, src_stride, pr0, pr1, pr2, pr3 );\npix = i00;\npr0.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr0.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr1.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr1.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr2.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr2.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\npix = i00;\npr3.s0 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s1 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s2 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s3 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s4 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s5 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s6 = x264_clip_pixel( pix >> 5 ); pix += b;\npr3.s7 = x264_clip_pixel( pix >> 5 ); i00 += c;\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, pr0, pr1, pr2, pr3 );\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nint8 dc0;\ndc0.lo = (int4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (int4)( (s1 + 2) >> 2 );\nint satd = satd_8x4_intra_lr( src, src_stride, dc0, dc0, dc0, dc0 );\ndc0.lo = (int4)( (s3 + 2) >> 2 );\ndc0.hi = (int4)( (s1 + s3 + 4) >> 3 );\nreturn satd + satd_8x4_intra_lr( src + ( src_stride << 2 ), src_stride, dc0, dc0, dc0, dc0 );\n}\n#else  /* not vectorized: private is cheap registers are scarce */\nint x264_predict_8x8_ddl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nfor( int y = 0; y < 4; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + y*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 4; y < 8; y++ )\n{\nfor( int x = 0; x < 8; x++ )\n{\npixel x_plus_y = (pixel) clamp_int( x + y, 0, 13 );\npred[x + ( y - 4 )*8] = ( 2 + top[x_plus_y] + 2*top[x_plus_y + 1] + top[x_plus_y + 2] ) >> 2;\n}\n}\npred[31] = ( 2 + top[14] + 3*top[15] ) >> 2;\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_ddr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[1], left[0], left_top );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( top[3], top[4], top[5] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 7, 0 ) = F2( top[5], top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 3 ) = F2( left[5], left[6], left[7] );\nPRED( 0, 2 ) = PRED( 1, 3 ) = F2( left[4], left[5], left[6] );\nPRED( 0, 1 ) = PRED( 1, 2 ) = PRED( 2, 3 ) = F2( left[3], left[4], left[5] );\nPRED( 0, 0 ) = PRED( 1, 1 ) = PRED( 2, 2 ) = PRED( 3, 3 ) = F2( left[2], left[3], left[4] );\nPRED( 1, 0 ) = PRED( 2, 1 ) = PRED( 3, 2 ) = PRED( 4, 3 ) = F2( left[1], left[2], left[3] );\nPRED( 2, 0 ) = PRED( 3, 1 ) = PRED( 4, 2 ) = PRED( 5, 3 ) = F2( left[0], left[1], left[2] );\nPRED( 3, 0 ) = PRED( 4, 1 ) = PRED( 5, 2 ) = PRED( 6, 3 ) = F2( left[1], left[0], left_top );\nPRED( 4, 0 ) = PRED( 5, 1 ) = PRED( 6, 2 ) = PRED( 7, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 5, 0 ) = PRED( 6, 1 ) = PRED( 7, 2 ) = F2( left_top, top[0], top[1] );\nPRED( 6, 0 ) = PRED( 7, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 7, 0 ) = F2( top[1], top[2], top[3] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_vr( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 2 ) = F2( left[1], left[0], left_top );\nPRED( 0, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F1( left_top, top[0] );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F1( top[0], top[1] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( top[1], top[2] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[2], top[3] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[3], top[4] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[3], top[4], top[5] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[4], top[5] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[4], top[5], top[6] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[5], top[6] );\nPRED( 7, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 7, 0 ) = F1( top[6], top[7] );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 2 ) = F2( left[5], left[4], left[3] );\nPRED( 0, 3 ) = F2( left[6], left[5], left[4] );\nPRED( 0, 0 ) = PRED( 1, 2 ) = F2( left[3], left[2], left[1] );\nPRED( 0, 1 ) = PRED( 1, 3 ) = F2( left[4], left[3], left[2] );\nPRED( 1, 0 ) = PRED( 2, 2 ) = F2( left[1], left[0], left_top );\nPRED( 1, 1 ) = PRED( 2, 3 ) = F2( left[2], left[1], left[0] );\nPRED( 2, 1 ) = PRED( 3, 3 ) = F2( left[0], left_top, top[0] );\nPRED( 2, 0 ) = PRED( 3, 2 ) = F1( left_top, top[0] );\nPRED( 3, 1 ) = PRED( 4, 3 ) = F2( left_top, top[0], top[1] );\nPRED( 3, 0 ) = PRED( 4, 2 ) = F1( top[0], top[1] );\nPRED( 4, 1 ) = PRED( 5, 3 ) = F2( top[0], top[1], top[2] );\nPRED( 4, 0 ) = PRED( 5, 2 ) = F1( top[1], top[2] );\nPRED( 5, 1 ) = PRED( 6, 3 ) = F2( top[1], top[2], top[3] );\nPRED( 5, 0 ) = PRED( 6, 2 ) = F1( top[2], top[3] );\nPRED( 6, 1 ) = PRED( 7, 3 ) = F2( top[2], top[3], top[4] );\nPRED( 6, 0 ) = PRED( 7, 2 ) = F1( top[3], top[4] );\nPRED( 7, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 7, 0 ) = F1( top[4], top[5] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\ninline uint32_t pack16to32( uint32_t a, uint32_t b )\n{\nreturn a + (b << 16);\n}\ninline uint32_t pack8to16( uint32_t a, uint32_t b )\n{\nreturn a + (b << 8);\n}\nint x264_predict_8x8_hd( const local pixel *src, int src_stride, const local pixel *top, const local pixel *left, pixel left_top )\n{\nprivate pixel pred[32];\nint satd;\nint p1 =  pack8to16( (F1( left[6], left[7] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p2 =  pack8to16( (F1( left[5], left[6] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p3 =  pack8to16( (F1( left[4], left[5] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p4 =  pack8to16( (F1( left[3], left[4] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p5 =  pack8to16( (F1( left[2], left[3] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p6 =  pack8to16( (F1( left[1], left[2] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p7 =  pack8to16( (F1( left[0], left[1] )), ((left_top + 2 * left[0] + left[1] + 2) >> 2) );\nint p8 =  pack8to16( (F1( left_top, left[0] )), ((left[0] + 2 * left_top + top[0] + 2) >> 2) );\nint p9 =  pack8to16( (F2( top[1], top[0], left_top )), (F2( top[2], top[1], top[0] )) );\nint p10 =  pack8to16( (F2( top[3], top[2], top[1] )), (F2( top[4], top[3], top[2] )) );\nint p11 =  pack8to16( (F2( top[5], top[4], top[3] )), (F2( top[6], top[5], top[4] )) );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p10, p11 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p9, p10 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p8, p9 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[4 + 3 * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[0 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[4 + 0 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[0 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[4 + 1 * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[0 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[4 + 2 * 8] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[0 + 3 * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[4 + 3 * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8_vl( const local pixel *src, int src_stride, const local pixel *top )\n{\nprivate pixel pred[32];\nint satd;\n#define PRED( x, y ) pred[(x) + (y)*8]\nPRED( 0, 0 ) = F1( top[0], top[1] );\nPRED( 0, 1 ) = F2( top[0], top[1], top[2] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[1], top[2] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[1], top[2], top[3] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[2], top[3] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[3], top[4] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[4], top[5] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[5], top[6] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[6], top[7] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[7], top[8] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 7, 2 ) = F1( top[8], top[9] );\nPRED( 7, 3 ) = F2( top[8], top[9], top[10] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nPRED( 0, 0 ) = F1( top[2], top[3] );\nPRED( 0, 1 ) = F2( top[2], top[3], top[4] );\nPRED( 0, 2 ) = PRED( 1, 0 ) = F1( top[3], top[4] );\nPRED( 0, 3 ) = PRED( 1, 1 ) = F2( top[3], top[4], top[5] );\nPRED( 1, 2 ) = PRED( 2, 0 ) = F1( top[4], top[5] );\nPRED( 1, 3 ) = PRED( 2, 1 ) = F2( top[4], top[5], top[6] );\nPRED( 2, 2 ) = PRED( 3, 0 ) = F1( top[5], top[6] );\nPRED( 2, 3 ) = PRED( 3, 1 ) = F2( top[5], top[6], top[7] );\nPRED( 3, 2 ) = PRED( 4, 0 ) = F1( top[6], top[7] );\nPRED( 3, 3 ) = PRED( 4, 1 ) = F2( top[6], top[7], top[8] );\nPRED( 4, 2 ) = PRED( 5, 0 ) = F1( top[7], top[8] );\nPRED( 4, 3 ) = PRED( 5, 1 ) = F2( top[7], top[8], top[9] );\nPRED( 5, 2 ) = PRED( 6, 0 ) = F1( top[8], top[9] );\nPRED( 5, 3 ) = PRED( 6, 1 ) = F2( top[8], top[9], top[10] );\nPRED( 6, 2 ) = PRED( 7, 0 ) = F1( top[9], top[10] );\nPRED( 6, 3 ) = PRED( 7, 1 ) = F2( top[9], top[10], top[11] );\nPRED( 7, 2 ) = F1( top[10], top[11] );\nPRED( 7, 3 ) = F2( top[10], top[11], top[12] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n#undef PRED\n}\nint x264_predict_8x8_hu( const local pixel *src, int src_stride, const local pixel *left )\n{\nprivate pixel pred[32];\nint satd;\nint p1 = pack8to16( (F1( left[0], left[1] )), ((left[0] + 2 * left[1] + left[2] + 2) >> 2) );\nint p2 = pack8to16( (F1( left[1], left[2] )), ((left[1] + 2 * left[2] + left[3] + 2) >> 2) );\nint p3 = pack8to16( (F1( left[2], left[3] )), ((left[2] + 2 * left[3] + left[4] + 2) >> 2) );\nint p4 = pack8to16( (F1( left[3], left[4] )), ((left[3] + 2 * left[4] + left[5] + 2) >> 2) );\nint p5 = pack8to16( (F1( left[4], left[5] )), ((left[4] + 2 * left[5] + left[6] + 2) >> 2) );\nint p6 = pack8to16( (F1( left[5], left[6] )), ((left[5] + 2 * left[6] + left[7] + 2) >> 2) );\nint p7 = pack8to16( (F1( left[6], left[7] )), ((left[6] + 2 * left[7] + left[7] + 2) >> 2) );\nint p8 = pack8to16( left[7], left[7] );\nvstore4( as_uchar4( pack16to32( p1, p2 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p2, p3 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p3, p4 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p4, p5 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nvstore4( as_uchar4( pack16to32( p5, p6 ) ), 0, &pred[( 0 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 4 ) + ( 0 ) * 8] );\nvstore4( as_uchar4( pack16to32( p6, p7 ) ), 0, &pred[( 0 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 1 ) * 8] );\nvstore4( as_uchar4( pack16to32( p7, p8 ) ), 0, &pred[( 0 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 2 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 0 ) + ( 3 ) * 8] );\nvstore4( as_uchar4( pack16to32( p8, p8 ) ), 0, &pred[( 4 ) + ( 3 ) * 8] );\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_h( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nconst local pixel *src_l = src;\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred ); src += src_stride;\nint satd = satd_8x4_lp( src_l, src_stride, pred, 8 );\nvstore8( (uchar8)(src[-1]), 0, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 1, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 2, pred ); src += src_stride;\nvstore8( (uchar8)(src[-1]), 3, pred );\nreturn satd + satd_8x4_lp( src_l + ( src_stride << 2 ), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_v( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nuchar16 v16;\nv16.lo = vload8( 0, &src[-src_stride] );\nv16.hi = vload8( 0, &src[-src_stride] );\nvstore16( v16, 0, pred );\nvstore16( v16, 1, pred );\nreturn satd_8x4_lp( src, src_stride, pred, 8 ) +\nsatd_8x4_lp( src + (src_stride << 2), src_stride, pred, 8 );\n}\nint x264_predict_8x8c_p( const local pixel *src, int src_stride )\n{\nint H = 0, V = 0;\nprivate pixel pred[32];\nint satd;\nfor( int i = 0; i < 4; i++ )\n{\nH += (i + 1) * (src[4 + i - src_stride] - src[2 - i - src_stride]);\nV += (i + 1) * (src[-1 + (i + 4) * src_stride] - src[-1 + (2 - i) * src_stride]);\n}\nint a = 16 * (src[-1 + 7 * src_stride] + src[7 - src_stride]);\nint b = (17 * H + 16) >> 5;\nint c = (17 * V + 16) >> 5;\nint i00 = a - 3 * b - 3 * c + 16;\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd = satd_8x4_lp( src, src_stride, pred, 8 );\nfor( int y = 0; y < 4; y++ )\n{\nint pix = i00;\nfor( int x = 0; x < 8; x++ )\n{\npred[x + y*8] = x264_clip_pixel( pix >> 5 );\npix += b;\n}\ni00 += c;\n}\nsatd += satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\nreturn satd;\n}\nint x264_predict_8x8c_dc( const local pixel *src, int src_stride )\n{\nprivate pixel pred[32];\nint s0 = 0, s1 = 0, s2 = 0, s3 = 0;\nfor( int i = 0; i < 4; i++ )\n{\ns0 += src[i - src_stride];\ns1 += src[i + 4 - src_stride];\ns2 += src[-1 + i * src_stride];\ns3 += src[-1 + (i+4)*src_stride];\n}\nuchar8 dc0;\ndc0.lo = (uchar4)( (s0 + s2 + 4) >> 3 );\ndc0.hi = (uchar4)( (s1 + 2) >> 2 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nint satd = satd_8x4_lp( src, src_stride, pred, 8 );\ndc0.lo = (uchar4)( (s3 + 2) >> 2 );\ndc0.hi = (uchar4)( (s1 + s3 + 4) >> 3 );\nvstore8( dc0, 0, pred );\nvstore8( dc0, 1, pred );\nvstore8( dc0, 2, pred );\nvstore8( dc0, 3, pred );\nreturn satd + satd_8x4_lp( src + ( src_stride << 2 ), src_stride, pred, 8 );\n}\n#endif\n/* Find the least cost intra mode for 32 8x8 macroblocks per workgroup\n*\n* Loads 33 macroblocks plus the pixels directly above them into local memory,\n* padding where necessary with edge pixels.  It then cooperatively calculates\n* smoothed top and left pixels for use in some of the analysis.\n*\n* Then groups of 32 threads each calculate a single intra mode for each 8x8\n* block.  Since consecutive threads are calculating the same intra mode there\n* is no code-path divergence.  8 intra costs are calculated simultaneously.  If\n* the \"slow\" argument is not zero, the final two (least likely) intra modes are\n* tested in a second pass.  The slow mode is only enabled for presets slow,\n* slower, and placebo.\n*\n* This allows all of the pixels functions to read pixels from local memory, and\n* avoids re-fetching edge pixels from global memory.  And it allows us to\n* calculate all of the intra mode costs simultaneously without branch divergence.\n*\n* Local dimension:    [ 32, 8 ]\n* Global dimensions:  [ paddedWidth, height ] */\nkernel void mb_intra_cost_satd_8x8( read_only image2d_t  fenc,\nglobal uint16_t     *fenc_intra_cost,\nglobal int          *frame_stats,\nint                  lambda,\nint                  mb_width,\nint                  slow )\n{\n#define CACHE_STRIDE 265\n#define BLOCK_OFFSET 266\nlocal pixel cache[2385];\nlocal int cost_buf[32];\nlocal pixel top[32 * 16];\nlocal pixel left[32 * 8];\nlocal pixel left_top[32];\nint lx = get_local_id( 0 );\nint ly = get_local_id( 1 );\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nint gidx = get_group_id( 0 );\nint gidy = get_group_id( 1 );\nint linear_id = ly * get_local_size( 0 ) + lx;\nint satd = COST_MAX;\nint basex = gidx << 8;\nint basey = (gidy << 3) - 1;\n/* Load 33 8x8 macroblocks and the pixels above them into local cache */\nfor( int y = 0; y < 9 && linear_id < (33<<3)>>2; y++ )\n{\nint x = linear_id << 2;\nuint4 data = read_imageui( fenc, sampler, (int2)(x + basex, y + basey) );\ncache[y * CACHE_STRIDE + 1 + x] = data.s0;\ncache[y * CACHE_STRIDE + 1 + x + 1] = data.s1;\ncache[y * CACHE_STRIDE + 1 + x + 2] = data.s2;\ncache[y * CACHE_STRIDE + 1 + x + 3] = data.s3;\n}\n/* load pixels on left edge */\nif( linear_id < 9 )\ncache[linear_id * CACHE_STRIDE] = read_imageui( fenc, sampler, (int2)( basex - 1, linear_id + basey) ).s0;\nbarrier( CLK_LOCAL_MEM_FENCE );\nint j = ly;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nj += 8;\ntop[lx*16 + j] = ( cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j - 1, -1, 15 )] +\n2*cache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j, 0, 15 )] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE + clamp_int( j + 1, 0, 15 )] + 2 ) >> 2;\nleft[lx*8 + ly] = ( cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*(ly - 1)] +\n2*cache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*ly] +\ncache[BLOCK_OFFSET + 8*lx - 1 + CACHE_STRIDE*clamp((ly + 1), 0, 7 )] + 2 ) >> 2;\nif( 0 == ly )\n{\nleft_top[lx] = ( cache[BLOCK_OFFSET + 8*lx - 1] + 2*cache[BLOCK_OFFSET + 8*lx - 1 - CACHE_STRIDE] +\ncache[BLOCK_OFFSET + 8*lx - CACHE_STRIDE] + 2 ) >> 2;\ncost_buf[lx] = COST_MAX;\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nswitch( ly )\n{\ncase 0:\nsatd = x264_predict_8x8c_h( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 1:\nsatd = x264_predict_8x8c_v( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 2:\nsatd = x264_predict_8x8c_dc( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 3:\nsatd = x264_predict_8x8c_p( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE );\nbreak;\ncase 4:\nsatd = x264_predict_8x8_ddr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 5:\nsatd = x264_predict_8x8_vr( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 6:\nsatd = x264_predict_8x8_hd( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx], &left[8*lx], left_top[lx] );\nbreak;\ncase 7:\nsatd = x264_predict_8x8_hu( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &left[8*lx] );\nbreak;\ndefault:\nbreak;\n}\natom_min( &cost_buf[lx], satd );\nif( slow )\n{\nswitch( ly )\n{\ncase 0: // DDL\nsatd = x264_predict_8x8_ddl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ncase 1: // VL\nsatd = x264_predict_8x8_vl( &cache[BLOCK_OFFSET + 8*lx], CACHE_STRIDE, &top[16*lx] );\natom_min( &cost_buf[lx], satd );\nbreak;\ndefault:\nbreak;\n}\n}\nbarrier( CLK_LOCAL_MEM_FENCE );\nif( (0 == ly) && (gx < mb_width) )\nfenc_intra_cost[gidy * mb_width + gx] = cost_buf[lx]+ 5*lambda;\nif( gx < 2 && gy == 0 )\nframe_stats[gx] = 0;\n#undef CACHE_STRIDE\n#undef BLOCK_OFFSET\n}\n/*\n* parallel sum intra costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_intra_cost( const global uint16_t *fenc_intra_cost,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_intra_cost[mb_xy];\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST,    cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\n}\n}\n/* Mode selection routines, select the least SATD cost mode for each lowres\n* macroblock.  When measuring B slices, this includes measuring the cost of\n* three bidir modes.  */\n/* Four threads cooperatively measure 8x8 BIDIR cost with SATD */\nint bidir_satd_8x8_ii_coop4( read_only image2d_t fenc_lowres,\nint2 fencpos,\nread_only image2d_t fref0_planes,\nint2 qpos0,\nread_only image2d_t fref1_planes,\nint2 qpos1,\nint weight,\nlocal sum2_t *tmpp,\nint idx )\n{\nvolatile local sum2_t( *tmp )[4] = (volatile local sum2_t( * )[4])tmpp;\nsum2_t b0, b1, b2, b3;\nsum2_t sum = 0;\nint2 fref0Apos = (int2)(qpos0.x>>2, qpos0.y>>2);\nint hpel0A = ((qpos0.x&2)>>1) + (qpos0.y&2);\nint2 qpos0B = (int2)qpos0 + (int2)(((qpos0.x&1)<<1), ((qpos0.y&1)<<1));\nint2 fref0Bpos = (int2)(qpos0B.x>>2, qpos0B.y>>2);\nint hpel0B = ((qpos0B.x&2)>>1) + (qpos0B.y&2);\nint2 fref1Apos = (int2)(qpos1.x>>2, qpos1.y>>2);\nint hpel1A = ((qpos1.x&2)>>1) + (qpos1.y&2);\nint2 qpos1B = (int2)qpos1 + (int2)(((qpos1.x&1)<<1), ((qpos1.y&1)<<1));\nint2 fref1Bpos = (int2)(qpos1B.x>>2, qpos1B.y>>2);\nint hpel1B = ((qpos1B.x&2)>>1) + (qpos1B.y&2);\nuint mask_shift0A = 8 * hpel0A, mask_shift0B = 8 * hpel0B;\nuint mask_shift1A = 8 * hpel1A, mask_shift1B = 8 * hpel1B;\nuint vA, vB;\nuint enc, ref0, ref1;\nuint a0, a1;\nconst int weight2 = 64 - weight;\n#define READ_BIDIR_DIFF( OUT, X )\\\nenc = read_imageui( fenc_lowres, sampler, fencpos + (int2)(X, idx) ).s0;\\\nvA = (read_imageui( fref0_planes, sampler, fref0Apos + (int2)(X, idx) ).s0 >> mask_shift0A) & 0xFF;\\\nvB = (read_imageui( fref0_planes, sampler, fref0Bpos + (int2)(X, idx) ).s0 >> mask_shift0B) & 0xFF;\\\nref0 = rhadd( vA, vB );\\\nvA = (read_imageui( fref1_planes, sampler, fref1Apos + (int2)(X, idx) ).s0 >> mask_shift1A) & 0xFF;\\\nvB = (read_imageui( fref1_planes, sampler, fref1Bpos + (int2)(X, idx) ).s0 >> mask_shift1B) & 0xFF;\\\nref1 = rhadd( vA, vB );\\\nOUT = enc - ((ref0 * weight + ref1 * weight2 + (1 << 5)) >> 6);\n#define READ_DIFF_EX( OUT, a, b )\\\nREAD_BIDIR_DIFF( a0, a );\\\nREAD_BIDIR_DIFF( a1, b );\\\nOUT = a0 + (a1<<BITS_PER_SUM);\n#define ROW_8x4_SATD( a, b, c )\\\nfencpos.y += a;\\\nfref0Apos.y += b;\\\nfref0Bpos.y += b;\\\nfref1Apos.y += c;\\\nfref1Bpos.y += c;\\\nREAD_DIFF_EX( b0, 0, 4 );\\\nREAD_DIFF_EX( b1, 1, 5 );\\\nREAD_DIFF_EX( b2, 2, 6 );\\\nREAD_DIFF_EX( b3, 3, 7 );\\\nHADAMARD4( tmp[idx][0], tmp[idx][1], tmp[idx][2], tmp[idx][3], b0, b1, b2, b3 );\\\nHADAMARD4( b0, b1, b2, b3, tmp[0][idx], tmp[1][idx], tmp[2][idx], tmp[3][idx] );\\\nsum += abs2( b0 ) + abs2( b1 ) + abs2( b2 ) + abs2( b3 );\nROW_8x4_SATD( 0, 0, 0 );\nROW_8x4_SATD( 4, 4, 4 );\n#undef READ_BIDIR_DIFF\n#undef READ_DIFF_EX\n#undef ROW_8x4_SATD\nreturn (((sum_t)sum) + (sum>>BITS_PER_SUM)) >> 1;\n}\n/*\n* mode selection - pick the least cost partition type for each 8x8 macroblock.\n* Intra, list0 or list1.  When measuring a B slice, also test three bidir\n* possibilities.\n*\n* fenc_lowres_mvs[0|1] and fenc_lowres_mv_costs[0|1] are large buffers that\n* hold many frames worth of motion vectors.  We must offset into the correct\n* location for this frame's vectors:\n*\n*   CPU equivalent: fenc->lowres_mvs[0][b - p0 - 1]\n*   GPU equivalent: fenc_lowres_mvs0[(b - p0 - 1) * mb_count]\n*\n* global launch dimensions for P slice estimate:  [mb_width, mb_height]\n* global launch dimensions for B slice estimate:  [mb_width * 4, mb_height]\n*/\nkernel void mode_selection( read_only image2d_t   fenc_lowres,\nread_only image2d_t   fref0_planes,\nread_only image2d_t   fref1_planes,\nconst global short2  *fenc_lowres_mvs0,\nconst global short2  *fenc_lowres_mvs1,\nconst global short2  *fref1_lowres_mvs0,\nconst global int16_t *fenc_lowres_mv_costs0,\nconst global int16_t *fenc_lowres_mv_costs1,\nconst global uint16_t *fenc_intra_cost,\nglobal uint16_t      *lowres_costs,\nglobal int           *frame_stats,\nlocal int16_t        *cost_local,\nlocal sum2_t         *satd_local,\nint                   mb_width,\nint                   bipred_weight,\nint                   dist_scale_factor,\nint                   b,\nint                   p0,\nint                   p1,\nint                   lambda )\n{\nint mb_x = get_global_id( 0 );\nint b_bidir = b < p1;\nif( b_bidir )\n{\n/* when mode_selection is run for B frames, it must perform BIDIR SATD\n* measurements, so it is launched with four times as many threads in\n* order to spread the work around more of the GPU.  And it can add\n* padding threads in the X direction. */\nmb_x >>= 2;\nif( mb_x >= mb_width )\nreturn;\n}\nint mb_y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint mb_count = mb_width * mb_height;\nint mb_xy = mb_x + mb_y * mb_width;\n/* Initialize int frame_stats[4] for next kernel (sum_inter_cost) */\nif( mb_x < 4 && mb_y == 0 )\nframe_stats[mb_x] = 0;\nint bcost = COST_MAX;\nint list_used = 0;\nif( !b_bidir )\n{\nint icost = fenc_intra_cost[mb_xy];\nCOPY2_IF_LT( bcost, icost, list_used, 0 );\n}\nif( b != p0 )\n{\nint mv_cost0 = fenc_lowres_mv_costs0[(b - p0 - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost0, list_used, 1 );\n}\nif( b != p1 )\n{\nint mv_cost1 = fenc_lowres_mv_costs1[(p1 - b - 1) * mb_count + mb_xy];\nCOPY2_IF_LT( bcost, mv_cost1, list_used, 2 );\n}\nif( b_bidir )\n{\nint2 coord = (int2)(mb_x, mb_y) << 3;\nint mb_i = get_global_id( 0 ) & 3;\nint mb_in_group = get_local_id( 1 ) * (get_local_size( 0 ) >> 2) + (get_local_id( 0 ) >> 2);\ncost_local += mb_in_group * 4;\nsatd_local += mb_in_group * 16;\n#define TRY_BIDIR( mv0, mv1, penalty )\\\n{\\\nint2 qpos0 = (int2)((coord.x<<2) + mv0.x, (coord.y<<2) + mv0.y);\\\nint2 qpos1 = (int2)((coord.x<<2) + mv1.x, (coord.y<<2) + mv1.y);\\\ncost_local[mb_i] = bidir_satd_8x8_ii_coop4( fenc_lowres, coord, fref0_planes, qpos0, fref1_planes, qpos1, bipred_weight, satd_local, mb_i );\\\nint cost = cost_local[0] + cost_local[1] + cost_local[2] + cost_local[3];\\\nCOPY2_IF_LT( bcost, penalty * lambda + cost, list_used, 3 );\\\n}\n/* temporal prediction */\nshort2 dmv0, dmv1;\nshort2 mvr = fref1_lowres_mvs0[mb_xy];\ndmv0 = (mvr * (short) dist_scale_factor + (short) 128) >> (short) 8;\ndmv1 = dmv0 - mvr;\nTRY_BIDIR( dmv0, dmv1, 0 )\nif( as_uint( dmv0 ) || as_uint( dmv1 ) )\n{\n/* B-direct prediction */\ndmv0 = 0; dmv1 = 0;\nTRY_BIDIR( dmv0, dmv1, 0 );\n}\n/* L0+L1 prediction */\ndmv0 = fenc_lowres_mvs0[(b - p0 - 1) * mb_count + mb_xy];\ndmv1 = fenc_lowres_mvs1[(p1 - b - 1) * mb_count + mb_xy];\nTRY_BIDIR( dmv0, dmv1, 5 );\n#undef TRY_BIDIR\n}\nlowres_costs[mb_xy] = min( bcost, LOWRES_COST_MASK ) + (list_used << LOWRES_COST_SHIFT);\n}\n/*\n* parallel sum inter costs\n*\n* global launch dimensions: [256, mb_height]\n*/\nkernel void sum_inter_cost( const global uint16_t *fenc_lowres_costs,\nconst global uint16_t *inv_qscale_factor,\nglobal int           *fenc_row_satds,\nglobal int           *frame_stats,\nint                   mb_width,\nint                   bframe_bias,\nint                   b,\nint                   p0,\nint                   p1 )\n{\nint y = get_global_id( 1 );\nint mb_height = get_global_size( 1 );\nint row_satds = 0;\nint cost_est = 0;\nint cost_est_aq = 0;\nint intra_mbs = 0;\nfor( int x = get_global_id( 0 ); x < mb_width; x += get_global_size( 0 ))\n{\nint mb_xy = x + y * mb_width;\nint cost = fenc_lowres_costs[mb_xy] & LOWRES_COST_MASK;\nint list = fenc_lowres_costs[mb_xy] >> LOWRES_COST_SHIFT;\nint b_frame_score_mb = (x > 0 && x < mb_width - 1 && y > 0 && y < mb_height - 1) || mb_width <= 2 || mb_height <= 2;\nif( list == 0 && b_frame_score_mb )\nintra_mbs++;\nint cost_aq = (cost * inv_qscale_factor[mb_xy] + 128) >> 8;\nrow_satds += cost_aq;\nif( b_frame_score_mb )\n{\ncost_est += cost;\ncost_est_aq += cost_aq;\n}\n}\nlocal int buffer[256];\nint x = get_global_id( 0 );\nrow_satds   = parallel_sum( row_satds, x, buffer );\ncost_est    = parallel_sum( cost_est, x, buffer );\ncost_est_aq = parallel_sum( cost_est_aq, x, buffer );\nintra_mbs   = parallel_sum( intra_mbs, x, buffer );\nif( b != p1 )\ncost_est = (int)((float)cost_est * 100.0f / (120.0f + (float)bframe_bias));\nif( get_global_id( 0 ) == 0 )\n{\nfenc_row_satds[y] = row_satds;\natomic_add( frame_stats + COST_EST, cost_est );\natomic_add( frame_stats + COST_EST_AQ, cost_est_aq );\natomic_add( frame_stats + INTRA_MBS, intra_mbs );\n}\n}\n/* Weightp filter a downscaled image into a temporary output buffer.\n* This kernel is launched once for each scale.\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_scaled_images( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint4 input_val;\nuint4 output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy));\noutput_val = (uint4)(offset) + ( ( ((uint4)(scale)) * input_val ) >> ((uint4)(denom)) );\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n/* Weightp filter for the half-pel interpolated image\n*\n* Launch dimensions: width x height (in pixels)\n*/\nkernel void weightp_hpel( read_only image2d_t in_plane,\nwrite_only image2d_t out_plane,\nuint offset,\nuint scale,\nuint denom )\n{\nint gx = get_global_id( 0 );\nint gy = get_global_id( 1 );\nuint input_val;\nuint output_val;\ninput_val = read_imageui( in_plane, sampler, (int2)(gx, gy)).s0;\nuint4 temp;\ntemp.s0 = input_val & 0x00ff; temp.s1 = (input_val >> 8) & 0x00ff;\ntemp.s2 = (input_val >> 16) & 0x00ff; temp.s3 = (input_val >> 24) & 0x00ff;\ntemp = (uint4)(offset) + ( ( ((uint4)(scale)) * temp ) >> ((uint4)(denom)) );\noutput_val = temp.s0 | (temp.s1 << 8) | (temp.s2 << 16) | (temp.s3 << 24);\nwrite_imageui( out_plane, (int2)(gx, gy), output_val );\n}\n/*\n* downscale lowres luma: full-res buffer to down scale image, and to packed hpel image\n*\n* --\n*\n* fenc_img is an output image (area of memory referenced through a texture\n* cache). A read of any pixel location (x,y) returns four pixel values:\n*\n* val.s0 = P(x,y)\n* val.s1 = P(x+1,y)\n* val.s2 = P(x+2,y)\n* val.s3 = P(x+3,y)\n*\n* This is a 4x replication of the lowres pixels, a trade-off between memory\n* size and read latency.\n*\n* --\n*\n* hpel_planes is an output image that contains the four HPEL planes used for\n* subpel refinement. A read of any pixel location (x,y) returns a UInt32 with\n* the four planar values C | V | H | F\n*\n* launch dimensions:  [lowres-width, lowres-height]\n*/\nkernel void downscale_hpel( const global pixel *fenc,\nwrite_only image2d_t fenc_img,\nwrite_only image2d_t hpel_planes,\nint stride )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nuint4 values;\nfenc += y * stride * 2;\nconst global pixel *src1 = fenc + stride;\nconst global pixel *src2 = (y == get_global_size( 1 )-1) ? src1 : src1 + stride;\nint2 pos = (int2)(x, y);\npixel right, left;\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s0 = rhadd( right, left );           // F\nright = rhadd( fenc[2*x+1], src1[2*x+1] );\nleft  = rhadd( fenc[2*x+2], src1[2*x+2] );\nvalues.s1 = rhadd( right, left );           // H\nright = rhadd( src1[2*x], src2[2*x] );\nleft  = rhadd( src1[2*x+1], src2[2*x+1] );\nvalues.s2 = rhadd( right, left );           // V\nright = rhadd( src1[2*x+1], src2[2*x+1] );\nleft  = rhadd( src1[2*x+2], src2[2*x+2] );\nvalues.s3 = rhadd( right, left );           // C\nuint4 val = (uint4) ((values.s3 & 0xff) << 24) | ((values.s2 & 0xff) << 16) | ((values.s1 & 0xff) << 8) | (values.s0 & 0xff);\nwrite_imageui( hpel_planes, pos, val );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s1 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s2 = rhadd( right, left );\nx = select( x, x+1, x+1 < get_global_size( 0 ) );\nright = rhadd( fenc[x*2], src1[x*2] );\nleft  = rhadd( fenc[x*2+1], src1[x*2+1] );\nvalues.s3 = rhadd( right, left );\nwrite_imageui( fenc_img, pos, values );\n}\n/*\n* downscale lowres hierarchical motion search image, copy from one image to\n* another decimated image.  This kernel is called iteratively to generate all\n* of the downscales.\n*\n* launch dimensions:  [lower_res width, lower_res height]\n*/\nkernel void downscale1( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\n/* these select statements appear redundant, and they should be, but tests break when\n* they are not here.  I believe this was caused by a driver bug\n*/\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/*\n* Second copy of downscale kernel, no differences. This is a (no perf loss)\n* workaround for a scheduling bug in current Tahiti drivers.  This bug has\n* theoretically been fixed in the July 2012 driver release from AMD.\n*/\nkernel void downscale2( read_only image2d_t higher_res, write_only image2d_t lower_res )\n{\nint x = get_global_id( 0 );\nint y = get_global_id( 1 );\nint2 pos = (int2)(x, y);\nint gs = get_global_size( 0 );\nuint4 top, bot, values;\ntop = read_imageui( higher_res, sampler, (int2)(x*2, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2, 2*y+1) );\nvalues.s0 = rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) );\nvalues.s1 = select( values.s0, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 1 < gs) );\ntop = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y) );\nbot = read_imageui( higher_res, sampler, (int2)(x*2+4, 2*y+1) );\nvalues.s2 = select( values.s1, rhadd( rhadd( top.s0, bot.s0 ), rhadd( top.s1, bot.s1 ) ), ( x + 2 < gs ) );\nvalues.s3 = select( values.s2, rhadd( rhadd( top.s2, bot.s2 ), rhadd( top.s3, bot.s3 ) ), ( x + 3 < gs ) );\nwrite_imageui( lower_res, pos, (uint4)(values) );\n}\n/* OpenCL 1.2 finally added a memset command, but we're not targeting 1.2 */\nkernel void memset_int16( global int16_t *buf, int16_t value )\n{\nbuf[get_global_id( 0 )] = value;\n}\n", "814936438f8cf00004e1bd36cdf21100", "../../common/macroblock.c", "x264_macroblock_bipred_init", "dist_scale_factor >= -63 && dist_scale_factor <= 127", "This build of x264 requires 8-bit input. Rebuild to support high depth input.\n", "v210 input is only compatible with bit-depth of 10 bits\n", "forced frame type (%d) at %d is unknown\n", "../../common/frame.c", "x264_frame_pop", "list[0]", "x264_frame_shift", "x264_frame_push_unused", "frame->i_reference_count > 0", "x264_frame_push_blank_unused", "Input picture width (%d) is greater than stride (%d)\n", "ARMv8", "NEON", "can't open file '%s'\n", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", " \t\n,", "0123456789", "bad coefficient in list '%s'\n", "not enough coefficients in list '%s'\n", "../../encoder/analyse.c", "x264_macroblock_analyse", "h->mb.cache.pskip_mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "internal error (!8x8 && !4x4)\n", "../../encoder/slicetype.c", "x264_slicetype_analyse", "h->frames.b_have_lowres", "forced frame type (%d) at %d was changed to frame type (%d)\n", "B-ref at frame %d incompatible with B-pyramid %s \n", "B-ref at frame %d incompatible with B-pyramid %s and %d reference frames\n", "specified frame type (%d) at %d is not compatible with keyframe interval\n", "specified frame type is not compatible with max B-frames\n", "x264_rc_analyse_slice", "cost >= 0", "../../encoder/cabac.c", "x264_cabac_8x8_mvd", "x264_mb_analyse_inter_p16x16", "a->l0.me16x16.mv[1] <= h->mb.mv_max_spel[1] || h->i_thread_frames == 1", "internal error\n", "internal error P_L0 and partition=%d\n", "internal error (invalid MB type)\n", "internal error (MV out of thread range)\n", "mb type: %d \n", "mv: l%dr%d (%d,%d) \n", "limit: %d \n", "mb_xy: %d,%d \n", "completed: %d \n", "recovering by using intra mode\n", "scene cut at %d Icost:%d Pcost:%d ratio:%.4f bias:%.4f gop:%d (imb:%d pmb:%d)\n", "PBIMB-tree frametype %d doesn't match actual frametype %d.\n", "Incomplete MB-tree stats file.\n", "VBV buffer size cannot be smaller than one frame, using %d kbit\n", "VBV parameters cannot be changed when NAL HRD is in use\n", "CRF max must be greater than CRF\n", "constant rate-factor is incompatible with 2pass.\n", "HRD with very large timescale and bufsize not supported\n", "bitrate tolerance too small, using .01\n", "failed to parse zones\n", "../../encoder/ratecontrol.c", "x264_ratecontrol_new", "h->param.rc.psz_stat_in", "ratecontrol_init: can't open stats file\n", "ratecontrol_init: can't open mbtree stats file\n", "#options:", "options list in stats file not valid\n", "#options: %dx%d", "resolution specified in stats file not valid\n", "timebase=", "timebase=%u/%u", "timebase specified in stats file not valid\n", "timebase mismatch with 1st pass (%u/%u vs %u/%u)\n", "bitdepth=", "bitdepth=%d", "different bitdepth setting than first pass (%d vs %d)\n", "weightp=", "different weightp setting than first pass (%d vs %d)\n", "bframes=", "different bframes setting than first pass (%d vs %d)\n", "b_pyramid=", "b_pyramid=%d", "different b_pyramid setting than first pass (%d vs %d)\n", "intra_refresh=", "different intra_refresh setting than first pass (%d vs %d)\n", "open_gop=", "different open_gop setting than first pass (%d vs %d)\n", "bluray_compat=", "different bluray_compat setting than first pass (%d vs %d)\n", "interlaced=", "interlaced=%4s", "different interlaced setting than first pass (%s vs %s)\n", "keyint=", "different keyint setting than first pass (%.*s vs %.*s)\n", "qp=0", "1st pass was lossless, bitrate prediction will be inaccurate\n", "direct=3", "direct=auto not used on the first pass\n", "b_adapt=", "b_adapt=%d", "b_adapt method specified in stats file not valid\n", "rc_lookahead=", "empty stats file\n", "2nd pass has fewer frames than 1st pass (%d vs %d)\n", "2nd pass has more frames than 1st pass (%d vs %d)\n", " in:%d out:%d ", "bad frame number (%d) at stats line %d\n", "bad frame output number (%d) at stats line %d\n", " in:%*d out:%*d type:%c dur:%ld cpbdur:%ld q:%f aq:%f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c", "w:%hd,%hd,%hd,%hd,%hd,%hd,%hd,%hd", "statistics are damaged at line %d, parser out=%d\n", "#options: %s\n", ".mbtree.temp", "final ratefactor: %.2f\n", "failed to rename \"%s\" to \"%s\"\n", "x264_ratecontrol_start", "frame >= 0 && frame < rc->num_entries", "2nd pass has more frames than 1st pass (%d)\n", "continuing anyway, at constant QP=%d\n", "disabling adaptive B-frames\n", "in:%d out:%d type:%c dur:%ld cpbdur:%ld q:%.2f aq:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c ref:", "w:%d,%d,%d", ",%d,%d,%d,%d,%d ", "ratecontrol_end: stats file could not be written to\n", "CPB %s: %.0f bits in a %.0f-bit buffer\n", "underflow", "invalid zone: start=%d end=%d\n", "invalid zone: bitrate_factor=%f\n", "%d,%d,q=%d%n", "%d,%d,b=%f%n", "%d,%d%n", "invalid zone: \"%s\"\n", "invalid zone param: %s = %s\n", "VBV underflow due to CRF-max (frame %d, %.0f bits)\n", "VBV underflow (frame %d, %.0f bits)\n", "slice=%c but 2pass stats say %c\n", "requested bitrate is too low. estimated minimum is %d kbps\n", "init_pass2", "qscale[i] >= 0", "rce->new_qscale >= 0", "Error: 2pass curve failed to converge\n", "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", "try reducing target bitrate or reducing qp_min (currently %d)\n", "try reducing target bitrate\n", "try increasing target bitrate or increasing qp_max (currently %d)\n", "try increasing target bitrate\n", "vbv-maxrate issue, qpmax or vbv-maxrate too low\n", "clCreateImage2D error '%d'\n", "clCreateBuffer error '%d'\n", "clEnqueueWriteBuffer error '%d'\n", "clSetKernelArg error '%d'\n", "clEnqueueNDRangeKernel error '%d'\n", "clEnqueueReadBuffer error '%d'\n", "clEnqueueCopyBuffer error '%d'\n", "../../encoder/slicetype-cl.c", "x264_opencl_alloc_locked", "bytes < PAGE_LOCKED_BUF_SIZE", "x264_macroblock_cache_rect", "MPEG Transport", "SBR Decoder", "SBR Encoder", "@33#", "This program is protected by copyright law and international treaties.\nAny reproduction or distribution of this program, or any portion\nof it, may result in severe civil and criminal penalties, and will be\nprosecuted to the maximum extent possible under law.\n\n", "_{fI", "set input channel count", "in_channel_count", "set output channel count", "out_channel_count", "set used channel count", "used_channel_count", "set input sample rate", "set output sample rate", "set input sample format", "set output sample format", "set internal sample format", "internal_sample_fmt", "set input channel layout", "set output channel layout", "clev", "set center mix level", "slev", "set surround mix level", "surround_mix_level", "set surround mix Level", "lfe_mix_level", "set LFE mix level", "rmvol", "set rematrix volume", "rematrix_volume", "rematrix_maxval", "set rematrix maxval", "set flags", "swr_flags", "force resampling", "dither_scale", "set dither scale", "dither_method", "set dither method", "rectangular", "select rectangular dither", "triangular", "select triangular dither", "triangular_hp", "select triangular dither with high pass", "lipshitz", "select Lipshitz noise shaping dither", "select Shibata noise shaping dither", "low_shibata", "select low Shibata noise shaping dither", "high_shibata", "select high Shibata noise shaping dither", "f_weighted", "select f-weighted noise shaping dither", "modified_e_weighted", "select modified-e-weighted noise shaping dither", "improved_e_weighted", "select improved-e-weighted noise shaping dither", "set swr resampling filter size", "phase_shift", "set swr resampling phase shift", "linear_interp", "enable linear interpolation", "exact_rational", "enable exact rational", "set cutoff frequency ratio", "resample_cutoff", "resampler", "set resampling Engine", "select SW Resampler", "soxr", "select SoX Resampler", "set soxr resampling precision (in bits)", "cheby", "enable soxr Chebyshev passband & higher-precision irrational ratio approximation", "min_comp", "set minimum difference between timestamps and audio data (in seconds) below which no timestamp compensation of either kind is applied", "min_hard_comp", "set minimum difference between timestamps and audio data (in seconds) to trigger padding/trimming the data.", "comp_duration", "set duration (in seconds) over which data is stretched/squeezed to make it match the timestamps.", "max_soft_comp", "set maximum factor by which data is stretched/squeezed to make it match the timestamps.", "simplified 1 parameter audio timestamp matching, 0(disabled), 1(filling and trimming), >1(maximum stretch/squeeze in samples per second)", "first_pts", "Assume the first pts should be this value (in samples).", "matrix_encoding", "set matrixed stereo encoding", "select none", "dolby", "select Dolby", "dplii", "select Dolby Pro Logic II", "filter_type", "select swr filter type", "select cubic", "blackman_nuttall", "select Blackman Nuttall windowed sinc", "kaiser", "select Kaiser windowed sinc", "kaiser_beta", "set swr Kaiser window beta", "output_sample_bits", "set swr number of output sample bits", "libswresample license: nonfree and unredistributable", "Failed to set option\n", "Requested input sample format %d is invalid\n", "Requested output sample format %d is invalid\n", "Input channel layout 0x%lx is invalid or unsupported.\n", "Output channel layout 0x%lx is invalid or unsupported.\n", "Requested resampling engine is unavailable\n", "Input channel layout has a different number of channels than the number of used channels, ignoring layout\n", "Using %s internally between filters\n", "Requested sample format %s is not supported internally, S16/S32/S64/FLT/DBL is supported\n", "Failed to initialize resampler\n", "Resampling only supported with internal s16/s32/flt/dbl\n", "!s->in_ch_layout", "src/libswresample/swresample.c", "Input channel count and layout are unset\n", "Output channel layout %s mismatches specified channel count %d\n", "Input channel layout %s mismatches specified channel count %d\n", "Rematrix is needed between %s and %s but there is not enough information to do it\n", "!s->preout.count", "a->bps", "a->ch_count", "Context has not been initialized\n", "s->drop_output", "discarding %d audio samples\n", "adding %d audio samples of silence\n", "s->out_sample_rate == s->in_sample_rate", "Failed to compensate for timestamp delta of %f\n", "compensating audio timestamp drift:%f compensation:%d in:%d\n", "!s->resample", "s->midbuf.ch_count == s->used_ch_count", "s->midbuf.ch_count == s->out.ch_count", "s->in.planar", "s->dither.noise.ch_count == preout->ch_count", "out->planar == in->planar", "out->bps == in->bps", "out->ch_count == in->ch_count", "src/libswresample/audioconvert.c", "src/libswresample/dither.c", "Requested noise shaping dither not available at this sampling rate, using triangular hp dither\n", "Output channel layout '%s' is not supported\n", "src/libswresample/rematrix.c", "Matrix coefficients:\n", "%s:%f ", "!s->out_ch_layout || out->ch_count == av_get_channel_layout_nb_channels(s->out_ch_layout)", "!s-> in_ch_layout || in ->ch_count == av_get_channel_layout_nb_channels(s-> in_ch_layout)", "Treating %s as mono\n", "src/libswresample/resample.c", "Filter length too large\n", "a->planar", "!c->frac && !c->dst_incr_mod && !c->compensation_distance", "+inf", "-infinity", "-inf", "+nan", "-nan", "tail_len <= 5", "src/libavutil/avstring.c", "'\\''", "%d channels", "3.0(back)", "quad", "quad(side)", "5.0(side)", "5.1(side)", "6.0(front)", "hexagonal", "6.1(back)", "6.1(front)", "7.0(front)", "7.1(wide)", "7.1(wide-side)", "octagonal", "hexadecagonal", "downmix", "low frequency", "front left-of-center", "front right-of-center", "side left", "side right", "top center", "top front left", "top front center", "top front right", "top back left", "top back center", "top back right", "downmix left", "downmix right", "wide left", "wide right", "surround direct left", "surround direct right", "LFE2", "low frequency 2", "armv8", "cpuflags", "detected %d logical cores\n", "%Y-%m-%dT%H:%M:%S", ".%06dZ", "BSF_NOT_FOUND", "Bitstream filter not found", "Internal bug, should not have happened", "BUG2", "BUFFER_TOO_SMALL", "DECODER_NOT_FOUND", "Decoder not found", "DEMUXER_NOT_FOUND", "Demuxer not found", "ENCODER_NOT_FOUND", "Encoder not found", "Immediate exit requested", "Generic error in an external library", "FILTER_NOT_FOUND", "Filter not found", "INPUT_CHANGED", "Input changed", "INVALIDDATA", "Invalid data found when processing input", "Muxer not found", "OPTION_NOT_FOUND", "Option not found", "Output changed", "PATCHWELCOME", "Not yet implemented in FFmpeg, patches welcome", "PROTOCOL_NOT_FOUND", "Protocol not found", "STREAM_NOT_FOUND", "Stream not found", "Unknown error occurred", "EXPERIMENTAL", "Experimental feature", "INPUT_AND_OUTPUT_CHANGED", "Input and output changed", "HTTP_BAD_REQUEST", "Server returned 400 Bad Request", "HTTP_UNAUTHORIZED", "Server returned 401 Unauthorized (authorization failed)", "HTTP_FORBIDDEN", "Server returned 403 Forbidden (access denied)", "HTTP_NOT_FOUND", "Server returned 404 Not Found", "HTTP_OTHER_4XX", "Server returned 4XX Client Error, but not one of 40{0,1,3,4}", "HTTP_SERVER_ERROR", "Server returned 5XX Server Error reply", "Invalid chars '%s' at the end of expression '%s'\n", "Eval", "Undefined constant or missing '(' in '%s'\n", "Missing ')' in '%s'\n", "Missing ')' or too many args in '%s'\n", "Unknown function in '%s'\n", "QP2LAMBDA", "ff_tempfile: Cannot allocate file name\n", "/tmp/%sXXXXXX", "./%sXXXXXX", "ff_tempfile: Cannot open temporary file %s\n", "TEMPFILE", "AVPanScan", "ATSC A53 Part 4 Closed Captions", "Stereoscopic 3d metadata", "AVMatrixEncoding", "Metadata relevant to a downmix procedure", "AVReplayGain", "3x3 displaymatrix", "Active format description", "Motion vectors", "Skip samples", "Audio service type", "GOP timecode", "AVHWFramesContext", "Formats with a palette require a minimum alignment of 4\n", "Picture size %ux%u is invalid\n", "abs(src_linesize) >= bytewidth", "src/libavutil/imgutils.c", "abs(dst_linesize) >= bytewidth", "av_image_get_linesize failed\n", "IMGUTILS", "    Last message repeated %d times\r", "    Last message repeated %d times\n", "[%s @ %p] ", "[%s] ", "quiet", "verbose", "panic", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "256color", "src/libavutil/mathematics.c", "duration >= 0", "Unable to parse option value \"%s\" as channel layout\n", "Invalid option type.\n", "The value set by option '%s' is not an image size.\n", "Invalid negative size value %dx%d for size '%s'\n", "The value set by option '%s' is not a video rate.\n", "pixel", "The value set by option '%s' is not a channel layout.\n", "0x%08X", "0x%02x%02x%02x%02x", "0x%lx", "The value for option '%s' is not an image size.\n", "The value for option '%s' is not a channel layout.\n", "%s AVOptions:\n", "AVOption type %d of option %s not implemented yet\n", "No option name near '%s'\n", "Unable to parse '%s': %s\n", "Setting '%s' to value '%s'\n", "Option '%s' not found\n", "Error setting option %s to value %s.\n", "Not supported option type: %d, option name: %s\n", "Invalid separator(s) found.", "true,y,yes,enable,enabled,on", "false,n,no,disable,disabled,off", "Unable to parse option value \"%s\" as boolean\n", "%d%*1[:/]%d%c", "const_values array too small for %s\n", "Unable to parse option value \"%s\"\n", "Unable to parse option value \"%s\" as image size\n", "Unable to parse option value \"%s\" as video rate\n", "Value %f for parameter '%s' out of range [%g - %g]\n", "Value %f for parameter '%s' is not a valid set of 32bit integer flags\n", "Unable to parse option value \"%s\" as %s\n", "Value %d for parameter '%s' out of %s format range [%d - %d]\n", "Unable to parse option value \"%s\" as color\n", "The value set by option '%s' is not a %s format", "size >= 25", "src/libavutil/opt.c", "INT64_MAX", "INT64_MIN", "%ld:%02d:%02d.%06d", "%d:%02d.%06d", "The value for option '%s' is not a %s format.\n", "     %-15s ", "  %s%-17s ", "%-12s ", "<flags>", "<int>", "<int64>", "<double>", "<float>", "<string>", "<rational>", "<binary>", "<image_size>", "<video_rate>", "<pix_fmt>", "<sample_fmt>", "<duration>", "<color>", "<channel_layout>", "<boolean>", " (from ", " (default ", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "-FLT_MAX", "-FLT_MIN", "-DBL_MAX", "-DBL_MIN", "Missing key or no key/value separator found after key '%s'\n", "Setting entry with key '%s' to value '%s'\n", "bikeshed", "0123456789ABCDEFabcdef", "Invalid 0xRRGGBB[AA] color string: '%s'\n", "Cannot find color '%s'\n", "Invalid alpha value specifier '%s' in '%s'\n", "%Y - %m - %d", "%Y%m%d", "%H%M%S", "%H:%M", "%H%M", "%J:%M:%S", "qntsc", "qpal", "sntsc", "spal", "ntsc-film", "sqcif", "4cif", "16cif", "qqvga", "svga", "qxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd720", "hd1080", "2kdci", "2kflat", "2kscope", "4kdci", "4kflat", "4kscope", "hqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "BlueViolet", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "CornflowerBlue", "Cornsilk", "Crimson", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Plum", "PowderBlue", "RosyBrown", "RoyalBlue", "SaddleBrown", "SandyBrown", "SeaShell", "Sienna", "Silver", "Teal", "Thistle", "Tomato", "Wheat", "WhiteSmoke", "YellowGreen", "bgra", "bgr32", "rgba", "vaapi", "name nb_components nb_bits", "%-11s %7d %10d", "src/libavutil/pixdesc.c", "d->name && d->name[0]", "(d->nb_components==4 || d->nb_components==2) == !!(d->flags & (1 << 7))", "!c->plane && !c->step && !c->offset && !c->shift && !c->depth", "8*c->step >= c->depth", "bayer_", "tmp[0] == 0 && tmp[1] == 0", "yuv420p", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "gray8,y8", "monow", "monob", "pal8", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "gray16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "0rgb", "rgb0", "0bgr", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "yuvj", "smpte428-1", "bt2020-20", "ycgco", "s16p", "s32p", "fltp", "dblp", "s64p", "name   depth", "%-6s   %2d ", "side by side", "top and bottom", "frame alternate", "side by side (quincunx subsampling)", "interleaved lines", "interleaved columns", "%s%02d:%02d:%02d%c%02d", "%02u:%02u:%02u%c%02u", "%d:%d:%d%c%d", "Unable to parse timecode, syntax: hh:mm:ss[:;.]ff\n", "Timecode frame rate must be specified\n", "Drop frame is only allowed with 30000/1001 or 60000/1001 FPS\n", "Using non-standard frame rate %d/%d\n", "Libavutil has been linked to a broken llrint()\n", "libavutil license: nonfree and unredistributable", "!\"valid element size\"", "src/libavutil/utils.c", "N3avc10ByteStreamE", "N3avc26DecoderConfigurationRecordE", "N3avc4NaluE", "N3avc6SampleE", "N3flv9AudioDataE", "N3flv14AudioTagHeaderE", "N3flv6HeaderE", "N3flv3TagE", "N3flv9TagHeaderE", "N3flv9VideoDataE", "N3flv14VideoTagHeaderE"], "stringidentifiers": ["basic_string", "peek", "getConfigurationVersion", "setConfigurationVersion", "getProfileIndicator", "setProfileIndicator", "getProfileCompatibility", "setProfileCompatibility", "getLevelIndicator", "setLevelIndicator", "getLengthSize", "setLengthSize", "getSPSCount", "getPPSCount", "getSPS", "getPPS", "putSPS", "putPPS", "clearSPS", "clearPPS", "getProtocols", "sendAudio", "sendVideo", "sendData", "dispose", "estimateBitrate", "getExtraTime", "setPcmCallback", "setPcmMuted", "NSt6__ndk114basic_iostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_istreamIcNS_11char_traitsIcEEEE", "NSt6__ndk19basic_iosIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEEE", "NSt6__ndk118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk115basic_streambufIcNS_11char_traitsIcEEEE", "pushUrl", "streamUrl", "token", "hostids", "hosturls", "addStreamAccessHost", "removeStreamAccessHost", "setFlagsOption", "setClientInfo", "createStream", "setHosts", "getHosts", "getVersion", "onConnected", "onConnect", "NSt6__ndk120__shared_ptr_pointerIPN3arc10SlotHandleENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc10SlotHandleEEE", "NSt6__ndk110__function6__baseIFviRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE", "NSt6__ndk110__function6__baseIFviPKcEEE", "N5stari15PlayerInterfaceE", "extrats", "switch", "N3kax6PlayerE", "N3arc6SignalIJFvPN3kax6PlayerEEEEE", "N3arc6SignalIJFvPN3kax6PlayerEbEEEE", "N3arc6SignalIJFvPN3kax6PlayerEiiEEEE", "N3arc6SignalIJFvPN3kax6PlayerEiEEEE", "NSt6__ndk117bad_function_callE", "N5stari10JavaMethodE", "libfdk_aac", "N5stari14AvAudioEncoderE", "preset", "superfast", "tune", "zerolatency", "sc_threshold", "autovariance", "weightp", "N5stari14AvVideoEncoderE", "mNativeMediaPlayer", "mNativeMediaDataSource", "postEventFromNative", "onSelectCodec", "onNativeInvoke", "IJKMEDIA", "ijkmp_set_inject_opaque", "ijkmp_get_video_codec_info", "ijkmp_get_audio_codec_info", "ijkmp_set_playback_rate", "ijkmp_set_playback_volume", "ijkmp_set_stream_selected", "ijkmp_get_meta_l", "ff_msg_loop", "_setDataSource", "_pause", "isPlaying", "getCurrentPosition", "getDuration", "_getColorFormatName", "_getPropertyFloat", "_setPropertyFloat", "_getPropertyLong", "_setPropertyLong", "_setStreamSelected", "IjkMediaPlayer_setDataSourceAndHeaders", "IjkMediaPlayer_setDataSourceFd", "IjkMediaPlayer_setDataSourceCallback", "IjkMediaPlayer_setVideoSurface", "IjkMediaPlayer_prepareAsync", "IjkMediaPlayer_start", "IjkMediaPlayer_seekTo", "IjkMediaPlayer_release", "IjkMediaPlayer_reset", "IjkMediaPlayer_setVolume", "IjkMediaPlayer_getAudioSessionId", "IjkMediaPlayer_native_init", "IjkMediaPlayer_native_setup", "message_loop", "IjkMediaPlayer_native_finalize", "IjkMediaPlayer_setOption", "IjkMediaPlayer_setOptionLong", "IjkMediaPlayer_getVideoCodecInfo", "IjkMediaPlayer_getAudioCodecInfo", "IjkMediaPlayer_getMediaMeta", "duration_us", "start_us", "timedtext", "codec_name", "codec_profile", "codec_level", "codec_long_name", "codec_pixel_format", "codec_profile_id", "fps_num", "fps_den", "tbr_num", "tbr_den", "sar_num", "sar_den", "IjkMediaPlayer_setLoopCount", "IjkMediaPlayer_getLoopCount", "deselect", "IjkMediaPlayer_native_profileBegin", "IjkMediaPlayer_native_profileEnd", "IjkMediaPlayer_native_setLogLevel", "inject_callback", "segment_index", "retry_counter", "http_code", "family", "av_base64_encode", "zDFFPlayer", "ijkapplication", "rtsp", "ffp_prepare_async_l", "ijkplayer", "FFmpeg", "libavutil", "libavcodec", "libavformat", "libswscale", "libswresample", "nodisp", "infbuf", "framedrop", "rdftspeed", "videotoolbox", "ff_vout", "ff_read", "scan_all_pmts", "AVERROR_EOF", "AVERROR_EXIT", "refcounted_frames", "ff_audio_dec", "ff_video_dec", "ff_subtitle_dec", "SDL_AUDIO_CHANNELS", "center_mix_level", "SDL_JNI_DetachThreadEnv", "SDL_JNI_ThreadDestroyed", "Format12bitRGB444", "Format16bitARGB4444", "Format16bitARGB1555", "Format16bitRGB565", "Format16bitBGR565", "Format18bitRGB666", "Format18bitARGB1665", "Format19bitARGB1666", "Format24bitRGB888", "Format24bitBGR888", "Format24bitARGB1887", "Format25bitARGB1888", "Format32bitBGRA8888", "Format32bitARGB8888", "FormatYUV411Planar", "FormatYUV411PackedPlanar", "FormatYUV420Planar", "FormatYUV420PackedPlanar", "FormatYUV420SemiPlanar", "FormatYUV422Planar", "FormatYUV422PackedPlanar", "FormatYUV422SemiPlanar", "FormatYCbYCr", "FormatYCrYCb", "FormatCbYCrY", "FormatCrYCbY", "FormatYUV444Interleaved", "FormatRawBayer8bit", "FormatRawBayer10bit", "FormatRawBayer8bitcompressed", "FormatL2", "FormatL4", "FormatL8", "FormatL16", "FormatL24", "FormatL32", "FormatYUV422PackedSemiPlanar", "Format18BitBGR666", "Format24BitARGB6666", "Format24BitABGR6666", "FormatSurface", "FormatYUV420Flexible", "INTEL_FormatYUV420PackedSemiPlanar", "INTEL_FormatYUV420PackedSemiPlanar_Tiled", "QCOM_FormatYVU420SemiPlanar", "QCOM_FormatYVU420PackedSemiPlanar32m4ka", "QCOM_FormatYUV420PackedSemiPlanar16m2ka", "QCOM_FormatYUV420PackedSemiPlanar64x32Tile2m8ka", "QCOM_FORMATYUV420PackedSemiPlanar32m", "QCOM_FORMATYUV420PackedSemiPlanar32mMultiView", "SEC_FormatNV12TPhysicalAddress", "SEC_FormatNV12LPhysicalAddress", "SEC_FormatNV12LVirtualAddress", "SEC_FormatNV12Tiled", "SEC_FormatNV21LPhysicalAddress", "SEC_FormatNV21Linear", "TI_FormatYUV420PackedSemiPlanar", "FormatUnknown", "J4A_ThrowExceptionOfClass", "J4A_ThrowException", "J4A_NewGlobalRef__catchAll", "J4A_FindClass__catchAll", "J4A_FindClass__asGlobalRef__catchAll", "J4A_GetMethodID__catchAll", "J4A_GetStaticMethodID__catchAll", "J4A_GetFieldID__catchAll", "J4A_GetStaticFieldID__catchAll", "getMinBufferSize", "getMaxVolume", "getMinVolume", "getNativeOutputSampleRate", "setStereoVolume", "getPlaybackParams", "setPlaybackParams", "getStreamType", "getSampleRate", "getPlaybackRate", "setPlaybackRate", "presentationTimeUs", "configure", "getInputBuffers", "getInteger", "setInteger", "setByteBuffer", "SDK_INT", "getInt", "putInt", "getString", "putString", "putParcelableArrayList", "getLong", "putLong", "allocate", "allocateDirect", "readAt", "getSize", "ijklivehook", "AVApplicationContext", "formatprobesize", "analyzeduration", "fpsprobesize", "max_ts_probe", "ijktcphook", "ijkhttphook", "TcpHook", "ijkhttphook_open", "remain", "ijkhttphook_read", "ijkhttphook_seek", "HttpHook", "ijkmediadatasource", "ijkmds_open", "ijkmds_read", "ijkmds_seek", "ijkmds_close", "IjkMediaDataSource", "ijklongurl", "LongUrl", "ijkmp_android_get_audio_session_id", "ffpipeline_get_surface_as_global_ref_l", "ffpipeline_set_vout", "ffpipeline_set_surface", "ffpipeline_is_surface_need_reconfigure_l", "ffpipeline_set_surface_need_reconfigure_l", "ffpipeline_set_mediacodec_select_callback", "ffpipeline_select_mediacodec_l", "ffpipeline_set_volume", "ffpipeline_android_media", "ffpipenode_create_video_decoder_from_android_mediacodec", "func_run_sync", "amediacodec_input_thread", "enqueue_thread_func", "feed_input_buffer", "drain_output_buffer_l", "stride", "recreate_format_l", "reconfigure_codec_l", "ff_aout_android", "SDL_AoutAndroid_CreateForOpenSLES", "aout_open_audio", "ff_aout_opensles", "aout_thread_n", "aout_get_latency_seconds", "SDL_AMediaCodec_increaseReference", "SDL_AMediaCodec_decreaseReference", "SDL_AMediaCodecDummy_create", "AMediaCodecDummy", "SDL_AMediaCodecJava_getOutputFormat", "SDL_AMediaCodecJava_dequeueInputBuffer", "SDL_AMediaCodecJava_dequeueOutputBuffer", "SDL_AMediaCodecJava_releaseOutputBuffer", "false", "SDL_AMediaCodecJava_createByCodecName", "SDL_AMediaCodecJava_init", "AMediaCodecJava", "SDL_AMediaCodecJava_delete", "SDL_AMediaCodecJava_configure_surface", "SDL_AMediaCodecJava_start", "SDL_AMediaCodecJava_stop", "SDL_AMediaCodecJava_flush", "SDL_AMediaCodecJava_writeInputData", "SDL_AMediaFormatJava_init", "SDL_AMediaFormatJava_createVideoFormat", "SDL_AMediaFormatJava_delete", "SDL_AMediaFormatJava_getInt32", "SDL_AMediaFormatJava_setInt32", "SDL_AMediaFormatJava_setBuffer", "ANativeWindow_Vout", "SDL_VoutAndroid_releaseBufferProxy_l", "SDL_VoutAndroid_SetAndroidSurface", "SDL_VoutOverlayAMediaCodec_isKindOf", "SDL_VoutOverlayAMediaCodec_releaseFrame_l", "AndroidMediaCodecVoutOverlay", "func_fill_frame", "FFmpegVoutOverlay", "glViewport", "ijksegment", "Inject", "audiotrack_get_native_output_sample_rate", "CHANNEL_OUT_MONO", "CHANNEL_OUT_STEREO", "SDL_Android_AudioTrack_new_from_spec", "ENCODING_PCM_16BIT", "ENCODING_PCM_8BIT", "SDL_Android_AudioTrack_write", "AUDIO_U8", "AUDIO_F32", "ENCODING_PCM_FLOAT", "HAL_YV12", "HAL_RGB_565", "RV16", "HAL_RGBX_8888", "HAL_RGBA_8888", "HAL_BGRA_8888", "RV32", "glLinkProgram", "av4_Position", "av2_Texcoord", "um4_ModelViewProjection", "Vendor", "Renderer", "glClearColor", "glCullFace", "glClear", "glDrawArrays", "us2_SamplerX", "glUseProgram", "us2_SamplerY", "us2_SamplerZ", "um3_ColorConversion", "glBindTexture", "glTexImage2D", "glCreateShader", "glShaderSource", "glCompileShader", "J4AC_android_media_AudioTrack__setSpeed", "J4AC_android_media_AudioTrack__setSpeed__catchAll", "LIBYUV_DISABLE_NEON", "LIBYUV_DISABLE_ASM", "NSt6__ndk110__function6__baseIFvvEEE", "GFLAGS_NAMESPACE::int32", "kax_speed_change", "bool", "N3kax14PlayerDelegateE", "N3kix11ExitWatcherIN3kax14PlayerDelegateEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax14PlayerDelegateEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax14PlayerDelegateEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEbEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiiEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_iiEEUlS6_iiE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEiiEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEiiEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_iiEEUlS3_iiE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS4_14PlayerDelegateEEERS8_PT_MSC_FvS6_iEEUlS6_iE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kax6PlayerEiEEE", "ZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS1_14PlayerDelegateEEERS5_PT_MS9_FvS3_iEEUlS3_iE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14PlayerDelegateEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14PlayerDelegateEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax14PlayerDelegateEFvvEEE", "NSt6__ndk114unary_functionIPN3kax14PlayerDelegateEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kix5TimerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix5TimerEEE", "N3kax13PlayerManagerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax14PlayerDelegateENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14PlayerDelegateEEE", "skax", "ssrt", "N3kax12_GLOBAL__N_17DerivedINS_10MeProtocolEEE", "N3kax12_GLOBAL__N_17DerivedINS_11KaxProtocolEEE", "RemoteLogger", "RemoteLoggerProbe", "StderrLogger", "N3kax12RemoteLoggerE", "N3kix11ExitWatcherIN3kax12RemoteLoggerEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12RemoteLoggerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12RemoteLoggerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12RemoteLoggerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12RemoteLoggerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12RemoteLoggerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12RemoteLoggerEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11HttpRequestENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11HttpRequestEEE", "NSt6__ndk110__function6__baseIFvPKciEEE", "NSt6__ndk110__function6__baseIFvPciRiEEE", "kax_report_retry_interval", "N3kax14ReportProtocolE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_14ReportProtocolEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_14ReportProtocolEEERS5_PT_MS9_FvS3_EEUlS3_E_", "NSt6__ndk120__shared_ptr_pointerIPN3kax14StreamAccessorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14StreamAccessorEEE", "NSt6__ndk120__shared_ptr_emplaceIN3kax10ClientInfoENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax10ClientInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax10ClientInfoEEE", "StreamProtocols", "srtmp", "NSt6__ndk119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "kax_region", "kversion", "sversion", "reachability", "kax_latency_report_interval", "playid", "kartun", "buffertime", "watchtime", "connecttime", "video_render", "audio_render", "playing", "complete", "event", "rendering", "N3kax12BaseProtocolE", "N3kax8ProtocolE", "N3kix11ExitWatcherIN3kax12BaseProtocolEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12BaseProtocolEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12BaseProtocolEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_EEUlS6_E_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS4_12BaseProtocolEEERS8_PT_MSC_FvS6_iEEUlS6_iE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEiEEE4BindINS1_12BaseProtocolEEERS5_PT_MS9_FvS3_iEEUlS3_iE_", "NSt6__ndk120__shared_ptr_pointerIPN7msgpack2v14zoneENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN7msgpack2v14zoneEEE", "N7msgpack2v123container_size_overflowE", "NSt6__ndk110__function6__baseIFvNS_6chrono8durationIxNS_5ratioILl1ELl1000000EEEEES6_EEE", "NSt6__ndk110__function6__baseIFviEEE", "N7msgpack2v110type_errorE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12BaseProtocolEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12BaseProtocolEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12BaseProtocolEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12BaseProtocolEvEE", "kax_segment_divide_interval", "N3kax16ExternalStreamerE", "N3kax8StreamerE", "N3arc6SignalIJFviRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEE", "N3arc6SignalIJFviPKcEEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE4BindIN3kax16ExternalStreamerEEERSD_PT_MSI_FviSB_EEUliSB_E_NS7_ISM_EESC_EE", "ZN3arc4SlotIJFviRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE4BindIN3kax16ExternalStreamerEEERSB_PT_MSG_FviS9_EEUliS9_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax16ExternalStreamerEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax16ExternalStreamerEEERS4_PT_MS9_FviS2_EEUliS2_E_", "N3kax11HttpRequestE", "kax_preload_requests", "kax_preload_sessions", "N3kax12KaxPreloaderE", "N3kax9PreloaderE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax17KaxPreloadSessionEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax17KaxPreloadSessionEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "NSt6__ndk111__end_stateIcEE", "NSt6__ndk16__nodeIcEE", "NSt6__ndk120__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteINS_13__empty_stateIcEEEE", "NSt6__ndk113__empty_stateIcEE", "NSt6__ndk116__owns_one_stateIcEE", "NSt6__ndk115__has_one_stateIcEE", "NSt6__ndk110__l_anchorIcEE", "NSt6__ndk110__r_anchorIcEE", "NSt6__ndk115__word_boundaryIcNS_12regex_traitsIcEEEE", "NSt6__ndk111__lookaheadIcNS_12regex_traitsIcEEEE", "NSt6__ndk123__match_any_but_newlineIcEE", "NSt6__ndk118__match_char_icaseIcNS_12regex_traitsIcEEEE", "NSt6__ndk120__match_char_collateIcNS_12regex_traitsIcEEEE", "NSt6__ndk112__match_charIcEE", "NSt6__ndk116__back_ref_icaseIcNS_12regex_traitsIcEEEE", "NSt6__ndk118__back_ref_collateIcNS_12regex_traitsIcEEEE", "NSt6__ndk110__back_refIcEE", "NSt6__ndk120__bracket_expressionIcNS_12regex_traitsIcEEEE", "NSt6__ndk128__begin_marked_subexpressionIcEE", "NSt6__ndk126__end_marked_subexpressionIcEE", "NSt6__ndk16__loopIcEE", "NSt6__ndk117__owns_two_statesIcEE", "NSt6__ndk117__repeat_one_loopIcEE", "NSt6__ndk111__alternateIcEE", "NSt6__ndk121__empty_non_own_stateIcEE", "NSt6__ndk111__match_anyIcEE", "kax_max_buffer_time", "kax_max_buffer_bytes", "kax_retry_timeout", "me_accesstime", "N3kax11KaxProtocolE", "N3kix11ExitWatcherIN3kax11KaxProtocolEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax11KaxProtocolEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax11KaxProtocolEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS4_11KaxProtocolEEERS8_PT_MSC_FvS6_bEEUlS6_bE_NS_9allocatorISG_EES7_EE", "ZN3arc4SlotIJFvPN3kax6PlayerEbEEE4BindINS1_11KaxProtocolEEERS5_PT_MS9_FvS3_bEEUlS3_bE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11KaxProtocolEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax11KaxProtocolEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax11KaxProtocolEFvvEEE", "NSt6__ndk114unary_functionIPN3kax11KaxProtocolEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax7SessionENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax7SessionEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvRN3flv6HeaderEEEE4BindIN3kax11KaxProtocolEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvRN3flv6HeaderEEEE", "ZN3arc4SlotIJFvRN3flv6HeaderEEEE4BindIN3kax11KaxProtocolEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvRN3flv3TagEEEE4BindIN3kax11KaxProtocolEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvRN3flv3TagEEEE", "ZN3arc4SlotIJFvRN3flv3TagEEEE4BindIN3kax11KaxProtocolEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax11KaxProtocolEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax11KaxProtocolEEERS4_PT_MS9_FviS2_EEUliS2_E_", "N3kax10MeProtocolE", "NSt6__ndk110__function6__baseIFbvEEE", "N3kax12RtmpStreamerE", "skaxi", "skas", "N3kax13SrtmpStreamerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11SrtStreamerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11SrtStreamerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax12RtmpStreamerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax12RtmpStreamerEEE", "N3kax10SrtSessionE", "N3kax7SessionE", "N3arc6SignalIJFvRN3flv6HeaderEEEEE", "N3arc6SignalIJFvRN3flv3TagEEEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax10SrtSessionEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvPN3kix8ResolverEEEE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax10SrtSessionEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk120__shared_ptr_emplaceIN3kax8SrtRelayENS_9allocatorIS2_EEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax10SrtSessionEFvvEJPS4_EEENS_9allocatorIS8_EEFviEEE", "NSt6__ndk16__bindIMN3kax10SrtSessionEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax10SrtSessionEFvvEEE", "NSt6__ndk114unary_functionIPN3kax10SrtSessionEvEE", "NSt6__ndk120__shared_ptr_emplaceIN3flv6HeaderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN3flv3TagENS_9allocatorIS2_EEEE", "N3kax11SrtStreamerE", "N3kix11ExitWatcherIN3kax11SrtStreamerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax13FaxStreamInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax13FaxStreamInfoEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax11SrtStreamerEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax11SrtStreamerEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax11SrtStreamerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax11SrtStreamerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11SrtStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFviEEE", "NSt6__ndk16__bindIMN3kax11SrtStreamerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax11SrtStreamerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax11SrtStreamerEvEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11SrtStreamer10MediaFrameENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk114default_deleteIN3kax11SrtStreamer10MediaFrameEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax11SrtStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk120__shared_ptr_emplaceIN3kax13FaxStreamInfoENS_9allocatorIS2_EEEE", "kax_play_access_timeout", "push_uri", "stream_uri", "reporter", "streamid", "reporter_region", "lifetime", "N3kax14StreamAccessorE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax14StreamAccessorEEERS8_PT_MSD_FvS6_EEUlS6_E_NS_9allocatorISH_EES7_EE", "ZN3arc4SlotIJFvPN3kix8ResolverEEEE4BindIN3kax14StreamAccessorEEERS5_PT_MSA_FvS3_EEUlS3_E_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14StreamAccessorEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14StreamAccessorEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax14StreamAccessorEFvvEEE", "NSt6__ndk114unary_functionIPN3kax14StreamAccessorEvEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax14StreamAccessorEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax14StreamAccessorEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "N3kax12BaseStreamerE", "N3kix11ExitWatcherIN3kax12BaseStreamerEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherIN3kax12BaseStreamerEEC1EvEUlvE_NS_9allocatorIS7_EEFvvEEE", "ZN3kix11ExitWatcherIN3kax12BaseStreamerEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax12BaseStreamerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax12BaseStreamerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax12BaseStreamerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax12BaseStreamerEvEE", "kax_ip4_only", "kax_allow_gzip", "N3kax15CurlHttpRequestE", "N3kax15CurlHttpService6HandleE", "N3arc3any6holderINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "N3arc3any11placeholderE", "NSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk121__basic_string_commonILb1EEE", "N3kax15CurlHttpServiceE", "N3kax11HttpServiceE", "NSt6__ndk110__function6__funcINS_6__bindIRF9CURLMcodePvS4_EJRS4_S7_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIRF9CURLMcodePvS2_EJRS2_S5_EEE", "NSt6__ndk118__weak_result_typeIPF9CURLMcodePvS2_EEE", "NSt6__ndk115binary_functionIPvS1_9CURLMcodeEE", "fax_connect_timeout", "N3kax10FaxSessionE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax10FaxSessionEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax10FaxSessionEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "N3kax13FaxStreamInfoE", "N3kax10StreamInfoE", "kax_startup_duration", "kax_session_timeout", "kax_segment_threads", "kax_segment_timeout_duration", "kax_segment_abort_tolarent", "kax_adaptation_random", "kax_adaptation_force_stream", "kax_loader_goon_factor", "adaptation", "redirections", "NSt6__ndk119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax11HttpServiceENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax11HttpServiceEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax15PlaylistTrackerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax15PlaylistTrackerEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN3kax9KaxLoaderEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN3kax9KaxLoaderEEERS2_PT_MS7_FvvEEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE4BindIN3kax9KaxLoaderEEERSD_PT_MSI_FvjSB_EEUljSB_E_NS7_ISM_EESC_EE", "NSt6__ndk110__function6__baseIFvjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE", "ZN3arc4SlotIJFvjRKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE4BindIN3kax9KaxLoaderEEERSB_PT_MSG_FvjS9_EEUljS9_E_", "NSt6__ndk120__shared_ptr_pointerIPN3kax10AbrManagerENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax10AbrManagerEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kax13SegmentLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax13SegmentLoaderEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvhPN3kax13SegmentLoaderEjEEE4BindINS4_9KaxLoaderEEERS8_PT_MSC_FvhS6_jEEUlhS6_jE_NS_9allocatorISG_EES7_EE", "NSt6__ndk110__function6__baseIFvhPN3kax13SegmentLoaderEjEEE", "ZN3arc4SlotIJFvhPN3kax13SegmentLoaderEjEEE4BindINS1_9KaxLoaderEEERS5_PT_MS9_FvhS3_jEEUlhS3_jE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax9KaxLoaderEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax9KaxLoaderEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax9KaxLoaderEFvvEEE", "NSt6__ndk114unary_functionIPN3kax9KaxLoaderEvEE", "N3kax10KaxSessionE", "NSt6__ndk120__shared_ptr_pointerIPN3kax9KaxLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax9KaxLoaderEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN3kax10KaxSessionEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN3kax10KaxSessionEEERS2_PT_MS7_FvvEEUlvE_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvjjbPN3kix10RingBufferEEEE4BindIN3kax10KaxSessionEEERS8_PT_MSD_FvjjbS6_EEUljjbS6_E_NS_9allocatorISH_EES7_EE", "NSt6__ndk110__function6__baseIFvjjbPN3kix10RingBufferEEEE", "ZN3arc4SlotIJFvjjbPN3kix10RingBufferEEEE4BindIN3kax10KaxSessionEEERS5_PT_MSA_FvjjbS3_EEUljjbS3_E_", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFviPKcEEE4BindIN3kax10KaxSessionEEERS7_PT_MSC_FviS5_EEUliS5_E_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFviPKcEEE4BindIN3kax10KaxSessionEEERS4_PT_MS9_FviS2_EEUliS2_E_", "onread", "N3kax11NtpReporterE", "N3kax8ReporterE", "NSt6__ndk110__function6__baseIFvPK8sockaddrPcjPN3kix12UdpTransportEEEE", "onsend", "N3kax19NtpTimeSynchronizerE", "N3kax16TimeSynchronizerE", "kax_playlist_threads", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE4BindINS7_15PlaylistTrackerEEERSB_PT_MSF_FvS6_jS9_EEUlS6_jS9_E_NS_9allocatorISJ_EESA_EE", "NSt6__ndk110__function6__baseIFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE", "ZN3arc4SlotIJFvPN3kix10RingBufferEjPN3kax14PlaylistLoaderEEEE4BindINS4_15PlaylistTrackerEEERS8_PT_MSC_FvS3_jS6_EEUlS3_jS6_E_", "NSt6__ndk120__shared_ptr_pointerIPN3kax14PlaylistLoaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14PlaylistLoaderEEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax15PlaylistTrackerEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kax15PlaylistTrackerEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kax15PlaylistTrackerEFvvEEE", "NSt6__ndk114unary_functionIPN3kax15PlaylistTrackerEvEE", "N3kax14RtmpConnectionE", "N6tincan20NetConnectionHandlerE", "N6tincan16NetStreamHandlerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax14RtmpStreamInfoENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax14RtmpStreamInfoEEE", "N3amf4DataE", "N3kax11RtmpServiceE", "N5tinet5EventE", "N3kax14RtmpStreamInfoE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax13SegmentLoaderEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax13SegmentLoaderEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "kax_stream_adapt_fragments", "N3kax17DynamicAbrManagerE", "N3kax10AbrManagerE", "kax_stream_adapt_interval", "N3kax13KaxAbrManagerE", "NSt6__ndk120__shared_ptr_pointerIPN3kax18BandwidthEstimatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kax18BandwidthEstimatorEEE", "kax_playlist_load_timeout", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvPKciEEE4BindIN3kax14PlaylistLoaderEEERS7_PT_MSC_FvS5_iEEUlS5_iE_NS_9allocatorISG_EES6_EE", "ZN3arc4SlotIJFvPKciEEE4BindIN3kax14PlaylistLoaderEEERS4_PT_MS9_FvS2_iEEUlS2_iE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kax14PlaylistLoaderEFvPKciEJPS4_RA16_S5_RKjEEENS_9allocatorISE_EEFvvEEE", "NSt6__ndk16__bindIMN3kax14PlaylistLoaderEFvPKciEJPS2_RA16_S3_RKjEEE", "NSt6__ndk118__weak_result_typeIMN3kax14PlaylistLoaderEFvPKciEEE", "kax_min_bandwidth", "N3kax22EwmaBandwidthEstimatorE", "N3kax18BandwidthEstimatorE", "N3kix11ExitMonitorE", "N3arc6SignalIJFvvEEEE", "N3kix14KixExitMonitorE", "disequence", "segments", "discontinuity", "adaptations", "NSt6__ndk120__shared_ptr_pointerIPN3kix13CaresResolverENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix13CaresResolverEEE", "NSt6__ndk120__shared_ptr_pointerIPN3kix10UvResolverENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3kix10UvResolverEEE", "N3kix10RingBufferE", "N3kix12UdpTransportE", "N3kix16UvNetworkMonitorE", "N3kix14NetworkMonitorE", "N3kix10UvResolverE", "N3kix12BaseResolverINS_10UvResolverEEE", "N3kix8ResolverE", "N3kix11ExitWatcherINS_12BaseResolverINS_10UvResolverEEEEE", "N3arc6SignalIJFvPN3kix8ResolverEEEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_12BaseResolverINS2_10UvResolverEEEEC1EvEUlvE_NS_9allocatorIS8_EEFvvEEE", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEE6OnExitEvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6OnExitEvEUlvE_", "ZN3kix11ExitWatcherINS_12BaseResolverINS_10UvResolverEEEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE0_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE0_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix12BaseResolverINS3_10UvResolverEEEFvvEJPS6_EEENS_9allocatorISA_EEFvvEEE", "NSt6__ndk16__bindIMN3kix12BaseResolverINS1_10UvResolverEEEFvvEJPS4_EEE", "NSt6__ndk118__weak_result_typeIMN3kix12BaseResolverINS1_10UvResolverEEEFvvEEE", "NSt6__ndk114unary_functionIPN3kix12BaseResolverINS1_10UvResolverEEEvEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix10UvResolverEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kix10UvResolverEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kix10UvResolverEFvvEEE", "NSt6__ndk114unary_functionIPN3kix10UvResolverEvEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12BaseResolverINS2_10UvResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlS1_E_NS8_IbEEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlPbE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_10UvResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlvE_NS8_ISB_EEFvvEEE", "ZN3kix12BaseResolverINS_10UvResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlvE_", "kix_dns_refresh_interval", "N3kix13CaresResolverE", "N3kix12BaseResolverINS_13CaresResolverEEE", "N3kix11ExitWatcherINS_12BaseResolverINS_13CaresResolverEEEEE", "N3kix11ExitWatcherINS_13CaresResolverEEE", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_12BaseResolverINS2_13CaresResolverEEEEC1EvEUlvE_NS_9allocatorIS8_EEFvvEEE", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEE6OnExitEvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6OnExitEvEUlvE_", "ZN3kix11ExitWatcherINS_12BaseResolverINS_13CaresResolverEEEEC1EvEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEEC1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlvE0_NS9_ISC_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEEC1ENSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUlvE0_", "NSt6__ndk110__function6__funcIZN3kix11ExitWatcherINS2_13CaresResolverEEC1EvEUlvE_NS_9allocatorIS6_EEFvvEEE", "ZN3kix11ExitWatcherINS_13CaresResolverEEC1EvEUlvE_", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix12BaseResolverINS3_13CaresResolverEEEFvvEJPS6_EEENS_9allocatorISA_EEFvvEEE", "NSt6__ndk16__bindIMN3kix12BaseResolverINS1_13CaresResolverEEEFvvEJPS4_EEE", "NSt6__ndk118__weak_result_typeIMN3kix12BaseResolverINS1_13CaresResolverEEEFvvEEE", "NSt6__ndk114unary_functionIPN3kix12BaseResolverINS1_13CaresResolverEEEvEE", "NSt6__ndk110__function6__funcINS_6__bindIMN3kix13CaresResolverEFvvEJPS4_EEENS_9allocatorIS8_EEFvvEEE", "NSt6__ndk16__bindIMN3kix13CaresResolverEFvvEJPS2_EEE", "NSt6__ndk118__weak_result_typeIMN3kix13CaresResolverEFvvEEE", "NSt6__ndk114unary_functionIPN3kix13CaresResolverEvEE", "NSt6__ndk120__shared_ptr_pointerIPbZN3kix12BaseResolverINS2_13CaresResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlS1_E_NS8_IbEEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlPbE_", "NSt6__ndk110__function6__funcIZN3kix12BaseResolverINS2_13CaresResolverEE6UpdateEbNS_6vectorI25__kernel_sockaddr_storageNS_9allocatorIS7_EEEEEUlvE_NS8_ISB_EEFvvEEE", "ZN3kix12BaseResolverINS_13CaresResolverEE6UpdateEbNSt6__ndk16vectorI25__kernel_sockaddr_storageNS3_9allocatorIS5_EEEEEUlvE_", "N3kix11KixMainLoopE", "N3kix8MainLoopE", "N3kix8KixTimerE", "N3kix5TimerE", "N3kix9TaskQueueE", "getActiveNetwork", "getLinkProperties", "getDnsServers", "getHostAddress", "ares_destroy", "ares__destroy_servers_state", "RES_OPTIONS", "handle_error", "end_query", "NSt6__ndk113basic_fstreamIcNS_11char_traitsIcEEEE", "NSt6__ndk113basic_filebufIcNS_11char_traitsIcEEEE", "newConnection", "removeSocket", "accept", "getpeername", "getsockname", "getsockopt", "setsockopt", "sendmsg", "recvmsg", "epoll_create", "epoll_add_usock", "epoll_add_ssock", "epoll_update_usock", "epoll_update_ssock", "epoll_remove_usock", "epoll_remove_ssock", "epoll_wait", "epoll_release", "perfmon", "bstats", "getUDTHandle", "getsockstate", "keepalive", "lossreport", "cgwarning", "ackack", "dropreq", "peererror", "ACCEPTED", "REJECTED", "checktimer", "receive", "setOpt", "fillSrtHandshake", "fillSrtHandshake_HSRSP", "sendSrtMsg", "createSrtHandshake", "processSrtMsg", "processSrtMsg_HSREQ", "MESSAGE", "processSrtMsg_HSRSP", "interpretSrtHandshake", "startConnect", "processAsyncConnectRequest", "processRendezvous", "processConnectResponse", "postConnect", "checkUpdateCryptoKeyLen", "rendezvousSwitchState", "tsbpd", "acceptAndRespond", "checkNeedDrop", "ready", "created", "processCtrl", "reXmit", "normal", "REXMITTED", "BELATED", "processData", "UNACKED", "processConnectRequest", "updateKmState", "processSrtMsg_KMREQ", "processSrtMsg_KMRSP", "regenCryptoKm", "createCryptoCtx", "TLPktDrop", "NAKReport", "ReXmitFlag", "StreamAPI", "waveahand", "conclusion", "agreement", "INVALID", "waving", "attention", "initiated", "PB_SUBSEQUENT", "PB_LAST", "PB_SOLO", "ORD_RELAXED", "ORD_REQUIRED", "EK_EVEN", "EK_ODD", "SN_ORIGINAL", "SN_REXMIT", "updateConnStatus", "worker_RetrieveUnit", "worker_ProcessConnectionRequest", "worker_TryAsyncRend_OrStore", "checkTransArgs", "slowdownSndPeriod", "rtmpe", "N4rtmp8ProtocolE", "N7tincani8ProtocolE", "N4rtmp6ServerE", "N7tincani6ServerE", "N5tinet18TcpAcceptorHandlerE", "N4rtmp10ConnectionE", "N7tincani10ConnectionE", "N4rtmp9ConnectorE", "N5tinet16TcpSocketHandlerE", "N5tinet19CallbackTimerTask_0IN4rtmp9ConnectorEEE", "N5tinet9TimerTaskE", "N4rtmp13DefaultStreamE", "N7tincani6StreamE", "N4rtmp10HandshakerE", "N4rtmp5HelloE", "N5tinet6PacketE", "ignoreClientHandshake", "noVerify", "Keying", "N4rtmp6KeyingE", "N4rtmp13MessageReaderE", "N4rtmp13MessageWriterE", "N4rtmp10OutputFlowE", "N4rtmp16PlainInputBufferE", "N5tinet11InputBufferE", "N4rtmp17PlainOutputBufferE", "N5tinet12OutputBufferE", "N4rtmp12SetChunkSizeE", "N4rtmp16SetPeerBandWidthE", "N4rtmp8TotalQosE", "N7tincani3QosE", "N4rtmp11UserControlE", "N4rtmp6VerifyE", "N4rtmp8VideoQosE", "N4rtmp25WindowAcknowledgementSizeE", "N4rtmp12AbortMessageE", "N4rtmp15AcknowledgementE", "N4rtmp8AudioQosE", "N4rtmp20DiffieHellmanContextE", "N4rtmp20EncryptedInputBufferE", "N4rtmp21EncryptedOutputBufferE", "N6tincan10ClientInfoE", "N6tincan15DefaultInstanceE", "N6tincan8InstanceE", "N7tincani13ServerHandlerE", "N6tincan20DefaultNetConnectionE", "objectEncoding", "N6tincan13NetConnectionE", "N7tincani17ConnectionHandlerE", "N6tincan16DefaultNetStreamE", "details", "N6tincan9NetStreamE", "N7tincani13StreamHandlerE", "N6tincan15DefaultResponseE", "N6tincan8ResponseE", "N6tincan10ServerInfoE", "N5tinet19CallbackTimerTask_0IN6tincan11TransactionEEE", "N6tincan11UserControlE", "swfUrl", "tcUrl", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "fmsVer", "N6tincan7CommandE", "deleteStream", "closeStream", "receiveAudio", "receiveVideo", "_result", "setPeerInfo", "releaseStream", "onFCPublish", "onFCSubscribe", "N6tincan9ConnectorE", "N5tinet15CallbackEvent_0IN6tincan9ConnectorEEE", "N6tincan4DataE", "N3amf5ArrayE", "NSt6__ndk16vectorIN3amf7VariantENS_9allocatorIS2_EEEE", "NSt6__ndk113__vector_baseIN3amf7VariantENS_9allocatorIS2_EEEE", "NSt6__ndk120__vector_base_commonILb1EEE", "N3amf7BooleanE", "N3amf10NoEncodingE", "N3amf8EncodingE", "N3amf8NoReaderE", "N3amf6ReaderE", "N3amf8NoWriterE", "N3amf6WriterE", "N3amf4NullE", "N3amf6NumberE", "N3amf6ObjectE", "NSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3amf7VariantENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEE", "N3amf6StringE", "N3amf8AnyValueINS_5EmptyEEE", "N3amf3AnyE", "N3amf8AnyValueINS_4NullEEE", "N3amf8AnyValueINS_7BooleanEEE", "N3amf8AnyValueINS_6NumberEEE", "N3amf8AnyValueINS_6StringEEE", "N3amf8AnyValueINS_5ArrayEEE", "N3amf8AnyValueINS_6ObjectEEE", "N3amf8AnyValueINS_9ByteArrayEEE", "N3amf8AnyValueINS_11UnsupportedEEE", "N3amf12AMF0EncodingE", "N3amf10AMF0ReaderE", "N3amf12AMF3EncodingE", "N3amf10AMF3ReaderE", "N3amf9ByteArrayE", "N3amf5EmptyE", "N3amf11UnsupportedE", "N5tinet8InBufferE", "N5tinet6ReaderE", "N5tinet13SocketAddressE", "N5tinet12StringBufferE", "N5tinet6WriterE", "N5tinet14DefaultServiceE", "N5tinet7ServiceE", "N5tinet18DefaultTcpAcceptorE", "N5tinet11TcpAcceptorE", "N5tinet15SelectorHandlerE", "N5tinet15CallbackEvent_1INS_18DefaultTcpAcceptorEN3arc5ScopeEEE", "N5tinet16DefaultTcpSocketE", "N5tinet9TcpSocketE", "N5tinet12FlushHandlerE", "N5tinet19CallbackTimerTask_0INS_16DefaultTcpSocketEEE", "N5tinet15CallbackEvent_1INS_16DefaultTcpSocketEN3arc5ScopeEEE", "NSt6__ndk110__function6__funcIZN3arc4SlotIJFvvEEE4BindIN5tinet16DefaultTcpSocketEEERS5_PT_MSA_FvvEEUlvE_NS_9allocatorISE_EES4_EE", "ZN3arc4SlotIJFvvEEE4BindIN5tinet16DefaultTcpSocketEEERS2_PT_MS7_FvvEEUlvE_", "epoll", "kqueue", "wheel", "linked", "N5tinet19DefaultClassManagerE", "N5tinet11ClassLoaderINS_8SelectorEEE", "N5tinet11ClassLoaderINS_12TimerManagerEEE", "N5tinet11ClassLoaderINS_9EventLoopEEE", "N5tinet11ClassLoaderINS_13BufferManagerEEE", "N5tinet11ClassLoaderINS_9AsyncLoopEEE", "N5tinet16DefaultEventLoopE", "N5tinet9EventLoopE", "N5tinet13EPollSelectorE", "N5tinet8SelectorE", "N5tinet19LinkedBufferManagerE", "N5tinet13BufferManagerE", "N5tinet15LinkedBufferOutE", "N5tinet9BufferOutE", "N5tinet12NullSelectorE", "N5tinet14SelectSelectorE", "N5tinet11UvAsyncLoopE", "N5tinet9AsyncLoopE", "N5tinet14UvAsyncTriggerE", "N5tinet12AsyncTriggerE", "N5tinet11UvEventLoopE", "N5tinet10UvSelectorE", "N5tinet14UvTimerManagerE", "N5tinet12TimerManagerE", "N5tinet17WheelTimerManagerE", "N5tinet16DefaultAsyncLoopE", "NSt6__ndk120__shared_ptr_pointerIPNS_5queueIPN5tinet19DefaultAsyncTriggerENS_5dequeIS4_NS_9allocatorIS4_EEEEEENS_14default_deleteIS9_EENS6_IS9_EEEE", "NSt6__ndk114default_deleteINS_5queueIPN5tinet19DefaultAsyncTriggerENS_5dequeIS4_NS_9allocatorIS4_EEEEEEEE", "N5tinet19DefaultAsyncTriggerE", "N5tinet14LinkedBlockOutE", "N5tinet8BlockOutE", "N5tinet14LinkedBufferInE", "N5tinet8BufferInE", "N5tinet7UvTimerE", "N5tinet5TimerE", "N5tinet5WheelE", "N5tinet9WheelItemE", "N5tinet10WheelTimerE", "N5tinet13LinkedBlockInE", "N5tinet7BlockInE", "N3arc12bad_any_castE", "arc_conf_type", "arc_conf_file", "arc_conf_reload_interval", "json", "NSt6__ndk114basic_ifstreamIcNS_11char_traitsIcEEEE", "N3arc3any6holderIlEE", "N3arc3any6holderIdEE", "N3arc3any6holderIbEE", "N3arc3any6holderINSt6__ndk16vectorIS0_NS2_9allocatorIS0_EEEEEE", "NSt6__ndk16vectorIN3arc3anyENS_9allocatorIS2_EEEE", "NSt6__ndk113__vector_baseIN3arc3anyENS_9allocatorIS2_EEEE", "N3arc3any6holderINSt6__ndk113unordered_mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4hashIS9_EENS2_8equal_toIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEE", "NSt6__ndk113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3arc3anyENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEE", "__root__", "LoggerManager::Drop", "anonymous", "N3arc13LoggerManagerE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10LoggerNodeENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10LoggerFileENS_9allocatorIS2_EEEE", "arc_loglevel", "log_level", "N3arc10LoggerNodeE", "N3arc6LoggerE", "NSt6__ndk110__function6__baseIFvmEEE", "NSt6__ndk120__shared_ptr_pointerIPN3arc11ScopeHandleENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc11ScopeHandleEEE", "N3arc12_GLOBAL__N_114SingletonStackE", "NSt6__ndk15stackIN3arc12_GLOBAL__N_17PointerENS_5dequeIS3_NS_9allocatorIS3_EEEEEE", "N3arc10SlotHandleE", "N3arc16uri_syntax_errorE", "N3arc10BaseConfigE", "N3arc10BaseConfig8ConfigerE", "N3arc6ConfigE", "NSt6__ndk120__shared_ptr_emplaceIN3arc10BaseConfig8ConfigerENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN3arc3anyENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN3arc3anyEEE", "NSt6__ndk120__shared_ptr_emplaceIN3arc3anyENS_9allocatorIS2_EEEE", "N3re217NumCapturesWalkerE", "N3re26Regexp6WalkerIiEE", "N3re219NamedCapturesWalkerE", "N3re218CaptureNamesWalkerE", "N3re28CompilerE", "N3re26Regexp6WalkerINS_4FragEEE", "N3re216RepetitionWalkerE", "N3re214SimplifyWalkerE", "N3re26Regexp6WalkerIPS0_EE", "N3re214ToStringWalkerE", "Adlam", "Ahom", "Anatolian_Hieroglyphs", "Arabic", "Armenian", "Avestan", "Balinese", "Bamum", "Bassa_Vah", "Batak", "Bengali", "Bhaiksuki", "Bopomofo", "Brahmi", "Braille", "Buginese", "Buhid", "Canadian_Aboriginal", "Carian", "Caucasian_Albanian", "Chakma", "Cham", "Cherokee", "Common", "Coptic", "Cuneiform", "Cypriot", "Cyrillic", "Deseret", "Devanagari", "Duployan", "Egyptian_Hieroglyphs", "Elbasan", "Ethiopic", "Georgian", "Glagolitic", "Gothic", "Grantha", "Greek", "Gujarati", "Gurmukhi", "Hangul", "Hanunoo", "Hatran", "Hebrew", "Hiragana", "Imperial_Aramaic", "Inherited", "Inscriptional_Pahlavi", "Inscriptional_Parthian", "Javanese", "Kaithi", "Kannada", "Katakana", "Kayah_Li", "Kharoshthi", "Khmer", "Khojki", "Khudawadi", "Latin", "Lepcha", "Limbu", "Linear_A", "Linear_B", "Lisu", "Lycian", "Lydian", "Mahajani", "Malayalam", "Mandaic", "Manichaean", "Marchen", "Masaram_Gondi", "Meetei_Mayek", "Mende_Kikakui", "Meroitic_Cursive", "Meroitic_Hieroglyphs", "Miao", "Modi", "Mongolian", "Multani", "Myanmar", "Nabataean", "New_Tai_Lue", "Newa", "Nushu", "Ogham", "Ol_Chiki", "Old_Hungarian", "Old_Italic", "Old_North_Arabian", "Old_Permic", "Old_Persian", "Old_South_Arabian", "Old_Turkic", "Oriya", "Osage", "Osmanya", "Pahawh_Hmong", "Palmyrene", "Pau_Cin_Hau", "Phags_Pa", "Phoenician", "Psalter_Pahlavi", "Rejang", "Runic", "Samaritan", "Saurashtra", "Sharada", "Shavian", "Siddham", "SignWriting", "Sinhala", "Sora_Sompeng", "Soyombo", "Sundanese", "Syloti_Nagri", "Syriac", "Tagalog", "Tagbanwa", "Tai_Le", "Tai_Tham", "Tai_Viet", "Takri", "Tamil", "Tangut", "Telugu", "Thaana", "Thai", "Tibetan", "Tifinagh", "Tirhuta", "Ugaritic", "Warang_Citi", "Zanabazar_Square", "N4Json17CharReaderBuilderE", "collectComments", "allowComments", "strictRoot", "allowDroppedNullPlaceholders", "allowNumericKeys", "allowSingleQuotes", "stackLimit", "failIfExtra", "rejectDupKeys", "allowSpecialFloats", "N4Json10CharReader7FactoryE", "N4Json13OurCharReaderE", "N4Json10CharReaderE", "N4Json9ExceptionE", "N4Json12RuntimeErrorE", "N4Json10LogicErrorE", "N4Json10FastWriterE", "N4Json6WriterE", "N4Json12StyledWriterE", "N4Json23BuiltStyledStreamWriterE", "N4Json12StreamWriterE", "N4Json12StreamWriter7FactoryE", "N4Json19StreamWriterBuilderE", "indentation", "commentStyle", "enableYAMLCompatibility", "dropNullPlaceholders", "useSpecialFloats", "E2BIG", "EACCES", "EADDRINUSE", "EADDRNOTAVAIL", "EAFNOSUPPORT", "EAGAIN", "EAI_ADDRFAMILY", "EAI_AGAIN", "EAI_BADFLAGS", "EAI_BADHINTS", "EAI_CANCELED", "EAI_FAIL", "EAI_FAMILY", "EAI_MEMORY", "EAI_NODATA", "EAI_NONAME", "EAI_OVERFLOW", "EAI_PROTOCOL", "EAI_SERVICE", "EAI_SOCKTYPE", "EALREADY", "EBADF", "EBUSY", "ECANCELED", "ECHARSET", "ECONNABORTED", "ECONNREFUSED", "ECONNRESET", "EDESTADDRREQ", "EEXIST", "EFBIG", "EHOSTUNREACH", "EINTR", "EINVAL", "EISCONN", "EISDIR", "ELOOP", "EMFILE", "EMSGSIZE", "ENAMETOOLONG", "ENETDOWN", "ENETUNREACH", "ENFILE", "ENOBUFS", "ENODEV", "ENOENT", "ENOMEM", "ENONET", "ENOPROTOOPT", "ENOSPC", "ENOSYS", "ENOTCONN", "ENOTDIR", "ENOTEMPTY", "ENOTSOCK", "ENOTSUP", "EPERM", "EPIPE", "EPROTO", "EPROTONOSUPPORT", "EPROTOTYPE", "ERANGE", "EROFS", "ESHUTDOWN", "ESPIPE", "ESRCH", "ETIMEDOUT", "ETXTBSY", "EXDEV", "ENXIO", "EMLINK", "EHOSTDOWN", "EREMOTEIO", "ENOTTY", "fs_event", "fs_poll", "prepare", "signal", "HOME", "TMPDIR", "TEMP", "TEMPDIR", "alloc_cb", "UV_TCP_SINGLE_ACCEPT", "N4cata16filesystem_errorE", "NSt6__ndk120__shared_ptr_emplaceIN4cata16filesystem_error11informationENS_9allocatorIS3_EEEE", "bool", "xxint32", "xint64", "xuint64", "double", "string", "tryfromenv", "undefok", "FLAGS_", "helpfull", "helpshort", "helpon", "helpmatch", "helppackage", "helpxml", "currently", "meaning", "current", "tab_completion_word", "tab_completion_columns", "curl_domalloc", "curl_docalloc", "curl_dostrdup", "curl_dorealloc", "curl_fclose", "Curl_is_connected", "Curl_getconnectinfo", "closure", "Curl_expire", "RECVING", "SENDING", "multi_done", "process_pending_handles", "CONNECT_ONLY", "multi_runsingle", "INIT", "WAITRESOLVE", "WAITCONNECT", "WAITPROXYCONNECT", "SENDPROTOCONNECT", "WAITDO", "DOING", "DO_MORE", "DO_DONE", "WAITPERFORM", "TOOFAST", "COMPLETED", "MSGSENT", "Curl_strerror", "Curl_he2ai", "Curl_ip2addr", "Curl_slist_append_nodup", "curlx_ultous", "curlx_ultouc", "curlx_ultosi", "curlx_uztoso", "curlx_uztosi", "curlx_uztoui", "curlx_sltosi", "curlx_sltoui", "curlx_sltous", "curlx_uztosz", "curlx_sotouz", "curlx_sztosi", "curlx_uitous", "curlx_uitouc", "curlx_uitosi", "curlx_sitouz", "Curl_resolver_wait_resolv", "Curl_resolver_is_resolved", "init_thread_sync_data", "Curl_conncache_unlock", "Curl_conncache_size", "Curl_conncache_bundle_size", "Curl_conncache_find_bundle", "Curl_conncache_add_conn", "Curl_conncache_remove_conn", "Curl_conncache_foreach", "Curl_conncache_extract_oldest", "hashkey", "bundle_create", "TRUE", "FALSE", "attachment", "binary", "base64", "SESS", "Curl_ssl_getsessionid", "Curl_ssl_addsessionid", "Curl_ssl_close", "ssl_connect_init_proxy", "CURL_SSL_BACKEND", "LocalHost", "localhost", "freednsentry", "secure", "httponly", "domain", "expires", "Replaced", "Added", "Curl_http_setup_conn", "Curl_http_output_auth", "Basic", "Bearer", "Curl_add_buffer_send", "Curl_http", "HEAD", "Referer", "chunked", "Accept", "Expect", "Curl_http_readwrite_headers", "Authorization", "Proxy", "http_should_fail", "TCP6", "TCP4", "https_connecting", "Curl_client_write", "pausewrite", "Curl_disconnect", "DICT", "LDAP", "IMAP", "smtp", "pop3", "parse_url_login", "serially", "gethandleathead", "resolve_server", "dprintf_formatf", "machine", "password", "Curl_single_getsock", "retry", "Curl_setup_transfer", "read_rewind", "Curl_wildcard_dtor", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "AHST", "IDLW", "Curl_rand", "Curl_rand_hex", "CURL_ENTROPY", "Curl_http2_done", "Curl_http2_switched", "Curl_http2_add_child", "Curl_http2_remove_child", "drained_transfer", "drain_this", "on_data_chunk_recv", "on_stream_close", "http2_recv", "http2_handle_stream_close", "REFUSED_STREAM", "trailers", "SSLKEYLOGFILE", "BoringSSL", "SSL_ERROR_NONE", "SSL_ERROR_SSL", "SSL_ERROR_WANT_READ", "SSL_ERROR_WANT_WRITE", "SSL_ERROR_WANT_X509_LOOKUP", "SSL_ERROR_SYSCALL", "SSL_ERROR_ZERO_RETURN", "SSL_ERROR_WANT_CONNECT", "SSL_ERROR_WANT_ACCEPT", "Curl_ossl_connect", "ossl_connect_step1", "SSLv2", "Finished", "passwd_callback", "ossl_connect_step2", "ossl_connect_step3", "Subject", "pub_key", "nghttp2_session_reprioritize_stream", "dep_stream", "nghttp2_session_add_rst_stream", "nghttp2_session_open_stream", "nghttp2_session_adjust_closed_stream", "head_stream", "nghttp2_session_adjust_idle_stream", "nghttp2_session_mem_send", "nghttp2_session_on_response_headers_received", "nghttp2_session_on_push_response_headers_received", "nghttp2_session_mem_recv", "nghttp2_session_recv", "nghttp2_session_add_settings", "nghttp2_session_pack_data", "nghttp2_session_set_stream_user_data", "nghttp2_session_get_remote_settings", "nghttp2_session_get_local_settings", "nghttp2_session_upgrade", "nghttp2_session_upgrade2", "nghttp2_session_mem_send_internal", "session_prep_frame", "session_pack_extension", "session_after_frame_sent1", "session_close_stream_on_goaway", "find_stream_on_goaway_func", "session_after_header_block_received", "session_process_settings_frame", "nghttp2_submit_origin", "nghttp2_increase_local_window_size", "Cancel", "NO_ERROR", "PROTOCOL_ERROR", "INTERNAL_ERROR", "FLOW_CONTROL_ERROR", "SETTINGS_TIMEOUT", "STREAM_CLOSED", "FRAME_SIZE_ERROR", "CANCEL", "COMPRESSION_ERROR", "CONNECT_ERROR", "ENHANCE_YOUR_CALM", "INADEQUATE_SECURITY", "HTTP_1_1_REQUIRED", "nghttp2_hd_table_get", "hd_ringbuf_get", "allow", "etag", "expect", "from", "link", "referer", "vary", "allo", "serve", "accep", "expec", "upgrad", "refres", "refere", "pack_first_byte", "emit_string", "nghttp2_hd_huff_encode", "avail", "nghttp2_http_on_header", "nghttp2_rcbuf_decref", "nghttp2_pq_remove", "nghttp2_frame_pack_headers", "nghttp2_frame_pack_priority", "nghttp2_frame_pack_rst_stream", "nghttp2_frame_pack_settings", "nghttp2_frame_pack_push_promise", "nghttp2_frame_pack_ping", "nghttp2_frame_pack_goaway", "nghttp2_frame_pack_window_update", "nghttp2_frame_pack_altsvc", "nghttp2_frame_pack_origin", "nghttp2_frame_add_pad", "nghttp2_stream_reschedule", "nghttp2_stream_attach_item", "nghttp2_stream_defer_item", "nghttp2_stream_resume_deferred_item", "nghttp2_stream_dep_remove", "nghttp2_stream_dep_remove_subtree", "insert_link_dep", "stream_obq_remove", "unlink_dep", "nghttp2_outbound_item_free", "desc", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "bicubic", "Gaussian", "Lanczos", "experimental", "SWScaler", "swscaler", "sws_flags", "fast_bilinear", "bicublin", "gauss", "lanczos", "print_info", "accurate_rnd", "full_chroma_int", "full_chroma_inp", "bitexact", "error_diffusion", "srcw", "srch", "dstw", "dsth", "src_format", "dst_format", "src_range", "dst_range", "param0", "param1", "sws_dither", "bayer", "a_dither", "x_dither", "alphablend", "uniform_color", "URLContext", "protocol_whitelist", "rw_timeout", "subfile", "AVIOContext", "Output", "dump_separator", "palette", "effects", "dialogue", "comentary", "emergency", "karaoke", "flv_metadata", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "stereo", "metadatacreator", "MEGA", "filesize", "framerate", "live_flvdec", "ssegment", "image2", "mime_type", "live_start_index", "cookies", "http_proxy", "seekable", "variant_bitrate", "EVENT", "SUBTITLES", "user_agent", "end_offset", "PRIV", "APIC", "comment", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TDATTIMETORYTRDATSIZTYER", "TALB", "TCOM", "TCON", "genre", "TCOP", "copyright", "TENC", "encoded_by", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "USLT", "lyrics", "TCMP", "compilation", "TDRC", "TDRL", "TDEN", "creation_time", "TSOA", "TSOP", "TSOT", "Other", "Conductor", "Composer", "Illustration", "encrypted", "COMM", "TXXX", "TYER", "TDAT", "GEOB", "CHAP", "compatible_brands", "reel_name", "nclx", "nclc", "major_brand", "minor_version", "handler_name", "iTunSMPB", "cdec", "premiere_version", "quicktime_version", "account_type", "account_id", "category", "episode_uid", "firmware", "hd_video", "keywords", "synopsis", "podcast", "gapless_playback", "purchase_date", "rating", "sort_album_artist", "sort_album", "sort_artist", "sort_composer", "sort_name", "sort_show", "media_type", "episode_id", "episode_sort", "season_number", "producer", "chapter", "director", "disclaimer", "edit_date", "original_format", "grouping", "host_computer", "make", "original_artist", "performers", "playback_requirements", "original_source", "use_absolute_path", "seek_streams_individually", "ignore_editlist", "ignore_chapters", "use_mfra_for", "export_all", "export_xmp", "activation_bytes", "audible_fixed_key", "decryption_key", "enable_drefs", "text", "mp4a", "tx3g", "avc1k", "VP6F", "yuv2", "yuvs", "b48r0", "ipod", "movflags", "rtphint", "moov_size", "empty_moov", "frag_keyframe", "separate_moof", "frag_custom", "isml", "faststart", "omit_tfhd_offset", "disable_chpl", "default_base_moof", "dash", "frag_discont", "delay_moov", "global_sidx", "write_colr", "write_gama", "use_metadata_tags", "rtpflags", "rfc2190", "skip_rtcp", "h264_mode0", "send_bye", "skip_iods", "iods_audio_profile", "iods_video_profile", "min_frag_duration", "frag_size", "ism_lookahead", "video_track_timescale", "use_editlist", "fragment_index", "mov_gamma", "frag_interleave", "encryption_scheme", "encryption_key", "encryption_kid", "use_stream_ids_as_track_ids", "write_tmcd", "wide", "systemBitrate", "trackID", "systemLanguage", "CodecPrivateData", "FourCC", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "dhlr", "DataHandler", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "clcp", "ClosedCaptionHandler", "sbtl", "subp", "SubtitleHandler", "HintHandler", "TimeCodeHandler", "XDCAM", "DpxE", "stss", "stps", "perf", "titl", "author", "gnre", "dscp", "albm", "cprt", "yrrc", "earth", "aART", "encoding_tool", "ldes", "tvsh", "tven", "tvnn", "tves", "tvsn", "stik", "hdvd", "pgap", "cpil", "disk", "trkn", "tmpo", "aac_adtstoasc", "rtpo", "drac", "HEVC", "mpegts", "mpegtsraw", "service_name", "service_provider", "resync_size", "fix_teletext_pts", "ts_packetsize", "skip_changes", "skip_clear", "compute_pcr", "NOPTS", "AVFormatContext", "avioflags", "fflags", "flush_packets", "ignidx", "genpts", "nofillin", "noparse", "igndts", "discardcorrupt", "sortdts", "keepside", "fastseek", "nobuffer", "seek2any", "shortest", "autobsf", "cryptokey", "indexmem", "rtbufsize", "fdebug", "max_delay", "start_time_realtime", "audio_preload", "chunk_duration", "chunk_size", "f_err_detect", "crccheck", "explode", "ignore_err", "careful", "compliant", "aggressive", "use_wallclock_as_timestamps", "skip_initial_bytes", "correct_ts_overflow", "metadata_header_padding", "output_ts_offset", "max_interleave_delta", "f_strict", "unofficial", "avoid_negative_ts", "make_non_negative", "make_zero", "codec_whitelist", "format_whitelist", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "HFYUD", "IV32p", "IV41q", "VP62k", "Xxanr", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "S263W", "svq19", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "CLJRu", "LAGSl", "ZECO", "Y41P3", "CUVCF", "YLC0", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISFT", "ISMP", "ITCH", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "BottomUp", "ffrtmphttp", "multiple_requests", "post_data", "ffrtmphttp_tls", "rtmpt", "rtmpte", "rtmpts", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "ondemand", "rtmp_swfhash", "nonprivate", "flashVer", "fpad", "onBWDone", "onStatus", "_checkbw", "getStreamLength", "salt", "challenge", "nonce", "clientid", "FCUnpublish", "rtmp_app", "rtmp_buffer", "rtmp_conn", "rtmp_flashver", "rtmp_flush_interval", "rtmp_live", "both", "recorded", "rtmp_pageurl", "rtmp_playpath", "rtmp_subscribe", "rtmp_swfsize", "rtmp_swfurl", "rtmp_swfverify", "rtmp_tcurl", "rtmp_listen", "listen_timeout", "send_buffer_size", "recv_buffer_size", "addrinfo_one_by_one", "addrinfo_timeout", "ca_file", "cafile", "tls_verify", "cert_file", "key_file", "verifyhost", "udplite", "overrun_nonfatal", "udplite_coverage", "localport", "pkt_size", "fifo_size", "burst_bits", "localaddr", "broadcast", "local_port", "reuse_socket", "copy", "dvbsub", "dvbtxt", "eac3", "loas", "mpegvideo", "truehd", "APETAGEX", "truncate", "follow", "no_proxy", "AkamaiGHost", "MediaGateway", "Forbidden", "icy_metadata_packet", "chunked_post", "content_type", "icy_metadata_headers", "auth_type", "basic", "send_expect_100", "reconnect", "reconnect_at_eof", "reconnect_streamed", "reconnect_delay_max", "reply_code", "Blues", "Dance", "Disco", "Grunge", "Oldies", "Reggae", "Alternative", "Pranks", "Soundtrack", "Ambient", "Vocal", "Trance", "Classical", "Instrumental", "Acid", "Game", "Gospel", "AlternRock", "Space", "Meditative", "Ethnic", "Darkwave", "Electronic", "Eurodance", "Dream", "Comedy", "Cult", "Jungle", "Cabaret", "Psychadelic", "Rave", "Showtunes", "Trailer", "Tribal", "Polka", "Retro", "Musical", "Swing", "Bebob", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Chorus", "Acoustic", "Humour", "Chanson", "Opera", "Sonata", "Symphony", "Primus", "Satire", "Club", "Tango", "Samba", "Folklore", "Freestyle", "Duet", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Beat", "Crossover", "Merengue", "Salsa", "Anime", "JPop", "SynthPop", "ljpg", "pgmyuv", "pict", "im24", "im32", "sunras", "yuv10", "xface", "v410", "cvid1", "mp2vY", "tiffb", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "Shr7", "sac3", "alac", "twos", "lpcm", "ssmv", "c608", "notification", "invoke", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "ssl_client", "ssl_server", "DEFAULT", "ECDHE_ECDSA", "ECDHE_RSA", "ECDHE_PSK", "GENERIC", "TLS_", "_WITH_", "AEAD", "kRSA", "kDHE", "kEDH", "kECDHE", "kEECDH", "kPSK", "aRSA", "aECDSA", "aPSK", "AES128", "AES256", "AESGCM", "CHACHA20", "HIGH", "FIPS", "AES_128_CBC", "AES_256_CBC", "CHACHA20_POLY1305", "DTLSv1", "DRCHVA", "unexpected_message", "Resumption", "CLIENT_HANDSHAKE_TRAFFIC_SECRET", "SERVER_HANDSHAKE_TRAFFIC_SECRET", "CLIENT_TRAFFIC_SECRET_0", "SERVER_TRAFFIC_SECRET_0", "finished", "SRTP_AES128_CM_SHA1_80", "SRTP_AES128_CM_SHA1_32", "SRTP_AEAD_AES_128_GCM", "SRTP_AEAD_AES_256_GCM", "CLIENT_RANDOM", "CONNE", "SRVR", "CLNT", "OPENSSL_internal", "ASN1_LENGTH_MISMATCH", "AUX_ERROR", "BAD_GET_ASN1_OBJECT_CALL", "BAD_OBJECT_HEADER", "BMPSTRING_IS_WRONG_LENGTH", "BN_LIB", "BOOLEAN_IS_WRONG_LENGTH", "BUFFER_TOO_SMALL", "CONTEXT_NOT_INITIALISED", "DECODE_ERROR", "DEPTH_EXCEEDED", "DIGEST_AND_KEY_TYPE_NOT_SUPPORTED", "ENCODE_ERROR", "ERROR_GETTING_TIME", "EXPECTING_AN_ASN1_SEQUENCE", "EXPECTING_AN_INTEGER", "EXPECTING_AN_OBJECT", "EXPECTING_A_BOOLEAN", "EXPECTING_A_TIME", "EXPLICIT_LENGTH_MISMATCH", "EXPLICIT_TAG_NOT_CONSTRUCTED", "FIELD_MISSING", "FIRST_NUM_TOO_LARGE", "HEADER_TOO_LONG", "ILLEGAL_BITSTRING_FORMAT", "ILLEGAL_BOOLEAN", "ILLEGAL_CHARACTERS", "ILLEGAL_FORMAT", "ILLEGAL_HEX", "ILLEGAL_IMPLICIT_TAG", "ILLEGAL_INTEGER", "ILLEGAL_NESTED_TAGGING", "ILLEGAL_NULL", "ILLEGAL_NULL_VALUE", "ILLEGAL_OBJECT", "ILLEGAL_OPTIONAL_ANY", "ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE", "ILLEGAL_TAGGED_ANY", "ILLEGAL_TIME_VALUE", "INTEGER_NOT_ASCII_FORMAT", "INTEGER_TOO_LARGE_FOR_LONG", "INVALID_BIT_STRING_BITS_LEFT", "INVALID_BMPSTRING_LENGTH", "INVALID_DIGIT", "INVALID_MODIFIER", "INVALID_NUMBER", "INVALID_OBJECT_ENCODING", "INVALID_SEPARATOR", "INVALID_TIME_FORMAT", "INVALID_UNIVERSALSTRING_LENGTH", "INVALID_UTF8STRING", "LIST_ERROR", "MISSING_ASN1_EOS", "MISSING_EOC", "MISSING_SECOND_NUMBER", "MISSING_VALUE", "MSTRING_NOT_UNIVERSAL", "MSTRING_WRONG_TAG", "NESTED_ASN1_ERROR", "NESTED_ASN1_STRING", "NON_HEX_CHARACTERS", "NOT_ASCII_FORMAT", "NOT_ENOUGH_DATA", "NO_MATCHING_CHOICE_TYPE", "NULL_IS_WRONG_LENGTH", "OBJECT_NOT_ASCII_FORMAT", "ODD_NUMBER_OF_CHARS", "SECOND_NUMBER_TOO_LARGE", "SEQUENCE_LENGTH_MISMATCH", "SEQUENCE_NOT_CONSTRUCTED", "SEQUENCE_OR_SET_NEEDS_CONFIG", "SHORT_LINE", "STREAMING_NOT_SUPPORTED", "STRING_TOO_LONG", "STRING_TOO_SHORT", "TAG_VALUE_TOO_HIGH", "TIME_NOT_ASCII_FORMAT", "TOO_LONG", "TYPE_NOT_CONSTRUCTED", "TYPE_NOT_PRIMITIVE", "UNEXPECTED_EOC", "UNIVERSALSTRING_IS_WRONG_LENGTH", "UNKNOWN_FORMAT", "UNKNOWN_MESSAGE_DIGEST_ALGORITHM", "UNKNOWN_SIGNATURE_ALGORITHM", "UNKNOWN_TAG", "UNSUPPORTED_ANY_DEFINED_BY_TYPE", "UNSUPPORTED_PUBLIC_KEY_TYPE", "UNSUPPORTED_TYPE", "WRONG_PUBLIC_KEY_TYPE", "WRONG_TAG", "WRONG_TYPE", "BAD_FOPEN_MODE", "BROKEN_PIPE", "CONNECT_ERROR", "ERROR_SETTING_NBIO", "INVALID_ARGUMENT", "IN_USE", "KEEPALIVE", "NBIO_CONNECT_ERROR", "NO_HOSTNAME_SPECIFIED", "NO_PORT_SPECIFIED", "NO_SUCH_FILE", "NULL_PARAMETER", "SYS_LIB", "UNABLE_TO_CREATE_SOCKET", "UNINITIALIZED", "UNSUPPORTED_METHOD", "WRITE_TO_READ_ONLY_BIO", "ARG2_LT_ARG3", "BAD_ENCODING", "BAD_RECIPROCAL", "BIGNUM_TOO_LONG", "BITS_TOO_SMALL", "CALLED_WITH_EVEN_MODULUS", "DIV_BY_ZERO", "EXPAND_ON_STATIC_BIGNUM_DATA", "INPUT_NOT_REDUCED", "INVALID_RANGE", "NEGATIVE_NUMBER", "NOT_A_SQUARE", "NOT_INITIALIZED", "NO_INVERSE", "PRIVATE_KEY_TOO_LARGE", "P_IS_NOT_PRIME", "TOO_MANY_ITERATIONS", "TOO_MANY_TEMPORARY_VARIABLES", "AES_KEY_SETUP_FAILED", "BAD_DECRYPT", "BAD_KEY_LENGTH", "CTRL_NOT_IMPLEMENTED", "CTRL_OPERATION_NOT_IMPLEMENTED", "DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH", "INITIALIZATION_ERROR", "INPUT_NOT_INITIALIZED", "INVALID_AD_SIZE", "INVALID_KEY_LENGTH", "INVALID_NONCE_SIZE", "INVALID_OPERATION", "IV_TOO_LARGE", "NO_CIPHER_SET", "NO_DIRECTION_SET", "OUTPUT_ALIASES_INPUT", "TAG_TOO_LARGE", "TOO_LARGE", "UNSUPPORTED_AD_SIZE", "UNSUPPORTED_INPUT_SIZE", "UNSUPPORTED_KEY_SIZE", "UNSUPPORTED_NONCE_SIZE", "UNSUPPORTED_TAG_SIZE", "WRONG_FINAL_BLOCK_LENGTH", "LIST_CANNOT_BE_NULL", "MISSING_CLOSE_SQUARE_BRACKET", "MISSING_EQUAL_SIGN", "NO_CLOSE_BRACE", "UNABLE_TO_CREATE_NEW_SECTION", "VARIABLE_HAS_NO_VALUE", "BAD_GENERATOR", "INVALID_PUBKEY", "MODULUS_TOO_LARGE", "NO_PRIVATE_VALUE", "BAD_Q_VALUE", "BAD_VERSION", "MISSING_PARAMETERS", "NEED_NEW_SETUP_VALUES", "BIGNUM_OUT_OF_RANGE", "COORDINATES_OUT_OF_RANGE", "D2I_ECPKPARAMETERS_FAILURE", "EC_GROUP_NEW_BY_NAME_FAILURE", "GROUP2PKPARAMETERS_FAILURE", "GROUP_MISMATCH", "I2D_ECPKPARAMETERS_FAILURE", "INCOMPATIBLE_OBJECTS", "INVALID_COFACTOR", "INVALID_COMPRESSED_POINT", "INVALID_COMPRESSION_BIT", "INVALID_ENCODING", "INVALID_FIELD", "INVALID_FORM", "INVALID_GROUP_ORDER", "INVALID_PRIVATE_KEY", "MISSING_PRIVATE_KEY", "NON_NAMED_CURVE", "PKPARAMETERS2GROUP_FAILURE", "POINT_AT_INFINITY", "POINT_IS_NOT_ON_CURVE", "SLOT_FULL", "UNDEFINED_GENERATOR", "UNKNOWN_GROUP", "UNKNOWN_ORDER", "WRONG_CURVE_PARAMETERS", "WRONG_ORDER", "KDF_FAILED", "POINT_ARITHMETIC_FAILURE", "BAD_SIGNATURE", "NOT_IMPLEMENTED", "RANDOM_NUMBER_GENERATION_FAILED", "OPERATION_NOT_SUPPORTED", "COMMAND_NOT_SUPPORTED", "DIFFERENT_KEY_TYPES", "DIFFERENT_PARAMETERS", "EXPECTING_AN_EC_KEY_KEY", "EXPECTING_AN_RSA_KEY", "EXPECTING_A_DSA_KEY", "ILLEGAL_OR_UNSUPPORTED_PADDING_MODE", "INVALID_DIGEST_LENGTH", "INVALID_DIGEST_TYPE", "INVALID_KEYBITS", "INVALID_MGF1_MD", "INVALID_PADDING_MODE", "INVALID_PSS_SALTLEN", "KEYS_NOT_SET", "NO_DEFAULT_DIGEST", "NO_KEY_SET", "NO_MDC2_SUPPORT", "NO_NID_FOR_CURVE", "NO_OPERATION_SET", "NO_PARAMETERS_SET", "OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE", "OPERATON_NOT_INITIALIZED", "UNKNOWN_PUBLIC_KEY_TYPE", "UNSUPPORTED_ALGORITHM", "OUTPUT_TOO_LARGE", "UNKNOWN_NID", "BAD_BASE64_DECODE", "BAD_END_LINE", "BAD_IV_CHARS", "BAD_PASSWORD_READ", "CIPHER_IS_NULL", "ERROR_CONVERTING_PRIVATE_KEY", "NOT_DEK_INFO", "NOT_ENCRYPTED", "NOT_PROC_TYPE", "NO_START_LINE", "READ_KEY", "SHORT_HEADER", "UNSUPPORTED_CIPHER", "UNSUPPORTED_ENCRYPTION", "BAD_PKCS12_DATA", "BAD_PKCS12_VERSION", "CIPHER_HAS_NO_OBJECT_IDENTIFIER", "CRYPT_ERROR", "ENCRYPT_ERROR", "ERROR_SETTING_CIPHER_PARAMS", "INCORRECT_PASSWORD", "KEYGEN_FAILURE", "KEY_GEN_ERROR", "METHOD_NOT_SUPPORTED", "MISSING_MAC", "MULTIPLE_PRIVATE_KEYS_IN_PKCS12", "PKCS12_PUBLIC_KEY_INTEGRITY_NOT_SUPPORTED", "PKCS12_TOO_DEEPLY_NESTED", "PRIVATE_KEY_DECODE_ERROR", "PRIVATE_KEY_ENCODE_ERROR", "UNKNOWN_ALGORITHM", "UNKNOWN_CIPHER", "UNKNOWN_CIPHER_ALGORITHM", "UNKNOWN_DIGEST", "UNKNOWN_HASH", "UNSUPPORTED_PRIVATE_KEY_ALGORITHM", "BAD_E_VALUE", "BAD_FIXED_HEADER_DECRYPT", "BAD_PAD_BYTE_COUNT", "BAD_RSA_PARAMETERS", "BLOCK_TYPE_IS_NOT_01", "BN_NOT_INITIALIZED", "CANNOT_RECOVER_MULTI_PRIME_KEY", "CRT_PARAMS_ALREADY_GIVEN", "CRT_VALUES_INCORRECT", "DATA_LEN_NOT_EQUAL_TO_MOD_LEN", "DATA_TOO_LARGE", "DATA_TOO_LARGE_FOR_KEY_SIZE", "DATA_TOO_LARGE_FOR_MODULUS", "DATA_TOO_SMALL", "DATA_TOO_SMALL_FOR_KEY_SIZE", "DIGEST_TOO_BIG_FOR_RSA_KEY", "D_E_NOT_CONGRUENT_TO_1", "EMPTY_PUBLIC_KEY", "FIRST_OCTET_INVALID", "INCONSISTENT_SET_OF_CRT_VALUES", "INTERNAL_ERROR", "INVALID_MESSAGE_LENGTH", "KEY_SIZE_TOO_SMALL", "LAST_OCTET_INVALID", "MUST_HAVE_AT_LEAST_TWO_PRIMES", "NO_PUBLIC_EXPONENT", "NULL_BEFORE_BLOCK_MISSING", "N_NOT_EQUAL_P_Q", "OAEP_DECODING_ERROR", "ONLY_ONE_OF_P_Q_GIVEN", "OUTPUT_BUFFER_TOO_SMALL", "PADDING_CHECK_FAILED", "PKCS_DECODING_ERROR", "SLEN_CHECK_FAILED", "SLEN_RECOVERY_FAILED", "UNKNOWN_ALGORITHM_TYPE", "UNKNOWN_PADDING_TYPE", "VALUE_MISSING", "WRONG_SIGNATURE_LENGTH", "APP_DATA_IN_HANDSHAKE", "ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT", "BAD_ALERT", "BAD_CHANGE_CIPHER_SPEC", "BAD_DATA_RETURNED_BY_CALLBACK", "BAD_DH_P_LENGTH", "BAD_DIGEST_LENGTH", "BAD_ECC_CERT", "BAD_ECPOINT", "BAD_HANDSHAKE_RECORD", "BAD_HELLO_REQUEST", "BAD_LENGTH", "BAD_PACKET_LENGTH", "BAD_RSA_ENCRYPT", "BAD_SRTP_MKI_VALUE", "BAD_SRTP_PROTECTION_PROFILE_LIST", "BAD_SSL_FILETYPE", "BAD_WRITE_RETRY", "BIO_NOT_SET", "BLOCK_CIPHER_PAD_IS_WRONG", "BUFFERED_MESSAGES_ON_CIPHER_CHANGE", "CANNOT_PARSE_LEAF_CERT", "CA_DN_LENGTH_MISMATCH", "CA_DN_TOO_LONG", "CCS_RECEIVED_EARLY", "CERTIFICATE_VERIFY_FAILED", "CERT_CB_ERROR", "CERT_LENGTH_MISMATCH", "CHANNEL_ID_NOT_P256", "CHANNEL_ID_SIGNATURE_INVALID", "CIPHER_OR_HASH_UNAVAILABLE", "CLIENTHELLO_PARSE_FAILED", "CLIENTHELLO_TLSEXT", "CONNECTION_REJECTED", "CONNECTION_TYPE_NOT_SET", "CUSTOM_EXTENSION_ERROR", "DATA_LENGTH_TOO_LONG", "DECRYPTION_FAILED", "DECRYPTION_FAILED_OR_BAD_RECORD_MAC", "DH_PUBLIC_VALUE_LENGTH_IS_WRONG", "DH_P_TOO_LONG", "DIGEST_CHECK_FAILED", "DOWNGRADE_DETECTED", "DTLS_MESSAGE_TOO_BIG", "DUPLICATE_EXTENSION", "DUPLICATE_KEY_SHARE", "ECC_CERT_NOT_FOR_SIGNING", "EMS_STATE_INCONSISTENT", "ENCRYPTED_LENGTH_TOO_LONG", "ERROR_ADDING_EXTENSION", "ERROR_IN_RECEIVED_CIPHER_LIST", "ERROR_PARSING_EXTENSION", "EXCESSIVE_MESSAGE_SIZE", "EXTRA_DATA_IN_MESSAGE", "FRAGMENT_MISMATCH", "GOT_NEXT_PROTO_WITHOUT_EXTENSION", "HANDSHAKE_FAILURE_ON_CLIENT_HELLO", "HTTPS_PROXY_REQUEST", "HTTP_REQUEST", "INAPPROPRIATE_FALLBACK", "INVALID_ALPN_PROTOCOL", "INVALID_COMMAND", "INVALID_COMPRESSION_LIST", "INVALID_MESSAGE", "INVALID_OUTER_RECORD_TYPE", "INVALID_SCT_LIST", "INVALID_SSL_SESSION", "INVALID_TICKET_KEYS_LENGTH", "LENGTH_MISMATCH", "LIBRARY_HAS_NO_CIPHERS", "MISSING_EXTENSION", "MISSING_KEY_SHARE", "MISSING_RSA_CERTIFICATE", "MISSING_TMP_DH_KEY", "MISSING_TMP_ECDH_KEY", "MIXED_SPECIAL_OPERATOR_WITH_GROUPS", "MTU_TOO_SMALL", "NEGOTIATED_BOTH_NPN_AND_ALPN", "NESTED_GROUP", "NO_CERTIFICATES_RETURNED", "NO_CERTIFICATE_ASSIGNED", "NO_CERTIFICATE_SET", "NO_CIPHERS_AVAILABLE", "NO_CIPHERS_PASSED", "NO_CIPHERS_SPECIFIED", "NO_CIPHER_MATCH", "NO_COMMON_SIGNATURE_ALGORITHMS", "NO_COMPRESSION_SPECIFIED", "NO_GROUPS_SPECIFIED", "NO_METHOD_SPECIFIED", "NO_P256_SUPPORT", "NO_PRIVATE_KEY_ASSIGNED", "NO_RENEGOTIATION", "NO_REQUIRED_DIGEST", "NO_SHARED_CIPHER", "NO_SHARED_GROUP", "NULL_SSL_CTX", "NULL_SSL_METHOD_PASSED", "OLD_SESSION_CIPHER_NOT_RETURNED", "OLD_SESSION_PRF_HASH_MISMATCH", "OLD_SESSION_VERSION_NOT_RETURNED", "PARSE_TLSEXT", "PATH_TOO_LONG", "PEER_DID_NOT_RETURN_A_CERTIFICATE", "PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE", "PRE_SHARED_KEY_MUST_BE_LAST", "PROTOCOL_IS_SHUTDOWN", "PSK_IDENTITY_BINDER_COUNT_MISMATCH", "PSK_IDENTITY_NOT_FOUND", "PSK_NO_CLIENT_CB", "PSK_NO_SERVER_CB", "READ_TIMEOUT_EXPIRED", "RECORD_LENGTH_MISMATCH", "RECORD_TOO_LARGE", "RENEGOTIATION_EMS_MISMATCH", "RENEGOTIATION_ENCODING_ERR", "RENEGOTIATION_MISMATCH", "REQUIRED_CIPHER_MISSING", "RESUMED_EMS_SESSION_WITHOUT_EMS_EXTENSION", "RESUMED_NON_EMS_SESSION_WITH_EMS_EXTENSION", "SCSV_RECEIVED_WHEN_RENEGOTIATING", "SERVERHELLO_TLSEXT", "SESSION_ID_CONTEXT_UNINITIALIZED", "SESSION_MAY_NOT_BE_CREATED", "SHUTDOWN_WHILE_IN_INIT", "SIGNATURE_ALGORITHMS_EXTENSION_SENT_BY_SERVER", "SRTP_COULD_NOT_ALLOCATE_PROFILES", "SRTP_UNKNOWN_PROTECTION_PROFILE", "SSL3_EXT_INVALID_SERVERNAME", "SSLV3_ALERT_BAD_CERTIFICATE", "SSLV3_ALERT_BAD_RECORD_MAC", "SSLV3_ALERT_CERTIFICATE_EXPIRED", "SSLV3_ALERT_CERTIFICATE_REVOKED", "SSLV3_ALERT_CERTIFICATE_UNKNOWN", "SSLV3_ALERT_CLOSE_NOTIFY", "SSLV3_ALERT_DECOMPRESSION_FAILURE", "SSLV3_ALERT_HANDSHAKE_FAILURE", "SSLV3_ALERT_ILLEGAL_PARAMETER", "SSLV3_ALERT_NO_CERTIFICATE", "SSLV3_ALERT_UNEXPECTED_MESSAGE", "SSLV3_ALERT_UNSUPPORTED_CERTIFICATE", "SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION", "SSL_HANDSHAKE_FAILURE", "SSL_SESSION_ID_CONTEXT_TOO_LONG", "TLSV1_ALERT_ACCESS_DENIED", "TLSV1_ALERT_DECODE_ERROR", "TLSV1_ALERT_DECRYPTION_FAILED", "TLSV1_ALERT_DECRYPT_ERROR", "TLSV1_ALERT_EXPORT_RESTRICTION", "TLSV1_ALERT_INAPPROPRIATE_FALLBACK", "TLSV1_ALERT_INSUFFICIENT_SECURITY", "TLSV1_ALERT_INTERNAL_ERROR", "TLSV1_ALERT_NO_RENEGOTIATION", "TLSV1_ALERT_PROTOCOL_VERSION", "TLSV1_ALERT_RECORD_OVERFLOW", "TLSV1_ALERT_UNKNOWN_CA", "TLSV1_ALERT_USER_CANCELLED", "TLSV1_BAD_CERTIFICATE_HASH_VALUE", "TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE", "TLSV1_CERTIFICATE_REQUIRED", "TLSV1_CERTIFICATE_UNOBTAINABLE", "TLSV1_UNKNOWN_PSK_IDENTITY", "TLSV1_UNRECOGNIZED_NAME", "TLSV1_UNSUPPORTED_EXTENSION", "TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST", "TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG", "TOO_MANY_EMPTY_FRAGMENTS", "TOO_MANY_KEY_UPDATES", "TOO_MANY_WARNING_ALERTS", "TOO_MUCH_SKIPPED_EARLY_DATA", "UNABLE_TO_FIND_ECDH_PARAMETERS", "UNEXPECTED_EXTENSION", "UNEXPECTED_MESSAGE", "UNEXPECTED_OPERATOR_IN_GROUP", "UNEXPECTED_RECORD", "UNKNOWN_ALERT_TYPE", "UNKNOWN_CERTIFICATE_TYPE", "UNKNOWN_CIPHER_RETURNED", "UNKNOWN_CIPHER_TYPE", "UNKNOWN_KEY_EXCHANGE_TYPE", "UNKNOWN_PROTOCOL", "UNKNOWN_SSL_VERSION", "UNKNOWN_STATE", "UNSAFE_LEGACY_RENEGOTIATION_DISABLED", "UNSUPPORTED_COMPRESSION_ALGORITHM", "UNSUPPORTED_ELLIPTIC_CURVE", "UNSUPPORTED_PROTOCOL", "UNSUPPORTED_PROTOCOL_FOR_CUSTOM_KEY", "WRONG_CERTIFICATE_TYPE", "WRONG_CIPHER_RETURNED", "WRONG_CURVE", "WRONG_MESSAGE_TYPE", "WRONG_SIGNATURE_TYPE", "WRONG_SSL_VERSION", "WRONG_VERSION_NUMBER", "X509_LIB", "X509_VERIFICATION_SETUP_PROBLEMS", "AKID_MISMATCH", "BAD_PKCS7_VERSION", "BAD_X509_FILETYPE", "BASE64_DECODE_ERROR", "CANT_CHECK_DH_KEY", "CERT_ALREADY_IN_HASH_TABLE", "CRL_ALREADY_DELTA", "CRL_VERIFY_FAILURE", "IDP_MISMATCH", "INVALID_DIRECTORY", "INVALID_FIELD_NAME", "INVALID_PSS_PARAMETERS", "INVALID_TRUST", "ISSUER_MISMATCH", "KEY_TYPE_MISMATCH", "KEY_VALUES_MISMATCH", "LOADING_CERT_DIR", "LOADING_DEFAULTS", "NAME_TOO_LONG", "NEWER_CRL_NOT_NEWER", "NOT_PKCS7_SIGNED_DATA", "NO_CERTIFICATES_INCLUDED", "NO_CERT_SET_FOR_US_TO_VERIFY", "NO_CRLS_INCLUDED", "NO_CRL_NUMBER", "PUBLIC_KEY_DECODE_ERROR", "PUBLIC_KEY_ENCODE_ERROR", "SHOULD_RETRY", "UNKNOWN_KEY_TYPE", "UNKNOWN_PURPOSE_ID", "UNKNOWN_TRUST_ID", "WRONG_LOOKUP_TYPE", "BAD_IP_ADDRESS", "BAD_OBJECT", "BN_DEC2BN_ERROR", "BN_TO_ASN1_INTEGER_ERROR", "CANNOT_FIND_FREE_FUNCTION", "DIRNAME_ERROR", "DISTPOINT_ALREADY_SET", "DUPLICATE_ZONE_ID", "ERROR_CONVERTING_ZONE", "ERROR_CREATING_EXTENSION", "ERROR_IN_EXTENSION", "EXPECTED_A_SECTION_NAME", "EXTENSION_EXISTS", "EXTENSION_NAME_ERROR", "EXTENSION_NOT_FOUND", "EXTENSION_SETTING_NOT_SUPPORTED", "EXTENSION_VALUE_ERROR", "ILLEGAL_EMPTY_EXTENSION", "ILLEGAL_HEX_DIGIT", "INCORRECT_POLICY_SYNTAX_TAG", "INVALID_BOOLEAN_STRING", "INVALID_EXTENSION_STRING", "INVALID_MULTIPLE_RDNS", "INVALID_NAME", "INVALID_NULL_ARGUMENT", "INVALID_NULL_NAME", "INVALID_NULL_VALUE", "INVALID_NUMBERS", "INVALID_OBJECT_IDENTIFIER", "INVALID_OPTION", "INVALID_POLICY_IDENTIFIER", "INVALID_PROXY_POLICY_SETTING", "INVALID_PURPOSE", "INVALID_SECTION", "INVALID_SYNTAX", "ISSUER_DECODE_ERROR", "NEED_ORGANIZATION_AND_NUMBERS", "NO_CONFIG_DATABASE", "NO_ISSUER_CERTIFICATE", "NO_ISSUER_DETAILS", "NO_POLICY_IDENTIFIER", "NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED", "NO_PUBLIC_KEY", "NO_SUBJECT_DETAILS", "ODD_NUMBER_OF_DIGITS", "OPERATION_NOT_DEFINED", "OTHERNAME_ERROR", "POLICY_LANGUAGE_ALREADY_DEFINED", "POLICY_PATH_LENGTH", "POLICY_PATH_LENGTH_ALREADY_DEFINED", "POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY", "SECTION_NOT_FOUND", "UNABLE_TO_GET_ISSUER_DETAILS", "UNABLE_TO_GET_ISSUER_KEYID", "UNKNOWN_BIT_STRING_ARGUMENT", "UNKNOWN_EXTENSION", "UNKNOWN_EXTENSION_NAME", "UNKNOWN_OPTION", "UNSUPPORTED_OPTION", "USER_TOO_LONG", "sha224", "sha256", "sha384", "sha512", "dsaWithSHA", "dsaWithSHA1", "md5WithRSAEncryption", "sha1WithRSAEncryption", "sha224WithRSAEncryption", "sha256WithRSAEncryption", "sha384WithRSAEncryption", "sha512WithRSAEncryption", "ASN1_OCTET_STRING", "ASN1_INTEGER", "ASN1_ENUMERATED", "ASN1_BIT_STRING", "ASN1_UTF8STRING", "ASN1_PRINTABLESTRING", "ASN1_T61STRING", "ASN1_IA5STRING", "ASN1_GENERALSTRING", "ASN1_UTCTIME", "ASN1_GENERALIZEDTIME", "ASN1_VISIBLESTRING", "ASN1_UNIVERSALSTRING", "ASN1_BMPSTRING", "ASN1_NULL", "ASN1_OBJECT", "ASN1_ANY", "ASN1_SEQUENCE", "ASN1_PRINTABLE", "DISPLAYTEXT", "DIRECTORYSTRING", "ASN1_BOOLEAN", "ASN1_TBOOLEAN", "ASN1_FBOOLEAN", "ASN1_OCTET_STRING_NDEF", "ASN1_SEQUENCE_ANY", "ASN1_SET_ANY", "ENCRYPTED", "PKCS7", "SSL_CERT_DIR", "SSL_CERT_FILE", "pkcs7", "smime_sign", "X509_ALGOR", "X509_ALGORS", "X509_REVOKED", "X509_CRL_INFO", "X509_CRL", "serialNumber", "revocationDate", "sig_alg", "lastUpdate", "nextUpdate", "X509_EXTENSION", "X509_EXTENSIONS", "critical", "X509_NAME_ENTRY", "X509_NAME_ENTRIES", "X509_NAME_INTERNAL", "RDNS", "X509_PUBKEY", "public_key", "X509_REQ_INFO", "X509_REQ", "subject", "pubkey", "attributes", "req_info", "X509_SIG", "digest", "NETSCAPE_SPKAC", "NETSCAPE_SPKI", "spkac", "sig_algor", "X509_CINF", "X509", "validity", "issuerUID", "subjectUID", "cert_info", "X509_CERT_AUX", "X509_CERT_PAIR", "trust", "alias", "keyid", "reverse", "serial", "CERTIFICATEPOLICIES", "POLICYINFO", "POLICYQUALINFO", "USERNOTICE", "NOTICEREF", "policyid", "qualifiers", "pqualid", "noticeref", "exptext", "noticenos", "ia5org", "policyIdentifier", "userNotice", "explicitText", "noticeNumbers", "DIST_POINT_NAME", "CRL_DIST_POINTS", "ISSUING_DIST_POINT", "CRLissuer", "Unused", "keyCompromise", "CACompromise", "affiliationChanged", "Superseded", "superseded", "cessationOfOperation", "certificateHold", "privilegeWithdrawn", "AACompromise", "distpoint", "CRLDistributionPoints", "onlyuser", "onlyCA", "onlysomereasons", "indirectCRL", "onlyattr", "onlyAA", "EDIPARTYNAME", "GENERAL_NAME", "GENERAL_NAMES", "type_id", "nameAssigner", "partyName", "GeneralNames", "NAME_CONSTRAINTS", "minimum", "maximum", "permittedSubtrees", "excludedSubtrees", "excluded", "Permitted", "Excluded", "pathlen", "PROXY_POLICY", "PROXY_CERT_INFO_EXTENSION", "policyLanguage", "pcPathLengthConstraint", "proxyPolicy", "POLICY_CONSTRAINTS", "requireExplicitPolicy", "inhibitPolicyMapping", "PKEY_USAGE_PERIOD", "notBefore", "notAfter", "POLICY_MAPPING", "POLICY_MAPPINGS", "issuerDomainPolicy", "subjectDomainPolicy", "sslclient", "nssslserver", "smimesign", "smimeencrypt", "crlsign", "ocsphelper", "timestampsign", "SXNETID", "SXNET", "zone", "PKCS8_PRIV_KEY_INFO", "pkeyalg", "pkey", "UNDEF", "undefined", "rsadsi", "pkcs", "rsaEncryption", "md2WithRSAEncryption", "X500", "commonName", "countryName", "localityName", "stateOrProvinceName", "organizationName", "organizationalUnitName", "pkcs3", "dhKeyAgreement", "shaWithRSAEncryption", "pkcs9", "emailAddress", "unstructuredName", "contentType", "messageDigest", "signingTime", "countersignature", "challengePassword", "unstructuredAddress", "extendedCertificateAttributes", "Netscape", "nsCertExt", "nsDataType", "PBKDF2", "nsCertType", "nsBaseUrl", "nsRevocationUrl", "nsCaRevocationUrl", "nsRenewalUrl", "nsCaPolicyUrl", "nsSslServerName", "nsComment", "nsCertSequence", "subjectKeyIdentifier", "keyUsage", "privateKeyUsagePeriod", "subjectAltName", "issuerAltName", "basicConstraints", "crlNumber", "certificatePolicies", "authorityKeyIdentifier", "mdc2", "mdc2WithRSA", "givenName", "surname", "initials", "crlDistributionPoints", "md5WithRSA", "pbeWithMD5AndCast5CBC", "sha1WithRSA", "dsaEncryption", "ripemd160", "ripemd160WithRSA", "extendedKeyUsage", "PKIX", "serverAuth", "clientAuth", "codeSigning", "emailProtection", "timeStamping", "msCodeInd", "msCodeCom", "msCTLSign", "msSGC", "msEFS", "nsSGC", "deltaCRL", "CRLReason", "invalidityDate", "SXNetID", "pbeWithSHA1And128BitRC4", "pbeWithSHA1And40BitRC4", "keyBag", "pkcs8ShroudedKeyBag", "certBag", "crlBag", "secretBag", "safeContentsBag", "friendlyName", "localKeyID", "x509Certificate", "sdsiCertificate", "x509Crl", "PBES2", "PBMAC1", "hmacWithSHA1", "msExtReq", "extReq", "dnQualifier", "authorityInfoAccess", "OCSP", "caIssuers", "OCSPSigning", "X9cm", "pkcs1", "pkcs5", "SMIME", "biometricInfo", "qcStatements", "aaControls", "textNotice", "ipsecEndSystem", "ipsecTunnel", "ipsecUser", "ad_timestamping", "AD_DVCS", "basicOCSPResponse", "CrlID", "acceptableResponses", "noCheck", "archiveCutoff", "serviceLocator", "extendedStatus", "trustRoot", "rsaSignature", "X500algorithms", "IANA", "iana", "Directory", "mgmt", "Management", "Experimental", "Private", "Security", "snmpv2", "SNMPv2", "Mail", "enterprises", "Enterprises", "dcobject", "dcObject", "domainComponent", "clearance", "md4WithRSAEncryption", "subjectInfoAccess", "policyConstraints", "targetInformation", "noRevAvail", "prime192v1", "prime192v2", "prime192v3", "prime239v1", "prime239v2", "prime239v3", "prime256v1", "CSPName", "holdInstructionCode", "holdInstructionNone", "holdInstructionCallIssuer", "holdInstructionReject", "pilot", "pilotAttributeType", "pilotAttributeSyntax", "pilotObjectClass", "pilotGroups", "iA5StringSyntax", "caseIgnoreIA5StringSyntax", "pilotObject", "pilotPerson", "account", "document", "room", "documentSeries", "rFC822localPart", "dNSDomain", "domainRelatedObject", "friendlyCountry", "simpleSecurityObject", "pilotOrganization", "pilotDSA", "qualityLabelledData", "userId", "textEncodedORAddress", "rfc822Mailbox", "favouriteDrink", "roomNumber", "photo", "userClass", "manager", "documentIdentifier", "documentTitle", "documentVersion", "documentAuthor", "documentLocation", "homeTelephoneNumber", "secretary", "otherMailbox", "lastModifiedTime", "lastModifiedBy", "aRecord", "pilotAttributeType27", "mXRecord", "nSRecord", "sOARecord", "cNAMERecord", "associatedDomain", "associatedName", "homePostalAddress", "personalTitle", "mobileTelephoneNumber", "pagerTelephoneNumber", "friendlyCountryName", "organizationalStatus", "janetMailbox", "mailPreferenceOption", "buildingName", "dSAQuality", "singleLevelQuality", "subtreeMinimumQuality", "subtreeMaximumQuality", "personalSignature", "dITRedirect", "documentPublisher", "x500UniqueIdentifier", "generationQualifier", "pseudonym", "rsaOAEPEncryptionSET", "msSmartcardLogin", "msUPN", "street", "streetAddress", "postalCode", "proxyCertInfo", "nameConstraints", "Independent", "onBasis", "tpBasis", "ppBasis", "c2pnb163v1", "c2pnb163v2", "c2pnb163v3", "c2pnb176v1", "c2tnb191v1", "c2tnb191v2", "c2tnb191v3", "c2onb191v4", "c2onb191v5", "c2pnb208w1", "c2tnb239v1", "c2tnb239v2", "c2tnb239v3", "c2onb239v4", "c2onb239v5", "c2pnb272w1", "c2pnb304w1", "c2tnb359v1", "c2pnb368w1", "c2tnb431r1", "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1", "secp160r1", "secp160r2", "secp192k1", "secp224k1", "secp224r1", "secp256k1", "secp384r1", "secp521r1", "sect113r1", "sect113r2", "sect131r1", "sect131r2", "sect163k1", "sect163r1", "sect163r2", "sect193r1", "sect193r2", "sect233k1", "sect233r1", "sect239k1", "sect283k1", "sect283r1", "sect409k1", "sect409r1", "sect571k1", "sect571r1", "anyPolicy", "policyMappings", "inhibitAnyPolicy", "ipsec3", "ipsec4", "subjectDirectoryAttributes", "issuingDistributionPoint", "certificateIssuer", "KISA", "kisa", "caRepository", "hmacWithMD5", "hmacWithSHA224", "hmacWithSHA256", "hmacWithSHA384", "hmacWithSHA512", "dsa_with_SHA224", "dsa_with_SHA256", "whirlpool", "cryptopro", "cryptocom", "md_gost94", "gost2001", "gost89", "gost94cc", "gost2001cc", "HMAC", "hmac", "LocalKeySet", "freshestCRL", "searchGuide", "businessCategory", "postalAddress", "postOfficeBox", "physicalDeliveryOfficeName", "telephoneNumber", "telexNumber", "teletexTerminalIdentifier", "facsimileTelephoneNumber", "x121Address", "internationaliSDNNumber", "registeredAddress", "destinationIndicator", "preferredDeliveryMethod", "presentationAddress", "supportedApplicationContext", "member", "owner", "roleOccupant", "seeAlso", "userPassword", "userCertificate", "cACertificate", "authorityRevocationList", "certificateRevocationList", "crossCertificatePair", "enhancedSearchGuide", "protocolInformation", "distinguishedName", "uniqueMember", "houseIdentifier", "supportedAlgorithms", "deltaRevocationList", "dmdName", "CMAC", "cmac", "anyExtendedKeyUsage", "MGF1", "mgf1", "rsassaPss", "rsaesOaep", "dhpublicnumber", "brainpoolP160r1", "brainpoolP160t1", "brainpoolP192r1", "brainpoolP192t1", "brainpoolP224r1", "brainpoolP224t1", "brainpoolP256r1", "brainpoolP256t1", "brainpoolP320r1", "brainpoolP320t1", "brainpoolP384r1", "brainpoolP384t1", "brainpoolP512r1", "brainpoolP512t1", "PSPECIFIED", "pSpecified", "X25519", "nombstr", "pkix", "utf8only", "ASN1_TIME", "EXTERNAL", "REAL", "NUMERICSTRING", "VIDEOTEXSTRING", "GRAPHICSTRING", "RSA_PSS_PARAMS", "hashAlgorithm", "maskGenAlgorithm", "saltLength", "trailerField", "compatible", "X509_ATTRIBUTE", "X509_VAL", "always", "X400Name", "EdiPartyName", "DirName", "dirName", "BASIC_CONSTRAINTS", "objsign", "sslCA", "emailCA", "objCA", "digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly", "Unspecified", "unspecified", "removeFromCRL", "EXTENDED_KEY_USAGE", "ACCESS_DESCRIPTION", "AUTHORITY_INFO_ACCESS", "ASCII", "UTF8", "BITLIST", "BOOL", "ENUM", "GENTIME", "OCTETSTRING", "BITSTR", "BITSTRING", "UNIV", "UTF8String", "VISIBLE", "TELETEXSTRING", "GeneralString", "GENSTR", "NUMERIC", "EXPLICIT", "IMPLICIT", "OCTWRAP", "SEQWRAP", "SETWRAP", "BITWRAP", "FORMAT", "Palette", "private_spspps_buf", "bsf_list", "AVBSFContext", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpegb", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "HuffYUV", "indeo3", "theora", "Theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "Cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "Snow", "tscc", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "loco", "LOCO", "wnv1", "aasc", "indeo2", "fraps", "Fraps", "truemotion2", "cscd", "CamStudio", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "Mimic", "escape124", "daala", "Daala", "dirac", "Dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "Dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "smvjpeg", "Go2Meeting", "hnm4video", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "Screenpresso", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "sp5x", "sunrast", "tdsc", "TDSC", "vc1image", "WebP", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "vorbis", "Vorbis", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "MP3onMP4", "shorten", "Shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "WavPack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "Speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "sipr", "twinvq", "TrueHD", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "aac_latm", "qdmc", "celt", "g723_1", "dss_sp", "g729", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "Sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "xsub", "XSUB", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "h264_mp4toannexb", "Q264", "CABAC", "CAVLC", "LPAR", "CONSTR", "REDU", "Gray", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "is_avc", "nal_length_size", "enable_er", "stereo_mode", "apply_defdispwin", "conceal", "spectral", "energy", "drc_boost", "drc_cut", "drc_level", "drc_heavy", "level_limit", "afterburner", "eld_sbr", "implicit", "explicit_sbr", "explicit_hierarchical", "header_period", "medium", "fastfirstpass", "passlogfile", "wpredp", "a53cc", "x264opts", "crf_max", "aq_mode", "weightb", "simple", "smart", "ssim", "b_pyramid", "mbtree", "deblock", "cplxblur", "partitions", "spatial", "temporal", "tesa", "cavlc", "cabac", "b_strategy", "chromaoffset", "noise_reduction", "flags2", "i_qfactor", "b_qfactor", "qmin", "qmax", "qdiff", "qblur", "qcomp", "trellis", "me_range", "me_method", "subq", "keyint_min", "thread_type", "rc_init_occupancy", "baseline", "high", "high10", "high422", "high444", "ultrafast", "veryfast", "faster", "slower", "veryslow", "placebo", "animation", "grain", "stillimage", "psnr", "fastdecode", "AVCodecContext", "unaligned", "input_preserved", "pass1", "gray", "emu_edge", "ildct", "low_delay", "global_header", "ilme", "output_corrupt", "noout", "ignorecrop", "local_header", "showall", "export_mvs", "skip_manual", "ass_ro_flush_noop", "epzs", "phods", "time_base", "frame_size", "frame_number", "rc_strategy", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "hpel_chroma", "dc_clip", "trunc", "b_qoffset", "has_b_frames", "block_align", "mpeg_quant", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_override_count", "rc_eq", "minrate", "rc_buf_aggressivity", "i_qoffset", "rc_init_cplx", "fastint", "altivec", "faan", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "simpleauto", "slice_count", "guess_mvs", "favor_inter", "bits_per_coded_sample", "plane", "median", "aspect", "dct_coeff", "green_metadata", "startcode", "mmco", "vis_qp", "vis_mb_type", "thread_ops", "nomc", "vismv", "debug_mv", "cmp_func", "subcmp", "ildctcmp", "last_pred", "preme", "precmp", "satd", "vsad", "vsse", "nsse", "dctmax", "msad", "pre_dia_size", "dtg_active_format", "ibias", "pbias", "global_quality", "slice_flags", "xvmc_acceleration", "stream_codec_tag", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "aac_main", "aac_ssr", "aac_ltp", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "skip_threshold", "skip_factor", "skip_exp", "skipcmp", "border_mask", "mblmin", "mblmax", "mepc", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "noref", "bidir", "nokey", "nointra", "bidir_refine", "brd_scale", "sc_factor", "mv0_threshold", "b_sensitivity", "compression_level", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "color_primaries", "color_primaries_type", "bt709", "bt470m", "bt470bg", "smpte170m", "smpte240m", "Film", "bt2020", "smpte428_1", "smpte431", "smpte432", "color_trc", "color_trc_type", "gamma22", "gamma28", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "smpte2084", "colorspace", "colorspace_type", "ycocg", "YCOCG", "bt2020_ncl", "bt2020_cl", "smpte2085", "color_range", "color_range_type", "chroma_sample_location", "chroma_sample_location_type", "Left", "Center", "topleft", "bottomleft", "Bottom", "log_level_offset", "slices", "audio_service_type", "Effects", "Dialogue", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "sub_text_format", "ass_with_timings", "side_data_only_packets", "skip_alpha", "field_order", "progressive", "video_size", "AVFrame", "best_effort_timestamp", "pkt_pos", "sample_aspect_ratio", "AVSubtitleRect", "forced", "Opus", "in_sample_fmt", "out_sample_fmt", "in_channel_layout", "out_channel_layout", "out_sample_rate", "filter_size", "Main", "DNXHD", "Extended", "Rext", "Simple", "Reserved", "Complex", "Advanced", "I420", "IYUV", "yv12", "YUYVw", "BGR0C", "b48rs", "J444Z", "I40AY", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "unknown_codec", "dual_mono_mode", "autoselection", "non_deterministic", "TRAIL_N", "TRAIL_R", "STSA_N", "STSA_R", "RADL_N", "RADL_R", "RASL_N", "RASL_R", "BLA_W_LP", "BLA_W_RADL", "BLA_N_LP", "IDR_W_RADL", "IDR_N_LP", "CRA_NUT", "EOS_NUT", "EOB_NUT", "FD_NUT", "SEI_PREFIX", "SEI_SUFFIX", "SPAT", "overscan", "videoformat", "fullrange", "colorprim", "colormatrix", "chromaloc", "frameref", "scenecut", "bframes", "cqmfile", "cqm4", "cqm8", "cqm4i", "cqm4p", "cqm4iy", "cqm4ic", "cqm4py", "cqm4pc", "cqm8i", "cqm8p", "i4x4", "i8x8", "p8x8", "p4x4", "b8x8", "merange", "mvrange", "subme", "qp_constant", "qpmin", "qpmax", "qpstep", "ratetol", "ipratio", "pbratio", "filler", "stitchable", "opencl", "touhou", "undef", "component", "secam", "smpte428", "log100", "log316", "bt1361e", "YCgCo", "bt2020nc", "bt2020c", "SSE2", "SSE3", "BMI1", "x264_encoder_close", "uvDC", "uvAC", "x264_reference_build_list", "x264_weighted_pred_init", "x264_slice_header_write", "x264_lookahead_shift", "clBuildProgram", "clCreateBuffer", "clCreateCommandQueue", "clCreateContext", "clCreateImage2D", "clCreateKernel", "clCreateProgramWithBinary", "clCreateProgramWithSource", "clEnqueueCopyBuffer", "clEnqueueMapBuffer", "clEnqueueNDRangeKernel", "clEnqueueReadBuffer", "clEnqueueWriteBuffer", "clFinish", "clGetCommandQueueInfo", "clGetDeviceIDs", "clGetDeviceInfo", "clGetKernelWorkGroupInfo", "clGetPlatformIDs", "clGetProgramBuildInfo", "clGetProgramInfo", "clGetSupportedImageFormats", "clReleaseCommandQueue", "clReleaseContext", "clReleaseKernel", "clReleaseMemObject", "clReleaseProgram", "clSetKernelArg", "mb_intra_cost_satd_8x8", "sum_intra_cost", "downscale_hpel", "downscale1", "downscale2", "memset_int16", "weightp_scaled_images", "weightp_hpel", "hierarchical_motion", "subpel_refine", "mode_selection", "sum_inter_cost", "ADL_Main_Control_Create", "ADL_Main_Control_Destroy", "ADL_Adapter_NumberOfAdapters_Get", "ADL_PowerXpress_Scheme_Get", "x264_macroblock_bipred_init", "x264_frame_pop", "x264_frame_shift", "x264_frame_push_unused", "x264_frame_push_blank_unused", "ARMv8", "NEON", "INTRA4X4_LUMA", "INTER4X4_LUMA", "INTRA4X4_CHROMA", "INTER4X4_CHROMA", "INTRA8X8_LUMA", "INTER8X8_LUMA", "INTRA8X8_CHROMA", "INTER8X8_CHROMA", "x264_macroblock_analyse", "x264_slicetype_analyse", "x264_rc_analyse_slice", "x264_cabac_8x8_mvd", "x264_mb_analyse_inter_p16x16", "x264_ratecontrol_new", "x264_ratecontrol_start", "underflow", "init_pass2", "x264_opencl_alloc_locked", "x264_macroblock_cache_rect", "in_channel_count", "out_channel_count", "used_channel_count", "internal_sample_fmt", "clev", "slev", "surround_mix_level", "lfe_mix_level", "rmvol", "rematrix_volume", "rematrix_maxval", "swr_flags", "dither_scale", "dither_method", "rectangular", "triangular", "triangular_hp", "lipshitz", "low_shibata", "high_shibata", "f_weighted", "modified_e_weighted", "improved_e_weighted", "phase_shift", "linear_interp", "exact_rational", "resample_cutoff", "resampler", "soxr", "cheby", "min_comp", "min_hard_comp", "comp_duration", "max_soft_comp", "first_pts", "matrix_encoding", "dolby", "dplii", "filter_type", "blackman_nuttall", "kaiser", "kaiser_beta", "output_sample_bits", "quad", "hexagonal", "octagonal", "hexadecagonal", "downmix", "LFE2", "armv8", "cpuflags", "BSF_NOT_FOUND", "BUG2", "BUFFER_TOO_SMALL", "DECODER_NOT_FOUND", "DEMUXER_NOT_FOUND", "ENCODER_NOT_FOUND", "FILTER_NOT_FOUND", "INPUT_CHANGED", "INVALIDDATA", "OPTION_NOT_FOUND", "PATCHWELCOME", "PROTOCOL_NOT_FOUND", "STREAM_NOT_FOUND", "EXPERIMENTAL", "INPUT_AND_OUTPUT_CHANGED", "HTTP_BAD_REQUEST", "HTTP_UNAUTHORIZED", "HTTP_FORBIDDEN", "HTTP_NOT_FOUND", "HTTP_OTHER_4XX", "HTTP_SERVER_ERROR", "Eval", "QP2LAMBDA", "TEMPFILE", "AVPanScan", "AVMatrixEncoding", "AVReplayGain", "AVHWFramesContext", "IMGUTILS", "quiet", "verbose", "panic", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "pixel", "INT64_MAX", "INT64_MIN", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "bikeshed", "qntsc", "qpal", "sntsc", "spal", "sqcif", "qqvga", "svga", "qxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd720", "hd1080", "hqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "BlueViolet", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "CornflowerBlue", "Cornsilk", "Crimson", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Plum", "PowderBlue", "RosyBrown", "RoyalBlue", "SaddleBrown", "SandyBrown", "SeaShell", "Sienna", "Silver", "Teal", "Thistle", "Tomato", "Wheat", "WhiteSmoke", "YellowGreen", "bgra", "bgr32", "rgba", "vaapi", "bayer_", "yuv420p", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "monow", "monob", "pal8", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "gray16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "rgb0", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "yuvj", "ycgco", "s16p", "s32p", "fltp", "dblp", "s64p", "N3avc10ByteStreamE", "N3avc26DecoderConfigurationRecordE", "N3avc4NaluE", "N3avc6SampleE", "N3flv9AudioDataE", "N3flv14AudioTagHeaderE", "N3flv6HeaderE", "N3flv3TagE", "N3flv9TagHeaderE", "N3flv9VideoDataE", "N3flv14VideoTagHeaderE"], "debugstrings": ["getConfigurationVersion", "setConfigurationVersion", "getVersion", "av_version_info: %s\n", "ijk_version_info: %s\n", "===== versions =====\n", "Cannot initialize the conversion context\n", "Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz %s %d channels!\n", "android/os/Build$VERSION", "android.os.Build$VERSION", "um3_ColorConversion", "glGetUniformLocation(um3_ColorConversionMatrix)", "kversion", "sversion", "createSrtHandshake: IPE: EXTENSION SET WHEN peer reports version 4 - fixing...", "HSREQ/rcv: With HSv4 version >= ", "HSREQ/rcv: With HSv5 version must be >= ", "HSREQ/rcv: Peer version: ", "HSREQ/rcv: Peer sent only VERSION + FLAGS HSREQ, but TSBPD flags are set. Rejecting.", "HSREQ/rcv: Peer sent only VERSION + FLAGS HSREQ, not getting any TSBPD settings.", "HSRSP/rcv: With HSv4 version >= 1.2.0 is not acceptable.", "HS VERSION = 0, meaning the handshake has been rejected.", "HS VERSION=", "version=", "\"version :\", request.GetVersion()", "version :", "bad_any_cast: failed conversion using any_cast", "ERROR: SetVersionString() called twice\n", "produce an xml version of help", "show version and build info and exit", "<?xml version=\"1.0\"?>\n", "%s version %s\n", "Conversion failed", "Unrecognized parameter value passed via CURLOPT_SSLVERSION", "CURL_SSLVERSION_MAX incompatible with CURL_SSLVERSION", "Unsupported HTTP version in response\n", "Unrecognized parameter passed via CURLOPT_SSLVERSION", "Unsupported SPDY version", "No accelerated colorspace conversion found from %s to %s.\n", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "version =%d, isom =%d\n", "minor_version", "Version %d", "sidx version %u", "premiere_version", "quicktime_version", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "strictly conform to a older more strict version of the spec or reference software", "Server version %d.%d.%d.%d\n", "RTMP protocol version mismatch\n", "Version of the Flash plugin used to run the SWF player.", "Unsupported tag version. (>=%d)\n", "configurationVersion:                %u\n", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "incompatible version", "protocol version", "BAD_VERSION", "BAD_PKCS12_VERSION", "OLD_SESSION_VERSION_NOT_RETURNED", "SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION", "TLSV1_ALERT_PROTOCOL_VERSION", "UNKNOWN_SSL_VERSION", "WRONG_SSL_VERSION", "WRONG_VERSION_NUMBER", "BAD_PKCS7_VERSION", "%8sVersion: %lu (0x%lx)\n", "Suite B: certificate version invalid", "%*sVersion: %ld (0x%lX)", "documentVersion", "H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2", "MPEG-4 part 2 Microsoft variant version 1", "MPEG-4 part 2 Microsoft variant version 2", "MPEG-4 part 2 Microsoft variant version 3", "On2 VP6 (Flash version)", "On2 VP6 (Flash version, with alpha channel)", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "Extradata version %d", "GCC: (GNU) 4.9.x 20150123 (prerelease)", "Android clang version 3.8.275480  (based on LLVM 3.8.275480)"], "localsymbols": [""], "dependencies": ["liblog.so", "libOpenSLES.so", "libEGL.so", "libc++_shared.so", "libandroid.so", "libc.so", "libm.so", "libdl.so", "libGLESv2.so"], "elfname": "libijkffmpeg_9F8C2AD2D165BDEBB2E8E3DA6AB2D89A23C1FBD1357C698DE46E9B7B4902B79A.so"}