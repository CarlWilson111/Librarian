{"globalvars": ["icv8x32fTab_cv", "icvSaturate8u_cv", "hist_type", "icv8x32fSqrTab"], "importedglobals": ["_ZTIN2cv9AlgorithmE", "_ZTVSt8bad_cast", "__sF", "_ZTISt9exception", "_ZTISt9bad_alloc", "_ZTVN10__cxxabiv120__si_class_type_infoE", "_ZTVN10__cxxabiv121__vmi_class_type_infoE", "_ZTVN2cv11_InputArrayE", "_ZTVN2cv12_OutputArrayE", "_ZTIN10__cxxabiv115__forced_unwindE", "_ZTISt8bad_cast", "_ZTIN2cv16ParallelLoopBodyE", "_ctype_", "_ZTVSt9bad_alloc", "_ZTVN10__cxxabiv117__class_type_infoE"], "importedfunctions": ["towupper", "_ZNK2cv3Mat9convertToERKNS_12_OutputArrayEidd", "cvFree_", "mbrtowc", "cvAdd", "_ZNK2cv3Mat7reshapeEiiPKi", "cvMinMaxLoc", "pthread_mutex_lock", "_ZN2cv9SparseMatC1EPK11CvSparseMat", "cvGetCols", "powf", "_ZN2cv12_OutputArrayC1ERKNS_3MatE", "_ZNK2cv3Mat1tEv", "sqrtf", "ungetwc", "cvInsertNodeIntoTree", "_ZN2cv12mulSpectrumsERKNS_11_InputArrayES2_RKNS_12_OutputArrayEib", "__umoddi3", "cvInitNArrayIterator", "_ZN2cv9AlgorithmC2Ev", "cvGetImage", "cvReleaseSparseMat", "_ZN2cv3PtrI5CvMatE10delete_objEv", "cvGetSeqElem", "_ZN2cv13AlgorithmInfoC1ERKSsPFPNS_9AlgorithmEvE", "_ZN2cv9minMaxLocERKNS_11_InputArrayEPdS3_PNS_6Point_IiEES6_S2_", "_ZN2cv8multiplyERKNS_11_InputArrayES2_RKNS_12_OutputArrayEdi", "_ZN2cv3Mat10deallocateEv", "cvRestoreMemStoragePos", "wcrtomb", "_ZN2cv5MutexC1Ev", "wcsftime", "_ZN2cv11_InputArrayC1ERKNS_3MatE", "pow", "cvClearSeq", "_ZN2cv4flipERKNS_11_InputArrayERKNS_12_OutputArrayEi", "vsprintf", "cvStartAppendToSeq", "cvMul", "exp", "cvCbrt", "cvMakeSeqHeaderForArray", "_ZN2cv4meanERKNS_11_InputArrayES2_", "cvCvtSeqToArray", "_ZdlPv", "_ZN2cv12_OutputArrayC1Ev", "strftime", "printf", "cvFastArctan", "cvSolve", "_ZN2cv5solveERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "log", "cvCreateSeqBlock", "_ZN2cvmlERKNS_3MatES2_", "cvConvertScale", "_ZN2cv22SparseMatConstIteratorppEv", "acos", "iswctype", "_ZN2cv3MatC1EPK7CvMatNDb", "_ZN2cv5MutexD1Ev", "_ZN2cv5splitERKNS_3MatERSt6vectorIS0_SaIS0_EE", "_ZN2cv3MatC1ERKS0_RKNS_5Rect_IiEE", "cvFlushSeqWriter", "cvCreateMatHeader", "cvDiv", "_ZNK2cv12_OutputArray6createEiiiibi", "_ZN2cv20checkHardwareSupportEi", "cvCreateSet", "cvInitMatNDHeader", "__dynamic_cast", "cvSetSeqReaderPos", "memset", "towlower", "_Znaj", "sscanf", "fread", "_ZN2cv13parallel_for_ERKNS_5RangeERKNS_16ParallelLoopBodyEd", "_ZN2cv5splitERKNS_3MatEPS0_", "_ZN2cv3addERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "cvInitSparseMatIterator", "_ZN2cv22SparseMatConstIteratorC2EPKNS_9SparseMatE", "cvSetIdentity", "_ZN2cv9fastAtan2Eff", "cvRead", "memcmp", "memmove", "_ZN2cv5errorERKNS_9ExceptionE", "_ZN2cv15scalarToRawDataERKNS_7Scalar_IdEEPvii", "_ZN2cv3MatC1EPK5CvMatb", "cvStartWriteSeq", "cvStartReadRawData", "ungetc", "_ZN2cv13AlgorithmInfo8addParamERNS_9AlgorithmEPKcRibMS1_FivEMS1_FviERKSs", "wmemcpy", "cvSetAdd", "memchr", "_ZN2cv5Mutex4lockEv", "_ZN2cv3Mat6createEiPKii", "_ZdaPv", "cvCreateChildMemStorage", "cvCartToPolar", "_ZN2cv11_InputArrayC1ERKd", "cvReadRawDataSlice", "cvPtrND", "_ZN2cv14extractChannelERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZNK2cv7MatExpr3invEi", "cvCreateSparseMat", "cvLog", "cvReleaseMat", "cvCopy", "setlocale", "_ZN2cv10meanStdDevERKNS_11_InputArrayERKNS_12_OutputArrayES5_S2_", "_ZNSt8bad_castD1Ev", "fseek", "_ZSt9terminatev", "cvCmpS", "_ZN2cv4sqrtERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvSum", "cvReleaseData", "putc", "_ZN2cvmiERKNS_3MatES2_", "_ZN2cv11mixChannelsEPKNS_3MatEjPS0_jPKij", "_Znwj", "getwc", "_ZN2cv13AlgorithmInfoD1Ev", "_ZN2cv8fastFreeEPv", "strxfrm", "_ZN2cv3Mat8copySizeERKS0_", "cvScalarToRawData", "_ZN2cv3MatC1ERKS0_RKNS_5RangeES5_", "_ZNK2cv9Algorithm5writeERNS_11FileStorageE", "getc", "lrint", "sin", "cvSliceLength", "expf", "cvStartWriteStruct", "wctob", "fflush", "cvChangeSeqBlock", "cvCreateMemStorage", "cvCreateMat", "cvWriteRawData", "cvWriteInt", "_ZN2cv9SparseMat3ptrEPKibPj", "_ZN2cv9Algorithm4readERKNS_8FileNodeE", "strlen", "pthread_once", "cvClearMemStorage", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi", "cvSaveMemStoragePos", "cvGetMat", "asin", "wmemmove", "_ZNSt9exceptionD2Ev", "strtod", "_ZNK2cv11RotatedRect6pointsEPNS_6Point_IfEE", "_ZN2cv3PtrI12CvMemStorageE10delete_objEv", "_ZNK2cv3Mat9locateROIERNS_5Size_IiEERNS_6Point_IiEE", "cvEigenVV", "cvGEMM", "_ZN2cv15NAryMatIteratorppEv", "cvSeqPush", "cvNextNArraySlice", "ftell", "_ZN2cv3MatC1EiPKiiPvPKj", "wctype", "_ZNSt9bad_allocD1Ev", "cvStartReadSeq", "_ZN6CvTypeD1Ev", "cvSetData", "cvSeqPopMulti", "cvReshape", "cvAlloc", "wmemchr", "_ZN2cv7compareERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "wcslen", "cvSeqPushMulti", "_ZN2cv9ExceptionC1EiRKSsS2_S2_i", "btowc", "cvDrawContours", "cvWrite", "_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i", "cvEndWriteSeq", "_ZN2cv9AlgorithmD2Ev", "cvCreateSeq", "cvGetFileNodeByName", "_ZN2cv22SparseMatConstIteratorC1EPKNS_9SparseMatE", "wmemset", "_ZN2cv10cvarrToMatEPKvbbi", "_ZN2cv12_OutputArrayC1ERNS_3MatE", "_ZN2cv6formatEPKcz", "fwrite", "__udivdi3", "atan2", "wcscoll", "_ZN2cv3MataSERKNS_7Scalar_IdEE", "cvInitLineIterator", "_ZN2cv3Mat3eyeEiii", "_ZN2cv10fastMallocEj", "wcsxfrm", "_ZN2cv6invertERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv5Mutex6unlockEv", "cvGetSeqReaderPos", "cvPow", "__gxx_personality_v0", "_ZNK2cv3Mat7reshapeEii", "_ZN2cv9ExceptionD1Ev", "cvSeqPop", "_ZN2cv13AlgorithmInfo8addParamERNS_9AlgorithmEPKcRdbMS1_FdvEMS1_FvdERKSs", "_ZN2cv4normERKNS_11_InputArrayES2_iS2_", "_ZN2cv9SparseMat6createEiPKii", "_ZN2cv5mergeEPKNS_3MatEjRKNS_12_OutputArrayE", "_ZNK2cv3Mat6copyToERKNS_12_OutputArrayE", "_ZN2cv4idftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cos", "_ZN2cv5mergeERKSt6vectorINS_3MatESaIS1_EERKNS_12_OutputArrayE", "_ZN2cv8subtractERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_i", "_ZN2cv3Mat9adjustROIEiiii", "_ZN2cv16ParallelLoopBodyD2Ev", "cvReleaseMemStorage", "_ZN2cv3dftERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv6kmeansERKNS_11_InputArrayEiRKNS_12_OutputArrayENS_12TermCriteriaEiiS5_", "_ZN2cv7noArrayEv", "_ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E", "cvCreateData", "strerror", "strcoll", "_ZNK2cv3Mat11checkVectorEiib", "_ZN2cv9patchNaNsERKNS_12_OutputArrayEd", "log10", "cvMemStorageAlloc", "pthread_mutex_unlock", "cvSeqElemIdx", "_ZNK2cv13AlgorithmInfo4nameEv", "_Unwind_Resume", "cvSetZero", "sqrt", "_ZN2cv17getOptimalDFTSizeEi", "cvGetDims", "_ZNK2cv11_InputArray6getMatEi", "putwc", "_ZN2cv12countNonZeroERKNS_11_InputArrayE", "cvEndWriteStruct", "cvTreeToNodeSeq", "_ZN2cv3Mat5setToERKNS_11_InputArrayES3_"], "exportedfunctions": ["_ZN2cv12findContoursERKNS_12_OutputArrayES2_iiNS_6Point_IiEE", "cvSobel", "_ZN2cv16BaseColumnFilterD1Ev", "_ZN2cv12FilterEngineD1Ev", "cvCalcArrBackProjectPatch", "_Z24icvGetRectSubPix_32f_C1RPKfi6CvSizePfiS1_12CvPoint2D32f", "_ZN2cv8Subdiv2D12clearVoronoiEv", "_ZN2cv12buildPyramidERKNS_11_InputArrayERKNS_12_OutputArrayEii", "cvBoundingRect", "_ZN2cv8Subdiv2D6insertENS_6Point_IfEE", "_ZN2cv11createCLAHEEdNS_5Size_IiEE", "_Z27VResizeLinearVec_32s8u_avx2PPKhPhS0_i", "_ZN2cv21pyrMeanShiftFilteringERKNS_11_InputArrayERKNS_12_OutputArrayEddiNS_12TermCriteriaE", "cvCvtColor", "_ZN2cv21getLinearColumnFilterEiiRKNS_11_InputArrayEiidi", "cvCanny", "cvUndistortPoints", "_ZN2cv13matchTemplateERKNS_11_InputArrayES2_RKNS_12_OutputArrayEi", "cvHoughCircles", "_ZN2cv13BaseRowFilterC1Ev", "_ZN2cv3PtrI11CvHistogramE10delete_objEv", "_ZN2cv22createMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2D6VertexC2Ev", "cvCompareHist", "cvCreateHist", "cvRemap", "_ZNK2cv8Subdiv2D7symEdgeEi", "_ZN2cv19goodFeaturesToTrackERKNS_11_InputArrayERKNS_12_OutputArrayEiddS2_ibd", "_ZN2cv18getAffineTransformERKNS_11_InputArrayES2_", "_ZN2cv7MomentsC2Ev", "cvConvexityDefects", "cvSubstituteContour", "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv18preprocess2DKernelERKNS_3MatERSt6vectorINS_6Point_IiEESaIS5_EERS3_IhSaIhEE", "_ZN2cv15getLinearFilterEiiRKNS_11_InputArrayENS_6Point_IiEEdi", "_ZNK2cv8Subdiv2D7edgeOrgEiPNS_6Point_IfEE", "_ZN2cv25getMorphologyColumnFilterEiiii", "cvCreateStructuringElementEx", "_ZN2cv12FilterEngine7proceedEPKhiiPhi", "cvNormalizeHist", "cvFindCornerSubPix", "_ZN2cv18createLinearFilterEiiRKNS_11_InputArrayENS_6Point_IiEEdiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2D13setEdgePointsEiii", "_ZN2cv16GeneralizedHoughD2Ev", "cvReleaseStructuringElement", "cvMaxRect", "_ZN2cv8Subdiv2D12initDelaunayENS_5Rect_IiEE", "_Z17icvIntersectLinesddddddddPd", "cvCornerEigenValsAndVecs", "_ZNK2cv8Subdiv2D10rotateEdgeEii", "_ZN2cv10BaseFilterD1Ev", "_ZN2cv6resizeERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_Z24VResizeLinearVec_32f_avxPPKhPhS0_i", "_ZN2cv15preCornerDetectERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv16GeneralizedHough6detectERKNS_11_InputArrayERKNS_12_OutputArrayES6_i", "cvSampleLine", "cvDistTransform", "_ZN2cv8Subdiv2D7newEdgeEv", "_ZNK2cv8Subdiv2D11checkSubdivEv", "_ZN2cv12FilterEngine4initERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2DC2ENS_5Rect_IiEE", "_ZN2cv23adaptiveBilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddNS_6Point_IiEEi", "_ZN2cv16GeneralizedHough11setTemplateERKNS_11_InputArrayES3_S3_NS_6Point_IiEE", "_Z23icvGetRectSubPix_8u_C1RPKhi6CvSizePhiS1_12CvPoint2D32f", "_ZN2cv16GeneralizedHoughD1Ev", "_ZN2cv9floodFillERKNS_12_OutputArrayES2_NS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_Z18icvIntersectLines3PdS_S_S_S_S_P12CvPoint2D32f", "_ZN3GMM11endLearningEv", "_ZN2cv9HuMomentsERKNS_7MomentsEPd", "_ZN2cv9floodFillERKNS_12_OutputArrayENS_6Point_IiEENS_7Scalar_IdEEPNS_5Rect_IiEES6_S6_i", "_ZN2cv11sepFilter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_S2_NS_6Point_IiEEdi", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_9SparseMatERKNS_12_OutputArrayEPPKfdb", "cvThreshold", "_ZN2cv8Subdiv2D10deleteEdgeEi", "_ZN2cv12approxPolyDPERKNS_11_InputArrayERKNS_12_OutputArrayEdb", "cvCalcEMD2", "cvFitLine", "_ZN2cv7MomentsC1ERK9CvMoments", "_ZN2cv20initWideAngleProjMapERKNS_11_InputArrayES2_NS_5Size_IiEEiiRKNS_12_OutputArrayES7_id", "_ZN2cv17getGaussianKernelEidi", "_ZN2cv8eigen2x2EPKfPfi", "_ZN2cv9arcLengthERKNS_11_InputArrayEb", "cvRunningAvg", "_ZN2cv18accumulateWeightedERKNS_11_InputArrayERKNS_12_OutputArrayEdS2_", "_ZN2cv8Subdiv2D6VertexC2ENS_6Point_IfEEbi", "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv10HoughLinesERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "cvReadChainPoint", "_ZN2cv8filter2DERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEdi", "cvFindNextContour", "_ZN2cv7grabCutERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Rect_IiEES5_S5_ii", "_ZN2cv12FilterEngineD0Ev", "cvCreatePyramid", "cvArcLength", "_Z23icvApproximateChainTC89P7CvChainiP12CvMemStoragei", "cvPyrDown", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayEi", "_ZN2cv17cornerMinEigenValERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv9LaplacianERKNS_11_InputArrayERKNS_12_OutputArrayEiiddi", "_ZN2cv9HuMomentsERKNS_7MomentsERKNS_12_OutputArrayE", "cvBoxPoints", "_ZNK2cv8Subdiv2D8nextEdgeEi", "cvInitUndistortMap", "_ZN2cv7fitLineERKNS_11_InputArrayERKNS_12_OutputArrayEiddd", "_ZN2cv11compareHistERKNS_9SparseMatES2_i", "_ZN2cv18getAffineTransformEPKNS_6Point_IfEES3_", "_ZNK2cv8Subdiv2D15getTriangleListERSt6vectorINS_3VecIfLi6EEESaIS3_EE", "_ZN2cv12FilterEngineC2Ev", "_ZN2cv10BaseFilterD2Ev", "_ZN2cv7MomentsC1Edddddddddd", "_ZNK2cv8Subdiv2D9getVertexEiPi", "_ZN2cv8Subdiv2DC2Ev", "_ZN2cv23initUndistortRectifyMapERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEEiRKNS_12_OutputArrayES7_", "cvPointSeqFromMat", "_ZN2cv10convexHullERKNS_11_InputArrayERKNS_12_OutputArrayEbb", "cvGetPerspectiveTransform", "cvMakeHistHeaderForArray", "_ZN2cv5erodeERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2DC1Ev", "_ZN2cv16BaseColumnFilterD2Ev", "_ZN2cv12FilterEngine5startERKNS_3MatERKNS_5Rect_IiEEbi", "cvMorphologyEx", "cvCalcArrHist", "_ZN2cv23getPerspectiveTransformEPKNS_6Point_IfEES3_", "_ZN2cv19getMorphologyFilterEiiRKNS_11_InputArrayENS_6Point_IiEE", "_ZN2cv7momentsERKNS_11_InputArrayEb", "_ZN2cv19createHanningWindowERKNS_12_OutputArrayENS_5Size_IiEEi", "_ZN2cv12GaussianBlurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEEddi", "_ZN2cv3EMDERKNS_11_InputArrayES2_iS2_PfRKNS_12_OutputArrayE", "_ZN2cv10BaseFilter5resetEv", "_ZN2cv8Subdiv2DC1ENS_5Rect_IiEE", "_ZN2cv16convexityDefectsERKNS_11_InputArrayES2_RKNS_12_OutputArrayE", "_ZN2cv15getRowSumFilterEiiii", "cvApproxPoly", "_ZN2cv7MomentsC1Ev", "cvGetQuadrangleSubPix", "_ZN2cv13getKernelTypeERKNS_11_InputArrayENS_6Point_IiEE", "cvMatchTemplate", "_ZN2cv12drawContoursERKNS_12_OutputArrayERKNS_11_InputArrayEiRKNS_7Scalar_IdEEiiS5_iNS_6Point_IiEE", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZN2cv11HoughLinesPERKNS_11_InputArrayERKNS_12_OutputArrayEddidd", "cvEndFindContours", "_ZN2cv10accumulateERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "cvErode", "_ZN2cv8Subdiv2D8QuadEdgeC1Ev", "_ZN2cv11minAreaRectERKNS_11_InputArrayE", "_ZN3GMM9addSampleEiN2cv3VecIdLi3EEE", "_ZN2cv8calcHistERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayES7_RKS3_IfSaIfEEb", "_ZNK2cv8Subdiv2D9isRightOfENS_6Point_IfEEi", "cvFindContours", "_ZN2cv3PtrI14_IplConvKernelE10delete_objEv", "cvIntegral", "_ZN2cv15undistortPointsERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_S2_", "_ZNK2cv8Subdiv2D7getEdgeEii", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_i", "_ZN2cv13BaseRowFilterD1Ev", "cvSquareAcc", "_ZN3GMMC1ERN2cv3MatE", "_ZN2cv8Subdiv2D6VertexC1ENS_6Point_IfEEbi", "cvGetHuMoments", "cvReleaseHist", "_ZN2cv13getRectSubPixERKNS_11_InputArrayENS_5Size_IiEENS_6Point_IfEERKNS_12_OutputArrayEi", "cvPyrMeanShiftFiltering", "_ZN2cv8Subdiv2D11findNearestENS_6Point_IfEEPS2_", "_ZN2cv15getDerivKernelsERKNS_12_OutputArrayES2_iiibi", "_ZN2cv8Subdiv2D8QuadEdgeC2Ei", "_ZNK3GMMclEN2cv3VecIdLi3EEE", "cvPreCornerDetect", "_ZN2cv12boundingRectERKNS_11_InputArrayE", "_ZNK2cv12FilterEngine19remainingOutputRowsEv", "_ZN2cv12equalizeHistERKNS_11_InputArrayERKNS_12_OutputArrayE", "cvLaplace", "_ZN2cv10BaseFilterC1Ev", "_ZN2cv12FilterEngineC2ERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "cvThreshHist", "cvEqualizeHist", "_ZN2cv16GeneralizedHough6createEi", "_ZN2cv6dilateERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv18getColumnSumFilterEiiiid", "_ZN3GMMC2ERN2cv3MatE", "_ZN2cv8Subdiv2D8QuadEdgeC2Ev", "_ZN2cv8Subdiv2D11calcVoronoiEv", "_ZN2cv10fitEllipseERKNS_11_InputArrayE", "_ZN2cv12FilterEngineD2Ev", "_ZN2cv11compareHistERKNS_11_InputArrayES2_i", "_ZN2cv22getMorphologyRowFilterEiiii", "_ZN2cv14copyMakeBorderERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiiRKNS_7Scalar_IdEE", "_ZN2cv8Subdiv2D12connectEdgesEii", "_ZN2cv27createSeparableLinearFilterEiiRKNS_11_InputArrayES2_NS_6Point_IiEEdiiRKNS_7Scalar_IdEE", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERNS_9SparseMatEiS4_PPKfbb", "cvCalcArrBackProject", "_ZN2cv14getGaborKernelENS_5Size_IiEEdddddi", "_Z26VResizeCubicVec_32s8u_avx2PPKhPhS0_i", "_ZN2cv9thresholdERKNS_11_InputArrayERKNS_12_OutputArrayEddi", "cvStartFindContours", "_ZN2cv8integralERKNS_11_InputArrayERKNS_12_OutputArrayES5_S5_i", "_ZN2cv13BaseRowFilterD0Ev", "cvPointPolygonTest", "cvConvertMaps", "cvGetSpatialMoment", "_ZNK2cv8Subdiv2D11getEdgeListERSt6vectorINS_3VecIfLi4EEESaIS3_EE", "cvAdaptiveThreshold", "cvCornerMinEigenVal", "_ZN2cv15calcBackProjectERKNS_11_InputArrayERKSt6vectorIiSaIiEES2_RKNS_12_OutputArrayERKS3_IfSaIfEEd", "cvReleasePyramid", "_ZN2cv9boxFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiNS_5Size_IiEENS_6Point_IiEEbi", "cvCornerHarris", "cvUndistort2", "_ZN2cv16GeneralizedHough6detectERKNS_11_InputArrayES3_S3_RKNS_12_OutputArrayES6_", "cv2DRotationMatrix", "_ZN2cv16pointPolygonTestERKNS_11_InputArrayENS_6Point_IfEEb", "_ZN2cv17createDerivFilterEiiiiii", "_ZN2cv15warpPerspectiveERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "cvStartReadChainPoints", "cvClearHist", "_ZN2cv15calcBackProjectEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEPPKfdb", "_ZN2cv9watershedERKNS_11_InputArrayERKNS_12_OutputArrayE", "_Z20icvSepConvSmall3_32fPfiS_i6CvSizePKfS2_S_", "_ZNK2cv8Subdiv2D6Vertex6isfreeEv", "_ZN2cv21invertAffineTransformERKNS_11_InputArrayERKNS_12_OutputArrayE", "_ZN2cv21intersectConvexConvexERKNS_11_InputArrayES2_RKNS_12_OutputArrayEb", "cvContourArea", "_ZN2cv12morphologyExERKNS_11_InputArrayERKNS_12_OutputArrayEiS2_NS_6Point_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv18minEnclosingCircleERKNS_11_InputArrayERNS_6Point_IfEERf", "_ZN2cv12FilterEngineC1ERKNS_3PtrINS_10BaseFilterEEERKNS1_INS_13BaseRowFilterEEERKNS1_INS_16BaseColumnFilterEEEiiiiiRKNS_7Scalar_IdEE", "cvFilter2D", "_ZN2cv7MomentsC2Edddddddddd", "_ZN2cv11convertMapsERKNS_11_InputArrayES2_RKNS_12_OutputArrayES5_ib", "_ZN2cv21getStructuringElementEiNS_5Size_IiEENS_6Point_IiEE", "_ZN2cv5pyrUpERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_ZN2cv19getRotationMatrix2DENS_6Point_IfEEdd", "_ZN2cv16BaseColumnFilterC1Ev", "_Z32icvGetQuadrangleSubPix_8u32f_C1RPKhi6CvSizePfiS1_PKf", "cvAcc", "cvMinAreaRect2", "_ZN2cv18getLinearRowFilterEiiRKNS_11_InputArrayEii", "cvCalcProbDensity", "cvFloodFill", "cvApproxChains", "_ZN2cv16accumulateSquareERKNS_11_InputArrayERKNS_12_OutputArrayES2_", "_ZN2cv16GeneralizedHough7releaseEv", "cvGetCentralMoment", "_ZN2cv12cornerSubPixERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEES7_NS_12TermCriteriaE", "cvDilate", "cvMinEnclosingCircle", "_ZN2cv16BaseColumnFilterD0Ev", "cvSmooth", "cvGetMinMaxHistValue", "_ZN3GMM12initLearningEv", "_ZN2cv4blurERKNS_11_InputArrayERKNS_12_OutputArrayENS_5Size_IiEENS_6Point_IiEEi", "_ZN2cv8Subdiv2D6VertexC1Ev", "_ZNK2cv8Subdiv2D7edgeDstEiPNS_6Point_IfEE", "_ZN2cv8Subdiv2D6insertERKSt6vectorINS_6Point_IfEESaIS3_EE", "_ZN2cv9crossCorrERKNS_3MatES2_RS0_NS_5Size_IiEEiNS_6Point_IiEEdi", "_ZN2cv17adaptiveThresholdERKNS_11_InputArrayERKNS_12_OutputArrayEdiiid", "_ZN2cv12FilterEngine5startENS_5Size_IiEENS_5Rect_IiEEi", "_Z23VResizeCubicVec_32f_avxPPKhPhS0_i", "_ZN2cv10medianBlurERKNS_11_InputArrayERKNS_12_OutputArrayEi", "cvMoments", "cvResize", "_ZN2cv8Subdiv2D6locateENS_6Point_IfEERiS3_", "_ZN2cv17distanceTransformERKNS_11_InputArrayERKNS_12_OutputArrayES5_iii", "_ZN2cv15createBoxFilterEiiNS_5Size_IiEENS_6Point_IiEEbi", "_ZN2cv15bilateralFilterERKNS_11_InputArrayERKNS_12_OutputArrayEiddi", "_ZN2cv16GeneralizedHoughD0Ev", "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi", "_ZN2cv5remapERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_iiRKNS_7Scalar_IdEE", "_ZN2cv17phaseCorrelateResERKNS_11_InputArrayES2_S2_Pd", "_ZN2cv14phaseCorrelateERKNS_11_InputArrayES2_S2_", "_ZN2cv20createGaussianFilterEiNS_5Size_IiEEddi", "cvLogPolar", "_ZN2cv6ScharrERKNS_11_InputArrayERKNS_12_OutputArrayEiiiddi", "_ZN2cv8Subdiv2D9swapEdgesEi", "_ZN2cv8Subdiv2D8newPointENS_6Point_IfEEbi", "_ZN2cv13BaseRowFilterC2Ev", "_ZN2cv8Subdiv2D19getVoronoiFacetListERKSt6vectorIiSaIiEERS1_IS1_INS_6Point_IfEESaIS7_EESaIS9_EERS9_", "_ZNK2cv12FilterEngine18remainingInputRowsEv", "_ZN2cv16BaseColumnFilter5resetEv", "_ZNK3GMMclEiN2cv3VecIdLi3EEE", "cvConvexHull2", "cvSetHistBinRanges", "_ZN2cv7MomentsC2ERK9CvMoments", "_ZN2cv12HoughCirclesERKNS_11_InputArrayERKNS_12_OutputArrayEiddddii", "_ZN2cv7pyrDownERKNS_11_InputArrayERKNS_12_OutputArrayERKNS_5Size_IiEEi", "_Z30icvGetQuadrangleSubPix_32f_C1RPKfi6CvSizePfiS1_S0_", "_ZN2cv8Subdiv2D11deletePointEi", "_ZN2cv15isContourConvexERKNS_11_InputArrayE", "cvWarpAffine", "_Z26icvGetRectSubPix_8u32f_C1RPKhi6CvSizePfiS1_12CvPoint2D32f", "cvCopyMakeBorder", "cvGoodFeaturesToTrack", "_ZN2cv17borderInterpolateEiii", "_ZN3GMM23calcInverseCovAndDetermEi", "_ZN2cv5SobelERKNS_11_InputArrayERKNS_12_OutputArrayEiiiiddi", "_ZN2cv8Subdiv2D8QuadEdgeC1Ei", "cvCopyHist", "_ZNK2cv8Subdiv2D8QuadEdge6isfreeEv", "_ZN2cv9undistortERKNS_11_InputArrayERKNS_12_OutputArrayES2_S2_S2_", "_ZN2cv16BaseColumnFilterC2Ev", "cvGetRectSubPix", "_ZN2cv11contourAreaERKNS_11_InputArrayEb", "_ZN2cv12FilterEngine5applyERKNS_3MatERS1_RKNS_5Rect_IiEENS_6Point_IiEEb", "cvFitEllipse2", "cvCalcBayesianProb", "_Z29icvGetQuadrangleSubPix_8u_C1RPKhi6CvSizePhiS1_PKf", "_ZN2cv10warpAffineERKNS_11_InputArrayERKNS_12_OutputArrayES2_NS_5Size_IiEEiiRKNS_7Scalar_IdEE", "_ZN2cv8calcHistEPKNS_3MatEiPKiRKNS_11_InputArrayERKNS_12_OutputArrayEiS4_PPKfbb", "cvWarpPerspective", "_ZN2cv12cornerHarrisERKNS_11_InputArrayERKNS_12_OutputArrayEiidi", "_ZNK2cv7Momentscv9CvMomentsEv", "_ZN2cv8Subdiv2D6spliceEii", "_ZN2cv11matchShapesERKNS_11_InputArrayES2_id", "_ZN2cv10BaseFilterC2Ev", "_ZNK3GMM14whichComponentEN2cv3VecIdLi3EEE", "cvWatershed", "_ZN2cv10BaseFilterD0Ev", "cvPyrUp", "_ZN2cv17accumulateProductERKNS_11_InputArrayES2_RKNS_12_OutputArrayES2_", "_ZN2cv25getDefaultNewCameraMatrixERKNS_11_InputArrayENS_5Size_IiEEb", "_ZN2cv4PSNRERKNS_11_InputArrayES2_", "cvHoughLines2", "_ZN2cv22cornerEigenValsAndVecsERKNS_11_InputArrayERKNS_12_OutputArrayEiii", "_ZN2cv23getPerspectiveTransformERKNS_11_InputArrayES2_", "_ZN2cv5CannyERKNS_11_InputArrayERKNS_12_OutputArrayEddib", "_ZN2cv12findContoursERKNS_12_OutputArrayES2_S2_iiNS_6Point_IiEE", "cvMatchShapes", "_ZN2cv16GeneralizedHough11setTemplateERKNS_11_InputArrayEiNS_6Point_IiEE", "cvGetAffineTransform", "cvLinearPolar", "_ZN2cv8cvtColorERKNS_11_InputArrayERKNS_12_OutputArrayEii", "_ZNK2cv8Subdiv2D6Vertex9isvirtualEv", "cvGetNormalizedCentralMoment", "cvCheckContourConvexity", "cvMultiplyAcc", "cvInitUndistortRectifyMap", "_ZN2cv13BaseRowFilterD2Ev", "_ZN2cv12FilterEngineC1Ev"], "allstrings": ["/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/accum.cpp", "dst.size == src.size && dst.channels() == cn", "mask.empty() || (mask.size == src.size && mask.type() == CV_8U)", "src2.size && src1.size && src2.type() == src1.type()", "dst.size == src1.size && dst.channels() == cn", "mask.empty() || (mask.size == src1.size && mask.type() == CV_8U)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/approx.cpp", "CV_IS_SEQ_CHAIN_CONTOUR( chain )", "header_size >= (int)sizeof(CvContour)", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "Input curves are not polygonal. Use cvApproxChains first", "New header size must be non-less than sizeof(CvContour)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/canny.cpp", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/clahe.cpp", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 1.5f", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/color.cpp", "depth == CV_8U || depth == CV_16U || depth == CV_32F", "(scn == 3 || scn == 4) && depth == CV_8U", "(dcn == 3 || dcn == 4) && scn == 2 && depth == CV_8U", "scn == 1 && (dcn == 3 || dcn == 4)", "scn == 3 && (dcn == 3 || dcn == 4)", "(scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F)", "hrange == 180 || hrange == 256", "scn == 3 && (dcn == 3 || dcn == 4) && (depth == CV_8U || depth == CV_32F)", "coeffs[i] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "coeffs[j] >= 0 && coeffs[j + 1] >= 0 && coeffs[j + 2] >= 0 && coeffs[j] + coeffs[j + 1] + coeffs[j + 2] < 1.5f*LabCbrtTabScale", "Bayer->Gray demosaicing only supports 8u and 16u types", "Bayer->RGB demosaicing only supports 8u and 16u types", "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == CV_8U", "Unknown/unsupported color conversion code", "sz.width % 2 == 0 && sz.height % 2 == 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/contours.cpp", "[Start]FindContours support only 8uC1 and 32sC1 images", "Nonzero offset is not supported in CV_LINK_RUNS yet", "Contour header size must be >= sizeof(CvContour)", "Input array must be 8uC1 or 8sC1", "0 <= contourIdx && contourIdx < (int)last", "hierarchy.total() == ncontours && hierarchy.type() == CV_32SC4", "npoints >= 0 && (depth == CV_32S || depth == CV_32F)", "curve.checkVector(2) >= 0 && (curve.depth() == CV_32F || curve.depth() == CV_32S)", "points.checkVector(2) >= 0 && (points.depth() == CV_32F || points.depth() == CV_32S)", "contour.checkVector(2) >= 0 && (contour.depth() == CV_32F || contour.depth() == CV_32S)", "contour1.checkVector(2) >= 0 && contour2.checkVector(2) >= 0 && (contour1.depth() == CV_32F || contour1.depth() == CV_32S) && contour1.depth() == contour2.depth()", "nelems >= 0 && (depth == CV_32F || depth == CV_32S)", "(is2d || is3d) && (points.depth() == CV_32F || points.depth() == CV_32S)", "hull.checkVector(1, CV_32S) > 2", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/core/include/opencv2/core/operations.hpp", "!_seq || _seq->elem_size == sizeof(_Tp)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/convhull.cpp", "Destination must be valid memory storage or matrix", "The hull matrix should be continuous and have a single row or a single column", "The hull matrix size might be not enough to fit the hull", "The hull matrix must have the same type as input or 32sC1 (integers)", "Point sequence can not be empty if the output is matrix", "Input sequence is not a sequence of points", "Floating-point coordinates are not supported here", "Convex hull must represented as a sequence of indices or sequence of pointers", "Convex hull is neither sequence nor matrix", "The matrix should be 1-dimensional and continuous array of int's", "Convex hull is larger than the point sequence", "Input sequence must be polygon (closed 2d curve)", "CV_SEQ_ELTYPE(contour) == CV_32FC2", "src.type() == CV_8UC1 || src.type() == CV_32FC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/corner.cpp", "src.size() == dst.size() && dst.type() == CV_32FC1", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/cornersubpix.cpp", "The source image must be 8-bit single-channel (CV_8UC1)", "(icvGetRectSubPix_8u32f_C1R( (uchar*)src->data.ptr, src->step, size, src_buffer, (win_w + 2) * sizeof( src_buffer[0] ), cvSize( win_w + 2, win_h + 2 ), cI )) >= 0", "ncorners >= 0 && corners.depth() == CV_32F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/deriv.cpp", "ktype == CV_32F || ktype == CV_64F", "dx >= 0 && dy >= 0 && dx+dy == 1", "The kernel size must be odd and not larger than 31", "dx >= 0 && dy >= 0 && dx+dy > 0", "src.size() == dst.size() && src.channels() == dst.channels()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/distransform.cpp", "source image must be 8uC1 and the distance map must be 32fC1 (or 8uC1 in case of simple L1 distance transform)", "the source and the destination images must be of the same size", "Mask size should be 3 or 5 or 0 (presize)", "The input image must have 8uC1 type and the output one must have 32fC1 type", "the output array of labels must be 32sC1", "the array of labels has a different size", "3x3 mask can not be used for \"labeled\" distance transform. Use 5x5 mask", "CV_IS_MASK_ARR( src ) && CV_MAT_TYPE( dst->type ) == CV_8UC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/emd.cpp", "The arrays must have equal number of columns (which is number of dimensions but 1)", "The array must have equal types", "The flow matrix size does not match to the signatures' sizes", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "The lower boundary can not be calculated if the cost matrix is used", "The cost matrix size does not match to the signatures' sizes", "In case of user-defined distance Distance function is undefined", "Number of dimensions can be 0 only if a user-defined metric is used", "Bad or unsupported metric type", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/featureselect.cpp", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "mask.empty() || (mask.type() == CV_8UC1 && mask.size() == image.size())", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/filter.cpp", "Unknown/unsupported border type", "columnBorderType != BORDER_WRAP", "!rowFilter.empty() && !columnFilter.empty()", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows", "wholeSize.width > 0 && wholeSize.height > 0", "src.type() == srcType && dst.type() == dstType", "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "_kernel.type() == DataType<KT>::type", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "cn == CV_MAT_CN(dstType) && ddepth >= sdepth", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "Unsupported combination of source format (=%d), and destination format (=%d)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/precomp.hpp", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "Unsupported combination of source format (=%d), and buffer format (=%d)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/floodfill.cpp", "Number of channels in input image must be 1 or 3", "Connectivity must be 4, 0(=4) or 8", "lo_diff and up_diff must be non-negative", "Seed point is outside of image", "mask must be 2 pixel wider and 2 pixel taller than filled image", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/gabor.cpp", "GeneralizedHough.POSITION_SCALE", "GeneralizedHough.POSITION_ROTATION", "GeneralizedHough.POSITION_SCALE_ROTATION", "Minimum distance between the centers of the detected objects.", "Maximal size of inner buffers.", "Angle difference in degrees between two points in feature.", "Maximal difference between angles that treated as equal.", "Minimal rotation angle to detect in degrees.", "Maximal rotation angle to detect in degrees.", "Inverse ratio of the accumulator resolution to the image resolution.", "The accumulator threshold for the template centers at the detection stage. The smaller it is, the more false positions may be detected.", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/generalized_hough.cpp", "!GHT_Ballard_Pos_info_auto.name().empty()", "!GHT_Ballard_PosScale_info_auto.name().empty()", "!GHT_Ballard_PosRotation_info_auto.name().empty()", "!GHT_Guil_Full_info_auto.name().empty()", "imageDx.type() == CV_32FC1 && imageDx.size() == imageSize", "imageDy.type() == imageDx.type() && imageDy.size() == imageSize", "levels > 0 && r_table.size() == static_cast<size_t>(levels + 1)", "templDx.type() == CV_32FC1 && templDx.size() == templSize", "templDy.type() == templDx.type() && templDy.size() == templSize", "!hasVotes || voteOutBuf.size() == oldSize", "!hasVotes || voteOutBuf.size() == posOutBuf.size()", "minScale > 0.0 && minScale < maxScale", "minAngle >= 0.0 && minAngle < maxAngle && maxAngle <= 360.0", "angleStep > 0.0 && angleStep < 360.0", "templFeatures.size() == static_cast<size_t>(levels + 1)", "imageFeatures.size() == templFeatures.size()", "dx.type() == CV_32FC1 && dx.size == edges.size", "dy.type() == dx.type() && dy.size == edges.size", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/geometry.cpp", "Chains are not supported. Convert them to polygonal representation using cvApproxChains()", "Input contour is neither a valid sequence nor a matrix", "p1.depth() == CV_32S || p1.depth() == CV_32F", "p2.depth() == CV_32S || p2.depth() == CV_32F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/grabcut.cpp", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "dtrm > std::numeric_limits<double>::epsilon()", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "mask must have as many rows and cols as img", "mask element value must be equelGC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/gcgraph.hpp", "!bgdSamples.empty() && !fgdSamples.empty()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/histogram.cpp", "channels != 0 || nimages == dims", "images[j].size() == imsize && images[j].depth() == depth", "mask.size() == imsize && mask.channels() == 1", "ranges[i] && ranges[i][0] < ranges[i][1]", "!mask.data || mask.type() == CV_8UC1", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "csz == 0 || csz == dims || (csz == 1 && _1d)", "H1.type() == H2.type() && H1.type() == CV_32F", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "One of histograms is sparse and other is not", "The histograms have different numbers of dimensions", "The histograms have different sizes", "One of <ranges> elements is NULL", "Bin ranges should go in ascenting order", "Number of dimensions is out of range", "Only uniform bin ranges can be used here (to avoid memory allocation)", "Destination double pointer is NULL", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "Bad normalization factor (set it to 1.0 if unsure)", "The patch width and height must be positive", "Resultant image must have 32fC1 type", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "Too small number of histograms", "The function supports dense histograms only", "All histograms must have 32fC1 type", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/hough.cpp", "CV_IS_MAT(img) && CV_MAT_TYPE(img->type) == CV_8UC1", "The source image must be 8-bit, single-channel", "rho, theta and threshold must be positive", "The destination matrix should be continuous and have a single row or a single column", "The destination matrix data type is inappropriate, see the manual", "Destination is not CvMemStorage* nor CvMat*", "linesMax > 0 && rho > 0 && theta > 0", "CV_IS_MAT(image) && CV_MAT_TYPE(image->type) == CV_8UC1", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/imgwarp.cpp", "dsize.area() || (inv_scale_x > 0 && inv_scale_y > 0)", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && !m2->data)", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "Unsupported combination of input/output matrices", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "matM.rows == 2 && matM.cols == 3", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "Unknown/unsupported interpolation type", "!map2.data || (map2.size() == map1.size())", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && !map2.data) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "src.type() == dst.type() && dst.size() == mapx.size()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/linefit.cpp", "NULL pointer to line parameters", "Input sequence must consist of 2d points or 3d points", "Input array is not a sequence nor matrix", "Input array must be 1d continuous array of 2d or 3d points", "Both reps and aeps must be non-negative", "User-defined distance is not allowed", "(icvFitLine2D( (CvPoint2D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "(icvFitLine3D( (CvPoint3D32f*)points, ptseq->total, dist, (float)param, (float)reps, (float)aeps, line )) >= 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/matchcontours.cpp", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/moments.cpp", "The passed sequence is not a valid contour", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/morph.cpp", "op == MORPH_ERODE || op == MORPH_DILATE", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "src.size() == dst.size() && src.type() == dst.type()", "unknown morphological operation", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/phasecorr.cpp", "type == CV_32FC1 || type == CV_64FC1", "type == srcB.type() && srcA.size() == srcB.size()", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "src1.type() == CV_32FC1 || src1.type() == CV_64FC1", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/pyramids.cpp", "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "The number of extra layers must be non negative", "The buffer is too small to fit the pyramid", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/rotcalipers.cpp", "Input sequence must consist of 2d points or pointers to 2d points", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/samplers.cpp", "(func( src->data.ptr, src_step, src_size, dst->data.ptr, dst_step, dst_size, center )) >= 0", "Transformation matrix must be 2x3", "The transformation matrix should have 32fC1 or 64fC1 type", "(func( src->data.ptr, src->step, src_size, dst->data.ptr, dst->step, dst_size, m )) >= 0", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/segmentation.cpp", "Only 8-bit, 3-channel input images are supported", "Only 32-bit, 1-channel output images are supported", "The input and output images must have the same size", "The number of pyramid levels is too large or negative", "Only 8-bit, 3-channel images are supported", "The input and output images must have the same type", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/shapedescr.cpp", "Null center or radius pointers", "Only curves with integer coordinates are supported in case of contour slice", "(icvContourSecArea( contour, slice, &area )) >= 0", "Number of points should be >= 5", "The image/matrix format is not supported by the function", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/smooth.cpp", "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)", "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)", "Unsupported combination of sum format (=%d), and destination format (=%d)", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "src.depth() == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.type() == dst.type() && src.size() == dst.size() && src.data != dst.data", "Bilateral filtering is only implemented for 8u and 32f images", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "The destination image does not have the proper type", "src.type() == CV_8UC1 || src.type() == CV_8UC3", "(ksize.width & 1) && (ksize.height & 1)", "Adaptive Bilateral filtering is only implemented for 8u images", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/subdivision2d.cpp", "Subdiv2D::locate returned invalid location = %d", "edgeDst(o_next) == edgeOrg(d_prev)", "edgeDst(o_prev) == edgeOrg(d_next)", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/sumpixels.cpp", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/templmatch.cpp", "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "depth == tdepth || tdepth == CV_32F", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "(img.depth() == CV_8U || img.depth() == CV_32F) && img.type() == templ.type()", "img.rows >= templ.rows && img.cols >= templ.cols", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/thresh.cpp", "blockSize % 2 == 1 && blockSize > 1", "Unknown/unsupported adaptive threshold method", "Unknown/unsupported threshold type", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "src.size == dst.size && src.type() == dst.type()", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/undistort.cpp", "m1type == CV_16SC2 || m1type == CV_32FC1 || m1type == CV_32FC2", "A.size() == Size(3,3) && A.size() == R.size()", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1)", "mapx0.data == mapx.data && mapy0.data == mapy.data", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8)", "CV_IS_MAT(matR) && matR->rows == 3 && matR->cols == 3", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8)", "cameraMatrix0.size() == Size(3,3)", "/Users/jbrateman/workspace/card.io-Android-source/opencv/opencv-2.4.11/modules/imgproc/src/utils.cpp", "arr != 0 && contour_header != 0 && block != 0", "Input array is not a valid matrix", "The matrix can not be converted to point sequence because of inappropriate element type", "The matrix converted to point sequence must be 1-dimensional and continuous", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "%s: __pos (which is %zu) > this->size() (which is %zu)", "__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "locale::_S_normalize_category category not found", "locale::_Impl::_M_replace_facet", "-+xX0123456789abcdef0123456789ABCDEF", "not enough space for format expansion (Please submit full bug report at http://gcc.gnu.org/bugs.html):\n    ", "basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", "basic_string::_S_construct null not valid", "locale::facet::_S_create_c_locale name not valid", "func != 0", "Unsupported sequence type", "NULL storage pointer ", "Input curves have uknown type", "Unknown approximation method", "Accuracy must be non-negative", "Invalid approximation method", "vector::_M_fill_insert", "src.depth() == CV_8U", "CLAHE", "clipLimit", "tilesX", "tilesY", "src.type() == CV_8UC1", "whitept[1] == 1.f", "scn == 3 || scn == 4", "scn == 2 && depth == CV_8U", "scn == 1 && depth == CV_8U", "scn == 1 && dcn == 1", "scn == 1 && dcn == 3", "depth == CV_8U", "dcn == 3 || dcn == 4", "dcn == 1", "scn == 4 && dcn == 4", "Unsupported image depth", "src.depth() == dst.depth()", "dst.data == dst0.data", "NULL double CvSeq pointer", "NULL storage pointer", "npoints > 0", "l.isContinuous()", "ptnum > 3", "0 <= idx0 && idx0 < ptnum", "0 <= idx1 && idx1 < ptnum", "0 <= idx2 && idx2 < ptnum", "d.depth >= 0", "ci.isContinuous()", "Internal error", "ksize > order", "CV_ARE_SIZES_EQ( src, dst )", "The signatures must be 32fC1", "The flow matrix must be 32fC1", "The cost matrix must be 32fC1", "_corners && _corner_count", "bufType == srcType", "src && dst && count > 0", "srcY >= startY", "dstY <= roi.height", "_kernel.channels() == 1", "this->ksize == 3", "cn == CV_MAT_CN(_dstType)", "GeneralizedHough.POSITION", "vector::reserve", "minDist", "maxSize", "Feature table levels.", "levels", "angleEpsilon", "minAngle", "maxAngle", "Angle step in degrees.", "angleStep", "Angle threshold.", "angleThresh", "Minimal scale to detect.", "minScale", "Maximal scale to detect.", "maxScale", "Scale step.", "scaleStep", "Scale threshold.", "scaleThresh", "Position threshold.", "posThresh", "R-Table levels.", "votesThreshold", "Unsupported method", "votesThreshold > 0", "imageEdges.type() == CV_8UC1", "dp > 0.0", "templEdges.type() == CV_8UC1", "levels > 0", "scaleStep > 0.0", "angleThresh > 0", "scaleThresh > 0", "posThresh > 0", "templ.type() == CV_8UC1", "cannyThreshold > 0", "image.type() == CV_8UC1", "edges.type() == CV_8UC1", "NULL vertex array pointer", "n >= 0 && m >= 0", "temp.ptr<Point2f>() == dst", "mask is empty", "mask must have CV_8UC1 type", "i>=0 && i<(int)vtcs.size()", "j>=0 && j<(int)vtcs.size()", "w>=0 && revw>=0", "i != j", "image is empty", "image mush have CV_8UC3 type", "opencv-hist", "type", "is_uniform", "have_ranges", "bins", "thresh", "images[j].channels() == 1", "c >= 0", "j < nimages", "ranges[i][k] < ranges[i][k+1]", "dims > 0 && histSize", "nimages > 0 && dims > 0", "csz == 0 || csz == dims", "dims > 0 && hist.data", "dims > 0", "H0.isContinuous()", "nimages > 0", "Unknown comparison method", "H1.size(i) == H2.size(i)", "Invalid histogram header", "Invalid histogram header[s]", "NULL ranges pointer", "Null <sizes> pointer", "Invalid histogram type", "Null histogram header pointer", "Null data pointer", "Bad histogram pointer", "Null double array pointer", "NULL histogram array pointer", "scale must be positive", "Invalid histogram pointer[s]", "Expected CvMatND", "Unknown Histogram type", "'thresh' node is missing", "NULL destination", "Unrecognized method id", "ssize.area() > 0", "dsize.area()", "func != 0 && cn <= 4", "Unknown interpolation method", "cn <= 4 && ssize.area() > 0", "src.cols > 0 && src.rows > 0", "src.type() == dst.type()", "M.size() == M0.size()", "map1.size().area() > 0", "nnfunc != 0", "ifunc != 0", "dst0.data == dst.data", "M should be >0", "ksize <= MAX_ESIZE", "The sequence has no points", "Invalid image type", "hu.isContinuous()", "Unsupported data type (=%d)", "((size_t)src[i] & 15) == 0", "((size_t)_src[i] & 15) == 0", "_kernel.type() == CV_8U", "src1.type() == src2.type()", "src1.size == src2.size", "src1.type() == window.type()", "src1.size == window.size", "borderType != BORDER_CONSTANT", "!_src.empty()", "borderType == BORDER_DEFAULT", "map matrix is not valid", "sumCount == ksize-1", "ksize % 2 == 1", "Subdivision is empty", "edge > 0", "edgeDst(edge, &t) > 0", "edgeOrg( edge, &t ) > 0", "edgeOrg(e) == edgeOrg(o_next)", "edgeOrg(e) == edgeOrg(o_prev)", "edgeDst(e) == edgeDst(d_next)", "edgeDst(e) == edgeDst(d_prev)", "ccn == 1 || delta == 0", "the input arrays are too big", "Unknown threshold type", "dst.data != src.data", "Unknown projection type", "avg iters = %g\n", "src1.depth() == CV_8U", "dst.type() == src.type()", "POSIX", "basic_string::erase", "%.*Lf", "%m/%d/%y", "%H:%M", "%H:%M:%S", "-+xX0123456789abcdefABCDEF", "-0123456789", "AKST", "true", "false", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_string::substr", "generic", "system", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "space", "print", "cntrl", "upper", "lower", "alpha", "digit", "punct", "xdigit", "alnum", "graph", "basic_ios::clear", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "\"K\"K\"K\"K\"K\"K\"K\"K", "gfffgfffgfffgfff", "CvSeq* cvApproxPoly(const void*, int, CvMemStorage*, int, double, int)", "CvSeq* cvApproxChains(CvSeq*, CvMemStorage*, int, double, int, int)", "CvSeq* icvApproximateChainTC89(CvChain*, int, CvMemStorage*, int)", "void cvCanny(const CvArr*, CvArr*, double, double, int)", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "virtual void {anonymous}::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "*N12_GLOBAL__N_118CLAHE_CalcLut_BodyE", "*N12_GLOBAL__N_124CLAHE_Interpolation_BodyE", "*N12_GLOBAL__N_110CLAHE_ImplE", "N2cv5CLAHEE", "void cvCvtColor(const CvArr*, CvArr*, int)", "cv::Luv2RGB_f::Luv2RGB_f(int, int, const float*, const float*, bool)", "cv::RGB2Luv_f::RGB2Luv_f(int, int, const float*, const float*, bool)", "cv::RGB2Lab_f::RGB2Lab_f(int, int, const float*, const float*, bool)", "cv::RGB2Lab_b::RGB2Lab_b(int, int, const float*, const float*, bool)", "cv::RGB2HSV_b::RGB2HSV_b(int, int, int)", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "bool cv::isContourConvex(cv::InputArray)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvConvexityDefect; CvSeq = CvSeq]", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f&, float&)", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "double cv::contourArea(cv::InputArray, bool)", "cv::Rect cv::boundingRect(cv::InputArray)", "double cv::arcLength(cv::InputArray, bool)", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const Scalar&, int, int, cv::InputArray, int, cv::Point)", "cv::Seq<_Tp>::Seq(const CvSeq*) [with _Tp = CvSeq*; CvSeq = CvSeq]", "void cv::findContours(cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "int icvFindContoursInInterval(const CvArr*, CvMemStorage*, CvSeq**, int)", "int cvFindContours(void*, CvMemStorage*, CvSeq**, int, int, int, CvPoint)", "CvSeq* cvEndFindContours(_CvContourScanner**)", "CvSeq* cvFindNextContour(CvContourScanner)", "void cvSubstituteContour(CvContourScanner, CvSeq*)", "_CvContourScanner* cvStartFindContours(void*, CvMemStorage*, int, int, int, CvPoint)", "CvPoint cvReadChainPoint(CvChainPtReader*)", "void cvStartReadChainPoints(CvChain*, CvChainPtReader*)", "int cvCheckContourConvexity(const CvArr*)", "CvSeq* cvConvexityDefects(const CvArr*, const CvArr*, CvMemStorage*)", "void icvCalcAndWritePtIndices(CvPoint**, int*, int, int, CvSeq*, CvSeqWriter*)", "CvSeq* cvConvexHull2(const CvArr*, void*, int, int)", "void cvPreCornerDetect(const void*, void*, int)", "void cvCornerEigenValsAndVecs(const void*, void*, int, int)", "void cvCornerHarris(const CvArr*, CvArr*, int, int, double)", "void cvCornerMinEigenVal(const CvArr*, CvArr*, int, int)", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "void cv::cornerEigenValsVecs(const cv::Mat&, cv::Mat&, int, int, int, double, int)", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "void cvFindCornerSubPix(const void*, CvPoint2D32f*, int, CvSize, CvSize, CvTermCriteria)", "void cvLaplace(const void*, void*, int)", "void cvSobel(const void*, void*, int, int, int)", "void cv::getSobelKernels(cv::OutputArray, cv::OutputArray, int, int, int, bool, int)", "void cv::getScharrKernels(cv::OutputArray, cv::OutputArray, int, int, bool, int)", "void icvDistanceATS_L1_8u(const CvMat*, CvMat*)", "void icvTrueDistTrans(const CvMat*, CvMat*)", "void cvDistTransform(const void*, void*, int, int, const float*, void*, int)", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "int icvInitEMD(const float*, int, const float*, int, int, CvDistanceFunction, void*, const float*, int, CvEMDState*, float*, cv::AutoBuffer<char>&)", "float cvCalcEMD2(const CvArr*, const CvArr*, int, CvDistanceFunction, const CvArr*, CvArr*, float*, void*)", "void cvGoodFeaturesToTrack(const void*, void*, void*, CvPoint2D32f*, int*, double, double, const void*, int, int, double)", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, bool, double)", "void cvFilter2D(const CvArr*, CvArr*, const CvMat*, CvPoint)", "cv::Ptr<cv::FilterEngine> cv::createLinearFilter(int, int, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = double; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = float; CastOp = cv::Cast<float, float>; VecOp = cv::FilterVec_32f; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short int; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = short unsigned int; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<double, double>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, float>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short int>; VecOp = cv::FilterVec_8u16s; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::FilterNoVec; cv::Point = cv::Point_<int>]", "cv::Filter2D<ST, CastOp, VecOp>::Filter2D(const cv::Mat&, cv::Point, double, const CastOp&, const VecOp&) [with ST = unsigned char; CastOp = cv::Cast<float, unsigned char>; VecOp = cv::FilterVec_8u; cv::Point = cv::Point_<int>]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "void cv::preprocess2DKernel(const cv::Mat&, std::vector<cv::Point_<int> >&, std::vector<unsigned char>&)", "cv::Ptr<cv::FilterEngine> cv::createSeparableLinearFilter(int, int, cv::InputArray, cv::InputArray, cv::Point, double, int, int, const Scalar&)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnVec_32f]", "cv::SymmColumnVec_32f::SymmColumnVec_32f(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::SymmColumnVec_32f16s]", "cv::SymmColumnVec_32f16s::SymmColumnVec_32f16s(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::SymmColumnVec_32s8u::SymmColumnVec_32s8u(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::SymmColumnSmallVec_32f]", "cv::SymmColumnSmallVec_32f::SymmColumnSmallVec_32f(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::Cast<int, short int>; VecOp = cv::SymmColumnSmallVec_32s16s]", "cv::SymmColumnSmallVec_32s16s::SymmColumnSmallVec_32s16s(const cv::Mat&, int, int, double)", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::SymmColumnFilter<CastOp, VecOp>::SymmColumnFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::SymmColumnSmallFilter<CastOp, VecOp>::SymmColumnSmallFilter(const cv::Mat&, int, double, int, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::SymmColumnVec_32s8u]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, double>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, float>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<double, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::Cast<float, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::ColumnFilter<CastOp, VecOp>::ColumnFilter(const cv::Mat&, int, double, const CastOp&, const VecOp&) [with CastOp = cv::FixedPtCastEx<int, unsigned char>; VecOp = cv::ColumnNoVec]", "cv::Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = double; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::RowVec_32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short int; DT = float; VecOp = cv::RowVec_16s32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = short unsigned int; DT = float; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = double; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = float; VecOp = cv::RowNoVec]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::RowVec_8u32s]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = float; DT = float; VecOp = cv::SymmRowSmallVec_32f]", "cv::RowFilter<ST, DT, VecOp>::RowFilter(const cv::Mat&, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "cv::SymmRowSmallFilter<ST, DT, VecOp>::SymmRowSmallFilter(const cv::Mat&, int, int, const VecOp&) [with ST = unsigned char; DT = int; VecOp = cv::SymmRowSmallVec_8u32s]", "cv::Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "int cv::getKernelType(cv::InputArray, cv::Point)", "virtual void cv::FilterEngine::apply(const cv::Mat&, cv::Mat&, const Rect&, cv::Point, bool)", "virtual int cv::FilterEngine::proceed(const uchar*, int, int, uchar*, int)", "virtual int cv::FilterEngine::start(const cv::Mat&, const Rect&, bool, int)", "virtual int cv::FilterEngine::start(cv::Size, cv::Rect, int)", "void cv::FilterEngine::init(const cv::Ptr<cv::BaseFilter>&, const cv::Ptr<cv::BaseRowFilter>&, const cv::Ptr<cv::BaseColumnFilter>&, int, int, int, int, int, const Scalar&)", "int cv::borderInterpolate(int, int, int)", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "void cvFloodFill(CvArr*, CvPoint, CvScalar, CvScalar, CvScalar, CvConnectedComp*, int, CvArr*)", "cv::Mat cv::getGaborKernel(cv::Size, double, double, double, double, double, int)", "void cv::GeneralizedHough::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, int)", "void cv::GeneralizedHough::setTemplate(cv::InputArray, int, cv::Point)", "void {anonymous}::GHT_Guil_Full::calcPosition(double, int, double, int)", "void {anonymous}::GHT_Guil_Full::calcScale(double)", "void {anonymous}::GHT_Guil_Full::calcOrientation()", "void {anonymous}::GHT_Guil_Full::getContourPoints(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<{anonymous}::GHT_Guil_Full::ContourPoint>&)", "void {anonymous}::GHT_Guil_Full::buildFeatureList(const cv::Mat&, const cv::Mat&, const cv::Mat&, std::vector<std::vector<{anonymous}::GHT_Guil_Full::Feature> >&, cv::Point2d)", "virtual void {anonymous}::GHT_Ballard_PosRotation::calcHist()", "virtual void {anonymous}::GHT_Ballard_PosRotation::findPosInHist()", "virtual void {anonymous}::GHT_Ballard_PosScale::calcHist()", "virtual void {anonymous}::GHT_Ballard_PosScale::findPosInHist()", "void {anonymous}::GHT_Pos::convertTo(cv::OutputArray, cv::OutputArray)", "void {anonymous}::GHT_Pos::filterMinDist()", "virtual void {anonymous}::GHT_Ballard_Pos::processTempl()", "virtual void {anonymous}::GHT_Ballard_Pos::calcHist()", "virtual void {anonymous}::GHT_Ballard_Pos::findPosInHist()", "static cv::Ptr<cv::GeneralizedHough> cv::GeneralizedHough::create(int)", "*N12_GLOBAL__N_17GHT_PosE", "*N12_GLOBAL__N_115GHT_Ballard_PosE", "*N12_GLOBAL__N_120GHT_Ballard_PosScaleE", "*N12_GLOBAL__N_120GHT_Ballard_PosScale6WorkerE", "*N12_GLOBAL__N_123GHT_Ballard_PosRotationE", "*N12_GLOBAL__N_123GHT_Ballard_PosRotation6WorkerE", "*N12_GLOBAL__N_113GHT_Guil_FullE", "N2cv16GeneralizedHoughE", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "double cvPointPolygonTest(const CvArr*, CvPoint2D32f, int)", "void cvBoxPoints(CvBox2D, CvPoint2D32f*)", "bool GCGraph<TWeight>::inSourceSegment(int) [with TWeight = double]", "void GCGraph<TWeight>::addEdges(int, int, TWeight, TWeight) [with TWeight = double]", "void GCGraph<TWeight>::addTermWeights(int, TWeight, TWeight) [with TWeight = double]", "void checkMask(const cv::Mat&, const cv::Mat&)", "void initGMMs(const cv::Mat&, const cv::Mat&, GMM&, GMM&)", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "void GMM::calcInverseCovAndDeterm(int)", "double GMM::operator()(int, cv::Vec3d) const", "GMM::GMM(cv::Mat&)", "void* icvReadHist(CvFileStorage*, CvFileNode*)", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "void cvCalcProbDensity(const CvHistogram*, const CvHistogram*, CvHistogram*, double)", "void cvCalcBayesianProb(CvHistogram**, int, CvHistogram**)", "void cvCalcArrBackProjectPatch(CvArr**, CvArr*, CvSize, CvHistogram*, int, double)", "void cvCalcArrBackProject(CvArr**, CvArr*, const CvHistogram*)", "void cvCalcArrHist(CvArr**, CvHistogram*, int, const CvArr*)", "void cvSetHistBinRanges(CvHistogram*, float**, int)", "void cvCopyHist(const CvHistogram*, CvHistogram**)", "double cvCompareHist(const CvHistogram*, const CvHistogram*, int)", "void cvGetMinMaxHistValue(const CvHistogram*, float*, float*, int*, int*)", "void cvNormalizeHist(CvHistogram*, double)", "void cvThreshHist(CvHistogram*, double)", "void cvClearHist(CvHistogram*)", "void cvReleaseHist(CvHistogram**)", "CvHistogram* cvMakeHistHeaderForArray(int, int*, CvHistogram*, float*, float**, int)", "CvHistogram* cvCreateHist(int, int*, CvHistType, float**, int)", "double cv::compareHist(const cv::SparseMat&, const cv::SparseMat&, int)", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<float>&, double)", "void cv::calcBackProject(const cv::Mat*, int, const int*, const cv::SparseMat&, cv::OutputArray, const float**, double, bool)", "void cv::calcBackProject(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, const float**, double, bool)", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int>&, cv::InputArray, cv::OutputArray, const std::vector<int>&, const std::vector<float>&, bool)", "void cv::calcHist(const cv::Mat*, int, const int*, const cv::Mat&, cv::SparseMat&, int, const int*, const float**, bool, bool, bool)", "void cv::histPrepareImages(const cv::Mat*, int, const int*, const cv::Mat&, int, const int*, const float**, bool, std::vector<unsigned char*>&, std::vector<int>&, cv::Size&, std::vector<double>&)", "void cv::calcHist(const cv::Mat*, int, const int*, cv::InputArray, cv::OutputArray, int, const int*, const float**, bool, bool)", "28EqualizeHistCalcHist_Invoker", "23EqualizeHistLut_Invoker", "CvSeq* cvHoughCircles(CvArr*, void*, int, double, double, double, double, int, int)", "void icvHoughLinesProbabilistic(CvMat*, float, float, int, int, int, CvSeq*, int)", "void icvHoughLinesSDiv(const CvMat*, float, float, int, int, int, CvSeq*, int)", "void icvHoughLinesStandard(const CvMat*, float, float, int, CvSeq*, int)", "CvSeq* cvHoughLines2(CvArr*, void*, int, double, double, int, double, double)", "void cvLinearPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "void cvLogPolar(const CvArr*, CvArr*, CvPoint2D32f, double, int)", "CvMat* cvGetAffineTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "CvMat* cvGetPerspectiveTransform(const CvPoint2D32f*, const CvPoint2D32f*, CvMat*)", "CvMat* cv2DRotationMatrix(CvPoint2D32f, double, double, CvMat*)", "void cvRemap(const CvArr*, CvArr*, const CvArr*, const CvArr*, int, CvScalar)", "void cvWarpPerspective(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cvWarpAffine(const CvArr*, CvArr*, const CvMat*, int, CvScalar)", "void cvResize(const CvArr*, CvArr*, int)", "cv::Mat cv::getAffineTransform(cv::InputArray, cv::InputArray)", "cv::Mat cv::getPerspectiveTransform(cv::InputArray, cv::InputArray)", "void cv::invertAffineTransform(cv::InputArray, cv::OutputArray)", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const Scalar&)", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::FixedPtCast<int, unsigned char, 15>; VecOp = cv::RemapVec_8u; AT = short int; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short unsigned int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, short int>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<float, float>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::remapBilinear(const cv::Mat&, cv::Mat&, const cv::Mat&, const cv::Mat&, const void*, int, const Scalar&) [with CastOp = cv::Cast<double, double>; VecOp = cv::RemapNoVec; AT = float; cv::Scalar = cv::Scalar_<double>]", "void cv::initInterTab1D(int, float*, int)", "const void* cv::initInterTab2D(int, bool)", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const Scalar&)", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<unsigned char, int, short int>; VResize = cv::VResizeLanczos4<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short unsigned int, float, float>; VResize = cv::VResizeLanczos4<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<short int, float, float>; VResize = cv::VResizeLanczos4<short int, float, float, cv::Cast<float, short int>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<float, float, float>; VResize = cv::VResizeLanczos4<float, float, float, cv::Cast<float, float>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLanczos4<double, double, float>; VResize = cv::VResizeLanczos4<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<unsigned char, int, short int>; VResize = cv::VResizeCubic<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeCubicVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short unsigned int, float, float>; VResize = cv::VResizeCubic<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeCubicVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<short int, float, float>; VResize = cv::VResizeCubic<short int, float, float, cv::Cast<float, short int>, cv::VResizeCubicVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<float, float, float>; VResize = cv::VResizeCubic<float, float, float, cv::Cast<float, float>, cv::VResizeCubicVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeCubic<double, double, float>; VResize = cv::VResizeCubic<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<unsigned char, int, short int, 2048, cv::HResizeNoVec>; VResize = cv::VResizeLinear<unsigned char, int, short int, cv::FixedPtCast<int, unsigned char, 22>, cv::VResizeLinearVec_32s8u>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = short int; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short unsigned int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short unsigned int, float, float, cv::Cast<float, short unsigned int>, cv::VResizeLinearVec_32f16<-32768> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<short int, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<short int, float, float, cv::Cast<float, short int>, cv::VResizeLinearVec_32f16<0> >; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<float, float, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<float, float, float, cv::Cast<float, float>, cv::VResizeLinearVec_32f>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "cv::resizeGeneric_Invoker<HResize, VResize>::resizeGeneric_Invoker(const cv::Mat&, cv::Mat&, const int*, const int*, const AT*, const AT*, const Size&, const Size&, int, int, int) [with HResize = cv::HResizeLinear<double, double, float, 1, cv::HResizeNoVec>; VResize = cv::VResizeLinear<double, double, float, cv::Cast<double, double>, cv::VResizeNoVec>; cv::resizeGeneric_Invoker<HResize, VResize>::AT = float; cv::Size = cv::Size_<int>]", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17warpAffineInvokerE", "N2cv22warpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_22VResizeLinearVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_22VResizeLinearVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_21VResizeCubicVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_21VResizeCubicVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "void cvFitLine(const CvArr*, int, double, double, double, float*)", "double cvMatchShapes(const void*, const void*, int, double)", "void cv::HuMoments(const cv::Moments&, cv::OutputArray)", "double cvGetCentralMoment(CvMoments*, int, int)", "double cvGetSpatialMoment(CvMoments*, int, int)", "void cvGetHuMoments(CvMoments*, CvHuMoments*)", "void cvMoments(const void*, CvMoments*, int)", "void cvMorphologyEx(const void*, void*, void*, IplConvKernel*, int, int)", "void cvDilate(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvErode(const CvArr*, CvArr*, IplConvKernel*, int)", "void cvReleaseStructuringElement(IplConvKernel**)", "IplConvKernel* cvCreateStructuringElementEx(int, int, int, int, int, int*)", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::Mat cv::getStructuringElement(int, cv::Size, cv::Point)", "cv::Ptr<cv::FilterEngine> cv::createMorphologyFilter(int, int, cv::InputArray, cv::Point, int, int, const Scalar&)", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<float>; VecOp = cv::MorphFVec<cv::VMax32f>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short int>; VecOp = cv::MorphIVec<cv::VMax16s>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMax16u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MaxOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMax8u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<double>; VecOp = cv::MorphNoVec; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<float>; VecOp = cv::MorphFVec<cv::VMin32f>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short int>; VecOp = cv::MorphIVec<cv::VMin16s>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<short unsigned int>; VecOp = cv::MorphIVec<cv::VMin16u>; cv::Point = cv::Point_<int>]", "cv::MorphFilter<Op, VecOp>::MorphFilter(const cv::Mat&, cv::Point) [with Op = cv::MinOp<unsigned char>; VecOp = cv::MorphIVec<cv::VMin8u>; cv::Point = cv::Point_<int>]", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "cv::Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax32f; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16s; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax16u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMax8u; uchar = unsigned char]", "int cv::MorphColumnFVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin32f; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16s; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin16u; uchar = unsigned char]", "int cv::MorphColumnIVec<VecUpdate>::operator()(const uchar**, uchar*, int, int, int) const [with VecUpdate = cv::VMin8u; uchar = unsigned char]", "cv::Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "cv::Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "N2cv14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEE", "N2cv11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv16MorphologyRunnerE", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "cv::Point2d cv::weightedCentroid(cv::InputArray, cv::Point, cv::Size, double*)", "void cv::divSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "void cv::magSpectrums(cv::InputArray, cv::OutputArray)", "cv::Point2d cv::phaseCorrelateRes(cv::InputArray, cv::InputArray, cv::InputArray, double*)", "CvMat** cvCreatePyramid(const CvArr*, int, double, const CvSize*, CvArr*, int, int)", "void cvReleasePyramid(CvMat***, int)", "void cvPyrUp(const void*, void*, int)", "void cvPyrDown(const void*, void*, int)", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 6>; VecOp = cv::NoVec<int, unsigned char>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 6>; VecOp = cv::NoVec<int, short int>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 6>; VecOp = cv::NoVec<int, short unsigned int>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 6>; VecOp = cv::NoVec<float, float>]", "void cv::pyrUp_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 6>; VecOp = cv::NoVec<double, double>]", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const Size&, int)", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<unsigned char, 8>; VecOp = cv::PyrDownVec_32s8u]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short int, 8>; VecOp = cv::NoVec<int, short int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FixPtCast<short unsigned int, 8>; VecOp = cv::NoVec<int, short unsigned int>]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<float, 8>; VecOp = cv::PyrDownVec_32f]", "void cv::pyrDown_(const cv::Mat&, cv::Mat&, int) [with CastOp = cv::FltCast<double, 8>; VecOp = cv::NoVec<double, double>]", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const Size&, int)", "CvBox2D cvMinAreaRect2(const CvArr*, CvMemStorage*)", "void cvGetQuadrangleSubPix(const void*, void*, const CvMat*)", "void cvGetRectSubPix(const void*, void*, CvPoint2D32f)", "int cvSampleLine(const void*, CvPoint, CvPoint, void*, int)", "void cvPyrMeanShiftFiltering(const CvArr*, CvArr*, double, double, int, CvTermCriteria)", "void cvWatershed(const CvArr*, CvArr*)", "CvRect cvBoundingRect(CvArr*, int)", "CvBox2D cvFitEllipse2(const CvArr*)", "double cvContourArea(const void*, CvSlice, int)", "int cvMinEnclosingCircle(const void*, CvPoint2D32f*, float*)", "double cvArcLength(const void*, CvSlice, int)", "void cvSmooth(const void*, void*, int, int, int, double, double)", "cv::adaptiveBilateralFilter_8u_Invoker::adaptiveBilateralFilter_8u_Invoker(cv::Mat&, const cv::Mat&, cv::Size, double, double, cv::Point)", "void cv::adaptiveBilateralFilter_8u(const cv::Mat&, cv::Mat&, cv::Size, double, double, cv::Point, int)", "cv::Point cv::normalizeAnchor(cv::Point, cv::Size)", "void cv::adaptiveBilateralFilter(cv::InputArray, cv::OutputArray, cv::Size, double, double, cv::Point, int)", "void cv::bilateralFilter_8u(const cv::Mat&, cv::Mat&, int, double, double, int)", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "void cv::medianBlur(cv::InputArray, cv::OutputArray, int)", "cv::Ptr<cv::FilterEngine> cv::createGaussianFilter(int, cv::Size, double, double, int)", "cv::Mat cv::getGaussianKernel(int, double, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = double; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = double; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = float; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = float; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = int; T = int; uchar = unsigned char]", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short int; uchar = unsigned char]", "virtual void cv::ColumnSum<int, short int>::operator()(const uchar**, uchar*, int, int, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = short unsigned int; uchar = unsigned char]", "virtual void cv::ColumnSum<int, short unsigned int>::operator()(const uchar**, uchar*, int, int, int)", "void cv::ColumnSum<ST, T>::operator()(const uchar**, uchar*, int, int, int) [with ST = double; T = unsigned char; uchar = unsigned char]", "virtual void cv::ColumnSum<int, unsigned char>::operator()(const uchar**, uchar*, int, int, int)", "cv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "cv::Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv34adaptiveBilateralFilter_8u_InvokerE", "void cv::Subdiv2D::checkSubdiv() const", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f*)", "int cv::Subdiv2D::insert(cv::Point2f)", "int cv::Subdiv2D::locate(cv::Point2f, int&, int&)", "void cvIntegral(const CvArr*, CvArr*, CvArr*, CvArr*)", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "void cv::crossCorr(const cv::Mat&, const cv::Mat&, cv::Mat&, cv::Size, int, cv::Point, double, int)", "void cvAdaptiveThreshold(const void*, void*, double, int, int, int, double)", "double cvThreshold(const void*, void*, double, double, int)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "void cv::thresh_32f(const cv::Mat&, cv::Mat&, float, float, int)", "void cv::thresh_16s(const cv::Mat&, cv::Mat&, short int, short int, int)", "void cv::thresh_8u(const cv::Mat&, cv::Mat&, uchar, uchar, int)", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "N2cv15ThresholdRunnerE", "cv::Point2f cv::mapPointSpherical(const Point2f&, float, cv::Vec4d*, int)", "float cv::initWideAngleProjMap(cv::InputArray, cv::InputArray, cv::Size, int, int, cv::OutputArray, cv::OutputArray, int, double)", "void cv::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cvUndistortPoints(const CvMat*, CvMat*, const CvMat*, const CvMat*, const CvMat*, const CvMat*)", "void cvInitUndistortRectifyMap(const CvMat*, const CvMat*, const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvInitUndistortMap(const CvMat*, const CvMat*, CvArr*, CvArr*)", "void cvUndistort2(const CvArr*, CvArr*, const CvMat*, const CvMat*, const CvMat*)", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, int, cv::OutputArray, cv::OutputArray)", "void cvCopyMakeBorder(const CvArr*, CvArr*, CvPoint, int, CvScalar)", "double cv::PSNR(cv::InputArray, cv::InputArray)", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const Scalar&)", "CvSeq* cvPointSeqFromMat(int, const CvArr*, CvContour*, CvSeqBlock*)", "St13basic_istreamIwSt11char_traitsIwEE", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7collateIcE", "St8numpunctIcE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St17__timepunct_cacheIcE", "St11__timepunctIcE", "St10moneypunctIcLb1EE", "St10moneypunctIcLb0EE", "St8messagesIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb0EE", "St18__moneypunct_cacheIcLb1EE", "St16__numpunct_cacheIcE", "NSt6locale5facetE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St15basic_streambufIwSt11char_traitsIwEE", "St21__ctype_abstract_baseIwE", "St8numpunctIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St17__timepunct_cacheIwE", "St11__timepunctIwE", "St10moneypunctIwLb1EE", "St10moneypunctIwLb0EE", "St8messagesIwE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb0EE", "St18__moneypunct_cacheIwLb1EE", "St16__numpunct_cacheIwE", "*N12_GLOBAL__N_122generic_error_categoryE", "*N12_GLOBAL__N_121system_error_categoryE", "St14error_category", "St7codecvtIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St5ctypeIcE", "St5ctypeIwE", "St9basic_iosIcSt11char_traitsIcEE", "St9basic_iosIwSt11char_traitsIwEE", "St8ios_base", "NSt8ios_base7failureE", "St11logic_error", "St12length_error", "St12out_of_range", "St13runtime_error"], "stringidentifiers": ["__gnu_cxx::__concurrence_lock_error", "__gnu_cxx::__concurrence_unlock_error", "vector::_M_fill_insert", "CLAHE", "clipLimit", "tilesX", "tilesY", "vector::reserve", "minDist", "maxSize", "levels", "angleEpsilon", "minAngle", "maxAngle", "angleStep", "angleThresh", "minScale", "maxScale", "scaleStep", "scaleThresh", "posThresh", "votesThreshold", "type", "is_uniform", "have_ranges", "bins", "thresh", "POSIX", "basic_string::erase", "AKST", "true", "false", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December", "basic_string::copy", "basic_string::compare", "basic_string::_S_create", "basic_string::_M_replace_aux", "basic_string::insert", "basic_string::replace", "basic_string::assign", "basic_string::append", "basic_string::resize", "basic_string::basic_string", "basic_string::substr", "generic", "system", "LC_CTYPE", "LC_NUMERIC", "LC_TIME", "LC_COLLATE", "LC_MONETARY", "LC_MESSAGES", "space", "print", "cntrl", "upper", "lower", "alpha", "digit", "punct", "xdigit", "alnum", "graph", "basic_ios::clear", "gfffgfffgfffgfff", "N2cv5CLAHEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_7RGB2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_10RGB2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_10RGB5x52RGBEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayItEEEE", "N2cv20CvtColorLoop_InvokerINS_8RGB2GrayIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB5x52GrayEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIhEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBItEEEE", "N2cv20CvtColorLoop_InvokerINS_8Gray2RGBIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11Gray2RGB5x5EEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11RGB2YCrCb_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_11YCrCb2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "N2cv20CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HSV_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2HLS_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HSV2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9HLS2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "N2cv20CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "N2cv20CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi0ELi1EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi0EEE", "N2cv22YUV420sp2RGB888InvokerILi2ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi0ELi1EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi0EEE", "N2cv24YUV420sp2RGBA8888InvokerILi2ELi1EEE", "N2cv21YUV420p2RGB888InvokerILi0EEE", "N2cv21YUV420p2RGB888InvokerILi2EEE", "N2cv23YUV420p2RGBA8888InvokerILi0EEE", "N2cv23YUV420p2RGBA8888InvokerILi2EEE", "N2cv22RGB888toYUV420pInvokerILi0EEE", "N2cv22RGB888toYUV420pInvokerILi2EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi0ELi1ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi0ELi1EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi0EEE", "N2cv21YUV422toRGB888InvokerILi2ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi0ELi1ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi0ELi1EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi0EEE", "N2cv23YUV422toRGBA8888InvokerILi2ELi1ELi1EEE", "N2cv20CvtColorLoop_InvokerINS_10RGBA2mRGBAIhEEEE", "N2cv20CvtColorLoop_InvokerINS_10mRGBA2RGBAIhEEEE", "N2cv15DTColumnInvokerE", "N2cv12DTRowInvokerE", "N2cv13BaseRowFilterE", "N2cv16BaseColumnFilterE", "N2cv10BaseFilterE", "N2cv12FilterEngineE", "N2cv9RowFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv18SymmRowSmallFilterIhiNS_21SymmRowSmallVec_8u32sEEE", "N2cv9RowFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv18SymmRowSmallFilterIffNS_19SymmRowSmallVec_32fEEE", "N2cv9RowFilterIhiNS_12RowVec_8u32sEEE", "N2cv9RowFilterIhfNS_8RowNoVecEEE", "N2cv9RowFilterIhdNS_8RowNoVecEEE", "N2cv9RowFilterItfNS_8RowNoVecEEE", "N2cv9RowFilterItdNS_8RowNoVecEEE", "N2cv9RowFilterIsfNS_13RowVec_16s32fEEE", "N2cv9RowFilterIsdNS_8RowNoVecEEE", "N2cv9RowFilterIffNS_10RowVec_32fEEE", "N2cv9RowFilterIfdNS_8RowNoVecEEE", "N2cv9RowFilterIddNS_8RowNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv16SymmColumnFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv21SymmColumnSmallFilterINS_13FixedPtCastExIihEENS_19SymmColumnVec_32s8uEEE", "N2cv12ColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv21SymmColumnSmallFilterINS_4CastIisEENS_25SymmColumnSmallVec_32s16sEEE", "N2cv12ColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv21SymmColumnSmallFilterINS_4CastIffEENS_22SymmColumnSmallVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIfhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdhEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIftEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIdtEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv16SymmColumnFilterINS_4CastIisEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIfsEENS_20SymmColumnVec_32f16sEEE", "N2cv16SymmColumnFilterINS_4CastIdsEENS_11ColumnNoVecEEE", "N2cv12ColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIffEENS_17SymmColumnVec_32fEEE", "N2cv16SymmColumnFilterINS_4CastIddEENS_11ColumnNoVecEEE", "N2cv8Filter2DIhNS_4CastIfhEENS_12FilterVec_8uEEE", "N2cv8Filter2DIhNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIfsEENS_15FilterVec_8u16sEEE", "N2cv8Filter2DIhNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIhNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIftEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DItNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIfsEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIffEENS_11FilterNoVecEEE", "N2cv8Filter2DIsNS_4CastIddEENS_11FilterNoVecEEE", "N2cv8Filter2DIfNS_4CastIffEENS_13FilterVec_32fEEE", "N2cv8Filter2DIdNS_4CastIddEENS_11FilterNoVecEEE", "N2cv16GeneralizedHoughE", "N2cv15resizeNNInvokerE", "N2cv12RemapInvokerE", "N2cv17warpAffineInvokerE", "N2cv22warpPerspectiveInvokerE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_22VResizeLinearVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_22VResizeLinearVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_21VResizeCubicVec_32f16ILin32768EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_21VResizeCubicVec_32f16ILi0EEEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_12VResizeNoVecEEEEE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhEEEE", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItEEEE", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsEEEE", "N2cv22resizeAreaFast_InvokerIffNS_19ResizeAreaFastNoVecIffEEEE", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "N2cv18ResizeArea_InvokerIhfEE", "N2cv18ResizeArea_InvokerItfEE", "N2cv18ResizeArea_InvokerIsfEE", "N2cv18ResizeArea_InvokerIffEE", "N2cv18ResizeArea_InvokerIddEE", "N2cv14MorphRowFilterINS_5MinOpIhEENS_12MorphRowIVecINS_6VMin8uEEEEE", "N2cv14MorphRowFilterINS_5MinOpItEENS_12MorphRowIVecINS_7VMin16uEEEEE", "N2cv14MorphRowFilterINS_5MinOpIsEENS_12MorphRowIVecINS_7VMin16sEEEEE", "N2cv14MorphRowFilterINS_5MinOpIfEENS_12MorphRowFVecINS_7VMin32fEEEEE", "N2cv14MorphRowFilterINS_5MinOpIdEENS_13MorphRowNoVecEEE", "N2cv14MorphRowFilterINS_5MaxOpIhEENS_12MorphRowIVecINS_6VMax8uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpItEENS_12MorphRowIVecINS_7VMax16uEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIsEENS_12MorphRowIVecINS_7VMax16sEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIfEENS_12MorphRowFVecINS_7VMax32fEEEEE", "N2cv14MorphRowFilterINS_5MaxOpIdEENS_13MorphRowNoVecEEE", "N2cv17MorphColumnFilterINS_5MinOpIhEENS_15MorphColumnIVecINS_6VMin8uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpItEENS_15MorphColumnIVecINS_7VMin16uEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIsEENS_15MorphColumnIVecINS_7VMin16sEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIfEENS_15MorphColumnFVecINS_7VMin32fEEEEE", "N2cv17MorphColumnFilterINS_5MinOpIdEENS_16MorphColumnNoVecEEE", "N2cv17MorphColumnFilterINS_5MaxOpIhEENS_15MorphColumnIVecINS_6VMax8uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpItEENS_15MorphColumnIVecINS_7VMax16uEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIsEENS_15MorphColumnIVecINS_7VMax16sEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIfEENS_15MorphColumnFVecINS_7VMax32fEEEEE", "N2cv17MorphColumnFilterINS_5MaxOpIdEENS_16MorphColumnNoVecEEE", "N2cv11MorphFilterINS_5MinOpIhEENS_9MorphIVecINS_6VMin8uEEEEE", "N2cv11MorphFilterINS_5MinOpItEENS_9MorphIVecINS_7VMin16uEEEEE", "N2cv11MorphFilterINS_5MinOpIsEENS_9MorphIVecINS_7VMin16sEEEEE", "N2cv11MorphFilterINS_5MinOpIfEENS_9MorphFVecINS_7VMin32fEEEEE", "N2cv11MorphFilterINS_5MinOpIdEENS_10MorphNoVecEEE", "N2cv11MorphFilterINS_5MaxOpIhEENS_9MorphIVecINS_6VMax8uEEEEE", "N2cv11MorphFilterINS_5MaxOpItEENS_9MorphIVecINS_7VMax16uEEEEE", "N2cv11MorphFilterINS_5MaxOpIsEENS_9MorphIVecINS_7VMax16sEEEEE", "N2cv11MorphFilterINS_5MaxOpIfEENS_9MorphFVecINS_7VMax32fEEEEE", "N2cv11MorphFilterINS_5MaxOpIdEENS_10MorphNoVecEEE", "N2cv16MorphologyRunnerE", "N2cv9ColumnSumIihEE", "N2cv9ColumnSumIisEE", "N2cv9ColumnSumIitEE", "N2cv6RowSumIhiEE", "N2cv6RowSumIhdEE", "N2cv6RowSumItiEE", "N2cv6RowSumItdEE", "N2cv6RowSumIsiEE", "N2cv6RowSumIiiEE", "N2cv6RowSumIsdEE", "N2cv6RowSumIfdEE", "N2cv6RowSumIddEE", "N2cv9ColumnSumIdhEE", "N2cv9ColumnSumIdtEE", "N2cv9ColumnSumIdsEE", "N2cv9ColumnSumIiiEE", "N2cv9ColumnSumIifEE", "N2cv9ColumnSumIdfEE", "N2cv9ColumnSumIidEE", "N2cv9ColumnSumIddEE", "N2cv26BilateralFilter_8u_InvokerE", "N2cv27BilateralFilter_32f_InvokerE", "N2cv34adaptiveBilateralFilter_8u_InvokerE", "N2cv15ThresholdRunnerE", "St13basic_istreamIwSt11char_traitsIwEE", "St10ctype_base", "St10money_base", "St13messages_base", "St12codecvt_base", "St7collateIcE", "St8numpunctIcE", "St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St17__timepunct_cacheIcE", "St11__timepunctIcE", "St10moneypunctIcLb1EE", "St10moneypunctIcLb0EE", "St8messagesIcE", "St23__codecvt_abstract_baseIcc9mbstate_tE", "St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE", "St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE", "St18__moneypunct_cacheIcLb0EE", "St18__moneypunct_cacheIcLb1EE", "St16__numpunct_cacheIcE", "NSt6locale5facetE", "N9__gnu_cxx24__concurrence_lock_errorE", "N9__gnu_cxx26__concurrence_unlock_errorE", "N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE", "N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE", "St13basic_ostreamIwSt11char_traitsIwEE", "St15basic_streambufIcSt11char_traitsIcEE", "St15basic_streambufIwSt11char_traitsIwEE", "St21__ctype_abstract_baseIwE", "St8numpunctIwE", "St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St17__timepunct_cacheIwE", "St11__timepunctIwE", "St10moneypunctIwLb1EE", "St10moneypunctIwLb0EE", "St8messagesIwE", "St23__codecvt_abstract_baseIwc9mbstate_tE", "St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE", "St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE", "St18__moneypunct_cacheIwLb0EE", "St18__moneypunct_cacheIwLb1EE", "St16__numpunct_cacheIwE", "St14error_category", "St7codecvtIcc9mbstate_tE", "St7codecvtIwc9mbstate_tE", "St5ctypeIcE", "St5ctypeIwE", "St9basic_iosIcSt11char_traitsIcEE", "St9basic_iosIwSt11char_traitsIwEE", "St8ios_base", "NSt8ios_base7failureE", "St11logic_error", "St12length_error", "St12out_of_range", "St13runtime_error"], "debugstrings": ["Unknown/unsupported color conversion code", "GCC: (GNU) 4.8", "GCC: (GNU) 4.9 20140827 (prerelease)"], "localsymbols": [""], "dependencies": ["libdl.so", "libm.so", "libopencv_core.so", "liblog.so", "libc.so"], "elfname": "libopencv_imgproc.so"}