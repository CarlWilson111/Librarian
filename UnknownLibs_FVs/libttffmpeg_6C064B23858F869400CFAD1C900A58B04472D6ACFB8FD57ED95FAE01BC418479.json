{"globalvars": ["ff_mpeg12_mbPatTable", "ff_rl_mpeg1", "ff_riff_info_conv", "av_codec_ffversion", "ff_file_protocol", "ff_ac3_slow_decay_tab", "ff_mpeg12_mbAddrIncrTable", "ff_id3v2_picture_types", "ff_hevc_diag_scan4x4_y", "ff_mpeg4_unpack_bframes_bsf", "ff_rtmpt_protocol", "ff_golomb_vlc_len", "IKCP_CMD_WINS", "ff_rtmpe_protocol", "ff_yuv2rgb_coeffs", "ff_pcm_s24be_demuxer", "ff_aac_decoder", "ff_mbincr_vlc", "ff_fc_2pulses_9bits_track1_gray", "av_twofish_size", "ff_pow_0_55", "ff_pcm_s16be_muxer", "ff_mov_demuxer", "ff_pcm_f32le_decoder", "ff_h263_intra_MCBPC_code", "ff_ac3_db_per_bit_tab", "ff_h264_quant_div6", "rgb15to16", "ff_mpa_quant_bits", "ff_h263p_decoder", "ff_sin_512", "ff_aac_swb_size_128_len", "ff_pcm_u16le_encoder", "IKCP_CMD_PUSH", "ff_pcm_s16be_planar_decoder", "ff_raw_pix_fmt_tags", "ff_flac_sample_rate_table", "ff_mv_vlc", "ff_pcm_s16be_decoder", "avpriv_mjpeg_bits_ac_chrominance", "ff_tcp_protocol", "ff_flv_decoder", "ff_hevc_parser", "ff_image_jpegls_pipe_demuxer", "ff_mkv_metadata_conv", "ff_mb_type_b_tab", "ff_pow_0_7", "ff_aic_dc_scale_table", "ff_cos_4096", "rgb24tobgr24", "ff_dither_8x8_73", "ff_sqrt_tab", "ff_reverse", "ff_mpa_alloc_tables", "ff_pcm_alaw_demuxer", "ff_h263_pixel_aspect", "ff_mpeg4_dc_threshold", "ff_pcm_s16le_muxer", "ff_interleaved_golomb_vlc_len", "ff_dither_8x8_32", "ff_add_pixels_clamped", "ff_mp3_decoder", "ff_image_pcx_pipe_demuxer", "ff_image_psd_pipe_demuxer", "ff_ac3_dec_channel_map", "ff_image_qdraw_pipe_demuxer", "ff_h264_decoder", "ff_ffrtmphttp_protocol", "ff_aac_swb_size_128", "ff_list_bsf", "ff_image_ppm_pipe_demuxer", "ff_dither_8x8_220", "ff_pcm_u16be_demuxer", "ff_pcm_f64le_demuxer", "ff_cos_1024", "rgb32to16", "ff_ue_golomb_len", "ff_aac_scalefactor_bits", "ff_vf_rotate", "ff_sine_32_fixed", "ff_sine_4096_fixed", "ff_mpeg12_vlc_dc_lum_code", "ff_sine_256_fixed", "ff_ac3_rematrix_band_tab", "ff_rl_intra_aic", "ff_mvtab", "ff_pcm_alaw_muxer", "ff_sprite_trajectory_tab", "ff_dither_4x4_16", "ff_af_afifo", "ff_mpeg12_static_rl_table_store", "ff_h263_hwaccel_pixfmt_list_420", "ff_cos_tabs_fixed", "ff_sin_2048", "ff_png_decoder", "ff_pcm_f16le_decoder", "ff_image_webp_pipe_demuxer", "ff_mp3on4float_decoder", "ff_h263_cbpy_tab", "ff_pcm_u8_muxer", "ff_h263_loop_filter_strength", "IKCP_RTO_MIN", "ff_h264_golomb_to_pict_type", "ff_rgb24toyv12", "ff_cbrt_tab", "ff_image_pgmyuv_pipe_demuxer", "avpriv_mjpeg_bits_ac_luminance", "ff_mp3adufloat_decoder", "ff_sin_128", "deinterleaveBytes", "ff_interleaved_ue_golomb_vlc_code", "ff_ac3_fast_decay_tab", "ff_aac_spectral_sizes", "ff_cos_16_fixed", "ff_mpa_quant_steps", "ff_image_tiff_pipe_demuxer", "ff_pcm_u16le_decoder", "ff_sine_windows", "ff_fc_4pulses_8bits_tracks_13", "ff_h264_chroma422_dc_scan", "ff_mpeg1_default_intra_matrix", "ff_hevc_mp4toannexb_bsf", "ff_vf_hflip", "ff_md5_protocol", "ff_vsink_buffer", "ff_cos_16", "ff_pcm_s64be_decoder", "rgb32tobgr24", "ff_mkv_image_mime_tags", "ff_id3v2_4_tags", "ff_af_asetrate", "ff_pcm_lxf_decoder", "ff_h264_dequant8_coeff_init", "ff_h264_demuxer", "rgb24to15", "ff_aac_eld_window_512_fixed", "ff_mpegvideo_parser", "ff_gif_demuxer", "ff_h264_golomb_to_intra4x4_cbp", "ff_mpegaudio_parser", "ff_pcm_s8_muxer", "ff_vf_palettegen", "avpriv_pix_fmt_bps_avi", "ff_h263_static_rl_table_store", "ff_square_tab", "ff_mpeg2_aspect", "ff_inv_aanscales", "ff_image_pbm_pipe_demuxer", "ff_vf_format", "ff_pcm_s16le_planar_decoder", "ff_h263_chroma_qscale_table", "ff_aac_parser", "ff_live_flv_demuxer", "avpriv_mjpeg_val_ac_chrominance", "ff_vorbis_vwin", "ff_rawvideo_options", "ff_cos_32_fixed", "ff_h264_b_mb_type_info", "ff_aac_spectral_bits", "ff_h264_mp4toannexb_bsf", "av_md5_size", "java_vm", "ff_dc_lum_vlc", "ff_mpeg2_non_linear_qscale", "ff_mpa_synth_window_float", "rgb16to32", "ff_mpegtsraw_demuxer", "ff_sine_2048_fixed", "ff_mpeg4_DCtab_chrom", "ff_kcp_protocol", "ff_dc_chroma_vlc", "yuyvtoyuv422", "ff_pcm_f32be_demuxer", "IKCP_WND_SND", "ff_pcm_u16be_decoder", "ff_id3v2_34_metadata_conv", "ff_interleaved_dirac_golomb_vlc_code", "ff_aac_latm_decoder", "ff_sine_64_fixed", "ff_asrc_abuffer", "IKCP_PROBE_INIT", "IKCP_RTO_MAX", "ff_sin_16", "ff_pcm_s32le_demuxer", "ff_h264_chroma_dc_scan", "ff_image_xpm_pipe_demuxer", "ff_pcm_s24le_muxer", "ff_cos_8192_fixed", "ff_aac_num_swb_480", "interleaveBytes", "ff_pcm_s24le_decoder", "ff_vf_fps", "avpriv_mpeg4audio_sample_rates", "ff_pcm_f64be_muxer", "ff_sine_128", "ff_h264_p_sub_mb_type_info", "ff_pcm_u24be_muxer", "ff_sin_64", "ff_ac3_log_add_tab", "ff_amrnb_decoder", "ff_data_demuxer", "avpriv_mjpeg_val_dc", "ff_adts_muxer", "ff_ac3_window", "ff_log2_run", "ff_aac_swb_size_1024_len", "yv12touyvy", "ff_pcm_u8_decoder", "ff_cos_32768_fixed", "ff_hevc_diag_scan8x8_x", "ff_sine_8192_fixed", "av_cast5_size", "rgb16to15", "ff_aac_num_swb_128", "ff_ac3_bitrate_tab", "ff_default_chroma_qscale_table", "ff_image_exr_pipe_demuxer", "ff_mpa_enwindow", "ff_zigzag_direct", "ff_rvlc_rl_inter", "ff_h263_parser", "ff_pcm_dvd_decoder", "ff_pcm_s32be_decoder", "ff_crop_tab", "avpriv_ac3_channel_layout_tab", "ff_fc_2pulses_9bits_track2_gray", "ff_sin_8192", "ff_cos_131072", "ff_sin_16384", "ff_pcm_s16be_encoder", "ff_pcm_u32be_muxer", "rgb15tobgr24", "ff_ac3_fast_gain_tab", "ff_pcm_mulaw_decoder", "avpriv_vga16_font", "ff_pcm_zork_decoder", "ff_aanscales", "ff_mp4_obj_type", "ff_tls_openssl_protocol", "ff_pcm_bluray_decoder", "ff_vf_scale", "ff_pcm_s24le_demuxer", "ff_pcm_u16le_demuxer", "ff_png_encoder", "ff_mpeg4audio_channels", "ff_sine_512", "ff_image_sgi_pipe_demuxer", "ff_aac_num_swb_1024", "ff_gif_muxer", "vu9_to_vu12", "ff_h264_p_mb_type_info", "ff_vsrc_buffer", "ff_hls_protocol", "ff_vorbis_codec", "ff_mpeg1_aspect", "ff_pcm_u32le_demuxer", "ff_af_anull", "ff_cos_512", "ff_img_tags", "ff_sine_512_fixed", "av_sha_size", "ff_pcm_f64le_muxer", "ff_mkv_mime_tags", "rgb32tobgr16", "ff_codec_movvideo_tags", "ff_image_pam_pipe_demuxer", "ff_pcm_u24be_decoder", "ff_vorbis_encoding_channel_layout_offsets", "ff_gif_encoder", "ff_pcm_mulaw_muxer", "ff_ac3_bap_tab", "rgb24to16", "ff_aac_codebook_vector_vals", "ff_pcm_f32be_decoder", "yuyvtoyuv420", "ff_modified_quant_tab", "ff_h264_b_sub_mb_type_info", "ff_vorbis_channel_layout_offsets", "av_ripemd_size", "ff_aac_spectral_codes", "avpriv_mjpeg_val_ac_luminance", "ff_cos_512_fixed", "ff_ac3_floor_tab", "ff_rvlc_rl_intra", "ff_pcm_s24be_decoder", "ff_se_golomb_vlc_code", "ff_pcm_s32le_decoder", "ff_rtmpts_protocol", "IKCP_ASK_TELL", "ff_zigzag_scan", "ff_sin_32", "ff_mpeg4_decoder", "ff_image_sunrast_pipe_demuxer", "ff_sin_65536", "ff_mp3adu_decoder", "ff_vf_overlay", "ff_af_amix", "ff_img_options", "ff_sin_32768", "ff_rtmp_protocol", "ff_pcm_s8_decoder", "ff_h264_cabac_tables", "yuv422ptouyvy", "shuffle_bytes_2103", "IKCP_DEADLINK", "ff_flv_muxer", "ff_async_protocol", "ff_rl_mpeg2", "ff_h263_intra_MCBPC_bits", "ff_sine_2048", "ff_rawvideo_demuxer", "ff_sine_1024", "ff_flac_parser", "ff_lzw_encode_state_size", "avpriv_mjpeg_bits_dc_chrominance", "ff_pcm_f32le_demuxer", "ff_matroska_video_stereo_mode", "av_util_ffversion", "ff_cos_131072_fixed", "ff_pcm_s16le_demuxer", "ff_mp3float_decoder", "ff_h264_muxer", "ff_image_bmp_pipe_demuxer", "ff_h263_rl_inter", "ff_extract_extradata_bsf", "IKCP_ACK_FAST", "ff_vf_paletteuse", "ff_ac3_enc_channel_map", "ff_mb_ptype_vlc", "ff_pcm_s16le_decoder", "ff_pcm_u8_demuxer", "ff_msmpeg4v3_encoder", "ff_pcm_s8_demuxer", "ff_flv_demuxer", "ff_subfile_protocol", "ff_vf_trim", "ff_aac_num_swb_512", "ff_ac3_hearing_threshold_tab", "ff_image_dds_pipe_demuxer", "ff_cos_16384_fixed", "ff_aac_eld_window_480", "IKCP_MTU_DEF", "ff_bmp_decoder", "yuy2toyv12", "ff_flac_blocksize_table", "ff_image2_muxer", "ff_cos_128_fixed", "ff_mediadatasource_protocol", "ff_ac3_channels_tab", "ff_libwebp_encoder", "ff_aac_eld_window_512", "ff_h264_golomb_to_inter_cbp", "ff_dither_2x2_4", "lock", "ff_id3v2_3_tags", "ffurl_context_class", "ff_inter_vlc", "ff_b60_sinc", "ff_mpv_generic_options", "ff_pcm_s16le_encoder", "ff_sln_demuxer", "ff_pcm_s24le_planar_decoder", "ff_amrwb_decoder", "ff_mpeg4_intra_vlc", "ff_sin_4096", "ff_matroska_video_stereo_plane", "ff_h263_decoder", "ff_mpeg4video_parser", "av_sha512_size", "ff_id3v2_4_metadata_conv", "rgb24tobgr15", "ff_vf_fifo", "ff_image_pgm_pipe_demuxer", "ff_aac_pred_sfb_max", "planar2x", "rgb15to32", "shuffle_bytes_0321", "av_tree_node_size", "ff_mb_btype_vlc", "ff_pow_0_75", "ff_mpeg4_default_intra_matrix", "ff_af_atempo", "ff_af_aformat", "ff_codec_wav_guids", "ff_vf_yadif", "ff_pcm_s32le_planar_decoder", "ff_ue_golomb_vlc_code", "ff_id3v2_mime_tags", "ff_image_dpx_pipe_demuxer", "ff_fc_2pulses_9bits_track1", "ff_inverse", "ff_sine_4096", "yuv422ptoyuy2", "ff_pcm_u32le_muxer", "ff_aac_coders", "ff_mpeg4_intra_level", "ff_sine_32", "ff_rawvideo_decoder", "ff_cos_65536", "ff_vp9_superframe_bsf", "yvu9_to_yuy2", "uyvytoyuv420", "ff_mpeg4_resync_prefix", "ff_sws_context_class", "ff_h264_mb_sizes", "ff_image_png_pipe_demuxer", "IKCP_THRESH_MIN", "IKCP_OVERHEAD", "ff_cos_32768", "avpriv_mjpeg_bits_dc_luminance", "ff_ac3_frame_size_tab", "ff_pipe_protocol", "ff_image_jpeg_pipe_demuxer", "ff_sin_1024", "ff_h263p_encoder", "ff_wav_demuxer", "ff_sine_windows_fixed", "ff_hevc_demuxer", "ff_mkv_codec_tags", "IKCP_CMD_ACK", "ff_swb_offset_480", "ff_vorbiscomment_metadata_conv", "ff_aac_swb_size_1024", "ff_put_pixels_clamped", "ff_cos_1024_fixed", "ff_h264_i_mb_type_info", "avpriv_mpa_freq_tab", "ff_mpeg1_default_non_intra_matrix", "av_filter_ffversion", "ff_scc_muxer", "ff_mp4_muxer", "ff_h264_quant_rem6", "ff_mpa_sblimit_table", "ff_pcm_s24be_muxer", "openssl_mutexes", "ff_cos_64", "ff_h264_parser", "ff_cbpc_b_tab", "ff_cos_256_fixed", "ff_interleaved_se_golomb_vlc_code", "ff_aac_codebook_vectors", "ff_pcm_s24daud_decoder", "ff_h263i_decoder", "ff_pcm_s32be_muxer", "ff_rtmpk_protocol", "ff_mp3on4_decoder", "ff_id3v1_genre_str", "ff_pcm_s8_planar_decoder", "ff_rtmpte_protocol", "ff_h263_encoder", "ff_pcm_f64be_decoder", "ff_vf_vflip", "ff_mem_protocol", "ff_tns_max_bands_128", "ff_image_j2k_pipe_demuxer", "rgb32to15", "rgb24tobgr32", "ff_vorbis_floor1_inverse_db_table", "ff_mp3_header_decompress_bsf", "ff_aac_scalefactor_code", "ff_mpeg4_DCtab_lum", "ff_codec_movaudio_tags", "ff_aac_psy_model", "ff_ac3_slow_gain_tab", "ff_cos_256", "rgb24tobgr16", "ff_hls_demuxer", "ff_pcm_mulaw_demuxer", "av_tea_size", "ff_aac_encoder", "ff_sine_64", "ff_mpeg4_c_dc_scale_table", "ff_ac3_sample_rate_tab", "ff_pcm_u16be_muxer", "ff_mpeg12_mbMotionVectorTable", "ff_hevc_diag_scan8x8_y", "ff_httpproxy_protocol", "av_camellia_size", "ff_asink_abuffer", "ff_ipod_muxer", "ff_h264_chroma_qp", "ff_pcm_u24be_demuxer", "ff_aac_kbd_long_1024", "ff_cos_64_fixed", "ff_sine_128_fixed", "ff_cos_65536_fixed", "ff_matroska_demuxer", "ff_cos_4096_fixed", "ff_cos_32", "rgb16tobgr24", "ff_pcm_f32be_muxer", "ff_httpk_protocol", "ff_pcm_u24le_muxer", "IKCP_RTO_NDL", "ff_cos_tabs", "ff_fc_4pulses_8bits_track_4", "ff_swb_offset_512", "ff_wmv1_encoder", "ff_cos_16384", "ff_vorbis_channel_layouts", "IKCP_INTERVAL", "ff_mpeg12_vlc_dc_lum_bits", "yv12toyuy2", "ff_swb_offset_1024", "ff_hevc_diag_scan4x4_x", "ff_mba_length", "ff_pcm_u16le_muxer", "ff_mpeg12_vlc_dc_chroma_bits", "ff_aac_latm_parser", "ff_sine_256", "ff_pcm_u32be_demuxer", "ff_tns_max_bands_1024", "ff_pcm_u24le_demuxer", "ff_mpeg4_default_non_intra_matrix", "ff_mpeg4_rl_intra", "IKCP_THRESH_INIT", "ff_cos_8192", "ff_af_volume", "ff_apng_encoder", "ff_avio_class", "ff_wav_muxer", "ff_af_aresample", "ff_mdct_win_float", "swri_resampler", "ff_crypto_protocol", "IKCP_CMD_WASK", "ff_dither_8x8_128", "ff_pcm_u32be_decoder", "ff_http_protocol", "ff_pcm_s64le_decoder", "avfilter_all_channel_layouts", "ff_swb_offset_128", "ff_gif_decoder", "ff_af_areverse", "ff_aac_kbd_short_128_fixed", "ff_sipr_subpk_size", "swr_ffversion", "avpriv_mpa_bitrate_tab", "ff_pcm_f64be_demuxer", "ff_codec_bmp_tags", "ff_pcm_f32le_muxer", "ff_h264_dequant8_coeff_init_scan", "ff_vf_transpose", "ff_mpegts_demuxer", "avpriv_pix_fmt_bps_mov", "ff_fft_offsets_lut", "ff_h264_dequant4_coeff_init", "ff_vf_scale2ref", "ff_codec_wav_tags", "ff_mov_muxer", "ff_h263_cbpy_vlc", "ff_mpeg12_frame_rate_tab", "ff_id3v2_tags", "ff_pcm_alaw_decoder", "ff_mpeg4_y_dc_scale_table", "ff_aac_adtstoasc_bsf", "ff_aac_kbd_long_1024_fixed", "ff_image_pictor_pipe_demuxer", "ff_rtmps_protocol", "ff_h263_format", "ff_inter_run", "ff_image2_demuxer", "ff_h263_mbtype_b_tab", "ff_acelp_interp_filter", "ff_mpeg4_static_rl_table_store", "ff_mdct_win_fixed", "ff_w_tab_sr", "ff_alternate_horizontal_scan", "ff_sin_256", "ff_mjpeg_parser", "ff_webm_dash_manifest_demuxer", "ff_aac_eld_window_480_fixed", "ff_mpeg12_vlc_dc_chroma_code", "IKCP_WND_RCV", "ff_pcm_u24le_decoder", "ff_cos_2048", "ff_avcodec_locked", "ff_udplite_protocol", "ff_aac_pow2sf_tab", "ff_hevc_muxer", "ff_flac_demuxer", "ff_flac_decoder", "ff_mpeg2_frame_rate_tab", "ff_msmpeg4v2_encoder", "ff_inter_level", "ff_mpeg2_dc_scale_table", "ff_aac_pow34sf_tab", "ff_mb_pat_vlc", "ff_eac3_default_chmap", "ff_mpeg4_intra_run", "ff_avi_demuxer", "ff_mpeg1_dc_scale_table", "ff_aac_kbd_short_128", "ff_alternate_vertical_scan", "ff_pcm_f64le_decoder", "ff_concat_demuxer", "ff_cos_2048_fixed", "ff_https_protocol", "ff_tns_max_bands_512", "ff_af_pan", "ff_mpa_synth_window_fixed", "ff_webp_muxer", "ff_sine_1024_fixed", "ff_pcm_f24le_decoder", "ff_aac_demuxer", "ff_pcm_s16be_demuxer", "IKCP_ASK_SEND", "ff_pcm_s32be_demuxer", "IKCP_CMD_CLOSE", "uyvytoyuv422", "ff_sbr_noise_table", "ff_mpegps_demuxer", "ff_eac3_default_cpl_band_struct", "IKCP_RTO_DEF", "av_format_ffversion", "av_aes_size", "ff_udp_protocol", "ff_framehash_muxer", "ff_mp3_demuxer", "ff_network_inited_globally", "ff_cos_128", "ff_pcm_u32le_decoder", "ff_codec_movsubtitle_tags", "ff_pcm_s32le_muxer", "ff_mba_max", "ff_mpegvideo_demuxer", "ff_dither_2x2_8", "ff_h263_inter_MCBPC_vlc", "ff_prompeg_protocol", "ff_h263_inter_MCBPC_bits", "avpriv_cga_font", "ff_af_atrim", "ff_h263_inter_MCBPC_code", "ff_h263_intra_MCBPC_vlc", "ff_mjpeg_encoder", "ff_sine_8192", "ff_fifo_muxer", "ff_vf_setpts", "ff_tns_max_bands_480", "rgb32tobgr15", "ff_pcm_u16be_encoder", "VP8GetCPUInfo", "ff_log2_tab", "ff_mp3_muxer", "ff_png_pass_ymask", "ff_aac_codebook_vector_idx", "IKCP_PROBE_LIMIT"], "importedglobals": ["__stack_chk_guard", "__sF"], "importedfunctions": ["fputs", "strtod", "write", "strtoull", "pthread_cond_signal", "inet_aton", "SSL_new", "fabs", "log", "SSL_CTX_new", "gmtime_r", "atanf", "opendir", "munmap", "strcpy", "qsort", "getaddrinfo", "SSLv23_server_method", "strncasecmp", "mkstemp", "strrchr", "SSL_shutdown", "arc4random", "exp", "accept", "memmove", "pthread_exit", "pthread_cond_timedwait", "BIO_clear_flags", "atoi", "nanosleep", "time", "mmap", "deflateBound", "atan", "__isfinite", "strtoul", "mktime", "listen", "pthread_mutex_trylock", "pthread_cond_init", "CRYPTO_get_locking_callback", "SSL_ctrl", "closedir", "strerror_r", "strstr", "clock_gettime", "vsprintf", "CRYPTO_set_locking_callback", "SSL_connect", "inflateInit_", "poll", "SSL_CTX_ctrl", "open", "readdir", "malloc", "__stack_chk_fail", "getsockopt", "fstat", "pthread_create", "strncpy", "pthread_setspecific", "recv", "pthread_join", "rmdir", "fcntl", "fputc", "pow", "memcmp", "pthread_attr_init", "lstat", "strftime", "inflateEnd", "sendto", "pthread_mutex_unlock", "ERR_get_error", "lrintf", "getnameinfo", "rename", "SSL_CTX_use_certificate_chain_file", "SSL_CTX_use_PrivateKey_file", "SSL_load_error_strings", "SSL_CTX_load_verify_locations", "hypot", "unlink", "logf", "strerror", "deflateReset", "strtol", "atan2", "sin", "exp2f", "lseek64", "getsockname", "posix_memalign", "snprintf", "powf", "exp2", "log2f", "asin", "isatty", "SSL_library_init", "memset", "strcspn", "strcat", "pthread_mutex_lock", "vsnprintf", "free", "access", "CRYPTO_num_locks", "pthread_mutex_destroy", "fprintf", "cosf", "uncompress", "send", "log10f", "cbrtf", "cosh", "bind", "SSL_CTX_free", "pthread_cond_destroy", "SSL_accept", "pthread_cond_broadcast", "connect", "strlen", "getenv", "setsockopt", "bsearch", "sinh", "tanh", "sscanf", "socket", "freeaddrinfo", "pthread_attr_setdetachstate", "sched_getaffinity", "atan2f", "stat", "fwrite", "inflateInit2_", "atof", "memcpy", "gettimeofday", "frexp", "SSL_read", "acos", "memchr", "tan", "BIO_new", "pthread_key_create", "fclose", "localtime_r", "strcmp", "cos", "close", "SSLv23_client_method", "realloc", "strncmp", "inflate", "strchr", "shutdown", "__sched_cpucount", "signal", "pthread_kill", "deflate", "pthread_getspecific", "pthread_mutex_init", "ERR_error_string", "expf", "zlibCompileFlags", "read", "SSL_CTX_set_verify", "log10", "lrint", "gai_strerror", "SSL_write", "__errno", "cbrt", "calloc", "pthread_once", "fdopen", "SSL_set_bio", "deflateEnd", "sinf", "pthread_cond_wait", "deflateInit2_", "strtoll", "abort", "strspn", "SSL_free"], "exportedfunctions": ["av_dict_free", "ff_ape_write_tag", "ff_avg_pixels8_xy2_neon", "ff_acelp_vectors_init", "ff_mpeg1_find_frame_end", "avcodec_descriptor_get_by_name", "av_image_fill_pointers", "av_fifo_freep", "ff_put_h264_chroma_mc8_neon", "ff_put_qpel16_mc13_old_c", "av_hmac_free", "ff_avg_pixels16_y2_neon", "ff_isom_write_vpcc", "av_hwframe_transfer_data", "avcodec_encode_video2", "ff_raw_read_partial_packet", "ff_hevc_parse_sps", "ff_null_get_audio_buffer", "ff_save_host_addr", "av_register_output_format", "av_memcpy_backptr", "av_cast5_alloc", "ff_aac_sbr_ctx_init", "av_thread_message_queue_alloc", "ff_float_dsp_init_aarch64", "av_mdct_init", "av_asprintf", "ff_me_cmp_init_static", "swri_rematrix_free", "ff_img_read_packet", "av_mastering_display_metadata_create_side_data", "av_guess_frame_rate", "avcodec_find_decoder_by_name", "ff_draw_supported_pixel_formats", "ff_subtitles_queue_read_packet", "swr_build_matrix", "ff_h264_idct_add16intra_neon", "ff_h264_idct_add8_422_9_c", "ff_put_pixels8_xy2_neon", "av_aes_init", "ff_mpeg12_common_init", "ff_h264_filter_mb_fast", "avformat_query_codec", "ff_startcode_find_candidate_c", "av_resample_close", "ff_weight_h264_pixels_4_neon", "av_dict_get_string", "ff_mov_cenc_avc_parse_nal_units", "av_check_hijack_vid", "av_image_check_sar", "av_hwdevice_ctx_create", "ff_amf_write_object_start", "swr_next_pts", "ff_lpc_end", "av_log_set_callback", "ff_reset_entries", "ff_avg_h264_qpel16_mc31_neon", "av_fft_end", "avcodec_fill_audio_frame", "av_index_search_timestamp", "ff_dct32_float", "avio_w8", "avpriv_get_trc_function_from_trc", "av_format_set_subtitle_codec", "ff_mpeg_framesize_alloc", "av_codec_get_id", "avfilter_graph_add_filter", "sws_convVec", "ff_faandct", "ff_avg_h264_qpel8_mc13_neon", "ff_mdct_end_fixed_32", "ff_tls_init", "avformat_version", "avresample_license", "ff_celp_convolve_circ", "av_picture_pad", "av_xtea_le_crypt", "ff_h264_idct_add8_14_c", "ff_h264_sei_decode", "ff_draw_rectangle", "avio_read", "ff_check_pixfmt_descriptors", "ff_mjpegenc_huffman_compute_bits", "ff_mjpeg_encode_huffman_init", "av_md5_final", "av_hwframe_ctx_init", "av_set_cpu_flags_mask", "av_channel_layout_extract_channel", "avfilter_inout_free", "av_opt_child_class_next", "rgb12to15", "ff_lzw_decode_open", "ff_support_getaddrinfo_a", "av_buffersrc_add_frame", "av_format_get_open_cb", "av_buffersink_get_sample_rate", "ff_h264_idct8_add4_10_c", "ffio_open_whitelist", "ff_raw_video_read_header", "av_spherical_from_name", "ff_subtitles_read_line", "av_d3d11va_alloc_context", "ff_rate_control_uninit", "avcodec_descriptor_next", "avio_open_dyn_buf", "av_packet_clone", "ff_mpv_common_defaults", "swr_inject_silence", "ff_mpeg_er_frame_start", "av_fifo_generic_peek", "WebPValidateConfig", "ff_put_pixels16_x2_no_rnd_neon", "ff_pred8x8_l0t_dc_neon", "ff_qpeldsp_init", "ff_sine_window_init_fixed", "ff_imdct_half_c_fixed", "ff_id3v2_tag_len", "ikcp_input", "ff_rtmp_packet_write", "av_timecode_adjust_ntsc_framenum2", "ff_libwebp_error_to_averror", "av_codec_get_chroma_intra_matrix", "ff_mov_init_hinting", "av_codec_set_seek_preroll", "ff_dot_productf", "ff_filter_graph_remove_filter", "av_buffersink_get_frame_flags", "av_bsf_list_append2", "av_mediacodec_default_init", "av_realloc", "av_thread_message_queue_recv", "ff_mpa_synth_init_fixed", "mov_get_ctts", "WebPPictureFree", "av_audio_fifo_alloc", "av_frame_get_buffer", "avfilter_link", "ff_h263_decode_mba", "ff_avg_h264_chroma_mc2_neon", "av_spherical_tile_bounds", "ff_h264_idct8_add_14_c", "av_log_set_level", "avformat_get_riff_video_tags", "av_frame_move_ref", "ff_flac_parse_picture", "ff_simple_idct44_add", "avio_wb64", "av_opt_get_pixel_fmt", "ff_combine_frame", "ff_j_rev_dct1", "ff_rl_init_vlc", "av_get_colorspace_name", "av_hmac_final", "ff_resample_one_flt_neon", "ff_sws_init_input_funcs", "avfilter_graph_set_auto_convert", "swri_oldapi_conv_flt_to_s16_neon", "ff_put_pixels8_xy2_no_rnd_neon", "avfilter_graph_send_command", "ff_thread_decode_frame", "ff_framesync_drop", "ff_dualinput_init", "ff_wav_codec_get_id", "av_audio_convert_alloc", "ff_graph_thread_free", "ff_yuv420p_to_bgra_neon", "av_log2_16bit", "ff_audio_data_alloc", "ff_add_channel_layout", "ff_avg_h264_qpel16_mc22_neon", "av_program_add_stream_index", "ff_audio_convert_alloc", "av_log2", "ff_accept", "ffio_read_size", "av_hash_get_name", "av_aes_alloc", "ff_init_desc_fmt_convert", "av_hash_get_size", "ff_framequeue_add", "ff_psy_end", "av_buffer_allocz", "ff_guess_image2_codec", "ff_write_quant_matrix", "ff_h264_idct_add8_9_c", "ff_put_h264_qpel8_mc32_neon", "ff_h264_v_loop_filter_luma_neon", "av_thread_message_queue_set_free_func", "ff_filter_set_ready", "avpriv_mpa_decode_header", "av_int2i", "WebPMemoryWrite", "av_free_packet", "av_lfg_init_from_data", "ff_pred16x16_top_dc_neon", "av_sha_alloc", "av_mdct_calc", "ff_aac_apply_tns", "ff_h264_alloc_tables", "ff_frame_pool_uninit", "ff_put_pixels8x8_c", "ff_mdct_calc_c", "ff_acelp_apply_order_2_transfer_function", "ff_rdft_init", "avcodec_get_frame_class", "avformat_configuration", "ff_get_unscaled_swscale_aarch64", "WebPConfigInitInternal", "ff_getaddrinfo_a_free", "av_image_get_linesize", "ff_copy_whiteblacklists", "ff_avg_h264_qpel8_mc10_neon", "ff_tlog_ref", "ff_put_no_rnd_qpel8_mc32_old_c", "ff_getaddrinfo_a_init", "ff_vector_fmac_scalar_neon", "ff_put_h264_chroma_mc2_neon", "av_murmur3_init_seeded", "ff_init_desc_cfmt_convert", "av_write_image_line", "av_frame_get_best_effort_timestamp", "ff_framequeue_take", "avio_rl32", "ff_get_qtpalette", "ff_h2645_packet_split", "av_bprint_strftime", "ff_jpeg_fdct_islow_10", "ff_audio_data_free", "sws_getCachedContext", "av_codec_get_tag", "avio_read_to_bprint", "av_bsf_list_finalize", "av_mul_i", "ff_avg_pixels8_y2_neon", "avfilter_inout_alloc", "avio_printf", "ff_crc04C11DB7_update", "ff_mpeg4videodec_static_init", "av_opt_query_ranges_default", "avresample_convert_frame", "ff_imdct_calc_neon", "ff_rtmp_packet_read_internal", "av_dict_parse_string", "ff_get_bmp_header", "ff_png_zalloc", "ikcp_nodelay", "avfilter_insert_filter", "ff_h263_decode_frame", "avpriv_mpegts_parse_close", "av_fast_malloc", "ff_http_match_no_proxy", "av_frame_alloc", "ff_framequeue_init", "avcodec_pix_fmt_to_codec_tag", "ff_thread_video_encode_frame", "ff_h263_resync", "avpriv_unlock_avformat", "ff_simple_idct84_add", "ff_avg_qpel16_mc13_old_c", "ff_init_ff_cos_tabs_fixed_32", "av_bsf_list_append", "ikcp_shutdown", "ff_ps_read_data", "av_copy_packet", "ff_h264_chroma_dc_dequant_idct_9_c", "swr_is_initialized", "av_check_hijack_exit", "ff_mpa_synth_filter_fixed", "av_strlcat", "av_apply_bitstream_filters", "ff_vbv_update", "ff_free_filters", "av_opt_find2", "ff_bprint_to_codecpar_extradata", "ff_raw_write_packet", "ff_http_do_new_request", "sws_getContext", "ff_mp4_read_descr", "swri_noise_shaping_int16", "ff_h264_idct_add_14_c", "ff_channel_layouts_changeref", "av_stream_set_recommended_encoder_configuration", "av_parse_video_rate", "av_xtea_le_init", "ffio_fdopen", "av_parser_close", "ff_rfps_calculate", "av_cast5_crypt", "ff_vorbiscomment_length", "ff_avg_h264_qpel16_mc10_neon", "ffurl_get_file_handle", "av_url_split_hostname", "ffio_rewind_with_probe_data", "ff_pred16x16_left_dc_neon", "ff_hex_to_data", "av_parse_ratio", "ff_tadd_shorts_metadata", "ikcp_check", "av_vbprintf", "ttav_register_mem_protocol", "ff_faanidct_put", "ff_simple_idct_neon", "av_usleep", "avresample_available", "avcodec_find_decoder", "ff_aac_ac3_parse", "ff_fdctdsp_init", "ff_simple_idct_10", "av_pix_fmt_count_planes", "ff_h264_idct_add_10_c", "av_chroma_location_name", "ff_mpv_decode_init", "WebPEncodeLosslessRGBA", "av_bsf_list_parse_str", "ff_weight_h264_pixels_8_neon", "av_hwdevice_ctx_alloc", "av_aes_ctr_init", "av_get_output_timestamp", "ff_h264_idct_add_9_c", "ffurl_accept", "ff_choose_timebase", "av_get_channel_layout_nb_channels", "sws_freeContext", "ff_h264_idct_add16intra_8_c", "ff_put_h264_qpel8_mc01_neon", "ffurl_open_whitelist", "ff_framesync_uninit", "ff_h264_check_intra4x4_pred_mode", "av_fmt_ctx_get_duration_estimation_method", "av_opt_eval_int", "av_packet_copy_props", "av_bmg_get", "ff_psy_preprocess_end", "av_frame_get_colorspace", "av_buffersink_get_sample_aspect_ratio", "ff_inlink_consume_frame", "ff_h264_decode_picture_parameter_set", "av_vorbis_parse_frame_flags", "ff_put_h264_qpel16_mc30_neon", "av_fifo_alloc", "ff_free_picture_tables", "av_mallocz", "ff_fft_calc_neon", "avpriv_h264_has_num_reorder_frames", "av_opt_set_sample_fmt", "av_packet_pack_dictionary", "ff_mpeg4_init_direct_mv", "av_aes_ctr_set_random_iv", "av_parse_cpu_flags", "avpriv_float_dsp_alloc", "av_add_i", "ff_h264_idct_add16_9_c", "ff_h264_chroma422_dc_dequant_idct_9_c", "av_buffersink_set_frame_size", "ff_thread_get_format", "av_buffersink_get_h", "av_dv_codec_profile2", "ff_h264_decode_init", "av_packet_unref", "av_bprint_escape", "avresample_get_delay", "ff_avg_pixels8x8_c", "av_buffer_get_ref_count", "ff_h264_idct_add8_422_8_c", "ff_aac_is_encoding_err", "ff_mpa_synth_filter_float", "av_timecode_init", "audio_resample", "av_hwdevice_get_hwframe_constraints", "ff_put_pixels16_x2_neon", "ff_rtmp_calc_digest", "avio_seek_time", "sws_scale", "av_pix_fmt_desc_next", "av_opt_set_defaults2", "ff_http_init_auth_state", "avformat_get_riff_audio_tags", "ff_mov_get_channel_layout_tag", "av_mastering_display_metadata_alloc", "ff_mov_get_channel_layout", "ff_filter_get_nb_threads", "av_buffer_get_opaque", "av_find_info_tag", "av_get_planar_sample_fmt", "ff_mpeg_ref_picture", "av_bsf_init", "ff_h264_idct8_add_12_c", "ff_fft_init_fixed_32", "av_strireplace", "ff_h263_show_pict_info", "ff_dct_encode_init", "av_codec_set_codec_descriptor", "ff_tadd_doubles_metadata", "avformat_network_deinit", "ff_get_v_length", "ff_alloc_dir_entry", "ff_h264_build_ref_list", "ff_frame_pool_get_video_config", "ffurl_alloc", "WebPSafeCalloc", "avfilter_register", "av_xtea_init", "av_get_media_type_string", "av_buffersrc_parameters_alloc", "avio_accept", "av_opt_freep_ranges", "av_read_image_line", "av_thread_message_queue_set_err_send", "av_audio_fifo_reset", "ff_thread_release_buffer", "ff_h264_idct8_dc_add_9_c", "ff_merge_channel_layouts", "ff_h264_idct8_dc_add_neon", "av_log_get_level", "av_match_list", "ff_h264_chroma_dc_dequant_idct_10_c", "sws_getCoefficients", "avio_get_str16le", "av_get_channel_layout", "ff_listen", "ff_flac_get_max_frame_size", "av_stream_get_end_pts", "av_buffer_pool_get", "ff_yuv422p_to_abgr_neon", "avcodec_encode_audio2", "ff_put_h264_qpel16_mc10_neon", "ff_bsf_get_packet_ref", "ff_get_packet_palette", "av_buffer_default_free", "ff_resample_one_dbl_neon", "ff_acelp_interpolatef", "av_strtod", "ff_ntp_time", "ff_mjpeg_encode_picture_frame", "av_strndup", "WebPPictureImportBGRX", "av_register_hwaccel", "ff_h264_idct8_dc_add_8_c", "ff_get_guid", "av_max_alloc", "av_bsf_get_by_name", "ff_h2645_packet_uninit", "av_find_best_pix_fmt_of_2", "ff_rtmp_packet_read", "av_base64_decode", "av_ripemd_update", "ff_clean_intra_table_entries", "av_frame_get_metadata", "av_log_get_flags", "sws_cloneVec", "WebPSafeFree", "avpriv_put_string", "ff_mpadsp_apply_window_fixed_neon", "ff_aac_ltp_insert_new_frame", "av_buffer_is_writable", "av_int_list_length_for_size", "ff_lzw_decode_tail", "av_tea_crypt", "ff_img_read_header", "ff_put_pixels8_x2_neon", "ff_nv21_to_argb_neon", "WebPCopyPlane", "av_opt_eval_double", "ff_dct32_fixed", "av_opt_set_image_size", "ff_put_h264_qpel16_mc00_neon", "ff_avg_h264_qpel8_mc31_neon", "av_packet_from_data", "av_md5_init", "av_check_info_init", "av_bsf_alloc", "ff_rotate_slice", "av_frame_remove_side_data", "ff_mpeg1_clean_buffers", "av_opt_ptr", "av_hex_dump", "av_imdct_half", "ff_put_h264_qpel16_mc13_neon", "av_dirname", "ff_put_qpel8_mc13_old_c", "ff_text_init_avio", "ff_write_pass1_stats", "ff_h264_idct_add8_8_c", "ff_vector_fmul_add_neon", "ff_biweight_h264_pixels_16_neon", "ff_scale_eval_dimensions", "av_display_rotation_set", "ff_dither_alloc", "av_opt_set", "ff_replaygain_export", "av_codec_get_max_lowres", "av_tempfile", "ff_avg_h264_qpel16_mc21_neon", "av_sha512_init", "av_murmur3_update", "ff_fdct_ifast", "avio_wl24", "rgb16tobgr15", "av_vorbis_parse_free", "ff_thread_can_start_frame", "ff_init_ff_sine_windows_fixed", "ff_h264_idct_add8_10_c", "ff_mov_cenc_free", "avpriv_io_delete", "ff_h264_luma_dc_dequant_idct_8_c", "ff_h264_execute_decode_slices", "ff_libwebp_get_frame", "WebPGetEncoderVersion", "ff_simple_idct_add_12", "av_resample_init", "av_opt_set_defaults", "swri_rematrix", "av_frame_get_color_range", "ff_seek_frame_binary", "ff_resample_common_apply_filter_x8_s16_neon", "ffurl_get_short_seek", "av_gettime_relative", "rgb12tobgr12", "ff_aac_adjust_common_pred", "ff_flac_parse_streaminfo", "av_audio_fifo_peek", "av_tree_insert", "av_filename_number_test", "av_small_strptime", "av_blowfish_init", "av_sub_i", "ff_er_frame_start", "ff_network_info_callback", "ff_fft_init", "av_frame_set_channels", "ff_amf_get_string", "ff_avg_h264_qpel16_mc00_neon", "ff_amf_write_bool", "ff_init_me", "avfilter_graph_queue_command", "av_format_set_open_cb", "ff_configure_buffers_for_index", "ff_ps_init", "av_assert0_fpu", "ff_end_tag", "audio_resample_close", "av_get_standard_channel_layout", "av_drm_open", "av_dct_calc", "ff_h264_filter_mb", "av_check_info_item_init", "av_default_get_category", "ff_avg_pixels8_x2_neon", "ff_rtmp_packet_create", "av_memdup", "avfilter_graph_dump", "ff_bsf_get_packet", "ff_mov_read_stsd_entries", "ff_tget_double", "ff_set_common_samplerates", "av_log_set_flags", "ff_init_gamma_convert", "ff_put_no_rnd_qpel8_mc31_old_c", "ff_set_min_dist_lsf", "ff_put_qpel16_mc12_old_c", "av_read_timestamp2", "avresample_is_open", "ff_flac_set_channel_layout", "ff_hevc_decode_short_term_rps", "avio_rl64", "ffio_fill", "av_dynarray2_add", "ff_frame_thread_init", "av_resample_compensate", "av_div_q", "av_file_unmap", "av_read_pause", "avpriv_align_put_bits", "av_packet_alloc", "avformat_get_class", "ff_get_audio_buffer", "ff_rtmp_packet_dump", "av_opt_set_dict", "av_pixelutils_get_sad_fn", "av_shrink_packet", "av_malloc", "ff_isom_write_avcc", "av_frame_get_plane_buffer", "avfilter_graph_config", "avcodec_find_encoder", "ff_h264_pred_weight_table", "ikcp_peeksize", "av_filter_next", "ff_get_2pass_fcode", "WebPMemoryWriterClear", "avio_wb32", "ff_h263_pred_acdc", "ff_png_get_nb_channels", "av_guess_sample_aspect_ratio", "ff_h264_idct_add8_neon", "av_codec_next", "av_get_pcm_codec", "ff_free_vlc", "ff_h264_idct_add8_422_12_c", "ff_intel_h263_decode_picture_header", "av_buffersrc_add_frame_flags", "ff_avg_pixels16_neon", "ff_metadata_conv", "av_encryption_info_free", "ff_parse_sample_format", "ff_draw_horiz_band", "ff_celp_filter_init", "ff_network_wait_fd_timeout", "swr_close", "ff_reduce_index", "ff_h264_sei_uninit", "ff_ps_apply", "rgb64to48_bswap", "av_stristart", "avpriv_strtod", "ff_acelp_lsf2lsp", "av_frame_get_channels", "av_log_fatal", "avresample_free", "ff_listen_bind", "swri_audio_convert_alloc", "swri_dither_init", "ff_urldecode", "av_get_bits_per_pixel", "ff_h264_ps_uninit", "ff_lzw_encode_flush", "av_get_packet", "ff_vorbis_comment", "ff_mdct_end_fixed", "ff_pcm_read_packet", "sws_isSupportedInput", "ff_avc_write_annexb_extradata", "ff_h263_pred_motion", "av_picture_crop", "ff_thread_await_progress2", "ff_iir_filter_free_coeffsp", "avpriv_exif_decode_ifd", "avcodec_default_get_format", "avutil_version", "rgb16to24", "av_drm_init", "ff_simple_idct_put_10", "av_fast_padded_malloc", "av_aes_crypt", "ff_codec_open2_recursive", "ff_put_h264_qpel8_mc20_neon", "av_camellia_crypt", "ff_scale_vector_to_given_sum_of_squares", "ff_pred8x8_left_dc_neon", "ffurl_closep", "av_frame_set_decode_error_flags", "ff_format_output_open", "av_samples_alloc", "av_encryption_info_clone", "ff_thread_report_progress2", "ff_aac_update_ltp", "ff_put_no_rnd_qpel16_mc13_old_c", "av_dict_count", "avresample_set_compensation", "ff_parse_sample_rate", "ff_framequeue_global_init", "avpriv_mpegaudio_decode_header", "WebPPictureAlloc", "ff_sample_fmt_is_planar", "av_rescale_q", "av_log_format_line2", "avpriv_mpeg4audio_get_config", "ff_decode_frame_props", "ff_kbd_window_init", "ffio_read_partial", "ff_block_permute", "ff_kbd_window_init_fixed", "ff_fdct_ifast248", "ffurl_close", "WebPPictureYUVAToARGB", "ff_put_qpel16_mc11_old_c", "ff_avg_h264_qpel16_mc33_neon", "av_timecode_init_from_string", "ff_init_slice_from_src", "avfilter_make_format64_list", "av_get_frame_filename2", "av_resample", "ff_mpeg4video_split", "av_compare_mod", "sws_printVec2", "av_encryption_info_get_side_data", "av_vorbis_parse_reset", "ff_print_debug_info", "avio_closep", "ffio_open2_wrapper", "ff_iir_filter_init_state", "ff_network_log_callback", "av_get_channel_name", "ff_yuv422p_to_bgra_neon", "av_sample_fmt_is_planar", "av_encryption_init_info_free", "av_ripemd_final", "ff_compute_frame_duration", "av_sha_final", "ff_h264_v_loop_filter_chroma_neon", "WebPPictureInitInternal", "ff_avg_pixels16x16_c", "ff_init_filters", "ff_mjpeg_build_huffman_codes", "ff_flacdsp_init", "ff_sws_init_range_convert", "sws_convertPalette8ToPacked24", "ffio_init_checksum", "ff_mdct_end", "ff_yuv420p_to_rgba_neon", "av_opt_set_dict_val", "av_bprint_clear", "ff_flac_is_extradata_valid", "av_read_frag_offset", "av_frame_get_pkt_pos", "avpicture_get_size", "sws_convertPalette8ToPacked32", "ff_pcm_read_seek", "ff_bsf_child_class_next", "ff_subtitles_queue_finalize", "ff_acelp_decode_8bit_to_1st_delay3", "sws_subVec", "ff_avg_h264_qpel16_mc12_neon", "ff_put_h264_qpel8_mc10_neon", "av_opt_set_dict2", "av_dct_init", "av_strncasecmp", "ff_avc_mp4_find_startcode", "ff_avg_qpel8_mc33_old_c", "ff_imdct36_blocks_float", "av_parser_change", "ff_formats_ref", "av_opt_get_dict_val", "ff_framesync_get_frame", "av_opt_get_image_size", "ff_dither_free", "ff_fdct248_islow_10", "WebPSetWorkerInterface", "av_strtok", "av_frame_set_sample_rate", "tcp_get_ip_addr", "avfilter_init_filter", "ff_resample_common_apply_filter_x4_s16_neon", "av_buffer_pool_init", "av_frame_get_channel_layout", "ff_h264_update_thread_context", "ikcp_waitsnd", "ff_h264_idct_dc_add_14_c", "ff_lzw_encode", "ff_getfreedisksapce", "ff_mpv_export_qp_table", "ffio_read_varlen", "ff_mpv_common_init", "ffio_read_indirect", "swr_set_matrix", "ff_codec_get_tag", "ff_update_picture_tables", "ff_avg_h264_qpel8_mc02_neon", "av_audio_convert", "ff_log2_q15", "av_format_get_video_codec", "WebPPictureImportRGBA", "ff_parse_time_base", "ff_avg_h264_qpel8_mc21_neon", "av_cast5_crypt2", "WebPPictureARGBToYUVADithered", "ff_audio_convert_set_func", "av_fifo_reset", "av_packet_ref", "ff_put_h264_qpel8_mc11_neon", "swr_get_out_samples", "avfilter_process_command", "av_format_inject_global_side_data", "av_samples_alloc_array_and_samples", "ff_getutilctx_a_init", "WebPConfigLosslessPreset", "av_get_pix_fmt_string", "av_mediacodec_default_free", "av_crc_init", "ff_put_h264_qpel8_mc30_neon", "ff_url_join", "av_opt_copy", "ff_vector_fmul_reverse_neon", "ff_h264_idct_add8_422_14_c", "av_buffersink_get_format", "ff_jpeg_fdct_islow_8", "ff_mjpeg_encode_init", "av_codec_set_lowres", "av_iformat_next", "ff_avg_qpel16_mc32_old_c", "avpriv_set_systematic_pal2", "ff_aac_apply_main_pred", "ff_mjpeg_encode_huffman_close", "ff_aac_search_for_tns", "av_utf8_decode", "av_timecode_make_string", "ff_put_pixels16x16_c", "ff_tget_short", "ff_mpv_reallocate_putbitbuffer", "av_crc", "ff_quantize_band_cost_cache_init", "ff_simple_idct_put_8", "ff_alloc_packet2", "av_pix_fmt_desc_get", "ff_llvidencdsp_init", "ff_avg_h264_chroma_mc4_neon", "ff_h264_idct_dc_add_10_c", "ff_audio_mix", "rgb64tobgr48_nobswap", "av_downmix_info_update_side_data", "av_opt_set_from_string", "av_image_alloc", "av_frame_set_qp_table", "ff_avc_find_startcode", "__powisf2", "av_bprint_init", "ff_parse_pixel_format", "ff_fft_end_fixed_32", "ff_add_param_change", "ff_imdct_calc_c_fixed", "__powidf2", "av_color_range_name", "ff_read_frame_flush", "sws_getConstVec", "av_fifo_grow", "ff_simple_idct248_put", "avio_shutdown", "avpriv_get_gamma_from_trc", "avcodec_register", "av_dict_copy", "ff_copy_rectangle", "avresample_config", "ff_h264_luma_dc_dequant_idct_9_c", "av_twofish_alloc", "ff_avg_h264_qpel8_mc23_neon", "ff_tlog_link", "av_opt_set_pixel_fmt", "ff_draw_color", "av_format_get_opaque", "av_stristr", "ff_audio_data_read_from_fifo", "swscale_configuration", "ff_dualinput_uninit", "av_file_map", "ff_set_qscale", "av_opt_set_int", "ff_decode_sbr_extension", "av_hwframe_constraints_free", "ff_h264_draw_horiz_band", "avio_find_protocol_name", "av_free", "ff_rtp_enc_name", "swr_set_compensation", "ff_mpeg_er_init", "ff_mov_cenc_write_sinf_tag", "ff_mov_lang_to_iso639", "ff_audio_convert", "av_aes_ctr_get_iv", "av_reallocp_array", "ff_udp_set_remote_url", "swri_realloc_audio", "av_buffersrc_write_frame", "av_codec_is_decoder", "av_format_set_control_message_cb", "ff_vector_dmul_scalar_neon", "av_frame_get_qp_table", "avfilter_link_get_channels", "av_tree_enumerate", "WebPEncode", "ff_faanidct_add", "ff_avg_h264_qpel16_mc03_neon", "ff_slice_thread_init", "av_check_hijack", "ff_format_io_close", "av_rescale_rnd", "ff_celp_circ_addf", "ff_set_common_channel_layouts", "avcodec_enum_to_chroma_pos", "av_opt_get_video_rate", "avcodec_license", "ff_imdct_calc_c", "ff_avg_pixels16_xy2_neon", "ff_make_formatu64_list", "av_adler32_update", "ikcp_log", "ff_h264chroma_init", "ff_getaddrinfo_a_result", "avresample_get_class", "swri_noise_shaping_int32", "ffio_limit", "av_get_channel_description", "ff_subtitles_queue_insert", "ff_rfps_add_frame", "ff_interleaved_peek", "ff_tget", "av_bsf_free", "av_guess_format", "ff_audio_data_realloc", "ff_get_format", "ff_amrwb_lsp2lpc", "ff_acelp_interpolate", "av_dynarray_add", "ff_put_h264_qpel16_mc33_neon", "ff_jni_reset_jfields", "ff_print_debug_info2", "ff_avg_qpel16_mc12_old_c", "av_oformat_next", "ff_imdct_half_c", "ff_mpeg12_init_vlcs", "sws_shiftVec", "ff_audio_convert_free", "ff_h264_pred_init_aarch64", "av_get_codec_tag_string", "avio_wb16", "av_frame_new_side_data", "ff_audio_data_drain", "av_audio_fifo_space", "ff_hcscale_fast_c", "avio_open_dir", "ff_mpeg4_get_video_packet_prefix_length", "av_lzo1x_decode", "ff_aac_encode_main_pred", "av_fifo_generic_read", "ff_mpadsp_apply_window_fixed", "ff_riff_write_info", "av_bsf_send_packet", "av_bprint_channel_layout", "avfilter_uninit", "av_format_set_opaque", "ff_jni_jstring_to_utf_chars", "ff_lsp2polyf", "sws_addVec", "avcodec_descriptor_get", "ff_fill_line_with_color", "ff_thread_free", "ff_mpv_report_decode_progress", "avio_feof", "av_fifo_realloc2", "av_aes_ctr_alloc", "ff_framesync_add_frame", "avpriv_request_sample", "avcodec_dct_get_class", "ff_audio_mix_set_matrix", "ff_h263_decode_picture_header", "av_dct_end", "avio_r8", "swri_noise_shaping_float", "av_dup_packet", "av_probe_input_buffer2", "ff_biweight_h264_pixels_4_neon", "ff_scalarproduct_float_neon", "avpriv_copy_bits", "ff_subtitles_queue_seek", "av_qsv_alloc_context", "av_buffersink_get_frame", "ff_fft_lut_init", "ff_hevc_decode_nal_sps", "ff_avg_qpel8_mc32_old_c", "av_hash_final", "ff_mpa_synth_init_float", "avfilter_graph_alloc", "ff_init_ff_cos_tabs_fixed", "av_buffer_pool_uninit", "ff_mpv_encode_end", "ff_h264_direct_ref_list_init", "avresample_read", "ff_add_format", "ff_mpeg4_set_direct_mv", "ff_jni_exception_get_summary", "av_color_space_name", "ff_amf_read_number", "ff_h264_idct8_add_9_c", "ff_psy_preprocess_init", "ff_estimate_p_frame_motion", "ff_yuv2rgb_get_func_ptr", "avio_get_dyn_buf", "avcodec_parameters_alloc", "av_timecode_make_mpeg_tc_string", "sws_getColorspaceDetails", "ff_framesync_next", "av_xtea_alloc", "ff_mpeg4_find_frame_end", "ff_put_qpel8_mc11_old_c", "ff_mov_cenc_init", "ff_jni_init_jfields", "ff_copy_rectangle2", "avcodec_dct_init", "ff_text_eof", "av_fourcc_make_string", "ff_tilt_compensation", "ff_flv_decode_picture_header", "ff_text_init_buf", "ff_h264_chroma422_dc_dequant_idct_8_c", "av_packet_new_side_data", "ff_formats_changeref", "ff_imdct_half_neon", "ff_query_formats_all_layouts", "swri_resample_dsp_aarch64_init", "ff_id3v2_finish", "av_ripemd_alloc", "ffurl_get_multi_file_handle", "ff_hevc_decode_nal_pps", "av_log_format_line", "ff_h264qpel_init_aarch64", "av_opt_eval_flags", "ff_init_scantable_permutation", "av_hex_dump_log", "ff_h264_decode_ref_pic_list_reordering", "ff_put_pixels16_neon", "ff_pred8x8_0lt_dc_neon", "av_samples_set_silence", "ff_h263dsp_init", "av_opt_eval_int64", "avcodec_string", "ff_avg_h264_qpel16_mc02_neon", "ff_exp2", "ff_mpeg_flush", "ff_init_ff_cos_tabs", "av_i2int", "av_parser_parse2", "ff_acelp_filter_init", "ff_h263_find_frame_end", "ff_riff_write_info_tag", "ff_avg_h264_qpel8_mc30_neon", "ff_h263_decode_end", "ff_rl_free", "ff_tget_long", "ff_add_cpb_side_data", "ff_id3v2_parse_apic", "ff_read_riff_info", "ff_hpeldsp_init_aarch64", "ff_free_stream", "avpriv_dict_set_timestamp", "ff_init_mpadsp_tabs_fixed", "av_display_rotation_get", "av_parse_time", "av_expr_free", "ff_request_frame", "avcodec_decode_audio4", "rgb32to24", "ff_get_codec_guid", "ff_parse_close", "ikcp_setmtu", "av_match_name", "ff_fix_long_mvs", "ff_rate_estimate_qscale", "av_fifo_generic_write", "ff_alloc_packet", "av_frame_set_metadata", "ff_put_pixels16_y2_neon", "av_read_play", "ff_amf_write_number", "ff_avfilter_graph_update_heap", "ff_put_pixels16_xy2_neon", "av_md5_sum", "ff_h264_idct8_add4_neon", "ffio_get_checksum", "av_set_options_string", "ff_h264_chroma422_dc_dequant_idct_14_c", "av_opt_get_key_value", "ff_put_h264_qpel16_mc02_neon", "av_packet_rescale_ts", "av_bsf_list_alloc", "ff_h264_ref_picture", "avcodec_chroma_pos_to_enum", "ff_er_add_slice", "avformat_transfer_internal_stream_timing_info", "av_image_get_buffer_size", "avresample_build_matrix", "ff_init_block_index", "avcodec_free_context", "ff_sbrdsp_init", "ff_inlink_process_commands", "ff_cbrt_tableinit", "avfilter_transform", "avio_enum_protocols", "av_image_fill_max_pixsteps", "swr_init", "ff_aac_sbr_init", "ff_put_h264_qpel16_mc03_neon", "WebPGetWorkerInterface", "av_bsf_get_null_filter", "ff_mdct_calc_c_fixed_32", "ff_thread_flush", "ff_acelp_weighted_vector_sum", "ff_iir_filter_init_coeffs", "avcodec_parameters_free", "ff_put_h264_qpel8_mc03_neon", "avfilter_link_set_closed", "av_tree_find", "ff_estimate_b_frame_motion", "av_hwframe_map", "avcodec_receive_packet", "ff_parse_channel_layout", "av_hmac_calc", "swr_config_frame", "ff_reshuffle_raw_rgb", "ff_inlink_make_frame_writable", "ff_get_unscaled_swscale", "av_crc_get_table", "WebPEncodeRGBA", "av_reduce", "avformat_init_output", "ff_resample_one_s16_neon", "av_get_token", "av_expr_eval", "ff_h264_idct_add16intra_10_c", "av_buffersink_get_hw_frames_ctx", "av_lockmgr_register", "ff_mdct_init", "WebPPictureImportRGB", "av_imdct_calc", "av_image_check_size", "WebPEncodeRGB", "WebPPictureARGBToYUVA", "ff_simple_idct_add_10", "avpriv_frame_get_metadatap", "ff_pred8x8_dc_neon", "ff_h263_decode_mb", "avcodec_get_edge_width", "ff_amf_write_string2", "ff_subtitles_read_text_chunk", "av_frame_get_sample_rate", "av_audio_fifo_drain", "ff_fft_end", "shuffle_bytes_3012", "WebPPictureHasTransparency", "av_force_cpu_flags", "av_check_info_item_free", "ff_codec_get_id", "av_frame_is_writable", "ff_h2645_extract_rbsp", "av_frame_ref", "ff_simple_idct_12", "av_hash_final_bin", "av_opt_is_set_to_default", "swr_set_channel_mapping", "sws_getIdentityVec", "WebPEncodeLosslessBGRA", "ff_h264_idct_dc_add_9_c", "av_samples_get_buffer_size", "ff_h264_decode_ref_pic_marking", "av_color_transfer_name", "av_hmac_alloc", "ff_avg_h264_qpel16_mc01_neon", "avresample_set_channel_mapping", "avcodec_default_get_buffer2", "swresample_configuration", "ff_conv_fltp_to_s16_neon", "av_vlog", "ff_audio_mix_get_matrix", "ff_put_pixels16_xy2_no_rnd_neon", "ff_h264_idct8_dc_add_12_c", "ff_slice_thread_free", "av_cast5_init", "av_frame_get_pkt_size", "ff_id3v2_write_apic", "avio_wl16", "av_image_fill_arrays", "avcodec_default_execute", "av_find_input_format", "ikcp_getconv", "av_audio_resample_init", "ff_data_to_hex", "av_log_default_callback", "ff_frame_pool_get", "ff_jni_utf_chars_to_jstring", "av_hwdevice_hwconfig_alloc", "ikcp_update", "ff_set_sar", "av_get_audio_frame_duration2", "avcodec_configuration", "ff_audio_convert_init_aarch64", "av_murmur3_final", "rgb48tobgr48_nobswap", "ff_all_channel_layouts", "ff_init_buffer_info", "ff_id3v2_read", "rgb64to48_nobswap", "ff_read_packet", "ff_h264_h_loop_filter_chroma_neon", "ff_insert_pad", "av_mdct_end", "av_format_get_subtitle_codec", "av_find_best_stream", "av_tree_destroy", "ff_mjpeg_encode_dc", "av_stream_get_recommended_encoder_configuration", "ff_amf_get_field_value", "ff_framesync_process_frame", "avcodec_close", "av_gcd", "av_camellia_init", "ff_hwframe_map_create", "ff_lpc_calc_ref_coefs", "av_samples_copy", "ff_set_cmp", "av_cpu_count", "avfilter_graph_free", "av_opt_get_double", "ff_avg_qpel16_mc33_old_c", "ff_thread_finish_setup", "avfilter_pad_get_name", "av_fopen_utf8", "ff_mpeg4_frame_end", "ff_rgb24toyv12_c", "ff_vorbiscomment_write", "ff_put_h264_qpel8_mc21_neon", "av_register_input_format", "avio_rl16", "av_interleaved_write_uncoded_frame", "av_url_split", "avio_write_marker", "ff_pred8x8_0l0_dc_neon", "ff_lzw_decode", "av_sub_q", "av_dv_frame_profile", "avio_seek", "ff_pred8x8_128_dc_neon", "ff_epzs_motion_search", "ff_isom_write_hvcc", "av_hmac_init", "av_encryption_info_alloc", "av_blowfish_crypt_ecb", "ff_h264_idct8_add_10_c", "ff_me_cmp_init", "ff_yuv422p_to_rgba_neon", "ff_pngdsp_init", "avformat_new_stream", "ff_h264_idct_dc_add_8_c", "ff_tadd_long_metadata", "ff_aac_encode_tns_info", "av_frame_unref", "ff_mpeg4_clean_buffers", "ff_put_pixels8_l2_8", "av_reallocp", "ff_listen_connect", "ff_frame_pool_get_audio_config", "av_audio_convert_free", "av_stream_get_parser", "ff_init_qscale_tab", "ff_fft_init_fixed", "WebPPictureSmartARGBToYUVA", "ikcp_congestion", "av_sha_init", "av_drm_support", "av_get_frame_filename", "av_thread_message_queue_set_err_recv", "ff_mpeg4_decode_partitions", "ff_id3v2_free_extra_meta", "ff_mpa_l2_select_table", "ff_audio_mix_set_func", "ff_mdct15_uninit", "av_des_init", "av_thread_message_queue_free", "ff_avg_h264_qpel8_mc33_neon", "ff_nv12_to_bgra_neon", "ff_update_duplicate_context", "ff_avg_h264_qpel16_mc20_neon", "ff_pred8x8_l00_dc_neon", "av_bsf_next", "avpriv_copy_pce_data", "av_get_bytes_per_sample", "swri_noise_shaping_double", "ff_tadd_rational_metadata", "ff_interleave_packet_per_dts", "av_default_item_name", "av_buffersrc_parameters_set", "av_format_get_audio_codec", "avformat_network_init", "av_get_alt_sample_fmt", "av_twofish_crypt", "av_copy_packet_side_data", "ff_acelp_lsf2lspd", "ff_put_qpel8_mc31_old_c", "avcodec_decode_subtitle2", "av_frame_copy", "avfilter_pad_get_type", "ff_init_desc_chscale", "ff_aac_sbr_ctx_close", "av_stereo3d_alloc", "av_bprint_chars", "ff_fetch_timestamp", "ff_rate_control_init", "av_sdp_create", "ff_h263_decode_init", "ff_amf_read_null", "ff_put_h264_qpel16_mc11_neon", "av_aes_ctr_set_iv", "av_probe_input_format2", "ff_codec_guid_get_id", "ikcp_send", "ff_amf_tag_size", "ff_h264_chroma_dc_dequant_idct_12_c", "ff_fft_permute_neon", "ff_thread_await_progress", "ff_put_pixels8_x2_no_rnd_neon", "ff_h264_idct_add16intra_12_c", "ff_mdct_calc_neon", "ff_bswapdsp_init", "ff_put_h264_qpel8_mc12_neon", "ff_hpeldsp_init", "ff_avg_h264_chroma_mc8_neon", "av_pkt_dump2", "av_fifo_free", "avio_close", "av_buffer_make_writable", "ff_acelp_decode_9bit_to_1st_delay6", "av_jni_set_java_vm", "ff_framequeue_skip_samples", "ff_ape_parse_tag", "ff_idctdsp_init", "avfilter_get_class", "ff_smil_extract_next_text_chunk", "av_get_packed_sample_fmt", "ff_weight_h264_pixels_16_neon", "ikcp_allocator", "ff_all_formats", "av_bprint_init_for_buffer", "ff_put_h264_chroma_mc4_neon", "ff_get_line", "avfilter_open", "ff_h264_init_cabac_states", "av_lfg_init", "av_opt_next", "av_hwframe_transfer_get_formats", "ff_lzw_decode_init", "ff_mpv_encode_picture", "ff_framehash_write_header", "ff_acelp_update_past_gain", "av_format_set_metadata_header_padding", "av_escape", "av_fifo_size", "av_stereo3d_create_side_data", "ffio_open_dyn_packet_buf", "avcodec_encode_subtitle", "avformat_queue_attached_pictures", "av_buffersink_get_channels", "ikcp_release", "av_register_codec_parser", "ff_get_mb_score", "ff_simple_idct_add_neon", "avcodec_send_frame", "av_image_copy_uc_from", "av_hmac_update", "ff_put_no_rnd_qpel8_mc12_old_c", "ff_put_h264_qpel16_mc12_neon", "avio_free_directory_entry", "ff_fill_rgba_map", "av_image_check_size2", "ff_iir_filter_free_statep", "av_codec_set_pkt_timebase", "av_dirac_parse_sequence_header", "avcodec_is_open", "av_murmur3_init", "ffurl_get_protocols", "av_parser_init", "ff_j_rev_dct4", "ff_mpeg_draw_horiz_band", "ff_nv12_to_argb_neon", "ff_put_h264_qpel16_mc23_neon", "av_camellia_alloc", "ff_acelp_decode_6bit_to_2nd_delay6", "ff_pred16x16_vert_neon", "ff_h264_decode_seq_parameter_set", "avfilter_graph_get_filter", "ff_simple_idct_put_neon", "av_frame_make_writable", "ff_subtitles_read_chunk", "ff_parse_key_value", "ff_amr_set_fixed_gain", "ff_h263_decode_motion", "av_fast_padded_mallocz", "avio_put_str16le", "swr_get_delay", "ff_pred8x8_plane_neon", "av_expr_parse", "av_get_known_color_name", "avfilter_graph_parse", "ff_http_averror", "av_buffersink_get_frame_rate", "ff_mpv_common_init_neon", "av_write_uncoded_frame", "ff_vector_fmul_window_neon", "av_shr_i", "ff_clear_fixed_vector", "ff_mpeg1_decode_block_intra", "avresample_close", "ff_parse_creation_time_metadata", "ff_raw_data_read_header", "av_demuxer_open", "ff_imdct36_blocks_fixed", "ff_idctdsp_init_aarch64", "sws_get_class", "ff_dct_init", "av_buffer_unref", "avpriv_new_chapter", "ff_videodsp_init", "WebPEncodeBGRA", "av_fatal_set_callback", "ff_acelp_decode_5_6_bit_to_2nd_delay3", "ffio_set_buf_size", "ff_h263_update_motion_val", "av_md5_alloc", "av_buffersrc_get_nb_failed_requests", "avformat_get_mov_video_tags", "av_new_packet", "avcodec_get_subtitle_rect_class", "ff_side_data_set_encoder_stats", "av_format_get_metadata_header_padding", "ff_audio_resample_init", "av_compare_ts", "avio_open", "avutil_configuration", "av_image_fill_linesizes", "av_buffer_realloc", "ff_audio_data_set_channels", "WebPBlendAlpha", "avpriv_io_move", "ff_put_h264_qpel8_mc23_neon", "ff_h264_field_end", "ff_celp_lp_synthesis_filter", "av_sha512_final", "av_get_padded_bits_per_pixel", "ff_h264dsp_init_aarch64", "avio_rb16", "av_fifo_drain", "avpriv_lock_avformat", "ff_tdecode_header", "av_codec_set_chroma_intra_matrix", "avpriv_find_pix_fmt", "ff_put_pixels16_y2_no_rnd_neon", "av_stream_new_side_data", "av_probe_input_format", "av_append_packet", "av_rdft_end", "ffio_ensure_seekback", "ff_init_scantable", "ff_mpegvideodsp_init", "WebPPictureSharpARGBToYUVA", "ff_put_h264_qpel8_mc31_neon", "avpriv_codec_get_cap_skip_frame_fill_param", "sws_allocVec", "ff_framequeue_free", "ff_avfilter_link_set_in_status", "avfilter_graph_request_oldest", "avpriv_solve_lls", "ff_psdsp_init", "ff_mpv_common_frame_size_change", "avformat_free_context", "ff_butterflies_float_neon", "ff_socket", "ff_png_pass_row_size", "ff_put_no_rnd_qpel16_mc33_old_c", "ff_mp4_read_descr_len", "ff_h264_init_poc", "ff_emulated_edge_mc_16", "ff_put_h264_qpel16_mc22_neon", "ff_h264_sei_stereo_mode", "avcodec_find_best_pix_fmt2", "ff_h264_slice_context_init", "ff_put_qpel16_mc32_old_c", "avcodec_align_dimensions", "av_rescale", "ff_audio_resample_free", "rgb24to32", "ff_psy_find_group", "ff_j_rev_dct2", "av_buffersink_get_time_base", "ff_avg_pixels16_xy2_no_rnd_neon", "ff_h264_set_erpic", "ff_celp_lp_zero_synthesis_filterf", "ff_choose_chroma_location", "ff_merge_samplerates", "sws_isSupportedEndiannessConversion", "WebPEncodeLosslessBGR", "ff_sort_nearly_sorted_floats", "ff_h264_idct8_dc_add_14_c", "ff_pixblockdsp_init", "av_register_all", "av_audio_fifo_peek_at", "avresample_alloc_context", "ff_msrle_decode", "ff_get_pcm_codec_id", "ff_vorbis_stream_comment", "avcodec_version", "av_add_index_entry", "ff_opencl_register_filter_kernel_code_all", "ff_pred16x16_plane_neon", "ff_mdct_calcw_c", "sws_normalizeVec", "av_content_light_metadata_alloc", "ff_put_pixels8_y2_no_rnd_neon", "av_encryption_info_add_side_data", "ff_avg_qpel8_mc31_old_c", "ffio_close_null_buf", "av_mediacodec_alloc_context", "ff_tls_open_underlying", "avformat_seek_file", "av_frame_set_pkt_pos", "av_opt_set_channel_layout", "av_gettime_relative_is_monotonic", "swr_convert", "sws_isSupportedOutput", "ff_lzw_encode_init", "ff_avg_qpel8_mc13_old_c", "av_tree_node_alloc", "av_dump_format", "ff_rl_init", "ff_inet_aton", "ff_biweight_h264_pixels_8_neon", "ff_set_dimensions", "avformat_get_mov_audio_tags", "ff_hyscale_fast_c", "avcodec_parameters_copy", "ff_default_get_audio_buffer", "ff_h264_idct8_add4_8_c", "ff_init_vlc_sparse", "swri_resample_dsp_init", "WebPEncodeBGR", "ff_amf_read_string", "ff_smil_get_attr_ptr", "av_get_pix_fmt_name", "ff_add_index_entry", "avpriv_aac_parse_header", "avcodec_get_name", "av_dict_get", "ff_avg_h264_qpel16_mc30_neon", "ff_framesync_configure", "av_read_frame", "ff_update_link_current_pts", "av_parse_cpu_caps", "av_buffer_pool_init2", "ff_flac_decode_frame_header", "swr_convert_frame", "av_opt_child_next", "ff_nv21_to_abgr_neon", "ff_h264_flush_change", "av_opt_set_double", "shuffle_bytes_3210", "av_hash_alloc", "av_fft_permute", "ff_mov_write_chan", "ff_filter_activate", "av_xiphlacing", "ff_text_read", "ff_rtmp_calc_digest_pos", "av_interleaved_write_frame", "ff_raw_audio_read_header", "sws_alloc_set_opts", "ff_avg_h264_qpel8_mc00_neon", "av_frame_side_data_name", "av_rescale_delta", "swscale_version", "avio_get_str", "ff_put_qpel16_mc33_old_c", "avio_pause", "ff_put_pixels8_y2_neon", "ff_resample_common_apply_filter_x8_float_neon", "avpriv_set_pts_info", "ff_blend_mask", "av_color_primaries_name", "ff_h264_luma_dc_dequant_idct_12_c", "av_find_default_stream_index", "ff_filter_alloc", "av_write_uncoded_frame_query", "av_opt_show2", "ff_is_multicast_address", "av_frame_set_pkt_duration", "av_find_nearest_q_idx", "av_opt_serialize", "av_opt_eval_q", "avio_write", "avio_close_dyn_buf", "av_blowfish_alloc", "av_mul_q", "av_stream_add_side_data", "ff_mov_cenc_avc_write_nal_units", "sws_freeVec", "ff_h264_get_slice_type", "ff_faandct248", "av_find_program_from_stream", "ff_audio_mix_alloc", "ff_acelp_decode_4bit_to_2nd_delay3", "ff_alloc_a53_sei", "av_hash_names", "av_des_alloc", "ff_imdct_calc_c_fixed_32", "ff_emulated_edge_mc_8", "ff_amf_read_bool", "avio_close_dir", "ff_mpeg_unref_picture", "ff_fix_long_p_mvs", "avpriv_bprint_to_extradata", "ff_interleave_add_packet", "av_parser_next", "av_get_channel_layout_channel_index", "ff_mp4_parse_es_descr", "ff_put_h264_qpel16_mc32_neon", "av_fifo_space", "av_bitstream_filter_next", "ff_aac_adjust_common_ltp", "av_spherical_projection_name", "av_hwframe_get_buffer", "ff_inlink_request_frame", "av_stereo3d_from_name", "ff_iir_filter", "ff_aac_search_for_ltp", "av_cpb_properties_alloc", "av_audio_fifo_size", "av_get_pix_fmt_loss", "av_new_program", "ff_h264_direct_dist_scale_factor", "av_audio_fifo_write", "ff_libwebp_encode_init_common", "ff_merge_formats", "av_tea_init", "ff_pred8x8_vert_neon", "swri_get_dither", "av_strerror", "av_vorbis_parse_frame", "av_sha_update", "avcodec_send_packet", "ff_avg_h264_qpel8_mc11_neon", "ff_celp_math_init", "av_strstart", "ff_framesync_request_frame", "ff_put_guid", "ff_mpadsp_apply_window_float_neon", "swri_audio_convert_init_aarch64", "ff_aac_encode_ltp_info", "ff_inlink_check_available_frame", "av_buffersink_get_samples", "ff_acelp_high_pass_filter", "ffurl_seek", "ff_stream_encode_params_copy", "ff_init_desc_no_chr", "avio_rl24", "av_tea_alloc", "ff_h264_idct_add16_10_c", "ff_audio_mix_free", "avio_rb64", "av_encryption_init_info_add_side_data", "ff_iir_filter_init", "ff_init_mpadsp_tabs_float", "ff_init_cabac_decoder", "av_vorbis_parse_init", "ff_crcA001_update", "ff_mpadsp_apply_window_float", "ff_find_stream_index", "av_frame_copy_props", "avfilter_configuration", "ff_pred8x8_top_dc_neon", "ff_png_zfree", "ff_rtp_get_payload_type", "ff_sws_rgb2rgb_init", "WebPMemoryWriterInit", "av_picture_copy", "avfilter_free", "av_encryption_init_info_get_side_data", "rgb16tobgr16", "ff_audio_resample", "av_buffer_ref", "avcodec_find_encoder_by_name", "avpriv_split_xiph_headers", "ff_make_absolute_url2", "av_realloc_array", "av_log_missing_feature", "ff_all_channel_counts", "ff_mdct_calc_c_fixed", "ff_metadata_conv_ctx", "avio_handshake", "avfilter_init_dict", "avio_put_str16be", "av_rc4_crypt", "ff_make_format_list", "avcodec_find_best_pix_fmt_of_list", "av_hwdevice_ctx_init", "av_aes_ctr_crypt", "ff_jref_idct_add", "avcodec_set_dimensions", "av_hash_final_b64", "ff_rdft_end", "url_feof", "ff_acelp_decode_gain_code", "ff_h264_idct_dc_add_neon", "ff_h264_idct8_add_neon", "av_stream_get_codec_timebase", "ff_vector_fmul_neon", "av_fast_mallocz", "av_timecode_get_smpte_from_framenum", "avcodec_find_best_pix_fmt_of_2", "ff_fmt_is_in", "ff_avg_h264_qpel8_mc32_neon", "ff_resample_common_apply_filter_x4_float_neon", "av_drm_decrypt", "av_d2q", "shuffle_bytes_1230", "ff_hevc_annexb2mp4_buf", "av_log_ask_for_sample", "ff_lpc_calc_ref_coefs_f", "ff_h264_idct_add_12_c", "ff_thread_report_progress", "avfilter_version", "av_pix_fmt_desc_get_id", "avpriv_scalarproduct_float_c", "ff_conv_flt_to_s16_neon", "ffurl_read_complete", "ff_side_data_update_matrix_encoding", "ff_network_wait_fd", "ff_iir_filter_flt", "ff_avfilter_link_set_out_status", "ff_mpv_common_end", "avio_skip", "ikcp_wndsize", "ffio_init_context", "ff_inlink_consume_samples", "av_murmur3_alloc", "ff_avg_h264_qpel16_mc23_neon", "ff_filter_graph_run_once", "ff_prefetch_aarch64", "ff_j_rev_dct", "avsubtitle_free", "ff_audio_data_add_to_fifo", "ff_h264_luma_dc_dequant_idct_10_c", "ff_convert_dither", "ff_conv_fltp_to_s16_2ch_neon", "avio_check", "ff_put_no_rnd_qpel8_mc33_old_c", "av_aes_ctr_set_full_iv", "avcodec_register_all", "avcodec_flush_buffers", "av_cmp_i", "av_packet_side_data_name", "ff_h264_unref_picture", "ff_planar_sample_fmts", "av_frame_set_pkt_size", "avresample_open", "avformat_write_header", "av_format_get_control_message_cb", "ff_h264_idct_add16intra_14_c", "WebPEncodeLosslessRGB", "ff_channel_layouts_unref", "av_strcasecmp", "av_packet_get_side_data", "avio_recved", "swscale_license", "av_gettime", "av_opt_is_set_to_default_by_name", "ff_put_v", "avio_put_str", "av_des_crypt", "ff_network_io_read_callback", "ff_framesync_filter_frame", "av_calloc", "av_image_copy", "ff_avg_h264_qpel8_mc03_neon", "ff_yuv420p_to_argb_neon", "ff_h264_idct_add8_422_10_c", "av_q2intfloat", "av_jni_get_java_vm", "av_stream_get_r_frame_rate", "av_opt_get", "rgb64tobgr48_bswap", "ff_check_alignment", "av_bitstream_filter_filter", "WebPSafeMalloc", "ff_stream_add_bitstream_filter", "ff_prores_idct", "avpriv_alloc_fixed_dsp", "avcodec_profile_name", "ff_put_no_rnd_qpel16_mc12_old_c", "ff_avg_h264_qpel16_mc13_neon", "av_get_audio_frame_duration", "ff_h264qpel_init", "ff_avg_h264_qpel8_mc12_neon", "ff_yuv2rgb_c_init_tables", "av_bprintf", "avformat_match_stream_specifier", "ff_avg_h264_qpel8_mc01_neon", "av_strlcpy", "ff_rtmp_check_alloc_array", "av_dynarray_add_nofree", "ff_h264_check_intra_pred_mode", "avio_rb24", "ff_id3v2_write_metadata", "ff_xvid_idct", "ff_gen_search", "ff_default_query_formats", "av_check_info_alloc", "WebPCleanupTransparentArea", "ff_mpv_decode_mb", "ff_h264_free_tables", "ff_alloc_entries", "ff_update_cur_dts", "ff_decode_10_pulses_35bits", "av_pix_fmt_get_chroma_sub_sample", "ffurl_write", "ff_color_frame", "av_frame_set_color_range", "ff_put_pixels8_neon", "av_get_pix_fmt", "av_check_info_item_alloc", "avpicture_layout", "av_twofish_init", "avio_rb32", "ff_http_auth_create_response", "ff_mjpeg_init_hvsample", "av_base64_encode", "avfilter_graph_parse2", "ff_yuv2planeX_8_neon", "ff_hevc_decode_nal_vps", "avio_size", "av_get_sample_fmt", "av_stream_set_r_frame_rate", "av_audio_fifo_realloc", "ikcp_create", "ff_put_no_rnd_qpel16_mc32_old_c", "ff_frame_pool_audio_init", "sws_alloc_context", "ff_avg_pixels16_x2_neon", "av_rc4_init", "ff_add_png_paeth_prediction", "av_get_random_seed", "av_stereo3d_type_name", "ff_avc_parse_nal_units_buf", "av_hwaccel_next", "ff_inlink_check_available_samples", "ff_celp_lp_synthesis_filterf", "ff_amf_match_string", "av_spherical_alloc", "av_thread_message_flush", "ff_avg_qpel16_mc31_old_c", "ff_get_wav_header", "av_sha512_alloc", "ff_init_vscale", "swr_free", "avformat_close_input", "av_probe_input_format3", "avresample_convert", "avpriv_mpegts_parse_packet", "ff_mov_add_hinted_packet", "av_opt_find", "ff_h264_remove_all_refs", "ff_h264_decode_extradata", "av_frame_get_side_data", "ff_init_cabac_encoder", "av_codec_get_pkt_timebase", "avcodec_get_type", "av_sha512_update", "rgb15tobgr32", "avfilter_pad_count", "avpriv_init_lls", "av_blowfish_crypt", "ff_find_last_ts", "ff_audio_resample_init_aarch64", "av_register_bitstream_filter", "avcodec_get_pix_fmt_loss", "ff_yuv422p_to_argb_neon", "ff_h264_decode_mb_cavlc", "avpriv_tempfile", "av_append_path_component", "rgb15tobgr16", "ff_reget_buffer", "ff_mpv_frame_end", "av_audio_fifo_read", "avresample_get_out_samples", "avresample_get_matrix", "ff_acelp_fc_pulse_per_track", "ff_put_h264_qpel16_mc20_neon", "av_opt_set_bin", "rgb16tobgr32", "ff_psy_init", "av_encryption_init_info_alloc", "ffio_open_null_buf", "ff_channel_layouts_ref", "ff_start_tag", "ff_h264_idct8_add4_12_c", "av_parse_video_size", "avfilter_get_matrix", "ff_draw_init", "av_bsf_get_class", "ff_lpc_calc_coefs", "av_opt_get_int", "ff_put_qpel16_mc31_old_c", "ff_get_best_fcode", "av_audio_fifo_free", "ff_id3v2_start", "ff_nv21_to_rgba_neon", "WebPPictureImportBGR", "av_codec_get_tag2", "ff_h264_idct8_add4_9_c", "ffurl_shutdown", "av_opt_flag_is_set", "av_hwframe_ctx_create_derived", "av_buffersink_get_w", "ff_put_no_rnd_qpel16_mc31_old_c", "ff_id3v1_read", "ff_jref_idct_put", "ff_index_search_timestamp", "swri_audio_convert_free", "ff_amf_write_string", "av_buffersink_get_type", "swr_alloc", "ff_psy_preprocess", "av_frame_set_channel_layout", "av_dict_set", "ff_h264_idct_add16_14_c", "ff_amf_write_field_name", "ff_alloc_picture", "av_timecode_make_smpte_tc_string", "ff_jni_exception_check", "WebPGetColorPalette", "ff_h264_execute_ref_pic_marking", "av_get_time_base_q", "av_packet_shrink_side_data", "av_bitstream_filter_init", "ff_h264_chroma_dc_dequant_idct_8_c", "ff_amf_write_null", "av_fft_calc", "ff_default_get_video_buffer", "ff_avg_pixels16_x2_no_rnd_neon", "avpriv_report_missing_feature", "rgb15tobgr15", "av_frame_set_colorspace", "ff_mjpeg_encode_stuffing", "swri_oldapi_conv_fltp_to_s16_nch_neon", "avio_alloc_context", "ff_put_h264_qpel8_mc22_neon", "ff_framequeue_peek", "av_buffersink_params_alloc", "ff_match_2uint16", "ff_dualinput_request_frame", "avcodec_parameters_to_context", "avpriv_mpegts_parse_open", "WebPFree", "av_frame_get_pkt_duration", "av_strlcatf", "ff_get_video_buffer", "ff_resample_one_s32_neon", "av_hash_final_hex", "ff_h264_idct8_add_8_c", "sws_setColorspaceDetails", "ff_h264_idct_add16intra_9_c", "av_get_exact_bits_per_sample", "avformat_alloc_context", "ff_jni_get_env", "ff_mpadsp_init", "ff_frame_thread_encoder_free", "ff_frame_thread_free", "ff_h264_luma_dc_dequant_idct_14_c", "av_display_matrix_flip", "av_bsf_list_free", "ff_init_2d_vlc_rl", "ff_simple_idct_8", "ff_formats_unref", "ff_af_queue_add", "ff_lock_avcodec", "av_drm_close", "ff_rtmp_packet_destroy", "av_bsf_receive_packet", "ff_mpv_idct_init", "ffurl_handshake", "ff_tis_ifd", "ff_h264_get_profile", "ff_pred16x16_hor_neon", "avresample_configuration", "ff_urlcontext_child_class_next", "av_match_ext", "ff_framesync_init", "ff_af_queue_remove", "av_frame_get_decode_error_flags", "av_samples_fill_arrays", "ff_pred16x16_dc_neon", "av_des_mac", "avpriv_mpa_decode_header2", "ff_put_qpel8_mc12_old_c", "ff_brktimegm", "ff_avc_parse_nal_units", "swr_drop_output", "ff_mpegvideoencdsp_init", "ffurl_size", "av_bprint_append_data", "av_fifo_generic_peek_at", "ff_h263_decode_init_vlc", "ff_inlink_acknowledge_status", "ff_openssl_init", "av_seek_frame", "av_packet_unpack_dictionary", "ff_set_common_formats", "av_opt_query_ranges", "av_get_extended_channel_layout", "avfilter_mul_matrix", "ff_h264_chroma422_dc_dequant_idct_10_c", "ff_h264_decode_mb_cabac", "ff_mov_read_chan", "ff_acelp_lspd2lpc", "ff_rm_reorder_sipr_data", "ff_replaygain_export_raw", "av_timecode_check_frame_rate", "av_abuffersink_params_alloc", "ff_h264_idct_dc_add_12_c", "ff_h264_chroma422_dc_dequant_idct_12_c", "avio_open2", "ff_id3v2_write_simple", "avfilter_graph_create_filter", "ff_put_wav_header", "avio_flush", "ff_blend_rectangle", "ff_put_h264_qpel8_mc33_neon", "swr_get_class", "ffurl_open", "ff_mov_iso639_to_lang", "sws_init_context", "avpicture_free", "avcodec_copy_context", "ff_get_cpu_flags_aarch64", "av_dict_set_int", "av_parse_color", "av_packet_split_side_data", "ff_af_queue_init", "av_neighbor_key_timestamp", "av_buffersink_get_channel_layout", "ff_mdct_init_fixed", "ff_dct_end", "ff_h263_pred_dc", "av_fast_realloc", "ff_fill_rectangle", "swri_rematrix_init", "swri_audio_convert", "av_probe_input_buffer", "ff_gmc_c", "av_codec_is_encoder", "ff_mpv_frame_start", "ff_check_interrupt", "ff_getaddrinfo_a_start", "ff_avg_h264_qpel16_mc32_neon", "ff_getSwsFunc", "av_ripemd_init", "av_write_trailer", "ff_avg_h264_qpel8_mc20_neon", "av_add_q", "ff_find_unused_picture", "ff_put_no_rnd_qpel8_mc11_old_c", "ff_decode_pitch_lag", "ff_init_uni_ac_vlc", "av_check_info_add_item", "av_hash_update", "ff_lpc_init", "av_get_channel_layout_string", "ff_avg_qpel16_mc11_old_c", "ff_http_auth_handle_header", "ff_acelp_reorder_lsf", "ff_draw_round_to_sub", "ff_standardize_creation_time", "ff_id3v2_match", "av_version_info", "ff_convert_matrix", "ff_pre_estimate_p_frame_motion", "ff_mpeg4_decode_video_packet_header", "ff_alloc_extradata", "avresample_version", "ff_er_frame_end", "avpriv_toupper4", "av_stream_get_side_data", "av_opt_set_q", "av_fifo_alloc_array", "ff_aac_search_for_pred", "ff_af_queue_close", "sws_getGaussianVec", "avformat_flush", "avcodec_dct_alloc", "WebPPictureImportRGBX", "ff_network_init", "ff_sbr_apply", "av_bprint_get_buffer", "ff_avg_pixels8_neon", "avfilter_add_matrix", "ff_get_extradata", "av_aes_ctr_increment_iv", "av_get_bits_per_sample", "WebPCopyPixels", "ff_h264_idct8_dc_add_10_c", "avformat_alloc_output_context2", "ff_ps_ctx_init", "av_aes_ctr_free", "rgb48tobgr48_bswap", "av_packet_add_side_data", "ff_rtp_codec_id", "avfilter_graph_alloc_filter", "avcodec_parameters_from_context", "ff_mdct_init_fixed_32", "ff_h264_idct_add16_neon", "ff_sine_window_init", "avcodec_default_execute2", "ff_audio_data_combine", "avpriv_get_raw_pix_fmt_tags", "avfilter_init_str", "av_packet_free", "ff_h263_loop_filter", "ff_command_queue_pop", "av_codec_get_lowres", "ff_id3v2_read_dict", "ff_sdp_write_media", "ff_unlock_avcodec", "ff_all_samplerates", "ff_null_get_video_buffer", "ffurl_read", "avformat_license", "av_xtea_crypt", "ff_h264_decode_init_vlc", "av_get_sample_fmt_string", "ff_generate_avci_extradata", "ff_mjpeg_escape_FF", "ff_fft_init_aarch64", "ikcp_setoutput", "ff_aac_search_for_is", "av_rdft_calc", "av_hash_freep", "ff_mjpeg_encode_picture_trailer", "ff_put_no_rnd_qpel8_mc13_old_c", "ff_blockdsp_init", "ikcp_recv", "ff_udp_get_local_port", "ff_put_h264_qpel16_mc31_neon", "ff_mkv_stereo3d_conv", "ff_audio_data_init", "av_rdft_init", "ff_faanidct", "av_frame_clone", "avutil_license", "av_opt_eval_float", "avfilter_graph_parse_ptr", "ff_tadd_string_metadata", "avio_wl32", "ff_dot_product", "ff_acelp_lp_decode", "av_pix_fmt_swap_endianness", "avpriv_find_start_code", "ff_h264_idct_add16_12_c", "ff_amf_write_object_end", "ff_filter_frame", "ffio_free_dyn_buf", "ff_xvid_idct_init", "ff_mpeg4_workaround_bugs", "av_write_frame", "ff_tread_tag", "ff_h264_parse_ref_count", "ff_sws_init_output_funcs", "ff_socket_nonblock", "av_opt_set_video_rate", "ff_mdct15_init", "ff_put_bmp_header", "av_d2str", "ff_lzw_decode_close", "ff_openssl_deinit", "av_init_packet", "ff_mpeg4_pred_ac", "avcodec_alloc_context3", "avcodec_get_context_defaults3", "avfilter_link_free", "av_timegm", "ff_h264_idct_add_neon", "ff_nv21_to_bgra_neon", "av_hwframe_ctx_alloc", "ff_sws_alphablendaway", "ff_frame_pool_video_init", "ff_put_h264_qpel8_mc13_neon", "av_packet_merge_side_data", "swr_alloc_set_opts", "avfilter_next", "ff_rtp_get_codec_info", "av_packet_free_side_data", "WebPPictureImportBGRA", "ff_put_h264_qpel8_mc02_neon", "av_format_set_audio_codec", "ff_h264_idct_add16_8_c", "ff_fft_end_fixed", "ff_h264_idct_add8_12_c", "ff_h264_chroma_dc_dequant_idct_14_c", "av_get_sample_fmt_name", "ff_make_absolute_url", "ff_mov_read_esds", "ff_put_h264_qpel16_mc21_neon", "av_opt_get_sample_fmt", "ff_simple_idct_add_8", "av_image_copy_to_buffer", "ff_put_h264_qpel8_mc00_neon", "ff_graph_thread_init", "ff_parse_mpeg2_descriptor", "av_logx", "av_bprint_finalize", "ff_vector_fmul_scalar_neon", "av_div_i", "ff_mpeg4audio_get_config_gb", "av_opt_get_channel_layout", "av_expr_parse_and_eval", "avpicture_fill", "ff_mov_write_packet", "av_bitstream_filter_close", "ff_audio_data_copy", "av_codec_get_seek_preroll", "ff_sws_init_swscale_aarch64", "ff_parse_specific_params", "ff_dv_frame_profile", "ff_guess_coded_bitrate", "ff_put_no_rnd_qpel16_mc11_old_c", "ff_acelp_lsp2lpc", "avfilter_license", "av_opt_free", "ff_mpa_decode_header", "ff_thread_ref_frame", "av_freep", "ff_text_peek_r8", "ffurl_connect", "ff_mjpeg_encode_mb", "ff_crcEDB88320_update", "ff_write_chained", "ff_h264_idct8_add4_14_c", "ff_avg_qpel8_mc11_old_c", "ff_mjpeg_encode_picture_header", "av_format_get_data_codec", "av_codec_get_codec_descriptor", "av_buffer_alloc", "ff_get_buffer", "avio_get_str16be", "ff_h264_hl_decode_mb", "ff_put_qpel8_mc32_old_c", "avio_read_dir", "avpriv_open", "ff_h264_h_loop_filter_luma_neon", "ff_poll_frame", "ff_tls_deinit", "av_dv_codec_profile", "av_log2_i", "ff_mpv_decode_defaults", "av_strdup", "avresample_set_matrix", "ff_nv12_to_rgba_neon", "av_basename", "ff_mjpeg_encode_close", "avio_wb24", "ff_mov_close_hinting", "av_get_default_channel_layout", "ff_mov_cenc_write_stbl_atoms", "av_rescale_q_rnd", "ff_fdct248_islow_8", "ff_weighted_vector_sumf", "av_fft_init", "av_get_profile_name", "ff_inlink_evaluate_timeline_at_frame", "ff_imdct_half_c_fixed_32", "ff_avg_qpel8_mc12_old_c", "ff_h264_idct_add_8_c", "ff_rtp_chain_mux_open", "ff_avg_pixels16_y2_no_rnd_neon", "avcodec_decode_video2", "ff_dct_quantize_c", "av_packet_move_ref", "av_nearer_q", "swri_oldapi_conv_fltp_to_s16_2ch_neon", "ff_text_r8", "ff_thread_init", "ff_mpeg_update_thread_context", "avformat_open_input", "av_thread_message_queue_send", "av_mediacodec_release_buffer", "av_realloc_f", "avfilter_sub_matrix", "swresample_version", "ff_mpeg4_decode_picture_header", "ff_avg_h264_qpel16_mc11_neon", "av_check_info_free", "ff_put_qpel8_mc33_old_c", "swresample_license", "avformat_find_stream_info", "av_buffer_create", "av_mod_i", "ff_put_h264_qpel16_mc01_neon", "ff_frame_thread_encoder_init", "avfilter_config_links", "av_ll", "sws_scaleVec", "avfilter_get_by_name", "ff_mp4_read_dec_config_descr", "ff_tadd_bytes_metadata", "av_opt_get_q", "avcodec_align_dimensions2", "ff_mov_cenc_write_packet", "avcodec_receive_frame", "av_image_copy_plane", "av_get_picture_type_char", "ff_pred8x8_hor_neon", "ff_h264dsp_init", "av_pkt_dump_log2", "ff_thread_get_buffer", "ff_avg_h264_qpel8_mc22_neon", "ff_mpv_motion", "ff_text_pos", "ff_init_ff_sine_windows", "rgb15to24", "ff_dualinput_filter_frame", "avio_wl64", "ff_hscale_8_to_15_neon", "ff_h264_pred_direct_motion", "ff_mpv_encode_init", "av_rc4_alloc", "ff_hevc_annexb2mp4", "ff_subtitles_queue_clean", "avcodec_open2", "ff_h264_pred_init", "ff_network_close", "av_frame_free", "ff_pred16x16_128_dc_neon", "ff_adaptive_gain_control", "ff_init_desc_hscale", "ff_simple_idct_put_12", "av_format_get_probe_score", "avformat_getaddrinfo_a_init", "ff_yuv420p_to_abgr_neon", "av_md5_update", "ff_mpadsp_init_aarch64", "avcodec_get_class", "ikcp_flush", "ff_set_fixed_vector", "av_grow_packet", "av_format_set_data_codec", "av_guess_codec", "av_frame_set_best_effort_timestamp", "sws_freeFilter", "avcodec_get_chroma_sub_sample", "av_format_set_video_codec", "av_get_cpu_flags", "ff_nv12_to_abgr_neon", "av_check_hijack_init", "ff_h264chroma_init_aarch64", "ff_videodsp_init_aarch64", "ff_h264_queue_decode_slice", "ff_simple_idct48_add", "av_codec_get_codec_properties", "ff_init_vscale_pfn", "av_add_stable", "avpicture_alloc", "avfilter_register_all", "av_strnstr", "av_hash_init", "sws_getDefaultFilter"], "allstrings": ["+infinity", "+inf", "-infinity", "-inf", "+nan", "-nan", "put_bits", "aac_adtstoasc_init", "flush_put_bits", "aac_adtstoasc_filter", "Internal error, put_bits buffer too small\n", "libavcodec/aac_adtstoasc_bsf.c", "Error parsing AudioSpecificConfig extradata!\n", "Assertion %s failed at %s:%d\n", "s->buf_ptr < s->buf_end", "Error parsing ADTS frame header!\n", "Multiple RDBs per frame with CRC", "PCE-based channel configuration without PCE as first syntax element", "Input packet too small\n", "aac_adtstoasc", "put_bits", "quantize_and_encode_band_cost_NONE", "decode_prediction", "decode_tns", "apply_dependent_coupling", "che_configure", "decode_channel_map", "get_che", "spectral_to_sample", "decode_pce", "decode_audio_specific_config_gb", "decode_eld_specific_config", "latm_decode_audio_specific_config", "decode_audio_specific_config", "aac_decode_init", "decode_band_types", "decode_scalefactors", "decode_ics", "decode_spectrum_and_dequant", "decode_cpe", "aac_decode_er_frame", "aac_decode_frame_int", "@skip_data_stream_element", "decode_extension_payload", "decode_fill", "read_audio_mux_element", "latm_decode_frame", "Reserved bit set.\n", "AAC LD is only defined for ONLY_LONG_SEQUENCE but window sequence %d found.\n", "Invalid Predictor Reset Group.\n", "Prediction is not allowed in AAC-LC.\n", "LTP in ER AAC LD not yet implemented.\n", "Number of scalefactor bands in group (%d) exceeds limit (%d).\n", "TNS filter order %d is greater than maximum %d.\n", "libavcodec/aacdec.c", "Dependent coupling is not supported together with LTP\n", "Too large remapped id", "Too many channels\n", "invalid default channel configuration (%d)\n", "Assuming an incorrectly encoded 7.1 channel layout instead of a spec-compliant 7.1(wide) layout, use -strict %d to decode according to the specification instead.\n", "mono with CPE\n", "stereo with SCE\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to LFE[0]\n", "This stream seems to incorrectly report its last channel as %s[%d], mapping to SCE[1]\n", "ChannelElement %d.%d missing \n", "Sample rate index in program config element does not match the sample rate index configured by the container.\n", "decode_pce: Input buffer exhausted before END element found\n", "960/120 MDCT window", "AAC data resilience (flags %x)", "epConfig %d", "SBR+", "invalid sampling rate index %d\n", "invalid low delay sampling rate index %d\n", "Low Delay SBR", "Audio object type %s%d", "audio config changed\n", "initializing latmctx\n", "Audio specific config size is invalid\n", "invalid band type\n", "decode_band_types: Input buffer exhausted before END element found\n", "Number of bands (%d) exceeds limit (%d).\n", "If you heard an audible artifact, there may be a bug in the decoder. Clipped intensity stereo position (%d -> %d)", "If you heard an audible artifact, there may be a bug in the decoder. Clipped noise gain (%d -> %d)", "Scalefactor (%d) out of range.\n", "Pulse tool not allowed in eight short sequence.\n", "error in spectral data, ESC overflow\n", "Pulse data corrupt or invalid.\n", "ms_present = 3 is reserved.\n", "Unknown ER channel configuration %d", "channel element %d.%d is not allocated\n", "no frame data found\n", "More than one AAC RDB per ADTS frame", "Error decoding AAC frame header.\n", "Elem type:%x id:%x\n", "skip_data_stream_element: Input buffer exhausted before END element found\n", "Not evaluating a further program_config_element as this construct is dubious at best.\n", "TYPE_FIL: Input buffer exhausted before END element found\n", "extension type: %d len:%d\n", "SBR was found before the first channel element.\n", "SBR signaled to be not-present but was found in the bitstream.\n", "Implicit SBR was found with a first occurrence after the first frame.\n", "FILL:%s\n", "libfaac %d.%d", "Multiple programs", "Multiple layers", "no decoder config found\n", "incomplete frame\n", "frame length mismatch %d << %d\n", "ADTS header detected, probably as result of configuration misparsing\n", "aac_latm", "AAC decoder", "dual_mono_mode", "Select the channel to decode for dual mono", "autoselection", "Select Main/Left channel", "Select Sub/Right channel", "both", "Select both channels", "aac_encode_end", "flush_put_bits", "aac_encode_init", "encode_scale_factors", "libavcodec/aacenc.c", "Qavg: %.3f\n", "Unsupported number of channels: %d\n", "Unsupported sample rate %d\n", "Too many bits %f > %d per frame requested, clamping to max\n", "Main prediction unavailable in the \"mpeg2_aac_low\" profile\n", "LTP prediction unavailable in the \"mpeg2_aac_low\" profile\n", "PNS unavailable in the \"mpeg2_aac_low\" profile, turning off\n", "Main prediction unavailable in the \"aac_ltp\" profile\n", "LTP prediction unavailable in the \"aac_main\" profile\n", "Chainging profile to \"aac_ltp\"\n", "Chainging profile to \"aac_main\"\n", "The ANMR coder is considered experimental, add -strict -2 to enable!\n", "The LPT profile requires experimental compliance, add -strict -2 to enable!\n", "Cannot allocate memory.\n", "Lavc57.89.100", "Input contains (near) NaN/+-Inf\n", "diff >= 0 && diff <= 120", "AAC encoder", "aac_coder", "Coding algorithm", "anmr", "ANMR method", "twoloop", "Two loop searching method", "Constant quantizer", "aac_ms", "Force M/S stereo coding", "aac_is", "Intensity stereo coding", "aac_pns", "Perceptual noise substitution", "aac_tns", "Temporal noise shaping", "aac_ltp", "Long term prediction", "aac_pred", "AAC-Main prediction", "put_bits", "quantize_and_encode_band_cost_NONE", "put_bits", "quantize_and_encode_band_cost_NONE", "quantize_and_encode_band_cost_NONE", "put_bits", "ff_ps_read_data", "read_iid_data", "read_icc_data", "libavcodec/aacps.c", "iid_mode %d is reserved.\n", "icc_mode %d is reserved.\n", "illegal iid\n", "illegal icc\n", "ps extension overflow %d\n", "iid_par invalid\n", "icc_par invalid\n", "Expected to read %d PS bits actually read %d.\n", "check_n_master", "read_sbr_envelope", "read_sbr_noise", "read_sbr_grid", "sbr_make_f_derived", "sbr_hf_calc_npatches", "read_sbr_data", "read_sbr_extension", "ff_decode_sbr_extension", "sbr_reset", "ff_sbr_apply", "sbr_mapping", "6<5?", "libavcodec/aacsbr_template.c", "Invalid n_master: %d\n", "Invalid bitstream, crossover band index beyond array bounds: %d\n", "env_facs_q %d is invalid\n", "noise_facs_q %d is invalid\n", "Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n", "Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n", "bs_pointer >= 0", "Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n", "Not strictly monotone time borders\n", "Unsupported sample rate for SBR: %d\n", "Invalid bs_stop_freq: %d\n", "Invalid bitstream, too many QMF subbands: %d\n", "Invalid num_bands_0: %d\n", "Invalid vDk0[%d]: %d\n", "Invalid vDk1[%d]: %d\n", "Stop frequency border too high: %d\n", "Start frequency border too high: %d\n", "Too many noise floor scale factors: %d\n", "patch construction failed\n", "Too many patches: %d\n", "Invalid bitstream - cannot apply SBR to element type %d\n", "Parametric Stereo signaled to be not-present but was found in the bitstream.\n", "Reserved SBR extensions", "SBR Extension over read.\n", "Expected to read %d SBR bytes actually read %d.\n", "SBR reset failed. Switching SBR to pure upsampling mode.\n", "element type mismatch %d != %d\n", "No quantized data read for sbr_dequant.\n", "libavcodec/aacsbr.c", "envelope scalefactor overflow in dequant\n", "temp1 <= 1E20", "sbr->data[ch].bs_num_env > 0", "ERROR : no subband found for frequency %d\n", "kx != f_table{high,low}[0]. Derived frequency tables were not regenerated.\n", "!!&((())%%%\"\"", "))/113//+++((", "ff_acelp_interpolate", "libavcodec/acelp_filters.c", "overflow that would need clipping in ff_acelp_interpolate()\n", "ff_set_fixed_vector", "x < size", "amrnb_decode_frame", "multi-channel AMR", "libavcodec/amrnbdec.c", "Corrupt bitstream\n", "dtx mode", "Note: libopencore_amrnb supports dtx\n", "The file is corrupted, pitch_lag = 0 is not allowed\n", "amrnb", "8CRoo", "libavcodec/amrwbdec.c", "Invalid mode %d\n", "Frame too small (%d bytes). Truncated file?\n", "Encountered a bad or corrupted frame\n", "SID mode", "amrwb", "ff_af_queue_close", "ff_af_queue_add", "ff_af_queue_remove", "libavcodec/audio_frame_queue.c", "%d frames left in the queue on closing\n", "Queue input is backward in time\n", "Trying to remove %d samples, but the queue is empty\n", "!afq->frame_count", "afq->remaining_samples == afq->remaining_delay", "Trying to remove %d more samples than there are in the queue\n", "AVDCT", "DCT algorithm", "autoselect a good one", "fastint", "fast integer (experimental / for debugging)", "accurate integer", "experimental / for debugging", "altivec", "faan", "floating point AAN DCT (experimental / for debugging)", "select IDCT implementation", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "floating point AAN IDCT (experimental / for debugging)", "simpleauto", "bits_per_sample", "av_grow_packet", "av_packet_split_side_data", "av_packet_merge_side_data", "libavcodec/avpacket.c", "(unsigned)pkt->size <= 2147483647 - 32", "Palette", "New Extradata", "Param Change", "H263 MB Info", "Replay Gain", "Display Matrix", "Stereo 3D", "Audio Service Type", "Skip Samples", "JP Dual Mono", "Strings Metadata", "Subtitle Position", "Matroska BlockAdditional", "WebVTT ID", "WebVTT Settings", "Metadata Update", "MPEGTS Stream ID", "Mastering display metadata", "Spherical Mapping", "size<=2147483647 - 5 && p - pkt->data >= size", "p-pkt->data == pkt->size", "put_bits", "build_table", "avpriv_copy_bits", "ff_init_vlc_sparse", "libavcodec/bitstream.c", "incorrect codes\n", "length <= put_bits_left(pb)", "nb_codes + 1 <= (sizeof(localbuf) / sizeof((localbuf)[0]))", "symbols_size <= 2 || !symbols", "Too long VLC (%d) in init_vlc\n", "Invalid code %x for %d in init_vlc\n", "needed %d had %d\n", "ret >= 0", "private_spspps_buf", "bmp_decode_frame", "bytestream2_init", "libavcodec/bmp.c", "buf size too small (%d)\n", "bad magic number\n", "not enough data (%d < %u), trying to decode anyway\n", "invalid header size %u\n", "Declared file size is less than header size (%u < %u)\n", "Information header size %u", "invalid BMP header\n", "BMP coding %d not supported\n", "Failed to set dimensions %d %d\n", "Unknown bitfields %0X %0X %0X\n", "Unknown palette for %u-colour BMP\n", "depth %u not supported\n", "unsupported pixel format\n", "not enough data (%d < %d)\n", "data size too small, assuming missing line alignment\n", "Incorrect number of colors - %X for bitdepth %u\n", "palette doesn't fit in packet\n", "buf_size >= 0", "BMP decoder is broken\n", "av_bsf_init", "av_bsf_send_packet", "bsf_list(", "unknown", "libavcodec/bsf.c", "Codec '%s' (%d) is not supported by the bitstream filter '%s'. Supported codecs are: ", "%s (%d) ", "pkt->data || pkt->side_data", "A non-NULL packet sent after an EOF.\n", "bsf_list", "AVBSFContext", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpegb", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "8bps", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "012v", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "tdsc", "vc1image", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "qdmc", "celt", "g723_1", "dss_sp", "g729", "8svx_exp", "8svx_fib", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "application/octet-stream", "application/vnd.ms-opentype", "application/x-truetype-font", "application/x-font", "image/png", "image/x-xwindowdump", "image/x-xpixmap", "image/x-xbitmap", "image/webp", "image/tiff", "image/x-targa", "image/x-tga", "image/x-pcx", "image/x-portable-pixmap", "image/gif", "image/jp2", "image/x-ms-bmp", "image/jpeg", "set_mv_strides", "guess_dc", "ff_er_add_slice", "ff_er_frame_end", "guess_mv", "libavcodec/error_resilience.c", "s->quarter_sample", "guess_dc() is out of memory\n", "internal error, slice end before start\n", "ignoring last missing slice\n", "Cannot use previous picture in error concealment\n", "Cannot use next picture in error concealment\n", "Warning MVs not available\n", "%2X ", "concealing %d DC, %d AC, %d MV errors in %c frame\n", "s->avctx->codec_id != AV_CODEC_ID_H264", "next_blocklist_length <= mb_height * mb_width", "GPSVersionID", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "ImageWidth", "exif_add_metadata", "0x%04X", "libavcodec/exif.c", "Invalid TIFF tag type 0 found for %s with size %d\n", "TIFF tag type (%u)", "extract_extradata", "remove", "remove the extradata from the bitstream", "\f\f\f\f", "ff_jni_get_env", "ff_jni_jstring_to_utf_chars", "ff_jni_utf_chars_to_jstring", "ff_jni_exception_get_summary", "ff_jni_exception_check", "ff_jni_reset_jfields", "ff_jni_init_jfields", "libavcodec/ffjni.c", "No Java virtual machine has been registered\n", "Failed to attach the JNI environment to the current thread\n", "The specified JNI version is not supported\n", "Failed to get the JNI environment attached to this thread\n", "String.getStringUTFChars() threw an exception\n", "String.releaseStringUTFChars() threw an exception\n", "NewStringUTF() threw an exception\n", "Could not find Throwable class\n", "Could not find Throwable class's class\n", "getName", "()Ljava/lang/String;", "Could not find method Class.getName()\n", "Class.getName() threw an exception\n", "getMessage", "Could not find method java/lang/Throwable.getMessage()\n", "Throwable.getMessage() threw an exception\n", "%s: %s", "%s occurred", "Exception: %s", "Could not retrieve exception name and message\n", "Exception occurred", "Unknown JNI field type\n", "ff_flac_decode_frame_header", "ff_flac_is_extradata_valid", "ff_flac_parse_streaminfo", "libavcodec/flac.c", "invalid sync code\n", "invalid channel mode: %d\n", "invalid sample size code (%d)\n", "broken stream, invalid padding\n", "sample/frame number invalid; utf8 fscked\n", "reserved blocksize code: 0\n", "illegal sample rate code %d\n", "header crc mismatch\n", "extradata NULL or too small.\n", "extradata contains %d bytes too many.\n", "extradata too small.\n", "invalid max blocksize: %d\n", "invalid bps: %d\n", "flac_fifo_read_wrap", "flac_parse_init", "check_header_fi_mismatch", "check_header_mismatch", "find_headers_search_validate", "flac_parse", "libavcodec/flac_parser.c", "couldn't reallocate wrap buffer of size %d", "couldn't allocate fifo_buf\n", "sample rate change detected in adjacent frames\n", "bits per sample change detected in adjacent frames\n", "blocking strategy change detected in adjacent frames\n", "number of channels change detected in adjacent frames\n", "sample/frame number mismatch in adjacent frames\n", "crc check failed from offset %i (frame %ld) to %i (frame %ld)\n", "couldn't allocate FLACHeaderMarker\n", "couldn't allocate link_penalty\n", "dropping low score %i frame header from offset %i to %i\n", "couldn't reallocate buffer of size %td\n", "find_new_headers couldn't allocate FLAC header\n", "Junk frame till offset %i\n", "allocate_buffers", "decode_residuals", "flac_decode_frame", "decode_frame", "dump_headers", "decode_subframe", "decode_subframe_fixed", "decode_subframe_lpc", "libavcodec/flacdec.c", "s->flac_stream_info.max_blocksize", "illegal residual coding method %d\n", "invalid rice order: %i blocksize %i\n", "invalid predictor order: %i > %i\n", "invalid residual\n", "skipping flac header packet 1\n", "skipping vorbis comment\n", "invalid frame header\n", "bps not found in STREAMINFO or frame header\n", "switching bps mid-stream is not supported\n", "blocksize %d > %d\n", "sample rate not found in STREAMINFO or frame header\n", "  Max Blocksize: %d\n", "  Max Framesize: %d\n", "  Samplerate: %d\n", "  Channels: %d\n", "  Bits: %d\n", "invalid subframe padding\n", "Invalid number of wasted bits > available bits (%d) - left=%d\n", "Decorrelated bit depth > 32", "illegal pred order %d\n", "invalid coeff precision\n", "qlevel %d not supported, maybe buggy stream\n", "invalid coding type\n", "decode_frame() failed\n", "CRC error at PTS %ld\n", "overread: %d\n", "underread: %d orig size: %d\n", "invalid header\n", "FLAC decoder", "use_buggy_lpc", "emulate old buggy lavc behavior", "000$\f", "ff_flv_decode_picture_header", "Bad picture start code\n", "Bad picture format\n", "%c esc_type:%d, qp:%d num:%d\n", "ff_frame_thread_encoder_init", "libavcodec/frame_thread_encoder.c", "Forcing thread count to 1 for MJPEG encoding, use -thread_type slice or a constant quantizer if you want to use multiple cpu cores\n", "MJPEG CBR encoding works badly with frame multi-threading, consider using -threads 1, -thread_type slice or a constant quantizer.\n", "context", "non_deterministic", "!avctx->internal->frame_thread_encoder", "!thread_avctx->internal->frame_thread_encoder", "ff_frame_thread_encoder_init failed\n", "Forcing thread count to 1 for huffyuv encoding with first pass or context 1\n", "put_bits", "gif_image_write_image", "gif_encode_init", "flush_put_bits", "libavcodec/gif.c", "%dx%d image at pos (%d;%d) [area:%dx%d]\n", "No available color, can not use transparency\n", "GIF does not support resolutions above 65535x65535\n", "avctx->pix_fmt == AV_PIX_FMT_PAL8", "GIF encoder", "gifflags", "set GIF flags", "enable picture offsetting", "transdiff", "enable transparency detection between frames", "bytestream2_init", "GIF87a", "GIF89a", "gif_decode_frame", "gif_parse_next_image", "gif_read_image", "libavcodec/gifdec.c", "cannot decode frame without keyframe\n", "code=%02x '%c'\n", "picture doesn't have either global or local palette.\n", "Invalid image width.\n", "Invalid image height.\n", "Image too wide by %d, truncating.\n", "Image too high by %d, truncating.\n", "LZW init failed\n", "LZW decode failed\n", "gif decoder", "trans_color", "color value (ARGB) that is used instead of transparent color", "\u000b\r\r\r", "ff_h263_decode_init", "decode_slice", "ff_h263_decode_frame", "Unsupported codec %d\n", "L263", "S263", "Slice mismatch at MB: %d\n", "Error at MB: %d\n", "discarding %d junk bits at end, next would be %X\n", "overreading %d bits\n", "slice end not reached but screenspace end (%d left %06X, score= %d)\n", "this codec does not support truncated bitstreams\n", "Discarding excessive bitstream in packed xvid\n", "Reverting picture dimensions change due to header decoding failure\n", "header damaged\n", "format change not supported\n", "GEOV", "GEOX", "get_nalsize", "ff_h2645_packet_split", "libavcodec/h2645_parse.c", "nal->skipped_bytes_pos_size >= nal->skipped_bytes", "libavcodec/h2645_parse.h", "Invalid NAL unit size (%d > %d).\n", "Exceeded next NALFF position, re-syncing.\n", "No start code is found.\n", "NALFF: Consumed only %d bytes instead of %d\n", "Invalid NAL unit %d, skipping.\n", "ff_h264_decode_mb_cabac", "libavcodec/h264_cabac.c", "overflow in decode_cabac_mb_mvd\n", "Reference %d >= %d\n", "gray chroma\n", "cabac decode of qscale diff failed at %d %d\n", "get_ue_golomb", "decode_residual", "ff_h264_decode_mb_cavlc", "Invalid UE golomb code\n", "libavcodec/h264_cavlc.c", "corrupted macroblock %d %d (total_coeff=%d)\n", "Invalid level prefix\n", "negative number of zero coeffs at %d %d\n", "offset == (sizeof(coeff_token_vlc_tables) / sizeof((coeff_token_vlc_tables)[0]))", "mb_skip_run %d is invalid\n", "mb_type %d in %c slice too large at %d %d\n", "Not enough data for an intra PCM block.\n", "B sub_mb_type %u out of range at %d %d\n", "P sub_mb_type %u out of range at %d %d\n", "ref %u overflow\n", "cbp too large (%u) at %d %d\n", "dquant out of range (%d) at %d %d\n", "get_scale_factor", "ff_h264_direct_ref_list_init", "pocdiff overflow\n", "libavcodec/h264_direct.c", "pocdiff0 overflow\n", "cur->mbaff == (h)->mb_aff_frame", "co located POCs unavailable\n", "h264_mp4toannexb_init", "h264_extradata_to_annexb", "libavcodec/h264_mp4toannexb_bsf.c", "SPS not present in the stream, nor in AVCC, stream may be unreadable\n", "PPS not present in the stream, nor in AVCC, stream may be unreadable\n", "The input looks like it is Annex B already\n", "Too big extradata size, corrupted stream or invalid MP4/AVCC bitstream\n", "Packet header is not contained in global extradata, corrupted stream or invalid MP4/AVCC bitstream\n", "Warning: SPS NALU missing or invalid. The resulting stream may not play.\n", "Warning: PPS NALU missing or invalid. The resulting stream may not play.\n", "Invalid extradata size: %d\n", "h264_mp4toannexb", "decode_extradata_ps", "get_ue_golomb", "decode_extradata_ps_mp4", "bytestream2_init", "bytestream2_init_writer", "ff_h264_pred_weight_table", "ff_h264_check_intra4x4_pred_mode", "ff_h264_check_intra_pred_mode", "ff_h264_parse_ref_count", "ff_h264_decode_extradata", "libavcodec/h264_parse.c", "Ignoring NAL type %d in extradata\n", "SPS decoding failure, trying again after escaping the NAL\n", "luma_log2_weight_denom %d is out of range\n", "chroma_log2_weight_denom %d is out of range\n", "Out of range weight\n", "top block unavailable for requested intra mode %d\n", "left block unavailable for requested intra4x4 mode %d\n", "out of range intra chroma pred mode\n", "top block unavailable for requested intra mode\n", "left block unavailable for requested intra mode\n", "reference overflow %u > %u or %u > %u\n", "avcC %d too short\n", "Decoding sps %d from avcC failed\n", "Decoding pps %d from avcC failed\n", "h264_find_frame_end", "scan_mmco_reset", "get_nalsize", "parse_nal_units", "libavcodec/h264_parser.c", "AVC-parser: nal length size invalid\n", "AVC-parser: nal size %d remaining %d\n", "illegal reordering_of_pic_nums_idc %d\n", "reference count %d overflow\n", "illegal memory management control operation %d\n", "Q264", "pps_id %u out of range\n", "non-existing PPS %u referenced\n", "non-existing SPS %u referenced\n", "ff_h264_ref_picture", "ff_h264_field_end", "libavcodec/h264_picture.c", "!dst->f->buf[0]", "src->f->buf[0]", "src->tf.f == src->f", "hardware accelerator failed to decode picture\n", "decode_scaling_list", "decode_hrd_parameters", "ff_h264_decode_seq_parameter_set", "decode_vui_parameters", "Gray", "ff_h264_decode_picture_parameter_set", "more_rbsp_data_in_pps", "libavcodec/h264_ps.c", "delta scale %d is invalid\n", "cpb_count %d invalid\n", "PIC-AFF", "MB-AFF", "Truncating likely oversized SPS\n", "sps_id %u out of range\n", "chroma_format_idc %u", "separate color planes are not supported\n", "Different chroma and luma bit depth", "illegal bit depth value (%d, %d)\n", "log2_max_frame_num_minus4 out of range (0-12): %d\n", "log2_max_poc_lsb (%d) is out of range\n", "poc_cycle_length overflow %d\n", "illegal POC type %d\n", "too many reference frames %d\n", "mb_width/height overflow\n", "discarding sps cropping, original values are l:%d r:%d t:%d b:%d\n", "Reducing left cropping to %d chroma samples to preserve alignment.\n", "crop values invalid %d %d %d %d / %d %d\n", "illegal aspect ratio\n", "Truncated VUI\n", "time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n", "Clipping illegal num_reorder_frames %d\n", "Overread %s by %d bits\n", "sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %d/%d b%d reo:%d\n", "CABAC", "CAVLC", "LPAR", "CONSTR", "REDU", "8x8DCT", "Truncating likely oversized PPS (%zu > %zu)\n", "Invalid luma bit depth=%d\n", "Unimplemented luma bit depth=%d", "FMO not supported\n", "reference overflow (pps)\n", "Current profile doesn't provide more RBSP data in PPS, skipping\n", "pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n", "find_short", "print_short_term", "print_long_term", "remove_short", "build_def_list", "h264_initialise_ref_list", "ff_h264_build_ref_list", "ff_h264_decode_ref_pic_list_reordering", "ff_h264_execute_ref_pic_marking", "ff_h264_decode_ref_pic_marking", "libavcodec/h264_refs.c", "%d %d %p\n", "short term list:\n", "%u fn:%d poc:%d %p\n", "long term list:\n", "remove short %d count %d\n", "index < def_len", "len <= 32", "Discarding mismatching reference\n", "abs_diff_pic_num overflow\n", "long_term_pic_idx overflow\n", "Missing reference picture, default is %d\n", "av_buffer_get_ref_count(sl->ref_list[list][index].parent->f->buf[0]) > 0", "reference picture missing during reorder\n", "reference count overflow\n", "illegal modification_of_pic_nums_idc %u\n", "no mmco here\n", "mmco:%d %d %d\n", "mmco: unref short failure\n", "mmco: unref short %d count %d\n", "mmco: unref long failure\n", "mmco: cannot assign current picture to short and long at the same time\n", "mmco: cannot assign current picture to 2 long term references\n", "!h->cur_pic_ptr->long_ref", "illegal short term reference assignment for second field in complementary field pair (first field is long term)\n", "illegal short term buffer state detected\n", "number of reference frames (%d+%d) exceeds max (%d; probably corrupt input), discarding one\n", "illegal long ref in memory management control operation %d\n", "ff_h264_sei_decode", "decode_picture_timing", "decode_unregistered_user_data", "decode_buffering_period", "libavcodec/h264_sei.c", "SEI type %d size %d truncated at %d\n", "SPS unavailable in decode_picture_timing\n", "ct_type:%X pic_struct:%d\n", "x264 - core %d", "x264 - core 0000", "user data:\"%s\"\n", "non-existing SPS %d referenced in buffering period\n", "unknown SEI type %d\n", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "\t\t\u000b\r", "h264_slice_header_init", "get_pixel_format", "decode_slice", "get_ue_golomb", "h264_frame_start", "alloc_picture", "ff_h264_update_thread_context", "ff_h264_execute_decode_slices", "h264_slice_header_parse", "ff_h264_queue_decode_slice", "init_dimensions", "h264_init_ps", "h264_field_start", "h264_select_output_frame", "h264_slice_init", "libavcodec/h264_slice.c", "Could not allocate memory\n", "VDPAU decoding does not support video colorspace.\n", "Unsupported bit depth %d\n", "context_init() failed.\n", "h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3)", "Slice overlaps with next at %d\n", "bytestream overread %td\n", "error while decoding MB %d %d, bytestream %td\n", "error while decoding MB %d %d\n", "Attempt to start a frame outside SETUP state\n", "!pic->f->data[0]", "!pic->hwaccel_picture_private", "no frame buffer available\n", "h264_slice_header_init() failed", "context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height", " fix", " IDR", "TEMP", "SPAT", "!h->setup_finished", "slice type %d too large at %d\n", "A non-intra slice in an IDR NAL unit.\n", "Frame num change from %d to %d\n", "This stream was generated by a broken encoder, invalid 8x8 inference\n", "cabac_init_idc %u overflow\n", "QP %u out of range\n", "deblocking_filter_idc %u out of range\n", "deblocking filter parameters %d %d out of range\n", "Too many fields\n", "Broken frame packetizing\n", "sl == h->slice_ctx", "PPS changed between slices\n", "SPS changed in the middle of the frame\n", "sps->crop_right + sps->crop_left < (unsigned)h->width", "sps->crop_top + sps->crop_bottom < (unsigned)h->height", "changing width %d -> %d / height %d -> %d on slice %d\n", "Reinit context to %dx%d, pix_fmt: %s\n", "h264_slice_header_init() failed\n", "h->cur_pic_ptr", "h->cur_pic_ptr->f->buf[0]", "Invalid field mode combination %d/%d\n", "Found reference and non-reference fields in the same frame, which", "Frame num gap %d %d\n", "Invalid POC %d<%d\n", "Increasing reorder buffer to %d\n", "pics <= 16", "no picture %s\n", "Changing field mode (%d -> %d) between slices is not allowed\n", "unset cur_pic_ptr on slice %d\n", "Invalid mix of IDR and non-IDR slices\n", "first_mb_in_slice overflow\n", "Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n", "slice:%d %s mb:%d %c%s%s frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n", "h264_er_decode_mb", "finalize_frame", "decode_nal_units", "get_last_needed_nal", "debug_green_metadata", "h264_decode_frame", "ff_h264_slice_context_init", "ff_h264_decode_init", "libavcodec/h264dec.c", "Reference not available for error concealing\n", "Reference invalid\n", "Duplicating field %d to fill missing\n", "stereo_mode", "Error splitting the input into NAL units.\n", "Invalid zero-sized VCL NAL unit\n", "Invalid inter IDR frame\n", "invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n", "data partitioning", "Green Metadata Info SEI message\n", "  green_metadata_type: %d\n", "  green_metadata_period_type: %d\n", "  green_metadata_num_seconds: %d\n", "  green_metadata_num_pictures: %d\n", "  SEI GREEN Complexity Metrics: %f %f %f %f\n", "  xsd_metric_type: %d\n", "  xsd_metric_value: %f\n", "SPS decoding failure, trying again with the complete NAL\n", "Unknown NAL code: %d (%d bits)\n", "decode_slice_header error\n", "no frame!\n", "pict->buf[0] || !*got_frame", "pthread_once has failed.", "Error resilience with slice threads is enabled. It is unsafe and unsupported and may crash. Use it at your own risk\n", "H264 Decoder", "is_avc", "is avc", "nal_length_size", "enable_er", "Enable error resilience on damaged frames (unsafe)", "ff_h264dsp_init", "libavcodec/h264dsp.c", "bit_depth<=8", "ff_h264_pred_init", "libavcodec/h264pred.c", "hevc_mp4toannexb_init", "hevc_extradata_to_annexb", "libavcodec/hevc_mp4toannexb_bsf.c", "Invalid NAL unit type in extradata: %d\n", "No parameter sets in the extradata\n", "hevc_mp4toannexb", "parse_nal_units", "hevc_parse_slice_header", "libavcodec/hevc_parser.c", "Invalid NAL unit: %d\n", "PPS id out of range: %d\n", "decode_profile_tier_level", "scaling_list_data", "remove_sps", "decode_hrd", "ff_hevc_decode_short_term_rps", "ff_hevc_decode_nal_vps", "ff_hevc_parse_sps", "map_pixel_format", "decode_vui", "ff_hevc_decode_nal_sps", "ff_hevc_decode_nal_pps", "pps_range_extensions", "libavcodec/hevc_ps.c", "Main profile bitstream\n", "Main 10 profile bitstream\n", "Main Still Picture profile bitstream\n", "Range Extension profile bitstream\n", "Unknown HEVC profile: %d\n", "PTL information too short\n", "PTL information for sublayer %i too short\n", "Not enough data for sublayer %i level_idc\n", "Invalid delta in scaling list data: %d.\n", "!(s->sps_list[id] && s->sps == (HEVCSPS*)s->sps_list[id]->data)", "nb_cpb %d invalid\n", "Invalid value of delta_idx in slice header RPS: %d > %d.\n", "Invalid value of abs_delta_rps: %d\n", "Invalid num_delta_pocs: %d\n", "Too many refs in a short term RPS.\n", "Decoding VPS\n", "Truncating likely oversized VPS (%td > %zu)\n", "VPS id out of range: %d\n", "vps_reserved_three_2bits is not three\n", "vps_reserved_ffff_16bits is not 0xffff\n", "vps_max_sub_layers out of range: %d\n", "vps_max_dec_pic_buffering_minus1 out of range: %d\n", "vps_max_num_reorder_pics out of range: %d\n", "too many layer_id_included_flags\n", "vps_num_hrd_parameters %d is invalid\n", "Overread VPS by %d bits\n", "VPS %d does not exist\n", "sps_max_sub_layers out of range: %d\n", "SPS id out of range: %d\n", "chroma_format_idc %d is invalid\n", "discarding sps conformance window, original values are l:%u r:%u t:%u b:%u\n", "Luma bit depth (%d) is different from chroma bit depth (%d), this is unsupported.\n", "The following bit-depths are currently specified: 8, 9, 10 and 12 bits, chroma_format_idc is %d, depth is %d\n", "log2_max_pic_order_cnt_lsb_minus4 out range: %d\n", "sps_max_dec_pic_buffering_minus1 out of range: %d\n", "sps_max_num_reorder_pics out of range: %d\n", "Invalid value %d for log2_min_cb_size", "Invalid value %d for log2_diff_max_min_coding_block_size", "Invalid value for log2_min_tb_size", "Invalid value %d for log2_diff_max_min_transform_block_size", "PCM bit depth (%d) is greater than normal bit depth (%d)\n", "Too many short term RPS: %d.\n", "num_long_term_ref_pics_sps %d is out of range.\n", "Decoding VUI\n", "Unknown SAR index: %u.\n", "Invalid default display window\n", "discarding vui default display window, original values are l:%u r:%u t:%u b:%u\n", "Strange VUI timing information, retrying...\n", "Retry got %u/%u fps\n", "extended_precision_processing_flag not yet implemented\n", "high_precision_offsets_enabled_flag not yet implemented\n", "cabac_bypass_alignment_enabled_flag not yet implemented\n", "Reducing left output window to %d chroma samples to preserve alignment.\n", "Invalid visible frame dimensions: %dx%d.\n", "Displaying the whole video surface.\n", "CTB size out of range: 2^%d\n", "log2_ctb_size %d differs from the bounds of any known profile\n", "log2_ctb_size %d", "Invalid coded frame dimensions.\n", "max_transform_hierarchy_depth_inter out of range: %d\n", "max_transform_hierarchy_depth_intra out of range: %d\n", "max transform block size out of range: %d\n", "Overread SPS by %d bits\n", "Decoding SPS\n", "Truncating likely oversized SPS (%td > %zu)\n", "Parsed SPS: id %d; coded wxh: %dx%d; cropped wxh: %dx%d; pix_fmt: %s.\n", "Decoding PPS\n", "Truncating likely oversized PPS (%td > %zu)\n", "SPS %u does not exist.\n", "diff_cu_qp_delta_depth %d is invalid\n", "pps_cb_qp_offset out of range: %d\n", "pps_cr_qp_offset out of range: %d\n", "num_tile_columns_minus1 out of range: %d\n", "num_tile_rows_minus1 out of range: %d\n", "Invalid tile widths.\n", "Invalid tile heights.\n", "pps_beta_offset_div2 out of range: %d\n", "pps_tc_offset_div2 out of range: %d\n", "log2_parallel_merge_level_minus2 out of range: %d\n", "chroma_qp_offset_list_len_minus1 shall be in the range [0, 5].\n", "cb_qp_offset_list not tested yet.\n", "Overread PPS by %d bits\n", "ff_init_scantable_permutation", "libavcodec/idctdsp.c", "Internal error, IDCT permutation not set\n", "butterworth_init_coeffs", "ff_iir_filter_init_coeffs", "biquad_init_coeffs", "libavcodec/iirfilter.c", "Butterworth filter currently only supports low-pass filter mode\n", "Butterworth filter currently only supports even filter orders\n", "Biquad filter currently only supports high-pass and low-pass filter modes\n", "Biquad filter must have order of 2\n", "filter type is not currently implemented\n", "avcodec_get_chroma_sub_sample", "libavcodec/imgconvert.c", "ff_intel_h263_decode_picture_header", "check_marker", "libavcodec/get_bits.h", "Marker bit missing at %d of %d %s\n", "after picture_number", "Bad H.263 id\n", "Intel H.263 free format not supported\n", "Wrong Intel H.263 format\n", "Bad value for reserved field\n", "Invalid marker\n", "in dimensions", "Invalid aspect ratio.\n", "h263_decode_block", "check_marker", "ff_h263_show_pict_info", "ff_h263_decode_mb", "ff_h263_decode_picture_header", "libavcodec/ituh263dec.c", "illegal dc %d at %d %d\n", "illegal ac vlc code at %dx%d\n", "run overflow at %dx%d i:%d\n", "Huge DMV", " UMV", " LONG", " AIC", " AIV", " LOOP", "qp:%d %c size:%d rnd:%d%s%s%s%s%s%s%s%s%s %d/%d\n", "before MBA", "after SQUANT", "after MBA", "b mb_type damaged at %d %d\n", "b cbpy damaged at %d %d\n", "I cbpc damaged at %d %d\n", "I cbpy damaged at %d %d\n", "U263", "Header looks like RTP instead of H.263\n", "in PTYPE", "H.263 SAC not supported\n", "Syntax-based Arithmetic Coding (SAC) not supported\n", "Reference Picture Selection not supported\n", "Independent Segment Decoding not supported\n", "Bad UFEP type (%d)\n", "zero framerate\n", "rectangular slices not supported\n", "unordered slices not supported\n", "SEPB1", "SEPB2", " %5d", "ZYGO", "av_jni_set_java_vm", "libavcodec/jni.c", "A Java virtual machine has already been set", "ff_kbd_window_init", "libavcodec/kbdwin.c", "n <= 1024", "libwebp_encode_frame", "WebPEncode() failed with error: %d\n", "libwebp", "compression_level", "global_quality", "Use lossless mode", "Configuration preset", "do not use a preset", "default", "default preset", "digital picture, like portrait, inner shot", "photo", "outdoor photograph, with natural lighting", "drawing", "hand or line drawing, with high-contrast details", "small-sized colorful images", "text-like", "cr_threshold", "Conditional replenishment threshold", "cr_size", "Conditional replenishment block size", "Quality", "ff_libwebp_encode_init_common", "ff_libwebp_get_frame", "Lossless", "Lossy", "libavcodec/libwebpenc_common.c", "invalid compression level: %d\n", "%s - quality=%.1f method=%d\n", "Picture size is too large. Max is %dx%d.\n", "Using libwebp for RGB-to-YUV conversion. You may want to consider passing in YUV instead for lossy encoding.\n", "Copying frame due to differing chroma linesizes.\n", "Using libwebp for YUV-to-RGB conversion. You may want to consider passing in RGB instead for lossless encoding.\n", "ff_lpc_calc_coefs", "libavcodec/lpc.c", "lpc_type == FF_LPC_TYPE_CHOLESKY || lpc_type == FF_LPC_TYPE_LEVINSON", "bytestream2_init", "ff_lzw_encode_init", "libavcodec/lzwenc.c", "s->maxbits >= 9 && s->maxbits <= 12", "libavcodec/me_cmp.c", "internal error in cmp function selection\n", "put_bits", "ff_mjpeg_encode_coef", "ff_mjpeg_encode_init", "alloc_huffman", "run == 0", "s->slice_context_count == 1", "JPEG does not support resolutions above 65500x65500\n", "mjpeg encoder", "Sum of absolute differences, fast", "cmp_func", "Sum of squared errors", "satd", "Sum of absolute Hadamard transformed differences", "Sum of absolute DCT transformed differences", "psnr", "Sum of squared quantization errors, low quality", "Number of bits needed for the block", "Rate distortion optimal, slow", "Zero", "vsad", "Sum of absolute vertical differences", "vsse", "Sum of squared vertical differences", "nsse", "Noise preserving sum of squared differences", "dct264", "dctmax", "msad", "Sum of absolute differences, median predicted", "mpv_flags", "Flags common for all mpegvideo-based encoders.", "skip_rd", "RD optimal MB level residual skipping", "strict_gop", "Strictly enforce gop size", "qp_rd", "Use rate distortion optimization for qp selection", "cbp_rd", "use rate distortion optimization for CBP", "normalize adaptive quantization", "always try a mb with mv=<0,0>", "luma_elim_threshold", "single coefficient elimination threshold for luminance (negative values also consider dc coefficient)", "chroma_elim_threshold", "single coefficient elimination threshold for chrominance (negative values also consider dc coefficient)", "quantizer_noise_shaping", "error_rate", "Simulate errors in the bitstream to test error concealment.", "qsquish", "how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)", "rc_qmod_amp", "experimental quantizer modulation", "rc_qmod_freq", "rc_eq", "Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.", "rc_init_cplx", "initial complexity for 1-pass encoding", "rc_buf_aggressivity", "currently useless", "border_mask", "increase the quantizer for macroblocks close to borders", "minimum Lagrange factor (VBR)", "maximum Lagrange factor (VBR)", "ibias", "intra quant bias", "pbias", "inter quant bias", "rc_strategy", "ratecontrol method", "default native rate control", "libxvid (2 pass only)", "motion_est", "motion estimation algorithm", "epzs", "xone", "force_duplicated_matrix", "Always write luma and chroma matrix for mjpeg, useful for rtp streaming.", "b_strategy", "Strategy to choose between I/P/B-frames", "b_sensitivity", "Adjust sensitivity of b_frame_strategy 1", "brd_scale", "Downscale frames for dynamic B-frame decision", "skip_threshold", "Frame skip threshold", "skip_factor", "Frame skip factor", "skip_exp", "Frame skip exponent", "skip_cmp", "Frame skip compare function", "sc_threshold", "Scene change threshold", "noise_reduction", "Noise reduction", "mpeg_quant", "Use MPEG quantizers instead of H.263", "RTP payload size in bytes", "mepc", "Motion estimation bitrate penalty compensation (1.0 = 256)", "mepre", "pre motion estimation", "Prediction method", "plane", "median", "huffman", "Huffman table strategy", "optimal", "put_bits", "flush_put_bits", "jpeg_put_comments", "ff_mjpeg_encode_picture_header", "skip_put_bytes", "ff_mjpeg_encode_stuffing", "libavcodec/mjpegenc_common.c", "Cannot store exact aspect ratio %d:%d\n", "JFIF", "CS=ITU601", "avctx->codec->priv_data_size == sizeof(MpegEncContext)", "n <= s->buf_end - s->buf_ptr", "Buffer reallocation failed\n", "ff_mjpegenc_huffman_compute_bits", "ff_mjpeg_encode_huffman_close", "libavcodec/mjpegenc_huffman.c", "max_length > 0", "nval <= max_nval", "ff_estimate_p_frame_motion", "ff_pre_estimate_p_frame_motion", "libavcodec/motion_est.c", "ME_MAP size is too small for SAB diamond\n", "me_method is only allowed to be set to zero and epzs; for hex,umh,full and others see dia_size\n", "ME_MAP size may be a little small for the selected diamond size\n", "s->quarter_sample==0 || s->quarter_sample==1", "s->linesize == c->stride", "s->uvlinesize == c->uvstride", "s->pict_type==AV_PICTURE_TYPE_P", "range <= 16 || !s->msmpeg4_version", "range <=256 || !(s->codec_id == AV_CODEC_ID_MPEG2VIDEO && s->avctx->strict_std_compliance >= 0)", "mp3_header_decompress", "FFCMP3 0.0", "libavcodec/mp3_header_decompress_bsf.c", "Extradata invalid %d\n", "Could not find bitrate_index.\n", "mp3decomp", "ff_init_2d_vlc_rl", "decode_dc", "libavcodec/mpeg12.c", "static_size <= (sizeof(table) / sizeof((table)[0]))", "libavcodec/mpeg12.h", "invalid dc code at\n", "mpeg4_unpack_bframes_init", "mpeg4_unpack_bframes_filter", "libavcodec/mpeg4_unpack_bframes_bsf.c", "Updating DivX userdata (remove trailing 'p') in extradata.\n", "Found %d VOP startcode(s) in this packet.\n", "Missing one N-VOP packet, discarding one B-frame.\n", "Found %d VOP headers in one packet, only unpacking one.\n", "Skipping N-VOP.\n", "Updating DivX userdata (remove trailing 'p').\n", "mpeg4_unpack_bframes", "put_bits", "parse_config_ALS", "libavcodec/mpeg4audio.c", "Invalid sample rate %d\n", "mpeg4_decode_header", "libavcodec/mpeg4video_parser.c", "Failed to parse extradata\n", "check_marker", "ff_mpeg4_pred_dc", "mpeg4_decode_dc", "mpeg4_decode_block", "mpeg4_decode_mb", "mpeg4_decode_partitioned_mb", "ff_mpeg4_decode_video_packet_header", "mpeg4_decode_partition_a", "ff_mpeg4_decode_partitions", "mpeg4_decode_partition_b", "ff_mpeg4_workaround_bugs", "ff_mpeg4_decode_picture_header", "decode_vol_header", "mpeg4_decode_gop_header", "decode_vop_header", "ff_mpeg4_frame_end", "DivX%dBuild%d%c", "DivX%db%d%c", "FFmpe%*[^b]b%d", "FFmpeg v%d.%d.%d / libavcodec build: %d", "Lavc%d.%d.%d", "XviD%d", "after new_pred", "before sprite_trajectory", "after sprite_trajectory", "Too large sprite shift or offset", "Overflow on sprite points", "libavcodec/mpeg4video.h", "dc<0 at %dx%d\n", "dc overflow at %dx%d\n", "libavcodec/mpeg4videodec.c", "illegal dc vlc\n", "dc marker bit missing\n", "1. marker bit missing in rvlc esc\n", "2. marker bit missing in rvlc esc\n", "reverse esc missing\n", "1. marker bit missing in 3. esc\n", "2. marker bit missing in 3. esc\n", "|level| overflow in 3. esc, qp=%d\n", "ac-tex damaged at %d %d\n", "mcbpc damaged at %d %d\n", "P cbpy damaged at %d %d\n", "illegal MB_type\n", "texture corrupted at %d %d %d\n", "marker does not match f_code\n", "illegal mb_num in video packet (%d %d) \n", "before time_increment in video packed header", "before vop_coding_type in video packed header", "untested\n", "Error, video packet header damaged (f_code=0)\n", "Error, video packet header damaged (b_code=0)\n", "mcbpc corrupted at %d %d\n", "DC corrupted at %d %d\n", "slice below monitor ...\n", "marker missing after first I partition at %d %d\n", "marker missing after first P partition at %d %d\n", "I cbpy corrupted at %d %d\n", "P cbpy corrupted at %d %d\n", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "scalability ", "qpel ", "partition ", "rvlc ", " VOLC", "frame skip %d\n", "startcode: %3X ", "Video Object Start", "Video Object Layer Start", "Reserved", "FGS bp start", "Visual Object Seq Start", "Visual Object Seq End", "User Data", "Group of VOP start", "Video Session Error", "Visual Object Start", "Video Object Plane start", "slice start", "extension start", "fgs start", "FBA Object start", "FBA Object Plane start", "Mesh Object start", "Mesh Object Plane start", "Still Texture Object start", "Texture Spatial Layer start", "Texture SNR Layer start", "Texture Tile start", "Texture Shape Layer start", "stuffing start", "System start", "Multiple VOL headers", "illegal chroma format\n", "after first_half_bitrate", "after latter_half_bitrate", "after first_half_vbv_buffer_size", "after first_half_vbv_occupancy", "after latter_half_vbv_occupancy", "only rectangular vol supported\n", "Gray shape not supported\n", "before time_increment_resolution", "framerate==0\n", "before fixed_vop_rate", "before width", "before height", "after height", "MPEG-4 OBMC not supported (very likely buggy encoder)\n", "Static Sprites not supported\n", "after sprite_width", "after sprite_height", "after sprite_left", "after sprite_top", "%d sprite_warping_points\n", "N-bit not supported\n", "quant precision %d\n", "insufficient data for custom matrix\n", "VOL Header truncated\n", "in complexity estimation part 1", "in complexity estimation part 2", "Invalid Complexity estimation method %d\n", "new pred not supported\n", "reduced resolution VOP not supported\n", "scalability not supported\n", "tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d, low_delay:%d  %s%s%s%s\n", "GOP header invalid\n", "in gop_header", "low_delay flag set incorrectly, clearing it\n", "before time_increment", "time_increment_bits %d is invalid in relation to the current bitstream, this is likely caused by a missing VOL header\n", "time_increment_bits set to %d bits, based on bitstream analysis\n", "before vop_coded", "vop not coded\n", "after width", "after hor_spat_ref", "sprite_brightness_change not supported\n", "static sprite not supported\n", "Error, header damaged or not MPEG-4 header (qscale=0)\n", "Error, header damaged or not MPEG-4 header (f_code=0)\n", "Error, header damaged or not MPEG4 header (b_code=0)\n", "qp:%d fc:%d,%d %s size:%d pro:%d alt:%d top:%d %spel part:%d resync:%d w:%d a:%d rnd:%d vot:%d%s dc:%d ce:%d/%d/%d time:%ld tincr:%d\n", "load backward shape isn't supported\n", "looks like this file was encoded with (divx4/(old)xvid/opendivx) -> forcing low_delay flag\n", "WV1F", "QMP4", "MP4S", "Video uses a non-standard and wasteful way to store B-frames ('packed B-frames'). Consider using the mpeg4_unpack_bframes bitstream filter without encoding but stream copy to fix it.\n", "MPEG4 Video Decoder", "1/4 subpel MC", "divx_packed", "divx style packed b frames", "mpeg_er_decode_mb", "libavcodec/mpeg_er.c", "Interlaced error concealment is not fully implemented\n", "MP3ADU full parser", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "libavcodec/mpegaudiodec_template.c", "offset == (sizeof(huff_vlc_tables) / sizeof((huff_vlc_tables)[0]))", "Codec extradata missing or too short.\n", "Invalid channel config number.\n", "big_values too big\n", "invalid block type\n", "switch point in 8khz", "overread, skip %d enddists: %d %d\n", "bits_left=%d\n", "invalid old backstep %d\n", "invalid new backstep %d\n", "s->frame", "discarding ID3 tag\n", "Header missing\n", "incorrect frame size - multiple frames in buffer?\n", "Error while decoding MPEG audio frame.\n", "Packet is too small\n", "Invalid frame header\n", "Frame size smaller than header size\n", "Bad header, discard block\n", "frame channel count exceeds codec channel count\n", "failed to decode channel %d\n", "failed to decode all channels\n", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "mp3on4float", "mp3adufloat", "mp3float", "ff_mpeg_framesize_alloc", "ff_alloc_picture", "alloc_frame_buffer", "ff_mpeg_ref_picture", "find_unused_picture", "libavcodec/mpegpicture.c", "Image too small, temporary buffers cannot function\n", "!pic->f->buf[0]", "get_buffer() failed (%d %p)\n", "alloc_frame_buffer() failed (hwaccel private data allocation)\n", "get_buffer() failed (stride changed)\n", "get_buffer() failed (uv stride mismatch)\n", "get_buffer() failed to allocate context scratch buffers.\n", "Error allocating a picture.\n", "Internal error, picture buffer overflow\n", "init_duplicate_context", "init_context_frame", "ff_mpv_common_init", "ff_mpeg_update_thread_context", "ff_mpv_frame_start", "ff_print_debug_info2", "ff_mpv_export_qp_table", "mpv_decode_mb_internal", "libavcodec/mpegvideo.c", "VCR2", "decoding to AV_PIX_FMT_NONE is not supported.\n", "too many threads/slices (%d), reducing to %d\n", "s != s1", "!s->picture || s->picture != s1->picture", "Failed to allocate context scratch buffers.\n", "Context scratch buffers could not be allocated due to unknown size.\n", "allocating dummy last picture for B frame\n", "warning: first frame is no keyframe\n", "allocate dummy last picture for field based first keyframe\n", "s->pict_type == AV_PICTURE_TYPE_I || (s->last_picture_ptr && s->last_picture_ptr->f->buf[0])", "Adding %d MVs info to frame %d\n", "New frame, type: %c\n", "ref->size >= offset + s->mb_stride * ((f->height+15)/16)", "DCT coeffs of MB at %dx%d:\n", "put_bits", "clip_coeffs", "flush_put_bits", "encode_mb_hq", "ff_convert_matrix", "load_input_picture", "estimate_best_b_count", "select_input_picture", "set_put_bits_buffer_size", "ff_mpv_encode_picture", "ff_mpv_encode_init", "ff_mpv_reallocate_putbitbuffer", "rebase_put_bits", "encode_thread", "warning, clipping %d dct coefficients to %d..%d\n", "s->linesize >= 32", "Warning, QMAT_SHIFT is larger than %d, overflows possible\n", "Invalid pts (%ld) <= last (%ld)\n", "Warning: AVFrame.pts=? trying to guess (%ld)\n", "scale >= 0 && scale <= 3", "warning, too many B-frames in a row\n", "size <= 2147483647/8 - 32", "s->pb.buf == avctx->internal->byte_buffer", "reencoding frame due to VBV\n", "s->avctx->rc_max_rate", "stuffing too large\n", "vbv buffer overflow\n", "Internal error, negative bits\n", "vbv_delay < 0xFFFF", "only YUV420 and YUV422 are supported\n", "only YUV420 is supported\n", "keyframe interval too large!, reducing it from %d to %d\n", "Too many B-frames requested, maximum is %d.\n", "intra dc precision must be positive, note some applications use 0 and some 8 as base meaning 8bit, the value must not be smaller than that\n", "intra dc precision too large\n", "Automatically choosing VBV buffer size of %d kbyte\n", "Either both buffer size and max rate or neither must be specified\n", "Warning min_rate > 0 but min_rate != max_rate isn't recommended!\n", "bitrate below min bitrate\n", "bitrate above max bitrate\n", "impossible bitrate constraints, this will fail\n", "VBV buffer too small for bitrate\n", "bitrate tolerance %d too small for bitrate %ld, overriding\n", "Warning vbv_delay will be set to 0xFFFF (=VBR) as the specified vbv buffer is too large for the given bitrate!\n", "4MV not supported by codec\n", "OBMC is only supported with simple mb decision\n", "qpel not supported by codec\n", "B-frames not supported by codec\n", "max b frames must be 0 or positive for mpegvideo based encoders\n", "Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n", "H.263 does not support resolutions above 2048x1152\n", "w/h must be a multiple of 4\n", "MPEG-1 does not support resolutions above 4095x4095\n", "MPEG-2 does not support resolutions above 16383x16383\n", "width and height must be a multiple of 16\n", "width and height must be a multiple of 4\n", "width must be multiple of 2\n", "interlacing not supported by codec\n", "mpeg2 style quantization not supported by codec\n", "CBP RD needs trellis quant\n", "QP RD needs mbd=2\n", "QP RD is no longer compatible with MJPEG or AMV\n", "closed gop with scene change detection are not supported yet, set threshold to 1000000000\n", "low delay forcing is only available for mpeg2\n", "B-frames cannot be used with low delay\n", "non linear quant only supports qmax <= 28 currently\n", "Multiple slices are not supported by this codec\n", "multi threaded encoding not supported by codec\n", "automatic thread number detection not supported by codec, patch welcome\n", "framerate not set\n", "notice: b_frame_strategy only affects the first pass\n", "removing common factors from framerate\n", "qmin and or qmax are invalid, they must be 0 < min <= max\n", "intra_quant_bias = %d inter_quant_bias = %d\n", "timebase %d/%d not supported by MPEG 4 standard, the maximum admitted value for the timebase denominator is %d\n", "Xvid ratecontrol requires libavcodec compiled with Xvid support.\n", "colorspace not supported in jpeg\n", "Cannot reallocate putbit buffer\n", "8*buffer_size > s->size_in_bits", "encoded frame too large\n", "encoded partitioned frame too large\n", "illegal MB type\n", "wmv1 encoder", "msmpeg4v3 encoder", "msmpeg4v2 encoder", "H.263p encoder", "Use unlimited motion vectors.", "Use alternative inter VLC.", "obmc", "use overlapped block motion compensation.", "structured_slices", "Write slice start position at every GOB header instead of just GOB number.", "H.263 encoder", "mb_info", "emit macroblock info for RFC 2190 packetization, the parameter value is the maximum payload size", "mpeg_motion_internal", "MPEG motion vector out of boundary (%d %d)\n", "mpegvideo_extract_headers", "libavcodec/mpegvideo_parser.c", "Failed to set dimensions\n", "msrle_decode_8_16_24_32", "ff_msrle_decode", "libavcodec/msrledec.c", "MS RLE: bytestream overrun, %dx%d left\n", "MS RLE: frame/stream ptr just went out of bounds (copy)\n", "MS RLE: frame ptr just went out of bounds (run) %d %d %d\n", "MS RLE: ended frame decode with %d bytes left over\n", "Next line is beyond picture bounds (%d bytes left)\n", "Skip beyond picture bounds\n", "bytestream overrun\n", "MS RLE warning: no end-of-picture code\n", "Unknown depth %d\n", "init_context_defaults", "avcodec_copy_context", "NULL", "libavcodec/options.c", "Tried to copy AVCodecContext %p into already-initialized %p\n", "dest->subtitle_header_size == src->subtitle_header_size", "AVSubtitleRect", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "AVCodecContext", "set bitrate (in bits/s)", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.", "unaligned", "allow decoders to produce unaligned output", "use four motion vectors per macroblock (MPEG-4)", "use 1/4-pel motion compensation", "use loop filter", "use fixed qscale", "use gmc", "input_preserved", "pass1", "use internal 2-pass ratecontrol in first  pass mode", "pass2", "use internal 2-pass ratecontrol in second pass mode", "gray", "only decode/encode grayscale", "emu_edge", "do not draw edges", "error[?] variables will be set during encoding", "Input bitstream might be randomly truncated", "ildct", "use interlaced DCT", "low_delay", "force low delay", "global_header", "place global headers in extradata instead of every keyframe", "bitexact", "use only bitexact functions (except (I)DCT)", "H.263 advanced intra coding / MPEG-4 AC prediction", "ilme", "interlaced motion estimation", "cgop", "closed GOP", "output_corrupt", "Output even potentially corrupted frames", "allow non-spec-compliant speedup tricks", "flags2", "noout", "skip bitstream encoding", "ignorecrop", "ignore cropping information from sps", "local_header", "place global headers at every keyframe instead of in extradata", "Frame data might be split into multiple chunks", "showall", "Show all frames before the first keyframe", "export_mvs", "export motion vectors through frame side data", "skip_manual", "do not skip samples and export skip information as frame side data", "ass_ro_flush_noop", "do not reset ASS ReadOrder field on flush", "me_method", "set motion estimation method", "zero motion estimation (fastest)", "full", "full motion estimation (slowest)", "EPZS motion estimation", "esa motion estimation (alias for full)", "tesa", "tesa motion estimation", "diamond motion estimation (alias for EPZS)", "log motion estimation", "phods", "phods motion estimation", "X1 motion estimation", "hex motion estimation", "umh motion estimation", "iter motion estimation", "time_base", "set the group of picture (GOP) size", "set audio sampling rate (in Hz)", "set number of audio channels", "set cutoff bandwidth", "frame_size", "frame_number", "qcomp", "video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0", "qblur", "video quantizer scale blur (VBR)", "qmin", "minimum video quantizer scale (VBR)", "maximum video quantizer scale (VBR)", "qdiff", "maximum difference between the quantizer scales (VBR)", "set maximum number of B-frames between non-B-frames", "b_qfactor", "QP factor between P- and B-frames", "strategy to choose between I/P/B-frames", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "work around not autodetected encoder bugs", "old_msmpeg4", "some old lavc-generated MSMPEG4v3 files (no autodetection)", "xvid_ilace", "Xvid interlacing bug (autodetected if FOURCC == XVIX)", "ump4", "(autodetected if FOURCC == UMP4)", "no_padding", "padding bug (autodetected)", "ac_vlc", "illegal VLC bug (autodetected per FOURCC)", "qpel_chroma", "std_qpel", "old standard qpel (autodetected per FOURCC/version)", "qpel_chroma2", "direct_blocksize", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "hpel_chroma", "dc_clip", "work around various bugs in Microsoft's broken decoders", "trunc", "truncated frames", "iedge", "how strictly to follow the standards", "strictly conform to a older more strict version of the spec or reference software", "strictly conform to all the things in the spec no matter what the consequences", "normal", "unofficial", "allow unofficial extensions", "experimental", "allow non-standardized experimental things", "b_qoffset", "QP offset between P- and B-frames", "set error detection flags", "crccheck", "verify embedded CRCs", "detect bitstream specification deviations", "detect improper bitstream length", "explode", "abort decoding on minor error detection", "ignore_err", "ignore errors", "careful", "consider things that violate the spec, are fast to check and have not been seen in the wild as errors", "compliant", "consider all spec non compliancies as errors", "aggressive", "consider things that a sane encoder should not do as an error", "has_b_frames", "block_align", "use MPEG quantizers instead of H.263", "deprecated, use encoder private options instead", "rc_override_count", "maxrate", "maximum bitrate (in bits/s). Used for VBV together with bufsize.", "minrate", "minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.", "set ratecontrol buffer size (in bits)", "i_qfactor", "QP factor between P- and I-frames", "i_qoffset", "QP offset between P- and I-frames", "fast integer", "floating point AAN DCT", "lumi_mask", "compresses bright areas stronger than medium ones", "tcplx_mask", "temporal complexity masking", "scplx_mask", "spatial complexity masking", "p_mask", "inter masking", "dark_mask", "compresses dark areas stronger than medium ones", "deprecated, for compatibility only", "floating point AAN IDCT", "slice_count", "set error concealment strategy", "guess_mvs", "iterative motion vector (MV) search (slow)", "deblock", "use strong deblock filter for damaged MBs", "favor_inter", "favor predicting from the previous frame", "bits_per_coded_sample", "prediction method", "sample aspect ratio", "print specific debug info", "pict", "picture info", "macroblock (MB) type", "per-block quantization parameter (QP)", "motion vector", "dct_coeff", "green_metadata", "skip", "startcode", "error recognition", "mmco", "memory management control operations (H.264)", "vis_qp", "visualize quantization parameter (QP), lower QP are tinted greener", "vis_mb_type", "visualize block types", "buffers", "picture buffer allocations", "thread_ops", "threading operations", "nomc", "skip motion compensation", "vismv", "visualize motion vectors (MVs) (deprecated)", "debug_mv", "forward predicted MVs of P-frames", "forward predicted MVs of B-frames", "backward predicted MVs of B-frames", "full-pel ME compare function", "subcmp", "sub-pel ME compare function", "macroblock compare function", "ildctcmp", "interlaced DCT compare function", "diamond type & size for motion estimation", "last_pred", "amount of motion predictors from the previous frame", "preme", "precmp", "pre motion estimation compare function", "sum of absolute differences, fast", "sum of squared errors", "sum of absolute Hadamard transformed differences", "sum of absolute DCT transformed differences", "sum of squared quantization errors (avoid, low quality)", "number of bits needed for the block", "rate distortion optimal, slow", "sum of absolute vertical differences", "sum of squared vertical differences", "noise preserving sum of squared differences", "sum of absolute differences, median predicted", "pre_dia_size", "diamond type & size for motion estimation pre-pass", "subq", "sub-pel motion estimation quality", "dtg_active_format", "me_range", "limit motion vectors range (1023 for DivX player)", "variable length coder / Huffman coder", "arithmetic coder", "raw (no encoding)", "run-length coder", "deflate", "deflate-based coder", "context model", "slice_flags", "xvmc_acceleration", "macroblock decision algorithm (high quality mode)", "use mbcmp", "use fewest bits", "use best rate distortion", "stream_codec_tag", "scene change threshold", "noise reduction", "rc_init_occupancy", "number of bits which should be loaded into the rc buffer before decoding starts", "set the number of threads", "autodetect a suitable number of threads to use", "me_threshold", "motion estimation threshold", "mb_threshold", "macroblock threshold", "intra_dc_precision", "nssew", "nsse weight", "skip_top", "number of macroblock rows at the top which are skipped", "skip_bottom", "number of macroblock rows at the bottom which are skipped", "aac_main", "aac_ssr", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "decode at 1= 1/2, 2=1/4, 3=1/8 resolutions", "frame skip threshold", "frame skip factor", "frame skip exponent", "skipcmp", "frame skip compare function", "mblmin", "minimum macroblock Lagrange factor (VBR)", "mblmax", "maximum macroblock Lagrange factor (VBR)", "motion estimation bitrate penalty compensation (1.0 = 256)", "skip_loop_filter", "skip loop filtering process for the selected frames", "avdiscard", "skip_idct", "skip IDCT/dequantization for the selected frames", "skip_frame", "skip decoding for the selected frames", "discard no frame", "discard useless frames", "noref", "discard all non-reference frames", "bidir", "discard all bidirectional frames", "nokey", "discard all frames except keyframes", "nointra", "discard all frames except I frames", "discard all frames", "bidir_refine", "refine the two motion vectors used in bidirectional macroblocks", "downscale frames for dynamic B-frame decision", "keyint_min", "minimum interval between IDR-frames", "reference frames to consider for motion compensation", "chromaoffset", "chroma QP offset from luma", "trellis", "rate-distortion optimal quantization", "sc_factor", "multiplied by qscale for each frame and added to scene_change_score", "mv0_threshold", "adjust sensitivity of b_frame_strategy 1", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "GOP timecode frame start number, in non-drop-frame format", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "color_primaries", "color primaries", "color_primaries_type", "bt709", "BT.709", "Unspecified", "bt470m", "BT.470 M", "bt470bg", "BT.470 BG", "smpte170m", "SMPTE 170 M", "smpte240m", "SMPTE 240 M", "Film", "bt2020", "BT.2020", "smpte428", "SMPTE 428-1", "smpte428_1", "smpte431", "SMPTE 431-2", "smpte432", "SMPTE 422-1", "jedec-p22", "JEDEC P22", "unspecified", "color_trc", "color transfer characteristics", "color_trc_type", "gamma22", "gamma28", "Linear", "log100", "log316", "Log square root", "iec61966-2-4", "IEC 61966-2-4", "bt1361e", "BT.1361", "iec61966-2-1", "IEC 61966-2-1", "bt2020-10", "BT.2020 - 10 bit", "bt2020-12", "BT.2020 - 12 bit", "smpte2084", "SMPTE 2084", "arib-std-b67", "ARIB STD-B67", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "color space", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "BT.2020 NCL", "bt2020c", "BT.2020 CL", "smpte2085", "SMPTE 2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color_range_type", "MPEG (219*2^(n-8))", "JPEG (2^n-1)", "chroma_sample_location", "chroma sample location", "chroma_sample_location_type", "Left", "Center", "topleft", "Top-left", "bottomleft", "Bottom-left", "Bottom", "log_level_offset", "set the log level offset", "set the number of slices, used in parallelized encoding", "thread_type", "select multithreading type", "slice", "audio_service_type", "audio service type", "Main Audio Service", "Effects", "Visually Impaired", "Hearing Impaired", "Dialogue", "Commentary", "Emergency", "Voice Over", "Karaoke", "request_sample_fmt", "sample format audio decoders should prefer", "pkt_timebase", "sub_charenc", "set input text subtitles character encoding", "sub_charenc_mode", "set input text subtitles character encoding mode", "do_nothing", "pre_decoder", "sub_text_format", "set decoded text subtitle format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "Skip processing alpha", "field_order", "Field order", "progressive", "dump_separator", "set information dump field separator", "codec_whitelist", "List of decoders that are allowed to be used", "pixel_format", "set pixel format", "video_size", "set video size", "max_pixels", "Maximum number of pixels", "set app ptr", "av_parser_parse2", "ff_combine_frame", "libavcodec/parser.c", "index > -0x20000000", "Failed to reallocate parser buffer to %d\n", "pcm_bluray_decode_frame", "pcm_bluray_parse_header", "libavcodec/pcm-bluray.c", "PCM packet too small\n", "unsupported sample depth (%d)\n", "reserved sample rate (%d)\n", "reserved channel configuration (%d)\n", "pcm_dvd_decode_frame", "pcm_dvd_parse_header", "libavcodec/pcm-dvd.c", "pcm_dvd_parse_header: header = %02x%02x%02x\n", "PCM DVD unsupported sample depth %i\n", "block_size has changed %d != %d\n", "pcm_decode_frame", "pcm_decode_init", "Invalid sample_size\n", "Invalid number of channels\n", "codec ids mismatch\n", "Invalid PCM packet, data has size %d but at least a size of %d was expected\n", "PCM channels out of bounds\n", "bytestream2_init", "decode_frame_png", "decode_frame_common", "decode_ihdr_chunk", "decode_phys_chunk", "decode_idat_chunk", "png_decode_idat", "decode_trns_chunk", "1.2.3", "libavcodec/pngdec.c", "Invalid PNG signature 0x%08lX.\n", "inflateInit returned error %d\n", "%d bytes left\n", "chunk too big\n", "png: tag=%s length=%u\n", "IHDR after IDAT\n", "Multiple IHDR\n", "Invalid image size\n", "Invalid bit depth\n", "width=%d height=%d depth=%d color_type=%d compression_type=%d filter_type=%d interlace_type=%d\n", "pHYs after IDAT\n", "IDAT without IHDR\n", "unsupported bit depth %d and color type %d\n", "bit depth %d and color type %d with TRNS", "inflate returned error %d\n", "%d undecompressed bytes left in buffer\n", "trns before IHDR\n", "trns after IDAT\n", "Broken tEXt chunk\n", "Broken zTXt chunk\n", "Unknown value in sTER chunk (%d)\n", "IEND without all image\n", "s->bit_depth > 1", "MPNG", "\t)0M", "encode_headers", "png_enc_init", "png_choose_filter", "encode_apng", "libavcodec/pngenc.c", "Only side-by-side stereo3d flag can be defined within sTER chunk\n", "Only one of 'dpi' or 'dpm' options should be set\n", "bpp || !pred", "Input contains more than one unique palette. APNG does not support multiple palettes.\n", "APNG encoder", "Set image resolution (in dots per inch)", "Set image resolution (in dots per meter)", "paeth", "mixed", "validate_thread_parameters", "libavcodec/pthread.c", "Application has requested %d threads. Using a thread count greater than %d is not recommended.\n", "async_unlock", "release_delayed_buffers", "submit_packet", "ff_thread_report_progress", "ff_thread_await_progress", "ff_thread_finish_setup", "frame_worker_thread", "ff_frame_thread_free", "ff_thread_get_format", "thread_get_buffer_internal", "ff_thread_get_buffer", "ff_thread_release_buffer", "libavcodec/pthread_frame.c", "fctx->async_lock", "p->avctx->codec_type == AVMEDIA_TYPE_VIDEO || p->avctx->codec_type == AVMEDIA_TYPE_AUDIO", "av_packet_ref() failed in submit_packet()\n", "%p finished %d field %d\n", "thread awaiting %d field %d from %p\n", "Multiple ff_thread_finish_setup() calls\n", "!p->hwaccel_serializing", "A frame threaded decoder did not free the frame on failure. This is a bug, please report it.\n", "Final thread update failed\n", "get_format() cannot be called after ff_thread_finish_setup()\n", "get_buffer() cannot be called after ff_thread_finish_setup()\n", "thread_get_buffer() failed\n", "thread_release_buffer called on pic %p\n", "ff_alloc_entries", "libavcodec/pthread_slice.c", "p->thread_count == avctx->thread_count", "bits2qp", "qp2bits", "get_qminmax", "modify_qscale", "ff_vbv_update", "ff_rate_control_init", "init_pass2", "ff_rate_estimate_qscale", "libavcodec/ratecontrol.c", "bits<0.9\n", "qp<=0.0\n", "qmin <= qmax", "limiting QP %f -> %f\n", "in:%d out:%d type:%d q:%d itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%ld var:%ld icount:%d skipcount:%d hbits:%d;\n", "rc buffer underflow\n", "max bitrate possibly too small or try trellis with large lmax or increase qmax\n", "stuffing %d bytes\n", "tex^qComp", "Error parsing rc_eq \"%s\"\n", " in:%d ", "picture_number >= 0", "picture_number < rcc->num_entries", " in:%*d out:%*d type:%d q:%f itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%ld var:%ld icount:%d skipcount:%d hbits:%d", "statistics are damaged at line %d, parser out=%d\n", "requested bitrate is too low\n", "filter_size % 2 == 1", "toobig <= 40", "[lavc rc] requested bitrate: %ld bps  expected bitrate: %ld bps\n", "[lavc rc] estimated target average qp: %.3f\n", "[lavc rc] Using all of requested bitrate is not necessary for this video with these parameters.\n", "[lavc rc] Error: bitrate too low for this video with these parameters.\n", "[lavc rc] Error: 2pass curve failed to converge\n", "qblur too large\n", "Input is longer than 2-pass log file\n", "pict_type == rce->new_pict_type", "q > 0.0", "%c qp:%d<%2.1f<%d %d want:%d total:%d comp:%f st_q:%2.2f size:%d var:%ld/%ld br:%ld fps:%d\n", "bits2qp", "qp2bits", "iTex", "pTex", "fCode", "iCount", "mcVar", "avgQP", "avgIITex", "avgPITex", "avgPPTex", "avgBPTex", "avgTex", "I420", "IYUV", "yv12", "YV16\f", "I420\f", "IYUV\f", "YV12\r", "Y42B\r", "YUYVw", "NV21.", "RGB\f@", "BGR\f?", "\fBGRA", "\fRGBt", "RBA@v", "BRA@s", "@RBAu", "422P\r", "422P!", "440P\"", "444P\t", "B1W0\n", "R4BY*", "RGB0)", "0RGBD", "BGR0C", "Y3\u000b\tE", "\t\u000b3YP", "Y3\n\tO", "\t\n3YL", "Y3\u000b\nG", "\n\u000b3YJ", "Y3\n\nI", "\n\n3YN", "Y4\u000b\t[", "\t\u000b4Y^", "Y4\n\t]", "\t\n4Y`", "Y4\u000b\na", "\n\u000b4Yd", "Y4\n\nc", "\n\n4Yf", "XYZ$o", "DVOO.", "L555,", "L565+", "b16g)", "b48rs", "I422!", "I444\f", "J420\r", "J422\"", "J444Z", "YUVA#", "I40AY", "RGB2.", "RV15,", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "I4AB:", "I4FL;", "I4FB,", "raw_init_decoder", "raw_decode", "libavcodec/rawdec.c", "Invalid pixel format.\n", "BottomUp", "yuv2", "width is not set\n", "PACKET SIZE: %d, STRIDE: %d\n", "Packet too small (%d)\n", "avctx->bits_per_coded_sample == 1", "Invalid buffer size, packet size %d < expected frame_size %d\n", "Palette size %d is wrong\n", "I420", "b64a", "rawdec", "av_audio_resample_init", "audioresample", "libavcodec/resample.c", "Resampling with input channels greater than %d is unsupported.\n", "Unsupported audio resampling. Allowed output channels for %d input channel%s", "Can't allocate memory for resample context.\n", "Cannot convert %s sample format to s16 sample format\n", "Cannot convert s16 sample format to %s sample format\n", "Could not allocate buffer\n", "Audio sample format conversion failed\n", "ReSampleContext", "ff_rl_init_vlc", "libavcodec/rl.c", "%s%7d:%-7d", "%s%7i", "%s%.15g", "%s%5i", "%s%3i", "ff_fast_malloc", "FFmpeg version 3.3.2", "avcodec_set_dimensions", "apply_param_change", "ff_set_sar", "ff_color_frame", "update_frame_pool", "video_get_buffer", "audio_get_buffer", "ff_init_buffer_info", "get_buffer_internal", "validate_avframe_allocation", "ff_get_buffer", "reget_buffer_internal", "ff_reget_buffer", "ff_alloc_packet2", "avcodec_encode_audio2", "avcodec_encode_video2", "do_encode", "avcodec_encode_subtitle", "avcodec_decode_video2", "avcodec_decode_audio4", "do_decode", "avcodec_decode_subtitle2", "recode_subtitle", "avcodec_get_name", "av_log_ask_for_sample", "av_log_missing_feature", "ff_get_format", "setup_hwaccel", "ff_unlock_avcodec", "ff_lock_avcodec", "ff_thread_ref_frame", "avcodec_open2", "avpriv_find_start_code", "9:59:59.99,", "%d:%02d:%02d.%02d,", "./libavutil/mem_internal.h", "val || !min_size", "libavcodec/utils.c", "This decoder does not support parameter changes, but PARAM_CHANGE side data was sent to it.\n", "Invalid channel count", "Invalid sample rate", "PARAM_CHANGE side data too small.\n", "Error applying parameter changes.\n", "ignoring invalid SAR: %d/%d\n", "desc->flags & (1 << 4)", "pic->data[*]!=NULL in avcodec_default_get_buffer\n", "Unable to get pixel format descriptor for format %s\n", "default_get_buffer called on pic %p\n", "frame->nb_extended_buf == 0", "default_get_buffer called on frame %p", "ignoring invalid SAR: %u/%u\n", "Inconsistent channel configuration.\n", "Too many channels: %d.\n", "video_get_buffer: image parameters invalid\n", "pic->data[*]!=NULL in get_buffer_internal\n", "frame->data[i]", "Buffer returned by get_buffer2() did not zero unused plane pointers\n", "avctx->codec_type == AVMEDIA_TYPE_VIDEO", "Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n", "reget_buffer() failed\n", "Invalid negative user packet size %d\n", "Invalid minimum required packet size %ld (max allowed is %d)\n", "!avpkt->data || avpkt->data != avctx->internal->byte_buffer", "User packet is too small (%d < %ld)\n", "Failed to allocate packet of size %ld\n", "This encoder requires using the avcodec_send_frame() API.\n", "Encoding to a planar sample format, with more than %d channels, but extended_data is not set.\n", "more samples than frame size (avcodec_encode_audio2)\n", "nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n", "avctx->codec->encode2", "Provided packet is too small, needs to be %d\n", "AVFrame.format is not set\n", "AVFrame.width or height is not set\n", "ret <= 0", "!avctx->internal->buffer_pkt->data || avctx->internal->buffer_pkt->buf", "start_display_time must be 0.\n", "Invalid media type for video\n", "This decoder requires using the avcodec_send_packet() API.\n", "!picture->extended_data || picture->extended_data == picture->data", "invalid packet: NULL data, size != 0\n", "Invalid media type for audio\n", "ret <= tmp.size", "skip %d / discard %d samples due to side data\n", "skip whole frame, skip left: %d\n", "Could not update timestamps for skipped samples.\n", "skip %d/%d samples\n", "Could not update timestamps for discarded samples.\n", "discard %d/%d samples\n", "ret <= avpkt->size", "Multiple frames in a packet.\n", "!avctx->internal->buffer_frame->buf[0]", "Invalid media type for subtitles\n", "requesting subtitles recoding without iconv", "Dialogue: ", "Dialogue: %ld,", "Invalid UTF-8 in decoded subtitles text; maybe missing -sub_charenc option\n", "unknown_codec", "Codec 0x%x is not in the full list.\n", "[%d]", "--arch=aarch64 --enable-yasm --enable-openssl --enable-small --enable-runtime-cpudetect --disable-gray --enable-logging --disable-indevs --disable-outdevs --enable-openssl --disable-symver --enable-asm --enable-zlib --enable-jni --disable-programs --disable-ffmpeg --disable-ffplay --disable-ffprobe --disable-ffserver --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --disable-avdevice --enable-avcodec --enable-avformat --enable-avutil --enable-swresample --enable-swscale --disable-postproc --enable-avfilter --enable-avresample --enable-pthreads --enable-network --enable-fft --enable-rdft --disable-decoders --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=flv --enable-decoder=h264 --enable-decoder=mpeg4 --enable-decoder='mp3*' --enable-decoder=flac --enable-decoder=rawvideo --enable-decoder='pcm*' --enable-decoder=png --enable-decoder=gif --enable-decoder=bmp --disable-d3d11va --disable-dxva2 --disable-vaapi --disable-vda --disable-vdpau --disable-videotoolbox --disable-encoders --disable-hwaccels --enable-encoder=pcm_s16be --enable-encoder=pcm_s16le --enable-encoder=pcm_u16be --enable-encoder=pcm_u16le --enable-encoder=png --enable-encoder=gif --enable-encoder=aac --disable-muxers --enable-muxer=mp4 --enable-muxer=mov --enable-muxer=flv --enable-muxer=pcm_s16le --enable-muxer=wav --enable-muxer=fifo --enable-muxer=framehash --enable-muxer=h264 --enable-muxer=hevc --enable-muxer=mp3 --enable-muxer=scc --enable-muxer=image2 --enable-muxer=gif --enable-muxer=ipod --enable-muxer=adts --disable-demuxers --enable-demuxer=aac --enable-demuxer=concat --enable-demuxer=data --enable-demuxer=flv --enable-demuxer=hls --enable-demuxer=live_flv --enable-demuxer=mov --enable-demuxer=mpegps --enable-demuxer=mpegts --enable-demuxer=mpegvideo --enable-demuxer=mpegtsraw --enable-demuxer=rawvideo --enable-demuxer=wav --enable-demuxer=gif --enable-demuxer=h264 --enable-demuxer=hevc --enable-demuxer=flac --enable-demuxer='pcm*' --enable-demuxer=mp3 --enable-demuxer=image2 --enable-demuxer=matroska --enable-demuxer=avi --disable-parsers --enable-parser=aac --enable-parser=aac_latm --enable-parser=h264 --enable-parser=hevc --enable-parser='mpeg*' --enable-parser=mjpeg --enable-bsfs --disable-bsf=text2movsub --disable-bsf=mjpeg2jpeg --disable-bsf=mjpega_dump_header --disable-bsf=mov2textsub --disable-bsf=imx_dump_header --disable-bsf=chomp --disable-bsf=noise --disable-bsf=dump_extradata --disable-bsf=remove_extradata --disable-bsf=dca_core --disable-protocols --enable-protocol=async --enable-protocol=rtmp --enable-protocol=rtmpt --enable-protocol=file --enable-protocol=pipe --enable-protocol=hls --enable-protocol='tls*' --enable-protocol='http*' --enable-protocol=hls --enable-protocol=md5 --enable-protocol=tcp --enable-protocol=udp --enable-protocol=kcp --enable-protocol=mediadatasource --enable-protocol=subfile --enable-protocol=prompeg --enable-protocol=crypto --enable-protocol=mem --enable-drm --disable-devices --disable-filters --enable-filter=amix --enable-filter=aformat --enable-filter=scale --enable-filter=format --enable-filter=aformat --enable-filter=fps --enable-filter=trim --enable-filter=atrim --enable-filter=vflip --enable-filter=hflip --enable-filter=transpose --enable-filter=rotate --enable-filter=yadif --enable-filter=pan --enable-filter=volume --enable-filter=aresample --enable-filter=atempo --enable-filter=asetrate --enable-filter=setpts --enable-filter=overlay --enable-filter=paletteuse --enable-filter=areverse --enable-filter=anull --enable-filter=palettegen --enable-decoder=h263 --enable-decoder=mpeg4 --enable-decoder=amrnb --enable-decoder=amrwb --enable-encoder=mjpeg --disable-iconv --disable-audiotoolbox --disable-videotoolbox --disable-armv5te --disable-armv6 --disable-armv6t2 --enable-libwebp --enable-libwebp_extra_static --enable-encoder=libwebp --enable-muxer=webp --prefix=/Users/machao/Documents/work/bytedance/ttmp_ffmpeg/aweme_ffmpeg/ttffmpeg/android/contrib/build/ffmpeg-arm64/output --cross-prefix=aarch64-linux-android- --enable-cross-compile --target-os=android --enable-pic --enable-asm --enable-inline-asm --enable-optimizations --enable-debug --enable-small --extra-cflags='-O3 -Wall -pipe -std=c99 -ffast-math -fstrict-aliasing -Werror=strict-aliasing -Wno-psabi -Wa,--noexecstack -DANDROID -DNDEBUG -I/Users/machao/Documents/work/bytedance/ttmp_ffmpeg/aweme_ffmpeg/ttffmpeg/android/contrib/build/openssl-arm64/output/include -I/Users/machao/Documents/work/bytedance/ttmp_ffmpeg/aweme_ffmpeg/ttffmpeg/android/contrib/build/libwebp-arm64/output/include ' --extra-ldflags=' -L/Users/machao/Documents/work/bytedance/ttmp_ffmpeg/aweme_ffmpeg/ttffmpeg/android/contrib/build/openssl-arm64/output/lib -lttopenssl -L/Users/machao/Documents/work/bytedance/ttmp_ffmpeg/aweme_ffmpeg/ttffmpeg/android/contrib/build/libwebp-arm64/output/lib -lwebp -lwebpmux -limagedec -limageenc -lwebpdecoder_static -limageio_util '", "libavcodec license: LGPL version 2.1 or later", "top first", "bottom first", "top coded first (swapped)", "bottom coded first (swapped)", " (%s)", ", %d reference frame%s", " (%s / 0x%04X)", "%d bpc, ", "%s/%s/%s, ", " (%dx%d)", " [SAR %d:%d DAR %d:%d]", ", q=%d-%d", ", Closed Captions", ", lossless", "%d Hz, ", ", %s", " (%d bit)", ", delay %d", ", padding %d", ", %dx%d", ", pass 1", ", pass 2", ", %ld kb/s", ", max. %ld kb/s", "If you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n", "%s is not implemented. Update your FFmpeg version to the newest one from Git. If the problem still occurs, it means that your file has a feature which has not been implemented.\n", "Format returned from get_buffer() does not match the format of provided AVHWFramesContext\n", "Ignoring experimental hwaccel: %s\n", "choices[n] != AV_PIX_FMT_NONE", "Could not find an AVHWAccel for the pixel format: %s", "Insufficient thread locking. At least %d threads are calling avcodec_open2() at the same time right now.\n", "No lock manager is set, please see av_lockmgr_register()\n", "!ff_avcodec_locked", "!dst->progress", "No codec provided to avcodec_open2()\n", "This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\n", "Codec (%s) not on whitelist '%s'\n", "Ignoring invalid width/height values\n", "Codec type or id mismatches\n", "The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\n", "Alternatively use the non experimental %s '%s'.\n", "The maximum value for lowres supported by the decoder is %d\n", "The 'vismv' option is deprecated, see the codecview filter instead.\n", "The encoder timebase is not set.\n", "Specified sample format %s is invalid or not supported\n", "Specified pixel format %s is invalid or not supported\n", "Specified sample rate %d is not supported\n", "Channel layout not specified\n", "Channel layout '%s' with %d channels does not match number of specified channels %d\n", "Specified number of channels %d is not supported\n", "Specified bit depth %d not possible with the specified pixel formats depth %d\n", "dimensions not set\n", "Bitrate %ld is extremely low, maybe you mean %ldk\n", "ticks_per_frame %d too large for the timebase %d/%d.", "Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n", "Mismatching AVCodecContext.sw_pix_fmt (%s) and AVHWFramesContext.sw_format (%s)\n", "gray decoding requested but not enabled at configuration time\n", "Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\n", "Character encoding is only supported with subtitles codecs\n", "Codec '%s' is bitmap-based, subtitles character encoding will be ignored\n", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "*(const AVClass **)avctx->priv_data == codec->priv_class", "Specified channel layout '%s' is not supported\n", "p <= end", "av_vorbis_parse_frame_flags", "vorbis_parse_init", "parse_id_header", "parse_setup_header", "libavcodec/vorbis_parser.c", "Invalid packet\n", "Invalid mode in packet\n", "Extradata corrupt.\n", "Id header is too short\n", "Wrong packet type in Id header\n", "Invalid packet signature in Id header\n", "Invalid framing bit in Id header\n", "Setup header is too short\n", "Wrong packet type in Setup header\n", "Invalid packet signature in Setup header\n", "Out of memory\n", "Invalid Setup header\n", "%d modes (either a false positive or a sample from an unknown encoder)", "Unsupported mode count: %d\n", "Vorbis parser", "vp9_superframe_filter", "merge_superframe", "libavcodec/vp9_superframe_bsf.c", "Mixing of superframe syntax and naked VP9 frames not supported", "Too many invisible frames", "s->n_cache > 0", "ptr == &out->data[out->size]", "vp9_superframe", "init", "libavfilter/af_aformat.c", "This syntax is deprecated, use '|' to separate %s.\n", "Error parsing sample format: %s.\n", "Error parsing sample rate: %s.\n", "Error parsing channel layout: %s.\n", "aformat", "sample_fmts", "A '|'-separated list of sample formats.", "sample_rates", "A '|'-separated list of sample rates.", "channel_layouts", "A '|'-separated list of channel layouts.", "config_output", "frame_list_remove_samples", "frame_list_add_frame", "filter_frame", "request_samples", "request_frame", "input%d", "libavfilter/af_amix.c", "inputs:%d fmt:%s srate:%d cl:%s\n", "frame_list->end", "unknown input link\n", "s->nb_inputs > 1", "s->frame_list->nb_frames > 0", "amix", "inputs", "Number of inputs.", "How to determine the end-of-stream.", "longest", "Duration of longest input.", "shortest", "Duration of shortest input.", "Duration of first input.", "dropout_transition", "Transition time, in seconds, for volume renormalization when an input stream ends.", "anull", "config_output", "libavfilter/af_aresample.c", "outlink->sample_rate == out_rate", "outlink->channel_layout == out_layout || !outlink->channel_layout", "outlink->format == out_format", "ch:%d chl:%s fmt:%s r:%dHz -> ch:%d chl:%s fmt:%s r:%dHz\n", "aresample", "config_props", "libavfilter/af_asetrate.c", "Time base is inaccurate\n", "asetrate", "set the sample rate", "yae_set_tempo", "yae_overlap_add", "yae_load_data", "yae_load_frag", "yae_flush", "libavfilter/af_atempo.c", "Invalid tempo value '%s'\n", "Tempo value %f exceeds [0.5, 2.0] range\n", "start_here <= stop_here && frag->position[1] <= start_here && overlap <= frag->nsamples", "read_size <= atempo->ring", "atempo->position[0] <= stop_here", "zeros != nsamples", "nsamples <= zeros + na + nb", "pot <= atempo->window", "start_here <= stop_here && frag->position[1] <= start_here", "atempo", "set tempo scale factor", "init", "config_props", "%7[A-Z]%n", "c%d%n", "libavfilter/af_pan.c", "pan filter needs a channel layout and a set of channel definitions as parameter\n", "Expected out channel name, got \"%.8s\"\n", "Channel \"%.8s\" does not exist in the chosen layout\n", "Invalid out channel name \"%.8s\"\n", "Syntax error after channel name in \"%.8s\"\n", "%lf%n *%n", "Expected in channel name, got \"%.8s\"\n", "Can not mix named and numbered channels\n", "Syntax error near \"%.8s\"\n", "af_pan supports a maximum of %d channels. Feel free to ask for a higher limit.\n", "Degenerate coefficients while renormalizing\n", "%s%.3g i%d", "o%d = %s\n", "Pure channel mapping detected:", "args", "set_expr", "set_volume", "config_output", "filter_frame", "libavfilter/af_volume.c", "Error when evaluating the volume expression '%s'\n", "n:%f t:%f pts:%f precision:%s ", "volume_i:%d/255 ", "volume:%f volume_dB:%f\n", "tb:%f sample_rate:%f nb_channels:%f\n", "Both ReplayGain gain values are unknown.\n", "Using gain %f dB from replaygain side data.\n", "set volume adjustment expression", "select mathematical precision", "fixed", "select 8-bit fixed-point", "select 32-bit floating-point", "select 64-bit floating-point", "eval", "specify when to evaluate expressions", "eval volume expression once", "eval volume expression per-frame", "replaygain", "Apply replaygain side data when present", "drop", "replaygain side data is dropped", "ignore", "replaygain side data is ignored", "track gain is preferred", "album gain is preferred", "replaygain_preamp", "Apply replaygain pre-amplification", "replaygain_noclip", "Apply replaygain clipping prevention", "nb_channels", "nb_consumed_samples", "nb_samples", "startpts", "startt", "ff_default_get_audio_buffer", "libavfilter/audio.c", "channels == av_get_channel_layout_nb_channels(link->channel_layout) || !av_get_channel_layout_nb_channels(link->channel_layout)", "set_enable_expr", "process_options", "avfilter_link", "ff_avfilter_link_set_in_status", "avfilter_insert_filter", "avfilter_config_links", "ff_avfilter_link_set_out_status", "avfilter_process_command", "avfilter_register", "avfilter_init_dict", "avfilter_init_str", "ff_filter_frame", "ff_inlink_make_frame_writable", "ff_inlink_process_commands", "FFmpeg version 3.3.2", "libavfilter/avfilter.c", "Timeline ('enable' option) not supported with filter '%s'\n", "Error when evaluating the expression '%s' for enable\n", "No option name near '%s'\n", "Unable to parse '%s': %s\n", "Setting '%s' to value '%s'\n", "Option '%s' not found\n", "libavfilter license: LGPL version 2.1 or later", "src->graph", "src->graph == dst->graph", "Media type mismatch between the '%s' filter output pad %d (%s) and the '%s' filter input pad %d (%s)\n", "!link->status_in", "auto-inserting filter '%s' between the filter '%s' and the filter '%s'\n", "Not all input and output are properly linked (%d).\n", "circular filter chain detected\n", "Source filters and filters with more than one input must set config_props() callbacks on all outputs\n", "Failed to configure output pad on %s\n", "Video source filters must set their output link's width and height\n", "!link->hw_frames_ctx && \"should not be set by non-hwframe-aware filter\"", "Failed to configure input pad on %s\n", "!link->frame_wanted_out", "!link->status_out", "pong from:%s %s\n", "enable", "(filter->flags & ((1 << 16) | (1 << 17))) != ((1 << 16) | (1 << 17))", "Error applying generic filter options.\n", "Error applying options to the filter.\n", "This filter does not take any options, but options were provided: %s.\n", "noformat", "frei0r", "frei0r_src", "aevalsrc", "This syntax is deprecated. Use '|' to separate the list items.\n", "compat: called with args=[%s]\n", "No such option: %s.\n", "Format change is not supported\n", "Channel count change is not supported\n", "Channel layout change is not supported\n", "Sample rate change is not supported\n", "Copying data in avfilter.\n", "!\"reached\"", "Processing command time:%f command:%s arg:%s\n", "AVFilter", "Allowed thread types", "set enable expression", "Allowed number of threads", "heap_bubble_down", "pick_format", "sanitize_channel_layouts", "filter_query_formats", "avfilter_graph_alloc_filter", "query_formats", "graph_check_validity", "graph_config_formats", "swap_sample_fmts_on_filter", "swap_samplerates_on_filter", "swap_channel_layouts_on_filter", "graph_config_pointers", "heap_bubble_up", "ff_filter_graph_run_once", "avfilter_graph_request_oldest", "libavfilter/avfiltergraph.c", "picking %s out of %d ref:%s alpha:%d\n", "picking %s out of %d ref:%s\n", "Cannot select sample rate for the link between filters %s and %s.\n", "Cannot select channel layout for the link between filters %s and %s.\n", "Unknown channel layouts not supported, try specifying a channel layout using 'aformat=channel_layouts=something'.\n", "All layouts set on non-empty list\n", "All counts without all layouts\n", "Query format failed for '%s': %s\n", "Error initializing threading.\n", "The filters '%s' and '%s' do not have a common format and automatic conversion is disabled.\n", "'scale' filter not present, cannot convert pixel formats.\n", "auto_scaler_%d", "'aresample' filter not present, cannot convert audio formats.\n", "auto_resampler_%d", "inlink-> in_formats->refcount > 0", "inlink->out_formats->refcount > 0", "outlink-> in_formats->refcount > 0", "outlink->out_formats->refcount > 0", "inlink-> in_samplerates->refcount > 0", "inlink->out_samplerates->refcount > 0", "outlink-> in_samplerates->refcount > 0", "outlink->out_samplerates->refcount > 0", "inlink-> in_channel_layouts->refcount > 0", "inlink->out_channel_layouts->refcount > 0", "outlink-> in_channel_layouts->refcount > 0", "outlink->out_channel_layouts->refcount > 0", "Impossible to convert between the formats supported by the filter '%s' and the filter '%s'\n", "query_formats: %d queried, %d merged, %d already done, %d delayed\n", "The following filters could not choose their formats: %s\nConsider inserting the (a)format filter near their input or output.\n", "Input pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any source\n", "Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n", "afifo", "auto_fifo_%d", "query_formats not finished\n", "best_idx >= 0", "diff < 2147483647", "n == sink_links_count", "graph->nb_filters", "EOF on sink link %s:%s.\n", "AVFilterGraph", "Maximum number of threads", "scale_sws_opts", "default scale filter options", "aresample_swr_opts", "default aresample filter options", "activate", "vsink_query_formats", "asink_query_formats", "av_buffersink_get_type", "av_buffersink_get_time_base", "av_buffersink_get_format", "av_buffersink_get_frame_rate", "av_buffersink_get_w", "av_buffersink_get_h", "av_buffersink_get_sample_aspect_ratio", "av_buffersink_get_channels", "av_buffersink_get_channel_layout", "av_buffersink_get_sample_rate", "av_buffersink_get_hw_frames_ctx", "libavfilter/buffersink.c", "%d buffers queued in %s, something may be wrong.\n", "pix_fmts", "Invalid size for pixel_fmts: %d, should be multiple of %d\n", "all_channel_counts", "Invalid size for sample_fmts: %d, should be multiple of %d\n", "Invalid size for sample_rates: %d, should be multiple of %d\n", "Invalid size for channel_layouts: %d, should be multiple of %d\n", "Invalid size for channel_counts: %d, should be multiple of %d\n", "Conflicting all_channel_counts and list in options\n", "ctx->filter->activate == activate", "abuffersink", "set the supported sample formats", "set the supported sample rates", "set the supported channel layouts", "set the supported channel counts", "accept all channel counts", "set the supported pixel formats", "init_video", "init_audio", "av_buffersrc_add_frame_internal", "av_buffersrc_add_frame_flags", "libavfilter/buffersrc.c", "Invalid parameters provided.\n", "w:%d h:%d pixfmt:%s tb:%d/%d fr:%d/%d sar:%d/%d sws_param:%s\n", "Sample format was not set or was invalid\n", "Invalid channel layout %s.\n", "Mismatching channel count %d and layout '%s' (%d channels)\n", "Neither number of channels nor channel layout specified\n", "tb:%d/%d samplefmt:%s samplerate:%d chlayout:%s\n", "Changing frame properties on the fly is not supported by all filters.\n", "Changing frame properties on the fly is not supported.\n", "Layout indicates a different number of channels than actually present\n", "abuffer", "pix_fmt", "time_base_num", "deprecated, do not use", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "ff_fill_line_with_color", "ff_draw_color", "libavfilter/drawutils.c", "pix_desc", "Color conversion not implemented for %s\n", "process_frame", "libavfilter/dualinput.c", "mainpic", "areverse", "buffer_offset", "return_audio_frame", "libavfilter/fifo.c", "frame->nb_samples > offset", "request_samples changed before the buffer was returned.\n", "ff_merge_formats", "ff_merge_samplerates", "ff_parse_pixel_format", "ff_parse_sample_format", "ff_parse_time_base", "ff_parse_sample_rate", "ff_parse_channel_layout", "Duplicate formats in avfilter_merge_formats() detected\n", "Invalid pixel format '%s'\n", "Invalid sample format '%s'\n", "Invalid time base '%s'\n", "Invalid sample rate '%s'\n", "Deprecated channel count specification '%s'. This will stop working in releases made in 2018 and after.\n", "Invalid channel layout '%s'\n", "Unknown channel layout '%s' is not supported.\n", "ff_frame_pool_get_video_config", "ff_frame_pool_get_audio_config", "ff_frame_pool_get", "libavfilter/framepool.c", "pool->type == AVMEDIA_TYPE_VIDEO", "pool->type == AVMEDIA_TYPE_AUDIO", "frame->data[1] != ((void *)0)", "framesync_sync_level_update", "ff_bufqueue_get", "framesync_inject_frame", "ff_framesync_configure", "ff_bufqueue_add", "ff_framesync_next", "ff_framesync_process_frame", "framesync", "libavfilter/framesync.c", "level <= fs->sync_level", "Sync level %u\n", "libavfilter/bufferqueue.h", "queue->available", "!fs->in[in].have_next", "Impossible to set time base\n", "Selected %d/%d time base\n", "Buffer queue overflow, dropping.\n", "!fs->frame_ready", "fs->on_event", "[%dx%d %d:%d %s]", "[%dHz %s:%s]", "%s:%s", "%*s%-*s", "%*s(%s)%*s", "parse_sws_flags", "parse_link_name", "create_filter", "parse_outputs", "link_filter", "link_filter_inouts", "avfilter_graph_parse2", "avfilter_graph_parse", "avfilter_graph_parse_ptr", "sws_flags=", "libavfilter/graphparser.c", "sws_flags not terminated with ';'.\n", "Bad (empty?) label found in the following: \"%s\".\n", "Mismatched '[' found in the following: \"%s\".\n", " \n\t\r", "=,;[", "[],;", "Parsed_%s_%d", "No such filter: '%s'\n", "Error creating filter '%s'\n", "Error initializing filter '%s'", " with args '%s'", "No output pad can be associated to link label '%s'.\n", "Cannot create the link %s:%d -> %s:%d\n", "Too many inputs specified for the \"%s\" filter.\n", "Unable to parse graph description substring: \"%s\"\n", "Not enough inputs specified for the \"%s\" filter.\n", "Invalid filterchain containing an unlabelled output pad: \"%s\"\n", "[in]", "[out]", "ff_scale_eval_dimensions", "libavfilter/scale.c", "Error when evaluating the expression '%s'.\nMaybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n", "out_w", "out_h", "ohsub", "ovsub", "init", "config_input", "filter_frame", "libavfilter/setpts.c", "Error while parsing expression '%s'\n", "TB:%f FRAME_RATE:%f SAMPLE_RATE:%f\n", "N:%ld PTS:%s T:%f POS:%s", " INTERLACED:%ld", " NB_SAMPLES:%ld NB_CONSUMED_SAMPLES:%ld", " -> PTS:%s T:%f\n", "setpts", "expr", "Expression determining the frame timestamp", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "atrim_filter_frame", "libavfilter/trim.c", "start_sample < end_sample || (start_sample == end_sample && !frame->nb_samples)", "atrim", "Timestamp of the first frame that should be passed", "starti", "Timestamp of the first frame that should be dropped again", "endi", "start_pts", "Timestamp of the first frame that should be  passed", "end_pts", "Maximum duration of the output", "durationi", "start_sample", "Number of the first audio sample that should be passed to the output", "end_sample", "Number of the first audio sample that should be dropped again", "start_frame", "Number of the first frame that should be passed to the output", "Number of the first frame that should be dropped again", "init", "libavfilter/vf_format.c", "Empty output format string.\n", "A '|'-separated list of pixel formats", "uninit", "init", "filter_frame", "libavfilter/vf_fps.c", "%d frames in, %d frames out; %d frames dropped, %d frames duplicated.\n", "fps=%d/%d\n", "Set first pts to (in:%ld out:%ld)\n", "Discarding initial frame(s) with no timestamp.\n", "Dropping %d frame(s).\n", "Duplicating frame.\n", "A string describing desired output framerate", "Assume the first PTS should be this value.", "set rounding method for timestamps", "round towards 0", "round away from 0", "down", "round towards -infty", "round towards +infty", "round to nearest", "hflip", "init", "set_expr", "filter_frame", "process_command", "do_blend", "config_input_overlay", "libavfilter/vf_overlay.c", "The rgb option is deprecated and is overriding the format option, use format instead\n", "Error when evaluating the expression '%s' for %s\n", "NOPTS", "%.6g", "Incoming frame (time:%s) from link #%d\n", "n:%f t:%f pos:%f x:%f xi:%d y:%f yi:%d\n", "main w:%d h:%d fmt:%s overlay w:%d h:%d fmt:%s eof_action:%s\n", "overlay", "set the x expression", "set the y expression", "eof_action", "Action to take when encountering EOF from secondary input ", "repeat", "Repeat the previous frame.", "endall", "End both streams.", "Pass through the main input.", "init", "eval expressions once during initialization", "eval expressions per-frame", "force packed RGB in input and output (deprecated)", "force termination when the shortest input terminates", "set output format", "yuv420", "yuv422", "yuv444", "gbrp", "repeatlast", "repeat overlay of the last overlay frame", "main_w", "main_h", "overlay_w", "overlay_h", "split_box", "write_palette", "(+1)", "libavfilter/vf_palettegen.c", "Unable to allocate references for %d different colors\n", "new_box->len >= 1", "lavfi.color_quant_ratio", "%d%s colors generated out of %d colors; ratio=%f\n", "Dupped color: %08X\n", "s->nb_boxes < 256", "palettegen", "max_colors", "set the maximum number of colors to use in the palette", "reserve_transparent", "reserve a palette entry for transparency", "stats_mode", "set statistics mode", "compute full frame histograms", "compute histograms only for the part that differs from previous frame", "single", "compute new histogram for each frame", "disp_tree", "debug_accuracy", "load_colormap", "debug_mean_error", "libavfilter/vf_paletteuse.c", "Palette input must contain exactly %d pixels. Specified input has %dx%d=%d pixels\n", "%*cnode%d [label=\"%c%02X%c%02X%c%02X%c\" fillcolor=\"#%02x%02x%02x\" fontcolor=\"#%06X\"]\n", "%*cnode%d -> node%d\n", "Cannot open file '%s' for writing: %s\n", "digraph {\n", "    node [style=filled fontsize=10 shape=box]\n", "/!\\ %02X%02X%02X: %d ! %d (%06X ! %06X) / dist: %d ! %d\n", "Accuracy check passed\n", "MEP:%.3f TotalMEP:%.3f\n", "paletteuse", "select dithering mode", "dithering_mode", "bayer", "ordered 8x8 bayer dithering (deterministic)", "heckbert", "dithering as defined by Paul Heckbert in 1982 (simple error diffusion)", "floyd_steinberg", "Floyd and Steingberg dithering (error diffusion)", "sierra2", "Frankie Sierra dithering v2 (error diffusion)", "sierra2_4a", "Frankie Sierra dithering v2 \"Lite\" (error diffusion)", "bayer_scale", "set scale for bayer dithering", "diff_mode", "set frame difference mode", "process smallest different rectangle", "debug_kdtree", "save Graphviz graph of the kdtree in specified file", "color_search", "set reverse colormap color search method", "nns_iterative", "iterative search", "nns_recursive", "recursive search", "bruteforce", "brute-force into the palette", "mean_err", "compute and print mean error", "debug_accuracy", "test color search accuracy", "take new palette for each output frame", "config_props", "filter_frame", "libavfilter/vf_rotate.c", "Error when parsing the expression '%s' for angle command\n", "Error occurred parsing angle expression '%s'\n", "Error parsing or evaluating expression for option %s: invalid expression '%s' or non-positive or indefinite value %f\n", "n:%f time:%f angle:%f/PI\n", "rotate", "rotw", "roth", "set angle (in radians)", "set output width expression", "set output height expression", "fillcolor", "set background fill color", "black", "use bilinear interpolation", "config_props", "init_dict", "filter_frame", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "libavfilter/vf_scale.c", "w:%d h:%d fmt:%s sar:%d/%d -> w:%d h:%d fmt:%s sar:%d/%d flags:0x%0x\n", "Size and width/height expressions cannot be set at the same time.\n", "Invalid size '%s'\n", "w:%s h:%s flags:'%s' interl:%d\n", "bt601", "bt470", "Detected unsupported YCgCo colorspace.\n", "scale2ref", "Output video width", "Output video height", "Flags to pass to libswscale", "interl", "set interlacing", "in_color_matrix", "set input YCbCr type", "out_color_matrix", "set output YCbCr type", "in_range", "set input color range", "out_range", "set output color range", "in_v_chr_pos", "input vertical chroma position in luma grid/256", "in_h_chr_pos", "input horizontal chroma position in luma grid/256", "out_v_chr_pos", "output vertical chroma position in luma grid/256", "out_h_chr_pos", "output horizontal chroma position in luma grid/256", "force_original_aspect_ratio", "decrease or increase w/h if necessary to keep the original AR", "force_oar", "disable", "decrease", "increase", "Scaler param 0", "Scaler param 1", "nb_slices", "set the number of slices (debug purpose only)", "eval expressions during initialization and per-frame", "config_props_output", "counterclockwise", "libavfilter/vf_transpose.c", "dir values greater than 3 are deprecated, use the passthrough option instead\n", "w:%d h:%d -> w:%d h:%d (passthrough mode)\n", "desc_in->nb_components == desc_out->nb_components", "w:%d h:%d dir:%d -> w:%d h:%d rotation:%s vflip:%d\n", "transpose", "set transpose direction", "cclock_flip", "rotate counter-clockwise with vertical flip", "rotate clockwise", "cclock", "rotate counter-clockwise", "rotate clockwise with vertical flip", "passthrough", "do not apply transposition if the input matches the specified geometry", "always apply transposition", "portrait", "preserve portrait geometry", "landscape", "preserve landscape geometry", "vflip", "filter_frame", "libavfilter/vf_yadif.c", "Video of less than 3 columns or lines is not supported\n", "Failed to reallocate frame\n", "Reallocating frame due to differing stride\n", "yadif", "specify the interlacing mode", "send_frame", "send one frame for each frame", "send_field", "send one frame for each field", "send_frame_nospatial", "send one frame for each frame, but skip spatial interlacing check", "send_field_nospatial", "send one frame for each field, but skip spatial interlacing check", "specify the assumed picture field parity", "assume top field first", "assume bottom field first", "auto detect parity", "deint", "specify which frames to deinterlace", "deinterlace all frames", "only deinterlace frames marked as interlaced", "audio/aac,audio/aacp,audio/x-aac", "put_bits", "flush_put_bits", "adts_write_frame_header", "adts_decode_extradata", "./libavcodec/put_bits.h", "libavformat/adtsenc.c", "ADTS frame size too large: %u (max %d)\n", "MPEG-4 AOT %d is not allowed in ADTS\n", "Escape sample rate index illegal in ADTS\n", "960/120 MDCT window is not allowed in ADTS\n", "Scalable configurations are not allowed in ADTS\n", "Extension flag is not allowed in ADTS\n", "audio/aac", "aac,adts", "ADTS muxer", "write_id3v2", "Enable ID3v2 tag writing", "write_apetag", "Enable APE tag writing", "ape_tag_read_field", "ff_ape_parse_tag", "ff_ape_write_tag", "libavformat/apetag.c", "Invalid APE tag key '%s'.\n", "APE tag size too large.\n", "Skipping binary tag '%s'.\n", "Error reading cover art.\n", "APETAGEX", "Unsupported tag version. (>=%d)\n", "Tag size is way too big\n", "Invalid tag size %u.\n", "Too many tag fields (%u)\n", "APE Tag is a header\n", "Non ASCII keys are not allowed\n", "async_close", "async_open", "async_seek", "libavformat/async.c", "pthread_join(): %s\n", "async:", "ffurl_open failed : %s, %s\n", "pthread_mutex_init failed : %s\n", "pthread_cond_init failed : %s\n", "pthread_create failed : %s\n", "async_seek: AVSEEK_SIZE: %ld\n", "async_seek: %ld\n", "async_seek: fask_seek %ld from %d dist:%d/%d\n", "async", "Async", "read_odml_index", "avi_sync", "avi_load_index", "avi_read_idx1", "avi_read_seek", "get_riff", "avi_read_header", "bytestream2_init", "ni_prepare_read", "avi_read_packet", "GAB2", "libavformat/avidec.c", "longs_per_entry:%d index_type:%d entries_in_use:%d chunk_id:%X base:%16lX frame_num:%d\n", "ODML index invalid\n", "pos:%ld, len:%X\n", "Too deeply nested ODML indexes\n", "Failed to restore position after reading index\n", "Skipping foreign stream %d packet\n", "Invalid stream + prefix combination, assuming audio.\n", "movi_end=0x%lx\n", "%d: tag=0x%x flags=0x%x pos=0x%lx len=%d/", "%d cum_len=%ld\n", "MMES", "stream_index >= 0", "Failed to find timestamp %ld in index %ld .. %ld\n", "XX %ld %d %ld\n", "Seek failed\n", "creation_time", "maker", "This file has been generated by a totally broken muxer.\n", "use odml:%d\n", "pos:%lX %s: tag=%s size=0x%x\n", "movi end=%lx\n", "%*3s%*[ ]%3s%*[ ]%2d%*[ ]%8s%*[ ]%4d", "%.4d-%.2d-%.2d %s", "strh", "stream_index < s->nb_streams", "scale/rate is %u/%u which is invalid. (This file has been generated by broken software.)\n", "crazy start time, iam scared, giving up\n", "%u %u %d\n", "unknown stream type %X\n", "Invalid sample_size %d at stream %d\n", "Invalid sample_size %d at stream %d setting it to 0\n", "File is truncated adjusting duration\n", "New extradata in strf chunk, freeing previous one.\n", "mov tag found in avi (fourcc %s)\n", "sample size (%d) != block align (%d)\n", "overriding invalid dshow_block_align of %d\n", "overriding sample_size\n", "New extradata in strd chunk, freeing previous one.\n", "./libavcodec/bytestream.h", "RIFF stream data tag type CASI (%u)", "RIFF stream data tag type Zora (%u)", "could not decoding EXIF data in stream header.\n", "vprp %d/%d %d/%d\n", "Something went wrong during header parsing, tag %s has size %u, I will ignore it and try to continue anyway.\n", "PotEncoder", "Non-interleaved AVI without index, switching to interleaved\n", "non-interleaved AVI\n", "ISFT", "Axan", "%ld %d/%d %ld\n", "best_ast->remaining <= best_ast->packet_size", "Failed to allocate data for palette\n", "Switching to NI mode, due to poor interleaving\n", "strn", "use_odml", "use odml index", "ffurl_accept", "url_alloc_for_protocol", "ffurl_alloc", "ffurl_seek", "ffurl_connect", "ffurl_open_whitelist", "avpriv_io_move", "avpriv_io_delete", "avio_open_dir", "avio_close_dir", "ffurl_get_multi_file_handle", "retry_transfer_wrapper", "ffurl_read", "ffurl_read_complete", "ffurl_write", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.", "subfile,", "libavformat/avio.c", "AVERROR(EBADF)", "AVERROR(EIO)", "Impossible to open the '%s' protocol for reading\n", "Impossible to open the '%s' protocol for writing\n", "AVERROR(ENOMEM)", "subfile", "AVERROR(EINVAL)", "AVERROR_OPTION_NOT_FOUND", "Key '%s' not found.\n", "Error parsing options string %s\n", "https:", "https protocol not found, recompile FFmpeg with openssl, gnutls or securetransport enabled.\n", "AVERROR(ENOSYS)", "protocol_whitelist", "!(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || (uc->protocol_whitelist && !strcmp(uc->protocol_whitelist, e->value))", "!(e=av_dict_get(*options, \"protocol_blacklist\", ((void *)0), 0)) || (uc->protocol_blacklist && !strcmp(uc->protocol_blacklist, e->value))", "Protocol '%s' not on whitelist '%s'!\n", "Protocol '%s' on blacklist '%s'!\n", "Setting default whitelist '%s'\n", "No default whitelist set\n", "err:%d", "ret:%d", "!whitelist || !(e=av_dict_get(*options, \"protocol_whitelist\", ((void *)0), 0)) || !strcmp(whitelist, e->value)", "!blacklist || !(e=av_dict_get(*options, \"protocol_blacklist\", ((void *)0), 0)) || !strcmp(blacklist, e->value)", "URLContext", "List of protocols that are allowed to be used", "List of protocols that are not allowed to be used", "rw_timeout", "Timeout for IO operations (in microseconds)", "put_str16", "ffio_ensure_seekback", "fill_buffer", "avio_close", "ffio_open_whitelist", "libavformat/aviobuf.c", "Invalid UTF8 sequence in avio_put_str16%s\n", "!s->write_flag", "Failed to decrease buffer size\n", "len >= s->orig_buffer_size", "Statistics: %d seeks, %d writeouts\n", "Statistics: %ld bytes read, %d seeks\n", "AVIOContext", "set aptr", "av_check_hijack_vid", "av_check_hijack", "http://", "cfhp://", "comment", "libavformat/check_hijack.c", "hijack: check vid failed, check_info:%s comment:%s\n", "hijack check failed, ret:%d\n", "match_streams_exact_id", "detect_stream_specific", "open_file", "concat_read_header", "add_file", "filter_packet", "concat_read_packet", "libavformat/concatdec.c", "Match slave stream #%d with stream #%d id 0x%x\n", "Auto-inserting h264_mp4toannexb bitstream filter\n", "h264_mp4toannexb bitstream filter required for H.264 streams\n", "cur_file_no", "skip-calc-frame-rate", "Impossible to open '%s'\n", "lavf.concatdec.start_time", "lavf.concatdec.duration", "ffconcat version 1.0", " \t\r\n", "Line %d: filename required\n", "inpoint", "outpoint", "Line %d: %s without file\n", "Line %d: invalid %s '%s'\n", "file_packet_metadata", "Line %d: packet metadata required\n", "Line %d: failed to parse metadata string\n", "exact_stream_id", "Line %d: exact_stream_id without stream\n", "ffconcat", "Line %d: invalid version\n", "Line %d: unknown keyword '%s'\n", "Unsafe file name '%s'\n", "pkt2.buf", "open_next_file() failed (%d)\n", "file:%d stream:%d pts:%s pts_time:%s dts:%s dts_time:%s", " -> pts:%s pts_time:%s dts:%s dts_time:%s\n", "concat demuxer", "safe", "enable safe mode", "auto_convert", "automatically convert bitstream format", "segment_time_metadata", "output file segment start time and duration as packet metadata", "crypto_seek", "unknown error", "set_aes_arg", "crypto_open2", "libavformat/crypto.c", "Crypto: seek not supported for write\r\n", "Crypto: seek_end - can't get file size (pos=%lld)\r\n", "Crypto: no support for seek where 'whence' is %d\r\n", "Crypto: nested protocol no support for seek or seek failed\n", "Crypto: discard read did not get all the bytes (%d remain) - read returned (%d)-%s\n", "%s not set\n", "invalid %s size (%d bytes, block size is %d)\n", "crypto+", "crypto:", "Unsupported url %s\n", "decryption IV", "encryption IV", "Unable to open resource: %s\n", "AES encryption/decryption key", "AES encryption/decryption initialization vector", "decryption_key", "AES decryption key", "decryption_iv", "AES decryption initialization vector", "encryption_key", "AES encryption key", "encryption_iv", "AES encryption initialization vector", "hex_dump_internal", "pkt_dump_internal", "print_fps", "print_peak", "print_gain", "dump_metadata", "dump_stream_format", "dump_sidedata", "dump_paramchange", "dump_replaygain", "dump_stereo3d", "dump_audioservicetype", "dump_cpb", "dump_mastering_display_metadata", "dump_spherical", "av_dump_format", "libavformat/dump.c", "%08x ", " %02x", "stream #%d:\n", "  keyframe=%d\n", "  duration=%0.3f\n", "  dts=", "%0.3f", "  pts=", "  size=%d\n", "%1.4f %s", "%3.2f %s", "%1.0f %s", "%1.0fk %s", "%s - ", "%sMetadata:\n", "language", "\n%s  %-16s: ", "fps, ", "tbr, ", "tbn, ", "    Stream #%d:%d", "[0x%x]", ", %d, %d/%d", ", SAR %d:%d DAR %d:%d", " (default)", " (dub)", " (original)", " (comment)", " (lyrics)", " (karaoke)", " (forced)", " (hearing impaired)", " (visual impaired)", " (clean effects)", "    ", "%sSide data:\n", "%s  ", "new extradata", "paramchange: ", "channel count %u, ", "channel layout: %s, ", "sample_rate %u, ", "width %u height %u", "unknown param", "H.263 macroblock info", "replaygain: ", "invalid data", "track gain", "track peak", "album gain", "album peak", "displaymatrix: rotation of %.2f degrees", "stereo3d: ", " (inverted)", "audio service type: ", "effects", "visually impaired", "hearing impaired", "dialogue", "comentary", "emergency", "voice over", "karaoke", "quality factor: %d, pict_type: %c", "cpb: ", "bitrate max/min/avg: %d/%d/%d buffer size: %d vbv_delay: %ld", "Mastering Display Metadata, has_primaries:%d has_luminance:%d r(%5.4f,%5.4f) g(%5.4f,%5.4f) b(%5.4f %5.4f) wp(%5.4f, %5.4f) min_luminance=%f, max_luminance=%f", "spherical: ", "(%f/%f/%f) ", "[%zu, %zu, %zu, %zu] ", "[pad %u] ", "unknown side data type %d (%d bytes)", "Output", "Input", "from", "%s #%d, %s, %s '%s':\n", "  Duration: ", "%02d:%02d:%02d.%02d", ", start: ", "%s%d.%06d", ", bitrate: ", "    Chapter #%d:%d: ", "start %f, ", "end %f\n", "  Program %d %s\n", "  No Program\n", "fifo_init", "fifo_write_trailer", "fifo_write_packet", "fifo_write_header", "fifo_thread_write_header", "fifo_thread_dispatch_message", "fifo_thread_write_packet", "fifo_thread_attempt_recovery", "fifo_thread_process_recovery_failure", "fifo_consumer_thread", "libavformat/fifo.c", "recovery_wait_streamtime can be turned on only when drop_pkts_on_overflow is also turned on\n", "Could not parse format options list '%s'\n", "pthread join error: %s\n", "FIFO queue full\n", "Failed to start thread: %s\n", "Error opening %s: %s\n", "Unknown option '%s'\n", "Keyframe received, recovering...\n", "Dropping non-keyframe packet\n", "Recovery attempt #%d/%d\n", "Recovery attempt #%d\n", "Recovery failed: %s\n", "Packet does not contain presentation timestamp, recovery will be attempted immediately", "Maximal number of %d recovery attempts reached.\n", "Recovery successful\n", "FIFO queue flushed\n", "Fifo muxer", "fifo_format", "Target muxer", "queue_size", "Size of fifo queue", "format_opts", "Options to be passed to underlying muxer", "drop_pkts_on_overflow", "Drop packets on fifo queue overflow not to block encoder", "restart_with_keyframe", "Wait for keyframe when restarting output", "attempt_recovery", "Attempt recovery in case of failure", "max_recovery_attempts", "Maximal number of recovery attempts", "recovery_wait_time", "Waiting time between recovery attempts", "recovery_wait_streamtime", "Use stream time instead of real time while waiting for recovery", "recover_any_error", "Attempt recovery regardless of type of the error", "pipe_open", "pipe:", "libavformat/file.c", "pipe open, offset: %lld, length: %lld", "file,crypto", "set I/O operation maximum block size", "set pipe fd startOffset", "set pipe fd declareLength", "truncate", "truncate existing files on write", "follow", "Follow a file as it is being written", "ff_flac_parse_picture", "libavformat/flac_picture.c", "Invalid picture type: %d.\n", "Could not read mimetype from an attached picture.\n", "Error reading attached picture description.\n", "Invalid attached picture size: %d.\n", "Error reading attached picture data.\n", "Unknown attached picture mimetype: %s.\n", "flac_read_header", "libavformat/flacdec.c", "Error parsing attached picture.\n", "error parsing VorbisComment metadata\n", "WAVEFORMATEXTENSIBLE_CHANNEL_MASK", "Invalid value of WAVEFORMATEXTENSIBLE_CHANNEL_MASK\n", "fLaC", "clear_index_entries", "flv_read_header", "add_keyframes_index", "amf_parse_object", "parse_keyframes_index", "flv_read_packet", "flv_read_metabody", "libavformat/flvdec.c", "Found invalid index entries, clearing the index.\n", "Read FLV header error, input file is not a standard flv format, first PreviousTagSize0 always is 0\n", "keyframe stream hasn't been created\n", "flv->last_keyframe_stream_index <= s->nb_streams", "keyframe filepositions = %ld times = %ld\n", "Skipping duplicate index\n", "Video codec (%x)", "Changing the codec id midstream", "NGINX RTMP", "Audio codec (%x)", "true", "false", "AMF_DATA_TYPE_STRING parsing failed\n", "keyframes have been paresed\n", "!flv->keyframe_times", "!flv->keyframe_filepositions", "Invalid keyframes object, skipping.\n", "Keyframe index parsing failed\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_OBJECT\n", "Missing AMF_END_OF_OBJECT in AMF_DATA_TYPE_MIXEDARRAY, found %d\n", "unsupported amf type %d\n", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "stereo", "Open Broadcaster Software v0.%d", "metadatacreator", "MEGA", "type:%d, size:%d, last:%d, dts:%ld pos:%ld\n", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "Unknown type %s\n", "Adjusting next position due to index mismatch\n", "OnTextData packet", "Skipping flv packet: type %d, size %d, flags %d.\n", "%d %X %d \n", "Negative cts, previous timestamps might be wrong.\n", "invalid timestamps %ld %ld\n", "Omnia A/XE", "Packet mismatch %d %d %d\n", "live_flv", "live_flvdec", "flv_metadata", "Allocate streams according to the onMetaData array", "missing_streams", "put_bits", "write_metadata", "get_audio_flags", "unsupported_codec", "flush_put_bits", "flv_write_codec_header", "flv_write_packet", "flv_append_keyframe_info", "flv_write_header", "shift_data", "flv_write_trailer", "datasize", "lasttimestamp", "totalframes", "hasAudio", "hasVideo", "hasCuePoints", "hasMetadata", "hasKeyframes", "libavformat/flvenc.c", "Ignoring metadata for %s\n", "canSeekToEnd", "videosize", "audiosize", "lastkeyframetimestamp", "lastkeyframelocation", "FLV only supports wideband (16kHz) Speex audio\n", "FLV only supports mono Speex audio\n", "FLV does not support sample rate %d, choose from (44100, 22050, 11025)\n", "Audio codec '%s' not compatible with FLV\n", "%s codec %s not compatible with flv\n", "AAC sequence header: %02x %02x.\n", "Packets are not in the proper order with respect to DTS\n", "Malformed AAC bitstream detected: use the audio bitstream filter 'aac_adtstoasc' to fix it ('-bsf:a aac_adtstoasc' option with ffmpeg)\n", "aac bitstream error\n", "Warning: Speex stream has more than 8 frames per packet. Adobe Flash Player cannot handle this!\n", "Too large packet with size %u >= %u\n", "Text", "no mem for add keyframe index!\n", "par->codec_type is type = [%d]\n", "at most one video stream is supported in flv\n", "Codec %s is not supported in the official FLV specification,\n", "use vstrict=-1 / -strict -1 to use it anyway.\n", "Muxing VP6 in flv will produce flipped video on playback.\n", "at most one audio stream is supported in flv\n", "16-bit big-endian audio in flv is valid but most likely unplayable (hardware dependent); use s16le\n", "Subtitle codec '%s' for stream %d is not compatible with FLV\n", "Codec type '%s' for stream %d is not compatible with FLV\n", "Unable to re-open %s output file for the second pass (add_keyframe_index)\n", "FLV no sequence end mode open\n", "Failed to update header with correct duration.\n", "Failed to update header with correct filesize.\n", "video/x-flv", "flv muxer", "flvflags", "FLV muxer flags", "aac_seq_header_detect", "Put AAC sequence header based on stream data", "no_sequence_end", "disable sequence end for FLV", "no_metadata", "disable metadata for FLV", "no_duration_filesize", "disable duration and filesize zero value metadata for FLV", "add_keyframe_index", "Add keyframe index metadata", "av_probe_input_format3", "av_probe_input_buffer2", "image2", "ssegment", "image2pipe", "libavformat/format.c", "Probing %s score:%d size:%d\n", "Probing %s score:%d increased to %d due to MIME type\n", "Specified probe size value %u cannot be < %u\n", "mime_type", "Format %s detected only with low score of %d, misdetection possible!\n", "Format %s probed with size=%d and score=%d\n", "#software: %s\n", "Lavf57.71.100", "#tb %d: %d/%d\n", "#media_type %d: %s\n", "#codec_id %d: %s\n", "#sample_rate %d: %d\n", "#channel_layout %d: %lx\n", "#channel_layout_name %d: %s\n", "#dimensions %d: %dx%d\n", "#sar %d: %d/%d\n", "gif_write_header", "flush_packet", "gif_write_packet", "NETSCAPE2.0", "libavformat/gif.c", "GIF muxer supports only a single video GIF stream.\n", "video_par->format == AV_PIX_FMT_PAL8", "Invalid palette extradata\n", "PAL8 packet is missing palette in extradata\n", "GIF muxer", "Number of times to loop the output: -1 - no loop, 0 - infinite loop", "final_delay", "Force delay (in centiseconds) after the last frame", "GIF87a", "GIF89a", "gif_read_ext", "gif_read_packet", "libavformat/gifdec.c", "Graphic Control Extension block's size less than 4.\n", "lzw minimum code size must be >= 1\n", "invalid block label\n", "GIF demuxer", "min_delay", "minimum valid delay between frames (in hundredths of second)", "max_gif_delay", "maximum valid delay between frames (in hundredths of seconds)", "default_delay", "default delay between frames (in hundredths of second)", "ignore_loop", "ignore loop setting (netscape extension)", "h264 demuxer", "%d, %10ld, %10ld, %8ld, %8d, ", ", S=%d", "#format: frame checksums\n", "#version: %d\n", "#hash: %s\n", "#extradata %d, %31d, ", "#stream#, dts,        pts, duration,     size, hash\n", "framehash", "frame hash encoder class", "set hash to use", "sha256", "format_version", "file format version", "hvcc_write", "libavformat/hevc.c", "configurationVersion:                %u\n", "general_profile_space:               %u\n", "general_tier_flag:                   %u\n", "general_profile_idc:                 %u\n", "general_profile_compatibility_flags: 0x%08x\n", "general_constraint_indicator_flags:  0x%012lx\n", "general_level_idc:                   %u\n", "min_spatial_segmentation_idc:        %u\n", "parallelismType:                     %u\n", "chromaFormat:                        %u\n", "bitDepthLumaMinus8:                  %u\n", "bitDepthChromaMinus8:                %u\n", "avgFrameRate:                        %u\n", "constantFrameRate:                   %u\n", "numTemporalLayers:                   %u\n", "temporalIdNested:                    %u\n", "lengthSizeMinusOne:                  %u\n", "numOfArrays:                         %u\n", "array_completeness[%u]:               %u\n", "NAL_unit_type[%u]:                    %u\n", "numNalus[%u]:                         %u\n", "nalUnitLength[%u][%u]:                 %u\n", "hevc,h265,265", "hevc demuxer", "nested_io_open", "open_url", "open_input", "read_from_url", "parse_playlist", "hls_read_header", "intercept_id3", "com.apple.streaming.transportStreamTimestamp", "parse_id3", "handle_id3", "read_data", "update_init_section", "recheck_discard_flags", "hls_read_packet", "libavformat/hls.c", "A HLS playlist item '%s' referred to an external file '%s'. Opening this file was forbidden for security reasons\n", "URI=", "BYTERANGE=", "TYPE=", "GROUP-ID=", "ASSOC-LANGUAGE=", "NAME=", "DEFAULT=", "FORCED=", "CHARACTERISTICS=", "METHOD=", "BANDWIDTH=", "AUDIO=", "VIDEO=", "SUBTITLES=", "#EXTM3U", "#EXT-X-STREAM-INF:", "#EXT-X-TARGETDURATION:", "#EXT-X-MEDIA-SEQUENCE:", "seekable", "Filename extension of '%s' is not a common multimedia extension, blocked for security reasons.\nIf you wish to override this adjust allowed_extensions, you can set it to 'ALL' to allow all\n", "cookies", "user_agent", "http_proxy", "end_offset", "HLS request for url '%s', offset %ld, playlist %d\n", "Unable to read key file %s\n", "Unable to open key file %s\n", "crypto+%s", "crypto:%s", "SAMPLE-AES encryption is not supported yet\n", "Unable to seek to offset %ld of HLS segment '%s'\n", "variant_bitrate", "Could not read complete segment.\n", "#EXT-X-KEY:", "AES-128", "SAMPLE-AES", "#EXT-X-MEDIA:", "SUBTITLES", "public.accessibility.describes-music-and-sound", "public.accessibility.describes-video", "#EXT-X-PLAYLIST-TYPE:", "EVENT", "#EXT-X-MAP:", "#EXT-X-ENDLIST", "#EXT-X-DISCONTINUITY", "#EXTINF:", "#EXT-X-BYTERANGE:", "no: %d, dis: %d, seg: %lld, %lld, %lld,", "Empty playlist\n", "Error when loading first segment '%s'\n", "correct_ts_overflow", "No expected HTTP requests have been made\n", "Too large HLS ID3 tag (%d > %ld bytes)\n", "Stripped %d HLS ID3 bytes\n", "Stripped additional %d HLS ID3 bytes\n", "PRIV", "Invalid HLS ID3 audio timestamp %ld\n", "APIC", "!pls->id3_deferred_extra", "Changing ID3 metadata in HLS audio elementary stream", "No longer receiving playlist %d\n", "Failed to reload playlist %d\n", "skipping %d segments ahead, expired from playlists\n", "Failed to open an initialization section in playlist %d\n", "Downloading an initialization section of size %ld\n", "Failed to open segment of playlist %d\n", "Now receiving playlist %d, segment %d\n", "stream index inconsistency: index %d, %d main streams, %d subdemuxer streams\n", "user-agent", "hls,applehttp", "live_start_index", "segment index to start live streams at (negative values are from the end)", "allowed_extensions", "List of file extensions that hls is allowed to access", "3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav", "max_reload", "Maximum number of times a insufficient list is attempted to be reloaded", "set app ptr for ffmpeg", "hls_read", "hls_open", "libavformat/hlsproto.c", "skipping %d segments ahead, expired from playlist\n", "opening %s\n", "Unable to open %s\n", "hls+", "Using the hls protocol is discouraged, please try using the hls demuxer instead. The hls demuxer should be more complete and work as well as the protocol implementation. (If not, please report it.) To use the demuxer, simply use %s as url.\n", "hls://", "No nested protocol specified. Specify e.g. hls+http://%s\n", "http_write_reply", "parse_cookie", "http_getc", "http_buf_read", "http_accept", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_encoding", "cookie_string", "http_connect", "get_cookies", "http_handshake", "http_listen", "http_open_cnx", "ff_http_do_new_request", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "store_icy", "http_open", "http_proxy_open", "%x\r\n", "text/plain", "Internal server error", "Forbidden", "libavformat/http.c", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nContent-Length: %zu\r\n%s\r\n%03d %s\r\n", "HTTP/1.1 %03d %s\r\nContent-Type: %s\r\nTransfer-Encoding: chunked\r\n%s\r\n", "HTTP reply header: \n%s----\n", "%d%b%Y%H%M%S", "expires", "0\r\n\r\n", "Chunked encoding data size: %lu'\n", "Invalid chunk size %lu\n", "Stream ends prematurely at %lu, should be %lu\n", "s->chunksize >= len", "sc->listen", "header='%s'\n", "Received method: %s\n", "Received and expected HTTP method do not match. (%s expected, %s received)\n", "Autodetected %s HTTP method\n", "Received and autodetected HTTP method did not match (%s autodetected %s received)\n", "Requested resource: %s\n", "HTTP/", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "http_code=%d\n", "HTTP error %d %s\n", "\r\nHost:", "hostname %s", "new_header=%s", "Content-Length", "Content-Range", "bytes ", "Accept-Ranges", "Transfer-Encoding", "chunked", "WWW-Authenticate", "Authentication-Info", "Proxy-Authenticate", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "Content-Type", "Set-Cookie", "Unable to parse '%s'\n", "Icy-MetaInt", "Icy-", "Content-Encoding", "gzip", "Error during zlib initialisation: %s\n", "Your zlib was compiled without gzip support.\n", "identity", "Unknown content coding: %s\n", "X-Loader-Type", "X-Loader-Type:%s\n", "Transfer-Encoding: chunked\r\n", "Proxy-", "no_proxy", "https", "httpk", "ttplayer(default)57.71.100", "the user-agent option is deprecated, please use user_agent option\n", "\r\nUser-Agent: ", "User-Agent: %s\r\n", "\r\nAccept: ", "Accept: */*\r\n", "\r\nRange: ", "Range: bytes=%lu-", "\r\nExpect: ", "Expect: 100-continue\r\n", "\r\nConnection: ", "Connection: keep-alive\r\n", "Connection: close\r\n", "\r\nHost: ", "Host: %s\r\n", "\r\nContent-Length: ", "Content-Length: %d\r\n", "\r\nContent-Type: ", "Content-Type: %s\r\n", "\r\nCookie: ", "domain", "%s; %s=%s", "Cookie: %s\r\n", "\r\nIcy-MetaData: ", "Icy-MetaData: %d\r\n", "%s %s HTTP/1.1\r\n%s%s%s%s%s\r\n", "request: %s\n", "overlong headers\n", "try to fix missing 'Content-Range' at server side (%ld,%ld) => (%ld,%ld)", "Lower protocol\n", "Read headers\n", "Reply code: %d\n", "Content-Type:", "http error", "reconnect:%d delay_time:%d", "reconnect:%d delay_time:%d,fail:%d", "inflate return value: %d, %s\n", "Will reconnect at %lu error=%s., read_ret = %d\n", "Failed to reconnect at %lu.\n", "AVERROR_INVALIDDATA", "icy_metadata_packet", "No trailing CRLF found in HTTP header.\n", "CONNECT", "CONNECT %s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n%s%s\r\n", "http,https,httpk,tls,rtp,tcp,udp,kcp,crypto,httpproxy", "control seekability of connection", "set log handle for log", "chunked_post", "use chunked transfer-encoding for posts", "set HTTP proxy to tunnel through", "set custom HTTP headers, can override built in default headers", "set a specific content type for the POST messages", "override User-Agent header", "multiple_requests", "use persistent connections", "post_data", "set custom HTTP post data", "export the MIME type", "set cookies to be sent in applicable future requests, use newline delimited Set-Cookie HTTP field value syntax", "request ICY metadata", "icy_metadata_headers", "return ICY metadata headers", "return current ICY metadata packet", "metadata read from the bitstream", "auth_type", "HTTP authentication type", "No auth method set, autodetect", "basic", "HTTP basic authentication", "send_expect_100", "Force sending an Expect: 100-continue header for POST", "The actual location of the data received", "initial byte offset", "try to limit the request to bytes preceding this offset", "Override the HTTP method or set the expected HTTP method from a client", "reconnect", "auto reconnect after disconnect before EOF", "reconnect_at_eof", "auto reconnect at EOF", "reconnect_streamed", "auto reconnect streamed / non seekable streams", "reconnect_count", "reconnect count", "reconnect_delay_max", "max reconnect delay in seconds after which to give up", "listen on HTTP", "resource", "The resource requested by a client", "reply_code", "The http status code to return to a client", "valid_http_content_type", "valid http content type", "is_redirect", "is auto redirect", "nextnonce=", "realm=", "opaque=", "algorithm=", "qop=", "stale=", "Authorization: Basic ", "%08x", "MD5-sess", "auth-int", "Authorization: Digest ", "username=\"%s\"", ", realm=\"%s\"", ", nonce=\"%s\"", ", uri=\"%s\"", ", response=\"%s\"", ", algorithm=\"%s\"", ", opaque=\"%s\"", ", qop=\"%s\"", ", cnonce=\"%s\"", ", nc=%s", "genre", "Blues", "Classic Rock", "Country", "Dance", "Disco", "Grunge", "Hip-Hop", "New Age", "Oldies", "Other", "Reggae", "Alternative", "Death Metal", "Pranks", "Soundtrack", "Euro-Techno", "Ambient", "Trip-Hop", "Vocal", "Jazz+Funk", "Trance", "Classical", "Instrumental", "Acid", "Game", "Sound Clip", "Gospel", "Noise", "AlternRock", "Space", "Meditative", "Instrumental Pop", "Instrumental Rock", "Ethnic", "Gothic", "Darkwave", "Techno-Industrial", "Electronic", "Pop-Folk", "Eurodance", "Dream", "Southern Rock", "Comedy", "Cult", "Top 40", "Christian Rap", "Pop/Funk", "Jungle", "Native American", "Cabaret", "New Wave", "Psychadelic", "Rave", "Showtunes", "Trailer", "Lo-Fi", "Tribal", "Acid Punk", "Acid Jazz", "Polka", "Retro", "Musical", "Rock & Roll", "Hard Rock", "Folk-Rock", "National Folk", "Swing", "Fast Fusion", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Gothic Rock", "Progressive Rock", "Psychedelic Rock", "Symphonic Rock", "Slow Rock", "Big Band", "Chorus", "Easy Listening", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Chamber Music", "Sonata", "Symphony", "Booty Bass", "Primus", "Porn Groove", "Satire", "Slow Jam", "Club", "Tango", "Samba", "Folklore", "Power Ballad", "Rhythmic Soul", "Freestyle", "Duet", "Punk Rock", "Drum Solo", "A capella", "Euro-House", "Dance Hall", "Drum & Bass", "Club-House", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Polsk Punk", "Beat", "Christian Gangsta", "Heavy Metal", "Black Metal", "Crossover", "Contemporary Christian", "Christian Rock", "Merengue", "Salsa", "Thrash Metal", "Anime", "JPop", "SynthPop", "decode_str", "image/gif", "image/jpeg", "image/jpg", "image/png", "image/tiff", "image/bmp", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "read_geobtag", "read_apic", "read_ttag", "read_chapter", "id3v2_parse", "read_comment", "read_uslt", "libavformat/id3v2.c", "Error opening memory stream\n", "Cannot read BOM value, input too short\n", "Incorrect BOM value\n", "Unknown encoding\n", "Failed to alloc %zu bytes\n", "Failed to alloc %d bytes\n", "Error reading GEOB frame, data truncated.\n", "GEOB", "Error reading frame %s, skipped\n", "Unknown attached picture mimetype: %s, skipping.\n", "Unknown attached picture type %d.\n", "Error decoding attached picture description.\n", "TCON", "TXXX", "No AVFormatContext, skipped ID3 chapter data\n", "COMM", "encrypted and compressed", "encrypted", "extended header too long.", "invalid extended header length", "compression", "id3v2 ver:%d flags:%02X len:%d\n", "Invalid empty frame %s, skipping.\n", "Skipping %s ID3v2 frame %s.\n", "USLT", "Compresssed frame %s tlen=%d dlen=%ld\n", "Failed to alloc %ld bytes\n", "Failed to read compressed tag\n", "Failed to uncompress tag: %d\n", "lyrics-%s%s%s", "Error reading comment frame, skipped\n", "invalid frame id, assuming padding\n", "Error reading lyrics, skipped\n", "ID3v2.%d tag skipped, cannot handle %s\n", "TYER", "TDAT", "-%.2s-%.2s", " %.2s:%.2s", "CHAP", "32x32 pixels 'file icon'", "Other file icon", "Cover (front)", "Cover (back)", "Leaflet page", "Media (e.g. label side of CD)", "Lead artist/lead performer/soloist", "Artist/performer", "Conductor", "Band/Orchestra", "Composer", "Lyricist/text writer", "Recording Location", "During recording", "During performance", "Movie/video screen capture", "A bright coloured fish", "Illustration", "Band/artist logotype", "Publisher/Studio logotype", "compilation", "encoded_by", "TCMP", "TDRC", "TDRL", "TDEN", "TSOA", "album-sort", "TSOP", "artist-sort", "TSOT", "title-sort", "TALB", "TCOM", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "ff_id3v2_write_apic", "%.2s%.2s", "ch%d", "libavformat/id3v2enc.c", "No mimetype is known for stream %d, cannot write an attached picture.\n", "[%u] sn: %u, rto: %u(%d->%d), rtt: %u(%u->%u), bandwidth: %.1fkbps(%.1f->%.1f), count: %u(%lu), timeout: %u(%lu), fastack: %u(%lu), unsend: %u, inflight: %u(%ld), delay: %u->%u, recv_max: %u, send_max: %u, rmt_wnd: %u", "[%u] congest %u, %s -> %s, time: %ums, bw: %.1fkbps, rtt: %u, rto: %u, unsend: %u, inflight: %u(%u), lost: %.1f%%(%d)", "drain", "probertt", "[%u] acked %u, rto: %d, rtt: %u(%u), bandwidth: %.1fkbps(%.1fkbps), delay: %u, size: %u, rmt_wnd: %u", "[RO] %ld bytes", "recv sn=%lu", "[RI] %d bytes", "input ack: sn=%lu rtt=%ld rto=%ld", "input psh: sn=%lu ts=%lu", "input probe", "input wins: %lu", "slowstart", "probebw", "steady", "[%u] send %u init, snd_nxt: %u, snd_buf: %d, snd_queue: %d, snd_uack: %d(%d), rto: %d, snd_nxt64: %lu, pacing: %lu, send: %lu", "[%u] send %u timeout, snd_nxt: %u, snd_buf: %d, snd_queue: %d, snd_uack: %d(%d), rto: %d, snd_nxt64: %lu, pacing: %lu, send: %lu", "[%u] send %u fast, snd_nxt: %u, snd_buf: %d, snd_queue: %d, snd_uack: %d(%d), rto: %d, snd_nxt64: %lu, pacing: %lu, send: %lu", "[%u] bdp %u, cwnd: %u, rto: %d, rtt: %u, xwnd: %u, rwnd: %u, pacing: %lu, send: %lu", "ljpg", "mpg1-img", "mpg2-img", "mpg4-img", "im24", "im32", "sunras", "yuv10", "ff_img_read_header", "ff_img_read_packet", "SDPX", "XPDS", "libavformat/img2dec.c", "No such pixel format: %s.\n", "POSIX.1-2008 not supported, nanosecond file timestamps unavailable\n", "Could find no file with path '%s' and index in the range %d-%d\n", "Pattern type 'glob' was selected but globbing is not supported by this libavformat build\n", "Unknown value '%d' for pattern_type option\n", "Could not open file : %s\n", "xpm_pipe", "xpm demuxer", "webp_pipe", "webp demuxer", "tiff_pipe", "tiff demuxer", "sunrast_pipe", "sunrast demuxer", "sgi_pipe", "sgi demuxer", "qdraw_pipe", "qdraw demuxer", "psd_pipe", "psd demuxer", "ppm_pipe", "ppm demuxer", "png_pipe", "png demuxer", "pictor_pipe", "pictor demuxer", "pgmyuv_pipe", "pgmyuv demuxer", "pgm_pipe", "pgm demuxer", "pcx_pipe", "pcx demuxer", "pbm_pipe", "pbm demuxer", "pam_pipe", "pam demuxer", "jpegls_pipe", "jpegls demuxer", "jpeg_pipe", "jpeg demuxer", "j2k_pipe", "j2k demuxer", "exr_pipe", "exr demuxer", "dpx_pipe", "dpx demuxer", "dds_pipe", "dds demuxer", "bmp_pipe", "bmp demuxer", "image2 demuxer", "set the video framerate", "force loop over input file sequence", "pattern_type", "set pattern type", "glob_sequence", "select glob/sequence pattern type", "glob", "select glob pattern type", "select sequence pattern type", "disable pattern matching", "set video pixel format", "start_number", "set first number in the sequence", "start_number_range", "set range for looking at the first sequence number", "force frame size in bytes", "ts_from_file", "set frame timestamp from file's one", "ts_type", "nano second precision", "write_packet", "ff_rename", "UVAx", "libavformat/img2enc.c", "Could not get frame filename with strftime\n", "Could not get frame filename number %d from pattern '%s' (either set updatefirst or use a pattern like %%03d within the filename pattern)\n", "%s.tmp", "libavformat/internal.h", "failed to rename file %s to %s\n", "bmp,dpx,jls,jpeg,jpg,ljpg,pam,pbm,pcx,pgm,pgmyuv,png,ppm,sgi,tga,tif,tiff,jp2,j2c,j2k,xwd,sun,ras,rs,im1,im8,im24,sunras,xbm,xface,pix,y", "image2 muxer", "updatefirst", "continuously overwrite one file", "update", "strftime", "use strftime for filename", "atomic_writing", "write files atomically (using temporary files and renames)", "ff_mp4_read_descr", "ff_mp4_read_dec_config_descr", "c608", "sac3", "alac", ".mp1", "twos", "lpcm", "lpcm\r", "in24\f", "in24\t", "Opus", "v410", "dmb1\t", "SVQ3\r", "mp4v\r", "DIVX\r", "XVID\r", "VP31+", "rpza,", "cvid1", "8BPS2", "smc 8", "rle1.", "WRLE;", "mp2vY", "mjp2^", "tga a", "tiffb", "gif >", "png >", "MNG G", "vc-1X", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "pxlt", "libavformat/isom.c", "MPEG-4 description: tag=0x%02x len=%d\n", "esds object type id 0x%02x\n", "Specific MPEG-4 header len=%d\n", "mp4a config channels %d obj %d ext obj %d sample rate %d ext sample rate %d\n", "kcp_log", "kcp_close", "kcp_write", "kcp_onsend", "kcp_open", "kcp_process", "libavformat/kcp.c", "KCP conv: %u, %s\n", "kcp_close\n", "kcp_write(%d) ==> %d", "kcp_onsend: %d\n", "fifo_size", "udp%s", "Cannot open connection %s\n", "KCP timeout: %d \n", "KCP conv: %u, wnd_send: %d, wnd_recv: %d, mtu: %d\n", "KCP nodelay: %d, resend: %d, nc: %d, interval: %dms\n", "KCP congest band: %0.1fkbps, delay: %u, window: %u, lost: %.1f%%", "KCP fifo recv: %d\n", "[%u] kcp_process exit: %d\n", "kcp_conv", "KCP conv", "kcp_wnd_recv", "KCP recv window size", "kcp_wnd_send", "KCP send window size", "kcp_mtu_size", "KCP Maximum UDP packet size", "kcp_timeout", "KCP timeout (in microseconds) of socket I/O operations", "kcp_fast_ack", "KCP Fast ACK", "kcp_fifo_recv", "set the KCP receiving circular buffer size", "kcp_cong_lost", "set the KCP congestion avoidance lost packets", "kcp_cong_incr", "set the KCP congestion avoidance increment factor", "kcp_cong_decr", "set the KCP congestion avoidance decrement factor", "text/plain", "application/x-truetype-font", "application/x-font", "application/vnd.ms-opentype", "binary", "image/gif", "image/jpeg", "image/png", "image/tiff", "A_AAC", "A_AC3", "A_ALAC", "A_DTS", "A_EAC3", "A_FLAC", "A_MLP", "A_MPEG/L2", "A_MPEG/L1", "A_MPEG/L3", "A_OPUS", "A_OPUS/EXPERIMENTAL", "A_PCM/FLOAT/IEEE", "A_PCM/FLOAT/IEEE", "A_PCM/INT/BIG", "A_PCM/INT/BIG", "A_PCM/INT/BIG", "A_PCM/INT/LIT", "A_PCM/INT/LIT", "A_PCM/INT/LIT", "A_PCM/INT/LIT", "A_QUICKTIME/QDMC", "A_QUICKTIME/QDM2", "A_REAL/14_4", "A_REAL/28_8", "A_REAL/ATRC", "A_REAL/COOK", "A_REAL/SIPR", "A_TRUEHD", "A_TTA1", "A_VORBIS", "A_WAVPACK4", "D_WEBVTT/SUBTITLES", "D_WEBVTT/CAPTIONS", "D_WEBVTT/DESCRIPTIONS", "D_WEBVTT/METADATA", "S_TEXT/UTF8", "S_TEXT/UTF8", "S_TEXT/ASCII", "S_TEXT/ASS", "S_TEXT/SSA", "S_ASS", "S_SSA", "S_VOBSUB", "S_DVBSUB", "S_HDMV/PGS", "S_HDMV/TEXTST", "V_AV1", "V_DIRAC", "V_FFV1", "V_MJPEG", "V_MPEG1", "V_MPEG2", "V_MPEG4/ISO/ASP", "V_MPEG4/ISO/AP", "V_MPEG4/ISO/SP", "V_MPEG4/ISO/AVC", "V_MPEGH/ISO/HEVC", "V_MPEG4/MS/V3", "V_PRORES", "V_REAL/RV10", "V_REAL/RV20", "V_REAL/RV30", "V_REAL/RV40", "V_SNOW", "V_THEORA", "V_UNCOMPRESSED", "V_VP8", "V_VP9", "background", "anaglyph_cyan_red", "anaglyph_green_magenta", "LEAD_PERFORMER", "PART_NUMBER", "matroska_convert_tag", "ebml_read_num", "matroska_find_level1_elem", "ebml_parse_id", "ebml_parse_elem", "ebml_read_master", "matroska_parse_seekhead_entry", "matroska_decode_buffer", "matroska_add_index_entries", "matroska_find_track_by_num", "matroska_parse_block", "matroska_parse_laces", "matroska_parse_rm_audio", "matroska_parse_frame", "matroska_deliver_packet", "matroska_read_header", "matroska_parse_tracks", "matroska_parse_flac", "bytestream2_init", "mkv_parse_video_projection", "matroska_convert_tags", "webm_dash_manifest_read_header", "libavformat/matroskadec.c", "Skipping invalid tag with no TagName.\n", "%s/%s", "Read error at pos. %lu (0x%lx)\n", "Invalid EBML number size tag 0x%02x at pos %lu (0x%lx)\n", "Too many level1 elements or circular seekheads.\n", "Unknown entry 0x%X\n", "Invalid length 0x%lx > 0x%lx for syntax element %i\n", "File moves beyond max. allowed depth (%d)\n", "Duplicate element\n", "Invalid element\n", "Read error\n", "Max EBML element depth (%d) reached, cannot parse further.\n", "Compression size but no data in headerstrip\n", "Dropping apparently-broken index.\n", "Invalid track number %d\n", "EBML block data error\n", "Invalid stream %lu or size %u\n", "File is broken, keyframes not correctly marked!\n", "Invalid packet size\n", "Corrupt int4 RM-style audio packet size\n", "Corrupt sipr RM-style audio packet size\n", "Corrupt generic RM-style audio packet size\n", "Error parsing a wavpack block.\n", "Cannot append palette to packet\n", "EBML header parsing failed\n", "EBML version %lu, doctype %s, doc version %lu", "EBML header using unsupported features\n(EBML version %lu, doctype %s, doc version %lu)\n", "Unknown or unsupported track type %lu\n", "Invalid sample rate %f, defaulting to 8000 instead.\n", "Multiple combined encodings not supported", "Unsupported encoding type", "Failed to decode codec private data\n", "enc_key_id", "V_MS/VFW/FOURCC", "A_MS/ACM", "A_QUICKTIME", "V_QUICKTIME", "mov FourCC not found %s.\n", "TTA1", "Too large audio channel number %lu or bitdepth %lu. Skipping track.\n", "Invalid FLAC private data\n", "Unknown/unsupported AVCodecID %s.\n", "Lavf%d.%d.%d", "alpha_mode", "Unknown spherical metadata\n", "Invalid bounding rectangle coordinates %u,%u,%u,%u\n", "Missing projection private properties\n", "Unknown spherical cubemap layout %u\n", "D_WEBVTT/CAPTIONS", "D_WEBVTT/DESCRIPTIONS", "D_WEBVTT/METADATA", "incomplete attachment\n", "mimetype", "The tags at index %d refer to a non-existent attachment %ld.\n", "The tags at index %d refer to a non-existent chapter %ld.\n", "The tags at index %d refer to a non-existent track %ld.\n", "Unknown EBML doctype '%s'\n", "SMI ", "Failed to read file headers\n", "No streams found\n", "webm_dash_manifest_duration", "webm_dash_manifest_initialization_range", "webm_dash_manifest_file_name", "webm_dash_manifest_track_number", "webm_dash_manifest_cues_start", "webm_dash_manifest_cues_end", "webm_dash_manifest_bandwidth", "webm_dash_manifest_cluster_keyframe", "%s%ld", "webm_dash_manifest_cue_timestamps", "MAIN", "webm_dash_manifest", "matroska,webm", "mkv,mk3d,mka,mks", "audio/webm,audio/x-matroska,video/webm,video/x-matroska", "WebM DASH Manifest demuxer", "flag indicating that the input is a live file that only has the headers.", "(none)", "md5:", "mds_close", "mds_seek", "mds_seek", "mds_read", "mds_open", "libavformat/mediadatasource.c", "non java vm", "%s: AVSEEK_SIZE: %ld\n", "%s: %ld\n", "mediadatasource:", "non media datasource pointer", "new mediadatasource failed", "could not found media datasource class", "getSize", "could not find getSize method", "readAt", "(J[BII)I", "could not find readAt method", "could not find close method", "call read method failed", "NewByteArray failed", "mediadatasource", "mem_open", "libavformat/mem.c", "mem_open:%s size:%ld\n", "get socket pool", "set timeout (in microseconds) of socket I/O operations", "mov_probe", "mov_read_fiel", "mov_read_enda", "mov_read_default", "mov_read_glbl", "mov_read_moov", "mov_switch_root", "mov_read_dfla", "mov_read_tfhd", "mov_read_tfdt", "mov_read_stsc", "mov_read_hdlr", "mov_read_custom", "mov_read_ftyp", "mov_read_clli", "mov_read_coll", "mov_read_mdcv", "mov_read_vpcc", "mov_read_colr", "mov_read_smdm", "mov_read_dops", "mov_read_sv3d", "mov_read_st3d", "mov_read_tenc", "mov_read_schm", "mov_read_stts", "mov_read_cmov", "mov_read_wfex", "mov_read_dref", "mov_read_pasp", "mov_find_next_sample", "find_prev_closest_index", "mov_open_dref", "mov_read_sidx", "mov_read_moof", "mov_read_mfra", "read_tfra", "mov_read_adrm", "fix_index_entry_timestamps", "mov_read_frma", "mov_read_keys", "mov_metadata_loci", "mov_read_covr", "mov_read_udta_string", "mov_read_sample_encryption_info", "mov_parse_auxiliary_info", "mov_read_saio", "mov_read_saiz", "mov_read_senc", "mov_read_atom_into_extradata", "mov_read_aclr", "mov_metadata_creation_time", "mov_read_mvhd", "mov_read_mdhd", "mov_read_stps", "mov_read_stco", "mov_read_stss", "mov_read_sbgp", "mov_read_stsz", "mov_read_elst", "mov_read_ddts", "mov_read_ctts", "mov_update_dts_shift", "mov_read_trun", "mov_read_header", "mov_read_chapters", "fix_timescale", "mov_seek_stream", "mov_read_trak", "mov_build_index", "mov_fix_index", "mov_estimate_video_delay", "mov_read_packet", "cenc_filter", "drm_decrypt", "cenc_decrypt", "ff_mov_read_stsd_entries", "mov_skip_multiple_stsd", "mov_parse_stsd_audio", "mov_read_stsd", "libavformat/mov.c", "Found media data tag MPEG indicating this is a MOV-packed MPEG-PS.\n", "Unknown MOV field order 0x%04x\n", "enda %d\n", "Atoms too deeply nested\n", "Detected moov in a free atom.\n", "Broken file, trak/mdat not at top-level\n", "type:'%s' parent:'%s' sz: %ld %ld %ld\n", "overread end of atom '%.4s' by %ld bytes\n", "ignoring multiple glbl\n", "Found duplicated MOOV Atom. Skipped it\n", "root atom offset 0x%lx: partial file\n", "read fragments, offset 0x%lx\n", "STREAMINFO must be first FLACMetadataBlock\n", "non-STREAMINFO FLACMetadataBlock(s) ignored\n", "frag flags 0x%x\n", "could not find corresponding trex\n", "could not find corresponding track id %u\n", "track[%u].stsc.entries = %u\n", "Duplicated STSC atom\n", "STSC entry %d is invalid (first=%d count=%d id=%d)\n", "sc->stsc_data[i+1].first >= 2", "reached eof, corrupted STSC atom\n", "ctype=%s\n", "stype=%s\n", "handler_name", "iTunSMPB", "%*X %X %X %X", "cdec", "Unhandled or malformed custom metadata of size %ld\n", "qt  ", "ISO: File Type Major Brand: %.4s\n", "major_brand", "minor_version", "compatible_brands", "Empty Content Light Level Info box\n", "Empty Content Light Level box\n", "Unsupported Content Light Level box version %d\n", "Invalid Mastering Display Color Volume box\n", "Empty VP Codec Configuration box\n", "Unsupported VP Codec Configuration box version %d\n", "nclx", "nclc", "unsupported color_parameter_type %s\n", "%s: pri %d trc %d matrix %d", " full %u", "Empty Mastering Display Metadata box\n", "Unsupported Mastering Display Metadata box version %d\n", "unsupported OpusSpecificBox version\n", "Empty spherical video box\n", "Missing spherical video header\n", "Unknown spherical version %d\n", "Missing projection box\n", "Missing projection header box\n", "Unsupported cubemap layout %d\n", "Unknown projection type: %s\n", "Empty stereoscopic video box\n", "Unknown st3d mode value %d\n", "tenc atom are only supported in first sample descriptor\n", "failed to read the default key ID", "invalid default_constant_IV_size in tenc atom\n", "failed to read the default IV", "schm boxes are only supported in first sample descriptor\n", "track[%u].stts.entries = %u\n", "Duplicated STTS atom\n", "sample_count=%d, sample_duration=%d\n", "reached eof, corrupted STTS atom\n", "systemBitrate=\"", "<GSpherical:StitchingSoftware>", "<GSpherical:Spherical>", "<GSpherical:Stitched>", "<GSpherical:ProjectionType>", "<GSpherical:StereoMode>", "left-right", "top-bottom", "<GSpherical:InitialViewHeadingDegrees>", "<GSpherical:InitialViewPitchDegrees>", "<GSpherical:InitialViewRollDegrees>", "Invalid spherical metadata found\n", "unknown compression for cmov atom !\n", "get_wav_header failed\n", "volume %s, len %d\n", "filename %s, len %d\n", "nlvl from %d, nlvl to %d\n", "type %d, len %d\n", "path %s\n", "dir %s\n", "Unknown dref type 0x%08x size %u\n", "sample aspect ratio already set to %d:%d, ignoring 'pasp' atom (%d:%d)\n", "stream %d, sample %d, dts %ld,  pos %lld \n", "ctts_index", "ctts_sample", "Reference with mismatching origin, %s not tried for security reasons, set demuxer option use_absolute_path to allow it anyway\n", "Using absolute path on user request, this is a possible security issue\n", "Absolute path %s not tried for security reasons, set demuxer option use_absolute_path to allow absolute paths\n", "sidx version %u", "Invalid sidx timescale 1/%d\n", "sidx reference_type 1\n", "could not find corresponding track id %d\n", "stream has moof boxes, will look for a mfra\n", "doesn't look like mfra (unreasonable size)\n", "doesn't look like mfra (size mismatch)\n", "doesn't look like mfra (tag mismatch)\n", "stream has mfra\n", "found tfra\n", "failed to seek back after looking for mfra\n", "found a moof box but failed to read the mfra (may be a live ismv)\n", "found a moof box but stream is not seekable, can not look for mfra\n", "moof offset %lx\n", "[aax] file checksum == ", "[aax] activation_bytes option is missing!\n", "[aax] activation_bytes value needs to be 4 bytes!\n", "[aax] audible_fixed_key value needs to be 16 bytes!\n", "[aax] mismatch in checksums!\n", "[aax] error in drm blob decryption!\n", "end_index >= 0 && end_index <= st->nb_index_entries", "ignoring 'frma' atom of '%.4s', stream has codec id %d\n", "ignoring 'frma' atom of '%.4s', stream format is '%.4s'\n", "The 'keys' atom with the invalid key count: %u\n", "The key# %u in meta has invalid size:%u\n", "premiere_version", "quicktime_version", "warning", "original_source", "playback_requirements", "performers", "producer", "original_artist", "make", "host_computer", "grouping", "original_format", "edit_date", "disclaimer", "director", "chapter", "season_number", "network", "episode_sort", "episode_id", "media_type", "sort_show", "sort_name", "sort_composer", "sort_artist", "sort_album", "sort_album_artist", "rating", "purchase_date", "gapless_playback", "podcast", "synopsis", "keywords", "hd_video", "firmware", "episode_uid", "category", "account_id", "account_type", "loci too short\n", "place name too long\n", "loci too short (%u bytes left, need at least %d)\n", "%+08.4f%+09.4f", "%s-%s", "Unknown cover type: 0x%x.\n", "Error parsing cover art.\n", "The index of 'data' is out of range: %d < 1 or >= %d.\n", "UDTA parsing failed retrying raw\n", "%.4s", "Failed to store the number (%d) in string.\n", "Failed to store the number (%u) in string.\n", "Failed to store the float32 number (%f) in string.\n", "HandBrake %d.%d.%d", "failed to read the initialization vector\n", "hit EOF while reading sub-sample encryption info\n", "Multiple auxiliary info chunks are not supported\n", "Failed to seek for auxiliary info, will only parse senc atoms for encryption info\n", "Hit EOF while reading auxiliary info\n", "Ignoring duplicate encryption info in saio\n", "Duplicate saio atom\n", "Ignoring saio box with non-zero aux_info_type\n", "Ignoring saio box with non-zero aux_info_type_parameter\n", "Hit EOF while reading saio\n", "Ignoring duplicate encryption info in saiz\n", "Duplicate saiz atom\n", "Ignoring saiz box with non-zero aux_info_type\n", "Ignoring saiz box with non-zero aux_info_type_parameter\n", "Failed to read the auxiliary info\n", "Ignoring duplicate encryption info in senc\n", "Hit EOF while reading senc\n", "truncated extradata\n", "ignored unknown aclr value (%d)\n", "aclr not decoded - incomplete atom\n", "aclr not decoded - unexpected size %ld\n", "aclr not decoded - unable to add atom to extradata\n", "size: %dx%d\n", "palette: ", "%06x%s", "creation_time is not representable\n", "Invalid mvhd time scale %d, defaulting to 1\n", "time scale = %i\n", "Multiple mdhd?\n", "Version %d", "Invalid mdhd time scale %d, defaulting to 1\n", "Duplicated STPS atom\n", "reached eof, corrupted STPS atom\n", "Duplicated STCO atom\n", "reached eof, corrupted STCO atom\n", "keyframe_count = %u\n", "Duplicated STSS atom\n", "reached eof, corrupted STSS atom\n", "Duplicated SBGP atom\n", "reached eof, corrupted SBGP atom\n", "sample_size = %u sample_count = %u\n", "Invalid sample field size %u\n", "Duplicated STSZ atom\n", "reached eof, corrupted STSZ atom\n", "Invalid edit list entry_count: %d for elst atom of size: %ld bytes.\n", "ELST atom of %ld bytes, bigger than %d entries.", "Duplicated ELST atom\n", "track[%u].edit_count = %i\n", "duration=%ld time=%ld rate=%f\n", "Track %d, edit %d: Invalid edit list media time=%ld\n", "Unsupported DTS audio channel layout", "track[%u].ctts.entries = %u\n", "ignoring CTTS entry with count=%d duration=%d\n", "count=%d, duration=%d\n", "CTTS invalid\n", "mov_update_dts_shift(): dts_shift set to %d\n", "reached eof, corrupted CTTS atom\n", "dts shift %d\n", "flags 0x%x entries %u\n", "found mfra time %ld, using it for pts\n", "found sidx time %ld, using it for pts\n", "found tfdt time %ld, using it for dts\n", "found track end time %ld, using it for dts\n", "first sample flags 0x%x\n", "Failed to add index entry\n", "pts %ld calculated dts %ld sc->dts_shift %d ctts.duration %d sc->time_offset %ld flags & MOV_TRUN_SAMPLE_CTS %d\n", "AVIndex stream %d, sample %d, offset %lx, dts %ld, size %u, distance %d, keyframe %d\n", "reached eof, corrupted TRUN atom\n", "Invalid decryption key len %d expected %d\n", "error reading header\n", "moov atom not found\n", "on_parse_exit_offset=%ld\n", "Failed to retrieve first frame\n", "ignoring stream duration which is shorter than chapters\n", "Chapter %d not found in file\n", "stream %d, timescale not set\n", "Forcing full parsing for mp3 stream\n", "Overflow during bit rate calculation %ld * 8 * %d\n", "Referenced QT chapter track not found\n", "rtmd", "stream %d, timestamp %ld, sample %d\n", "stream %d, found sample %d\n", "next == (int)next", "stream %d, missing mandatory atoms, broken header\n", "stream %d, contradictionary STSC and STCO\n", "multiple edit list entries, Use -advanced_editlist to correctly decode otherwise a/v desync might occur\n", "STSZ sample size %d invalid (too large), ignoring\n", "STSZ sample size %d invalid (too small), ignoring\n", "wrong sample count\n", "Sample size %u is too large\n", "AVIndex stream %d, sample %u, offset %lx, dts %ld, size %u, distance %u, keyframe %d\n", "Invalid SampleDelta %d in STTS, at %d st:%d\n", "error unaligned chunk\n", "Zero bytes per frame, but %d samples per frame", "wrong chunk count %u\n", "AVIndex stream %d, chunk %u, offset %lx, dts %ld, size %u, duration %u\n", "Cannot allocate index ranges buffer\n", "Shifting DTS by %d because of negative CTTS.\n", "st: %d edit list: %ld Missing key frame while searching for timestamp: %ld\n", "st: %d edit list %ld Cannot find an index entry before timestamp: %ld.\n", "stts: %ld ctts: %ld, ctts_index: %ld, ctts_count: %ld\n", "Cannot add CTTS entry %ld - {%ld, %d}\n", "skip %d audio samples from curr_cts: %ld\n", "drop a frame at curr_cts: %ld @ %ld\n", "Cannot reallocate frame duration buffer\n", "Cannot add index entry\n", "Support for mvhd.timescale = 0 with editlists", "Processing st: %d, edit list %ld - media time: %ld, duration: %ld\n", "Offset DTS by %ld to make first pts zero.\n", "Setting codecpar->delay to %d for stream st: %d\n", "stream %d, error opening alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d\n", "Skipped opening external track: stream %d, alias: path='%s', dir='%s', filename='%s', volume='%s', nlvl_from=%d, nlvl_to=%d.Set enable_drefs to allow this.\n", "stream %d, offset 0x%lx: partial file\n", "Nonkey frame from stream %d discarded due to AVDISCARD_NONKEY\n", "saiz atom found without saio\n", "saio atom found without saiz\n", "Incorrect number of samples in encryption info\n", "Only the 'cenc' encryption scheme is supported\n", "drm ctx is null\n", "failed to drm decrypt whole packet, ret:%d\n", "subsample size exceeds the packet size left\n", "failed to drm decrypt subsample, ret:%d\n", "leftover packet bytes after subsample processing\n", "encrypt packet need decrypt\n", "c->fc->nb_streams >= 1", "invalid size %ld in stsd\n", "multiple fourcc not supported\n", "size=%ld 4CC=%s codec_type=%d\n", "Planar Y'CbCr 8-bit 4:2:0", "Sorenson H263", "audio channels %d\n", "version =%d, isom =%d\n", "reel_name", "reached eof, corrupted STSD atom\n", "stsd", "AV1x", "AVup", "apcn", "apch", "dvpp", "dvcp", "mp4s", "invalid STSD entries %d\n", "Duplicate stsd found in this track.\n", "mov,mp4,m4a,3gp,3g2,mj2", "use_absolute_path", "allow using absolute path when opening alias, this is a possible security issue", "seek_streams_individually", "Seek each stream individually to the to the closest point", "ignore_editlist", "Ignore the edit list atom.", "advanced_editlist", "Modify the AVIndex according to the editlists. Use this option to decode in the order specified by the edits.", "ignore_chapters", "use_mfra_for", "use mfra for fragment timestamps", "export_all", "Export unrecognized metadata entries", "export_xmp", "Export full XMP metadata", "activation_bytes", "Secret bytes for Audible AAX files", "audible_fixed_key", "Fixed key used for handling Audible AAX files", "77214d4b196a87cd520045fd20a51d67", "The media decryption key (hex)", "enable_drefs", "Enable external track support.", "prefer_nearest_sample", "mov demuxer: prefer pos nearest sample reduce seek", "enable_drm", "Enable drm", "drm_downgrade", "drm downgrade", "drm_aptr", "Drm aptr", "video_check_info", "Anti hijack check info", "ff_mov_read_chan", "libavformat/mov_chan.c", "chan: layout=%u bitmap=%u num_descr=%u\n", "reached EOF while reading channel layout\n", "check_pkt", "put_bits", "find_fps", "mov_write_hdlr_tag", "mov_write_sidx_tag", "mov_write_identification", "mov_write_uuidprof_tag", "flush_put_bits", "get_cluster_duration", "mov_init", "avc1\r", "text", "ipod_get_codec_tag", "avc1\r", "mp4a", "tx3g", "avc1k", "VP6A]", "VP6F", "mov_get_dv_codec_tag", "yuv2", "yuvs", "2vuy", "raw  ", "BGRA ", "RGBA ", "ABGR ", "b48r0", "mov_get_rawvideo_codec_tag", "mov_get_codec_tag", "mov_write_avid_tag", "mov_write_dvc1_structs", "mov_write_gama_tag", "mov_write_video_tag", "mov_write_colr_tag", "mov_write_st3d_tag", "mov_write_sv3d_tag", "mov_write_tkhd_tag", "mov_write_edts_tag", "mov_write_trak_tag", "mov_write_mdhd_tag", "\u000b\t\u000b\tmov_write_dops_tag", "mov_write_chan_tag", "mov_write_tmcd_tag", "mov_write_source_reference_tag", "mov_preroll_write_stbl_atoms", "shift_data", "mov_flush_fragment", "ff_mov_write_packet", "\fencd", "mov_write_trailer", "Application provided duration: %ld / timestamp: %ld is out of range for mov/mp4 format\n", "Application provided duration: %ld is invalid\n", "timecode: tbc=%d/%d invalid, fallback on %d/%d\n", "stss", "stps", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "HintHandler", "TimeCodeHandler", "url ", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "Unknown hldr_type for %s, writing dummy values\n", "handler", "a=control:streamid=%d\r\n", "Non-consecutive fragments, writing incorrect sidx\n", "Lucida Grande", "3gp6", "3gp4", "3g2b", "3g2a", "M4V ", "M4A ", "PSP mode need one video and one audio stream\n", "Frame rate %f outside supported range\n", "next_dts >= 0", "next_dts <= 2147483647", "malformed location metadata\n", "earth", "disk", "trkn", "<param name=\"%s\" value=\"%s\" valuetype=\"data\"/>\n", "CodecPrivateData", "ipod", "Empty MOOV enabled; disabling automatic bitstream filtering\n", "No meaningful edit list will be written when using empty_moov without delay_moov\n", "Sample interleaving in fragments is mutually exclusive with omit_tfhd_offset and separate_moof\n", "muxer does not support non seekable output\n", "You requested a copy of the original timecode track so timecode metadata are now ignored\n", "Invalid encryption key len %d expected %d\n", "Invalid encryption kid len %d expected %d\n", "unsupported encryption scheme %s\n", "Warning, extension is not .m4a, .m4v nor  .m4b Quicktime/Ipod might not play the file\n", "unsupported height for dv codec\n", "%s rawvideo cannot be written to mov, output file will be unreadable\n", "Using MS style video codec tag, the file may be unplayable!\n", "Using MS style audio codec tag, the file may be unplayable!\n", "Could not find tag for codec %s in stream #%d, codec not currently supported in container\n", "D-10/IMX must use 720x608 or 720x512 video resolution\n", "Resolution %dx%d too large for mov/mp4\n", "WARNING codec timebase is very high. If duration is too long,\nfile may not be playable by quicktime. Specify a shorter timebase\nor choose different container.\n", "VP9 only supported in MP4.\n", "VP9 in MP4 support is experimental, add '-strict %d' if you want to use it.\n", "track %d: codec frame size is not set\n", "track %d: codec block align is not set for adpcm\n", "track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n", "track %d: muxing mp3 at %dhz is not standard in MP4\n", "FLAC only supported in MP4.\n", "FLAC in MP4 support is experimental, add '-strict %d' if you want to use it.\n", "yrrc", "albm", "Lavf", "XDCAM", " HD422", " %d%c", "Could not locate DNxHD bit stream in vos_data\n", "Could not locate DNxHD bit stream, vos_data too small\n", "moov atom written before any packets, unable to write correct dvc1 atom. Set the delay_moov flag to fix this.\n", "DpxE", "gamma value %g\n", "writing gama value %d\n", "track->mode == 0x02", "gamma value unknown, unable to write gama atom\n", "Not writing 'gama' atom. Format is not MOV.\n", "color primaries unspecified, assuming bt709\n", "color primaries unspecified, assuming bt470bg\n", "color primaries unspecified, assuming smpte170\n", "color primaries unspecified, unable to assume anything\n", "track->mode == 0x02 || track->mode == 0x01", "Not writing 'colr' atom. Format is not MOV or MP4.\n", "Unsupported stereo_3d flags %x. st3d not written.\n", "Unsupported stereo_3d type %s. st3d not written.\n", "Unsupported projection %d. sv3d not written.\n", "track width is too large\n", "track height is too large\n", "EDTS using dts:%ld cts:%d instead of dts:%ld cts:%ld tid:%d\n", "av_rescale_rnd(start_dts, 1000, track->timescale, AV_ROUND_DOWN) <= 0", "Not writing any edit list even though one would have been required\n", "FATAL error, file duration too long for timebase, this file will not be\nplayable with quicktime. Choose a different timebase or a different\ncontainer format\n", "invalid extradata size\n", "not writing 'chan' tag due to lack of channel information\n", "fps %d is too large\n", "reel_name length %lu is too large\n", "track->par->codec_id == AV_CODEC_ID_OPUS || track->par->codec_id == AV_CODEC_ID_AAC", "lpcm", "2006/04/01 11:11:11", "perf", "titl", "author", "gnre", "dscp", "cprt", "aART", "encoding_tool", "ldes", "tvsh", "tven", "tvnn", "tves", "tvsn", "stik", "hdvd", "pgap", "cpil", "tmpo", "Unable to re-open %s output file for the second pass (faststart)\n", "Estimating the duration of the last packet in a fragment, consider setting the duration field in AVPacket instead.\n", "fatal error, input is not a single packet, implement a AVParser for it\n", "fatal error, input packet contains no samples\n", "Track %d starts with a nonzero dts %ld, while the moov already has been written. Set the delay_moov flag to handle this case.\n", "pts has no value\n", "Starting second pass: moving the moov atom to the beginning of the file\n", "reserved_moov_size is too small, needed %ld additional\n", "Starting second pass: inserting sidx atoms\n", "wide", "free", "palette:", "%06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x, %06x", "size:", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n", "<head>\n", "<meta name=\"creator\" content=\"%s\" />\n", "</head>\n", "<body>\n", "<switch>\n", "<%s systemBitrate=\"%ld\">\n", "<param name=\"%s\" value=\"%d\" valuetype=\"data\"/>\n", "systemBitrate", "trackID", "systemLanguage", "trackName", "FourCC", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "</%s>\n", "</switch>\n", "</body>\n", "</smil>\n", "video/mp4", "m4v,m4a", "ipod muxer", "mp4 muxer", "mov muxer", "movflags", "MOV muxer flags", "rtphint", "Add RTP hint tracks", "moov_size", "maximum moov size so it can be placed at the begin", "empty_moov", "Make the initial moov atom empty", "frag_keyframe", "Fragment at video keyframes", "separate_moof", "Write separate moof/mdat atoms for each track", "frag_custom", "Flush fragments on caller requests", "isml", "Create a live smooth streaming feed (for pushing to a publishing point)", "faststart", "Run a second pass to put the index (moov atom) at the beginning of the file", "omit_tfhd_offset", "Omit the base data offset in tfhd atoms", "disable_chpl", "Disable Nero chapter atom", "default_base_moof", "Set the default-base-is-moof flag in tfhd atoms", "dash", "Write DASH compatible fragmented MP4", "frag_discont", "Signal that the next fragment is discontinuous from earlier ones", "delay_moov", "Delay writing the initial moov until the first fragment is cut, or until the first fragment flush", "global_sidx", "Write a global sidx index at the start of the file", "write_colr", "Write colr atom (Experimental, may be renamed or changed, do not use from scripts)", "write_gama", "Write deprecated gama atom", "use_metadata_tags", "Use mdta atom for metadata.", "skip_trailer", "Skip writing the mfra/tfra/mfro trailer for fragmented files", "rtpflags", "RTP muxer flags", "Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC", "rfc2190", "Use RFC 2190 packetization instead of RFC 4629 for H.263", "skip_rtcp", "Don't send RTCP sender reports", "h264_mode0", "Use mode 0 for H.264 in RTP", "send_bye", "Send RTCP BYE packets when finishing", "skip_iods", "Skip writing iods atom.", "iods_audio_profile", "iods audio profile atom.", "iods_video_profile", "iods video profile atom.", "Maximum fragment duration", "min_frag_duration", "Minimum fragment duration", "frag_size", "Maximum fragment size", "ism_lookahead", "Number of lookahead entries for ISM files", "video_track_timescale", "set timescale of all video tracks", "Override major brand", "use_editlist", "use edit list", "fragment_index", "Fragment number of the next fragment", "mov_gamma", "gamma value for gama atom", "frag_interleave", "Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead)", "encryption_scheme", "Configures the encryption scheme, allowed values are none, cenc-aes-ctr", "The media encryption key (hex)", "encryption_kid", "The media encryption key identifier (hex)", "use_stream_ids_as_track_ids", "use stream ids as track ids", "write_tmcd", "force or disable writing tmcd", "ff_mov_cenc_avc_write_nal_units", "libavformat/movenccenc.c", "CENC-AVC: remaining size %d smaller than nal length+type %d\n", "CENC-AVC: nal size %d remaining %d\n", "ff_mov_init_hinting", "libavformat/movenchint.c", "Unable to initialize hinting of stream %d\n", "rtpo", "mp3_seek", "mp3_sync", "mp3_parse_info_tag", "read_xing_toc", "mp3_read_header", "libavformat/mp3dec.c", "Using MP3 TOC to seek; may be imprecise.\n", "Using scaling to seek VBR MP3; may be imprecise.\n", "invalid concatenated file detected - using bitrate for duration\n", "filesize and duration do not match (growing file?)\n", "Cannot determine file size, skipping TOC table.\n", "pad %d %d\n", "Skipping %d bytes of junk at %ld.\n", "Invalid frame size (%d): Could not seek to %ld.\n", "Failed to read frame size: Could not seek to %ld.\n", "mp2,mp3,m2a,mpa", "usetoc", "use table of contents", "mp3_write_xing", "mp3_write_header", "mp3_write_audio_packet", "mp3_write_packet", "mp3_write_trailer", "mp3_update_xing", "libavformat/mp3enc.c", "Unsupported sample rate, not writing Xing header.\n", "Unsupported number of channels, not writing Xing header.\n", "best_bitrate_idx >= 0", "Lavc libmp3lame", "Lavf lame", "Invalid ID3v2 version requested: %d. Only 3, 4 or 0 (disabled) are allowed.\n", "Invalid audio stream. Exactly one MP3 audio stream is required.\n", "Only audio streams and pictures are allowed in MP3.\n", "No audio stream present.\n", "Attached pictures were requested, but the ID3v2 header is disabled.\n", "Audio packet of size %d (starting with %08X...) is invalid, writing it anyway.\n", "Not enough memory to buffer audio. Skipping picture streams\n", "Got more than one picture in stream %d, ignoring.\n", "No packets were sent for some of the attached pictures.\n", "Too many samples of initial padding.\n", "Too many samples of trailing padding.\n", "audio/mpeg", "MP3 muxer", "id3v2_version", "Select ID3v2 version to write. Currently 3 and 4 are supported.", "write_id3v1", "Enable ID3v1 writing. ID3v1 tags are written in UTF-8 which may not be supported by most software.", "write_xing", "Write the Xing header containing file duration.", "mpegps_read_pes_header", "mpegps_read_dts", "mpegps_read_packet", "IMKH", "Sofdec", "libavformat/mpeg.c", "Further flags set but no bytes left\n", "pes_ext %X is invalid\n", "none (ret=%d)\n", "pos=0x%lx dts=0x%lx %0.3f\n", "%d: pts=%0.3f dts=%0.3f size=%d\n", "mpegts_set_stream_info", "reanalyze", "mpegts_resync", "mpegts_open_filter", "seek_back", "parse_mp4_descr", "handle_packet", "new_pes_packet", "mpegts_push_data", "m4sl_cb", "handle_packets", "mpegts_read_header", "get_packet_size", "pat_cb", "sdt_cb", "ff_parse_mpeg2_descriptor", "drac", "HEVC", "VC-1", "libavformat/mpegts.c", "cannot set stream info, internal codec is open\n", "stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n", "HDMV", "HDPR", "changing packet size to %d\n", "max resync size reached, could not find sync byte\n", "Filter: pid=0x%x type=%d\n", "Unable to seek back to the start\n", "Tag %x length violation new length %d bytes remaining %d\n", "Maximum MP4 descriptor level exceeded\n", "Found tag %x expected %x\n", "Predefined SLConfigDescriptor", "Continuity check failed for pid %d expected %d got %d\n", "pos >= 188", "All programs have pmt, headers found\n", "PES packet size mismatch\n", "pid=%x pes_code=%#x\n", "pid=%x stream_type=%x probing\n", "pid %x is not PES\n", "Skipping after seek\n", "Failed to allocate buffers for seekback\n", "score: %d, dvhs_score: %d, fec_score: %d \n", "Could not detect TS packet size, defaulting to non-FEC/DVHS\n", "tuning done\n", "invalid pcr pair %ld >= %ld\n", "start=%0.3f pcr=%0.3f incr=%d\n", "PAT:\n", "sid=0x%x pid=0x%x\n", "SDT:\n", "service_name", "service_provider", "language_count <= sizeof(language) / 4", "DVB subtitles with multiple languages", "Opus in MPEG-TS - channel_config_code > 0x8", "PMT: len %i\n", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "pcr_pid=0x%x\n", "program tag: 0x%02x len=%d\n", "CUEI", "mpegtsraw", "mpegts", "mpegtsraw demuxer", "resync_size", "set size limit for looking up a new synchronization", "compute_pcr", "compute exact PCR for each transport stream packet", "ts_packetsize", "output option carrying the raw packet size", "mpegts demuxer", "fix_teletext_pts", "try to fix pts values of dvb teletext streams", "scan_all_pmts", "scan and combine all PMTs", "skip_changes", "skip changing / adding streams / programs", "skip_clear", "skip clearing programs", "mpegvideo", "mpegvideo demuxer", "check_packet", "do_packet_auto_bsf", "compute_muxer_pkt_fields", "write_packet", "av_write_uncoded_frame_internal", "avformat_alloc_output_context2", "init_muxer", "ff_interleave_add_packet", "ff_interleave_packet_per_dts", "av_interleaved_write_frame", "av_write_uncoded_frame_query", "libavformat/mux.c", "Invalid packet stream index: %d\n", "Received a packet for an attachment stream.\n", "Failed to split side data before bitstream filter\n", "Failed to send packet to filter %s for stream %d\n", "Timestamps are unset in a packet for stream %d. This is deprecated and will stop working in the future. Fix your code to set the timestamps properly\n", "compute_muxer_pkt_fields: pts:%s dts:%s cur_dts:%s b:%d size:%d st:%d\n", "Packet with invalid duration %ld in stream %d\n", "Encoder did not produce proper pts, making some up.\n", "Application provided invalid, non monotonically increasing dts to muxer in stream %d: %s >= %s\n", "pts (%s) < dts (%s) in stream %d\n", "av_write_frame: pts2:%s dts2:%s\n", "failed to avoid negative pts %s in stream %d.\nTry -avoid_negative_ts 1 as a possible workaround.\n", "Packets poorly interleaved, failed to avoid negative timestamp %s in stream %d.\nTry -max_interleave_delta 0 as a possible workaround.\n", "pkt->size == ((-2147483647 - 1) / 3 * 2 + (int)sizeof(AVFrame))", "s->oformat", "Requested output format '%s' is not a suitable output format\n", "Unable to find a suitable output format for '%s'\n", "Setting the AVFormatContext to bitexact mode, because the AVCodecContext is in that mode. This behavior will change in the future. To keep the current behavior, set AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n", "No streams to mux were specified\n", "Using AVStream.codec.time_base as a timebase hint to the muxer is deprecated. Set AVStream.time_base instead.\n", "Using AVStream.codec to pass codec parameters to muxers is deprecated, use AVStream.codecpar instead.\n", "sample rate not set\n", "Aspect ratio mismatch between muxer (%d/%d) and encoder layer (%d/%d)\n", "Tag %s incompatible with output codec id '%d' (%s)\n", "encoder-", "((AVFrame *)pkt->data)->buf", "Delay between the first packet and last packet in the muxing queue is %ld > %ld: forcing output\n", "av_interleaved_write_frame size:%d dts:%s pts:%s\n", "av_interleaved_write_frame FLUSH\n", "ff_network_init", "ff_socket", "ff_listen", "ff_accept", "ff_listen_connect", "libavformat/network.c", "Using network protocols without global network initialization. Please use avformat_network_init(), this will become mandatory later.\n", "Failed to set close on exec\n", "setsockopt(SO_REUSEADDR) failed\n", "ff_socket_nonblock failed\n", "ret:%d neterrno:%d ff_poll_interrupt error", "ret:%d neterrno:%d getsockop error", "Connection to %s failed (%s), trying next address\n", "ret:%d neterrno:%d Connection to %s failed: %s\n", "ret:%d neterrno:%d default error", "ff_vorbis_comment", "vorbis_header", "METADATA_BLOCK_PICTURE", "libavformat/oggparsevorbis.c", "out-of-memory error. Skipping cover art block.\n", "Failed to parse cover art block.\n", "CHAPTER%03d", "%02d:%02d:%02d.%03d", "NAME", "%td bytes of comment header remain\n", "truncated comment header, %i comments not found\n", "Channel change is not supported\n", "io_open_default", "reading", "libavformat/options.c", "Opening '%s' for %s\n", "AVFormatContext", "avioflags", "reduce buffering", "set probing size", "formatprobesize", "number of bytes to probe file format", "set packet size", "flush_packets", "reduce the latency by flushing out packets immediately", "ignidx", "ignore index", "genpts", "generate pts", "nofillin", "do not fill in missing values that can be exactly calculated", "noparse", "disable AVParsers, this needs nofillin too", "igndts", "ignore dts", "discardcorrupt", "discard corrupted frames", "sortdts", "try to interleave outputted packets by dts", "keepside", "don't merge side data", "fastseek", "fast but inaccurate seeks", "enable RTP MP4A-LATM payload", "nobuffer", "reduce the latency introduced by optional buffering", "seek2any", "allow seeking to non-keyframes on demuxer level when supported", "do not write random/volatile data", "stop muxing with the shortest stream", "autobsf", "add needed bsfs automatically (delays header until each stream's first packet is written)", "analyzeduration", "specify how many microseconds are analyzed to probe the input", "cryptokey", "indexmem", "max memory used for timestamp index (per stream)", "rtbufsize", "max memory used for buffering real-time frames", "fdebug", "max_delay", "maximum muxing or demuxing delay in microseconds", "start_time_realtime", "wall-clock time when stream begins (PTS==0)", "fpsprobesize", "number of frames used to probe fps", "audio_preload", "microseconds by which audio packets should be interleaved earlier", "chunk_duration", "microseconds for each chunk", "chunk_size", "size in bytes for each chunk", "f_err_detect", "set error detection flags (deprecated; use err_detect, save via avconv)", "consider things that a sane encoder shouldn't do as an error", "use_wallclock_as_timestamps", "use wallclock as timestamps", "skip_initial_bytes", "set number of bytes to skip before reading header and frames", "correct single timestamp overflows", "enable flushing of the I/O context after each packet", "metadata_header_padding", "set number of bytes to be written as padding in a metadata header", "output_ts_offset", "set output timestamp offset", "max_interleave_delta", "maximum buffering duration for interleaving", "f_strict", "how strictly to follow the standards (deprecated; use strict, save via avconv)", "allow non-standardized experimental variants", "max_ts_probe", "maximum number of packets to read while waiting for the first timestamp", "avoid_negative_ts", "shift timestamps so they start at 0", "enabled when required by target format", "disabled", "do not change timestamps", "make_non_negative", "shift timestamps so they are non negative", "make_zero", "format_whitelist", "List of demuxers that are allowed to be used", "max_streams", "maximum number of streams", "pcm_read_header", " rate=%d", " channels=%d", "libavformat/pcmdec.c", "Invalid sample_rate found in mime_type \"%s\"\n", "st->codecpar->bits_per_coded_sample > 0", "sln demuxer", "mulaw demuxer", "alaw demuxer", "u8 demuxer", "u16le demuxer", "u16be demuxer", "u24le demuxer", "u24be demuxer", "u32le demuxer", "u32be demuxer", "s8 demuxer", "audio/L16", "s16le demuxer", "s16be demuxer", "s24le demuxer", "s24be demuxer", "s32le demuxer", "s32be demuxer", "f32le demuxer", "f32be demuxer", "f64le demuxer", "f64be demuxer", "prompeg_open", "prompeg_init", "prompeg_create_bitstring", "libavformat/prompeg.c", "L * D must be <= 100\n", "Invalid RTP base port %d\n", "ProMPEG CoP#3-R2 FEC L=%d D=%d\n", "Invalid RTP packet size\n", "Failed to allocate the FEC buffer\n", "Unsupported stream format (expected MPEG-TS over RTP)\n", "The RTP packet size must be constant (set pkt_size)\n", "Failed to allocate the bitstring buffer\n", "prompeg", "Time to live (in milliseconds, multicast only)", "FEC L", "FEC D", "force_one_stream", "libavformat/rawenc.c", "%s files have exactly one stream\n", "h264,264", "rawvideo_read_header", "libavformat/rawvideodec.c", "yuv,cif,qcif,rgb", "rawvideo demuxer", "set frame size", "yuv420p", "set frame rate", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "VSM4\r", "FMP4\r", "DIVX\r", "DX50\r", "XVID\r", "MP4S\r", "M4S2\r", "ZMP4\r", "DIV1\r", "BLZ0\r", "mp4v\r", "UMP4\r", "WV1F\r", "SEDG\r", "RMP4\r", "3IV2\r", "WAWV\r", "FFDS\r", "FVFW\r", "DCOD\r", "MVXM\r", "PM4V\r", "SMP4\r", "DXGM\r", "VIDM\r", "M4T3\r", "GEOX\r", "G264\r", "HDX4\r", "DM4V\r", "DMK2\r", "DYM4\r", "DIGI\r", "EPHV\r", "EM4A\r", "M4CC\r", "SN40\r", "VSPX\r", "ULDX\r", "GEOV\r", "SIPP\r", "SM4V\r", "XVIX\r", "DreX\r", "QMP4\r", "PLV1\r", "GLV4\r", "GMP4\r", "MNM4\r", "JR24\n", "JPGL\f", "MJLS\f", "HFYUD", "IV32p", "IV41q", "VP30[", "VP50\\", "VP60\\", "VP61\\", "VP62k", "VP6A]", "VP6F]", "VP90 ", "ASV1!", "ASV2$", "VCR1\"", "FFV1*", "Xxanr", "LM20.", "mrle.", "MSVC/", "msvc/", "CRAM/", "cram/", "WHAM/", "wham,", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "SNOW#", "S263W", "svq19", "tscc:", "ULTI<", "VIXL=", "QPEG=", "Q1.0=", "Q1.1H", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "VMnc^", "tga >", "MPNG>", "PNG1>", "png %", "CLJRu", "drac+", "azpr+", "RPZA+", "rpza\u000b", "SP54|", "AURA}", "LAGSl", "ZECO", "Y41P3", "CUVCF", "AV01", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISMP", "ITCH", "parse_waveformatex", "ff_get_wav_header", "ff_read_riff_info", "wav header size < 14", "WAVEFORMATEX support for RIFX files", "libavformat/riffdec.c", "unknown subformat:%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x {%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x}\n", "Invalid sample rate: %d\n", "INFO subchunk truncated\n", "too big INFO subchunk\n", "truncated file\n", "out of memory, unable to read INFO tag\n", "premature end of file while reading INFO tag\n", "ff_end_tag", "IARL", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "ff_put_wav_header", "libavformat/riffenc.c", "(start&1) == 0", "requested bits_per_coded_sample (%d) and actually stored (%d) differ\n", "/%s/%s/%d", "idle", "/open/1", "Cache-Control: no-cache\r\nContent-type: application/x-fcs\r\nUser-Agent: Shockwave Flash\r\n", "ffrtmphttp", "https,http,tcp,tls", "ffrtmphttp_tls", "Use a HTTPS tunneling connection (RTMPTS).", "ff_amf_get_string", "rtmp_packet_read_one_chunk", "bytestream2_init", "ff_amf_tag_size", "amf_tag_contents", "ff_rtmp_packet_dump", "libavformat/rtmppkt.c", "Unable to read as many bytes as AMF string signaled\n", "RTMP packet size mismatch %d != %d\n", "bytestream2_tell(&gb) >= 0 && bytestream2_tell(&gb) <= data_end - data", " number %g\n", " bool %d\n", " string '%s'\n", " NULL\n", "  %s: ", "chunk size", "bytes read", "server bandwidth", "client bandwidth", "audio packet", "video packet", "Flex shared stream", "Flex shared object", "Flex shared message", "notification", "invoke", "RTMP packet type '%s'(%d) for channel %d, timestamp %d, extra field %d size %d\n", "Server BW = %d\n", "Client BW = %d\n", " %02X", "handle_client_bw", "handle_server_bw", "handle_chunk_size", "write_begin", "bytestream2_init_writer", "bytestream2_init", "rtmp_seek", "gen_seek", "rtmp_pause", "gen_pause", "gen_fcpublish_stream", "gen_publish", "gen_play", "handle_invoke_status", "write_status", "send_invoke_response", "gen_release_stream", "gen_create_stream", "handle_invoke_result", "handle_connect_error", "handle_invoke_error", "rtmp_parse_result", "handle_ping", "gen_pong", "gen_swf_verification", "get_packet", "handle_metadata", "gen_fcunpublish_stream", "gen_delete_stream", "rtmp_open", "rtmp_calc_swfhash", "rtmp_handshake", "rtmp_calc_swf_verification", "rtmp_server_handshake", "rtmp_receive_hs_packet", "rtmp_send_hs_packet", "rtmp_write_amf_data", "read_connect", "libavformat/rtmpproto.c", "Client bandwidth report packet is less than 4 bytes long (%d)\n", "Incorrect client bandwidth %d\n", "Client bandwidth = %d\n", "Too short server bandwidth report packet (%d)\n", "Incorrect server bandwidth %d\n", "Server bandwidth = %d\n", "Too short chunk size change packet (%d)\n", "Incorrect chunk size %d\n", "New incoming chunk size = %d\n", "Unable to create response packet\n", "Seek on stream index %d at timestamp %ld with flags %08x\n", "Sending seek command for timestamp %ld\n", "Unable to send seek command on stream index %d at timestamp %ld with flags %08x\n", "Pause at timestamp %d\n", "Sending pause command for timestamp %d\n", "pause", "Unable to send pause command at timestamp %d\n", "FCPublish stream...\n", "Sending publish command for '%s'\n", "Sending play command for '%s'\n", "play", "_result", "Server error: %s\n", "NetStream.Play.Start", "NetStream.Play.Stop", "NetStream.Play.UnpublishNotify", "NetStream.Publish.Start", "NetStream.Seek.Notify", "FCSubscribe", "onStatus", "status", "%s is now published", "Error in PT_INVOKE\n", "Unable to parse stream name - name too long?\n", "Unable to parse stream name\n", "Unable to find / in url %s, bad format\n", "Unexpected stream %s, expecting %s\n", "onFCPublish", "createStream", "Releasing stream...\n", "releaseStream", "Creating stream...\n", "Unexpected reply on connect()\n", "getStreamLength", "Unexpected reply on getStreamLength()\n", "_checkbw", "authmod=adobe", "authmod=llnw", "Unknown connect error (unsupported authentication method?)\n", "No credentials set\n", "?reason=authfailed", "Incorrect username/password\n", "?reason=nosuchuser", "Incorrect username\n", "Authentication failed\n", "code=403 need auth", "?authmod=%s&user=%s", "?reason=needauth", "No auth parameters found\n", "salt", "opaque", "challenge", "nonce", "Ignoring unsupported var %s\n", "Variable %s has NULL value\n", "?authmod=%s&user=%s&challenge=%s&response=%s", "&opaque=%s", "/_definst_", "00000001", "?authmod=%s&user=%s&nonce=%s&cnonce=%s&nc=%s&response=%s", "received bytes read report\n", "Too short ping packet (%d)\n", "Sending SWF verification...\n", "Ignoring SWFVerification request.\n", "onBWDone", "Unknown packet type received 0x%02X\n", "|RtmpSampleAccess", "@setDataFrame", "Sending bytes read report\n", "Incomplete flv packets in RTMP_PT_METADATA packet\n", "UnPublishing stream...\n", "FCUnpublish", "Deleting stream...\n", "deleteStream", "Detected librtmp style URL parameters, these aren't supported by the libavformat internal RTMP handler currently enabled. See the documentation for the correct way to pass parameters.\n", "rtmp", "rtmp_listen not available for %s\n", "rtmpt", "rtmpts", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "rtmpk", "?listen&listen_timeout=%d", "Cannot open connection %s.\n", "Genuine Adobe Flash Player 001", "rtmp_swfhash", "Handshaking...\n", "Cannot write RTMP handshake request\n", "Cannot read RTMP handshake response\n", "Type answer %d\n", "Server version %d.%d.%d.%d\n", "Server response validating failed\n", "Hash of the decompressed SWF file is not 32 bytes long.\n", "Signature mismatch\n", "Unable to read handshake\n", "RTMP protocol version mismatch\n", "Unable to write answer - RTMP S0\n", "Erroneous Message size %d not following standard\n", "Unable to write answer\n", "RTMP Handshake S1 Error\n", "RTMP Handshake S2 Error\n", "Erroneous C2 Message epoch does not match up with C1 epoch\n", "Erroneous C2 Message random does not match up\n", "slist=", "/ondemand/", "ondemand", ".f4v", ".mp4", "mp4:", ".flv", "%s %d,%d,%d,%d", "FMLE/3.0 (compatible; %s)", "Proto = %s, path = %s, app = %s, fname = %s\n", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "Invalid AMF parameter: %s\n", "received abort message\n", "received acknowledgement\n", "Unknown control message type (%d)\n", "Unable to read command string\n", "Expecting connect, got %s\n", "SeqNum not found\n", "App field not found in connect\n", "App field don't match up: %s <-> %s\n", "fmsVer", "FMS/3,0,1,123", "NetConnection.Connect.Success", "Connection succeeded.", "objectEncoding", "RTMP Handshake C1 Error\n", "RTMP Handshake C2 Error\n", "rtmp_app", "Name of application to connect to on the RTMP server", "rtmp_buffer", "Set buffer time in milliseconds. The default is 3000.", "rtmp_conn", "Append arbitrary AMF data to the Connect message", "rtmp_flashver", "Version of the Flash plugin used to run the SWF player.", "rtmp_flush_interval", "Number of packets flushed in the same request (RTMPT only).", "rtmp_live", "Specify that the media is a live stream.", "live stream", "recorded", "recorded stream", "rtmp_pageurl", "URL of the web page in which the media was embedded. By default no value will be sent.", "rtmp_playpath", "Stream identifier to play or to publish", "rtmp_subscribe", "Name of live stream to subscribe to. Defaults to rtmp_playpath.", "SHA256 hash of the decompressed SWF file (32 bytes).", "rtmp_swfsize", "Size of the decompressed SWF file, required for SWFVerification.", "rtmp_swfurl", "URL of the SWF player. By default no value will be sent", "rtmp_swfverify", "URL to player swf file, compute hash/size automatically.", "rtmp_tcurl", "URL of the target stream. Defaults to proto://host[:port]/app.", "rtmp_listen", "Listen for incoming rtmp connections", "Maximum timeout (in seconds) to wait for incoming connections. -1 is infinite. Implies -rtmp_listen 1", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "payload_type", "scc_write_packet", "scc_write_header", "libavformat/sccenc.c", "Insufficient timestamps.\n", "\n%02d:%02d:%02d:%02d\t", "SCC supports only a single subtitles stream.\n", "Unsupported subtitles codec: %s\n", "Scenarist_SCC V1.0\n", "slave_seek", "subfile_open", "libavformat/subfile.c", "Impossible to seek in file: %s\n", "subfile:", "start offset", "end offset", "ff_text_init_avio", "drop_dups", "libavformat/subtitles.c", "UTF16 is automatically converted to UTF8, do not specify a character encoding\n", "Dropping %d duplicated subtitle events\n", "tcp_write", "tcp_read", "tcp_accept", "tcp_open", "tcp_getaddrinfo_a", "sigterm_handler", "libavformat/tcp.c", "ret:%d neterrno:%d network wait timeout", "ret:%d neterrno:%d socket send failed", "ret:%d neterrno:%d socket revc data failed", "ret:%d neterrno:%d ff_accept failed", "%d proto is not tcp", "%d invalid port", "listen_timeout", "open dns parser thread fail\n", "dns parser thread is kill ok\n", "dns thread kill is not inval\n", "%d Failed to resolve hostname. %s\n", "neterrno:%d Failed to resolve hostname.ctx is null.", "neterrno:%d Failed to resolve hostname,error:%s\n", "%d Failed to resolve hostname %s.", "%d Failed to resolve hostname time out.", "ret:%d neterrno:%d Failed to resolve hostname.", "neterrno:%d ff_socket failed", "ret:%d neterrno:%d ff_listen failed", "ret:%d neterrno:%d ff_listen_bind failed", "ret:%d neterrno:%d ff_listen_connect failed", "recv dns parser thread kill\n", "Listen for incoming connections", "Connection awaiting timeout (in milliseconds)", "send_buffer_size", "Socket send buffer size (in bytes)", "recv_buffer_size", "Socket receive buffer size (in bytes)", "is_first_packet", "Mark data is first packet or not", "cafile", "cert", "?listen=1", "print_tls_error", "tls_open", "libavformat/tls_openssl.c", "SSL_CTX_load_verify_locations %s\n", "Unable to load cert file %s: %s\n", "Unable to load key file %s: %s\n", "Unable to negotiate TLS/SSL session\n", "ca_file", "Certificate Authority database file", "tls_verify", "Verify the peer certificate", "cert_file", "Certificate file", "key_file", "Private key file", "verifyhost", "Verify against a specific hostname", "urlprotocol bio", "ttav_register_mem_protocol", "libavformat/ttutils.c", "ttav_register_##x##_protocol: ABI mismatch.\n", "log_net_error", "udp_resolve_host", "udp_open", "udp_port", "libavformat/udp.c", "setsockopt(IP_DROP_MEMBERSHIP)", "setsockopt(IPV6_DROP_MEMBERSHIP)", "getaddrinfo(%s, %s): %s\n", "setsockopt(MCAST_JOIN_SOURCE_GROUP)", "setsockopt(MCAST_BLOCK_SOURCE)", "overrun_nonfatal", "'overrun_nonfatal' option was set but it is not supported on this build (pthread support is required)\n", "udplite_coverage", "localport", "'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)\n", "'bitrate' option was set but it is not supported on this build (pthread support is required)\n", "burst_bits", "localaddr", "sources", "socket option UDPLITE_SEND_CSCOV not available", "socket option UDPLITE_RECV_CSCOV not available", "getnameinfo: %s\n", "setsockopt(IP_MULTICAST_TTL)", "setsockopt(IPV6_MULTICAST_HOPS)", "Simultaneously including and excluding multicast sources is not supported\n", "setsockopt(IP_ADD_MEMBERSHIP)", "setsockopt(IPV6_ADD_MEMBERSHIP)", "setsockopt(SO_SNDBUF)", "setsockopt(SO_RECVBUF)", "getsockopt(SO_RCVBUF)", "end receive buffer size reported is %d\n", "attempted to set receive buffer to size %d but it only ended up set as %d", "broadcast", "udplite", "System data size (in bytes)", "Bits to send per second", "Max length of bursts in bits (when using bitrate)", "Local port", "local_port", "Local address", "choose UDPLite head size which should be validated by checksum", "explicitly allow reusing UDP sockets", "reuse_socket", "explicitly allow or disallow broadcast destination", "Time to live (multicast only)", "set if connect() should be called on socket", "set the UDP receiving circular buffer size, expressed as a number of packets with size of 188 bytes", "survive in case of UDP receiving circular buffer overrun", "set raise error timeout (only in read mode)", "Source list", "Block list", "%s://", "FFmpeg version 3.3.2", "read_from_packet_buffer", "probe_codec", "set_codec_from_probe_data", "try_decode_frame", "ff_copy_whiteblacklists", "ffio_limit", "av_demuxer_open", "avformat_queue_attached_pictures", "ff_compute_frame_duration", "compute_pkt_fields", "update_initial_durations", "ff_add_index_entry", "ff_configure_buffers_for_index", "ff_find_last_ts", "ff_gen_search", "ff_seek_frame_binary", "ff_alloc_extradata", "ff_get_extradata", "ff_rfps_add_frame", "ff_rfps_calculate", "ff_read_packet", "read_frame_internal", "seek_frame_generic", "avformat_seek_file", "update_stream_timings", "avformat_find_stream_info", "estimate_timings_from_pts", "estimate_timings_from_bit_rate", "estimate_timings", "av_find_best_stream", "av_read_play", "av_read_pause", "ff_free_stream", "av_new_program", "avpriv_new_chapter", "av_program_add_stream_index", "avformat_open_input", "init_input", "0123456789abcdef0123456789ABCDEFavpriv_set_pts_info", "avformat_new_stream", "avformat_query_codec", "avformat_network_init", "ff_add_param_change", "avformat_match_stream_specifier", "ff_generate_avci_extradata", "ff_stream_add_bitstream_filter", "av_apply_bitstream_filters", "ff_parse_creation_time_metadata", "ff_get_packet_palette", "libavformat/utils.c", "unknown codec", "unspecified frame size", "unspecified sample format", "unspecified sample rate", "unspecified number of channels", "no decodable DTS frames", "unspecified size", "unspecified pixel format", "no frame in rv30/40 and no sar", "mp4v", "*pkt_buffer", "probing stream %d pp:%d\n", "Failed to reallocate probe buffer for stream %d\n", "nothing to probe for stream %d\n", "Probe with size=%d, packets=%d detected %s with score=%d\n", "probed stream %d\n", "probed stream %d failed\n", "libavformat license: LGPL version 2.1 or later", "!dst->codec_whitelist && !dst->format_whitelist && !dst->protocol_whitelist && !dst->protocol_blacklist", "Failed to duplicate black/whitelist\n", "Truncating packet of size %d to %ld\n", "Format not on whitelist '%s'\n", "Attached picture on stream %d has invalid size, ignoring\n", "st->internal->avctx->ticks_per_frame", "s->iformat", "DTS %li < %li out of order\n", "invalid dts/pts combination %li\n", "first_dts %s not matching first dts %s (pts %s, duration %ld) in the queue\n", "IN delayed:%d pts:%s, dts:%s cur_dts:%s st:%d pc:%p duration:%ld delay:%d onein_oneout:%d\n", "OUTdelayed:%d/%d pts:%s, dts:%s cur_dts:%s\n", "first_dts %s but no packet with dts in the queue\n", "index == 0 || ie[-1].timestamp < timestamp", "Protocol name not provided, cannot determine if input is local or a network protocol, buffers and access patterns cannot be configured optimally without knowing the protocol\n", "cache", "Reconfiguring buffers to size %ld\n", "tmp_pos > pos_max", "gen_seek: %d %s\n", "ts_min < ts_max", "pos_min=0x%lx pos_max=0x%lx dts_min=%s dts_max=%s\n", "pos_limit <= pos_max", "%ld %ld %ld / %s %s %s target:%s limit:%ld start:%ld noc:%d\n", "read_timestamp() failed in the middle\n", "read_seek: %d %s\n", "using cached pos_min=0x%lx dts_min=%s\n", "index < st->nb_index_entries", "using cached pos_max=0x%lx pos_limit=0x%lx dts_max=%s\n", "Failed to read extradata of size %d\n", "rfps: %f %f\n", "Setting avg frame rate based on r frame rate\n", "st->request_probe <= 0", "Dropped corrupted packet (stream = %d)\n", "Invalid stream index %d\n", "Demuxer context update while decoder is open, closing and trying to re-open\n", "Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\n", "ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%ld, flags=%d\n", "parser not found for codec %s, packets or times may be invalid.\n", "demuxer injecting skip %d / discard %d\n", "Could not inject global side data\n", "read_frame_internal stream=%d, pts=%s, dts=%s, size=%d, duration=%ld, flags=%d\n", "st->index_entries", "seek_frame_generic failed as this stream seems to contain no keyframes after the target timestamp, %d non keyframes found\n", "Ignoring outlier non primary stream starttime %f\n", "Ignoring outlier non primary stream endtime %f\n", "Before avformat_find_stream_info() pos: %ld bytes read:%ld seeks:%d nb_streams:%d\n", "Failed to open codec in %s\n", "interrupted\n", "All info found\n", "Probe buffer size limit of %ld bytes reached\n", "Stream #%d: not enough frames to estimate rate; consider increasing probesize\n", "Non-increasing DTS in stream %d: packet %d with DTS %ld, packet %d with DTS %ld\n", "DTS discontinuity in stream %d: packet %d with DTS %ld, packet %d with DTS %ld\n", "max_analyze_duration %ld reached at %ld microseconds st:%d\n", "decoding for stream %d failed\n", "start time for stream %d is not set in estimate_timings_from_pts\n", "stream %d : no PTS found at end of file, duration not set\n", "stream %d : no TS found at start of file, duration not set\n", "Estimating duration from bitrate, this may be inaccurate\n", "stream %d: start_time: %0.3f duration: %0.3f\n", "format: start_time: %0.3f duration: %0.3f bitrate=%ld kb/s\n", "Could not find codec parameters for stream %d (%s): %s\nConsider increasing the value for the 'analyzeduration' and 'probesize' options\n", "After avformat_find_stream_info() pos: %ld bytes read:%ld seeks:%d frames:%d\n", "AVERROR_DECODER_NOT_FOUND", "AVERROR", "s->nb_streams>0", "s->streams[ s->nb_streams - 1 ] == st", "new_program: id=0x%04x\n", "Chapter end time %ld before start %ld\n", "stream index %d is not valid\n", "%0*d", "Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\n", "Custom AVIOContext makes no sense and will be ignored with AVFMT_NOFILE format.\n", "Discarding ID3 tags because more suitable tags were found.\n", "demuxer does not support additional id3 data, skipping\n", "st:%d removing common factor %d from timebase\n", "st:%d has too large timebase, reducing\n", "Ignoring attempt to set invalid timebase %d/%d for st:%d\n", "Number of streams exceeds max_streams parameter (%d), see the documentation if you wish to increase it\n", "AVERROR_PATCHWELCOME", "Invalid stream specifier: %s.\n", "Unknown bitstream filter '%s'\n", "Automatically inserted bitstream filter '%s'; args='%s'\n", "copy", "Failed to open bitstream filter %s for stream %d with codec %s", "Failed to parse creation_time %s\n", "Invalid palette side data\n", "mov,mp4,3gp,3g2,psp,ipod,ismv,f4v", "dvbsub", "dvbtxt", "loas", "mjpeg_2000", "ALBUMARTIST", "TRACKNUMBER", "DISCNUMBER", "DESCRIPTION", "get_bit_depth", "get_vpx_color_space", "get_vpx_chroma_subsampling", "libavformat/vpcc.c", "Unsupported pixel format (%d)\n", "Unsupported color space (%d)\n", "wav_parse_bext_string", "wav_read_header", "libavformat/wavdec.c", "length <= sizeof(temp)", "invalid start code %s in RIFF header\n", "invalid format in RIFF header\n", "negative data_size and/or sample_count in ds64: data_size = %ld, sample_count = %ld\n", "found more than one 'fmt ' tag\n", "found more than one 'XMA2' tag\n", "found no 'fmt ' tag before the 'data' tag\n", "Ignoring maximum wav data size, file may be invalid\n", "originator", "originator_reference", "origination_date", "origination_time", "time_reference", "0x%016lX%016lX%016lX%016lX", "0x%016lX%016lX%016lX%016lX%016lX%016lX%016lX%016lX", "umid", "coding_history", "found no 'fmt ' tag before the 'SMV0' tag\n", "Unknown SMV version found\n", "Found SMV data\n", "Could not allocate extradata.\n", "too many frames per jpeg\n", "too short LIST tag\n", "no 'fmt ' or 'XMA2' tag found\n", "no 'data' tag found\n", "Data size %ld is too large\n", "ignoring wrong sample_count %ld\n", "WAVE", "RIFF", "RIFX", "RF64", "ds64", "WAV demuxer", "ignore_length", "Ignore length", "peak_write_frame", "wav_write_packet", "peak_write_chunk", "wav_write_trailer", "wav_write_header", "peak_init_writer", "libavformat/wavenc.c", "No memory for peak data\n", "wav_write_packet: NOPTS\n", "levl", "Writing local time and date to Peak Envelope Chunk\n", "%Y:%m:%d:%H:%M:%S:", "Failed to write timestamp\n", "Filesize %ld invalid for wav, output file will be broken\n", "JUNK", "WAVE files have exactly one stream\n", "fmt ", "%s codec not supported in WAVE format\n", "fact", "%s codec not supported for Peak Chunk\n", "Writing 16 bit peak for 8 bit audio does not make sense\n", "audio/x-wav", "WAV muxer", "write_bext", "Write BEXT chunk.", "write_peak", "Write Peak Envelope chunk.", "Do not write peak chunk.", "Append peak chunk after wav data.", "Write only peak chunk, omit wav data.", "rf64", "Use RF64 header rather than RIFF for large files.", "Write RF64 header if file grows large enough.", "always", "Always write RF64 header regardless of file size.", "never", "Never write RF64 header regardless of file size.", "peak_block_size", "Number of audio samples used to generate each peak frame.", "peak_format", "The format of the peak envelope data (1: uint8, 2: uint16).", "peak_ppv", "Number of peak points per peak value (1 or 2).", "RIFF", "WEBP", "webp_write_header", "VP8X", "ANIM", "ANMF", "libavformat/webpenc.c", "Only exactly 1 stream is supported\n", "Only WebP is supported\n", "WebP muxer", "Number of times to loop the output: 0 - infinite loop", "av_utf8_decode", "libavutil/avstring.c", "tail_len <= 5", "'\\''", "%d channels", "3.0(back)", "quad", "quad(side)", "5.0(side)", "5.1(side)", "6.0(front)", "hexagonal", "6.1(back)", "6.1(front)", "7.0(front)", "7.1(wide)", "7.1(wide-side)", "octagonal", "hexadecagonal", "downmix", "low frequency", "front left-of-center", "front right-of-center", "side left", "side right", "top center", "top front left", "top front center", "top front right", "top back left", "top back center", "top back right", "downmix left", "downmix right", "wide left", "wide right", "surround direct left", "surround direct right", "LFE2", "low frequency 2", "av_cpu_count", "libavutil/cpu.c", "MMX implied by specified flags\n", "detected %d logical cores\n", "armv8", "cpuflags", ".%06dZ", "Error number %d occurred", "BSF_NOT_FOUND", "Bitstream filter not found", "Internal bug, should not have happened", "BUG2", "BUFFER_TOO_SMALL", "Buffer too small", "Decoder not found", "DEMUXER_NOT_FOUND", "Demuxer not found", "ENCODER_NOT_FOUND", "Encoder not found", "End of file", "EXIT", "Immediate exit requested", "EXTERNAL", "Generic error in an external library", "FILTER_NOT_FOUND", "Filter not found", "INPUT_CHANGED", "Input changed", "Invalid data found when processing input", "Muxer not found", "Option not found", "Output changed", "Not yet implemented in FFmpeg, patches welcome", "PROTOCOL_NOT_FOUND", "Protocol not found", "STREAM_NOT_FOUND", "Stream not found", "UNKNOWN", "Unknown error occurred", "EXPERIMENTAL", "Experimental feature", "INPUT_AND_OUTPUT_CHANGED", "Input and output changed", "HTTP_BAD_REQUEST", "Server returned 400 Bad Request", "HTTP_UNAUTHORIZED", "Server returned 401 Unauthorized (authorization failed)", "HTTP_FORBIDDEN", "Server returned 403 Forbidden (access denied)", "HTTP_NOT_FOUND", "Server returned 404 Not Found", "HTTP_OTHER_4XX", "Server returned 4XX Client Error, but not one of 40{0,1,3,4}", "HTTP_SERVER_ERROR", "Server returned 5XX Server Error reply", "HIJACK_VID", "Check vid hijack error", "DRM_OPEN_FAILED", "Drm open failed", "DRM_DECRYPT_FAILED", "Drm decrypt failed", "               \n ", "eval_expr", "parse_primary", "av_expr_parse", "libavutil/eval.c", "Undefined constant or missing '(' in '%s'\n", "Missing ')' in '%s'\n", "Missing ')' or too many args in '%s'\n", "sinh", "cosh", "tanh", "atan", "acos", "gauss", "isnan", "isinf", "while", "taylor", "floor", "ceil", "print", "random", "hypot", "ifnot", "bitand", "bitor", "between", "atan2", "Unknown function in '%s'\n", "Invalid chars '%s' at the end of expression '%s'\n", "QP2LAMBDA", "Eval", "av_file_map", "libavutil/file.c", "Cannot read file '%s': %s\n", "Error occurred in fstat(): %s\n", "Error occurred in mmap(): %s\n", "avpriv_open", "avpriv_tempfile", "libavutil/file_open.c", "ff_tempfile: Cannot allocate file name\n", "/tmp/%sXXXXXX", "./%sXXXXXX", "ff_tempfile: Cannot open temporary file %s\n", "TEMPFILE", "AVPanScan", "ATSC A53 Part 4 Closed Captions", "Stereoscopic 3d metadata", "AVMatrixEncoding", "Metadata relevant to a downmix procedure", "AVReplayGain", "3x3 displaymatrix", "Active format description", "Motion vectors", "Skip samples", "Audio service type", "GOP timecode", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA512/224", "SHA512/256", "SHA384", "SHA512", "CRC32", "adler32", "av_hwframe_map", "av_hwframe_get_buffer", "av_hwframe_ctx_init", "libavutil/hwcontext.c", "Invalid mapping found when attempting unmap.\n", "Failed to map frame into derived frame context: %d.\n", "The hardware pixel format '%s' is not supported by the device type '%s'\n", "AVHWFramesContext", "image_copy_plane", "image_copy", "av_image_check_size2", "av_image_alloc", "av_image_copy_to_buffer", "libavutil/imgutils.c", "abs(src_linesize) >= bytewidth", "abs(dst_linesize) >= bytewidth", "av_image_get_linesize failed\n", "Picture size %ux%u is invalid\n", "Picture size %ux%u exceeds specified max pixel count %ld, see the documentation if you wish to increase it\n", "Formats with a palette require a minimum alignment of 4\n", "IMGUTILS", "missing_feature_sample", "quiet", "verbose", "panic", "[%s @ %p] ", "[%s] ", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "256color", "%s%s%s%s", "    Last message repeated %d times\r", "    Last message repeated %d times\n", "<%s %s %d> %s", "<%s,%s,%d>%s\n", "libavutil/log.c", "copy_backptr", "libavutil/lzo.c", "cnt >= 0", "cnt > 0", "av_rescale_delta", "libavutil/mathematics.c", "in_ts != ((int64_t)0x8000000000000000UL)", "duration >= 0", "ff_fast_malloc", "set_string_fmt", "write_number", "format_duration", "set_string_image_size", "set_string_color", "log_value", "set_string_video_rate", "av_opt_set_defaults2", "av_opt_set_image_size", "av_opt_set_video_rate", "set_format", "av_opt_set_channel_layout", "av_opt_get_image_size", "get_format", "av_opt_get_channel_layout", "set_string_number", "set_string_bool", "av_opt_set", "parse_key_value_pair", "av_opt_set_from_string", "av_opt_set_dict2", "opt_list", "av_opt_show2", "av_opt_is_set_to_default", "av_opt_serialize", "libavutil/opt.c", "Unable to parse option value \"%s\" as %s\n", "Value %d for parameter '%s' out of %s format range [%d - %d]\n", "Value %f for parameter '%s' out of range [%g - %g]\n", "Value %f for parameter '%s' is not a valid set of 32bit integer flags\n", "size >= 25", "INT64_MAX", "INT64_MIN", "%ld:%02d:%02d.%06d", "%d:%02d.%06d", "Unable to parse option value \"%s\" as image size\n", "Unable to parse option value \"%s\" as color\n", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "-FLT_MAX", "-FLT_MIN", "-DBL_MAX", "-DBL_MIN", "Unable to parse option value \"%s\" as video rate\n", "AVOption type %d of option %s not implemented yet\n", "The value set by option '%s' is not an image size.\n", "Invalid negative size value %dx%d for size '%s'\n", "The value set by option '%s' is not a video rate.\n", "The value set by option '%s' is not a %s format", "pixel", "The value set by option '%s' is not a channel layout.\n", "0x%08X", "0x%02x%02x%02x%02x", "0x%lx", "The value for option '%s' is not an image size.\n", "The value for option '%s' is not a %s format.\n", "The value for option '%s' is not a channel layout.\n", "%d%*1[:/]%d%c", "const_values array too small for %s\n", "Unable to parse option value \"%s\"\n", "true,y,yes,enable,enabled,on", "false,n,no,disable,disabled,off", "Unable to parse option value \"%s\" as boolean\n", "Unable to parse option value \"%s\" as duration\n", "Unable to parse option value \"%s\" as channel layout\n", "Invalid option type.\n", "Missing key or no key/value separator found after key '%s'\n", "Setting entry with key '%s' to value '%s'\n", "Error setting option %s to value %s.\n", "     %-15s ", "  %s%-17s ", "%-12s ", "<flags>", "<int>", "<int64>", "<uint64>", "<double>", "<float>", "<string>", "<rational>", "<binary>", "<image_size>", "<video_rate>", "<pix_fmt>", "<sample_fmt>", "<duration>", "<color>", "<channel_layout>", "<boolean>", " (from ", " to ", " (default ", "%s AVOptions:\n", "Not supported option type: %d, option name: %s\n", "Invalid separator(s) found.", "av_parse_color", "%d:%d%c", "bikeshed", "0123456789ABCDEFabcdef", "libavutil/parseutils.c", "Invalid 0xRRGGBB[AA] color string: '%s'\n", "Cannot find color '%s'\n", "Invalid alpha value specifier '%s' in '%s'\n", "%Y - %m - %d", "%Y%m%d", "%J:%M:%S", "%H:%M", "%H%M", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "BlueViolet", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "CornflowerBlue", "Cornsilk", "Crimson", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Plum", "PowderBlue", "RosyBrown", "RoyalBlue", "SaddleBrown", "SandyBrown", "SeaShell", "Sienna", "Silver", "Snow", "Teal", "Thistle", "Tomato", "Wheat", "WhiteSmoke", "YellowGreen", "january", "february", "march", "april", "june", "july", "august", "september", "october", "november", "december", "qntsc", "qpal", "sntsc", "spal", "ntsc-film", "sqcif", "4cif", "16cif", "qqvga", "svga", "qxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd720", "hd1080", "2kdci", "2kflat", "2kscope", "4kdci", "4kflat", "4kscope", "hqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "ff_check_pixfmt_descriptors", "yuvj", "bgra", "rgba", "rgb32", "bgr32", "vaapi", "name nb_components nb_bits", "%-11s %7d %10d", "libavutil/pixdesc.c", "d->log2_chroma_w <= 3", "d->log2_chroma_h <= 3", "d->nb_components <= 4", "d->name && d->name[0]", "(d->nb_components==4 || d->nb_components==2) == !!(d->flags & (1 << 7))", "!c->plane && !c->step && !c->offset && !c->shift && !c->depth", "8*c->step >= c->depth", "tmp[0] == 0 && tmp[1] == 0", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "gray8,y8", "monow", "monob", "pal8", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "gray16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "0rgb", "rgb0", "0bgr", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "mediacodec", "gray12be", "gray12le", "gray10be", "gray10le", "p016le", "p016be", "av_pixelutils_get_sad_fn", "libavutil/pixelutils.c", "pixelutils support is required but libavutil is not compiled with it\n", "s16p", "s32p", "fltp", "dblp", "s64p", "name   depth", "%-6s   %2d ", "cubemap", "tiled equirectangular", "side by side", "top and bottom", "frame alternate", "side by side (quincunx subsampling)", "interleaved lines", "interleaved columns", "check_timecode", "av_timecode_init_from_string", "libavutil/timecode.c", "Timecode frame rate must be specified\n", "Drop frame is only allowed with 30000/1001 or 60000/1001 FPS\n", "Using non-standard frame rate %d/%d\n", "%s%02d:%02d:%02d%c%02d", "%02u:%02u:%02u%c%02u", "%d:%d:%d%c%d", "Unable to parse timecode, syntax: hh:mm:ss[:;.]ff\n", "IPBSipb", "av_int_list_length_for_size", "3.3.2", "libavutil license: LGPL version 2.1 or later", "attachment", "libavutil/utils.c", "!\"valid element size\"", ". -_", "<fBBf<", "fffffff", "fff$", "000`", "<00000000<", "<\f\f\f\f\f\f\f\f<", "<ll>", "8ll8", "8ll8", "|||||||", "<fBBf<", "0xx00", "x00000x", "x`````x", "p000x", "p00000x", "p000x", "p000x", "p000x", "<ll>", "8ll8", "8ll8", "<<<<", "libswresample/audioconvert.c", "ctx->channels == out->ch_count", "swri_get_dither", "swri_dither_init", "s->dither.method < SWR_DITHER_NB", "Requested noise shaping dither not available at this sampling rate, using triangular hp dither\n", "SWResampler", "set input channel count", "in_channel_count", "set output channel count", "out_channel_count", "set used channel count", "used_channel_count", "set input sample rate", "set output sample rate", "out_sample_rate", "set input sample format", "in_sample_fmt", "set output sample format", "out_sample_fmt", "set internal sample format", "internal_sample_fmt", "set input channel layout", "in_channel_layout", "set output channel layout", "out_channel_layout", "clev", "set center mix level", "center_mix_level", "slev", "set surround mix level", "surround_mix_level", "set surround mix Level", "lfe_mix_level", "set LFE mix level", "rmvol", "set rematrix volume", "rematrix_volume", "rematrix_maxval", "set rematrix maxval", "set flags", "swr_flags", "force resampling", "dither_scale", "set dither scale", "dither_method", "set dither method", "select rectangular dither", "triangular", "select triangular dither", "triangular_hp", "select triangular dither with high pass", "lipshitz", "select Lipshitz noise shaping dither", "select Shibata noise shaping dither", "low_shibata", "select low Shibata noise shaping dither", "high_shibata", "select high Shibata noise shaping dither", "f_weighted", "select f-weighted noise shaping dither", "modified_e_weighted", "select modified-e-weighted noise shaping dither", "improved_e_weighted", "select improved-e-weighted noise shaping dither", "filter_size", "set swr resampling filter size", "phase_shift", "set swr resampling phase shift", "linear_interp", "enable linear interpolation", "exact_rational", "enable exact rational", "set cutoff frequency ratio", "resample_cutoff", "resampler", "set resampling Engine", "select SW Resampler", "soxr", "select SoX Resampler", "set soxr resampling precision (in bits)", "cheby", "enable soxr Chebyshev passband & higher-precision irrational ratio approximation", "min_comp", "set minimum difference between timestamps and audio data (in seconds) below which no timestamp compensation of either kind is applied", "min_hard_comp", "set minimum difference between timestamps and audio data (in seconds) to trigger padding/trimming the data.", "comp_duration", "set duration (in seconds) over which data is stretched/squeezed to make it match the timestamps.", "max_soft_comp", "set maximum factor by which data is stretched/squeezed to make it match the timestamps.", "simplified 1 parameter audio timestamp matching, 0(disabled), 1(filling and trimming), >1(maximum stretch/squeeze in samples per second)", "first_pts", "Assume the first pts should be this value (in samples).", "matrix_encoding", "set matrixed stereo encoding", "select none", "dolby", "select Dolby", "dplii", "select Dolby Pro Logic II", "filter_type", "select swr filter type", "select cubic", "blackman_nuttall", "select Blackman Nuttall windowed sinc", "kaiser", "select Kaiser windowed sinc", "kaiser_beta", "set swr Kaiser window beta", "output_sample_bits", "set swr number of output sample bits", "clean_layout", "swr_build_matrix", "swri_rematrix_init", "swri_rematrix", "libswresample/rematrix.c", "Treating %s as mono\n", "Input channel layout '%s' is not supported\n", "Output channel layout '%s' is not supported\n", "Matrix coefficients:\n", "%s:%f ", "!s->out_ch_layout || out->ch_count == av_get_channel_layout_nb_channels(s->out_ch_layout)", "!s-> in_ch_layout || in ->ch_count == av_get_channel_layout_nb_channels(s-> in_ch_layout)", "build_filter", "resample_init", "libswresample/resample.c", "a->planar", "tap_count == 1 || tap_count % 2 == 0", "!c->frac && !c->dst_incr_mod", "Unsupported sample format\n", "Filter length too large\n", "copy", "swr_alloc_set_opts", "swr_init", "swri_realloc_audio", "swr_convert_internal", "FFmpeg version 3.3.2", "swr_convert", "swr_drop_output", "swr_inject_silence", "swr_get_out_samples", "swr_next_pts", "libswresample/swresample.c", "out->planar == in->planar", "out->bps == in->bps", "out->ch_count == in->ch_count", "libswresample license: LGPL version 2.1 or later", "Failed to set option\n", "Requested input sample format %d is invalid\n", "Requested output sample format %d is invalid\n", "Input channel layout 0x%lx is invalid or unsupported.\n", "Output channel layout 0x%lx is invalid or unsupported.\n", "Requested resampling engine is unavailable\n", "Input channel layout has a different number of channels than the number of used channels, ignoring layout\n", "Using %s internally between filters\n", "Requested sample format %s is not supported internally, S16/S32/S64/FLT/DBL is supported\n", "Failed to initialize resampler\n", "Resampling only supported with internal s16/s32/flt/dbl\n", "!s->in_ch_layout", "Input channel count and layout are unset\n", "Output channel layout %s mismatches specified channel count %d\n", "Input channel layout %s mismatches specified channel count %d\n", "Rematrix is needed between %s and %s but there is not enough information to do it\n", "!s->preout.count", "a->bps", "a->ch_count", "s->midbuf.ch_count == s->used_ch_count", "s->midbuf.ch_count == s->out.ch_count", "s->in.planar", "s->dither.noise.ch_count == preout->ch_count", "!s->resample", "Context has not been initialized\n", "s->drop_output", "discarding %d audio samples\n", "adding %d audio samples of silence\n", "s->out_sample_rate == s->in_sample_rate", "Failed to compensate for timestamp delta of %f\n", "compensating audio timestamp drift:%f compensation:%d in:%d\n", "swr_config_frame", "libswresample/swresample_frame.c", "isGray", "ff_sws_alphablendaway", "isBE", "libswscale/swscale_internal.h", "libswscale/alphablend.c", "plane_count == nb_components - 1", "isALPHA", "isBE", "is16BPS", "isNBPS", "swscaler", "SWScaler", "scaler flags", "fast_bilinear", "fast bilinear", "bicubic", "nearest neighbor", "averaging area", "bicublin", "luma bicubic, chroma bilinear", "Gaussian", "lanczos", "Lanczos", "natural bicubic spline", "print_info", "print info", "accurate_rnd", "accurate rounding", "full_chroma_int", "full chroma interpolation", "full_chroma_inp", "full chroma input", "error_diffusion", "error diffusion dither", "source width", "source height", "destination width", "destination height", "source format", "destination format", "source is full range", "destination is full range", "scaler param 0", "scaler param 1", "source vertical chroma position in luma grid/256", "source horizontal chroma position in luma grid/256", "destination vertical chroma position in luma grid/256", "destination horizontal chroma position in luma grid/256", "sws_dither", "set dithering algorithm", "leave choice to sws", "bayer dither", "error diffusion", "a_dither", "arithmetic addition dither", "x_dither", "arithmetic xor dither", "gamma correct scaling", "alphablend", "mode for alpha -> non alpha", "ignore alpha", "uniform_color", "blend onto a uniform color", "blend onto a checkerboard", "isBE", "is16BPS", "isNBPS", "ff_sws_init_output_funcs", "alloc_lines", "isPlanarYUV", "isYUV", "isGray", "usePal", "libswscale/slice.c", "n == s->plane[ii].available_lines", "isALPHA", "isPlanar", "usePal", "isAnyRGB", "isNBPS", "is16BPS", "isPacked", "swscale", "@@@@@@@@isBE", "isGray", "isBayer", "sws_scale", "Warning: dstStride is not aligned!\n         ->cannot do aligned memory accesses anymore\n", "(lastLumSrcY - firstLumSrcY + 1) <= hout_slice->plane[0].available_lines", "(lastChrSrcY - firstChrSrcY + 1) <= hout_slice->plane[1].available_lines", "One of the input parameters to sws_scale() is NULL, please check the calling code\n", "Slice parameters %d, %d are invalid\n", "Slices start in the middle!\n", "dstY >= ret", "c->dstH >= dstY", "bad src image pointers\n", "bad dst image pointers\n", "Rgb16ToPlanarRgb16Wrapper", "bayer_to_yv12_wrapper", "bayer_to_rgb24_wrapper", "planar8ToP01xleWrapper", "planarToP010Wrapper", "is16BPS", "isNBPS", "isBE", "palToRgbWrapper", "rgbToPlanarRgbWrapper", "planarRgbToRgbWrapper", "rgbToRgbWrapper", "isAnyRGB", "isPlanar", "isPackedRGB", "isBayer", "ff_get_unscaled_swscale", "isPlanarYUV", "isYUV", "isGray", "isPacked", "libswscale/swscale_unscaled.c", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "srcSliceH > 1", "!(dstStride[0] % 2 || dstStride[1] % 2)", "!(srcStride[0] % 2 || srcStride[1] % 2 || srcStride[2] % 2 || dstStride[0] % 2 || dstStride[1] % 2)", "internal error %s -> %s converter\n", "unsupported bayer conversion\n", "initFilter", "sws_printVec2", "sws_init_context", "isAnyRGB", "isPlanarRGB", "isBayer", "isALPHA", "isYUV", "isGray", "sws_setColorspaceDetails", "isNBPS", "is16BPS", "sizeFactor > 0", "filter2Size > 0", "minFilterSize > 0", "filterSize > 0", "SwScaler: reducing / aligning filtersize %d -> %d\n", "(*filterPos)[i] >= 0", "(*filterPos)[i] < srcW", "(*filterPos)[i] + j < srcW || !filter[i * filterSize + j]", "SwScaler: zero vector in scaling\n", "sws: initFilter failed\n", "libswscale license: LGPL version 2.1 or later", "%1.3f ", "ehh flags invalid?!", "dithered ", "deprecated pixel format used, make sure you did set range correctly\n", "%s is not supported as input pixel format\n", "%s is not supported as output pixel format\n", "Exactly one scaler algorithm must be chosen, got %X\n", "%dx%d -> %dx%d is invalid scaling dimension\n", "Forcing full internal H chroma due to odd output size\n", "Forcing full internal H chroma due to input having non subsampled chroma\n", "Desired dithering only supported in full chroma interpolation for destination format '%s'\n", "Ordered dither is not supported in full chroma interpolation for destination format '%s'\n", "%s output is not supported with half chroma resolution, switching to full\n", "full chroma interpolation for destination format '%s' not yet implemented\n", "c->chrDstH <= dstH", "%s scaler, from %s to %s%s ", "using %s\n", "%dx%d -> %dx%d\n", "lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n", "using alpha blendaway %s -> %s special converter\n", "using unscaled %s -> %s special converter\n", "YUV color matrix differs for YUV->YUV, using intermediate RGB to convert\n", "area averaging", "luma bicubic / chroma bilinear", "nearest neighbor / point", "packed_vscale", "isPlanarYUV", "isYUV", "isGray", "isALPHA", "libswscale/vscale.c", "Optimized 2 tap filter code cannot be used\n", "A,A/A,A/AAAAAAAAAAA2A2AACC", "ff_yuv2rgb_get_func_ptr", "isALPHA", "isPlanar", "ff_yuv2rgb_c_init_tables", "libswscale/yuv2rgb.c", "No accelerated colorspace conversion found from %s to %s.\n", "%ibpp not supported by yuv2rgb\n", "ff_audio_convert_set_func", "ff_audio_convert", "libavresample/audio_convert.c", "audio_convert: found function: %-4s to %-4s (%s)\n", "%d samples - audio_convert: %s to %s (dithered)\n", "%d samples - audio_convert: %s to %s (%s)\n", "cannot remap packed format during conversion\n", "ff_audio_data_init", "ff_audio_data_copy", "ff_audio_data_combine", "{no name}", "libavresample/audio_data.c", "invalid channel count: %d\n", "invalid sample format\n", "invalid NULL pointer for src[%d]\n", "cannot remap packed format during copy\n", "sample format mismatch\n", "offset out-of-bounds: src=%d dst=%d\n", "dst is read-only\n", "error reallocating dst\n", "AudioData", "ff_audio_mix_set_func", "ff_audio_mix", "ff_audio_mix_get_matrix", "ff_audio_mix_set_matrix", "mix_function_init", "ff_audio_mix_alloc", "[%d to %d] ", "[%d to any] ", "[any to %d] ", "[any to any] ", "libavresample/audio_mix.c", "audio_mix: found function: [fmt=%s] [c=%s] %s(%s)\n", "audio_mix: %d samples - %d to %d channels (%s)\n", "Invalid channel counts\n", "matrix is not set\n", "Invalid mix coeff type\n", "audio_mix: NO FUNCTION FOUND: [fmt=%s] [c=%s] [%d to %d]\n", "  (ZERO)", "  (SKIP)", "  %0.3f ", "audio_mix: %s to %s\n", "matrix size: %d x %d\n", "Unsupported internal format for mixing: %s\n", "error setting mix matrix\n", "ff_dither_alloc", "dithering %s to %s is not supported\n", "sample rate must be 48000 or 44100 Hz for triangular_ns dither. using triangular_hp instead.\n", "dither s16 buffer", "dither flt buffer", "AVAudioResampleContext", "Input Channel Layout", "Input Sample Format", "Input Sample Rate", "Output Channel Layout", "Output Sample Format", "Output Sample Rate", "Internal Sample Format", "8-bit unsigned integer", "16-bit signed integer", "32-bit signed integer", "32-bit float", "64-bit double", "8-bit unsigned integer planar", "s16p", "16-bit signed integer planar", "s32p", "32-bit signed integer planar", "fltp", "32-bit float planar", "dblp", "64-bit double planar", "mix_coeff_type", "Mixing Coefficient Type", "16-bit 8.8 Fixed-Point", "32-bit 17.15 Fixed-Point", "Floating-Point", "Center Mix Level", "Surround Mix Level", "LFE Mix Level", "normalize_mix_level", "Normalize Mix Level", "force_resampling", "Force Resampling", "Resampling Filter Size", "Resampling Phase Shift", "Use Linear Interpolation", "Cutoff Frequency Ratio", "Matrixed Stereo Encoding", "None", "Filter Type", "Cubic", "Blackman Nuttall Windowed Sinc", "Kaiser Windowed Sinc", "Kaiser Window Beta", "Dither Method", "No Dithering", "Rectangular Dither", "Triangular Dither", "Triangular Dither With High Pass", "triangular_ns", "Triangular Dither With Noise Shaping", "ff_audio_resample_init", "avresample_set_compensation", "ff_audio_resample", "libavresample/resample.c", "Unsupported internal format for resampling: %s\n", "resample buffer", "resample: %s from %d Hz to %d Hz\n", "Unable to set resampling compensation\n", "Error reallocating resampling buffer\n", "error reallocating output\n", "error during resampling\n", "resampled %d in + %d leftover to %d out + %d leftover\n", "handle_buffered_output", "avresample_open", "avresample_convert", "avresample_get_matrix", "avresample_set_matrix", "avresample_set_channel_mapping", "libavresample/utils.c", "[FIFO] add %s to out_fifo\n", "[FIFO] read from out_fifo to output\n", "[end conversion]\n", "[copy] %s to output\n", "The resampling context is already open.\n", "Invalid input channel layout: %lu\n", "Invalid output channel layout: %lu\n", "Using %s as internal sample format\n", "remap channels during in_copy\n", "remap channels during in_convert\n", "remap channels during out_convert\n", "remap channels during out_copy\n", "in_buffer", "resample_out_buffer", "[start conversion]\n", "[copy] %s to out_buffer\n", "[convert] %s to in_buffer\n", "[copy] %s to in_buffer\n", "[downmix] in_buffer\n", "[resample] %s to %s\n", "[upmix] %s\n", "[convert] %s to output\n", "[convert] %s to out_buffer\n", "Invalid channel layouts\n", "Invalid input channel layout\n", "Invalid channel map\n", "libavresample license: LGPL version 2.1 or later", "NEON", "%,3:DQX_p"], "stringidentifiers": ["put_bits", "aac_adtstoasc_init", "flush_put_bits", "aac_adtstoasc_filter", "aac_adtstoasc", "put_bits", "quantize_and_encode_band_cost_NONE", "decode_prediction", "decode_tns", "apply_dependent_coupling", "che_configure", "decode_channel_map", "get_che", "spectral_to_sample", "decode_pce", "decode_audio_specific_config_gb", "decode_eld_specific_config", "latm_decode_audio_specific_config", "decode_audio_specific_config", "aac_decode_init", "decode_band_types", "decode_scalefactors", "decode_ics", "decode_spectrum_and_dequant", "decode_cpe", "aac_decode_er_frame", "aac_decode_frame_int", "decode_extension_payload", "decode_fill", "read_audio_mux_element", "latm_decode_frame", "aac_latm", "dual_mono_mode", "autoselection", "both", "aac_encode_end", "flush_put_bits", "aac_encode_init", "encode_scale_factors", "aac_coder", "anmr", "twoloop", "aac_ms", "aac_is", "aac_pns", "aac_tns", "aac_ltp", "aac_pred", "put_bits", "quantize_and_encode_band_cost_NONE", "put_bits", "quantize_and_encode_band_cost_NONE", "quantize_and_encode_band_cost_NONE", "put_bits", "ff_ps_read_data", "read_iid_data", "read_icc_data", "check_n_master", "read_sbr_envelope", "read_sbr_noise", "read_sbr_grid", "sbr_make_f_derived", "sbr_hf_calc_npatches", "read_sbr_data", "read_sbr_extension", "ff_decode_sbr_extension", "sbr_reset", "ff_sbr_apply", "sbr_mapping", "ff_acelp_interpolate", "ff_set_fixed_vector", "amrnb_decode_frame", "amrnb", "amrwb", "ff_af_queue_close", "ff_af_queue_add", "ff_af_queue_remove", "AVDCT", "fastint", "altivec", "faan", "simple", "simplemmx", "simplearm", "simplearmv5te", "simplearmv6", "simpleneon", "simplealpha", "xvid", "xvidmmx", "faani", "simpleauto", "bits_per_sample", "av_grow_packet", "av_packet_split_side_data", "av_packet_merge_side_data", "Palette", "put_bits", "build_table", "avpriv_copy_bits", "ff_init_vlc_sparse", "private_spspps_buf", "bmp_decode_frame", "bytestream2_init", "av_bsf_init", "av_bsf_send_packet", "unknown", "bsf_list", "AVBSFContext", "mpeg1video", "mpeg2video", "mpegvideo_xvmc", "h261", "h263", "rv10", "rv20", "mjpegb", "rawvideo", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "wmv1", "wmv2", "h263p", "h263i", "flv1", "svq1", "svq3", "dvvideo", "huffyuv", "indeo3", "theora", "asv1", "asv2", "ffv1", "vcr1", "cljr", "mdec", "interplayvideo", "xan_wc3", "xan_wc4", "rpza", "cinepak", "ws_vqa", "msrle", "msvideo1", "idcin", "flic", "truemotion1", "vmdvideo", "mszh", "zlib", "qtrle", "snow", "tscc", "qdraw", "vixl", "qpeg", "ffvhuff", "rv30", "rv40", "loco", "wnv1", "aasc", "indeo2", "fraps", "truemotion2", "cscd", "mmvideo", "zmbv", "smackvideo", "kmvc", "flashsv", "cavs", "jpeg2000", "vmnc", "vp6f", "dsicinvideo", "tiertexseqvideo", "dnxhd", "bethsoftvid", "vp6a", "indeo4", "indeo5", "mimic", "escape124", "daala", "dirac", "motionpixels", "aura", "aura2", "v210x", "v210", "frwu", "flashsv2", "cdgraphics", "r210", "binkvideo", "iff_ilbm", "kgv1", "pictor", "a64_multi", "a64_multi5", "r10k", "m101", "mvc1", "mvc2", "mxpeg", "lagarith", "prores", "utvideo", "bmv_video", "vble", "dxtory", "v410", "cdxl", "zerocodec", "mss1", "msa1", "tscc2", "mts2", "cllc", "mss2", "y41p", "escape130", "avrp", "avui", "ayuv", "targa_y216", "v308", "v408", "yuv4", "avrn", "cpia", "xface", "smvjpeg", "hnm4video", "hevc", "paf_video", "sanm", "sgirle", "hq_hqa", "screenpresso", "speedhq", "wrapped_avframe", "rscc", "magicyuv", "truemotion2rt", "cfhd", "sheervideo", "pixlet", "fmvc", "scpr", "clearvideo", "alias_pix", "ansi", "brender_pix", "jpegls", "ljpeg", "pgmyuv", "sp5x", "sunrast", "tdsc", "vc1image", "wmv3image", "apng", "pcm_s16le", "pcm_s16be", "pcm_u16le", "pcm_u16be", "pcm_s8", "pcm_u8", "pcm_mulaw", "pcm_alaw", "pcm_s32le", "pcm_s32be", "pcm_s64le", "pcm_s64be", "pcm_u32le", "pcm_u32be", "pcm_s24le", "pcm_s24be", "pcm_u24le", "pcm_u24be", "pcm_s24daud", "pcm_zork", "pcm_s16be_planar", "pcm_s16le_planar", "pcm_s24le_planar", "pcm_s32le_planar", "pcm_dvd", "pcm_f16le", "pcm_f24le", "pcm_f32be", "pcm_f32le", "pcm_f64be", "pcm_f64le", "pcm_bluray", "pcm_lxf", "s302m", "pcm_s8_planar", "adpcm_ima_qt", "adpcm_ima_wav", "adpcm_ima_dk3", "adpcm_ima_dk4", "adpcm_ima_ws", "adpcm_ima_smjpeg", "adpcm_ms", "adpcm_4xm", "adpcm_xa", "adpcm_adx", "adpcm_ea", "adpcm_g726", "adpcm_ct", "adpcm_swf", "adpcm_yamaha", "adpcm_sbpro_4", "adpcm_sbpro_3", "adpcm_sbpro_2", "adpcm_thp", "adpcm_thp_le", "adpcm_ima_amv", "adpcm_ea_r1", "adpcm_ea_r3", "adpcm_ea_r2", "adpcm_ima_ea_sead", "adpcm_ima_ea_eacs", "adpcm_ea_xas", "adpcm_ea_maxis_xa", "adpcm_ima_iss", "adpcm_g722", "adpcm_ima_apc", "adpcm_afc", "adpcm_ima_oki", "adpcm_dtk", "adpcm_ima_rad", "adpcm_g726le", "adpcm_vima", "adpcm_psx", "adpcm_aica", "adpcm_ima_dat4", "amr_nb", "amr_wb", "ra_144", "ra_288", "roq_dpcm", "interplay_dpcm", "xan_dpcm", "sol_dpcm", "sdx2_dpcm", "dvaudio", "wmav1", "wmav2", "mace3", "mace6", "vmdaudio", "flac", "mp3adu", "mp3on4", "shorten", "alac", "westwood_snd1", "qdm2", "cook", "truespeech", "smackaudio", "qcelp", "wavpack", "dsicinaudio", "musepack7", "gsm_ms", "atrac3", "voxware", "nellymoser", "musepack8", "speex", "wmavoice", "wmapro", "wmalossless", "atrac3p", "atrac3pal", "atrac3al", "eac3", "sipr", "twinvq", "truehd", "mp4als", "atrac1", "binkaudio_rdft", "binkaudio_dct", "qdmc", "celt", "g723_1", "dss_sp", "g729", "bmv_audio", "ralf", "ilbc", "wavesynth", "sonic", "sonicls", "opus", "comfortnoise", "metasound", "paf_audio", "evrc", "dsd_lsbf", "dsd_msbf", "dsd_lsbf_planar", "dsd_msbf_planar", "interplayacm", "xma1", "xma2", "adpcm_mtaf", "dvd_subtitle", "dvb_subtitle", "xsub", "mov_text", "hdmv_pgs_subtitle", "dvb_teletext", "subrip", "microdvd", "mpl2", "eia_608", "jacosub", "sami", "realtext", "subviewer1", "subviewer", "vplayer", "webvtt", "hdmv_text_subtitle", "bintext", "xbin", "dvd_nav_packet", "timed_id3", "bin_data", "scte_35", "set_mv_strides", "guess_dc", "ff_er_add_slice", "ff_er_frame_end", "guess_mv", "GPSVersionID", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "ImageWidth", "exif_add_metadata", "extract_extradata", "remove", "ff_jni_get_env", "ff_jni_jstring_to_utf_chars", "ff_jni_utf_chars_to_jstring", "ff_jni_exception_get_summary", "ff_jni_exception_check", "ff_jni_reset_jfields", "ff_jni_init_jfields", "getName", "getMessage", "ff_flac_decode_frame_header", "ff_flac_is_extradata_valid", "ff_flac_parse_streaminfo", "flac_fifo_read_wrap", "flac_parse_init", "check_header_fi_mismatch", "check_header_mismatch", "find_headers_search_validate", "flac_parse", "allocate_buffers", "decode_residuals", "flac_decode_frame", "decode_frame", "dump_headers", "decode_subframe", "decode_subframe_fixed", "decode_subframe_lpc", "use_buggy_lpc", "ff_flv_decode_picture_header", "ff_frame_thread_encoder_init", "context", "non_deterministic", "put_bits", "gif_image_write_image", "gif_encode_init", "flush_put_bits", "gifflags", "transdiff", "bytestream2_init", "GIF87a", "GIF89a", "gif_decode_frame", "gif_parse_next_image", "gif_read_image", "trans_color", "ff_h263_decode_init", "decode_slice", "ff_h263_decode_frame", "L263", "S263", "GEOV", "GEOX", "get_nalsize", "ff_h2645_packet_split", "ff_h264_decode_mb_cabac", "get_ue_golomb", "decode_residual", "ff_h264_decode_mb_cavlc", "get_scale_factor", "ff_h264_direct_ref_list_init", "h264_mp4toannexb_init", "h264_extradata_to_annexb", "h264_mp4toannexb", "decode_extradata_ps", "get_ue_golomb", "decode_extradata_ps_mp4", "bytestream2_init", "bytestream2_init_writer", "ff_h264_pred_weight_table", "ff_h264_check_intra4x4_pred_mode", "ff_h264_check_intra_pred_mode", "ff_h264_parse_ref_count", "ff_h264_decode_extradata", "h264_find_frame_end", "scan_mmco_reset", "get_nalsize", "parse_nal_units", "Q264", "ff_h264_ref_picture", "ff_h264_field_end", "decode_scaling_list", "decode_hrd_parameters", "ff_h264_decode_seq_parameter_set", "decode_vui_parameters", "Gray", "ff_h264_decode_picture_parameter_set", "more_rbsp_data_in_pps", "CABAC", "CAVLC", "LPAR", "CONSTR", "REDU", "find_short", "print_short_term", "print_long_term", "remove_short", "build_def_list", "h264_initialise_ref_list", "ff_h264_build_ref_list", "ff_h264_decode_ref_pic_list_reordering", "ff_h264_execute_ref_pic_marking", "ff_h264_decode_ref_pic_marking", "ff_h264_sei_decode", "decode_picture_timing", "decode_unregistered_user_data", "decode_buffering_period", "checkerboard_rl", "checkerboard_lr", "col_interleaved_rl", "col_interleaved_lr", "row_interleaved_rl", "row_interleaved_lr", "right_left", "left_right", "bottom_top", "top_bottom", "block_rl", "block_lr", "h264_slice_header_init", "get_pixel_format", "decode_slice", "get_ue_golomb", "h264_frame_start", "alloc_picture", "ff_h264_update_thread_context", "ff_h264_execute_decode_slices", "h264_slice_header_parse", "ff_h264_queue_decode_slice", "init_dimensions", "h264_init_ps", "h264_field_start", "h264_select_output_frame", "h264_slice_init", "TEMP", "SPAT", "h264_er_decode_mb", "finalize_frame", "decode_nal_units", "get_last_needed_nal", "debug_green_metadata", "h264_decode_frame", "ff_h264_slice_context_init", "ff_h264_decode_init", "stereo_mode", "is_avc", "nal_length_size", "enable_er", "ff_h264dsp_init", "ff_h264_pred_init", "hevc_mp4toannexb_init", "hevc_extradata_to_annexb", "hevc_mp4toannexb", "parse_nal_units", "hevc_parse_slice_header", "decode_profile_tier_level", "scaling_list_data", "remove_sps", "decode_hrd", "ff_hevc_decode_short_term_rps", "ff_hevc_decode_nal_vps", "ff_hevc_parse_sps", "map_pixel_format", "decode_vui", "ff_hevc_decode_nal_sps", "ff_hevc_decode_nal_pps", "pps_range_extensions", "ff_init_scantable_permutation", "butterworth_init_coeffs", "ff_iir_filter_init_coeffs", "biquad_init_coeffs", "avcodec_get_chroma_sub_sample", "ff_intel_h263_decode_picture_header", "check_marker", "h263_decode_block", "check_marker", "ff_h263_show_pict_info", "ff_h263_decode_mb", "ff_h263_decode_picture_header", "U263", "SEPB1", "SEPB2", "ZYGO", "av_jni_set_java_vm", "ff_kbd_window_init", "libwebp_encode_frame", "libwebp", "compression_level", "global_quality", "default", "photo", "drawing", "cr_threshold", "cr_size", "Quality", "ff_libwebp_encode_init_common", "ff_libwebp_get_frame", "Lossless", "Lossy", "ff_lpc_calc_coefs", "bytestream2_init", "ff_lzw_encode_init", "put_bits", "ff_mjpeg_encode_coef", "ff_mjpeg_encode_init", "alloc_huffman", "cmp_func", "satd", "psnr", "Zero", "vsad", "vsse", "nsse", "dct264", "dctmax", "msad", "mpv_flags", "skip_rd", "strict_gop", "qp_rd", "cbp_rd", "luma_elim_threshold", "chroma_elim_threshold", "quantizer_noise_shaping", "error_rate", "qsquish", "rc_qmod_amp", "rc_qmod_freq", "rc_eq", "rc_init_cplx", "rc_buf_aggressivity", "border_mask", "ibias", "pbias", "rc_strategy", "motion_est", "epzs", "xone", "force_duplicated_matrix", "b_strategy", "b_sensitivity", "brd_scale", "skip_threshold", "skip_factor", "skip_exp", "skip_cmp", "sc_threshold", "noise_reduction", "mpeg_quant", "mepc", "mepre", "plane", "median", "huffman", "optimal", "put_bits", "flush_put_bits", "jpeg_put_comments", "ff_mjpeg_encode_picture_header", "skip_put_bytes", "ff_mjpeg_encode_stuffing", "JFIF", "ff_mjpegenc_huffman_compute_bits", "ff_mjpeg_encode_huffman_close", "ff_estimate_p_frame_motion", "ff_pre_estimate_p_frame_motion", "mp3_header_decompress", "mp3decomp", "ff_init_2d_vlc_rl", "decode_dc", "mpeg4_unpack_bframes_init", "mpeg4_unpack_bframes_filter", "mpeg4_unpack_bframes", "put_bits", "parse_config_ALS", "mpeg4_decode_header", "check_marker", "ff_mpeg4_pred_dc", "mpeg4_decode_dc", "mpeg4_decode_block", "mpeg4_decode_mb", "mpeg4_decode_partitioned_mb", "ff_mpeg4_decode_video_packet_header", "mpeg4_decode_partition_a", "ff_mpeg4_decode_partitions", "mpeg4_decode_partition_b", "ff_mpeg4_workaround_bugs", "ff_mpeg4_decode_picture_header", "decode_vol_header", "mpeg4_decode_gop_header", "decode_vop_header", "ff_mpeg4_frame_end", "XVID", "XVIX", "RMP4", "ZMP4", "SIPP", "DIVX", "UMP4", "Reserved", "WV1F", "QMP4", "MP4S", "divx_packed", "mpeg_er_decode_mb", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "decode_init_static", "mp_decode_frame", "decode_frame", "decode_frame_adu", "decode_frame_mp3on4", "mp3on4float", "mp3adufloat", "mp3float", "ff_mpeg_framesize_alloc", "ff_alloc_picture", "alloc_frame_buffer", "ff_mpeg_ref_picture", "find_unused_picture", "init_duplicate_context", "init_context_frame", "ff_mpv_common_init", "ff_mpeg_update_thread_context", "ff_mpv_frame_start", "ff_print_debug_info2", "ff_mpv_export_qp_table", "mpv_decode_mb_internal", "VCR2", "put_bits", "clip_coeffs", "flush_put_bits", "encode_mb_hq", "ff_convert_matrix", "load_input_picture", "estimate_best_b_count", "select_input_picture", "set_put_bits_buffer_size", "ff_mpv_encode_picture", "ff_mpv_encode_init", "ff_mpv_reallocate_putbitbuffer", "rebase_put_bits", "encode_thread", "obmc", "structured_slices", "mb_info", "mpeg_motion_internal", "mpegvideo_extract_headers", "msrle_decode_8_16_24_32", "ff_msrle_decode", "init_context_defaults", "avcodec_copy_context", "NULL", "AVSubtitleRect", "forced", "AVFrame", "best_effort_timestamp", "pkt_pos", "pkt_size", "sample_aspect_ratio", "AVCodecContext", "unaligned", "input_preserved", "pass1", "pass2", "gray", "emu_edge", "ildct", "low_delay", "global_header", "bitexact", "ilme", "cgop", "output_corrupt", "flags2", "noout", "ignorecrop", "local_header", "showall", "export_mvs", "skip_manual", "ass_ro_flush_noop", "me_method", "full", "tesa", "phods", "time_base", "frame_size", "frame_number", "qcomp", "qblur", "qmin", "qdiff", "b_qfactor", "mv_bits", "header_bits", "i_tex_bits", "p_tex_bits", "i_count", "skip_count", "misc_bits", "frame_bits", "old_msmpeg4", "xvid_ilace", "ump4", "no_padding", "ac_vlc", "qpel_chroma", "std_qpel", "qpel_chroma2", "direct_blocksize", "hpel_chroma", "dc_clip", "trunc", "iedge", "normal", "unofficial", "experimental", "b_qoffset", "crccheck", "explode", "ignore_err", "careful", "compliant", "aggressive", "has_b_frames", "block_align", "rc_override_count", "maxrate", "minrate", "i_qfactor", "i_qoffset", "lumi_mask", "tcplx_mask", "scplx_mask", "p_mask", "dark_mask", "slice_count", "guess_mvs", "deblock", "favor_inter", "bits_per_coded_sample", "pict", "dct_coeff", "green_metadata", "skip", "startcode", "mmco", "vis_qp", "vis_mb_type", "buffers", "thread_ops", "nomc", "vismv", "debug_mv", "subcmp", "ildctcmp", "last_pred", "preme", "precmp", "pre_dia_size", "subq", "dtg_active_format", "me_range", "deflate", "slice_flags", "xvmc_acceleration", "stream_codec_tag", "rc_init_occupancy", "me_threshold", "mb_threshold", "intra_dc_precision", "nssew", "skip_top", "skip_bottom", "aac_main", "aac_ssr", "aac_he_v2", "aac_ld", "aac_eld", "mpeg2_aac_low", "mpeg2_aac_he", "dts_es", "dts_96_24", "dts_hd_hra", "dts_hd_ma", "mpeg4_sp", "mpeg4_core", "mpeg4_main", "mpeg4_asp", "main10", "lowres", "skipcmp", "mblmin", "mblmax", "skip_loop_filter", "avdiscard", "skip_idct", "skip_frame", "noref", "bidir", "nokey", "nointra", "bidir_refine", "keyint_min", "chromaoffset", "trellis", "sc_factor", "mv0_threshold", "min_prediction_order", "max_prediction_order", "timecode_frame_start", "bits_per_raw_sample", "request_channel_layout", "rc_max_vbv_use", "rc_min_vbv_use", "color_primaries", "color_primaries_type", "bt709", "Unspecified", "bt470m", "bt470bg", "smpte170m", "smpte240m", "Film", "bt2020", "smpte428", "smpte428_1", "smpte431", "smpte432", "unspecified", "color_trc", "color_trc_type", "gamma22", "gamma28", "Linear", "log100", "log316", "bt1361e", "smpte2084", "log_sqrt", "iec61966_2_4", "bt1361", "iec61966_2_1", "bt2020_10bit", "bt2020_12bit", "colorspace", "colorspace_type", "ycgco", "YCGCO", "bt2020nc", "bt2020c", "smpte2085", "ycocg", "bt2020_ncl", "bt2020_cl", "color_range", "color_range_type", "chroma_sample_location", "chroma_sample_location_type", "Left", "Center", "topleft", "bottomleft", "Bottom", "log_level_offset", "thread_type", "slice", "audio_service_type", "Effects", "Dialogue", "Commentary", "Emergency", "Karaoke", "request_sample_fmt", "pkt_timebase", "sub_charenc", "sub_charenc_mode", "do_nothing", "pre_decoder", "sub_text_format", "ass_with_timings", "refcounted_frames", "side_data_only_packets", "skip_alpha", "field_order", "progressive", "dump_separator", "codec_whitelist", "pixel_format", "video_size", "max_pixels", "av_parser_parse2", "ff_combine_frame", "pcm_bluray_decode_frame", "pcm_bluray_parse_header", "pcm_dvd_decode_frame", "pcm_dvd_parse_header", "pcm_decode_frame", "pcm_decode_init", "bytestream2_init", "decode_frame_png", "decode_frame_common", "decode_ihdr_chunk", "decode_phys_chunk", "decode_idat_chunk", "png_decode_idat", "decode_trns_chunk", "MPNG", "encode_headers", "png_enc_init", "png_choose_filter", "encode_apng", "paeth", "mixed", "validate_thread_parameters", "async_unlock", "release_delayed_buffers", "submit_packet", "ff_thread_report_progress", "ff_thread_await_progress", "ff_thread_finish_setup", "frame_worker_thread", "ff_frame_thread_free", "ff_thread_get_format", "thread_get_buffer_internal", "ff_thread_get_buffer", "ff_thread_release_buffer", "ff_alloc_entries", "bits2qp", "qp2bits", "get_qminmax", "modify_qscale", "ff_vbv_update", "ff_rate_control_init", "init_pass2", "ff_rate_estimate_qscale", "bits2qp", "qp2bits", "iTex", "pTex", "fCode", "iCount", "mcVar", "avgQP", "avgIITex", "avgPITex", "avgPPTex", "avgBPTex", "avgTex", "I420", "IYUV", "yv12", "YUYVw", "BGR0C", "b48rs", "J444Z", "I40AY", "AV32F", "I09LE", "I09BP", "I29LO", "I29BL", "I49LK", "I49BH", "I0ALG", "I0ABJ", "I2ALI", "I2ABN", "I4ALM", "raw_init_decoder", "raw_decode", "BottomUp", "yuv2", "I420", "b64a", "rawdec", "av_audio_resample_init", "audioresample", "ReSampleContext", "ff_rl_init_vlc", "ff_fast_malloc", "avcodec_set_dimensions", "apply_param_change", "ff_set_sar", "ff_color_frame", "update_frame_pool", "video_get_buffer", "audio_get_buffer", "ff_init_buffer_info", "get_buffer_internal", "validate_avframe_allocation", "ff_get_buffer", "reget_buffer_internal", "ff_reget_buffer", "ff_alloc_packet2", "avcodec_encode_audio2", "avcodec_encode_video2", "do_encode", "avcodec_encode_subtitle", "avcodec_decode_video2", "avcodec_decode_audio4", "do_decode", "avcodec_decode_subtitle2", "recode_subtitle", "avcodec_get_name", "av_log_ask_for_sample", "av_log_missing_feature", "ff_get_format", "setup_hwaccel", "ff_unlock_avcodec", "ff_lock_avcodec", "ff_thread_ref_frame", "avcodec_open2", "avpriv_find_start_code", "unknown_codec", "av_vorbis_parse_frame_flags", "vorbis_parse_init", "parse_id_header", "parse_setup_header", "vp9_superframe_filter", "merge_superframe", "vp9_superframe", "init", "aformat", "sample_fmts", "sample_rates", "channel_layouts", "config_output", "frame_list_remove_samples", "frame_list_add_frame", "filter_frame", "request_samples", "request_frame", "amix", "inputs", "longest", "shortest", "dropout_transition", "anull", "config_output", "aresample", "config_props", "asetrate", "yae_set_tempo", "yae_overlap_add", "yae_load_data", "yae_load_frag", "yae_flush", "atempo", "init", "config_props", "args", "set_expr", "set_volume", "config_output", "filter_frame", "fixed", "eval", "replaygain", "drop", "ignore", "replaygain_preamp", "replaygain_noclip", "nb_channels", "nb_consumed_samples", "nb_samples", "startpts", "startt", "ff_default_get_audio_buffer", "set_enable_expr", "process_options", "avfilter_link", "ff_avfilter_link_set_in_status", "avfilter_insert_filter", "avfilter_config_links", "ff_avfilter_link_set_out_status", "avfilter_process_command", "avfilter_register", "avfilter_init_dict", "avfilter_init_str", "ff_filter_frame", "ff_inlink_make_frame_writable", "ff_inlink_process_commands", "enable", "noformat", "frei0r", "frei0r_src", "aevalsrc", "AVFilter", "heap_bubble_down", "pick_format", "sanitize_channel_layouts", "filter_query_formats", "avfilter_graph_alloc_filter", "query_formats", "graph_check_validity", "graph_config_formats", "swap_sample_fmts_on_filter", "swap_samplerates_on_filter", "swap_channel_layouts_on_filter", "graph_config_pointers", "heap_bubble_up", "ff_filter_graph_run_once", "avfilter_graph_request_oldest", "afifo", "AVFilterGraph", "scale_sws_opts", "aresample_swr_opts", "activate", "vsink_query_formats", "asink_query_formats", "av_buffersink_get_type", "av_buffersink_get_time_base", "av_buffersink_get_format", "av_buffersink_get_frame_rate", "av_buffersink_get_w", "av_buffersink_get_h", "av_buffersink_get_sample_aspect_ratio", "av_buffersink_get_channels", "av_buffersink_get_channel_layout", "av_buffersink_get_sample_rate", "av_buffersink_get_hw_frames_ctx", "pix_fmts", "all_channel_counts", "abuffersink", "init_video", "init_audio", "av_buffersrc_add_frame_internal", "av_buffersrc_add_frame_flags", "abuffer", "pix_fmt", "time_base_num", "time_base_den", "sar_num", "sar_den", "pixel_aspect", "frame_rate", "sws_param", "ff_fill_line_with_color", "ff_draw_color", "pix_desc", "process_frame", "mainpic", "areverse", "buffer_offset", "return_audio_frame", "ff_merge_formats", "ff_merge_samplerates", "ff_parse_pixel_format", "ff_parse_sample_format", "ff_parse_time_base", "ff_parse_sample_rate", "ff_parse_channel_layout", "ff_frame_pool_get_video_config", "ff_frame_pool_get_audio_config", "ff_frame_pool_get", "framesync_sync_level_update", "ff_bufqueue_get", "framesync_inject_frame", "ff_framesync_configure", "ff_bufqueue_add", "ff_framesync_next", "ff_framesync_process_frame", "framesync", "parse_sws_flags", "parse_link_name", "create_filter", "parse_outputs", "link_filter", "link_filter_inouts", "avfilter_graph_parse2", "avfilter_graph_parse", "avfilter_graph_parse_ptr", "ff_scale_eval_dimensions", "out_w", "out_h", "ohsub", "ovsub", "init", "config_input", "filter_frame", "setpts", "expr", "FRAME_RATE", "INTERLACED", "NB_CONSUMED_SAMPLES", "NB_SAMPLES", "PREV_INPTS", "PREV_INT", "PREV_OUTPTS", "PREV_OUTT", "SAMPLE_RATE", "STARTPTS", "STARTT", "RTCTIME", "RTCSTART", "atrim_filter_frame", "atrim", "starti", "endi", "start_pts", "end_pts", "durationi", "start_sample", "end_sample", "start_frame", "init", "uninit", "init", "filter_frame", "down", "hflip", "init", "set_expr", "filter_frame", "process_command", "do_blend", "config_input_overlay", "NOPTS", "overlay", "eof_action", "repeat", "endall", "init", "yuv420", "yuv422", "yuv444", "gbrp", "repeatlast", "main_w", "main_h", "overlay_w", "overlay_h", "split_box", "write_palette", "palettegen", "max_colors", "reserve_transparent", "stats_mode", "single", "disp_tree", "debug_accuracy", "load_colormap", "debug_mean_error", "paletteuse", "dithering_mode", "bayer", "heckbert", "floyd_steinberg", "sierra2", "sierra2_4a", "bayer_scale", "diff_mode", "debug_kdtree", "color_search", "nns_iterative", "nns_recursive", "bruteforce", "mean_err", "debug_accuracy", "config_props", "filter_frame", "rotate", "rotw", "roth", "fillcolor", "black", "config_props", "init_dict", "filter_frame", "srcw", "srch", "src_format", "dstw", "dsth", "dst_format", "sws_flags", "param0", "param1", "src_range", "dst_range", "src_h_chr_pos", "src_v_chr_pos", "dst_h_chr_pos", "dst_v_chr_pos", "bt601", "bt470", "scale2ref", "interl", "in_color_matrix", "out_color_matrix", "in_range", "out_range", "in_v_chr_pos", "in_h_chr_pos", "out_v_chr_pos", "out_h_chr_pos", "force_original_aspect_ratio", "force_oar", "disable", "decrease", "increase", "nb_slices", "config_props_output", "counterclockwise", "transpose", "cclock_flip", "cclock", "passthrough", "portrait", "landscape", "vflip", "filter_frame", "yadif", "send_frame", "send_field", "send_frame_nospatial", "send_field_nospatial", "deint", "put_bits", "flush_put_bits", "adts_write_frame_header", "adts_decode_extradata", "write_id3v2", "write_apetag", "ape_tag_read_field", "ff_ape_parse_tag", "ff_ape_write_tag", "APETAGEX", "async_close", "async_open", "async_seek", "async", "Async", "read_odml_index", "avi_sync", "avi_load_index", "avi_read_idx1", "avi_read_seek", "get_riff", "avi_read_header", "bytestream2_init", "ni_prepare_read", "avi_read_packet", "GAB2", "MMES", "creation_time", "maker", "strh", "PotEncoder", "ISFT", "Axan", "strn", "use_odml", "ffurl_accept", "url_alloc_for_protocol", "ffurl_alloc", "ffurl_seek", "ffurl_connect", "ffurl_open_whitelist", "avpriv_io_move", "avpriv_io_delete", "avio_open_dir", "avio_close_dir", "ffurl_get_multi_file_handle", "retry_transfer_wrapper", "ffurl_read", "ffurl_read_complete", "ffurl_write", "subfile", "AVERROR_OPTION_NOT_FOUND", "protocol_whitelist", "URLContext", "rw_timeout", "put_str16", "ffio_ensure_seekback", "fill_buffer", "avio_close", "ffio_open_whitelist", "AVIOContext", "av_check_hijack_vid", "av_check_hijack", "comment", "match_streams_exact_id", "detect_stream_specific", "open_file", "concat_read_header", "add_file", "filter_packet", "concat_read_packet", "cur_file_no", "inpoint", "outpoint", "file_packet_metadata", "exact_stream_id", "ffconcat", "safe", "auto_convert", "segment_time_metadata", "crypto_seek", "set_aes_arg", "crypto_open2", "decryption_key", "decryption_iv", "encryption_key", "encryption_iv", "hex_dump_internal", "pkt_dump_internal", "print_fps", "print_peak", "print_gain", "dump_metadata", "dump_stream_format", "dump_sidedata", "dump_paramchange", "dump_replaygain", "dump_stereo3d", "dump_audioservicetype", "dump_cpb", "dump_mastering_display_metadata", "dump_spherical", "av_dump_format", "language", "effects", "dialogue", "comentary", "emergency", "karaoke", "Output", "Input", "from", "fifo_init", "fifo_write_trailer", "fifo_write_packet", "fifo_write_header", "fifo_thread_write_header", "fifo_thread_dispatch_message", "fifo_thread_write_packet", "fifo_thread_attempt_recovery", "fifo_thread_process_recovery_failure", "fifo_consumer_thread", "fifo_format", "queue_size", "format_opts", "drop_pkts_on_overflow", "restart_with_keyframe", "attempt_recovery", "max_recovery_attempts", "recovery_wait_time", "recovery_wait_streamtime", "recover_any_error", "pipe_open", "truncate", "follow", "ff_flac_parse_picture", "flac_read_header", "WAVEFORMATEXTENSIBLE_CHANNEL_MASK", "fLaC", "clear_index_entries", "flv_read_header", "add_keyframes_index", "amf_parse_object", "parse_keyframes_index", "flv_read_packet", "flv_read_metabody", "true", "false", "videodatarate", "audiodatarate", "datastream", "videocodecid", "audiocodecid", "audiosamplerate", "audiosamplesize", "stereo", "metadatacreator", "MEGA", "onTextData", "onCaption", "onCaptionInfo", "onMetaData", "onCuePoint", "live_flv", "live_flvdec", "flv_metadata", "missing_streams", "put_bits", "write_metadata", "get_audio_flags", "unsupported_codec", "flush_put_bits", "flv_write_codec_header", "flv_write_packet", "flv_append_keyframe_info", "flv_write_header", "shift_data", "flv_write_trailer", "datasize", "lasttimestamp", "totalframes", "hasAudio", "hasVideo", "hasCuePoints", "hasMetadata", "hasKeyframes", "canSeekToEnd", "videosize", "audiosize", "lastkeyframetimestamp", "lastkeyframelocation", "Text", "flvflags", "aac_seq_header_detect", "no_sequence_end", "no_metadata", "no_duration_filesize", "add_keyframe_index", "av_probe_input_format3", "av_probe_input_buffer2", "image2", "ssegment", "image2pipe", "mime_type", "gif_write_header", "flush_packet", "gif_write_packet", "final_delay", "GIF87a", "GIF89a", "gif_read_ext", "gif_read_packet", "min_delay", "max_gif_delay", "default_delay", "ignore_loop", "framehash", "sha256", "format_version", "hvcc_write", "nested_io_open", "open_url", "open_input", "read_from_url", "parse_playlist", "hls_read_header", "intercept_id3", "parse_id3", "handle_id3", "read_data", "update_init_section", "recheck_discard_flags", "hls_read_packet", "seekable", "cookies", "user_agent", "http_proxy", "end_offset", "variant_bitrate", "SUBTITLES", "EVENT", "correct_ts_overflow", "PRIV", "APIC", "live_start_index", "allowed_extensions", "max_reload", "hls_read", "hls_open", "http_write_reply", "parse_cookie", "http_getc", "http_buf_read", "http_accept", "http_read_header", "process_line", "check_http_code", "parse_location", "http_change_hostname", "parse_content_encoding", "cookie_string", "http_connect", "get_cookies", "http_handshake", "http_listen", "http_open_cnx", "ff_http_do_new_request", "http_seek_internal", "http_read_stream", "http_buf_read_compressed", "store_icy", "http_open", "http_proxy_open", "Forbidden", "expires", "chunked", "Connection", "close", "Server", "AkamaiGHost", "MediaGateway", "gzip", "identity", "no_proxy", "https", "httpk", "domain", "AVERROR_INVALIDDATA", "icy_metadata_packet", "CONNECT", "chunked_post", "multiple_requests", "post_data", "icy_metadata_headers", "auth_type", "basic", "send_expect_100", "reconnect", "reconnect_at_eof", "reconnect_streamed", "reconnect_count", "reconnect_delay_max", "resource", "reply_code", "valid_http_content_type", "is_redirect", "genre", "Blues", "Country", "Dance", "Disco", "Grunge", "Oldies", "Other", "Reggae", "Alternative", "Pranks", "Soundtrack", "Ambient", "Vocal", "Trance", "Classical", "Instrumental", "Acid", "Game", "Gospel", "Noise", "AlternRock", "Space", "Meditative", "Ethnic", "Gothic", "Darkwave", "Electronic", "Eurodance", "Dream", "Comedy", "Cult", "Jungle", "Cabaret", "Psychadelic", "Rave", "Showtunes", "Trailer", "Tribal", "Polka", "Retro", "Musical", "Swing", "Bebob", "Latin", "Revival", "Celtic", "Bluegrass", "Avantgarde", "Chorus", "Acoustic", "Humour", "Speech", "Chanson", "Opera", "Sonata", "Symphony", "Primus", "Satire", "Club", "Tango", "Samba", "Folklore", "Freestyle", "Duet", "Hardcore", "Terror", "Indie", "BritPop", "Negerpunk", "Beat", "Crossover", "Merengue", "Salsa", "Anime", "JPop", "SynthPop", "decode_str", "TDATTIMETORYTRDATSIZTYER", "TDENTDORTDRCTDRLTDTGTIPLTMCLTMOOTPROTSOATSOPTSOTTSST", "TALBTBPMTCOMTCONTCOPTDLYTENCTEXTTFLTTIT1TIT2TIT3TKEYTLANTLENTMEDTOALTOFNTOLYTOPETOWNTPE1TPE2TPE3TPE4TPOSTPUBTRCKTRSNTRSOTSRCTSSE", "read_geobtag", "read_apic", "read_ttag", "read_chapter", "id3v2_parse", "read_comment", "read_uslt", "GEOB", "TCON", "TXXX", "COMM", "encrypted", "compression", "USLT", "TYER", "TDAT", "CHAP", "Conductor", "Composer", "Illustration", "compilation", "encoded_by", "TCMP", "TDRC", "TDRL", "TDEN", "TSOA", "TSOP", "TSOT", "TALB", "TCOM", "TCOP", "copyright", "TENC", "TIT2", "TLAN", "TPE1", "TPE2", "TPE3", "TPOS", "disc", "TPUB", "publisher", "TRCK", "TSSE", "lyrics", "ff_id3v2_write_apic", "drain", "probertt", "slowstart", "probebw", "steady", "ljpg", "im24", "im32", "sunras", "yuv10", "ff_img_read_header", "ff_img_read_packet", "SDPX", "XPDS", "xpm_pipe", "webp_pipe", "tiff_pipe", "sunrast_pipe", "sgi_pipe", "qdraw_pipe", "psd_pipe", "ppm_pipe", "png_pipe", "pictor_pipe", "pgmyuv_pipe", "pgm_pipe", "pcx_pipe", "pbm_pipe", "pam_pipe", "jpegls_pipe", "jpeg_pipe", "j2k_pipe", "exr_pipe", "dpx_pipe", "dds_pipe", "bmp_pipe", "pattern_type", "glob_sequence", "glob", "start_number", "start_number_range", "ts_from_file", "ts_type", "write_packet", "ff_rename", "UVAx", "updatefirst", "update", "strftime", "atomic_writing", "ff_mp4_read_descr", "ff_mp4_read_dec_config_descr", "c608", "sac3", "alac", "twos", "lpcm", "Opus", "v410", "cvid1", "mp2vY", "tiffb", "avs2u", "dracd", "AVdnd", "AVupf", "ap4x3", "pxlt", "kcp_log", "kcp_close", "kcp_write", "kcp_onsend", "kcp_open", "kcp_process", "fifo_size", "kcp_conv", "kcp_wnd_recv", "kcp_wnd_send", "kcp_mtu_size", "kcp_timeout", "kcp_fast_ack", "kcp_fifo_recv", "kcp_cong_lost", "kcp_cong_incr", "kcp_cong_decr", "binary", "A_AAC", "A_AC3", "A_ALAC", "A_DTS", "A_EAC3", "A_FLAC", "A_MLP", "A_OPUS", "A_TRUEHD", "A_TTA1", "A_VORBIS", "A_WAVPACK4", "S_ASS", "S_SSA", "S_VOBSUB", "S_DVBSUB", "V_AV1", "V_DIRAC", "V_FFV1", "V_MJPEG", "V_MPEG1", "V_MPEG2", "V_PRORES", "V_SNOW", "V_THEORA", "V_UNCOMPRESSED", "V_VP8", "V_VP9", "background", "anaglyph_cyan_red", "anaglyph_green_magenta", "LEAD_PERFORMER", "PART_NUMBER", "matroska_convert_tag", "ebml_read_num", "matroska_find_level1_elem", "ebml_parse_id", "ebml_parse_elem", "ebml_read_master", "matroska_parse_seekhead_entry", "matroska_decode_buffer", "matroska_add_index_entries", "matroska_find_track_by_num", "matroska_parse_block", "matroska_parse_laces", "matroska_parse_rm_audio", "matroska_parse_frame", "matroska_deliver_packet", "matroska_read_header", "matroska_parse_tracks", "matroska_parse_flac", "bytestream2_init", "mkv_parse_video_projection", "matroska_convert_tags", "webm_dash_manifest_read_header", "enc_key_id", "A_QUICKTIME", "V_QUICKTIME", "TTA1", "alpha_mode", "mimetype", "webm_dash_manifest_duration", "webm_dash_manifest_initialization_range", "webm_dash_manifest_file_name", "webm_dash_manifest_track_number", "webm_dash_manifest_cues_start", "webm_dash_manifest_cues_end", "webm_dash_manifest_bandwidth", "webm_dash_manifest_cluster_keyframe", "webm_dash_manifest_cue_timestamps", "MAIN", "webm_dash_manifest", "mds_close", "mds_seek", "mds_seek", "mds_read", "mds_open", "getSize", "readAt", "mediadatasource", "mem_open", "mov_probe", "mov_read_fiel", "mov_read_enda", "mov_read_default", "mov_read_glbl", "mov_read_moov", "mov_switch_root", "mov_read_dfla", "mov_read_tfhd", "mov_read_tfdt", "mov_read_stsc", "mov_read_hdlr", "mov_read_custom", "mov_read_ftyp", "mov_read_clli", "mov_read_coll", "mov_read_mdcv", "mov_read_vpcc", "mov_read_colr", "mov_read_smdm", "mov_read_dops", "mov_read_sv3d", "mov_read_st3d", "mov_read_tenc", "mov_read_schm", "mov_read_stts", "mov_read_cmov", "mov_read_wfex", "mov_read_dref", "mov_read_pasp", "mov_find_next_sample", "find_prev_closest_index", "mov_open_dref", "mov_read_sidx", "mov_read_moof", "mov_read_mfra", "read_tfra", "mov_read_adrm", "fix_index_entry_timestamps", "mov_read_frma", "mov_read_keys", "mov_metadata_loci", "mov_read_covr", "mov_read_udta_string", "mov_read_sample_encryption_info", "mov_parse_auxiliary_info", "mov_read_saio", "mov_read_saiz", "mov_read_senc", "mov_read_atom_into_extradata", "mov_read_aclr", "mov_metadata_creation_time", "mov_read_mvhd", "mov_read_mdhd", "mov_read_stps", "mov_read_stco", "mov_read_stss", "mov_read_sbgp", "mov_read_stsz", "mov_read_elst", "mov_read_ddts", "mov_read_ctts", "mov_update_dts_shift", "mov_read_trun", "mov_read_header", "mov_read_chapters", "fix_timescale", "mov_seek_stream", "mov_read_trak", "mov_build_index", "mov_fix_index", "mov_estimate_video_delay", "mov_read_packet", "cenc_filter", "drm_decrypt", "cenc_decrypt", "ff_mov_read_stsd_entries", "mov_skip_multiple_stsd", "mov_parse_stsd_audio", "mov_read_stsd", "handler_name", "iTunSMPB", "cdec", "major_brand", "minor_version", "compatible_brands", "nclx", "nclc", "ctts_index", "ctts_sample", "premiere_version", "quicktime_version", "warning", "original_source", "playback_requirements", "performers", "producer", "original_artist", "make", "host_computer", "grouping", "original_format", "edit_date", "disclaimer", "director", "chapter", "season_number", "network", "episode_sort", "episode_id", "media_type", "sort_show", "sort_name", "sort_composer", "sort_artist", "sort_album", "sort_album_artist", "rating", "purchase_date", "gapless_playback", "podcast", "synopsis", "keywords", "hd_video", "firmware", "episode_uid", "category", "account_id", "account_type", "rtmd", "reel_name", "stsd", "AV1x", "AVup", "apcn", "apch", "dvpp", "dvcp", "mp4s", "use_absolute_path", "seek_streams_individually", "ignore_editlist", "advanced_editlist", "ignore_chapters", "use_mfra_for", "export_all", "export_xmp", "activation_bytes", "audible_fixed_key", "enable_drefs", "prefer_nearest_sample", "enable_drm", "drm_downgrade", "drm_aptr", "video_check_info", "ff_mov_read_chan", "check_pkt", "put_bits", "find_fps", "mov_write_hdlr_tag", "mov_write_sidx_tag", "mov_write_identification", "mov_write_uuidprof_tag", "flush_put_bits", "get_cluster_duration", "mov_init", "text", "ipod_get_codec_tag", "mp4a", "tx3g", "avc1k", "VP6F", "mov_get_dv_codec_tag", "yuv2", "yuvs", "b48r0", "mov_get_rawvideo_codec_tag", "mov_get_codec_tag", "mov_write_avid_tag", "mov_write_dvc1_structs", "mov_write_gama_tag", "mov_write_video_tag", "mov_write_colr_tag", "mov_write_st3d_tag", "mov_write_sv3d_tag", "mov_write_tkhd_tag", "mov_write_edts_tag", "mov_write_trak_tag", "mov_write_mdhd_tag", "mov_write_chan_tag", "mov_write_tmcd_tag", "mov_write_source_reference_tag", "mov_preroll_write_stbl_atoms", "shift_data", "mov_flush_fragment", "ff_mov_write_packet", "mov_write_trailer", "stss", "stps", "mhlr", "vide", "VideoHandler", "soun", "SoundHandler", "subp", "SubtitleHandler", "HintHandler", "TimeCodeHandler", "DataHandler", "clcp", "ClosedCaptionHandler", "sbtl", "dhlr", "handler", "earth", "disk", "trkn", "CodecPrivateData", "ipod", "yrrc", "albm", "Lavf", "XDCAM", "DpxE", "lpcm", "perf", "titl", "author", "gnre", "dscp", "cprt", "aART", "encoding_tool", "ldes", "tvsh", "tven", "tvnn", "tves", "tvsn", "stik", "hdvd", "pgap", "cpil", "tmpo", "wide", "free", "systemBitrate", "trackID", "systemLanguage", "trackName", "FourCC", "WVC1", "MaxWidth", "MaxHeight", "DisplayWidth", "DisplayHeight", "AACP", "AACH", "AACL", "WMAP", "AudioTag", "Channels", "SamplingRate", "BitsPerSample", "PacketSize", "movflags", "rtphint", "moov_size", "empty_moov", "frag_keyframe", "separate_moof", "frag_custom", "isml", "faststart", "omit_tfhd_offset", "disable_chpl", "default_base_moof", "dash", "frag_discont", "delay_moov", "global_sidx", "write_colr", "write_gama", "use_metadata_tags", "skip_trailer", "rtpflags", "rfc2190", "skip_rtcp", "h264_mode0", "send_bye", "skip_iods", "iods_audio_profile", "iods_video_profile", "min_frag_duration", "frag_size", "ism_lookahead", "video_track_timescale", "use_editlist", "fragment_index", "mov_gamma", "frag_interleave", "encryption_scheme", "encryption_kid", "use_stream_ids_as_track_ids", "write_tmcd", "ff_mov_cenc_avc_write_nal_units", "ff_mov_init_hinting", "rtpo", "mp3_seek", "mp3_sync", "mp3_parse_info_tag", "read_xing_toc", "mp3_read_header", "usetoc", "mp3_write_xing", "mp3_write_header", "mp3_write_audio_packet", "mp3_write_packet", "mp3_write_trailer", "mp3_update_xing", "id3v2_version", "write_id3v1", "write_xing", "mpegps_read_pes_header", "mpegps_read_dts", "mpegps_read_packet", "IMKH", "Sofdec", "mpegts_set_stream_info", "reanalyze", "mpegts_resync", "mpegts_open_filter", "seek_back", "parse_mp4_descr", "handle_packet", "new_pes_packet", "mpegts_push_data", "m4sl_cb", "handle_packets", "mpegts_read_header", "get_packet_size", "pat_cb", "sdt_cb", "ff_parse_mpeg2_descriptor", "drac", "HEVC", "HDMV", "HDPR", "service_name", "service_provider", "CUEI", "mpegtsraw", "mpegts", "resync_size", "compute_pcr", "ts_packetsize", "fix_teletext_pts", "scan_all_pmts", "skip_changes", "skip_clear", "mpegvideo", "check_packet", "do_packet_auto_bsf", "compute_muxer_pkt_fields", "write_packet", "av_write_uncoded_frame_internal", "avformat_alloc_output_context2", "init_muxer", "ff_interleave_add_packet", "ff_interleave_packet_per_dts", "av_interleaved_write_frame", "av_write_uncoded_frame_query", "ff_network_init", "ff_socket", "ff_listen", "ff_accept", "ff_listen_connect", "ff_vorbis_comment", "vorbis_header", "METADATA_BLOCK_PICTURE", "NAME", "io_open_default", "reading", "AVFormatContext", "avioflags", "formatprobesize", "flush_packets", "ignidx", "genpts", "nofillin", "noparse", "igndts", "discardcorrupt", "sortdts", "keepside", "fastseek", "nobuffer", "seek2any", "autobsf", "analyzeduration", "cryptokey", "indexmem", "rtbufsize", "fdebug", "max_delay", "start_time_realtime", "fpsprobesize", "audio_preload", "chunk_duration", "chunk_size", "f_err_detect", "use_wallclock_as_timestamps", "skip_initial_bytes", "metadata_header_padding", "output_ts_offset", "max_interleave_delta", "f_strict", "max_ts_probe", "avoid_negative_ts", "disabled", "make_non_negative", "make_zero", "format_whitelist", "max_streams", "pcm_read_header", "prompeg_open", "prompeg_init", "prompeg_create_bitstring", "prompeg", "force_one_stream", "rawvideo_read_header", "yuv420p", "REPLAYGAIN_TRACK_GAIN", "REPLAYGAIN_TRACK_PEAK", "REPLAYGAIN_ALBUM_GAIN", "REPLAYGAIN_ALBUM_PEAK", "HFYUD", "IV32p", "IV41q", "VP62k", "Xxanr", "cvid4", "DUCK4", "PVEZ6", "MSZH7", "S263W", "svq19", "WMVPG", "WVC1G", "WVP2I", "LOCOJ", "WNV1J", "YUV8K", "AAS4K", "AASCL", "RT21M", "theoN", "TR20P", "CSCDR", "ZMBVV", "KMVCX", "CAVSY", "mjp2Y", "MJ2CY", "LJ2CY", "LJ2KY", "IPJ2Y", "AVj2Z", "CLJRu", "LAGSl", "ZECO", "Y41P3", "CUVCF", "AV01", "IART", "ICMT", "ICOP", "ICRD", "IGNR", "ILNG", "INAM", "IPRD", "IPRT", "ITRK", "ISMP", "ITCH", "parse_waveformatex", "ff_get_wav_header", "ff_read_riff_info", "ff_end_tag", "IARL", "IART", "IAS1", "IAS2", "IAS3", "IAS4", "IAS5", "IAS6", "IAS7", "IAS8", "IAS9", "ICMS", "ICMT", "ICOP", "ICRD", "ICRP", "IDIM", "IDPI", "IENG", "IGNR", "IKEY", "ILGT", "ILNG", "IMED", "INAM", "IPLT", "IPRD", "IPRT", "ITRK", "ISBJ", "ISFT", "ISHP", "ISMP", "ISRC", "ISRF", "ITCH", "ff_put_wav_header", "idle", "ffrtmphttp", "ffrtmphttp_tls", "ff_amf_get_string", "rtmp_packet_read_one_chunk", "bytestream2_init", "ff_amf_tag_size", "amf_tag_contents", "ff_rtmp_packet_dump", "notification", "invoke", "handle_client_bw", "handle_server_bw", "handle_chunk_size", "write_begin", "bytestream2_init_writer", "bytestream2_init", "rtmp_seek", "gen_seek", "rtmp_pause", "gen_pause", "gen_fcpublish_stream", "gen_publish", "gen_play", "handle_invoke_status", "write_status", "send_invoke_response", "gen_release_stream", "gen_create_stream", "handle_invoke_result", "handle_connect_error", "handle_invoke_error", "rtmp_parse_result", "handle_ping", "gen_pong", "gen_swf_verification", "get_packet", "handle_metadata", "gen_fcunpublish_stream", "gen_delete_stream", "rtmp_open", "rtmp_calc_swfhash", "rtmp_handshake", "rtmp_calc_swf_verification", "rtmp_server_handshake", "rtmp_receive_hs_packet", "rtmp_send_hs_packet", "rtmp_write_amf_data", "read_connect", "pause", "play", "_result", "FCSubscribe", "onStatus", "status", "onFCPublish", "createStream", "releaseStream", "getStreamLength", "_checkbw", "salt", "opaque", "challenge", "nonce", "onBWDone", "FCUnpublish", "deleteStream", "rtmp", "rtmpt", "rtmpts", "rtmps", "rtmpe", "rtmpte", "ffrtmpcrypt_tunneling", "ffrtmpcrypt", "rtmpk", "rtmp_swfhash", "ondemand", "nonprivate", "flashVer", "swfUrl", "tcUrl", "fpad", "capabilities", "audioCodecs", "videoCodecs", "videoFunction", "pageUrl", "fmsVer", "objectEncoding", "rtmp_app", "rtmp_buffer", "rtmp_conn", "rtmp_flashver", "rtmp_flush_interval", "rtmp_live", "recorded", "rtmp_pageurl", "rtmp_playpath", "rtmp_subscribe", "rtmp_swfsize", "rtmp_swfurl", "rtmp_swfverify", "rtmp_tcurl", "rtmp_listen", "PCMU", "G723", "DVI4", "DVI4", "PCMA", "G722", "QCELP", "G728", "DVI4", "DVI4", "G729", "CelB", "JPEG", "H261", "MP2T", "H263", "payload_type", "scc_write_packet", "scc_write_header", "slave_seek", "subfile_open", "ff_text_init_avio", "drop_dups", "tcp_write", "tcp_read", "tcp_accept", "tcp_open", "tcp_getaddrinfo_a", "sigterm_handler", "listen_timeout", "send_buffer_size", "recv_buffer_size", "is_first_packet", "cafile", "cert", "print_tls_error", "tls_open", "ca_file", "tls_verify", "cert_file", "key_file", "verifyhost", "ttav_register_mem_protocol", "log_net_error", "udp_resolve_host", "udp_open", "udp_port", "overrun_nonfatal", "udplite_coverage", "localport", "burst_bits", "localaddr", "sources", "broadcast", "udplite", "local_port", "reuse_socket", "read_from_packet_buffer", "probe_codec", "set_codec_from_probe_data", "try_decode_frame", "ff_copy_whiteblacklists", "ffio_limit", "av_demuxer_open", "avformat_queue_attached_pictures", "ff_compute_frame_duration", "compute_pkt_fields", "update_initial_durations", "ff_add_index_entry", "ff_configure_buffers_for_index", "ff_find_last_ts", "ff_gen_search", "ff_seek_frame_binary", "ff_alloc_extradata", "ff_get_extradata", "ff_rfps_add_frame", "ff_rfps_calculate", "ff_read_packet", "read_frame_internal", "seek_frame_generic", "avformat_seek_file", "update_stream_timings", "avformat_find_stream_info", "estimate_timings_from_pts", "estimate_timings_from_bit_rate", "estimate_timings", "av_find_best_stream", "av_read_play", "av_read_pause", "ff_free_stream", "av_new_program", "avpriv_new_chapter", "av_program_add_stream_index", "avformat_open_input", "init_input", "avformat_new_stream", "avformat_query_codec", "avformat_network_init", "ff_add_param_change", "avformat_match_stream_specifier", "ff_generate_avci_extradata", "ff_stream_add_bitstream_filter", "av_apply_bitstream_filters", "ff_parse_creation_time_metadata", "ff_get_packet_palette", "mp4v", "cache", "AVERROR_DECODER_NOT_FOUND", "AVERROR", "AVERROR_PATCHWELCOME", "copy", "dvbsub", "dvbtxt", "loas", "mjpeg_2000", "ALBUMARTIST", "TRACKNUMBER", "DISCNUMBER", "DESCRIPTION", "get_bit_depth", "get_vpx_color_space", "get_vpx_chroma_subsampling", "wav_parse_bext_string", "wav_read_header", "originator", "originator_reference", "origination_date", "origination_time", "time_reference", "umid", "coding_history", "WAVE", "RIFF", "RIFX", "RF64", "ds64", "ignore_length", "peak_write_frame", "wav_write_packet", "peak_write_chunk", "wav_write_trailer", "wav_write_header", "peak_init_writer", "levl", "JUNK", "fact", "write_bext", "write_peak", "rf64", "always", "never", "peak_block_size", "peak_format", "peak_ppv", "RIFF", "WEBP", "webp_write_header", "VP8X", "ANIM", "ANMF", "av_utf8_decode", "quad", "hexagonal", "octagonal", "hexadecagonal", "downmix", "LFE2", "av_cpu_count", "armv8", "cpuflags", "BSF_NOT_FOUND", "BUG2", "BUFFER_TOO_SMALL", "DEMUXER_NOT_FOUND", "ENCODER_NOT_FOUND", "EXIT", "EXTERNAL", "FILTER_NOT_FOUND", "INPUT_CHANGED", "PROTOCOL_NOT_FOUND", "STREAM_NOT_FOUND", "UNKNOWN", "EXPERIMENTAL", "INPUT_AND_OUTPUT_CHANGED", "HTTP_BAD_REQUEST", "HTTP_UNAUTHORIZED", "HTTP_FORBIDDEN", "HTTP_NOT_FOUND", "HTTP_OTHER_4XX", "HTTP_SERVER_ERROR", "HIJACK_VID", "DRM_OPEN_FAILED", "DRM_DECRYPT_FAILED", "eval_expr", "parse_primary", "av_expr_parse", "sinh", "cosh", "tanh", "atan", "acos", "gauss", "isnan", "isinf", "while", "taylor", "floor", "ceil", "print", "random", "hypot", "ifnot", "bitand", "bitor", "between", "atan2", "QP2LAMBDA", "Eval", "av_file_map", "avpriv_open", "avpriv_tempfile", "TEMPFILE", "AVPanScan", "AVMatrixEncoding", "AVReplayGain", "YCgCo", "murmur3", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", "SHA160", "SHA224", "SHA256", "SHA384", "SHA512", "CRC32", "adler32", "av_hwframe_map", "av_hwframe_get_buffer", "av_hwframe_ctx_init", "AVHWFramesContext", "image_copy_plane", "image_copy", "av_image_check_size2", "av_image_alloc", "av_image_copy_to_buffer", "IMGUTILS", "missing_feature_sample", "quiet", "verbose", "panic", "TERM", "NO_COLOR", "AV_LOG_FORCE_NOCOLOR", "AV_LOG_FORCE_COLOR", "AV_LOG_FORCE_256COLOR", "copy_backptr", "av_rescale_delta", "ff_fast_malloc", "set_string_fmt", "write_number", "format_duration", "set_string_image_size", "set_string_color", "log_value", "set_string_video_rate", "av_opt_set_defaults2", "av_opt_set_image_size", "av_opt_set_video_rate", "set_format", "av_opt_set_channel_layout", "av_opt_get_image_size", "get_format", "av_opt_get_channel_layout", "set_string_number", "set_string_bool", "av_opt_set", "parse_key_value_pair", "av_opt_set_from_string", "av_opt_set_dict2", "opt_list", "av_opt_show2", "av_opt_is_set_to_default", "av_opt_serialize", "INT64_MAX", "INT64_MIN", "INT_MAX", "INT_MIN", "UINT32_MAX", "I64_MAX", "I64_MIN", "pixel", "av_parse_color", "bikeshed", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "BlueViolet", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "CornflowerBlue", "Cornsilk", "Crimson", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGreen", "LightGrey", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Plum", "PowderBlue", "RosyBrown", "RoyalBlue", "SaddleBrown", "SandyBrown", "SeaShell", "Sienna", "Silver", "Snow", "Teal", "Thistle", "Tomato", "Wheat", "WhiteSmoke", "YellowGreen", "january", "february", "march", "april", "june", "july", "august", "september", "october", "november", "december", "qntsc", "qpal", "sntsc", "spal", "sqcif", "qqvga", "svga", "qxga", "wvga", "wxga", "wsxga", "wuxga", "woxga", "wqsxga", "wquxga", "whsxga", "whuxga", "hd480", "hd720", "hd1080", "hqvga", "fwqvga", "hvga", "uhd2160", "uhd4320", "ff_check_pixfmt_descriptors", "yuvj", "bgra", "rgba", "rgb32", "bgr32", "vaapi", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "monow", "monob", "pal8", "yuvj420p", "yuvj422p", "yuvj444p", "xvmcmc", "xvmcidct", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "abgr", "gray16be", "gray16le", "yuv440p", "yuvj440p", "yuva420p", "vdpau_h264", "vdpau_mpeg1", "vdpau_mpeg2", "vdpau_wmv3", "vdpau_vc1", "rgb48be", "rgb48le", "rgb565be", "rgb565le", "rgb555be", "rgb555le", "bgr565be", "bgr565le", "bgr555be", "bgr555le", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16le", "yuv420p16be", "yuv422p16le", "yuv422p16be", "yuv444p16le", "yuv444p16be", "vdpau_mpeg4", "dxva2_vld", "rgb444le", "rgb444be", "bgr444le", "bgr444be", "gray8a", "bgr48be", "bgr48le", "yuv420p9be", "yuv420p9le", "yuv420p10be", "yuv420p10le", "yuv422p10be", "yuv422p10le", "yuv444p9be", "yuv444p9le", "yuv444p10be", "yuv444p10le", "yuv422p9be", "yuv422p9le", "vda_vld", "gbrp9be", "gbrp9le", "gbrp10be", "gbrp10le", "gbrp16be", "gbrp16le", "yuva422p", "yuva444p", "yuva420p9be", "yuva420p9le", "yuva422p9be", "yuva422p9le", "yuva444p9be", "yuva444p9le", "yuva420p10be", "yuva420p10le", "yuva422p10be", "yuva422p10le", "yuva444p10be", "yuva444p10le", "yuva420p16be", "yuva420p16le", "yuva422p16be", "yuva422p16le", "yuva444p16be", "yuva444p16le", "vdpau", "xyz12le", "xyz12be", "nv16", "nv20le", "nv20be", "rgba64be", "rgba64le", "bgra64be", "bgra64le", "yvyu422", "ya16be", "ya16le", "gbrap", "gbrap16be", "gbrap16le", "mmal", "d3d11va_vld", "cuda", "rgb0", "bgr0", "yuv420p12be", "yuv420p12le", "yuv420p14be", "yuv420p14le", "yuv422p12be", "yuv422p12le", "yuv422p14be", "yuv422p14le", "yuv444p12be", "yuv444p12le", "yuv444p14be", "yuv444p14le", "gbrp12be", "gbrp12le", "gbrp14be", "gbrp14le", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16le", "bayer_bggr16be", "bayer_rggb16le", "bayer_rggb16be", "bayer_gbrg16le", "bayer_gbrg16be", "bayer_grbg16le", "bayer_grbg16be", "yuv440p10le", "yuv440p10be", "yuv440p12le", "yuv440p12be", "ayuv64le", "ayuv64be", "videotoolbox_vld", "p010le", "p010be", "gbrap12be", "gbrap12le", "gbrap10be", "gbrap10le", "mediacodec", "gray12be", "gray12le", "gray10be", "gray10le", "p016le", "p016be", "av_pixelutils_get_sad_fn", "s16p", "s32p", "fltp", "dblp", "s64p", "cubemap", "check_timecode", "av_timecode_init_from_string", "IPBSipb", "av_int_list_length_for_size", "attachment", "fffffff", "x00000x", "p000x", "p00000x", "p000x", "p000x", "p000x", "swri_get_dither", "swri_dither_init", "SWResampler", "in_channel_count", "out_channel_count", "used_channel_count", "out_sample_rate", "in_sample_fmt", "out_sample_fmt", "internal_sample_fmt", "in_channel_layout", "out_channel_layout", "clev", "center_mix_level", "slev", "surround_mix_level", "lfe_mix_level", "rmvol", "rematrix_volume", "rematrix_maxval", "swr_flags", "dither_scale", "dither_method", "triangular", "triangular_hp", "lipshitz", "low_shibata", "high_shibata", "f_weighted", "modified_e_weighted", "improved_e_weighted", "filter_size", "phase_shift", "linear_interp", "exact_rational", "resample_cutoff", "resampler", "soxr", "cheby", "min_comp", "min_hard_comp", "comp_duration", "max_soft_comp", "first_pts", "matrix_encoding", "dolby", "dplii", "filter_type", "blackman_nuttall", "kaiser", "kaiser_beta", "output_sample_bits", "clean_layout", "swr_build_matrix", "swri_rematrix_init", "swri_rematrix", "build_filter", "resample_init", "copy", "swr_alloc_set_opts", "swr_init", "swri_realloc_audio", "swr_convert_internal", "swr_convert", "swr_drop_output", "swr_inject_silence", "swr_get_out_samples", "swr_next_pts", "swr_config_frame", "isGray", "ff_sws_alphablendaway", "isBE", "isALPHA", "isBE", "is16BPS", "isNBPS", "swscaler", "SWScaler", "fast_bilinear", "bicubic", "bicublin", "Gaussian", "lanczos", "Lanczos", "print_info", "accurate_rnd", "full_chroma_int", "full_chroma_inp", "error_diffusion", "sws_dither", "a_dither", "x_dither", "alphablend", "uniform_color", "isBE", "is16BPS", "isNBPS", "ff_sws_init_output_funcs", "alloc_lines", "isPlanarYUV", "isYUV", "isGray", "usePal", "isALPHA", "isPlanar", "usePal", "isAnyRGB", "isNBPS", "is16BPS", "isPacked", "swscale", "isGray", "isBayer", "sws_scale", "Rgb16ToPlanarRgb16Wrapper", "bayer_to_yv12_wrapper", "bayer_to_rgb24_wrapper", "planar8ToP01xleWrapper", "planarToP010Wrapper", "is16BPS", "isNBPS", "isBE", "palToRgbWrapper", "rgbToPlanarRgbWrapper", "planarRgbToRgbWrapper", "rgbToRgbWrapper", "isAnyRGB", "isPlanar", "isPackedRGB", "isBayer", "ff_get_unscaled_swscale", "isPlanarYUV", "isYUV", "isGray", "isPacked", "initFilter", "sws_printVec2", "sws_init_context", "isAnyRGB", "isPlanarRGB", "isBayer", "isALPHA", "isYUV", "isGray", "sws_setColorspaceDetails", "isNBPS", "is16BPS", "packed_vscale", "isPlanarYUV", "isYUV", "isGray", "isALPHA", "ff_yuv2rgb_get_func_ptr", "isALPHA", "isPlanar", "ff_yuv2rgb_c_init_tables", "ff_audio_convert_set_func", "ff_audio_convert", "ff_audio_data_init", "ff_audio_data_copy", "ff_audio_data_combine", "AudioData", "ff_audio_mix_set_func", "ff_audio_mix", "ff_audio_mix_get_matrix", "ff_audio_mix_set_matrix", "mix_function_init", "ff_audio_mix_alloc", "ff_dither_alloc", "AVAudioResampleContext", "s16p", "s32p", "fltp", "dblp", "mix_coeff_type", "normalize_mix_level", "force_resampling", "None", "Cubic", "triangular_ns", "ff_audio_resample_init", "avresample_set_compensation", "ff_audio_resample", "handle_buffered_output", "avresample_open", "avresample_convert", "avresample_get_matrix", "avresample_set_matrix", "avresample_set_channel_mapping", "in_buffer", "resample_out_buffer", "NEON"], "debugstrings": ["GPSVersionID", "The specified JNI version is not supported\n", "Using libwebp for RGB-to-YUV conversion. You may want to consider passing in YUV instead for lossy encoding.\n", "Using libwebp for YUV-to-RGB conversion. You may want to consider passing in RGB instead for lossless encoding.\n", "range <= 16 || !s->msmpeg4_version", "bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n", "old standard qpel (autodetected per FOURCC/version)", "direct-qpel-blocksize bug (autodetected per FOURCC/version)", "edge padding bug (autodetected per FOURCC/version)", "strictly conform to a older more strict version of the spec or reference software", "Audio sample format conversion failed\n", "FFmpeg version 3.3.2", "libavcodec license: LGPL version 2.1 or later", "Character encoding subtitles conversion needs a libavcodec built with iconv support for this codec\n", "FFmpeg version 3.3.2", "libavfilter license: LGPL version 2.1 or later", "The filters '%s' and '%s' do not have a common format and automatic conversion is disabled.\n", "Color conversion not implemented for %s\n", "Unsupported tag version. (>=%d)\n", "ffconcat version 1.0", "Line %d: invalid version\n", "#version: %d\n", "format_version", "file format version", "configurationVersion:                %u\n", "Malformed HTTP version string.\n", "HTTP version string: %s\n", "EBML version %lu, doctype %s, doc version %lu", "EBML header using unsupported features\n(EBML version %lu, doctype %s, doc version %lu)\n", "minor_version", "Unsupported Content Light Level box version %d\n", "Unsupported VP Codec Configuration box version %d\n", "Unsupported Mastering Display Metadata box version %d\n", "unsupported OpusSpecificBox version\n", "Unknown spherical version %d\n", "sidx version %u", "premiere_version", "quicktime_version", "Version %d", "version =%d, isom =%d\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n", "Invalid ID3v2 version requested: %d. Only 3, 4 or 0 (disabled) are allowed.\n", "id3v2_version", "Select ID3v2 version to write. Currently 3 and 4 are supported.", "sid=0x%x sec_num=%d/%d version=%d tid=%d\n", "Server version %d.%d.%d.%d\n", "RTMP protocol version mismatch\n", "Version of the Flash plugin used to run the SWF player.", "FFmpeg version 3.3.2", "libavformat license: LGPL version 2.1 or later", "Unknown SMV version found\n", "libavutil license: LGPL version 2.1 or later", "FFmpeg version 3.3.2", "libswresample license: LGPL version 2.1 or later", "unsupported planar RGB conversion %s -> %s\n", "unsupported conversion to planar RGB %s -> %s\n", "unsupported bayer conversion\n", "libswscale license: LGPL version 2.1 or later", "No accelerated colorspace conversion found from %s to %s.\n", "cannot remap packed format during conversion\n", "[end conversion]\n", "[start conversion]\n", "libavresample license: LGPL version 2.1 or later", "GCC: (GNU) 4.9 20140827 (prerelease)"], "localsymbols": [""], "dependencies": ["libttopenssl.so", "libm.so", "libc.so", "libdl.so", "libz.so"], "elfname": "libttffmpeg.so"}